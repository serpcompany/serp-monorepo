[
  {
    "owner": "nrwl",
    "repo": "nx",
    "content": "TITLE: Creating a New Nx Workspace\nDESCRIPTION: Command to create a new Nx workspace using npx. This is the recommended way to start a new Nx project.\nSOURCE: https://github.com/nrwl/nx/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace\n```\n\n----------------------------------------\n\nTITLE: Configure Nx workspace settings in nx.json (Full Example)\nDESCRIPTION: This code snippet shows a complete example of an `nx.json` file, demonstrating how to configure plugins, parallel task execution, cache directory, default base branch, named inputs, target defaults, release configuration, sync settings, generators, and extends. It provides a comprehensive overview of the configurable options within `nx.json`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/eslint/plugin\",\n      \"options\": {\n        \"targetName\": \"lint\"\n      }\n    }\n  ],\n  \"parallel\": 4,\n  \"cacheDirectory\": \"tmp/my-nx-cache\",\n  \"defaultBase\": \"main\",\n  \"namedInputs\": {\n    \"default\": [\"{projectRoot}/**/*\"],\n    \"production\": [\"!{projectRoot}/**/*.spec.tsx\"]\n  },\n  \"targetDefaults\": {\n    \"@nx/js:tsc\": {\n      \"inputs\": [\"production\", \"^production\"],\n      \"dependsOn\": [\"^build\"],\n      \"options\": {\n        \"main\": \"{projectRoot}/src/index.ts\"\n      },\n      \"cache\": true\n    },\n    \"test\": {\n      \"cache\": true,\n      \"inputs\": [\"default\", \"^production\", \"{workspaceRoot}/jest.preset.js\"],\n      \"outputs\": [\"{workspaceRoot}/coverage/{projectRoot}\"],\n      \"executor\": \"@nx/jest:jest\"\n    }\n  },\n  \"release\": {\n    \"version\": {\n      \"conventionalCommits\": true\n    },\n    \"changelog\": {\n      \"git\": {\n        \"commit\": true,\n        \"tag\": true\n      },\n      \"workspaceChangelog\": {\n        \"createRelease\": \"github\"\n      },\n      \"projectChangelogs\": true\n    }\n  },\n  \"sync\": {\n    \"globalGenerators\": [\"my-plugin:my-sync-generator\"]\n  },\n  \"generators\": {\n    \"@nx/js:library\": {\n      \"buildable\": true\n    }\n  },\n  \"extends\": \"nx/presets/npm.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Module Boundary Rules\nDESCRIPTION: ESLint configuration to enforce module boundaries between libraries based on their tags\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport nx from '@nx/eslint-plugin';\n\nexport default [\n  {\n    files: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx'],\n    rules: {\n      '@nx/enforce-module-boundaries': [\n        'error',\n        {\n          enforceBuildableLibDependency: true,\n          allow: ['^.*/eslint(\\.base)?\\.config\\\\.[cm]?js$'],\n          depConstraints: [\n            {\n              sourceTag: 'type:feature',\n              onlyDependOnLibsWithTags: ['type:feature', 'type:ui']\n            },\n            {\n              sourceTag: 'type:ui',\n              onlyDependOnLibsWithTags: ['type:ui']\n            },\n            {\n              sourceTag: 'scope:orders',\n              onlyDependOnLibsWithTags: [\n                'scope:orders',\n                'scope:products', \n                'scope:shared'\n              ]\n            },\n            {\n              sourceTag: 'scope:products',\n              onlyDependOnLibsWithTags: ['scope:products', 'scope:shared']\n            },\n            {\n              sourceTag: 'scope:shared',\n              onlyDependOnLibsWithTags: ['scope:shared']\n            },\n            {\n              sourceTag: '*',\n              onlyDependOnLibsWithTags: ['*']\n            }\n          ]\n        }\n      ]\n    }\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Running Generated Migrations\nDESCRIPTION: This command executes the code migrations generated in the migrations.json file. It updates the source code and configuration files in the workspace, preparing the changes for review and commit.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/automate-updating-dependencies.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"nx migrate --run-migrations\"\n```\n\n----------------------------------------\n\nTITLE: Simplified Configuration for lib1 after targetDefaults\nDESCRIPTION: The reduced project.json for lib1 after moving common configuration to targetDefaults, only overriding the assets configuration for the build target.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/reduce-repetitive-configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"lib1\",\n  \"$schema\": \"../../node_modules/nx/schemas/project-schema.json\",\n  \"sourceRoot\": \"libs/lib1/src\",\n  \"projectType\": \"library\",\n  \"targets\": {\n    \"build\": {\n      \"options\": {\n        \"assets\": [\"libs/lib1/*.md\", \"libs/lib1/src/images/*\"]\n      }\n    },\n    \"lint\": {},\n    \"test\": {}\n  },\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Release Script with Nx Release API\nDESCRIPTION: Presents a TypeScript example of a custom release script using the Nx Release programmatic API. This script defines CLI arguments using `yargs`, then calls `releaseVersion`, `releaseChangelog`, and `releasePublish` to perform the release steps, providing maximum control over the entire process. It processes command line arguments for dry run and verbosity.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/manage-releases.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { releaseChangelog, releasePublish, releaseVersion } from 'nx/release';\nimport * as yargs from 'yargs';\n\n(async () => {\n  const options = await yargs\n    .version(false) // don't use the default meaning of version in yargs\n    .option('version', {\n      description:\n        'Explicit version specifier to use, if overriding conventional commits',\n      type: 'string',\n    })\n    .option('dryRun', {\n      alias: 'd',\n      description:\n        'Whether or not to perform a dry-run of the release process, defaults to true',\n      type: 'boolean',\n      default: true,\n    })\n    .option('verbose', {\n      description:\n        'Whether or not to enable verbose logging, defaults to false',\n      type: 'boolean',\n      default: false,\n    })\n    .parseAsync();\n\n  const { workspaceVersion, projectsVersionData } = await releaseVersion({\n    specifier: options.version,\n    dryRun: options.dryRun,\n    verbose: options.verbose,\n  });\n\n  await releaseChangelog({\n    versionData: projectsVersionData,\n    version: workspaceVersion,\n    dryRun: options.dryRun,\n    verbose: options.verbose,\n  });\n\n  // publishResults contains a map of project names and their exit codes\n  const publishResults = await releasePublish({\n    dryRun: options.dryRun,\n    verbose: options.verbose,\n  });\n\n  process.exit(\n    Object.values(publishResults).every((result) => result.code === 0) ? 0 : 1\n  );\n})();\n```\n\n----------------------------------------\n\nTITLE: Generating a Remix Application with Nx\nDESCRIPTION: Creates a new Remix application in the Nx workspace using the Remix plugin generator. Configures the application with Vitest for unit testing and Playwright for end-to-end testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/remix.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/remix:app apps/myapp\n```\n\n----------------------------------------\n\nTITLE: Installing Nx using npx\nDESCRIPTION: Command to initialize Nx in an existing project using the npx command. This is the easiest way to start using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/manual.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Adding Sync Check to CI Pipeline\nDESCRIPTION: YAML configuration for adding nx sync:check command to CI process to ensure workspace configuration is synchronized\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/owners/owners-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Ensure the workspace configuration is in sync\n  run: npx nx sync:check\n```\n\n----------------------------------------\n\nTITLE: Using getPackageManagerCommand for Package Installation\nDESCRIPTION: Demonstrates how to use the getPackageManagerCommand function to add a development dependency to a project. The function returns standardized commands that work across different package managers and can be used with execSync.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/getPackageManagerCommand.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexecSync(`${getPackageManagerCommand().addDev} my-dev-package`);\n```\n\n----------------------------------------\n\nTITLE: Configure Projects to Release\nDESCRIPTION: This JSON snippet configures which projects to release by adding the `release.projects` property to `nx.json`. The value is an array of strings that specifies the projects to include in the release, using glob patterns.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/get-started-with-nx-release.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"release\": {\n    \"projects\": [\"packages/*\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Federating Module for React in Nx\nDESCRIPTION: Use Nx CLI to federate the 'hello' module for a React application, exposing it through the 'greeting' remote.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/federate-a-module.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/react:federate-module hello/src/index.ts --name=hello --remote=greeting\n```\n\n----------------------------------------\n\nTITLE: Generating a React Host Application with Nx\nDESCRIPTION: This command uses the Nx generator to create a new React host application for Module Federation. It sets up the necessary files and configurations for a React-based host.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/creating-a-host.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react:host apps/react/shell\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Dependencies in nx.json\nDESCRIPTION: Example of how to configure task dependencies in nx.json using the new compact syntax for task pipelines. This setup defines build dependencies and publish requirements.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-10-14-whats-new-in-nx-15.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"]\n    },\n    \"dev\": {\n      \"dependsOn\": [\"^build\"]\n    },\n    \"publish\": {\n      \"dependsOn\": [\"build\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating React Module Federation Host with Dynamic Federation in Nx\nDESCRIPTION: Command to generate a React module federation host application with dynamic federation capabilities using the Nx CLI. The command creates a host app named 'acme' with a remote called 'nx' and enables dynamic federation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-12-20-nx-17-2-release.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/react:host apps/acme --remotes=nx --dynamic\n```\n\n----------------------------------------\n\nTITLE: Extending Module Federation Configuration in Shell\nDESCRIPTION: This snippet demonstrates how to extend the base Module Federation configuration in the shell application.  It imports the base configuration and then adds application-specific settings like the `name` and `remotes` to complete the configuration for the shell application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/micro-frontend-architecture.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ModuleFederationConfig } from '@nx/webpack';\nimport baseConfig from '../../module-federation.config';\n\nexport const config: ModuleFederationConfig = {\n  ...baseConfig,\n  name: 'shell',\n  remotes: ['shop', 'cart', 'about'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Remote Module Loading in Routes\nDESCRIPTION: Updates the Angular routes configuration to use the loadRemoteModule helper for dynamic loading of remote modules at runtime based on the manifest configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Route } from '@angular/router';\nimport { loadRemoteModule } from '@nx/angular/mf';\nimport { AppComponent } from './app.component';\n\nexport const appRoutes: Route[] = [\n  {\n    path: 'login',\n    loadChildren: () =>\n      loadRemoteModule('login', './Routes').then((m) => m.remoteRoutes),\n  },\n  {\n    path: '',\n    component: AppComponent,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Inputs and Named Inputs for Task Caching\nDESCRIPTION: Example showing how to define namedInputs for reuse across multiple targets and how to reference them in a target's inputs configuration along with external dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_8\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"namedInputs\": {\n    \"default\": [\"{projectRoot}/**/*\"], // every file in the project\n    \"production\": [\"default\", \"!{projectRoot}/**/*.spec.tsx\"] // except test files\n  },\n  \"targets\": {\n    \"build\": {\n      \"inputs\": [\n        \"production\", // this project's production files\n        { \"externalDependencies\": [\"vite\"] } // the version of the vite package\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Assignment Rules for Nx Agents in YAML\nDESCRIPTION: Example YAML configuration for assignment rules using Nx Agents. It defines distribution settings and rules for specific projects, targets, and configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/assignment-rules.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndistribute-on:\n  default: 5 linux-medium-js, 5 linux-large-js\n\nassignment-rules:\n  - projects:\n      - app1\n    targets:\n      - e2e-ci*\n    configurations:\n      - production\n    run-on:\n      - agent: linux-medium\n        parallelism: 5\n\n  - targets:\n      - lint\n      - build\n    run-on:\n      - agent: linux-large\n        parallelism: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitbucket Pipelines with Node.js for Nx\nDESCRIPTION: This YAML configuration snippet sets up Bitbucket Pipelines to run affected command workflows in an Nx workspace, handling pull requests and branches. It specifies Node.js 20 as the base image and uses Nx Cloud for distribution and recording of tasks. Dependencies include Node.js and Nx Cloud. Key parameters include `BITBUCKET_BRANCH` for branch-specific logic and `nx affected` with various targets for selective task execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/monorepo-ci-bitbucket-pipelines.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage: node:20\n\nclone:\n  depth: full\n\npipelines:\n  pull-requests:\n    '**':\n      - step:\n          name: 'Build and test affected apps on Pull Requests'\n          script:\n            # This line enables distribution\n            # The \"--stop-agents-after\" is optional, but allows idle agents to shut down once the \"e2e-ci\" targets have been requested\n            - npx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\" --stop-agents-after=\"e2e-ci\"\n            - npm ci\n\n            - npx nx-cloud record -- nx format:check\n            - npx nx affected -t lint test build e2e-ci --base=origin/main\n\n  branches:\n    main:\n      - step:\n          name: \"Build and test affected apps on 'main' branch changes\"\n          script:\n            - export NX_BRANCH=$BITBUCKET_BRANCH\n            # This line enables distribution\n            # The \"--stop-agents-after\" is optional, but allows idle agents to shut down once the \"e2e-ci\" targets have been requested\n            # - npx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\" --stop-agents-after=\"e2e-ci\"\n            - npm ci\n\n            - npx nx-cloud record -- nx format:check\n            - npx nx affected -t lint test build e2e-ci --base=HEAD~1\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Script for Package.json and Lock File Generation\nDESCRIPTION: A custom Node.js script that uses Nx utilities to generate a package.json and lock file for a project. It detects the package manager, creates a project graph, and writes the generated files to the specified output directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/ci-deployment.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  createProjectGraphAsync,\n  readCachedProjectGraph,\n  detectPackageManager,\n  writeJsonFile,\n} = require('@nx/devkit');\nconst {\n  createLockFile,\n  createPackageJson,\n  getLockFileName,\n} = require('@nx/js');\nconst { writeFileSync } = require('fs');\n\nasync function main() {\n  const outputDir = 'dist'; // You can replace this with the output directory you want to use\n  // Detect the package manager you are using (npm, yarn, pnpm)\n  const pm = detectPackageManager();\n  let projectGraph = readCachedProjectGraph();\n  if (!projectGraph) {\n    projectGraph = await createProjectGraphAsync();\n  }\n  // You can replace <NX_TASK_TARGET_PROJECT> with the name of the project if you want.\n  const projectName = process.env.NX_TASK_TARGET_PROJECT;\n  const packageJson = createPackageJson(projectName, projectGraph, {\n    isProduction: true, // Used to strip any non-prod dependencies\n    root: projectGraph.nodes[projectName].data.root,\n  });\n\n  const lockFile = createLockFile(\n    packageJson,\n    projectGraph,\n    detectPackageManager()\n  );\n\n  const lockFileName = getLockFileName(pm);\n\n  writeJsonFile(`${outputDir}/package.json`, packageJson);\n  writeFileSync(`${outputDir}/${lockFileName}`, lockFile, {\n    encoding: 'utf8',\n  });\n\n  //... Any additional steps you want to run\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Dependencies in Project Configuration\nDESCRIPTION: JSON configuration that defines implicit dependencies for a host application on its remote applications. This ensures proper build order when using Nx's dependency graph.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/faster-builds.md#2025-04-22_snippet_10\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  //...\n  \"implicitDependencies\": [\"about\", \"shop\", \"cart\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Scripts in package.json with Nx Commands (Diff JSON)\nDESCRIPTION: This diff snippet shows the updates Nx makes to the package.json scripts section, replacing existing commands with Nx commands that have caching enabled. It demonstrates the integration of plugins such as @nx/next/plugin and @nx/eslint/plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-existing-project.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-workspace\",\n  ...\n  \"scripts\": {\n-     \"build\": \"next build && echo 'Build complete'\",\n+     \"build\": \"nx next:build && echo 'Build complete'\",\n-     \"lint\": \"eslint ./src\",\n+     \"lint\": \"nx eslint:lint\",\n    \"test\": \"node ./run-tests.js\"\n  },\n+   \"nx\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Define Cacheable Tasks in Nx (For Nx >= 17)\nDESCRIPTION: This snippet shows how to enable caching for build and test tasks by editing the targetDefaults property in nx.json. Caching is set to true to prevent redundant task executions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/cache-task-results.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"build\": {\n      \"cache\": true\n    },\n    \"test\": {\n      \"cache\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Nx CI\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow for building and testing only the affected parts of an Nx workspace. It uses various GitHub actions to checkout the repository, set up Node.js with a specified version and cache, and run Nx commands. The setup requires dependencies such as actions/checkout, actions/setup-node, and nrwl/nx-set-shas. The workflow is designed to run on the main branch for both push and pull request events. Expected outcomes include successful builds and tests for only the changed components, enhancing CI efficiency.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/monorepo-ci-github-actions.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\non:\n  push:\n    branches:\n      # Change this if your primary branch is not main\n      - main\n  pull_request:\n\n# Needed for nx-set-shas when run on the main branch\npermissions:\n  actions: read\n  contents: read\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          filter: tree:0\n\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n          cache: 'npm'\n      # This line enables distribution\n      # The \"--stop-agents-after\" is optional, but allows idle agents to shut down once the \"e2e-ci\" targets have been requested\n      # - run: npx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\" --stop-agents-after=\"e2e-ci\"\n      - run: npm ci\n\n      - uses: nrwl/nx-set-shas@v4\n\n      - run: npx nx-cloud record -- nx format:check\n      - run: npx nx affected -t lint test build e2e-ci\n```\n\n----------------------------------------\n\nTITLE: Defining Project Dependencies in Nx\nDESCRIPTION: This snippet provides a JSON configuration for defining project dependencies within an Nx monorepo. It specifies the relationships between various projects, such as 'myreactapp', 'shared-ui', and 'feat-products', highlighting which projects depend on others. This setup ensures that builds occur in the correct order, respecting the interdependencies. No external dependencies are required to understand this snippet.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/task-pipeline-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projects\": [\n    {\n      \"name\": \"myreactapp\",\n      \"type\": \"app\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"shared-ui\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"feat-products\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    }\n  ],\n  \"dependencies\": {\n    \"myreactapp\": [\n      { \"source\": \"myreactapp\", \"target\": \"feat-products\", \"type\": \"static\" }\n    ],\n    \"shared-ui\": [],\n    \"feat-products\": [\n      {\n        \"source\": \"feat-products\",\n        \"target\": \"shared-ui\",\n        \"type\": \"static\"\n      }\n    ]\n  },\n  \"workspaceLayout\": { \"appsDir\": \"\", \"libsDir\": \"\" },\n  \"affectedProjectIds\": [],\n  \"focus\": null,\n  \"groupByFolder\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Github Actions Workflow for Publishing Packages with Nx Release\nDESCRIPTION: This YAML configuration defines a GitHub Actions workflow to automate the publishing of packages when a new tag is pushed to the repository. It checks out the code, sets up Node.js, installs dependencies, and runs `nx release publish` with the necessary environment variables, including the NPM authentication token and provenance settings.  Requires `NPM_ACCESS_TOKEN` Github Secret.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/publish-in-ci-cd.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n# ./.github/workflows/publish.yml\nname: Publish\n\non:\n  push:\n    tags:\n      - v*.*.*\n\njobs:\n  test:\n    name: Publish\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      id-token: write # needed for provenance data generation\n    timeout-minutes: 10\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          filter: tree:0\n\n      - name: Install Node\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          registry-url: https://registry.npmjs.org/\n\n      - name: Install dependencies\n        run: npm install\n        shell: bash\n\n      - name: Print Environment Info\n        run: npx nx report\n        shell: bash\n\n      - name: Publish packages\n        run: npx nx release publish\n        shell: bash\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}\n          NPM_CONFIG_PROVENANCE: true\n```\n\n----------------------------------------\n\nTITLE: Running Nx Migrations (Shell)\nDESCRIPTION: After updating the dependencies, this command executes any necessary automated code migrations. These migrations handle breaking changes between versions and update your codebase accordingly.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-02-16-nx-15-7-node-support-angular-lts-lockfile-pruning.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Implementing targetDefaults in nx.json\nDESCRIPTION: A centralized configuration in nx.json that defines default settings for build, lint, and test targets using the targetDefaults property, reducing repetition across projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/reduce-repetitive-configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"build\": {\n      \"executor\": \"@nx/js:tsc\",\n      \"outputs\": [\"{options.outputPath}\"],\n      \"options\": {\n        \"outputPath\": \"dist/{projectRoot}\",\n        \"main\": \"{projectRoot}/src/index.ts\",\n        \"tsConfig\": \"{projectRoot}/tsconfig.lib.json\",\n        \"assets\": [\"{projectRoot}/*.md\"]\n      }\n    },\n    \"lint\": {\n      \"executor\": \"@nx/eslint:lint\",\n      \"outputs\": [\"{options.outputFile}\"],\n      \"options\": {\n        \"lintFilePatterns\": [\"{projectRoot}/**/*.ts\"]\n      }\n    },\n    \"test\": {\n      \"executor\": \"@nx/jest:jest\",\n      \"outputs\": [\"{workspaceRoot}/coverage/{projectRoot}\"],\n      \"options\": {\n        \"jestConfig\": \"{projectRoot}/jest.config.ts\",\n        \"passWithNoTests\": true\n      },\n      \"configurations\": {\n        \"ci\": {\n          \"ci\": true,\n          \"codeCoverage\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nx Custom Generator Function in TypeScript\nDESCRIPTION: This TypeScript code defines the structure of a custom Nx generator function. It receives a Tree object representing the workspace and a schema object for generator options. It uses @nx/devkit utilities for file formatting and package installation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/generate-code.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tree, formatFiles, installPackagesTask } from '@nx/devkit';\n\nexport default async function (tree: Tree, schema: any) {\n  // Your implementation here\n  // ...\n\n  await formatFiles(tree);\n  return () => {\n    installPackagesTask(tree);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Project Tags in project.json\nDESCRIPTION: Configure project tags in project.json to define project scopes and dependency constraints\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/enforce-module-boundaries.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"tags\": [\"scope:client\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Nx in Angular CLI\nDESCRIPTION: This command installs the correct version of Nx based on your Angular version and enables Nx CLI within your existing Angular CLI workspace without altering the file structure. It installs `nx`, `@nx/workspace` and `prettier` packages and creates an `nx.json` file in the root of the workspace.  For Angular 14+ repos, it also splits the `angular.json` file into separate `project.json` files for each project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/migration-angular.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Remote Module Loading in Main Entry\nDESCRIPTION: Updates the main entry file to fetch remote module definitions at runtime from a JSON manifest. This enables dynamic loading of remote modules rather than using static configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setRemoteDefinitions } from '@nx/angular/mf';\n\nfetch('/module-federation.manifest.json')\n  .then((res) => res.json())\n  .then((definitions) => setRemoteDefinitions(definitions))\n  .then(() => import('./bootstrap').catch((err) => console.error(err)));\n```\n\n----------------------------------------\n\nTITLE: Storybook Main Configuration\nDESCRIPTION: Example of a Storybook main configuration file showing how to add addons.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/storybook/plugin-overview.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/react-vite';\n\nconst config: StorybookConfig = {\n  ...\n  addons: ['@storybook/addon-essentials', '@storybook/addon-interactions', ...],\n  ...\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Initializing Nx Monorepo in Angular CLI\nDESCRIPTION: This command migrates an Angular CLI project to an Nx Monorepo. It installs the necessary Nx packages, including `@nx/angular`, moves applications and libraries into dedicated folders (`apps` and `libs`), updates configuration files, updates `package.json` scripts, and splits `angular.json` into individual `project.json` files for each project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/migration-angular.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx@latest init --integrated\n```\n\n----------------------------------------\n\nTITLE: Updating Nx Dependencies with Migration Command\nDESCRIPTION: Command to update Nx to the latest version before migrating to inferred tasks, which is recommended for the best experience.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/convert-to-inferred.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\n----------------------------------------\n\nTITLE: Target Defaults for Angular Webpack-Browser in nx.json\nDESCRIPTION: Configuration for nx.json to set up target defaults for the @nx/angular:webpack-browser executor, enabling incremental builds across all projects using webpack for Angular builds.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/setup-incremental-builds-angular.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"@nx/angular:webpack-browser\": {\n      \"dependsOn\": [\"^build\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SVGs as React Components (TypeScript)\nDESCRIPTION: The code imports an SVG file as a React component using SVGR in TypeScript. The SVG component is treated like a regular React component, supporting props useful in styling and accessibility.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/adding-assets.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { ReactComponent as Logo } from './logo.svg';\n\nconst Header = () => <Logo title=\"Logo\" />;\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: Multiple Target Execution\nDESCRIPTION: Run multiple targets (lint, test, build) for all projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run-many.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many --targets=lint,test,build\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Host and Remote Applications with Nx\nDESCRIPTION: This snippet demonstrates how to generate a host application (shell) with remotes (shop, cart) and a remote application (about) using the Nx CLI with Angular. It uses the `@nx/angular:host` and `@nx/angular:remote` generators to set up the project for a Micro Frontend architecture.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/micro-frontend-architecture.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:host apps/shell --remotes=shop,cart\nnx g @nx/angular:remote apps/about --host=shell\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Boundary Rules with notDependOnLibsWithTags\nDESCRIPTION: ESLint configuration using the new notDependOnLibsWithTags property for Nx module boundary rules. This makes it easier to define forbidden dependencies by specifying which tags a library cannot depend on.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-08-what-is-new-in-nx-13-10.md#2025-04-22_snippet_4\n\nLANGUAGE: json5\nCODE:\n```\n{\n  // ... more ESLint config here \"@nrwl/nx/enforce-module-boundaries\": [\n    \"error\",\n    {\n      // update depConstraints based on your tags\n      \"depConstraints\": [\n        {\n          \"sourceTag\": \"type:util\",\n          \"notDependOnLibsWithTags\": [\"type:feature\"]\n        }\n      ]\n    }\n  ] // ... more ESLint config here\n}\n```\n\n----------------------------------------\n\nTITLE: Shared Tailwind CSS Configuration as a Preset\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure a shared Tailwind CSS theme using a preset stored in a separate library. This configuration allows multiple applications and libraries to share a centralized Tailwind configuration, helping maintain consistency across different projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-with-angular-projects.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  theme: {\n    colors: {\n      primary: {\n        light: '#5eead4',\n        DEFAULT: '#14b8a6',\n        dark: '#0f766e',\n      },\n      secondary: {\n        light: '#bae6fd',\n        DEFAULT: '#0ea5e9',\n        dark: '#0369a1',\n      },\n      white: '#ffffff',\n      black: '#000000',\n    },\n    spacing: {\n      sm: '0.5rem',\n      md: '1rem',\n      lg: '1.5rem',\n      xl: '2rem',\n    },\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Nx Projects\nDESCRIPTION: This YAML snippet shows key parts of the generated CI workflow file. It includes steps for checking out the code, setting up Node.js, installing dependencies, and running Nx affected commands. It also contains commented lines for enabling Nx Cloud task distribution.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/3a-fast-ci/3-create-ci-workflow/content.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\n# ...\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      # This enables task distribution via Nx Cloud\n      # Run this command as early as possible, before dependencies are installed\n      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun\n      # Uncomment this line to enable task distribution\n      # - run: npx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\" --stop-agents-after=\"e2e-ci\"\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n          cache: 'npm'\n      - run: npm ci --legacy-peer-deps\n      - uses: nrwl/nx-set-shas@v4\n      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected\n      # When you enable task distribution, run the e2e-ci task instead of e2e\n      - run: npx nx affected -t lint test build e2e\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Inputs in Nx\nDESCRIPTION: Demonstrates how to use runtime inputs to include command output in the Nx cache hash computation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/inputs.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n\"inputs\": [\n  { \"runtime\": \"node --version\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Watching All Projects for Changes in Nx\nDESCRIPTION: Command to watch all projects in an Nx workspace and execute build for each project when files change. Uses the NX_PROJECT_NAME environment variable that's automatically populated by Nx watch.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/workspace-watching.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx watch --all -- nx run \\$NX_PROJECT_NAME:build\n```\n\n----------------------------------------\n\nTITLE: Delegating Build with Nx Angular in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure Nx to delegate a project's build process to a different build target when not watching for changes. It specifies the executor and options such as the build target, output path, and TypeScript configuration file. The 'watch' option is set to false, indicating this configuration is used for one-off builds.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/delegate-build-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"prod-build\": {\n    \"executor\": \"@nx/angular:delegate-build\",\n    \"options\": {\n      \"buildTarget\": \"app:build:production\",\n      \"outputPath\": \"dist/apps/app/production\",\n      \"tsConfig\": \"apps/app/tsconfig.json\",\n      \"watch\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind CSS to an Nx React Project\nDESCRIPTION: Command to run the Nx generator that sets up Tailwind CSS in your React or Next.js project. This installs dependencies, configures Tailwind with PostCSS, and updates your main CSS file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-02-09-setup-react-and-tailwind-the-easy-way.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ npx nx g @nrwl/react:setup-tailwind\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Federation in JavaScript\nDESCRIPTION: Update the module federation configuration file to expose the 'Hello' module from the 'greeting' remote.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/federate-a-module.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  name: 'greeting',\n  exposes: {\n    './Module': './src/remote-entry.ts',\n    './Hello': 'hello/src/index.ts', // <-- this line was added\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Repository Information in package.json for Nx Plugin\nDESCRIPTION: Example package.json configuration showing the repository information required for listing an Nx plugin in the registry. The configuration includes the repository type, URL, and directory path.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/publish-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/nrwl/nx.git\",\n    \"directory\": \"packages/web\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Nx Library in a Next.js Application\nDESCRIPTION: This TypeScript/JSX snippet demonstrates how to import and use a library within a Next.js application. It shows how to leverage code sharing between different parts of the Nx workspace, enhancing maintainability and reusability.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n\"import { MyNewLib } from '@<your nx workspace name>/my-new-lib';\\n\\nexport function Index() {\\n  return (\\n    <MyNewLib>\\n      <p>The main content</p>\\n    </MyNewLib>\\n  );\\n}\\n\\nexport default Index;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Federation Shared Libraries\nDESCRIPTION: This code snippet shows how to configure shared libraries in a Module Federation setup using Nx. It defines a base configuration that specifies which core libraries (e.g., React, Angular) should be shared as singletons to avoid version mismatches between the host and remote applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/micro-frontend-architecture.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ModuleFederationConfig } from '@nx/webpack';\n// Core libraries such as react, angular, redux, ngrx, etc. must be\n// singletons. Otherwise the applications will not work together.\nconst coreLibraries = new Set([\n  'react',\n  'react-dom',\n  'react-router-dom',\n  // A workspace library for a publish/subscribe\n  // system of communication.\n  '@acme/pub-sub',\n]);\n\nexport const config: ModuleFederationConfig = {\n  // Share core libraries, and avoid everything else\n  shared: (libraryName, defaultConfig) => {\n    if (coreLibraries.has(libraryName)) {\n      return defaultConfig;\n    }\n\n    // Returning false means the library is not shared.\n    return false;\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Visualizing the Task Graph with Nx CLI\nDESCRIPTION: This command shows how to visualize the task dependencies graph in Nx using the nx graph command. This helps debug and understand the relationships between tasks in your Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/defining-task-pipeline.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx graph\n```\n\n----------------------------------------\n\nTITLE: Setting Build Task Dependencies in Nx\nDESCRIPTION: This snippet defines the default dependencies for the build task in an Nx project, ensuring that each build task depends on its dependencies' build tasks. It requires proper Nx tooling setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/common-tasks.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"targetDefaults\":{\"build\":{\"dependsOn\":[\"^build\"]}}}\n```\n\n----------------------------------------\n\nTITLE: Generating React host and remote applications with SSR\nDESCRIPTION: This command generates a host application named 'store' with SSR enabled and two remote applications named 'product' and 'checkout' using the @nx/react plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation-with-ssr.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/react:host apps/store --ssr --remotes=product,checkout\n```\n\n----------------------------------------\n\nTITLE: Showing Project Details After Migration\nDESCRIPTION: Command to display full project details including all inferred tasks after migration, which helps verify the results.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/convert-to-inferred.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx show project <project-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Define Option in Angular Application Project\nDESCRIPTION: Project configuration showing how to set the 'define' option in the Angular application build target to make API URL available at build time.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/use-environment-variables-in-angular.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/angular:application\",\n      \"options\": {\n        ...\n        \"define\": {\n          \"MY_API_URL\": \"http://localhost:3333\"\n        }\n      }\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Nx Cloud with Nx CLI\nDESCRIPTION: This command initiates the connection of the current Nx workspace to Nx Cloud. It opens a browser window for registration, guiding the user to create a pull request that enables Nx Cloud features.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/3r-fast-ci/2-connect-to-nx-cloud/content.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"npx nx connect\"\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration for Angular in Nx\nDESCRIPTION: Tailwind CSS configuration file that includes content patterns for scanning HTML and TypeScript files, with support for dependencies through Nx's createGlobPatternsForDependencies function.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createGlobPatternsForDependencies } = require('@nrwl/angular/tailwind');\nconst { join } = require('path');\n\nmodule.exports = {\n  content: [\n    join(__dirname, 'src/**/!(*.stories|*.spec).{ts,html}'),\n    ...createGlobPatternsForDependencies(__dirname),\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt App with Nx\nDESCRIPTION: Command to build a Nuxt application using Nx. This builds the Nuxt app for production with Nx enhancements.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-06-nuxt-js-support-in-nx.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-nuxt-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Explicit Executor Options in JSON\nDESCRIPTION: This example demonstrates how to specify an executor and its options for an explicit target, using the @nx/js:tsc executor for a 'build' target.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/js:tsc\",\n      \"options\": {\n        \"generateExportsField\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Angular host and remote applications with SSR\nDESCRIPTION: This command generates a host application named 'store' with SSR enabled and two remote applications named 'product' and 'checkout' using the @nx/angular plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation-with-ssr.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/angular:host apps/store --ssr --remotes=product,checkout\n```\n\n----------------------------------------\n\nTITLE: Migrating Nx Workspace to Latest Version\nDESCRIPTION: Commands to update an existing Nx workspace to the latest version, including running migration scripts. This is used to upgrade Nx and its dependencies to the newest available versions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-12-20-nx-17-2-release.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate latest\nnx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Adding Nx to Existing React Router Application\nDESCRIPTION: Command to add Nx to an existing React Router application, allowing you to leverage Nx's powerful tooling with your current project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-router.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx init\n```\n\n----------------------------------------\n\nTITLE: Generating a React Application in Nx\nDESCRIPTION: This command generates a new React application named 'inventory' in the 'apps' directory using the @nx/react:app generator. It creates all necessary files and configurations for a new React app within the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/5-add-application/content.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/react:app apps/inventory\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Build Task in Nx\nDESCRIPTION: This snippet configures an inferred build task for projects using Vite. It integrates the Vite plugin into the Nx project configuration to set up the build target. Requires Vite installation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/common-tasks.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"plugins\":[{\"plugin\":\"@nx/vite/plugin\",\"options\":{\"buildTargetName\":\"build\"}}]}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive project.json Configuration with Orchestration and Caching\nDESCRIPTION: A detailed project.json example showing project type, tags, dependencies, and task configurations with execution settings, caching options, and orchestration properties.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"root\": \"libs/mylib/\",\n  \"sourceRoot\": \"libs/mylib/src\",\n  \"projectType\": \"library\",\n  \"tags\": [\"scope:myteam\"],\n  \"implicitDependencies\": [\"anotherlib\"],\n  \"namedInputs\": {\n    \"default\": [\"{projectRoot}/**/*\"],\n    \"production\": [\"!{projectRoot}/**/*.spec.tsx\"]\n  },\n  \"targets\": {\n    \"test\": {\n      \"inputs\": [\"default\", \"^production\"],\n      \"outputs\": [],\n      \"dependsOn\": [\"build\"],\n      \"executor\": \"@nx/jest:jest\",\n      \"options\": {}\n    },\n    \"build\": {\n      \"inputs\": [\"production\", \"^production\"],\n      \"outputs\": [\"{workspaceRoot}/dist/libs/mylib\"],\n      \"dependsOn\": [\"^build\"],\n      \"executor\": \"@nx/js:tsc\",\n      \"options\": {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Federation for Dashboard Application\nDESCRIPTION: TypeScript configuration for the Module Federation setup in the dashboard application, specifying the name and remote applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ModuleFederationConfig } from '@nx/webpack';\n\nconst config: ModuleFederationConfig = {\n  name: 'dashboard',\n  remotes: ['login'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Visualizing Affected Projects in Nx\nDESCRIPTION: Shows how to use Nx's affected:graph command to visualize which projects are affected by changes, useful for understanding the impact of modifications in a large, modular React application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx affected:graph\n```\n\n----------------------------------------\n\nTITLE: Start Local Registry with Nx Release (New)\nDESCRIPTION: This script starts a local registry and publishes packages using `nx/release`. It's the updated approach using Nx Release, calling `releaseVersion` and `releasePublish` to manage package versions and publishing during end-to-end testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/update-local-registry-setup.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This script starts a local registry for e2e testing purposes.\n * It is meant to be called in jest's globalSetup.\n */\nimport { startLocalRegistry } from '@nx/js/plugins/jest/local-registry';\nimport { execFileSync } from 'child_process';\nimport { releasePublish, releaseVersion } from 'nx/release';\n\nexport default async () => {\n  // local registry target to run\n  const localRegistryTarget = '@demo-plugin-1800/source:local-registry';\n  // storage folder for the local registry\n  const storage = './tmp/local-registry/storage';\n\n  global.stopLocalRegistry = await startLocalRegistry({\n    localRegistryTarget,\n    storage,\n    verbose: false,\n  });\n\n  await releaseVersion({\n    specifier: '0.0.0-e2e',\n    stageChanges: false,\n    gitCommit: false,\n    gitTag: false,\n    firstRelease: true,\n    versionActionsOptionsOverrides: {\n      skipLockFileUpdate: true,\n    },\n  });\n  await releasePublish({\n    tag: 'e2e',\n    firstRelease: true,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Converting a Standalone App to Nx Monorepo\nDESCRIPTION: Shell command to convert a standalone application into an Nx monorepo structure using the built-in convert-to-monorepo generator, which moves the existing application into an apps directory and adjusts configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-18-architecting-angular-applications.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnx g convert-to-monorepo\n```\n\n----------------------------------------\n\nTITLE: Running Tasks for Multiple Projects with Nx\nDESCRIPTION: Commands demonstrating how to use nx run-many to execute tasks across multiple projects with various filtering options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/run-tasks.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many -t build\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many -t build lint test\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many -t build lint test -p header footer\n```\n\n----------------------------------------\n\nTITLE: ESLint Type-Based Module Boundaries in Nx\nDESCRIPTION: Configuration for enforcing module boundaries based on project types, defining what types of projects can depend on other types.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-12-17-mastering-the-project-boundaries-in-nx.md#2025-04-22_snippet_2\n\nLANGUAGE: json5\nCODE:\n```\n{\n  '@nrwl/nx/enforce-module-boundaries': [\n    'error',\n    {\n      depConstraints: [\n        {\n          sourceTag: 'type:app',\n          onlyDependOnLibsWithTags: ['type:feature', 'type:util'],\n        },\n        {\n          sourceTag: 'type:feature',\n          onlyDependOnLibsWithTags: ['type:feature', 'type:util'],\n        },\n        {\n          sourceTag: 'type:util',\n          onlyDependOnLibsWithTags: ['type:util'],\n        },\n      ],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nx Migration Command\nDESCRIPTION: Commands to update Nx and its plugins to the latest version. First command updates dependencies, second command executes necessary migrations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-20-nx-19-8.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Configuring Cacheable Operations in nx.json\nDESCRIPTION: JSON configuration for nx.json that defines a build target as cacheable using the new cache property.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-10-20-nx-17-release.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"targetDefaults\": {\n        \"build\": {\n            \"cache\": true,\n            ...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Cypress V11 Migration Command in Nx\nDESCRIPTION: Command to automatically migrate an E2E project to Cypress v11 using Nx generator. This handles configuration file updates, test file renaming, and folder structure changes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/cypress/cypress-v11-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/cypress:migrate-to-cypress-11\n```\n\n----------------------------------------\n\nTITLE: Implementing Angular Login Component with User Authentication\nDESCRIPTION: Creates a standalone Angular component for the login application with form handling and user authentication. It imports FormsModule and injects UserService to manage authentication state.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { UserService } from '@ng-mf/data-access-user';\nimport { inject } from '@angular/core';\n\n@Component({\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  selector: 'ng-mf-login-entry',\n  template: `\n    <div class=\"login-app\">\n      <form class=\"login-form\" (ngSubmit)=\"login()\">\n        <label>\n          Username:\n          <input type=\"text\" name=\"username\" [(ngModel)]=\"username\" />\n        </label>\n        <label>\n          Password:\n          <input type=\"password\" name=\"password\" [(ngModel)]=\"password\" />\n        </label>\n        <button type=\"submit\">Login</button>\n      </form>\n      <div *ngIf=\"isLoggedIn$ | async\">User is logged in!</div>\n    </div>\n  `,\n  styles: [\n    `\n      .login-app {\n        width: 30vw;\n        border: 2px dashed black;\n        padding: 8px;\n        margin: 0 auto;\n      }\n      .login-form {\n        display: flex;\n        align-items: center;\n        flex-direction: column;\n        margin: 0 auto;\n        padding: 8px;\n      }\n      label {\n        display: block;\n      }\n    `,\n  ],\n})\nexport class RemoteEntryComponent {\n  private userService = inject(UserService);\n  username = '';\n  password = '';\n  isLoggedIn$ = this.userService.isUserLoggedIn$;\n\n  login() {\n    this.userService.checkCredentials(this.username, this.password);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating All Plugins to Inferred Tasks\nDESCRIPTION: Command to run the infer-targets generator which automatically detects and migrates all available plugins to use inferred tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/convert-to-inferred.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g infer-targets\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Server Proxy\nDESCRIPTION: This snippet demonstrates how to set up a proxy in Vite's server configuration to redirect '/api' requests to a backend server running on localhost:3000. It includes an example of using the rewrite option to remove the '/api' prefix from the proxied requests.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/node/application-proxies.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nexport default defineConfig({\n  // ...\n  server: {\n    proxy: {\n      '/api': 'http://localhost:3000',\n    },\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nexport default defineConfig({\n  // ...\n  server: {\n    proxy: {\n      '/api': {\n        target: 'http://localhost:3000',\n        rewrite: (path) => path.replace(/^\\/api/, ''),\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Tasks on Affected Projects\nDESCRIPTION: Command to run tests only on projects affected by changes in the current branch or PR using Nx's affected command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/run-tasks.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx affected -t test\n```\n\n----------------------------------------\n\nTITLE: Building Next.js Applications\nDESCRIPTION: This command builds a Next.js application for production deployment. It compiles the code, optimizes assets, and generates the necessary files for serving the application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n\"nx build my-new-app\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Release Script with Nx Release API in TypeScript\nDESCRIPTION: A TypeScript script that demonstrates how to use Nx Release's programmatic API to handle versioning, changelog generation, and publishing. The script uses yargs for CLI argument parsing and provides options for dry-run and verbose logging.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-09-versioning-and-releasing-packages.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { releaseChangelog, releasePublish, releaseVersion } from 'nx/release';\nimport * as yargs from 'yargs';\n\n(async () => {\n  const options = await yargs\n    .version(false) // don't use the default meaning of version in yargs\n    .option('version', {\n      description:\n        'Explicit version specifier to use, if overriding conventional commits',\n      type: 'string',\n    })\n    .option('dryRun', {\n      alias: 'd',\n      description:\n        'Whether or not to perform a dry-run of the release process, defaults to true',\n      type: 'boolean',\n      default: true,\n    })\n    .option('verbose', {\n      description:\n        'Whether or not to enable verbose logging, defaults to false',\n      type: 'boolean',\n      default: false,\n    })\n    .parseAsync();\n\n  const { workspaceVersion, projectsVersionData } = await releaseVersion({\n    specifier: options.version,\n    dryRun: options.dryRun,\n    verbose: options.verbose,\n  });\n\n  await releaseChangelog({\n    versionData: projectsVersionData,\n    version: workspaceVersion,\n    dryRun: options.dryRun,\n    verbose: options.verbose,\n  });\n\n  // The returned number value from releasePublish will be zero if all projects are published successfully, non-zero if not\n  const publishStatus = await releasePublish({\n    dryRun: options.dryRun,\n    verbose: options.verbose,\n  });\n  process.exit(publishStatus);\n})();\n```\n\n----------------------------------------\n\nTITLE: Using create-nx-workspace CLI Command in Bash\nDESCRIPTION: This command creates a new Nx workspace. It accepts a name parameter and additional options. The command can be invoked directly if installed globally, or used with package managers like npx, yarn, or pnpx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/create-nx-workspace.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncreate-nx-workspace [name] [options]\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Serve Task in Nx\nDESCRIPTION: This snippet configures an inferred serve task for projects with a Vite configuration, integrating Vite's plugin to facilitate serving the application. Vite must be installed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/common-tasks.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"plugins\":[{\"plugin\":\"@nx/vite/plugin\",\"options\":{\"serveTargetName\":\"serve\"}}]}\n```\n\n----------------------------------------\n\nTITLE: Parallel Test Execution for Affected Projects\nDESCRIPTION: Run tests for affected projects in parallel with specified number of parallel processes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/affected.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t test --parallel=5\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Globally with npm\nDESCRIPTION: Command to install Nx globally using npm package manager. The global installation allows running Nx commands without prefixing with npx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/getting-started/installation.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm add --global nx@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Path Mapping for Nx Libraries\nDESCRIPTION: Demonstrates how Nx automatically configures TypeScript path mapping in the root tsconfig.base.json file for newly generated libraries, enabling easy imports across the project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    ...\n    \"paths\": {\n      \"@awesomereactapp/domains/orders/checkout\": [\n        \"domains/orders/checkout/src/index.ts\"\n      ]\n    }\n  },\n  \"exclude\": [\"node_modules\", \"tmp\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic React Compiler Configuration with Nx Babel Preset\nDESCRIPTION: Basic configuration to enable React Compiler in an Nx project using the @nx/react/babel preset. Sets the runtime to automatic and enables the React Compiler feature.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-compiler.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"@nx/react/babel\",\n      {\n        \"runtime\": \"automatic\",\n        \"reactCompiler\": true\n      }\n    ]\n  ],\n  \"plugins\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Release Script Using tsx\nDESCRIPTION: Command to execute the TypeScript release script using tsx, a TypeScript execution engine that doesn't require compilation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-09-versioning-and-releasing-packages.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx tsx release.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Agents for Distributed Task Execution\nDESCRIPTION: YAML configuration for setting up Nx Agents in CI workflows. This single line command starts a CI run that distributes tasks across 8 Linux medium JavaScript agents for parallel execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-12-20-nx-17-2-release.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Start CI run\n  run: 'npx nx-cloud start-ci-run --distributes-on=\"8 linux-medium-js\"'\n  ...\n```\n\n----------------------------------------\n\nTITLE: Generating React Library\nDESCRIPTION: Example of using Nx generate command to create a new React library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/generate.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/react:library libs/mylibrary\n```\n\n----------------------------------------\n\nTITLE: Building Expo Apps for Production with Nx\nDESCRIPTION: Command for building Expo apps for production using Nx, which is necessary before submitting to app stores.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-24-step-by-step-guide-to-creating-an-expo-monorepo-with-nx.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx build cats --profile=production\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Application with Tailwind CSS\nDESCRIPTION: This shell command generates a new Angular application with Tailwind CSS pre-configured in an Nx workspace. The command uses `npx` to run the Nx CLI, and requires specifying the app directory and the `--add-tailwind` flag to enable Tailwind CSS integration. The application will be created with the necessary configuration files and dependencies for Tailwind CSS.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-with-angular-projects.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/angular:app apps/my-app --add-tailwind\n```\n\n----------------------------------------\n\nTITLE: Adding Project Tags in package.json\nDESCRIPTION: Configure project tags in package.json to define project scopes and dependency constraints\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/enforce-module-boundaries.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"nx\": {\n    \"tags\": [\"scope:client\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Automated Setup of Tailwind CSS\nDESCRIPTION: This snippet shows how to use the Nx generator to automatically install Tailwind CSS and related configurations in a project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-in-react.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:setup-tailwind --project=<your app here>\n```\n\n----------------------------------------\n\nTITLE: @nx/next Plugin Configuration in nx.json\nDESCRIPTION: This JSON snippet shows how to configure the `@nx/next/plugin` within the `nx.json` file. It defines options such as the target names for build, development, start, and static serve tasks, allowing customization of the Nx build process for Next.js projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/next/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"build\",\n        \"devTargetName\": \"dev\",\n        \"startTargetName\": \"start\",\n        \"serveStaticTargetName\": \"serve-static\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Ad-hoc Environment Variable Setting on Unix\nDESCRIPTION: Illustrates setting an environment variable directly in the command line for Unix systems. The snippet sets 'NX_PUBLIC_API_URL' before executing an Nx build command, enabling different configurations without altering .env files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/define-environment-variables.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nNX_PUBLIC_API_URL=http://localhost:3333 nx build myapp\n```\n\n----------------------------------------\n\nTITLE: Creating a Library with Nx CLI (JavaScript)\nDESCRIPTION: This command uses the Nx CLI to generate a new library named 'util' within the 'packages' directory. It will prompt for additional configuration, such as bundler and test runner.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/2-smart-monorepo/6-sync-ts-references/content.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/js:lib packages/util\n```\n\n----------------------------------------\n\nTITLE: Defining Task Configuration with JSON in Nx\nDESCRIPTION: This JSON snippet defines a task with project, target, and configuration properties to demonstrate how specific assignment rules take precedence over less defined rules. It establishes how specificity in assignment rules affects task application during task distribution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/assignment-rules.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"project\": \"app1\",\n  \"target\": \"build\",\n  \"configuration\": \"production\"\n}\n```\n\n----------------------------------------\n\nTITLE: Branch Comparison Affected Testing\nDESCRIPTION: Run tests for projects affected by changes between main branch and HEAD.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/affected.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t test --base=main --head=HEAD\n```\n\n----------------------------------------\n\nTITLE: Generating Host and Remote Applications with SSR\nDESCRIPTION: Command to scaffold a Module Federation architecture with Server-Side Rendering. It creates a dashboard host application and a login remote application, both configured for SSR.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-10-setting-up-module-federation-with-server-side-rendering-for-angular.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g host dashboard --remotes=login --ssr\n```\n\n----------------------------------------\n\nTITLE: Create a Buildable React Library\nDESCRIPTION: Generates a buildable React library within an Nx workspace using Vite.  This allows the library to be built and published to npm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react/react-plugin.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:lib libs/my-new-lib --bundler=vite\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Lint Task in Nx\nDESCRIPTION: This snippet illustrates how to define a custom lint task in the project's package.json to run the Sonarts lint tool. Sonarts must be set up as a dependency.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/common-tasks.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\"scripts\":{\"lint\":\"sonarts\"}}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Dependencies Constraints in Nx ESLint\nDESCRIPTION: ESLint configuration for enforcing module boundaries and banning specific external package imports. It sets up rules for different project scopes (store, admin, core, shared) and prevents importing specific framework packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-12-17-mastering-the-project-boundaries-in-nx.md#2025-04-22_snippet_4\n\nLANGUAGE: json5\nCODE:\n```\n{\n  '@nrwl/nx/enforce-module-boundaries': [\n    'error',\n    {\n      depConstraints: [\n        {\n          sourceTag: 'scope:store',\n          onlyDependOnLibsWithTags: [\n            'scope:store',\n            'scope:shared',\n            'scope:core',\n          ],\n          bannedExternalImports: ['@angular/*'],\n        },\n        {\n          sourceTag: 'scope:admin',\n          onlyDependOnLibsWithTags: [\n            'scope:admin',\n            'scope:shared',\n            'scope:core',\n          ],\n          bannedExternalImports: ['react*'],\n        },\n        {\n          sourceTag: 'scope:core',\n          onlyDependOnLibsWithTags: ['scope:shared'],\n          bannedExternalImports: ['@angular/*', 'react*'],\n        },\n        {\n          sourceTag: 'scope:shared',\n          onlyDependOnLibsWithTags: ['scope:shared'],\n          bannedExternalImports: ['@angular/*', 'react*'],\n        },\n      ],\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Nx Cloud via CLI\nDESCRIPTION: This command connects your project to Nx Cloud, which provides features for efficient CI in monorepos.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/intro/ci-with-nx.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx connect\n```\n\n----------------------------------------\n\nTITLE: Registering Plugins in nx.json\nDESCRIPTION: This example shows how to register a plugin in nx.json by adding it to the plugins array. The plugin will be loaded and executed when Nx analyzes the project graph.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/project-graph-plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  ...,\n  \"plugins\": [\n    \"awesome-plugin\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Path Aliases Configuration in Project\nDESCRIPTION: This JSON configuration sets up TypeScript path aliases within a specific project's `tsconfig.app.json` file, illustrating how to define paths for modules correctly.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/typescript-project-linking.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"#app/*\": [\"./app/*\"],\n      \"#tests/*\": [\"./tests/*\"],\n      \"@/icon-name\": [\n        \"./app/components/ui/icons/name.d.ts\",\n        \"./types/icon-name.d.ts\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Targets for All Projects in Nx run-many\nDESCRIPTION: Shows how to run multiple targets (lint, test, and build) for all projects using the run-many command. This feature requires Nx v15.4+.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run-many.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many --targets=lint,test,build\n```\n\n----------------------------------------\n\nTITLE: Viewing Task Inputs with Graph Flag in Nx CLI\nDESCRIPTION: Command to visualize task inputs using the --graph flag with Nx CLI. This command shows the task graph and displays all inputs used for the specified task when you click on it in the graph view.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/configure-inputs.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx build myreactapp --graph\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration for Tailwind\nDESCRIPTION: This snippet configures PostCSS to use Tailwind CSS by specifying the path to the Tailwind configuration file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-in-react.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { join } = require('path');\n\nmodule.exports = {\n  plugins: {\n    tailwindcss: {\n      config: join(__dirname, 'tailwind.config.js'),\n    },\n    autoprefixer: {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running React Native Application in Development Mode\nDESCRIPTION: This command starts the React Native application named 'mobile' in development mode using the Nx CLI. This command typically invokes the metro bundler to serve the JavaScript code to connected devices or simulators.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-native.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpx nx start mobile\n```\n\n----------------------------------------\n\nTITLE: Running Nx Commands with Windows Batch Script\nDESCRIPTION: Execute Nx commands using Windows nx.bat script\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/installation/install-non-javascript.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./nx.bat build my-project\n./nx.bat generate application\n./nx.bat graph\n```\n\n----------------------------------------\n\nTITLE: Running Nx Lint to Enforce Module Boundaries\nDESCRIPTION: This code snippet shows the command to run the Nx lint target for all projects in the workspace.  This will execute the ESLint rules, including the `@nx/enforce-module-boundaries` rule, and report any violations.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/11-module-boundaries/content.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many -t lint\n```\n\n----------------------------------------\n\nTITLE: Updating Nx to Latest Version\nDESCRIPTION: Commands for updating an Nx workspace to the latest version, including updating dependencies and running necessary migrations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-25-new-terminal-output-performance-improvements-in-nx-13-5.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Nx Plugin Configuration for Next.js and ESLint\nDESCRIPTION: This JSON snippet defines the configuration settings for Nx plugins related to Next.js and ESLint. It details how to set options for build and lint tasks and shows how these plugins enhance the existing task flow with caching capabilities.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-monorepo.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{% fileName=\"nx.json\" %}\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/eslint/plugin\",\n      \"options\": {\n        \"targetName\": \"eslint:lint\"\n      }\n    },\n    {\n      \"plugin\": \"@nx/next/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"next:build\",\n        \"devTargetName\": \"dev\",\n        \"startTargetName\": \"start\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Packages with Nx Release Publish Subcommand\nDESCRIPTION: This command invokes the `nx release publish` subcommand, which handles the publishing step for packages managed by Nx.  It is intended to be used in CI/CD environments. The output shows the publishing process for multiple packages, including details like package name, version, tarball contents, and the registry URL.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/publish-in-ci-cd.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnx release publish\n```\n\n----------------------------------------\n\nTITLE: Importing Function with Project Aliases - TypeScript\nDESCRIPTION: In this snippet, the import statement is rewritten to use project aliases, allowing for more maintainable code. This approach provides a way to reference local project files as if they were external npm packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/typescript-project-linking.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { someFunction } from '@myorg/otherProject';\n\nconst result = someFunction();\n```\n\n----------------------------------------\n\nTITLE: Simple Signal-based Store Implementation\nDESCRIPTION: Shows a basic store implementation using raw Signals with add, delete, and update operations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-16-angular-state-management-2025.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AppStore {\n  readonly state = signal([]);\n\n  add(item) {\n    this.state.update((oldState) => [...oldState, item]);\n  }\n  delete(item) {\n    this.state.update((oldState) => oldState.filter((e) => e.id !== item.id));\n  }\n  update(item) {\n    this.state.update((oldState) =>\n      oldState.map((e) => (e.id === item.id ? item : e))\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Task Graph to File with Nx run-many\nDESCRIPTION: Demonstrates how to save the task graph to a file using the run-many command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run-many.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t=build --graph=output.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Structure in project.json\nDESCRIPTION: Basic project.json configuration file showing the structure of an Nx project with minimal setup. This sets up the foundation for an app where we'll demonstrate passing arguments to commands.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/pass-args-to-commands.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sourceRoot\": \"apps/my-app/src\",\n  \"projectType\": \"application\",\n  \"targets\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Nx Powerpack Activation Key as Environment Variable\nDESCRIPTION: This snippet shows how to set the Nx Powerpack activation key as an environment variable, which is useful for CI environments or open source repositories where the key should not be committed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/installation/activate-powerpack.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nNX_KEY=YOUR_ACTIVATION_KEY\n```\n\n----------------------------------------\n\nTITLE: Serving a Module Federation Host Application\nDESCRIPTION: Command to serve a host application in development mode. When serving the host, Nx will automatically discover and serve any dependent remote applications in the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/creating-a-host.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx serve shell\n```\n\n----------------------------------------\n\nTITLE: Defining Project-Specific Task Dependencies in project.json\nDESCRIPTION: This snippet demonstrates how to configure project-specific task dependencies in a project.json file. It defines both a prebuild and build target, with build depending on prebuild within the same project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/defining-task-pipeline.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myreactapp\",\n  ...\n  \"targets\": {\n    \"prebuild\": {\n      \"command\": \"echo Prebuild\"\n    },\n    \"build\": {\n      \"command\": \"echo Build\",\n      \"dependsOn\": [\"prebuild\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nx Agent Templates in CI Commands\nDESCRIPTION: Examples of how to reference the configured launch templates in nx-cloud start-ci-run commands, specifying the number of agents and the template name to use for distribution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnx-cloud start-ci-run --distribute-on=\"4 my-linux-medium-js\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nnx-cloud start-ci-run --distribute-on=\"4 my-linux-large-js\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nnx-cloud start-ci-run --distribute-on=\"4 my-linux-large-rust\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker for an Existing Nx Project\nDESCRIPTION: This command generates a Docker setup for an existing Nx project using the @nx/node package.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/node-server-fly-io.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/node:setup-docker\n```\n\n----------------------------------------\n\nTITLE: Modularized Standalone Project Structure in Nx\nDESCRIPTION: Illustrates how to structure a modularized standalone project with feature and utility libraries alongside the main application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-06-nx-15-3-standalone-projects-vite-task-graph-and-more.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ne2e/\n  ...\nsrc/\n  app/\n  main.tsx\n  ...\nfeatures/\n  feature1/\n  feature2/\nutils/\n  ...\nindex.html\n...\nnx.json\npackage.json\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint to Whitelist External Imports\nDESCRIPTION: This snippet demonstrates how to use the allowedExternalImports option in ESLint configuration to restrict projects to importing only from specific packages. It shows examples for utility libraries, UI libraries, and core domain logic.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/ban-external-imports.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // ... more ESLint config here\n\n  // @nx/enforce-module-boundaries should already exist at the top-level of your config\n  \"@nx/enforce-module-boundaries\": [\n    \"error\",\n    {\n      \"allow\": [],\n      // update depConstraints based on your tags\n      \"depConstraints\": [\n        // limiting the dependencies of util libraries to the bare minimum\n        // projects tagged with \"type:util\" can only import from \"date-fns\"\n        {\n          \"sourceTag\": \"type:util\",\n          \"allowedExternalImports\": [\"date-fns\"]\n        },\n        // ui libraries clean from data access concerns\n        // projects tagged with \"type:ui\" can only import pacages matching \"@angular/*\" except \"@angular/common/http\"\n        {\n          \"sourceTag\": \"type:ui\",\n          \"allowedExternalImports\": [\"@angular/*\"],\n          \"bannedExternalImports\": [\"@angular/common/http\"]\n        },\n        // keeping the domain logic clean from infrastructure concerns\n        // projects tagged with \"type:core\" can't import any external packages.\n        {\n          \"sourceTag\": \"type:core\",\n          \"allowedExternalImports\": []\n        }\n      ]\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Skipping Publish Step Locally using Nx Release\nDESCRIPTION: This command demonstrates how to skip the publish step when running `nx release` locally, typically used when integrating with a CI/CD pipeline. This prevents accidental local publishing and allows the CI/CD pipeline to handle the actual publishing process.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/publish-in-ci-cd.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnx release --skip-publish\n```\n\n----------------------------------------\n\nTITLE: Updated package.json after patch release\nDESCRIPTION: Shows the updated state of a package.json file for a project named 'my-other-project-in-the-monorepo' after a patch release, including the version update.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/updating-version-references.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"my-other-project-in-the-monorepo\",\n  \"version\": \"0.1.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing CI Workflow\nDESCRIPTION: Git commands to commit the new CI workflow file and push the branch to GitHub.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/tutorial/github-actions.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit -am \"basic ci workflow\"\ngit push -u origin HEAD\n```\n\n----------------------------------------\n\nTITLE: Defining Root-Level Tasks in package.json\nDESCRIPTION: Configuration for root-level tasks in package.json that apply to the entire codebase rather than a specific project, with Nx caching support.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/run-tasks.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myorg\",\n  \"scripts\": {\n    \"docs\": \"node ./generateDocsSite.js\"\n  },\n  \"nx\": {}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myorg\",\n  \"scripts\": {\n    \"docs\": \"nx exec -- node ./generateDocsSite.js\"\n  },\n  \"nx\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Rspack Configuration with Zephyr\nDESCRIPTION: Updated Rspack configuration file including Zephyr Cloud plugin integration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-12-next-gen-module-federation-deployments.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { composePlugins, withNx, withReact } from '@nx/rspack';\nimport {\n  withModuleFederation,\n  ModuleFederationConfig,\n} from '@nx/rspack/module-federation';\nimport { withZephyr } from 'zephyr-webpack-plugin';\n\nimport baseConfig from './module-federation.config';\n\nconst config: ModuleFederationConfig = {\n  ...baseConfig,\n};\n\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(config, { dts: false }),\n  withZephyr()\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Command for Next.js App in Vercel (Shell)\nDESCRIPTION: This command is used to override the build command in Vercel's project settings. It uses Nx to build a specific Next.js application (in this case, 'tuskdesk') for production.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/deploy-nextjs-to-vercel.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx build tuskdesk --prod\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Project References in tsconfig.json\nDESCRIPTION: This JSON snippet demonstrates how to set up TypeScript Project References in a tsconfig.json file, enabling efficient compilation and type checking across project boundaries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-27-project-references.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"esnext\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true\n  },\n  \"references\": [{ \"path\": \"../is-even\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Nx-enhanced Webpack Configuration\nDESCRIPTION: Enhanced webpack configuration using composable plugins with withNx support.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/webpack-config-setup.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { composePlugins, withNx } = require('@nx/webpack');\n\nmodule.exports = composePlugins(\n  withNx(),\n  (config, { options, context }) => {\n    return config;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Affected-Based Deployment for Next.js App in Vercel (Shell)\nDESCRIPTION: This command is used in Vercel's 'Ignored Build Step' feature. It uses Nx to determine if the specified app is affected by recent changes, skipping the build if it's not affected.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/deploy-nextjs-to-vercel.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx-ignore <app-name>\n```\n\n----------------------------------------\n\nTITLE: Package.json Example with Version Prefixes\nDESCRIPTION: This example shows a `package.json` file demonstrating various version prefixes used in dependencies.  It illustrates how the prefixes ~, ^, and no prefix can be used to specify different levels of compatibility.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/configuration-version-prefix.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"my-package\",\n  \"version\": \"0.1.1\",\n  \"dependencies\": {\n    \"dependency-one\": \"~1.2.3\",\n    \"dependency-two\": \"^2.3.4\",\n    \"dependency-three\": \"3.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Nx Agents Distribution\nDESCRIPTION: Sample GitHub Actions workflow configuration demonstrating Nx Agents task distribution across 3 linux agents\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/distribute-task-execution.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\n...\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      ...\n      - run: pnpm dlx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\" --stop-agents-after=\"build\"\n      ...\n      - run: pnpm exec nx affected -t lint test build\n```\n\n----------------------------------------\n\nTITLE: Generate Angular Application\nDESCRIPTION: Command to generate a new Angular application in the apps directory\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/generate.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/angular:app apps/myapp\n```\n\n----------------------------------------\n\nTITLE: Using npm Run with Nx Caching via nx exec\nDESCRIPTION: Example package.json that wraps the command with 'nx exec' to maintain compatibility with npm scripts while still leveraging Nx caching capabilities.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/root-level-scripts.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myorg\",\n  \"nx\": {},\n  \"scripts\": {\n    \"docs\": \"nx exec -- node ./generateDocsSite.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Standalone Project with Nx\nDESCRIPTION: Commands to create a new React standalone project using Nx. This initializes a React application with Vite and TypeScript support.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest awesomereactapp --preset=react-standalone\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest awesomereactapp\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Environment Variables in project.json using inferred tasks\nDESCRIPTION: This snippet shows how to set Cypress environment variables using the 'args' option in the project.json file when using inferred tasks. It demonstrates setting the API_URL environment variable.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/cypress/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"targets\": {\n    \"e2e\": {\n      \"options\": {\n        \"args\": \"--env=API_URL=https://api.my-nx-website.com\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Workspaces in package.json\nDESCRIPTION: This JSON snippet configures NPM workspaces in the root `package.json` file. It defines the `workspaces` property as an array of glob patterns, specifying the directories where NPM should look for packages. In this case, it instructs NPM to find packages within the `packages` directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/1-introduction/1-welcome/content.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"workspaces\": [\"packages/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Build\nDESCRIPTION: This command demonstrates how to execute the 'build' target for the 'acme' project within an Nx workspace. It uses the `nx run` command to trigger the build process, which utilizes the configured @nx/next:build executor. This command compiles the Next.js application based on the settings defined in the project.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/build-next-executor-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"nx run acme:build\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Node.js Application\nDESCRIPTION: This command uses the Nx CLI to generate a new Node.js application within the specified directory. Replace `apps/my-new-app` with the desired path and name for the application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/node/node-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/node:application apps/my-new-app\n```\n\n----------------------------------------\n\nTITLE: Creating React Libraries in Nx Workspace\nDESCRIPTION: These commands generate React libraries for products, orders, and shared UI components. They use Vitest for unit testing and specify 'none' as the bundler option.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/react:library libs/products --unitTestRunner=vitest --bundler=none\nnpx nx g @nx/react:library libs/orders --unitTestRunner=vitest --bundler=none\nnpx nx g @nx/react:library libs/shared/ui --unitTestRunner=vitest --bundler=none\n```\n\n----------------------------------------\n\nTITLE: Generating a React Remote Application with Nx\nDESCRIPTION: Command to create a new React remote application using Nx generators, which sets up the necessary project structure and configuration files for Module Federation\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/creating-a-remote.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnx g @nx/react:remote apps\\/react\\/myremote\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for CI\nDESCRIPTION: This configuration snippet enables CI-specific options, preventing snapshot updates during continuous integration runs, which is vital for maintaining test integrity.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/jest/docs/jest-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"test\": {\n  \"executor\": \"@nx/jest:jest\",\n  \"options\": {\n    \"jestConfig\": \"libs/my-lib/jest.config.ts\",\n    \"passWithNoTests\": true\n  },\n  \"configurations\": {\n    \"ci\": {\n      \"ci\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Path Aliases in tsconfig.base.json\nDESCRIPTION: Demonstrates how to set up TypeScript path aliases in the base configuration to simplify imports.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    ...\n    \"paths\": {\n      \"@ts-monorepo-linking/lib-a\": [\"packages/lib-a/src/index.ts\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Parallelism in nx.json (Nx 17+)\nDESCRIPTION: This configuration sets the default number of parallel processes to 5 in Nx version 17 or greater by adding the parallel property to nx.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/run-tasks-in-parallel.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parallel\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Module Boundary Rules in Nx\nDESCRIPTION: This code snippet demonstrates how to configure ESLint with the `@nx/enforce-module-boundaries` rule to enforce module boundaries based on tags. It defines constraints specifying which tags a library can depend on based on its own tags. The configuration resides in the `eslint.config.mjs` file.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/11-module-boundaries/content.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default [\n  // ...\n  {\n    files: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx'],\n    rules: {\n      '@nx/enforce-module-boundaries': [\n        'error',\n        {\n          enforceBuildableLibDependency: true,\n          allow: ['^.*/eslint(\\.base)?\\.config\\.[cm]?js$'],\n          depConstraints: [\n            {\n              sourceTag: 'type:feature',\n              onlyDependOnLibsWithTags: ['type:feature', 'type:ui'],\n            },\n            {\n              sourceTag: 'type:ui',\n              onlyDependOnLibsWithTags: ['type:ui'],\n            },\n            {\n              sourceTag: 'scope:orders',\n              onlyDependOnLibsWithTags: [\n                'scope:orders',\n                'scope:products',\n                'scope:shared',\n              ],\n            },\n            {\n              sourceTag: 'scope:products',\n              onlyDependOnLibsWithTags: ['scope:products', 'scope:shared'],\n            },\n            {\n              sourceTag: 'scope:shared',\n              onlyDependOnLibsWithTags: ['scope:shared'],\n            },\n          ],\n        },\n      ],\n    },\n  },\n  // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Running Cypress E2E Tests in Nx\nDESCRIPTION: Command to run end-to-end tests using Cypress in an Nx workspace. This targets the e2e project's e2e target.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx e2e e2e\n```\n\n----------------------------------------\n\nTITLE: Using Imported Images in CSS\nDESCRIPTION: This snippet shows how to use imported images in CSS files. This integration allows images to be applied as background images in CSS selectors.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/adding-assets.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.logo {\n  background-image: url(./logo.png);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating React Native App in Nx Workspace\nDESCRIPTION: Command to generate a new React Native app within the Nx workspace using the Nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nrwl/react-native:app studio-ghibli-search-engine-mobile\n```\n\n----------------------------------------\n\nTITLE: Building an Angular Application\nDESCRIPTION: This command builds the specified Angular application using the Nx CLI. It prepares the application for deployment by compiling and optimizing the code.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/angular/angular-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"nx build appName\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Root Package.json Configuration with Nx Options\nDESCRIPTION: Complete example of a root package.json with advanced Nx configuration including implicit dependencies, inputs, and outputs for the 'docs' target to enable proper caching and task pipelines.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/root-level-scripts.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myorg\",\n  \"nx\": {\n    // Nx can't infer the project dependency from the docs script,\n    // so we manually create a dependency on the store app\n    \"implicitDependencies\": [\"store\"],\n    \"targets\": {\n      \"docs\": {\n        // generates docs from source code of all dependencies\n        \"inputs\": [\"^production\"],\n        // the docs site is created under /docs\n        \"outputs\": [\"{workspaceRoot}/docs\"]\n      }\n    }\n  },\n  \"scripts\": {\n    \"docs\": \"node ./generateDocsSite.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Query Embeddings for User Questions in Nx Docs AI\nDESCRIPTION: This snippet demonstrates how user queries are converted to embeddings using the same OpenAI model. It combines the sanitized query with previous conversation context to create more relevant embeddings for the search.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-21-ai-assistant.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst embeddingResponse: OpenAI.Embeddings.CreateEmbeddingResponse =\n  await openai.embeddings.create({\n    model: 'text-embedding-ada-002',\n    input: sanitizedQuery + getLastAssistantMessageContent(messages),\n  });\n```\n\n----------------------------------------\n\nTITLE: Add Jest to a Project\nDESCRIPTION: This command utilizes the Nx CLI to add Jest to an existing project. Replace `<project-name>` with the actual name of the project. The `--dry-run` flag can be used to preview the changes without applying them.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/jest/documents/overview.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/jest:configuration --project=<project-name>\n```\n\n----------------------------------------\n\nTITLE: Creating Buildable Library with Nx CLI\nDESCRIPTION: Command to generate a new buildable library using Nx's JavaScript plugin with TypeScript compiler as bundler.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-29-new-nx-experience.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/js:lib packages/buildablelib --bundler=tsc\n```\n\n----------------------------------------\n\nTITLE: Creating a Deployment Command for Module Federation Application\nDESCRIPTION: Shell command to generate a run-commands executor for deploying a Module Federation application. The command copies build artifacts to a production folder and serves it with http-server.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/faster-builds.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/workspace:run-commands \\\ndeploy \\\n--project=host \\\n--command=\"rm -rf production && mkdir production && cp -r dist/apps/host/* production && cp -r dist/apps/{shop,cart,about} production && http-server -p 3000 -a localhost production\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Caching in nx.json\nDESCRIPTION: Shows how to set up caching for Nx tasks by creating an nx.json file at the root of the workspace. It specifies which operations are cacheable.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasksRunnerOptions\": {\n    \"default\": {\n      \"runner\": \"nx/tasks-runners/default\",\n      \"options\": {\n        \"cacheableOperations\": [\"build\", \"test\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced React Compiler Configuration with Options\nDESCRIPTION: Extended configuration for React Compiler that includes custom compiler options. Demonstrates how to set specific compilation modes and other advanced settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-compiler.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"@nx/react/babel\",\n      {\n        \"runtime\": \"automatic\",\n        \"reactCompiler\": {\n          \"compilationMode\": \"annotation\"\n        }\n      }\n    ]\n  ],\n  \"plugins\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Project Owners in nx.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure code ownership patterns within the nx.json file. It defines ownership based on project tags, names, and file patterns. The 'format' property specifies the target Git platform (in this case, GitHub).  The 'patterns' array contains rules mapping projects or files to specific owners. Owners are typically GitHub usernames or team names.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/powerpack/owners.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"owners\": {\n    \"format\": \"github\",\n    \"patterns\": [\n      {\n        \"description\": \"Joe's Rust projects\",\n        \"projects\": [\"tag:rust\"],\n        \"owners\": [\"@joelovesrust\"]\n      },\n      {\n        \"description\": \"Finance projects\",\n        \"projects\": [\"finance-*\"],\n        \"owners\": [\"@finance-team\"]\n      },\n      {\n        \"description\": \"Alphabet soup\",\n        \"projects\": [\"admin\", \"books\", \"cart\"],\n        \"owners\": [\"@alice\", \"@bob\", \"@cecil\"]\n      },\n      {\n        \"description\": \"CI Workflows\",\n        \"files\": [\".github/workflows/**/*\"],\n        \"owners\": [\"@devops\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migration Script Example (migrations.json)\nDESCRIPTION: This JSON snippet defines a migration script within the migrations.json file. It specifies the version at which the migration should run and the path to the implementation file, enabling automated code updates when upgrading Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/automate-updating-dependencies.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"code\": \"{\n  \\\"generators\\\": {\n    ...\n    \\\"add-babel-core\\\": {\n       ...\n      \\\"version\\\": \\\"16.7.0-beta.2\\\",\n      \\\"implementation\\\": \\\"./src/migrations/update-16-7-0/add-babel-core\\\"\n    },\n  },\n}\", \"fileName\": \"migrations.json\", \"highlightLines\": [6,7]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Dependencies in Nx\nDESCRIPTION: Defines dependencies between targets using the 'dependsOn' property. This example shows how to specify that a target depends on the build target of its dependencies and itself.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"]\n    },\n    \"test\": {\n      \"dependsOn\": [\"build\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Deploy Target to project.json\nDESCRIPTION: This JSON configuration adds a deploy target to the project.json file, which depends on the build target and uses the Fly CLI to deploy.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/node-server-fly-io.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"deploy\": {\n  \"dependsOn\": [\n    \"build\"\n  ],\n  \"command\": \"fly deploy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Qwik Application with Nx\nDESCRIPTION: Command to build the Qwik application using Nx. This creates a production-ready build of the todo application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-qwik.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx build todo\n```\n\n----------------------------------------\n\nTITLE: Running Build with Production Config\nDESCRIPTION: Example showing how to run a build target with a specific production configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n nx run myapp:build:production\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Host Application with Module Federation\nDESCRIPTION: Command to generate an Angular host application named 'dashboard' that supports Module Federation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:host apps/dashboard --prefix=ng-mf\n```\n\n----------------------------------------\n\nTITLE: Integrating NgRx Root State Configuration\nDESCRIPTION: Updated main.ts file after adding NgRx root state configuration using the Nx generator, showing the integration of store and effects providers.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-02-21-using-ngrx-standalone-apis-with-nx.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrapApplication } from '@angular/platform-browser';\nimport {\n  provideRouter,\n  withEnabledBlockingInitialNavigation,\n} from '@angular/router';\nimport { AppComponent } from './app/app.component';\nimport { appRoutes } from './app/app.routes';\nimport { provideStore, provideState } from '@ngrx/store';\nimport { provideEffects } from '@ngrx/effects';\n\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideEffects(),\n    provideStore(),\n    provideRouter(appRoutes, withEnabledBlockingInitialNavigation()),\n  ],\n}).catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Create a Publishable React Library\nDESCRIPTION: Generates a publishable React library, allowing it to be published to npm or a private registry with a specified import path.  The library can be imported using the provided path.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react/react-plugin.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:lib libs/my-new-lib \\\n--publishable \\\n--importPath=@myorg/my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/eslint for Nx 18+\nDESCRIPTION: Command to install the @nx/eslint plugin in Nx 18+ workspaces. This ensures the correct version is installed that matches the Nx version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/eslint/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/eslint\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Request Middleware Function in Nx\nDESCRIPTION: This TypeScript code defines a simple HTTP request middleware function. The middleware checks if the request URL is '/hello-world' and, if so, responds with an HTML string. Otherwise, it calls the `next()` function to pass the request to the next middleware in the chain.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/dev-server-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { IncomingMessage, ServerResponse } from 'node:http';\n\nconst helloWorldMiddleware = (\n  req: IncomingMessage,\n  res: ServerResponse,\n  next: (err?: unknown) => void\n) => {\n  if (req.url === '/hello-world') {\n    res.end('<h1>Hello World!</h1>');\n  } else {\n    next();\n  }\n};\n\nexport default helloWorldMiddleware;\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Tags in Package.json\nDESCRIPTION: Adding type and scope tags to library package.json files to enable module boundary enforcement\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nx\": {\n    \"tags\": [\"type:feature\", \"scope:orders\"]\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nx\": {\n    \"tags\": [\"type:feature\", \"scope:products\"]\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nx\": {\n    \"tags\": [\"type:ui\", \"scope:shared\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Remix Application with Nx\nDESCRIPTION: Builds a Remix application for production deployment using Nx's build command. This compiles the application code and prepares it for deployment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/remix.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx build myapp\n```\n\n----------------------------------------\n\nTITLE: Basic Next.js Configuration with Nx Plugin\nDESCRIPTION: Demonstrates the basic setup of a Next.js configuration file using the withNx plugin. Shows how to configure Nx-specific options like SVGR support.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/next-config-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\n\n// ...\n\nmodule.exports = withNx({\n  // Nx configuration goes here\n  nx: {\n    svgr: false,\n  },\n  // Add Next.js configuration goes here\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Conformance Rules in nx.json\nDESCRIPTION: This JSON snippet configures conformance rules within the `nx.json` file. It includes rules for enforcing project boundaries, ensuring project owners, and referencing a local custom rule. Each rule specifies the rule's identifier and any associated options or project exclusions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/powerpack/conformance.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"conformance\": {\n    \"rules\": [\n      {\n        \"rule\": \"@nx/conformance/enforce-project-boundaries\",\n        \"options\": {\n          \"depConstraints\": [\n            {\n              \"sourceTag\": \"scope:shared\",\n              \"onlyDependOnProjectsWithTags\": [\"scope:shared\"]\n            }\n          ]\n        }\n      },\n      {\n        \"rule\": \"@nx/conformance/ensure-owners\",\n        \"projects\": [\"!experimental-app\"]\n      },\n      {\n        \"rule\": \"./tools/local-conformance-rule.ts\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Storybook Story File for React Component\nDESCRIPTION: Example of an auto-generated Storybook story file using Component Story Format 3 (CSF3) with primary story and interaction testing setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/plugin-react.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { MyButton } from './my-button';\nimport { within } from '@storybook/testing-library';\nimport { expect } from '@storybook/jest';\n\nconst meta: Meta<typeof MyButton> = {\n  component: MyButton,\n  title: 'MyButton',\n};\nexport default meta;\ntype Story = StoryObj<typeof MyButton>;\n\nexport const Primary = {\n  args: {\n    text: '',\n    padding: 0,\n    disabled: false,\n  },\n};\n\nexport const Heading: Story = {\n  args: {\n    text: '',\n    padding: 0,\n    disabled: false,\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/Welcome to MyButton!/gi)).toBeTruthy();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Story Patterns in Storybook Config\nDESCRIPTION: Example showing how to specify multiple pattern matches for stories in the Storybook configuration, allowing for more flexible story discovery across the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/one-storybook-for-all.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nconst config: StorybookConfig = {\n  stories: [\n    '../../**/ui/**/src/lib/**/*.stories.@(js|jsx|ts|tsx|mdx)',\n    '../../**/src/lib/**/*.stories.@(js|jsx|ts|tsx|mdx)',\n    // ...\n  ],\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Conventional Commits in nx.json\nDESCRIPTION: JSON configuration to enable conventional commits versioning strategy in Nx Release.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-09-versioning-and-releasing-packages.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"release\": {\n        \"projects\": [\"*\", \"!@tuskdesign/demo\"],\n        \"version\": {\n            \"conventionalCommits\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with TypeScript Preset using npm\nDESCRIPTION: Command to create a new Nx workspace with TypeScript preset using npm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/js/js-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace my-org --preset=ts\n```\n\n----------------------------------------\n\nTITLE: Enforcing Conformance Rules without Nx Cloud\nDESCRIPTION: This YAML snippet shows how to enforce all conformance rules in a CI environment without using Nx Cloud.  It executes the `nx conformance` command directly.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/conformance/conformance-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"- name: Enforce all conformance rules\n  run: npx nx conformance\"\n```\n\n----------------------------------------\n\nTITLE: Generating Publishable Angular Library with Tailwind CSS\nDESCRIPTION: This shell command creates a new publishable Angular library in an Nx workspace with Tailwind CSS. It requires specifying the library directory and the import path, alongside the `--publishable` and `--add-tailwind` flags to configure Tailwind CSS for distribution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-with-angular-projects.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/angular:lib libs/my-lib --publishable --importPath=@my-org/my-lib --add-tailwind\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Tags in package.json\nDESCRIPTION: This example demonstrates how to annotate a project with tags in the package.json file, which can be used for configuring lint rules and enforcing module boundaries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_17\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"mylib\",\n  \"nx\": {\n    \"tags\": [\"scope:myteam\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Angular Project to Use Rspack\nDESCRIPTION: Command to run the Angular generator that converts an existing Angular Webpack project to use Rspack. This generator is available in Nx 20.6.0 and provides access to the @nx/angular-rspack functionality.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/migrate-from-webpack.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g convert-to-rspack\n```\n\n----------------------------------------\n\nTITLE: Connecting Redux Store to React App with Persistence in TypeScript\nDESCRIPTION: This snippet demonstrates how to connect the Redux store to a React app using StoreProvider and PersistGate. It sets up AsyncStorage for persistence and configures the root store.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-08-state-management.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport {\n  createRootStore,\n  transformEntityStateToPersist,\n} from '@nx-expo-monorepo/states/cat';\nimport { Loading } from '@nx-expo-monorepo/ui';\nimport { Provider as StoreProvider } from 'react-redux';\n\nconst App = () => {\n  const persistConfig = {\n    key: 'root',\n    storage: AsyncStorage,\n    transforms: [transformEntityStateToPersist],\n  };\n  const { store, persistor } = createRootStore(persistConfig);\n\n  return (\n    <PersistGate loading={<Loading />} persistor={persistor}>\n      <StoreProvider store={store}>...</StoreProvider>\n    </PersistGate>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Agents for Distributed Task Execution in YAML\nDESCRIPTION: This YAML snippet shows how to configure Nx Agents for distributed task execution in CI. It demonstrates the simplicity of setting up multiple agents and running tasks in parallel, with Nx automatically handling task distribution and artifact sharing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-07-fast-effortless-ci.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  main:\n    # Tell Nx Cloud how many agents to use and the name of the last task\n    - run: |\n        nx-cloud start-ci-run \\\n          --distribute-on=\"3 linux-medium-js\" \\\n          --stop-agents-after=\"e2e-ci\"\n    # Run tasks the same way you would locally\n    - run: nx affected -t lint test build --parallel=3\n    - run: nx affected -t e2e-ci --parallel=1\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server\nDESCRIPTION: Command to serve the Expo development server for the generated app.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-23-introducing-expo-support-for-nx.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx start poetry-app\n```\n\n----------------------------------------\n\nTITLE: Configuring ESBuild in project.json\nDESCRIPTION: Basic configuration for the @nx/esbuild:esbuild executor in a project.json file. Defines the main entry point, TypeScript configuration file path, and output directory for the build process.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/esbuild/docs/esbuild-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  //...\n  \"targets\": {\n    //...\n    \"build\": {\n      \"executor\": \"@nx/esbuild:esbuild\",\n      \"options\": {\n        \"main\": \"<app-root>\",\n        \"tsConfig\": \"<app-root>/tsconfig.app.json\",\n        \"outputPath\": \"dist/<app-root>\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Dependencies\nDESCRIPTION: Commands for installing React Navigation and its dependencies for routing in React Native applications. These libraries enable screen navigation in mobile apps.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-24-step-by-step-guide-to-creating-an-expo-monorepo-with-nx.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\\# npm\nnpm install react-native-paper react-native-screens @react-navigation/native-stack --save\n\n\\# yarn\nyarn add react-native-paper react-native-screens @react-navigation/native-stack\n\n\\# pnpm\npnpm add react-native-paper react-native-screens @react-navigation/native-stack --save\n```\n\n----------------------------------------\n\nTITLE: Running Build Tasks on Agent Machine in YAML\nDESCRIPTION: This snippet illustrates how to run build tasks for all projects defined in the PROJECTS environment variable on an agent machine in a manual distribution setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/concepts/parallelization-distribution.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Run build for all projects defined in PROJECTS\n- nx run-many --projects=$PROJECTS -t build\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variable for Encryption Key in Shell\nDESCRIPTION: This snippet shows how to provide the encryption key for Nx Cloud through an environment variable when running an Nx command, as an alternative to setting it in nx.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/config.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nNX_CLOUD_ENCRYPTION_KEY=myEncryptionKey nx build my-project\n```\n\n----------------------------------------\n\nTITLE: Generating React Component in Specific Directory\nDESCRIPTION: Command to generate a new React component with specific naming in a given directory path.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-10-20-nx-17-release.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n> nx g component apps/my-app/src/app/Home\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Boundary Rules in Nx with ESLint\nDESCRIPTION: ESLint configuration for enforcing module boundaries in Nx, using a dual-tagging approach with type-based and domain-based rules to maintain architectural integrity between different layers and domains.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-18-architecting-angular-applications.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Type-based rules\n{\n  sourceTag: 'type:feature',\n  onlyDependOnLibsWithTags: ['type:feature', 'type:ui', 'type:data-access']\n},\n{\n  sourceTag: 'type:ui',\n  onlyDependOnLibsWithTags: ['type:ui', 'type:util', 'type:data-access']\n},\n\n// Domain-based rules\n{\n  sourceTag: 'scope:orders',\n  onlyDependOnLibsWithTags: ['scope:orders', 'scope:products', 'scope:shared']\n},\n{\n  sourceTag: 'scope:products',\n  onlyDependOnLibsWithTags: ['scope:products', 'scope:shared']\n}\n```\n\n----------------------------------------\n\nTITLE: Serving with DevRemotes for Development\nDESCRIPTION: Command to serve the dashboard application with file watching enabled for the login remote application. This is useful during development to see changes in the remote application immediately.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-10-setting-up-module-federation-with-server-side-rendering-for-angular.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx serve-ssr dashboard --devRemotes=login\n```\n\n----------------------------------------\n\nTITLE: Connecting to Nx Cloud for Automated E2E Task Splitting\nDESCRIPTION: Command to connect the workspace to Nx Cloud, which is required for using automated e2e task splitting.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/features/split-e2e-tasks.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx connect\n```\n\n----------------------------------------\n\nTITLE: Using Custom Webpack Configuration with @nx/angular:webpack-browser\nDESCRIPTION: This snippet demonstrates how to configure a custom webpack setup for an Angular application using the @nx/angular:webpack-browser executor. It involves modifying the 'project.json' build target to specify the path to the custom webpack configuration file.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/webpack-browser-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"targets\": {\n        \"build\": {\n            \"executor\": \"@nx/angular:webpack-browser\",\n            \"options\": {\n                ...\n                \"customWebpackConfig\": {\n                  \"path\": \"apps/appName/webpack.config.js\"\n                }\n            }\n        },\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Rule Options\nDESCRIPTION: Example showing how to customize the dependency-checks rule behavior with various options\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/eslint-plugin/documents/dependency-checks.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"@nx/dependency-checks\": [\n    \"error\",\n    {\n      \"buildTargets\": [\"build\", \"custom-build\"],\n      \"checkMissingDependencies\": true,\n      \"checkObsoleteDependencies\": true,\n      \"checkVersionMismatches\": true,\n      \"ignoredDependencies\": [\"lodash\"],\n      \"ignoredFiles\": [\"webpack.config.js\", \"eslint.config.cjs\"],\n      \"includeTransitiveDependencies\": true,\n      \"useLocalPathsForWorkspaceDependencies\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Version of @nx/react Plugin\nDESCRIPTION: Example of installing a specific version (17.0.0) of the @nx/react package and running its init generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/add.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/react@17.0.0\n```\n\n----------------------------------------\n\nTITLE: Creating a New React Monorepo with Nx\nDESCRIPTION: Command to create a new React monorepo workspace using Nx, with options for bundler, test runner, stylesheet format, and other configuration settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-nx-workspace@latest react-monorepo --preset=react-monorepo\n```\n\n----------------------------------------\n\nTITLE: Utility Library Function in TypeScript\nDESCRIPTION: This TypeScript code defines a generic function, `getRandomItem`, that selects a random element from an array. It's designed to be reusable across multiple projects and is placed in a new 'util' library.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/2-smart-monorepo/6-sync-ts-references/content.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getRandomItem<T>(arr: T[]): T {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n```\n\n----------------------------------------\n\nTITLE: Generating an Angular Host with Remote Applications using Nx\nDESCRIPTION: Command to scaffold an Angular host application with two remote applications using Nx generators. This creates a complete module federation setup with all necessary files for the host and remote applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/creating-a-host.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:host apps/angular/with-remotes/shell --remotes=remote1,remote2\n```\n\n----------------------------------------\n\nTITLE: Setting Up CI with Azure Pipelines in YAML\nDESCRIPTION: This YAML configuration sets up a Continuous Integration (CI) pipeline for an Nx workspace, specifying triggers, variables, and jobs to manage builds and tests. It includes conditions for pull requests and retrieves the last successful commit SHA using Azure DevOps CLI for further processing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/monorepo-ci-azure.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"name: CI\\n\\ntrigger:\\n  - main\\npr:\\n  - main\\n\\nvariables:\\n  CI: 'true'\\n  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:\\n    NX_BRANCH: $(System.PullRequest.PullRequestNumber)\\n    TARGET_BRANCH: $[replace(variables['System.PullRequest.TargetBranch'],'refs/heads/','origin/')]\\n    BASE_SHA: $(git merge-base $(TARGET_BRANCH) HEAD)\\n  ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:\\n    NX_BRANCH: $(Build.SourceBranchName)\\n    BASE_SHA: $(git rev-parse HEAD~1)\\n  HEAD_SHA: $(git rev-parse HEAD)\\n\\njobs:\\n  - job: main\\n    pool:\\n      vmImage: 'ubuntu-latest'\\n    steps:\\n      - checkout: self\\n        fetchDepth: 0\\n        fetchFilter: tree:0\\n        persistCredentials: true\\n\\n      # Set Azure Devops CLI default settings\\n      - bash: az devops configure --defaults organization=$(System.TeamFoundationCollectionUri) project=$(System.TeamProject)\\n        displayName: 'Set default Azure DevOps organization and project'\\n      # Get last successfull commit from Azure Devops CLI\\n      - bash: |\\n          LAST_SHA=$(az pipelines build list --branch $(Build.SourceBranchName) --definition-ids $(System.DefinitionId) --result succeeded --top 1 --query \"[0].triggerInfo.\\\"ci.sourceSha\\\"\")\\n          if [ -z \\\"$LAST_SHA\\\" ]\\n          then\\n            echo \"Last successful commit not found. Using fallback 'HEAD~1': $BASE_SHA\"\\n          else\\n            echo \"Last successful commit SHA: $LAST_SHA\"\\n            echo \"##vso[task.setvariable variable=BASE_SHA]$LAST_SHA\"\\n          fi\\n        displayName: 'Get last successful commit SHA'\\n        condition: ne(variables['Build.Reason'], 'PullRequest')\\n        env:\\n          AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)\\n\\n      # Connect your workspace on nx.app and uncomment this to enable task distribution.\\n      # The \"--stop-agents-after\" is optional, but allows idle agents to shut down once the \"e2e-ci\" targets have been requested\\n      # - script: yarn nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\" --stop-agents-after=\"e2e-ci\"\\n\\n      - script: yarn install --frozen-lockfile\\n      - script: git branch --track main origin/main\\n        condition: eq(variables['Build.Reason'], 'PullRequest')\\n\\n      # Prepend any command with \"nx-cloud record --\" to record its logs to Nx Cloud\\n      # - script: yarn nx-cloud record -- echo Hello World\\n      - script: yarn nx affected --base=$(BASE_SHA) --head=$(HEAD_SHA) --targets lint test build\\n      - script: yarn nx affected --base=$(BASE_SHA) --head=$(HEAD_SHA) --parallel 1 e2e-ci\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest for Angular Projects\nDESCRIPTION: Vite configuration file setup for running Vitest with Angular, including test environment settings and coverage configuration\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-17-modern-angular-testing-with-nx.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.mts\n/// <reference types='vitest' />\nimport { defineConfig } from 'vite';\nimport angular from '@analogjs/vite-plugin-angular';\n\nexport default defineConfig({\n  plugins: [angular()],\n  test: {\n    watch: false,\n    globals: true,\n    environment: 'jsdom',\n    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],\n    setupFiles: ['src/test-setup.ts'],\n    reporters: ['default'],\n    coverage: {\n      reportsDirectory: './coverage/my-app',\n      provider: 'v8',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Nx Atomizer Plugin Configuration - JSON\nDESCRIPTION: Shows how to configure plugins in `nx.json` to enable the Nx Atomizer for splitting tasks per file. This allows for distribution of long-running tasks across more agents, providing detailed insights into flaky tests and enabling automatic re-runs.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-04-23-test-splitting-techniques.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/cypress/plugin\",\n      \"options\": {\n        \"targetName\": \"e2e\",\n        \"ciTargetName\": \"e2e-ci\"\n      }\n    },\n    {\n      \"plugin\": \"@nx/playwright/plugin\",\n      \"options\": {\n        \"targetName\": \"e2e\",\n        \"ciTargetName\": \"e2e-ci\"\n      }\n    },\n    {\n      \"plugin\": \"@nx/jest/plugin\",\n      \"options\": {\n        \"targetName\": \"test\",\n        \"ciTargetName\": \"test-ci\"\n      }\n    },\n    {\n      \"plugin\": \"@nx/gradle\",\n      \"options\": {\n        \"classesTargetName\": \"classes\",\n        \"buildTargetName\": \"build\",\n        \"testTargetName\": \"test\",\n        \"ciTargetName\": \"test-ci\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing nx-cloud Package for Nx <= 19.6 in JSON\nDESCRIPTION: This snippet shows how to include the nx-cloud package as a dev dependency in package.json for Nx versions 19.6 and below. This is required to use personal access tokens and Nx Cloud ID.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/config.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"nx-cloud\": \"latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom esbuild Options Configuration\nDESCRIPTION: JSON configuration for adding custom esbuild options like banners and footers.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/esbuild/esbuild-plugin.md#2025-04-22_snippet_9\n\nLANGUAGE: jsonc\nCODE:\n```\n\"build\": {\n  \"executor\": \"@nx/esbuild:esbuild\",\n  \"options\": {\n    \"esbuildOptions\": {\n      \"banner\": { \".js\": \"// banner\" },\n      \"footer\": { \".js\": \"// footer\" }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating an Angular Application\nDESCRIPTION: This command generates a new Angular application within an Nx workspace. It uses the @nx/angular plugin's 'app' generator to create the application in the specified 'apps/appName' directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/angular/angular-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"nx g @nx/angular:app apps/appName\"\n```\n\n----------------------------------------\n\nTITLE: Serving a Next.js Application for Development\nDESCRIPTION: This command starts the Next.js application in development mode. It provides hot-reloading and other development-friendly features for local development.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n\"nx dev my-new-app\"\n```\n\n----------------------------------------\n\nTITLE: Compiled Package Exports Configuration\nDESCRIPTION: Updated package.json configuration for exporting pre-compiled artifacts from the dist directory, enabling distribution outside the monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@ts-monorepo-linking/lib-a\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"import\": \"./dist/index.js\",\n      \"default\": \"./dist/index.js\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"main\": \"./dist/index.js\",\n  \"types\": \"./dist/index.d.ts\",\n  \"module\": \"./dist/index.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nx to the latest version\nDESCRIPTION: This command updates the versions of relevant packages in the `package.json` file and generates a `migrations.json` file if there are pending migrations.  It essentially tells Nx to prepare for an update to the latest version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/advanced-update.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"nx migrate latest # same as nx migrate nx@latest\"\n```\n\n----------------------------------------\n\nTITLE: Building a Node.js Library\nDESCRIPTION: This command builds the specified Node.js library using the Nx CLI. Replace `my-new-lib` with the name of your library. The library must have been generated with the `--buildable` flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/node/node-plugin.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI with Nx YAML\nDESCRIPTION: This YAML configuration sets up a CI pipeline in GitLab for Nx workspaces, focusing on building and testing only the affected projects. It includes variables for depth control and caching, and utilizes Nx Cloud for efficient task distribution. The script section also contains comments on connecting the workspace to Nx Cloud and optional configuration for task distribution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/monorepo-ci-gitlab.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"image: node:20\\n\\nvariables:\\n  GIT_DEPTH: 0\\n\\nmain:\\n  interruptible: true\\n  only:\\n    - main\\n    - merge_requests\\n  cache:\\n    key:\\n      files:\\n        - package-lock.json\\n    paths:\\n      - .npm/\\n  script:\\n    # Connect your workspace on <%= nxCloudHost %> and uncomment this to enable task distribution.\\n    # The \"--stop-agents-after\" is optional, but allows idle agents to shut down once the \"e2e-ci\" targets have been requested\\n    # - npx nx-cloud start-ci-run --distribute-on=\\\"3 linux-medium-js\\\" --stop-agents-after=\\\"e2e-ci\\\"\\n\\n    - npm ci --cache .npm --prefer-offline\\n    - NX_HEAD=$CI_COMMIT_SHA\\n    - NX_BASE=${CI_MERGE_REQUEST_DIFF_BASE_SHA:-$CI_COMMIT_BEFORE_SHA}\\n\\n    - npx nx-cloud record -- nx format:check --base=$NX_BASE --head=$NX_HEAD\\n    - npx nx affected --base=$NX_BASE --head=$NX_HEAD -t lint test build e2e-ci\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Dashboard App Component with Authentication Logic\nDESCRIPTION: Creates the main component for the Dashboard application which conditionally renders content based on authentication state. Implements routing behavior to redirect to login when not authenticated.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CommonModule } from '@angular/common';\nimport { Component, inject, OnInit } from '@angular/core';\nimport { Router, RouterModule } from '@angular/router';\nimport { UserService } from '@ng-mf/data-access-user';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  standalone: true,\n  imports: [CommonModule, RouterModule],\n  selector: 'ng-mf-root',\n  template: `\n    <div class=\"dashboard-nav\">Admin Dashboard</div>\n    <div *ngIf=\"isLoggedIn$ | async; else signIn\">\n      You are authenticated so you can see this content.\n    </div>\n    <ng-template #signIn><router-outlet></router-outlet></ng-template>\n  `,\n})\nexport class AppComponent implements OnInit {\n  private router = inject(Router);\n  private userService = inject(UserService);\n  isLoggedIn$ = this.userService.isUserLoggedIn$;\n\n  ngOnInit() {\n    this.isLoggedIn$\n      .pipe(distinctUntilChanged())\n      .subscribe(async (loggedIn) => {\n        // Queue the navigation after initialNavigation blocking is completed\n        setTimeout(() => {\n          if (!loggedIn) {\n            this.router.navigateByUrl('login');\n          } else {\n            this.router.navigateByUrl('');\n          }\n        });\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Private NPM Registry Authentication in Nx Cloud\nDESCRIPTION: Illustrates how to set up authentication for a private NPM registry in an Nx Cloud workflow. This includes creating a .npmrc file and passing an auth token.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nlaunch-templates:\n  my-linux-medium-js:\n    resource-class: 'docker_linux_amd64/medium'\n    image: 'ubuntu22.04-node20.11-v9'\n    init-steps:\n      - name: Checkout\n        uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/checkout/main.yaml'\n      - name: Auth to Registry\n        script: |\n          # create .npmrc with @myorg scoped packages pointing to GH npm registry\n          echo \"@myorg:registry=https://npm.pkg.github.com\" >> .npmrc\n          echo \"//npm.pkg.github.com/:_authToken=${SOME_AUTH_TOKEN}\" >> .npmrc\n      - name: Install Node Modules\n        uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/install-node-modules/main.yaml'\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Webpack Plugin in nx.json\nDESCRIPTION: Basic plugin configuration for @nx/webpack/plugin in nx.json. This setup is compatible with conventional webpack configuration and integrates smoothly with the Webpack CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/ci-deployment.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/webpack/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"build\",\n        \"serveTargetName\": \"serve\",\n        \"serveStaticTargetName\": \"serve-static\",\n        \"previewStaticTargetName\": \"preview\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Workspace to Nx Cloud\nDESCRIPTION: Initial command to connect a Nx workspace to Nx Cloud, enabling distributed task execution\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/distribute-task-execution.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx connect\n```\n\n----------------------------------------\n\nTITLE: Changing Semver Bump Type for a Commit\nDESCRIPTION: JSON configuration where the 'docs' commit type triggers a patch version bump. This simple configuration change adjusts how specific commits affect versioning without needing additional tools or frameworks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/customize-conventional-commit-types.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"conventionalCommits\": {\n      \"types\": {\n        \"docs\": {\n          \"semverBump\": \"patch\",\n          ...\n        },\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Details View Example in JSON\nDESCRIPTION: Example of a complete project configuration output showing the project details including root, type, and configured targets with their executors, options, and metadata.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"project\": {\n    \"name\": \"demo\",\n    \"data\": {\n      \"root\": \" packages/demo\",\n      \"projectType\": \"application\",\n      \"targets\": {\n        \"dev\": {\n          \"executor\": \"nx:run-commands\",\n          \"options\": {\n            \"command\": \"vite dev\"\n          },\n          \"metadata\": {\n            \"technologies\": [\"vite\"]\n          }\n        },\n        \"build\": {\n          \"executor\": \"nx:run-commands\",\n          \"inputs\": [\"production\", \"^production\"],\n          \"outputs\": [\"{projectRoot}/dist\"],\n          \"options\": {\n            \"command\": \"vite build\"\n          },\n          \"metadata\": {\n            \"technologies\": [\"vite\"]\n          }\n        }\n      }\n    }\n  },\n  \"sourceMap\": {\n    \"targets\": [\"packages/demo/vite.config.ts\", \"@nx/vite\"],\n    \"targets.dev\": [\"packages/demo/vite.config.ts\", \"@nx/vite\"],\n    \"targets.build\": [\"packages/demo/vite.config.ts\", \"@nx/vite\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Cloud Workflows in YAML\nDESCRIPTION: Example configuration for Nx Cloud Workflows showing setup and parallel execution of build, e2e, test and lint tasks. The configuration demonstrates the high-level abstraction provided by Nx Cloud for managing CI pipelines.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-10-13-nx-conf-2023-recap.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  NODE_OPTIONS: '--max_old_space_size=4096'\nsetup:\n  - name: Git Checkout\n    uses: 'nx-cloud-steps/checkout'\n  - name: Npm Install\n    uses: 'nx-cloud-steps/npm-install'\nsteps:\n  - name: CI Checks\n    parallel-scripts: |\n      nx affected -t build e2e --parallel=1\n      nx affected -t test lint --parallel=3\n```\n\n----------------------------------------\n\nTITLE: Running Individual Tasks in Nx\nDESCRIPTION: Demonstrates how to run specific tasks like testing, linting, and e2e testing for different projects in an Nx workspace using the command line.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/9-run-many/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx test react-store # runs the tests for react-store\nnpx nx lint inventory # runs the linter on inventory\nnpx nx e2e react-store-e2e # runs e2e tests for the react-store\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Code Owners in nx.json\nDESCRIPTION: Configuration for setting up GitHub CODEOWNERS file with project and file-based ownership patterns. Supports team and individual assignments with descriptive rules.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/owners/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"owners\": {\n    \"format\": \"github\",\n    \"outputPath\": \"CODEOWNERS\",\n    \"patterns\": [\n      {\n        \"description\": \"A description of the rule\",\n        \"owners\": [\"@joelovesrust\"],\n        \"projects\": [\"my-rust-app\", \"rust-*\", \"tag:rust\"],\n        \"files\": [\".github/workflows/**/*\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ESBuild Plugin for Environment Variables\nDESCRIPTION: JavaScript implementation of an ESBuild plugin that collects environment variables with a specific prefix and makes them available to the application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/use-environment-variables-in-angular.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst myOrgEnvRegex = /^MY_ORG_/i;\n\nconst envVarPlugin = {\n  name: 'env-var-plugin',\n  setup(build) {\n    const options = build.initialOptions;\n\n    const envVars = {};\n    for (const key in process.env) {\n      if (myOrgEnvRegex.test(key)) {\n        envVars[key] = process.env[key];\n      }\n    }\n\n    options.define['process.env'] = JSON.stringify(envVars);\n  },\n};\n\nmodule.exports = envVarPlugin;\n```\n\n----------------------------------------\n\nTITLE: Initializing Nx in an Existing Project using npx\nDESCRIPTION: This command uses npx to initialize Nx in an existing project, adding the nx package which enables task running in parallel and caching capabilities without requiring a full migration to a monorepo setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/getting-started/why-nx.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Removing Implicit Dependencies in package.json\nDESCRIPTION: This example shows how to remove an implicit dependency from a project in the package.json file, overriding Nx's automatic dependency detection.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_21\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"mylib\",\n  \"nx\": {\n    \"implicitDependencies\": [\"!anotherlib\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Show Project JSON Details\nDESCRIPTION: Displays project information in JSON format\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/show.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx show project my-app --json\n```\n\n----------------------------------------\n\nTITLE: Configuring Changelog Render Options in JSON\nDESCRIPTION: This JSON configuration snippet shows how to set options for the changelog renderer. It includes settings for authors, GitHub username mapping, commit references, and version title dates.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/configure-changelog-format.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"changelog\": {\n      \"projectChangelogs\": {\n        \"renderOptions\": {\n          \"authors\": true,\n          \"mapAuthorsToGitHubUsernames\": true,\n          \"commitReferences\": true,\n          \"versionTitleDate\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Federation for React Host\nDESCRIPTION: TypeScript configuration for adding a remote application to a host's Module Federation configuration, specifying the remote's name in the remotes array\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/creating-a-remote.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ModuleFederationConfig } from '@nx\\/webpack';\n\nconst config: ModuleFederationConfig = {\n  name: 'shell',\n  remotes: ['myremote'],\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Connecting Nx Project to Nx Cloud using CLI\nDESCRIPTION: This command initiates the process of connecting an Nx project to Nx Cloud. It opens a browser window for registration and guides the user through creating a PR to enable Nx Cloud on their repository.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/3a-fast-ci/2-connect-to-nx-cloud/content.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx connect\n```\n\n----------------------------------------\n\nTITLE: Configuring Library TypeScript Settings in Nx\nDESCRIPTION: TypeScript configuration for library production code that extends the base config and references project dependencies. Includes specific compiler options and source file patterns while excluding test files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/switch-to-workspaces-project-references.md#2025-04-22_snippet_8\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"extends\": \"../../tsconfig.base.json\",\n  \"compilerOptions\": {\n    // outDir should be local to the project and not in the same folder as any other tsconfig.*.json\n    \"outDir\": \"./out-tsc/lib\"\n    // Any overrides\n  },\n  \"include\": [\"src/**/*.ts\"],\n  \"exclude\": [\n    // exclude config and test files\n  ],\n  \"references\": [\n    // tsconfig.lib.json files for project dependencies\n    // UPDATED BY NX SYNC\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create a Buildable React Library (rollup)\nDESCRIPTION: Generates a buildable React library using Rollup. This allows publishing the library to npm or other registries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react/react-plugin.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:lib libs/my-new-lib --bundler=rollup\n```\n\n----------------------------------------\n\nTITLE: Configuring babelUpwardRootMode in Nx project.json\nDESCRIPTION: This snippet demonstrates how to set babelUpwardRootMode to true in the project.json file. This configuration sets the rootMode option to 'upward' in the Babel config, which is useful in monorepo setups where projects need to apply individual .babelrc files.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/rollup/src/docs/rollup-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n//...\n\"my-app\": {\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/rollup:rollup\",\n      \"options\": {\n          \"babelUpwardRootMode\": true,\n          //...\n      },\n      //...\n    },\n    //...\n  },\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace for React Native\nDESCRIPTION: This command creates a new Nx workspace configured for React Native development, setting up a mobile application named 'mobile'. It utilizes the `create-nx-workspace` command with the `react-native` preset and specifies the application name.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-native.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpx create-nx-workspace happynrwl \\\n--preset=react-native \\\n--appName=mobile\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of run-many Command in Nx CLI\nDESCRIPTION: The basic syntax for using the run-many command in Nx. This command is used to run a target for multiple projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run-many.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many\n```\n\n----------------------------------------\n\nTITLE: Registering a Global Sync Generator in nx.json\nDESCRIPTION: This JSON configuration registers the 'my-plugin:my-sync-generator' as a global sync generator within the Nx workspace. This ensures that the generator will be executed whenever the `nx sync` command is run, updating root-level configuration files and ensuring workspace consistency.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/create-sync-generator.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"sync\": {\n    \"globalGenerators\": [\"my-plugin:my-sync-generator\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a storybook-composition target using run-commands\nDESCRIPTION: Configuration for creating a custom storybook-composition target in project.json that runs multiple Storybook instances in parallel using Nx's run-commands executor.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/storybook-composition-setup.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"targets\": {\n    // ...\n    \"storybook-composition\": {\n      \"executor\": \"nx:run-commands\",\n      \"options\": {\n        \"commands\": [\n          \"nx storybook one-composed\",\n          \"nx storybook two-composed\",\n          \"nx storybook three-composed\"\n        ],\n        \"parallel\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Library in a Specific Directory using Nx\nDESCRIPTION: This snippet shows how to specify a directory for the new library when using Nx. By executing 'nx g lib libs/shared/my-lib', a library named 'my-lib' is created within the 'libs/shared/' directory, allowing for better organization of shared resources in larger applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/library-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g lib libs/shared/my-lib\n```\n\n----------------------------------------\n\nTITLE: Generating Stories for New Components in React Project\nDESCRIPTION: Command to generate stories for all components in a React project using the @nx/react:stories generator, useful when adding new components.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/plugin-react.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:stories --project=<project-name>\n```\n\n----------------------------------------\n\nTITLE: Setting NX_BRANCH Environment Variable in Azure Pipelines\nDESCRIPTION: This YAML snippet demonstrates how to set the NX_BRANCH environment variable in Azure Pipelines configuration. The variable is set to the pull request number, which is required for Nx Cloud GitHub integration when using certain CI providers.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/set-up/github.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n  NX_BRANCH: $(System.PullRequest.PullRequestNumber)\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration in package.json\nDESCRIPTION: Updates to package.json to register migrations for the plugin by adding an nx-migrations entry that points to the migrations.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/migration-generators.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nx-migrations\": {\n    \"migrations\": \"./migrations.json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Process.env TypeScript Type Definitions\nDESCRIPTION: TypeScript declaration file that defines the structure of the process.env object for use in Angular applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/use-environment-variables-in-angular.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const process: {\n  env: {\n    API_URL: string;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Shorthand for Running Shell Commands - JSON\nDESCRIPTION: This snippet demonstrates how to define a target for a single shell command using the shorthand 'nx:run-commands' executor in the project.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/executors-and-configurations.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"root\": \"apps/cart\",\n  \"sourceRoot\": \"apps/cart/src\",\n  \"projectType\": \"application\",\n  \"generators\": {},\n  \"targets\": {\n    \"echo\": {\n      \"command\": \"echo 'hello world'\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Rust Library in Nx Workspace\nDESCRIPTION: Command to generate a new Rust library using the @monodon/rust plugin within the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-rust.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @monodon/rust:library cats --directory=libs/cats\n```\n\n----------------------------------------\n\nTITLE: Define Cacheable Tasks in Nx (For Nx < 17)\nDESCRIPTION: This code snippet demonstrates how to enable caching for build and test tasks by modifying the cacheableOperations property in nx.json for versions before Nx 17.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/cache-task-results.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasksRunnerOptions\": {\n    \"default\": {\n      \"runner\": \"nx/tasks-runners/default\",\n      \"options\": {\n        \"cacheableOperations\": [\"build\", \"test\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Watch Mode Graph\nDESCRIPTION: Command to watch for changes to project graph and update the browser view automatically\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/graph.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx graph --watch\n```\n\n----------------------------------------\n\nTITLE: Running Dashboard with Remote Login Application\nDESCRIPTION: Command to serve the Dashboard application with the Login application as a remote module during development. The devRemotes parameter specifies which remotes should be served in development mode.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnx serve dashboard --devRemotes=login\n```\n\n----------------------------------------\n\nTITLE: Installing Nx ESLint Dependencies\nDESCRIPTION: Install required Nx ESLint plugin and devkit to set up module boundary enforcement\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/enforce-module-boundaries.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx\\/eslint-plugin @nx\\/devkit\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Details in Nx\nDESCRIPTION: This command shows detailed information about a specific project named 'my-app'. It opens an interactive view if in a terminal, otherwise defaults to JSON output.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/show.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx show project my-app\n```\n\n----------------------------------------\n\nTITLE: Generating Shared User Data Access Library\nDESCRIPTION: Command to generate a shared Angular library for user data access.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:lib libs/shared/data-access-user\n```\n\n----------------------------------------\n\nTITLE: Generating React Library with Nx CLI\nDESCRIPTION: This command uses the Nx CLI to generate a React library named \"mylib\" within the \"packages\" directory. It leverages the @nx/react plugin's library generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/generate-code.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:lib packages/mylib\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace-Level Inputs in nx.json\nDESCRIPTION: Example of defining inputs for all targets with a specific name in nx.json using targetDefaults. This configuration applies to all build targets across the workspace and overrides any inputs inferred by Nx plugins.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/configure-inputs.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"build\": {\n      \"inputs\": [\"production\", \"^production\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Nx Workspace in Existing Repository\nDESCRIPTION: Command to add Nx to an existing repository. The command analyzes the current workspace and prompts for setup options including cacheable operations and task pipeline configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-10-14-whats-new-in-nx-15.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Nx Tasks in Parallel\nDESCRIPTION: Command to execute multiple Nx tasks (test, lint, and e2e) in parallel using the run-many command with target specification.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many -t test lint e2e\n```\n\n----------------------------------------\n\nTITLE: Angular Module Federation for SSR Configuration\nDESCRIPTION: This snippet configures Webpack for Angular Module Federation with Server-Side Rendering (SSR) using `withModuleFederationForSSR` from `@nx/angular/module-federation`. It uses `composePlugins` with the SSR specific plugin and a custom module federation config.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/webpack-plugins.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  composePlugins,\n  withModuleFederationForSSR,\n} = require('@nx/angular/module-federation');\n\n// Host config\n// e.g. { remotes: ['about', 'dashboard'] }\nconst moduleFederationConfig = require('./module-federation.config');\n\nmodule.exports = composePlugins(\n  withModuleFederationForSSR(moduleFederationConfig),\n  (config) => {\n    // Further customize webpack config\n    return config;\n  }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Updating Nx and Its Plugins (Shell)\nDESCRIPTION: These commands demonstrate how to update Nx and its plugins using the automated migration command. The first command migrates to the latest version, and the second runs the migrations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-10-03-nx-20-release.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\nnpx nx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for Angular Store\nDESCRIPTION: Command to start the development server for the angular-store project using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/templates/angular-monorepo/lesson-2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx serve angular-store\n```\n\n----------------------------------------\n\nTITLE: Angular Application with Custom Prefix and Tags\nDESCRIPTION: Creates an Angular application with a custom selector prefix and adds tags for linting configuration\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/application-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:app apps/my-app --prefix=admin --tags=scope:admin,type:ui\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Cache and Task Pipeline\nDESCRIPTION: Configuration in nx.json that sets up caching behavior and defines task dependencies for build, typecheck, and lint operations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/typescript-packages.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"./node_modules/nx/schemas/nx-schema.json\",\n  \"targetDefaults\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"],\n      \"outputs\": [\"{projectRoot}/dist\"],\n      \"cache\": true\n    },\n    \"typecheck\": {\n      \"cache\": true\n    },\n    \"lint\": {\n      \"cache\": true\n    }\n  },\n  \"defaultBase\": \"main\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example: GitHub Owners Configuration in Nx\nDESCRIPTION: This example demonstrates a complete GitHub owners configuration in Nx. It includes various patterns for assigning owners based on project tags, project names, and file globs.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/owners/owners-plugin.md#2025-04-22_snippet_7\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"owners\": {\n    // defaults to \"github\"\n    \"format\": \"github\",\n    // defaults to \".github/CODEOWNERS\"\n    \"outputPath\": \"CODEOWNERS\",\n    \"patterns\": [\n      {\n        \"description\": \"Joe should double check all changes to rust code\",\n        \"projects\": [\"tag:rust\"],\n        \"owners\": [\"@joelovesrust\"]\n      },\n      {\n        \"description\": \"The Finance team owns these projects\",\n        \"projects\": [\"finance-*\"],\n        \"owners\": [\"@finance-team\"]\n      },\n      {\n        \"description\": \"Alice, Bob and Cecil work together on these projects\",\n        \"projects\": [\"admin\", \"booking\", \"cart\"],\n        \"owners\": [\"@alice\", \"@bob\", \"@cecil\"]\n      },\n      {\n        \"description\": \"CI Workflows\",\n        \"files\": [\".github/workflows/**/*\"],\n        \"owners\": [\"@devops\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticate to Custom Registry in CI - Bash\nDESCRIPTION: This snippet demonstrates how to authenticate with a custom registry in CI by adding authentication tokens to the `.npmrc` file. The token is specific to the registry and the user account.  This is essential for automated publishing processes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/configure-custom-registries.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nregistry=https://my-custom-registry.com/\n//my-custom-registry.com/:_authToken=<TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Defining Global Task Dependencies with Filename\nDESCRIPTION: This snippet demonstrates how to define global task dependencies in nx.json with the filename explicitly shown. The build target is configured to depend on the build target of all of its dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/defining-task-pipeline.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"targetDefaults\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Tailwind CSS with CLI\nDESCRIPTION: This snippet demonstrates how to initialize Tailwind CSS using the Tailwind CLI, generating the necessary configuration files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-in-react.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd {path to your app}\nnpx tailwindcss init -p\n```\n\n----------------------------------------\n\nTITLE: Defining Global Task Dependencies in nx.json\nDESCRIPTION: This snippet shows how to define global task dependencies for all projects in the nx.json file. The example sets up the build target to depend on the build target of all of its dependencies (^build).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/defining-task-pipeline.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// nx.json\n{\n  ...\n  \"targetDefaults\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Global Nx Installation with npm\nDESCRIPTION: This command removes the global Nx package using npm. It's essential for users who need to uninstall duplicate or outdated installations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/installation/update-global-installation.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm rm --global nx\n```\n\n----------------------------------------\n\nTITLE: Dynamic Agent Configuration in YAML for Nx\nDESCRIPTION: This YAML snippet defines the distribution and assignment rules for dynamic agent configuration, specifying agent types and parallel settings for task distribution. It emphasizes referencing configuration within CI pipelines for streamlined task execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/assignment-rules.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndistribute-on:\n  default: 5 linux-medium-js, 5 linux-large-js\n\nassignment-rules:\n  - projects:\n      - app1\n    targets:\n      - build\n    configurations:\n      - production\n    run-on:\n      - agent: linux-large-js\n\n  - targets:\n      - lint\n    run-on:\n      - agent: linux-medium-js\n        parallelism: 3\n\n  - configurations:\n      - development\n    run-on:\n      - agent: linux-medium-js\n      - agent: linux-large-js\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Dependencies in package.json\nDESCRIPTION: This example shows how to manually set implicit dependencies for a project in the package.json file, which is useful when dependencies cannot be deduced statically.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_19\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"mylib\",\n  \"nx\": {\n    \"implicitDependencies\": [\"anotherlib\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Web Application\nDESCRIPTION: Generates a new web application using the @nx/web plugin.  This creates a basic web component application within the specified apps directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/web/web-plugin.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/web:app apps/my-new-app\n```\n\n----------------------------------------\n\nTITLE: Parallel Testing of Specific Projects\nDESCRIPTION: Run tests for specific projects (proj1 and proj2) in parallel.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run-many.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t test -p proj1 proj2\n```\n\n----------------------------------------\n\nTITLE: Adding Name Property to Remix Package.json\nDESCRIPTION: JSON snippet showing how to add a name property to the Remix application's package.json, which is required for PNPM workspace filtering.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-remix-app\",\n  \"private\": true,\n  \"sideEffects\": false,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Custom Build Script\nDESCRIPTION: Updates to package.json to include custom scripts for generating package.json and running a custom build process that includes the package.json generation step.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/ci-deployment.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"copy-package-json\": \"node scripts/create-package-json.js\",\n    \"custom-build\": \"nx build && npm run copy-package-json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a React Host with Remote Applications using Nx\nDESCRIPTION: Command to scaffold a React host application with two remote applications using Nx generators. This creates a complete module federation setup with all necessary files for the host and remote applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/creating-a-host.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:host apps/react/with-remotes/shell --remotes=remote1,remote2\n```\n\n----------------------------------------\n\nTITLE: Running Nx Version Migration Command\nDESCRIPTION: Command to migrate Nx plugins between specific minimum and maximum versions. This ensures all plugins are updated consistently and safely through the migration process.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/keep-nx-versions-in-sync.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate --from=[minimumVersion] --to=[maximumVersion]\n```\n\n----------------------------------------\n\nTITLE: Customizing CLI with Enquirer (TypeScript)\nDESCRIPTION: This snippet shows how to use the `enquirer` library to prompt the user for input when creating a new workspace.  It prompts for the workspace name and a theme (light or dark), then passes these options to `createWorkspace`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-10-create-your-own-create-react-app-cli.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n#!/usr/bin/env node\n\nimport { createWorkspace } from 'create-nx-workspace';\nimport { prompt } from 'enquirer';\n\nasync function main() {\n  let name = process.argv[2];\n  if (!name) {\n    const response = await prompt<{ name: string }>({      \n      type: 'input',\n      name: 'name',\n      message: 'What is the name of the workspace?',\n    });\n    name = response.name;\n  }\n  let mode = process.argv[3];\n  if (!mode) {\n    mode = (\n      await prompt<{ mode: 'light' | 'dark' }>({\n        name: 'mode',\n        message: 'Which mode to use',\n        initial: 'dark' as any,\n        type: 'autocomplete',\n        choices: [\n          { name: 'light', message: 'light' },\n          { name: 'dark', message: 'dark' },\n        ],\n      })\n    ).mode;\n  }\n\n  console.log(`Creating the workspace: ${name}`);\n\n  // This assumes \"my-own-react\" and \"create-my-own-react-app\" are at the same version\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const presetVersion = require('../package.json').version;\n\n  // TODO: update below to customize the workspace\n  const { directory } = await createWorkspace(`my-own-react@${presetVersion}`, {\n    name,\n    nxCloud: false,\n    packageManager: 'npm',\n    mode,\n  });\n\n  console.log(`Successfully created the workspace: ${directory}.`);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Executing CLI with theme (Shell)\nDESCRIPTION: This snippet shows how to execute a command with parameters within the test environment, to make sure `dark` is correctly passed into `create-my-own-react-app`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-10-create-your-own-create-react-app-cli.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nexec1-app ${projectName} dark`, {\n  cwd: dirname(projectDirectory),\n  stdio: 'inherit',\n});\n```\n\n----------------------------------------\n\nTITLE: Run Nx Release with Dry Run\nDESCRIPTION: Executes the `nx release` command with the `--dry-run` flag. This simulates the release process without making any actual changes, allowing you to preview the intended actions before proceeding with a real release. It's recommended to use `--dry-run` initially.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/manage-releases.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"nx release --dry-run\"\n```\n\n----------------------------------------\n\nTITLE: Connecting Workspace to Nx Cloud using CLI\nDESCRIPTION: Command to connect the current workspace to Nx Cloud after pushing it to a source control provider like GitHub.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/intro/connect-to-cloud.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx connect\n```\n\n----------------------------------------\n\nTITLE: Sync Project Dependencies using NX Build Command\nDESCRIPTION: This text command initiates the build process for the `zoo` project, prompting NX to sync outdated or missing TypeScript project references in the repository. Users can opt to allow NX to update configurations or proceed without syncing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/typescript-packages.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnx build @tuskdesign/zoo\n```\n\n----------------------------------------\n\nTITLE: Importing Shared UI Component in Nuxt App\nDESCRIPTION: Example of importing a shared UI component from a library into a Nuxt application within an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-06-nuxt-js-support-in-nx.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyButton } from '@my-org/my-shared-ui';\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI for Distributed Task Execution with Nx\nDESCRIPTION: This YAML configuration sets up a GitLab CI pipeline for distributed task execution using Nx Cloud. It defines templates for DTE agents and the main job, along with specific job configurations for the orchestrator and multiple agents.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/enterprise/dte/gitlab-dte.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage: node:18\n\n# Creating template for DTE agents\n.dte-agent:\n  interruptible: true\n  cache:\n    key:\n      files:\n        - yarn.lock\n    paths:\n      - '.yarn-cache/'\n  script:\n    - yarn install --cache-folder .yarn-cache --prefer-offline --frozen-lockfile\n    - yarn nx-cloud start-agent\n\n# Creating template for a job running DTE (orchestrator)\n.base-pipeline:\n  interruptible: true\n  only:\n    - main\n    - merge_requests\n  cache:\n    key:\n      files:\n        - yarn.lock\n    paths:\n      - '.yarn-cache/'\n  before_script:\n    - yarn install --cache-folder .yarn-cache --prefer-offline --frozen-lockfile\n    - NX_HEAD=$CI_COMMIT_SHA\n    - NX_BASE=${CI_MERGE_REQUEST_DIFF_BASE_SHA:-$CI_COMMIT_BEFORE_SHA}\n\n  artifacts:\n    expire_in: 5 days\n    paths:\n      - dist\n\n# Main job running DTE\nnx-dte:\n  stage: affected\n  extends: .base-pipeline\n  script:\n    - yarn nx-cloud start-ci-run --distribute-on=\"manual\" --stop-agents-after=e2e-ci\n    - yarn nx-cloud record -- nx format:check --base=$NX_BASE --head=$NX_HEAD\n    - yarn nx affected --base=$NX_BASE --head=$NX_HEAD -t lint,test,build,e2e-ci --parallel=2\n\n# Create as many agents as you want\nnx-dte-agent1:\n  extends: .dte-agent\n  stage: affected\nnx-dte-agent2:\n  extends: .dte-agent\n  stage: affected\nnx-dte-agent3:\n  extends: .dte-agent\n  stage: affected\n```\n\n----------------------------------------\n\nTITLE: Using Shared Component in Angular Template\nDESCRIPTION: This HTML snippet shows how to use the imported shared ProductsComponent in an Angular component's template.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/7-share-code/content.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<lib-products></lib-products>\n```\n\n----------------------------------------\n\nTITLE: Enabling Nx Agents in CI Configuration\nDESCRIPTION: This YAML snippet shows how to enable Nx Agents in a CI setup using a single line of configuration. It distributes tasks across 3 Linux machines optimized for JavaScript.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-22-nx-highlights-2024.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnpx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Nx in an Existing Turborepo Workspace\nDESCRIPTION: Command to initialize Nx in an existing Turborepo workspace. This automatically configures Nx to work with the existing project structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/from-turborepo.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Level Outputs in project.json\nDESCRIPTION: Example of defining output paths for a specific project in its project.json file, which overrides any workspace-level or plugin-inferred output configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/configure-outputs.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"myreactapp\",\n  \"targets\": {\n    \"build\": {\n      \"outputs\": [\"{projectRoot}/dist\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sequential Project Testing\nDESCRIPTION: Run tests for projects in sequence rather than parallel.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run-many.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t test -p proj1 proj2 --parallel=false\n```\n\n----------------------------------------\n\nTITLE: Linting an Angular Library\nDESCRIPTION: This command runs the linter (default is ESLint) on the specified Angular library using the Nx CLI. It checks the code for style and syntax errors.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/angular/angular-plugin.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n\"nx lint libName\"\n```\n\n----------------------------------------\n\nTITLE: Generating Host and Remote Applications for React - Shell Command\nDESCRIPTION: This command generates the host application along with specified remotes in a React Nx workspace. It sets up the applications with the necessary configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/faster-builds.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:host apps/host --remotes=shop,cart,about\n```\n\n----------------------------------------\n\nTITLE: Creating New Angular Rspack Application\nDESCRIPTION: Shell commands for creating a new Angular application with Rspack bundler by first creating a Webpack-based app and then converting it to use Rspack.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-19-using-angular-with-rspack.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:application myapp --bundler=webpack\nnx g @nx/angular:convert-to-rspack myapp\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Host Application in Nx Angular\nDESCRIPTION: Command to generate a new host application with Dynamic Federation configuration and specify the login remote application\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:host apps/employee --remotes=login --dynamic\n```\n\n----------------------------------------\n\nTITLE: Implementing Routing in React Application\nDESCRIPTION: This snippet shows how to import shared components from libraries and set up routes in the main App component using React Router.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/7-share-code/content.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Route, Routes } from 'react-router-dom';\n\n// importing the component from the library\nimport { Products } from '@react-monorepo/products';\n\nfunction Home() {\n  return <h1>Home</h1>;\n}\n\nexport function App() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Home />}></Route>\n      <Route path=\"/products\" element={<Products />}></Route>\n    </Routes>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE:  Nx Project Configuration for Plugins (JSON)\nDESCRIPTION: This snippet displays the configuration options for the @nx/eslint/plugin and @nx/next/plugin in the nx.json file. It illustrates how each plugin can be customized and how tasks are linked to their respective commands.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-existing-project.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/eslint/plugin\",\n      \"options\": {\n        \"targetName\": \"eslint:lint\"\n      }\n    },\n    {\n      \"plugin\": \"@nx/next/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"next:build\",\n        \"devTargetName\": \"dev\",\n        \"startTargetName\": \"start\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring waitUntilTargets in Nx Project JSON\nDESCRIPTION: This snippet demonstrates how to configure the waitUntilTargets option in the project.json file for an API app. It ensures that the 'db:serve' task is run before the 'api:serve' task, with both processes continuing to execute in parallel afterwards.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/node/wait-for-tasks.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"serve\": {\n      \"executor\": \"@nx/js:node\",\n      \"options\": {\n        \"waitUntilTargets\": [\"db:serve\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Owners for GitLab in Nx\nDESCRIPTION: This snippet illustrates the configuration for code ownership in GitLab using Nx. It includes options for specifying the format, output path, patterns, and sections for assigning owners to projects or files. GitLab-specific features like sections and approval requirements are also demonstrated.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/owners/owners-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // Can be set to true instead of an object to accept all defaults\n  \"owners\": {\n    // Options are `github`, `bitbucket` or `gitlab`. (Optional) Defaults to `github`\n    \"format\": \"gitlab\",\n    // (Optional) Default changes based on format: `.github/CODEOWNERS`, `.bitbucket/CODEOWNERS`, `.gitlab/CODEOWNERS`\n    \"outputPath\": \"CODEOWNERS\",\n    // (Optional)\n    \"patterns\": [\n      {\n        \"description\": \"A description of the rule\",\n        \"owners\": [\"@joelovesrust\"],\n        // Specify either `projects` or `files`, not both\n        // Can be any project specifier that could be used in `nx run-many`\n        // See https://nx.dev/nx-api/nx/documents/run-many\n        \"projects\": [\"my-rust-app\", \"rust-*\", \"tag:rust\"],\n        // File globs\n        \"files\": [\".github/workflows/**/*\"]\n      }\n    ],\n    // (Optional)\n    \"sections\": [\n      {\n        // Labels the section\n        \"name\": \"My section\",\n        // (Optional) The owners to use if a pattern does not specify a set of owners\n        \"defaultOwners\": [\"@cheddar\"],\n        // Specify either `numberOfRequiredApprovals` or `optional`, not both\n        // (Optional) Require more than one person to approve the PR\n        \"numberOfRequiredApprovals\": 2,\n        // (Optional) Do not require any approvals, just notify the owners\n        \"optional\": true,\n        // Same format as the root patterns\n        \"patterns\": []\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx in package.json\nDESCRIPTION: This JSON snippet shows how to modify the package.json file to use Nx for script execution with caching enabled. The test script is prefixed with 'nx exec -- ' to ensure cacheable operations. Adjust caching inputs for better performance.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-monorepo.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-workspace\",\n  ...\n  \"scripts\": {\n    \"build\": \"nx next:build\",\n    \"lint\": \"nx eslint:lint\",\n    \"test\": \"nx exec -- node ./run-tests.js\"\n  },\n  ...\n  \"nx\": {\n    \"targets\": {\n      \"test\": {\n        \"cache\": \"true\",\n        \"inputs\": [\n          \"default\",\n          \"^default\"\n        ],\n        \"outputs\": []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Project Structure with Nx\nDESCRIPTION: This shell command generates a visual representation of the project structure and dependencies using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx graph\n```\n\n----------------------------------------\n\nTITLE: Buildable Library Configuration with Custom Target Name\nDESCRIPTION: Configuration for a buildable Angular library with a custom build target name (build-base) to match the application's build target. This ensures proper incremental build dependency detection.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/setup-incremental-builds-angular.md#2025-04-22_snippet_12\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"projectType\": \"library\",\n  ...\n  \"targets\": {\n    \"build-base\": {\n      \"executor\": \"@nx/angular:ng-packagr-lite\",\n      \"outputs\": [\n        \"{workspaceRoot}/dist/libs/my-lib\"\n      ],\n      \"options\": {\n        ...\n      },\n      \"configurations\": {\n        ...\n      },\n      \"defaultConfiguration\": \"production\"\n    },\n    ...\n  },\n  ...\n},\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Server in Nx\nDESCRIPTION: This command utilizes the Nx CLI to generate a custom server for an existing application named 'my-app'. The 'custom-server' schematic is invoked, adding server-side functionality to the specified application.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/custom-server-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"nx g custom-server my-app\"\n```\n\n----------------------------------------\n\nTITLE: Serving a React Router Application for Production\nDESCRIPTION: Command to serve a production build of a React Router application in an Nx workspace, building the application and then serving it from the server bundle.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-router.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx start happynrwl\n```\n\n----------------------------------------\n\nTITLE: Complete Vite Configuration for Libraries\nDESCRIPTION: Full Vite configuration setup for libraries in an Nx workspace including build, plugins, and test settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/vite/configure-vite.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types='vitest' />\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport dts from 'vite-plugin-dts';\nimport * as path from 'path';\nimport { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';\n\nexport default defineConfig({\n  root: __dirname,\n  cacheDir: '../node_modules/.vite/my-lib',\n  plugins: [\n    react(),\n    nxViteTsPaths(),\n    dts({\n      entryRoot: 'src',\n      tsConfigFilePath: path.join(__dirname, 'tsconfig.lib.json'),\n      skipDiagnostics: true,\n    }),\n  ],\n  build: {\n    outDir: '../dist/libs/my-lib',\n    reportCompressedSize: true,\n    commonjsOptions: {\n      transformMixedEsModules: true,\n    },\n    lib: {\n      entry: 'src/index.ts',\n      name: 'my-lib',\n      fileName: 'index',\n      formats: ['es'],\n    },\n    rollupOptions: {\n      external: ['react', 'react-dom', 'react/jsx-runtime'],\n    },\n  },\n  test: {\n    globals: true,\n    cache: {\n      dir: '../node_modules/.vitest/libs/my-lib',\n    },\n    environment: 'jsdom',\n    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],\n    reporters: ['default'],\n    coverage: {\n      reportsDirectory: '../coverage/libs/my-lib',\n      provider: 'v8',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Module Federation in TypeScript\nDESCRIPTION: Update the host application's module federation config to include the 'greeting' remote.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/federate-a-module.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ModuleFederationConfig } from '@nx/webpack';\n\nconst config: ModuleFederationConfig = {\n  name: 'host',\n  remotes: ['greeting'], //  <-- Ensure that greeting remote is listed here\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining Workspace with Project Detection in JSON\nDESCRIPTION: This JSON configuration defines the workspace structure for a monorepo using Nx. It utilizes package manager workspaces to automatically detect projects without separate Nx-specific configurations. The workspace setup shown is for applications in the 'apps' directory and packages in the 'packages' directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/maintain-typescript-monorepos.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workspaces\": [\"apps/*\", \"packages/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Configuration for lib1 in project.json\nDESCRIPTION: The original verbose project.json configuration for lib1, showing build, lint, and test targets with their full configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/reduce-repetitive-configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"lib1\",\n  \"$schema\": \"../../node_modules/nx/schemas/project-schema.json\",\n  \"sourceRoot\": \"libs/lib1/src\",\n  \"projectType\": \"library\",\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/js:tsc\",\n      \"outputs\": [\"{options.outputPath}\"],\n      \"options\": {\n        \"outputPath\": \"dist/libs/lib1\",\n        \"main\": \"libs/lib1/src/index.ts\",\n        \"tsConfig\": \"libs/lib1/tsconfig.lib.json\",\n        \"assets\": [\"libs/lib1/*.md\", \"libs/lib1/src/images/*\"]\n      }\n    },\n    \"lint\": {\n      \"executor\": \"@nx/eslint:lint\",\n      \"outputs\": [\"{options.outputFile}\"],\n      \"options\": {\n        \"lintFilePatterns\": [\"libs/lib1/**/*.ts\"]\n      }\n    },\n    \"test\": {\n      \"executor\": \"@nx/jest:jest\",\n      \"outputs\": [\"{workspaceRoot}/coverage/{projectRoot}\"],\n      \"options\": {\n        \"jestConfig\": \"libs/lib1/jest.config.ts\",\n        \"passWithNoTests\": true\n      },\n      \"configurations\": {\n        \"ci\": {\n          \"ci\": true,\n          \"codeCoverage\": true\n        }\n      }\n    }\n  },\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Storybook Interaction Test Example\nDESCRIPTION: This Storybook `play` function demonstrates an interaction test for a button component. It simulates two clicks on the button and asserts that the button's text updates correctly after each click. It uses `userEvent.click` to simulate clicks and `canvas.getByRole` to select the button. The `expect` function validates the text content of the button.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/interaction-tests.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const ButtonClicked: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const button = canvas.getByRole('button');\n    await userEvent.click(button);\n    expect(canvas.getByRole('button').innerText).toBe(\n      \"You've clicked me 1 times\"\n    );\n    await userEvent.click(button);\n    expect(canvas.getByRole('button').innerText).toBe(\n      \"You've clicked me 2 times\"\n    );\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nx Workspace\nDESCRIPTION: Command to create a new Nx workspace, which now includes an option to choose between package-based and integrated style monorepos.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-10-14-whats-new-in-nx-15.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/js Plugin via Command Line\nDESCRIPTION: This shell command installs the @nx/js plugin into the Nx workspace. The installation process also runs an initialization script that configures the plugin for the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/2-smart-monorepo/5-add-plugin/content.mdx#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpx nx add @nx/js\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js distDir for custom output paths\nDESCRIPTION: Configuration example for customizing the output directory in Next.js after migration, by setting distDir in the Next.js config file. This replaces the outputPath option from @nx/next:build.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/troubleshoot-convert-to-inferred.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst configuration = process.env.NX_TASK_TARGET_CONFIGURATION || 'default';\n// ...\nconst nextConfig = {\n  nx: {\n    ...options,\n  },\n  // Differentiate production and development builds. You can also use the `configuration` variable that will match the `--configuration` option passed to Nx.\n  distDir: process.env.NODE_ENV === 'production' ? 'dist' : 'dist-dev',\n};\nconst plugins = [withNx];\nmodule.exports = composePlugins(...plugins)(nextConfig);\n```\n\n----------------------------------------\n\nTITLE: Preview Task Graph in Webview\nDESCRIPTION: Command to preview the Nx task graph in a web interface before execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n nx run myapp:build --graph\n```\n\n----------------------------------------\n\nTITLE: Generating JavaScript Applications and Components in Nx\nDESCRIPTION: Commands for generating JavaScript applications and components in Nx using the --js flag. This allows developers to use JavaScript instead of TypeScript while maintaining the same build, test, lint, and serve capabilities.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/js-and-ts.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:app apps/myapp --js\nnx g @nx/react:component apps/myapp/src/lib/mycmp --js\n```\n\n----------------------------------------\n\nTITLE: Adding React Native Capabilities to an Existing Workspace\nDESCRIPTION: This command adds React Native capabilities to an existing Nx workspace. It installs the `@nx/react-native` package, providing necessary generators and executors for React Native development within the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-native.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nnx add @nx/react-native\n```\n\n----------------------------------------\n\nTITLE: Import External Code Commands\nDESCRIPTION: Commands to import code and git history from another repository.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/commands.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx import https://github.com/myorg/inventory-app.git apps/inventory\nnx import ../inventory-app apps/inventory\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/node Plugin for Nx 18+\nDESCRIPTION: Command to install the @nx/node plugin in an Nx workspace version 18 or higher. This ensures the correct version of @nx/node is installed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/node/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/node\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Build Variants in NX\nDESCRIPTION: This JSON snippet specifies the options for the Android run target, allowing the selection of a build variant defined in the build.gradle file. This is essential for creating different builds (e.g., debug, release) for testing and production.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/run-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"run-android\": {\n      \"executor\": \"@nx/expo:run\",\n      \"options\": {\n        \"platform\": \"android\",\n        \"variant\": \"release\"\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Targets\nDESCRIPTION: This JSON configuration demonstrates how to add the executor to a project's targets in `project.json`. It defines an `echo` target that uses the `@my-org/my-plugin:echo` executor and sets the `textToEcho` option to \"Hello World\".\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/local-executors.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  //...\n  \"targets\": {\n    // ...\n    \"echo\": {\n      \"executor\": \"@my-org/my-plugin:echo\",\n      \"options\": {\n        \"textToEcho\": \"Hello World\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Nx in an Existing Monorepo (Shell)\nDESCRIPTION: This command initializes Nx in an existing npm/yarn/pnpm monorepo. It installs the `nx` package and creates an `nx.json` file, allowing for task dependency definitions and caching.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-05-nx-18-project-crystal.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Graph Dependencies in Nx\nDESCRIPTION: JSON configuration showing project dependencies and workspace layout for determining affected projects when changes are made. Demonstrates how changes in one library can affect dependent projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/using-nx/affected.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projects\": [\n    {\n      \"type\": \"app\",\n      \"name\": \"app1\",\n      \"data\": {}\n    },\n    ...\n  ],\n  \"groupByFolder\": false,\n  \"workspaceLayout\": {\n    \"appsDir\": \"apps\",\n    \"libsDir\": \"libs\"\n  },\n  \"dependencies\": {...},\n  \"affectedProjectIds\": [\"lib10\", \"lib4\", \"lib5\", \"app2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding injectDocumentDomain: true After Empty experimentalSkipDomainInjection\nDESCRIPTION: Shows how to replace an empty experimentalSkipDomainInjection array with injectDocumentDomain: true. This maintains the original behavior where domain injection was enabled for all domains.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/src/migrations/update-20-8-0/set-inject-document-domain.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { nxE2EPreset } from '@nx/cypress/plugins/cypress-preset';\nimport { defineConfig } from 'cypress';\n\nexport default defineConfig({\n  e2e: {\n    ...nxE2EPreset(__filename, {\n      cypressDir: 'src',\n      bundler: 'vite',\n      webServerCommands: {\n        default: 'pnpm exec nx run app1:dev',\n        production: 'pnpm exec nx run app1:dev',\n      },\n      ciWebServerCommand: 'pnpm exec nx run app1:dev',\n      ciBaseUrl: 'http://localhost:4200',\n    }),\n    baseUrl: 'http://localhost:4200',\n    // Please ensure you use `cy.origin()` when navigating between domains and remove this option.\n    // See https://docs.cypress.io/app/references/migration-guide#Changes-to-cyorigin\n    injectDocumentDomain: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative Nx Target Configuration with Inline Commands\nDESCRIPTION: Alternative Nx target configuration that defines both the command and its dependencies in the nx configuration section, keeping related settings together.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {},\n  \"nx\": {\n    \"targets\": {\n      \"deploy\": {\n        \"command\": \"netlify deploy --dir=dist\",\n        \"dependsOn\": [\"build\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Next.js Build Configuration\nDESCRIPTION: This JSON snippet shows the default build configuration for Next.js standalone projects within an Nx workspace. It specifies the executor, outputs, default configuration, and options for the 'build' target. It also includes development and production configurations with different outputPath values.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/build-next-executor-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"build\": {\\n      \"executor\": \"@nx/next:build\",\\n      \"outputs\": [\"{options.outputPath}\"],\\n      \"defaultConfiguration\": \"production\",\\n      \"options\": {\\n        \"outputPath\": \"dist/acme\"\\n      },\\n      \"configurations\": {\\n        \"development\": {\\n          \"outputPath\": \".\"\\n        },\\n        \"production\": {}\\n      }\\n    },\n```\n\n----------------------------------------\n\nTITLE: Runtime and Environment Variable Inputs\nDESCRIPTION: Configuration showing how to include environment variables and runtime command outputs as inputs for cache computation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-05-nx-14-4-inputs-optional-npm-scope-project-graph-cache-directory-and-more.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"targetDefaults\": {\n        \"e2e\": {\n            \"inputs\": [\n                {\n                    \"env\": \"SELECTED_CLI\"\n                },\n                {\n                    \"runtime\": \"node -v\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Unit Tests\nDESCRIPTION: Executes unit tests for a React application or library.  The command runs the configured test runner (e.g., Jest) for the specified project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react/react-plugin.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnx test my-new-app\nnx test my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Content Configuration for Nx Dependencies\nDESCRIPTION: Configuration snippet showing how Tailwind CSS scans for utility class usage across an Nx workspace, including both application source files and its dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  content: [\n    join(__dirname, 'src/**/!(*.stories|*.spec).{ts,html}'),\n    ...createGlobPatternsForDependencies(__dirname),\n  ],\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Typescript Generator Implementation with Nx DevKit\nDESCRIPTION: Implements a generator function using Nx DevKit to create a library and generate additional files with dynamic templates\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/creating-files.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Tree,\n  formatFiles,\n  installPackagesTask,\n  generateFiles,\n  joinPathFragments,\n  readProjectConfiguration,\n} from '@nx/devkit';\nimport { libraryGenerator } from '@nx/js';\n\nexport default async function (tree: Tree, schema: any) {\n  await libraryGenerator(tree, {\n    name: schema.name,\n    directory: `libs/${schema.name}`,\n  });\n  const libraryRoot = readProjectConfiguration(tree, schema.name).root;\n  generateFiles(\n    tree,\n    joinPathFragments(__dirname, './files'),\n    libraryRoot,\n    schema\n  );\n  await formatFiles(tree);\n  return () => {\n    installPackagesTask(tree);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Nx Cloud\nDESCRIPTION: Command to connect the repository to Nx Cloud for remote caching and task distribution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/tutorial/github-actions.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx connect\n```\n\n----------------------------------------\n\nTITLE: Alternative Nx Configuration for Deploy Task\nDESCRIPTION: This alternative configuration in package.json defines the deploy command directly in the Nx configuration, alongside its build dependency.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/10-affected/content.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {},\n  \"nx\": {\n    \"targets\": {\n      \"deploy\": {\n        \"command\": \"netlify deploy --dir=dist\",\n        \"dependsOn\": [\"build\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting OS Paths to Unix Format in TypeScript\nDESCRIPTION: A function that converts operating system specific paths to unix-style paths. Important to note that this is meant for writing paths to config files and should not be used for disk operations due to Windows drive letter removal.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/normalizePath.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnormalizePath(osSpecificPath: string): string\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Changesets in Nx Cloud CI Run\nDESCRIPTION: Demonstrates how to use a dynamic changeset configuration file when starting an Nx Cloud CI run.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nnx-cloud start-ci-run --distribute-on=\".nx/workflows/dynamic-changesets.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Task Types in Parallel with Nx\nDESCRIPTION: Illustrates how to run multiple different task types (test, lint, e2e) in parallel across all projects in an Nx workspace using a single command.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/9-run-many/content.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many -t test lint e2e\n```\n\n----------------------------------------\n\nTITLE: Add Existing Angular Rspack App to Nx (SSR)\nDESCRIPTION: This command adds an existing server-side rendered (SSR) Angular application to an Nx workspace, using Rspack as the bundler. It generates the application in the `myapp` directory with SSR capabilities.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/getting-started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/angular:app myapp --bundler=rspack --ssr\n```\n\n----------------------------------------\n\nTITLE: Exporting Components from a Library\nDESCRIPTION: This code exports the ProductsComponent from the products library, making it available for use in other projects within the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from './lib/products/products.component';\n```\n\n----------------------------------------\n\nTITLE: Enabling Distribution for Nx >= 14.7\nDESCRIPTION: Command to explicitly enable or disable distributed task execution in Nx versions 14.7 and above using the --dte flag\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/nx-cloud-cli.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnx affected -t build --dte\n```\n\nLANGUAGE: bash\nCODE:\n```\nnx affected -t build --no-dte\n```\n\n----------------------------------------\n\nTITLE: Importing Images in React Components (TypeScript)\nDESCRIPTION: This snippet demonstrates importing an image in a React component using TypeScript. The image import is transformed into a string path at build time, and images smaller than 10 kB are inlined as data URIs. It requires no additional dependencies unless customization of this behavior is needed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/adding-assets.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport logo from './logo.png';\n\nconst Header = () => <img src={logo} alt=\"Logo\" />;\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: Serving Angular App with Nx\nDESCRIPTION: This snippet demonstrates how to serve an Angular application within an Nx workspace.  It uses the `nx serve` command followed by the application name. The application will then be available at http://localhost:4200.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/3-run-tasks/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx serve angular-store\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Level Inputs in package.json\nDESCRIPTION: Example of defining inputs for a specific target in a package.json file. This configuration works the same as in project.json but uses the nx property within package.json to specify the build target's inputs.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/configure-inputs.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"myreactapp\",\n  \"dependencies\": {},\n  \"devDependencies\": {},\n  ...\n  \"nx\": {\n    \"targets\": {\n      \"build\": {\n        \"inputs\": [\"production\", \"^production\"]\n      }\n      ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Shared Libraries in Module Federation Configuration\nDESCRIPTION: Example showing how to override or exclude shared libraries in Module Federation. This configuration demonstrates excluding the lodash library from being shared to enable tree shaking.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/faster-builds.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// module-federation.config.ts\nimport { ModuleFederationConfig } from '@nx/webpack';\n\nexport const config: ModuleFederationConfig = {\n  name: 'host',\n  remotes: ['shop', 'cart', 'about'],\n  shared: (name, config) => {\n    // We want lodash to be tree shaken, and bundled into each host/remote separately.\n    if (name === 'lodash') {\n      return false;\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updated Package.json with Updated Version and Workspace Dependency (JSONC)\nDESCRIPTION: This code snippet displays a package.json file after the version has been updated but the workspace dependency remains preserved. This setup is valid when using pnpm or bun, which can handle the workspace dependency during publish.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/updating-version-references.md#_snippet_9\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"version\": \"0.1.3\", // our version number is updated as expected\n  \"dependencies\": {\n    // our workspace dependency reference is preserved\n    \"my-other-project-in-the-monorepo\": \"workspace:*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Nx Cloud for CI Optimization\nDESCRIPTION: Describes connecting the project repository to Nx Cloud using the `npx nx connect` command, essential for optimizing CI with features like remote caching and task distribution. Ensures the repository is registered with Nx Cloud for enhanced CI capabilities.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/typescript-packages.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx connect\n```\n\n----------------------------------------\n\nTITLE: Nx Project Details JSON Configuration\nDESCRIPTION: This JSON snippet illustrates a detailed configuration overview for a project within Nx. It includes information on various tasks, their commands, cache configurations, dependencies, and metadata about the technologies used.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-monorepo.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"project\": {\n    \"name\": \"my-workspace\",\n    \"data\": {\n      \"root\": \".\",\n      \"targets\": {\n        \"eslint:lint\": {\n          \"cache\": true,\n          \"options\": {\n            \"cwd\": \".\",\n            \"command\": \"eslint ./src\"\n          },\n          \"inputs\": [\n            \"default\",\n            \"{workspaceRoot}/.eslintrc\",\n            \"{workspaceRoot}/tools/eslint-rules/**/*\",\n            {\n              \"externalDependencies\": [\"eslint\"]\n            }\n          ],\n          \"executor\": \"nx:run-commands\",\n          \"configurations\": {},\n          \"metadata\": {\n            \"technologies\": [\"eslint\"]\n          }\n        },\n        \"next:build\": {\n          \"options\": {\n            \"cwd\": \".\",\n            \"command\": \"next build\"\n          },\n          \"dependsOn\": [\"^build\"],\n          \"cache\": true,\n          \"inputs\": [\n            \"default\",\n            \"^default\",\n            {\n              \"externalDependencies\": [\"next\"]\n            }\n          ],\n          \"outputs\": [\"{projectRoot}/.next\", \"{projectRoot}/.next/!(cache)\"],\n          \"executor\": \"nx:run-commands\",\n          \"configurations\": {},\n          \"metadata\": {\n            \"technologies\": [\"next\"]\n          }\n        },\n        \"dev\": {\n          \"options\": {\n            \"cwd\": \".\",\n            \"command\": \"next dev\"\n          },\n          \"executor\": \"nx:run-commands\",\n          \"configurations\": {},\n          \"metadata\": {\n            \"technologies\": [\"next\"]\n          }\n        },\n        \"start\": {\n          \"options\": {\n            \"cwd\": \".\",\n            \"command\": \"next start\"\n          },\n          \"dependsOn\": [\"build\"],\n          \"executor\": \"nx:run-commands\",\n          \"configurations\": {},\n          \"metadata\": {\n            \"technologies\": [\"next\"]\n          }\n        }\n      },\n      \"sourceRoot\": \".\",\n      \"name\": \"my-workspace\",\n      \"projectType\": \"library\",\n      \"implicitDependencies\": [],\n      \"tags\": []\n    }\n  },\n  \"sourceMap\": {\n    \"root\": [\"package.json\", \"nx/core/package-json-workspaces\"],\n    \"targets\": [\"package.json\", \"nx/core/package-json-workspaces\"],\n    \"targets.eslint:lint\": [\".eslintrc.json\", \"@nx/eslint/plugin\"],\n    \"targets.eslint:lint.command\": [\".eslintrc.json\", \"@nx/eslint/plugin\"],\n    \"targets.eslint:lint.cache\": [\".eslintrc.json\", \"@nx/eslint/plugin\"],\n    \"targets.eslint:lint.options\": [\".eslintrc.json\", \"@nx/eslint/plugin\"],\n    \"targets.eslint:lint.inputs\": [\".eslintrc.json\", \"@nx/eslint/plugin\"],\n    \"targets.eslint:lint.options.cwd\": [\".eslintrc.json\", \"@nx/eslint/plugin\"],\n    \"targets.next:build\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.next:build.command\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.next:build.options\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.next:build.dependsOn\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.next:build.cache\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.next:build.inputs\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.next:build.outputs\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.next:build.options.cwd\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.dev\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.dev.command\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.dev.options\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.dev.options.cwd\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.start\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.start.command\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.start.options\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.start.dependsOn\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.start.options.cwd\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"sourceRoot\": [\"package.json\", \"nx/core/package-json-workspaces\"],\n    \"name\": [\"package.json\", \"nx/core/package-json-workspaces\"],\n    \"projectType\": [\"package.json\", \"nx/core/package-json-workspaces\"],\n    \"targets.nx-release-publish\": [\n      \"package.json\",\n      \"nx/core/package-json-workspaces\"\n    ],\n    \"targets.nx-release-publish.dependsOn\": [\n      \"package.json\",\n      \"nx/core/package-json-workspaces\"\n    ],\n    \"targets.nx-release-publish.executor\": [\n      \"package.json\",\n      \"nx/core/package-json-workspaces\"\n    ],\n    \"targets.nx-release-publish.options\": [\n      \"package.json\",\n      \"nx/core/package-json-workspaces\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Nx Cloud for Remote Caching\nDESCRIPTION: This command connects your Nx workspace to Nx Cloud to enable remote caching functionality (Nx Replay). This is the first step in setting up remote caching for your Nx projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/remote-cache.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx connect\n```\n\n----------------------------------------\n\nTITLE: Configure Nx Cloud Assignment Rules in YAML\nDESCRIPTION: This YAML configuration demonstrates how to define assignment rules in Nx Cloud to control which tasks are assigned to specific agents based on project, target, and configuration.  It allows for fine-grained control over agent assignments, improving CI efficiency. Requires Nx Cloud and Nx Agents to be set up.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-04-21-nx-cloud-update-april-2025.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# Create five agents using the `linux-medium-js` launch template and five agents using `linux-large-js`\ndistribute-on:\n  default: 5 linux-medium-js, 5 linux-large-js\n\nassignment-rules:\n  # for our `app1` projects...\n  - projects:\n      - app1\n    # for targets beginning with \"e2e-ci\"...\n    targets:\n      - e2e-ci*\n    # and using the `production` configuration\n    configurations:\n      - production\n    # run matching tasks on a `linux-medium-js` agent with parallelism set to 5\n    run-on:\n      - agent: linux-medium-js\n        parallelism: 5\n\n  # for lint and build tasks on any project\n  - targets:\n      - lint\n      - build\n    # run matching tasks on a `linux-large-js` agent with parallelism set to 10\n    run-on:\n      - agent: linux-large-js\n        parallelism: 10\n```\n\n----------------------------------------\n\nTITLE: Custom Webpack Configuration for Environment Variables\nDESCRIPTION: Implements a webpack configuration that collects environment variables starting with MY_ORG_ and provides them to DefinePlugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/use-environment-variables-in-angular.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst webpack = require('webpack');\n\nconst myOrgEnvRegex = /^MY_ORG_/i;\n\nfunction getClientEnvironment() {\n  const envVars = {};\n  for (const key in process.env) {\n    if (myOrgEnvRegex.test(key)) {\n      envVars[key] = process.env[key];\n    }\n  }\n\n  return {\n    'process.env': JSON.stringify(envVars),\n  };\n}\n\nmodule.exports = (config, options, context) => {\n  config.mode = process.env.NODE_ENV || config.mode;\n  config.plugins.push(new webpack.DefinePlugin(getClientEnvironment()));\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Adjusting Project Tailwind Configuration to Use Preset\nDESCRIPTION: JavaScript snippet that demonstrates adjusting an Angular application's Tailwind CSS configuration to use a shared preset. It shows the inclusion of shared settings while preserving specific content configurations per project, ensuring proper setup for consistent theme usage across applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-with-angular-projects.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createGlobPatternsForDependencies } = require('@nx/angular/tailwind');\nconst { join } = require('path');\nconst sharedTailwindConfig = require('../../libs/tailwind-preset/tailwind.config');\n\nmodule.exports = {\n  presets: [sharedTailwindConfig],\n  content: [\n    join(__dirname, 'src/**/!(*.stories|*.spec).{ts,html}'),\n    ...createGlobPatternsForDependencies(__dirname),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Print Task Graph to Console\nDESCRIPTION: Command to output the Nx task graph directly to stdout.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n nx run myapp:build --graph=stdout\n```\n\n----------------------------------------\n\nTITLE: Pattern-based Project Selection with Exclusion\nDESCRIPTION: Test projects matching a pattern while excluding specific projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run-many.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t test --projects=*-app --exclude excluded-app\n```\n\n----------------------------------------\n\nTITLE: Convert App to Remote with Routing (Nx)\nDESCRIPTION: This command converts an existing application named `myapp` into a remote application with Module Federation enabled. The `--routing=true` flag enables routing for the remote application. The `--mfType=remote` flag specifies that the application should be configured as a remote.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/setup-mf-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g setup-mf myapp --mfType=remote --routing=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Aliases in TypeScript\nDESCRIPTION: This snippet shows how to set up path aliases for libraries in the tsconfig.base.json file, allowing easy imports across the monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    ...\n    \"paths\": {\n      \"@angular-monorepo/orders\": [\"libs/orders/src/index.ts\"],\n      \"@angular-monorepo/products\": [\"libs/products/src/index.ts\"],\n      \"@angular-monorepo/shared-ui\": [\"libs/shared/ui/src/index.ts\"]\n    },\n    ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Dependency Detection Plugin Implementation\nDESCRIPTION: Complete implementation of an Nx plugin that identifies dependencies between projects based on package.json references within the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/project-graph-plugins.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const createDependencies: CreateDependencies = (opts, ctx) => {\n  const packageJsonProjectMap = new Map();\n  const nxProjects = Object.values(ctx.projectsConfigurations);\n  const results = [];\n  for (const project of nxProjects) {\n    const maybePackageJsonPath = join(project.root, 'package.json');\n    if (existsSync(maybePackageJsonPath)) {\n      const json = JSON.parse(maybePackageJsonPath);\n      packageJsonProjectMap.set(json.name, project.name);\n    }\n  }\n  for (const project of nxProjects) {\n    const maybePackageJsonPath = join(project.root, 'package.json');\n    if (existsSync(maybePackageJsonPath)) {\n      const json = JSON.parse(maybePackageJsonPath);\n      const deps = [...Object.keys(json.dependencies)];\n      for (const dep of deps) {\n        if (packageJsonProjectMap.has(dep)) {\n          const newDependency = {\n            source: project,\n            target: packageJsonProjectMap.get(dep),\n            sourceFile: maybePackageJsonPath,\n            dependencyType: DependencyType.static,\n          };\n        }\n        validateDependency(newDependency, ctx);\n        results.push(newDependency);\n      }\n    }\n  }\n  return results;\n};\n```\n\n----------------------------------------\n\nTITLE: Initial Configuration for lib2 in project.json\nDESCRIPTION: The original verbose project.json configuration for lib2, showing build, lint, and test targets with their full configurations including a custom testTimeout setting.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/reduce-repetitive-configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"lib2\",\n  \"$schema\": \"../../node_modules/nx/schemas/project-schema.json\",\n  \"sourceRoot\": \"libs/lib2/src\",\n  \"projectType\": \"library\",\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/js:tsc\",\n      \"outputs\": [\"{options.outputPath}\"],\n      \"options\": {\n        \"outputPath\": \"dist/libs/lib2\",\n        \"main\": \"libs/lib2/src/index.ts\",\n        \"tsConfig\": \"libs/lib2/tsconfig.lib.json\",\n        \"assets\": [\"libs/lib2/*.md\"]\n      }\n    },\n    \"lint\": {\n      \"executor\": \"@nx/eslint:lint\",\n      \"outputs\": [\"{options.outputFile}\"],\n      \"options\": {\n        \"lintFilePatterns\": [\"libs/lib2/**/*.ts\"]\n      }\n    },\n    \"test\": {\n      \"executor\": \"@nx/jest:jest\",\n      \"outputs\": [\"{workspaceRoot}/coverage/{projectRoot}\"],\n      \"options\": {\n        \"jestConfig\": \"libs/lib2/jest.config.ts\",\n        \"passWithNoTests\": true,\n        \"testTimeout\": 10000\n      },\n      \"configurations\": {\n        \"ci\": {\n          \"ci\": true,\n          \"codeCoverage\": true\n        }\n      }\n    }\n  },\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Target Defaults for Angular Browser-Esbuild in nx.json\nDESCRIPTION: Configuration for nx.json to set up target defaults for the @nx/angular:browser-esbuild executor, applying the dependsOn configuration to all projects using this executor.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/setup-incremental-builds-angular.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"@nx/angular:browser-esbuild\": {\n      \"dependsOn\": [\"^build\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Branch to Enable Nx Task Distribution\nDESCRIPTION: Shell commands to create a new Git branch and commit the Nx task distribution configuration changes. This demonstrates how to implement the changes in a real workflow.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/tutorial/circle.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b enable-distribution\ngit commit -am 'enable task distribution'\n```\n\n----------------------------------------\n\nTITLE: Configuring Serve Task in Nx Angular Project\nDESCRIPTION: This snippet demonstrates how to configure the 'serve' task in the project.json file. It includes the executor, default configuration, options, and different configurations for development and production environments.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/4-define-tasks/content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"angular-store\",\n  ...\n  \"targets\": {\n    \"serve\": {\n      \"executor\": \"@angular-devkit/build-angular:dev-server\",\n      \"defaultConfiguration\": \"development\",\n      \"options\": {\n        \"buildTarget\": \"angular-store:build\"\n      },\n      \"configurations\": {\n        \"development\": {\n          \"buildTarget\": \"angular-store:build:development\",\n          \"hmr\": true\n        },\n        \"production\": {\n          \"buildTarget\": \"angular-store:build:production\",\n          \"hmr\": false\n        }\n      }\n     },\n     ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configure @nx/jest/plugin for E2E and Unit Tests\nDESCRIPTION: This JSON configuration demonstrates how to configure the `@nx/jest/plugin` for both end-to-end (E2E) and unit tests within the same Nx workspace. It uses the `plugins` array in `nx.json` to define two separate configurations with different `include` and `exclude` patterns, targeting different test execution names (test and e2e-local) and CI configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/jest/documents/overview.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/jest/plugin\",\n      \"exclude\": [\"e2e/**/*\"],\n      \"options\": {\n        \"targetName\": \"test\"\n      }\n    },\n    {\n      \"plugin\": \"@nx/jest/plugin\",\n      \"include\": [\"e2e/**/*\"],\n      \"options\": {\n        \"targetName\": \"e2e-local\",\n        \"ciTargetName\": \"e2e-ci\",\n        \"disableJestRuntime\": false\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind CSS to Existing Angular Project\nDESCRIPTION: To integrate Tailwind CSS into an existing Angular project, library, or publishable library within an Nx workspace, this command runs the setup generator. It modifies the existing project configuration to support Tailwind CSS based on project settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-with-angular-projects.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/angular:setup-tailwind my-project\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nx Workspace (Shell)\nDESCRIPTION: This command creates a new Nx workspace named 'myorg'. Choosing an 'integrated monorepo' during workspace creation enables Project Crystal features, offering benefits such as inferred targets and reduced configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-05-nx-18-project-crystal.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace myorg\n```\n\n----------------------------------------\n\nTITLE: Executing Nx Assignment Rules with Shell Script\nDESCRIPTION: This shell command demonstrates how to execute assignment rules during a CI run using Nx Cloud, specifying the manual distribution mode and linking to an assignment rules YAML file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/assignment-rules.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx-cloud start-ci-run --distribute-on=\"manual\" --assignment-rules=\".nx/workflows/assignment-rules.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom Steps in Launch Templates\nDESCRIPTION: Example of how to use a custom step in a launch template. It shows how to reference the custom step file and provide inputs and environment variables.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/custom-steps.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlaunch-templates:\n  custom-template:\n    resource-class: 'docker_linux_amd64/medium'\n    image: 'ubuntu22.04-node20.11-v7'\n    init-steps:\n      - name: Custom Step\n        uses: 'your-org/your-repo/main/.nx/workflows/custom-steps.yaml'\n        env:\n          CUSTOM_VAR: 'custom_value'\n        inputs:\n          input1: 'value1'\n          input2: 'value2'\n```\n\n----------------------------------------\n\nTITLE: Project Configuration After Vite Migration\nDESCRIPTION: Example of project configuration for a demo app after migrating from explicit Vite executors to inferred tasks using the Vite CLI directly.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/convert-to-inferred.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"project\": {\n    \"name\": \"demo\",\n    \"data\": {\n      \"root\": \" apps/demo\",\n      \"projectType\": \"application\",\n      \"targets\": {\n        \"serve\": {\n          \"executor\": \"nx:run-commands\",\n          \"options\": {\n            \"command\": \"vite dev\"\n          }\n        },\n        \"build\": {\n          \"executor\": \"nx:run-commands\",\n          \"inputs\": [\"production\", \"^production\"],\n          \"outputs\": [\"{projectRoot}/dist\"],\n          \"options\": {\n            \"command\": \"vite build\"\n          }\n        }\n      }\n    }\n  },\n  \"sourceMap\": {\n    \"targets\": [\"apps/demo/vite.config.ts\", \"@nx/vite\"],\n    \"targets.serve\": [\"apps/demo/vite.config.ts\", \"@nx/vite\"],\n    \"targets.build\": [\"apps/demo/vite.config.ts\", \"@nx/vite\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a New React Application with Nx\nDESCRIPTION: This command generates a new React application named 'inventory' using the Nx React application generator. It includes options for routing, unit testing with Vitest, and E2E testing with Playwright.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/react:app apps/inventory\n```\n\n----------------------------------------\n\nTITLE: Adding Nx to Existing Monorepo\nDESCRIPTION: Command to add Nx configuration to an existing monorepo, simplifying the setup process with a single nx.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-12-23-single-file-monorepo-config-custom-workspace-presets-improved-tailwind-support-and-more-in-nx-13.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx add-nx-to-monorepo\n```\n\n----------------------------------------\n\nTITLE: Enabling Composite TypeScript Projects in Root tsconfig.json\nDESCRIPTION: This JSON configuration enables the 'composite' compiler option in the root tsconfig.json, which is required for TypeScript Project References to work correctly.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-27-project-references.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"is-even\": [\"./is-even/index.ts\"],\n      \"is-odd\": [\"./is-odd/index.ts\"]\n    },\n    \"composite\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Runtime Arguments\nDESCRIPTION: This JSON snippet demonstrates how to pass runtime arguments to the Node.js process using the `runtimeArgs` option.  In this case, it passes the `--no-warnings` flag to suppress Node.js warnings.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/node-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"my-app\": {\n  \"targets\": {\n    \"serve\": {\n      \"executor\": \"@nx/js:node\",\n      \"options\": {\n        \"runtimeArgs\": [\"--no-warnings\"],\n        //...\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Dependency in Nx\nDESCRIPTION: Example of creating a dynamic dependency for runtime-specific imports like lazy-loaded routes, which are only imported under specific conditions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/project-graph-plugins.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  source: 'existing-project',\n  target: 'new-project',\n  sourceFile: 'libs/existing-project/src/index.ts',\n  dependencyType: DependencyType.dynamic,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring esbuild Plugins in project.json (Angular)\nDESCRIPTION: Demonstrates how to configure esbuild plugins within the `project.json` file for an Angular application.  The `plugins` option allows specifying paths to plugin files or objects with a path and options. This example shows how to define two plugins, one with a simple path and another with a path and options object.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/browser-esbuild-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/angular:browser-esbuild\",\n      \"options\": {\n        ...\n        \"plugins\": [\n          \"apps/my-app/plugins/plugin1.js\",\n          {\n            \"path\": \"apps/my-app/plugins/plugin2.js\",\n            \"options\": {\n              \"someOption\": \"some value\"\n            }\n          }\n        ]\n      }\n    }\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Task Sync Generator in package.json\nDESCRIPTION: This JSON configuration registers the 'my-plugin:my-sync-generator' as a sync generator for the 'build' target in the 'package.json' file. This ensures that the generator is executed before the 'build' task is run, preparing the file system for the build process.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/create-sync-generator.md#2025-04-22_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      \"syncGenerators\": [\"my-plugin:my-sync-generator\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests for All Projects with Nx run-many\nDESCRIPTION: Example of how to use run-many to execute the test target for all projects in the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run-many.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t test\n```\n\n----------------------------------------\n\nTITLE: Configuring Dashboard Application Routes with Remote Module Imports\nDESCRIPTION: Sets up the Angular routing configuration for the Dashboard application, including a route that lazily loads the Login application using Module Federation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Route } from '@angular/router';\nimport { AppComponent } from './app.component';\n\nexport const appRoutes: Route[] = [\n  {\n    path: 'login',\n    loadChildren: () => import('login/Routes').then((m) => m.remoteRoutes),\n  },\n  {\n    path: '',\n    component: AppComponent,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Nx Project CI\nDESCRIPTION: This YAML configuration defines a GitHub Actions workflow for continuous integration in an Nx project. It sets up the environment, installs dependencies, and runs affected tasks for linting, testing, building, and e2e testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          filter: tree:0\n\n      # This enables task distribution via Nx Cloud\n      # Run this command as early as possible, before dependencies are installed\n      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun\n      # Uncomment this line to enable task distribution\n      # - run: npx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\" --stop-agents-after=\"e2e-ci\"\n\n      # Cache node_modules\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          cache: 'npm'\n\n      - run: npm ci --legacy-peer-deps\n      - run: npx playwright install --with-deps\n      - uses: nrwl/nx-set-shas@v4\n\n      # Prepend any command with \"nx-cloud record --\" to record its logs to Nx Cloud\n      # - run: npx nx-cloud record -- echo Hello World\n      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected\n      # When you enable task distribution, run the e2e-ci task instead of e2e\n      - run: npx nx affected -t lint test build e2e\n```\n\n----------------------------------------\n\nTITLE: Nx Release with Dry Run Example\nDESCRIPTION: Shows an example of running `nx release` with the `--dry-run` flag. This command is safe to run because it doesn't modify any files or publish any packages. The `--dry-run` flag allows you to preview what the release process will do.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/manage-releases.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"nx release --dry-run\"\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript schema in Nx generator function\nDESCRIPTION: This code snippet demonstrates how to use the TypeScript schema (GeneratorOptions) within an Nx generator function. It imports necessary modules from `@nx/devkit` and `@nx/js`, defines an asynchronous generator function that takes a `Tree` and the `GeneratorOptions` schema as input, and then utilizes the `@nx/js` libraryGenerator to create a new library with a name derived from the provided schema values. Finally, the code formats the files and installs packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tree, formatFiles, installPackagesTask } from '@nx/devkit';\nimport { libraryGenerator } from '@nx/js';\n\nexport default async function (tree: Tree, schema: GeneratorOptions) {\n  await libraryGenerator(tree, { name: `${schema.name}-${schema.type || ''}` });\n  await formatFiles(tree);\n  return () => {\n    installPackagesTask(tree);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Nx Packages with Version Constraints\nDESCRIPTION: Example of updating @nx/workspace to version 9.0.0 and generating migrations starting from version 8.0.0 of @nx/workspace and @nx/node.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/migrate.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate @nx/workspace@9.0.0 --from=\"@nx/workspace@8.0.0,@nx/node@8.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Running Generator Command\nDESCRIPTION: Command to test and execute the custom generator with dry-run option.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/intro.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g my-plugin:library-with-readme mylib --dry-run\n```\n\n----------------------------------------\n\nTITLE: Setting Up GitHub CI for Version Plan Checks (YAML)\nDESCRIPTION: This YAML snippet provides a configuration for a GitHub Actions workflow step that ensures version plan checks are included during continuous integration. It uses a utility action to set the appropriate commit SHAs for accurate versioning.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/file-based-versioning-version-plans.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# ...other steps\n- uses: nrwl/nx-set-shas@v4\n# ...other steps including the use of `nx release plan:check`\n\n```\n\n----------------------------------------\n\nTITLE: Generated Package.json with Multi-Format Exports in Nx 16.8\nDESCRIPTION: The resulting package.json file after building a TypeScript library with multiple formats (ESM and CJS) and additional entry points. Shows how the exports field automatically handles format selection for each entry point.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-09-06-nx-16-8-release.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-awesome-lib\",\n  \"version\": \"0.0.1\",\n  ...\n  \"type\": \"commonjs\",\n  \"main\": \"./index.cjs.js\",\n  \"typings\": \"./src/index.d.ts\",\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \".\": {\n      \"import\": \"./index.esm.js\",\n      \"default\": \"./index.cjs.js\"\n    },\n    \"./foo\": {\n      \"import\": \"./foo.esm.js\",\n      \"default\": \"./foo.cjs.js\"\n    }\n  },\n  \"module\": \"./index.esm.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating React Libraries with Nx CLI\nDESCRIPTION: Demonstrates how to use Nx CLI commands to generate React libraries for different domains (products, orders, and shared UI components). The commands specify the library name, test runner, and bundler options.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/6-create-local-library/content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/react:library libs/products --unitTestRunner=vitest --bundler=none\nnpx nx g @nx/react:library libs/orders --unitTestRunner=vitest --bundler=none\nnpx nx g @nx/react:library libs/shared/ui --unitTestRunner=vitest --bundler=none\n```\n\n----------------------------------------\n\nTITLE: Adding Router Outlet to App Component Template\nDESCRIPTION: This HTML snippet adds the router-outlet directive to the app.component.html file, enabling routing in the Angular application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<router-outlet></router-outlet>\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Path Aliases for Imports\nDESCRIPTION: Shows how to use TypeScript path aliases to simplify imports in a monorepo application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { greet } from '@ts-monorepo-linking/lib-a';\n\nconsole.log(greet('World'));\n```\n\n----------------------------------------\n\nTITLE: Module Federation Webpack Configuration\nDESCRIPTION: Configuration for Module Federation support using withModuleFederation plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/webpack-config-setup.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { composePlugins, withNx } = require('@nx/webpack');\nconst { merge } = require('webpack-merge');\nconst withModuleFederation = require('@nx/react/module-federation');\n\nmodule.exports = composePlugins(\n  withNx(),\n  async (config, { options, context }) => {\n    const federatedModules = await withModuleFederation({\n      // your options here\n    });\n\n    return merge(federatedModules(config, { options, context }), {\n      // overwrite values here\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configure Multiple Registries using Scopes - Bash\nDESCRIPTION: This snippet illustrates how to configure multiple registries using npm scopes in the `.npmrc` file. Packages with names starting with a specific scope will be published to the corresponding registry.  A default registry is also configured for packages without a scope. Scopes are used to determine which registry to publish to.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/configure-custom-registries.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n@my-scope:registry=https://my-custom-registry.com/\n//my-custom-registry.com/:_authToken=<TOKEN>\n\n@other-scope:registry=https://my-other-registry.com/\n//my-other-registry.com/:_authToken=<OTHER_TOKEN>\n\nregistry=https://my-default-registry.com/\n//my-default-registry.com/:_authToken=<DEFAULT_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Directory Structure After Creating Local Libraries\nDESCRIPTION: Illustrates the updated directory structure of the React monorepo after creating local libraries for products, orders, and shared UI components. Each library has its own folder structure and configuration files.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/6-create-local-library/content.mdx#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n└─ react-monorepo\n   ├─ ...\n   ├─ apps\n   ├─ libs\n   │  ├─ products\n   │  │  ├─ ...\n   │  │  ├─ package.json\n   │  │  ├─ src\n   │  │  │  ├─ index.ts\n   │  │  │  └─ lib\n   │  │  │     ├─ products.spec.ts\n   │  │  │     └─ products.ts\n   │  │  ├─ tsconfig.json\n   │  │  ├─ tsconfig.lib.json\n   │  │  ├─ tsconfig.spec.json\n   │  │  └─ vite.config.ts\n   │  ├─ orders\n   │  │  ├─ ...\n   │  │  ├─ package.json\n   │  │  ├─ src\n   │  │  │  ├─ index.ts\n   │  │  │  └─ ...\n   │  │  └─ ...\n   │  └─ shared\n   │     └─ ui\n   │        ├─ ...\n   │        ├─ package.json\n   │        ├─ src\n   │        │  ├─ index.ts\n   │        │  └─ ...\n   │        └─ ...\n   ├─ ...\n```\n\n----------------------------------------\n\nTITLE: Set Registry for Publish Step in Project Configuration - JSON\nDESCRIPTION: This snippet demonstrates how to set a custom registry for the publish step of Nx Release in the `project.json` file. The registry and tag options are configured within the `nx-release-publish` target.  This ensures the package is published to the specified registry with the given tag.  Authentication tokens must still be set in the root `.npmrc`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/configure-custom-registries.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"pkg-5\",\n  \"sourceRoot\": \"...\",\n  \"targets\": {\n    ...,\n    \"nx-release-publish\": {\n      \"options\": {\n        \"registry\": \"https://my-unique-registry.com/\",\n        \"tag\": \"next\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Affected Projects in Nx\nDESCRIPTION: Command to run tests only for projects affected by recent code changes, demonstrating one of Nx's key features for efficient development in monorepos.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx affected -t test\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Environment Variables using @nx/cypress:cypress Executor\nDESCRIPTION: Example of setting Cypress environment variables using the @nx/cypress:cypress executor in project.json configuration file. Demonstrates setting API_URL through the env property.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/cypress/cypress-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"targets\": {\n    \"e2e\": {\n      \"executor\": \"@nx/cypress:cypress\",\n      \"options\": {\n        \"env\": \"API_URL=https://api.my-nx-website.com\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running migrations with commit creation\nDESCRIPTION: This command runs migrations and automatically creates a dedicated commit for each successfully completed migration. The `--create-commits` flag enhances reviewability by creating smaller, more manageable commits.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/advanced-update.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"nx migrate --run-migrations --create-commits\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello Function in TypeScript\nDESCRIPTION: Define a default export function 'hello' that returns a greeting string.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/federate-a-module.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function hello(): string {\n  return 'Hello from Nx';\n}\n```\n\n----------------------------------------\n\nTITLE: Application Tailwind Configuration\nDESCRIPTION: Configuration for individual applications using the shared Tailwind preset while specifying their own content patterns.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-with-angular-projects.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createGlobPatternsForDependencies } = require('@nx/angular/tailwind');\nconst { join } = require('path');\nconst sharedTailwindConfig = require('../../libs/tailwind-preset/tailwind.config');\n\nmodule.exports = {\n  presets: [sharedTailwindConfig],\n  content: [\n    join(__dirname, 'src/**/!(*.stories|*.spec).{ts,html}'),\n    ...createGlobPatternsForDependencies(__dirname),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Run Custom Target for Affected Projects\nDESCRIPTION: Example showing how to run a custom target for affected projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/affected.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t custom-target\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nx Workspace with React\nDESCRIPTION: Command to create a new Nx workspace with a React standalone preset, which sets up a React application with all Nx capabilities and optimizations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace mycoolapp --preset=react-standalone\n```\n\n----------------------------------------\n\nTITLE: Updating Workspace Dependencies using Nx Migrate\nDESCRIPTION: This command updates the workspace's dependencies to the latest versions using Nx migrate. It analyzes dependencies, configuration files, and source code for updates and applies necessary changes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/automate-updating-dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"npx nx migrate latest\"\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Nx CLI\nDESCRIPTION: Command to execute Jest unit tests for the nx-dev-feature-package-schema-viewer library using the Nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/feature-package-schema-viewer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx test nx-dev-feature-package-schema-viewer\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Dependencies for Host Application\nDESCRIPTION: JSON configuration to set implicit dependencies in the host's project.json file. Adding remote applications as implicit dependencies ensures they are built when the host is built.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/creating-a-host.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...,\n  \"implicitDependencies\": [\"remote1\", \"remote2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Port Assignment Logic\nDESCRIPTION: Extended implementation of the Nx plugin that handles dynamic port assignment for multiple Storybook instances.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-18-dynamic-targets-with-inference.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AggregateCreateNodesError,\n  CreateNodesContextV2,\n  CreateNodesResult,\n  CreateNodesV2,\n} from '@nx/devkit';\n\nconst processFile = (\n  file: string,\n  context: CreateNodesContextV2,\n  port: number\n) => {\n  // TODO\n  return {};\n};\n\nexport const createNodesV2: CreateNodesV2 = [\n  '**/.storybook/main.{js,ts,mjs,mts,cjs,cts}',\n  async (configFiles, options, context) => {\n    const results: Array<[file: string, value: CreateNodesResult]> = [];\n    const errors: Array<[file: string, error: Error]> = [];\n    await Promise.all(\n      configFiles.map(async (file, index) => {\n        try {\n          const value = processFile(file, context, 3000 + index);\n          if (value) {\n            results.push([file, value] as const);\n          }\n        } catch (e) {\n          errors.push([file, e as Error] as const);\n        }\n      })\n    );\n    if (errors.length > 0) {\n      throw new AggregateCreateNodesError(errors, results);\n    }\n    return results;\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Module Federation Dev Server Configuration in Nx\nDESCRIPTION: Basic configuration for Module Federation Dev Server to serve a host application and its remote applications statically. Defines development and production configurations with port and public host settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/module-federation-dev-server-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"serve\": {\n    \"executor\": \"@nx/react:module-federation-dev-server\",\n    \"configurations\": {\n      \"production\": {\n        \"buildTarget\": \"host:build:production\"\n      },\n      \"development\": {\n        \"buildTarget\": \"host:build:development\"\n      }\n    },\n    \"defaultConfiguration\": \"development\",\n    \"options\": {\n      \"port\": 4200,\n      \"publicHost\": \"http://localhost:4200\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions CI Workflow for Nx Projects\nDESCRIPTION: A GitHub Actions workflow configuration that sets up a CI pipeline for an Nx workspace. It checks out the code, sets up Node.js, installs dependencies, and runs affected tasks (lint, test, build, e2e) that are impacted by changes in the current PR or commit.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          filter: tree:0\n\n      # This enables task distribution via Nx Cloud\n      # Run this command as early as possible, before dependencies are installed\n      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun\n      # Uncomment this line to enable task distribution\n      # - run: npx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\" --stop-agents-after=\"e2e-ci\"\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n          cache: 'npm'\n      - run: npm ci --legacy-peer-deps\n      - uses: nrwl/nx-set-shas@v4\n      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected\n      # When you enable task distribution, run the e2e-ci task instead of e2e\n      - run: npx nx affected -t lint test build e2e\n```\n\n----------------------------------------\n\nTITLE: Moving Projects in Nx Workspace\nDESCRIPTION: Command to move a project named 'my-lib' to a new location while updating all related configurations and dependencies\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/workspace/workspace-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/workspace:move --projectName my-lib --destination new/location/my-lib\n```\n\n----------------------------------------\n\nTITLE: Enforce Project Boundaries Rule Configuration\nDESCRIPTION: This JSON snippet shows the configuration for the `enforce-project-boundaries` rule within the `@nx/conformance` plugin.  It includes various options for customizing the rule's behavior, such as ignoring circular dependencies and defining dependency constraints.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/conformance/conformance-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"conformance\": {\n    \"rules\": [\n      {\n        \"rule\": \"@nx/conformance/enforce-project-boundaries\",\n        \"options\": {\n          // Optional\n          // Can be a boolean or an object with an array of buildTargetNames\n          \"requireBuildableDependenciesForBuildableProjects\": {\n            // Defaults to [\"build\"]\n            \"buildTargetNames\": [\"build\", \"compile\"]\n          },\n          // Optional\n          \"ignoredCircularDependencies\": [[\"projectA\", \"projectB\"]],\n          // Optional\n          \"depConstraints\": [\n            {\n              // Must define either `sourceTag` or `allSourceTags`\n              \"sourceTag\": \"string\",\n              \"allSourceTags\": [\"string\"],\n              // Optional\n              \"onlyDependOnProjectsWithTags\": [],\n              // Optional\n              \"notDependOnProjectsWithTags\": []\n            }\n          ],\n          // Optional\n          \"checkDynamicDependenciesExceptions\": []\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting NextJS App with Turbopack in Nx\nDESCRIPTION: Command to serve a NextJS app in an Nx workspace using the Turbopack builder option.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-07-06-nx-16-5-release.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx serve webapp --turbo\n```\n\n----------------------------------------\n\nTITLE: Interpolating Environment Variables in HTML with Webpack\nDESCRIPTION: Example of how to interpolate environment variables into an HTML file for React applications using Webpack. Variables must be prefixed with NX_PUBLIC and surrounded by % symbols.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/use-environment-variables-in-react.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    <p>The domain name is %NX_PUBLIC_DOMAIN_NAME%.</p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Browser Testing in Playwright\nDESCRIPTION: Configuration example showing how to set up Playwright tests to run across different browsers and devices including desktop Chrome, mobile Chrome, and branded browsers.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-09-18-introducing-playwright-support-for-nx.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  projects: [\n    /* Test against desktop browsers */\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    /* Test against mobile viewports. */\n    {\n      name: 'Mobile Chrome',\n      use: { ...devices['Pixel 5'] },\n    },\n    /* Test against branded browsers. */\n    {\n      name: 'Google Chrome',\n      use: { ...devices['Desktop Chrome'], channel: 'chrome' }, // or 'chrome-beta'\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Generating New Angular Application\nDESCRIPTION: Command to generate a new Angular application named 'demo' using the Nx Angular plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/templates/angular-monorepo/lesson-2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx g @nx/angular:app demo\n```\n\n----------------------------------------\n\nTITLE: Federating Module for Angular in Nx\nDESCRIPTION: Use Nx CLI to federate the 'hello' module for an Angular application, exposing it through the 'greeting' remote.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/federate-a-module.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/angular:federate-module hello/src/index.ts --name=hello --remote=greeting\n```\n\n----------------------------------------\n\nTITLE: Connecting Nx Workspace to Nx Cloud for Remote Caching\nDESCRIPTION: Command to connect an existing Nx workspace to Nx Cloud, enabling distributed remote caching across machines. This allows sharing the computation cache with team members and CI systems.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-08-18-helping-the-environment-by-saving-two-centuries-of-compute-time.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx connect-to-nx-cloud\n```\n\n----------------------------------------\n\nTITLE: Running Incremental Builds with Nx for Angular Applications\nDESCRIPTION: Command to build an Angular application incrementally using Nx. The --parallel flag enables building dependencies in parallel for improved performance.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/setup-incremental-builds-angular.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-app --parallel\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Options in nx.json\nDESCRIPTION: Example of specifying a plugin with custom options in the nx.json configuration file, allowing for customization of plugin behavior.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/project-graph-plugins.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"my-plugin\",\n      \"options\": {\n        \"tagName\": \"plugin:my-plugin\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating New Nuxt Page\nDESCRIPTION: Command to generate a new page component in a Nuxt application using the @nx/nuxt:component generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nuxt/docs/application-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nuxt:component my-app/src/pages/my-page\n```\n\n----------------------------------------\n\nTITLE: Nx Cloud GitHub Actions CI Workflow\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow for CI. It checks out the code, sets up Node.js, installs dependencies, sets SHAs using `nrwl/nx-set-shas`, and runs affected tasks using `nx affected`. Crucially, it utilizes Nx Cloud for task distribution, starting a CI run with `npx nx-cloud start-ci-run`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/migration-angular.md#_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nname: CI\n# ...\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          filter: tree:0\n\n      # This enables task distribution via Nx Cloud\n      # Run this command as early as possible, before dependencies are installed\n      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun\n      # Connect your workspace by running \"nx connect\" and uncomment this\n      - run: npx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\" --stop-agents-after=\"build\"\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n          cache: 'npm'\n      - run: npm ci --legacy-peer-deps\n      - uses: nrwl/nx-set-shas@v4\n      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected\n      - run: npx nx affected -t lint test build\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Dependencies in nx.json\nDESCRIPTION: Configuration that defines a build task pipeline, ensuring that dependencies are built before dependent projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/run-tasks.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"targetDefaults\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Node.js Application with @nx/node\nDESCRIPTION: Command to generate a new Node.js application using the @nx/node plugin. This creates the application in the 'apps' directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/node/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/node:application apps/my-new-app\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Both Nx CLI and Underlying Command\nDESCRIPTION: Example of passing the same argument name to both the Nx CLI and the underlying command using --configuration for Nx and --args for the command. This demonstrates how to handle argument name conflicts.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/pass-args-to-commands.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx test mobile-e2e --configuration=ci --args=\"--configuration=ios.sim.release\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint to Ban External Imports for Frontend and Backend Projects\nDESCRIPTION: This snippet demonstrates how to set up ESLint configuration to prevent frontend projects from importing NestJS packages and backend projects from importing Angular packages. It uses the @nx/enforce-module-boundaries rule with sourceTag and bannedExternalImports properties.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/ban-external-imports.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // ... more ESLint config here\n\n  // @nx/enforce-module-boundaries should already exist at the top-level of your config\n  \"@nx/enforce-module-boundaries\": [\n    \"error\",\n    {\n      \"allow\": [],\n      // update depConstraints based on your tags\n      \"depConstraints\": [\n        // projects tagged with \"frontend\" can't import from \"@nestjs/common\"\n        {\n          \"sourceTag\": \"frontend\",\n          \"bannedExternalImports\": [\"@nestjs/common\"]\n        },\n        // projects tagged with \"backend\" can't import from \"@angular/core\"\n        {\n          \"sourceTag\": \"backend\",\n          \"bannedExternalImports\": [\"@angular/core\"]\n        }\n      ]\n    }\n  ]\n\n  // ... more ESLint config here\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Configuration for lib3 in project.json\nDESCRIPTION: The original verbose project.json configuration for lib3, showing build, lint, and test targets with their full configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/reduce-repetitive-configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"lib3\",\n  \"$schema\": \"../../node_modules/nx/schemas/project-schema.json\",\n  \"sourceRoot\": \"libs/lib3/src\",\n  \"projectType\": \"library\",\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/js:tsc\",\n      \"outputs\": [\"{options.outputPath}\"],\n      \"options\": {\n        \"outputPath\": \"dist/libs/lib3\",\n        \"main\": \"libs/lib3/src/index.ts\",\n        \"tsConfig\": \"libs/lib3/tsconfig.lib.json\",\n        \"assets\": [\"libs/lib3/*.md\"]\n      }\n    },\n    \"lint\": {\n      \"executor\": \"@nx/eslint:lint\",\n      \"outputs\": [\"{options.outputFile}\"],\n      \"options\": {\n        \"lintFilePatterns\": [\"libs/lib3/**/*.ts\"]\n      }\n    },\n    \"test\": {\n      \"executor\": \"@nx/jest:jest\",\n      \"outputs\": [\"{workspaceRoot}/coverage/{projectRoot}\"],\n      \"options\": {\n        \"jestConfig\": \"libs/lib3/jest.config.ts\",\n        \"passWithNoTests\": true\n      },\n      \"configurations\": {\n        \"ci\": {\n          \"ci\": true,\n          \"codeCoverage\": true\n        }\n      }\n    }\n  },\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Federated Application\nDESCRIPTION: Serve the host application using Nx CLI to run the federated setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/federate-a-module.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnx serve host\n```\n\n----------------------------------------\n\nTITLE: Building a React Router Application with Nx\nDESCRIPTION: Command to build a React Router application in an Nx workspace, which compiles both client and server bundles using Vite.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-router.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx build happynrwl\n```\n\n----------------------------------------\n\nTITLE: Running Build with Production Config\nDESCRIPTION: Demonstrates how to run a build target with a production configuration specified.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n nx run myapp:build:production\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy for Nx Frontend Project\nDESCRIPTION: This snippet shows the content of a proxy.conf.json file generated by Nx when using the --frontendProject option with Node, Nest, or Express app generators. It configures a proxy to redirect '/api' requests to http://localhost:3000/api for the frontend project's serve target.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/node/application-proxies.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/api\": {\n    \"target\": \"http://localhost:3000\",\n    \"secure\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Build Angular Rspack Application\nDESCRIPTION: This command builds the Angular application that is using Rspack. The output files for the client are placed in the `dist/browser` directory, and the server files (if SSR is enabled) are placed in the `dist/server` directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/getting-started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx build myapp\n```\n\n----------------------------------------\n\nTITLE: Setting Cypress Environment Variables via Command Line for @nx/cypress:cypress Executor\nDESCRIPTION: This shell command shows how to set multiple Cypress environment variables (API_URL and API_KEY) when running e2e tests using the @nx/cypress:cypress executor in Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/cypress/documents/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx e2e frontend-e2e --env.API_URL=\"https://api.my-nx-website.com\" --env.API_KEY=\"abc-123\"\n```\n\n----------------------------------------\n\nTITLE: Fine-tuning Caching with Inputs in nx.json\nDESCRIPTION: Example of how to configure inputs in nx.json to fine-tune caching for different targets. This setup excludes test files from the build target cache.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-10-14-whats-new-in-nx-15.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"build\": {\n      \"inputs\": [\n          \"{projectRoot}/**/*\",\n          \"!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)\"\n       ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest in Vite\nDESCRIPTION: Test configuration setup for Vitest in Vite including coverage and environment settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/vite/configure-vite.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n...\n  test: {\n    globals: true,\n    cache: {\n      dir: '../node_modules/.vitest/<project-root>',\n    },\n    environment: 'jsdom',\n    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],\n    reporters: ['default'],\n    coverage: {\n      reportsDirectory: '../coverage/<project-root>',\n      provider: 'v8',\n    },\n  },\n...\n```\n\n----------------------------------------\n\nTITLE: Compiling with Custom SWCRC using Nx SWC - JSON\nDESCRIPTION: This snippet shows how to configure the `@nx/js:swc` executor to compile code with a custom `.swcrc` file for additional build configurations. The output path is set to 'dist/libs/ts-lib'.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/swc-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"executor\": \"@nx/js:swc\",\n    \"options\": {\n      \"outputPath\": \"dist/libs/ts-lib\",\n      \"main\": \"libs/ts-lib/src/index.ts\",\n      \"tsConfig\": \"libs/ts-lib/tsconfig.lib.json\",\n      \"assets\": [\"libs/ts-lib/*.md\"],\n      \"swcrc\": \"libs/ts-lib/.dev.swcrc\"\n    },\n    \"configurations\": {\n      \"production\": {\n        \"swcrc\": \"libs/ts-lib/.prod.swcrc\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Dependencies\nDESCRIPTION: Command to install React Navigation and its dependencies for adding navigation to the React Native app.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @react-navigation/native @react-navigation/stack react-native-reanimated react-native-gesture-handler react-native-screens @react-native-community/masked-view\n```\n\n----------------------------------------\n\nTITLE: Generate Module Federation Setup for Angular (Shell)\nDESCRIPTION: This command uses the Nx generator to create a new module federation setup for an Angular application. It creates a host application named 'shell' and defines 'shop', 'cart', and 'about' as remote modules. This allows for splitting the application into smaller, independent units.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-05-02-nx-v14-is-out-here-is-all-you-need-to-know.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nrwl/angular:host shell --remotes=shop,cart,about\n```\n\n----------------------------------------\n\nTITLE: Adding Cypress Component Testing to Angular Project\nDESCRIPTION: Command to add Cypress component testing configuration to an existing Angular project in Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-10-14-whats-new-in-nx-15.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nrwl/angular:cypress-component-configuration --project=your-project\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with SWC in Nx (Using .swcrc)\nDESCRIPTION: This snippet shows how to configure Jest to use SWC for compilation in an Nx project. It reads the SWC configuration from a .swcrc file, modifies it for Jest compatibility, and sets up the necessary transform options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/jest/jest-plugin.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint-disable */\nimport { readFileSync } from 'fs';\n\n// Reading the SWC compilation config and remove the \"exclude\"\n// for the test files to be compiled by SWC\nconst { exclude: _, ...swcJestConfig } = JSON.parse(\n  readFileSync(`${__dirname}/.swcrc`, 'utf-8')\n);\n\n// disable .swcrc look-up by SWC core because we're passing in swcJestConfig ourselves.\n// If we do not disable this, SWC Core will read .swcrc and won't transform our test files due to \"exclude\"\nif (swcJestConfig.swcrc === undefined) {\n  swcJestConfig.swcrc = false;\n}\n\n// jest needs EsModule Interop to find the default exported function\nswcJestConfig.module.noInterop = false;\n\nexport default {\n  globalSetup: '<rootDir>/src/global-setup-swc.ts',\n  transform: {\n    '^.+\\\\.[tj]s$': ['@swc/jest', swcJestConfig],\n  },\n  // other settings\n};\n```\n\n----------------------------------------\n\nTITLE: Nx.json Configuration for Versioning and Publishing (JSONC)\nDESCRIPTION: This code snippet shows the nx.json configuration for setting up versioning and publishing from a custom dist directory. It specifies the directory to update the manifest, the version resolution strategy, and disables local dependency protocol preservation when not using pnpm or bun.  It configures the `nx-release-publish` target to publish from the dist directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/updating-version-references.md#_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"release\": {\n    // Ensure that versioning works only in the dist directory\n    \"version\": {\n      \"manifestRootsToUpdate\": [\"dist/packages/{projectName}\"], // path structure for your dist directory, where {projectRoot} and {projectName} are available placeholders that will be interpolated by Nx\n      \"currentVersionResolver\": \"git-tag\", // or \"registry\", because we are no longer referencing our source package.json as the source of truth for the current version\n      \"preserveLocalDependencyProtocols\": false // (NOT NEEDED WHEN USING pnpm or bun) because we need to ensure our dist package.json files are valid for publishing and the local dependency references are removed\n    }\n  },\n  \"targetDefaults\": {\n    // Ensure that publishing works from the dist directory\n    // The nx-release-publish target is added implicitly behind the scenes by Nx Release, and we can therefore configure it in targetDefaults\n    \"nx-release-publish\": {\n      \"options\": {\n        \"packageRoot\": \"dist/packages/{projectName}\" // path structure for your dist directory, where {projectRoot} and {projectName} are available placeholders that will be interpolated by Nx\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Project-Level Caching for Specific Project\nDESCRIPTION: Illustrates defining inputs and outputs for caching at a project-level in project.json to exclude markdown files and specify the build output directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/cache-task-results.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"some-project\",\n  \"targets\": {\n    \"build\": {\n      ...\n      \"inputs\": [\"!{projectRoot}/**/*.md\"],\n      \"outputs\": [\"{workspaceRoot}/dist/apps/some-project\"],\n      ...\n    }\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Commit Message and Tag Pattern\nDESCRIPTION: This JSON snippet customizes the commit message and tag pattern used by Nx Release.  The `releaseTagPattern` specifies the format of the git tag, and the `git.commitMessage` specifies the format of the commit message.  The `{version}` and `{releaseGroupName}` placeholders will be dynamically interpolated.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/get-started-with-nx-release.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"release\": {\n    \"releaseTagPattern\": \"release/{version}\",\n    \"git\": {\n      \"commitMessage\": \"chore(release): {version}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Webpack Configuration\nDESCRIPTION: Custom webpack configuration for Next.js applications using withNx plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/webpack-config-setup.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { withNx } = require('@nx/next/plugins/with-nx');\n\nconst nextConfig = {\n  webpack: (\n    config,\n    { buildId, dev, isServer, defaultLoaders, nextRuntime, webpack }\n  ) => {\n    return config;\n  },\n};\n\nreturn withNx(nextConfig);\n```\n\n----------------------------------------\n\nTITLE: Generating Stories for Angular Components\nDESCRIPTION: Command to generate stories for all components in an Angular project using the @nx/angular:stories generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/plugin-angular.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:stories --project=<project-name>\n```\n\n----------------------------------------\n\nTITLE: Transforming the 'index.html' file - JSON Configuration\nDESCRIPTION: This JSON snippet shows how to configure the Nx Angular executor for transforming the application's index.html file. It specifies a path to a TypeScript file that exports a function to modify the contents of index.html.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/application-executor-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/angular:application\",\n      \"options\": {\n        ...\n        \"indexHtmlTransformer\": \"apps/my-app/index-html.transformer.ts\"\n      }\n    }\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inlining Libraries with Nx TSC\nDESCRIPTION: This example demonstrates how to inline non-buildable libraries using the `@nx/js:tsc` executor with the `external` option set to `all`.  This configuration includes all dependencies in the build output. Additionally, it shows how to inline buildable libraries by setting `external` to `none`, effectively including them in the build.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/tsc-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"executor\": \"@nx/js:tsc\",\n    \"options\": {\n      \"outputPath\": \"dist/libs/ts-lib\",\n      \"main\": \"libs/ts-lib/src/index.ts\",\n      \"tsConfig\": \"libs/ts-lib/tsconfig.lib.json\",\n      \"assets\": [\"libs/ts-lib/*.md\"],\n      \"external\": \"all\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Workspace with Org Preset\nDESCRIPTION: Creates a new Nx workspace using a custom organization-specific preset, ensuring consistent setup within the organization.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-10-tailoring-nx-for-your-organization.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest react-monorepo --preset=org-react\n```\n\n----------------------------------------\n\nTITLE: Custom Webpack Configuration in Nx\nDESCRIPTION: This JavaScript code snippet demonstrates a basic custom webpack configuration. The module exports a function that takes the existing webpack configuration as an argument and allows for modification. The updated configuration is then returned.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/dev-server-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (config) => {\n  // update the config with your custom configuration\n\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Module Boundaries Rule\nDESCRIPTION: Basic configuration example for setting up the @nx/enforce-module-boundaries rule in ESLint. Shows how to add the rule to the ESLint configuration file with overrides for TypeScript and JavaScript files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/eslint/enforce-module-boundaries.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"files\": [\"*.ts\", \"*.tsx\", \"*.js\", \"*.jsx\"],\n      \"rules\": {\n        \"@nx/enforce-module-boundaries\": [\n          \"error\",\n          {\n            // ...rule specific configuration\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets in Nx project.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the `assets` option within a `build` target of an Nx project.json file. It showcases using both regex strings and the object format to specify assets to be copied into the output bundle, including markdown files and other non-typescript files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/include-assets-in-build.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n\"build\": {\n  \"executor\": \"@nx/js:tsc\", // or any other Nx executor that supports the `assets` option\n  \"options\": {\n    // shortened...\n    \"assets\": [\n      // Copies all the markdown files at the root of the project to the root of the output bundle\n      \"path-to-my-project/*.md\",\n      {\n        \"input\": \"./path-to-my-project/src\", // look in the src folder\n        \"glob\": \"**/!(*.ts)\", // for any file (in any folder) that is not a typescript file\n        \"output\": \"./src\" // put those files in the src folder of the output bundle\n      },\n      {\n        \"input\": \"./path-to-my-project\", // look in the project folder\n        \"glob\": \"executors.json\", // for the executors.json file\n        \"output\": \".\" // put the file in the root of the output bundle\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pre and Post Task Execution Hooks in Nx\nDESCRIPTION: Demonstrates how to create both preTasksExecution and postTasksExecution hooks in an Nx plugin to perform custom logic before and after tasks are run. Includes environment validation, setting environment variables, and sending analytics data.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/task-running-lifecycle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Example plugin with both pre and post execution hooks\n\n// context contains workspaceRoot and nx.json configuration\nexport async function preTasksExecution(options: any, context) {\n  // Run custom logic before tasks are executed\n  console.log('About to run tasks!');\n\n  // You can modify environment variables\n  if (process.env.QA_ENV) {\n    process.env.NX_SKIP_NX_CACHE = 'true';\n  }\n\n  // You can validate the environment\n  if (!isEnvironmentValid()) {\n    throw new Error('Environment is not set up correctly');\n  }\n}\n\n// context contains workspaceRoot, nx.json configuration, and task results\nexport async function postTasksExecution(options: any, context) {\n  // Run custom logic after tasks are executed\n  console.log('All tasks have completed!');\n\n  // You can access task results for analytics\n  if (options.reportAnalytics) {\n    await fetch(process.env.ANALYTICS_API, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(context.taskResults),\n    });\n  }\n}\n\nfunction isEnvironmentValid() {\n  // Implement your validation logic\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Parallelism in nx.json (Nx <17)\nDESCRIPTION: This configuration sets the default number of parallel processes to 5 in Nx versions prior to 17 by configuring the tasksRunnerOptions in nx.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/run-tasks-in-parallel.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasksRunnerOptions\": {\n    \"default\": {\n      \"runner\": \"nx/tasks-runners/default\",\n      \"options\": {\n        \"parallel\": 5\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Scripts for TypeScript Monorepo\nDESCRIPTION: Shows the NPM scripts configuration in package.json for running, building, and type-checking TypeScript code in a monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"ts-monorepo-linking\",\n  \"private\": true,\n  \"devDependencies\": {\n    \"typescript\": \"^5.3.3\",\n    \"tsx\": \"^4.1.0\"\n  },\n  \"scripts\": {\n    \"dev\": \"tsx apps/myapp/src/index.ts\",\n    \"build\": \"tsc -p apps/myapp/tsconfig.json\",\n    \"typecheck\": \"tsc -p apps/myapp/tsconfig.json --noEmit\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Library for Remix Application\nDESCRIPTION: Creates a shared library that can be used across Remix applications in the Nx workspace. This command sets up the library structure with testing configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/remix.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/remix:lib libs/login\n```\n\n----------------------------------------\n\nTITLE: Creating CSR Configuration for Angular with Rsbuild\nDESCRIPTION: Example of creating a configuration for a Client-Side Rendering (CSR) Angular application. This only requires the browser entry point.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rsbuild/create-config.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@nx/angular-rsbuild';\n\nexport default createConfig({\n  options: {\n    browser: './src/main.ts',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Generators in Nx for Code Standardization\nDESCRIPTION: Basic structure of a custom Nx generator function that can be used to automate code generation according to organizational standards. The function manipulates files and formats them using the Nx devkit.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-18-architecting-angular-applications.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tree, formatFiles } from '@nx/devkit';\n\nexport default async function (tree: Tree, schema: any) {\n  // Add your generator logic here\n  // For example, create files, modify configurations, etc.\n\n  await formatFiles(tree);\n}\n```\n\n----------------------------------------\n\nTITLE: Storybook Preview Configuration\nDESCRIPTION: Example of a Storybook preview configuration file showing how to export decorators.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/storybook/plugin-overview.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport someDecorator from 'some-storybook-addon';\nexport const decorators = [someDecorator];\n```\n\n----------------------------------------\n\nTITLE: Generating React Component Test with Nx CLI\nDESCRIPTION: Command to generate a Cypress component test file for a specific React component. The generator creates a .cy test file alongside the component. Requires Cypress version 10+ and project must be configured for component testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/component-test-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:component-test --project=my-cool-react-project --componentPath=src/my-fancy-button.tsx\n```\n\n----------------------------------------\n\nTITLE: ModuleFederationConfig Interface Definition\nDESCRIPTION: Comprehensive interface definition for ModuleFederationConfig, including all configuration options for module federation setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/module-federation/nx-module-federation-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ModuleFederationConfig {\n  name: string;\n  remotes?: Remotes;\n  library?: ModuleFederationLibrary;\n  exposes?: Record<string, string>;\n  shared?: SharedFunction;\n  additionalShared?: AdditionalSharedConfig;\n  disableNxRuntimeLibraryControlPlugin?: boolean;\n}\n\nexport type Remotes = Array<string | [remoteName: string, remoteUrl: string]>;\nexport type ModuleFederationLibrary = { type: string; name: string };\nexport type SharedFunction = (\n  libraryName: string,\n  sharedConfig: SharedLibraryConfig\n) => undefined | false | SharedLibraryConfig;\nexport interface SharedLibraryConfig {\n  singleton?: boolean;\n  strictVersion?: boolean;\n  requiredVersion?: false | string;\n  eager?: boolean;\n}\nexport type AdditionalSharedConfig = Array<\n  | string\n  | [libraryName: string, sharedConfig: SharedLibraryConfig]\n  | { libraryName: string; sharedConfig: SharedLibraryConfig }\n>;\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Libraries with Nx CLI\nDESCRIPTION: Command-line instructions for creating local libraries for products, orders, and shared UI components using Nx Angular library generator with Jest unit testing\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/6-create-local-library/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx\\/angular:library libs\\/products --unitTestRunner=jest\nnpx nx g @nx\\/angular:library libs\\/orders --unitTestRunner=jest\nnpx nx g @nx\\/angular:library libs\\/shared\\/ui --unitTestRunner=jest\n```\n\n----------------------------------------\n\nTITLE: Running Vitest Unit Tests with Nx\nDESCRIPTION: Command for executing unit tests for an Nx library using Vitest test runner. The <%= name %> placeholder gets replaced with the actual library name during project generation.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vue/src/generators/library/files/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx test <%= name %>\n```\n\n----------------------------------------\n\nTITLE: Vite and Vitest Configuration for React in Nx\nDESCRIPTION: The vite.config.ts file showing how to configure Vite and Vitest for a React application in Nx. Includes server settings, plugins, and test configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"vitest\" />\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport viteTsConfigPaths from 'vite-tsconfig-paths';\n\nexport default defineConfig({\n  server: {\n    port: 4200,\n    host: 'localhost',\n  },\n  plugins: [\n    react(),\n    viteTsConfigPaths({\n      root: './',\n    }),\n  ],\n  // vitest config\n  test: {\n    globals: true,\n    cache: {\n      dir: './node_modules/.vitest',\n    },\n    environment: 'jsdom',\n    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Qwik Context for Todo State Management\nDESCRIPTION: Creation of a Qwik Context to manage todos across the application, including a context provider component and store definition.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-15-qwikify-your-dev.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  component$,\n  createContextId,\n  Slot,\n  useContextProvider,\n  useStore,\n} from '@builder.io/qwik';\nimport { Todo } from './api';\n\ninterface TodoStore {\n  todos: Todo[];\n  lastId: number;\n}\n\nexport const TodoContext = createContextId<TodoStore>('todo.context');\nexport const TodoContextProvider = component$(() => {\n  const todoStore = useStore<TodoStore>({\n    todos: [],\n    lastId: 0,\n  });\n  useContextProvider(TodoContext, todoStore);\n  return <Slot />;\n});\n```\n\n----------------------------------------\n\nTITLE: Generating CLI Package in Existing Plugin Repository\nDESCRIPTION: This command generates a create CLI within an existing Nx plugin repository. It uses the `@nx/plugin:create-package` generator to create the CLI project, linking it to an existing plugin project and setting up end-to-end testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-10-create-your-own-create-react-app-cli.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/plugin:create-package <cli name> --project=<existing plugin name> --e2eProject e2e\n```\n\n----------------------------------------\n\nTITLE: Running Affected Deploy Tasks in Nx\nDESCRIPTION: This command deploys applications affected by the current changes in the Nx monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/10-affected/content.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx affected -t deploy\n```\n\n----------------------------------------\n\nTITLE: Dry-run release results preview\nDESCRIPTION: Shows the preview of changes that would be made by Nx Release during a dry-run.  It demonstrates the version bump in `Cargo.toml`, the updated lock file, staging changes with Git, and the creation of a changelog entry.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/publish-rust-crates.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nNX   Running release version for project: pkg-1\n\npkg-1 🔍 Reading data for crate \"pkg-1\" from crates/crates/pkg-1/Cargo.toml\npkg-1 📄 Resolved the current version as 0.1.0 from crates/pkg-1/Cargo.toml\n✔ What kind of change is this for the 3 matched projects(s)? · patch\npkg-1 ✍️  New version 0.1.1 written to crates/crates/pkg-1/Cargo.toml\n\nNX   Running release version for project: pkg-2\n\npkg-2 🔍 Reading data for crate \"pkg-2\" from crates/crates/pkg-2/Cargo.toml\npkg-2 📄 Resolved the current version as 0.1.0 from crates/pkg-2/Cargo.toml\npkg-2 ✍️  New version 0.1.1 written to crates/crates/pkg-2/Cargo.toml\n\nNX   Running release version for project: pkg-3\n\npkg-3 🔍 Reading data for crate \"pkg-3\" from crates/crates/pkg-3/Cargo.toml\npkg-3 📄 Resolved the current version as 0.1.0 from crates/pkg-3/Cargo.toml\npkg-3 ✍️  New version 0.1.1 written to crates/crates/pkg-3/Cargo.toml\n\nUPDATE crates/pkg-1/Cargo.toml [dry-run]\n\n  [package]\n  name = \"pkg-1\"\n- version = \"0.1.0\"\n+ version = \"0.1.1\"\n  edition = \"2021\"\n\n\nUPDATE crates/pkg-2/Cargo.toml [dry-run]\n\n  [package]\n  name = \"pkg-2\"\n- version = \"0.1.0\"\n+ version = \"0.1.1\"\n  edition = \"2021\"\n\n\nUPDATE crates/pkg-3/Cargo.toml [dry-run]\n\n  [package]\n  name = \"pkg-3\"\n- version = \"0.1.0\"\n+ version = \"0.1.1\"\n  edition = \"2021\"\n\n\nNX   Updating Cargo.lock file\n\n\nNX   Staging changed files with git\n\n\nNX   Previewing an entry in CHANGELOG.md for v0.1.1\n\n\nCREATE CHANGELOG.md [dry-run]\n+ ## 0.1.1 (2024-02-29)\n+\n+ This was a version bump only, there were no code changes.\n\n\nNX   Staging changed files with git\n\n\nNX   Committing changes with git\n\n\nNX   Tagging commit with git\n\n\nNX   Skipped publishing packages.\n\n\nNOTE: The \"dryRun\" flag means no changes were made.\n```\n\n----------------------------------------\n\nTITLE: Disabling Task Sync Generators in Nx\nDESCRIPTION: This JSON snippet shows how to disable specific sync generators by adding them to the `sync.disabledTaskSyncGenerators` array, allowing tasks to skip these generators in Continuous Integration environments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/sync-generators.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"packages/nx/schemas/nx-schema.json\",\n  ...\n  \"sync\": {\n    \"disabledTaskSyncGenerators\": [\"@nx/js:typescript-sync\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Typechecking With Project References First Run\nDESCRIPTION: This snippet illustrates the first run duration and memory usage for typechecking with project references enabled, showcasing the performance improvements compared to not using them.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/typescript-project-linking.md#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nTypecheck with project references first run: 175 seconds, max memory 945 MB\n```\n\n----------------------------------------\n\nTITLE: Building a publishable Nx library\nDESCRIPTION: Command to build a publishable Nx library named 'mylib'. This produces an optimized bundle in the dist/mylib folder, ready for publishing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/buildable-and-publishable-libraries.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx build mylib\n```\n\n----------------------------------------\n\nTITLE: Enforcing Module Boundaries with ESLint in Nx\nDESCRIPTION: Demonstrates how to configure ESLint rules in Nx to enforce module boundaries based on project tags, helping maintain a clean and organized project structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"rules\": {\n        \"@nrwl/nx/enforce-module-boundaries\": [\n          \"error\",\n          {\n            \"depConstraints\": [\n              {\n                \"sourceTag\": \"type:utils\",\n                \"onlyDependOnLibsWithTags\": [\"type:utils\"]\n              },\n              {\n                \"sourceTag\": \"type:domain\",\n                \"onlyDependOnLibsWithTags\": [\"type: domain\", \"type:utils\"]\n              },\n              {\n                \"sourceTag\": \"domain:products\",\n                \"onlyDependOnLibsWithTags\": [\"domain:products\", \"domain:orders\"]\n              }\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Changesets for Nx Cloud Agents\nDESCRIPTION: Shows how to configure dynamic changeset-based agent allocation in Nx Cloud. This allows for different numbers of agents to be used based on the size of the change.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ndistribute-on:\n  small-changeset: 3 linux-medium-js\n  medium-changeset: 8 linux-medium-js\n  large-changeset: 12 linux-medium-js\n```\n\n----------------------------------------\n\nTITLE: Viewing Inferred Tasks for a Project in Nx\nDESCRIPTION: This command shows the inferred tasks for the angular-store-e2e project using the Nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/8-inferred-tasks/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx show project angular-store-e2e\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint to Keep Utility Libraries Framework-Free\nDESCRIPTION: This snippet shows how to configure ESLint to ensure utility libraries remain framework-free by banning imports from React-related packages. It uses wildcards to match multiple packages containing 'react' in their names.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/ban-external-imports.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // ... more ESLint config here\n  // @nx/enforce-module-boundaries should already exist at the top-level of your config\n  \"@nx/enforce-module-boundaries\": [\n    \"error\",\n    {\n      \"allow\": [],\n      // update depConstraints based on your tags\n      \"depConstraints\": [\n        // projects tagged with \"type:util\" can't import from \"react\" or related projects\n        {\n          \"sourceTag\": \"type:util\",\n          \"bannedExternalImports\": [\"*react*\"]\n        }\n      ]\n    }\n  ]\n\n  // ... more ESLint config here\n}\n```\n\n----------------------------------------\n\nTITLE: Create and Export React Component\nDESCRIPTION: Generates a new React component within an existing library and exports it.  The component will be available for use outside the library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react/react-plugin.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:component libs/my-new-lib/src/lib/my-new-component --export\n```\n\n----------------------------------------\n\nTITLE: Generate Node Library\nDESCRIPTION: Command to generate a new Node.js library in the libs directory\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/generate.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/node:library libs/mylibrary\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Plugin for E2E and Unit Tests\nDESCRIPTION: Example configuration in nx.json showing how to set up @nx/jest/plugin for both E2E and unit tests with different target names and runtime options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/jest/jest-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/jest/plugin\",\n      \"exclude\": [\"e2e/**/*\"],\n      \"options\": {\n        \"targetName\": \"test\"\n      }\n    },\n    {\n      \"plugin\": \"@nx/jest/plugin\",\n      \"include\": [\"e2e/**/*\"],\n      \"options\": {\n        \"targetName\": \"e2e-local\",\n        \"ciTargetName\": \"e2e-ci\",\n        \"disableJestRuntime\": false\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Glob Patterns for Nx Target Outputs\nDESCRIPTION: Uses glob patterns to define specific file types to be cached by Nx for different build targets. This allows for more granular control over caching when multiple targets write to the same directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"build-js\": {\n      \"outputs\": [\"{workspaceRoot}/dist/libs/mylib/**/*.{js,map}\"]\n    },\n    \"build-css\": {\n      \"outputs\": [\"{workspaceRoot}/dist/libs/mylib/**/*.css\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nx Migration to Latest Version\nDESCRIPTION: This command analyzes the workspace, downloads necessary plugins, and prepares migration files without performing the actual update.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-07-26-evergreen-tooling-more-than-just-codemods.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\n----------------------------------------\n\nTITLE: Creating React Component with Custom Name\nDESCRIPTION: Generates a React component with a custom name 'Custom' while maintaining the specified file path using the --name flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/component-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:component libs/ui/src/my-component.tsx --name=custom\n```\n\n----------------------------------------\n\nTITLE: Project Configuration JSON for E2E Tests in Nx\nDESCRIPTION: This JSON snippet shows the detailed configuration of an e2e project in Nx, including the split tasks for CI and individual test files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/features/split-e2e-tasks.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"project\": {\n    \"name\": \"admin-e2e\",\n    \"data\": {\n      \"metadata\": {\n        \"targetGroups\": {\n          \"E2E (CI)\": [\n            \"e2e-ci--src/e2e/app.cy.ts\",\n            \"e2e-ci--src/e2e/login.cy.ts\",\n            \"e2e-ci\"\n          ]\n        }\n      },\n      \"root\": \"apps/admin-e2e\",\n      \"projectType\": \"application\",\n      \"targets\": {\n        \"e2e\": {\n          \"cache\": true,\n          \"inputs\": [\"default\", \"^production\"],\n          \"outputs\": [\n            \"{workspaceRoot}/dist/cypress/apps/admin-e2e/videos\",\n            \"{workspaceRoot}/dist/cypress/apps/admin-e2e/screenshots\"\n          ],\n          \"executor\": \"nx:run-commands\",\n          \"dependsOn\": [\"^build\"],\n          \"options\": {\n            \"cwd\": \"apps/admin-e2e\",\n            \"command\": \"cypress run\"\n          },\n          \"configurations\": {\n            \"production\": {\n              \"command\": \"cypress run --env webServerCommand=\\\"nx run admin:preview\\\"\"\n            }\n          },\n          \"metadata\": {\n            \"technologies\": [\"cypress\"]\n          }\n        },\n        \"e2e-ci--src/e2e/app.cy.ts\": {\n          \"outputs\": [\n            \"{workspaceRoot}/dist/cypress/apps/admin-e2e/videos\",\n            \"{workspaceRoot}/dist/cypress/apps/admin-e2e/screenshots\"\n          ],\n          \"inputs\": [\n            \"default\",\n            \"^production\",\n            {\n              \"externalDependencies\": [\"cypress\"]\n            }\n          ],\n          \"cache\": true,\n          \"options\": {\n            \"cwd\": \"apps/admin-e2e\",\n            \"command\": \"cypress run --env webServerCommand=\\\"nx run admin:serve-static\\\" --spec src/e2e/app.cy.ts\"\n          },\n          \"executor\": \"nx:run-commands\",\n          \"configurations\": {},\n          \"metadata\": {\n            \"technologies\": [\"cypress\"]\n          }\n        },\n        \"e2e-ci--src/e2e/login.cy.ts\": {\n          \"outputs\": [\n            \"{workspaceRoot}/dist/cypress/apps/admin-e2e/videos\",\n            \"{workspaceRoot}/dist/cypress/apps/admin-e2e/screenshots\"\n          ],\n          \"inputs\": [\n            \"default\",\n            \"^production\",\n            {\n              \"externalDependencies\": [\"cypress\"]\n            }\n          ],\n          \"cache\": true,\n          \"options\": {\n            \"cwd\": \"apps/admin-e2e\",\n            \"command\": \"cypress run --env webServerCommand=\\\"nx run admin:serve-static\\\" --spec src/e2e/login.cy.ts\"\n          },\n          \"executor\": \"nx:run-commands\",\n          \"configurations\": {},\n          \"metadata\": {\n            \"technologies\": [\"cypress\"]\n          }\n        },\n        \"e2e-ci\": {\n          \"executor\": \"nx:noop\",\n          \"cache\": true,\n          \"inputs\": [\n            \"default\",\n            \"^production\",\n            {\n              \"externalDependencies\": [\"cypress\"]\n            }\n          ],\n          \"outputs\": [\n            \"{workspaceRoot}/dist/cypress/apps/admin-e2e/videos\",\n            \"{workspaceRoot}/dist/cypress/apps/admin-e2e/screenshots\"\n          ],\n          \"dependsOn\": [\n            {\n              \"target\": \"e2e-ci--src/e2e/app.cy.ts\",\n              \"projects\": \"self\",\n              \"params\": \"forward\"\n            },\n            {\n              \"target\": \"e2e-ci--src/e2e/login.cy.ts\",\n              \"projects\": \"self\",\n              \"params\": \"forward\"\n            }\n          ],\n          \"options\": {},\n          \"configurations\": {},\n          \"metadata\": {\n            \"technologies\": [\"cypress\"]\n          }\n        },\n        \"lint\": {\n          \"executor\": \"@nx/eslint:lint\",\n          \"inputs\": [\"default\", \"{workspaceRoot}/.eslintrc.json\"],\n          \"cache\": true,\n          \"outputs\": [\"{options.outputFile}\"],\n          \"options\": {},\n          \"configurations\": {},\n          \"metadata\": {\n            \"technologies\": [\"eslint\"]\n          }\n        }\n      },\n      \"name\": \"admin-e2e\",\n      \"$schema\": \"../../node_modules/nx/schemas/project-schema.json\",\n      \"sourceRoot\": \"apps/admin-e2e/src\",\n      \"tags\": [],\n      \"implicitDependencies\": [\"admin\"]\n    }\n  },\n  \"sourceMap\": {\n    \"root\": [\"apps/admin-e2e/project.json\", \"nx/core/project-json\"],\n    \"projectType\": [\"apps/admin-e2e/project.json\", \"nx/core/project-json\"],\n    \"targets\": [\"apps/admin-e2e/project.json\", \"nx/core/project-json\"],\n    \"targets.e2e\": [\"apps/admin-e2e/project.json\", \"nx/core/target-defaults\"],\n    \"targets.e2e.options\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e.cache\": [\n      \"apps/admin-e2e/project.json\",\n      \"nx/core/target-defaults\"\n    ],\n    \"targets.e2e.inputs\": [\n      \"apps/admin-e2e/project.json\",\n      \"nx/core/target-defaults\"\n    ],\n    \"targets.e2e.outputs\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e.configurations\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e.executor\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e.options.cwd\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e.options.command\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e.configurations.production\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e.configurations.production.command\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/app.cy.ts\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/app.cy.ts.outputs\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/app.cy.ts.inputs\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/app.cy.ts.cache\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/app.cy.ts.options\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/app.cy.ts.executor\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/app.cy.ts.options.cwd\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/app.cy.ts.options.command\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/login.cy.ts\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/login.cy.ts.outputs\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/login.cy.ts.inputs\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/login.cy.ts.cache\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/login.cy.ts.options\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/login.cy.ts.executor\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/login.cy.ts.options.cwd\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/login.cy.ts.options.command\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci.executor\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci.cache\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci.inputs\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci.outputs\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci.dependsOn\": [\n      \"apps/admin-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e.dependsOn\": [\n      \"apps/admin-e2e/project.json\",\n      \"nx/core/target-defaults\"\n    ],\n    \"targets.lint\": [\"apps/admin-e2e/project.json\", \"nx/core/project-json\"],\n    \"targets.lint.executor\": [\n      \"apps/admin-e2e/project.json\",\n      \"nx/core/project-json\"\n    ],\n    \"targets.lint.inputs\": [\n      \"apps/admin-e2e/project.json\",\n      \"nx/core/target-defaults\"\n    ],\n    \"targets.lint.cache\": [\n      \"apps/admin-e2e/project.json\",\n      \"nx/core/target-defaults\"\n    ],\n    \"name\": [\"apps/admin-e2e/project.json\", \"nx/core/project-json\"],\n    \"$schema\": [\"apps/admin-e2e/project.json\", \"nx/core/project-json\"],\n    \"sourceRoot\": [\"apps/admin-e2e/project.json\", \"nx/core/project-json\"],\n    \"tags\": [\"apps/admin-e2e/project.json\", \"nx/core/project-json\"],\n    \"implicitDependencies\": [\n      \"apps/admin-e2e/project.json\",\n      \"nx/core/project-json\"\n    ],\n    \"implicitDependencies.admin\": [\n      \"apps/admin-e2e/project.json\",\n      \"nx/core/project-json\"\n    ],\n    \"targets.lint.outputs\": [\n      \"apps/admin-e2e/project.json\",\n      \"nx/core/project-json\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building React Native Application for iOS\nDESCRIPTION: This command builds the React Native application named 'mobile' for release on the iOS platform (Mac only). It uses the Nx CLI to execute the `build-ios` target, generating the necessary IPA files for distribution through the App Store or TestFlight.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-native.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nnpx nx build-ios mobile\n```\n\n----------------------------------------\n\nTITLE: Creating Root Reducer with History\nDESCRIPTION: TypeScript code to create a root reducer that takes a history object as an argument, allowing reuse between web and mobile.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { combineReducers } from '@reduxjs/toolkit';\nimport { connectRouter } from 'connected-react-router';\nimport { History } from 'history';\nimport { filmsSlice } from '../films/films.slice';\nimport { peopleSlice } from '../people/people.slice';\nimport { searchSlice } from '../search/search.slice';\nimport { RootState } from './root-state.interface';\nexport const createRootReducer = (history: History) =>\n  combineReducers<RootState>({\n    films: filmsSlice.reducer,\n    router: connectRouter(history) as any,\n    search: searchSlice.reducer,\n    people: peopleSlice.reducer,\n  });\n```\n\n----------------------------------------\n\nTITLE: Removing Implicit Dependencies in project.json\nDESCRIPTION: This snippet demonstrates how to remove an implicit dependency from a project in the project.json file, overriding Nx's automatic dependency detection.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_22\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"root\": \"libs/mylib\",\n  \"implicitDependencies\": [\"!anotherlib\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Module Federation Dev Server Configuration Interfaces\nDESCRIPTION: TypeScript interfaces defining the configuration options for the module federation dev server plugins.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/module-federation/nx-module-federation-dev-server-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NxModuleFederationDevServerConfig {\n  host?: string;\n  staticRemotesPort?: number;\n  pathToManifestFile?: string;\n  ssl?: boolean;\n  sslCert?: string;\n  sslKey?: string;\n  parallel?: number;\n  devRemoteFindOptions?: DevRemoteFindOptions;\n}\n\nexport interface DevRemoteFindOptions {\n  retries?: number;\n  retryDelay?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Copying in esbuild\nDESCRIPTION: JSON configuration for copying assets during the build process, including README files, images, and documentation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/esbuild/documents/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n\"build\": {\n \"executor\": \"@nx/esbuild:esbuild\",\n  \"options\": {\n    \"assets\": [\n      { \"input\": \"libs/mylib\", \"glob\": \"README.md\", \"output\": \"/\" },\n      { \"input\": \"libs/mylib\", \"glob\": \"logo.png\", \"output\": \"/\" },\n      { \"input\": \"libs/mylib\", \"glob\": \"docs/**/*.md\", \"output\": \"/docs\" }\n    ]\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Executor\nDESCRIPTION: This shell command demonstrates how to run the executor via the Nx CLI. It uses `nx run` to execute the `echo` target for the `my-project` project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/local-executors.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx run my-project:echo\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Inputs Globally\nDESCRIPTION: Configure global cache input rules in nx.json, specifying which files should be included or excluded from caching computations\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/how-caching-works.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"build\": {\n      \"inputs\": [\"{projectRoot}/**/*\", \"!{projectRoot}/**/*.md\"]\n    },\n    \"test\": {\n      \"inputs\": [...]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Vitest in Nx\nDESCRIPTION: Command to run unit tests for a React application using Vitest in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx test\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx TSC Build with Multiple Entry Points (package.json)\nDESCRIPTION: Configuration for @nx/js:tsc executor in package.json to handle multiple entry points with additionalEntryPoints and generateExportsField options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/define-secondary-entrypoints.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"my-awesome-lib\",\n  \"nx\": {\n    \"targets\": {\n      \"build\": {\n        \"executor\": \"@nx/js:tsc\",\n        \"options\": {\n          \"main\": \"packages/my-awesome-lib/src/index.ts\",\n          \"additionalEntryPoints\": [\n            \"packages/my-awesome-lib/src/foo.ts\",\n            \"packages/my-awesome-lib/src/bar.ts\"\n          ],\n          \"generateExportsField\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Support in Nx Workspace\nDESCRIPTION: Commands to add React Native support to an existing Nx workspace using npm or yarn.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# npm\nnpm install @nrwl/react-native --save-dev\n\n# yarn\nyarn add @nrwl/react-native --dev\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Nx Projects\nDESCRIPTION: This YAML configuration defines a CI workflow for Nx projects using GitHub Actions. It includes steps for checking out code, setting up Node.js, installing dependencies, and running affected tasks. It also provides options for task distribution using Nx Cloud.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/4-fast-ci/3-create-ci-workflow/content.md#2025-04-22_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nname: CI\n# ...\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      # This enables task distribution via Nx Cloud\n      # Run this command as early as possible, before dependencies are installed\n      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun\n      # Uncomment this line to enable task distribution\n      # - run: npx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\" --stop-agents-after=\"e2e-ci\"\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n          cache: 'npm'\n      - run: npm ci --legacy-peer-deps\n      - uses: nrwl/nx-set-shas@v4\n      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected\n      # When you enable task distribution, run the e2e-ci task instead of e2e\n      - run: npx nx affected -t lint test build e2e\n```\n\n----------------------------------------\n\nTITLE: Complete nx.json Configuration\nDESCRIPTION: This JSON snippet provides a full example of an nx.json file, including task runner options, named inputs, and target defaults for build and dev commands.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasksRunnerOptions\": {\n    \"default\": {\n      \"runner\": \"nx/tasks-runners/default\",\n      \"options\": {\n        \"cacheableOperations\": [\"build\", \"test\"]\n      }\n    }\n  },\n  \"namedInputs\": {\n    \"noMarkdown\": [\"!{projectRoot}/**/*.md\"]\n  },\n  \"targetDefaults\": {\n    \"build\": {\n      \"inputs\": [\"noMarkdown\", \"^noMarkdown\"],\n      \"dependsOn\": [\"^build\"]\n    },\n    \"dev\": {\n      \"dependsOn\": [\"^build\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Project Structure with Nx Graph\nDESCRIPTION: Shows how to use the 'nx graph' command to visualize the project structure and dependencies in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx graph\n```\n\n----------------------------------------\n\nTITLE: Creating a Plugin to Add Targets to Existing Projects\nDESCRIPTION: This example shows how to create a plugin that adds targets to existing projects based on configuration files. The plugin checks for tsconfig.json files and adds a build target to projects that have them.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/project-graph-plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createNodesFromFiles, readJsonFile } from '@nx/devkit';\nimport { dirname } from 'path';\n\nexport interface MyPluginOptions {}\n\nexport const createNodesV2: CreateNodesV2<MyPluginOptions> = [\n  '**/tsconfig.json',\n  async (configFiles, options, context) => {\n    return await createNodesFromFiles(\n      (configFile, options, context) =>\n        createNodesInternal(configFile, options, context),\n      configFiles,\n      options,\n      context\n    );\n  },\n];\n\nasync function createNodesInternal(\n  configFilePath: string,\n  options: MyPluginOptions,\n  context: CreateNodesContextV2\n) {\n  const projectConfiguration = readJsonFile(configFilePath);\n  const projectRoot = dirname(configFilePath);\n\n  const isProject =\n    existsSync(join(projectRoot, 'project.json')) ||\n    existsSync(join(projectRoot, 'package.json'));\n  if (!isProject) {\n    return {};\n  }\n\n  return {\n    projects: {\n      [projectRoot]: {\n        targets: {\n          build: {\n            command: `tsc -p ${fileName}`,\n          },\n        },\n      },\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Nest.js Applications and Libraries\nDESCRIPTION: Commands to create new Nest.js applications and libraries within an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/nest/nest-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nest:app apps/my-nest-app\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nest:app apps/my-nest-app --frontendProject my-angular-app\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nest:lib libs/my-nest-lib\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nest:lib libs/my-nest-lib --buildable\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nest:lib libs/my-nest-lib --publishable --importPath=@my-workspace/my-nest-lib\n```\n\n----------------------------------------\n\nTITLE: Configuring webpackFinal in Storybook Main Config\nDESCRIPTION: This example shows how to add a webpackFinal function to the Storybook main configuration file, allowing you to make fine-grained changes to the webpack configuration that will apply across the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/custom-builder-configs.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwebpackFinal: async (config, { configType }) => {\n  // Make whatever fine-grained changes you need that should apply to all storybook configs\n\n  // Return the altered config\n  return config;\n},\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Path Mapping\nDESCRIPTION: Add a TypeScript path mapping for the federated 'Hello' module in the root TSConfig file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/federate-a-module.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"paths\": {\n    \"greeting/Module\": [\"greeting/src/remote-entry.ts\"],\n    \"greeting/Hello\": [\"hello/src/index.ts\"] // <-- this line was added\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Release Script with Nx Programmatic API\nDESCRIPTION: Example of using Nx's programmatic release API to create a custom release script. The script performs version updates, changelog generation, and package publishing in sequence for a minor version update.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-12-20-nx-17-2-release.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { releaseChangelog, releasePublish, releaseVersion } from 'nx/release';\n\n(async () => {\n  const { workspaceVersion, projectsVersionData } = await releaseVersion({\n    specifier: 'minor',\n  });\n  await releaseChangelog({\n    versionData: projectsVersionData,\n    version: workspaceVersion,\n  });\n  await releasePublish();\n  process.exit(0);\n})();\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Host Application in React - JavaScript\nDESCRIPTION: This snippet illustrates the Webpack configuration used for the host application in a React Nx workspace, leveraging the 'withModuleFederation' utility provided by Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/faster-builds.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withModuleFederation } from '@nx/react/module-federation';\nimport moduleFederationConfig from './module-federation.config';\n\nexport default withModuleFederation({\n  ...moduleFederationConfig,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Build and Serve Targets for Custom Webpack\nDESCRIPTION: Updates the project.json configuration to use @nx/angular executors with custom webpack configuration for build and serve targets.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/use-environment-variables-in-angular.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/angular:webpack-browser\",\n      \"options\": {\n        \"customWebpackConfig\": {\n          \"path\": \"apps/my-app/webpack.config.js\"\n        }\n      }\n    },\n    \"serve\": {\n      \"executor\": \"@nx/angular:dev-server\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Script with exec in package.json\nDESCRIPTION: Illustrates how to set up a custom 'docs' script in package.json using 'nx exec' to run a Node.js script as a Nx target for the 'myorg' project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/cli/exec.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myorg\",\n  \"nx\": {},\n  \"scripts\": {\n    \"docs\": \"nx exec -- node ./scripts/some-script.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Selectors\nDESCRIPTION: Defines selector functions to extract specific pieces of state from the Redux store\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst getHoroscopeState = (rootState: RootState): HoroscopeState =>\n  rootState[HOROSCOPE_FEATURE_KEY];\n\nconst getUserZodiacItem = (\n  rootState: RootState\n): AdhZodiacSignItem | undefined => getHoroscopeState(rootState).zodiacSignItem;\n\nconst getUserZodiac = (rootState: RootState): AdhZodiacSign | undefined =>\n  getUserZodiacItem(rootState)?.zodiacSign;\n\nconst getUserHoroscope = (rootState: RootState): AdhHoroscope | undefined =>\n  getHoroscopeState(rootState).horoscope;\n\nconst getHoroscopeLoadingStatus = (rootState: RootState): LoadingStatus =>\n  getHoroscopeState(rootState).loadingStatus;\n\nexport const horoscopeSelectors = {\n  getUserZodiacItem,\n  getUserZodiac,\n  getUserHoroscope,\n  getHoroscopeLoadingStatus,\n};\n```\n\n----------------------------------------\n\nTITLE: Generating an Angular Remote Application with Nx\nDESCRIPTION: Command to create a new Angular remote application using Nx generators, which sets up the project structure and configuration for Module Federation\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/creating-a-remote.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnx g @nx/angular:remote apps\\/angular\\/myremote\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Nx Generate Command\nDESCRIPTION: Shows the basic syntax for using the 'generate' command in Nx CLI. It can be used with a full collection:generator specification or a shorthand version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/cli/generate.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx generate <collection:generator>\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g <generator>\n```\n\n----------------------------------------\n\nTITLE: Plugin Installation Prompt\nDESCRIPTION: Shows the interactive prompt for installing required Nx plugins after importing a project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-10-29-nx-import.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nAdd these Nx plugins to integrate with the tools used in your workspace.\n\n? Which plugins would you like to add? Press <Space> to select and <Enter> to submit. …\n✔ @nx/eslint\n✔ @nx/vite\n✔ @nx/playwright\n```\n\n----------------------------------------\n\nTITLE: Creating React Application with Vite Bundler\nDESCRIPTION: Generates a React application using Vite as the bundler. This configuration automatically sets up Vitest for unit testing unless specified otherwise.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/application-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react:app apps/my-app --bundler=vite\n```\n\n----------------------------------------\n\nTITLE: Generating a Preset Generator with Nx CLI\nDESCRIPTION: This shell command generates a 'preset' generator within an existing Nx plugin project. It requires that the plugin and Nx CLI are already installed. The resulting generator will reside in the specified directory structure, enabling generation of customized Nx workspaces.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/create-preset.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/plugin:generator packages/happynrwl/src/generators/preset\n```\n\n----------------------------------------\n\nTITLE: Configuring @nx/gradle in nx.json\nDESCRIPTION: This JSON snippet shows how to configure the @nx/gradle plugin in the nx.json file, including custom target names for test, classes, build, and CI tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/gradle/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/gradle\",\n      \"options\": {\n        \"testTargetName\": \"test\",\n        \"classesTargetName\": \"classes\",\n        \"buildTargetName\": \"build\",\n        \"ciTargetName\": \"test-ci\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating CI Workflow Configuration with Nx\nDESCRIPTION: This command generates a CI workflow configuration for your Nx project, helping to set up continuous integration quickly.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/intro/ci-with-nx.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g ci-workflow\n```\n\n----------------------------------------\n\nTITLE: Configure Nx Release in nx.json\nDESCRIPTION: Demonstrates how to configure the `nx release` command within the `nx.json` file. This example shows how to target specific projects for release, excluding others (e.g., 'ignore-me'). The `projects` property in the `release` section allows specifying which projects will be included in the release process.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/manage-releases.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // ... more nx.json config\n  \"release\": {\n    // For example, configures nx release to target all projects\n    // except the one called \"ignore-me\"\n    \"projects\": [\"*\", \"!ignore-me\"]\n    // ... nx release config\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Nx Utility Library with CLI Command\nDESCRIPTION: Command to build the utility library using the Nx CLI. This command compiles and packages the library for use in other projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/templates/ts-packages/lesson-6/packages/util/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnx build util\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Outputs in project.json\nDESCRIPTION: Alternative method of defining build output directories in a project's project.json configuration file\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/how-caching-works.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myapp\",\n  \"targets\": {\n    \"build\": {\n      \"outputs\": [\"dist/dist/myapp\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nx React Project with Standalone Preset\nDESCRIPTION: Command to create a new Nx workspace with a React standalone preset, which allows you to configure your bundler and CSS setup during initialization.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-02-09-setup-react-and-tailwind-the-easy-way.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npx create-nx-workspace reactapp --preset=react-standalone\n```\n\n----------------------------------------\n\nTITLE: Adding Cypress Component Testing Using Nx Generators\nDESCRIPTION: Shell commands to add Cypress component testing configuration to React, Angular, or Next.js projects using respective Nx generators. Optionally supports generating tests for all components.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/cypress/cypress-component-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:cypress-component-configuration --project=your-project\n\nnx g @nx/angular:cypress-component-configuration --project=your-project\n\nnx g @nx/next:cypress-component-configuration --project=your-project\n```\n\n----------------------------------------\n\nTITLE: Configure Storybook Interaction Tests - No Framework\nDESCRIPTION: This command configures Storybook without a specific framework, enabling interaction tests. `project-name` represents the project to configure, and `--interactionTests=true` ensures interaction tests are set up by adding @storybook/addon-interactions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/interaction-tests.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/storybook:configuration project-name --interactionTests=true\n```\n\n----------------------------------------\n\nTITLE: Shared Tailwind Preset Configuration\nDESCRIPTION: Creates a shared Tailwind configuration using CSS variables to allow different applications to provide their own values while maintaining common theme structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-with-angular-projects.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  theme: {\n    colors: {\n      primary: {\n        light: 'var(--primary-light)',\n        DEFAULT: 'var(--primary)',\n        dark: 'var(--primary-dark)',\n      },\n      secondary: {\n        light: 'var(--secondary-light)',\n        DEFAULT: 'var(--secondary)',\n        dark: 'var(--secondary-dark)',\n      },\n      white: 'var(--white)',\n      black: 'var(--black)',\n    },\n    spacing: {\n      sm: 'var(--spacing-sm)',\n      md: 'var(--spacing-md)',\n      lg: 'var(--spacing-lg)',\n      xl: 'var(--spacing-xl)',\n    },\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Converting Projects to Project Crystal\nDESCRIPTION: Generator command to convert existing projects to use Project Crystal features in Nx 19.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-05-08-nx-19-release.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx generate convert-to-inferred\n```\n\n----------------------------------------\n\nTITLE: Creating New Nx Workspace with React Native Preset\nDESCRIPTION: Command to create a new Nx workspace pre-configured for React Native development with a specified app name\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react-native/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest your-workspace-name --preset=react-native --appName=your-app-name\n```\n\n----------------------------------------\n\nTITLE: Required properties example in Nx generator schema\nDESCRIPTION: This JSON example shows how to define required properties within an Nx generator schema. The `required` array specifies that the \"name\" property is mandatory, while the \"type\" property is optional. This ensures that the generator receives the necessary inputs from the user.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"name\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Path in project.json\nDESCRIPTION: This JSON snippet shows how to customize the output path for the build target in the project's `project.json` file. It defines the `outputPath` option, allowing you to specify a custom location for the build output.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"root\": \"apps/my-next-app\",\n  \"sourceRoot\": \"apps/my-next-app/src\",\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/next:build\",\n      \"outputs\": [\"{options.outputPath}\"],\n      \"options\": {\n        \"outputPath\": \"dist/my-next-app\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Basic Nx Executor\nDESCRIPTION: Creates a basic Nx executor named 'build' at the specified path using the @nx/plugin:executor generator\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/plugin/docs/generators/executor-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/plugin:executor tools/my-plugin/src/executors/build.ts\n```\n\n----------------------------------------\n\nTITLE: Generating an Angular Host Application with Nx\nDESCRIPTION: This command uses the Nx generator to create a new Angular host application for Module Federation. It sets up the necessary files and configurations for an Angular-based host.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/creating-a-host.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:host apps/angular/shell\n```\n\n----------------------------------------\n\nTITLE: Configure Cache Directory in nx.json\nDESCRIPTION: This JSON snippet shows how to configure the cache directory in the `nx.json` file.  The `cacheDirectory` property specifies the path to the desired cache location.  This allows you to customize where Nx stores its cache files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/change-cache-location.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"cacheDirectory\": \"/tmp/mycache\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing Cache Input Globs in nx.json\nDESCRIPTION: Shows how to define named inputs for reusable cache input globs, allowing the same exclusion rules to be applied to multiple targets.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasksRunnerOptions\": {\n      ...\n  },\n  \"namedInputs\": {\n    \"noMarkdown\": [\"!{projectRoot}/**/*.md\"]\n  },\n  \"targetDefaults\": {\n    \"build\": {\n      \"inputs\": [\"noMarkdown\", \"^noMarkdown\"]\n    },\n    \"test\": {\n      \"inputs\": [\"noMarkdown\", \"^noMarkdown\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Cloud Personal Access Token via CLI\nDESCRIPTION: Commands to configure a personal access token for Nx Cloud using the nx-cloud CLI. This method allows adding tokens for multiple contexts or instances without manually editing the configuration file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/nx-cloud-cli.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx-cloud configure --personalAccessToken=SOME_ACCESS_TOKEN\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx-cloud configure --personalAccessToken=SOME_ACCESS_TOKEN --nx-cloud-url=https://nx-cloud.my-domain.app\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress Configuration with setupNodeEvents\nDESCRIPTION: Basic example of configuring Cypress with setupNodeEvents function in a TypeScript configuration file. Shows the minimal setup required for e2e testing node events.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/cypress/cypress-setup-node-events.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress';\n\nexport default defineConfig({\n  e2e: {\n    setupNodeEvents(on, config) {\n      // e2e testing node events setup code\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Included Scripts in package.json\nDESCRIPTION: This snippet demonstrates how to specify which scripts from package.json should be used as Nx targets, using the 'includedScripts' property in the project's package.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-library\",\n  \"version\": \"0.0.1\",\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"postinstall\": \"node ./tasks/postinstall\"\n  },\n  \"nx\": {\n    \"includedScripts\": [\"build\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Local Generator Plugin in Nx\nDESCRIPTION: Command to create a local plugin with a generator in the packages/feature directory\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/workspace/workspace-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/plugin:plugin packages/feature\n```\n\n----------------------------------------\n\nTITLE: Generating a Remote with Automatic Host Configuration\nDESCRIPTION: Command to generate a remote application and automatically add it to a specified host application's configuration\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/creating-a-remote.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnx g @nx/react:remote apps\\/react\\/myremote --host=shell\n```\n\n----------------------------------------\n\nTITLE: Viewing Project Tasks with Nx CLI\nDESCRIPTION: Command to display tasks that Nx has detected for a specific project, with output shown in a web interface for better visualization.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx show project angular-store-e2e --web\n```\n\n----------------------------------------\n\nTITLE: Creating Nuxt Application with Vitest\nDESCRIPTION: Command to generate a Nuxt application with Vitest configured as the unit test runner.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nuxt/docs/application-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nuxt:app apps/nested/myapp --unitTestRunner=vitest\n```\n\n----------------------------------------\n\nTITLE: Generating UI Library and Zodiac Sign List Component\nDESCRIPTION: Commands to generate a UI library and a zodiac sign list component in the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnx generate lib ui\nnx generate component zodiac-sign-list --project=ui --export\n```\n\n----------------------------------------\n\nTITLE: Migrating Community Plugins\nDESCRIPTION: This command migrates individual Nx community plugins (assuming they provide migration scripts). It ensures that community plugins are updated to be compatible with the current Nx version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/automate-updating-dependencies.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"nx migrate my-plugin\"\n```\n\n----------------------------------------\n\nTITLE: Create a React Library\nDESCRIPTION: Generates a new React library within an Nx workspace. It creates a new library named 'my-new-lib' within the 'libs' directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react/react-plugin.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:lib libs/my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Define Target Defaults in nx.json for Test\nDESCRIPTION: This snippet demonstrates how to define target defaults within `nx.json`, specifically for the `test` target. It specifies that for all test targets, the inputs should include \"default\", \"^production\", and \"{workspaceRoot}/jest.preset.js\". This allows for consistent configuration of inputs across multiple projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"test\": {\n      \"inputs\": [\"default\", \"^production\", \"{workspaceRoot}/jest.preset.js\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Isolated Webpack Configuration\nDESCRIPTION: Configuration for running webpack with isolated config, requiring manual plugin application in webpack.config.js.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/webpack/docs/webpack-build-executor-examples.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n//...\n\"my-app\": {\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/webpack:webpack\",\n      \"options\": {\n        \"webpackConfig\": \"apps/my-app/webpack.config.js\",\n        \"isolatedConfig\": true\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a React App in Nx Workspace\nDESCRIPTION: Command to build a React application named 'happynrwl' within an Nx workspace. This creates a production-ready build of the app.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-29-the-react-cli-you-always-wanted-but-didnt-know-about.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx build happynrwl\n```\n\n----------------------------------------\n\nTITLE: Serving Host with Specific Dev Remote\nDESCRIPTION: Command to serve a host application with a specific remote application in development mode, enabling Hot Module Replacement (HMR)\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/creating-a-remote.md#2025-04-22_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nnx serve host --devRemotes=myremote\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Cloud Runner for Nx <= 19.6 in JSON\nDESCRIPTION: This snippet demonstrates how to configure the Nx Cloud runner in nx.json for Nx versions 19.6 and below. It sets up the 'tasksRunnerOptions' with the 'nx-cloud' runner and a placeholder Nx Cloud ID.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/config.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"tasksRunnerOptions\": {\n    \"default\": {\n      \"runner\": \"nx-cloud\",\n      \"options\": {\n        \"nxCloudId\": \"SOMEID\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating Angular mount import (v17.2.0-)\nDESCRIPTION: This snippet updates the Angular `mount` import from 'cypress/angular' to '@cypress/angular' for Angular versions lower than v17.2.0, and installs the `@cypress/angular@2` package.  It assumes Cypress is already installed as a dependency.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/src/migrations/update-20-8-0/update-component-testing-mount-imports.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@my-repo/source\",\n  \"dependencies\": {\n    ...\n    \"cypress\": \"^14.2.1\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@my-repo/source\",\n  \"dependencies\": {\n    ...\n    \"cypress\": \"^14.2.1\",\n    \"@cypress/angular\": \"^2.1.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/web (Nx 18+)\nDESCRIPTION: Installs the @nx/web plugin in an Nx workspace. This command ensures the correct version of @nx/web is installed based on the Nx version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/web/web-plugin.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/web\n```\n\n----------------------------------------\n\nTITLE: Configuring SVGR for Next.js\nDESCRIPTION: To enable SVG import as React components in Next.js, adjust the `next.config.js` file to set the `nx.svgr` option to `true`. This configuration ensures compatibility with the asset handling logic in the Next.js framework.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/adding-assets.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nconst nextConfig = {\n  nx: {\n    svgr: true,\n  },\n};\n// ...\nmodule.exports = composePlugins(...plugins)(nextConfig);\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Webpack Plugin\nDESCRIPTION: Configuration for the @nx/webpack plugin in nx.json to infer build and serve targets.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/webpack-config-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"plugins\": [\n  {\n    \"plugin\": \"@nx/webpack/plugin\",\n    \"options\": {\n      \"buildTargetName\": \"build\",\n      \"serveTargetName\": \"serve\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Running Dynamic Federation Development Server in Nx\nDESCRIPTION: Command to serve the dashboard application with login remote in development mode using Dynamic Module Federation\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nnx serve dashboard --devRemotes=login\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog with Nx Release Command\nDESCRIPTION: This command generates a changelog for one or more projects using the Nx release tool. It can optionally push the changes to Github. The [version] parameter is used to specify the version for which the changelog should be generated.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/release.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx release changelog [version]\n```\n\n----------------------------------------\n\nTITLE: Creating New React App with Vite in Nx\nDESCRIPTION: Command to create a new Nx workspace with React and Vite configuration using npx create-nx-workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/vite/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest --preset=react-standalone --bundler=vite\n```\n\n----------------------------------------\n\nTITLE: Connecting to Nx Cloud via Shell Command\nDESCRIPTION: This shell command shows how to connect a project to Nx Cloud for distributed caching and task execution features after adding the @nrwl/nx-cloud package to the root-level package.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-05-25-lerna-used-to-walk-now-it-can-fly.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx connect-to-nx-cloud\n```\n\n----------------------------------------\n\nTITLE: Card Component Template\nDESCRIPTION: HTML template for the card component with Tailwind CSS styling\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"h-full flex flex-col p-lg bg-secondary-light shadow-md hover:shadow-lg\">\n  <div class=\"pb-md text-lg font-bold\">{{ title }}</div>\n  <p class=\"mb-xl flex-1\">\n    <ng-content></ng-content>\n  </p>\n  <a\n    class=\"py-sm px-md bg-primary-dark hover:bg-primary text-white flex self-end\"\n    href=\"{{ url }}\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n  >\n    Show me!\n  </a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running Nx Generators and Schematics from CLI\nDESCRIPTION: Commands showing how to run both Nx generators and Angular schematics using the Nx CLI. The CLI automatically determines the implementation type and invokes it using the appropriate machinery.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/nx-devkit-angular-devkit.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx g mygenerator params\nnx g myschematic params\n```\n\n----------------------------------------\n\nTITLE: Running Build Tasks with Remote Caching\nDESCRIPTION: Commands to demonstrate Nx Cloud's remote caching feature by building projects and then retrieving cached results.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/tutorial/github-actions.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx run-many -t build\nrm -rf .nx/cache\npnpm nx run-many -t build\n```\n\n----------------------------------------\n\nTITLE: Setting Up Serve Task Pipeline\nDESCRIPTION: Enhanced nx.json configuration that adds a serve task dependency to ensure build runs before serve.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/typescript-packages.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"./node_modules/nx/schemas/nx-schema.json\",\n  \"targetDefaults\": {\n    \"serve\": {\n      \"dependsOn\": [\"build\"]\n    },\n    \"build\": {\n      \"dependsOn\": [\"^build\"],\n      \"outputs\": [\"{projectRoot}/dist\"],\n      \"cache\": true\n    },\n    \"typecheck\": {\n      \"cache\": true\n    }\n  },\n  \"defaultBase\": \"main\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GCS Cache Configuration\nDESCRIPTION: JSON configuration for specifying the Google Cloud Storage bucket in nx.json\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/gcs-cache/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gcs\": {\n    \"bucket\": \"my-bucket\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Additional Properties in JSON schema\nDESCRIPTION: This JSON schema demonstrates how to use `additionalProperties: false` to restrict the allowed properties in an object. Only the properties defined within the `properties` object (`number`, `street_name`, `street_type`) are considered valid. Any other property would be considered an error.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"number\": { \"type\": \"number\" },\n    \"street_name\": { \"type\": \"string\" },\n    \"street_type\": { \"enum\": [\"Street\", \"Avenue\", \"Boulevard\"] }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configure GitHub Enterprise Server - JSON\nDESCRIPTION: This JSON snippet configures Nx Release to use a self-hosted GitHub Enterprise Server instance for creating releases. It provides the hostname and optionally overrides the API base URL using the `release.changelog.workspaceChangelog.createRelease` property.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/automate-github-releases.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"changelog\": {\n      \"workspaceChangelog\": {\n        \"createRelease\": {\n          \"provider\": \"github-enterprise-server\",\n          \"hostname\": \"github.example.com\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Module Federation Manifest JSON for Remote Definitions\nDESCRIPTION: JSON configuration file that defines the URLs for remote modules in the micro-frontend architecture. This file is used at runtime to determine where remote applications are deployed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"login\": \"http://localhost:4201\"\n}\n```\n\n----------------------------------------\n\nTITLE: Serving the .NET application\nDESCRIPTION: This command uses the `nx serve` command to start the `my-api` application. It compiles and hosts the API for local development and testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-dotnet.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnx serve my-api\n```\n\n----------------------------------------\n\nTITLE: Releasing a Single Project with Nx CLI\nDESCRIPTION: Command to create a new patch version release for a specific project in an Nx workspace. This demonstrates Nx's support for independently released projects within a monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-12-20-nx-17-2-release.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx release version patch --project=my-project\n```\n\n----------------------------------------\n\nTITLE: Registering a Task Sync Generator in project.json\nDESCRIPTION: This JSON configuration registers the 'my-plugin:my-sync-generator' as a sync generator for the 'build' target within the 'project.json' file. This ensures that the specified generator will execute before the build task runs.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/create-sync-generator.md#2025-04-22_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      \"syncGenerators\": [\"my-plugin:my-sync-generator\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Registry for Version Step in Project Configuration - JSON\nDESCRIPTION: This snippet shows how to set a custom registry for the version step of Nx Release in the `project.json` file. This is only needed if `version.currentVersionResolver` is set to 'registry', enabling Nx Release to check the specified registry for the current package version.  The `tag` option is also available for specifying the tag.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/configure-custom-registries.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"pkg-5\",\n  \"sourceRoot\": \"...\",\n  \"targets\": {\n    ...\n  },\n  \"release\": {\n    \"version\": {\n      \"currentVersionResolverMetadata\": {\n        \"registry\": \"https://my-unique-registry.com/\",\n        \"tag\": \"next\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating an Angular Application with Nx\nDESCRIPTION: Demonstrates how to use the Nx generate command to create a new Angular application in the 'apps' directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/cli/generate.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/angular:app apps/myapp\n```\n\n----------------------------------------\n\nTITLE: Combining onlyDependOnLibsWithTags and notDependOnLibsWithTags in Nx\nDESCRIPTION: This snippet demonstrates how to combine both onlyDependOnLibsWithTags and notDependOnLibsWithTags rules to create more precise dependency restrictions. It shows how to allow certain types of projects while explicitly banning others.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/ban-dependencies-with-tags.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"sourceTag\": \"type:react\",\n  \"onlyDependOnLibsWithTags\": [\n    \"type:react\",\n    \"type:utils\",\n    \"type:animation\",\n    \"type:model\"\n  ],\n  // make sure no `angular` code ends up being referenced by react projects\n  \"notDependOnLibsWithTags\": [\"type:angular\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing nx-cloud package for Nx <= 19.6\nDESCRIPTION: This snippet shows how to add the nx-cloud package as a devDependency in package.json. This is required for using personal access tokens and Nx Cloud ID with Nx versions 19.6 and below.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/recipes/personal-access-tokens.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"nx-cloud\": \"latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes in React Router\nDESCRIPTION: Example of how to configure routes in a React Router application, adding a new 'contact' route to the routes.tsx file using React Router's route configuration API.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-router.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type RouteConfig, index, route } from \"@react-router/dev/routes\";\n\nexport default [\n  index('./app.tsx'),\n  route('about', './routes/about.tsx')\n  route('contact', './routes/contact.tsx')\n  ] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Configuring @nx/gradle Plugin\nDESCRIPTION: JSON configuration for the Nx Gradle plugin in nx.json, showing how to customize target names for test, build, and CI operations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/gradle/gradle-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/gradle\",\n      \"options\": {\n        \"testTargetName\": \"test\",\n        \"classesTargetName\": \"classes\",\n        \"buildTargetName\": \"build\",\n        \"ciTargetName\": \"test-ci\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Project Configuration\nDESCRIPTION: This JSON snippet shows the configuration of a Next.js project within an Nx workspace. It defines the 'build' target using the '@nx/next:build' executor, specifies output paths, and sets up default and production configurations. The outputPath option defines where the built application is placed.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/build-next-executor-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"//...\\n{\\n  \"name\": \"acme\",\\n  \"$schema\": \"node_modules/nx/schemas/project-schema.json\",\\n  \"sourceRoot\": \".\",\\n  \"projectType\": \"application\",\\n  \"targets\": {\\n    //...\\n    \"build\": {\\n      \"executor\": \"@nx/next:build\",\\n      \"outputs\": [\"{options.outputPath}\"],\\n      \"defaultConfiguration\": \"production\",\\n      \"options\": {\\n        \"outputPath\": \"dist/acme\"\\n      }\\n    }\\n    //...\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Generating Nx Library for Models\nDESCRIPTION: Command to generate a new library for shared models in the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx generate lib models\n```\n\n----------------------------------------\n\nTITLE: Passing Environment Variables to Nx Cloud Agents\nDESCRIPTION: Shows how to pass specific environment variables to Nx Cloud agents using the --with-env-vars flag on the nx-cloud start-ci-run command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnx-cloud start-ci-run --distribute-on=\"8 linux-medium-js\" --with-env-vars=\"VAR1,VAR2\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Lit Component in TypeScript\nDESCRIPTION: TypeScript code for creating a Lit component with a custom element, properties, and rendering logic.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-lit.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  @property()\n  version = 'STARTING';\n\n  render() {\n    return html`\n      <p>Welcome to the Lit tutorial!</p>\n      <p>This is the ${this.version} code.</p>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest Test Task in Nx\nDESCRIPTION: This snippet sets up an inferred test task for projects that utilize Vitest. It integrates the Vitest plugin into the Nx configuration for running tests. Vitest must be installed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/common-tasks.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\"plugins\":[{\"plugin\":\"@nx/vite/plugin\",\"options\":{\"testTargetName\":\"test\"}}]}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nx Workspace for Expo\nDESCRIPTION: Command to create a new Nx workspace with Expo. This initializes an integrated repo containing projects that depend on each other through standard import statements with a single version of dependencies at the root.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-24-step-by-step-guide-to-creating-an-expo-monorepo-with-nx.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n✔ Where would you like to create your workspace? · create-nx-monorepo\n✔ Which stack do you want to use? · react\n✔ What framework would you like to use? · expo\n✔ Application name · cats\n✔ Enable distributed caching to make your CI faster · No\n```\n\n----------------------------------------\n\nTITLE: Running Lint to Check Module Boundary Rules\nDESCRIPTION: This shell command demonstrates how to run the lint task for all projects in the Nx workspace, which will check for module boundary rule violations among other linting rules.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/11-module-boundaries/content.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many -t lint\n```\n\n----------------------------------------\n\nTITLE: Querying Project Relationships with Nx MCP in TypeScript\nDESCRIPTION: Example of using Nx MCP tools to analyze project dependencies related to a specific project in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-04-15-nx-mcp-vscode-copilot.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Example query:\n'Use the provided Nx MCP tools to figure out which order projects\nare related to the data-access-order project';\n```\n\n----------------------------------------\n\nTITLE: Creating a Shared Tailwind CSS Preset Configuration\nDESCRIPTION: This JavaScript snippet defines a shared Tailwind CSS configuration to be used as a preset across different projects in the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  theme: {\n    colors: {\n      primary: {\n        light: '#5eead4',\n        DEFAULT: '#14b8a6',\n        dark: '#0f766e',\n      },\n      secondary: {\n        light: '#bae6fd',\n        DEFAULT: '#0ea5e9',\n        dark: '#0369a1',\n      },\n      white: '#ffffff',\n      black: '#000000',\n    },\n    spacing: {\n      sm: '0.5rem',\n      md: '1rem',\n      lg: '1.5rem',\n      xl: '2rem',\n    },\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Library in Nx\nDESCRIPTION: Generate a new JavaScript library named 'hello' using Nx CLI, with Jest as the unit test runner.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/federate-a-module.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/js:library hello --unitTestRunner=jest\n```\n\n----------------------------------------\n\nTITLE: Importing Buildable Library in TypeScript Module\nDESCRIPTION: Example of importing and using a buildable library in a TypeScript module, showing how to combine outputs from different libraries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-29-new-nx-experience.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildablelib } from '@tsmono/buildablelib';\n\nexport function mytslib(): string {\n  return buildablelib() + ' - mytslib';\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Configuration\nDESCRIPTION: Key parts of the generated GitHub Actions workflow file, including setup steps and the Nx affected command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/tutorial/github-actions.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\n# ...\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          filter: tree:0\n\n      - uses: pnpm/action-setup@v4\n        with:\n          version: 9\n\n      # This enables task distribution via Nx Cloud\n      # Run this command as early as possible, before dependencies are installed\n      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun\n      # Connect your workspace by running \"nx connect\" and uncomment this line to enable task distribution\n      # - run: pnpm dlx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\" --stop-agents-after=\"e2e-ci\"\n\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n          cache: 'pnpm'\n\n      - run: pnpm install --frozen-lockfile\n      - uses: nrwl/nx-set-shas@v4\n\n      # Prepend any command with \"nx-cloud record --\" to record its logs to Nx Cloud\n      # - run: pnpm exec nx-cloud record -- echo Hello World\n      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected\n      - run: pnpm exec nx affected -t lint test build e2e-ci\n```\n\n----------------------------------------\n\nTITLE: Generated Package.json Configuration\nDESCRIPTION: Example of the generated package.json file showing the exports configuration for both ESM and CommonJS formats.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/compile-multiple-formats.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-awesome-lib\",\n  \"version\": \"0.0.1\",\n  \"type\": \"commonjs\",\n  \"main\": \"./index.cjs.js\",\n  \"typings\": \"./src/index.d.ts\",\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \".\": {\n      \"import\": \"./index.esm.js\",\n      \"default\": \"./index.cjs.js\"\n    },\n    \"./foo\": {\n      \"import\": \"./foo.esm.js\",\n      \"default\": \"./foo.cjs.js\"\n    }\n  },\n  \"module\": \"./index.esm.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using browserTarget for sharing style configurations in Angular Storybook\nDESCRIPTION: Example showing how to configure styles once in the build-storybook target and reference it via browserTarget, avoiding duplication of style configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/angular-configuring-styles.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n    \"storybook\": {\n      \"executor\": \"@storybook/angular:start-storybook\",\n      \"options\": {\n         ...\n         \"browserTarget\": \"my-project:build-storybook\"\n      },\n      ...\n    },\n    \"build-storybook\": {\n      \"executor\": \"@storybook/angular:build-storybook\",\n       ...\n      \"options\": {\n         ...\n        \"browserTarget\": \"my-project:build-storybook\",\n        \"styles\": [\"some-styles.css\"],\n        \"stylePreprocessorOptions\": {\n          \"includePaths\": [\"some-style-paths\"]\n        }\n      },\n     ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Previewing First Release with Nx\nDESCRIPTION: This command demonstrates how to use the nx release command for the first time, using the --first-release and --dry-run flags. The --first-release flag is necessary for the initial release, and --dry-run allows for a preview of the release process.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/3-manage-releases/1-manage-releases/content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx release --first-release --dry-run\n```\n\n----------------------------------------\n\nTITLE: Create a React Application\nDESCRIPTION: Generates a new React application within an Nx workspace.  It creates a new application named 'my-new-app' within the 'apps' directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react/react-plugin.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:app apps/my-new-app\n```\n\n----------------------------------------\n\nTITLE: Executing Nx Migration Command\nDESCRIPTION: Command to upgrade existing workspace tools, packages, and source code to the latest version using nx migrate.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/nx-and-angular-cli.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\n----------------------------------------\n\nTITLE: Generating CI Workflow File for Nx Projects\nDESCRIPTION: This command generates a CI workflow file for GitHub Actions in an Nx project. It creates a .github/workflows/ci.yml file with a pipeline for running lint, test, build, and e2e tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/3r-fast-ci/3-create-ci-workflow/content.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate ci-workflow --ci=github\n```\n\n----------------------------------------\n\nTITLE: Nx Console Run Command Workflow\nDESCRIPTION: Step-by-step process for executing Nx project targets using the Command Palette, including project selection, target selection, and option customization\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/console-run-command.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nNx: Run\nNx: Run Target\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook for Nx <18\nDESCRIPTION: Command to install Storybook package for Nx versions below 18.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/storybook/plugin-overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/storybook\n```\n\n----------------------------------------\n\nTITLE: Creating New Angular Rspack Workspace with Nx CLI\nDESCRIPTION: This command creates a new Nx workspace with an Angular Rspack project. It guides the user through a series of prompts to configure the project settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-04-14-scaffold-angular-rspack-applications.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-nx-workspace myorg\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with Type Information in Next.js\nDESCRIPTION: This snippet demonstrates updating the ESLint configuration to include a rule that requires TypeScript type-checking. It introduces `parserOptions.project` to point to the project's TypeScript configuration files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/eslint.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"plugin:@nx/react\", \"../../.eslintrc.json\"],\n  \"ignorePatterns\": [\"!**/*\"],\n  \"overrides\": [\n    {\n      \"files\": [\"*.ts\", \"*.tsx\", \"*.js\", \"*.jsx\"],\n      \"rules\": {\n        // This rule requires the TypeScript type checker to be present when it runs\n        \"@typescript-eslint/await-thenable\": \"error\"\n      }\n    },\n    {\n      \"files\": [\"*.ts\", \"*.tsx\"],\n      \"rules\": {}\n    },\n    {\n      \"files\": [\"*.js\", \"*.jsx\"],\n      \"rules\": {}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating new React application with Nx\nDESCRIPTION: Command to generate a new React application named 'demo' using the Nx React plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/2-use-preset/_solution/react-monorepo/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx g @nx/react:app demo\n```\n\n----------------------------------------\n\nTITLE: Visualizing Affected Projects in Nx Graph\nDESCRIPTION: Command to open the Nx dependency graph visualization with affected projects highlighted, providing a visual understanding of impact analysis.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx graph --affected\n```\n\n----------------------------------------\n\nTITLE: Executing Nx Release Plan Check Command\nDESCRIPTION: Command to verify that all affected projects have valid version plans. This ensures proper versioning strategy before releases.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/release.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx release plan:check\n```\n\n----------------------------------------\n\nTITLE: Root tsconfig.base.json Configuration - JSONC\nDESCRIPTION: This JSONC snippet shows the necessary compiler options for TypeScript project references in the root tsconfig.base.json file, ensuring correct build behavior across linked projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/typescript-project-linking.md#2025-04-22_snippet_7\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // Required compiler options\n    \"composite\": true,\n    \"declaration\": true,\n    \"declarationMap\": true\n    // Other options...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serve Angular Rspack Application\nDESCRIPTION: This command serves the Angular application built with Rspack. For CSR applications, it defaults to port 4200. For SSR applications, it defaults to port 4000. Hot Module Replacement (HMR) is enabled by default.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/getting-started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx serve myapp\n```\n\n----------------------------------------\n\nTITLE: Generating Web App with Webpack in Nx\nDESCRIPTION: This command generates a new Web application configured to use Webpack in an existing Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/webpack/documents/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/web:app apps/my-app --bundler=webpack\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Routes with NgRx State\nDESCRIPTION: Implementation of feature routes with NgRx state providers, showing how to configure lazy-loaded routes with associated state management.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-02-21-using-ngrx-standalone-apis-with-nx.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Route } from '@angular/router';\nimport { FeatureUsersComponent } from './feature-users/feature-users.component';\nimport { provideStore, provideState } from '@ngrx/store';\nimport { provideEffects } from '@ngrx/effects';\nimport * as fromUsers from './+state/users.reducer';\nimport { UsersEffects } from './+state/users.effects';\n\nexport const featureUsersRoutes: Route[] = [\n  {\n    path: '',\n    component: FeatureUsersComponent,\n    providers: [\n      provideState(fromUsers.USERS_FEATURE_KEY, fromUsers.usersReducer),\n      provideEffects(UsersEffects),\n    ],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Vite Proxy Configuration\nDESCRIPTION: Proxy configuration for handling CORS in Vite-based applications (Vue/React) during development.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-11-14-handling-cors.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  server: {\n    proxy: {\n      '/api': {\n        target: 'http://localhost:3333',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Remote Todo Application in Nx Angular\nDESCRIPTION: Command to generate a new remote application that connects to the employee host application using Dynamic Federation\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:remote apps/todo --host=employee\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Inputs at Project Level\nDESCRIPTION: Configure cache input rules specific to an individual project, allowing fine-grained control over caching behavior\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/how-caching-works.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"some-project\",\n  \"targets\": {\n    \"build\": {\n      \"inputs\": [\"!{projectRoot}/**/*.md\"],\n      ...\n    },\n    \"test\": {\n      \"inputs\": [...]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SWC Compiler Commands\nDESCRIPTION: Commands for creating and converting libraries to use the SWC compiler.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/js/js-plugin.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/js:lib libs/my-swc-lib --bundler=swc\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/js:convert-to-swc my-buildable-lib\n```\n\n----------------------------------------\n\nTITLE: Running Static Server for E2E Testing\nDESCRIPTION: Command to serve static files for E2E testing of a Nuxt application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/nuxt/nuxt-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx serve-static my-nuxt-app-e2e\n```\n\n----------------------------------------\n\nTITLE: List Gradle Projects (Shell)\nDESCRIPTION: This command lists all projects within the Gradle workspace. It utilizes the `projects` task provided by Gradle to display the project structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew projects\n```\n\n----------------------------------------\n\nTITLE: Migrated Storybook Configuration for Angular Projects\nDESCRIPTION: This code snippet shows an example of a migrated .storybook/main.js file for an Angular project using Storybook 8. It includes the necessary configuration for stories, addons, and the Angular framework.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/migrate-8-generator-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n  stories: ['../src/app/**/*.@(mdx|stories.@(js|jsx|ts|tsx)'],\n  addons: ['@storybook/addon-essentials'],\n  framework: {\n    name: '@storybook/angular',\n    options: {},\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Generating Conformance Rule using Nx CLI Command\nDESCRIPTION: This command generates a new conformance rule using the Nx CLI. It prompts the user for various parameters concerning the rule, including its name, directory, category, and reporter type.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/conformance/create-conformance-rule.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnx g @nx/conformance:create-rule\n\nNX  Generating @nx/conformance:create-rule\n\n✔ What is the name of the rule? · local-conformance-rule-example\n✔ Which directory do you want to create the rule directory in? · packages/my-plugin/local-conformance-rule\n✔ What category does this rule belong to? · security\n✔ What reporter do you want to use for this rule? · project-reporter\n✔ What is the description of the rule? · an example of a conformance rule\nCREATE packages/my-plugin/local-conformance-rule/local-conformance-rule-example/index.ts\nCREATE packages/my-plugin/local-conformance-rule/local-conformance-rule-example/schema.json\n```\n\n----------------------------------------\n\nTITLE: Running Nx Migration Commands\nDESCRIPTION: Shell commands for updating Nx and running migrations to the latest version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-08-01-nx-19-5-update.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\nnpx nx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for Multiple Format Library Packaging in Nx\nDESCRIPTION: Project configuration using @nx/rollup:rollup executor to build a TypeScript library with both ESM and CJS formats, while maintaining additional entry points and automatically generating the exports field.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-09-06-nx-16-8-release.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// packages/my-awesome-lib/project.json\n{\n  \"name\": \"my-awesome-lib\",\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/rollup:rollup\",\n      ...\n      \"options\": {\n        \"main\": \"packages/my-awesome-lib/src/index.ts\",\n        ...\n        \"format\": [\"esm\", \"cjs\"],\n        \"additionalEntryPoints\": [\"packages/my-awesome-lib/src/foo.ts\"],\n        \"generateExportsField\": true\n      },\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Lint File Patterns\nDESCRIPTION: Project configuration showing how to include package.json in the lint file patterns for dependency checking\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/eslint-plugin/documents/dependency-checks.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"targets\": {\n    \"lint\": {\n      \"executor\": \"@nx/eslint:lint\",\n      \"outputs\": [\"{options.outputFile}\"],\n      \"options\": {\n        \"lintFilePatterns\": [\n          \"libs/my-lib/**/*.{ts,tsx,js,jsx}\",\n          \"libs/my-lib/package.json\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Button Component Example\nDESCRIPTION: This React component defines a simple button that increments a counter when clicked. The `useState` hook is used to manage the count. The `handleClick` function updates the count, and the button displays the number of times it has been clicked.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/interaction-tests.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\n\nexport function Button() {\n  const [count, setCount] = useState(0);\n\n  const handleClick = () => {\n    setCount(count + 1);\n  };\n\n  return (\n    <button role=\"button\" onClick={handleClick}>\n      You've clicked me {count} times\n    </button>\n  );\n}\n\nexport default Button;\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: These commands run unit tests for a Next.js application and a library. They utilize the configured test runner (e.g., Jest) to execute the tests and provide feedback on code correctness.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n\"nx test my-new-app\\nnx test my-new-lib\"\n```\n\n----------------------------------------\n\nTITLE: Generator Schema Definition\nDESCRIPTION: This JSON code defines the schema for the generator. It specifies the `name` property as a required string, provides a description, and sets a default value sourced from the command-line arguments. The `cli` property is set to `nx` to indicate that this generator uses `@nx/devkit`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/local-generators.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": \"nx\",\n  \"id\": \"test\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"description\": \"Library name\",\n      \"$default\": {\n        \"$source\": \"argv\",\n        \"index\": 0\n      }\n    }\n  },\n  \"required\": [\"name\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Project with Nx\nDESCRIPTION: JSON configuration for an Angular project using Nx. It defines build, serve, lint, test, and other targets using various executors including Angular Devkit and Nx-specific ones.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-18-architecting-angular-applications.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myshop\",\n  \"sourceRoot\": \"./src\",\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@angular-devkit/build-angular:browser\",\n      \"outputs\": [\"{options.outputPath}\"],\n      \"options\": {\n        \"outputPath\": \"dist/myshop\",\n        \"index\": \"./src/index.html\",\n        \"main\": \"./src/main.ts\",\n        ...\n      },\n      \"configurations\": {...},\n      \"defaultConfiguration\": \"production\"\n    },\n    \"serve\": {\n      \"executor\": \"@angular-devkit/build-angular:dev-server\",\n      ...\n    },\n    ...\n    \"lint\": {\n      \"executor\": \"@nx/eslint:lint\",\n      \"options\": {\n        \"lintFilePatterns\": [\"./src\"]\n      }\n    },\n    \"test\": {\n      \"executor\": \"@nx/jest:jest\",\n      \"outputs\": [\"{workspaceRoot}/coverage/{projectName}\"],\n      \"options\": {\n        \"jestConfig\": \"jest.config.ts\"\n      }\n    },\n    \"serve-static\": {\n      \"executor\": \"@nx/web:file-server\",\n      \"options\": {\n        \"buildTarget\": \"myshop:build\",\n        \"port\": 4200,\n        \"spa\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Azure Storage Configuration in Nx\nDESCRIPTION: JSON configuration in nx.json for setting up Azure Storage container and account details\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/azure-cache/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"azure\": {\n    \"container\": \"mycontainer\",\n    \"accountName\": \"myaccount\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Project Owners in project.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure code ownership within a specific project's project.json file.  It maps file patterns within the project to specific owners. Owners are typically GitHub usernames or team names. This configuration overrides or complements the global configuration in nx.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/powerpack/owners.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"owners\": {\n    \"**/*\": [\"@ahmed\", \"@petra\"],\n    \"package.json\": [\"@ahmed\"]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding dynamic prompts to schema.json for Nx generator\nDESCRIPTION: This JSON schema configures a dynamic prompt for the `type` option in an Nx generator.  It uses the `x-prompt` extension to define a list-based selection, offering users a choice between \"data-access\", \"feature\", and \"state\" library types. The 'name' property is configured to take a default value from the command line arguments, while the 'type' will prompt the user for input if not provided.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://json-schema.org/schema\",\n  \"id\": \"my-generator\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"description\": \"Library name\",\n      \"$default\": {\n        \"$source\": \"argv\",\n        \"index\": 0\n      }\n    },\n    \"type\": {\n      \"type\": \"string\",\n      \"description\": \"Provide the library type\",\n      \"x-prompt\": {\n        \"message\": \"Which type of library would you like to generate?\",\n        \"type\": \"list\",\n        \"items\": [\n          {\n            \"value\": \"data-access\",\n            \"label\": \"Data Access\"\n          },\n          {\n            \"value\": \"feature\",\n            \"label\": \"Feature\"\n          },\n          {\n            \"value\": \"state\",\n            \"label\": \"State Management\"\n          }\n        ]\n      }\n    }\n  },\n  \"required\": [\"name\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Options to ESBuild\nDESCRIPTION: Configuration to provide additional ESBuild-specific options like legal comments handling, banners, and footers. These options are passed directly to the ESBuild API through the esbuildOptions property.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/esbuild/docs/esbuild-examples.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"build\": {\n  \"executor\": \"@nx/esbuild:esbuild\",\n  \"options\": {\n    \"main\": \"<app-root>\",\n    \"tsConfig\": \"<app-root>/tsconfig.app.json\",\n    \"outputPath\": \"dist/<app-root>\",\n    \"esbuildOptions\": {\n      \"legalComments\": \"inline\"\n      \"banner\": {\n        \".js\": \"// banner\"\n      },\n      \"footer\": {\n        \".js\": \"// footer\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nx Graph JSON Configuration for Dependency Visualization\nDESCRIPTION: JSON configuration that defines the projects, dependencies, and affected projects in an Nx workspace. This powers the visual graph representation of the monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projects\": [\n    {\n      \"name\": \"react-store\",\n      \"type\": \"app\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"react-store-e2e\",\n      \"type\": \"e2e\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"inventory\",\n      \"type\": \"app\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"inventory-e2e\",\n      \"type\": \"e2e\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"shared-ui\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"orders\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n\n    {\n      \"name\": \"products\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    }\n  ],\n  \"dependencies\": {\n    \"react-store\": [\n      { \"source\": \"react-store\", \"target\": \"orders\", \"type\": \"static\" },\n      { \"source\": \"react-store\", \"target\": \"products\", \"type\": \"static\" }\n    ],\n    \"react-store-e2e\": [\n      {\n        \"source\": \"react-store-e2e\",\n        \"target\": \"react-store\",\n        \"type\": \"implicit\"\n      }\n    ],\n    \"inventory\": [\n      { \"source\": \"inventory\", \"target\": \"products\", \"type\": \"static\" }\n    ],\n    \"inventory-e2e\": [\n      { \"source\": \"inventory-e2e\", \"target\": \"inventory\", \"type\": \"implicit\" }\n    ],\n    \"shared-ui\": [],\n    \"orders\": [],\n    \"products\": []\n  },\n  \"workspaceLayout\": { \"appsDir\": \"\", \"libsDir\": \"\" },\n  \"affectedProjectIds\": [\n    \"products\",\n    \"inventory\",\n    \"inventory-e2e\",\n    \"react-store\",\n    \"react-store-e2e\"\n  ],\n  \"focus\": null,\n  \"groupByFolder\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Nx in a Gradle Workspace\nDESCRIPTION: Command to add Nx to an existing Gradle workspace. This installs Nx and sets up the necessary configuration files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-04-19-manage-your-gradle.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Update Nx Gradle plugin in nx.json (After)\nDESCRIPTION: This snippet demonstrates the updated configuration in nx.json. The plugins array now includes \"@nx/gradle/plugin-v1\". This change ensures the project uses version 1 of the Gradle plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/gradle/src/migrations/21-0-0/change-plugin-to-v1.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@nx/gradle/plugin-v1\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Tailwind Dependencies with npm\nDESCRIPTION: This snippet shows how to install the required Tailwind dependencies using npm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-in-react.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D tailwindcss@latest postcss@latest autoprefixer@latest\n```\n\n----------------------------------------\n\nTITLE: Serve Target Configuration in project.json\nDESCRIPTION: The detailed serve target configuration for an Angular application. It specifies how to run the dev server with different configurations for development and production environments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"angular-store\",\n  ...\n  \"targets\": {\n    \"serve\": {\n      \"executor\": \"@angular-devkit/build-angular:dev-server\",\n      \"defaultConfiguration\": \"development\",\n      \"options\": {\n        \"buildTarget\": \"angular-store:build\"\n      },\n      \"configurations\": {\n        \"development\": {\n          \"buildTarget\": \"angular-store:build:development\",\n          \"hmr\": true\n        },\n        \"production\": {\n          \"buildTarget\": \"angular-store:build:production\",\n          \"hmr\": false\n        }\n      }\n     },\n     ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Publishable TypeScript Library\nDESCRIPTION: Generates a new publishable TypeScript library using the @nx/js plugin. Includes the --publishable flag to indicate that the library should be prepared for publishing to npm and sets the import path.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/web/web-plugin.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/js:lib libs/my-new-lib \\\n--publishable \\\n--importPath=@myorg/my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Named Inputs in Nx\nDESCRIPTION: Shows the default named inputs configuration that Nx generates for workspaces.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/inputs.md#2025-04-22_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"namedInputs\": {\n    \"default\": [\"{projectRoot}/**/*\", \"sharedGlobals\"], // Default Inputs\n    \"production\": [\"default\", \"!{projectRoot}/jest.config.ts\"], // Production Inputs\n    \"sharedGlobals\": [] // Shared Global Inputs\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using format:check Command in Nx CLI\nDESCRIPTION: Basic usage of the format:check command to check for unformatted files in an Nx workspace. Can be executed using nx directly when installed globally, or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/format-check.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx format:check\n```\n\n----------------------------------------\n\nTITLE: Converting RxJS Observable to Async Iterable (TypeScript)\nDESCRIPTION: This code demonstrates how to convert an RxJS Observable into an async iterable using the `rxjs-for-await` library. This allows you to process the Observable's values using an async iterator in an Nx executor.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/compose-executors.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { of } from 'rxjs';\nimport { eachValueFrom } from 'rxjs-for-await';\n\nexport default async function (opts) {\n  return eachValueFrom(of({ success: true }));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Solid Library\nDESCRIPTION: Update the TypeScript configuration for the library to support Solid JSX syntax and other necessary compiler options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-solid.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../../tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"jsx\": \"preserve\",\n    \"jsxImportSource\": \"solid-js\",\n    \"types\": [\"vitest\"]\n  },\n  \"files\": [],\n  \"include\": [],\n  \"references\": [\n    {\n      \"path\": \"./tsconfig.lib.json\"\n    },\n    {\n      \"path\": \"./tsconfig.spec.json\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Reusable Component in the UI Library\nDESCRIPTION: Command to generate a new component in the shared UI library. This creates a carousel component with TypeScript files and exports it for use in other applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-24-step-by-step-guide-to-creating-an-expo-monorepo-with-nx.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nx/expo:component carousel --project=ui --export\n```\n\n----------------------------------------\n\nTITLE: Creating Version Plan with Nx Release\nDESCRIPTION: Command to create a version plan file that specifies semver bump and changelog entries for projects or groups. Takes an optional bump parameter to specify the version increment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/release.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx release plan [bump]\n```\n\n----------------------------------------\n\nTITLE: Jest Snapshot Testing Example\nDESCRIPTION: Example of implementing snapshot testing with Jest to validate data shapes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/jest/jest-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('SuperAwesomeFunction', () => {\n  it('should return the correct data shape', () => {\n    const actual = superAwesomeFunction();\n    expect(actual).toMatchSnapshot();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating New React Native Workspace with Nx\nDESCRIPTION: Command to create a new Nx workspace pre-configured for React Native development with a specified app name\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react-native/react-native-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest your-workspace-name --preset=react-native --appName=your-app-name\n```\n\n----------------------------------------\n\nTITLE: Create New Nx Workspace with Angular Rspack\nDESCRIPTION: This command initializes a new Nx workspace with an Angular application preconfigured to use Rspack.  It guides the user through a series of prompts to configure the workspace according to their needs. The highlighted lines indicate the prompts where 'angular' and 'rspack' are selected respectively.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-nx-workspace myorg\n```\n\n----------------------------------------\n\nTITLE: Serving Module Federation Host with Remote Applications\nDESCRIPTION: Nx command to serve a Module Federation host application along with its remote applications for development. This enables live updates on remote applications during development.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-12-28-highlights-2023.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx serve host-application --devRemotes=remote-application\n```\n\n----------------------------------------\n\nTITLE: Run Next.js Build with Profiling Flag\nDESCRIPTION: This bash command shows how to enable React profiling during a Next.js production build using the `--profile` flag. The `nx run` command is used to execute the 'build' target with the 'production' configuration and the profile flag.  Profiling allows you to analyze React component performance.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/build-next-executor-examples.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n\"nx run acme:build:production --profile\"\n```\n\n----------------------------------------\n\nTITLE: Show Project Human Readable Details\nDESCRIPTION: Shows project information in a human-readable format\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/show.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnx show project my-app --json false\n```\n\n----------------------------------------\n\nTITLE: Running Builds with Nx\nDESCRIPTION: A shell command to run build tasks across projects using Nx's run-many feature. This allows Nx to be used for specific tasks while other commands remain managed by traditional package managers.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-monorepo.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many -t build\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/js Package in Nx <18\nDESCRIPTION: Command to install the @nx/js package in Nx versions below 18.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/js/js-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/js\n```\n\n----------------------------------------\n\nTITLE: Configure Global Pre-Version Build Command in nx.json\nDESCRIPTION: This configuration adds a global `preVersionCommand` to the `nx.json` file. This command executes the `build` target for all projects using `nx run-many` before the version update process begins. It ensures that all project distribution files are properly built before the version is applied.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/build-before-versioning.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"version\": {\n      \"preVersionCommand\": \"npx nx run-many -t build\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Tailwind Config to Use Shared Preset\nDESCRIPTION: This JavaScript snippet shows how to update the Tailwind CSS configuration in both the application and library to use the shared preset.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createGlobPatternsForDependencies } = require('@nrwl/angular/tailwind');\nconst { join } = require('path');\nconst sharedTailwindConfig = require('../../tailwind.config');\n\nmodule.exports = {\n  presets: [sharedTailwindConfig],\n  content: [\n    join(__dirname, 'src/**/!(*.stories|*.spec).{ts,html}'),\n    ...createGlobPatternsForDependencies(__dirname),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Library with Nx in TypeScript\nDESCRIPTION: This snippet defines a library generator that utilizes the Nx framework to create a new library with specific options such as tags, linter configuration, and more. It modifies the vite configuration to ensure clearMocks is set to true, enhancing testing consistency. The generator also includes utility functions from the Nx devkit for formatting files and running tasks in sequence.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/organization-specific-plugin.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formatFiles, Tree, runTasksInSerial } from '@nx/devkit';\nimport { Linter } from '@nx/eslint';\nimport { libraryGenerator as reactLibraryGenerator } from '@nx/react';\nimport { LibraryGeneratorSchema } from './schema';\n\nexport async function libraryGenerator(\n  tree: Tree,\n  options: LibraryGeneratorSchema\n) {\n  const directory = options.directory || `${options.scope}/${options.name}`;\n\n  const tasks = [];\n  tasks.push(\n    await reactLibraryGenerator(tree, {\n      ...options,\n      tags: `scope:${options.scope}`,\n      directory,\n      linter: Linter.EsLint,\n      style: 'css',\n      unitTestRunner: 'vitest',\n    })\n  );\n\n  updateViteConfiguration(tree, directory);\n  await formatFiles(tree);\n\n  return runTasksInSerial(...tasks);\n}\n\nfunction updateViteConfiguration(tree, directory) {\n  // Read the vite configuration file\n  let viteConfiguration =\n    tree.read(`${directory}/vite.config.ts`)?.toString() || '';\n\n  // Modify the configuration\n  // This is done with a naive search and replace, but could be done in a more robust way using AST nodes.\n  viteConfiguration = viteConfiguration.replace(\n    `globals: true,`,\n    `globals: true,\\n  clearMocks:true,`\n  );\n\n  // Write the modified configuration back to the file\n  tree.write(`${directory}/vite.config.ts`, viteConfiguration);\n}\n\nexport default libraryGenerator;\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript-based Nuxt Application\nDESCRIPTION: Command to generate a Nuxt application using JavaScript instead of TypeScript.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nuxt/docs/application-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nuxt:app apps/myapp --js\n```\n\n----------------------------------------\n\nTITLE: Adding Deploy Script to Package.json\nDESCRIPTION: This snippet shows how to add a deploy script to the package.json file for an application in the Nx monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/10-affected/content.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"deploy\": \"netlify deploy --dir=dist\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nx Migration Scripts\nDESCRIPTION: Command to execute necessary migration scripts after updating Nx dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-12-20-nx-17-2-release.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Package.json Exports Field Configuration for Multiple Entry Points\nDESCRIPTION: Example of the exports field in package.json that defines multiple entry points for a package, allowing consumers to import from the root or specific subpaths like './foo' or './bar'.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-09-06-nx-16-8-release.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \".\": \"./src/index.js\",\n    \"./foo\": \"./src/foo.js\",\n    \"./bar\": \"./src/bar.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Expo Workspace with Nx\nDESCRIPTION: Command to create a new Nx workspace with Expo preset configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/expo/expo-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest --preset=expo --appName=your-app-name\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Build Output Directory in Nx Monorepo\nDESCRIPTION: Vite configuration to change the build output directory for a React application. This affects where compiled files are saved when the build command is run.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  // ...\n  build: {\n    outDir: './build',\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Composition in main.ts\nDESCRIPTION: Example of configuring Storybook Composition by adding refs to the host Storybook's main.ts file. This snippet shows how to reference both local and remote Storybooks with their respective URLs and titles.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/storybook-composition-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/main.ts of our Host Storybook - assuming it's running on port 4400\nimport type { StorybookConfig } from '@storybook/react-vite';\n...\n\nconst config: StorybookConfig = {\n  ...\n  refs: {\n    'one-composed': {\n      title: 'One composed',\n      url: 'http://localhost:4401',\n    },\n    'two-composed': {\n      title: 'Two composed',\n      url: 'http://localhost:4402',\n    },\n    'storybook-website-storybook': {\n      title: 'The Storybook of the Storybook website',\n      url: 'https://master--5ccbc373887ca40020446347.chromatic.com/',\n    },\n  },\n  ...\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: NgRx Signal Store Implementation\nDESCRIPTION: Shows advanced state management using NgRx Signal Store with structured state modifications and dependency injection support.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-16-angular-state-management-2025.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst AppStore = signalStore(\n  withState<Store>({\n    items: [],\n  }),\n  withMethods((state) => ({\n    addToStore(item: StoreItem) {\n      patchState(state, (oldState) => ({\n        ...oldState,\n        items: [...oldState.items, item],\n      }));\n    },\n    removeFromStore(item: StoreItem) {\n      patchState(state, (oldState) => ({\n        ...oldState,\n        items: oldState.items.filter((e) => e.id !== item.id),\n      }));\n    },\n    updateStore(item: StoreItem) {\n      patchState(state, (oldState) => ({\n        ...oldState,\n        items: oldState.items.map((e) =>\n          e.id === item.id ? { ...item, name: 'bar' } : e\n        ),\n      }));\n    },\n  }))\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Router with Lazy-Loaded Domain Features\nDESCRIPTION: Shows how to set up Angular routing to lazy-load components from various domain libraries, demonstrating the application as a composition layer.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-18-architecting-angular-applications.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n...\nexport const appRoutes: Route[] = [\n  {\n    path: 'products',\n    loadComponent: () =>\n      import('@myshop/products-feat-product-list').then(\n        (m) => m.ProductsFeatProductListComponent\n      ),\n  },\n  {\n    path: 'product/:id',\n    loadComponent: () =>\n      import('@myshop/products-feat-product-detail').then(\n        (m) => m.ProductsFeatProductDetailComponent\n      ),\n  },\n  {\n    path: 'reviews',\n    loadComponent: () =>\n      import('@myshop/products-feat-product-reviews').then(\n        (m) => m.ProductsFeatProductReviewsComponent\n      ),\n  },\n  {\n    path: 'orders',\n    loadComponent: () =>\n      import('@myshop/orders-feat-order-history').then(\n        (m) => m.OrdersFeatOrderHistoryComponent\n      ),\n  },\n  {\n    path: 'create-order',\n    loadComponent: () =>\n      import('@myshop/orders-feat-create-order').then(\n        (m) => m.OrdersFeatCreateOrderComponent\n      ),\n  },\n  {\n    path: 'checkout',\n    loadComponent: () =>\n      import('@myshop/checkout-feat-checkout-flow').then(\n        (m) => m.CheckoutFeatCheckoutFlowComponent\n      ),\n  },\n  ...\n  {\n    path: '',\n    redirectTo: 'products',\n    pathMatch: 'full',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Running Nx Commands for Testing and Linting\nDESCRIPTION: These shell commands demonstrate how to run tests and linting for specific projects in an Nx workspace using the Nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/7-share-code/content.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx test angular-store # runs the tests for angular-store\nnpx nx lint inventory # runs the linter on inventory\n```\n\n----------------------------------------\n\nTITLE: Testing Projects with Wildcard and Exclusion in Nx run-many\nDESCRIPTION: Demonstrates how to test all projects ending with '-app' except 'excluded-app' using wildcards and exclusion with run-many.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run-many.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t test --projects=*-app --exclude excluded-app\n```\n\n----------------------------------------\n\nTITLE: Debug/Release Mode Configuration\nDESCRIPTION: Configuration for specifying build mode (Debug/Release) in Xcode configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/build-ios-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"build-ios\": {\n      \"executor\": \"@nx/react-native:build-ios\",\n      \"options\": {\n        \"mode\": \"Release\"\n      }\n    }\n```\n\nLANGUAGE: bash\nCODE:\n```\nnx build-ios <app-name> --mode=Debug\nnx build-ios <app-name> --mode=Release\n```\n\n----------------------------------------\n\nTITLE: Recording Echo Command with Nx Cloud in Bash\nDESCRIPTION: Demonstrates how to record a simple echo command using Nx Cloud. This command prints 'hello world' and records the output in Nx Cloud for easy viewing and sharing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/set-up/record-commands.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx-cloud record -- echo \"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Running Lint with Auto-fix for Circular Dependencies\nDESCRIPTION: Command to run the Nx linter with the --fix flag, which automatically resolves self-circular dependencies and incorrect imports across library boundaries. This saves time when dealing with import issues in large codebases.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-08-what-is-new-in-nx-13-10.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx lint tslib-c --fix\n```\n\n----------------------------------------\n\nTITLE: Configuring Serve Functions Target in Nx Project\nDESCRIPTION: JSON configuration for the 'serve-functions' target in project.json, which uses SAM CLI to build and start a local API for function development.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/node-aws-lambda.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-functions\",\n  ...\n  \"targets\": {\n    ...\n    \"serve-functions\": {\n      \"command\": \"sam build && sam local start-api\"\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Deployment for Affected Projects in Nx\nDESCRIPTION: Command to deploy only the projects affected by recent changes, leveraging Nx's affected command with the deploy target.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx affected -t deploy\n```\n\n----------------------------------------\n\nTITLE: Project Details JSON Output (JSON)\nDESCRIPTION: This JSON snippet represents the structure of a project's details as output by the Nx command. It includes project metadata, available tasks, execution commands, cache settings, and dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-existing-project.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"project\": {\n    \"name\": \"my-workspace\",\n    \"data\": {\n      \"root\": \".\",\n      \"targets\": {\n        \"eslint:lint\": {\n          \"cache\": true,\n          \"options\": {\n            \"cwd\": \".\",\n            \"command\": \"eslint ./src\"\n          },\n          \"inputs\": [\n            \"default\",\n            \"{workspaceRoot}/.eslintrc\",\n            \"{workspaceRoot}/tools/eslint-rules/**/*\",\n            {\n              \"externalDependencies\": [\"eslint\"]\n            }\n          ],\n          \"executor\": \"nx:run-commands\",\n          \"configurations\": {},\n          \"metadata\": {\n            \"technologies\": [\"eslint\"]\n          }\n        },\n        \"next:build\": {\n          \"options\": {\n            \"cwd\": \".\",\n            \"command\": \"next build\"\n          },\n          \"dependsOn\": [\"^build\"],\n          \"cache\": true,\n          \"inputs\": [\n            \"default\",\n            \"^default\",\n            {\n              \"externalDependencies\": [\"next\"]\n            }\n          ],\n          \"outputs\": [\"{projectRoot}/.next\", \"{projectRoot}/.next/!(cache)\"],\n          \"executor\": \"nx:run-commands\",\n          \"configurations\": {},\n          \"metadata\": {\n            \"technologies\": [\"next\"]\n          }\n        },\n        \"dev\": {\n          \"options\": {\n            \"cwd\": \".\",\n            \"command\": \"next dev\"\n          },\n          \"executor\": \"nx:run-commands\",\n          \"configurations\": {},\n          \"metadata\": {\n            \"technologies\": [\"next\"]\n          }\n        },\n        \"start\": {\n          \"options\": {\n            \"cwd\": \".\",\n            \"command\": \"next start\"\n          },\n          \"dependsOn\": [\"build\"],\n          \"executor\": \"nx:run-commands\",\n          \"configurations\": {},\n          \"metadata\": {\n            \"technologies\": [\"next\"]\n          }\n        }\n      },\n      \"sourceRoot\": \".\",\n      \"name\": \"my-workspace\",\n      \"projectType\": \"library\",\n      \"implicitDependencies\": [],\n      \"tags\": []\n    }\n  },\n  \"sourceMap\": {\n    \"root\": [\"package.json\", \"nx/core/package-json-workspaces\"],\n    \"targets\": [\"package.json\", \"nx/core/package-json-workspaces\"],\n    \"targets.eslint:lint\": [\".eslintrc.json\", \"@nx/eslint/plugin\"],\n    \"targets.eslint:lint.command\": [\".eslintrc.json\", \"@nx/eslint/plugin\"],\n    \"targets.eslint:lint.cache\": [\".eslintrc.json\", \"@nx/eslint/plugin\"],\n    \"targets.eslint:lint.options\": [\".eslintrc.json\", \"@nx/eslint/plugin\"],\n    \"targets.eslint:lint.options.cwd\": [\".eslintrc.json\", \"@nx/eslint/plugin\"],\n    \"targets.next:build\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.next:build.command\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.next:build.options\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.next:build.dependsOn\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.next:build.cache\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.next:build.inputs\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.next:build.outputs\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.next:build.options.cwd\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.dev\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.dev.command\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.dev.options\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.dev.options.cwd\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.start\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.start.command\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.start.options\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.start.dependsOn\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"targets.start.options.cwd\": [\"next.config.js\", \"@nx/next/plugin\"],\n    \"sourceRoot\": [\"package.json\", \"nx/core/package-json-workspaces\"],\n    \"name\": [\"package.json\", \"nx/core/package-json-workspaces\"],\n    \"projectType\": [\"package.json\", \"nx/core/package-json-workspaces\"],\n    \"targets.nx-release-publish\": [\n      \"package.json\",\n      \"nx/core/package-json-workspaces\"\n    ],\n    \"targets.nx-release-publish.dependsOn\": [\n      \"package.json\",\n      \"nx/core/package-json-workspaces\"\n    ],\n    \"targets.nx-release-publish.executor\": [\n      \"package.json\",\n      \"nx/core/package-json-workspaces\"\n    ],\n    \"targets.nx-release-publish.options\": [\n      \"package.json\",\n      \"nx/core/package-json-workspaces\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Pipelines for Nx Distributed Task Execution\nDESCRIPTION: This YAML configuration sets up Azure Pipelines for distributed task execution in an Nx project. It defines variables for different build scenarios, creates multiple agent jobs for parallel execution, and configures a main job to orchestrate Nx commands and manage the distributed tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/enterprise/dte/azure-dte.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n  - main\npr:\n  - main\n\nvariables:\n  CI: 'true'\n  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:\n    NX_BRANCH: $(System.PullRequest.PullRequestNumber)\n    TARGET_BRANCH: $[replace(variables['System.PullRequest.TargetBranch'],'refs/heads/','origin/')]\n    BASE_SHA: $(git merge-base $(TARGET_BRANCH) HEAD)\n  ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:\n    NX_BRANCH: $(Build.SourceBranchName)\n    BASE_SHA: $(git rev-parse HEAD~1)\n  HEAD_SHA: $(git rev-parse HEAD)\n\njobs:\n  - job: agents\n    strategy:\n      parallel: 3\n    displayName: Nx Cloud Agent\n    pool:\n      vmImage: 'ubuntu-latest'\n    steps:\n      - checkout: self\n        fetchDepth: 0\n        fetchFilter: tree:0\n        persistCredentials: true\n\n      - script: npm ci\n      - script: npx nx-cloud start-agent\n\n  - job: main\n    displayName: Nx Cloud Main\n    pool:\n      vmImage: 'ubuntu-latest'\n    steps:\n      # Get last successfull commit from Azure Devops CLI\n      - bash: |\n          LAST_SHA=$(az pipelines build list --branch $(Build.SourceBranchName) --definition-ids $(System.DefinitionId) --result succeeded --top 1 --query \"[0].triggerInfo.\\\"ci.sourceSha\\\"\")\n          if [ -z \"$LAST_SHA\" ]\n          then\n            echo \"Last successful commit not found. Using fallback 'HEAD~1': $BASE_SHA\"\n          else\n            echo \"Last successful commit SHA: $LAST_SHA\"\n            echo \"##vso[task.setvariable variable=BASE_SHA]$LAST_SHA\"\n          fi\n        displayName: 'Get last successful commit SHA'\n        condition: ne(variables['Build.Reason'], 'PullRequest')\n        env:\n          AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)\n\n      - script: git branch --track main origin/main\n      - script: npm ci\n      - script: npx nx-cloud start-ci-run --distribute-on=\"manual\" --stop-agents-after=\"e2e-ci\"\n      - script: npx nx-cloud record -- nx format:check --base=$(BASE_SHA) --head=$(HEAD_SHA)\n      - script: npx nx affected --base=$(BASE_SHA) --head=$(HEAD_SHA) -t lint,test,build,e2e-ci --parallel=2 --configuration=ci\n```\n\n----------------------------------------\n\nTITLE: Individual Project tsconfig.json Configuration - JSONC\nDESCRIPTION: This JSONC snippet for an individual project's tsconfig.json shows how it extends the base configuration and includes references to its dependencies, ensuring correct type resolution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/typescript-project-linking.md#2025-04-22_snippet_9\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"extends\": \"../../tsconfig.base.json\",\n  \"files\": [], // intentionally empty\n  \"references\": [\n    // UPDATED BY NX SYNC\n    // All project dependencies\n    {\n      \"path\": \"../utils\"\n    },\n    // This project's other tsconfig.*.json files\n    {\n      \"path\": \"./tsconfig.lib.json\"\n    },\n    {\n      \"path\": \"./tsconfig.spec.json\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Secondary Entry Point with Module\nDESCRIPTION: This snippet demonstrates how to create a secondary entry point named `button` in the `ui` library using Nx. The command uses the `@nx/angular:library-secondary-entry-point` generator, specifying the library and the name of the entry point.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/library-secondary-entry-point-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:library-secondary-entry-point --library=ui --name=button\n```\n\n----------------------------------------\n\nTITLE: Generating Nuxt Component with Nx\nDESCRIPTION: Command to generate a new component for a Nuxt application following Nuxt's auto-import convention. Creates the component in the components directory for automatic importing.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vue/docs/component-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nuxt:component my-app/src/components/my-cmp\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Plugins for Inferred Tasks\nDESCRIPTION: Configuration for Nx plugins that enables automatic task inference from tooling configuration files, with customizable target names.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/run-tasks.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/vite/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"build\",\n        \"testTargetName\": \"test\",\n        \"serveTargetName\": \"serve\",\n        \"previewTargetName\": \"preview\",\n        \"serveStaticTargetName\": \"serve-static\"\n      }\n    },\n    {\n      \"plugin\": \"@nx/eslint/plugin\",\n      \"options\": {\n        \"targetName\": \"lint\"\n      }\n    },\n    {\n      \"plugin\": \"@nx/jest/plugin\",\n      \"options\": {\n        \"targetName\": \"test\"\n      }\n    }\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Products Component in Inventory App\nDESCRIPTION: Imports and renders the Products component from the products library in the inventory app's main component.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Products } from '@react-monorepo/products';\n\nexport function App() {\n  return <Products />;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Running Nx Build with Batch Mode in Shell\nDESCRIPTION: This command demonstrates how to run an Nx build using the batch implementation. The --batch flag enables TypeScript's batch mode for improved performance.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/enable-tsc-batch-mode.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-project --batch\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Monorepo with Nx CLI\nDESCRIPTION: This command creates a new Angular monorepo using the Nx CLI. It sets up the initial project structure with an Angular application and related configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/2-use-preset/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest angular-monorepo --preset=angular-monorepo\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reusable Carousel Component in React Native\nDESCRIPTION: Implementation of a reusable Carousel component using React Native Paper. This component accepts props for image URI, title, and content to display content in a card format.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-24-step-by-step-guide-to-creating-an-expo-monorepo-with-nx.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Card, Title, Paragraph } from 'react-native-paper';\n\nexport interface CarouselProps {\n  imageUri?: string;\n  title?: string;\n  content: string;\n}\n\nexport function Carousel({ imageUri, title, content }: CarouselProps) {\n  return (\n    <Card>\n      {imageUri && <Card.Cover source={{ uri: imageUri }} />}\n      <Card.Content>\n        {title && <Title>{title}</Title>}\n        <Paragraph>{content}</Paragraph>\n      </Card.Content>\n    </Card>\n  );\n}\n\nexport default Carousel;\n```\n\n----------------------------------------\n\nTITLE: Basic Webpack Configuration\nDESCRIPTION: Standard webpack configuration using NxAppWebpackPlugin for basic app setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/webpack-config-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { NxAppWebpackPlugin } = require('@nx/webpack/app-plugin');\nconst { join } = require('path');\n\nmodule.exports = {\n  output: {\n    path: join(__dirname, '../../dist/apps/demo'),\n  },\n  devServer: {\n    port: 4200,\n  },\n  plugins: [\n    new NxAppWebpackPlugin({\n      main: './src/main.ts',\n      tsConfig: './tsconfig.app.json',\n      index: './src/index.html',\n      styles: ['./src/styles.css'],\n      outputHashing: process.env['NODE_ENV'] === 'production' ? 'all' : 'none',\n      optimization: process.env['NODE_ENV'] === 'production',\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests in Nx Workspace\nDESCRIPTION: Command to execute Jest tests for a project named 'happynrwl', with notes about available options like watch mode and test pattern matching.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-29-the-react-cli-you-always-wanted-but-didnt-know-about.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx test happynrwl\n```\n\n----------------------------------------\n\nTITLE: Running Script for All Projects Using exec\nDESCRIPTION: Demonstrates how to use 'nx exec' to run a script located in the project directory for all projects in the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/cli/exec.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx exec -- node ./scripts/some-script.js\n```\n\n----------------------------------------\n\nTITLE: ESLint Config After Update (JavaScript)\nDESCRIPTION: This code snippet shows the updated ESLint configuration file.  It includes the .cjs, .mjs, .cts, and .mts file extensions in the respective overrides for JavaScript and TypeScript. This ensures that these files are correctly linted by ESLint. The highlightLines array focuses on the lines that were changed.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/eslint/src/migrations/update-20-3-0/add-file-extensions-to-overrides.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { FlatCompat } = require('@eslint/eslintrc');\nconst js = require('@eslint/js');\nconst nxEslintPlugin = require('@nx/eslint-plugin');\n\nconst compat = new FlatCompat({\n  baseDirectory: __dirname,\n  recommendedConfig: js.configs.recommended,\n});\n\nmodule.exports = [\n  ...compat\n    .config({\n      extends: ['plugin:@nx/typescript'],\n    })\n    .map((config) => ({\n      ...config,\n      files: ['**/*.ts', '**/*.tsx', '**/*.cts', '**/*.mts'],\n      rules: {\n        ...config.rules,\n      },\n    })),\n  ...compat\n    .config({\n      extends: ['plugin:@nx/javascript'],\n    })\n    .map((config) => ({\n      ...config,\n      files: ['**/*.js', '**/*.jsx', '**/*.cjs', '**/*.mjs'],\n      rules: {\n        ...config.rules,\n      },\n    })),\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Jest Plugin for Automated E2E Task Splitting\nDESCRIPTION: Command to add the Jest plugin, set up inferred tasks, and enable task splitting for Jest tests.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/features/split-e2e-tasks.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/jest\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Svelte Application in Nx\nDESCRIPTION: TypeScript configuration specific to the Svelte application in the Nx workspace, including compiler options and file inclusions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-svelte.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./dist/out-tsc\",\n    \"declaration\": true,\n    \"types\": [\"node\"]\n  },\n  \"include\": [\"src/**/*.ts\", \"src/**/*.svelte\"],\n  \"exclude\": [\"jest.config.ts\", \"src/**/*.spec.ts\", \"src/**/*.test.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing view-logs Command in Nx CLI\nDESCRIPTION: This command enables viewing and interacting with logs via Nx Cloud's advanced analytic UI. It connects the workspace to Nx Cloud and uploads recent run details (metrics only, not artifacts) to assist with debugging.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/view-logs.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx view-logs\n```\n\n----------------------------------------\n\nTITLE: Target Defaults for Angular Application in nx.json\nDESCRIPTION: Configuration for nx.json to set up target defaults for the @nx/angular:application executor, enabling incremental builds for all projects using this executor without individual configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/setup-incremental-builds-angular.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"@nx/angular:application\": {\n      \"dependsOn\": [\"^build\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Buildable Package Configuration\nDESCRIPTION: Example package.json configuration for a buildable project with compiled output paths.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/js/js-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@acme/pkg1\",\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"default\": \"./dist/index.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CI Access Token for Nx >= 17 in JSON\nDESCRIPTION: This snippet demonstrates how to configure the CI Access Token in nx.json for Nx versions 17 and above. It sets the 'nxCloudAccessToken' property with a placeholder value.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/config.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nxCloudAccessToken\": \"SOMETOKEN\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Application with Custom Tags\nDESCRIPTION: Illustrates how to generate a Vue application with custom tags for linting and organization purposes, adding scope and type classifications.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vue/docs/application-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/vue:app apps/my-app --tags=scope:admin,type:ui\n```\n\n----------------------------------------\n\nTITLE: Adding Cypress Component Testing for React Projects\nDESCRIPTION: Command to add Cypress component testing support to a React-based project in Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-08-02-nx-14-5-cypess-v10-output-globs-linter-perf-react-tailwind-support.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nrwl/react:cypress-component-configuration --project=my-react-project --generate-tests\n```\n\n----------------------------------------\n\nTITLE: Running Nx Watch with NPX Command\nDESCRIPTION: Command showing how to run the Nx watch feature using NPX, using the -c flag to properly handle environment variables in the command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/workspace-watching.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx -c 'nx watch --all -- echo \\$NX_PROJECT_NAME'\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Plan Ignore Patterns in Nx\nDESCRIPTION: Configuration example showing how to ignore specific file patterns (like test files) when checking for version plans in Nx release system. Uses the versionPlans configuration object with ignorePatternsForPlanCheck property.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/file-based-versioning-version-plans.md#2025-04-22_snippet_8\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"release\": {\n    \"versionPlans\": {\n      \"ignorePatternsForPlanCheck\": [\"**/*.spec.ts\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create a React Hook\nDESCRIPTION: Generates a new React hook within an existing library. The hook is created in the specified path within the library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react/react-plugin.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:hook libs/my-new-lib/src/lib/my-new-hook\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependent Tasks Outputs in Nx\nDESCRIPTION: Shows how to include outputs from dependent tasks in the Nx cache hash computation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/inputs.md#2025-04-22_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n\"inputs\": [\n  { \"dependentTasksOutputFiles\": \"**/*.d.ts\" },\n  { \"dependentTasksOutputFiles\": \"**/*.d.ts\", \"transitive\": true }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a new Nx Angular workspace with Playwright\nDESCRIPTION: This command creates a new Nx Angular workspace with Playwright as the default E2E testing framework.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-17-modern-angular-testing-with-nx.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest --preset=angular-monorepo --appName=my-app\n```\n\n----------------------------------------\n\nTITLE: Updating Nx Dependencies\nDESCRIPTION: Command to update Nx workspace dependencies and code to the latest version\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-10-14-whats-new-in-nx-15.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/angular (Nx 18+)\nDESCRIPTION: This command installs the @nx/angular package for Nx version 18 and above. It ensures that the correct version of the Angular plugin is installed, which is crucial for avoiding compatibility issues within the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/angular/angular-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"nx add @nx/angular\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Federation for Host Application in TypeScript\nDESCRIPTION: Basic configuration file for a Module Federation host application that references remote applications. The config defines the host name and specifies the remote applications it will connect to.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/faster-builds.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ModuleFederationConfig } from '@nx/webpack';\n\nexport const config: ModuleFederationConfig = {\n  name: 'host',\n  remotes: ['shop', 'cart', 'about'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Ad-hoc Environment Variable Setting on Windows (cmd.exe)\nDESCRIPTION: Shows how to set an environment variable within the Windows cmd.exe before running an Nx command. The command uses 'set' to assign 'NX_PUBLIC_API_URL' and executes the build command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/define-environment-variables.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nset \"NX_PUBLIC_API_URL=http://localhost:3333\" && nx build myapp\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Nx CLI\nDESCRIPTION: Command for executing unit tests for the graph-migrate library using Jest test runner through the Nx CLI\nSOURCE: https://github.com/nrwl/nx/blob/master/graph/migrate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx test graph-migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Executors in JSON - JSON\nDESCRIPTION: This snippet shows how to configure executors for building and testing an application within a project.json file. The targets 'build' and 'test' utilize specific executors from Nx plugins.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/executors-and-configurations.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"root\": \"apps/cart\",\n  \"sourceRoot\": \"apps/cart/src\",\n  \"projectType\": \"application\",\n  \"generators\": {},\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/webpack:webpack\",\n      \"options\": {\n        \"outputPath\": \"dist/apps/cart\",\n        ...\n      }\n    },\n    \"test\": {\n      \"executor\": \"@nx/jest:jest\",\n      \"options\": {\n        ...\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Story Generation with Path Exclusions\nDESCRIPTION: Command demonstrating how to generate stories while excluding specific paths and file patterns from story generation.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/stories-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react:stories --name=ui --ignorePaths=libs/ui/src/not-stories/**,**/**/src/**/*.other.*\n```\n\n----------------------------------------\n\nTITLE: CSS template for theme (CSS)\nDESCRIPTION: This snippet shows how to conditionally set the background and text color of the `.App-header` based on the 'mode' option passed to the generator. It uses template syntax to inject the correct color values.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-10-create-your-own-create-react-app-cli.md#_snippet_11\n\nLANGUAGE: CSS\nCODE:\n```\n.App-header {\n  background-color: <%= mode === 'dark' ? '#282c34' : 'white' %>;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: <%= mode === 'dark' ? 'white' : '#282c34' %>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Published Nx Plugin with nx add Command\nDESCRIPTION: Command to install a published Nx plugin using the nx add utility. This example shows how to add the nx-cfonts plugin to your workspace after it has been published to npm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/publish-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add nx-cfonts\n```\n\n----------------------------------------\n\nTITLE: Configuring Inferred Tasks in nx.json\nDESCRIPTION: JSON configuration to ensure inferred tasks are enabled in nx.json for upgraded Nx workspaces.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/features/split-e2e-tasks.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  // turned on by default; just make sure it is not set to false\n  \"useInferencePlugins\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Final ESLint Configuration with TypeScript Project Setup\nDESCRIPTION: This snippet shows the final ESLint configuration after adding `parserOptions.project`. It allows rules that require type information to function correctly while linting TypeScript files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/eslint.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"plugin:@nx/react\", \"../../.eslintrc.json\"],\n  \"ignorePatterns\": [\"!**/*\"],\n  \"overrides\": [\n    {\n      \"files\": [\"*.ts\", \"*.tsx\", \"*.js\", \"*.jsx\"],\n      // We set parserOptions.project for the project to allow TypeScript to create the type-checker behind the scenes when we run linting\n      \"parserOptions\": {\n        \"project\": [\"apps/tuskdesk/tsconfig.*?.json\"]\n      },\n      \"rules\": {\n        \"@typescript-eslint/await-thenable\": \"error\"\n      }\n    },\n    {\n      \"files\": [\"*.ts\", \"*.tsx\"],\n      \"rules\": {}\n    },\n    {\n      \"files\": [\"*.js\", \"*.jsx\"],\n      \"rules\": {}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Publishable Library\nDESCRIPTION: This command generates a publishable library with a specified import path. This allows the library to be built and published to a registry like npm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n\"nx g @nx/next:lib libs/my-new-lib --publishable --importPath=@happynrwl/ui-components\"\n```\n\n----------------------------------------\n\nTITLE: Registering Nx Powerpack Activation Key\nDESCRIPTION: This command registers the Nx Powerpack activation key in the repository. The key should be committed so that all developers have access to Powerpack features.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/installation/activate-powerpack.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx register YOUR_ACTIVATION_KEY\n```\n\n----------------------------------------\n\nTITLE: Running Affected Commands with Nx\nDESCRIPTION: This shell command demonstrates how to run Nx affected commands, which execute tasks only for projects affected by recent changes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx affected:<target>\n```\n\n----------------------------------------\n\nTITLE: Implementing Rust HTTP Server with Cats API\nDESCRIPTION: Rust code for the main application, setting up an HTTP server using actix-web and integrating the cats API from the library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-rust.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse actix_web::{App, HttpServer};\n\nuse cats::{create_cat_data, create_cat_scope};\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    // HttpServer:new creates multiple threads to handle requests.\n    // We need to make sure that the shared cat data is created once before the HttpServer\n    // We can then pass this reference to the create_cat_scope so that all threads have access to the same data\n    let cat_data = create_cat_data();\n    HttpServer::new(move || App::new().service(create_cat_scope(&cat_data)))\n        .bind((\"127.0.0.1\", 8080))?\n        .run()\n        .await\n}\n```\n\n----------------------------------------\n\nTITLE: dotnet-tools.json configuration file\nDESCRIPTION: This JSON file configures .NET tools for the workspace. It specifies the version and indicates that the current directory is the root. It is typically generated by the `init` generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-dotnet.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 1,\n  \"isRoot\": true,\n  \"tools\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions CI Workflow Configuration\nDESCRIPTION: This YAML snippet shows key parts of the GitHub Actions workflow file, including Nx Cloud task distribution and affected commands for efficient CI runs.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-existing-project.md#2025-04-22_snippet_9\n\nLANGUAGE: yml\nCODE:\n```\nname: CI\n# ...\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          filter: tree:0\n\n      # This enables task distribution via Nx Cloud\n      # Run this command as early as possible, before dependencies are installed\n      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun\n      # Connect your workspace by running \"nx connect\" and uncomment this\n      - run: npx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\" --stop-agents-after=\"build\"\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n          cache: 'npm'\n      - run: npm ci --legacy-peer-deps\n      - uses: nrwl/nx-set-shas@v4\n      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected\n      - run: npx nx affected -t lint test build\n```\n\n----------------------------------------\n\nTITLE: Generating Buildable Angular Library with Nx CLI\nDESCRIPTION: Command to generate a new Angular library configured for incremental builds using the Nx CLI. The --buildable flag ensures the library is configured to be built independently.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/setup-incremental-builds-angular.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:lib libs/my-lib --buildable\n```\n\n----------------------------------------\n\nTITLE: Creating a Qwik Application with Nx\nDESCRIPTION: Command to generate a new Qwik application using the qwik-nx plugin within an Nx workspace. This creates the application in the specified directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-qwik.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g qwik-nx:app todo --directory=apps/todo\n```\n\n----------------------------------------\n\nTITLE: Generating Node.js Library\nDESCRIPTION: Example of using Nx generate command to create a new Node.js library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/generate.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/node:library libs/mylibrary\n```\n\n----------------------------------------\n\nTITLE: Running Target with Special Characters\nDESCRIPTION: Example of running a target that contains a colon, requiring quotes to prevent parsing issues.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n nx run myapp:\"build:test\"\n```\n\n----------------------------------------\n\nTITLE: Auto-generate Stories for Nuxt Components\nDESCRIPTION: This command automatically generates story files for all Nuxt components within the specified project. Replace '<project-name>' with your project's name.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/plugin-vue.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nuxt:stories --project=<project-name>\n```\n\n----------------------------------------\n\nTITLE: GitHub OAuth Callback URL Example\nDESCRIPTION: This snippet shows the required format for the authorization callback URL when creating a GitHub OAuth app for use with Nx Cloud.  The `[your-nx-cloud-url]` placeholder should be replaced with the actual URL of your Nx Cloud instance. The callback is crucial for handling the authentication redirect from GitHub.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/enterprise/single-tenant/auth-github.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"[your-nx-cloud-url]/auth-callback\\n\\n# for example\\nhttps://my.nx-enterprise.url:8080/auth-callback\"\n```\n\n----------------------------------------\n\nTITLE: Running Root-Level Target with Nx\nDESCRIPTION: Command example showing how to run the 'docs' script using Nx, along with the expected output that displays the execution result and Nx's success message.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/root-level-scripts.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> nx run myorg:docs\n\nyarn run v1.22.19\n$ node ./generateDocsSite.js\nDocumentation site generated in /docs\n\n————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n\nNX   Successfully ran target docs for project myorg (5s)\n```\n\n----------------------------------------\n\nTITLE: Building a React Application with Nx\nDESCRIPTION: Command to build the React application for production using Nx. This generates output in the dist folder.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx build\n```\n\n----------------------------------------\n\nTITLE: Running Test Tasks on Agent Machine in YAML\nDESCRIPTION: This snippet shows how to run test tasks for all projects defined in the PROJECTS environment variable on an agent machine in a manual distribution setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/concepts/parallelization-distribution.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Run test for all projects defined in PROJECTS\n- nx run-many --projects=$PROJECTS -t test\n```\n\n----------------------------------------\n\nTITLE: Updating Nx to Latest Version\nDESCRIPTION: Commands to update Nx workspace dependencies and code to the latest version, followed by running any necessary migrations. This process ensures the workspace is up-to-date with the latest Nx features and improvements.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-08-what-is-new-in-nx-13-10.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Exporting User Service from Shared Library\nDESCRIPTION: TypeScript code to export the UserService from the shared library's entry point.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n...\nexport * from './lib/user.service';\n```\n\n----------------------------------------\n\nTITLE: Basic Nx Build Command\nDESCRIPTION: Command to build the application using Nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/webpack/docs/webpack-build-executor-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx build my-app\n```\n\n----------------------------------------\n\nTITLE: Update Project Configuration to Use PostCSS\nDESCRIPTION: This snippet illustrates how to configure an Nx project to use the previously created PostCSS configuration file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-in-react.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/web:webpack\",\n      \"options\": {\n        // ...\n        \"postcssConfig\": \"apps/{your app here}/postcss.config.js\"\n      }\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generate CI Workflow File for GitHub Actions\nDESCRIPTION: This command generates a CI workflow file for GitHub Actions. It creates a `.github/workflows/ci.yml` file with a pipeline that runs `lint`, `test`, `build`, and `e2e` tasks for affected projects. It utilizes Nx Cloud for task distribution across multiple machines.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/migration-angular.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate ci-workflow --ci=github\n```\n\n----------------------------------------\n\nTITLE: Integrating FeatureSets into Main App Component\nDESCRIPTION: Updates the main App component to include the FeatureSets component, showing how to import and use a feature library in the application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FeatureSets } from '@nx-apollo/feature-sets';\n\nexport function App() {\n  return (\n    <div>\n      <h1 className=\"my-6 text-center text-2xl font-bold\">My Lego Sets</h1>\n      <FeatureSets></FeatureSets>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components with Nx\nDESCRIPTION: Command to generate an Angular component using Nx generators, which are equivalent to Angular schematics. This demonstrates how to use Nx to generate Angular code.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/nx-and-angular-cli.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/angular:component apps/my-app/src/lib/my-component/my-component\n```\n\n----------------------------------------\n\nTITLE: Accessing Project Name with exec\nDESCRIPTION: Shows how to use 'nx exec' to echo the current project name using the $NX_PROJECT_NAME environment variable.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/cli/exec.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnx exec -- echo \\$NX_PROJECT_NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Agents with Changesets (YAML)\nDESCRIPTION: This snippet shows how to configure dynamic agents using changesets in a `distribution-config.yaml` file. Each changeset defines the number and type of agents to use based on the size of the PR. The order of changesets is important, as Nx Cloud uses it to dynamically determine the correct changeset to use.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/features/dynamic-agents.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndistribute-on:\n  small-changeset: 3 linux-medium-js\n  medium-changeset: 6 linux-medium-js\n  large-changeset: 10 linux-medium-js\n```\n\n----------------------------------------\n\nTITLE: Adding Playwright to Existing Project\nDESCRIPTION: Commands to add Playwright e2e testing to an existing project, with optional web server configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/playwright/playwright-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/playwright:configuration --project=your-app-name\n\nnx g @nx/playwright:configuration --project=your-app-name --webServerCommand=\"npx serve your-project-name\" --webServerAddress=\"http://localhost:4200\"\n```\n\n----------------------------------------\n\nTITLE: Nx Project Configuration for React Application\nDESCRIPTION: The project.json file containing Nx target configurations for building, serving, testing, and linting a React application using Vite.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"awesomereactapp\",\n  \"$schema\": \"node_modules/nx/schemas/project-schema.json\",\n  \"sourceRoot\": \"./src\",\n  \"projectType\": \"application\",\n  \"targets\": {\n    \"build\":  {...},\n    \"serve\": {\n      \"executor\": \"@nrwl/vite:dev-server\",\n      \"defaultConfiguration\": \"development\",\n      \"options\": {\n        \"buildTarget\": \"awesomereactapp:build\"\n      },\n      \"configurations\": {\n        \"development\": {\n          \"buildTarget\": \"awesomereactapp:build:development\",\n          \"hmr\": true\n        },\n        \"production\": {\n          \"buildTarget\": \"awesomereactapp:build:production\",\n          \"hmr\": false\n        }\n      }\n    },\n    \"test\": {...},\n    \"lint\": {...}\n  },\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Plugin\nDESCRIPTION: Command for Nx 18+ to add the React Native plugin to an existing workspace\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react-native/react-native-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/react-native\n```\n\n----------------------------------------\n\nTITLE: Basic Nx Watch Command Usage\nDESCRIPTION: Basic usage syntax for the Nx watch command that can be executed globally or through package managers.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/watch.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx watch\n```\n\n----------------------------------------\n\nTITLE: Creating a Shared UI Library in Nx\nDESCRIPTION: Command to generate a shared UI library in an Nx workspace. This creates a reusable library that can be imported by multiple Expo applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-24-step-by-step-guide-to-creating-an-expo-monorepo-with-nx.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nx/expo:lib ui\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Agent Distribution Configuration in YAML\nDESCRIPTION: Example of a YAML configuration file for dynamic agent distribution in Nx Cloud. This file defines different distribution strategies based on changeset sizes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/nx-cloud-cli.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndistribute-on:\n  small-changeset: 3 linux-medium-js\n  medium-changeset: 6 linux-medium-js\n  large-changeset: 10 linux-medium-js\n```\n\n----------------------------------------\n\nTITLE: Generating an Angular Application with Tailwind CSS Support\nDESCRIPTION: Command to generate a new Angular application named 'app2' with Tailwind CSS configured using Nx CLI. The command includes flags for adding Tailwind, setting CSS as the styling format, and disabling routing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nrwl/angular:app app2 --addTailwind --style=css --routing=false\n```\n\n----------------------------------------\n\nTITLE: Nx E2E Project Configuration for Cypress\nDESCRIPTION: The project.json configuration for the e2e project that uses Cypress for integration testing. It includes settings for test execution and connecting to the dev server.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"e2e\",\n  \"$schema\": \"../node_modules/nx/schemas/project-schema.json\",\n  \"sourceRoot\": \"e2e/src\",\n  \"projectType\": \"application\",\n  \"targets\": {\n    \"e2e\": {\n      \"executor\": \"@nrwl/cypress:cypress\",\n      \"options\": {\n        \"cypressConfig\": \"e2e/cypress.config.ts\",\n        \"devServerTarget\": \"awesomereactapp:serve:development\",\n        \"testingType\": \"e2e\"\n      },\n      \"configurations\": {\n        \"production\": {\n          \"devServerTarget\": \"awesomereactapp:serve:production\"\n        }\n      }\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Projects with Nx Remove Generator - Shell\nDESCRIPTION: This command removes a specified project from your Nx workspace. It is useful for cleaning up projects that are no longer needed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/decisions/folder-structure.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g remove booking-some-project\n```\n\n----------------------------------------\n\nTITLE: Processing Storybook Configuration Files\nDESCRIPTION: Implementation of the processFile function that creates dynamic targets with unique ports for each Storybook instance.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-18-dynamic-targets-with-inference.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateNodesContextV2 } from '@nx/devkit';\nimport { dirname } from 'node:path';\n\nconst processFile = (\n  file: string,\n  context: CreateNodesContextV2,\n  port: number\n) => {\n  let projectRoot = '';\n  if (file.includes('/.storybook')) {\n    projectRoot = dirname(file).replace('/.storybook', '');\n  } else {\n    projectRoot = dirname(file).replace('.storybook', '');\n  }\n\n  return {\n    projects: {\n      [projectRoot]: {\n        root: projectRoot,\n        targets: {\n          storybook: {\n            command: `storybook dev --port ${port}`,\n            options: { cwd: projectRoot },\n          },\n          'test-storybook': {\n            command: `start-server-and-test 'storybook dev --port ${port} --no-open' http://localhost:${port} 'test-storybook --index-json --url=http://localhost:${port}'`,\n            options: { cwd: projectRoot },\n          },\n        },\n      },\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify Deploy Settings in project.json\nDESCRIPTION: JSON configuration for the deploy-functions target in project.json, including site ID and production deployment options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/node-serverless-functions-netlify.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    ...\n    \"deploy-functions\": {\n      \"dependsOn\": [\"lint\"],\n      \"command\": \"npx netlify deploy --site=YOUR_SITE_ID\",\n      \"configurations\": {\n        \"production\": {\n          \"command\": \"npx netlify deploy --site=YOUR_SITE_ID --prod\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Cypress Configuration with Nx Preset\nDESCRIPTION: Complete example showing how to integrate Nx's Cypress preset with custom setupNodeEvents configuration. Demonstrates proper web server setup with different environments and async handling.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/cypress/cypress-setup-node-events.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress';\nimport { nxE2EPreset } from '@nx/cypress/plugins/cypress-preset';\n\nconst preset = nxE2EPreset(__filename, {\n  cypressDir: 'src',\n  bundler: 'vite',\n  webServerCommands: {\n    default: 'nx run my-project:serve',\n    production: 'nx run my-project:preview',\n  },\n  ciWebServerCommand: 'nx run my-project:serve-static',\n});\n\nexport default defineConfig({\n  e2e: {\n    ...preset,\n    async setupNodeEvents(on, config) {\n      // This line sets up the web server as provided via `webServerCommands` and `ciWebServerCommand`\n      await preset.setupNodeEvents(on, config);\n\n      // Register your listeners here\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Branch Comparison Affected Testing\nDESCRIPTION: Running tests for projects affected by changes between main branch and HEAD.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/affected.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t test --base=main --head=HEAD\n```\n\n----------------------------------------\n\nTITLE: Running the storybook-composition target\nDESCRIPTION: Shell command to run the custom storybook-composition target that starts all composed Storybook instances.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/storybook-composition-setup.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx run main-host:storybook-composition\n```\n\n----------------------------------------\n\nTITLE: Complete Nuxt Configuration for Vercel Deployment\nDESCRIPTION: This snippet provides a full example of a nuxt.config.ts file configured for Vercel deployment. It includes settings for the workspace directory, source directory, build directory, and Vercel-specific nitro configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/deploy-nuxt-to-vercel.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';\nimport { defineNuxtConfig } from 'nuxt/config';\n\nexport default defineNuxtConfig({\n  workspaceDir: '../../',\n  srcDir: 'src',\n  devtools: { enabled: true },\n  buildDir: '../../dist/apps/my-app/.nuxt',\n  devServer: {\n    host: 'localhost',\n    port: 4200,\n  },\n  typescript: {\n    typeCheck: true,\n    tsConfig: {\n      extends: './tsconfig.app.json',\n    },\n  },\n  imports: {\n    autoImport: false,\n  },\n  css: ['~/assets/css/styles.css'],\n  vite: {\n    plugins: [nxViteTsPaths()],\n  },\n  nitro: {\n    preset: 'vercel',\n    output: {\n      dir: '../../.vercel/output',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Cat Fact Query Hook\nDESCRIPTION: Custom hook implementation using TanStack Query to fetch cat facts from an external API.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-08-state-management.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQuery } from '@tanstack/react-query';\n\nexport const fetchCatFact = async (): Promise<string> => {\n  const response = await fetch('https://catfact.ninja/fact');\n  const data = await response.json();\n  return data.fact;\n};\n\nexport const useCatFact = () => {\n  return useQuery({\n    queryKey: ['cat-fact'],\n    queryFn: fetchCatFact,\n    enabled: false,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Angular Application Configuration with Webpack-Browser Executor\nDESCRIPTION: Configuration for an Angular application using the @nx/angular:webpack-browser executor with incremental builds. This replaces the standard @angular-devkit/build-angular:browser executor to leverage Nx's incremental build capabilities.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/setup-incremental-builds-angular.md#2025-04-22_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"projectType\": \"application\",\n  ...\n  \"targets\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"],\n      \"executor\": \"@nx/angular:webpack-browser\",\n      \"outputs\": [\n        \"{options.outputPath}\"\n      ],\n      \"options\": {\n        \"buildLibsFromSource\": false\n        ...\n      },\n      \"configurations\": {\n        ...\n      },\n      \"defaultConfiguration\": \"production\"\n    },\n    \"serve\": {\n      \"executor\": \"@nx/angular:dev-server\",\n      \"options\": {\n        \"buildTarget\": \"my-app:build\",\n        \"buildLibsFromSource\": false\n      },\n      \"configurations\": {\n        \"production\": {\n          \"buildTarget\": \"my-app:build:production\"\n        }\n      }\n    },\n    ...\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Integrating Library in Fastify Route\nDESCRIPTION: Example of importing and using a library function in a Fastify route, demonstrating integration between application and library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-fastify.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { someFunction } from '@my-org/my-lib';\nimport { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';\n\nexport default async function (fastify: FastifyInstance) {\n  fastify.get(\n    '/',\n    async function (request: FastifyRequest, reply: FastifyReply) {\n      return { message: 'Hello API ' + someFunction };\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Affected Tests in Nx\nDESCRIPTION: This shell command uses the Nx CLI to run the `test` task for all projects affected by the changes specified by the `--files` argument. It requires the Nx CLI to be installed as a dev dependency.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/10-affected/content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n\"npx nx affected -t test --files=libs/products/src/lib/products.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Root TypeScript Configuration for Path Aliases\nDESCRIPTION: This snippet defines compiler options and path alias configurations in a root `tsconfig.base.json` file that can be extended by individual projects, ensuring that paths are registered for shared libraries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/typescript-project-linking.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // common compiler option defaults for all projects\n    // ...\n    // These compiler options must be false or undefined\n    \"composite\": false,\n    \"declaration\": false,\n    \"paths\": {\n      // These paths are automatically added by Nx library generators\n      \"@myorg/shared-ui\": [\"packages/shared-ui/src/index.ts\"]\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Copying in esbuild\nDESCRIPTION: JSON configuration for copying assets during the build process, including files and directories.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/esbuild/esbuild-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n\"build\": {\n \"executor\": \"@nx/esbuild:esbuild\",\n  \"options\": {\n    \"assets\": [\n      { \"input\": \"libs/mylib\", \"glob\": \"README.md\", \"output\": \"/\" },\n      { \"input\": \"libs/mylib\", \"glob\": \"logo.png\", \"output\": \"/\" },\n      { \"input\": \"libs/mylib\", \"glob\": \"docs/**/*.md\", \"output\": \"/docs\" }\n    ]\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Module Boundary Rules in Nx\nDESCRIPTION: This snippet demonstrates how to configure the @nx/enforce-module-boundaries ESLint rule in the eslint.config.mjs file. It defines constraints for different project types and scopes based on the assigned tags.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/11-module-boundaries/content.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport nx from '@nx/eslint-plugin';\n\nexport default [\n  // ...\n  {\n    files: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx'],\n    rules: {\n      '@nx/enforce-module-boundaries': [\n        'error',\n        {\n          enforceBuildableLibDependency: true,\n          allow: ['^.*/eslint(\\.base)?\\.config\\.[cm]?js$'],\n          depConstraints: [\n            {\n              sourceTag: 'type:feature',\n              onlyDependOnLibsWithTags: ['type:feature', 'type:ui'],\n            },\n            {\n              sourceTag: 'type:ui',\n              onlyDependOnLibsWithTags: ['type:ui'],\n            },\n            {\n              sourceTag: 'scope:orders',\n              onlyDependOnLibsWithTags: [\n                'scope:orders',\n                'scope:products',\n                'scope:shared',\n              ],\n            },\n            {\n              sourceTag: 'scope:products',\n              onlyDependOnLibsWithTags: ['scope:products', 'scope:shared'],\n            },\n            {\n              sourceTag: 'scope:shared',\n              onlyDependOnLibsWithTags: ['scope:shared'],\n            },\n            {\n              sourceTag: '*',\n              onlyDependOnLibsWithTags: ['*'],\n            },\n          ],\n        },\n      ],\n    },\n  },\n  // ...\n];\n```\n\n----------------------------------------\n\nTITLE: CLI Entry Point (index.ts)\nDESCRIPTION: This TypeScript code snippet represents the entry point for the custom CLI. It imports the `createWorkspace` function from the `create-nx-workspace` package, retrieves the workspace name from command-line arguments, and uses `createWorkspace` to generate the Nx workspace with a specified plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-10-create-your-own-create-react-app-cli.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n#!/usr/bin/env node\n\nimport { createWorkspace } from 'create-nx-workspace';\n\nasync function main() {\n const name = process.argv[2]; // TODO: use libraries like yargs or enquirer to set your workspace name\n if (!name) {\n throw new Error('Please provide a name for the workspace');\n }\n\nconsole.log(`Creating the workspace: ${name}`);\n\n // This assumes \"my-own-react\" and \"create-my-own-react-app\" are at the same version\n // eslint-disable-next-line @typescript-eslint/no-var-requires\n const presetVersion = require('../package.json').version;\n\n // TODO: update below to customize the workspace\n const { directory } = await createWorkspace(`my-own-react@${presetVersion}`, {\n name,\n nxCloud: false,\n packageManager: 'npm',\n });\n\n console.log(`Successfully created the workspace: ${directory}.`);\n}\n\nmain();\n\n```\n\n----------------------------------------\n\nTITLE: Tagging Projects in project.json with Nx\nDESCRIPTION: This code snippet shows how to assign tags to a project in its `project.json` file. Tags are used by Nx to define boundaries and enforce dependency rules. The `tags` property is an array of strings representing the tags for the project. This example shows tags for the `orders` library.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/11-module-boundaries/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"tags\": [\"type:feature\", \"scope:orders\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Nx Workspace to Latest Version\nDESCRIPTION: Command to automatically upgrade an Nx workspace to the latest version. This initiates Nx's migration process to update all tools and configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-07-26-evergreen-tooling-more-than-just-codemods.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\n----------------------------------------\n\nTITLE: Adding esbuild Configuration to Existing Library\nDESCRIPTION: Commands to add esbuild configuration to an existing library, with an option to skip validation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/esbuild/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/esbuild:configuration mylib\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/esbuild:configuration mylib --skipValidation\n```\n\n----------------------------------------\n\nTITLE: Defining Project-Specific Task Dependencies in package.json\nDESCRIPTION: This snippet shows how to configure project-specific task dependencies in a package.json file. The example sets up the build target to depend on the prebuild target within the same project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/defining-task-pipeline.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myapp\",\n  \"dependencies\": {},\n  \"devDependencies\": {},\n  ...\n  \"nx\": {\n    \"targets\": {\n      \"build\": {\n        \"dependsOn\": [\n          \"prebuild\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Nx Release Plan:Check Command in Shell\nDESCRIPTION: This command ensures that all touched projects have an applicable version plan created for them. It verifies the versioning plan before executing a release.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/release.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx release plan:check\n```\n\n----------------------------------------\n\nTITLE: Task Graph Preview in Webview\nDESCRIPTION: Preview the task graph for affected builds in a webview interface.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/affected.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t=build --graph\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Inputs and Target Defaults in nx.json\nDESCRIPTION: Comprehensive example of configuring named inputs and target defaults in nx.json, including production, lint, and test configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-10-14-whats-new-in-nx-15.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"namedInputs\": {\n    \"default\": [\"{projectRoot}/**/*\", \"sharedGlobals\"],\n    \"production\": [\n      \"default\",\n      \"!{projectRoot}/.eslintrc.json\",\n      \"!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)\",\n      \"!{projectRoot}/tsconfig.spec.json\",\n      \"!{projectRoot}/jest.config.[jt]s\"\n    ],\n    \"sharedGlobals\": []\n  },\n  \"targetDefaults\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"],\n      \"inputs\": [\"production\", \"^production\"]\n    },\n    \"lint\": {\n      \"inputs\": [\"default\", \"{workspaceRoot}/.eslintrc.json\"]\n    },\n    \"test\": {\n      \"inputs\": [\n        \"default\",\n        \"^production\",\n        \"{workspaceRoot}/jest.preset.js\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Library with ESBuild Bundler\nDESCRIPTION: Builds a library using ESBuild as the bundler integrating the @nx/esbuild:esbuild executor. Configuration changes can be made to bundle the library through project.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/library-examples.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/js:lib libs/mylib --bundler=esbuild\n```\n\n----------------------------------------\n\nTITLE: Convert App to Host with Routing (Nx)\nDESCRIPTION: This command converts an existing application named `myapp` into a host application with Module Federation enabled. The `--routing=true` flag enables routing for the host application. The `--mfType=host` flag specifies that the application should be configured as a host.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/setup-mf-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g setup-mf myapp --mfType=host --routing=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Svelte in Nx\nDESCRIPTION: Vite configuration file to include Svelte plugin and set up server options for the Nx project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-svelte.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Add this to your imports\nimport { svelte } from '@sveltejs/vite-plugin-svelte';\n\nexport default defineConfig({\n  plugins: [\n    //... other plugins\n    svelte(), // Add this line\n  ],\n  //...\n  server: {\n    port: 4200,\n    host: 'localhost',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Application\nDESCRIPTION: Example of using Nx generate command to create a new Angular application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/generate.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/angular:app apps/myapp\n```\n\n----------------------------------------\n\nTITLE: Serving Fastify Application in Nx Workspace\nDESCRIPTION: Command to serve the generated Fastify application, which starts it on localhost:3000/api by default.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-fastify.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx serve fastify-api\n```\n\n----------------------------------------\n\nTITLE: Creating JS/TS Library\nDESCRIPTION: Command to generate a new JavaScript/TypeScript library\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/js/documents/overview.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/js:lib libs/my-lib\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Project Configuration in JSON\nDESCRIPTION: A JSON snippet showing a minimal `project.json` configuration for a Tailwind CSS preset library in Nx, establishing it as a library project without build targets or specific tags. This configuration is foundational for sharing Tailwind CSS configurations across multiple Nx projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-with-angular-projects.md#2025-04-22_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"projectType\": \"library\",\n  \"sourceRoot\": \"libs/tailwind-preset\",\n  \"targets\": {},\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Applications in an Nx Monorepo\nDESCRIPTION: Shell command to generate a new Angular application within an Nx monorepo using the Angular application generator. This allows for creating multiple applications that can share code while being deployed independently.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-18-architecting-angular-applications.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:app admin\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with Persistence in TypeScript\nDESCRIPTION: This snippet creates and configures the Redux store with persistence using redux-persist. It sets up middleware, devtools, and initial state based on the environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-08-state-management.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport { persistStore, persistReducer, PersistConfig } from 'redux-persist';\n\nimport { initialRootState } from './root-state.initial';\nimport { RootState } from './root-state.interface';\nimport { createRootReducer } from './root.reducer';\n\ndeclare const process: any;\n\nexport const createRootStore = (persistConfig: PersistConfig<RootState>) => {\n  const isDevelopment = process.env.NODE_ENV === 'development';\n\n  const rootReducer = createRootReducer;\n  const persistedReducer = persistReducer(persistConfig, rootReducer);\n\n  const store = configureStore({\n    reducer: persistedReducer,\n    middleware: (getDefaultMiddleware) => {\n      const defaultMiddleware = getDefaultMiddleware({\n        serializableCheck: false,\n      });\n      return isDevelopment\n        ? defaultMiddleware.concat(logger)\n        : defaultMiddleware;\n    },\n    devTools: isDevelopment,\n    preloadedState: initialRootState,\n  });\n\n  const persistor = persistStore(store);\n\n  return { store, persistor };\n};\n```\n\n----------------------------------------\n\nTITLE: Root-level Script Configuration for Nx\nDESCRIPTION: Example of configuring a root-level script in package.json to be run and cached by Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-06-nx-15-3-standalone-projects-vite-task-graph-and-more.md#2025-04-22_snippet_9\n\nLANGUAGE: json5\nCODE:\n```\n// package.json\n{\n  \"name\": \"myorg\",\n  \"scripts\": {\n    \"docs\": \"node ./generateDocsSite.js\"\n  }\n  \"nx\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Incremental Building Angular Applications with @nx/angular:webpack-browser\nDESCRIPTION: This snippet illustrates the configuration changes needed to enable incremental building of an Angular application using the @nx/angular:webpack-browser executor. By adjusting the 'project.json' build target, the application can utilize cached builds of workspace libraries.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/webpack-browser-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"targets\": {\n        \"build\": {\n            \"executor\": \"@nx/angular:webpack-browser\",\n            \"options\": {\n                ...\n                \"buildLibsFromSource\": false\n            }\n        },\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with Next.js\nDESCRIPTION: This command initializes a new Nx workspace configured to use Next.js. It sets up the basic project structure and configurations required for Next.js development within the Nx environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"npx create-nx-workspace@latest --preset=next\"\n```\n\n----------------------------------------\n\nTITLE: Running iOS E2E Tests (Inferred Tasks)\nDESCRIPTION: This command executes end-to-end tests for the React Native application's 'mobile-e2e' project on an iOS simulator in debug configuration (Mac only). It uses the Nx CLI with the `test` target and passes the configuration to Detox. Nx infers the task based on the project setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-native.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nnpx nx test mobile-e2e -- --configuration=\"ios.sim.debug\"\n```\n\n----------------------------------------\n\nTITLE: Generating Vite-powered React App in Nx\nDESCRIPTION: Command to generate a new React application using Vite as the bundler in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-06-nx-15-3-standalone-projects-vite-task-graph-and-more.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nrwl/react:application --bundler=vite\n```\n\n----------------------------------------\n\nTITLE: Cache Mode Configuration\nDESCRIPTION: JSON configuration for specifying local and CI cache modes in nx.json\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/gcs-cache/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gcs\": {\n    \"localMode\": \"read-only\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gcs\": {\n    \"ciMode\": \"read-only\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Angular Service\nDESCRIPTION: Angular service example demonstrating how to use the defined environment variable in application code.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/use-environment-variables-in-angular.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ApiService {\n  constructor() {\n    console.log('API URL:', MY_API_URL);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/expo in an Existing Workspace\nDESCRIPTION: Commands for installing the @nx/expo package in an existing Nx workspace using different package managers. This is required to create and manage Expo applications in your Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-24-step-by-step-guide-to-creating-an-expo-monorepo-with-nx.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\\# npm\nnpm install @nx/expo --save-dev\n\n\\# yarn\nyarn add @nx/expo --dev\n\n\\# pnpm\npnpm add @nx/expo --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Empty Module Federation Remotes for Dynamic Loading\nDESCRIPTION: Updates the Module Federation configuration to use an empty remotes array, allowing the application to dynamically load remotes at runtime instead of using static configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ModuleFederationConfig } from '@nx/webpack';\n\nconst config: ModuleFederationConfig = {\n  name: 'dashboard',\n  remotes: [],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: NX Workspace Structure JSON Configuration\nDESCRIPTION: This JSON structure represents the workspace layout and dependencies for an NX project. It defines applications and libraries, their relationships, and the associated dependencies. This setup is critical for managing features within the NX workspace effectively.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/docs/cypress-e2e-config-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projects\": [\n    {\n      \"type\": \"app\",\n      \"name\": \"fancy-app\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"type\": \"app\",\n      \"name\": \"fancy-app-e2e\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"type\": \"lib\",\n      \"name\": \"feature-user\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"type\": \"lib\",\n      \"name\": \"feature-dashboard\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"type\": \"lib\",\n      \"name\": \"feature-cart\",\n      \"data\": {\n        \"tags\": []\n      }\n    }\n  ],\n  \"groupByFolder\": false,\n  \"workspaceLayout\": {\n    \"appsDir\": \"apps\",\n    \"libsDir\": \"libs\"\n  },\n  \"dependencies\": {\n    \"fancy-app\": [\n      {\n        \"target\": \"feature-user\",\n        \"source\": \"fancy-app\",\n        \"type\": \"static\"\n      },\n      {\n        \"target\": \"feature-cart\",\n        \"source\": \"fancy-app\",\n        \"type\": \"static\"\n      }\n    ],\n    \"fancy-app-e2e\": [\n      {\n        \"target\": \"fancy-app\",\n        \"source\": \"fancy-app-e2e\",\n        \"type\": \"implicit\"\n      }\n    ],\n    \"feature-user\": [\n      {\n        \"target\": \"feature-dashboard\",\n        \"source\": \"feature-user\",\n        \"type\": \"direct\"\n      }\n    ],\n    \"feature-cart\": [],\n    \"feature-dashboard\": []\n  },\n  \"affectedProjectIds\": [\"feature-cart\", \"fancy-app\", \"fancy-app-e2e\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Buildable Angular Library with Nx\nDESCRIPTION: This command generates an Angular library named `my-lib` with build support. The `--buildable` flag enables incremental builds, improving build times by only rebuilding what has changed.  No specific dependencies are required beyond having Nx and the Angular plugin installed.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/library-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:library libs/my-lib --buildable\n```\n\n----------------------------------------\n\nTITLE: Configuring React Router in main.tsx\nDESCRIPTION: Sets up React Router in the main.tsx file of the react-store app, wrapping the App component with BrowserRouter for routing functionality.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StrictMode } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport ReactDOM from 'react-dom/client';\n\nimport App from './app/app';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\n\nroot.render(\n  <StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Nx Packages with Custom From Versions\nDESCRIPTION: Example of updating @nx/workspace to 9.0.0 and generating migrations starting from version 8.0.0 for specific packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/migrate.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate @nx/workspace@9.0.0 --from=\"@nx/workspace@8.0.0,@nx/node@8.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Plugin\nDESCRIPTION: Demonstrates installing an Nx plugin using the `nx add` command. This command integrates the specified plugin into the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-10-tailoring-nx-for-your-organization.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/playwright\n```\n\n----------------------------------------\n\nTITLE: Configuring Inferred Task Options in JSON\nDESCRIPTION: This snippet shows how to provide project-specific overrides for inferred tasks, such as configuring additional options for a 'build' target using Vite.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      \"options\": {\n        \"assetsInlineLimit\": 2048,\n        \"assetsDir\": \"static/assets\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading JSON Files with Type Safety in TypeScript\nDESCRIPTION: A generic function that reads and parses JSON files from an Nx file system tree. It supports type parameters for the returned object shape and accepts optional JSON parsing options. The function removes comments from the JSON before parsing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/readJson.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadJson<T extends object = any>(tree: Tree, path: string, options?: JsonParseOptions): T\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nx Project Structure for Multi-Technology Applications\nDESCRIPTION: Example directory structure showing how Nx organizes multiple applications and shared packages in a monorepo, including Angular apps, documentation sites, and backend services with shared domain logic.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-18-architecting-angular-applications.md#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nmyshop/\n├── apps/\n│   ├── shop/          # Main Angular application\n│   ├── admin/         # Angular admin interface\n│   ├── docs/          # Analog documentation site\n│   ├── landing/       # Next.js marketing site\n│   └── api/          # NestJS backend\n└── packages/\n    ├── products/     # Shared product domain (used by both front and backend)\n    ├── orders/       # Shared order management\n    └── shared/       # Common utilities and types\n```\n\n----------------------------------------\n\nTITLE: Typechecking With All `.tsbuildinfo` Files Created\nDESCRIPTION: This snippet presents typechecking results after all `.tsbuildinfo` files are generated, indicating a significant reduction in duration and memory usage for subsequent runs.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/typescript-project-linking.md#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nTypecheck with all `.tsbuildinfo` files created: 25 seconds, max memory 429 MB\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions CI Workflow\nDESCRIPTION: This YAML snippet shows the key lines in a GitHub Actions workflow file for running CI with Nx, including starting a CI run and running affected tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\n\n# ... other configuration ...\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      # ... other steps ...\n      - run: npx nx-cloud start-ci-run\n        env:\n          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}\n\n      - run: npx nx affected -t lint test build e2e-ci\n        env:\n          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}\n\n      # ... other steps ...\n```\n\n----------------------------------------\n\nTITLE: Running on Android\nDESCRIPTION: Command to build and run the app on Android emulator or device\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react-native/documents/overview.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnx run-android <your-app-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Projects in nx.json\nDESCRIPTION: This snippet shows how to configure the release.projects property in nx.json to specify which projects Nx should manage releases for. In this case, it's set to manage releases for all projects in the packages directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/3-manage-releases/1-manage-releases/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"projects\": [\"packages/*\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vitest Configuration in project.json\nDESCRIPTION: Basic configuration setup for the Vitest test executor in project.json, specifying the vite config file location.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/test-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"my-app\": {\n    \"targets\": {\n        \"test\": {\n            \"executor\": \"@nx/vite:test\",\n            \"options\": {\n                \"config\": \"apps/my-app/vite.config.ts\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publish Packages Prompt and Output\nDESCRIPTION: This text shows the prompt displayed by Nx Release asking whether to publish the packages, and the subsequent output after confirming. It demonstrates the publishing process for multiple packages to the npm registry.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/get-started-with-nx-release.md#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\n...\\n\n✔ Do you want to publish these versions? (y/N) · true\n\nNX   Running target nx-release-publish for 3 projects:\n\n- pkg-1\n- pkg-2\n- pkg-3\n\n—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n\n> nx run pkg-1:nx-release-publish\n\n\n📦  @myorg/pkg-1@0.0.2\n=== Tarball Contents ===\n\n233B README.md\n277B package.json\n53B  src/index.ts\n61B  src/lib/pkg-1.ts\n===\nTarball Details ===\nname:          @myorg/pkg-1\nversion:       0.0.2\nfilename:      testorg-pkg-1-0.0.2.tgz\npackage size:  531 B\nunpacked size: 624 B\nshasum:        {shasum}\nintegrity:     {integrity}\ntotal files:   12\n\nPublished to https://registry.npmjs.org with tag \"latest\"\n\n> nx run pkg-2:nx-release-publish\n\n\n📦  @myorg/pkg-2@0.0.2\n=== Tarball Contents ===\n\n233B README.md\n277B package.json\n53B  src/index.ts\n61B  src/lib/pkg-2.ts\n===\nTarball Details ===\nname:          @myorg/pkg-2\nversion:       0.0.2\nfilename:      testorg-pkg-2-0.0.2.tgz\npackage size:  531 B\nunpacked size: 624 B\nshasum:        {shasum}\nintegrity:     {integrity}\ntotal files:   12\n\nPublished to https://registry.npmjs.org with tag \"latest\"\n\n> nx run pkg-3:nx-release-publish\n\n\n📦  @myorg/pkg-3@0.0.2\n=== Tarball Contents ===\n\n233B README.md\n277B package.json\n53B  src/index.ts\n61B  src/lib/pkg-3.ts\n===\nTarball Details ===\nname:          @myorg/pkg-3\nversion:       0.0.2\nfilename:      testorg-pkg-3-0.0.2.tgz\npackage size:  531 B\nunpacked size: 624 B\nshasum:        {shasum}\nintegrity:     {integrity}\ntotal files:   12\n\nPublished to https://registry.npmjs.org with tag \"latest\"\n\n—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n\nNX   Successfully ran target nx-release-publish for 3 projects\n```\n\n----------------------------------------\n\nTITLE: Nx Plugin Configuration for Expo\nDESCRIPTION: Configuration options for @nx/expo plugin in nx.json, defining target names for various Expo commands.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/expo/expo-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/expo/plugin\",\n      \"options\": {\n        \"startTargetName\": \"start\",\n        \"serveTargetName\": \"serve\",\n        \"runIosTargetName\": \"run-ios\",\n        \"runAndroidTargetName\": \"run-android\",\n        \"exportTargetName\": \"export\",\n        \"prebuildTargetName\": \"prebuild\",\n        \"installTargetName\": \"install\",\n        \"buildTargetName\": \"build\",\n        \"submitTargetName\": \"submit\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Astro Component Imports\nDESCRIPTION: Update tsconfig.json to allow importing .astro files within .ts files using @astrojs/ts-plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-astro.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"astro/tsconfigs/strict\",\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"plugins\": [\n      {\n        \"name\": \"@astrojs/ts-plugin\"\n      }\n    ],\n    \"paths\": {\n      \"@myrepo/ui\": [\"ui/src/index.ts\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nx Graph for Zoo App Serve Task\nDESCRIPTION: This command runs the 'serve' task for the '@tuskdesign/zoo' project and displays the task graph, showing task dependencies and execution order.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/2-smart-monorepo/7-checkpoint/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run @tuskdesign/zoo:serve --graph\n```\n\n----------------------------------------\n\nTITLE: Upgrading Nx Workspace\nDESCRIPTION: Command to upgrade an existing Nx workspace to the latest version. This creates a migrations.json file with necessary migrations for Nx, Angular, and other packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/nx-and-angular.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\n----------------------------------------\n\nTITLE: Listing Angular Plugin Capabilities\nDESCRIPTION: This command uses the Nx CLI to list the capabilities provided by the `@nx/angular` plugin. The output will show available generators, executors, and other functionalities provided by the plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/5-add-application/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx list @nx/angular\n```\n\n----------------------------------------\n\nTITLE: Extracting Package Versions from Yarn/Pnpm\nDESCRIPTION: Scans the top-level node_modules directory to get versions of hoisted dependencies. Handles scoped packages and excludes .pnpm directory. Generates a report with package paths and their versions.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/src/plugins/js/lock-file/__fixtures__/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst readFileSync = require('fs').readFileSync;\nconst readdirSync = require('fs').readdirSync;\nconst existsSync = require('fs').existsSync;\n\nlet report = '';\n\nconst packageNames = [];\nreaddirSync('node_modules').forEach((folder) => {\n  if (folder === '.pnpm') return;\n  if (folder.startsWith('@')) {\n    readdirSync(`node_modules/${folder}`).forEach((subfolder) => {\n      packageNames.push(`${folder}/${subfolder}`);\n    });\n  } else {\n    packageNames.push(folder);\n  }\n});\n\npackageNames.forEach((packageName) => {\n  const path = `node_modules/${packageName}/package.json`;\n  if (existsSync(path)) {\n    const content = readFileSync(path, 'utf-8');\n    const version = JSON.parse(content).version;\n    report += `'${path}': '{\"version\": \"${version}\"}'\\n`;\n  }\n});\n\nconsole.log(report);\n```\n\n----------------------------------------\n\nTITLE: Watch Single Project with Echo Command\nDESCRIPTION: Example showing how to watch a specific project and echo project name and file changes\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/watch.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx watch --projects=app -- echo \\$NX_PROJECT_NAME \\$NX_FILE_CHANGES\n```\n\n----------------------------------------\n\nTITLE: Enabling Version Plans in Nx Configuration (JSON)\nDESCRIPTION: This JSON configuration snippet enables the version plans feature in the Nx workspace by setting the release.versionPlans property to true in the nx.json file. This is a prerequisite for using version plans in your projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/file-based-versioning-version-plans.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"versionPlans\": true\n    // other release config such as projects to include in releases etc\n    // projects: [\"packages/**/*\"]\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configurable Environment Variables Table in Markdown\nDESCRIPTION: Markdown table documenting all configurable environment variables for Nx, including their types and detailed descriptions. Covers caching, execution, logging, and other behavioral settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/environment-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property                       | Type    | Description                                                                                                                                                                                                                    |\n| ------------------------------ | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| NX_ADD_PLUGINS                 | boolean | If set to `false`, Nx will not add plugins to infer tasks. This is `true` by default. Workspaces created before Nx 18 will have this disabled via a migration for backwards compatibility                                      |\n| NX_BASE                        | string  | The default base branch to use when calculating the affected projects. Can be overridden on the command line with `--base`.                                                                                                    |\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Builder in project.json\nDESCRIPTION: This snippet shows how to configure the Vite builder executor in the project.json file. It sets up the build target with the @nx/vite:build executor and specifies the output path for the build artifacts.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/build-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my-app\": {\n    \"targets\": {\n      \"build\": {\n        \"executor\": \"@nx/vite:build\",\n        \"options\": {\n          \"outputPath\": \"dist/apps/my-app\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Watch All Workspace Projects\nDESCRIPTION: Example showing how to watch all projects in the workspace, including newly created ones, and echo the project name on changes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/watch.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx watch --all -- echo \\$NX_PROJECT_NAME\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Tasks with Nx\nDESCRIPTION: Examples of how to run Gradle tasks using Nx commands on different operating systems.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-04-19-manage-your-gradle.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# macos/linux\n./nx <gradle task> <gradle project>\n\n# windows\nnx.bat <gradle task> <gradle project>\n```\n\n----------------------------------------\n\nTITLE: Configure Global Inputs and Outputs for Caching\nDESCRIPTION: Configure inputs to exclude markdown files and specify output locations at a global level in nx.json to control cached resources better.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/cache-task-results.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"build\": {\n      \"inputs\": [\"{projectRoot}/**/*\", \"!{projectRoot}/**/*.md\"],\n      \"outputs\": [\"{workspaceRoot}/dist/{projectName}\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Jest Snapshots in NX\nDESCRIPTION: This command runs the tests for 'my-project' while updating snapshots. It is executed via the NX CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/jest/docs/jest-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx test my-project -u\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Workflow Matrix\nDESCRIPTION: GitHub Actions workflow configuration for matrix-based test suite execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-06-20-introducing-nx-ecosystem-ci.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstrategy:\n  matrix:\n   suite:\n     - nx-remix\n     - nx-rspack\n     - my-new-suite\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace Interactively\nDESCRIPTION: This command creates a new Nx workspace by launching an interactive prompt.  It allows users to select presets and configure project settings through a command-line interface, useful for customized project setups.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-native.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpx create-nx-workspace happynrwl\n```\n\n----------------------------------------\n\nTITLE: Generating Vue Library\nDESCRIPTION: Command to generate a new Vue library within the Nx workspace using the @nx/vue plugin generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/vue/vue-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/vue:lib libs/my-lib\n```\n\n----------------------------------------\n\nTITLE: Assigning Tags to Products Library in package.json\nDESCRIPTION: This snippet demonstrates how to assign tags 'type:feature' and 'scope:products' to the products library in its package.json file. These tags will be used for defining module boundaries.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/11-module-boundaries/content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"nx\": {\n    \"tags\": [\"type:feature\", \"scope:products\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nx Generator Schema Configuration\nDESCRIPTION: This JSON code snippet describes the overall structure of an Nx generator schema. It details the usage of `properties`, `required`, `description`, `definitions`, and `additionalProperties` to define the schema for the generator options. `properties` defines the generator's options, `required` specifies which options are mandatory, and `description` provides helpful information to users.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"properties\": {\n    \"name\": {} // see Properties\n  },\n  \"required\": [],\n  \"description\": \"\",\n  \"definitions\": {}, // same as \"properties\"\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Generator Files\nDESCRIPTION: This command uses the Nx CLI to generate the initial files required for a new generator within a local plugin. It sets up the basic structure for defining the generator's logic and schema.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/local-generators.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/plugin:generator tools/my-plugin/src/generators/my-generator\n```\n\n----------------------------------------\n\nTITLE: Generating Personal Access Token for Nx Cloud (Bash)\nDESCRIPTION: Command to generate a personal access token for Nx Cloud. This step is required for each contributor to access the workspace with personal credentials.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-10-personal-access-tokens.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx login\n```\n\n----------------------------------------\n\nTITLE: Named Input Configuration in project.json for Production\nDESCRIPTION: This code snippet showcases how to define named inputs within a `project.json` file, specifically for the `production` input. It specifies that the production input should include \"default\" and exclude any files matching \"!{projectRoot}/**/*.test.js\". This allows projects to define their specific production input requirements.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"namedInputs\": {\n    \"production\": [\"default\", \"!{projectRoot}/**/*.test.js\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Vue Application in Nx Workspace\nDESCRIPTION: This command generates a new Vue application in the 'apps' directory of an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/vue/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/vue:app apps/my-app\n```\n\n----------------------------------------\n\nTITLE: Generating Buildable Angular Library with Tailwind CSS\nDESCRIPTION: This command sets up a new buildable Angular library with Tailwind CSS integrated within an Nx workspace. It uses the Nx generator with the `--buildable` and `--add-tailwind` flags to create a library that can be built and reused across applications with Tailwind CSS enabled.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-with-angular-projects.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/angular:lib libs/my-lib --buildable --add-tailwind\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Dependencies\nDESCRIPTION: Install required GraphQL modules for Apollo Server implementation\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @apollo/server graphql\n```\n\n----------------------------------------\n\nTITLE: Generating Cypress Configuration for Project with Custom Directory\nDESCRIPTION: This command extends the previous one by adding an optional `--directory` flag, which allows the user to specify a custom directory for the generated configuration files. This is useful for organizing files in a structured manner within the project. Ensure the relative path is correctly specified.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/docs/cypress-e2e-config-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/cypress:configuration --project=my-cool-project --devServerTarget=some-app:serve --directory=e2e\n```\n\n----------------------------------------\n\nTITLE: Running Nx Tasks on All Projects\nDESCRIPTION: Command to run lint, test, and build tasks on all projects in the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/tutorial/github-actions.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx run-many -t lint test build\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Dev-Server Proxy\nDESCRIPTION: This snippet shows how to set up a proxy in Webpack's dev-server configuration to redirect '/api' requests to a backend server running on localhost:3000. It includes an example of using pathRewrite to remove the '/api' prefix from the proxied requests.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/node/application-proxies.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nmodule.exports = {\n  //...\n  devServer: {\n    proxy: [\n      {\n        context: ['/api'],\n        target: 'http://localhost:3000',\n      },\n    ],\n  },\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nmodule.exports = {\n  //...\n  devServer: {\n    proxy: [\n      {\n        context: ['/api'],\n        target: 'http://localhost:3000',\n        pathRewrite: { '^/api': '' },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Executors in Nx project.json\nDESCRIPTION: Example configuration in project.json showing how to define build targets using Angular Devkit builders, which Nx calls executors. This demonstrates compatibility with existing Angular tooling.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/nx-and-angular-cli.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myngapp\",\n  ...\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@angular-devkit/build-angular:browser\",\n      ...\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Targets with Project Filtering Using Globs\nDESCRIPTION: Command that runs multiple targets only for projects matching a glob pattern, demonstrating the new filtering capability.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-22-nx-15-4-vite-4-support-a-new-nx-watch-command-and-more.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many --target test build lint --projects \"domain-products-*\"\n```\n\n----------------------------------------\n\nTITLE: Structuring a React Application with Domain-based Folders\nDESCRIPTION: Demonstrates a typical folder structure for a Create React App (CRA) setup, organizing code into domain-specific folders for better organization in a monolithic structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\ncra-app\n  ├─ public/\n  ├─ src/\n  │   ├─ authentication/\n  │   │  ├─ current-user/\n  │   │  │   ├─ ...\n  │   │  │   └─ index.ts\n  │   │  ├─ login/\n  │   │  └─ signup/\n  │   ├─ orders/\n  │   │   ├─ checkout/\n  │   │   ├─ place-order/\n  │   │   ├─ refund/\n  │   │   └─ order-list/\n  │   ├─ payments/\n  │   ├─ products/\n  │   ├─ user-profile/\n  │   │   ├─ addresses/\n  │   │   └─ credit-cards/\n  │   ├─ App.css\n  │   ├─ App.tsx\n  │   ...\n  ├─ package-lock.json\n  ├─ package.json\n  └─ README.md\n```\n\n----------------------------------------\n\nTITLE: Angular Library Commands\nDESCRIPTION: Commands for testing and linting an Angular library in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx test libName\nnx lint libName\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nx Workspace with Workspaces Configuration\nDESCRIPTION: This command creates a new Nx workspace with the workspaces configuration. The '--workspaces' flag is a temporary instruction to generate a workspaces-based monorepo setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace mymonorepo --workspaces\n```\n\n----------------------------------------\n\nTITLE: Export Utility Functions in a Utility Library - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to export utility functions from a module within a utility library. It shows the export of formatting functions which are typically reusable and framework-agnostic. This aids in maintaining a clean and organized codebase by encapsulating utility functions in a dedicated module.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/decisions/project-dependency-rules.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport { formatDate, formatTime } from './src/format-date-fns';\nexport { formatCurrency } from './src/format-currency';\n```\n\n----------------------------------------\n\nTITLE: Assigning Tags to Shared UI Library in package.json\nDESCRIPTION: This code snippet shows how to assign tags 'type:ui' and 'scope:shared' to the shared UI library in its package.json file. These tags indicate that this library is intended for use throughout the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/11-module-boundaries/content.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"nx\": {\n    \"tags\": [\"type:ui\", \"scope:shared\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Parallelism in Assignment Rules YAML\nDESCRIPTION: Example of setting default parallelism for multiple tasks using assignment rules. It specifies different agent types and parallelism for e2e-ci tasks and all other tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/assignment-rules.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nassignment-rules:\n  - targets:\n      - e2e-ci*\n    run-on:\n      - agent: linux-large\n\n  - projects:\n      - '*'\n    run-on:\n      - agent: linux-medium\n        parallelism: 5\n```\n\n----------------------------------------\n\nTITLE: Creating a Node.js Application with Proxy Configuration\nDESCRIPTION: This command generates a new Node.js application and configures it to proxy API requests to another project in the workspace.  `--frontendProject` specifies the name of the project to proxy requests to.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/node/node-plugin.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/node:application apps/my-new-app \\\n--frontendProject my-react-app\n```\n\n----------------------------------------\n\nTITLE: Handling Navigation Parameters in React Native\nDESCRIPTION: TypeScript code to handle navigation parameters in the React Native app using @react-navigation/native.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNavigation } from '@react-navigation/native';\nconst navigation = useNavigation();\nconst submitSearchForm = () => {\n  navigation.navigate(AppRoutes.results, { search: text });\n};\n\nimport { RouteProp, useRoute } from '@react-navigation/native';\nconst route = useRoute<RouteProp<{ params: { search: string } }>>();\nconst searchParam = route.params?.search;\n```\n\n----------------------------------------\n\nTITLE: Configure Nx Plugins in nx.json\nDESCRIPTION: This code snippet demonstrates how to configure Nx plugins within the `nx.json` file. It shows how to register plugins as either a simple string or as an object with a `plugin` property and an `options` property. This configuration allows Nx to automatically configure task execution based on the plugin's capabilities.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    \"@my-org/graph-plugin\",\n    {\n      \"plugin\": \"@nx/eslint/plugin\",\n      \"options\": {\n        \"targetName\": \"lint\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Cypress Component Testing Configuration\nDESCRIPTION: TypeScript configuration example showing how to extend the default Nx component testing preset with additional Cypress configuration options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/cypress/cypress-component-testing.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  component: {\n    ...nxComponentTestingPreset(__filename),\n    // add your own config here\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Disable prefer-standalone in ESLint config (existing override)\nDESCRIPTION: This snippet demonstrates how to disable the `@angular-eslint/prefer-standalone` rule within an existing ESLint configuration file, specifically targeting TypeScript files. It reads the existing configuration, adds or modifies a rule to disable the specified ESLint rule, and then writes the updated configuration back to the file.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-2-0/disable-angular-eslint-prefer-standalone.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n`module.exports = [\n          {\n            files: ['*.ts'],\n            rules: { 'no-unused-vars': 'error' },\n          },\n        ];\n        `\n```\n\nLANGUAGE: javascript\nCODE:\n```\n`        \"module.exports = [\n          {\n            files: ['**/*.ts'],\n            rules: {\n              'no-unused-vars': 'error',\n              '@angular-eslint/prefer-standalone': 'off',\n            },\n          },\n        ];\n        \"`\n```\n\n----------------------------------------\n\nTITLE: Adding remote repository and fetching (shell)\nDESCRIPTION: This snippet adds the remote repository URL of the standalone app to the Nx workspace and fetches the branches.  This allows for merging the standalone project's history into the monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/preserving-git-histories.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add my-standalone-app <repository url>\ngit fetch my-standalone-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev-Server with Custom Webpack in Nx\nDESCRIPTION: This configuration shows how to set up the `@nx/angular:dev-server` executor to serve an Angular application using a custom webpack configuration. It defines the `build` target using `@nx/angular:webpack-browser` and specifies the path to the custom webpack configuration file. The serve target is configured using the dev-server executor and points to the build target.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/dev-server-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"build\": {\n  \"executor\": \"@nx/angular:webpack-browser\",\n  \"options\": {\n    ...\n    \"customWebpackConfig\": {\n      \"path\": \"apps/my-app/webpack.config.js\"\n    }\n  }\n},\n\"serve\": {\n  \"executor\": \"@nx/angular:dev-server\",\n  \"configurations\": {\n    \"production\": {\n      \"buildTarget\": \"my-app:build:production\"\n    },\n    \"development\": {\n      \"buildTarget\": \"my-app:build:development\"\n    }\n  },\n  \"defaultConfiguration\": \"development\",\n}\n```\n\n----------------------------------------\n\nTITLE: Running Mobile Application on Android\nDESCRIPTION: This shell command executes the run command for the 'mobile' project on the Android platform using NX. The expected input is the command line syntax, and the intended output is the launch of the app on an Android emulator or device.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/run-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx run mobile:run-android\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Federation Dev Server for Basic Usage\nDESCRIPTION: The configuration snippet details setting up the Nx Module Federation Dev Server to serve a host application statically with associated remote applications. The configuration includes both production and development build targets, port setup, and public host URL. No live reloading is specified. Inputs include the build targets and output is the static serving of applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/module-federation-dev-server-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"serve\": {\n    \"executor\": \"@nx/angular:module-federation-dev-server\",\n    \"configurations\": {\n      \"production\": {\n        \"buildTarget\": \"host:build:production\"\n      },\n      \"development\": {\n        \"buildTarget\": \"host:build:development\"\n      }\n    },\n    \"defaultConfiguration\": \"development\",\n    \"options\": {\n      \"port\": 4200,\n      \"publicHost\": \"http://localhost:4200\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building React Native Application for Android\nDESCRIPTION: This command builds the React Native application named 'mobile' for release on the Android platform. It utilizes the Nx CLI to execute the `build-android` target, generating the necessary APK or AAB files for distribution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-native.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nnpx nx build-android mobile\n```\n\n----------------------------------------\n\nTITLE: Angular Application Commands\nDESCRIPTION: Common commands for managing an Angular application including serve, build, test, lint, and e2e testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx serve appName\nnx build appName\nnx test appName\nnx lint appName\nnx e2e appName\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for React Native Web\nDESCRIPTION: Custom webpack configuration to support React Native Web including font loading and babel configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nconst getWebpackConfig = require('@nrwl/react/plugins/webpack');\n\nfunction getCustomWebpackConfig(webpackConfig) {\n  const config = getWebpackConfig(webpackConfig);\n  const isProduction = webpackConfig.mode === 'production';\n\n  if (!isProduction) {\n    config.resolve.alias = {\n      'react-native': 'react-native-web',\n    };\n\n    config.module.rules.push(\n      {\n        test: /\\.ttf$/,\n        loader: require.resolve('file-loader'),\n        options: { esModule: false, name: 'static/media/[path][name].[ext]' },\n      },\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: function (content) {\n          return (\n            /node_modules/.test(content) &&\n            !/\\/react-native-elements\\//test(content) &&\n            !/\\/react-native-vector-icons\\//test(content) &&\n            !/\\/react-native-ratings\\//test(content)\n          );\n        },\n        use: {\n          loader: require.resolve('@nrwl/web/src/utils/web-babel-loader.js'),\n          options: {\n            presets: [\n              [\n                '@nrwl/react/babel',\n                {\n                  runtime: 'automatic',\n                  useBuiltIns: 'usage',\n                },\n              ],\n            ],\n            plugins: ['react-native-web'],\n          },\n        },\n      }\n    );\n  }\n\n  return config;\n}\n\nmodule.exports = getCustomWebpackConfig;\n```\n\n----------------------------------------\n\nTITLE: Initializing Nx for Angular-Rspack Migration\nDESCRIPTION: Command to initialize Nx at the root of your project. This step is required to access Angular generators including the convert-to-rspack generator. This step can be skipped if already using Nx version 20.6.0 or greater.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/migrate-from-webpack.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Svelte in tsconfig.json\nDESCRIPTION: TypeScript configuration to extend Svelte-specific tsconfig for better TypeScript support in Svelte projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-svelte.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@tsconfig/svelte/tsconfig.json\"\n  //... other configs\n}\n```\n\n----------------------------------------\n\nTITLE: Directory.Build.props configuration file\nDESCRIPTION: This XML file sets default property values for .NET projects in the workspace. It configures output paths, intermediate paths, and enables package restoration with lock files. It's imported early in the build order.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-dotnet.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!--\n  This file is imported early in the build order.\n  Use it to set default property values that can be overridden in specific projects.\n-->\n<Project>\n  <PropertyGroup>\n    <!-- Output path configuration -->\n    <RepoRoot>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)'))</RepoRoot>\n    <ProjectRelativePath>$([MSBuild]::MakeRelative($(RepoRoot), $(MSBuildProjectDirectory)))</ProjectRelativePath>\n    <BaseOutputPath>$(RepoRoot)dist/$(ProjectRelativePath)</BaseOutputPath>\n    <OutputPath>$(BaseOutputPath)</OutputPath>\n    <BaseIntermediateOutputPath>$(RepoRoot)dist/intermediates/$(ProjectRelativePath)/obj</BaseIntermediateOutputPath>\n    <IntermediateOutputPath>$(BaseIntermediateOutputPath)</IntermediateOutputPath>\n    <AppendTargetFrameworkToOutputPath>true</AppendTargetFrameworkToOutputPath>\n  </PropertyGroup>\n  <PropertyGroup>\n    <RestorePackagesWithLockFile>false</RestorePackagesWithLockFile>\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Run Target in Nx Project JSON\nDESCRIPTION: This snippet shows the configuration for the 'run-ios' target in the project.json file. It specifies the executor for running iOS apps in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/run-ios-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"mobile\",\n  //...\n  \"targets\": {\n    //...\n    \"run-ios\": {\n      \"executor\": \"@nx/react-native:run-ios\",\n      \"options\": {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing All Occurrences with RegExp in Nx\nDESCRIPTION: This code snippet demonstrates how to replace all occurrences of a string within a file using a regular expression. It uses the `replace` method with a regular expression to replace all instances of `thomasEdison` with `nikolaTesla`. The `g` flag in the regular expression ensures that all occurrences are replaced.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/modifying-files.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function (tree: Tree, schema: any) {\n  const filePath = `path/to/index.ts`;\n  const contents = tree.read(filePath).toString();\n  const newContents = contents.replace(/thomasEdison/g, 'nikolaTesla');\n  tree.write(filePath, newContents);\n}\n```\n\n----------------------------------------\n\nTITLE: Enable GitHub Release Creation - Workspace Level - JSON\nDESCRIPTION: This JSON snippet configures Nx Release to automatically create GitHub releases for the entire workspace. It sets the `release.changelog.workspaceChangelog.createRelease` property to `github` in the `nx.json` file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/automate-github-releases.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"changelog\": {\n      \"workspaceChangelog\": {\n        \"createRelease\": \"github\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vite Dev Server Configuration in project.json\nDESCRIPTION: Basic configuration for setting up the Vite dev server executor in project.json. Defines the serve target with build target configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/dev-server-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"my-app\": {\n    \"targets\": {\n        \"serve\": {\n            \"executor\": \"@nx/vite:dev-server\",\n            \"defaultConfiguration\": \"development\",\n            \"options\": {\n                \"buildTarget\": \"my-app:build\"\n            },\n            \"configurations\": {\n                ...\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Nx Cloud with CI Pipelines via GitHub Actions\nDESCRIPTION: This YAML snippet shows how to set up a CI pipeline using GitHub Actions to start a Nx Cloud CI run. It highlights the usage of different agent types for parallel task execution based on assignment rules and distribution configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/assignment-rules.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n---\njobs:\n  main:\n    name: Main Job\n    runs-on: ubuntu-latest\n    steps:\n      - ... # setup steps for your main job\n\n      - run: npx nx-cloud start-ci-run --distribute-on=\"manual\" --assignment-rules=\".nx/workflows/assignment-rules.yaml\" --stop-agents-after=\"e2e-ci\"\n\n      - ... # Nx commands you want to distribute\n\n  medium-agents:\n    name: Agents ${{ matrix.agent }}\n    runs-on:\n      group: medium-agents\n    strategy:\n      matrix:\n        agent: [1, 2, 3]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          cache: 'npm'\n\n      - ... # other setup steps you may need\n\n      - name: Install dependencies\n        run: npm ci --legacy-peer-deps\n\n      - name: Start Agent ${{ matrix.agent }}\n        run: npx nx-cloud start-agent\n        env:\n          NX_AGENT_NAME: ${{ matrix.agent }}\n          NX_AGENT_LAUNCH_TEMPLATE: 'linux-medium' # This value needs to match one of the 'runs-on' values defined in the assignment rules\n\n  large-agents:\n    name: Agents ${{ matrix.agent }}\n    runs-on:\n      group: large-agents\n    strategy:\n      matrix:\n        agent: [1, 2, 3]\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          cache: 'npm'\n\n      - ... # other setup steps you may need\n\n      - name: Install dependencies\n        run: npm ci --legacy-peer-deps\n\n      - name: Start Agent ${{ matrix.agent }}\n        run: npx nx-cloud start-agent\n        env:\n          NX_AGENT_NAME: ${{ matrix.agent }}\n          NX_AGENT_LAUNCH_TEMPLATE: 'linux-large' # This value needs to match one of the 'runs-on' values defined in the assignment rules\n```\n\n----------------------------------------\n\nTITLE: Configuring Remix output paths after migration\nDESCRIPTION: Code snippet showing how to customize the output paths in a Remix configuration file after migration to inferred tasks, by setting serverBuildPath and assetsBuildDirectory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/troubleshoot-convert-to-inferred.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nexport default {\n  assetsBuildDirectory: '../../dist/apps/demo/public/build',\n  serverBuildPath: '../../dist/apps/demo/build/index.js',\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular App Build and Serve Targets\nDESCRIPTION: Updates to the project.json file to configure build and serve targets for the Angular application. This enables the app to consume buildable library compiled output with proper configuration for production and development environments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nrwl/angular:webpack-browser\",\n      ...\n    },\n    \"serve\": {\n      \"executor\": \"@nrwl/web:file-server\",\n      \"configurations\": {\n        \"production\": {\n          \"buildTarget\": \"app1:build:production\"\n        },\n        \"development\": {\n          \"buildTarget\": \"app1:build:development\"\n        }\n      },\n      \"defaultConfiguration\": \"development\"\n    },\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Testing React Projects in Nx\nDESCRIPTION: Commands for running unit tests and E2E tests for React applications and libraries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react/documents/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx test my-new-app\nnx test my-new-lib\n\nnx e2e my-new-app-e2e\n```\n\n----------------------------------------\n\nTITLE: Conformance Configuration in nx.json\nDESCRIPTION: JSON configuration schema for setting up conformance rules in nx.json, including rule paths, options and project targeting\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/conformance/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"conformance\": {\n    \"rules\": [\n      {\n        /**\n         * Relative path to a local rule implementation or node_module path.\n         */\n        \"rule\": \"@nx/conformance/enforce-project-boundaries\",\n        /**\n         * Rule specific configuration options. (Optional)\n         */\n        \"options\": {},\n        /**\n         * The projects array allows users to opt in or out of violations for specific projects being reported by the current rule.\n         * The array can contain any valid matchers for findMatchingProjects(), by default the implied value is [\"*\"]. (Optional)\n         */\n        \"projects\": [\"*\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install @nx/react (Nx 18+)\nDESCRIPTION: Installs the @nx/react plugin for Nx workspaces (version 18 and above).  This command ensures the correct version of @nx/react is installed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react/react-plugin.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/react\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Nx 16 using nx migrate\nDESCRIPTION: Commands to upgrade an Nx workspace to version 16 using the nx migrate tool. This process updates dependencies and runs necessary migrations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-05-02-nx-16-is-here.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx migrate latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nnx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Run Nx Migrations (Shell)\nDESCRIPTION: This command executes any necessary migrations after updating the Nx dependencies. It ensures that the workspace code is compatible with the new Nx version and applies any required changes.  It should be run after `npx nx migrate latest`. \nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-05-02-nx-v14-is-out-here-is-all-you-need-to-know.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Export Project Graph to JSON\nDESCRIPTION: Command to export the project graph data to a JSON file for further analysis, providing detailed information about project dependencies and relationships\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/explore-graph.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx graph --file=output.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Theme for Buildable Library\nDESCRIPTION: This JavaScript snippet shows how to configure the Tailwind CSS theme in a buildable library to match the application theme, including custom colors and spacing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n...\n  theme: {\n    colors: {\n      primary: {\n        light: '#5eead4',\n        DEFAULT: '#14b8a6',\n        dark: '#0f766e',\n      },\n      secondary: {\n        light: '#bae6fd',\n        DEFAULT: '#0ea5e9',\n        dark: '#0369a1',\n      },\n      white: '#ffffff',\n      black: '#000000',\n    },\n    spacing: {\n      sm: '0.5rem',\n      md: '1rem',\n      lg: '1.5rem',\n      xl: '2rem',\n    },\n  },\n...\n```\n\n----------------------------------------\n\nTITLE: Project Configuration for Sync Generators\nDESCRIPTION: This JSON part of a project configuration shows how to utilize sync generators within a project. It includes build target options and registered sync generators like `@nx/js:typescript-sync`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/sync-generators.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"project\": {\n    \"name\": \"foo\",\n    \"data\": {\n      \"root\": \" packages/foo\",\n      \"projectType\": \"library\",\n      \"targets\": {\n        \"build\": {\n          \"dependsOn\": [\"^build\"],\n          \"cache\": true,\n          \"inputs\": [\n            \"{workspaceRoot}/tsconfig.base.json\",\n            \"{projectRoot}/tsconfig.lib.json\",\n            \"{projectRoot}/src/**/*.ts\"\n          ],\n          \"outputs\": [\"{workspaceRoot}/packages/foo/dist\"],\n          \"syncGenerators\": [\"@nx/js:typescript-sync\"],\n          \"executor\": \"nx:run-commands\",\n          \"options\": {\n            \"command\": \"tsc --build tsconfig.lib.json --pretty --verbose\"\n          }\n        }\n      }\n    }\n  },\n  \"sourceMap\": {\n    \"targets\": [\"packages/foo/tsconfig.ts\", \"@nx/js/typescript\"],\n    \"targets.build\": [\"packages/foo/tsconfig.ts\", \"@nx/js/typescript\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Mobile App on a Specific Device\nDESCRIPTION: This JSON configuration allows specifying a device name or UDID for running the mobile app on a specific simulator or emulator. It enhances control over testing environments by targeting specific devices.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/run-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"run-ios\": {\n      \"executor\": \"@nx/expo:run\",\n      \"options\": {\n        \"platform\": \"ios\",\n        \"device\": \"iPhone 14\"\n      }\n    },\n    \"run-android\": {\n      \"executor\": \"@nx/expo:run\",\n      \"options\": {\n        \"platform\": \"android\",\n        \"device\": \"Pixel_XL_API_Tiramisu\"\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Nx Migrate Command\nDESCRIPTION: The basic syntax for using the 'nx migrate' command. It can be run with an optional package and version argument.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/migrate.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate [packageAndVersion]\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Nx README Header\nDESCRIPTION: HTML markup for the README header of the Next.js plugin for Nx, including responsive logo display with dark/light mode support and project description.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"text-align: center;\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n</p>\n\n{{links}}\n\n<hr>\n\n# Nx: Smart Monorepos · Fast CI\n\nNx is a build system, optimized for monorepos, with plugins for popular frameworks and tools and advanced CI capabilities including caching and distribution.\n\nThis package is a [Next.js plugin for Nx](https://nx.dev/next/overview).\n\n{{content}}\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub CI Workflow with Nx\nDESCRIPTION: A YAML snippet defining a GitHub Actions CI workflow using Nx. The workflow includes tasks like linting, testing, building, and e2e checks across affected projects. Nx Cloud enables task distribution across machines.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-monorepo.md#2025-04-22_snippet_9\n\nLANGUAGE: yml\nCODE:\n```\nname: CI\n# ...\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          filter: tree:0\n\n      # This enables task distribution via Nx Cloud\n      # Run this command as early as possible, before dependencies are installed\n      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun\n      # Connect your workspace by running \"nx connect\" and uncomment this\n      - run: npx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\" --stop-agents-after=\"build\"\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n          cache: 'npm'\n      - run: npm ci --legacy-peer-deps\n      - uses: nrwl/nx-set-shas@v4\n      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected\n      - run: npx nx affected -t lint test build\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying to Fly.io\nDESCRIPTION: These commands build the Nx project and deploy it to Fly.io using the Fly CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/node-server-fly-io.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnx build\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace - Shell\nDESCRIPTION: This command initializes a new workspace using Nx, which supports project linking through various methods including package manager workspaces.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/typescript-project-linking.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Angular Service\nDESCRIPTION: Demonstrates how to access environment variables in an Angular service implementation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/use-environment-variables-in-angular.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ApiService {\n  constructor() {\n    console.log('API URL:', process.env.MY_ORG_API_URL);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying available project targets with Nx\nDESCRIPTION: Command to show all available targets that can be run for the 'angular-store' project using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/2-use-preset/_solution/angular-monorepo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx show project angular-store\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with TypeScript Preset (yarn)\nDESCRIPTION: Command to create a new Nx workspace with TypeScript preset using yarn\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/js/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn create nx-workspace my-org --preset=ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with Angular Module Federation\nDESCRIPTION: This example configures Webpack with Angular Module Federation using `withModuleFederation` from `@nx/angular/module-federation`. It uses `composePlugins` to combine `withModuleFederation` and a custom configuration. It assumes a `module-federation.config.js` file exists.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/webpack-plugins.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  composePlugins,\n  withModuleFederation,\n} = require('@nx/angular/module-federation');\n\n// Host config\n// e.g. { remotes: ['about', 'dashboard'] }\nconst moduleFederationConfig = require('./module-federation.config');\n\nmodule.exports = composePlugins(\n  withModuleFederation(moduleFederationConfig),\n  (config) => {\n    // Further customize webpack config\n    return config;\n  }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Complete Redux Component Test Example\nDESCRIPTION: Full example of testing a Redux-connected component with mock store.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-22-unit-testing-expo.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { render } from '@testing-library/react-native';\nimport { Provider } from 'react-redux';\nimport configureStore, { MockStoreEnhanced } from 'redux-mock-store';\nimport { RootState, initialRootState } from '@nx-expo-monorepo/states/cat';\n\nimport Bookmarks from './bookmarks';\n\ndescribe('Bookmarks', () => {\n  const mockStore = configureStore<RootState>([]);\n\n  let store: MockStoreEnhanced<RootState>;\n\n  beforeEach(() => {\n    store = mockStore(initialRootState);\n    store.dispatch = jest.fn();\n  });\n\n  it('should render successfully', () => {\n    const { container } = render(\n      <Provider store={store}>\n        <Bookmarks />\n      </Provider>\n    );\n    expect(container).toBeTruthy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Root TypeScript Configuration\nDESCRIPTION: Root level TypeScript configuration showing project references setup\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-29-new-nx-experience.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.base.json\",\n  \"compileOnSave\": false,\n  \"files\": [],\n  \"references\": [\n    {\n      \"path\": \"./packages/mytslib\"\n    },\n    {\n      \"path\": \"./apps/myviteapp\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Deploy Script in Package.json\nDESCRIPTION: Basic configuration that adds a deploy script to package.json, which can be used to deploy the built application to a hosting provider like Netlify.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"deploy\": \"netlify deploy --dir=dist\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Node.js Application with Frontend Proxy\nDESCRIPTION: Command to generate a Node.js application with proxy support for a frontend project. This enables API request proxying between projects in the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/node/documents/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/node:application apps/my-new-app \\\n--frontendProject my-react-app\n```\n\n----------------------------------------\n\nTITLE: Running Playwright E2E Tests in Nx\nDESCRIPTION: Commands to execute Playwright E2E tests in an Nx workspace, including options for selecting specific tests and running in UI mode.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/playwright/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx e2e <your-app-name>\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx e2e frontend-e2e --grep=\"**feat-a/**\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx e2e frontend-e2e --grepInvert=**feat-a/**\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx e2e <your-app-name> --ui\n```\n\n----------------------------------------\n\nTITLE: Executing First Release with Nx\nDESCRIPTION: This command shows how to execute the first release using the nx release command. It uses the --first-release flag but omits the --dry-run flag to actually perform the release process.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/3-manage-releases/1-manage-releases/content.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx release --first-release\n```\n\n----------------------------------------\n\nTITLE: Vite Build Output for Code-Split Application\nDESCRIPTION: Displays the output of a Vite build command for a code-split application. It shows how the bundler creates separate chunk files for different parts of the application, enabling more efficient loading.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-09-who-gave-js-a-build-step.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> vite build\n\nvite v5.4.11 building for production...\n✓ 42 modules transformed.\n../../dist/apps/my-webapp/index.html                   0.48 kB │ gzip:  0.30 kB\n../../dist/apps/my-webapp/assets/foo-DjRQIFuQ.js       0.16 kB │ gzip:  0.15 kB\n../../dist/apps/my-webapp/assets/bar-oew334y7.js       0.22 kB │ gzip:  0.19 kB\n../../dist/apps/my-webapp/assets/index-3-BhaWR_.js   177.96 kB │ gzip: 58.71 kB\n✓ built in 589ms\n```\n\n----------------------------------------\n\nTITLE: Basic Nx Release Command Usage\nDESCRIPTION: Basic usage of the nx release command for versioning and publishing applications and libraries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/release.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx release\n```\n\n----------------------------------------\n\nTITLE: Passing Command Arguments Directly in CLI Command\nDESCRIPTION: Running an Nx command with arguments passed directly as command line options. This method allows for one-off argument passing without modifying configuration files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/pass-args-to-commands.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-app --assetsInlineLimit=2048 --assetsDir=static/assets\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Package Exports in Nx\nDESCRIPTION: JSON configuration for defining additional entry points and generating exports field in a TypeScript package using Nx. This snippet shows how to set up multiple entry points for a TypeScript library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-12-28-highlights-2023.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-awesome-lib\",\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/js:tsc\",\n      ...\n      \"options\": {\n        \"main\": \"packages/my-awesome-lib/src/index.ts\",\n        ...\n        \"additionalEntryPoints\": [\"packages/my-awesome-lib/src/foo.ts\"],\n        \"generateExportsField\": true\n      },\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Button Component Implementation\nDESCRIPTION: TypeScript implementation of a simple button component with input properties for text, padding, and disabled state.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/plugin-angular.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'feature-ui-my-button',\n  standalone: true,\n  templateUrl: './my-button.component.html',\n  styleUrls: ['./my-button.component.css'],\n})\nexport class MyButtonComponent {\n  @Input() text = 'Click me!';\n  @Input() padding = 10;\n  @Input() disabled = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Remote Application\nDESCRIPTION: Simple Nx command to build a remote application using the project name\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/creating-a-remote.md#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnx build myremote\n```\n\n----------------------------------------\n\nTITLE: Implementing AddSetForm Component with GraphQL Mutation\nDESCRIPTION: React component that implements a form to add new Lego sets, using Apollo's useAddSetMutation hook to submit data and refetch the set list query after submission.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRef } from 'react';\nimport { useAddSetMutation } from './__generated__/operations';\n\nexport function AddSetForm() {\n  const formRef = useRef<HTMLFormElement>(null);\n  const [addSet] = useAddSetMutation({\n    refetchQueries: ['setList'],\n  });\n\n  const handleSubmit = (formData: FormData) => {\n    const name = formData.get('name')?.toString();\n    const year = formData.get('year')?.toString();\n    const numParts = parseInt(formData.get('numParts')?.toString() || '0', 10);\n\n    if (name && year && numParts > 0) {\n      addSet({ variables: { name, year, numParts } });\n    }\n    formRef.current?.reset();\n  };\n\n  return (\n    <form\n      ref={formRef}\n      action={handleSubmit}\n      className=\"mx-6 max-w-60 border border-slate-200 p-6\"\n    >\n      <label\n        htmlFor=\"name\"\n        className=\"block text-sm/6 font-medium text-gray-900\"\n      >\n        Name\n      </label>\n      <div className=\"mt-2\">\n        <input\n          id=\"name\"\n          name=\"name\"\n          type=\"text\"\n          className=\"block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6\"\n        />\n      </div>\n\n      <label\n        htmlFor=\"name\"\n        className=\"mt-2 block text-sm/6 font-medium text-gray-900\"\n      >\n        Year\n      </label>\n      <div className=\"mt-2\">\n        <input\n          id=\"year\"\n          name=\"year\"\n          type=\"text\"\n          className=\"block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6\"\n        />\n      </div>\n\n      <label\n        htmlFor=\"name\"\n        className=\"mt-2 block text-sm/6 font-medium text-gray-900\"\n      >\n        Number of Parts\n      </label>\n      <div className=\"mt-2\">\n        <input\n          id=\"numParts\"\n          name=\"numParts\"\n          type=\"number\"\n          className=\"block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"mt-6 rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n      >\n        Create new set\n      </button>\n    </form>\n  );\n}\n\nexport default AddSetForm;\n```\n\n----------------------------------------\n\nTITLE: Generating a React Native Library\nDESCRIPTION: This command generates a new React Native library named 'shared-ui-layout' within the 'libs' directory of the Nx workspace. It utilizes the `@nx/react-native:lib` generator provided by the `@nx/react-native` plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-native.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\nnpx nx g @nx/react-native:lib libs/shared-ui-layout\n```\n\n----------------------------------------\n\nTITLE: Custom Port Configuration for Vite Dev Server\nDESCRIPTION: Configuration example showing how to set a custom port (4200) for the Vite dev server in project.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/dev-server-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"my-app\": {\n    \"targets\": {\n        \"serve\": {\n            \"executor\": \"@nx/vite:dev-server\",\n            \"defaultConfiguration\": \"development\",\n            \"options\": {\n                \"buildTarget\": \"my-app:build\",\n                \"port\": 4200\n            },\n            \"configurations\": {\n                ...\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Buildable Library\nDESCRIPTION: Command to create a new buildable Angular library\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nrwl/angular:lib lib2 --buildable\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for Shared Preset\nDESCRIPTION: Updates the Tailwind configuration file to use a shared preset. This ensures consistent styling across the project by importing a common configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createGlobPatternsForDependencies } = require('@nrwl/angular/tailwind');\nconst { join } = require('path');\nconst sharedTailwindConfig = require('../../libs/tailwind-preset/tailwind.config');\n\nmodule.exports = {\n  presets: [sharedTailwindConfig],\n  content: [\n    join(__dirname, 'src/**/!(*.stories|*.spec).{ts,html}'),\n    ...createGlobPatternsForDependencies(__dirname),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Generating a New Workspace Lint Rule with Nx\nDESCRIPTION: This command generates a new workspace lint rule named `my-custom-rule`. The generated rule is placed in the `tools/eslint-rules/rules` directory. It uses the Nx CLI with the `@nx/eslint:workspace-rule` schematic.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/eslint/docs/workspace-rule-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"nx g @nx/eslint:workspace-rule my-custom-rule\"\n```\n\n----------------------------------------\n\nTITLE: Updating with Specific Version Constraints\nDESCRIPTION: Example of updating @nx/workspace to version 9.0.0 while specifying version 9.0.1 for @nx/react and @nx/angular if they are updated.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/migrate.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate @nx/workspace@9.0.0 --to=\"@nx/react@9.0.1,@nx/angular@9.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace for Node API\nDESCRIPTION: Command to initialize a new Nx workspace with Fastify framework and Docker support\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-02-28-bundling-a-node-api-with-fastify-esbuild-and-nx.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest \\\n--preset=node-standalone \\ # create a Node.js project\n--framework=fastify \\      # other options are express and koa\n--docker                   # we'll touch on this later on\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook for Nx 18+\nDESCRIPTION: Command to add Storybook to an Nx workspace version 18 or higher.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/storybook/plugin-overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/storybook\n```\n\n----------------------------------------\n\nTITLE: Using Nx Watch Command Syntax\nDESCRIPTION: This snippet shows the basic syntax for the new Nx Watch command that supports file-watching functionality.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-22-nx-15-4-vite-4-support-a-new-nx-watch-command-and-more.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx watch [projects modifier option] -- [command]\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Dependencies in nx.json\nDESCRIPTION: JSON configuration showing how to define that the build task should be run for all project dependencies first.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-08-02-nx-14-5-cypess-v10-output-globs-linter-perf-react-tailwind-support.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nx to Latest Version\nDESCRIPTION: Command to update an Nx workspace dependencies and code to the latest version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-22-nx-15-4-vite-4-support-a-new-nx-watch-command-and-more.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Content Sources\nDESCRIPTION: This JavaScript configuration example demonstrates setting up the content source paths for Tailwind CSS in an Angular project within Nx. The `content` property identifies files for Tailwind CSS to process using glob patterns, including dynamic patterns based on project dependencies using the `createGlobPatternsForDependencies` utility function from Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-with-angular-projects.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createGlobPatternsForDependencies } = require('@nx/angular/tailwind');\nconst { join } = require('path');\n\nmodule.exports = {\n  content: [\n    join(__dirname, 'src/**/!(*.stories|*.spec).{ts,html}'),\n    ...createGlobPatternsForDependencies(__dirname),\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Generating a Qwik Application in Nx\nDESCRIPTION: Command to generate a new Qwik application named 'todo' using the qwik-nx plugin's application generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-15-qwikify-your-dev.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g qwik-nx:app todo\n```\n\n----------------------------------------\n\nTITLE: Running exec Command from Terminal\nDESCRIPTION: Shows various examples of using the 'nx exec' command in the terminal to execute commands across all projects in the workspace. It includes examples of running TypeScript compiler and echoing environment variables.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/cli/exec.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx exec -- <command> [..args] # runs the command in all projects\nnx exec -- tsc\nnx exec -- echo \\$NX_PROJECT_NAME\nnx exec -- echo \\$NX_PROJECT_ROOT_PATH\n```\n\n----------------------------------------\n\nTITLE: Customizing Vite Config Path in project.json\nDESCRIPTION: This example shows how to set a custom path for the vite.config.ts file in the project.json. It allows specifying a different location for the Vite configuration file, which Nx will use instead of the default location.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/build-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my-app\": {\n    \"targets\": {\n      \"build\": {\n        \"executor\": \"@nx/vite:build\",\n        \"options\": {\n          \"outputPath\": \"dist/apps/my-app\",\n          \"configFile\": \"apps/my-app/vite.config.other-path.ts\"\n        },\n        \"configurations\": {}\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting CI Run with Dynamic Agents in GitHub Actions (YAML)\nDESCRIPTION: This snippet demonstrates how to start an Nx Cloud CI run with dynamically allocated agents, referencing the distribution configuration file. The `distribute-on` flag points to the `.nx/workflows/distribution-config.yaml` file, allowing Nx Cloud to determine the number of agents based on the PR size.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/features/dynamic-agents.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\n...\njobs:\n  - job: main\n    name: Main Job\n    ...\n    steps:\n      ...\n      - run: npx nx-cloud start-ci-run --distribute-on=\".nx/workflows/distribution-config.yaml\" --stop-agents-after=\"e2e-ci\"\n      - ...\n\n```\n\n----------------------------------------\n\nTITLE: Example: GitLab Owners Configuration in Nx\nDESCRIPTION: This example shows a complete GitLab owners configuration in Nx. It demonstrates the use of GitLab-specific features like sections, default owners, and required approvals, along with patterns for assigning owners to projects and files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/owners/owners-plugin.md#2025-04-22_snippet_10\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"owners\": {\n    \"format\": \"gitlab\",\n    // defaults to \".gitlab/CODEOWNERS\"\n    \"outputPath\": \"CODEOWNERS\",\n    \"patterns\": [\n      {\n        \"description\": \"Joe should double check all changes to rust code\",\n        \"projects\": [\"tag:rust\"],\n        \"owners\": [\"@joelovesrust\"]\n      },\n      {\n        \"description\": \"CI Workflows\",\n        \"files\": [\".github/workflows/**/*\"],\n        \"owners\": [\"@devops\"]\n      }\n    ],\n    \"sections\": [\n      {\n        \"name\": \"Finance\",\n        \"defaultOwners\": [\"@finance-team\"],\n        \"numberOfRequiredApprovals\": 2,\n        \"patterns\": [\n          {\n            \"description\": \"The Finance team owns these projects\",\n            \"projects\": [\"finance-*\"]\n          },\n          {\n            \"description\": \"Alice, Bob and Cecil work together on these projects\",\n            \"projects\": [\"admin\", \"booking\", \"cart\"],\n            \"owners\": [\"@alice\", \"@bob\", \"@cecil\"]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CircleCI Custom Step for Version Plan Checks (YAML)\nDESCRIPTION: This YAML snippet demonstrates a custom CircleCI workflow step for invoking the version plan checks within continuous integration. This allows developers to ensure that the necessary version plans are in place based on the changes pushed to the repository.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/file-based-versioning-version-plans.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# ...other steps\n- nx/set-shas\n\n```\n\n----------------------------------------\n\nTITLE: Configuring CI Pipeline Tasks in YAML\nDESCRIPTION: Example of CI pipeline configuration showing how to handle parallel task execution for different target types.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-08-01-nx-19-5-update.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- run: npx nx affected -t lint test build\n- run: npx nx affected --parallel 1 -t e2e-ci\n```\n\n----------------------------------------\n\nTITLE: Configuring Smart Dependency Updates\nDESCRIPTION: JSON configuration for controlling how projects are marked as affected by dependency updates in package manager lock files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/using-nx/affected.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pluginsConfig\": {\n    \"@nx/js\": {\n      \"projectsAffectedByDependencyUpdates\": \"auto\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Nx Workspace with React Router\nDESCRIPTION: Command to create a new Nx workspace with React specified as the stack, configuring it to use React Router for server-side rendering.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-router.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest acme --preset=apps\n```\n\n----------------------------------------\n\nTITLE: Generate Static Next.js Page\nDESCRIPTION: This command generates a static page named `MyPage` at the specified path `apps/my-app/pages/my-page/page.tsx`. It leverages the Nx CLI's `page` generator to create the necessary files and directory structure for a static Next.js page.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/page-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"nx g page apps/my-app/pages/my-page\"\n```\n\n----------------------------------------\n\nTITLE: Generating Node App with Webpack in Nx\nDESCRIPTION: This command generates a new Node application configured to use Webpack in an existing Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/webpack/documents/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/node:app apps/my-app --bundler=webpack\n```\n\n----------------------------------------\n\nTITLE: Configuring Cacheable Operations in Nx Configuration\nDESCRIPTION: Example nx.json configuration file that defines which operations should be cached for performance improvements. This setup enables caching for build and test operations in a Lerna workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-10-12-lerna-reborn-whats-new-in-v6.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasksRunnerOptions\": {\n    \"default\": {\n      \"runner\": \"nx/tasks-runners/default\",\n      \"options\": {\n        \"cacheableOperations\": [\"build\", \"test\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Init Generator Schema in TypeScript\nDESCRIPTION: TypeScript interface definition for the init generator schema, which doesn't require any options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/tooling-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InitGeneratorSchema {}\n```\n\n----------------------------------------\n\nTITLE: Generating Component with Different Symbol Name\nDESCRIPTION: This command generates a component called 'CustomComponent' while specifying a different name parameter. This allows for greater flexibility in naming conventions.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/component-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:component apps/my-app/src/lib/my-component/my-component --name=custom\n```\n\n----------------------------------------\n\nTITLE: Generating Cypress Component Test with Nx CLI\nDESCRIPTION: The code snippet demonstrates the use of Nx CLI to generate a Cypress component test file for an Angular component. It requires Nx and Cypress version 10.7.0 or higher. Key parameters include the project name, the component name, directory, and file name. The generated test file will have a `.cy.ts` suffix and is intended to be placed alongside the component file.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/component-test-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:component-test --project=my-cool-angular-project --componentName=CoolBtnComponent --componentDir=src/cool-btn --componentFileName=cool-btn.component\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Project.json Plugin in TypeScript\nDESCRIPTION: This example demonstrates a simplified version of Nx's built-in project.json plugin. It adds projects to the graph by detecting project.json files and creating project configurations from them.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/project-graph-plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createNodesFromFiles, readJsonFile } from '@nx/devkit';\nimport { dirname } from 'path';\n\nexport interface MyPluginOptions {}\n\nexport const createNodesV2: CreateNodesV2<MyPluginOptions> = [\n  '**/project.json',\n  async (configFiles, options, context) => {\n    return await createNodesFromFiles(\n      (configFile, options, context) =>\n        createNodesInternal(configFile, options, context),\n      configFiles,\n      options,\n      context\n    );\n  },\n];\n\nasync function createNodesInternal(\n  configFilePath: string,\n  options: MyPluginOptions,\n  context: CreateNodesContextV2\n) {\n  const projectConfiguration = readJsonFile(configFilePath);\n  const root = dirname(configFilePath);\n\n  // Project configuration to be merged into the rest of the Nx configuration\n  return {\n    projects: {\n      [root]: projectConfiguration,\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Manual E2E Project Splitting - project.json\nDESCRIPTION: Illustrates how to use `implicitDependencies` and `dependsOn` to ensure that E2E tests for a specific feature only run when that feature's library is affected. The `dependsOn` target is also configured to ensure the application is built before E2E tests are executed. This avoids unnecessary test executions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-04-23-test-splitting-techniques.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"implicitDependencies\": [\"checkout\"],\n  \"targets\": {\n    \"e2e\": {\n      \"dependsOn\": [\"^build\", { \"target\": \"build\", \"projects\": \"app\" }]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Custom Plugin\nDESCRIPTION: Generates a new custom plugin using the `@nx/plugin` package. The command specifies the plugin's location and import path.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-10-tailoring-nx-for-your-organization.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g plugin packages/nx-plugin --importPath=@org/nx-plugin\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Test Task in Nx\nDESCRIPTION: This snippet demonstrates how to define a custom test task in the project's package.json to run the AVA test tool. AVA must be installed as a dependency.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/common-tasks.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\"scripts\":{\"test\":\"ava\"}}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Nx Cloud\nDESCRIPTION: This command connects the repository to Nx Cloud, enabling remote caching and task distribution features.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-existing-project.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx connect\n```\n\n----------------------------------------\n\nTITLE: Running Cypress E2E Tests in Nx\nDESCRIPTION: Command to execute Cypress E2E tests in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/docs/cypress-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx e2e my-app-e2e\n```\n\n----------------------------------------\n\nTITLE: Setting Nx Activation Key via Environment Variable\nDESCRIPTION: Environment variable configuration for storing the Nx activation key, useful for public repositories or CI environments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/shared-fs-cache/shared-fs-cache-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nNX_KEY=YOUR_ACTIVATION_KEY\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nx Workspace for Remix Applications\nDESCRIPTION: Creates a new Nx workspace with the basic apps preset using the create-nx-workspace command. This sets up the foundational structure for hosting Remix applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/remix.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest acme --preset=apps\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Manager Version in Nx Cloud\nDESCRIPTION: Illustrates how to specify a particular version of a package manager (yarn or pnpm) for use in Nx Cloud workflows using the package.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageManager\": \"yarn@4.1.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with PNPM\nDESCRIPTION: An example shell command using PNPM to execute test scripts across packages in a workspace, allowing for the independent use of PNPM along with Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-monorepo.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npnpm run -r test\n```\n\n----------------------------------------\n\nTITLE: Using dotnet-lib's WeatherForecast in my-api\nDESCRIPTION: This code snippet updates the `WeatherForecastController.cs` file in the `my-api` application to use the `WeatherForecast` class from the `DotnetLib` namespace. This demonstrates how to use code from a library within an application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-dotnet.md#_snippet_14\n\nLANGUAGE: c#\nCODE:\n```\nusing Microsoft.AspNetCore.Mvc;\nusing DotnetLib;\n\nnamespace MyApi.Controllers;\n\n// the rest of the file is unchanged\n```\n\n----------------------------------------\n\nTITLE: Executor Options Construction - JavaScript\nDESCRIPTION: This snippet illustrates how executor options are constructed in JavaScript by merging default options with selected configurations and command line arguments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/executors-and-configurations.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(`@nx/jest`).executors['jest']({\n  ...options,\n  ...selectedConfiguration,\n  ...commandLineArgs,\n}); // Pseudocode\n```\n\n----------------------------------------\n\nTITLE: Basic Signal Usage in Angular Component\nDESCRIPTION: Demonstrates basic usage of Angular Signals in a component with reactive updates and effects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-16-angular-state-management-2025.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  template: `\n    <p>Hello, {{ name() }}</p>\n    <button (click)=\"updateName()\">Update</button>\n  `,\n})\nexport class MessageComponent {\n  name = signal('World');\n  constructor() {\n    effect(() => {\n      console.log('Name has changed: ', this.name());\n    });\n  }\n  updateName() {\n    this.name.set('Mike');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks in project.json for Nx\nDESCRIPTION: Example of defining build and test tasks in a project.json file, showing both command-based and executor-based task configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/run-tasks.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"root\": \"libs/mylib\",\n  \"targets\": {\n    \"build\": {\n      \"command\": \"tsc -p tsconfig.lib.json\"\n    },\n    \"test\": {\n      \"executor\": \"@nx/jest:jest\",\n      \"options\": {\n        /* ... */\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Publishable Angular Library with Tailwind CSS\nDESCRIPTION: Creates a new publishable Angular library with Tailwind CSS support using the Nx CLI. This command sets up the library structure and necessary configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nrwl/angular:lib lib3 --publishable --importPath=@angular-tailwind-nx/lib3 --addTailwind\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript Type Definitions for Environment Variables\nDESCRIPTION: TypeScript declaration file that defines types for environment variables to prevent type-checking errors during build.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/use-environment-variables-in-angular.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const MY_API_URL: string;\n```\n\n----------------------------------------\n\nTITLE: Define Test Target with Dependencies - JSON\nDESCRIPTION: This JSON snippet demonstrates how to define a 'test' target in an Nx project configuration. It specifies the executor, output path, and a dependency on the '^test' target, indicating that the test task depends on the test tasks of its dependencies. The options section configures the Jest test runner.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/mental-model.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"test\": {\n    \"executor\": \"@nx/jest:jest\",\n    \"outputs\": [\"{workspaceRoot}/coverage/apps/app1\"],\n    \"dependsOn\": [\"^test\"],\n    \"options\": {\n      \"jestConfig\": \"apps/app1/jest.config.js\",\n      \"passWithNoTests\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nx Commands with Cloud Integration\nDESCRIPTION: YAML configuration showing how to run Nx commands that are automatically integrated with Nx Cloud for task distribution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/intro/connect-to-cloud.md#2025-04-22_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\n- run: npx nx-cloud record -- node tools/custom-script.js\n- run: npx nx affected -t lint test build e2e-ci\n```\n\n----------------------------------------\n\nTITLE: Generating Nx Web App with Playwright\nDESCRIPTION: Command to create a new frontend application with Playwright as the e2e test runner.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/playwright/playwright-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/web:app apps/frontend --e2eTestRunner=playwright\n```\n\n----------------------------------------\n\nTITLE: Adding Node.js Version as Runtime Input for All Tasks\nDESCRIPTION: Configuration example showing how to add the Node.js version as a runtime input to the sharedGlobals named input. This ensures that the Node.js version is considered when calculating the hash for every task in the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/configure-inputs.md#2025-04-22_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"namedInputs\": {\n    \"default\": [\"{projectRoot}/**/*\", \"sharedGlobals\"],\n    \"sharedGlobals\": [{ \"runtime\": \"node --version\" }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nx Plugins to Latest Version\nDESCRIPTION: Example of updating all Nx plugins to the latest version, which generates a migrations.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/migrate.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate latest\n```\n\n----------------------------------------\n\nTITLE: Running the Nx Project Graph Visualization\nDESCRIPTION: Command to analyze and visualize a monorepo's project dependencies using Nx graph, which works even in repositories not using Nx as their primary build tool. This provides insight into project relationships without requiring full Nx setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-06-09-nx-14-2-angular-v14-storybook-update-lightweight-nx-and-more.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx graph\n```\n\n----------------------------------------\n\nTITLE: Interactive Migration in Nx with Version Selection\nDESCRIPTION: Command to run an interactive migration in Nx, allowing users to choose which dependencies to update. The example shows selecting TypeScript v5.2 while opting out of updating Angular to v17.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-12-20-nx-17-2-release.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate latest --interactive\n✔ Do you want to update to TypeScript v5.2? (Y/n) · true\n✔ Do you want to update the Angular version to v17? (Y/n) · false\n\n >  NX   The migrate command has run successfully.\n\n   - package.json has been updated.\n   - migrations.json has been generated.\n\n >  NX   Next steps:\n\n   - Run 'nx migrate --run-migrations'\n```\n\n----------------------------------------\n\nTITLE: Configuring Owners for GitHub in Nx\nDESCRIPTION: This snippet demonstrates how to configure code ownership for GitHub in an Nx project. It includes options for specifying the format, output path, and patterns for assigning owners to projects or files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/owners/owners-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // Can be set to true instead of an object to accept all defaults\n  \"owners\": {\n    // Options are `github`, `bitbucket` or `gitlab`. (Optional) Defaults to `github`\n    \"format\": \"github\",\n    // (Optional) Default changes based on format: `.github/CODEOWNERS`, `.bitbucket/CODEOWNERS`, `.gitlab/CODEOWNERS`\n    \"outputPath\": \"CODEOWNERS\",\n    // (Optional)\n    \"patterns\": [\n      {\n        \"description\": \"A description of the rule\",\n        \"owners\": [\"@joelovesrust\"],\n        // specify either projects or files, not both\n        // Can be any project specifier that could be used in `nx run-many`\n        // See https://nx.dev/nx-api/nx/documents/run-many\n        \"projects\": [\"my-rust-app\", \"rust-*\", \"tag:rust\"],\n        // File globs\n        \"files\": [\".github/workflows/**/*\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging Projects in project.json with Nx\nDESCRIPTION: This code snippet shows how to assign tags to a project in its `project.json` file. Tags are used by Nx to define boundaries and enforce dependency rules. The `tags` property is an array of strings representing the tags for the project. This example shows tags for the `shared-ui` library.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/11-module-boundaries/content.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"tags\": [\"type:ui\", \"scope:shared\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Transitive Dependencies in Nx\nDESCRIPTION: ESLint configuration to prevent the usage of transitive dependencies in Nx projects by enabling the banTransitiveDependencies flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-12-17-mastering-the-project-boundaries-in-nx.md#2025-04-22_snippet_5\n\nLANGUAGE: json5\nCODE:\n```\n{\n  '@nrwl/nx/enforce-module-boundaries': [\n    'error',\n    {\n      banTransitiveDependencies: true,\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Nx Workspace Command\nDESCRIPTION: Command to add Nx to any workspace by installing nx and creating nx.json configuration file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/commands.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx init\n```\n\n----------------------------------------\n\nTITLE: Project-specific Vite Configuration for Storybook\nDESCRIPTION: This example demonstrates how to add a project-specific Vite configuration in a project's Storybook main file, allowing you to customize the Vite build process with a specific viteConfigPath.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/custom-builder-configs.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/react-vite';\nimport { mergeConfig } from 'vite';\n\nconst config: StorybookConfig = {\n  stories: ...,\n  addons: ...,\n  framework: {\n    name: '@storybook/react-vite',\n    options: {\n      builder: {\n        viteConfigPath: 'apps/web/vite.config.ts',\n      },\n    },\n  },\n  async viteFinal(config, { configType }) {\n    return mergeConfig(config, {\n      ... <your config here>\n    });\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: NX Android Build Command\nDESCRIPTION: Command line instruction to execute the Android build using NX CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/build-android-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx run mobile:build-android\n```\n\n----------------------------------------\n\nTITLE: Generate Storybook Configuration for UI Project\nDESCRIPTION: Generates Storybook configuration for a UI project using TypeScript for configuration files in the .storybook directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nuxt/docs/storybook-configuration-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/nuxt:storybook-configuration ui\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Nx Tasks in Parallel\nDESCRIPTION: This command demonstrates how to run multiple Nx tasks (test, lint, and build) in parallel using the run-many command.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/9-run-many/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many -t test lint build\n```\n\n----------------------------------------\n\nTITLE: Configuring CI Access Token for Nx < 17 in JSON\nDESCRIPTION: This snippet shows how to configure the CI Access Token in nx.json for Nx versions below 17. It sets up the 'tasksRunnerOptions' with the 'nx-cloud' runner and includes the access token.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/config.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"tasksRunnerOptions\": {\n    \"default\": {\n      \"runner\": \"nx-cloud\",\n      \"options\": {\n        \"accessToken\": \"SOMETOKEN\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Generating an Angular Service (Fallback)\nDESCRIPTION: This command demonstrates how Nx automatically falls back to @schematics/angular if a generator is not found in @nx/angular. It creates an Angular service in the specified location.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/angular/angular-plugin.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n\"nx g @nx/angular:service apps/appName/src/lib/my-service/my-service\"\n```\n\n----------------------------------------\n\nTITLE: Running React Native Application on Android\nDESCRIPTION: This command runs the React Native application named 'mobile' on an Android simulator or connected device. It uses the Nx CLI to execute the `run-android` target, which handles building and deploying the application to the Android environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-native.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpx nx run-android mobile\n```\n\n----------------------------------------\n\nTITLE: Modifying the Base Rspack Configuration\nDESCRIPTION: Example showing how to override parts of the Rspack configuration while setting up an Angular application, such as changing the mode to development.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rspack/create-config.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@nx/angular-rspack';\n\nexport default createConfig({\n  options: {\n    browser: './src/main.ts',\n    server: './src/main.server.ts',\n    ssrEntry: './src/server.ts',\n  },\n  rspackConfigOverrides: {\n    mode: 'development',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Output of Cached Nx Tasks\nDESCRIPTION: This snippet shows the output of running multiple Nx tasks when cached results are available. It demonstrates how Nx uses cached outputs to improve execution speed.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/9-run-many/content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n...\n   ✔  nx run inventory:lint  [existing outputs match the cache, left as is]\n   ✔  nx run ui:lint  [existing outputs match the cache, left as is]\n   ✔  nx run angular-store-e2e:lint  [existing outputs match the cache, left as is]\n   ✔  nx run inventory-e2e:lint  [existing outputs match the cache, left as is]\n   ✔  nx run ui:test  [existing outputs match the cache, left as is]\n\n——————————————————————————————————————————————————————\n\nNX   Successfully ran targets test, lint, e2e for 7 projects (279ms)\n\nNx read the output from the cache instead of running the command for 10 out of 10 tasks.\n```\n\n----------------------------------------\n\nTITLE: Serving Angular store application with checkout file watching\nDESCRIPTION: This command serves the Angular store application and watches for changes in the checkout application. It enables development on the remote 'checkout' application while serving through the host.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation-with-ssr.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx serve-ssr store --devRemotes=checkout\n```\n\n----------------------------------------\n\nTITLE: Generating a Qwik Library in Nx\nDESCRIPTION: Command to generate a new Qwik library named 'data-access' using the qwik-nx plugin's library generator, which will hold state management logic.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-15-qwikify-your-dev.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx g qwik-nx:lib data-access\n```\n\n----------------------------------------\n\nTITLE: Providing esbuild plugins - JSON Configuration\nDESCRIPTION: This JSON snippet demonstrates how to configure the Nx Angular executor to include esbuild plugins. It specifies a list of plugins that can be used during the build process, detailing the paths to the plugin files or objects that provide additional options.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/application-executor-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/angular:application\",\n      \"options\": {\n        ...\n        \"plugins\": [\n          \"apps/my-app/plugins/plugin1.js\",\n          {\n            \"path\": \"apps/my-app/plugins/plugin2.js\",\n            \"options\": {\n              \"someOption\": \"some value\"\n            }\n          }\n        ]\n      }\n    }\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Federate Module Generator\nDESCRIPTION: Command to generate a federated module from any Nx project, specifying the path, module name, and remote name.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-10-20-nx-17-release.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> nx g federate-module <path to module to be exposed> --name=<module name> --remote=<name of remote exposing module>\n```\n\n----------------------------------------\n\nTITLE: Adding Nx Support to Existing Angular CLI Project\nDESCRIPTION: Command to add Nx support to an existing Angular CLI project. This allows for gradual adoption of Nx features in an existing Angular application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-18-architecting-angular-applications.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx init\n```\n\n----------------------------------------\n\nTITLE: Passing Command Arguments Using the --args Option in CLI\nDESCRIPTION: Running an Nx command with arguments passed using the --args option. This approach is useful when argument names conflict with Nx CLI options or when you need to pass complex arguments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/pass-args-to-commands.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-app --args=\"--assetsInlineLimit=2048 --assetsDir=static/assets\"\n```\n\n----------------------------------------\n\nTITLE: Starting Nx Cloud CI Run with Distributed Agents\nDESCRIPTION: This command initiates an Nx Cloud CI run, distributing tasks across 3 Linux-based JavaScript agents. It demonstrates how to set up the new task-based execution model in Nx Cloud.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-03-21-reliable-ci.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Tasks\nDESCRIPTION: Demonstrates the JSON configuration for specifying which environment files Nx should load for a given task. The example highlights setting up a 'development' configuration for a 'build' task to ensure specific environment variables are used.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/define-environment-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      // ...\n      \"configurations\": {\n        \"development\": {}\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Nx to Include All package.json Files\nDESCRIPTION: This configuration allows Nx to recognize and include all `package.json` files within the workspace as individual projects. By adding the `nx/plugins/package-json` plugin, Nx will treat each `package.json` file as a project, regardless of whether it is listed in the workspaces configuration. This is useful for monorepos where not all packages are explicitly listed in the root `package.json`'s workspaces field.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/include-all-packagejson.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"nx/plugins/package-json\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Vite Plugin\nDESCRIPTION: Commands to add the Nx Vite plugin to an existing workspace, with optional TypeScript paths setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/vite/vite-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/vite\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/vite --setupPathsPlugin\n```\n\n----------------------------------------\n\nTITLE: Executing Nx TSC in Batch Mode\nDESCRIPTION: This example demonstrates how to run the `@nx/js:tsc` executor in batch mode using the `--batch` flag.  Batch mode leverages TypeScript's incremental build APIs for faster build times, especially with larger task graphs. Setting `clean` to `false` can further optimize performance by preserving the `.tsbuildinfo` file.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/tsc-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx build ts-lib --batch\n```\n\n----------------------------------------\n\nTITLE: Generating CI Workflow with Nx in Shell\nDESCRIPTION: This snippet demonstrates how to generate a CI workflow file using Nx for a GitHub Actions setup. It requires having Nx and Node.js installed. It generates a `.github/workflows/ci.yml` file and will use `nx affected` to run CI tasks only for projects impacted by the current PR. This optimizes the CI process by narrowing the focus to directly affected projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/typescript-packages.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate ci-workflow --ci=github\n```\n\n----------------------------------------\n\nTITLE: Generating React Host and Remote Applications with Nx\nDESCRIPTION: This snippet shows how to generate a host application (shell) with remotes (shop, cart) and a remote application (about) using the Nx CLI with React. It leverages the `@nx/react:host` and `@nx/react:remote` generators to scaffold the necessary project structure and configurations for a Micro Frontend architecture.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/micro-frontend-architecture.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:host apps/shell --remotes=shop,cart\nnx g @nx/react:remote apps/about --host=shell\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generation in nx.json\nDESCRIPTION: Updates the Nx configuration to enable caching for the codegen target, specify outputs and inputs, and establish dependencies between projects to ensure code generation runs in the correct order.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n  \"targetDefaults\": {\n  ...\n  \"codegen\": {\n      \"cache\": true,\n      \"outputs\": [\"{projectRoot}/src/__generated__\"],\n      \"inputs\": [\"{workspaceRoot}/libs/models-graphql/src/lib/schema.graphql\",\"{projectRoot}/**/*.graphql\"],\n      \"dependsOn\": [\"^codegen\"]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: CI Workflow Configuration (YAML)\nDESCRIPTION: This YAML code snippet shows the key parts of the generated CI workflow file.  It defines the triggers, jobs, and steps for the CI pipeline, including checking out the code, setting up Java and Gradle, and running affected tasks using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_18\n\nLANGUAGE: yml\nCODE:\n```\nname: CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\npermissions:\n  actions: read\n  contents: read\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          filter: tree:0\n\n      # This enables task distribution via Nx Cloud\n      # Run this command as early as possible, before dependencies are installed\n      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun\n      # Uncomment this line to enable task distribution\n      # - run: npx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-jvm\" --stop-agents-after=\"build\"\n\n      - name: Set up JDK 21 for x64\n        uses: actions/setup-java@v4\n        with:\n          java-version: '21'\n          distribution: 'temurin'\n          architecture: x64\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - uses: nrwl/nx-set-shas@v4\n\n      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected\n      - run: ./nx affected -t test build\n```\n\n----------------------------------------\n\nTITLE: Dynamic Project Tag Building\nDESCRIPTION: Using the current project name in the build command with dynamic tagging.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/affected.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t build --tag=$NX_TASK_TARGET_PROJECT:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Nitro for Vercel Deployment in Nuxt\nDESCRIPTION: This snippet shows how to configure the nitro property in nuxt.config.ts for Vercel deployment. It sets the preset to 'vercel' and specifies the output directory for the build.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/deploy-nuxt-to-vercel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  nitro: {\n    preset: 'vercel',\n    output:{\n      dir: '../../.vercel/output'\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Generate Storybook Configuration for UI Project\nDESCRIPTION: Example command showing how to generate Storybook configuration for a specific UI project using TypeScript configuration files\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/storybook-configuration-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react:storybook-configuration ui\n```\n\n----------------------------------------\n\nTITLE: Accessing Project Root Path with exec\nDESCRIPTION: Illustrates how to use 'nx exec' to echo the current project's root path using the $NX_PROJECT_ROOT_PATH environment variable.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/cli/exec.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnx exec -- echo \\$NX_PROJECT_ROOT_PATH\n```\n\n----------------------------------------\n\nTITLE: Setting Default Command Arguments with 'args' Option in nx.json\nDESCRIPTION: Configuring target defaults in nx.json using the 'args' array to provide command arguments for all projects. This approach applies the same arguments to all targets with the specified name across the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/pass-args-to-commands.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"build\": {\n      \"options\": {\n        \"args\": [\"--assetsInlineLimit=2048\", \"--assetsDir=static/assets\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Create React App to Nx\nDESCRIPTION: Command to convert an existing Create React App project to an Nx-based setup. You can specify options like disabling Vite or using integrated monorepo mode.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-02-09-setup-react-and-tailwind-the-easy-way.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Creating Node.js Libraries with @nx/node\nDESCRIPTION: Commands to generate Node.js libraries using the @nx/node plugin. Includes options for creating buildable and publishable libraries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/node/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/node:lib libs/my-new-lib\n\n# If you want the library to be buildable or publishable to npm\nnx g @nx/node:lib libs/my-new-lib --buildable\nnx g @nx/node:lib libs/my-new-lib \\\n--publishable \\\n--importPath=@myorg/my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Defining Output Paths in Nx Task Configuration\nDESCRIPTION: Various examples of how to specify output file paths in Nx task configurations, including directory paths, file paths, glob patterns, and interpolated paths based on project properties.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/configure-outputs.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n\"outputs\": [\n  \"{projectRoot}/dist/libs/mylib\", // A directory\n  \"{workspaceRoot}/dist/{projectRoot}\", // A directory based on the project's root\n  \"{workspaceRoot}/dist/{projectName}\", // A directory based on the project's name\n  \"{workspaceRoot}/test-results.xml\", // A file\n  \"{projectRoot}/dist/libs/mylib/**/*.js\", // A glob pattern matching a set of files\n  \"{options.outputPath}\", // A path defined in the options of a task\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling NPM Provenance in Github Actions Workflow\nDESCRIPTION: This snippet demonstrates how to enable npm provenance within a GitHub Actions workflow. It configures the job's permissions to allow writing the id-token, and sets the `NPM_CONFIG_PROVENANCE` environment variable to `true` during the `nx release publish` step.  This is necessary to generate provenance statements for published packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/publish-in-ci-cd.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n  test:\n    name: Publish\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      id-token: write # needed for provenance data generation\n```\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Publish packages\n  run: npx nx release publish\n  shell: bash\n  env:\n    NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}\n    NPM_CONFIG_PROVENANCE: true\n```\n\n----------------------------------------\n\nTITLE: Generating JavaScript Stories\nDESCRIPTION: This command generates Storybook stories for components in the 'ui' project using JavaScript files (.stories.js) instead of TypeScript files (.stories.ts or .stories.tsx).\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vue/docs/stories-examples.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/vue:stories --name=ui --js=true\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog with Nx Release Command\nDESCRIPTION: This command generates a changelog for one or more projects using the Nx release tool. It can optionally push the changes to Github. The [version] parameter is optional and can be used to specify a particular version for the changelog.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/release.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx release changelog [version]\n```\n\n----------------------------------------\n\nTITLE: Run E2E Tests\nDESCRIPTION: Executes end-to-end (E2E) tests for a React application. The command runs the configured E2E test runner (e.g., Cypress) for the specified project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react/react-plugin.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnx e2e my-new-app-e2e\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Build for Docs Mode\nDESCRIPTION: This configuration shows how to set up Storybook build for documentation-only mode using the docsMode option and @storybook/addon-docs addon.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/build-storybook-executor-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"storybook\": {\n    \"executor\": \"@nx/storybook:build\",\n    \"options\": {\n      \"port\": 4400,\n      \"configDir\": \"libs/ui/.storybook\",\n      \"docsMode\": true\n    },\n    \"configurations\": {\n      \"ci\": {\n        \"quiet\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Angular CLI in dependencies JSON\nDESCRIPTION: This snippet outlines how to change the Angular CLI version from ~13.3.0 to ~19.0.0 in the dependencies section of a package.json file. This ensures the production build uses the latest Angular CLI features. It requires a compatible Angular application setup with package.json already configured.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-2-0/update-angular-cli.md#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@angular/cli\": \"~19.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vite Preview Server Configuration in project.json\nDESCRIPTION: Basic configuration setup for the Vite preview server executor in project.json file. Defines the preview target with basic build configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/preview-server-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"my-app\": {\n    \"targets\": {\n        \"preview\": {\n            \"executor\": \"@nx/vite:preview-server\",\n            \"defaultConfiguration\": \"development\",\n            \"options\": {\n                \"buildTarget\": \"my-app:build\"\n            },\n            \"configurations\": {\n                ...\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Project Reporter Conformance Rule\nDESCRIPTION: This TypeScript example demonstrates a conformance rule that ensures all projects have owners defined. It iterates over project nodes and checks for the existence of owner metadata, collecting violations when missing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/conformance/create-conformance-rule.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProjectGraphProjectNode } from '@nx/devkit';\nimport { createConformanceRule, ProjectViolation } from '@nx/conformance';\n\nexport default createConformanceRule({\n  name: 'ensure-owners',\n  category: 'consistency',\n  description: 'Ensure that all projects have owners defined via Nx Owners.',\n  reporter: 'project-reporter',\n  implementation: async (context) => {\n    const violations: ProjectViolation[] = [];\n\n    for (const node of Object.values(\n      context.projectGraph.nodes\n    ) as ProjectGraphProjectNode[]) {\n      const metadata = node.data.metadata;\n      if (!metadata?.owners || Object.keys(metadata.owners).length === 0) {\n        violations.push({\n          sourceProject: node.name,\n          message: `This project currently has no owners defined via Nx Owners.`,\n        });\n      }\n    }\n\n    return {\n      severity: 'medium',\n      details: {\n        violations,\n      },\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Nx Affected Command Usage\nDESCRIPTION: Basic usage of the nx affected command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/affected.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx affected\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/eslint for Nx 18+\nDESCRIPTION: Command to install the @nx/eslint plugin in Nx 18+ workspaces using the nx add command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/eslint/eslint.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/eslint\n```\n\n----------------------------------------\n\nTITLE: Configuring CI Pipeline in YML for GitHub Actions\nDESCRIPTION: This YML snippet configures a CI pipeline for GitHub Actions. It includes setup for node and npm cache, and uses the `nx affected` command to selectively run tests and builds impacted by the PR. Uncommenting specific lines in the file enables Nx Cloud task distribution for improving task execution efficiency.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/typescript-packages.md#2025-04-22_snippet_14\n\nLANGUAGE: yml\nCODE:\n```\nname: CI\n# ...\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          filter: tree:0\n\n      # This enables task distribution via Nx Cloud\n      # Run this command as early as possible, before dependencies are installed\n      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun\n      # Uncomment this line to enable task distribution\n      # - run: npx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\" --stop-agents-after=\"e2e-ci\"\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n          cache: 'npm'\n      - run: npm ci --legacy-peer-deps\n      - uses: nrwl/nx-set-shas@v4\n      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected\n      # When you enable task distribution, run the e2e-ci task instead of e2e\n      - run: npx nx affected -t lint test build e2e\n```\n\n----------------------------------------\n\nTITLE: Running Basic Project Build\nDESCRIPTION: Example of running a build target for a specific project using the Nx run command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n nx run myapp:build\n```\n\n----------------------------------------\n\nTITLE: Testing an Angular Library\nDESCRIPTION: This command runs the unit tests for the specified Angular library using the Nx CLI.  It uses the configured test runner (default is Jest) to execute the tests.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/angular/angular-plugin.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n\"nx test libName\"\n```\n\n----------------------------------------\n\nTITLE: Reorganizing directories in standalone project for Nx migration (shell)\nDESCRIPTION: This snippet reorganizes directories in a standalone project to match the expected structure of an Nx workspace before merging into the monorepo. It creates the necessary directories, moves files using `git mv` to preserve history, and commits the changes.  The commands ensure file history from the old standalone repo is not lost.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/preserving-git-histories.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd my-standalone-app\ngit checkout main\ngit fetch\ngit checkout -b monorepo-migration main\nmkdir -p apps/my-standalone-app\ngit ls-files | sed 's!/.*!!'| uniq | xargs -i git mv {} apps/my-standalone-app\n```\n\n----------------------------------------\n\nTITLE: Watching Specific Projects in Nx\nDESCRIPTION: Command to watch only specific projects (app1 and app2) and echo the files that changed using the NX_FILE_CHANGES environment variable.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/workspace-watching.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx watch --projects=app1,app2 -- echo \\$NX_FILE_CHANGES\n```\n\n----------------------------------------\n\nTITLE: Generating Customized esbuild Configuration (Nx)\nDESCRIPTION: This command generates an esbuild configuration with a custom main entry file and a custom tsconfig file.  It specifies the `--main` and `--tsConfig` options to override the default file locations. This is useful when the standard `src/index.ts` or `src/main.ts` and `tsconfig.app.json` or `tsconfig.lib.json` files are not used.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/esbuild/docs/configuration-examples.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/esbuild:configuration my-package \\\n--main=packages/my-package/src/entry.ts \\\n--tsConfig=packages/my-package/tsconfig.custom.json\n```\n\n----------------------------------------\n\nTITLE: UI Tag-based Project Selection\nDESCRIPTION: Select and test projects with UI-specific tags.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run-many.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t test --projects=tag:type:ui\n```\n\n----------------------------------------\n\nTITLE: Generating React Native Library\nDESCRIPTION: Command to generate a new React Native library in the libs directory\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react-native/react-native-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react-native:lib libs/<your-lib-name>\n```\n\n----------------------------------------\n\nTITLE: Setting Up React Navigation with a Shared Component in Cats App\nDESCRIPTION: Implementation of the Cats app using React Navigation and the shared Carousel component. This configures a stack navigator with a single screen displaying cat facts.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-24-step-by-step-guide-to-creating-an-expo-monorepo-with-nx.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Carousel } from '@nx-expo-monorepo/ui';\n\nconst App = () => {\n  const Stack = createNativeStackNavigator();\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen\n          name=\"Cat Facts\"\n          component={() => (\n            <Carousel\n              title=\"title\"\n              content=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec porta leo justo, id posuere urna tempor convallis. Nulla finibus, dolor sit amet facilisis pellentesque, velit nisi tempor ipsum, nec interdum libero felis a risus. Pellentesque bibendum, dolor vel varius pulvinar, tortor leo ultrices nisi, non sodales dui quam vitae nulla. Integer sed rhoncus dui. Vestibulum bibendum diam ut leo tempus, vel vulputate magna iaculis. Suspendisse tempus magna libero, sed facilisis tellus aliquet ac. Morbi at velit ornare, posuere tortor vitae, mollis erat. Donec maximus mollis luctus. Vivamus sodales sodales dui pellentesque imperdiet. Mauris a ultricies nibh. Integer sed vehicula magna.\"\n            />\n          )}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Connecting Nx Workspace to Nx Cloud using CLI\nDESCRIPTION: This command connects the current Nx workspace to Nx Cloud. It can be run using nx directly if installed globally, or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/connect.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx connect\n```\n\n----------------------------------------\n\nTITLE: Detecting Package Manager in TypeScript for Nx Workspace\nDESCRIPTION: This function detects the package manager used in an Nx workspace by examining the lock file. It takes an optional directory parameter and returns a PackageManager enum value.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/detectPackageManager.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **detectPackageManager**(`dir?`): [`PackageManager`](../../devkit/documents/PackageManager)\n```\n\n----------------------------------------\n\nTITLE: Run first release in dry-run mode\nDESCRIPTION: Runs the `nx release` command with the `--first-release` and `--dry-run` options.  The `--first-release` flag is used for the first release in a monorepo and the `--dry-run` flag is used to preview changes without applying them.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/publish-rust-crates.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx release --first-release --dry-run\n```\n\n----------------------------------------\n\nTITLE: Configuring @nx/eslint Plugin in nx.json\nDESCRIPTION: JSON configuration for the @nx/eslint plugin in nx.json file. Shows how to set the target name for lint tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/eslint/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/eslint/plugin\",\n      \"options\": {\n        \"targetName\": \"lint\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vite Configuration Generator Command\nDESCRIPTION: The basic command to run the Vite configuration generator in an Nx workspace. This prompts for project name and UI framework selection.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/configuration-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/vite:configuration\n```\n\n----------------------------------------\n\nTITLE: Moving Projects in Nx Workspace\nDESCRIPTION: This command moves a project within an Nx workspace, updating all necessary configurations and import paths. It demonstrates the use of the @nx/workspace:move generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/workspace/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/workspace:move --projectName my-lib --destination new/location/my-lib\n```\n\n----------------------------------------\n\nTITLE: Adding React Plugin\nDESCRIPTION: Command to add the @nx/react plugin to the Nx workspace for React application support.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-12-next-gen-module-federation-deployments.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx add @nx/react\n```\n\n----------------------------------------\n\nTITLE: Angular Project Configuration in project.json\nDESCRIPTION: The project configuration file for an Angular application in the Nx workspace. It defines various targets such as build, serve, and test that can be executed for the project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"angular-store\",\n  ...\n  \"targets\": {\n    \"build\": { ... },\n    \"serve\": { ... },\n    \"extract-i18n\": { ... },\n    \"lint\": { ... },\n    \"test\": { ... },\n    \"serve-static\": { ... },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: React Native Bundle CLI Commands\nDESCRIPTION: CLI commands to execute the bundle process for iOS and Android platforms\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/bundle-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx run mobile:bundle-ios\nnx run mobile:bundle-android\n```\n\n----------------------------------------\n\nTITLE: Running Storybook for Nx React Native App or Library\nDESCRIPTION: Command to gather and load stories from a React Native app or library in an Nx workspace, which updates the story-loader.js file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-25-use-storybook-with-nx-react-native.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx storybook **<your app or lib>**\n```\n\n----------------------------------------\n\nTITLE: Basic Nx run-many Command\nDESCRIPTION: Basic syntax for the run-many command in Nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run-many.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many\n```\n\n----------------------------------------\n\nTITLE: Multiple Tag-based Project Selection\nDESCRIPTION: Select and test projects matching multiple tag criteria.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run-many.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t test --projects=tag:type:feature,tag:type:ui\n```\n\n----------------------------------------\n\nTITLE: Running Rust Application in Nx Workspace\nDESCRIPTION: Command to run the Rust application using Nx, which starts the HTTP server.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-rust.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx run myapp:run\n```\n\n----------------------------------------\n\nTITLE: Fixing Linter Issues Automatically in Nx\nDESCRIPTION: Configuration for automatically fixing linter issues using the --fix flag, with proper output caching configured.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/eslint/docs/eslint-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"lint\": {\n  \"executor\": \"@nx/eslint:lint\",\n  \"outputs\": [\"{options.outputFile}\"],\n  \"options\": {\n    \"lintFilePatterns\": [\"apps/frontend/**/*.ts\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes in Angular Application\nDESCRIPTION: This TypeScript code defines the routes for the Angular application, including lazy-loaded routes for the Products and Orders components from their respective libraries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Route } from '@angular/router';\nimport { NxWelcomeComponent } from './nx-welcome.component';\n\nexport const appRoutes: Route[] = [\n  {\n    path: '',\n    component: NxWelcomeComponent,\n    pathMatch: 'full',\n  },\n  {\n    path: 'products',\n    loadComponent: () =>\n      import('@angular-monorepo/products').then((m) => m.ProductsComponent),\n  },\n  {\n    path: 'orders',\n    loadComponent: () =>\n      import('@angular-monorepo/orders').then((m) => m.OrdersComponent),\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: @nx/jest Plugin Configuration\nDESCRIPTION: This JSON snippet shows a basic configuration of the `@nx/jest/plugin` within the `nx.json` file. It sets the `targetName` option to \"test\", which controls the name of the inferred Jest tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/jest/documents/overview.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/jest/plugin\",\n      \"options\": {\n        \"targetName\": \"test\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Hasher - Mimic Nx Hasher\nDESCRIPTION: This TypeScript code implements a custom hasher that mimics the default hashing algorithm used by Nx, returning the result of `context.hasher.hashTask(task)`. This provides a basic example of a custom hasher that effectively replicates Nx's default behavior.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/local-executors.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomHasher, Task, HasherContext } from '@nx/devkit';\n\nexport const mimicNxHasher: CustomHasher = async (\n  task: Task,\n  context: HasherContext\n) => {\n  return context.hasher.hashTask(task);\n};\n\nexport default mimicNxHasher;\n```\n\n----------------------------------------\n\nTITLE: Customizing Vite Output Directory\nDESCRIPTION: This TypeScript snippet configures the Vite build output directory. It overrides the default output path to specify a custom location for the build artifacts.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n\"import { defineConfig } from 'vite';\\nexport default defineConfig(() => ({\n  build: {\n    outDir: 'dist/my-next-app',\n  },\n}));\"\n```\n\n----------------------------------------\n\nTITLE: Configuring the 'make' Command in project.json\nDESCRIPTION: JSON configuration for project.json that adds a 'make' target which executes the 'make hello' command. This integrates the command with Nx's toolchain.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/running-custom-commands.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n// ...\n\"targets\": {\n    \"make\": {\n        \"command\": \"make hello\"\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Single File Components Application\nDESCRIPTION: Generates an Angular application with inline styles and templates using Nx generator\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/application-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:app apps/my-app --inlineStyle --inlineTemplate\n```\n\n----------------------------------------\n\nTITLE: Running a Single Task with Nx\nDESCRIPTION: Command to run the test task for the header project using Nx's command-line interface.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/run-tasks.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx test header\n```\n\n----------------------------------------\n\nTITLE: Serve Shell Project with Dev Remotes (Shell)\nDESCRIPTION: This command serves the 'shell' project using Nx and specifies 'cart' and 'shop' as development remotes. The specified remotes will be served with the Webpack dev server, providing all the standard development features.  This allows developers to work on individual remotes without building and serving all the remote modules.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-05-02-nx-v14-is-out-here-is-all-you-need-to-know.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx serve shell --devRemotes=cart,shop\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Inputs in Nx Project Configuration\nDESCRIPTION: Example of configuring named inputs for a test target in project.json. Shows how to include all project files (default), production files from dependencies (^production), and specific configuration files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/inputs.md#2025-04-22_snippet_7\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"myreactapp\",\n  \"targets\": {\n    \"test\": {\n      \"inputs\": [\"default\", \"^production\", \"{projectRoot}/jest.config.js\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory for Next.js App in Vercel (Shell)\nDESCRIPTION: This path is used to override the output directory in Vercel's project settings. It points to the '.next' directory inside the built Next.js application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/deploy-nextjs-to-vercel.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\napps/tuskdesk/.next\n```\n\n----------------------------------------\n\nTITLE: Building and Serving Angular Application with Rspack\nDESCRIPTION: Commands to build and serve the Angular application after conversion to Rspack. These commands use the Nx CLI to trigger the build and serve tasks for the specified project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/migrate-from-webpack.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx build yourProjectName\nnpx nx serve yourProjectName\n```\n\n----------------------------------------\n\nTITLE: Running Nx Migration Scripts\nDESCRIPTION: Command to execute necessary migration scripts after updating Nx dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-03-08-nx-15-8-rust-hasher-nx-console-for-intellij-deno-node-and-storybook.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Angular Library with Nx\nDESCRIPTION: This command creates an Angular library named `my-lib` within a nested directory `nested` inside the `libs` folder. The `--importPath` option sets the import path to `@myorg/nested/my-lib`, which specifies how the library is imported in other parts of the application.  This helps to organize libraries into logical groups.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/library-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:library libs/nested/my-lib --importPath=@myorg/nested/my-lib\n```\n\n----------------------------------------\n\nTITLE: Publishing Packages with NX Release Command\nDESCRIPTION: Utilizes the `npx nx release` command to publish packages to an NPM registry, starting with a `--first-release` flag for initial publication and a `--dry-run` flag for previewing changes before final execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/typescript-packages.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx release --first-release --dry-run\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx release --first-release\n```\n\n----------------------------------------\n\nTITLE: Nx Workspace Creation Prompts\nDESCRIPTION: This snippet shows the prompts and selected options during the Nx workspace creation process, including application name, bundler choice, stylesheet format, and test runners.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/2-use-preset/content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNX   Let's create a new workspace [https://nx.dev/getting-started/intro]\n\n✔ Application name · angular-store\n✔ Which bundler would you like to use? · esbuild\n✔ Default stylesheet format · css\n✔ Do you want to enable Server-Side Rendering (SSR) and Static Site Generation (SSG/Prerendering)? · No\n✔ Which unit test runner would you like to use? · jest\n✔ Test runner to use for end to end (E2E) tests · cypress\n✔ Which CI provider would you like to use? · github\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic NxAppWebpackPlugin\nDESCRIPTION: Example showing how to configure the NxAppWebpackPlugin in a standard webpack configuration file. This plugin provides common build configuration including TypeScript support and workspace library linking.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/webpack-plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { NxAppWebpackPlugin } = require('@nx/webpack/app-plugin');\nconst { join } = require('path');\n\nmodule.exports = {\n  output: {\n    path: join(__dirname, '../../dist/apps/demo'),\n  },\n  devServer: {\n    port: 4200,\n  },\n  plugins: [\n    new NxAppWebpackPlugin({\n      main: './src/main.ts',\n      tsConfig: './tsconfig.app.json',\n      index: './src/index.html',\n      styles: ['./src/styles.css'],\n      outputHashing: process.env['NODE_ENV'] === 'production' ? 'all' : 'none',\n      optimization: process.env['NODE_ENV'] === 'production',\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Running Custom Target for Affected Projects\nDESCRIPTION: Execute a custom target for all affected projects using the -t flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/affected.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t custom-target\n```\n\n----------------------------------------\n\nTITLE: Migrating Storybook to CSF3 Format using Shell Command\nDESCRIPTION: Command to migrate existing Storybook stories to Component Story Format 3 (CSF3) using the Storybook migrator tool.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-03-08-nx-15-8-rust-hasher-nx-console-for-intellij-deno-node-and-storybook.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx storybook@next migrate csf-2-to-3 --glob=\"**/*.stories.ts\"`\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/js Package in Nx 18+\nDESCRIPTION: Command to install the @nx/js package in Nx version 18 or higher.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/js/js-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/js\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Solid Application\nDESCRIPTION: Update the TypeScript configuration for the Solid application. This includes setting the JSX options and other compiler settings specific to Solid.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-solid.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../../tsconfig.base.json\",\n  \"files\": [],\n  \"compilerOptions\": {\n    \"target\": \"ESNext\",\n    \"useDefineForClassFields\": true,\n    \"module\": \"ESNext\",\n    \"lib\": [\"ESNext\", \"DOM\"],\n    \"moduleResolution\": \"Node\",\n    \"jsx\": \"preserve\",\n    \"jsxImportSource\": \"solid-js\",\n    \"strict\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"esModuleInterop\": true,\n    \"noEmit\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noImplicitReturns\": true,\n    \"skipLibCheck\": true,\n    \"types\": [\"vite/client\", \"vitest\"]\n  },\n  \"include\": [\"src\"],\n  \"references\": [\n    {\n      \"path\": \"./tsconfig.app.json\"\n    },\n    {\n      \"path\": \"./tsconfig.spec.json\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Node Child Process in Executors\nDESCRIPTION: This TypeScript code illustrates how to compose executors using Node's child process API. The `multipleExecutor` function runs two other executors (`api:serve` and `web-client:serve`) in parallel using `runExecutor` and `Promise.race`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/local-executors.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExecutorContext, runExecutor } from '@nx/devkit';\n\nexport interface MultipleExecutorOptions {}\n\nexport default async function multipleExecutor(\n  options: MultipleExecutorOptions,\n  context: ExecutorContext\n): Promise<{ success: boolean }> {\n  const result = await Promise.race([\n    await runExecutor(\n      { project: 'api', target: 'serve' },\n      { watch: true },\n      context\n    ),\n    await runExecutor(\n      { project: 'web-client', target: 'serve' },\n      { watch: true },\n      context\n    ),\n  ]);\n  for await (const res of result) {\n    if (!res.success) return res;\n  }\n\n  return { success: true };\n}\n```\n\n----------------------------------------\n\nTITLE: Project Boundaries Rule Configuration\nDESCRIPTION: Example configuration for the enforce-project-boundaries rule showing all available options\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/conformance/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"conformance\": {\n    \"rules\": [\n      {\n        \"rule\": \"@nx/conformance/enforce-project-boundaries\",\n        \"options\": {\n          \"requireBuildableDependenciesForBuildableProjects\": {\n            \"buildTargetNames\": [\"build\", \"compile\"]\n          },\n          \"ignoredCircularDependencies\": [[\"projectA\", \"projectB\"]],\n          \"depConstraints\": [\n            {\n              \"sourceTag\": \"string\",\n              \"allSourceTags\": [\"string\"],\n              \"onlyDependOnProjectsWithTags\": [],\n              \"notDependOnProjectsWithTags\": []\n            }\n          ],\n          \"checkDynamicDependenciesExceptions\": []\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Dev Server with Nx\nDESCRIPTION: This command demonstrates how to run the Storybook dev server for a specific project using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/storybook-executor-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx run ui:storybook\n```\n\n----------------------------------------\n\nTITLE: Tagging Projects in project.json with Nx\nDESCRIPTION: This code snippet shows how to assign tags to a project in its `project.json` file. Tags are used by Nx to define boundaries and enforce dependency rules. The `tags` property is an array of strings representing the tags for the project. This example shows tags for the `products` library.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/11-module-boundaries/content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"tags\": [\"type:feature\", \"scope:products\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with TypeScript Preset using yarn\nDESCRIPTION: Command to create a new Nx workspace with TypeScript preset using yarn.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/js/js-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn create nx-workspace my-org --preset=ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Level Inputs in project.json\nDESCRIPTION: Example of defining inputs for a specific target in a project.json file. This configuration applies only to the build target of the myreactapp project and overrides both plugin-inferred inputs and workspace-level inputs.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/configure-inputs.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"myreactapp\",\n  \"targets\": {\n    \"build\": {\n      \"inputs\": [\"production\", \"^production\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Nx Cache\nDESCRIPTION: This command clears the cache and metadata about the workspace and shuts down the Nx Daemon. It's useful when you need to completely reset the caching system.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/skipping-cache.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx reset\n```\n\n----------------------------------------\n\nTITLE: Installing SVGR Plugin for Vite\nDESCRIPTION: Commands to install the `vite-plugin-svgr` package using different package managers. This is a prerequisite for using SVG as React components in Vite projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/adding-assets.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D vite-plugin-svgr\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D vite-plugin-svgr\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add -D vite-plugin-svgr\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add -D vite-plugin-svgr\n```\n\n----------------------------------------\n\nTITLE: Serving a React Router Application for Development\nDESCRIPTION: Command to serve a React Router application for development in an Nx workspace, which provides hot module reloading for a better development experience.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-router.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx dev happynrwl\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for React UI Library in Nx Monorepo\nDESCRIPTION: This command executes unit tests for the @react-monorepo/ui library using Vitest as the test runner. It utilizes Nx's project-specific test command.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/6-create-local-library/_solution/libs/shared/ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnx test @react-monorepo/ui\n```\n\n----------------------------------------\n\nTITLE: Generating ESLint Flat Config in Nx\nDESCRIPTION: This command uses the new Nx generator to convert an Nx monorepo to the new ESLint flat config system. The flat config is experimental and should not be mixed with the original configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-09-06-nx-16-8-release.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n> nx g convert-to-flat-config\n```\n\n----------------------------------------\n\nTITLE: Running ESLint with Quiet Mode in Nx\nDESCRIPTION: CLI command to run the linter in quiet mode to hide warnings but still show errors.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/eslint/docs/eslint-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnx run frontend:lint --quiet\n```\n\n----------------------------------------\n\nTITLE: Auto-generated Story Loader File\nDESCRIPTION: The auto-generated JavaScript file that loads all stories from the React Native application. It exports functions that are used by Storybook to load story files dynamically.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-25-use-storybook-with-nx-react-native.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Auto-generated file created by react-native-storybook-loader\n// Do not edit.\n//\n// https://github.com/elderfo/react-native-storybook-loader.git\n\nfunction loadStories() {\n  require('../apps/studio-ghibli-search-engine-mobile/src/app/App.stories');\n  require('../apps/studio-ghibli-search-engine-mobile/src/app/film/film.stories');\n  require('../apps/studio-ghibli-search-engine-mobile/src/app/results/film-list-item/film-list-item.stories');\n  require('../apps/studio-ghibli-search-engine-mobile/src/app/results/people-list-item/people-list-item.stories');\n  require('../apps/studio-ghibli-search-engine-mobile/src/app/results/result-list-item/result-list-item.stories');\n  require('../apps/studio-ghibli-search-engine-mobile/src/app/search/search.stories');\n  require('../apps/studio-ghibli-search-engine-mobile/src/app/shared/film-card/film-card.stories');\n  require('../apps/studio-ghibli-search-engine-mobile/src/app/shared/loading/loading.stories');\n}\n\nconst stories = [\n  '../apps/studio-ghibli-search-engine-mobile/src/app/App.stories',\n  '../apps/studio-ghibli-search-engine-mobile/src/app/film/film.stories',\n  '../apps/studio-ghibli-search-engine-mobile/src/app/results/film-list-item/film-list-item.stories',\n  '../apps/studio-ghibli-search-engine-mobile/src/app/results/people-list-item/people-list-item.stories',\n  '../apps/studio-ghibli-search-engine-mobile/src/app/results/result-list-item/result-list-item.stories',\n  '../apps/studio-ghibli-search-engine-mobile/src/app/search/search.stories',\n  '../apps/studio-ghibli-search-engine-mobile/src/app/shared/film-card/film-card.stories',\n  '../apps/studio-ghibli-search-engine-mobile/src/app/shared/loading/loading.stories',\n];\n\nmodule.exports = {\n  loadStories,\n  stories,\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring formatFiles Function in TypeScript\nDESCRIPTION: This snippet defines the formatFiles function, which takes a Tree object and optional options. It formats all created or updated files using Prettier and returns a Promise that resolves to void.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/formatFiles.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **formatFiles**(`tree`, `options?`): `Promise`\\<`void`\\>\n```\n\n----------------------------------------\n\nTITLE: Complex Target Setup for Angular Applications\nDESCRIPTION: Configuration for an Angular application with a custom build target name (build-base). This setup allows for complex target composition while still supporting incremental builds.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/setup-incremental-builds-angular.md#2025-04-22_snippet_10\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"projectType\": \"application\",\n  ...\n  \"targets\": {\n    \"build-base\": {\n      \"executor\": \"@nx/angular:webpack-browser\",\n      \"outputs\": [\n        \"{options.outputPath}\"\n      ],\n      \"options\": {\n        \"buildLibsFromSource\": false\n        ...\n      },\n      \"configurations\": {\n        ...\n      }\n    },\n    \"build\": {\n      \"executor\": \"nx:run-commands\",\n      \"outputs\": [\n        \"{options.outputPath}\"\n      ],\n      \"options\": {\n        \"commands\": [\n          \"node ./tools/scripts/important-script.js\",\n          \"node ./tools/scripts/another-important-script.js\"\n        ],\n        ...\n      },\n      \"configurations\": {\n        ...\n      }\n    },\n    \"serve\": {\n      \"executor\": \"@nx/angular:dev-server\",\n      \"options\": {\n        \"buildTarget\": \"my-app:build-base\",\n        \"buildLibsFromSource\": false\n      },\n      \"configurations\": {\n        \"production\": {\n          \"buildTarget\": \"my-app:build-base:production\"\n        }\n      }\n    },\n    ...\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Format Builds with Nx Rollup\nDESCRIPTION: JSON configuration for building TypeScript libraries in multiple formats (ESM and CJS) using Nx Rollup. This setup allows for packaging libraries in different module formats.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-12-28-highlights-2023.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-awesome-lib\",\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/rollup:rollup\",\n      ...\n      \"options\": {\n        \"main\": \"packages/my-awesome-lib/src/index.ts\",\n        ...\n        \"format\": [\"esm\", \"cjs\"],\n        \"additionalEntryPoints\": [\"packages/my-awesome-lib/src/foo.ts\"],\n        \"generateExportsField\": true\n      },\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Rust Application in Nx Workspace\nDESCRIPTION: Command to generate a new Rust application using the @monodon/rust plugin within the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-rust.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @monodon/rust:binary myapp --directory=apps/myapp\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/playwright Plugin in Nx 18+\nDESCRIPTION: Command to add the @nx/playwright plugin to an Nx workspace version 18 or higher. This ensures the correct version is installed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/playwright/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/playwright\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Version of Non-Core Nx Plugin\nDESCRIPTION: Example of installing the latest version of a non-core Nx plugin and running its init generator if available.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/add.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx add non-core-nx-plugin\n```\n\n----------------------------------------\n\nTITLE: Migrating Angular Projects to Nx\nDESCRIPTION: Command to migrate an existing Angular CLI project to Nx. This initializes Nx in the current project, setting up the necessary configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/nx-and-angular.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nx React Project with CLI\nDESCRIPTION: Command to create a new Nx workspace with a React application using the Nx CLI. This initiates an interactive setup process for configuring the new project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-29-the-react-cli-you-always-wanted-but-didnt-know-about.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest myorg\n```\n\n----------------------------------------\n\nTITLE: Updating External Package and Generating Migrations\nDESCRIPTION: Example of updating a non-Nx package to a specific version, which will update other packages and generate a migrations.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/migrate.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate another-package@12.0.0\n```\n\n----------------------------------------\n\nTITLE: Setting Max Cache Size to No Limit in nx.json\nDESCRIPTION: This code snippet demonstrates how to disable the local cache size limit by setting `maxCacheSize` to \"0\" in the `nx.json` file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_24\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"maxCacheSize\": \"0\" // No limit on the local cache size\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Task Graphs with Nx Commands in Shell\nDESCRIPTION: Command examples for visualizing the task graph in Nx. These commands use the --graph flag to display execution dependencies for build tasks with different scopes - for a single project, for all projects, or for affected projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/explore-graph.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx build myreactapp --graph # View the graph for building myreactapp\nnx run-many --targets build --graph # View the graph for building all projects\nnx affected --targets build --graph # View the graph for building the affected projects\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace-Level Outputs in nx.json\nDESCRIPTION: Example of defining output paths at the workspace level using target defaults in nx.json, which applies to all targets with the specified name across the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/configure-outputs.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"build\": {\n      \"outputs\": [\"{projectRoot}/dist\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components from Domain Libraries in Angular\nDESCRIPTION: Demonstrates how to import components from domain-specific libraries in an Angular application using the configured path mappings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-18-architecting-angular-applications.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Clear imports showing the domain and type of code you're using\nimport { ProductListComponent } from '@myshop/products-feat-product-list';\nimport { ProductCardComponent } from '@myshop/products-ui-product-card';\nimport { ProductService } from '@myshop/products-data-access';\n```\n\n----------------------------------------\n\nTITLE: Nx Release Base Command with Specifier\nDESCRIPTION: Example of using the nx release command with an optional version specifier parameter. This command creates a version and release for the workspace, generates a changelog, and can optionally publish packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/release.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx release [specifier]\n```\n\n----------------------------------------\n\nTITLE: Using sync:check Command in Nx CLI\nDESCRIPTION: Basic usage example of the sync:check command in Nx CLI. Can be run directly with nx if installed globally, or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/sync-check.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx sync:check\n```\n\n----------------------------------------\n\nTITLE: Generating CI Workflow for GitHub Actions\nDESCRIPTION: This command generates a CI workflow file for GitHub Actions, which includes Nx-specific configurations for efficient task execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-existing-project.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate ci-workflow --ci=github\n```\n\n----------------------------------------\n\nTITLE: Generating a React Native Component\nDESCRIPTION: This command generates a new React Native component named 'layout' inside the 'shared-ui-layout' library. It uses the `@nx/react-native:component` generator, specifying the destination path and the `--export` flag to export the component from the library's entry point.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-native.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\nnpx nx g @nx/react-native:component libs/shared-ui-layout/src/lib/layout/layout --export\n```\n\n----------------------------------------\n\nTITLE: Implementing a Migration Generator in TypeScript\nDESCRIPTION: Code for the migration generator that updates the executor name by iterating through all projects and updating their configuration if they use the old executor name.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/migration-generators.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getProjects, Tree, updateProjectConfiguration } from '@nx/devkit';\n\nexport function changeExecutorNameToNewName(tree: Tree) {\n  const projects = getProjects(tree);\n\n  for (const [name, project] of projects) {\n    if (\n      project.targets?.build?.executor === '@myorg/pluginName:oldExecutorName'\n    ) {\n      project.targets.build.executor = '@myorg/pluginName:newExecutorName';\n      updateProjectConfiguration(tree, name, project);\n    }\n  }\n}\n\nexport default changeExecutorNameToNewName;\n```\n\n----------------------------------------\n\nTITLE: Building Project with esbuild\nDESCRIPTION: Command to build a project using esbuild bundler.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/esbuild/esbuild-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx build mylib\n```\n\n----------------------------------------\n\nTITLE: Executing Nx Commands in Terminal\nDESCRIPTION: Examples of running nx exec commands in the terminal to execute commands across all projects\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/exec.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx exec -- <command> [..args] # runs the command in all projects\nnx exec -- tsc\nnx exec -- echo \\$NX_PROJECT_NAME\nnx exec -- echo \\$NX_PROJECT_ROOT_PATH\n```\n\n----------------------------------------\n\nTITLE: Folder Structure Example for Nx Workspace\nDESCRIPTION: Example folder structure showing organization of apps, libraries, and Storybook configuration across different scopes (client, admin, shared).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/one-storybook-per-scope.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhappynrwl/\n├── apps/\n│   ├── client/\n│   ├── admin/\n├── libs/\n│   ├── client/\n│   │   ├── feature/\n│   │   ├── ui/\n|   │   │   ├── header/\n|   |   |   |   ├── .storybook/\n|   |   |   |   ├── src/\n|   |   |   |   |   ├──lib\n|   |   |   |   |   |   ├──my-header\n|   |   |   |   |   |   |   ├── my-header.component.ts\n|   |   |   |   |   |   |   ├── my-header.component.stories.ts\n|   |   |   |   |   |   |   └── etc...\n|   |   |   |   |   |   └── etc...\n|   |   |   |   |   └── etc...\n|   |   |   |   ├── README.md\n|   |   |   |   ├── tsconfig.json\n|   |   |   |   └── etc...\n│   │   └── utils/\n│   ├── admin/\n│   │   ├── feature/\n│   │   ├── ui/\n|   │   │   ├── dashboard/\n|   |   |   |   ├── .storybook/\n|   |   |   |   ├── src/\n|   |   |   |   |   ├── etc..\n|   |   |   |   ├── README.md\n|   |   |   |   ├── tsconfig.json\n|   |   |   |   └── etc...\n│   │   └── utils/\n│   └── shared/\n│       ├── ui/\n|       │   ├── cta/\n|       |   |   ├── .storybook/\n|       |   |   ├── src/\n|       |   |   |   ├── etc..\n|       |   |   ├── README.md\n|       |   |   ├── tsconfig.json\n|       |   |   └── etc...\n│       └── utils/\n├── tools/\n├── nx.json\n├── package.json\n└── tsconfig.base.json\n```\n\n----------------------------------------\n\nTITLE: Starting a Dev Server using runExecutor (TypeScript)\nDESCRIPTION: This TypeScript function demonstrates how to use the `runExecutor` utility to start a development server based on a target string. It parses the target string, invokes the executor, and handles the output. It also includes error handling and support for watching file changes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/compose-executors.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function* startDevServer(\n  opts: CypressExecutorOptions,\n  context: ExecutorContext\n) {\n  const { project, target, configuration } = parseTargetString(\n    opts.devServerTarget\n  );\n  for await (const output of await runExecutor<{success: boolean;baseUrl?: string;}>({\n    project,\n    target,\n    configuration\n  }, {\n    watch: opts.watch,\n  }, context)) {\n    if (!output.success && !opts.watch)\n      throw new Error('Could not compile application files');\n    yield opts.baseUrl || (output.baseUrl as string);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration with TransformIgnorePatterns\nDESCRIPTION: Example configuration of transformIgnorePatterns in jest.config.js that specifies which node_modules should be transformed by Babel, particularly for React Native related packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-22-unit-testing-expo.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntransformIgnorePatterns: [\n    'node_modules/(?!((jest-)?react-native|@react-native(-community)?)|expo(nent)?|@expo(nent)?/.*|@expo-google-fonts/.*|react-navigation|@react-navigation/.*|@unimodules/.*|unimodules|sentry-expo|native-base|react-native-svg)',\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Express Application in Nx Workspace\nDESCRIPTION: This command uses the @nx/express:app generator to create a new Express application in the specified directory within your Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-express.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/express:app apps/my-express-api\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration for Nx Task Inference in TypeScript\nDESCRIPTION: This TypeScript code defines the configuration for Vite in an Nx-managed project. It includes the root directory, cache directory, and plugins used, such as react. The build settings are configured with options like output directory and commonjs options. This allows Nx to infer task configuration for the Vite tool automatically.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/maintain-typescript-monorepos.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types='vitest' />\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\nexport default defineConfig({\n  root: __dirname,\n  cacheDir: '../../node_modules/.vite/apps/cart',\n  plugins: [react()],\n  build: {\n    outDir: './dist',\n    emptyOutDir: true,\n    reportCompressedSize: true,\n    commonjsOptions: {\n      transformMixedEsModules: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Cypress Component Tests\nDESCRIPTION: Command to generate component tests alongside configuration with the generate-tests flag\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx\\/next:cypress-component-configuration --project=my-cool-next-project --generate-tests\n```\n\n----------------------------------------\n\nTITLE: Generate Nx Plugin Generator Command\nDESCRIPTION: Command to create a new generator within an Nx plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/intro.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g generator my-plugin/src/generators/library-with-readme\n```\n\n----------------------------------------\n\nTITLE: Run Next.js Build with Debug Flag\nDESCRIPTION: This bash command shows how to run a Next.js build in debug mode using the `--debug` flag. The `nx run` command is used to execute the 'build' target with the 'development' configuration and the debug flag, which provides more verbose output during the build process.  This is useful for troubleshooting and identifying issues during build.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/build-next-executor-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"nx run acme:build:development --debug\"\n```\n\n----------------------------------------\n\nTITLE: Executing Nx sync command in Shell\nDESCRIPTION: This command runs the 'sync' operation in an Nx workspace, which synchronizes workspace files by executing all sync generators. It can be run directly if nx is installed globally, or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/sync.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx sync\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Plugin Commands\nDESCRIPTION: Terminal commands for creating a new Nx plugin, either in a new workspace or adding to an existing one.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-plugin my-plugin\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx add @nx/plugin\nnpx nx g plugin tools/my-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Root TypeScript Project References\nDESCRIPTION: Root-level tsconfig.json that serves as the entry point for TypeScript project references, defining references to all workspace projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": [],\n  \"references\": [{ \"path\": \"./packages/lib-a\" }, { \"path\": \"./apps/myapp\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Building production bundle for Angular app with Nx\nDESCRIPTION: Command to create a production build for the Angular application named 'angular-store' using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/2-use-preset/_solution/angular-monorepo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx build angular-store\n```\n\n----------------------------------------\n\nTITLE: Getting Last Successful Commit Using Azure DevOps CLI\nDESCRIPTION: This snippet retrieves the SHA of the last successful commit from Azure DevOps using the CLI. It checks whether the build reason is a pull request and assigns the correct SHA to a custom variable BASE_SHA for later use within the pipeline.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/monorepo-ci-azure.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"# Get last successfull commit from Azure Devops CLI\\n- bash: |\\n    LAST_SHA=$(az pipelines build list --branch $(Build.SourceBranchName) --definition-ids $(System.DefinitionId) --result succeeded --top 1 --query \\\"[0].triggerInfo.\\\"ci.sourceSha\\\"\")\\n    if [ -z \\\"$LAST_SHA\\\" ]\\n    then\\n      echo \\\"Last successful commit not found. Using fallback 'HEAD~1': $BASE_SHA\\\"\\n    else\\n      echo \\\"Last successful commit SHA: $LAST_SHA\\\"\\n      echo \\\"##vso[task.setvariable variable=BASE_SHA]$LAST_SHA\\\"\\n    fi\\n  displayName: 'Get last successful commit SHA'\\n  condition: ne(variables['Build.Reason'], 'PullRequest')\\n  env:\\n    AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Module Federation Plugin in Rspack\nDESCRIPTION: Implementation example showing how to add the NxModuleFederationDevServerPlugin to a Rspack configuration file for client-side rendering.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/module-federation/nx-module-federation-dev-server-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NxModuleFederationDevServerPlugin } from '@nx/module-federation/rspack';\nimport config from './module-federation.config';\n\nexport default {\n  ...otherRspackConfigOptions,\n  plugins: [\n    new NxModuleFederationDevServerPlugin({\n      config,\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Updating package.json scripts for Nx\nDESCRIPTION: This diff snippet illustrates how the package.json scripts are modified to use Nx commands instead of the original commands, enabling caching for improved performance. It shows the transition from a standard Next.js build command to an Nx-managed build command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-monorepo.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n{% fileName=\"package.json\" %}\n{\n  \"name\": \"my-workspace\",\n  ...\n  \"scripts\": {\n-     \"build\": \"next build && echo 'Build complete'\",\n+     \"build\": \"nx next:build && echo 'Build complete'\",\n-     \"lint\": \"eslint ./src\",\n+     \"lint\": \"nx eslint:lint\",\n    \"test\": \"node ./run-tests.js\"\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Converting to SWC Command\nDESCRIPTION: Command to convert a TSC library to use SWC compiler\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/js/documents/overview.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/js:convert-to-swc my-buildable-lib\n```\n\n----------------------------------------\n\nTITLE: Argument Forwarding Configuration\nDESCRIPTION: Examples of argument forwarding behavior and configuration options in run-commands.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/docs/run-commands-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx run frontend:webpack --args=\"--config=example.config.js\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"webpack\": {\n    \"executor\": \"nx:run-commands\",\n    \"options\": {\n        \"command\": \"webpack\"\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n\"webpack\": {\n    \"executor\": \"nx:run-commands\",\n    \"options\": {\n        \"commands\": [\n            {\n                \"command\": \"webpack\",\n                \"forwardAllArgs\": false\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a React Native Application\nDESCRIPTION: This command generates a new React Native application named 'mobile' within the 'apps' directory of the Nx workspace. It uses the `@nx/react-native:app` generator provided by the `@nx/react-native` plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-native.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nnpx nx g @nx/react-native:app apps/mobile\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Specific 'exec' Command in package.json\nDESCRIPTION: This example shows how to set up an 'exec' command for a specific project (myorg) to run a custom script with Nx caching.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/exec.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myorg\",\n  \"nx\": {},\n  \"scripts\": {\n    \"docs\": \"nx exec -- node ./scripts/some-script.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Nx Conformance Plugin\nDESCRIPTION: This command installs the `@nx/conformance` plugin to your Nx workspace. It's a necessary step to utilize the conformance features for enforcing workspace rules.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/conformance/conformance-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"nx add @nx/conformance\"\n```\n\n----------------------------------------\n\nTITLE: Traditional ESLint JSON Configuration\nDESCRIPTION: Example of traditional ESLint configuration using JSON format with overrides for different file types and Nx-specific rules.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/migrating-to-flat-eslint.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"root\": true,\n  \"parser\": \"@typescript-eslint/parser\",\n  \"env\": {\n    \"node\": true\n  },\n  \"extends\": [\"eslint:recommended\", \"./.eslintrc.base.json\"],\n  \"plugins\": [\"@nx\"],\n  \"rules\": {\n    \"@typescript-eslint/explicit-module-boundary-types\": \"error\"\n  },\n  \"overrides\": [\n    {\n      \"files\": [\"*.json\"],\n      \"parser\": \"jsonc-eslint-parser\",\n      \"rules\": {}\n    },\n    {\n      \"files\": [\"*.ts\", \"*.tsx\", \"*.js\", \"*.jsx\"],\n      \"rules\": {\n        \"@nx/enforce-module-boundaries\": [\n          \"error\",\n          {\n            \"enforceBuildableLibDependency\": true,\n            \"allow\": [],\n            \"depConstraints\": [\n              {\n                \"sourceTag\": \"*\",\n                \"onlyDependOnLibsWithTags\": [\"*\"]\n              }\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Update Storybook Port (Angular project.json)\nDESCRIPTION: This JSON snippet configures the Storybook port for the Angular Storybook host application (`storybook-host-angular`). The `port` option is set to `4401` to avoid conflicts when composing the Storybooks. This configuration is placed in the `project.json` file of the library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/one-storybook-with-composition.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"targets\": {\n    // ...\n    \"storybook\": {\n      \"options\": {\n        \"port\": 4401\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setup Commands - Bash\nDESCRIPTION: Basic commands for installing dependencies and starting the development server.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Affected Tests in Nx\nDESCRIPTION: This command runs tests for projects affected by changes in the specified file. It's used when git is not available in the environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/10-affected/content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx affected -t test --files=libs/products/src/lib/products.tsx\n```\n\n----------------------------------------\n\nTITLE: Publishing a Versioned Project with Nx Release\nDESCRIPTION: This command publishes a versioned project to a registry using the Nx release system. It is used to automate the process of releasing and publishing projects managed by Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/release.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx release publish\n```\n\n----------------------------------------\n\nTITLE: Adding Project Metadata in project.json\nDESCRIPTION: This example shows how to add additional metadata to a project in the project.json file, such as providing a description for the project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_25\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"admin\",\n  \"metadata\": {\n    \"description\": \"This is the admin application\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Mock Store with Thunk Middleware\nDESCRIPTION: Creates a store decorator that sets up a mock Redux store with thunk middleware to handle async actions. The decorator wraps stories with a Redux Provider using the configured mock store and initial state.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-25-use-storybook-with-nx-react-native.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  initialRootState,\n  RootState,\n} from '@studio-ghibli-search-engine/store';\nimport React from 'react';\nimport { Provider as StoreProvider } from 'react-redux';\nimport configureStore from 'redux-mock-store';\nimport thunk from 'redux-thunk';\n\nexport const StoreDecorator = (story) => {\n  const mockStore = configureStore<RootState>([thunk]);\n  const store = mockStore({ ...initialRootState });\n  return <StoreProvider store={store}>{story()}</StoreProvider>;\n};\n```\n\n----------------------------------------\n\nTITLE: Generating a New Component Route in React Router\nDESCRIPTION: Command to generate a new component that can be used as a route in a React Router application, creating the component file along with its stylesheet and test file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-router.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:component --path=apps/happynrwl/app/routes/contact\n```\n\n----------------------------------------\n\nTITLE: Enabling Project Changelogs in nx.json\nDESCRIPTION: This code enables project-level changelogs with default options by setting `projectChangelogs` to `true` within the `nx.json` configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_18\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"release\": {\n    \"changelog\": {\n      // This enables project changelogs with the default options\n      \"projectChangelogs\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Jest Projects (Nx < 18)\nDESCRIPTION: This TypeScript code demonstrates how to use the `getJestProjects` utility function from `@nx/jest` to dynamically retrieve a list of Jest configuration files. It also shows how to manually add additional Jest projects not identified by the function.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/jest/documents/overview.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getJestProjects } from '@nx/jest';\n\nexport default {\n  projects: [...getJestProjects(), '<rootDir>/path/to/jest.config.ts'],\n};\n```\n\n----------------------------------------\n\nTITLE: Serving a Vite-built Nx Application\nDESCRIPTION: This command demonstrates how to serve a Vite-built Nx application using the nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/build-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx serve my-app\n```\n\n----------------------------------------\n\nTITLE: Removing Projects from Nx Workspace\nDESCRIPTION: This command removes a project from an Nx workspace, handling dependency checks and cleanup of configurations. It showcases the usage of the @nx/workspace:remove generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/workspace/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/workspace:remove my-lib\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Persist for Web\nDESCRIPTION: TypeScript code to configure Redux Persist for the web app using localStorage.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport storage from 'redux-persist/lib/storage';\nconst persistConfig = {\n  key: 'root',\n  storage: storage,\n  whitelist: ['search', 'films', 'people'],\n  transforms: [transformEntityStateToPersist],\n};\n```\n\n----------------------------------------\n\nTITLE: Sample Build Output Structure\nDESCRIPTION: Example directory structure showing the output of an esbuild build including assets.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/esbuild/documents/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ndist/libs/mylib/\n├── README.md\n├── docs\n│   ├── CONTRIBUTING.md\n│   └── TESTING.md\n├── index.js\n├── logo.png\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Viewing Nx Daemon Logs\nDESCRIPTION: This snippet outlines the command to view logs from the Nx Daemon, including how to tail the log file for real-time updates.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/daemon.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nTo see information about the running Nx Daemon (such as its background process ID and log output file), run `nx daemon`. Once you have the path to that log file, you could either open it in your IDE or stream updates in a separate terminal window by running `tail -f {REPLACE_WITH_LOG_PATH}`, for example.\n```\n\n----------------------------------------\n\nTITLE: Custom Port Configuration for Vite Preview Server\nDESCRIPTION: Configuration example showing how to set a custom port for the Vite preview server in project.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/preview-server-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"my-app\": {\n    \"targets\": {\n        \"preview\": {\n            \"executor\": \"@nx/vite:preview-server\",\n            \"defaultConfiguration\": \"development\",\n            \"options\": {\n                \"buildTarget\": \"my-app:build\",\n                \"port\": 4200\n            },\n            \"configurations\": {\n                ...\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Nx Show Command\nDESCRIPTION: This snippet demonstrates the basic usage of the 'nx show' command to display information about the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/show.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx show\n```\n\n----------------------------------------\n\nTITLE: Adding Nx Plugin\nDESCRIPTION: This snippet demonstrates how to add the `@nx/plugin` to your Nx workspace using the Nx CLI. It prepares the workspace for creating custom plugins and generators.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/local-generators.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/plugin\nnx g @nx/plugin:plugin tools/my-plugin\n```\n\n----------------------------------------\n\nTITLE: Basic Run Commands Configuration\nDESCRIPTION: Basic configuration example of nx:run-commands executor to run a simple ls command in a project directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/docs/run-commands-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"ls-project-root\": {\n      \"executor\": \"nx:run-commands\",\n      \"options\": {\n        \"command\": \"ls apps/frontend/src\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx run frontend:ls-project-root\n```\n\n----------------------------------------\n\nTITLE: Generating GitHub Actions Workflow\nDESCRIPTION: Nx command to generate a default GitHub Actions workflow file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/tutorial/github-actions.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx generate ci-workflow --ci=github\n```\n\n----------------------------------------\n\nTITLE: Generate Storybook with JavaScript Configuration\nDESCRIPTION: Command to generate Storybook setup using JavaScript configuration files instead of TypeScript\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/storybook-configuration-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react:storybook-configuration ui --tsConfiguration=false\n```\n\n----------------------------------------\n\nTITLE: Updating Nx to Latest Version\nDESCRIPTION: Command to update Nx workspace dependencies and configuration to the latest version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-10-20-nx-17-release.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\n----------------------------------------\n\nTITLE: Running E2E tests with Nx\nDESCRIPTION: This command runs the E2E tests for the 'my-app-e2e' project using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-17-modern-angular-testing-with-nx.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx e2e my-app-e2e\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Module Federation in Rspack\nDESCRIPTION: Demonstrates the setup of NxModuleFederationPlugin for server-side rendering, including the SSR-specific dev server plugin configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/module-federation/nx-module-federation-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  NxModuleFederationPlugin,\n  NxModuleFederationSSRDevServerPlugin,\n} from '@nx/module-federation/rspack';\nimport config from './module-federation.config';\n\nexport default {\n  ...otherRspackConfigOptions,\n  plugins: [\n    new NxModuleFederationPlugin({\n      config,\n      isServer: true,\n    }),\n    new NxModuleFederationSSRDevServerPlugin({\n      config,\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Styles Entrypoint for Tailwind Setup in Nx Angular\nDESCRIPTION: This command generates a Tailwind CSS setup for the specified Angular application (`myapp`) and specifies a custom styles entrypoint using the `--stylesEntryPoint` flag. The value is a path relative to the workspace root.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/setup-tailwind-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:setup-tailwind myapp --stylesEntryPoint=apps/myapp/src/styles.css\n```\n\n----------------------------------------\n\nTITLE: Defining Nx Workspace Directory Structure\nDESCRIPTION: Example directory structure showing how to organize an Nx workspace by scope and project type. Demonstrates grouping projects under scopes like products, checkout, and shared, with each project prefixed by its type.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-03-workspace-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlibs/\n  products/               <---- grouped by scope\n    feature-details/      <---- project prefixed with type\n\n  check-out/              <---- grouped by scope\n    feature-cart/         <---- project prefixed with type\n    data-access-taxes/    <---- project prefixed with type\n\n  shared/                 <---- grouped by scope\n    ui-forms/             <---- project prefixed with type\n\t\tutil-dates            <---- project prefixed with type\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Relationship in nx.json\nDESCRIPTION: This snippet configures the `projectsRelationship` property in the `release` section of `nx.json` to specify that projects should be released independently. This setting allows for independent versioning and release cycles for individual projects within the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_13\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"release\": {\n    // Here we are configuring nx release to release projects\n    // independently, as opposed to the default of \"fixed\"\n    \"projectsRelationship\": \"independent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from Angular CLI to Nx\nDESCRIPTION: Command to initialize Nx in an existing Angular CLI project for migration purposes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/nx-and-angular-cli.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Building All Apps in Nx Monorepo\nDESCRIPTION: This command builds all applications in the Nx monorepo, placing the output in their respective dist directories.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/10-affected/content.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many -t build\n```\n\n----------------------------------------\n\nTITLE: Serving the Host Application - Shell Command\nDESCRIPTION: This command serves the host application in development mode, allowing immediate access to the application in the browser. The remotes are built and served statically.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/faster-builds.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx serve host --open\n```\n\n----------------------------------------\n\nTITLE: Submitting Expo Apps to App Stores with Nx\nDESCRIPTION: Commands for submitting Expo apps to app stores using Nx. Includes options for specifying platforms.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-24-step-by-step-guide-to-creating-an-expo-monorepo-with-nx.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx submit cats\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx submit cats --platform=all\nnpx nx submit cats --platform=android\nnpx nx submit cats --platform=ios\n```\n\n----------------------------------------\n\nTITLE: Nx Release Base Command with Specifier\nDESCRIPTION: Usage of the nx release command with an optional version specifier parameter. This command creates a version, generates a changelog, and can publish packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/release.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx release [specifier]\n```\n\n----------------------------------------\n\nTITLE: Changing browserTarget for Angular Storybook Configuration\nDESCRIPTION: This configuration demonstrates how to change the browserTarget to use build-storybook as the builder. This is useful when a project doesn't have a build target.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/storybook-executor-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"storybook\": {\n  \"executor\": \"@storybook/angular:start-storybook\",\n  \"options\": {\n    \"port\": 4400,\n    \"configDir\": \"libs/ui/.storybook\",\n    \"browserTarget\": \"ui:build-storybook\",\n    \"compodoc\": false\n  },\n  \"configurations\": {\n    \"ci\": {\n      \"quiet\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using create-nx-workspace CLI Command in Bash\nDESCRIPTION: This command creates a new Nx workspace. It accepts a name parameter and additional options. The command can be invoked directly if installed globally, or used with package managers like npx, yarn, or pnpx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/create-nx-workspace.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncreate-nx-workspace [name] [options]\n```\n\n----------------------------------------\n\nTITLE: Initialize Nx in Existing Projects\nDESCRIPTION: Commands to add Nx to an existing Angular CLI project, with options for both minimal and integrated setup\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-17-modern-angular-testing-with-nx.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nng new my-app\ncd my-app\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Modifying Rsbuild Configuration for Angular\nDESCRIPTION: Example showing how to override the base Rsbuild configuration while creating an Angular configuration. This sets the mode to development in addition to configuring SSR.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rsbuild/create-config.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@nx/angular-rsbuild';\n\nexport default createConfig({\n  options: {\n    browser: './src/main.ts',\n    server: './src/main.server.ts',\n    ssrEntry: './src/server.ts',\n  },\n  rsbuildConfigOverrides: {\n    mode: 'development',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Generated Models\nDESCRIPTION: This TypeScript code exports the generated models from the index.ts file, making them accessible to other projects in the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from './lib/__generated__/models';\n```\n\n----------------------------------------\n\nTITLE: Running the build-list target\nDESCRIPTION: This command executes the `build-list` target defined in the `project.json` file for the `mobile` project. It triggers the `@nx/expo:build-list` executor, which retrieves and displays the build status based on the configured options.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/build-list-examples.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnx run mobile:build-list\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Route with Data Loading and Form Actions\nDESCRIPTION: Implements the todo route component with data loading using routeLoader$ and form submission handling using routeAction$. Includes todo list rendering and form for adding new todos.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-15-qwikify-your-dev.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { Form, routeLoader$ } from '@builder.io/qwik-city';\nimport { TodoContext, db } from '@qwik-todo-app/data-access';\n\nexport const useGetTodos = routeLoader$(() => {\n  if (db.get('todos')?.length === 0) {\n    db.set('todos', [\n      {\n        id: 1,\n        message: 'First todo',\n      },\n    ]);\n  }\n  const todos: Todo[] = db.get('todos');\n  const lastId = [...todos].sort((a, b) => b.id - a.id)[0].id;\n  return { todos, lastId };\n});\nexport const useAddTodo = routeAction$(\n  (todo: { id: string; message: string }) => {\n    const success = db.add('todos', {\n      id: parseInt(todo.id),\n      message: todo.message,\n    });\n    return { success };\n  },\n  zod$({ id: z.string(), message: z.string() })\n);\nexport default component$(() => {\n  const todoStore = useContext(TodoContext);\n  const persistedTodos = useGetTodos();\n  const addTodoAction = useAddTodo();\n\n  useTask$(({ track }) => {\n    track(() => persistedTodos.value);\n    if (persistedTodos.value) {\n      todoStore.todos = persistedTodos.value.todos;\n      todoStore.lastId =\n        todoStore.lastId > persistedTodos.value.lastId\n          ? todoStore.lastId\n          : persistedTodos.value.lastId;\n    }\n  });\n  return (\n    <div>\n      <h1>Todos</h1>\n      {todoStore.todos.map((t) => (\n        <div key={`todo-${t.id}`}>\n          <label>\n            <input type=\"checkbox\" /> {t.message}\n          </label>\n        </div>\n      ))}\n      <Form action={addTodoAction}>\n        <input type=\"hidden\" name=\"id\" value={todoStore.lastId + 1} />\n        <input type=\"text\" name=\"message\" />\n        <button type=\"submit\">Add</button>\n      </Form>\n      {addTodoAction.value?.success && <p>Todo added!</p>}\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom ESBuild Plugin in Angular Application\nDESCRIPTION: Project configuration for including a custom ESBuild plugin that dynamically processes environment variables at build time.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/use-environment-variables-in-angular.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/angular:application\",\n      \"options\": {\n        ...\n        \"plugins\": [\"apps/my-app/plugins/env-var-plugin.js\"]\n      }\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Playwright E2E to Existing Nx Project\nDESCRIPTION: Command to generate a Playwright E2E configuration for an existing Nx project. Optionally includes web server setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/playwright/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/playwright:configuration --project=your-app-name\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/playwright:configuration --project=your-app-name --webServerCommand=\"npx serve your-project-name\" --webServerAddress=\"http://localhost:4200\"\n```\n\n----------------------------------------\n\nTITLE: Implementing the Executor Logic\nDESCRIPTION: This TypeScript code defines the executor function. It imports necessary modules from `@nx/devkit` and `child_process`. The `echoExecutor` function takes options and a context, then executes the `echo` command using `child_process` and returns a promise indicating success or failure.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/local-executors.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ExecutorContext } from '@nx/devkit';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nexport interface EchoExecutorOptions {\n  textToEcho: string;\n}\n\nexport default async function echoExecutor(\n  options: EchoExecutorOptions,\n  context: ExecutorContext\n): Promise<{ success: boolean }> {\n  console.info(`Executing \"echo\"...`);\n  console.info(`Options: ${JSON.stringify(options, null, 2)}`);\n\n  const { stdout, stderr } = await promisify(exec)(\n    `echo ${options.textToEcho}`\n  );\n  console.log(stdout);\n  console.error(stderr);\n\n  const success = !stderr;\n  return { success };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Library in TypeScript with Nx Workspace Scope\nDESCRIPTION: Example of how to import a function from a library within an Nx workspace, using the workspace scope (myorg) as part of the import path.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-29-the-react-cli-you-always-wanted-but-didnt-know-about.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { someFunc } from '@myorg/somelib';\n```\n\n----------------------------------------\n\nTITLE: Assigning Tags to Projects in JSON Configuration\nDESCRIPTION: This snippet shows how to assign tags to projects in the project.json file. Tags are used to define boundaries between projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"tags\": [\"type:feature\", \"scope:orders\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering (SSR) Configuration with createConfig\nDESCRIPTION: Example showing how to create a Rspack configuration for an Angular application with Server-Side Rendering, specifying browser, server, and SSR entry points.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rspack/create-config.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@nx/angular-rspack';\n\nexport default createConfig({\n  options: {\n    browser: './src/main.ts',\n    server: './src/main.server.ts',\n    ssrEntry: './src/server.ts',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Command Arguments as Direct Options in project.json\nDESCRIPTION: Configuring a build target by directly providing command arguments as options in the project.json file. This approach is available since Nx v18.1.1 and allows for cleaner configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/pass-args-to-commands.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sourceRoot\": \"apps/my-app/src\",\n  \"projectType\": \"application\",\n  \"targets\": {\n    \"build\": {\n      \"options\": {\n        \"assetsInlineLimit\": 2048,\n        \"assetsDir\": \"static/assets\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cypress E2E Tests in Nx\nDESCRIPTION: Command to execute Cypress end-to-end tests for a project named 'happynrwl-e2e' in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-29-the-react-cli-you-always-wanted-but-didnt-know-about.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx e2e happynrwl-e2e\n```\n\n----------------------------------------\n\nTITLE: Executing Nx Reset Command\nDESCRIPTION: Basic usage of the 'nx reset' command to clear cached artifacts and metadata.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/reset.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx reset\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with TypeScript Preset (npm)\nDESCRIPTION: Command to create a new Nx workspace with TypeScript preset using npm\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/js/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace my-org --preset=ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Tags in Nx\nDESCRIPTION: Illustrates how to assign tags to projects in Nx, which can be used for enforcing module boundaries and organizing the project structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ... more project configuration here\n  \"tags\": [\"domain:products\", \"type:domain\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Automatic Versioning in nx.json\nDESCRIPTION: This code snippet demonstrates how to enable automatic versioning in Nx Release by setting the `release.version.conventionalCommits` property to `true` within the `nx.json` configuration file. This allows Nx Release to determine version bumps based on conventional commit messages.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/automatically-version-with-conventional-commits.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"version\": {\n      \"conventionalCommits\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Node.js Application\nDESCRIPTION: Example of using Nx generate command to create a new Node.js application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/generate.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/node:app apps/myapp\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tailwind for React Projects\nDESCRIPTION: Command to generate Tailwind configuration for a React project using the Nx setup-tailwind generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-08-02-nx-14-5-cypess-v10-output-globs-linter-perf-react-tailwind-support.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nrwl/react:setup-tailwind --project=<project-name>\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks in package.json for Nx\nDESCRIPTION: Example of defining build and test tasks in a package.json file for a project named 'mylib'. These tasks can be executed by Nx's task runner.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/run-tasks.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"mylib\",\n  \"scripts\": {\n    \"build\": \"tsc -p tsconfig.lib.json\",\n    \"test\": \"jest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating React Application with Custom Style Extension\nDESCRIPTION: Creates a React application in a specific directory with SCSS styling configuration. Demonstrates how to specify both custom directory path and style extension.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/application-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react:app apps/my-dir/my-app --style=scss\n```\n\n----------------------------------------\n\nTITLE: Generating Vue Application\nDESCRIPTION: Command to generate a new Vue application within the Nx workspace using the @nx/vue plugin generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/vue/vue-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/vue:app apps/my-app\n```\n\n----------------------------------------\n\nTITLE: Building with External None Flag\nDESCRIPTION: This command shows how to use the external flag with the build command.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/tsc-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx build ts-lib --external=none\n```\n\n----------------------------------------\n\nTITLE: Setting Cypress Environment Variables via Command Line with Inferred Tasks\nDESCRIPTION: Example of passing multiple environment variables (API_URL and API_KEY) through command line using inferred tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/cypress/cypress-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx e2e frontend-e2e -e=API_URL=https://api.my-nx-website.com,API_KEY=abc-123\n```\n\n----------------------------------------\n\nTITLE: E2E Target Outputs Configuration\nDESCRIPTION: JSON snippet showing the output paths for Cypress E2E testing, which are automatically inferred from the Cypress configuration and used for proper caching by Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n[\n  [\n    \"{workspaceRoot}/dist/cypress/apps/angular-store-e2e/videos\",\n    \"{workspaceRoot}/dist/cypress/apps/angular-store-e2e/screenshots\"\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Update ModuleFederationConfig Imports\nDESCRIPTION: This code snippet demonstrates updating the import path for ModuleFederationConfig in a webpack configuration file. The update ensures the project uses the @nx/module-federation package for Module Federation configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-2-0/migrate-mf-imports-to-new-package.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ModuleFederationConfig } from '@nx/webpack';\n```\n\n----------------------------------------\n\nTITLE: Angular Template with Tailwind CSS Utility Classes\nDESCRIPTION: HTML template for the Angular app component that uses Tailwind CSS utility classes for styling and layout. It includes shared components from libraries, specifically header and card components with a responsive grid layout.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_29\n\nLANGUAGE: angular\nCODE:\n```\n<div class=\"font-mono\">\n  <angular-tailwind-nx-header></angular-tailwind-nx-header>\n\n  <main class=\"max-w-xl md:max-w-2xl lg:max-w-6xl mx-auto py-xl px-md md:px-xl grid grid-cols-1 gap-md md:grid-cols-2 lg:grid-cols-3\">\n    <angular-tailwind-nx-card title=\"Angular\" url=\"https://angular.io/\">\n      Angular is an application design framework and development platform for creating efficient and sophisticated single-page apps.\n    </angular-tailwind-nx-card>\n\n    <angular-tailwind-nx-card title=\"Tailwind CSS\" url=\"https://tailwindcss.com/\">\n      Tailwind CSS is a utility-first CSS framework packed with classes like flex, pt-4, text-center and rotate-90 that can be composed to build any design, directly in your markup.\n    </angular-tailwind-nx-card>\n\n    <angular-tailwind-nx-card title=\"React\" url=\"https://react.dev/\">\n      The library for web and native user interfaces\n    </angular-tailwind-nx-card>\n  </main>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Base Branch for Affected Commands\nDESCRIPTION: This JSON snippet shows how to configure the default base branch for Nx affected commands in the nx.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"affected\": {\n    \"defaultBase\": \"main\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nx Plugin Project Structure Example\nDESCRIPTION: This text diagram provides a visual representation of the directory structure for an Nx plugin project. It highlights the location where the preset generator would be placed. This structure follows the standard conventions used by Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/create-preset.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhappynrwl/\n\t├── e2e\n\t├── jest.config.js\n\t├── jest.preset.js\n\t├── nx.json\n\t├── package-lock.json\n\t├── package.json\n\t├── packages\n\t│   └── happynrwl\n\t│       ├── src\n\t│       │   ├── executors\n\t│       │   ├── generators\n\t│       │   │   ├── happynrwl\n\t│       │   │   └── preset \t\t// <------------- Here\n\t│       │   └── index.ts\n\t├── tools\n\t└── tsconfig.base.json\n```\n\n----------------------------------------\n\nTITLE: Workspace Dependency Graph Configuration\nDESCRIPTION: JSON configuration describing the workspace structure, project dependencies, and visualization settings for nx graph command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/nx-and-angular-cli.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": \"58420bb4002bb9b6914bdeb7808c77a591a089fc82aaee11e656d73b2735e3fa\",\n  \"projects\": [\n    {\n      \"name\": \"shared-product-state\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": [\"scope:shared\", \"type:state\"]\n      }\n    },\n    {\n      \"name\": \"shared-product-types\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": [\"type:types\", \"scope:shared\"]\n      }\n    },\n    {\n      \"name\": \"shared-product-data\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": [\"type:data\", \"scope:shared\"]\n      }\n    },\n    {\n      \"name\": \"cart-cart-page\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": [\"scope:cart\", \"type:feature\"]\n      }\n    },\n    {\n      \"name\": \"shared-styles\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": [\"scope:shared\", \"type:styles\"]\n      }\n    },\n    {\n      \"name\": \"cart-e2e\",\n      \"type\": \"e2e\",\n      \"data\": {\n        \"tags\": [\"scope:cart\", \"type:e2e\"]\n      }\n    },\n    {\n      \"name\": \"cart\",\n      \"type\": \"app\",\n      \"data\": {\n        \"tags\": [\"type:app\", \"scope:cart\"]\n      }\n    }\n  ],\n  \"dependencies\": {\n    \"shared-product-state\": [\n      {\n        \"source\": \"shared-product-state\",\n        \"target\": \"shared-product-data\",\n        \"type\": \"static\"\n      },\n      {\n        \"source\": \"shared-product-state\",\n        \"target\": \"shared-product-types\",\n        \"type\": \"static\"\n      }\n    ],\n    \"shared-product-types\": [],\n    \"shared-product-data\": [\n      {\n        \"source\": \"shared-product-data\",\n        \"target\": \"shared-product-types\",\n        \"type\": \"static\"\n      }\n    ],\n    \"shared-e2e-utils\": [],\n    \"cart-cart-page\": [\n      {\n        \"source\": \"cart-cart-page\",\n        \"target\": \"shared-product-state\",\n        \"type\": \"static\"\n      }\n    ],\n    \"shared-styles\": [],\n    \"cart-e2e\": [\n      { \"source\": \"cart-e2e\", \"target\": \"cart\", \"type\": \"implicit\" }\n    ],\n    \"cart\": [\n      { \"source\": \"cart\", \"target\": \"shared-styles\", \"type\": \"implicit\" },\n      { \"source\": \"cart\", \"target\": \"cart-cart-page\", \"type\": \"static\" }\n    ]\n  },\n  \"workspaceLayout\": {\n    \"appsDir\": \"apps\",\n    \"libsDir\": \"libs\"\n  },\n  \"affectedProjectIds\": [],\n  \"focus\": null,\n  \"groupByFolder\": false,\n  \"exclude\": [],\n  \"enableTooltips\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Astro Application Generator in TypeScript\nDESCRIPTION: Core implementation of the application generator that creates project configuration and generates files from templates. It uses Nx devkit utilities to add project configuration and generate files from templates.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/tooling-plugin.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  addProjectConfiguration,\n  formatFiles,\n  generateFiles,\n  Tree,\n} from '@nx/devkit';\nimport * as path from 'path';\nimport { ApplicationGeneratorSchema } from './schema';\n\nexport async function applicationGenerator(\n  tree: Tree,\n  options: ApplicationGeneratorSchema\n) {\n  const projectRoot = `${options.name}`;\n  addProjectConfiguration(tree, options.name, {\n    root: projectRoot,\n    projectType: 'application',\n    sourceRoot: `${projectRoot}/src`,\n    targets: {},\n  });\n  generateFiles(tree, path.join(__dirname, 'files'), projectRoot, options);\n  await formatFiles(tree);\n}\n\nexport default applicationGenerator;\n```\n\n----------------------------------------\n\nTITLE: Nx Task Configuration for Vite in JSON\nDESCRIPTION: This JSON configuration describes the Nx task setup for a project named 'cart' to run build tasks using Vite. It specifies task options, cache, dependencies, inputs, and outputs, enabling Nx to automate task execution and caching based on existing build definitions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/maintain-typescript-monorepos.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"project\": {\n    \"name\": \"cart\",\n    \"type\": \"app\",\n    \"data\": {\n      \"root\": \"apps/cart\",\n      \"targets\": {\n        \"build\": {\n          \"options\": {\n            \"cwd\": \"apps/cart\",\n            \"command\": \"vite build\"\n          },\n          \"cache\": true,\n          \"dependsOn\": [\"^build\"],\n          \"inputs\": [\n            \"production\",\n            \"^production\",\n            {\n              \"externalDependencies\": [\"vite\"]\n            }\n          ],\n          \"outputs\": [\"{projectRoot}/dist\"],\n          \"executor\": \"nx:run-commands\",\n          \"configurations\": {},\n          \"metadata\": {\n            \"technologies\": [\"vite\"]\n          }\n        }\n      },\n      \"name\": \"cart\",\n      \"$schema\": \"../../../node_modules/nx/schemas/project-schema.json\",\n      \"sourceRoot\": \"apps/cart/src\",\n      \"projectType\": \"application\",\n      \"tags\": [],\n      \"implicitDependencies\": [],\n      \"metadata\": {\n        \"technologies\": [\"react\"]\n      }\n    }\n  },\n  \"sourceMap\": {\n    \"root\": [\"apps/cart/project.json\", \"nx/core/project-json\"],\n    \"targets\": [\"apps/cart/project.json\", \"nx/core/project-json\"],\n    \"targets.build\": [\"apps/cart/vite.config.ts\", \"@nx/vite/plugin\"],\n    \"targets.build.command\": [\"apps/cart/vite.config.ts\", \"@nx/vite/plugin\"],\n    \"targets.build.options\": [\"apps/cart/vite.config.ts\", \"@nx/vite/plugin\"],\n    \"targets.build.cache\": [\"apps/cart/vite.config.ts\", \"@nx/vite/plugin\"],\n    \"targets.build.dependsOn\": [\"apps/cart/vite.config.ts\", \"@nx/vite/plugin\"],\n    \"targets.build.inputs\": [\"apps/cart/vite.config.ts\", \"@nx/vite/plugin\"],\n    \"targets.build.outputs\": [\"apps/cart/vite.config.ts\", \"@nx/vite/plugin\"],\n    \"targets.build.options.cwd\": [\n      \"apps/cart/vite.config.ts\",\n      \"@nx/vite/plugin\"\n    ],\n    \"name\": [\"apps/cart/project.json\", \"nx/core/project-json\"],\n    \"$schema\": [\"apps/cart/project.json\", \"nx/core/project-json\"],\n    \"sourceRoot\": [\"apps/cart/project.json\", \"nx/core/project-json\"],\n    \"projectType\": [\"apps/cart/project.json\", \"nx/core/project-json\"],\n    \"tags\": [\"apps/cart/project.json\", \"nx/core/project-json\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nx Watch with PNPM Package Manager\nDESCRIPTION: Command showing how to run the Nx watch feature using PNPM package manager, correctly passing environment variables through to the watch command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/workspace-watching.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx watch --all -- echo \\$NX_PROJECT_NAME\n```\n\n----------------------------------------\n\nTITLE: Generating a Workspace Lint Rule in a Custom Sub-folder with Nx\nDESCRIPTION: This command generates a new workspace lint rule named `my-custom-rule` in a custom directory `tools/eslint-rules/my/custom/path`. The `--directory` flag is used to specify the custom path where the rule files will be generated. It also uses the Nx CLI with the `@nx/eslint:workspace-rule` schematic.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/eslint/docs/workspace-rule-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"nx g @nx/eslint:workspace-rule --name=my-custom-rule --directory=my/custom/path\"\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies using Nx Migrate\nDESCRIPTION: This command updates the workspace dependencies using Nx migrate. Replacing `latest` with `nx@<version>` allows specifying an exact version for the update.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/automate-updating-dependencies.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"nx migrate latest\"\n```\n\n----------------------------------------\n\nTITLE: Serving an Angular Application with Nx\nDESCRIPTION: Command to serve an Angular application in the Nx workspace. This starts the development server and makes the application available at localhost:4200.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd angular-monorepo\nnpx nx serve angular-store\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Library\nDESCRIPTION: Example of using Nx generate command to create a new Angular library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/generate.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/angular:library libs/mylibrary\n```\n\n----------------------------------------\n\nTITLE: Generating Secondary Entry Point without Module\nDESCRIPTION: This snippet shows how to create a secondary entry point named `button` in the `ui` library while skipping the creation of an NgModule. The `--skipModule` flag is used in the command to achieve this.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/library-secondary-entry-point-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:library-secondary-entry-point --library=ui --name=button --skipModule\n```\n\n----------------------------------------\n\nTITLE: Retrieving Package Manager Version in TypeScript\nDESCRIPTION: Function that returns the version of the package manager (npm, yarn, pnpm) used in the workspace. Can determine version automatically from lock files or accept an explicit package manager parameter. Takes optional parameters for package manager type and current working directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/getPackageManagerVersion.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetPackageManagerVersion(packageManager?: PackageManager, cwd?: string): string\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Application\nDESCRIPTION: Command to generate a new Angular application in an Nx workspace with default configurations for ESLint, Jest, and Cypress.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:app apps/appName\n```\n\n----------------------------------------\n\nTITLE: Configuring viteFinal in Storybook Main Config\nDESCRIPTION: This example demonstrates how to add a viteFinal function to customize the Vite configuration for Storybook, with separate configuration options for development and production environments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/custom-builder-configs.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync viteFinal(config, { configType }) {\n   if (configType === 'DEVELOPMENT') {\n     // Your development configuration goes here\n   }\n   if (configType === 'PRODUCTION') {\n     // Your production configuration goes here.\n   }\n   return mergeConfig(config, {\n     // Your environment configuration here\n   });\n },\n```\n\n----------------------------------------\n\nTITLE: Serving a React App in Nx Workspace\nDESCRIPTION: Command to serve a React application named 'happynrwl' within an Nx workspace. This starts the development server for the app.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-29-the-react-cli-you-always-wanted-but-didnt-know-about.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx serve happynrwl\n```\n\n----------------------------------------\n\nTITLE: Removing Build Scripts in JSON Files\nDESCRIPTION: These snippets depict the removal of existing build and typecheck scripts from the `package.json` files in various project directories, allowing Nx to infer these tasks using the `@nx/js` plugin. This step is crucial for enabling Nx to automatically manage and synchronize the build tasks across the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/typescript-packages.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"serve\": \"node dist/index.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Component Testing with React Native Testing Library\nDESCRIPTION: Example of a basic component test using React Native Testing Library to render and verify a Loading component.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-22-unit-testing-expo.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { render } from '@testing-library/react-native';\nimport React from 'react';\n\nimport Loading from './loading';\n\ndescribe('Loading', () => {\n  it('should render successfully', () => {\n    const { root } = render(<Loading />);\n    expect(root).toBeTruthy();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Typedoc Theme with Nx and Jest\nDESCRIPTION: This command executes unit tests for the typedoc-theme library using Jest as the test runner. It utilizes Nx's project-specific test command.\nSOURCE: https://github.com/nrwl/nx/blob/master/typedoc-theme/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nRun `nx test typedoc-theme` to execute the unit tests via [Jest](https://jestjs.io).\n```\n\n----------------------------------------\n\nTITLE: Serving React Application with Nx\nDESCRIPTION: This command uses Nx to serve a React application named 'react-store'. It will start a development server, typically accessible at http://localhost:4200.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/3-run-tasks/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx serve react-store\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimalist Changelog in JSON\nDESCRIPTION: This JSON configuration snippet demonstrates how to set up a minimalist changelog by disabling all metadata options. This results in a simpler changelog format without author information, commit references, or dates.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/configure-changelog-format.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"changelog\": {\n      \"projectChangelogs\": {\n        \"renderOptions\": {\n          \"authors\": false,\n          \"mapAuthorsToGitHubUsernames\": false,\n          \"commitReferences\": false,\n          \"versionTitleDate\": false\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checkout New Branch (Git)\nDESCRIPTION: This command creates and switches to a new branch named `add-workflow`. This branch is used to add the CI workflow file to the repository.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b add-workflow\n```\n\n----------------------------------------\n\nTITLE: Installing Express Plugin for Nx 18+\nDESCRIPTION: Command to add the @nx/express plugin to an existing Nx workspace version 18 or higher.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/express/express-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/express\n```\n\n----------------------------------------\n\nTITLE: Creating New JS Library with esbuild\nDESCRIPTION: Command to generate a new JavaScript library configured to use esbuild as the bundler.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/esbuild/esbuild-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/js:lib libs/mylib --bundler=esbuild\n```\n\n----------------------------------------\n\nTITLE: Running Nx Convert to Monorepo Generator\nDESCRIPTION: Command to automatically convert a standalone repository to a monorepo structure using Nx's built-in generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/standalone-to-monorepo.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g convert-to-monorepo\n```\n\n----------------------------------------\n\nTITLE: Generating Cypress Component Tests for Existing Components\nDESCRIPTION: Command to automatically generate Cypress component tests for existing components in a React project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-08-02-nx-14-5-cypess-v10-output-globs-linter-perf-react-tailwind-support.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nrwl/react:cypress-component-configuration --project=my-react-project --generate-tests\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Nx UI Library\nDESCRIPTION: This command executes the unit tests for the UI library using Nx. It demonstrates how to use the Nx CLI to run tests specifically for the 'ui' project.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/templates/angular-monorepo/lesson-6/libs/shared/ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx test ui\n```\n\n----------------------------------------\n\nTITLE: Configure Target Executor in project.json\nDESCRIPTION: Example configuration showing how to use a local plugin's executor in a project's target configuration within `project.json`. This configuration defines a new target named `mybuild` that uses a custom executor provided by a local plugin, demonstrating how to extend Nx functionality.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-05-02-nx-v14-is-out-here-is-all-you-need-to-know.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"root\": \"apps/demo\",\n  \"sourceRoot\": \"apps/demo/src\",\n  \"projectType\": \"application\",\n  \"targets\": {\n    \"mybuild\": {\n      \"executor\": \"@myorg/workspace-extensions:build\",\n      \"outputs\": [\"{options.outputPath}\"],\n      \"options\": {\n        \"outputPath\": \"dist/apps/someoutput\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nx Node.js Project with Fastify and Docker\nDESCRIPTION: This command creates a new Nx workspace with a Node.js application using Fastify framework and Docker setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/node-server-fly-io.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-nx-workspace@latest my-api \\\n  --preset=node-standalone \\\n  --framework=fastify \\\n  --docker\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Dependencies in nx.json\nDESCRIPTION: This snippet demonstrates how to define target dependencies using the `dependsOn` property within the `targetDefaults` section of the `nx.json` file.  It ensures that the `build` target depends on all `build` targets of its dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Nx Agents in GitHub Actions\nDESCRIPTION: Updated GitHub Actions workflow configuration to enable Nx Agents for task distribution across multiple machines.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/tutorial/github-actions.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\n\n```\n\n----------------------------------------\n\nTITLE: Running Nx Linter with Dependency Checks\nDESCRIPTION: Shell commands to run the Nx linter with the new dependency checks across all packages, including an option to automatically fix issues.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-07-06-nx-16-5-release.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many --target=lint\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many --target=lint --fix\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nx Workspace\nDESCRIPTION: Command to create a new Nx workspace from scratch using npx. This initializes a fresh Nx environment with all necessary configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/getting-started/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace\n```\n\n----------------------------------------\n\nTITLE: Creating React Application with Custom Tags\nDESCRIPTION: Generates a React application with custom tags for linting purposes. Shows how to add multiple tags for scope and type categorization.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/application-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react:app apps/my-app --tags=scope:admin,type:ui\n```\n\n----------------------------------------\n\nTITLE: Watch Single Project with File Change Echo\nDESCRIPTION: Example showing how to watch a single project 'app' and echo the project name and changed files using environment variables.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/watch.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx watch --projects=app -- echo \\$NX_PROJECT_NAME \\$NX_FILE_CHANGES\n```\n\n----------------------------------------\n\nTITLE: Publish Nx Plugin with Nx Release\nDESCRIPTION: Publishes an Nx plugin using `nx release`. The `--first-release` flag indicates that this is the initial release of the plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-10-tailoring-nx-for-your-organization.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnx release --first-release\n```\n\n----------------------------------------\n\nTITLE: Generating Storybook Configuration for Angular Project\nDESCRIPTION: This command initializes Storybook configuration for a specified Angular project using Nx. It allows the user to provide the project name, and options for setting up interaction tests and story generation.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/storybook-configuration-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:storybook-configuration project-name\n```\n\n----------------------------------------\n\nTITLE: Importing a Shared Component from UI Library\nDESCRIPTION: Example of how to import a shared component from the UI library. This demonstrates the import syntax for using components across different apps in the monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-24-step-by-step-guide-to-creating-an-expo-monorepo-with-nx.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Carousel } from '@nx-expo-monorepo/ui';\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Orders Library in Nx\nDESCRIPTION: This command executes the unit tests for the 'orders' library within an Nx workspace. It uses the Nx CLI to run the tests specifically for the 'orders' project.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/templates/angular-monorepo/lesson-6/libs/orders/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnx test orders\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Module Federation in JavaScript\nDESCRIPTION: Update the host application's module federation config to include the 'greeting' remote.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/federate-a-module.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  name: 'host',\n  remotes: ['greeting'], //  <-- Ensure that greeting remote is listed here\n};\n```\n\n----------------------------------------\n\nTITLE: Checking for Existing Version Plans (Shell)\nDESCRIPTION: This shell command utilizes the Nx CLI to check if a version plan file exists for the changes made in the codebase. It supports various options to analyze the changed files and ensure that relevant changes are linked to corresponding version plans.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/file-based-versioning-version-plans.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx release plan:check\n```\n\n----------------------------------------\n\nTITLE: Executing Unit Tests with Jest in Nx\nDESCRIPTION: This snippet demonstrates how to execute the unit tests for the ui-customers library using the Nx command-line interface. The command 'nx test ui-customers' triggers the testing process via Jest.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/ui-customers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nRun `nx test ui-customers` to execute the unit tests via [Jest](https://jestjs.io).\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up nx-shops Repository\nDESCRIPTION: Commands to clone the nx-shops repository, install dependencies, and run initial tasks to ensure everything is working.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/tutorial/circle.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<your-username>/nx-shops.git\npnpm i\npnpm nx run-many -t lint test build\n```\n\n----------------------------------------\n\nTITLE: Defining Project Tasks in project.json for Nx Angular Project\nDESCRIPTION: This snippet shows the structure of the project.json file for an Angular project in Nx, listing various targets like build, serve, lint, and test.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/4-define-tasks/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"angular-store\",\n  ...\n  \"targets\": {\n    \"build\": { ... },\n    \"serve\": { ... },\n    \"extract-i18n\": { ... },\n    \"lint\": { ... },\n    \"test\": { ... },\n    \"serve-static\": { ... },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Building for Static HTML Export\nDESCRIPTION: This command builds a Next.js application configured for static HTML export. It generates static HTML files instead of a server-side rendered application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n\"nx build my-next-app\"\n```\n\n----------------------------------------\n\nTITLE: Implementing an Executor with Nx Devkit in TypeScript\nDESCRIPTION: A simple executor implementation using Nx Devkit. This approach uses async/await with Promises instead of RxJS observables, making it more straightforward to write and debug.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/nx-devkit-angular-devkit.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Schema {\n  message: string;\n  allCaps: boolean;\n}\n\nexport default async function (\n  options: Schema,\n  context: ExecutorContext\n): Promise<{ success: true }> {\n  if (options.allCaps) {\n    console.log(options.message.toUpperCase());\n  } else {\n    console.log(options.message);\n  }\n  return { success: true };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Nx Workspace with Nuxt Preset\nDESCRIPTION: Command to create a new Nx workspace optimized for Nuxt using the create-nx-workspace CLI tool. It sets up a new workspace with Nuxt configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-06-nuxt-js-support-in-nx.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest --preset=nuxt\n```\n\n----------------------------------------\n\nTITLE: Updating dependencies for Angular CLI\nDESCRIPTION: This snippet illustrates the necessary changes to update the Angular CLI version from ~13.3.0 to ~19.1.0 in the dependencies section of package.json to maintain functionality across the project.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-4-0/update-angular-cli.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@angular/cli\": \"~13.3.0\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@angular/cli\": \"~19.1.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nx to the latest version\nDESCRIPTION: Commands to update Nx and its plugins to the latest version using the automated migration command, followed by running necessary migrations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-07-nx-update-20-5.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx migrate latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Import Tailwind CSS Styles\nDESCRIPTION: This snippet shows how to import Tailwind CSS styles into your application's main styles file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-in-react.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for React Monorepo Orders Library\nDESCRIPTION: This command executes unit tests for the @react-monorepo/orders library using Vitest, a testing framework for Vite-based projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/6-create-local-library/_solution/libs/orders/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnx test @react-monorepo/orders\n```\n\n----------------------------------------\n\nTITLE: Installing Non-Core Nx Plugin\nDESCRIPTION: Example of installing the latest version of a non-core Nx plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/add.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx add non-core-nx-plugin\n```\n\n----------------------------------------\n\nTITLE: Multiple Target Execution for Affected Projects\nDESCRIPTION: Run multiple targets (lint, test, build) for affected projects. Available in Nx v15.4+.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/affected.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t lint test build\n```\n\n----------------------------------------\n\nTITLE: Configure Group-Specific Pre-Version Build Command in nx.json\nDESCRIPTION: This configuration defines a `groupPreVersionCommand` within a release group in `nx.json`. This command runs the `build` target specifically for projects within the \"my-group\" release group before versioning.  It uses `nx run-many` to target the specified projects and ensures that they are built before the group's version is updated.  The global `preVersionCommand` will also execute.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/build-before-versioning.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"groups\": {\n      \"my-group\": {\n        \"projects\": [\"my-lib-one\", \"my-lib-two\"],\n        \"version\": {\n          \"groupPreVersionCommand\": \"npx nx run-many -t build -p my-lib-one,my-lib-two\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Vitest Tests\nDESCRIPTION: Command to run unit tests using Vitest in watch mode\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-17-modern-angular-testing-with-nx.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx test my-app --watch\n```\n\n----------------------------------------\n\nTITLE: Configuring @nx/web:file-server in project.json\nDESCRIPTION: This snippet shows how to configure the @nx/web:file-server executor in the project.json file. It sets up a 'serve' target that uses the file-server executor and a 'build' target that generates a simple index.html file.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/web/docs/file-server-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"myapp\": {\n  \"targets\": {\n    \"serve\": {\n      \"executor\": \"@nx/web:file-server\",\n      \"options\": {\n        \"buildTarget\": \"build\",\n        \"port\": 3000,\n      },\n    },\n    \"build\": {\n      \"outputs\": [\"{workspaceRoot}/dist/myapp\"],\n      \"command\": \"echo 'Generating index.html' && mkdir -p dist && echo '<h1>Works</h1>' > dist/myapp/index.html\"\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Plugin Using CLI Command\nDESCRIPTION: Basic usage of the 'nx add' command to install and initialize a plugin. The command takes a package specifier as an argument.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/add.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add <packageSpecifier>\n```\n\n----------------------------------------\n\nTITLE: Generating Simple Component with Nx CLI\nDESCRIPTION: This command generates a component named 'MyComponent' at the specified path within the Angular app using the Nx CLI. This is the basic command structure to create a new component.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/component-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:component apps/my-app/src/lib/my-component/my-component.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook in Docs Mode for Non-Angular Projects\nDESCRIPTION: This configuration enables docs mode for Storybook in non-Angular projects. It sets the docsMode option to true and uses the @storybook/addon-docs addon.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/storybook-executor-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"storybook\": {\n    \"executor\": \"@nx/storybook:storybook\",\n    \"options\": {\n        \"port\": 4400,\n        \"configDir\": \"libs/ui/.storybook\",\n        \"docsMode\": true\n    },\n    \"configurations\": {\n        \"ci\": {\n            \"quiet\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating All Nx Plugins to Latest Version\nDESCRIPTION: Example of using 'nx migrate' to update all Nx plugins to the latest version, which generates a migrations.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/migrate.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Build Task in Nx\nDESCRIPTION: This snippet sets up an inferred build task for projects using Webpack. The configuration includes integrating the Webpack plugin within Nx, defining the build target. Requires Webpack installation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/common-tasks.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"plugins\":[{\"plugin\":\"@nx/webpack/plugin\",\"options\":{\"buildTargetName\":\"build\"}}]}\n```\n\n----------------------------------------\n\nTITLE: Running Nx Watch with Yarn Package Manager\nDESCRIPTION: Command showing how to run the Nx watch feature using Yarn package manager, with the correct syntax to handle environment variables properly.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/workspace-watching.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx -- watch --all -- echo \\$NX_PROJECT_NAME\n```\n\n----------------------------------------\n\nTITLE: Running Nx Tasks with Increased Parallelism via Command Line\nDESCRIPTION: This command increases the number of parallel processes from the default of 3 to 5 when building an application with Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/run-tasks-in-parallel.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx build myapp --parallel=5\n```\n\n----------------------------------------\n\nTITLE: Convert App to Remote and Attach to Host (Nx)\nDESCRIPTION: This command converts an application named `myapp` into a remote and attaches it to an existing host application named `myhostapp`. The `--routing=true` flag enables routing for the remote application. The `--host=myhostapp` flag specifies the name of the host application to attach to.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/setup-mf-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx g setup-mf myapp --mfType=remote --routing=true --host=myhostapp\n```\n\n----------------------------------------\n\nTITLE: Creating New JS Library with esbuild\nDESCRIPTION: Command to generate a new JavaScript library that uses esbuild as the bundler.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/esbuild/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/js:lib libs/mylib --bundler=esbuild\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nx Workspace with pnpm\nDESCRIPTION: Command to create a new Nx workspace using pnpm package manager. The --pm flag specifies pnpm as the package manager for the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/getting-started/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace --pm pnpm\n```\n\n----------------------------------------\n\nTITLE: Adding Component Test Target in Project Configuration\nDESCRIPTION: This JSON snippet shows a sample project configuration that is generated for running component tests. It demonstrates how to configure a target to execute Cypress tests for a specific project, including the paths to configurations and target executors.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"component-test\": {\n      \"executor\": \"@nx/cypress:cypress\",\n      \"options\": {\n        \"cypressConfig\": \"<path-to-project-root>/cypress.config.ts\",\n        \"testingType\": \"component\",\n        \"devServerTarget\": \"some-angular-app:build\",\n        \"skipServe\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrated Storybook Configuration for React Projects with Vite\nDESCRIPTION: This code snippet demonstrates a migrated .storybook/main.js file for a React project using Vite and Storybook 8. It includes configuration for stories, addons, and the React-Vite framework with Vite builder options.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/migrate-8-generator-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n  stories: ['../src/app/**/*.@(mdx|stories.@(js|jsx|ts|tsx)'],\n  addons: ['@storybook/addon-essentials'],\n  framework: {\n    name: '@storybook/react-vite',\n    options: {\n      builder: {\n        viteConfigPath: 'apps/rv1/vite.config.ts',\n      },\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Service\nDESCRIPTION: Command demonstrating the fallback to @schematics/angular for generating an Angular service.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:service apps/appName/src/lib/my-service/my-service\n```\n\n----------------------------------------\n\nTITLE: Generating an Executor\nDESCRIPTION: This snippet shows how to generate an executor using the Nx CLI. The executor is created within the plugin `tools/my-plugin` at the path `src/executors/echo`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/local-executors.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/plugin:executor tools/my-plugin/src/executors/echo\n```\n\n----------------------------------------\n\nTITLE: Serving Angular Applications with Incremental Builds\nDESCRIPTION: Command to serve an Angular application using incremental builds in Nx. This automatically uses the configured incremental build setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/setup-incremental-builds-angular.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx serve my-app\n```\n\n----------------------------------------\n\nTITLE: Basic Rollup Configuration in project.json\nDESCRIPTION: Basic configuration for Rollup in project.json to compile a TypeScript library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/compile-multiple-formats.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"my-awesome-lib\",\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/rollup:rollup\",\n      \"options\": {\n        \"main\": \"packages/my-awesome-lib/src/index.ts\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Start NX Project on Web Browser\nDESCRIPTION: This JSON snippet configures the start of a mobile project on a web browser using NX with Expo. Setting 'web' to true in 'options' opens the app in a browser.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/start-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n    \"start\": {\n      \"executor\": \"@nx/expo:start\",\n      \"options\": {\n        \"port\": 8081,\n        \"web\": true\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Start Storybook Server\nDESCRIPTION: This command starts the Storybook server for a specific project. Replace `project-name` with the name of the project containing the Storybook setup. The Storybook server must be running for the `test-storybook` command to connect and execute the interaction tests.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/interaction-tests.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx storybook project-name\n```\n\n----------------------------------------\n\nTITLE: Generating New React Application with Nx\nDESCRIPTION: This command uses the Nx React plugin to generate a new React application named 'demo' in the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/templates/react-monorepo/lesson-2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx g @nx/react:app demo\n```\n\n----------------------------------------\n\nTITLE: Configuring manifestRootsToUpdate and packageRoot\nDESCRIPTION: This example configures the `nx.json` file to update both source and dist package.json files during versioning. It also configures the `packageRoot` option for publishing from the dist directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/updating-version-references.md#_snippet_4\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"release\": {\n    // Ensure that versioning works in both the source and dist directories\n    \"version\": {\n      // path structures for both the source and dist directories, where {projectRoot} and {projectName} are available placeholders that will be interpolated by Nx\n      \"manifestRootsToUpdate\": [\n        \"{projectRoot}\",\n        // We use the object form of the manifestRootsToUpdate to specify that we want to update the dist package.json files and not preserve the local dependency references (if not using pnpm or bun)\n        {\n          \"path\": \"dist/packages/{projectName}\",\n          \"preserveLocalDependencyProtocols\": false // (NOT NEEDED WHEN USING pnpm or bun) because we need to ensure our dist package.json files are valid for publishing and the local dependency references such as \"workspace:\" and \"file:\" are removed\n        }\n      ]\n    }\n  },\n  \"targetDefaults\": {\n    // Ensure that publishing works from the dist directory\n    // The nx-release-publish target is added implicitly behind the scenes by Nx Release, and we can therefore configure it in targetDefaults\n    \"nx-release-publish\": {\n      \"options\": {\n        // the packageRoot property is specific the TS/JS nx-release-publish implementation, other ecosystem plugins may have different options\n        \"packageRoot\": \"dist/packages/{projectName}\" // path structure for your dist directory, where {projectRoot} and {projectName} are available placeholders that will be interpolated by Nx\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Numbers with exclusiveMaximum in JSON Schema\nDESCRIPTION: This snippet illustrates the use of the 'exclusiveMaximum' property in a JSON schema to ensure a number value is strictly less than the specified maximum. In this example, the value must be less than 201.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": {\n    \"type\": \"number\",\n    \"exclusiveMaximum\": 201\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Lint Tasks on Agent Machine in YAML\nDESCRIPTION: This snippet demonstrates how to run lint tasks for all projects defined in the PROJECTS environment variable on an agent machine in a manual distribution setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/concepts/parallelization-distribution.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Run lint for all projects defined in PROJECTS\n- nx run-many --projects=$PROJECTS -t lint\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Paths for Nx Tasks\nDESCRIPTION: JSON configuration showing how to specify output directories for build tasks to improve caching.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-08-02-nx-14-5-cypess-v10-output-globs-linter-perf-react-tailwind-support.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"targetDefaults\": {\n        \"build\": {\n            ...\n            \"outputs\": [\"dist/libs/mylib\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Nx Workspace Dependencies\nDESCRIPTION: Command to upgrade Nx workspace packages to the latest version, including automated code migrations for configuration and source files to handle breaking changes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\n----------------------------------------\n\nTITLE: Exclude Projects from Graph\nDESCRIPTION: Command to exclude specific projects from the project graph visualization\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/graph.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx graph --exclude=project-one,project-two\n```\n\n----------------------------------------\n\nTITLE: Working Directory Configuration\nDESCRIPTION: Example showing how to set a working directory for command execution using the cwd option.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/docs/run-commands-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"create-script\": {\n    \"executor\": \"nx:run-commands\",\n    \"options\": {\n        \"cwd\": \"apps/frontend\",\n        \"commands\": [\n          \"mkdir -p scripts\",\n          \"touch scripts/my-script.sh\",\n          \"chmod +x scripts/my-script.sh\"\n        ],\n        \"parallel\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Logic and In-Memory Database\nDESCRIPTION: TypeScript code that implements todo-related logic and an in-memory database. It includes functions for getting and adding todos, as well as a simple DB interface.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-qwik.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { Todo } from './todo.context';\n\ninterface DB {\n  store: Record<string, any[]>;\n  get: (storeName: string) => any[];\n  set: (storeName: string, value: any[]) => boolean;\n  add: (storeName: string, value: any) => boolean;\n}\n\nexport const db: DB = {\n  store: { todos: [] },\n  get(storeName) {\n    return db.store[storeName];\n  },\n  set(storeName, value) {\n    try {\n      db.store[storeName] = value;\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n  add(storeName, value) {\n    try {\n      db.store[storeName].push(value);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n};\n\nexport function getTodos() {\n  if (db.get('todos')?.length === 0) {\n    db.set('todos', [\n      {\n        id: 1,\n        message: 'First todo',\n      },\n    ]);\n  }\n  const todos: Todo[] = db.get('todos');\n  const lastId = [...todos].sort((a, b) => b.id - a.id)[0].id;\n  return { todos, lastId };\n}\n\nexport function addTodo(todo: { id: string; message: string }) {\n  const success = db.add('todos', {\n    id: parseInt(todo.id),\n    message: todo.message,\n  });\n  return { success };\n}\n```\n\n----------------------------------------\n\nTITLE: Storybook Story File for Angular Button Component\nDESCRIPTION: Generated story file for the MyButtonComponent using Component Story Format 3 (CSF3) with two story examples including an interaction test.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/plugin-angular.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/angular';\nimport { MyButtonComponent } from './my-button.component';\nimport { within } from '@storybook/testing-library';\nimport { expect } from '@storybook/jest';\n\nconst meta: Meta<MyButtonComponent> = {\n  component: MyButtonComponent,\n  title: 'MyButtonComponent',\n};\nexport default meta;\ntype Story = StoryObj<MyButtonComponent>;\n\nexport const Primary: Story = {\n  args: {\n    text: 'Click me!',\n    padding: 10,\n    disabled: true,\n  },\n};\n\nexport const Heading: Story = {\n  args: {\n    text: 'Click me!',\n    padding: 10,\n    disabled: true,\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/my-button works!/gi)).toBeTruthy();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Cache in Nx 20 (JSON)\nDESCRIPTION: This snippet shows how to opt-out of the new database caching solution in Nx 20 by setting 'useLegacyCache' to true in the nx.json configuration file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-10-03-nx-20-release.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"useLegacyCache\": true,\n  \"namedInputs\": {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Express Application in Nx Workspace\nDESCRIPTION: This command serves the Express application named 'my-express-api' using Nx. By default, it starts the application on localhost:3333/api.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-express.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx serve my-express-api\n```\n\n----------------------------------------\n\nTITLE: Angular Application with SCSS Styling\nDESCRIPTION: Creates an Angular application in a specific directory with SCSS as the stylesheet format\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/application-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:app my-dir/my-app --style=scss\n```\n\n----------------------------------------\n\nTITLE: Specifying Git Tag Patterns for Nx Releases\nDESCRIPTION: You can customize the git tag pattern for each project using the `releaseTagPattern` property in `nx.json`. It is important to include `{projectName}` and `{version}` in the pattern to ensure that each tag is unique. For example, setting the pattern to `release/{projectName}/{version}` generates tags like `release/pkg-1/1.1.0`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/release-projects-independently.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"releaseTagPattern\": \"release/{projectName}/{version}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lint Target for Dependency Checks\nDESCRIPTION: JSON configuration snippet showing how to include package.json in the lint file patterns for the new @nx/dependency-checks ESLint rule.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-07-06-nx-16-5-release.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"webapp\",\n  \"targets\": {\n    \"lint\": {\n      \"executor\": \"@nx/linter:eslint\",\n      \"outputs\": [\"{options.outputFile}\"],\n      \"options\": {\n        \"lintFilePatterns\": [\n          \"apps/webapp/**/*.{ts,tsx,js,jsx}\",\n          \"apps/webapp/package.json\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Build Configuration with Experimental App Only Enabled\nDESCRIPTION: This JSON snippet shows how to configure a Next.js build to only include routes in the `app/` directory. This feature, enabled with `experimentalAppOnly: true` within the 'development' configuration of the 'build' target, requires Next.js 13 or later.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/build-next-executor-examples.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n    \"build\": {\\n      \"executor\": \"@nx/next:build\",\\n      \"outputs\": [\"{options.outputPath}\"],\\n      \"defaultConfiguration\": \"production\",\\n      \"options\": {\\n        \"outputPath\": \"dist/acme\"\\n      },\\n      \"configurations\": {\\n        \"development\": {\\n          \"outputPath\": \".\",\\n          \"experimentalAppOnly\": true\\n        },\\n        \"production\": {}\\n      }\\n    },\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM/Yarn Workspaces\nDESCRIPTION: Configuration for enabling workspaces in package.json for npm and yarn package managers. Specifies workspace directories in apps/* and libs/* patterns.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/switch-to-workspaces-project-references.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workspaces\": [\"apps/*\", \"libs/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Changelog Render Options\nDESCRIPTION: Illustrates how to customize the changelog output using the `renderOptions` within the `nx.json` file. These options control various aspects of the generated changelog, such as including commit authors, references, and the date in the version title.  Customization can be applied to both project and workspace changelogs.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/manage-releases.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // ... more nx.json config\n  \"release\": {\n    \"changelog\": {\n      \"projectChangelogs\": {\n        \"renderOptions\": {\n          // Whether or not the commit authors should be added to the bottom of the changelog in a \"Thank You\" section.\n          \"authors\": true,\n          // Whether or not the commit references (such as commit and/or PR links) should be included in the changelog.\n          \"commitReferences\": true,\n          // Whether or not to include the date in the version title. It can be set to false to disable it, or true to enable with the default of (YYYY-MM-DD).\n          \"versionTitleDate\": true\n        }\n      },\n      \"workspaceChangelog\": {\n        \"renderOptions\": {\n          // Whether or not the commit authors should be added to the bottom of the changelog in a \"Thank You\" section.\n          \"authors\": true,\n          // Whether or not the commit references (such as commit and/or PR links) should be included in the changelog.\n          \"commitReferences\": true,\n          // Whether or not to include the date in the version title. It can be set to false to disable it, or true to enable with the default of (YYYY-MM-DD).\n          \"versionTitleDate\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nx Migration Scripts\nDESCRIPTION: Command to execute migration scripts after updating Nx dependencies. This step applies the necessary code changes to ensure compatibility with the new version of Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-06-09-nx-14-2-angular-v14-storybook-update-lightweight-nx-and-more.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Generating a Migration in Nx Plugin\nDESCRIPTION: Command to generate a new migration generator that updates repos to use a new executor name instead of an old one when upgrading past version 2.0.1.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/migration-generators.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/plugin:migration libs/pluginName/src/migrations/change-executor-name \\\n --name='Change Executor Name' \\\n --packageVersion=2.0.1 \\\n --project=pluginName \\\n --description='Changes the executor name from oldExecutorName to newExecutorName'\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Web Worker with Nx CLI\nDESCRIPTION: This command generates a web worker named 'myWebWorker' within the specified Angular project 'myapp'. The generator is part of the @nx/angular package and it requires the web worker name and the project name as input.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/web-worker-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:web-worker myWebWorker --project=myapp\n```\n\n----------------------------------------\n\nTITLE: Running the Application\nDESCRIPTION: This bash command uses the Nx CLI to serve the 'my-app' application. It triggers the 'serve' target defined in the project's `project.json` file, which in turn executes the `@nx/js:node` executor.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/node-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx serve my-app\n```\n\n----------------------------------------\n\nTITLE: Testing Projects with Specific Tag in Nx run-many\nDESCRIPTION: Example of testing all projects with a specific tag ('type:ui') using the run-many command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run-many.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t test --projects=tag:type:ui\n```\n\n----------------------------------------\n\nTITLE: Configuring Root babel.config.json for Nx Monorepo\nDESCRIPTION: This snippet shows the configuration for a root babel.config.json file in an Nx monorepo. It includes all packages in the Babel configuration when babelUpwardRootMode is set to true.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/rollup/src/docs/rollup-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"babelrcRoots\": [\"*\"] }\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Affected Projects in Nx\nDESCRIPTION: Demonstrates how to use Nx's affected commands to run tests only for projects affected by recent changes, optimizing CI/CD pipelines in large React applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx affected:test\n```\n\n----------------------------------------\n\nTITLE: Using Nx Library in React Native Application\nDESCRIPTION: This code snippet demonstrates how to import and use a React Native library (shared-ui-layout) within a React Native application's main component (App.tsx). It imports the Layout component and renders it within a SafeAreaView.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-native.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport { SafeAreaView } from 'react-native';\n\nimport { Layout } from '@happynrwl/shared-ui-layout';\n\nconst App = () => {\n  return (\n    <SafeAreaView>\n      <Layout />\n    </SafeAreaView>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Visualizing Project Graph with Nx\nDESCRIPTION: This shell command launches an interactive visualization of the workspace's project graph using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx graph\n```\n\n----------------------------------------\n\nTITLE: Testing Projects with Multiple Tags in Nx run-many\nDESCRIPTION: Demonstrates how to test projects with multiple tags ('type:feature' or 'type:ui') using the run-many command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run-many.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t test --projects=tag:type:feature,tag:type:ui\n```\n\n----------------------------------------\n\nTITLE: Creating IDE Communication Service in TypeScript\nDESCRIPTION: Reference to the IDE communication service file that handles message passing between the Generate UI and different IDEs, showing the path to the implementation file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-03-02-expanding-nx-console-to-jetbrains-ides.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nide-communication.service.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Nx E2E Tests\nDESCRIPTION: A GitHub Actions workflow configuration that sets up automated task splitting for Nx E2E tests using Nx Cloud. The workflow uses PNPM as the package manager, configures Node.js environment, and runs affected tests including the e2e-ci command for distributed test execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/features/split-e2e-tasks.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\n# ...\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          filter: tree:0\n\n      - uses: pnpm/action-setup@v4\n        with:\n          version: 9\n\n      - run: pnpm dlx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\" --stop-agents-after=\"e2e-ci\"\n\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n          cache: 'pnpm'\n\n      - run: pnpm install --frozen-lockfile\n      - uses: nrwl/nx-set-shas@v4\n\n      - run: pnpm exec nx affected -t lint test build e2e-ci\n```\n\n----------------------------------------\n\nTITLE: Generate Basic Web Application with Nx\nDESCRIPTION: Creates a simple web application named 'my-app' using the @nx/web generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/web/docs/application-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/web:application apps/my-app\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/next Plugin\nDESCRIPTION: Commands to install the @nx/next plugin in an Nx workspace, with separate instructions for Nx 18+ and earlier versions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/next/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/next\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/next\n```\n\n----------------------------------------\n\nTITLE: Importing Dynamic Module Federation Utility in React\nDESCRIPTION: Code snippet showing how to import the loadRemoteModule utility from the Nx React module federation package. This utility allows React applications to dynamically load federated modules at runtime.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-12-20-nx-17-2-release.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadRemoteModule } from '@nx/react/mf';\n```\n\n----------------------------------------\n\nTITLE: Updating target configuration in project.json (After)\nDESCRIPTION: This JSON snippet shows the updated target configuration in the `project.json` file after the migration. The migration adds the `\"continuous\": true` property to the `serve` target, because the target uses `@angular-devkit/build-angular:dev-server` executor, and the `continuous` property was not already defined.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-21-0-0/set-continuous-option.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"targets\": {\n    // ...\n    \"serve\": {\n      \"continuous\": true,\n      \"executor\": \"@angular-devkit/build-angular:dev-server\",\n      \"options\": {\n        \"buildTarget\": \"my-app:build\",\n        \"port\": 4200\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a new version (Nx)\nDESCRIPTION: This snippet demonstrates how to publish a new version of the Nx plugin using the `nx run-many` command. It targets the 'publish' target with a specific version and tag.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-10-create-your-own-create-react-app-cli.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many --targets publish --ver 1.0.2 --tag latest\n```\n\n----------------------------------------\n\nTITLE: Generating new Angular library with Nx\nDESCRIPTION: Command to generate a new Angular library named 'mylib' using Nx and the @nx/angular plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/2-use-preset/_solution/angular-monorepo/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx g @nx/angular:lib mylib\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspaces in package.json for React Monorepo\nDESCRIPTION: Defines the workspaces in the root-level package.json to include apps and libraries directories, enabling easy imports between projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workspaces\": [\"apps/*\", \"libs/*\", \"libs/shared/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cypress Plugin for Automated E2E Task Splitting\nDESCRIPTION: Command to add the Cypress plugin, set up inferred tasks, and enable task splitting for Cypress tests.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/features/split-e2e-tasks.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/cypress\n```\n\n----------------------------------------\n\nTITLE: Modifying React Component in Products Library\nDESCRIPTION: This code snippet shows a change made to the Products component in the products library. It adds a new paragraph element with a greeting message.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/10-affected/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport styles from './products.module.css';\n\nexport function Products() {\n  return (\n    <div className={styles['container']}>\n      <h1>Welcome to Products!</h1>\n      <p>This is a change. 👋</p>\n    </div>\n  );\n}\n\nexport default Products;\n```\n\n----------------------------------------\n\nTITLE: Build a React Library\nDESCRIPTION: Builds a React library for publishing to npm or a private registry.  The library must have been generated with a bundler specified.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react/react-plugin.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Parallel Testing with Worker Limit in Nx run-many\nDESCRIPTION: Shows how to run tests for specific projects in parallel with a limit of 5 workers using the run-many command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run-many.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t test -p proj1 proj2 --parallel=5\n```\n\n----------------------------------------\n\nTITLE: Configuring Independent Releases in Nx\nDESCRIPTION: To enable independent releases in Nx, set the `projectsRelationship` property to \"independent\" in the `nx.json` file. This configuration allows each project in the monorepo to maintain its release schedule and version independently.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/release-projects-independently.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"projectsRelationship\": \"independent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Storybook Interaction Tests - React\nDESCRIPTION: This command configures Storybook for a React project, enabling interaction tests. The `project-name` argument specifies the React project, and the `--interactionTests=true` flag ensures that Storybook is set up with interaction test support by adding the @storybook/addon-interactions addon.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/interaction-tests.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:storybook-configuration project-name --interactionTests=true\n```\n\n----------------------------------------\n\nTITLE: Debug Plugin Configuration with Nx 16+\nDESCRIPTION: Shows how to add a debug plugin to log the final configuration when using composePlugins.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/next-config-setup.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = composePlugins(...plugins, function debug(config) {\n  // The debug plugin will be called last\n  console.log({ config });\n  return config;\n})(nextConfig);\n```\n\n----------------------------------------\n\nTITLE: Generating React Components in Nx\nDESCRIPTION: Commands to create new React components within a library, with optional export flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:component libs/my-new-lib/src/lib/my-new-component\n\n# Note: If you want to export the component\n# from the library use  --export\nnx g @nx/react:component libs/my-new-lib/src/lib/my-new-component --export\n```\n\n----------------------------------------\n\nTITLE: Generate Web Application in Nested Directory\nDESCRIPTION: Creates a web application in a nested directory structure, placing 'my-app' inside the 'my-dir' directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/web/docs/application-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/web:app apps/my-dir/my-app\n```\n\n----------------------------------------\n\nTITLE: Identifying Azure DevOps Organization and Project URL Structure\nDESCRIPTION: This snippet demonstrates the URL structure for Azure DevOps projects, showing where to find the organization and project names. It's crucial for correctly setting up the integration with Nx Cloud.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/set-up/azure-devops.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://dev.azure.com/[organization]/[project]\n```\n\n----------------------------------------\n\nTITLE: Validating Numbers with maximum in JSON Schema\nDESCRIPTION: This example shows how to use the 'maximum' property in a JSON schema to ensure a number value is less than or equal to the specified maximum. Here, the value must be less than or equal to 200.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": {\n    \"type\": \"number\",\n    \"maximum\": 200\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Cypress Tests\nDESCRIPTION: Using Nx configurations to set environment variables for different testing environments (QA and development). This allows passing different API URLs or other environment-specific values to Cypress tests.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/docs/cypress-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"targets\": {\n  \"e2e\": {\n    \"executor\": \"@nx/cypress:cypress\",\n    \"options\": {\n      \"cypressConfig\": \"apps/app-e2e/cypres.config.ts\",\n      \"devServerTarget\": \"my-react-app:serve\",\n      \"testingType\": \"e2e\"\n    },\n    \"configurations\": {\n      \"qa\": {\n        \"env\": {\n          \"API_URL\": \"https://api.qa.company.com\"\n        }\n      },\n      \"dev\": {\n        \"env\": {\n          \"API_URL\": \"http://localhost:3333/api\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Specific Plugin Capabilities\nDESCRIPTION: Command to list the generators and executors available in a specific plugin, using @nx/web as an example.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/list.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n nx list @nx/web\n```\n\n----------------------------------------\n\nTITLE: Watch Mode Configuration in project.json\nDESCRIPTION: Extended configuration that adds watch mode support to the Vitest test executor setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/test-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"my-app\": {\n    \"targets\": {\n        \"test\": {\n            \"executor\": \"@nx/vite:test\",\n            \"options\": {\n                \"config\": \"apps/my-app/vite.config.ts\"\n            },\n            \"configurations\": {\n                \"watch\": {\n                    \"watch\": true\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating CircleCI Workflow Configuration with Nx\nDESCRIPTION: This command generates an initial CI setup for CircleCI using Nx. It's used to start the process of setting up Distributed Task Execution (DTE) in a project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-10-13-nx-conf-2023-recap.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/workspace:ci-workflow --ci=circleci\n```\n\n----------------------------------------\n\nTITLE: Custom Gradle Tasks Configuration\nDESCRIPTION: Configuration example showing how to specify custom gradle tasks for different build types like bundle or APK generation.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/build-android-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"build-android\": {\n      \"executor\": \"@nx/react-native:build-android\",\n      \"outputs\": [\n        \"{projectRoot}/build/outputs/bundle\",\n        \"{projectRoot}/build/outputs/apk\"\n      ],\n      \"options\": {\n        \"tasks\": [\"bundleRelease\"]\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Node Plugin in Existing Nx Workspace\nDESCRIPTION: Command to add the @nx/node plugin to an existing Nx workspace, enabling Fastify project creation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-fastify.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/node\n```\n\n----------------------------------------\n\nTITLE: Device-Specific Architecture Build Configuration\nDESCRIPTION: Configuration for building native libraries specifically for the current device architecture in debug builds.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/build-android-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n    \"build-android\": {\n      \"executor\": \"@nx/react-native:build-android\",\n      \"outputs\": [\n        \"{projectRoot}/build/outputs/bundle\",\n        \"{projectRoot}/build/outputs/apk\"\n      ],\n      \"options\": {\n        \"activeArchOnly\": true\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Index HTML File Replacements\nDESCRIPTION: Configuration for replacing index.html with environment-specific versions in different build configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/use-environment-variables-in-angular.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@angular-devkit/build-angular:browser\",\n      \"configurations\": {\n        \"production\": {\n          \"fileReplacements\": [\n            {\n              \"replace\": \"apps/my-app/src/index.html\",\n              \"with\": \"apps/my-app/src/index.prod.html\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Package-specific Babel Configuration\nDESCRIPTION: Example of a package-specific .babelrc configuration with common presets.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/webpack/docs/webpack-build-executor-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-typescript\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Syntax for Running Make Command\nDESCRIPTION: A shorter alternative syntax for running the 'make' target for a specific project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/running-custom-commands.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx make my-app\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Lit Component with TypeScript\nDESCRIPTION: A simple example showing how to create a custom web component using Lit and TypeScript. This demonstrates the @customElement decorator for registering the component and how to implement the render method.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-06-29-nx-console-gets-lit.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('root-element')\nexport class Root extends LitElement {\n  render() {\n    return html`<p>Hello World</p>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Navigation Decorator for React Navigation\nDESCRIPTION: A React component that wraps stories with a NavigationContainer to mock React Navigation context, solving the 'Couldn't find a navigation object' error in Storybook.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-25-use-storybook-with-nx-react-native.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NavigationContainer } from '@react-navigation/native';\nimport React from 'react';\n\nexport const NavigationDecorator = (story) => {\n  return (\n    <NavigationContainer independent={true}>{story()}</NavigationContainer>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring E2E Tests to Use Static Server in CI\nDESCRIPTION: Configuration to change the dev server target for E2E tests in CI environments, pointing to the static file server instead of the development server.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/docs/cypress-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"e2e\": {\n  //...\n  \"configurations\": {\n    \"ci\": {\n      \"devServerTarget\": \"frontend:serve-static\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serving an Angular Application with Nx\nDESCRIPTION: Command to start the development server for an Angular application using Nx. This replaces the equivalent 'ng serve' command from the Angular CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/nx-and-angular-cli.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx serve\n```\n\n----------------------------------------\n\nTITLE: Installing node-fetch for API Requests\nDESCRIPTION: npm command to install node-fetch package for handling API requests in Node.js versions lower than 18.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-05-26-determine-your-user-location-with-netlify-edge-functions.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install node-fetch\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Format Example\nDESCRIPTION: Shows the syntax for requiring and exporting modules using CommonJS module format.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-09-who-gave-js-a-build-step.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrequire statements\nmodule.exports = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with withWeb Plugin\nDESCRIPTION: This code snippet demonstrates how to configure Webpack using the `withWeb` plugin from `@nx/webpack`. It shows how to use `composePlugins` to combine multiple plugins, including `withNx` and `withWeb`.  The `styles` option is used to include stylesheets in the application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/webpack-plugins.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { composePlugins, withNx, withWeb } = require('@nx/webpack');\n\nmodule.exports = composePlugins(\n  // always pass withNx() first\n  withNx(),\n  // add web functionality\n  withWeb({\n    styles: ['my-app/src/styles.css'],\n  }),\n  (config) => {\n    // Further customize webpack config\n    return config;\n  }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Serve Task in Nx\nDESCRIPTION: This snippet illustrates how to define a custom serve task in the project's package.json, utilizing ts-node to run the entry point of the project. Requires ts-node as a dependency.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/common-tasks.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\"scripts\":{\"serve\":\"ts-node main.ts\"}}\n```\n\n----------------------------------------\n\nTITLE: Running Lerna Publish with Private Package\nDESCRIPTION: Command example showing how to use the new --include-private flag with lerna publish to handle private packages\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-02-22-whats-new-with-lerna-6-5.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nlerna publish from-git --include-private my-private-package\n```\n\n----------------------------------------\n\nTITLE: Converting React App to Vite\nDESCRIPTION: Command to convert an existing React application to use Vite, including Vitest configuration for testing. Specifies the project name, React as UI framework, and enables Vitest integration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/configuration-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/vite:configuration --project=my-react-app --uiFramework=react --includeVitest\n```\n\n----------------------------------------\n\nTITLE: Configuring App Identifiers in Expo app.json\nDESCRIPTION: JSON configuration in app.json for setting up iOS bundle identifier and Android package name, which are required for app store submission.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-24-step-by-step-guide-to-creating-an-expo-monorepo-with-nx.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ios\": {\n    \"bundleIdentifier\": \"com.yourcompany.yourappname\"\n  },\n  \"android\": {\n    \"package\": \"com.yourcompany.yourappname\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Show Project Details Using NX Command\nDESCRIPTION: This shell command is used to display details of the `zoo` project in the Nx workspace. This can be utilized post-plugin addition to observe how Nx includes inferred tasks like build and typecheck in the project's configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/typescript-packages.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx show project @tuskdesign/zoo\n```\n\n----------------------------------------\n\nTITLE: Listing Global Nx Installation with Yarn (1.x)\nDESCRIPTION: This command is used to list the globally installed Nx package in a Yarn 1.x setup, aiding users in identifying their global installations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/installation/update-global-installation.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn global list nx\n```\n\n----------------------------------------\n\nTITLE: Connecting to Nx Cloud\nDESCRIPTION: This command connects the current Nx workspace to Nx Cloud for enabling distributed task execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-17-modern-angular-testing-with-nx.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx connect\n```\n\n----------------------------------------\n\nTITLE: Basic Storybook Configuration Command for Nuxt\nDESCRIPTION: Command to generate basic Storybook configuration for a Nuxt project using the Nx generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vue/docs/storybook-configuration-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/nuxt:storybook-configuration project-name\n```\n\n----------------------------------------\n\nTITLE: Package Version Update Configuration in YAML\nDESCRIPTION: YAML configuration block specifying different types of version updates for packages 3 through 6. Defines patch update for pkg3, minor update for pkg4, prerelease for pkg5, and preminor for pkg6.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/src/command-line/release/config/test-files/version-plan-4.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npkg3: patch\npkg4: minor\npkg5: prerelease\npkg6: preminor\n```\n\n----------------------------------------\n\nTITLE: Running Make Command on Affected Projects Only\nDESCRIPTION: Shell command to run the 'make' target only on projects that have been affected by recent changes using Nx's affected feature.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/running-custom-commands.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t make\n```\n\n----------------------------------------\n\nTITLE: Implementing User Location Detection Function\nDESCRIPTION: TypeScript code for the serverless function that determines user location using IP geolocation. It fetches the user's IP from request headers and uses the ipapi.co API to get location data.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-05-26-determine-your-user-location-with-netlify-edge-functions.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Handler } from \"@netlify/functions\";\nimport fetch from \"node-fetch\"; // Can be removed if node >= 18\n\nexport const handler: Handler = async (event, _) => {\n  const ip = event.headers[\"x-forwarded-for\"];\n  const url = `https://ipapi.co/${ip}/json/`;\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        location: {\n          city: data.city,\n          region: data.region,\n          country: data.country,\n        },\n      }),\n    };\n  } catch (error) {\n    return { statusCode: 500, body: `Error fetching user location` };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Module Federation Dev Server with Live Reload Remotes Configuration\nDESCRIPTION: Advanced configuration for Module Federation Dev Server that enables live reloading for specific remote applications. Includes the ability to specify remote modules and their configurations for hot module replacement.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/module-federation-dev-server-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"serve-with-hmr-remotes\": {\n    \"executor\": \"@nx/react:module-federation-dev-server\",\n    \"configurations\": {\n      \"production\": {\n        \"buildTarget\": \"host:build:production\"\n      },\n      \"development\": {\n        \"buildTarget\": \"host:build:development\"\n      }\n    },\n    \"defaultConfiguration\": \"development\",\n    \"options\": {\n      \"port\": 4200,\n      \"publicHost\": \"http://localhost:4200\",\n      \"devRemotes\": [\n        \"remote1\",\n        {\n          \"remoteName\": \"remote2\",\n          \"configuration\": \"development\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dist Package.json with Updated Version and Dependency (JSONC)\nDESCRIPTION: This code snippet demonstrates the structure of the package.json file in the dist directory after applying a patch version. The version number is updated, and the workspace dependency is replaced with the actual version number (if not using pnpm or bun).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/updating-version-references.md#_snippet_7\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"version\": \"0.1.2\", // the version number is applied\n  \"dependencies\": {\n    \"my-other-project-in-the-monorepo\": \"0.1.2\" // the dependency reference is updated from the workspace reference to the actual version number (if not using pnpm or bun)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Rspack App in Existing Nx Workspace\nDESCRIPTION: This command generates a new Angular Rspack application in an existing Nx workspace. It requires Nx version 20.8.0 or greater.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-04-14-scaffold-angular-rspack-applications.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/angular:app myapp --bundler=rspack\n```\n\n----------------------------------------\n\nTITLE: Next.js Build Configuration with Profiling Enabled\nDESCRIPTION: This JSON snippet shows how to enable React profiling in the Next.js build configuration. The `profile: true` setting within the 'production' configuration of the 'build' target enables profiling, which collects data about React component rendering performance.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/build-next-executor-examples.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n    \"build\": {\\n      \"executor\": \"@nx/next:build\",\\n      \"outputs\": [\"{options.outputPath}\"],\\n      \"defaultConfiguration\": \"production\",\\n      \"options\": {\\n        \"outputPath\": \"dist/acme\"\\n      },\\n      \"configurations\": {\\n        \"development\": {\\n          \"outputPath\": \".\",\\n        },\\n        \"production\": {\\n          \"profile\": true\\n        }\\n      }\\n    },\n```\n\n----------------------------------------\n\nTITLE: Creating an Angular Standalone Workspace with Nx\nDESCRIPTION: Command to create a new Angular workspace using Nx with a standalone preset. This sets up a single application structure without a full monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-18-architecting-angular-applications.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace myshop --preset=angular-standalone\n```\n\n----------------------------------------\n\nTITLE: Running Nx migrations\nDESCRIPTION: This command applies the migrations that were generated in the `migrations.json` file in the previous step. It makes the necessary changes to your source code based on the migrations defined.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/advanced-update.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"nx migrate --run-migrations\"\n```\n\n----------------------------------------\n\nTITLE: Renaming Projects Using Nx Move Generator\nDESCRIPTION: Commands to rename the temporary projects to their final names using the Nx move generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/standalone-to-monorepo.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g move --projectName=temp-e2e --destination=my-app-e2e\nnx g move --projectName=temp --destination=my-app\n```\n\n----------------------------------------\n\nTITLE: Basic React Native Bundle Configuration\nDESCRIPTION: Base configuration for bundling React Native applications for iOS and Android platforms using @nx/react-native:bundle executor\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/bundle-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"mobile\",\n  //...\n  \"targets\": {\n    //...\n    \"bundle-ios\": {\n      \"executor\": \"@nx/react-native:bundle\",\n      \"outputs\": [\"{projectRoot}/build\"],\n      \"options\": {\n        \"entryFile\": \"src/main.tsx\",\n        \"platform\": \"ios\",\n        \"bundleOutput\": \"dist/apps/mobile/ios/main.jsbundle\"\n      }\n    },\n    \"bundle-android\": {\n      \"executor\": \"@nx/react-native:bundle\",\n      \"options\": {\n        \"entryFile\": \"src/main.tsx\",\n        \"platform\": \"android\",\n        \"bundleOutput\": \"dist/apps/mobile/android/main.jsbundle\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Packages from ESBuild Bundling\nDESCRIPTION: Configuration to mark certain packages as external, preventing them from being bundled. Supports both exact package names and wildcard patterns for matching files like images.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/esbuild/docs/esbuild-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"build\": {\n  \"executor\": \"@nx/esbuild:esbuild\",\n  \"options\": {\n    \"main\": \"<app-root>\",\n    \"tsConfig\": \"<app-root>/tsconfig.app.json\",\n    \"outputPath\": \"dist/<app-root>\",\n    \"external\": [\"lodash\", \"*.png\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nx Dependencies (Shell)\nDESCRIPTION: This command updates the Nx workspace dependencies and code to the latest version available. It ensures that your project is running on the most recent version of Nx and its related packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-02-16-nx-15-7-node-support-angular-lts-lockfile-pruning.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\n----------------------------------------\n\nTITLE: Generating an Nx Plugin\nDESCRIPTION: This snippet demonstrates how to use the Nx CLI to generate a new plugin. It first adds the `@nx/plugin` package and then generates a plugin named `tools/my-plugin`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/local-executors.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/plugin\nnx g @nx/plugin:plugin tools/my-plugin\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Vue Application with Nx\nDESCRIPTION: Demonstrates how to generate a simple Vue application named 'my-app' using the Nx generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vue/docs/application-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/vue:app apps/my-app\n```\n\n----------------------------------------\n\nTITLE: Performing Tree-Aware Glob Search in TypeScript\nDESCRIPTION: The globAsync function takes a Tree object and an array of glob patterns as input. It returns a Promise that resolves to an array of normalized file paths matching the provided patterns. This function is aware of newly created and deleted files in the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/globAsync.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nglobAsync(tree: Tree, patterns: string[]): Promise<string[]>\n```\n\n----------------------------------------\n\nTITLE: Generating Module Federation Host\nDESCRIPTION: Command to scaffold Module Federation projects using the Nx React host generator with Rspack bundler.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-12-next-gen-module-federation-deployments.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/react:host apps/shell --remotes=remote1 --bundler=rspack\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Device by UDID\nDESCRIPTION: This JSON snippet shows how to configure the 'run-ios' target to use a specific iOS device by its UDID. The 'udid' option is set to the device's unique identifier.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/run-ios-examples.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n    \"run-ios\": {\n      \"executor\": \"@nx/react-native:run-ios\",\n      \"options\": {\n        \"udid\": \"device udid\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Modes in Nx with Vite\nDESCRIPTION: JSON configuration for defining custom Vite modes within Nx configurations. This setup helps resolve environment variable conflicts by mapping Nx configurations to specific Vite modes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/use-environment-variables-in-react.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"configurations\": {\n  \"development\": {\n    \"mode\": \"development\"\n  },\n  \"production\": {\n    \"mode\": \"production\"\n  },\n  \"staging\": {\n    \"mode\": \"staging\"\n  },\n  \"my-other-mode\": {\n    \"mode\": \"my-other-mode\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Library in a Nested Directory\nDESCRIPTION: Creates a library placed within a nested directory, exampled by libs/nested/mylib.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/library-examples.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g lib libs/nested/mylib\n```\n\n----------------------------------------\n\nTITLE: Adding Playwright Plugin for Automated E2E Task Splitting\nDESCRIPTION: Command to add the Playwright plugin, set up inferred tasks, and enable task splitting for Playwright tests.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/features/split-e2e-tasks.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/playwright\n```\n\n----------------------------------------\n\nTITLE: Set Registry in Root .npmrc - Bash\nDESCRIPTION: This snippet shows how to set the default npm registry in the root `.npmrc` file.  All packages will be published to this registry unless overridden by scope or package-level configuration. This configuration applies to the entire workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/configure-custom-registries.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nregistry=https://my-custom-registry.com/\n```\n\n----------------------------------------\n\nTITLE: Listing Available React Generators in Nx\nDESCRIPTION: This command lists all available generators provided by the @nx/react plugin in Nx. It helps users understand what code generation capabilities are available for React projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/5-add-application/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx list @nx/react\n```\n\n----------------------------------------\n\nTITLE: Running a Generator\nDESCRIPTION: This command invokes the `my-generator` generator from the `my-plugin` plugin within the `myorg` scope. It passes `mylib` as an argument to the generator, which corresponds to the `name` property defined in the schema.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/local-generators.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @myorg/my-plugin:my-generator mylib\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Config with Additional Plugins - JavaScript\nDESCRIPTION: This code demonstrates how to extend the Webpack configuration by adding additional plugins, using the 'withModuleFederation' function as a base for custom configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/faster-builds.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withModuleFederation } from '@nx/angular/module-federation';\nimport config from './module-federation.config';\nimport { LicenseWebpackPlugin } from 'license-webpack-plugin';\nimport { resolve } from 'path';\n\nexport default async function (wco) {\n  const wmf = await withModuleFederation(config);\n  return wmf({\n    ...wco,\n    plugins: [\n      ...(wco.plugins ?? []),\n      new LicenseWebpackPlugin({\n        stats: {\n          warnings: false,\n          errors: false,\n        },\n        perChunkOutput: false,\n        outputFilename: '3rdpartylicenses.txt',\n        skipChildCompilers: true,\n        modulesDirectories: [resolve(__dirname, '../../node_modules')],\n      }),\n    ],\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Ignore Paths when Generating Stories\nDESCRIPTION: This command demonstrates how to exclude certain paths from Storybook story generation using the `--ignorePaths` option.  It allows for excluding specific directories or file patterns.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/stories-examples.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:stories ui --ignorePaths=libs/ui/src/not-stories/**,**/**/src/**/*.other.*\n```\n\n----------------------------------------\n\nTITLE: Generate Static Graph Website\nDESCRIPTION: Command to generate a static website with project graph as HTML with accompanying static assets\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/graph.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx graph --file=output.html\n```\n\n----------------------------------------\n\nTITLE: Generating a Non-buildable Library\nDESCRIPTION: Generates a non-buildable library configuration by specifying none for the bundler option.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/library-examples.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/js:lib libs/mylib --bundler=none\n```\n\n----------------------------------------\n\nTITLE: Updating Solid Application to Use Library Component\nDESCRIPTION: Modify the main App component to import and use the MyLibComponent from the created library, demonstrating integration between the application and library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-solid.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Component } from 'solid-js';\nimport { MyLibComponent } from '@acme/my-lib';\n\nconst App: Component = () => {\n  return (\n    <div>\n      <header>\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <MyLibComponent name={'there'} />\n        <a\n          href=\"https://github.com/solidjs/solid\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn Solid Now\n        </a>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Record Workspace Utility Scripts with nx-cloud (Shell)\nDESCRIPTION: This command uses `nx-cloud record` to track the execution of workspace utility scripts, such as checking commit format.  This allows these scripts to be monitored within the Nx Cloud viewer, even if Nx Cloud is not fully installed in the workspace. The script `npx nx format:check` is executed and its results are sent to Nx Cloud.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-05-02-nx-v14-is-out-here-is-all-you-need-to-know.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx-cloud record -- npx nx format:check\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Routes with Lazy Loading\nDESCRIPTION: This TypeScript code configures routes for an Angular application, including lazy-loaded routes for products and orders components from separate libraries.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/7-share-code/content.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Route } from '@angular/router';\nimport { NxWelcomeComponent } from './nx-welcome.component';\n\nexport const appRoutes: Route[] = [\n  {\n    path: '',\n    component: NxWelcomeComponent,\n    pathMatch: 'full',\n  },\n  {\n    path: 'products',\n    loadComponent: () =>\n      import('@angular-monorepo/products').then((m) => m.ProductsComponent),\n  },\n  {\n    path: 'orders',\n    loadComponent: () =>\n      import('@angular-monorepo/orders').then((m) => m.OrdersComponent),\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Clearing Nx Cache Directory\nDESCRIPTION: Example of using 'nx reset' with the '--only-cache' option to clear the Nx Cache directory, removing local cache entries without affecting the remote cache.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/reset.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx reset --only-cache\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Nx Conformance Rule\nDESCRIPTION: Uses the Nx CLI to generate a default conformance rule within the newly created library project. This command creates the necessary files and structure for a new rule.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/enterprise/conformance/publish-conformance-rules-to-nx-cloud.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/conformance:create-rule --name=test-cloud-rule --directory=cloud-conformance-rules/src --category=reliability --description=\"A test cloud rule\" --reporter=non-project-files-reporter\n```\n\n----------------------------------------\n\nTITLE: Watching a Project and Its Dependencies in Nx\nDESCRIPTION: Command to watch a project and all its dependencies, triggering the callback whenever any of them change. Uses includeDependentProjects flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/workspace-watching.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx watch --projects=app1 --includeDependentProjects -- echo \\$NX_PROJECT_NAME\n```\n\n----------------------------------------\n\nTITLE: Implementing Film Component in React Native\nDESCRIPTION: This TSX code implements a Film component for React Native, displaying film details and using shared libraries from the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RouteProp, useRoute } from '@react-navigation/native';\nimport { FilmEntity } from '@studio-ghibli-search-engine/models';\nimport { getEnv } from '@studio-ghibli-search-engine/services';\nimport React, { useEffect, useState } from 'react';\nimport { SafeAreaView, ScrollView, Image, View } from 'react-native';\nimport {\n  Button,\n  Divider,\n  Headline,\n  Paragraph,\n  Subheading,\n  Title,\n} from 'react-native-paper';\nimport { styles } from 'react-native-style-tachyons';\nimport { connect } from 'react-redux';\n\nimport Loading from '../shared/loading/loading';\nimport { useLink } from '../shared/open-link/open-link';\n\nimport { FilmProps, mapDispatchToProps, mapStateToProps } from './film.props';\n\nexport function Film({ getFilm, fetchFilms }: FilmProps) {\n  const [film, setFilm] = useState<FilmEntity>();\n\n  const route = useRoute<RouteProp<{ params: { id: string } }>>();\n  const id = route.params?.id;\n\n  const openHboMax = useLink(getEnv('NX_HBO_STREAMING_URL'), 'HBO Max');\n  const openNetflix = useLink(getEnv('NX_NETFLIX_STREAMING_URL'), 'Netflix');\n\n  useEffect(() => {\n    fetchFilms();\n  }, [fetchFilms]);\n\n  useEffect(() => {\n    setFilm(getFilm(id));\n  }, [id, getFilm]);\n\n  return film ? (\n    <SafeAreaView>\n      <ScrollView contentInsetAdjustmentBehavior=\"automatic\">\n        <View style={[styles.pa3]}>\n          <Image\n            style={{ height: 200, width: '100%', resizeMode: 'contain' }}\n            source={{ uri: film.movieBanner }}\n          />\n          <Headline>{film.title}</Headline>\n          <Subheading>\n            {film.originalTitle} / {film.originalTitleRomanised}\n          </Subheading>\n          <Paragraph>Release: {film.releaseDate}</Paragraph>\n          <Paragraph>Director: {film.director}</Paragraph>\n          <Paragraph>Producer: {film.producer}</Paragraph>\n          <Paragraph>Running Time: {film.runningTime} minutes</Paragraph>\n          <Paragraph>Rotten Tomatoes Score: {film.rtScore}</Paragraph>\n\n          <Divider />\n\n          <Title>Plot</Title>\n          <Paragraph>{film.description}</Paragraph>\n\n          <Divider />\n\n          <Button onPress={openHboMax}>Watch on HBO Max</Button>\n          <Button onPress={openNetflix}>Watch on Netflix</Button>\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  ) : (\n    <Loading />\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Film);\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Application with Library Integration\nDESCRIPTION: This TypeScript code sets up an Express application, integrating a function from a custom library. It demonstrates how to use libraries within an Express app in an Nx workspace, including static asset serving and API route definition.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-express.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport express from 'express';\nimport * as path from 'path';\nimport { someFunction } from '@my-express-app/my-lib';\n\nconst app = express();\n\napp.use('/assets', express.static(path.join(__dirname, 'assets')));\n\napp.get('/api', (req, res) => {\n  res.send({ message: `Welcome to my-express-app! ${someFunction()}` });\n});\n\nconst port = process.env.PORT || 3333;\nconst server = app.listen(port, () => {\n  console.log(`Listening at http://localhost:${port}/api`);\n});\nserver.on('error', console.error);\n```\n\n----------------------------------------\n\nTITLE: Modifying Cypress Configuration for E2E Tests in Nx\nDESCRIPTION: This TypeScript code snippet demonstrates how to change the video and screenshot output folders in the Cypress configuration file for an Nx project.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/8-inferred-tasks/content.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nexport default defineConfig({\n  e2e: {\n    ...nxE2EPreset(__filename, {\n      // ...\n    }),\n    baseUrl: 'http://localhost:4200',\n    videosFolder: '../dist/cypress/apps/angular-store-e2e/videos-changed',\n    screenshotsFolder:\n      '../dist/cypress/apps/angular-store-e2e/screenshots-changed',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Nx in Gradle Workspace\nDESCRIPTION: Command to initialize Nx in an existing Gradle workspace using the interactive initialization process.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/gradle/gradle-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Creating Monorepo Directory Structure\nDESCRIPTION: Shell command to create the standard monorepo directory structure with 'apps' for applications and 'packages' for shared libraries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n❯ mkdir apps packages\n```\n\n----------------------------------------\n\nTITLE: Directory Structure After Generating Stories\nDESCRIPTION: Example showing the workspace directory structure after generating stories for a feature-ui library with a my-button component.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/plugin-react.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n<workspace name>/\n├── apps/\n├── libs/\n│   ├── feature/\n│   │   ├── ui/\n|   |   |   ├── .storybook/\n|   |   |   ├── src/\n|   |   |   |   ├──lib\n|   |   |   |   |   ├──my-button\n|   |   |   |   |   |   ├── my-button.tsx\n|   |   |   |   |   |   ├── my-button.stories.tsx\n|   |   |   |   |   |   └── etc...\n|   |   |   |   |   └── etc...\n|   |   |   ├── README.md\n|   |   |   ├── tsconfig.json\n|   |   |   └── etc...\n|   |   └── etc...\n|   └── etc...\n├── nx.json\n├── package.json\n├── README.md\n└── etc...\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule for Dependency Mismatch Detection\nDESCRIPTION: The `@nx/dependency-checks` ESLint rule is mentioned as a tool to automatically detect and fix dependency mismatches between project and root configurations when using a single version policy. This helps maintain consistency and prevent runtime issues arising from version conflicts.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/decisions/dependency-management.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"@nx/dependency-checks\"\n```\n\n----------------------------------------\n\nTITLE: Target Defaults with Custom Build Target Names in nx.json\nDESCRIPTION: Configuration for nx.json with custom build target names. This setup defines the dependency relationships between different build targets to support complex incremental builds.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/setup-incremental-builds-angular.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"build\": {\n      \"dependsOn\": [\"build-base\"]\n    },\n    \"build-base\": {\n      \"dependsOn\": [\"^build-base\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Vue Library with Nx\nDESCRIPTION: Command to generate a new Vue UI library within an Nx workspace, which can be shared across Nuxt and Vue applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-06-nuxt-js-support-in-nx.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/vue:lib libs/my-shared-ui\n```\n\n----------------------------------------\n\nTITLE: Running React Native App with Storybook\nDESCRIPTION: Commands to start the React Native app on iOS or Android simulators/emulators to view the Storybook interface.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-25-use-storybook-with-nx-react-native.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# iOS\nnx run-ios <your app>\n\n# Android\nnx run-android <your app>\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Button Component\nDESCRIPTION: Creates a new Angular component for the button using the Nx CLI. This command sets up the component files and exports it for use in other modules.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nrwl/angular:component button --project=lib3 --export\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Lambda Plugin to Existing Nx Project\nDESCRIPTION: Command to add the @nx/aws-lambda plugin to an existing Nx workspace for AWS Lambda function support.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/node-aws-lambda.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/aws-lambda\n```\n\n----------------------------------------\n\nTITLE: Markdown Cards Layout for Deprecations\nDESCRIPTION: A markdown template using a card-based layout to display deprecated Nx features with links to their respective pull requests.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/16_4_0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% cards cols=\"2\" %}\n{% card title=\"cypress tsconfig option\" type=\"external\" url=\"https://github.com/nrwl/nx/pull/17165\" /%}\n{% card title=\"print-affected\" type=\"external\" url=\"https://github.com/nrwl/nx/pull/17341\" /%}\n{% card title=\"affected:graph\" type=\"external\" url=\"https://github.com/nrwl/nx/pull/17341\" /%}\n{% /cards %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Hasher\nDESCRIPTION: This JSON configuration shows how to update the `executors.json` to point to the custom hasher implementation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/local-executors.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"executors\": {\n    \"echo\": {\n      \"implementation\": \"./src/executors/my-executor/executor\",\n      \"hasher\": \"./src/executors/my-executor/hasher\",\n      \"schema\": \"./src/executors/my-executor/schema.json\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rspack Module Federation Configuration\nDESCRIPTION: TypeScript configuration file for Rspack bundler setup with Module Federation support, including Nx plugins and React integration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-12-next-gen-module-federation-deployments.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { composePlugins, withNx, withReact } from '@nx/rspack';\nimport {\n  withModuleFederation,\n  ModuleFederationConfig,\n} from '@nx/rspack/module-federation';\n\nimport baseConfig from './module-federation.config';\n\nconst config: ModuleFederationConfig = {\n  ...baseConfig,\n};\n\n// Nx plugins for rspack to build config object from Nx options and context.\n/**\n * DTS Plugin is disabled in Nx Workspaces as Nx already provides Typing support for Module Federation\n * The DTS Plugin can be enabled by setting dts: true\n * Learn more about the DTS Plugin here: https://module-federation.io/configure/dts.html\n */\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(config, { dts: false })\n);\n```\n\n----------------------------------------\n\nTITLE: Build a React Application\nDESCRIPTION: Builds a React application for deployment.  The output is placed in the 'dist' folder, which can be customized.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react/react-plugin.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-new-app\n```\n\n----------------------------------------\n\nTITLE: Generating New Projects with Test Runners\nDESCRIPTION: Commands to generate new Angular applications and libraries with either Vitest or Jest as the unit test runner\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-17-modern-angular-testing-with-nx.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/angular:app apps/demo --unitTestRunner=vitest\nnpx nx g @nx/angular:lib packages/ui --unitTestRunner=vitest\n```\n\n----------------------------------------\n\nTITLE: Setting NX_CLOUD_ACCESS_TOKEN Environment Variable\nDESCRIPTION: Demonstrates how to set the NX_CLOUD_ACCESS_TOKEN environment variable for configuring the Nx Cloud access token. This takes precedence over the accessToken property in nx.json and is commonly used to set a read-write token in CI environments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/env-vars.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nNX_CLOUD_ACCESS_TOKEN=your_access_token_here\n```\n\n----------------------------------------\n\nTITLE: Configuring External Dependencies in Nx\nDESCRIPTION: Shows how to configure external dependencies for Nx cache computation, with examples for ESLint configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/inputs.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n\"targets\": {\n  \"lint\": {\n    \"command\": \"eslint .\",\n    \"inputs\": [\n      \"default\",\n      { \"externalDependencies\": [\"eslint\", \"eslint-config-airbnb\"] }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing State Management Dependencies - Shell Commands\nDESCRIPTION: Commands to install TanStack Query, Redux, and related dependencies for state management in Nx React Native/Expo apps using different package managers.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-08-state-management.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#npm\nnpm install @tanstack/react-query @tanstack/react-query-devtools redux react-redux @reduxjs/toolkit @redux-devtools/extension redux-logger @types/redux-logger redux-persist @react-native-async-storage/async-storage --save-dev\n\n#yarn\nyarn add @tanstack/react-query @tanstack/react-query-devtools redux react-redux @reduxjs/toolkit @redux-devtools/extension redux-logger @types/redux-logger redux-persist @react-native-async-storage/async-storage --dev\n\n#pnpm\npnpm add @tanstack/react-query @tanstack/react-query-devtools redux react-redux @reduxjs/toolkit @redux-devtools/extension redux-logger @types/redux-logger redux-persist @react-native-async-storage/async-storage --save-dev\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace for Node Monorepo\nDESCRIPTION: This snippet shows how to create a new Nx workspace using the node-monorepo preset. It sets up a basic structure for a Node.js-based monorepo project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest --preset=node-monorepo nx-apollo\n```\n\n----------------------------------------\n\nTITLE: Building Non-Buildable Libraries with Nx SWC - JSON and Shell\nDESCRIPTION: This snippet shows the configuration to build non-buildable libraries using the `@nx/js:swc` executor with the `external` option set to 'all'. It outputs the build to 'dist/libs/ts-lib'.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/swc-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"executor\": \"@nx/js:swc\",\n    \"options\": {\n      \"outputPath\": \"dist/libs/ts-lib\",\n      \"main\": \"libs/ts-lib/src/index.ts\",\n      \"tsConfig\": \"libs/ts-lib/tsconfig.lib.json\",\n      \"assets\": [\"libs/ts-lib/*.md\"],\n      \"external\": \"all\"\n    }\n  }\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx build ts-lib --external=all\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript/TypeScript Versioning Package\nDESCRIPTION: Command to install the Nx JavaScript package at the monorepo root level for handling versioning and publishing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-09-versioning-and-releasing-packages.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @nx/js -w\n```\n\n----------------------------------------\n\nTITLE: Add the JavaScript Plugin\nDESCRIPTION: This command adds the `@nx/js` package, which is required for Nx Release to manage and release JavaScript packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/get-started-with-nx-release.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnx add @nx/js\n```\n\n----------------------------------------\n\nTITLE: Connect Repository to Nx Cloud\nDESCRIPTION: This command connects the repository to Nx Cloud.  A browser window will open to register your repository in your Nx Cloud account.  The app will guide you to create a PR to enable Nx Cloud on your repository, adding an `nxCloudId` property to the `nx.json` file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/migration-angular.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx connect\n```\n\n----------------------------------------\n\nTITLE: Using File Replacements in Rspack Configuration\nDESCRIPTION: Example demonstrating how to set up file replacements in the Rspack configuration, typically used for swapping environment files in production builds.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rspack/create-config.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@nx/angular-rspack';\n\nexport default createConfig({\n  options: {\n    browser: './src/main.ts',\n    server: './src/main.server.ts',\n    ssrEntry: './src/server.ts',\n    fileReplacements: [\n      {\n        replace: './src/environments/environment.ts',\n        with: './src/environments/environment.prod.ts',\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Git Commands to Commit Changes\nDESCRIPTION: This snippet showcases the shell commands required to commit changes in a Git repository after generating a new library using the Nx library generator. It prepares the environment by adding changes and committing with a message to track the library generation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/organization-specific-plugin.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit -am \"library generator\"\nnpx nx g @myorg/recommended:library store-test --scope=store\n```\n\n----------------------------------------\n\nTITLE: Nx Migration from Specific Version\nDESCRIPTION: This command allows collecting migrations from a specific Nx version. It is helpful for applying skipped Angular updates or reverting to an earlier state. The `--from` parameter specifies the Nx version to collect migrations from.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-02-16-nx-15-7-node-support-angular-lts-lockfile-pruning.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nx migrate latest --from=nx@<version>\n```\n\n----------------------------------------\n\nTITLE: Displaying Available Project Targets\nDESCRIPTION: Command to show all available targets that can be run for the angular-store project using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/templates/angular-monorepo/lesson-2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx show project angular-store\n```\n\n----------------------------------------\n\nTITLE: Generating React Native Application\nDESCRIPTION: Command to generate a new React Native application in the apps directory\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react-native/react-native-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react-native:app apps/<your-app-name>\n```\n\n----------------------------------------\n\nTITLE: Creating Svelte Library in Nx\nDESCRIPTION: Command to generate a new Svelte library in the Nx workspace using Vite and Vitest.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-svelte.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/js:library libs/counter --unitTestRunner=vitest --bundler=vite --importPath=@acme/counter\n```\n\n----------------------------------------\n\nTITLE: Defining FileMap Interface in TypeScript\nDESCRIPTION: This code snippet defines the FileMap interface with two properties: nonProjectFiles as an array of FileData, and projectFileMap of type ProjectFileMap. It's likely used for organizing and categorizing files within a project structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/FileMap.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface FileMap {\n  nonProjectFiles: FileData[];\n  projectFileMap: ProjectFileMap;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript-based Next.js App in Nx\nDESCRIPTION: Command to generate a Next.js application using plain JavaScript instead of TypeScript. The --js flag configures the generator to use .js file extensions and JavaScript-specific configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/application-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g app apps/myapp --js\n```\n\n----------------------------------------\n\nTITLE: Moving Files Between Directories in Nx Tree\nDESCRIPTION: TypeScript function that moves files recursively from one directory to another within an Nx Tree structure. Takes a Tree object and source/destination directory paths as parameters. Behavior is similar to Unix 'cp -r' command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/moveFilesToNewDirectory.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmoveFilesToNewDirectory(tree: Tree, oldDir: string, newDir: string): void\n```\n\n----------------------------------------\n\nTITLE: Custom Library Generator in TypeScript\nDESCRIPTION: TypeScript code snippet demonstrating a custom library generator function. It takes options for scope and type, then uses the `@nx/react` library generator with pre-populated options like project name, directory, import path, and tags to ensure consistency.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-10-tailoring-nx-for-your-organization.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tree } from '@nx/devkit';\nimport { Linter } from '@nx/eslint';\nimport { libraryGenerator as reactLibraryGenerator } from '@nx/react';\nimport { LibraryGeneratorSchema } from './schema';\n\nexport async function libraryGenerator(\n  tree: Tree,\n  options: LibraryGeneratorSchema // schema with strong types for scope and type\n) {\n  // create project name based on submitted name and type\n  const projectName = `${options.type}-${options.name}`;\n\n  // determine directory based on scope and project name\n  const directory = joinPathFragments('libs', options.scope, projectName);\n\n  // determine import path based on scope and project name\n  const importPath = `@org/${options.scope}/${projectName}`;\n\n  // run the @nx/react library generator with options set\n  const callbackAfterFilesUpdated = await reactLibraryGenerator(tree, {\n    name: projectName,\n    directory,\n    importPath,\n    tags: [`type:${options.type}`, `scope:${options.scope}`],\n    linter: Linter.EsLint,\n    style: 'css',\n    unitTestRunner: 'vitest',\n  });\n\n  return callbackAfterFilesUpdated;\n}\n\nexport default libraryGenerator;\n```\n\n----------------------------------------\n\nTITLE: Updating Nx Dependencies\nDESCRIPTION: Commands for updating Nx and its plugins to the latest version using the automated migration system.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-12-20-nx-17-2-release.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\n----------------------------------------\n\nTITLE: Generating Fastify Application in Nx Workspace\nDESCRIPTION: Command to generate a new Fastify application within the Nx workspace using the @nx/node plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-fastify.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/node:app apps/fastify-api\n```\n\n----------------------------------------\n\nTITLE: Building Multiple Applications with Nx Run-Many Command\nDESCRIPTION: Command to build all applications in the workspace for deployment, with console output showing successful builds and timing information.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many -t build\n```\n\n----------------------------------------\n\nTITLE: Configuring nxCloudId in nx.json for Nx <= 19.6\nDESCRIPTION: This snippet demonstrates how to configure the nxCloudId within the tasksRunnerOptions in nx.json for Nx versions 19.6 and below. It's nested under the nx-cloud runner options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/recipes/personal-access-tokens.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"tasksRunnerOptions\": {\n    \"default\": {\n      \"runner\": \"nx-cloud\",\n      \"options\": {\n        \"nxCloudId\": \"SOMEID\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Cypress v10 Migration Generator in Nx\nDESCRIPTION: Command to automatically migrate from Cypress v9 to v10 in an Nx workspace using the provided migration generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-08-02-nx-14-5-cypess-v10-output-globs-linter-perf-react-tailwind-support.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nrwl/cypress:migrate-to-cypress-10\n```\n\n----------------------------------------\n\nTITLE: Test Sharding with Playwright - Shell\nDESCRIPTION: Illustrates how to split a Playwright E2E test suite into multiple shards using the `--shard` option within an Nx affected command.  This enables parallel testing and quicker feedback cycles.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-04-23-test-splitting-techniques.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t e2e -- --shard=1/4\nnx affected -t e2e -- --shard=2/4\nnx affected -t e2e -- --shard=3/4\nnx affected -t e2e -- --shard=4/4\n```\n\n----------------------------------------\n\nTITLE: Parallel Test Execution for Affected Projects\nDESCRIPTION: Running tests in parallel for affected projects with a specified number of parallel processes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/affected.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t test --parallel=5\n```\n\n----------------------------------------\n\nTITLE: Component TestID Example\nDESCRIPTION: Example of using testID attribute in React Native components for testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-22-unit-testing-expo.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<Headline testID=\"title\">{film.title}</Headline>\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Federation in TypeScript\nDESCRIPTION: Update the module federation configuration file to expose the 'Hello' module from the 'greeting' remote.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/federate-a-module.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ModuleFederationConfig } from '@nx/webpack';\n\nconst config: ModuleFederationConfig = {\n  name: 'greeting',\n  exposes: {\n    './Module': './src/remote-entry.ts',\n    './Hello': 'hello/src/index.ts', // <-- this line was added,\n  },\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Running an Nx Executor with TypeScript\nDESCRIPTION: This snippet demonstrates how to use the runExecutor function to execute a target in an Nx project. It shows how to invoke the 'serve' target for the 'myproj' project with a 'watch' option set to true. The function returns an AsyncIterableIterator which can be used to track the execution progress.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/runExecutor.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfor await (const s of await runExecutor(\n  { project: 'myproj', target: 'serve' },\n  { watch: true },\n  context\n)) {\n  // s.success\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CircleCI Workflow with Nx Orb\nDESCRIPTION: A CircleCI configuration file that sets up a CI workflow using the Nx Orb, enabling distributed builds, format checking, and running affected commands for lint, test, build, and end-to-end testing\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/monorepo-ci-circle-ci.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\n\norbs:\n  nx: nrwl/nx@1.6.2\n\njobs:\n  main:\n    docker:\n      - image: cimg/node:lts-browsers\n    steps:\n      - checkout\n      # This line enables distribution\n      # The \"--stop-agents-after\" is optional, but allows idle agents to shut down once the \"e2e-ci\" targets have been requested\n      # - run: npx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\" --stop-agents-after=\"e2e-ci\"\n      - run: npm ci\n\n      - nx/set-shas\n\n      - run: npx nx-cloud record -- nx format:check\n      - run: npx nx affected --base=$NX_BASE --head=$NX_HEAD -t lint test build e2e-ci\nworkflows:\n  build:\n    jobs:\n      - main\n```\n\n----------------------------------------\n\nTITLE: Creating a Publishable Angular Library with Nx\nDESCRIPTION: This command creates an Angular library named `my-lib` that is designed to be published as an NPM package. The `--publishable` flag configures the build process to output an Angular Package Format (APF) compliant package. The `--import-path` option defines the package name (`@my-org/my-lib`) used when importing the library in other projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/library-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:library libs/my-lib --publishable --import-path=@my-org/my-lib\n```\n\n----------------------------------------\n\nTITLE: Connecting Nx Workspace to Nx Cloud using CLI\nDESCRIPTION: This command initiates the setup process for connecting an Nx workspace to Nx Cloud. It guides the user through the configuration steps, allowing them to experiment with Nx Cloud features on the new Hobby plan.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-08-28-nxcloud-improved-ci-log.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx connect\n```\n\n----------------------------------------\n\nTITLE: Serving a React Application in Nx Monorepo\nDESCRIPTION: Command to serve a React application within an Nx monorepo. This starts the development server for the specified application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx serve react-store\n```\n\n----------------------------------------\n\nTITLE: NxModuleFederationSSRDevServerPlugin Class Definition\nDESCRIPTION: Class definition for the server-side module federation dev server plugin, showing constructor parameters and default options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/module-federation/documents/nx-module-federation-dev-server-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class NxModuleFederationSSRDevServerPlugin {\n  constructor(\n    private _options: {\n      config: ModuleFederationConfig;\n      devServerConfig?: NxModuleFederationDevServerConfig;\n    }\n  ) {\n    this._options.devServerConfig ??= {\n      host: 'localhost',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Target Defaults in nx.json\nDESCRIPTION: Configure workspace-wide default output directories and dependencies for build targets\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/how-caching-works.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"],\n      \"outputs\": [\n        \"{projectRoot}/dist\",\n        \"{projectRoot}/build\",\n        \"{projectRoot}/public/build\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update withModuleFederation Import in Nx (After)\nDESCRIPTION: This snippet illustrates the updated import statement for `withModuleFederation` and `withModuleFederationForSSR` from `@nx/module-federation/angular`. It shows the required change to use the new package location for module federation functionalities.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-2-0/migrate-with-mf-import-to-new-package.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\\n  withModuleFederation,\\n  withModuleFederationForSSR,\\n} from '@nx/module-federation/angular';\n```\n\n----------------------------------------\n\nTITLE: Opening Nx Console Command Palette\nDESCRIPTION: Keyboard shortcut to access Nx Console run commands in the editor, allowing users to select projects, targets, and execution options interactively\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/console-run-command.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n⇧⌘P\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for React Monorepo Products Library\nDESCRIPTION: This command executes unit tests for the @react-monorepo/products library using Vitest, a testing framework for Vite-based projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/templates/react-monorepo/lesson-6/libs/products/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnx test @react-monorepo/products\n```\n\n----------------------------------------\n\nTITLE: Generating Cypress Configuration for Multiple Feature Projects\nDESCRIPTION: This sequence of bash commands generates Cypress configurations for multiple feature projects within the NX workspace. Each command specifies a project that receives its own e2e testing configuration, allowing for isolated testing associated only with that feature without interference from other features.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/docs/cypress-e2e-config-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/cypress:configuration --project=feature-cart --devServerTarget=fancy-app:serve\nnx g @nx/cypress:configuration --project=feature-user --devServerTarget=fancy-app:serve\nnx g @nx/cypress:configuration --project=feature-dashboard --devServerTarget=fancy-app:serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitbucket Pipelines for Distributed Task Execution with Nx\nDESCRIPTION: This YAML configuration sets up a Bitbucket Pipelines workflow for distributed task execution using Nx Cloud. It defines a main job and three agent jobs. The main job initiates the CI run and executes Nx commands, while the agent jobs wait for tasks from Nx Cloud.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/enterprise/dte/bitbucket-dte.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage: node:20\n\nclone:\n  depth: full\n\ndefinitions:\n  steps:\n    - step: &agent\n        name: Agent\n        script:\n          - export NX_BRANCH=$BITBUCKET_PR_ID\n\n          - npm ci\n          - npx nx-cloud start-agent\n\npipelines:\n  pull-requests:\n    '**':\n      - parallel:\n          - step:\n              name: CI\n              script:\n                - export NX_BRANCH=$BITBUCKET_PR_ID\n\n                - npm ci\n                - npx nx-cloud start-ci-run --distribute-on=\"manual\" --stop-agents-after=\"e2e-ci\"\n                - npx nx-cloud record -- nx format:check\n                - npx nx affected --target=lint,test,build,e2e-ci --parallel=2\n          - step: *agent\n          - step: *agent\n          - step: *agent\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Specific Scripts with Nx Exec\nDESCRIPTION: Example of configuring a project-specific script using nx exec in package.json\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/exec.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myorg\",\n  \"nx\": {},\n  \"scripts\": {\n    \"docs\": \"nx exec -- node ./scripts/some-script.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tag-based API Project Selection\nDESCRIPTION: Select and test projects based on API-related tags.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run-many.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t test --projects=tag:api-*\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS with Custom Theme\nDESCRIPTION: Initial configuration for Tailwind CSS in app2 that defines a custom theme with specific color and spacing values. This configuration creates a distinct visual appearance for the second application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n...\nmodule.exports = {\n  ...\n  theme: {\n    colors: {\n      primary: {\n        light: '#a5b4fc',\n        DEFAULT: '#6366f1',\n        dark: '#4338ca',\n      },\n      secondary: {\n        light: '#e9d5ff',\n        DEFAULT: '#a855f7',\n        dark: '#7e22ce',\n      },\n      white: '#ffffff',\n      black: '#000000',\n    },\n    spacing: {\n      sm: '1rem',\n      md: '1.5rem',\n      lg: '2rem',\n      xl: '3rem',\n    },\n  },\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Test Specific Files with Jest via Nx\nDESCRIPTION: This command runs Jest tests for a specific file (`HomePage.tsx`) within the specified project (`frontend`) using the Nx CLI. You can pass the file name as a positional argument or using the `--testFile` flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/jest/documents/overview.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx test frontend HomePage.tsx\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx test frontend --testFile HomePage.tsx\n```\n\n----------------------------------------\n\nTITLE: HTML Implementation for Lit Component Usage\nDESCRIPTION: An HTML file showing how to include and use a Lit component in a web page. The example includes loading the JavaScript module and using the custom element in the HTML body.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-06-29-nx-console-gets-lit.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <body>\n    <script type=\"module\" src=\"main.js\"></script>\n    <root-element></root-element>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Tasks in nx.json\nDESCRIPTION: Equivalent nx.json configuration showing the same tasks from the Turborepo example converted to Nx format, demonstrating the differences in syntax and structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/from-turborepo.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"./node_modules/nx/schemas/nx-schema.json\",\n  \"targetDefaults\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"],\n      \"inputs\": [\"{projectRoot}/**/*\", \"{projectRoot}/.env*\"],\n      \"outputs\": [\"{projectRoot}/.next/**\", \"!{projectRoot}/.next/cache/**\"],\n      \"cache\": true\n    },\n    \"lint\": {\n      \"dependsOn\": [\"^lint\"],\n      \"cache\": true\n    },\n    \"check-types\": {\n      \"dependsOn\": [\"^check-types\"],\n      \"cache\": true\n    },\n    \"dev\": {\n      \"cache\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting E2E Tests Configuration\nDESCRIPTION: This JSON configuration demonstrates how to enable splitting E2E tests by file using the `ciTargetName` option. This allows for improved caching, distribution, and retrying flaky tests in CI environments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/jest/documents/overview.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/jest/plugin\",\n      \"include\": [\"e2e/**/*\"],\n      \"options\": {\n        \"targetName\": \"e2e-local\",\n        \"ciTargetName\": \"e2e-ci\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Workspace Data Directory\nDESCRIPTION: Example of using 'nx reset' with the '--only-workspace-data' option to clear the workspace data directory, which contains cached data about the current workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/reset.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx reset --only-workspace-data\n```\n\n----------------------------------------\n\nTITLE: Running iOS App with Nx Command\nDESCRIPTION: This bash command demonstrates how to run an iOS app using the Nx CLI. It executes the 'run-ios' target for the 'mobile' project.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/run-ios-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx run mobile:run-ios\n```\n\n----------------------------------------\n\nTITLE: Generating a React Component with Nx\nDESCRIPTION: Command to generate a new React component named 'HelloWorld' using Nx's code generation capabilities. This creates the component files and necessary boilerplate.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-29-the-react-cli-you-always-wanted-but-didnt-know-about.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nrwl/react:component HelloWorld\n```\n\n----------------------------------------\n\nTITLE: Tag-Based Build Execution\nDESCRIPTION: Run build for affected projects with specific tag filtering.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/affected.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t=build --exclude='*,!tag:dotnet'\n```\n\n----------------------------------------\n\nTITLE: RspackAngularServer Interface Definition\nDESCRIPTION: Defines the RspackAngularServer interface, which includes the Express application instance and the listen method for starting the server.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rspack/create-server.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RspackAngularServer {\n  app: express.Express;\n  listen: (port?: number) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Detox Package\nDESCRIPTION: Command to add Nx Detox plugin to an existing Nx workspace using the nx add command\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/detox/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/detox\n```\n\n----------------------------------------\n\nTITLE: Creating New Nx Workspace with Express Preset\nDESCRIPTION: Command to create a new Nx workspace with a pre-configured Express application using the Express preset.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/express/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n npx create-nx-workspace --preset=express\n```\n\n----------------------------------------\n\nTITLE: Generating Nuxt Page Component with Nx\nDESCRIPTION: Command to generate a new page component for Nuxt's file-based routing system. Creates the component in the pages directory for automatic route generation.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vue/docs/component-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nuxt:component my-app/src/pages/my-page\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Nx Graph Command\nDESCRIPTION: Shows the basic command to open the project graph of the workspace in the browser.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/dep-graph.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx graph\n```\n\n----------------------------------------\n\nTITLE: Running Project Scripts with Nx Exec\nDESCRIPTION: Example commands showing how to run scripts and access environment variables with nx exec\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/exec.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx exec -- node ./scripts/some-script.js\nnx exec -- echo \\$NX_PROJECT_NAME\nnx exec -- echo \\$NX_PROJECT_ROOT_PATH\n```\n\n----------------------------------------\n\nTITLE: Adding React Plugin to Nx\nDESCRIPTION: Command to add React plugin support to existing Nx workspace\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-29-new-nx-experience.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx add @nx/react\n```\n\n----------------------------------------\n\nTITLE: Building a Node.js Application\nDESCRIPTION: This command builds the specified Node.js application using the Nx CLI. Replace `my-new-app` with the name of your application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/node/node-plugin.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-new-app\n```\n\n----------------------------------------\n\nTITLE: Cypress Configuration for Next.js Component Testing\nDESCRIPTION: Standard Cypress configuration file for Nx Next.js component testing with default preset\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress';\nimport { nxComponentTestingPreset } from '@nx\\/next\\/plugins\\/component-testing';\n\nexport default defineConfig({\n  component: nxComponentTestingPreset(__filename),\n});\n```\n\n----------------------------------------\n\nTITLE: Print Task Graph to Console\nDESCRIPTION: Printing the task graph directly to the console output.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/affected.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t=build --graph=stdout\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Application (Dry Run)\nDESCRIPTION: This command generates a new Angular application named 'inventory' in the 'apps' directory. The --dry-run flag is used to preview the changes without actually creating files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/angular:app apps/inventory --dry-run\n```\n\n----------------------------------------\n\nTITLE: Generating a Minimal Publishable Library\nDESCRIPTION: Initializes a publishable library setup with a minimal configuration using @nx/js:tsc as the default executor.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/library-examples.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g lib libs/mylib --publishable\n```\n\n----------------------------------------\n\nTITLE: Enabling Distribution for Nx >= 18\nDESCRIPTION: Command to explicitly enable or disable distributed task execution in Nx version 18 and above using the --agents flag\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/nx-cloud-cli.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnx affected -t build --agents\n```\n\nLANGUAGE: bash\nCODE:\n```\nnx affected -t build --no-agents\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Aliases in tsconfig.base.json\nDESCRIPTION: This snippet shows how to set up path aliases for libraries in the root tsconfig.base.json file. It allows easy importing of libraries across the monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/7-share-code/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    ...\n    \"paths\": {\n      \"@angular-monorepo/orders\": [\"libs/orders/src/index.ts\"],\n      \"@angular-monorepo/products\": [\"libs/products/src/index.ts\"],\n      \"@angular-monorepo/shared-ui\": [\"libs/shared/ui/src/index.ts\"]\n    },\n    ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for $default Configuration\nDESCRIPTION: TypeScript interface definition for the $default property configuration\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n$default?: { $source: 'argv'; index: number } | { $source: 'projectName' };\n```\n\n----------------------------------------\n\nTITLE: Printing Task Graph to Console with Nx run-many\nDESCRIPTION: Shows how to print the task graph to the console using the run-many command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run-many.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t=build --graph=stdout\n```\n\n----------------------------------------\n\nTITLE: Run Next.js Build (Production) - Experimental App\nDESCRIPTION: This command executes the Next.js build process using the 'production' configuration. It builds only `app/` routes if previously configured.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/build-next-executor-examples.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n\"nx run acme:build:production\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Build Settings for Nx Projects\nDESCRIPTION: Vite configuration for building projects, including plugin setup, output directory configuration, and library name specification. Removes nxViteTsPaths plugin and sets project-specific build settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/switch-to-workspaces-project-references.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport react from '@vitejs/plugin-react';\nimport dts from 'vite-plugin-dts';\nimport { nxCopyAssetsPlugin } from '@nx/vite/plugins/nx-copy-assets.plugin';\n\nexport default defineConfig({\n  // ...\n  plugins: [\n    // any needed plugins, but remove nxViteTsPaths\n    react(),\n    nxCopyAssetsPlugin(['*.md', 'package.json']),\n    dts({\n      entryRoot: 'src',\n      tsconfigPath: path.join(__dirname, 'tsconfig.lib.json'),\n    }),\n  ],\n  build: {\n    // ...\n    outDir: './dist',\n    // ...\n    lib: {\n      name: '@myorg/ui',\n      // ...\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Tags to Orders Library in package.json\nDESCRIPTION: This snippet shows how to assign tags 'type:feature' and 'scope:orders' to the orders library in its package.json file. These tags will be used later for defining module boundaries.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/11-module-boundaries/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"nx\": {\n    \"tags\": [\"type:feature\", \"scope:orders\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Utility Function in TypeScript\nDESCRIPTION: These TypeScript snippets demonstrate how to import the `getRandomItem` function from the newly created `util` library into `animals` and `names` packages, showcasing code reuse across different project packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/typescript-packages.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getRandomItem } from '@tuskdesign/util';\n\n// ...\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getRandomItem } from '@tuskdesign/util';\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Command Argument Interpolation\nDESCRIPTION: Configuration demonstrating how to use argument interpolation in commands with {args.[someFlag]} syntax.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/docs/run-commands-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"create-script\": {\n    \"executor\": \"nx:run-commands\",\n    \"options\": {\n        \"cwd\": \"apps/frontend\",\n        \"commands\": [\n          \"mkdir -p scripts\",\n          \"touch scripts/{args.name}.sh\",\n          \"chmod +x scripts/{args.name}.sh\"\n        ],\n        \"parallel\": false\n    }\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx run frontend:create-script --args=\"--name=example\"\n\nnx run frontend:create-script --name=example\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Nest Plugin\nDESCRIPTION: Commands to install the @nx/nest plugin in an existing Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/nest/nest-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/nest\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/nest\n```\n\n----------------------------------------\n\nTITLE: Configuring Static HTML Export in next.config.js\nDESCRIPTION: This JavaScript snippet configures a Next.js application for static HTML export. Setting `output: 'export'` in `next.config.js` tells Next.js to generate static HTML files during the build process.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n\"const nextConfig = {\\n  nx: {\\n    svgr: false,\\n  },\\n  output: 'export',\\n};\"\n```\n\n----------------------------------------\n\nTITLE: RspackAngularServerOptions Interface Definition\nDESCRIPTION: Defines the RspackAngularServerOptions interface, which allows configuring the server with optional settings like serverDistFolder, browserDistFolder, and indexHtml.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rspack/create-server.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RspackAngularServerOptions {\n  serverDistFolder?: string;\n  browserDistFolder?: string;\n  indexHtml?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions CI Workflow YAML\nDESCRIPTION: CI pipeline configuration for running tasks and distributing them across machines\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\n```\n\n----------------------------------------\n\nTITLE: Generating a run-commands target with Nx\nDESCRIPTION: Shell command to generate a new run-commands target for Storybook composition using Nx's generator. This creates the initial configuration that can be further customized.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/storybook-composition-setup.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx generate nx:run-commands storybook-composition --command='nx storybook one-composed' --project=main-host\n```\n\n----------------------------------------\n\nTITLE: Starting the Frontend Application\nDESCRIPTION: Command to start the React frontend application using Nx, which will connect to the API server.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx serve frontend\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Dependencies in Nx\nDESCRIPTION: This snippet illustrates a JSON configuration, part of 'nx.json', which defines task execution rules in an Nx workspace. It specifies dependency rules where task execution follows a defined order, like moving from 'build' to 'test' for optimized parallel execution. Understanding Nx's concepts of 'targetDefaults' is needed here, and this approach is adaptable based on workspace needs.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/task-pipeline-configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"targetDefaults\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\", \"prebuild\"]\n    },\n    \"test\": {\n      \"dependsOn\": [\"build\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Executor with No Test Pass\nDESCRIPTION: This snippet extends the Jest configuration to allow the project to pass tests even if no tests have been defined yet. This is useful during the early stages of development.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/jest/docs/jest-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"test\": {\n  \"executor\": \"@nx/jest:jest\",\n  \"options\": {\n    \"jestConfig\": \"libs/my-lib/jest.config.ts\",\n    \"passWithNoTests\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the API Server\nDESCRIPTION: Command to start the GraphQL API server using Nx, which will handle the backend operations for the React application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx serve api\n```\n\n----------------------------------------\n\nTITLE: Creating New Nx Workspace with Express Preset\nDESCRIPTION: Command to create a new Nx workspace with a pre-configured Express application setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/express/express-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n npx create-nx-workspace --preset=express\n```\n\n----------------------------------------\n\nTITLE: Generating React Application\nDESCRIPTION: Example of using Nx generate command to create a new React application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/generate.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/react:app apps/myapp\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Pipeline for Distributed Nx Task Execution\nDESCRIPTION: This Groovy script sets up a Jenkins pipeline for distributed task execution in an Nx project. It defines separate stages for main branch and PR builds, along with multiple agent stages for parallel task execution. The script uses Nx Cloud to manage task distribution and recording.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/enterprise/dte/jenkins-dte.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\npipeline {\n    agent none\n    environment {\n        NX_BRANCH = env.BRANCH_NAME.replace('PR-', '')\n    }\n    stages {\n        stage('Pipeline') {\n            parallel {\n                stage('Main') {\n                    when {\n                        branch 'main'\n                    }\n                    agent any\n                    steps {\n                        sh \"npm ci\"\n                        sh \"npx nx-cloud start-ci-run --distribute-on='manual' --stop-agents-after='e2e-ci'\"\n                        sh \"npx nx-cloud record -- nx format:check\"\n                        sh \"npx nx affected --base=HEAD~1 -t lint,test,build,e2e-ci --configuration=ci --parallel=2\"\n                    }\n                }\n                stage('PR') {\n                    when {\n                        not { branch 'main' }\n                    }\n                    agent any\n                    steps {\n                        sh \"npm ci\"\n                        sh \"npx nx-cloud start-ci-run --distribute-on='manual' --stop-agents-after='e2e-ci'\"\n                        sh \"npx nx-cloud record -- nx format:check\"\n                        sh \"npx nx affected --base origin/${env.CHANGE_TARGET} -t lint,test,build,e2e-ci --parallel=2 --configuration=ci\"\n                    }\n                }\n\n                # Add as many agent you want\n                stage('Agent1') {\n                   agent any\n                   steps {\n                    sh \"npm ci\"\n                    sh \"npx nx-cloud start-agent\"\n                   }\n                }\n                stage('Agent2') {\n                   agent any\n                   steps {\n                    sh \"npm ci\"\n                    sh \"npx nx-cloud start-agent\"\n                   }\n                }\n                stage('Agent3') {\n                   agent any\n                   steps {\n                    sh \"npm ci\"\n                    sh \"npx nx-cloud start-agent\"\n                   }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Cypress Configuration for Output Directories\nDESCRIPTION: TypeScript configuration showing how to customize the Cypress output directories for videos and screenshots, which will be automatically detected by Nx for proper caching.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nexport default defineConfig({\n  e2e: {\n    ...nxE2EPreset(__filename, {\n      // ...\n    }),\n    baseUrl: 'http://localhost:4200',\n    videosFolder: '../dist/cypress/apps/angular-store-e2e/videos-changed',\n    screenshotsFolder:\n      '../dist/cypress/apps/angular-store-e2e/screenshots-changed',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Features for Enterprise On-Prem Installations in YAML\nDESCRIPTION: This YAML configuration enables AI features for enterprise on-prem installations of Nx Cloud. It sets environment variables for the nxApi and frontend deployments, including the OpenAI secret key.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/concepts/ai-features.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnxApi\n  deployment:\n    env:\n      - name: NX_CLOUD_AI_ENABLED\n        value: 'true'\n\nfrontend\n  deployment:\n    env:\n      - name: OPENAI_SECRET_KEY\n        valueFrom:\n          secretKeyRef:\n            name: open-ai-secrets\n            key: OPENAI_SECRET_KEY\n      - name: NX_CLOUD_AI_ENABLED\n        value: 'true'\n```\n\n----------------------------------------\n\nTITLE: Generating Cypress Component Configuration\nDESCRIPTION: This shell command uses Nx to generate the configuration files needed for Cypress component testing in an Angular project. It creates the necessary setup for the specified project by adding a default cypress.config.ts file.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:cypress-component-configuration --project=my-cool-angular-project\n```\n\n----------------------------------------\n\nTITLE: Skipping Task Caching in Nx\nDESCRIPTION: This command demonstrates how to bypass all caching mechanisms in Nx by using the --skip-nx-cache flag. This ensures the task runs fresh without using any cached results.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/skipping-cache.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx build --skip-nx-cache\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Nx CLI\nDESCRIPTION: Command for executing Jest unit tests for the nx-dev-models-menu library using the Nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/models-menu/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx test nx-dev-models-menu\n```\n\n----------------------------------------\n\nTITLE: Clearing Nx Cache Directory\nDESCRIPTION: Command to clear only the Nx Cache directory, removing all local cache entries for tasks without affecting the remote cache.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/reset.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx reset --only-cache\n```\n\n----------------------------------------\n\nTITLE: Running multiple Storybooks in parallel with Nx\nDESCRIPTION: Shell command to run multiple Storybook instances in parallel using Nx's run-many command. This is necessary to have all composed Storybooks running at the same time.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/storybook-composition-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t storybook -p one-composed two-composed three-composed --parallel=3\n```\n\n----------------------------------------\n\nTITLE: Installing React Router with npm\nDESCRIPTION: This command installs the react-router-dom package, which is necessary for setting up routing in the React applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/7-share-code/content.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm add react-router-dom\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Angular Rspack with Nx\nDESCRIPTION: Commands for installing @ng-rspack/nx package and generating, serving, building, and testing an Angular application using Rspack in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-10-03-nx-20-release.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# In an Nx Workspace (npx create-nx-workspace)\n# Install Package\nnpm install @ng-rspack/nx\n\n# Run the app generator\nnpx nx g @ng-rspack/nx:app apps/myapp\n\n# Serve the app\nnpx nx serve myapp\n\n# Build the app\nnpx nx build myapp\n\n# Run the e2es\nnpx nx e2e myapp-e2e\n```\n\n----------------------------------------\n\nTITLE: Basic Nx Server Commands for Module Federation\nDESCRIPTION: Shell commands demonstrating how to serve a host application in an Nx workspace. The example shows how caching works when running the same command twice.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/faster-builds.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnx serve host\n\n# (kill server)\n\nnx serve host\n```\n\n----------------------------------------\n\nTITLE: Running Root-Level Tasks with Nx\nDESCRIPTION: Command to run a root-level task (docs) using Nx, which provides caching and other Nx benefits for workspace-wide operations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/run-tasks.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx docs\n```\n\n----------------------------------------\n\nTITLE: Updating @angular/cli Version in package.json\nDESCRIPTION: This snippet demonstrates how to update the '@angular/cli' package version in the 'package.json' file from '~19.1.0' to '~19.2.0'. This change ensures that the project uses the updated features and bug fixes available in the newer version of the Angular CLI. Modifying the 'devDependencies' section of 'package.json' is essential for maintaining up-to-date development environments.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-5-0/update-angular-cli.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@angular/cli\": \"~19.1.0\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@angular/cli\": \"~19.2.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Task Outputs with Nx Graph Command\nDESCRIPTION: Shell command to view the outputs of a task by using the --graph flag, which opens the task graph in a browser for detailed inspection.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/configure-outputs.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx build myapp --graph\n```\n\n----------------------------------------\n\nTITLE: Generating a Qwik Route with Nx\nDESCRIPTION: Command to generate a new route for the Qwik application using the qwik-nx plugin. This creates a new route file in the specified project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-qwik.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx g qwik-nx:route --name=todo --project=todo\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for React UI Library with Nx and Vitest\nDESCRIPTION: This command executes unit tests for the @react-monorepo/ui library using Vitest as the test runner. It utilizes Nx to manage the monorepo and run the tests.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/templates/react-monorepo/lesson-6/libs/shared/ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnx test @react-monorepo/ui\n```\n\n----------------------------------------\n\nTITLE: Running Make Command Across Multiple Projects\nDESCRIPTION: Shell command to run the 'make' target for all projects where it has been defined using Nx's run-many feature.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/running-custom-commands.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t make\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Type as Module\nDESCRIPTION: Package.json configuration to set the type as 'module' for ESM compatibility in the Svelte project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-svelte.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\"\n}\n```\n\n----------------------------------------\n\nTITLE: Default Storybook Configuration for Angular Projects\nDESCRIPTION: This snippet shows the default Storybook configuration for Angular projects. It uses the @storybook/angular:start-storybook executor and includes options for port, configDir, browserTarget, and compodoc.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/storybook-executor-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"storybook\": {\n  \"executor\": \"@storybook/angular:start-storybook\",\n  \"options\": {\n    \"port\": 4400,\n    \"configDir\": \"libs/ui/.storybook\",\n    \"browserTarget\": \"ui:build\",\n    \"compodoc\": false\n  },\n  \"configurations\": {\n    \"ci\": {\n      \"quiet\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Node Version Installation in Nx Cloud Workflow\nDESCRIPTION: Shows a manual approach to installing a specific Node.js version in an Nx Cloud workflow using nvm. This includes installing nvm, installing Node, and persisting environment changes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nlaunch-templates:\n  node-21:\n    resource-class: 'docker_linux_amd64/medium'\n    image: 'ubuntu22.04-node20.11-v9'\n    init-steps:\n      - name: Checkout\n        uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/checkout/main.yaml'\n      - name: Install nvm\n        script: |\n          # run nvm install script\n          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n          # source the updated profile to get the nvm command available\n          source ~/.profile\n          # install the needed version of node via nvm\n          nvm install 21.7.3\n          # echo the current path (which now includes the nvm-provided version of node) to NX_CLOUD_ENV\n          echo \"PATH=$PATH\" >> $NX_CLOUD_ENV\n      - name: Print node version\n        # confirm that the node version has changed\n        script: node -v\n      - name: Install Node Modules\n        uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/install-node-modules/main.yaml'\n      # Continue setup steps as needed\n```\n\n----------------------------------------\n\nTITLE: Setting Local Cache Mode in Nx\nDESCRIPTION: This snippet shows how to configure the local cache mode in Nx. It sets the 'localMode' to 'read-only' to prevent write attempts and suppress related warnings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/s3-cache/s3-cache-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"s3\": {\n    \"region\": \"us-east-1\",\n    \"bucket\": \"my-bucket\",\n    \"localMode\": \"read-only\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Qwik Todo Route Component\nDESCRIPTION: TypeScript/JSX code for the todo route component. It uses Qwik's component$, useContext, and useTask$ hooks, along with Form handling and route actions/loaders.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-qwik.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useContext, useTask$ } from '@builder.io/qwik';\nimport {\n  Form,\n  routeAction$,\n  routeLoader$,\n  z,\n  zod$,\n} from '@builder.io/qwik-city';\nimport { addTodo, getTodos, TodoContext } from '@acme/data-access';\n\nexport const useGetTodos = routeLoader$(() => getTodos());\n\nexport const useAddTodo = routeAction$(\n  (todo) => addTodo(todo),\n  zod$({ id: z.string(), message: z.string() })\n);\n\nexport default component$(() => {\n  const todoStore = useContext(TodoContext);\n  const persistedTodos = useGetTodos();\n  const addTodoAction = useAddTodo();\n\n  useTask$(({ track }) => {\n    track(() => persistedTodos.value);\n    if (persistedTodos.value) {\n      todoStore.todos = persistedTodos.value.todos;\n      todoStore.lastId =\n        todoStore.lastId > persistedTodos.value.lastId\n          ? todoStore.lastId\n          : persistedTodos.value.lastId;\n    }\n  });\n\n  return (\n    <div>\n      <h1>Todos</h1>\n      {todoStore.todos.map((t) => (\n        <div key={`todo-${t.id}`}>\n          <label>\n            <input type=\"checkbox\" /> {t.message}\n          </label>\n        </div>\n      ))}\n      <Form action={addTodoAction}>\n        <input type=\"hidden\" name=\"id\" value={todoStore.lastId + 1} />\n        <input type=\"text\" name=\"message\" />\n        <button type=\"submit\">Add</button>\n      </Form>\n      {addTodoAction.value?.success && <p>Todo added!</p>}\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Vue Component with Nx\nDESCRIPTION: Command to generate a new component for a Vue application using the Nx generator. Creates component in the specified app directory structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vue/docs/component-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/vue:component my-app/src/app/my-cmp\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Cache Mode in Nx\nDESCRIPTION: JSON configuration for setting the local cache mode in nx.json to control cache behavior in local development\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/azure-cache/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"azure\": {\n    \"localMode\": \"read-only\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nx Release Command Usage\nDESCRIPTION: Shows the basic usage of the nx release command. Can be invoked directly with nx if installed globally, or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/release.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx release\n```\n\n----------------------------------------\n\nTITLE: Defining custom project name in package.json\nDESCRIPTION: Shows how to define a custom project name in the package.json file using the 'nx' property, allowing for more flexible project naming.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-07-nx-update-20-5.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  \"name\": \"@org/foo\",\n  \"nx\": {\n\t\"name\": \"foo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Rollup Configuration in package.json\nDESCRIPTION: Basic configuration for Rollup in package.json to compile a TypeScript library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/compile-multiple-formats.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"my-awesome-lib\",\n  \"nx\": {\n    \"targets\": {\n      \"build\": {\n        \"executor\": \"@nx/rollup:rollup\",\n        \"options\": {\n          \"main\": \"packages/my-awesome-lib/src/index.ts\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Affected Projects in Nx Graph\nDESCRIPTION: This shell command uses the Nx CLI to visualize the project graph, highlighting the projects affected by changes specified by the `--files` argument. This requires the Nx CLI to be installed.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/10-affected/content.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n\"npx nx graph --affected --files=libs/products/src/lib/products.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Authentication in CI Pipeline\nDESCRIPTION: YAML configuration for setting up Azure authentication in a CI pipeline using OpenID Connect, including necessary permissions and environment variables\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/azure-cache/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\n...\npermissions:\n  id-token: write\n  ...\n\njobs:\n  main:\n    env:\n      NX_KEY: ${{ secrets.NX_KEY }}\n    runs-on: ubuntu-latest\n    steps:\n        ...\n\n      - name: Azure login\n        uses: azure/login@v2\n        with:\n          client-id: ${{ secrets.AZURE_CLIENT_ID }}\n          tenant-id: ${{ secrets.AZURE_TENANT_ID }}\n          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}\n        ...\n\n      - run: pnpm exec nx affected -t lint test build\n```\n\n----------------------------------------\n\nTITLE: Nx Workspace Creation Interactive Dialog\nDESCRIPTION: Example output of the interactive dialog when creating a new Nx workspace. Shows prompts for workspace name and which stack to use, including options for None, React, Vue, Angular, and Node.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/getting-started/installation.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nNX   Let's create a new workspace [https://nx.dev/getting-started/intro]\n\n✔ Where would you like to create your workspace? · myorg\n? Which stack do you want to use? …\nNone:          Configures a TypeScript/JavaScript project with minimal structure.\nReact:         Configures a React application with your framework of choice.\nVue:           Configures a Vue application with your framework of choice.\nAngular:       Configures a Angular application with modern tooling.\nNode:          Configures a Node API application with your framework of choice.\n```\n\n----------------------------------------\n\nTITLE: Generating Another Expo App in the Monorepo\nDESCRIPTION: Command to generate a second Expo application in the Nx workspace. This creates a Dogs app that will share the same UI library with the Cats app.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-24-step-by-step-guide-to-creating-an-expo-monorepo-with-nx.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nx/expo:app dogs\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx for Caching in JSON\nDESCRIPTION: This snippet demonstrates how to create an nx.json file to configure cacheable operations in Nx, which is used when integrating with Lerna for improved performance.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-05-25-lerna-used-to-walk-now-it-can-fly.md#2025-04-22_snippet_1\n\nLANGUAGE: json5\nCODE:\n```\n{\n  extends: 'nx/presets/npm.json',\n  tasksRunnerOptions: {\n    default: {\n      runner: 'nx/tasks-runners/default',\n      options: {\n        cacheableOperations: ['build'],\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub CODEOWNERS\nDESCRIPTION: Example of a GitHub CODEOWNERS file defining ownership for different parts of a monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-25-introducing-nx-powerpack.md#2025-04-22_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\n/docs/ @doc-owner\n/apps/orders   @orders-team\n/apps/products   @products-team\n/libs/orders/** @orders-team\n/libs/products/** @products-team\n/libs/shared/** @infra-team\n```\n\n----------------------------------------\n\nTITLE: Multiple Data Persistence Operator Import Migration\nDESCRIPTION: Demonstrates migrating multiple data persistence operators from @nx/angular to @ngrx/router-store/data-persistence\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-21-0-0/change-data-persistence-operators-imports-to-ngrx-router-store-data-persistence.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@angular/core';\nimport { fetch, navigation } from '@nx/angular';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@angular/core';\nimport { fetch, navigation } from '@ngrx/router-store/data-persistence';\n```\n\n----------------------------------------\n\nTITLE: Printing Project Graph as JSON to Console\nDESCRIPTION: Illustrates how to print the project graph as JSON directly to the console.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/dep-graph.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx graph --print\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Script in Launch Template\nDESCRIPTION: Illustrates how to include a custom inline script as part of the initialization steps.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlaunch-templates:\n  template-one:\n    init-steps:\n      - name: 'Print Node Version and PATH'\n        script: |\n          node -v\n          echo $PATH\n```\n\n----------------------------------------\n\nTITLE: Creating a Solid Application with Nx\nDESCRIPTION: Generate a new web application using Nx, which will be customized for Solid. This command creates the initial structure using Vite as the bundler.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-solid.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/web:app apps/my-solid-app --bundler=vite\n```\n\n----------------------------------------\n\nTITLE: Generating Host and Remote Applications for Angular - Shell Command\nDESCRIPTION: This command generates the host application along with specified remotes in an Angular Nx workspace, similar to the React setup, but tailored for Angular.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/faster-builds.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:host apps/host --remotes=shop,cart,about\n```\n\n----------------------------------------\n\nTITLE: Example Workspace Structure - Text\nDESCRIPTION: This text illustrates a sample folder structure for a monorepo, categorizing projects by their respective applications and shared components.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/decisions/folder-structure.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\napps/\n  booking/\n  check-in/\nlibs/\n  booking/                 <---- grouping folder\n    feature-shell/         <---- project\n\n  check-in/\n    feature-shell/\n\n  shared/                  <---- grouping folder\n    data-access/           <---- project\n\n    seatmap/               <---- grouping folder\n      data-access/         <---- project\n      feature-seatmap/     <---- project\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Plugins\nDESCRIPTION: This command lists all the Nx plugins currently installed in the workspace. It helps identify plugins that may require individual migration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/automate-updating-dependencies.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n\"nx report\"\n```\n\n----------------------------------------\n\nTITLE: Running ESLint in Nx Workspace\nDESCRIPTION: Command to run ESLint on a specific project in the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/eslint/eslint.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx lint my-project\n```\n\n----------------------------------------\n\nTITLE: Testing Module Boundary Rules in Products Component\nDESCRIPTION: This snippet shows an example of violating the module boundary rules by importing the Orders component from the orders project into the products.tsx file. This import is not allowed based on the configured rules.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/11-module-boundaries/content.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport styles from './products.module.css';\n\n// This import is not allowed 👇\nimport { Orders } from '@react-monorepo/orders';\n\nexport function Products() {\n  return (\n    <div className={styles['container']}>\n      <h1>Welcome to Products!</h1>\n      <p>This is a change. 👋</p>\n    </div>\n  );\n}\n\nexport default Products;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Static Serving for Cypress Tests\nDESCRIPTION: Configuration for serving pre-built static files in CI environments using @nx/web:file-server. This allows testing against built assets rather than using the development server.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/docs/cypress-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"serve-static\": {\n  \"executor\": \"@nx/web:file-server\",\n  \"options\":{\n    \"buildTarget\": \"frontend:build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Jest with SWC and globalSetup from .spec.swcrc\nDESCRIPTION: This snippet configures Jest to use `@swc/jest` with a SWC configuration located in a `.spec.swcrc` file, specifically for spec files. It disables the standard `.swcrc` lookup, ensuring that the provided `.spec.swcrc` configuration is used. It also sets the `globalSetup` file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/jest/documents/overview.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint-disable */\nimport { readFileSync } from 'fs';\n\n// Reading the SWC compilation config for the spec files\nconst swcJestConfig = JSON.parse(\n  readFileSync(`${__dirname}/.spec.swcrc`, 'utf-8')\n);\n\n// Disable .swcrc look-up by SWC core because we're passing in swcJestConfig ourselves\nswcJestConfig.swcrc = false;\n\nexport default {\n  globalSetup: '<rootDir>/src/global-setup-swc.ts',\n  transform: {\n    '^.+\\\\.[tj]s$': ['@swc/jest', swcJestConfig],\n  },\n  // other settings\n};\n```\n\n----------------------------------------\n\nTITLE: Testing a Remix Application with Vitest\nDESCRIPTION: Runs unit tests for a Remix application using Vitest through Nx's test command. This executes all tests in the application and reports the results.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/remix.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx test myapp\n```\n\n----------------------------------------\n\nTITLE: Configuring CI Cache Mode in Nx\nDESCRIPTION: This snippet demonstrates how to set the cache mode for CI environments in Nx. It configures the 'ciMode' to 'read-only' to prevent write operations during CI runs.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/s3-cache/s3-cache-plugin.md#2025-04-22_snippet_7\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"s3\": {\n    \"region\": \"us-east-1\",\n    \"bucket\": \"my-bucket\",\n    \"ciMode\": \"read-only\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json for Names Project\nDESCRIPTION: This snippet indicates the lines to be deleted from the package.json of the names project to remove existing build and typecheck scripts. This facilitates the integration of the @nx/js plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/2-smart-monorepo/5-add-plugin/content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"del\": {\"12-13\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Process.env Variables in Angular Application Project\nDESCRIPTION: Project configuration showing how to set environment variables in Node.js-style format using the 'define' option.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/use-environment-variables-in-angular.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/angular:application\",\n      \"options\": {\n        ...\n        \"define\": {\n          \"process.env.MY_API_URL\": \"http://localhost:3333\"\n        }\n      }\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Vite Projects in Nx\nDESCRIPTION: Commands to generate new React applications and libraries using Vite as the bundler.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/vite/vite-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:app apps/my-app --bundler=vite\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:lib libs/my-lib --bundler=vite\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/web:app apps/my-app --bundler=vite\n```\n\n----------------------------------------\n\nTITLE: Building Nx Applications with ESBuild\nDESCRIPTION: Command to build an application using the configured ESBuild executor. This runs the build target defined in the project.json file for the specified application.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/esbuild/docs/esbuild-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx build <app-name>\n```\n\n----------------------------------------\n\nTITLE: Creating New Nx Workspace with Nest Preset\nDESCRIPTION: Commands to generate a new Nx workspace with Nest.js preset using npm or yarn.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/nest/nest-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace my-workspace --preset=nest\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn create nx-workspace my-workspace --preset=nest\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Codegen\nDESCRIPTION: This TypeScript configuration file for GraphQL Codegen specifies the schema location and output file for generated TypeScript models.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'libs/models-graphql/src/lib/schema.graphql',\n  generates: {\n    'libs/models-graphql/src/lib/__generated__/models.ts': {\n      plugins: ['typescript'],\n      config: {\n        avoidOptionals: true,\n      },\n    },\n  },\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Task Graph Export to File\nDESCRIPTION: Save the task graph to a JSON file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run-many.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t=build --graph=output.json\n```\n\n----------------------------------------\n\nTITLE: Generating E2E Project for Nx Plugin using @nx/plugin Generator\nDESCRIPTION: Command to scaffold an E2E testing project for an Nx plugin. Takes parameters for plugin name, npm package name, and output path to generate the necessary testing infrastructure.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/plugin/docs/generators/e2e-project-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/plugin:e2e-project --pluginName my-plugin --npmPackageName my-plugin --pluginOutputPath dist/my-plugin\n```\n\n----------------------------------------\n\nTITLE: Configure Storybook Interaction Tests - Vue\nDESCRIPTION: This command sets up Storybook for a Vue project and activates interaction tests. The `project-name` parameter indicates the Vue project, and the `--interactionTests=true` flag makes sure that interaction tests are enabled during the Storybook setup by including @storybook/addon-interactions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/interaction-tests.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/vue:storybook-configuration project-name --interactionTests=true\n```\n\n----------------------------------------\n\nTITLE: Disabling Nx Daemon\nDESCRIPTION: This snippet explains how to disable the Nx Daemon in a local machine environment by modifying configuration options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/daemon.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- set `useDaemonProcess: false` in the runners options in `nx.json` or\n- set the `NX_DAEMON` env variable to `false`.\n```\n\n----------------------------------------\n\nTITLE: File-Specific Affected Projects Testing\nDESCRIPTION: Run tests for projects affected by changes in a specific file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/affected.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t test --files=libs/mylib/src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Operations in nx.json\nDESCRIPTION: This code snippet demonstrates how to configure automated Git operations such as committing changes and creating tags as part of the release process within the `nx.json` file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_20\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"release\": {\n    \"git\": {\n      // This will enable committing any changes (e.g. package.json\n      // updates, CHANGELOG.md files) to git\n      \"commit\": true,\n      // This will enable create a git for the overall release, or\n      // one tag per project for independent project releases\n      \"tag\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/react Plugin\nDESCRIPTION: Example of installing the @nx/react package matching the installed version of nx and running its init generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/add.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/react\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Library in Nx Workspace\nDESCRIPTION: This command uses the @nx/js:lib generator to create a new JavaScript library in the specified directory within your Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-express.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/js:lib libs/my-lib\n```\n\n----------------------------------------\n\nTITLE: Running dev server for React app with Nx\nDESCRIPTION: Command to start the development server for the React application named 'react-store' using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/2-use-preset/_solution/react-monorepo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx serve react-store\n```\n\n----------------------------------------\n\nTITLE: Creating New Nx Workspace with TypeScript Preset\nDESCRIPTION: Shows the command to create a new Nx workspace using the TypeScript preset, which sets up project references and workspaces support.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-06-nx-update-20-3.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest my-workspace --preset=ts\n```\n\n----------------------------------------\n\nTITLE: Basic Vitest Test Command\nDESCRIPTION: Command to run Vitest tests for a specific app using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/test-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx test my-app\n```\n\n----------------------------------------\n\nTITLE: Basic ESLint Configuration in Nx\nDESCRIPTION: The minimal configuration for the ESLint linter in an Nx project, specifying lintFilePatterns to indicate which files should be linted.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/eslint/docs/eslint-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"lint\": {\n  \"executor\": \"@nx/eslint:lint\",\n  \"options\": {\n    \"lintFilePatterns\": [\"apps/frontend/**/*.ts\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Web Component Application with Nx\nDESCRIPTION: Illustrates how to create a new web component application using Nx generate command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/cli/generate.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/web:app apps/myapp\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Mode Export\nDESCRIPTION: Configuration for bundling an Expo application in development mode. The dev option set to true creates a development build with additional debugging features enabled.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/export-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n    \"export\": {\n      \"executor\": \"@nx/expo:export\",\n      \"outputs\": [\"{options.outputDir}\"],\n      \"options\": {\n        \"platform\": \"web\",\n        \"bundler\": \"metro\",\n        \"outputDir\": \"dist/apps/dogs\",\n        \"dev\": true\n      },\n      \"dependsOn\": [\"sync-deps\"]\n    },\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workspace Layout in Nx using TypeScript\nDESCRIPTION: The getWorkspaceLayout function takes a Tree object representing the file system and returns an object containing workspace defaults. It includes default folders for apps and libs, and the default scope.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/getWorkspaceLayout.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{ appsDir: 'apps', libsDir: 'libs' }\n```\n\n----------------------------------------\n\nTITLE: Merging standalone project into Nx workspace (shell)\nDESCRIPTION: This command merges the specified branch from the standalone app's repository into the Nx workspace.  The `--allow-unrelated-histories` flag is crucial for merging repositories with no common history.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/preserving-git-histories.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit merge my-standalone-app/monorepo-migration --allow-unrelated-histories\n```\n\n----------------------------------------\n\nTITLE: Package Configuration for Module Federation Apps\nDESCRIPTION: Package.json configurations for shell and remote applications required for Zephyr Cloud deployment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-12-next-gen-module-federation-deployments.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"shell\",\n  \"version\": \"0.0.0\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"remote1\",\n  \"version\": \"0.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Component Template\nDESCRIPTION: This HTML snippet shows a basic component template with a paragraph element.  It displays the text \"product-list works!\" followed by another paragraph with the text \"This is a change. 👋\".\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/10-affected/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n\"<p>product-list works!</p>\\n<p>This is a change. 👋</p>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Executor in Nx Project Configuration\nDESCRIPTION: JSON configuration showing how to use a locally developed custom executor in a project's target configuration. This demonstrates how to reference a local plugin's executor from within your workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-08-what-is-new-in-nx-13-10.md#2025-04-22_snippet_1\n\nLANGUAGE: json5\nCODE:\n```\n{\n  root: 'apps/demo',\n  sourceRoot: 'apps/demo/src',\n  projectType: 'application',\n  targets: {\n    mybuild: {\n      executor: '@myorg/workspace-extensions:build',\n      outputs: ['{options.outputPath}'],\n      options: {\n        outputPath: 'dist/apps/someoutput',\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rspack Build Task in Nx\nDESCRIPTION: This snippet outlines the setup of an inferred build task for projects using Rspack. The Rspack plugin is configured in Nx to indicate the build target. Requires Rspack installation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/common-tasks.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"plugins\":[{\"plugin\":\"@nx/rspack/plugin\",\"options\":{\"buildTargetName\":\"build\"}}]}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Fix Option in ESLint Configuration\nDESCRIPTION: Configuration to always fix linter issues by default when running the lint command without needing to specify the --fix flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/eslint/docs/eslint-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"lint\": {\n  \"executor\": \"@nx/eslint:lint\",\n  \"outputs\": [\"{options.outputFile}\"],\n  \"options\": {\n    \"lintFilePatterns\": [\"apps/frontend/**/*.ts\"],\n    \"fix\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Lint File Patterns\nDESCRIPTION: Configuration to include package.json in the lint file patterns for the ESLint executor in project.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/eslint/dependency-checks.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"targets\": {\n    \"lint\": {\n      \"executor\": \"@nx/eslint:lint\",\n      \"outputs\": [\"{options.outputFile}\"],\n      \"options\": {\n        \"lintFilePatterns\": [\n          \"libs/my-lib/**/*.{ts,tsx,js,jsx}\",\n          \"libs/my-lib/package.json\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Stories with Ignored Paths\nDESCRIPTION: Command to generate Storybook configuration while ignoring specific paths and file patterns.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/storybook-configuration-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react-native:storybook-configuration ui --generateStories=true --ignorePaths=libs/ui/src/not-stories/**,**/**/src/**/*.other.*,apps/my-app/**/*.something.ts\n```\n\n----------------------------------------\n\nTITLE: Displaying Available Targets for React Store\nDESCRIPTION: This command shows all available targets that can be run for the 'react-store' project in the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/templates/react-monorepo/lesson-2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx show project react-store\n```\n\n----------------------------------------\n\nTITLE: Setting Activation Key Environment Variable\nDESCRIPTION: This example shows how to set the activation key as an environment variable in a `.env` file. This is especially useful for public repositories or CI environments, ensuring that the activation key is accessible without being directly committed to the code.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/azure-cache/azure-cache-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"NX_KEY=YOUR_ACTIVATION_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Nx Products Library\nDESCRIPTION: This command executes the unit tests for the products library using Nx. It demonstrates how to run tests for a specific library within an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/6-create-local-library/_solution/libs/products/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx test products\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Cypress Plugin\nDESCRIPTION: JSON configuration for @nx/cypress plugin in nx.json defining target names for different operations\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/cypress/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/cypress/plugin\",\n      \"options\": {\n        \"targetName\": \"e2e\",\n        \"ciTargetName\": \"e2e-ci\",\n        \"componentTestingTargetName\": \"component-test\",\n        \"openTargetName\": \"open-cypress\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Library Loader in a Remix Route\nDESCRIPTION: Imports and uses a loader function from a shared library in a Remix route. This demonstrates how to separate data-fetching logic into reusable modules.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/remix.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { adminLoader } from '@acme/login/server';\n\nexport const loader = adminLoader;\n```\n\n----------------------------------------\n\nTITLE: TypeScript StringInsertion Interface Definition\nDESCRIPTION: Interface defining the structure for string insertions with three properties: index (position for insertion), text (content to insert), and type (Insert enum value).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/StringInsertion.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StringInsertion {\n  index: number;  // Place in the original text to insert new text\n  text: string;   // Text to insert into the original text\n  type: Insert;   // Insert type enum value\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/node (Nx < 18)\nDESCRIPTION: This command installs the @nx/node package as a development dependency in an Nx workspace using npm. It's specifically for versions of Nx prior to 18.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/node/node-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/node\n```\n\n----------------------------------------\n\nTITLE: Manual Plugin Composition for Nx 15 and Prior\nDESCRIPTION: Demonstrates how to manually compose Next.js plugins for versions before Nx 16, including handling async configurations and special cases like Sentry.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/next-config-setup.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\n\n// ...\n\n/**\n * @type {import('@nx/next/plugins/with-nx').WithNxOptions}\n **/\nconst nextConfig = {\n  // ...\n};\n\nconst plugins = [\n  // Your plugins exlcuding withNx\n];\n\nmodule.exports = async (phase, context) => {\n  let updatedConfig = plugins.reduce((acc, fn) => fn(acc), nextConfig);\n\n  // Apply the async function that `withNx` returns.\n  updatedConfig = await withNx(updatedConfig)(phase, context);\n\n  // If you have plugins that has to be added after Nx you can do that here.\n  // For example, Sentry needs to be added last.\n  const { withSentryConfig } = require('@sentry/nextjs');\n  updatedConfig = withSentryConfig(updatedConfig);\n\n  return updatedConfig;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Angular Library with Nx\nDESCRIPTION: This command generates a basic Angular library named `my-ui-lib` within the `libs` directory. It also assigns the `ui` tag to the library, allowing for filtering and organization within the Nx workspace.  No specific dependencies are required beyond having Nx and the Angular plugin installed.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/library-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:library libs/my-ui-lib --tags=ui\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific iOS Simulator\nDESCRIPTION: This JSON snippet demonstrates how to configure the 'run-ios' target to use a specific iOS simulator. The 'simulator' option is set to the desired device name.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/run-ios-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n    \"run-ios\": {\n      \"executor\": \"@nx/react-native:run-ios\",\n      \"options\": {\n        \"simulator\": \"iPhone 14 Pro (16.2)\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Project tsconfig.spec.json Configuration - JSONC\nDESCRIPTION: This JSONC snippet for a project's tsconfig.spec.json outlines the configuration needed for the test files without referencing dependencies, optimizing the test compilation process.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/typescript-project-linking.md#2025-04-22_snippet_11\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    // Any overrides\n  },\n  \"include\": [\n    // test files\n  ],\n  \"references\": [\n    // tsconfig.lib.json for this project\n    {\n      \"path\": \"./tsconfig.lib.json\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Logging into EAS for Expo Deployment\nDESCRIPTION: Command to log into the Expo Application Services (EAS) for deploying Expo applications. This authenticates your local environment with the EAS build service.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-24-step-by-step-guide-to-creating-an-expo-monorepo-with-nx.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\neas login\n```\n\n----------------------------------------\n\nTITLE: Using Workspace Protocol for Package Dependencies\nDESCRIPTION: Demonstrates how to use the workspace protocol (workspace:*) for explicitly marking local dependencies in PNPM, Yarn v2+, and Bun workspaces.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@ts-monorepo-linking/myapp\",\n  ...\n  \"dependencies\": {\n    \"@ts-monorepo-linking/lib-a\": \"workspace:*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running ESLint on a project\nDESCRIPTION: Command to run ESLint on a specific project in the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/eslint/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx lint my-project\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for Environment Variables\nDESCRIPTION: Defines TypeScript type declarations for environment variables to prevent type-checking errors during build.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/use-environment-variables-in-angular.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const process: {\n  env: {\n    MY_ORG_API_URL: string;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Automatic Acceptance of Storybook CLI Prompts\nDESCRIPTION: This command runs the migration generator with automatic acceptance of all Storybook CLI prompts, useful for CI environments or scripted migrations.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/migrate-7-generator-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/storybook:migrate-7 --autoAcceptAllPrompts\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Login Application\nDESCRIPTION: TypeScript configuration for Webpack in the login application, using the Module Federation config.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withModuleFederation } from '@nx/angular/module-federation';\nimport config from './module-federation.config';\n\nexport default withModuleFederation(config, { dts: false });\n```\n\n----------------------------------------\n\nTITLE: Creating a New Library using Nx\nDESCRIPTION: This snippet demonstrates how to generate a new library in the default location using the Nx CLI. The command 'nx g lib libs/my-lib' creates a library named 'my-lib' in the 'libs' directory. This is useful for organizing your application's code into reusable modules.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/library-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g lib libs/my-lib\n```\n\n----------------------------------------\n\nTITLE: Run Storybook Interaction Tests\nDESCRIPTION: This command executes the Storybook interaction tests for a specific project. Replace `project-name` with the name of the project containing the Storybook setup. This command will run the tests defined in the project's Storybook stories.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/interaction-tests.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx test-storybook project-name\n```\n\n----------------------------------------\n\nTITLE: Convert App to Host and Attach Remotes (Nx)\nDESCRIPTION: This command converts an existing application named `myapp` into a host application and attaches existing remote applications named `remote1` and `remote2`. The `--routing=true` flag enables routing for the host application. The `--remotes=remote1,remote2` flag specifies the names of the remote applications to attach to, separated by commas.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/setup-mf-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx g setup-mf myapp --mfType=host --routing=true --remotes=remote1,remote2\n```\n\n----------------------------------------\n\nTITLE: Importing Jest DOM Testing Library in TypeScript\nDESCRIPTION: Imports the @testing-library/jest-dom package which adds custom jest matchers for testing DOM elements.\nSOURCE: https://github.com/nrwl/nx/blob/master/e2e/nx-init/src/files/cra/src/setupTests.js.txt#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@testing-library/jest-dom';\n```\n\n----------------------------------------\n\nTITLE: Generating Static Website with Project Graph\nDESCRIPTION: Shows how to generate a static website with the project graph, outputting an HTML file and an asset folder.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/dep-graph.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx graph --file=output.html\n```\n\n----------------------------------------\n\nTITLE: Importing Utility Function in Names Module (TypeScript)\nDESCRIPTION: This TypeScript code imports the `getRandomItem` function from the `@tuskdesign/util` library. The original code for the names module would have contained the definition for `getRandomItem` before it was moved to the utility library.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/2-smart-monorepo/6-sync-ts-references/content.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getRandomItem } from '@tuskdesign/util';\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Turborepo Tasks in turbo.json\nDESCRIPTION: Example turbo.json configuration file showing task definitions including build, lint, check-types and dev tasks with their respective dependencies, inputs, outputs and cache settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/from-turborepo.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://turbo.build/schema.json\",\n  \"ui\": \"tui\",\n  \"tasks\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"],\n      \"inputs\": [\"$TURBO_DEFAULT$\", \".env*\"],\n      \"outputs\": [\".next/**\", \"!.next/cache/**\"]\n    },\n    \"lint\": {\n      \"dependsOn\": [\"^lint\"]\n    },\n    \"check-types\": {\n      \"dependsOn\": [\"^check-types\"]\n    },\n    \"dev\": {\n      \"cache\": false,\n      \"persistent\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Example After Patch Bump\nDESCRIPTION: This example shows the `package.json` file after a patch bump, demonstrating how the version prefixes are preserved. The `dependency-one` and `dependency-two` prefixes are maintained, while `dependency-three` remains without a prefix.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/configuration-version-prefix.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"my-package\",\n  \"version\": \"0.1.2\",\n  \"dependencies\": {\n    \"dependency-one\": \"~1.2.4\",\n    \"dependency-two\": \"^2.3.4\",\n    \"dependency-three\": \"3.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-generate Stories for Vue Components\nDESCRIPTION: This command automatically generates story files (`*.stories.ts`) for all Vue components within a specified project.  This simplifies the process of creating stories for existing components and keeps the story definitions up-to-date.  Replace '<project-name>' with your project's name.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/plugin-vue.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/vue:stories --project=<project-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Executor with Jest Config\nDESCRIPTION: This configuration snippet sets up the Jest executor with the specified Jest configuration file path. It is essential for defining how Jest runs in the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/jest/docs/jest-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"test\": {\n  \"executor\": \"@nx/jest:jest\",\n  \"options\": {\n    \"jestConfig\": \"libs/my-lib/jest.config.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running iOS App on Physical Device\nDESCRIPTION: This bash command demonstrates how to run an iOS app on a physical device using the Nx CLI. It includes the '--device' flag to specify the target device name.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/run-ios-examples.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnx run-ios <app-name> --device=\"deviceName\"\n```\n\n----------------------------------------\n\nTITLE: Interactive Migration Mode\nDESCRIPTION: Example of running migrations in interactive mode, prompting the user for optional package updates and migrations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/migrate.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate latest --interactive\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Build Task in Nx\nDESCRIPTION: This snippet demonstrates how to define a custom build task in the project's package.json to utilize ts-node for executing a build script. Requires ts-node to be installed as a dependency.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/common-tasks.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"scripts\":{\"build\":\"ts-node build-script.ts\"}}\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript-only Workspace\nDESCRIPTION: Command to create a basic Nx workspace with TypeScript support\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-29-new-nx-experience.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace tsmono --preset=ts\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Plugin Command\nDESCRIPTION: Recommended command for adding new Nx plugins to ensure version compatibility with existing plugins.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/keep-nx-versions-in-sync.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add <plugin>\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Webpack Plugin\nDESCRIPTION: Command to add the Nx Webpack plugin to an existing Nx workspace for version 18+.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/plugin-overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/webpack\n```\n\n----------------------------------------\n\nTITLE: Commit-Based Affected Testing\nDESCRIPTION: Run tests for projects affected by the last commit on main branch.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/affected.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t test --base=main~1 --head=main\n```\n\n----------------------------------------\n\nTITLE: Serving Nuxt App with Nx\nDESCRIPTION: Command to serve a Nuxt application using Nx. This runs the Nuxt development server enhanced with Nx features.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-06-nuxt-js-support-in-nx.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx serve my-nuxt-app\n```\n\n----------------------------------------\n\nTITLE: Direct TypeScript File Exports Configuration\nDESCRIPTION: Package.json configuration for directly exporting TypeScript source files from a library package, suitable for local monorepo development.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@ts-monorepo-linking/lib-a\",\n  ...\n  \"type\": \"module\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./src/index.ts\",\n      \"import\": \"./src/index.ts\",\n      \"default\": \"./src/index.ts\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"main\": \"./src/index.ts\",\n  \"types\": \"./src/index.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Linting and testing Nest.js applications and libraries in Nx\nDESCRIPTION: Commands to run linting and unit tests for Nest.js applications and libraries using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nest/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx lint my-nest-app\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx lint my-nest-lib\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx test my-nest-app\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx test my-nest-lib\n```\n\n----------------------------------------\n\nTITLE: Basic Playwright Test Example\nDESCRIPTION: Simple test case showing how to navigate to a page and verify content using Playwright's test framework.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-09-18-introducing-playwright-support-for-nx.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('has title', async ({ page }) => {\n  await page.goto('/');\n  // Expect h1 to contain a substring.\n  expect(await page.locator('h1').innerText()).toContain('Welcome');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting unique Storybook ports in project.json\nDESCRIPTION: Configuration to set a unique port for a Storybook project in the project.json file. This ensures each Storybook instance runs on a predictable port for reliable composition.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/storybook-composition-setup.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"targets\": {\n    // ...\n    \"storybook\": {\n      \"options\": {\n        \"port\": 4401 // make sure to set a port different than the rest of the projects\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Tailwind CSS Preset with CSS Variables\nDESCRIPTION: Modified Tailwind configuration that uses CSS variables instead of literal values for theme properties. This enables theme sharing across projects while allowing for customization in each application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  theme: {\n    colors: {\n      primary: {\n        light: 'var(--primary-light)',\n        DEFAULT: 'var(--primary)',\n        dark: 'var(--primary-dark)',\n      },\n      secondary: {\n        light: 'var(--secondary-light)',\n        DEFAULT: 'var(--secondary)',\n        dark: 'var(--secondary-dark)',\n      },\n      white: 'var(--white)',\n      black: 'var(--black)',\n    },\n    spacing: {\n      sm: 'var(--spacing-sm)',\n      md: 'var(--spacing-md)',\n      lg: 'var(--spacing-lg)',\n      xl: 'var(--spacing-xl)',\n    },\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Reading Cached ProjectGraph in TypeScript for Nx\nDESCRIPTION: This function synchronously reads the latest cached copy of the workspace's ProjectGraph. It accepts an optional 'minimumComputedAt' parameter to specify the minimum timestamp for the cached graph. The function returns a ProjectGraph object and throws an error if no cached graph is available.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/readCachedProjectGraph.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **readCachedProjectGraph**(`minimumComputedAt?`): [`ProjectGraph`](../../devkit/documents/ProjectGraph)\n```\n\n----------------------------------------\n\nTITLE: Apollo Server Implementation\nDESCRIPTION: Main server implementation with resolvers and type definitions\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport { Set } from '@nx-apollo/models-graphql';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\nimport { Resolvers } from './__generated__/resolvers';\n\nconst typeDefs = readFileSync(\n  join('libs/models-graphql/src/lib', 'schema.graphql'),\n  { encoding: 'utf-8' }\n);\n\nconst sets: Set[] = [\n  {\n    id: 1,\n    name: 'Voltron',\n    numParts: 2300,\n    year: '2019',\n  },\n  {\n    id: 2,\n    name: 'Ship in a Bottle',\n    numParts: 900,\n    year: '2019',\n  },\n];\n\nconst resolvers: Resolvers = {\n  Query: {\n    allSets: () => sets,\n  },\n  Mutation: {\n    addSet: (parent, args) => {\n      const newSet = {\n        id: sets.length + 1,\n        name: args.name,\n        year: args.year,\n        numParts: +args.numParts,\n      };\n      sets.push(newSet);\n      return newSet;\n    },\n  },\n};\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server, {\n  listen: { port: 4000 },\n});\n\nconsole.log(`🚀  Server ready at: ${url}`);\n```\n\n----------------------------------------\n\nTITLE: Running Storybook in Nx Project\nDESCRIPTION: Commands for running Storybook operations in an Nx workspace, including serving, building, and testing Storybook instances for individual projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/storybook/documents/best-practices.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx storybook my-project\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx build-storybook my-project\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx test-storybook my-project\n```\n\n----------------------------------------\n\nTITLE: Installing qwik-nx Plugin with Package Managers\nDESCRIPTION: Commands to install the qwik-nx plugin using npm, yarn, pnpm, or bun package managers. This plugin is essential for integrating Qwik with Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-qwik.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D qwik-nx\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D qwik-nx\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add -D qwik-nx\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add -D qwik-nx\n```\n\n----------------------------------------\n\nTITLE: Nx Project Configuration Example\nDESCRIPTION: Example of Nx project configuration showing executor setup in project.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/nx-and-angular.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myngapp\",\n  ...\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@angular-devkit/build-angular:browser\",\n      ...\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a New Web Application\nDESCRIPTION: Command to create a new Web Component application using the @nx/web plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/web/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/web:app apps/my-new-app\n```\n\n----------------------------------------\n\nTITLE: Creating Single File Component with Inline Styles and Template\nDESCRIPTION: This command generates a component named 'my-component' with inline styles and an inline template, which can be useful for small components that do not require separate files.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/component-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:component apps/my-app/src/lib/my-component/my-component --inlineStyle --inlineTemplate\n```\n\n----------------------------------------\n\nTITLE: Adding serve script to package.json (Nx)\nDESCRIPTION: This snippet demonstrates how to add a 'start' script to the root-level `package.json` file using the `updateJson` function from `@nx/devkit`.  This script will execute `npx react-scripts start` when invoked.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-10-create-your-own-create-react-app-cli.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  updateJson,\n  ...\n} from '@nx/devkit';\n...\n\nexport default async function (tree: Tree, options: PresetGeneratorSchema) {\n  ...\n  addProjectConfiguration(...);\n\n  updateJson(tree, 'package.json', (json) => {\n    json.scripts = json.scripts || {};\n\n    // generate a start script into the package.json\n    json.scripts.start = 'npx react-scripts start';\n    return json;\n  });\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SetList Component with GraphQL Integration\nDESCRIPTION: React component that uses a GraphQL query hook to fetch and display a list of Lego sets, demonstrating the use of generated GraphQL operations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSetListQuery } from './__generated__/operations';\n\nexport function SetList() {\n  const { loading, data } = useSetListQuery();\n\n  return loading ? (\n    <p>Loading ...</p>\n  ) : (\n    <ul className=\"mx-6 w-full list-none\">\n      {data &&\n        data.allSets?.map(({ id, name, numParts, year }) => (\n          <li className=\"p-2 even:bg-slate-200\">\n            {year} - <strong>{name}</strong> ({numParts} parts)\n          </li>\n        ))}\n    </ul>\n  );\n}\n\nexport default SetList;\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json for Animals Project\nDESCRIPTION: This snippet indicates the lines to be deleted from the package.json of the animals project to remove existing build and typecheck scripts. This is a prerequisite for using the @nx/js plugin that infers these tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/2-smart-monorepo/5-add-plugin/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"del\": {\"12-13\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Node API\nDESCRIPTION: Docker configuration for building and running the Node.js API in a container\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-02-28-bundling-a-node-api-with-fastify-esbuild-and-nx.md#2025-04-22_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM docker.io/node:lts-alpine\n\nENV HOST=0.0.0.0\nENV PORT=3000\nWORKDIR /app\nRUN addgroup --system api && \\\n adduser --system -G api api\nCOPY dist/api api\nRUN chown -R api:api .\nCMD [ \"node\", \"api\" ]\n```\n\n----------------------------------------\n\nTITLE: Generate Stories for a Specific Vue Library\nDESCRIPTION: This command generates story files for a specific Vue library called 'feature-ui'. It assumes the library is located in the 'libs/feature/ui' directory. This command will generate MyButton.stories.ts for MyButton.vue\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/plugin-vue.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/vue:stories --project=feature-ui\n```\n\n----------------------------------------\n\nTITLE: Run Affected Tests (Nx)\nDESCRIPTION: This command runs the `test` tasks for all projects that have been affected by the recent changes. Nx uses the project graph and git history to determine which projects need to be tested, avoiding unnecessary test runs.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n./nx affected -t test\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for Plugins - TypeScript\nDESCRIPTION: This TypeScript snippet declares types for the constants set by the esbuild plugins. This is crucial for TypeScript to recognize these values during the compilation process, thus preventing type-checking errors.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/application-executor-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const PLUGIN1_TEXT: number;\ndeclare const PLUGIN2_TEXT: string;\n```\n\n----------------------------------------\n\nTITLE: RsbuildAngularServer Interface\nDESCRIPTION: Defines the `RsbuildAngularServer` interface. This interface describes the structure of the object returned by `createServer`.  It includes an `app` property, which is the Express application instance, and a `listen` method, which starts the Express server on a specified port (defaults to 4000 if no port is provided).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rsbuild/create-server.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RsbuildAngularServer {\n  app: express.Express;\n  listen: (port?: number) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ESLint Flat Config to Ignore Vite/Vitest Timestamp Files\nDESCRIPTION: Demonstrates how to modify the root eslint.config.mjs file to ignore Vite and Vitest timestamp configuration files using ESLint flat config format.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/src/migrations/update-20-5-0/eslint-ignore-vite-temp-files.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default [\n  {\n    ignores: ['dist', 'vite.config.*.timestamp*', 'vitest.config.*.timestamp*'],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Running Cached Task with Nx\nDESCRIPTION: Example output of running a cached task with Nx, showing how Nx reads the output from the cache instead of re-running the command, which significantly improves execution time.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/root-level-scripts.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> nx run myorg:docs  [existing outputs match the cache, left as is]\n\nyarn run v1.22.19\n$ node ./generateDocsSite.js\nDocumentation site generated in /docs\n\n————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n\nNX   Successfully ran target docs for project myorg (31ms)\n\nNx read the output from the cache instead of running the command for 1 out of 1 tasks.\n```\n\n----------------------------------------\n\nTITLE: Installing Solid and Dependencies with npm\nDESCRIPTION: Install SolidJS and related development dependencies using npm. This also adds the @nx/web package for Nx integration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-solid.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm add solid-js\nnpm add -D solid-devtools vite-plugin-solid vite-tsconfig-paths\nnx add @nx/web\n```\n\n----------------------------------------\n\nTITLE: Basic iOS Build Configuration in Nx\nDESCRIPTION: Basic project configuration for iOS builds using the @nx/react-native:build-ios executor.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/build-ios-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"mobile\",\n  //...\n  \"targets\": {\n    //...\n    \"build-ios\": {\n      \"executor\": \"@nx/react-native:build-ios\",\n      \"options\": {}\n    }\n  }\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\nnx run mobile:build-ios\n```\n\n----------------------------------------\n\nTITLE: Configuring CI for Nx Cloud Distribution\nDESCRIPTION: YAML configuration for starting a CI run with Nx Cloud, distributing tasks across 8 linux-medium-js agents.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/intro/connect-to-cloud.md#2025-04-22_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n- name: Start CI run\n  run: 'npx nx-cloud start-ci-run --distribute-on=\"8 linux-medium-js\"'\n```\n\n----------------------------------------\n\nTITLE: Defining Horoscope State Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface for the horoscope state including loading status, error handling, and horoscope data properties.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AdhHoroscope,\n  AdhHoroscopeDay,\n  AdhZodiacSignItem,\n} from '@aztro-daily-horoscope/models';\n\nexport interface HoroscopeState {\n  loadingStatus: 'not loaded' | 'loading' | 'loaded' | 'error';\n  error?: string;\n  zodiacSignItem?: AdhZodiacSignItem;\n  day?: AdhHoroscopeDay;\n  horoscope?: AdhHoroscope;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Affected Tests with Nx\nDESCRIPTION: Command to run tests only for projects that changed in a given PR. This reduces computation by processing only affected projects rather than the entire codebase.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-08-18-helping-the-environment-by-saving-two-centuries-of-compute-time.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx affected:test\n```\n\n----------------------------------------\n\nTITLE: Next.js Build Configuration with Debug Enabled\nDESCRIPTION: This JSON snippet demonstrates how to enable debug mode within the Next.js build configuration in an Nx project.  The `debug: true` setting within the 'development' configuration of the 'build' target causes the build process to generate more verbose output, helpful for debugging.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/build-next-executor-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n    \"build\": {\\n      \"executor\": \"@nx/next:build\",\\n      \"outputs\": [\"{options.outputPath}\"],\\n      \"defaultConfiguration\": \"production\",\\n      \"options\": {\\n        \"outputPath\": \"dist/acme\"\\n      },\\n      \"configurations\": {\\n        \"development\": {\\n          \"outputPath\": \".\",\\n          \"debug\": true\\n        },\\n        \"production\": {}\\n      }\\n    },\n```\n\n----------------------------------------\n\nTITLE: Basic Nx Generate Command Syntax\nDESCRIPTION: The basic syntax for using the Nx generate command with a collection and generator\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/generate.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx generate <collection:generator>\n```\n\n----------------------------------------\n\nTITLE: Executing Unit Tests using Nx with Jest\nDESCRIPTION: This snippet provides the command to run unit tests for the ui-pricing library using Nx. The command utilizes Jest as the testing framework, which is designed for unit testing JavaScript applications. It showcases how to initiate the testing process specific to the library created with Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/ui-pricing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nRun `nx test ui-pricing` to execute the unit tests via [Jest](https://jestjs.io).\n```\n\n----------------------------------------\n\nTITLE: Using Object Syntax for Nx Target Dependencies\nDESCRIPTION: Demonstrates the expanded object syntax for defining target dependencies in Nx. This allows for more detailed configuration, including specifying how parameters should be handled.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      \"dependsOn\": [{ \"dependencies\": true, \"target\": \"build\" }]\n    },\n    \"test\": {\n      \"dependsOn\": [{ \"target\": \"build\" }]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Web file-server with additional options\nDESCRIPTION: This example shows how to pass additional options to the http-server used by the file-server executor. It enables directory listing by passing the '-d' flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/web/docs/file-server-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx serve myapp -d\n```\n\n----------------------------------------\n\nTITLE: Regenerate Native Code with Clean Option\nDESCRIPTION: Configuration to delete and regenerate native folders before applying changes using the clean option\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/prebuild-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"prebuild\": {\n  \"executor\": \"@nx/expo:prebuild\",\n  \"options\": {\n    \"clean\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Command Arguments with the 'args' Option in project.json\nDESCRIPTION: Configuring a build target using the 'args' array option in project.json. This approach allows specifying command arguments as an array of strings or a single string with space-separated arguments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/pass-args-to-commands.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sourceRoot\": \"apps/my-app/src\",\n  \"projectType\": \"application\",\n  \"targets\": {\n    \"build\": {\n      \"options\": {\n        \"args\": [\"--assetsInlineLimit=2048\", \"--assetsDir=static/assets\"]\n        // it also accepts a single string:\n        // \"args\": \"--assetsInlineLimit=2048 --assetsDir=static/assets\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/gradle Package\nDESCRIPTION: Command to add the Nx Gradle plugin to an existing Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/gradle/gradle-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/gradle\n```\n\n----------------------------------------\n\nTITLE: Configuring Owners for Bitbucket in Nx\nDESCRIPTION: This snippet shows the configuration for code ownership in Bitbucket using Nx. It includes options for specifying the format, output path, and patterns for assigning owners to projects or files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/owners/owners-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // Can be set to true instead of an object to accept all defaults\n  \"owners\": {\n    // Options are `github`, `bitbucket` or `gitlab`. (Optional) Defaults to `github`\n    \"format\": \"bitbucket\",\n    // (Optional) Default changes based on format: `.github/CODEOWNERS`, `.bitbucket/CODEOWNERS`, `.gitlab/CODEOWNERS`\n    \"outputPath\": \"CODEOWNERS\",\n    // (Optional)\n    \"patterns\": [\n      {\n        \"description\": \"A description of the rule\",\n        \"owners\": [\"@joelovesrust\"],\n        // specify either projects or files, not both\n        // Can be any project specifier that could be used in `nx run-many`\n        // See https://nx.dev/nx-api/nx/documents/run-many\n        \"projects\": [\"my-rust-app\", \"rust-*\", \"tag:rust\"],\n        // File globs\n        \"files\": [\".github/workflows/**/*\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Story Generation\nDESCRIPTION: Command to generate stories using JavaScript instead of TypeScript, resulting in .stories.js files.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/stories-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react:stories --name=ui --js=true\n```\n\n----------------------------------------\n\nTITLE: GCS Cache Mode Configuration\nDESCRIPTION: Configuration for local and CI cache modes in nx.json, controlling read/write behavior.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/gcs-cache/gcs-cache-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gcs\": {\n    \"localMode\": \"read-only\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a React Library with Nx CLI\nDESCRIPTION: Shows how to use the Nx CLI to generate a new React library for a specific domain area, demonstrating Nx's capability to create modular structures in a React application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nrwl/react:lib checkout --directory=domains/orders/checkout --bundler=none\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Shared FS Cache Plugin\nDESCRIPTION: Command to install the @nx/shared-fs-cache package in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/shared-fs-cache/shared-fs-cache-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/shared-fs-cache\n```\n\n----------------------------------------\n\nTITLE: Importing Shared UI Component in Vue App\nDESCRIPTION: Example of importing the same shared UI component from a library into a Vue application within an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-06-nuxt-js-support-in-nx.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyButton } from '@my-org/my-shared-ui';\n```\n\n----------------------------------------\n\nTITLE: Generating Workspace Library\nDESCRIPTION: Command to generate a workspace library for services using @nrwl/expo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-23-introducing-expo-support-for-nx.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nrwl/expo:library services\n```\n\n----------------------------------------\n\nTITLE: Declaring TypeScript CLIOutput Constant\nDESCRIPTION: Declaration of a constant variable named 'output' with type CLIOutput, likely used for handling command-line interface output in the nx tooling system.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/output.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst output: CLIOutput\n```\n\n----------------------------------------\n\nTITLE: Visualizing Project Structure in Nx (JSON)\nDESCRIPTION: These JSON snippets represent different project structures in Nx, used to illustrate how the number and arrangement of projects affect CI performance gains from using 'nx affected'.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/concepts/reduce-waste.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": \"85fd0561bd88f0bcd8703a9e9369592e2805f390d04982fb2401e700dc9ebc59\",\n  \"projects\": [\n    {\n      \"name\": \"project1\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    }\n  ],\n  \"dependencies\": {\n    \"project1\": [],\n    \"project2\": [],\n    \"project3\": []\n  },\n  \"workspaceLayout\": { \"appsDir\": \"apps\", \"libsDir\": \"libs\" },\n  \"affectedProjectIds\": [\"project1\"],\n  \"focus\": null,\n  \"groupByFolder\": false,\n  \"exclude\": []\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": \"85fd0561bd88f0bcd8703a9e9369592e2805f390d04982fb2401e700dc9ebc59\",\n  \"projects\": [\n    {\n      \"name\": \"project1\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"project2\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"project3\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"project4\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    }\n  ],\n  \"dependencies\": {\n    \"project1\": [],\n    \"project2\": [],\n    \"project3\": [],\n    \"project4\": []\n  },\n  \"workspaceLayout\": { \"appsDir\": \"apps\", \"libsDir\": \"libs\" },\n  \"affectedProjectIds\": [\"project1\"],\n  \"focus\": null,\n  \"groupByFolder\": false,\n  \"exclude\": []\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": \"85fd0561bd88f0bcd8703a9e9369592e2805f390d04982fb2401e700dc9ebc59\",\n  \"projects\": [\n    {\n      \"name\": \"project1\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"project2\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"project3\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    }\n  ],\n  \"dependencies\": {\n    \"project1\": [{ \"source\": \"project1\", \"target\": \"project2\" }],\n    \"project2\": [{ \"source\": \"project2\", \"target\": \"project3\" }],\n    \"project3\": []\n  },\n  \"workspaceLayout\": { \"appsDir\": \"apps\", \"libsDir\": \"libs\" },\n  \"affectedProjectIds\": [],\n  \"focus\": null,\n  \"groupByFolder\": false,\n  \"exclude\": []\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": \"85fd0561bd88f0bcd8703a9e9369592e2805f390d04982fb2401e700dc9ebc59\",\n  \"projects\": [\n    {\n      \"name\": \"project1\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"project2\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"project3\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    }\n  ],\n  \"dependencies\": {\n    \"project1\": [{ \"source\": \"project1\", \"target\": \"project3\" }],\n    \"project2\": [{ \"source\": \"project2\", \"target\": \"project3\" }],\n    \"project3\": []\n  },\n  \"workspaceLayout\": { \"appsDir\": \"apps\", \"libsDir\": \"libs\" },\n  \"affectedProjectIds\": [],\n  \"focus\": null,\n  \"groupByFolder\": false,\n  \"exclude\": []\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": \"85fd0561bd88f0bcd8703a9e9369592e2805f390d04982fb2401e700dc9ebc59\",\n  \"projects\": [\n    {\n      \"name\": \"project1\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"project2\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"project3\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    }\n  ],\n  \"dependencies\": {\n    \"project1\": [],\n    \"project2\": [],\n    \"project3\": []\n  },\n  \"workspaceLayout\": { \"appsDir\": \"apps\", \"libsDir\": \"libs\" },\n  \"affectedProjectIds\": [],\n  \"focus\": null,\n  \"groupByFolder\": false,\n  \"exclude\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Packages on Nx Cloud Agents\nDESCRIPTION: Demonstrates how to install additional Linux packages on Nx Cloud agents using apt. This example installs the GitHub CLI and zip utilities.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nlaunch-templates:\n  my-linux-medium-js:\n    resource-class: 'docker_linux_amd64/medium'\n    image: 'ubuntu22.04-node20.11-v9'\n    init-steps:\n      - name: Install Extras\n        script: |\n          sudo apt install gh unzip zip -y\n```\n\n----------------------------------------\n\nTITLE: Creating Svelte Component with TypeScript\nDESCRIPTION: Svelte component implementation with TypeScript, demonstrating a simple counter functionality.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-svelte.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n  let count: number = 0;\n  const increment = () => {\n    count += 1;\n  };\n</script>\n\n<button on:click={increment}>\n  count is {count}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Running Advent of Code Solutions (Sample Data)\nDESCRIPTION: Commands to execute solutions for day 1 against sample data. Multiple command variations are provided for flexibility.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-11-30-advent-of-code-crystal.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> nx day-1-a-sample\n> nx day-1-sample\n> nx 1-a-sample\n> nx 1-sample\n```\n\n----------------------------------------\n\nTITLE: Connect to Nx Cloud (Nx)\nDESCRIPTION: This command connects the repository to Nx Cloud, enabling remote caching and distributed task execution. It opens a browser window to register the repository and guide the user through the setup process.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n./nx connect\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Nx\nDESCRIPTION: Command to execute unit tests for a specific project in Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-22-unit-testing-expo.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx test <project-name>\n```\n\n----------------------------------------\n\nTITLE: Defining a Deploy Task in Nx Project Configuration\nDESCRIPTION: This JSON snippet defines a `deploy` target within an Nx project's `project.json` file.  It configures the `deploy` task to depend on the `build` task and execute a `netlify deploy` command to deploy the built application. It assumes the netlify CLI is available in the environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/10-affected/content.mdx#2025-04-22_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"{\\n  \\\"targets\\\": {\\n    \\\"deploy\\\": {\\n      \\\"dependsOn\\\": \\\"build\\\",\\n      \\\"command\\\": \\\"netlify deploy --dir=dist/angular-store\\\"\\n    }\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating New React App with Vite in Nx\nDESCRIPTION: Command to create a new Nx workspace with React and Vite bundler configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/vite/vite-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest --preset=react-standalone --bundler=vite\n```\n\n----------------------------------------\n\nTITLE: Registering Nx Powerpack License\nDESCRIPTION: Command to register an Nx Powerpack activation key using npx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-25-introducing-nx-powerpack.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx register <your-activation-key>\n```\n\n----------------------------------------\n\nTITLE: Generating React Application\nDESCRIPTION: Command to generate a new React application using the Nx React plugin\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-29-new-nx-experience.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/react:app apps/myviteapp\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration for React Store\nDESCRIPTION: This TypeScript snippet configures Vite for the React Store application. Specifically, it sets the output directory (outDir) for the build process to './dist'. This configuration is used by Nx to infer the build task and its outputs.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/4-inferred-tasks/content.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  // ...\n  build: {\n    outDir: './dist',\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Renaming Changelog Sections for Commit Types\nDESCRIPTION: Modifies the 'docs' commit type to appear in the changelog under 'Documentation Changes'. This configuration sets the title directly under the changelog property without external dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/customize-conventional-commit-types.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"conventionalCommits\": {\n      \"types\": {\n        ...\n        \"docs\": {\n          ...\n          \"changelog\": {\n            \"title\": \"Documentation Changes\"\n          }\n        },\n        ...\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating React Component Without File Extension\nDESCRIPTION: Generates a React component by specifying the path without the file extension. Nx automatically adds the appropriate extension.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/component-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:component libs/ui/src/my-component\n```\n\n----------------------------------------\n\nTITLE: Updated Output Paths for Cypress E2E Tests in Nx\nDESCRIPTION: This JSON snippet shows the updated output paths for Cypress E2E test videos and screenshots after modifying the configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/8-inferred-tasks/content.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"{workspaceRoot}/apps/dist/cypress/apps/angular-store-e2e/videos-changed\",\n  \"{workspaceRoot}/apps/dist/cypress/apps/angular-store-e2e/screenshots-changed\"\n]\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeScript schema for Nx generator options\nDESCRIPTION: This code defines a TypeScript interface named `GeneratorOptions` to represent the schema for generator options. It includes a required `name` property (string) and an optional `type` property (string). This interface is intended to be used in conjunction with a `schema.json` file that defines the same properties.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GeneratorOptions {\n  name: string;\n  type?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Running e2e Tests for Create Package - Shell\nDESCRIPTION: This shell command executes the end-to-end tests associated with the created plugin, verifying its functionality in a controlled environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/create-install-package.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx e2e my-plugin-e2e\n```\n\n----------------------------------------\n\nTITLE: Updating Angular CLI in devDependencies JSON\nDESCRIPTION: This snippet shows how to update the Angular CLI version from ~13.3.0 to ~19.0.0 within the devDependencies section of a package.json file. The update ensures the development environment uses the latest Angular CLI features. No additional dependencies are required apart from the standard setup for Angular CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-2-0/update-angular-cli.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@angular/cli\": \"~19.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab App Redirect URI for Nx Cloud Authentication\nDESCRIPTION: Demonstrates the format for the authorization callback URL (Redirect URI) when setting up a GitLab app for Nx Cloud authentication. The URL should include the Nx Cloud instance address followed by '/auth-callback' without a trailing backslash.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/enterprise/single-tenant/auth-gitlab.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[your-nx-cloud-url]/auth-callback\n\n# for example\nhttps://my.nx-enterprise.url:8080/auth-callback\n```\n\n----------------------------------------\n\nTITLE: Install Tailwind Dependencies with pnpm\nDESCRIPTION: This snippet shows how to install the required Tailwind dependencies using pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-in-react.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm add -D tailwindcss@latest postcss@latest autoprefixer@latest\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions workflow with Nx Cloud distribution\nDESCRIPTION: This YAML snippet shows a GitHub Actions workflow configuration that enables distributed task execution using Nx Cloud.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-17-modern-angular-testing-with-nx.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\n# ...\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      # ...\n      - run: npx nx-cloud start-ci-run --distribute-on=\"8 linux-medium-js\" --stop-agents-after=\"e2e-ci\"\n      # ...\n      - run: npx nx affected -t test e2e-ci\n```\n\n----------------------------------------\n\nTITLE: Customizing Webpack Configuration in Nx\nDESCRIPTION: Example of creating a custom webpack configuration file that extends the default Nx React webpack setup while preserving original behavior.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-29-the-react-cli-you-always-wanted-but-didnt-know-about.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst fromNrwlReact = require('@nrwl/react/plugins/webpack');\nfunction getWebpackConfig(config) {\n  // invoke the Nrwl specific config to preserve the original\n  // behavior\n  config = fromNrwlReact(config); // add your own customizations HERE return config;\n}\nmodule.exports = getWebpackConfig;\n```\n\n----------------------------------------\n\nTITLE: Generating a Library with Rollup Bundler\nDESCRIPTION: Creates a buildable library using Rollup as the bundler, defaulting to SWC as the compiler. Configuration can be changed to use babel in project.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/library-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/js:lib libs/mylib --bundler=rollup\n```\n\n----------------------------------------\n\nTITLE: Importing a Library Component in Remix Route\nDESCRIPTION: Shows how to import and use a component from a shared library in a Remix route file. This demonstrates the modular architecture enabled by Nx libraries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/remix.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Login } from '@acme/login';\n\nexport default function Index() {\n  return (\n    <div>\n      <Login />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Tasks in Parallel with Nx\nDESCRIPTION: Shows how to run multiple tasks in parallel using the 'run-many' command in Nx, which allows executing the same task across multiple projects simultaneously.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/9-run-many/content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many -t test\n```\n\n----------------------------------------\n\nTITLE: Angular Proxy Configuration\nDESCRIPTION: Proxy configuration for handling CORS in Angular applications during development.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-11-14-handling-cors.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/api\": {\n    \"target\": \"http://localhost:3333\",\n    \"secure\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Module Federation Host Application\nDESCRIPTION: Command to build a host application for production. This creates the optimized bundle for deployment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/creating-a-host.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx build shell\n```\n\n----------------------------------------\n\nTITLE: Installing @nx-dotnet/core plugin with yarn\nDESCRIPTION: This command adds the @nx-dotnet/core plugin as a development dependency using yarn. This plugin is required to manage .NET projects within an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-dotnet.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D @nx-dotnet/core\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Plugin for Nx\nDESCRIPTION: Shows the command to install the new Playwright plugin for Nx using npm. This plugin adds support for Playwright as an e2e testing option in Nx workspaces.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-09-06-nx-16-8-release.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/playwright\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Webpack with Remote URLs for Module Federation\nDESCRIPTION: Production webpack configuration for Module Federation that specifies the URLs for remote applications. This setup is needed for production deployment where remotes are served from specific URLs.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/faster-builds.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withModuleFederation } from '@nx/react/module-federation';\nimport moduleFederationConfig from './module-federation.config';\n\nexport default withModuleFederation({\n  ...moduleFederationConfig,\n  remotes: [\n    ['shop', 'http://localhost:3000/shop'],\n    ['cart', 'http://localhost:3000/cart'],\n    ['about', 'http://localhost:3000/about'],\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sync Generators for Nx Targets\nDESCRIPTION: Specifies a sync generator to run before a target is executed. This ensures that files are in the correct state before the task runs, which is useful for keeping configuration files up to date with the project graph.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      \"syncGenerators\": [\"some-plugin:my-sync-generator\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Nx Target Defaults with MF Environment Variable\nDESCRIPTION: Enhanced configuration adding NX_MF_DEV_REMOTES environment variable to inputs for Module Federation support along with cache and build dependencies\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/src/migrations/update-18-0-0/add-mf-env-var-to-target-defaults.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"@nx/webpack:webpack\": {\n      \"cache\": true,\n      \"dependsOn\": [\"^build\"],\n      \"inputs\": [\n        \"^build\",\n        {\n          \"env\": \"NX_MF_DEV_REMOTES\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Global Nx Installation with Yarn (2+)\nDESCRIPTION: This command checks for the Nx installation in a Yarn 2+ environment. It helps users confirm the presence of the Nx package globally.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/installation/update-global-installation.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx list nx\n```\n\n----------------------------------------\n\nTITLE: Basic React Native Server Configuration in project.json\nDESCRIPTION: Basic configuration for starting a React Native server using Nx executor with a specified port.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/start-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"mobile\",\n  //...\n  \"targets\": {\n    //...\n    \"start\": {\n      \"executor\": \"@nx/react-native:start\",\n      \"options\": {\n        \"port\": 8081\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Module Federation with Rspack\nDESCRIPTION: Example configuration for setting up server-side rendering with module federation in an Rspack config file using NxModuleFederationPlugin and NxModuleFederationSSRDevServerPlugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/module-federation/documents/nx-module-federation-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  NxModuleFederationPlugin,\n  NxModuleFederationSSRDevServerPlugin,\n} from '@nx/module-federation/rspack';\nimport config from './module-federation.config';\n\nexport default {\n  ...otherRspackConfigOptions,\n  plugins: [\n    new NxModuleFederationPlugin({\n      config,\n      isServer: true,\n    }),\n    new NxModuleFederationSSRDevServerPlugin({\n      config,\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Package Manager Configuration in package.json\nDESCRIPTION: JSON configuration specifying the Yarn version in package.json\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/yarn-pnp.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"packageManager\": \"yarn@3.6.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Agents with Percentage Ranges (YAML)\nDESCRIPTION: This snippet shows how to configure dynamic agents with percentage ranges. Each changeset defines the number and type of agents to use based on the percentage of affected projects in the PR. Nx Cloud calculates the relationship between the number of affected projects and the total number of projects in the workspace to determine the size of a PR.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/features/dynamic-agents.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndistribute-on:\n  small-changeset: 3 linux-medium-js # Distribute on small if 1-25% of projects affected in PR\n  medium-changeset: 6 linux-medium-js # Distribute on medium if 26-50% of projects affected in PR\n  large-changeset: 10 linux-medium-js # Distribute on large if 51-75% of projects affected in PR\n  extra-large-changeset: 15 linux-medium-js # Distribute on extra-large if 76-100% of projects affected in PR\n```\n\n----------------------------------------\n\nTITLE: Running a React Nx Application\nDESCRIPTION: Command to start the development server for a React application in an Nx workspace. This serves the application at http://localhost:4200/.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating .env File for Environment Variables\nDESCRIPTION: Example .env file content for defining environment variables that can be accessed by the custom ESBuild plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/use-environment-variables-in-angular.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nMY_ORG_API_URL=http://localhost:3333\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Nx Reset Command\nDESCRIPTION: The basic command to reset Nx, clearing cached artifacts and metadata about the workspace and shutting down the Nx Daemon.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/reset.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx reset\n```\n\n----------------------------------------\n\nTITLE: Setting Local Cache Mode in Nx Configuration\nDESCRIPTION: This JSONC snippet demonstrates how to set the local cache mode in the Nx configuration file. This can be used to disable write access to the remote cache for local development.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/azure-cache/azure-cache-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"azure\": {\n    // ...\n    \"localMode\": \"read-only\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nx Release Version Subcommand\nDESCRIPTION: Shows usage of the version subcommand which creates a version and release for one or more applications and libraries. Accepts an optional version specifier parameter.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/release.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx release version [specifier]\n```\n\n----------------------------------------\n\nTITLE: Library Generator Implementation\nDESCRIPTION: TypeScript implementation of a generator that creates a library with a README file, including project configuration and file generation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/intro.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function libraryWithReadmeGenerator(\n  tree: Tree,\n  options: LibraryWithReadmeGeneratorSchema\n) {\n  const projectRoot = `libs/${options.name}`;\n  addProjectConfiguration(tree, options.name, {\n    root: projectRoot,\n    projectType: 'library',\n    sourceRoot: `${projectRoot}/src`,\n    targets: {},\n  });\n  generateFiles(tree, path.join(__dirname, 'files'), projectRoot, options);\n  await formatFiles(tree);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Root Reducer for Redux Store in TypeScript\nDESCRIPTION: This snippet creates the root reducer for the Redux store using combineReducers from @reduxjs/toolkit, combining the 'likes' reducer.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-08-state-management.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { combineReducers } from '@reduxjs/toolkit';\n\nimport { likesReducer } from '../likes/likes.slice';\nimport { RootState } from './root-state.interface';\n\nexport const createRootReducer = combineReducers<RootState>({\n  likes: likesReducer,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub Repository Links in Nx Documentation\nDESCRIPTION: This component creates a button that links to a GitHub repository, improving discoverability of related code examples.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n{% github-repository url=\"https://github.com/nrwl/nx-examples\" /%}\n```\n\n----------------------------------------\n\nTITLE: Installing Nx GCS Cache Plugin\nDESCRIPTION: Command to install the @nx/gcs-cache package for Nx workspaces\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/gcs-cache/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/gcs-cache\n```\n\n----------------------------------------\n\nTITLE: Installing Nx esbuild Plugin (Nx 18+)\nDESCRIPTION: Command to install the Nx esbuild plugin in Nx 18 or later versions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/esbuild/esbuild-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/esbuild\n```\n\n----------------------------------------\n\nTITLE: Creating a Solid Library Component\nDESCRIPTION: Define a simple component in a library that can be used by the Solid application. This component takes a name prop and renders a greeting.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-solid.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport function MyLibComponent(props: { name: string }) {\n  return <h1>Hello {props.name} from MyLib</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Configuration for lib2 after targetDefaults\nDESCRIPTION: The reduced project.json for lib2 after moving common configuration to targetDefaults, only overriding the testTimeout option for the test target.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/reduce-repetitive-configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"lib2\",\n  \"$schema\": \"../../node_modules/nx/schemas/project-schema.json\",\n  \"sourceRoot\": \"libs/lib2/src\",\n  \"projectType\": \"library\",\n  \"targets\": {\n    \"build\": {},\n    \"lint\": {},\n    \"test\": {\n      \"options\": {\n        \"testTimeout\": 10000\n      }\n    }\n  },\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: AST Manipulation for Type Replacement in Nx\nDESCRIPTION: This code snippet demonstrates how to perform AST (Abstract Syntax Tree) manipulation to replace all instances of `Array<something>` with `something[]`. It uses the `@phenomnomnominal/tsquery` library to query and modify the AST. It also uses functions from `@nx/devkit` to read and write files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/modifying-files.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readProjectConfiguration, Tree } from '@nx/devkit';\nimport { tsquery } from '@phenomnomnominal/tsquery';\nimport { TypeReferenceNode } from 'typescript';\n\n/**\n * Run the callback on all files inside the specified path\n */\nfunction visitAllFiles(\n  tree: Tree,\n  path: string,\n  callback: (filePath: string) => void\n) {\n  tree.children(path).forEach((fileName) => {\n    const filePath = `${path}/${fileName}`;\n    if (!tree.isFile(filePath)) {\n      visitAllFiles(tree, filePath, callback);\n    } else {\n      callback(filePath);\n    }\n  });\n}\n\nexport default function (tree: Tree, schema: any) {\n  const sourceRoot = readProjectConfiguration(tree, schema.name).sourceRoot;\n  visitAllFiles(tree, sourceRoot, (filePath) => {\n    const fileEntry = tree.read(filePath);\n    const contents = fileEntry.toString();\n\n    // Check each `TypeReference` node to see if we need to replace it\n    const newContents = tsquery.replace(contents, 'TypeReference', (node) => {\n      const trNode = node as TypeReferenceNode;\n      if (trNode.typeName.getText() === 'Array') {\n        const typeArgument = trNode.typeArguments[0];\n        return `${typeArgument.getText()}[]`;\n      }\n      // return undefined does not replace anything\n    });\n\n    // only write the file if something has changed\n    if (newContents !== contents) {\n      tree.write(filePath, newContents);\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Web Application with Tags\nDESCRIPTION: Creates a web application with specific tags for linting purposes. Tags help in organizing and categorizing applications within the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/web/docs/application-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/web:app apps/my-app --tags=scope:admin,type:ui\n```\n\n----------------------------------------\n\nTITLE: Defining Executor Schema\nDESCRIPTION: This JSON schema defines the options that can be passed to the executor.  It describes a single string option called `textToEcho` which represents the text to be echoed by the executor.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/local-executors.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://json-schema.org/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"textToEcho\": {\n      \"type\": \"string\",\n      \"description\": \"Text To Echo\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Executor for Package.json and Lock File Generation\nDESCRIPTION: A TypeScript implementation of a custom Nx executor that generates package.json and lock files as part of the build process. It uses Nx utilities to create and write the files to the specified output path.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/ci-deployment.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from './schema';\nimport { createPackageJson, createLockFile, getLockFileName } from '@nx/js';\nimport { writeFileSync } from 'fs';\nimport {\n  detectPackageManager,\n  ExecutorContext,\n  writeJsonFile,\n} from '@nx/devkit';\n\nexport default async function buildExecutor(\n  options: Schema,\n  context: ExecutorContext\n) {\n  // ...your executor code\n  const packageManager = detectPackageManager();\n\n  const packageJson = createPackageJson(\n    context.projectName,\n    context.projectGraph,\n    {\n      root: context.root,\n      isProduction: true, // We want to strip any non-prod dependencies\n    }\n  );\n\n  // do any additional manipulations to \"package.json\" here\n\n  const lockFile = createLockFile(\n    packageJson,\n    context.projectGraph,\n    packageManager\n  );\n  const lockFileName = getLockFileName(packageManager);\n  writeJsonFile(`${options.outputPath}/package.json`, packageJson);\n  writeFileSync(`${options.outputPath}/${lockFileName}`, lockFile, {\n    encoding: 'utf-8',\n  });\n\n  // any subsequent executor code\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rspack for Angular i18n\nDESCRIPTION: Add polyfills and localization configuration to the Rspack configuration file. Includes zone.js and Angular localize initialization, with localization enabled in production mode.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/internationalization.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default createConfig(\n  {\n    options: {\n      root: __dirname,\n      polyfills: [\n        'zone.js',\n        '@angular/localize/init',\n      ],\n      ...,\n    },\n  },\n  {\n    production: {\n        options: {\n            localize: true,\n        },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit Dependencies for Storybook Host\nDESCRIPTION: JSON configuration that manually specifies the implicit dependencies of the Storybook host project. This ensures Nx understands which projects affect the Storybook build.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/one-storybook-for-all.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../node_modules/nx/schemas/project-schema.json\",\n  \"sourceRoot\": \"libs/storybook-host/src\",\n  \"projectType\": \"library\",\n  \"tags\": [\"type:storybook\"],\n  \"implicitDependencies\": [\n    \"admin-ui-footer\",\n    \"admin-ui-header\",\n    \"client-ui-footer\",\n    \"client-ui-header\",\n    \"shared-ui-button\",\n    \"shared-ui-main\",\n    \"shared-ui-notification\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying NX Invalid Cache Directory Error Message\nDESCRIPTION: Error message shown when Nx detects a local cache artifact that wasn't generated on the current machine, indicating potential security issues with cache restoration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/unknown-local-cache.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNX Invalid Cache Directory for Task \"myapp:build\"\n\nThe local cache artifact in \".nx/cache/nx/786524780459028195\" was not generated on this machine.\nAs a result, the cache's content integrity cannot be confirmed, which may make cache restoration potentially unsafe.\nIf your machine ID has changed since the artifact was cached, run \"nx reset\" to fix this issue.\nRead about the error and how to address it here: https://nx.dev/troubleshooting/unknown-local-cache\n```\n\n----------------------------------------\n\nTITLE: Creating a Node.js Library\nDESCRIPTION: This command uses the Nx CLI to generate a new Node.js library within the specified directory. Replace `libs/my-new-lib` with the desired path and name for the library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/node/node-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/node:lib libs/my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Default Storybook Configuration for Angular Projects\nDESCRIPTION: This snippet shows the default configuration for Angular projects using Storybook. It uses the native @storybook/angular:build-storybook executor and includes options for output directory and browser target.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/build-storybook-executor-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build-storybook\": {\n    \"executor\": \"@storybook/angular:build-storybook\",\n    \"outputs\": [\"{options.outputDir}\"],\n    \"options\": {\n      \"outputDir\": \"dist/storybook/ngapp\",\n      \"configDir\": \"apps/ngapp/.storybook\",\n      \"browserTarget\": \"ngapp:build\",\n      \"compodoc\": false\n    },\n    \"configurations\": {\n      \"ci\": {\n        \"quiet\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive package.json Configuration with Orchestration and Caching\nDESCRIPTION: A more detailed package.json example showing how to configure Nx with advanced features including namedInputs, dependsOn, and outputs for optimizing task execution and caching.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"mylib\",\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"build\": \"tsc -p tsconfig.lib.json\", // the actual command here is arbitrary\n    \"ignored\": \"exit 1\"\n  },\n  \"nx\": {\n    \"namedInputs\": {\n      \"default\": [\"{projectRoot}/**/*\"],\n      \"production\": [\"!{projectRoot}/**/*.spec.tsx\"]\n    },\n    \"targets\": {\n      \"build\": {\n        \"inputs\": [\"production\", \"^production\"],\n        \"outputs\": [\"{workspaceRoot}/dist/libs/mylib\"],\n        \"dependsOn\": [\"^build\"]\n      },\n      \"test\": {\n        \"inputs\": [\"default\", \"^production\"],\n        \"outputs\": [],\n        \"dependsOn\": [\"build\"]\n      }\n    },\n    \"includedScripts\": [\"test\", \"build\"] // If you want to limit the scripts Nx sees, you can specify a list here.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Component without File Extension using Nx CLI\nDESCRIPTION: This code snippet demonstrates the creation of a component without including the file extension in the command. The Nx CLI handles the default file extension automatically. It simplifies the command by omitting the file type, while the CLI ensures the correct files are generated.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/component-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g component apps/my-app/src/app/my-component/my-component\n```\n\n----------------------------------------\n\nTITLE: Generating an Expo App in Nx\nDESCRIPTION: Command to generate a new Expo application in an Nx workspace. This creates the necessary configuration and scaffolding for an Expo app named 'cats'.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-24-step-by-step-guide-to-creating-an-expo-monorepo-with-nx.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nx/expo:app cats\n```\n\n----------------------------------------\n\nTITLE: CircleCI Configuration for Distributed Task Execution in Nx Cloud\nDESCRIPTION: Enhanced CircleCI configuration that implements Nx Cloud's Distributed Task Execution across multiple agents. It adds agent jobs, configures the main job to use distributed execution, and includes steps to manage the agent lifecycle.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-06-15-distributing-ci-binning-and-distributed-task-execution.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  main:\n    environment:\n      NX_CLOUD_DISTRIBUTED_EXECUTION: \"true\"\n    steps:\n      - setup\n      - run: npx nx affected --target=test --parallel --maxParallel=3\n      - run: npx nx affected --target=lint --parallel --maxParallel=3\n      - run: npx nx affected --target=e2e\n      - run: npx nx affected --target=build\n      - run: npx nx-cloud stop-all-agents\n  agent:\n    steps:\n      - setup\n      - run:\n          name: Agent\n          command: npx nx-cloud start-agent\nworkflows:\n  PR:\n    jobs:\n      - agent\n        name: agent1\n      - agent\n        name: agent2\n      - agent\n        name: agent3\n      - main\n```\n\n----------------------------------------\n\nTITLE: PnP Configuration in .yarnrc.yml\nDESCRIPTION: YAML configuration for enabling PnP in .yarnrc.yml\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/yarn-pnp.md#2025-04-22_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nnodeLinker: pnp\n```\n\n----------------------------------------\n\nTITLE: Documenting Angular Component Inputs with JSDoc Comments\nDESCRIPTION: Example showing how to add JSDoc comments to an Angular component's @Input property to generate documentation in Compodoc that will be displayed in Storybook.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/angular-storybook-compodoc.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n```\n\n----------------------------------------\n\nTITLE: Generating a React Library with Nx\nDESCRIPTION: Illustrates the command to generate a new React library using Nx in the 'libs' directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/cli/generate.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/react:library libs/mylibrary\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Vite Plugin in nx.json\nDESCRIPTION: JSON configuration for @nx/vite plugin in nx.json, defining custom target names for various Vite operations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/vite/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/vite/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"build\",\n        \"previewTargetName\": \"preview\",\n        \"testTargetName\": \"test\",\n        \"serveTargetName\": \"serve\",\n        \"serveStaticTargetName\": \"serve-static\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Targets for Cypress Component Testing\nDESCRIPTION: Commands demonstrating how to specify custom build targets when setting up Cypress component testing for React and Angular projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/cypress/cypress-component-testing.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:cypress-component-configuration --project=your-project --build-target=my-react-app:build\n\nnx g @nx/angular:cypress-component-configuration --project=your-project --build-target=my-ng-app:build\n```\n\n----------------------------------------\n\nTITLE: Installing Angular plugin for Nx\nDESCRIPTION: This command adds the @nx/angular plugin to the Nx workspace. It's important to ensure the plugin version matches the Nx version in the repository.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation-with-ssr.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx add @nx/angular\n```\n\n----------------------------------------\n\nTITLE: Updating HTML Template for Tailwind CSS Classes\nDESCRIPTION: This HTML snippet shows the updated card component template using custom CSS classes that incorporate Tailwind CSS styles.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"card\">\n  <div class=\"card-title\">{{ title }}</div>\n  <p class=\"card-content\">\n    <ng-content></ng-content>\n  </p>\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running Nx Library Tests with Vitest\nDESCRIPTION: Command template for executing unit tests in an Nx library using the Vitest test runner. Uses a template variable <%= name %> that gets replaced with the actual library name during project generation.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/src/generators/library/files/vite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx test <%= name %>\n```\n\n----------------------------------------\n\nTITLE: Building React Projects in Nx\nDESCRIPTION: Commands for building React applications and libraries, including a local server command for testing built applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react/documents/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-new-app\n\nnx build my-new-lib\n\nnpx http-server dist/apps/my-new-app\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration\nDESCRIPTION: TypeScript compiler configuration for the shared UI library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"allowJs\": true,\n    \"esModuleInterop\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"module\": \"commonjs\",\n    \"outDir\": \"./dist\"\n  },\n  \"include\": [\".\"],\n  \"exclude\": [\"dist\", \"node_modules\", \"**/*.spec.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Nx Agent Launch Template Configuration\nDESCRIPTION: A comprehensive YAML configuration demonstrating a full launch template setup with common initialization steps, multiple resource classes, and specialized templates for different environments including JavaScript and Rust.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ncommon-init-steps: &common-init-steps\n  - name: Checkout\n    # using a reusable step in an external GitHub repo,\n    # this step is provided by Nx Cloud: https://github.com/nrwl/nx-cloud-workflows/tree/main/workflow-steps\n    uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/checkout/main.yaml'\n  # group these steps together as they related (it doesn't change anything functionally, but it helps with organising your steps as they will be collapsed together in the UI)\n  - group-name: Restore Cache\n    steps:\n      - name: Restore Node Modules Cache\n        uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/cache/main.yaml'\n        # the cache step requires configuration via env vars\n        # https://github.com/nrwl/nx-cloud-workflows/tree/main/workflow-steps/cache#options\n        inputs:\n          key: 'package-lock.json|yarn.lock|pnpm-lock.yaml'\n          paths: |\n            ~/.npm\n            # or ~/.cache/yarn\n            # or .pnpm-store\n          base-branch: 'main'\n      - name: Restore Browser Binary Cache\n        uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/cache/main.yaml'\n        inputs:\n          key: 'package-lock.json|yarn.lock|pnpm-lock.yaml|\"browsers\"'\n          paths: |\n            '~/.cache/Cypress'\n          base-branch: 'main'\n  - name: Install Node Modules\n    uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/install-node-modules/main.yaml'\n  - name: Install Browsers (if needed)\n    uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/install-browsers/main.yaml'\n    # You can also run a custom script to configure various things on the agent machine\n  - name: Run a custom script\n    script: |\n      git config --global user.email test@test.com\n      git config --global user.name \"Test Test\"\n  # You can also set any other env vars to be passed to the following steps\n  # by setting their value in the `$NX_CLOUD_ENV` file.\n  # Most commonly for redefining PATH for further steps\n  - name: Setting env\n    script: |\n      # Update PATH with custom value\n      echo \"PATH=$HOME/my-folder:$PATH\" >> $NX_CLOUD_ENV\n  - name: Print path from previous step\n    # will include my-folder\n    script: echo $PATH\n  - name: Define env var for a step\n    env:\n      MY_ENV_VAR: 'env-var-for-step'\n    # will print env-var-for-step\n    script: echo $MY_ENV_VAR\n  # after you're last step Nx Agents will start accepting tasks to process\n  # no need to manually start up the agent yourself\n\nlaunch-templates:\n  # Custom template name, the name is referenced via --distribute-on=\"3 my-linux-medium-js\"\n  # You can define as many templates as you need, commonly used to make different sizes or toolchains depending on your workspace needs\n  my-linux-medium-js:\n    # see the available resource list below\n    resource-class: 'docker_linux_amd64/medium'\n    # see the available image list below\n    image: 'ubuntu22.04-node20.11-v9'\n    # Define environment variables shared among all steps\n    env:\n      MY_ENV_VAR: shared\n      # list out steps to run on the agent before accepting tasks\n      # the agent will need a copy of the source code and dependencies installed\n      # note we are using yaml anchors te reduce duplication with the below launch-template (they have the same init-steps)\n    init-steps: *common-init-steps\n\n  # another template which does the same as above, but with a large resource class\n  # You're not required to define a template for every resource class, only define what you need!\n  my-linux-large-js:\n    resource-class: 'docker_linux_amd64/large'\n    image: 'ubuntu22.04-node20.11-v9'\n    env:\n      MY_ENV_VAR: shared\n      # note we are using yaml anchors te reduce duplication with the above launch-template (they have the same init-steps)\n    init-steps: *common-init-steps\n\n  # template that installs rust\n  my-linux-rust-large:\n    resource-class: 'docker_linux_amd64/large'\n    image: 'ubuntu22.04-node20.11-v9'\n    init-steps:\n      - name: Checkout\n        uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/checkout/main.yaml'\n      - name: Restore Node Modules Cache\n        uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/cache/main.yaml'\n        inputs:\n          key: 'package-lock.json|yarn.lock|pnpm-lock.yaml'\n          paths: |\n            ~/.npm\n            # or ~/.cache/yarn\n            # or .pnpm-store\n          base-branch: 'main'\n      - name: Install Node Modules\n        uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/install-node-modules/main.yaml'\n      - name: Install Rust\n        script: |\n          curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh -s -- -y\n          source \"$HOME/.cargo/env\"\n          rustup toolchain install 1.70.0\n          # persist cargo bin into PATH\n          echo \"PATH=$HOME/.cargo/bin:$PATH\" >> $NX_CLOUD_ENV\n```\n\n----------------------------------------\n\nTITLE: Configuring End-to-End Encryption for Nx >= 17 in JSON\nDESCRIPTION: This snippet shows how to enable end-to-end encryption for Nx Cloud in nx.json for Nx versions 17 and above by setting the 'nxCloudEncryptionKey' property with a sample value.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/config.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nxCloudEncryptionKey\": \"cheddar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Remix Application\nDESCRIPTION: Command to build a Remix application in production mode using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/remix/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx build myapp\n```\n\n----------------------------------------\n\nTITLE: Show Project Details in Nx\nDESCRIPTION: This command displays the details of a specific project, including its inferred tasks. It helps understand how Nx has configured the project based on its configuration files.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/4-inferred-tasks/content.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx show project @react-monorepo/react-store\n```\n\n----------------------------------------\n\nTITLE: Configuring Deploy Functions Target in Nx Project\nDESCRIPTION: JSON configuration for the 'deploy-functions' target in project.json, which uses SAM CLI to build and deploy AWS Lambda functions with guided setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/node-aws-lambda.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-functions\",\n  ...\n  \"targets\": {\n    ...\n    \"deploy-functions\": {\n      \"command\": \"sam build && sam deploy --guided\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nx Run Command Syntax\nDESCRIPTION: Shows the basic syntax pattern for running project targets with optional configuration using the Nx CLI run command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx run [project][:target][:configuration] [_..]\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests\nDESCRIPTION: Command to run E2E tests for applications using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/web/documents/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx e2e my-new-app-e2e\n```\n\n----------------------------------------\n\nTITLE: Installing Nx esbuild Plugin (Nx 18+)\nDESCRIPTION: Command to install the @nx/esbuild plugin in Nx 18+ workspaces.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/esbuild/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/esbuild\n```\n\n----------------------------------------\n\nTITLE: Project Structure of an Nx Angular Application\nDESCRIPTION: Directory structure of an Nx single-project workspace for Angular, showing the src folder containing application code and Nx configuration files like nx.json and project.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/nx-and-angular-cli.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n└─ myngapp\n   ├─ ...\n   ├─ src\n   │  ├─ app\n   │  │  ├─ app.component.css\n   │  │  ├─ app.component.html\n   │  │  ├─ app.component.spec.ts\n   │  │  ├─ app.component.ts\n   │  │  └─ app.module.ts\n   │  ├─ assets\n   │  ├─ favicon.ico\n   │  ├─ index.html\n   │  ├─ main.ts\n   │  └─ styles.css\n   ├─ nx.json\n   ├─ package.json\n   ├─ project.json\n   ├─ ...\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for React Store\nDESCRIPTION: This command starts the development server for the 'react-store' project in the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/templates/react-monorepo/lesson-2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx serve react-store\n```\n\n----------------------------------------\n\nTITLE: Using Nx Library in Next.js Application\nDESCRIPTION: Example of importing and using an Nx library in a Next.js application component.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/next/documents/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyNewLib } from '@<your nx workspace name>/my-new-lib';\n\nexport function Index() {\n  return (\n    <MyNewLib>\n      <p>The main content</p>\n    </MyNewLib>\n  );\n}\n\nexport default Index;\n```\n\n----------------------------------------\n\nTITLE: Save Task Graph to File\nDESCRIPTION: Saving the task graph to a JSON output file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/affected.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t=build --graph=output.json\n```\n\n----------------------------------------\n\nTITLE: Publishing Namespace for Create Package - Shell\nDESCRIPTION: These commands are used to build and publish the packages to npm, allowing them to be testable and usable in an npm environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/create-install-package.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many --targets build\nnpx nx release version 1.0.0\nnpx nx release publish --tag latest\n```\n\n----------------------------------------\n\nTITLE: Basic GCS Cache Configuration\nDESCRIPTION: Basic configuration for the Google Cloud Storage cache in nx.json, specifying the bucket name.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/gcs-cache/gcs-cache-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gcs\": {\n    \"bucket\": \"my-bucket\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Workspace in Create Package - TypeScript\nDESCRIPTION: This TypeScript code snippet creates a new workspace using the create-nx-workspace function, retrieving the version from the plugin's package.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/create-install-package.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n#!/usr/bin/env node\n\nimport { createWorkspace } from 'create-nx-workspace';\n\nasync function main() {\n  const name = process.argv[2]; // TODO: use libraries like yargs or enquirer to set your workspace name\n  if (!name) {\n    throw new Error('Please provide a name for the workspace');\n  }\n\n  console.log(`Creating the workspace: ${name}`);\n\n  // This assumes \"my-plugin\" and \"create-my-plugin\" are at the same version\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const presetVersion = require('../package.json').version;\n\n  // TODO: update below to customize the workspace\n  const { directory } = await createWorkspace(`my-plugin@${presetVersion}`, {\n    name,\n    nxCloud: 'skip',\n    packageManager: 'npm',\n  });\n\n  console.log(`Successfully created the workspace: ${directory}.`);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Adding Target Metadata in JSONC\nDESCRIPTION: This snippet shows how to add metadata to a target, such as providing a description for a 'build' target in the project.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_16\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      \"metadata\": {\n        \"description\": \"Build the application for production\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Module Federation Dev Server in Rspack\nDESCRIPTION: Implementation example showing how to add the NxModuleFederationDevServerPlugin to an Rspack configuration for client-side rendering applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/module-federation/documents/nx-module-federation-dev-server-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NxModuleFederationDevServerPlugin } from '@nx/module-federation/rspack';\nimport config from './module-federation.config';\n\nexport default {\n  ...otherRspackConfigOptions,\n  plugins: [\n    new NxModuleFederationDevServerPlugin({\n      config,\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Nx Affected Command\nDESCRIPTION: Basic usage of the nx affected command to run targets for affected projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/affected.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx affected\n```\n\n----------------------------------------\n\nTITLE: Basic Storybook Configuration Generator Command\nDESCRIPTION: Basic command to generate Storybook configuration for a React Native project using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/storybook-configuration-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react-native:storybook-configuration project-name\n```\n\n----------------------------------------\n\nTITLE: Logging into Custom Nx Cloud Instance with CLI\nDESCRIPTION: Command to log into a custom instance of Nx Cloud using the nx-cloud CLI. This is used when accessing a self-hosted Enterprise instance or an alternative managed instance.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/nx-cloud-cli.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx-cloud login https://nx-cloud.my-domain.app\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/next with npm\nDESCRIPTION: This command installs the `@nx/next` package as a development dependency using npm. It's an alternative installation method for Nx versions prior to v18.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"npm add -D @nx/next\"\n```\n\n----------------------------------------\n\nTITLE: Running Android E2E Tests (Inferred Tasks)\nDESCRIPTION: This command executes end-to-end tests for the React Native application's 'mobile-e2e' project on an Android emulator in debug configuration. It uses the Nx CLI with the `test` target and passes the configuration to Detox. Nx infers the task based on the project setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-native.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nnpx nx test mobile-e2e -- --configuration=\"android.emu.debug\"\n```\n\n----------------------------------------\n\nTITLE: esbuild Plugin Example with Options (plugin2.js)\nDESCRIPTION: This code shows an example of an esbuild plugin that accepts options.  The plugin function takes an options object (in this case `someOption`) and returns a plugin object with a name and a setup function. The setup function uses the provided option to define a constant `PLUGIN2_TEXT`.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/browser-esbuild-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction plugin2({ someOption }) {\n  return {\n    name: 'plugin2',\n    setup(build) {\n      const options = build.initialOptions;\n      options.define.PLUGIN2_TEXT = JSON.stringify(someOption);\n    },\n  };\n}\n\nmodule.exports = plugin2;\n```\n\n----------------------------------------\n\nTITLE: Creating a Loader Function in a Library\nDESCRIPTION: Defines a route loader function in a shared library. This loader fetches data and returns it as JSON for use in a Remix route.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/remix.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { json, LoaderFunctionArgs } from '@remix-run/node';\n\nexport const adminLoader = async ({ request }: LoaderFunctionArgs) => {\n  return json({\n    message: 'Hello, world!',\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Running dev server for Angular app with Nx\nDESCRIPTION: Command to start the development server for the Angular application named 'angular-store' using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/2-use-preset/_solution/angular-monorepo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx serve angular-store\n```\n\n----------------------------------------\n\nTITLE: Running Nx Migrations\nDESCRIPTION: Command to execute any necessary migrations after updating Nx dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-22-nx-15-4-vite-4-support-a-new-nx-watch-command-and-more.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Mode for iOS Build\nDESCRIPTION: This JSON snippet shows how to configure the 'run-ios' target to build the app in Release mode. The 'mode' option is set to 'Release' in the options object.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/run-ios-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"run-ios\": {\n      \"executor\": \"@nx/react-native:run-ios\",\n      \"options\": {\n        \"mode\": \"Release\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Building for Android\nDESCRIPTION: Command to build the app for Android platform\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react-native/documents/overview.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnx build-android <your app name>\n```\n\n----------------------------------------\n\nTITLE: Manual DTE Assignment Rules Configuration in YAML\nDESCRIPTION: This YAML code sets up assignment rules for manual distributed task execution (DTE) using different agent types with specified parallelism values. It emphasizes the importance of matching agent types with the 'run-on' property in task distribution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/assignment-rules.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nassignment-rules:\n  - projects:\n      - app1\n    targets:\n      - build\n    configurations:\n      - production\n    run-on:\n      - agent: linux-medium\n        parallelism: 5\n      - agent: linux-large\n\n  - targets:\n      - lint\n    runs-on:\n      - agent: linux-medium\n\n  - configurations:\n      - development\n    run-on:\n      - agent: linux-medium\n      - agent: linux-large\n```\n\n----------------------------------------\n\nTITLE: Custom Cypress Configuration\nDESCRIPTION: Example of adding custom options to the Cypress component testing configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress';\nimport { nxComponentTestingPreset } from '@nx/react/plugins/component-testing';\n\nexport default defineConfig({\n  component: {\n    ...nxComponentTestingPreset(__filename, {\n      bundler: 'webpack',\n    }),\n    // extra options here\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Starting NX Project with Configuration\nDESCRIPTION: This JSON snippet configures the start of a mobile project using NX with Expo, specifying the port number. The 'executor' field indicates the command to run through NX, and 'options' allows for setting parameters like the port.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/start-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"mobile\",\n  //...\n  \"targets\": {\n    //...\n    \"start\": {\n      \"executor\": \"@nx/expo:start\",\n      \"options\": {\n        \"port\": 8081\n      }\n    }\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Dependencies Configuration\nDESCRIPTION: Example of configuring local project dependencies in an application's package.json using workspace protocol.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/switch-to-workspaces-project-references.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@my-org/some-project\": \"workspace:*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Webpack Migration Scripts in JSON\nDESCRIPTION: Excerpt from @nx/webpack's migration.json file, defining various migration scripts for different versions. Each entry specifies a version, description, and the TypeScript file to execute for the migration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-07-26-evergreen-tooling-more-than-just-codemods.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"generators\": {\n    \"add-babel-inputs\": {\n      \"cli\": \"nx\",\n      \"version\": \"15.0.0-beta.0\",\n      \"description\": \"Adds babel.config.json to the hash of all tasks\",\n      \"factory\": \"./src/migrations/update-15-0-0/add-babel-inputs\"\n    },\n    \"remove-es2015-polyfills-option\": {\n      \"cli\": \"nx\",\n      \"version\": \"15.4.5-beta.0\",\n      \"description\": \"Removes es2015Polyfills option since legacy browsers are no longer supported.\",\n      \"factory\": \"./src/migrations/update-15-4-5/remove-es2015-polyfills-option\"\n    },\n    \"webpack-config-setup\": {\n      \"cli\": \"nx\",\n      \"version\": \"15.6.3-beta.0\",\n      \"description\": \"Creates or updates webpack.config.js file with the new options for webpack.\",\n      \"factory\": \"./src/migrations/update-15-6-3/webpack-config-setup\"\n    },\n    \"add-babelUpwardRootMode-flag\": {\n      \"cli\": \"nx\",\n      \"version\": \"15.7.2-beta.0\",\n      \"description\": \"Add the babelUpwardRootMode option to the build executor options.\",\n      \"factory\": \"./src/migrations/update-15-7-2/add-babelUpwardRootMode-flag\"\n    },\n    \"update-16-0-0-add-nx-packages\": {\n      \"cli\": \"nx\",\n      \"version\": \"16.0.0-beta.1\",\n      \"description\": \"Replace @nrwl/webpack with @nx/webpack\",\n      \"implementation\": \"./src/migrations/update-16-0-0-add-nx-packages/update-16-0-0-add-nx-packages\"\n    }\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Start NX Project with Cache Reset\nDESCRIPTION: This JSON snippet configures the start of a mobile project with the option to clear the Metro bundler cache using NX with Expo. Setting 'clear' to true removes the cache.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/start-examples.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n    \"start\": {\n      \"executor\": \"@nx/expo:start\",\n      \"options\": {\n        \"port\": 8081,\n        \"clear\": true\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Keep-Alive Timeout Configuration\nDESCRIPTION: Configuration examples for setting keep-alive timeout in Next.js server, including both command-line and configuration approaches.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/server-next-executor-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx run acme:serve --keepAliveTimeout 60000\n```\n\nLANGUAGE: json\nCODE:\n```\n\"serve\": {\n  \"executor\": \"@nx/next:server\",\n  \"defaultConfiguration\": \"development\",\n  \"options\": {\n    \"buildTarget\": \"acme:build\",\n    \"dev\": true\n  },\n  \"configurations\": {\n    \"development\": {\n      \"buildTarget\": \"acme:build:development\",\n      \"dev\": true,\n      \"keepAliveTimeout\": 60000\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a Commit Type for Versioning Only\nDESCRIPTION: Configures the 'docs' commit type to be excluded from versioning while remaining in the changelog by setting 'semverBump' to 'none'. This is a configuration-level change without external dependencies, managing how commit types are processed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/customize-conventional-commit-types.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"conventionalCommits\": {\n      \"types\": {\n        \"docs\": {\n          \"semverBump\": \"none\",\n          ...\n        },\n        ...\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Commit and Push Changes to Remote Branch (Git)\nDESCRIPTION: This snippet shows how to stage changes, commit them with a message, and push the commit to a remote branch named 'add-workflow'.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/4-fast-ci/4-open-pr/content.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit -m 'add CI workflow file'\ngit push origin add-workflow\n```\n\n----------------------------------------\n\nTITLE: Creating SWC Library\nDESCRIPTION: Command to generate a buildable library using SWC compiler\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/js/documents/overview.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/js:lib libs/my-swc-lib --bundler=swc\n```\n\n----------------------------------------\n\nTITLE: Create a React Component\nDESCRIPTION: Generates a new React component within an existing library. The component will be created in the specified path within the library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react/react-plugin.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:component libs/my-new-lib/src/lib/my-new-component\n```\n\n----------------------------------------\n\nTITLE: Nx Build Output Example\nDESCRIPTION: Example output of running build tasks across multiple projects showing build times and success status.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nNX  Generating @nx/angular:component\n\nCREATE libs/orders/src/lib/order-list/order-list.component.css\nCREATE libs/orders/src/lib/order-list/order-list.component.html\nCREATE libs/orders/src/lib/order-list/order-list.component.spec.ts\nCREATE libs/orders/src/lib/order-list/order-list.component.ts\nUPDATE libs/orders/src/index.ts\n❯ nx run-many -t build\n\n✔  nx run inventory:build:production (7s)\n✔  nx run angular-store:build:production (7s)\n\n———————————————————————————————————————————————————————————————————————\n\nNX   Successfully ran target build for 2 projects (7s)\n```\n\n----------------------------------------\n\nTITLE: Running NX Start Command\nDESCRIPTION: This shell command runs the 'start' target for the 'mobile' project using NX. The command initiates the start process as defined in the project's JSON configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/start-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx run mobile:start\n```\n\n----------------------------------------\n\nTITLE: Project Graph JSON - First CI Run\nDESCRIPTION: This JSON represents the project graph for the first CI run. It defines the project structure, dependencies, and affected projects. The hash represents a unique identifier for this state of the repository.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/concepts/reduce-waste.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": \"85fd0561bd88f0bcd8703a9e9369592e2805f390d04982fb2401e700dc9ebc59\",\n  \"projects\": [\n    {\n      \"name\": \"project1\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"project2\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"project3\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    }\n  ],\n  \"dependencies\": {\n    \"project1\": [{ \"source\": \"project1\", \"target\": \"project2\" }],\n    \"project2\": [{ \"source\": \"project2\", \"target\": \"project3\" }],\n    \"project3\": []\n  },\n  \"workspaceLayout\": { \"appsDir\": \"apps\", \"libsDir\": \"libs\" },\n  \"affectedProjectIds\": [\"project1\", \"project2\", \"project3\"],\n  \"focus\": null,\n  \"groupByFolder\": false,\n  \"exclude\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Nx Workspace Plugin\nDESCRIPTION: Basic structure of an Nx workspace plugin that looks for Storybook configuration files using createNodesV2.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-18-dynamic-targets-with-inference.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateNodesV2 } from '@nx/devkit';\n\nexport const createNodesV2: CreateNodesV2 = [\n  '**/.storybook/main.{js,ts,mjs,mts,cjs,cts}',\n  async (configFiles, options, context) => {\n    return [];\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Creating New Nx Workspace with Fastify App\nDESCRIPTION: Command to create a new Nx workspace pre-configured with a Fastify application using the node-monorepo preset.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-fastify.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest --preset=node-monorepo --framework=fastify --appName=fastify-api\n```\n\n----------------------------------------\n\nTITLE: Adding Nx to an Existing Repository\nDESCRIPTION: Command to initialize Nx in an existing repository. This adds Nx capabilities to a project that wasn't originally set up with Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/getting-started/installation.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Copying in Vite\nDESCRIPTION: Setup for copying assets using nxCopyAssetsPlugin in Vite configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/vite/configure-vite.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types='vitest' />\nimport { defineConfig } from 'vite';\n// ...\nimport { nxCopyAssetsPlugin } from '@nx/vite/plugins/nx-copy-assets.plugin';\n\nexport default defineConfig({\n  root: __dirname,\n  cacheDir: '../../node_modules/.vite/libs/testlib',\n\n  plugins: [\n    nxViteTsPaths(),\n    nxCopyAssetsPlugin(['*.md']),\n    dts({\n      entryRoot: 'src',\n      tsconfigPath: path.join(__dirname, 'tsconfig.lib.json'),\n    }),\n  ],\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev-Server with HTTP Middleware in Nx\nDESCRIPTION: This JSON configuration illustrates how to add HTTP request middleware to the `@nx/angular:dev-server` executor. The `esbuildMiddleware` option is used to specify an array of paths to TypeScript files containing the middleware functions. This is only available for workspaces using Angular version 17.0.0 or greater and with `build` targets using an esbuild-based executor.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/dev-server-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"targets\": {\n    \"serve\": {\n      \"executor\": \"@nx/angular:dev-server\",\n      \"options\": {\n        ...\n        \"esbuildMiddleware\": [\"apps/my-app/hello-world.middleware.ts\"]\n      }\n    }\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Version Plans via CLI Command (Shell)\nDESCRIPTION: This shell command executes the Nx release plan functionality, allowing users to generate valid version plan files interactively. This command helps automate the creation of version plans and ensures compliance with expected file structure and location.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/file-based-versioning-version-plans.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx release plan\n```\n\n----------------------------------------\n\nTITLE: Creating Index Template for Astro Applications\nDESCRIPTION: Template for the main index.astro file that contains the entry point HTML and styles for the generated Astro application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/tooling-plugin.md#2025-04-22_snippet_12\n\nLANGUAGE: astro\nCODE:\n```\n---\n// Welcome to Astro! Everything between these triple-dash code fences\n// is your \"component frontmatter\". It never runs in the browser.\nconsole.log('This runs in your terminal, not the browser!');\n---\n<!-- Below is your \"component template.\" It's just HTML, but with\n    some magic sprinkled in to help you build great templates. -->\n<html>\n  <body>\n    <h1>Hello, World!</h1>\n  </body>\n</html>\n<style>\n  h1 {\n    color: orange;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Showing Project Details with Nx (Shell)\nDESCRIPTION: This snippet demonstrates the command to show project details using Nx. It retrieves configurations, tasks, and other metadata related to the current project, effectively assisting in project management.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-existing-project.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx show project my-workspace --web\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Executes unit tests for a specified application or library.  Replace 'my-new-app' or 'my-new-lib' with the actual project name.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/web/web-plugin.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx test my-new-app\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx test my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Run Gradle Build Task with Nx (Shell)\nDESCRIPTION: This command runs the `build` task for the specified project (`application`) using Nx. It leverages Nx's caching mechanism to optimize build times. It delegates task execution to Gradle.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n./nx run application:build\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Nx\nDESCRIPTION: This snippet provides the command to execute unit tests for the nx-dev-ui-gradle library using the Nx framework and Jest. It serves as a quick reference for developers to ensure their tests run correctly.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/ui-gradle/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"nx test nx-dev-ui-gradle\"\n```\n\n----------------------------------------\n\nTITLE: Stringifying GitHub App Private Key in Bash\nDESCRIPTION: Bash command to stringify the contents of the GitHub App private key file, preparing it for use in configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/enterprise/single-tenant/custom-github-app.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nawk 'NF {sub(/\\r/, \"\"); printf \"%s\\\\n\",$0;}' your-key.pem # keep a note of the output\n```\n\n----------------------------------------\n\nTITLE: Setting Step-Specific Environment Variables\nDESCRIPTION: Demonstrates how to set environment variables that are scoped to a specific initialization step.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nlaunch-templates:\n  template-one:\n    init-steps:\n      - name: 'Print Env'\n        env:\n          MY_STEP_ENV: 'step-env-var'\n        script: |\n          echo $MY_STEP_ENV # prints \"step-env-var\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Code-Splitting with React Router\nDESCRIPTION: Shows how to use React.lazy and dynamic imports to implement code-splitting in a React application with react-router. This technique allows for loading route-specific components on demand, improving initial load times.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-09-who-gave-js-a-build-step.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router';\n\nconst Bar = React.lazy(() => import('./bar'));\nconst Foo = React.lazy(() => import('./foo'));\n\nfunction App() {\n  return (\n    <Router>\n      <nav>\n        <Link to=\"/\">Foo</Link>\n        <Link to=\"/bar\">Bar</Link>\n      </nav>\n      <Routes>\n        <Route path=\"/\" element={<Foo />} />\n        <Route path=\"/bar\" element={<Bar />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Typechecking Without Project References\nDESCRIPTION: This snippet shows the typechecking duration and memory usage without using TypeScript project references, allowing comparison with improved configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/typescript-project-linking.md#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nTypecheck without using project references: 186 seconds, max memory 6.14 GB\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component Module in Library Module\nDESCRIPTION: Updates the library module to import the new button component module, making it available for use within the library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n...\nimport { Lib3Module } from '@angular-tailwind-nx/lib3';\n\n@NgModule({\n  imports: [CommonModule, Lib3Module],\n  ...\n})\nexport class Lib2Module {}\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Codegen\nDESCRIPTION: This command runs the GraphQL Codegen task to generate TypeScript models based on the GraphQL schema.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx codegen models-graphql\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with Custom Preset\nDESCRIPTION: Shell command to create a new Nx workspace using a custom preset. This demonstrates how to use personalized Nx presets for workspace creation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-12-28-highlights-2023.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace myrepo --preset=@yourpkg/nx-preset\n```\n\n----------------------------------------\n\nTITLE: Running Nx Commands in Shell\nDESCRIPTION: Demonstrates the basic syntax for running Nx commands, including building a specific project and running tasks in parallel across multiple projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx <target> <project>\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx build shared-ui\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many --target=build --all\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many --target=build --projects=my-remix-app,shared-ui\n```\n\n----------------------------------------\n\nTITLE: Enabling Performance Logging for Nx Commands\nDESCRIPTION: This snippet shows how to enable detailed performance logging while building an Nx project by using the NX_PERF_LOGGING environment variable. The example command runs the build for the 'admin' project with the daemon disabled to gather performance metrics.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/performance-profiling.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nNX_PERF_LOGGING=true NX_DAEMON=false npx nx build admin\n```\n\n----------------------------------------\n\nTITLE: Generating a Route for Remix Application\nDESCRIPTION: Creates a new route in a Remix application using the Nx generator. This adds both the route component file and associated CSS file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/remix.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/remix:route apps/myapp/app/routes/admin\n```\n\n----------------------------------------\n\nTITLE: Example: Project-Level Owners Configuration in Nx\nDESCRIPTION: This example shows a project-level owners configuration in Nx. It demonstrates how to assign owners to all files in a project, specific files, and how to add descriptions to ownership rules.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/owners/owners-plugin.md#2025-04-22_snippet_8\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"owners\": {\n    \"**/*\": [\"@ahmed\", \"@petra\"],\n    \"package.json\": [\"@ahmed\"],\n    \"README.md\": {\n      \"owners\": [\"@jared\"],\n      \"description\": \"Jared is very particular about the README file\"\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Vue Application with SCSS Styling\nDESCRIPTION: Shows how to create a Vue application with specific styling preferences, setting SCSS as the style extension and placing it in a custom directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vue/docs/application-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/vue:app apps/my-dir/my-app --style=scss\n```\n\n----------------------------------------\n\nTITLE: Running ESLint in Nx Workspace\nDESCRIPTION: Command to run ESLint linting on a specific project named 'happynrwl' in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-29-the-react-cli-you-always-wanted-but-didnt-know-about.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx lint happynrwl\n```\n\n----------------------------------------\n\nTITLE: Installing the Qwik-Nx Plugin\nDESCRIPTION: Command to install the qwik-nx plugin as a development dependency, which provides generators and executors for Qwik within an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-15-qwikify-your-dev.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev qwik-nx\n```\n\n----------------------------------------\n\nTITLE: Project Configuration Check for Cache Setting\nDESCRIPTION: Example showing how to configure caching in project.json or nx.json for tasks in Nx versions before 17.2.0.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/troubleshoot-cache-misses.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"cache\": true\n```\n\n----------------------------------------\n\nTITLE: Automate CI Workflow with Nx Generator (Shell)\nDESCRIPTION: This command uses the Nx generator to set up an automated CI workflow for a workspace, specifically configuring it for GitHub.  It leverages Nx affected commands and Nx Cloud for distributed task execution. The `--ci=github` option specifies GitHub as the CI provider.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-05-02-nx-v14-is-out-here-is-all-you-need-to-know.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nrwl/workspace:ci-workflow --ci=github\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Plugin in JSON\nDESCRIPTION: Example of configuring the nx-astro plugin in the nx.json file, specifying the names for build and dev targets.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/tooling-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"nx-astro\",\n      \"options\": {\n        \"buildTargetName\": \"build\",\n        \"devTargetName\": \"dev\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating new Angular application with Nx\nDESCRIPTION: Command to generate a new Angular application named 'demo' using Nx and the @nx/angular plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/2-use-preset/_solution/angular-monorepo/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx g @nx/angular:app demo\n```\n\n----------------------------------------\n\nTITLE: Zephyr Apps Project Creation Interactive Prompts\nDESCRIPTION: This snippet shows the interactive prompts and responses when creating a new Zephyr Apps project for React Native. It guides the user through project setup choices.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-31-over-the-air-updates-with-zephyr.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n│\n◇   ──────────────────────────────╮\n│                                 │\n│  npx create-zephyr-apps@latest  │\n│                                 │\n├─────────────────────────────────╯\n┌   Create federated applications with Zephyr\n│\n◇  Where should we create your project?\n│  ./acme\n│\n◇  What type of project you are creating?\n│  React Native\n│\n◇  Project successfully created at acme\n│\n◇  Problems? ─────────────────────────────────────────────────────────────────╮\n│                                                                             │\n│  Discord: https://zephyr-cloud.io/discord                                   │\n│  Documentation: https://zephyr-cloud.io/docs                                │\n│  Open an issue: https://github.com/ZephyrCloudIO/create-zephyr-apps/issues  │\n│                                                                             │\n├─────────────────────────────────────────────────────────────────────────────╯\n\n│\n◇  Next steps. ──────────────────────────────────────────────────╮\n│                                                                │\n│  cd acme                                                       │\n│  pnpm install                                                  │\n│  rm -rf .git                                                   │\n│  pnpm run build                                                │\n│  Make your first commit and link it to the remote repository!  │\n│                                                                │\n├────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Configuring CI Run with Nx Cloud CLI in YAML\nDESCRIPTION: Examples of YAML configurations for starting and configuring CI runs using the nx-cloud CLI. These snippets demonstrate correct usage of the --stop-agents-after flag for both serial and parallel command execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/nx-cloud-cli.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- run: npx nx-cloud start-ci-run --stop-agents-after=lint,test,build\n- run: nx affected -t lint\n- run: nx affected -t test\n- run: nx affected -t build\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- run: npx nx-cloud start-ci-run --stop-agents-after=lint,test,build\n- run: nx affected -t build & nx affected -t lint & nx affected -t test\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- run: npx nx-cloud start-ci-run --stop-agents-after=build:locale-en,build:locale-es\n- run: nx affected -t build --configuration=locale-en\n- run: nx affected -t build --configuration=locale-es\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Output Formats in project.json\nDESCRIPTION: Project configuration to generate both ESM and CommonJS module formats during build. This allows the application to be compatible with different module systems.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/esbuild/docs/esbuild-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"build\": {\n  \"executor\": \"@nx/esbuild:esbuild\",\n  \"options\": {\n    \"main\": \"<app-root>\",\n    \"tsConfig\": \"<app-root>/tsconfig.app.json\",\n    \"outputPath\": \"dist/<app-root>\",\n      \"format\": [\"esm\", \"cjs\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Data Access Exports\nDESCRIPTION: Exports todo context and API functionality from the data access library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-15-qwikify-your-dev.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from './lib/todo.context';\nexport * from './lib/api';\n```\n\n----------------------------------------\n\nTITLE: Typechecking With Incremental Package Updates\nDESCRIPTION: This snippet displays performance results for typechecking after updating various numbers of packages, highlighting the efficiency of using `.tsbuildinfo` files for cached results.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/typescript-project-linking.md#2025-04-22_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nTypecheck (1 pkg updated): 36.33 seconds, max memory 655.14 MB\nTypecheck (5 pkg updated): 48.21 seconds, max memory 702.96 MB\nTypecheck (25 pkg updated): 65.25 seconds, max memory 666.78 MB\nTypecheck (100 pkg updated): 80.69 seconds, max memory 664.58 MB\nTypecheck (1 nested leaf pkg updated): 26.66 seconds, max memory 407.54 MB\nTypecheck (2 nested leaf pkg updated): 31.17 seconds, max memory 889.86 MB\nTypecheck (1 nested root pkg updated): 26.67 seconds, max memory 393.78 MB\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress for Component Testing in Nx\nDESCRIPTION: Configuration for component testing with Cypress. Uses skipServe: true since Cypress creates its own dev server for component testing, while still referencing the build target for configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/docs/cypress-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"targets\": {\n  \"component-test\": {\n    \"executor\": \"@nx/cypress:cypress\",\n    \"options\": {\n      \"cypressConfig\": \"apps/app/cypres.config.ts\",\n      \"devServerTarget\": \"my-react-app:build\",\n      \"testingType\": \"component\",\n      \"skipServe\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Assignment Rules with YAML\nDESCRIPTION: This YAML snippet outlines the setup of assignment rules to manage task distributions. It demonstrates how more specific configurations match tasks accurately and are prioritized based on defined criteria such as projects, targets, and configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/assignment-rules.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nassignment-rules:\n  # A task for app1:build:production will use this rule because it is more\n  # specific (matches all three properties instead of just two)\n  - projects:\n      - app1\n    targets:\n      - build\n    configurations:\n      - production\n    run-on:\n      - agent: linux-medium-js\n        parallelism: 5\n\n  - projects:\n      - app1\n    targets:\n      - build\n    run-on:\n      - agent: linux-large-js\n        parallelism: 3\n```\n\n----------------------------------------\n\nTITLE: Defining runTasksInSerial Function in TypeScript for Nx\nDESCRIPTION: This function takes multiple GeneratorCallback tasks as arguments and returns a single GeneratorCallback. It's designed to run the provided tasks in serial order within Nx generators.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/runTasksInSerial.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nrunTasksInSerial(...tasks): GeneratorCallback\n```\n\n----------------------------------------\n\nTITLE: Using Svelte Component from Library\nDESCRIPTION: Svelte component code demonstrating how to import and use a component from a separate library within the main application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-svelte.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n  import { Counter } from '@acme/counter';\n</script>\n\n<Counter />\n```\n\n----------------------------------------\n\nTITLE: Generating Nx Executor Without File Extension\nDESCRIPTION: Creates an Nx executor by specifying the path without the .ts extension. The generator automatically adds the extension\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/plugin/docs/generators/executor-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/plugin:executor tools/my-plugin/src/executors/build\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables from Custom Plugin in Angular Service\nDESCRIPTION: Angular service example demonstrating how to access environment variables processed by the custom ESBuild plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/use-environment-variables-in-angular.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ApiService {\n  constructor() {\n    console.log('API URL:', process.env.MY_ORG_API_URL);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from Specific Version with Exclusions\nDESCRIPTION: Example of migrating from a specific Nx version (14.5.0) while excluding migrations that should have been applied in previous updates.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/migrate.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate latest --from=nx@14.5.0 --exclude-applied-migrations\n```\n\n----------------------------------------\n\nTITLE: Defining NxPluginV2 Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the NxPluginV2 type alias, which represents a plugin for enhancing Nx behavior. It includes various optional properties for creating dependencies, metadata, nodes, and executing tasks before and after Nx runs tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/NxPluginV2.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **NxPluginV2**<`TOptions`>: `Object`\n```\n\n----------------------------------------\n\nTITLE: Running Vite Preview Server Command\nDESCRIPTION: Command to start the Vite preview server for a specific app using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/preview-server-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx preview my-app\n```\n\n----------------------------------------\n\nTITLE: Constructing OpenAI Query for Documentation Assistant in TypeScript\nDESCRIPTION: This snippet demonstrates how to construct a query for the OpenAI API, combining user questions with relevant documentation chunks to generate context-aware responses in the Nx Docs AI Assistant.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-21-ai-assistant.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst query = `You will be provided sections of the Nx documentation in markdown format, use those to answer my question. Do NOT reveal this approach or the steps to the user. Only provide the answer. Start replying with the answer directly.\n\nSections:\n${contextText}\n\nQuestion: \"\"\"\n${userQuestion}\n\"\"\"\n\nAnswer as markdown (including related code snippets if available):`\n```\n\n----------------------------------------\n\nTITLE: Generating Cypress Component Configuration\nDESCRIPTION: Command to generate Cypress component testing configuration for a React project using Nx generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:cypress-component-configuration --project=my-cool-react-project\n```\n\n----------------------------------------\n\nTITLE: Defining Logger Object with TypeScript\nDESCRIPTION: Declares a constant logger object with multiple logging methods. Each method accepts either a single argument or multiple arguments of any type, and returns void.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/logger.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst logger: Object = {\n  debug: (...s: any[]) => void,\n  error: (s: any) => void,\n  fatal: (...s: any[]) => void,\n  info: (s: any) => void,\n  log: (...s: any[]) => void,\n  verbose: (...s: any[]) => void,\n  warn: (s: any) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Module Federation Dev Server in Rspack\nDESCRIPTION: Implementation example showing how to add the NxModuleFederationSSRDevServerPlugin to an Rspack configuration for server-side rendering applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/module-federation/documents/nx-module-federation-dev-server-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NxModuleFederationSSRDevServerPlugin } from '@nx/module-federation/rspack';\nimport config from './module-federation.config';\n\nexport default {\n  ...otherRspackConfigOptions,\n  plugins: [\n    new NxModuleFederationSSRDevServerPlugin({\n      config,\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Vite Plugin in nx.json\nDESCRIPTION: JSON configuration for the Nx Vite plugin, including custom target names for build, preview, test, and serve operations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/vite/vite-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/vite/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"build\",\n        \"previewTargetName\": \"preview\",\n        \"testTargetName\": \"test\",\n        \"serveTargetName\": \"serve\",\n        \"serveStaticTargetName\": \"serve-static\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Nx Devkit Generator to Angular Schematic in TypeScript\nDESCRIPTION: Example showing how to convert an Nx Devkit generator to an Angular schematic using the convertNxGenerator utility. This enables using Nx generators within Angular schematic-based workflows.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/nx-devkit-angular-devkit.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function mygenerator(tree: Tree, options: Schema) {\n  // ...\n}\nexport const mygeneratorSchematic = convertNxGenerator(mygenerator);\n```\n\n----------------------------------------\n\nTITLE: Test Sharding with Jest - Shell\nDESCRIPTION: Demonstrates how to split a Jest test suite into multiple shards using the `--shard` option within an Nx affected command. This allows for parallel execution of tests, reducing overall test execution time.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-04-23-test-splitting-techniques.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t test -- --shard=1/4\nnx affected -t test -- --shard=2/4\nnx affected -t test -- --shard=3/4\nnx affected -t test -- --shard=4/4\n```\n\n----------------------------------------\n\nTITLE: Installing Nx React Plugin\nDESCRIPTION: Example of installing the @nx/react package matching the installed nx version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/add.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/react\n```\n\n----------------------------------------\n\nTITLE: Generating Cypress Configuration for Project with Default Directory\nDESCRIPTION: This bash command uses the NX CLI to generate a Cypress e2e configuration for a specified project. It creates the necessary configuration files in the default directory structure. To execute this, ensure that the NX workspace is properly set up and the project name is correctly provided.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/docs/cypress-e2e-config-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/cypress:configuration --project=my-cool-project --devServerTarget=some-app:serve\n```\n\n----------------------------------------\n\nTITLE: Project Configuration for Component Testing\nDESCRIPTION: Project configuration JSON showing the component-test target setup with devServerTarget.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\" {\n    \"component-test\": {\n      \"executor\": \"@nx/cypress:cypress\",\n      \"options\": {\n        \"cypressConfig\": \"<path-to-project-root>/cypress.config.ts\",\n        \"testingType\": \"component\",\n        \"devServerTarget\": \"some-react-app:build\",\n        \"skipServe\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting CI Run with Fixed Agents in GitHub Actions (YAML)\nDESCRIPTION: This snippet demonstrates how to start an Nx Cloud CI run with a fixed number of agents. The `distribute-on` flag specifies the number and type of agents to use for the CI run. The `stop-agents-after` flag defines when to stop the agents after a specific target is complete.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/features/dynamic-agents.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\n...\njobs:\n  - job: main\n    name: Main Job\n    ...\n    steps:\n      ...\n      - run: npx nx-cloud start-ci-run --distribute-on=\"8 linux-medium-js\" --stop-agents-after=\"e2e-ci\"\n      - ...\n\n```\n\n----------------------------------------\n\nTITLE: Testing React Query Hook with Axios Mock\nDESCRIPTION: Unit test implementation for a custom hook using React Query with axios mock adapter\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-08-state-management.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TestWrapper } from '@nx-expo-monorepo/queries/test-wrapper';\nimport { renderHook, waitFor } from '@testing-library/react-native';\nimport { useCatFact } from './use-cat-fact';\nimport axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\n\nconst mockAxios = new MockAdapter(axios);\n\ndescribe('useCatFact', () => {\n  afterEach(() => {\n    mockAxios.reset();\n  });\n\n  it('status should be success', async () => {\n    mockAxios.onGet().replyOnce(200, {\n      fact: 'random cat fact',\n    });\n\n    const { result } = renderHook(() => useCatFact(), {\n      wrapper: TestWrapper,\n    });\n    result.current.refetch();\n    expect(result.current.isLoading).toBeTruthy();\n\n    await waitFor(() => expect(result.current.isLoading).toBe(false));\n    expect(result.current.isSuccess).toBe(true);\n    expect(result.current.data).toEqual('random cat fact');\n  });\n\n  it('status should be error', async () => {\n    mockAxios.onGet().replyOnce(500);\n\n    const { result } = renderHook(() => useCatFact(), {\n      wrapper: TestWrapper,\n    });\n    result.current.refetch();\n    expect(result.current.isLoading).toBeTruthy();\n\n    await waitFor(() => expect(result.current.isLoading).toBe(false));\n    expect(result.current.isError).toBe(true);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating HTML Template for Solid Application\nDESCRIPTION: Modify the HTML template to include the necessary structure for the Solid application, including the root element and script reference.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-solid.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <title>Solid App</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n\n    <script src=\"src/index.tsx\" type=\"module\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Generating Next.js Application\nDESCRIPTION: Command to generate a new Next.js application in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/next/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/next:app apps/my-new-app\n```\n\n----------------------------------------\n\nTITLE: Using dynamic agent allocation in Nx Cloud\nDESCRIPTION: This command demonstrates how to use a dynamic agent allocation configuration file with Nx Cloud in a CI workflow.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-17-modern-angular-testing-with-nx.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nnpx nx-cloud start-ci-run --distribute-on=\".nx/workflows/distribution-config.yaml\" --stop-agents-after=\"e2e-ci\"\n```\n\n----------------------------------------\n\nTITLE: Serving a Next.js Application for Production\nDESCRIPTION: This command starts the Next.js application in production mode. It serves the pre-built application for deployment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n\"nx start my-new-app\"\n```\n\n----------------------------------------\n\nTITLE: Running Device-Specific Tests\nDESCRIPTION: Commands to run Detox tests on specific iOS or Android devices using the device-name parameter\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/detox/detox-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx test-ios frontend-e2e --device-name \"iPhone 11\"\nnx test-android frontend-e2e --device-name \"Pixel_4a_API_30\"\n```\n\n----------------------------------------\n\nTITLE: Generating Web App with Webpack\nDESCRIPTION: Command to generate a new Web application using Webpack bundler in an existing Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/plugin-overview.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/web:app apps/my-app --bundler=webpack\n```\n\n----------------------------------------\n\nTITLE: Specifying Resource Class for Launch Template\nDESCRIPTION: Demonstrates how to set the resource class for a launch template, which defines the memory and vCPUs available to each agent machine.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlaunch-templates:\n  template-one:\n    resource-class: 'docker_linux_amd64/medium'\n```\n\n----------------------------------------\n\nTITLE: Sequential Testing of Projects with Nx run-many\nDESCRIPTION: Example of running tests for specific projects (proj1 and proj2) in sequence using the run-many command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run-many.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t test -p proj1 proj2 --parallel=false\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Table of Nx Command Line Options\nDESCRIPTION: This snippet presents a markdown table listing various command line options for Nx. Each row describes an option, its type, and provides a detailed explanation of its functionality.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/affected.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Option                                      | Type                                                     | Description|\n| ------------------------------------------- | -------------------------------------------------------- ||\n| ~~`--all`~~                                 | boolean                                                  | **Deprecated:** Use `nx run-many` instead|\n| `--base`                                    | string                                                   | Base of the current branch (usually main|\n| `--batch`                                   | boolean                                                  | Run task(s) in batches for executors which support batches. (Default: `false`|\n| `--configuration`, `--c`                    | string                                                   | This is the configuration to use when performing tasks on projects|\n| `--exclude`                                 | string                                                   | Exclude certain projects from being processed|\n| `--excludeTaskDependencies`                 | boolean                                                  | Skips running dependent tasks first. (Default: `false`|\n| `--files`                                   | string                                                   | Change the way Nx is calculating the affected command by providing directly changed files, list of files delimited by commas or spaces|\n| `--graph`                                   | string                                                   | Show the task graph of the command. Pass a file path to save the graph data instead of viewing it in the browser. Pass \"stdout\" to print the results to the terminal|\n| `--head`                                    | string                                                   | Latest commit of the current branch (usually|\n| `--help`                                    | boolean                                                  | Show help|\n```\n\n----------------------------------------\n\nTITLE: Angular Application Configuration with Application Executor\nDESCRIPTION: Configuration for an Angular application using the @nx/angular:application executor with incremental builds enabled. The buildLibsFromSource flag is set to false to use pre-built libraries instead of rebuilding from source.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/setup-incremental-builds-angular.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"projectType\": \"application\",\n  ...\n  \"targets\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"],\n      \"executor\": \"@nx/angular:application\",\n      \"outputs\": [\n        \"{options.outputPath}\"\n      ],\n      \"options\": {\n        \"buildLibsFromSource\": false\n        ...\n      },\n      \"configurations\": {\n        ...\n      },\n      \"defaultConfiguration\": \"production\"\n    },\n    \"serve\": {\n      \"executor\": \"@nx/angular:dev-server\",\n      \"options\": {\n        \"buildTarget\": \"my-app:build\",\n        \"buildLibsFromSource\": false\n      },\n      \"configurations\": {\n        \"production\": {\n          \"buildTarget\": \"my-app:build:production\"\n        }\n      }\n    },\n    ...\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Importing Shared Component in Angular Application\nDESCRIPTION: This TypeScript code demonstrates how to import and use a shared component (ProductsComponent) in another Angular application within the monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/7-share-code/content.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { ProductsComponent } from '@angular-monorepo/products';\n\n@Component({\n  imports: [ProductsComponent],\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css',\n})\nexport class AppComponent {\n  title = 'inventory';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Dependencies\nDESCRIPTION: Package.json configuration showing how to set up dependencies between local workspace packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-29-new-nx-experience.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@tsmono/mytslib\",\n  ...\n  \"dependencies\": {\n    \"@tsmono/buildablelib\": \"*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Migration Commands for Manual Execution\nDESCRIPTION: This command runs the @nx/storybook:migrate-8 generator with the --onlyShowListOfCommands flag to display the list of commands needed for manual migration execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/migrate-8-generator-examples.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/storybook:migrate-8 --onlyShowListOfCommands\n```\n\n----------------------------------------\n\nTITLE: Stripping JSON Comments in TypeScript\nDESCRIPTION: This function removes JavaScript-style comments from JSON text. It takes the JSON text as input and optionally a replacement character. The function returns the JSON string with comments removed, potentially replacing comment characters with the specified replacement character.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/stripJsonComments.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **stripJsonComments**(`text`, `replaceCh?`): `string`\n```\n\n----------------------------------------\n\nTITLE: Running Affected Tests in NX\nDESCRIPTION: This command lets you run tests for affected projects in an Nx workspace, ensuring that only the necessary tests are executed, which can optimize the development process.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/jest/docs/jest-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnx affected --target=test\n```\n\n----------------------------------------\n\nTITLE: Enhanced Generator Schema with Scopes\nDESCRIPTION: Updated schema files to include scope selection functionality for better project organization.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/organization-specific-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LibraryGeneratorSchema {\n  name: string;\n  scope: string;\n  directory?: string;\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://json-schema.org/schema\",\n  \"$id\": \"Library\",\n  \"title\": \"\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"description\": \"\",\n      \"$default\": {\n        \"$source\": \"argv\",\n        \"index\": 0\n      },\n      \"x-prompt\": \"What name would you like to use?\"\n    },\n    \"scope\": {\n      \"type\": \"string\",\n      \"description\": \"The scope of your library.\",\n      \"enum\": [\"api\", \"store\", \"shared\"],\n      \"x-prompt\": {\n        \"message\": \"What is the scope of this library?\",\n        \"type\": \"list\",\n        \"items\": [\n          {\n            \"value\": \"store\",\n            \"label\": \"store\"\n          },\n          {\n            \"value\": \"api\",\n            \"label\": \"api\"\n          },\n          {\n            \"value\": \"shared\",\n            \"label\": \"shared\"\n          }\n        ]\n      }\n    },\n    \"directory\": {\n      \"type\": \"string\",\n      \"description\": \"\"\n    }\n  },\n  \"required\": [\"name\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Specify Host Type for NX Start\nDESCRIPTION: This JSON snippet configures the type of host to use when starting a mobile project using NX with Expo. The 'host' option can be set to 'localhost', 'lan', or 'tunnel'.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/start-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n    \"start\": {\n      \"executor\": \"@nx/expo:start\",\n      \"options\": {\n        \"port\": 8081,\n        \"host\": \"localhost\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Netlify Functions in Existing Project\nDESCRIPTION: Command to generate Netlify serverless function configuration in an existing Nx project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/node-serverless-functions-netlify.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/netlify:setup-functions\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Library Dependencies\nDESCRIPTION: TOML configuration for the cats library, specifying dependencies including actix-web and serde.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-rust.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"cats\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nactix-web = \"4\"\n\n[dependencies.serde]\nversion = \"1\"\nfeatures = [\"derive\"]\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Transformer Plugins with Nx TSC\nDESCRIPTION: This example shows how to configure the `@nx/js:tsc` executor to use TypeScript transformer plugins. The `transformers` option in the `project.json` file specifies the plugins to be used during the TypeScript compilation process.  These plugins can modify the TypeScript AST during compilation, enabling functionalities such as Swagger integration or automapper.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/tsc-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"executor\": \"@nx/js:tsc\",\n    \"options\": {\n      \"outputPath\": \"dist/libs/ts-lib\",\n      \"main\": \"libs/ts-lib/src/index.ts\",\n      \"tsConfig\": \"libs/ts-lib/tsconfig.lib.json\",\n      \"assets\": [\"libs/ts-lib/*.md\"],\n      \"transformers\": [\n        \"@nestjs/swagger/plugin\",\n        {\n          \"name\": \"@automapper/classes/transformer-plugin\",\n          \"options\": {}\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Project Details (Shell)\nDESCRIPTION: This command displays project details in a web view, including inferred targets. It's used to visualize available targets for a given project when using Project Crystal and helps understand the dynamically inferred targets.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-05-nx-18-project-crystal.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx show project reactapp --web\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PnP\nDESCRIPTION: Command to install dependencies after enabling PnP\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/yarn-pnp.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Displaying Nx Logo with Dark/Light Mode Support using HTML Picture Element\nDESCRIPTION: HTML code snippet that implements a responsive logo display with dark/light mode support using the picture element. The logo is centered and spans full width.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"text-align: center;\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Updating Nx to the Latest Version\nDESCRIPTION: Command to update Nx to the latest version. This generates a migrations.json file with update scripts that need to be run.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/getting-started/installation.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\n----------------------------------------\n\nTITLE: Installing React plugin for Nx\nDESCRIPTION: This command adds the @nx/react plugin to the Nx workspace. It's important to ensure the plugin version matches the Nx version in the repository.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation-with-ssr.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx add @nx/react\n```\n\n----------------------------------------\n\nTITLE: Running Storybook 7 Migration Generator in Nx\nDESCRIPTION: This command initiates the migration process for all projects with Storybook configured in the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/migrate-7-generator-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/storybook:migrate-7\n```\n\n----------------------------------------\n\nTITLE: Running the Make Command for a Specific Project\nDESCRIPTION: Shell command to run the configured 'make' target for a specific project using the nx run syntax.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/running-custom-commands.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx run my-app:make\n```\n\n----------------------------------------\n\nTITLE: TypeScript Base Configuration Update\nDESCRIPTION: Updated TypeScript base configuration with required compiler options for project references.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/switch-to-workspaces-project-references.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"composite\": true,\n    \"declaration\": true,\n    \"allowJs\": false,\n    \"allowSyntheticDefaultImports\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Angular Button Component Logic\nDESCRIPTION: Defines the TypeScript class for the button component. It includes an input property for the href attribute, allowing customization of the button's link.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'angular-tailwind-nx-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n})\nexport class ButtonComponent {\n  @Input() href?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Components from Library Index\nDESCRIPTION: This code exports the ProductsComponent from the products library, making it available for use in other projects within the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/7-share-code/content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from './lib/products/products.component';\n```\n\n----------------------------------------\n\nTITLE: Executing Nx Report Command in Shell\nDESCRIPTION: This command runs the 'report' function in Nx CLI, which outputs useful version numbers for inclusion in Nx issue templates. It can be executed directly if nx is installed globally, or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/report.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx report\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Configuration in Nx\nDESCRIPTION: Command to show the complete project configuration including dynamically added targets from plugins.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-10-20-nx-17-release.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx show project <project_name>\n```\n\n----------------------------------------\n\nTITLE: Configuring @nx/js:tsc Executor in JSON\nDESCRIPTION: This JSON configuration for the @nx/js:tsc executor in a project.json file shows how to set up the build options. Setting 'clean' to false preserves the .tsbuildinfo file for optimal TypeScript optimizations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/enable-tsc-batch-mode.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"executor\": \"@nx/js:tsc\",\n    \"options\": {\n      \"outputPath\": \"dist/libs/ts-lib\",\n      \"main\": \"libs/ts-lib/src/index.ts\",\n      \"tsConfig\": \"libs/ts-lib/tsconfig.lib.json\",\n      \"assets\": [\"libs/ts-lib/*.md\"],\n      \"clean\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package-specific .babelrc in Nx Monorepo\nDESCRIPTION: This snippet demonstrates a typical .babelrc configuration for individual packages in an Nx monorepo. It sets up presets for Babel, including @babel/preset-env and @babel/preset-typescript.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/rollup/src/docs/rollup-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-typescript\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Task Graph Console Output\nDESCRIPTION: Print the task graph for affected builds directly to console output.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/affected.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t=build --graph=stdout\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Webpack Plugin\nDESCRIPTION: JSON configuration for the Nx Webpack plugin in nx.json, defining build, preview, serve, and serve-static target names.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/plugin-overview.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/webpack/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"build\",\n        \"previewTargetName\": \"preview\",\n        \"serveTargetName\": \"serve\",\n        \"serveStaticTargetName\": \"serve-static\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Projects for Nx Release via CLI\nDESCRIPTION: Use the `--projects` option to specify which projects should be released, supporting direct project names, tags, directories, and glob patterns. For example, `nx release --projects=pkg-1,pkg-2` releases only `pkg-1` and `pkg-2`, while `nx release --projects=server/*` releases all projects in the `server` directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/release-projects-independently.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx release --projects=pkg-1,pkg-2\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx release --projects=server/*\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx release --projects='!ui/*'\n```\n\n----------------------------------------\n\nTITLE: Generating a Rspack-based React App in an Nx Monorepo\nDESCRIPTION: Command to generate a new React application that uses Rspack as the bundler in an existing Nx monorepo. This allows for experimentation with Rspack in an existing production setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-03-10-rspack-getting-up-to-speed-with-nx.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nrwl/rspack:app myrspackapp\n```\n\n----------------------------------------\n\nTITLE: Running migrations from a custom migrations file\nDESCRIPTION: This command allows you to run migrations from a specified migrations file. Use `--run-migrations` option to provide custom location for migrations file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/advanced-update.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"nx migrate --run-migrations=migrations.json\"\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Rollup Plugin\nDESCRIPTION: Command to add the Nx Rollup plugin to your project. The version should match other @nx/* package versions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/compile-multiple-formats.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/rollup\n```\n\n----------------------------------------\n\nTITLE: Testing a Node.js Project\nDESCRIPTION: This command runs the unit tests for the specified Node.js application or library using the Nx CLI. Replace `my-new-app` or `my-new-lib` with the name of your project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/node/node-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx test my-new-app\nx test my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Project Configuration in project.json\nDESCRIPTION: Example of configuring Nx targets in project.json, showing how to define build and test tasks using Nx executors instead of npm scripts.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"root\": \"libs/mylib/\",\n  \"targets\": {\n    \"test\": {\n      \"executor\": \"@nx/jest:jest\",\n      \"options\": {\n        /* ... */\n      }\n    },\n    \"build\": {\n      \"executor\": \"@nx/js:tsc\",\n      \"options\": {\n        /* ... */\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generate JavaScript Storybook Configuration\nDESCRIPTION: Generates Storybook configuration using JavaScript instead of TypeScript for the configuration files in the .storybook directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nuxt/docs/storybook-configuration-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/nuxt:storybook-configuration ui --tsConfiguration=false\n```\n\n----------------------------------------\n\nTITLE: Generating Vite Projects in Nx\nDESCRIPTION: Commands for generating new React applications and libraries using Vite bundler in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/vite/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:app apps/my-app --bundler=vite\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:lib libs/my-lib --bundler=vite\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/web:app apps/my-app --bundler=vite\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests using Jest in Nx\nDESCRIPTION: This snippet provides the command to execute unit tests for the nx-dev-ui-sponsor-card library using Jest within the Nx framework. The command requires that Nx and Jest are properly set up in the development environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/ui-sponsor-card/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx test nx-dev-ui-sponsor-card\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript ESLint Dependencies in package.json (After)\nDESCRIPTION: This code snippet shows the `devDependencies` section of a `package.json` file after the migration. It lists the TypeScript ESLint related packages and their versions are updated to `8.13.0`. The purpose is to show the desired state of the dependencies after the migration is applied.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/eslint/src/migrations/update-20-2-0/update-typescript-eslint-v8-13-0.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"typescript-eslint\": \"^8.13.0\",\n    \"@typescript-eslint/eslint-plugin\": \"^8.13.0\",\n    \"@typescript-eslint/parser\": \"^8.13.0\",\n    \"@typescript-eslint/utils\": \"^8.13.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind Base Styles Configuration\nDESCRIPTION: Base CSS configuration file that imports the core Tailwind CSS styles including base, components, and utilities.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Configuring Prebuild in project.json\nDESCRIPTION: Basic project.json configuration for the Nx Expo prebuild executor with default options\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/prebuild-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"mobile\",\n  //...\n  \"targets\": {\n    //...\n    \"prebuild\": {\n      \"executor\": \"@nx/expo:prebuild\",\n      \"options\": {}\n    }\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Entry Point with NgRx Providers\nDESCRIPTION: Initial setup of the main.ts file showing the bootstrap configuration for a standalone Angular application with routing setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-02-21-using-ngrx-standalone-apis-with-nx.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrapApplication } from '@angular/platform-browser';\nimport {\n  provideRouter,\n  withEnabledBlockingInitialNavigation,\n} from '@angular/router';\nimport { AppComponent } from './app/app.component';\nimport { appRoutes } from './app/app.routes';\n\nbootstrapApplication(AppComponent, {\n  providers: [provideRouter(appRoutes, withEnabledBlockingInitialNavigation())],\n}).catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Example of Generating Stories for a Specific Library\nDESCRIPTION: Example command showing how to generate stories for a library called feature-ui that contains Angular components.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/plugin-angular.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:stories --project=feature-ui\n```\n\n----------------------------------------\n\nTITLE: Handling Query Parameters in Web App\nDESCRIPTION: TypeScript code to handle query parameters in the web app using react-router-dom.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useHistory } from 'react-router-dom';\nconst history = useHistory();\nconst submitSearchForm = (text: string) => {\n  history.push(`${AppRoutes.results}?search=${text}`);\n};\n\nimport { useLocation } from 'react-router-dom';\nconst params = new URLSearchParams(useLocation().search);\nconst searchParam = params.get('search');\n```\n\n----------------------------------------\n\nTITLE: Interactive Nx Migration\nDESCRIPTION: This command initiates an interactive Nx migration, allowing users to selectively apply updates.  It prompts the user to choose which migrations to apply, enabling skipping optional updates like Angular version upgrades.  It is used to manage updates when detaching Angular versions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-02-16-nx-15-7-node-support-angular-lts-lockfile-pruning.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nx migrate latest --interactive\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/js Plugin (Nx 18+)\nDESCRIPTION: Command to install the @nx/js plugin in Nx version 18 or higher\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/js/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/js\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Nuxt Plugin\nDESCRIPTION: JSON configuration for @nx/nuxt plugin in nx.json defining custom target names for build, test, serve and static operations\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nuxt/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/nuxt/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"build\",\n        \"testTargetName\": \"test\",\n        \"serveTargetName\": \"serve\",\n        \"buildStaticTargetName\": \"build-static\",\n        \"serveStaticTargetName\": \"serve-static\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Hash Interface in TypeScript for Nx Framework\nDESCRIPTION: This code snippet defines the Hash interface with two main properties: 'details' and 'value'. The 'details' property is an object containing information about the command, implicit dependencies, nodes, and runtime inputs used in hash calculation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/Hash.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Hash {\n  details: {\n    command: string;\n    implicitDeps?: { [fileName: string]: string };\n    nodes: { [name: string]: string };\n    runtime?: { [input: string]: string };\n  };\n  value: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Component Using Current Directory\nDESCRIPTION: Command sequence showing how to generate a component using the current working directory context.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-10-20-nx-17-release.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd apps/my-app/src/app\nnx g component Home\n```\n\n----------------------------------------\n\nTITLE: Get Help for Nx Release Subcommands\nDESCRIPTION: Demonstrates how to use the `--help` flag with `nx release` subcommands to explore their available options and usage instructions. Each subcommand (`version`, `changelog`, `publish`) has its own set of CLI arguments that can be discovered this way.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/manage-releases.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"nx release version --help\\nnx release changelog --help\\nnx release publish --help\"\n```\n\n----------------------------------------\n\nTITLE: Building a Buildable Library\nDESCRIPTION: Builds a library that was generated with the `--buildable` flag. The output is placed in the 'dist' folder and is ready for publishing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/web/web-plugin.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Configuring Inputs for Pre-defined Steps\nDESCRIPTION: Shows how to provide inputs to a pre-defined step, in this case for caching node modules.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nlaunch-templates:\n  template-one:\n    init-steps:\n      - name: Restore Node Modules Cache\n        uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/cache/main.yaml'\n        inputs:\n          key: 'package-lock.json|yarn.lock|pnpm-lock.yaml'\n          paths: |\n            ~/.npm\n            # or ~/.cache/yarn\n            # or .pnpm-store\n          base-branch: 'main'\n```\n\n----------------------------------------\n\nTITLE: Removing Tailwind Config from Angular ng-packagr-lite Executor Options\nDESCRIPTION: This snippet demonstrates how to remove the 'tailwindConfig' option from the executor settings in the project.json configuration file for Angular libraries using NX. It requires no external dependencies, and the primary change is the removal of lines referencing 'tailwindConfig'.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-2-0/remove-tailwind-config-from-ng-packagr-executors.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/angular:ng-packagr-lite\",\n      \"options\": {\n        \"project\": \"libs/lib1/ng-package.json\",\n        \"tailwindConfig\": \"libs/lib1/tailwind.config.js\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/angular:ng-packagr-lite\",\n      \"options\": {\n        \"project\": \"libs/lib1/ng-package.json\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Webpack Migration in TypeScript\nDESCRIPTION: Example of a migration script for adding the babelUpwardRootMode flag. It uses @nx/devkit utilities to read and update project configurations, modifying the Webpack executor options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-07-26-evergreen-tooling-more-than-just-codemods.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  formatFiles,\n  readProjectConfiguration,\n  Tree,\n  updateProjectConfiguration,\n} from '@nx/devkit';\nimport { forEachExecutorOptions } from '@nx/devkit/src/generators/executor-options-utils';\nimport { WebpackExecutorOptions } from '../../executors/webpack/schema';\n\nexport default async function (tree: Tree) {\n  forEachExecutorOptions<WebpackExecutorOptions>(\n    tree,\n    '@nrwl/webpack:webpack',\n    (\n      options: WebpackExecutorOptions,\n      projectName,\n      targetName,\n      _configurationName\n    ) => {\n      if (options.babelUpwardRootMode !== undefined) {\n        return;\n      }\n\n      typconst projectConfiguration = readProjectConfiguration(tree, projectName);\n      projectConfiguration.targets[targetName].options.babelUpwardRootMode =\n        true;\n      updateProjectConfiguration(tree, projectName, projectConfiguration);\n    }\n  );\n\n  await formatFiles(tree);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing view-logs Command in Nx CLI\nDESCRIPTION: This command enables viewing and interacting with logs via Nx Cloud's advanced analytic UI for debugging. It requires connecting the workspace to Nx Cloud and uploading recent run metrics (not artifacts).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/view-logs.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx view-logs\n```\n\n----------------------------------------\n\nTITLE: Building a Package with NPM\nDESCRIPTION: This shell command builds a specific package within the NPM workspace using the `npm run build` command. The `-w` flag specifies the workspace to target, in this case, the `@tuskdesign/animals` package. This command executes the `build` script defined in the `package.json` of the targeted workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/1-introduction/1-welcome/content.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run build -w @tuskdesign/animals\n```\n\n----------------------------------------\n\nTITLE: Updating App Dependencies for Navigation\nDESCRIPTION: Updates the app's package.json to include React Navigation and related dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_23\n\nLANGUAGE: json5\nCODE:\n```\n{\n  name: 'daily-horoscope-app',\n  version: '0.0.1',\n  private: true,\n  dependencies: {\n    // other dependencies\n    '@react-native-masked-view/masked-view': '*',\n    '@react-navigation/native': '*',\n    '@react-navigation/stack': '*',\n    'react-native-gesture-handler': '*',\n    'react-native-reanimated': '*',\n    'react-native-screens': '*',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring @nx/rspack Plugin in nx.json\nDESCRIPTION: JSON configuration for @nx/rspack plugin in nx.json, specifying build, preview, serve and serve-static target names\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/rspack/rspack-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/rspack/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"build\",\n        \"previewTargetName\": \"preview\",\n        \"serveTargetName\": \"serve\",\n        \"serveStaticTargetName\": \"serve-static\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Graph UI Code Block Library\nDESCRIPTION: Executes unit tests for the graph-ui-code-block library using Jest test runner. The command uses Nx to run the tests.\nSOURCE: https://github.com/nrwl/nx/blob/master/graph/ui-code-block/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnx test graph-ui-code-block\n```\n\n----------------------------------------\n\nTITLE: Generating CI Workflow Configuration\nDESCRIPTION: Command to generate a new CI workflow configuration for Nx projects\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/distribute-task-execution.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g ci-workflow\n```\n\n----------------------------------------\n\nTITLE: Updating Angular SSR Imports (After)\nDESCRIPTION: This code snippet shows the updated import statements. It imports CommonEngine and related types from '@angular/ssr/node'. This ensures that the application uses the correct entry point for SSR when using CommonEngine.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-2-0/update-angular-ssr-imports-to-use-node-entry-point.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CommonEngine } from '@angular/ssr/node';\nimport type {\n  CommonEngineOptions,\n  CommonEngineRenderOptions,\n} from '@angular/ssr/node';\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Federation with Version Control\nDESCRIPTION: TypeScript configuration example for Module Federation that demonstrates how to manage module versions with the shared method.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-10-20-nx-17-release.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ModuleFederationConfig } from '@nx/webpack';\n\nconst config: ModuleFederationConfig = {\n  name: 'my-remote',\n  exposes: {\n    './Module': 'apps/my-remote/src/app/remote-entry/entry.module.ts',\n  },\n  remotes: ['federated-is-odd'],\n  shared: (libName, configuration) => {\n    if (libName === 'is-odd') {\n      return {\n        singleton: true,\n        strictVersion: true,\n        requiredVersion: '0.0.1',\n      };\n    }\n    return configuration;\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Entry Point for Lit Application\nDESCRIPTION: HTML file that serves as the entry point for the Lit application, including the custom element and basic styling.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-lit.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"module\" src=\"main.js\"></script>\n    <style>\n      body {\n        font-family: 'Open Sans', sans-serif;\n        font-size: 1.5em;\n        padding-left: 0.5em;\n      }\n    </style>\n  </head>\n  <body>\n    <my-element></my-element>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Modern Webpack configuration with direct plugin specification\nDESCRIPTION: Example of a modern Webpack configuration file after migration, where plugins are specified directly in the configuration object.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/troubleshoot-convert-to-inferred.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async () => ({\n  devServer: devServerOptions,\n  plugins: [new NxAppWebpackPlugin(pluginOptions), new SomePlugin()],\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping Redux Dispatch to Props for Like Action in TypeScript\nDESCRIPTION: This snippet defines a mapDispatchToProps function to connect the 'like' action to component props. It uses the ThunkDispatch type for asynchronous actions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-08-state-management.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  likesActions,\n  LikesEntity,\n  RootState,\n} from '@nx-expo-monorepo/states/cat';\nimport { AnyAction, ThunkDispatch } from '@reduxjs/toolkit';\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<RootState, void, AnyAction>\n) => {\n  return {\n    like(item: LikesEntity) {\n      dispatch(likesActions.like(item));\n    },\n  };\n};\n\ntype mapDispatchToPropsType = ReturnType<typeof mapDispatchToProps>;\n\ntype FactsProps = mapDispatchToPropsType;\n\nexport { mapDispatchToProps };\nexport type { FactsProps };\n```\n\n----------------------------------------\n\nTITLE: Adding serve target to project.json (Nx)\nDESCRIPTION: This snippet shows how to add a 'serve' target to the `project.json` file using the `addProjectConfiguration` function from `@nx/devkit`.  The target defines a command to execute `npx react-scripts start` when the 'serve' target is run.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-10-create-your-own-create-react-app-cli.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ...\n  addProjectConfiguration,\n  ...\n} from '@nx/devkit';\n...\n\nexport default async function (tree: Tree, options: PresetGeneratorSchema) {\n  ...\n\n  addProjectConfiguration(tree, options.name, {\n    root: projectRoot,\n    projectType: 'application',\n    targets: {\n      serve: {\n        command: \"npx react-scripts start\",\n      }\n    },\n  });\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests\nDESCRIPTION: This command runs end-to-end (E2E) tests for a Next.js application. It typically uses a tool like Cypress to simulate user interactions and verify the application's behavior in a browser environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n\"nx e2e my-new-app-e2e\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace Level Named Inputs in Nx\nDESCRIPTION: Shows how to define named inputs at the workspace level in nx.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/inputs.md#2025-04-22_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"namedInputs\": {\n    \"default\": [\"{projectRoot}/**/*\"] // Default Inputs\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EAS CLI for Expo Build\nDESCRIPTION: Command to install the Expo Application Services (EAS) CLI globally. This tool is used for building app binaries for Expo and React Native projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-24-step-by-step-guide-to-creating-an-expo-monorepo-with-nx.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g eas-cli\n```\n\n----------------------------------------\n\nTITLE: Creating a Remix Application with NPX\nDESCRIPTION: Command to create a new Remix application within the apps directory of the monorepo using the official Remix setup tool.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd apps\nnpx create-remix@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with React and Workspaces\nDESCRIPTION: Shows how to create an Nx workspace with React preset and experimental workspaces support.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-06-nx-update-20-3.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest --preset=react --workspaces\n```\n\n----------------------------------------\n\nTITLE: Basic Nx Import Command Usage\nDESCRIPTION: Demonstrates the basic syntax for importing a project using nx import with a local file path.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-10-29-nx-import.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx import ../my-side-project\n```\n\n----------------------------------------\n\nTITLE: Nx Project File Structure for Generators\nDESCRIPTION: Defines the recommended file structure for creating generators in an Nx workspace, including template and configuration files\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/creating-files.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhappynrwl/\n├── apps/\n├── libs/\n│   └── my-plugin\n│       └── src\n│           └── generators\n│               └── my-generator/\n│                    ├── files\n│                    │   └── NOTES.md\n│                    ├── index.ts\n│                    └── schema.json\n```\n\n----------------------------------------\n\nTITLE: Installing and Generating Nx Plugin\nDESCRIPTION: Commands to add the Nx plugin package and generate a new plugin in the tools/recommended directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/organization-specific-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx add @nx/plugin\nnpx nx g @nx/plugin:plugin tools/recommended\n```\n\n----------------------------------------\n\nTITLE: Conformance Configuration in nx.json\nDESCRIPTION: This JSONC snippet illustrates a sample configuration for the `@nx/conformance` plugin within the `nx.json` file. It includes settings for a rule, options, and project scope, defining how conformance checks are applied.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/conformance/conformance-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"conformance\": {\n    \"rules\": [\n      {\n        /**\n         * Relative path to a local rule implementation or node_module path.\n         */\n        \"rule\": \"@nx/conformance/enforce-project-boundaries\",\n        /**\n         * Rule specific configuration options. (Optional)\n         */\n        \"options\": {},\n        /**\n         * The projects array allows users to opt in or out of violations for specific projects being reported by the current rule.\n         * The array can contain any valid matchers for findMatchingProjects(), by default the implied value is [\"*\"]. (Optional)\n         */\n        \"projects\": [\"*\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/nest plugin in an existing Nx workspace\nDESCRIPTION: Commands to add the @nx/nest plugin to an existing Nx workspace, with different instructions for Nx 18+ and earlier versions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nest/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/nest\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/nest\n```\n\n----------------------------------------\n\nTITLE: Installing Nx in a Non-JavaScript Repository\nDESCRIPTION: Command to initialize Nx in a folder without a package.json file. This sets up Nx for non-JavaScript repositories by containing all Nx CLI components within a .nx folder.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/getting-started/installation.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx init\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Commands\nDESCRIPTION: Configuration for running multiple commands sequentially using parallel: false option.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/docs/run-commands-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"create-script\": {\n    \"executor\": \"nx:run-commands\",\n    \"options\": {\n        \"commands\": [\n          \"mkdir -p apps/frontend/scripts\",\n          \"touch apps/frontend/scripts/my-script.sh\",\n          \"chmod +x apps/frontend/scripts/my-script.sh\"\n        ],\n        \"parallel\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/shared-fs-cache Plugin in Nx\nDESCRIPTION: This command adds the @nx/shared-fs-cache NPM package to your Nx workspace and configures it automatically. It also guides you through generating a new activation key.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/shared-fs-cache/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/shared-fs-cache\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n Locales in Project JSON\nDESCRIPTION: Define source locale and translation file configurations for internationalization in project.json. Specifies the source locale as en-GB and includes a French translation file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/internationalization.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-app\",\n  \"i18n\": {\n    \"sourceLocale\": \"en-GB\",\n    \"locales\": {\n      \"fr\": {\n        \"translation\": \"src/locale/messages.fr.xlf\"\n      }\n    }\n  },\n  \"targets\": {\n    \"extract-i18n\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Library\nDESCRIPTION: Command to generate a new Angular library in an Nx workspace with default configurations for ESLint and Jest.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:lib libs/libName\n```\n\n----------------------------------------\n\nTITLE: Creating project.json for Tailwind Preset Library\nDESCRIPTION: This JSON snippet shows the configuration for the Tailwind preset library in the project.json file, defining it as a library type project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projectType\": \"library\",\n  \"root\": \"libs/tailwind-preset\",\n  \"sourceRoot\": \"libs/tailwind-preset\",\n  \"targets\": {},\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Storybook Configuration for Vue Project\nDESCRIPTION: This command generates the Storybook configuration for a specific Vue project within the Nx workspace. Replace 'project-name' with the actual name of your Vue project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/plugin-vue.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/vue:storybook-configuration project-name\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Nuxt Application\nDESCRIPTION: Command to generate a Nuxt application in a nested directory structure using the @nx/nuxt:app generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nuxt/docs/application-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nuxt:app apps/nested/myapp\n```\n\n----------------------------------------\n\nTITLE: Wrapping Angular Devkit Schematic Function Definition\nDESCRIPTION: TypeScript function definition for wrapAngularDevkitSchematic that accepts collection name and generator name parameters. Returns a function that takes a Tree host and generator options to execute the schematic.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ngcli_adapter/wrapAngularDevkitSchematic.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwrapAngularDevkitSchematic(collectionName: string, generatorName: string): (host: Tree, generatorOptions: { [k: string]: any; }) => Promise<GeneratorCallback>\n```\n\n----------------------------------------\n\nTITLE: Implementing an Executor with Angular Builder in TypeScript\nDESCRIPTION: An equivalent executor implementation using Angular Devkit (builder). This approach uses RxJS observables for handling asynchronous operations and requires wrapping with the createBuilder function.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/nx-devkit-angular-devkit.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Schema {\n  message: string;\n  allCaps: boolean;\n}\nexport function run(\n  options: Schema,\n  context: BuilderContext\n): Observable<{ success: true }> {\n  if (options.allCaps) {\n    console.log(options.message.toUpperCase());\n  } else {\n    console.log(options.message);\n  }\n  return of({ success: true });\n}\nexport default createBuilder<NextBuildBuilderOptions>(run);\n```\n\n----------------------------------------\n\nTITLE: Installing Packages with Nx Add\nDESCRIPTION: Various package manager commands for adding new packages and running their ng-add generators in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/nx-and-angular-cli.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx add [package]\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm add [package]\\nnx g [package]:ng-add\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add [package]\\nnx g [package]:ng-add\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add [package]\\nnx g [package]:ng-add\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add [package]\\nnx g [package]:ng-add\n```\n\n----------------------------------------\n\nTITLE: Building Node.js Projects with Nx\nDESCRIPTION: Commands to build Node.js applications and buildable libraries using Nx. The output is generated in the 'dist' folder by default.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/node/documents/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-new-app\n\n# For buildable libraries\nnx build my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Setting NX_CLOUD_ACCESS_TOKEN in GitHub Actions Workflow\nDESCRIPTION: This YAML snippet demonstrates how to set the NX_CLOUD_ACCESS_TOKEN environment variable in a GitHub Actions workflow. It uses a secret to securely store the token.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/recipes/access-tokens.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\n# ...\nenv:\n  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps: ...\n```\n\n----------------------------------------\n\nTITLE: Defining TaskGraphExecutor Generic Type Interface in TypeScript\nDESCRIPTION: Defines a type alias for handling batched project target execution. Takes a TaskGraph, options record, overrides, and ExecutorContext as parameters and returns a Promise resolving to either BatchExecutorResult or AsyncIterableIterator of BatchExecutorTaskResult.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/TaskGraphExecutor.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TaskGraphExecutor<T = any> = (\n  taskGraph: TaskGraph,\n  options: Record<string, T>,\n  overrides: T,\n  context: ExecutorContext\n) => Promise<BatchExecutorResult | AsyncIterableIterator<BatchExecutorTaskResult>>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Rspack Plugin in nx.json\nDESCRIPTION: JSON configuration for the @nx/rspack plugin in nx.json, showing customizable target names for build, preview, serve, and serve-static tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/rspack/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/rspack/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"build\",\n        \"previewTargetName\": \"preview\",\n        \"serveTargetName\": \"serve\",\n        \"serveStaticTargetName\": \"serve-static\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Stories with Path Exclusions\nDESCRIPTION: Generates Storybook configuration while ignoring specific paths when generating stories. Useful for excluding components not meant for isolation.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nuxt/docs/storybook-configuration-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/nuxt:storybook-configuration ui --generateStories=true --ignorePaths=\"libs/ui/src/not-stories/**,**/**/src/**/*.other.*,apps/my-app/**/*.something.ts\"\n```\n\n----------------------------------------\n\nTITLE: Package.json Workspaces Configuration\nDESCRIPTION: Illustrates the 'workspaces' field in package.json, used to inform the package manager about workspace package locations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-06-nx-update-20-3.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@my-workspace/source\",\n  \"version\": \"0.0.0\",\n  \"scripts\": {},\n  \"dependencies\": {},\n  \"devDependencies\": {},\n  \"workspaces\": [\"libs/**\", \"packages/**\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Rollup with Babel Compiler\nDESCRIPTION: Configures the build options for Rollup to use babel as the compiler. You need to specify this in the project.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/library-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"build\": {\n  \"executor\": \"@nx/rollup:rollup\",\n  \"options\": {\n    \"compiler\": \"babel\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests Command Sequence\nDESCRIPTION: Shell commands showing how to run and manage E2E tests for the Fastify server\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-02-28-bundling-a-node-api-with-fastify-esbuild-and-nx.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ npx nx serve & # run server in background\n$ npx nx e2e e2e # run test suite\nGET /\n    ✓ should return a message (27 ms)\n\nTest Suites: 1 passed, 1 total\nTests: 1 passed, 1 total\nSnapshots: 0 total\nTime: 0.429 s\nRan all test suites.Tearing down... ——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— >\n\nNX Successfully ran target e2e for project e2e (3s)$ lsof -i:3000 -t | xargs kill # stop server process\n```\n\n----------------------------------------\n\nTITLE: Generating Metafile Output Structure\nDESCRIPTION: Example directory structure showing the output when generating a metafile.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/esbuild/documents/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ndist/libs/mylib/\n├── README.md\n├── index.js\n├── meta.json\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Creating New Nx Workspace with Expo\nDESCRIPTION: Command to create a new Nx workspace preconfigured with Expo setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/expo/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest --preset=expo --appName=your-app-name\n```\n\n----------------------------------------\n\nTITLE: Adding Styles to Angular Storybook Configuration\nDESCRIPTION: This configuration shows how to add stylesheets and style preprocessor options to the Storybook build for Angular projects. It includes the styles array and stylePreprocessorOptions.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/storybook-executor-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"storybook\": {\n  \"executor\": \"@storybook/angular:start-storybook\",\n  \"options\": {\n    \"port\": 4400,\n    \"configDir\": \"libs/ui/.storybook\",\n    \"browserTarget\": \"ui:build\",\n    \"compodoc\": false,\n    \"styles\": [\"some-styles.css\"],\n    \"stylePreprocessorOptions\": {\n          \"includePaths\": [\"some-style-paths\"]\n    }\n  },\n  \"configurations\": {\n    \"ci\": {\n      \"quiet\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Vite Configuration for Inferred Tasks\nDESCRIPTION: Example of changes made to vite.config.ts by the convert-to-inferred generator to support different configurations that were previously defined in project.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/convert-to-inferred.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n/// <reference types='vitest' />\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';\n\n// These options were migrated by @nx/vite:convert-to-inferred from the project.json file.\nconst configValues = { default: {}, development: {}, production: {}, ci: {} };\n\n// Determine the correct configValue to use based on the configuration\nconst nxConfiguration = process.env.NX_TASK_TARGET_CONFIGURATION ?? 'default';\n\nconst options = {\n  ...configValues.default,\n  ...(configValues[nxConfiguration] ?? {}),\n};\n\nexport default defineConfig({\n  root: __dirname,\n  cacheDir: '../../node_modules/.vite/apps/demo',\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Bun Workspaces - JSON\nDESCRIPTION: This JSON snippet configures Bun’s package.json file to set up workspaces, which works similarly to npm and Yarn for linking projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/typescript-project-linking.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workspaces\": [\"apps/*\", \"packages/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Package Version Updates in YAML\nDESCRIPTION: YAML configuration that specifies version increment types for packages. pkg3 is set for a major version bump while pkg4 is set for a minor version increment.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/src/command-line/release/config/test-files/version-plan-3.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npkg3: major\npkg4: minor\n```\n\n----------------------------------------\n\nTITLE: Execute Nx Sync Command - Shell\nDESCRIPTION: Basic command to synchronize workspace files by running all sync generators. Can be executed using global nx installation or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/sync.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx sync\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Cloud Access Token in nx.json (Nx >= 17)\nDESCRIPTION: This JSON snippet shows how to set the Nx Cloud access token directly in the nx.json file for Nx versions 17 and above. Note that this method is not recommended for security reasons.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/recipes/access-tokens.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nxCloudAccessToken\": \"SOMETOKEN\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Schema oneOf Validation Example\nDESCRIPTION: Demonstrates using oneOf to allow multiple value types for sourceMap and optimization properties\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sourceMap\": {\n    \"description\": \"Output sourcemaps. Use 'hidden' for use with error reporting tools without generating sourcemap comment.\",\n    \"default\": true,\n    \"oneOf\": [\n      {\n        \"type\": \"boolean\"\n      },\n      {\n        \"type\": \"string\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Detox Plugin\nDESCRIPTION: JSON configuration for the Nx Detox plugin in nx.json, specifying build, start, and test target names\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/detox/detox-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/detox/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"build\",\n        \"startTargetName\": \"start\",\n        \"testTargetName\": \"test\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Astro Configuration in JavaScript\nDESCRIPTION: Example of an Astro configuration file (astro.config.mjs) that defines the source, public, and output directories for an Astro project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/tooling-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'astro/config';\n\n// https://astro.build/config\nexport default defineConfig({\n  srcDir: './src',\n  publicDir: './public',\n  outDir: './dist',\n});\n```\n\n----------------------------------------\n\nTITLE: Inlining buildable libraries with Nx TSC\nDESCRIPTION: This example demonstrates how to inline buildable libraries using the `@nx/js:tsc` executor with the `external` option set to `none`.  This configuration includes all dependencies in the build output.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/tsc-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"executor\": \"@nx/js:tsc\",\n    \"options\": {\n      \"outputPath\": \"dist/libs/ts-lib\",\n      \"main\": \"libs/ts-lib/src/index.ts\",\n      \"tsConfig\": \"libs/ts-lib/tsconfig.lib.json\",\n      \"assets\": [\"libs/ts-lib/*.md\"],\n      \"external\": \"none\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Jest with SWC and globalSetup from .swcrc\nDESCRIPTION: This snippet configures Jest to use `@swc/jest` for transforming TypeScript files, specifically when the SWC configuration is defined in a `.swcrc` file. It reads the SWC configuration, disables `.swcrc` lookup by SWC core, and sets `module.noInterop` to `false` for compatibility with ES module interop. It also specifies the `globalSetup` file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/jest/documents/overview.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint-disable */\nimport { readFileSync } from 'fs';\n\n// Reading the SWC compilation config and remove the \"exclude\"\n// for the test files to be compiled by SWC\nconst { exclude: _, ...swcJestConfig } = JSON.parse(\n  readFileSync(`${__dirname}/.swcrc`, 'utf-8')\n);\n\n// disable .swcrc look-up by SWC core because we're passing in swcJestConfig ourselves.\n// If we do not disable this, SWC Core will read .swcrc and won't transform our test files due to \"exclude\"\nif (swcJestConfig.swcrc === undefined) {\n  swcJestConfig.swcrc = false;\n}\n\n// jest needs EsModule Interop to find the default exported function\nswcJestConfig.module.noInterop = false;\n\nexport default {\n  globalSetup: '<rootDir>/src/global-setup-swc.ts',\n  transform: {\n    '^.+\\\\.[tj]s$': ['@swc/jest', swcJestConfig],\n  },\n  // other settings\n};\n```\n\n----------------------------------------\n\nTITLE: CI Configuration With Nx Cloud\nDESCRIPTION: YAML configuration for running conformance checks in CI with Nx Cloud integration\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/conformance/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Enforce all conformance rules\n  run: npx nx-cloud record -- npx nx conformance\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Changes After Nx Cloud PR Merge\nDESCRIPTION: This Git command is used to pull the latest changes from the remote repository after merging the Nx Cloud connection PR. It ensures that the local repository is up-to-date with the Nx Cloud configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/3a-fast-ci/2-connect-to-nx-cloud/content.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Playwright Base Configuration\nDESCRIPTION: TypeScript configuration for Playwright including browser projects and base URL settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/playwright/playwright-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  ...,\n  projects: [\n    {\n      name: \"chromium\",\n      use: { ...devices[\"Desktop Chrome\"] },\n    },\n\n    {\n      name: \"firefox\",\n      use: { ...devices[\"Desktop Firefox\"] },\n    },\n\n    {\n      name: \"webkit\",\n      use: { ...devices[\"Desktop Safari\"] },\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Affected Applications with Nx\nDESCRIPTION: This shell command uses the Nx CLI to run the `deploy` task for all applications affected by the current changes. It assumes that the deploy tasks are defined within the corresponding project configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/10-affected/content.mdx#2025-04-22_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n\"npx nx affected -t deploy\"\n```\n\n----------------------------------------\n\nTITLE: Running Mobile Application on iOS\nDESCRIPTION: This shell command executes the run command for the 'mobile' project on the iOS platform using NX. The expected input is the command line syntax, and the intended output is the launch of the app on an iOS simulator or device.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/run-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx run mobile:run-ios\n```\n\n----------------------------------------\n\nTITLE: Using Base Vite Config in project.json\nDESCRIPTION: This snippet demonstrates how to use a base Vite configuration file located in the project root. It sets the configFile option to point to a vite.config.base.ts file, which can be shared across multiple apps or libraries in the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/build-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my-app\": {\n    \"targets\": {\n      \"build\": {\n        \"executor\": \"@nx/vite:build\",\n        \"options\": {\n          \"outputPath\": \"dist/apps/my-app\",\n          \"configFile\": \"vite.config.base.ts\"\n        },\n        \"configurations\": {}\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NgRx Signal State Implementation\nDESCRIPTION: Demonstrates using NgRx Signal State for more structured state management with type safety and immutable updates.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-16-angular-state-management-2025.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { patchState, signalState } from '@ngrx/signals';\nexport class AppStore {\n  readonly state = signalState<Store>({ items: [] });\n\n  addToStore(item: StoreItem) {\n    patchState(this.state, (oldState) => ({\n      ...oldState,\n      items: [...oldState.items, item],\n    }));\n  }\n  removeFromStore(item: StoreItem) {\n    patchState(this.state, (oldState) => ({\n      ...oldState,\n      items: oldState.items.filter((e) => e.id !== item.id),\n    }));\n  }\n  updateStore(item: StoreItem) {\n    patchState(this.state, (oldState) => ({\n      ...oldState,\n      items: oldState.items.map((e) =>\n        e.id === item.id ? { ...item, name: 'bar' } : e\n      ),\n    }));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Non-standard Commit Types\nDESCRIPTION: Introduces a custom non-standard commit type 'awesome' without any specific bump settings, defaulting to 'patch'. This JSON snippet is used for extending the conventional commit type system in Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/customize-conventional-commit-types.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"conventionalCommits\": {\n      \"types\": {\n        \"awesome\": {}\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the convert-to-inferred Generator\nDESCRIPTION: Example of running the convert-to-inferred generator which prompts the user to select a plugin to migrate to inferred tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/convert-to-inferred.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n? Which generator would you like to use? …\n@nx/eslint:convert-to-inferred\n@nx/playwright:convert-to-inferred\n@nx/vite:convert-to-inferred\n\nNone of the above\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/linter for Nx versions below 17\nDESCRIPTION: npm command to install @nx/linter package for Nx versions prior to 17.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/eslint/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/linter\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/eslint-plugin with Nx 18+\nDESCRIPTION: Command to install the @nx/eslint-plugin package in Nx 18+ workspaces using the nx add command. This ensures installing the correct version matching the Nx installation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/eslint/eslint-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Generating a Library with SWC Compiler\nDESCRIPTION: Generates a buildable library using SWC as the compiler by leveraging the @nx/js:swc executor. Requires specifying swc as the bundler.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/library-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/js:lib libs/mylib --bundler=swc\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Targets for All Projects\nDESCRIPTION: Example of using run-many to execute multiple targets (test, build, lint) in parallel for all projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-22-nx-15-4-vite-4-support-a-new-nx-watch-command-and-more.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many --target test build lint\n```\n\n----------------------------------------\n\nTITLE: Displaying Projects with Specific Target in Nx\nDESCRIPTION: This example shows how to list all projects with a 'serve' target using the '--with-target' option.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/show.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx show projects --with-target serve\n```\n\n----------------------------------------\n\nTITLE: Building Storybook for Production\nDESCRIPTION: Command to build the Storybook instance for production deployment, creating a static web application that can be hosted.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/one-storybook-for-all.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx build-storybook storybook-host\n```\n\n----------------------------------------\n\nTITLE: Using the Nx Daemon CLI Command\nDESCRIPTION: This command is used to print information about the Nx Daemon process or start a daemon process. It can be invoked directly using 'nx' if installed globally, or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/daemon.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx daemon\n```\n\n----------------------------------------\n\nTITLE: NxModuleFederationConfigOverride Type Definition\nDESCRIPTION: Type definition for configuration override options in NxModuleFederationPlugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/module-federation/nx-module-federation-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NxModuleFederationConfigOverride = Omit<\n  moduleFederationPlugin.ModuleFederationPluginOptions,\n  'exposes' | 'remotes' | 'name' | 'shared' | 'filename'\n>;\n```\n\n----------------------------------------\n\nTITLE: Executing sync:check Command in Nx CLI\nDESCRIPTION: This command checks that no changes are required after running all sync generators. It can be run using the global nx installation or package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/sync-check.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx sync:check\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Dependency Constraints\nDESCRIPTION: Define dependency constraints using tags in the root ESLint configuration to control which projects can depend on each other\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/enforce-module-boundaries.md#2025-04-22_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"@nx\\/enforce-module-boundaries\": [\n    \"error\",\n    {\n      \"allow\": [],\n      \"depConstraints\": [\n        {\n          \"sourceTag\": \"scope:shared\",\n          \"onlyDependOnLibsWithTags\": [\"scope:shared\"]\n        },\n        {\n          \"sourceTag\": \"scope:admin\",\n          \"onlyDependOnLibsWithTags\": [\"scope:shared\", \"scope:admin\"]\n        },\n        {\n          \"sourceTag\": \"scope:client\",\n          \"onlyDependOnLibsWithTags\": [\"scope:shared\", \"scope:client\"]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Upward Root Mode Configuration\nDESCRIPTION: Configuration example showing how to enable Babel upward root mode for package-specific babel configurations in a monorepo setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/webpack/docs/webpack-build-executor-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json5\nCODE:\n```\n//...\n\"my-app\": {\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/webpack:webpack\",\n      \"options\": {\n        \"webpackConfig\": \"apps/my-app/webpack.config.js\",\n        \"babelUpwardRootMode\": true\n      }\n    },\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linting Projects\nDESCRIPTION: These commands run linters for a Next.js application and a library. They analyze the code for style issues, potential errors, and adherence to coding standards.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n\"nx lint my-new-app\\nnx lint my-new-lib\"\n```\n\n----------------------------------------\n\nTITLE: Run first release\nDESCRIPTION: Runs the `nx release` command with the `--first-release` option to perform the actual release, which includes version updates, changelog generation, commit, tag, and publish.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/publish-rust-crates.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx release --first-release\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS and Android Run Targets in NX\nDESCRIPTION: This JSON configuration defines the run targets for an NX project named 'mobile'. It specifies executors and options to run the application on iOS and Android platforms. The dependencies required are NX and Expo.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/run-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"mobile\",\n  //...\n  \"targets\": {\n    //...\n    \"run-ios\": {\n      \"executor\": \"@nx/expo:run\",\n      \"options\": {\n        \"platform\": \"ios\"\n      }\n    },\n    \"run-android\": {\n      \"executor\": \"@nx/expo:run\",\n      \"options\": {\n        \"platform\": \"android\"\n      }\n    }\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Paper Dependencies\nDESCRIPTION: Commands for installing React Native Paper and its dependencies for material design components. These libraries provide UI components for building mobile applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-24-step-by-step-guide-to-creating-an-expo-monorepo-with-nx.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\\# npm\nnpm install react-native-paper react-native-safe-area-context --save\n\n\\# yarn\nyarn add react-native-paper react-native-safe-area-context\n\n\\# pnpm\npnpm add react-native-paper react-native-safe-area-context --save\n```\n\n----------------------------------------\n\nTITLE: Hashing Array of Strings in JavaScript/TypeScript\nDESCRIPTION: This function takes an array of strings as input and returns a hashed string. It's likely used for generating unique identifiers or checksums based on the content of the array.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/hashArray.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **hashArray**(`content`): `string`\n\n#### Parameters\n\n| Name      | Type       |\n| :-------- | :--------- |\n| `content` | `string`[] |\n\n#### Returns\n\n`string`\n```\n\n----------------------------------------\n\nTITLE: Adding @nx/netlify Package to Existing Project\nDESCRIPTION: Command to add the @nx/netlify package to an existing Nx project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/node-serverless-functions-netlify.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/netlify\n```\n\n----------------------------------------\n\nTITLE: Create Angular Standalone App with Nx CLI\nDESCRIPTION: This command creates a new single-project Nx workspace with an Angular application using the Standalone API.  The `--preset=angular-standalone` and `--standaloneApi` flags configure the workspace and application to use Angular's standalone components feature, omitting NgModules.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-02-16-nx-15-7-node-support-angular-lts-lockfile-pruning.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest ngapp\n  --preset=angular-standalone\n  --standaloneApi\n```\n\n----------------------------------------\n\nTITLE: Migrating withModuleFederation Import Path in TypeScript\nDESCRIPTION: Example showing the before and after states of importing withModuleFederation and withModuleFederationForSSR utilities in a webpack configuration file. The migration involves updating the import path from @nx/react/module-federation to @nx/module-federation/webpack.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/src/migrations/update-20-2-0/migrate-with-mf-import-to-new-package.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  withModuleFederation,\n  withModuleFederationForSSR,\n} from '@nx/react/module-federation';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  withModuleFederation,\n  withModuleFederationForSSR,\n} from '@nx/module-federation/webpack';\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with Cypress in React Standalone Project\nDESCRIPTION: Command to run Cypress E2E tests for a React Standalone preset project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-22-nx-15-4-vite-4-support-a-new-nx-watch-command-and-more.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx e2e e2e\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/owners Plugin for Nx\nDESCRIPTION: Command to install the @nx/owners plugin package using nx add.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/owners/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/owners\n```\n\n----------------------------------------\n\nTITLE: Serving a Package with NPM\nDESCRIPTION: This shell command runs the `serve` script for the `@tuskdesign/zoo` package within the NPM workspace. It uses the `npm run serve` command with the `-w` flag to specify the target workspace. This command is expected to start a development server or execute the package in a serve mode.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/1-introduction/1-welcome/content.mdx#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run serve -w @tuskdesign/zoo\n```\n\n----------------------------------------\n\nTITLE: Creating a Publishable Node.js Library\nDESCRIPTION: This command creates a publishable Node.js library using the Nx CLI. The `--publishable` flag indicates that the library can be published to npm.  `--importPath` sets the npm package name.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/node/node-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/node:lib libs/my-new-lib \\\n--publishable \\\n--importPath=@myorg/my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Generating a Library with TSC Compiler\nDESCRIPTION: Generates a buildable library using tsc as the compiler with the @nx/js:tsc executor. The bundler flag needs to specify tsc.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/library-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/js:lib libs/mylib --bundler=tsc\n```\n\n----------------------------------------\n\nTITLE: Custom Done Conditions Configuration\nDESCRIPTION: Configuration examples for custom completion conditions using readyWhen option.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/docs/run-commands-examples.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"finish-when-ready\": {\n    \"executor\": \"nx:run-commands\",\n    \"options\": {\n        \"commands\": [\n            \"sleep 5 && echo 'FINISHED'\",\n            \"echo 'READY'\"\n        ],\n        \"readyWhen\": \"READY\",\n        \"parallel\": true\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n\"finish-when-multiple-ready\": {\n    \"executor\": \"nx:run-commands\",\n    \"options\": {\n        \"commands\": [\n            \"sleep $[ ( $RANDOM % 10 ) + 1 ] && echo 'READY1' && sleep 3600\",\n            \"sleep $[ ( $RANDOM % 10 ) + 1 ] && echo 'READY2' && sleep 3600\"\n        ],\n        \"readyWhen\": [\"READY1\", \"READY2\"],\n        \"parallel\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Build Configurations in NX\nDESCRIPTION: This JSON snippet defines the configuration option for running the iOS app with a specific Xcode configuration, such as 'Debug' or 'Release'. This allows for more tailored application builds during development and deployment.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/run-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"run-ios\": {\n      \"executor\": \"@nx/expo:run\",\n      \"options\": {\n        \"platform\": \"ios\",\n        \"xcodeConfiguration\": \"Release\"\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Shared Modules in Angular Application Module\nDESCRIPTION: Updates to the app.module.ts file to import shared modules (Lib1Module and Lib2Module) from external libraries. This allows the application to use components exported by these shared libraries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n...\nimport { Lib1Module } from '@angular-tailwind-nx/lib1';\nimport { Lib2Module } from '@angular-tailwind-nx/lib2';\n\n@NgModule({\n  ...\n  imports: [BrowserModule, Lib1Module, Lib2Module],\n  ...\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Tree Interface Method: rename\nDESCRIPTION: Method to rename a file or folder from one path to another\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/Tree.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n▸ rename(from: string, to: string): void\n```\n\n----------------------------------------\n\nTITLE: Exporting Button Component in Library Entry Point\nDESCRIPTION: Updates the library's entry point file to export the newly created button component, making it available for use in other parts of the application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n...\nexport * from './lib/button/button.component';\n```\n\n----------------------------------------\n\nTITLE: Installing Nx in Existing Monorepo\nDESCRIPTION: Command to initialize Nx in an existing monorepo workspace using pnpm or npm package manager.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-09-versioning-and-releasing-packages.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests\nDESCRIPTION: Command to run end-to-end tests for a specific project using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnx e2e e2e-vite # or any other project here\n```\n\n----------------------------------------\n\nTITLE: Generating New React Library with Nx\nDESCRIPTION: This command uses the Nx React plugin to generate a new React library named 'mylib' in the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/templates/react-monorepo/lesson-2/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx g @nx/react:lib mylib\n```\n\n----------------------------------------\n\nTITLE: Serving React store application with checkout file watching\nDESCRIPTION: This command serves the React store application and watches for changes in the checkout application. It enables development on the remote 'checkout' application while serving through the host.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation-with-ssr.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx serve store --devRemotes=checkout\n```\n\n----------------------------------------\n\nTITLE: Tailwind Preset Project Configuration\nDESCRIPTION: Project configuration for the shared Tailwind preset library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-with-angular-projects.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projectType\": \"library\",\n  \"sourceRoot\": \"libs/tailwind-preset\",\n  \"targets\": {},\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Cypress Legacy\nDESCRIPTION: Command to install @nx/cypress package in older Nx workspace versions\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/cypress/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/cypress\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables for App1 Theme\nDESCRIPTION: CSS rules that define the theme values for app1 using CSS custom properties (variables). These define a different color scheme and spacing values than those used in app2, demonstrating theme customization.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_36\n\nLANGUAGE: css\nCODE:\n```\n... :root {\n  /* Colors */\n  --primary-light: #5eead4;\n  --primary: #14b8a6;\n  --primary-dark: #0f766e;\n  --secondary-light: #bae6fd;\n  --secondary: #0ea5e9;\n  --secondary-dark: #0369a1;\n  --white: #ffffff;\n  --black: #000000;\n\n  /* Spacing */\n  --spacing-sm: 0.5rem;\n  --spacing-md: 1rem;\n  --spacing-lg: 1.5rem;\n  --spacing-xl: 2rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Projects in a Monorepo - Text\nDESCRIPTION: This text describes the advantages of shared projects in a monorepo, emphasizing how shared code components can reduce redundancy and streamline development.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/decisions/folder-structure.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n  libs/\n    booking/\n      data-access/           <---- app-specific project\n\n    shared/\n      data-access/           <---- shared project\n\n      seatmap/\n        data-access/         <---- shared project\n        feature-seatmap/     <---- shared project\n```\n\n----------------------------------------\n\nTITLE: Showing Detailed Structure of Products Domain in Angular Project\nDESCRIPTION: Illustrates the organization of the products domain into specialized libraries including features, UI components, and data access.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-18-architecting-angular-applications.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\npackages/products/\n├── data-access/               # API and state management\n├── feat-product-list/         # Product listing feature\n├── feat-product-detail/       # Product detail feature\n├── feat-product-reviews/      # Product reviews feature\n├── ui-product-card/           # Reusable product card component\n└── ui-product-carousel/       # Product carousel component\n```\n\n----------------------------------------\n\nTITLE: Serving a Remix Application for Development\nDESCRIPTION: Starts a development server for a Remix application using Nx's dev command. This runs the application in development mode with hot reloading.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/remix.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx dev myapp\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Release Generation\nDESCRIPTION: JSON configuration to enable GitHub release creation during the release process.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-09-versioning-and-releasing-packages.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"release\": {\n        \"projects\": [\"*\", \"!@tuskdesign/demo\"],\n        \"version\": {\n            \"conventionalCommits\": true\n        },\n        \"changelog\": {\n            \"workspaceChangelog\": {\n                \"createRelease\": \"github\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Terminating Nx Cloud Agents\nDESCRIPTION: Command to stop all agents associated with a CI pipeline execution, now automatically handled by newer Nx Cloud versions\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/nx-cloud-cli.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx-cloud stop-all-agents\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Cache to Use Azure Storage\nDESCRIPTION: This JSONC snippet shows how to configure the Nx cache to use Azure Storage by specifying the container name and account name. The specified container must already exist in the Azure Storage account.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/azure-cache/azure-cache-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"azure\": {\n    \"container\": \"mycontainer\",\n    \"accountName\": \"myaccount\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Storybook Configuration with JavaScript\nDESCRIPTION: This command generates a Storybook configuration for the 'ui' project using the web-components-vite UI framework and JavaScript for configuration files instead of TypeScript.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/configuration-generator-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/storybook:configuration ui --uiFramework=@storybook/web-components-vite --tsConfiguration=false\n```\n\n----------------------------------------\n\nTITLE: Connecting to Nx Cloud\nDESCRIPTION: Command to connect the repository to Nx Cloud for remote caching and task distribution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/tutorial/circle.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx connect\n```\n\n----------------------------------------\n\nTITLE: Installing Express Plugin for Nx <18\nDESCRIPTION: Command to install the @nx/express package using npm for Nx versions below 18.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/express/express-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/express\n```\n\n----------------------------------------\n\nTITLE: Showing Project Details in Nx\nDESCRIPTION: This shell command opens the project details view for a specified project name, revealing registered sync generators for each target.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/sync-generators.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx show project <name>\n```\n\n----------------------------------------\n\nTITLE: S3 Cache Configuration in nx.json\nDESCRIPTION: Basic configuration for S3 cache settings including region, bucket, and encryption key\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/s3-cache/s3-cache-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"s3\": {\n    \"region\": \"us-east-1\",\n    \"bucket\": \"my-bucket\",\n    \"encryptionKey\": \"create-your-own-key\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Serve Task in Nx\nDESCRIPTION: This snippet sets up an inferred serve task for projects with Webpack configurations, using the Webpack plugin within Nx to define the serve functionality. Webpack must be installed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/common-tasks.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\"plugins\":[{\"plugin\":\"@nx/webpack/plugin\",\"options\":{\"serveTargetName\":\"serve\"}}]}\n```\n\n----------------------------------------\n\nTITLE: Creating Shared UI Directory Structure\nDESCRIPTION: Commands to create the directory structure for the shared UI library package.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncd packages\nmkdir shared-ui\n```\n\n----------------------------------------\n\nTITLE: Serving Static Nuxt Application for E2E Testing\nDESCRIPTION: Command to serve static files of a Nuxt application for E2E testing purposes\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nuxt/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx serve-static my-nuxt-app-e2e\n```\n\n----------------------------------------\n\nTITLE: Hashing Multiple Tasks Method Signatures - TypeScript Interface\nDESCRIPTION: Defines three overloads of the hashTasks method for generating hashes from an array of tasks. Supports basic task array hashing, hashing with task graph, and hashing with both task graph and process environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/TaskHasher.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nhashTasks(tasks: Task[]): Promise<Hash[]>;\nhashTasks(tasks: Task[], taskGraph: TaskGraph): Promise<Hash[]>;\nhashTasks(tasks: Task[], taskGraph: TaskGraph, env: ProcessEnv): Promise<Hash[]>;\n```\n\n----------------------------------------\n\nTITLE: Running the format:write command in Nx\nDESCRIPTION: This command overwrites un-formatted files in an Nx project. It can be run using nx directly if installed globally, or through npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/format-write.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx format:write\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nx Workspace with Yarn\nDESCRIPTION: Command to create a new Nx workspace using Yarn package manager. The --pm flag specifies Yarn as the package manager for the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/getting-started/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace --pm yarn\n```\n\n----------------------------------------\n\nTITLE: Updating nx.json Configuration in Nx Workspace (TypeScript)\nDESCRIPTION: This function updates the nx.json configuration file in an Nx workspace. It takes a Tree object representing the file system and an NxJsonConfiguration object as parameters. The function doesn't return a value (void).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/updateNxJson.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **updateNxJson**(`tree`: Tree, `nxJson`: NxJsonConfiguration<string[] | \"*\">): void\n```\n\n----------------------------------------\n\nTITLE: Repository Setup Commands\nDESCRIPTION: Shell commands for cloning the repository and installing dependencies using NPM.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/typescript-packages.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<your-username>/tuskydesign.git\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/node (Nx 18+)\nDESCRIPTION: This command installs the @nx/node plugin in an Nx workspace. It ensures that the correct version of @nx/node is installed, matching the version of nx in the repository.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/node/node-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/node\n```\n\n----------------------------------------\n\nTITLE: Configuring CircleCI for Distributed Task Execution with Nx\nDESCRIPTION: This YAML configuration sets up a CircleCI workflow with a main job and multiple agent jobs for distributed task execution using Nx Cloud. It includes steps for checkout, dependency installation, and running Nx commands with distributed execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/enterprise/dte/circle-ci-dte.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\norbs:\n  nx: nrwl/nx@1.5.1\njobs:\n  main:\n    docker:\n      - image: cimg/node:lts-browsers\n    steps:\n      - checkout\n      - run: npm ci\n      - nx/set-shas\n\n      # Tell Nx Cloud to use DTE and stop agents when the e2e-ci tasks are done\n      - run: npx nx-cloud start-ci-run --distribute-on=\"manual\" --stop-agents-after=e2e-ci\n      # Send logs to Nx Cloud for any CLI command\n      - run: npx nx-cloud record -- nx format:check\n      # Lint, test, build and run e2e on agent jobs for everything affected by a change\n      - run: npx nx affected --base=$NX_BASE --head=$NX_HEAD -t lint,test,build,e2e-ci --parallel=2 --configuration=ci\n  agent:\n    docker:\n      - image: cimg/node:lts-browsers\n    parameters:\n      ordinal:\n        type: integer\n    steps:\n      - checkout\n      - run: npm ci\n      # Wait for instructions from Nx Cloud\n      - run:\n          command: npx nx-cloud start-agent\n          no_output_timeout: 60m\nworkflows:\n  build:\n    jobs:\n      - agent:\n          matrix:\n            parameters:\n              ordinal: [1, 2, 3]\n      - main\n```\n\n----------------------------------------\n\nTITLE: Default Changelog Format Example in Markdown\nDESCRIPTION: This snippet shows the default format of a changelog entry generated by Nx Release. It includes the version number, date, features, and contributor information.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/configure-changelog-format.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 7.9.0 (2024-05-13)\n\n### 🚀 Features\n\n- **rule-tester:** check for missing placeholder data in the message ([#9039](https://github.com/typescript-eslint/typescript-eslint/pull/9039))\n\n### ❤️ Thank You\n\n- Kirk Waiblinger\n- Sheetal Nandi\n- Vinccool96\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Changes from Git Repository\nDESCRIPTION: This command updates the local repository with the latest changes from the remote repository. This ensures that the local workspace has the `nxCloudId` property added to the `nx.json` file after merging the Nx Cloud setup PR.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/3r-fast-ci/2-connect-to-nx-cloud/content.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"git pull\"\n```\n\n----------------------------------------\n\nTITLE: Converting Nx Generator Function Definition\nDESCRIPTION: TypeScript function signature for converting an Nx generator to an Angular Devkit schematic. The function accepts a generic type parameter T and returns a nested function structure that handles the conversion process. It takes an optional flag to skip writing configuration in old format.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/convertNxGenerator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconvertNxGenerator<T>(generator: Generator<T>, skipWritingConfigInOldFormat?: boolean): (generatorOptions: T) => (tree: any, context: any) => Promise<any>\n```\n\n----------------------------------------\n\nTITLE: Configuring nx sync in nx.json\nDESCRIPTION: This code shows how to configure the `nx sync` command, including applying changes automatically, specifying global generators, and disabling specific task sync generators, all within the `nx.json` file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_21\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"sync\": {\n    \"applyChanges\": true,\n    \"globalGenerators\": [\"my-plugin:my-sync-generator\"],\n    \"generatorOptions\": {\n      \"my-plugin:my-sync-generator\": {\n        \"verbose\": true\n      }\n    },\n    \"disabledTaskSyncGenerators\": [\"other-plugin:problematic-generator\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Nx in an Existing CRA Project\nDESCRIPTION: Command to migrate a Create React App (CRA) project to an Nx + React + Vite-based setup. A Webpack-based setup can be maintained by passing the --vite=false flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx init\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components with Nx\nDESCRIPTION: Commands demonstrating how to generate Angular components using Nx generators.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/nx-and-angular.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/angular:component apps/my-app/src/lib/my-component/my-component\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @schematics/angular:component my-component\n```\n\n----------------------------------------\n\nTITLE: Show Project Details\nDESCRIPTION: Command to display detailed information about a specific project, including available targets and configuration options\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/explore-graph.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx show project <project-name> --web\n```\n\n----------------------------------------\n\nTITLE: Project Details Command\nDESCRIPTION: Command to check if a task is marked as cacheable by viewing project details in web format.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/troubleshoot-cache-misses.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx show project <project-name> --web\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with Netlify Preset\nDESCRIPTION: Command to create a new Nx workspace using the Netlify preset, which sets up the necessary configuration for Netlify serverless functions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-05-26-determine-your-user-location-with-netlify-edge-functions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace user-location --preset=@nx/netlify\n```\n\n----------------------------------------\n\nTITLE: Running Migrations with Automatic Commit Creation\nDESCRIPTION: Example of running migrations while automatically creating a dedicated commit for each successfully completed migration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/migrate.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate --run-migrations --create-commits\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Nx Tasks with Cache Example\nDESCRIPTION: Demonstrates running multiple tasks (test, lint, e2e) with Nx's caching system showing cached output results.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n✔  nx run e2e:lint  [existing outputs match the cache, left as is]\n✔  nx run angular-store:lint  [existing outputs match the cache, left as is]\n✔  nx run angular-store:test  [existing outputs match the cache, left as is]\n✔  nx run e2e:e2e  [existing outputs match the cache, left as is]\n\n——————————————————————————————————————————————————————\n\nNX   Successfully ran targets test, lint, e2e for 5 projects (54ms)\n\nNx read the output from the cache instead of running the command for 10 out of 10 tasks.\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests for Doc Viewer Feature\nDESCRIPTION: Command to execute unit tests for the documentation-feature-doc-viewer library using Jest test runner through Nx CLI\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/feature-doc-viewer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx test documentation-feature-doc-viewer\n```\n\n----------------------------------------\n\nTITLE: Configuring Lerna to use Nx in JSON\nDESCRIPTION: This snippet shows how to enable the 'useNx' flag in the lerna.json configuration file to delegate task running to Nx for improved performance.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-05-25-lerna-used-to-walk-now-it-can-fly.md#2025-04-22_snippet_0\n\nLANGUAGE: json5\nCODE:\n```\n{\n  ...\n  \"useNx\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Type Checking in ESBuild\nDESCRIPTION: Configuration to skip TypeScript type checking during build for faster builds. This can be useful in CI/CD pipelines where type checking can be run as a separate step.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/esbuild/docs/esbuild-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"build\": {\n  \"executor\": \"@nx/esbuild:esbuild\",\n  \"options\": {\n    \"main\": \"<app-root>\",\n    \"tsConfig\": \"<app-root>/tsconfig.app.json\",\n    \"outputPath\": \"dist/<app-root>\",\n    \"skipTypeCheck\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Data Access Library Exports\nDESCRIPTION: Exports the todo-related modules including context, API, and todo functionality from the data access library index file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-15-qwikify-your-dev.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from './lib/todo.context';\nexport * from './lib/api';\nexport * from './lib/todo';\n```\n\n----------------------------------------\n\nTITLE: List Workspace Projects\nDESCRIPTION: Terminal command to display a list of all projects in the current Nx workspace, helping developers understand the workspace composition\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/explore-graph.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx show projects\n```\n\n----------------------------------------\n\nTITLE: Serving Vite Application\nDESCRIPTION: Command to serve a Vite application in development mode using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-29-new-nx-experience.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx serve myviteapp\n```\n\n----------------------------------------\n\nTITLE: Configuring Conformance Rules in nx.json\nDESCRIPTION: JSON configuration in nx.json to define conformance rules for the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-25-introducing-nx-powerpack.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"conformance\": {\n        \"rules\": [\n            {\n                \"rule\": \"@nx/conformance/enforce-module-boundaries\",\n                \"projects\": [\"!remix-app-e2e\"],\n                \"options\": {}\n            },\n            {\n                \"rule\": \"@nx/conformance/ensure-owners\",\n                \"projects\": [\"!remix-app-e2e\"]\n            },\n            {\n                \"rule\": \"./tools/local-conformance-rule.ts\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Local Cache Mode in Nx Configuration\nDESCRIPTION: Configuration example showing how to set the local cache mode to 'read-only' to prevent write attempts and related warnings. This is useful when users don't have write permissions to the S3 bucket.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/s3-cache/documents/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"s3\": {\n    \"region\": \"us-east-1\",\n    \"bucket\": \"my-bucket\",\n    \"localMode\": \"read-only\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Angular Schematics in TypeScript Tests\nDESCRIPTION: Example showing how to mock Angular Devkit schematics using mockSchematicsForTesting function. The function accepts a schematics object where keys are collection:schematic identifiers and values are mock implementations that receive a tree and parameters.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ngcli_adapter/mockSchematicsForTesting.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmockSchematicsForTesting({\n  'mycollection:myschematic': (tree, params) => {\n    tree.write('README');\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Nx Activation Key in Environment\nDESCRIPTION: Environment variable configuration for storing the Nx activation key.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/gcs-cache/gcs-cache-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\nNX_KEY=YOUR_ACTIVATION_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Angular Native Builder in project.json\nDESCRIPTION: Example of the new Storybook configuration in project.json that uses the native Storybook Angular executor instead of a custom Nx executor. This change allows direct use of Storybook's native builders for Angular projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-06-09-nx-14-2-angular-v14-storybook-update-lightweight-nx-and-more.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"storybook\": {\n  \"executor\": \"@storybook/angular:start-storybook\",\n  ...\n},\n```\n\n----------------------------------------\n\nTITLE: Building Libraries\nDESCRIPTION: This command builds a library for distribution or reuse in other projects. It compiles the code and generates the necessary files for packaging and deployment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n\"nx build my-new-lib\"\n```\n\n----------------------------------------\n\nTITLE: Adding Nx to an Existing Astro Project\nDESCRIPTION: Use 'nx init' to add Nx to an existing Astro application, configuring caching and remote caching options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-astro.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Enforcing Conformance Rules with Nx Cloud\nDESCRIPTION: This YAML snippet demonstrates how to enforce conformance rules in a CI environment while leveraging Nx Cloud for recording and analysis. The `nx-cloud record` command wraps the `nx conformance` command to capture logs.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/conformance/conformance-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"- name: Enforce all conformance rules\n  run: npx nx-cloud record -- npx nx conformance\"\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Git in Nx Workflow\nDESCRIPTION: Simple Git command to commit all changes with a message, which is a prerequisite for running affected commands in Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -a -m \"some commit message\"\n```\n\n----------------------------------------\n\nTITLE: Configuring an E2E Target (JSON)\nDESCRIPTION: This JSON configuration demonstrates the typical setup of an e2e target in a `project.json` file. It specifies the builder, options, and dependencies for running end-to-end tests with Cypress, including the `devServerTarget` which points to another target to be invoked before the tests are run.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/compose-executors.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"e2e\": {\n    \"builder\": \"@nx/cypress:cypress\",\n    \"options\": {\n      \"cypressConfig\": \"apps/myapp-e2e/cypress.json\",\n      \"tsConfig\": \"apps/myapp-e2e/tsconfig.e2e.json\",\n      \"devServerTarget\": \"myapp:serve\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SCAM to Standalone Component using Nx\nDESCRIPTION: This command-line instruction uses the Nx CLI to generate a Standalone Component from a Single Component Angular Module (SCAM). It requires the specified SCAM to have its NgModule in the same file. The command includes parameters for the component's path and the project name, which are essential for the correct conversion process.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/scam-to-standalone-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:scam-to-standalone --component=libs/mylib/src/lib/myscam/myscam.component.ts --project=mylib\n```\n\n----------------------------------------\n\nTITLE: Initial generated run-commands configuration\nDESCRIPTION: The initial configuration generated by the nx:run-commands generator. This shows the default structure that needs to be modified to support multiple Storybook instances.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/storybook-composition-setup.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"targets\": {\n    // ...\n    \"storybook-composition\": {\n      \"executor\": \"nx:run-commands\",\n      \"outputs\": [],\n      \"options\": {\n        \"command\": \"nx storybook one-composed\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Plugin Workspace via CLI\nDESCRIPTION: This command creates a new Nx workspace preconfigured for plugin development. It uses the `@nx/plugin` schematic to generate the necessary files and configurations for building a CLI and an Nx plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-10-create-your-own-create-react-app-cli.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-plugin my-own-react --create-package-name=create-my-own-react-app\n```\n\n----------------------------------------\n\nTITLE: Cypress Configuration with Custom Options\nDESCRIPTION: This TypeScript snippet shows how additional custom options can be added to the Cypress configuration for advanced component testing scenarios. It extends the existing configuration with extra parameters that can help in customization.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress';\nimport { nxComponentTestingPreset } from '@nx/angular/plugins/component-testing';\n\nexport default defineConfig({\n  component: {\n    ...nxComponentTestingPreset(__filename),\n    // extra options here\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Target Execution for Affected Projects\nDESCRIPTION: Running multiple targets (lint, test, build) for affected projects. Requires Nx v15.4+.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/affected.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t lint test build\n```\n\n----------------------------------------\n\nTITLE: Configuring Source File Inputs in Nx\nDESCRIPTION: Demonstrates how to configure source file inputs for Nx cache computation using projectRoot and workspaceRoot patterns, including file inclusion and exclusion patterns.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/inputs.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n\"inputs\": {\n  \"{projectRoot}/**/*\", // All files in a project\n  \"{workspaceRoot}/.gitignore\", // A specific file in the workspace\n  \"{projectRoot}/**/*.ts\", // A glob pattern for files\n  \"!{projectRoot}/**/*.spec.ts\" // Excluding files matching a glob pattern\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow with Google Cloud Authentication\nDESCRIPTION: GitHub Actions workflow configuration showing Google Cloud authentication setup using Workload Identity Federation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/gcs-cache/gcs-cache-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\n...\npermissions:\n  id-token: write\n  ...\n\njobs:\n  main:\n    env:\n      NX_KEY: ${{ secrets.NX_KEY }}\n    runs-on: ubuntu-latest\n    steps:\n        ...\n\n      - id: 'auth'\n        name: 'Authenticate to Google Cloud'\n        uses: 'google-github-actions/auth@v2'\n        with:\n          token_format: 'access_token'\n          workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'\n          service_account: 'my-service-account@my-project.iam.gserviceaccount.com'\n\n      - name: 'Set up Cloud SDK'\n        uses: 'google-github-actions/setup-gcloud@v2'\n        with:\n          version: '>= 363.0.0'\n\n        ...\n\n      - run: pnpm exec nx affected -t lint test build\n```\n\n----------------------------------------\n\nTITLE: Combining Nx Watch with Nx Affected\nDESCRIPTION: Command that watches all projects and runs affected tests when files change, utilizing the $NX_FILE_CHANGES variable.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-22-nx-15-4-vite-4-support-a-new-nx-watch-command-and-more.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx -c 'nx watch –all – npx nx affected --target=test --files=$NX_FILE_CHANGES'\n```\n\n----------------------------------------\n\nTITLE: Enabling Caching for Targets in nx.json\nDESCRIPTION: This snippet demonstrates how to enable caching for a specific target by setting the `cache` property to `true` within the `targetDefaults` section of the `nx.json` file. This example enables caching for the `test` target.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"test\": {\n      \"cache\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nx Plugin\nDESCRIPTION: Command to create a new Nx plugin named 'nx-astro' using the create-nx-plugin utility.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/tooling-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-plugin nx-astro\n```\n\n----------------------------------------\n\nTITLE: Create Nx Workspace with Preset\nDESCRIPTION: Creates a new Nx workspace using a specified preset. This ensures consistency in workspace setup across an organization.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-10-tailoring-nx-for-your-organization.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest react-monorepo --preset=react-monorepo\n```\n\n----------------------------------------\n\nTITLE: Package Build Scripts Configuration\nDESCRIPTION: NPM scripts for building, type checking, and cleaning TypeScript projects using the build mode.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"ts-monorepo-linking\",\n  \"scripts\": {\n    \"dev\": \"tsx --tsconfig tsconfig.base.json apps/myapp/src/index.ts\",\n    \"build\": \"tsc --build\",\n    \"clean\": \"tsc --build --clean\",\n    \"typecheck\": \"tsc --build --emitDeclarationOnly\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customize commit message and tag pattern\nDESCRIPTION: Configures custom commit message and tag patterns for Nx Release by setting the `releaseTagPattern` and `release.git.commitMessage` properties in `nx.json`.  The `{version}` placeholder is dynamically interpolated with the version number.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/publish-rust-crates.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"releaseTagPattern\": \"release/{version}\",\n    \"git\": {\n      \"commitMessage\": \"chore(release): {version}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding nx sync:check to CI Process\nDESCRIPTION: YAML configuration to add the nx sync:check command to the beginning of the CI process, ensuring workspace configuration is in sync.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/owners/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Ensure the workspace configuration is in sync\n  run: npx nx sync:check\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Dependencies\nDESCRIPTION: Commands to install necessary React Native libraries and utilities for the mobile app.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# npm\nnpm install @react-navigation/native @react-navigation/native-stack react-native-paper react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view --save\n\n# yarn\nyarn add @react-navigation/native @react-navigation/native-stack react-native-paper react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view\n```\n\n----------------------------------------\n\nTITLE: Dynamic Project Name Usage\nDESCRIPTION: Use the current project name in the build command with environment variable.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/affected.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t build --tag=$NX_TASK_TARGET_PROJECT:latest\n```\n\n----------------------------------------\n\nTITLE: Install NPM Packages and CocoaPods\nDESCRIPTION: Configuration to automatically install NPM packages and CocoaPods during prebuild using the install option\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/prebuild-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"prebuild\": {\n  \"executor\": \"@nx/expo:prebuild\",\n  \"options\": {\n    \"install\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/webpack Plugin in Nx <18\nDESCRIPTION: This command installs the @nx/webpack package as a dev dependency in Nx versions prior to 18.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/webpack/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/webpack\n```\n\n----------------------------------------\n\nTITLE: Configuring the build-list target in project.json\nDESCRIPTION: This snippet configures the `build-list` target in the `project.json` file to use the `@nx/expo:build-list` executor. This executor is responsible for fetching and displaying the build status of an Expo application. The `options` object can be used to configure the behavior of the executor.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/build-list-examples.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"mobile\",\n  //...\n  \"targets\": {\n    //...\n    \"build-list\": {\n      \"executor\": \"@nx/expo:build-list\",\n      \"options\": {}\n    }\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing @nx/angular Capabilities\nDESCRIPTION: This command lists all available generators and executors in the @nx/angular plugin. It provides an overview of the plugin's capabilities for Angular development in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx list @nx/angular\n```\n\n----------------------------------------\n\nTITLE: Basic Nx Watch Command Usage\nDESCRIPTION: Basic syntax for using the nx watch command in shell\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/watch.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx watch\n```\n\n----------------------------------------\n\nTITLE: Generating Basic React Application with Nx\nDESCRIPTION: Creates a simple React application named 'my-app' using the Nx generator command.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/application-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react:application apps/my-app\n```\n\n----------------------------------------\n\nTITLE: Application Styles with CSS Variables\nDESCRIPTION: CSS files for different applications defining their unique theme values using CSS variables that map to the shared configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-with-angular-projects.md#2025-04-22_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Colors */\n  --primary-light: #5eead4;\n  --primary: #14b8a6;\n  --primary-dark: #0f766e;\n  --secondary-light: #bae6fd;\n  --secondary: #0ea5e9;\n  --secondary-dark: #0369a1;\n  --white: #ffffff;\n  --black: #000000;\n\n  /* Spacing */\n  --spacing-sm: 0.5rem;\n  --spacing-md: 1rem;\n  --spacing-lg: 1.5rem;\n  --spacing-xl: 2rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nx Migration Scripts\nDESCRIPTION: Command to execute necessary migration scripts after updating Nx dependencies\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-10-14-whats-new-in-nx-15.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Test Task in Nx\nDESCRIPTION: This snippet configures an inferred test task for projects using Jest. The Jest plugin is integrated into the Nx configuration to handle test execution. Jest must be installed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/common-tasks.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\"plugins\":[{\"plugin\":\"@nx/jest/plugin\",\"options\":{\"targetName\":\"test\"}}]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Agents with a Default Changeset (YAML)\nDESCRIPTION: This snippet shows how to configure dynamic agents using a default changeset in a `distribution-config.yaml` file. The default changeset defines the number and type of agents to use for all PRs.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/features/dynamic-agents.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndistribute-on:\n  default: 3 linux-medium-js\n```\n\n----------------------------------------\n\nTITLE: Running Project Crystal Conversion\nDESCRIPTION: Shell command to convert projects to use Nx Project Crystal inferred tasks system.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-08-01-nx-19-5-update.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g convert-to-inferred\n```\n\n----------------------------------------\n\nTITLE: Launch Nx Project Graph Visualization\nDESCRIPTION: Command to open an interactive browser window showing the project graph of the current Nx workspace, enabling visual exploration of project dependencies\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/explore-graph.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx graph\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for React Monorepo Products Library\nDESCRIPTION: This command executes the unit tests for the '@react-monorepo/products' library using Vitest, a test runner for Vite-based projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/6-create-local-library/_solution/libs/products/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnx test @react-monorepo/products\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Build Target in Nx\nDESCRIPTION: Shows how to configure a basic build target using nx:run-script executor to run a custom build script.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/docs/run-script-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"targets\": {\n    \"build\": {\n        \"executor\": \"nx:run-script\",\n        \"options\": {\n            \"script\": \"build-my-project\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Circle CI Workflow Configuration\nDESCRIPTION: YAML configuration for Circle CI workflow, including job setup, Nx Cloud integration, and affected commands.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/tutorial/circle.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\n\norbs:\n  nx: nrwl/nx@1.6.2\n\njobs:\n  main:\n    docker:\n      - image: cimg/node:lts-browsers\n    steps:\n      - checkout\n\n      - run:\n          name: Install PNPM\n          command: npm install --prefix=$HOME/.local -g pnpm@8\n\n      # This enables task distribution via Nx Cloud\n      # Run this command as early as possible, before dependencies are installed\n      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun\n      # Connect your workspace by running \"nx connect\" and uncomment this line to enable task distribution\n      # - run: pnpm dlx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\" --stop-agents-after=\"e2e-ci\"\n\n      - run: pnpm install --frozen-lockfile\n      - nx/set-shas:\n          main-branch-name: 'main'\n\n      # Prepend any command with \"nx-cloud record --\" to record its logs to Nx Cloud\n      # - run: pnpm exec nx-cloud record -- echo Hello World\n      - run: pnpm exec nx affected --base=$NX_BASE --head=$NX_HEAD -t lint test build e2e-ci\n\nworkflows:\n  version: 2\n\n  ci:\n    jobs:\n      - main\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Parallelism in nx.json\nDESCRIPTION: JSON configuration showing how to disable parallelism for specific e2e test targets in nx.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-08-01-nx-19-5-update.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"e2e-**/*\": {\n      \"parallelism\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Legacy Cache Configuration in nx.json\nDESCRIPTION: Shows the process of adding useLegacyCache flag to nx.json configuration file. This setting should be set to true for migrating workspaces, unless enableDbCache was previously set to true.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/src/migrations/update-20-0-1/use-legacy-cache.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {},\n  \"useLegacyCache\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Step Template in YAML\nDESCRIPTION: Example of a custom step definition in YAML format. It includes the step name, description, runtime environment, script paths, and input definitions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/custom-steps.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'Custom Step'\ndescription: 'This is a custom step that does XYZ.'\ndefinition:\n  using: 'node'\n  main: './scripts/custom-script.js'\n  post: './scripts/post-custom-script.js'\ninputs:\n  - name: 'input1'\n    description: 'Description for input1'\n    default: 'default_value'\n    required: true\n  - name: 'input2'\n    description: 'Description for input2'\n    required: false\n```\n\n----------------------------------------\n\nTITLE: Running Nx Serve Command\nDESCRIPTION: Example of running the serve command using Nx CLI instead of Angular CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/nx-and-angular.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx serve\n```\n\n----------------------------------------\n\nTITLE: Running Nx Migration Scripts\nDESCRIPTION: Command to execute necessary migration scripts after updating Nx dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-10-20-nx-17-release.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Defining ImplicitDependency Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the ImplicitDependency type alias as an object with three properties: source, target, and type. It represents an implicit dependency between two projects in a ProjectGraph without an explicit reference in code.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ImplicitDependency.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **ImplicitDependency**: `Object`\n\n#### Type declaration\n\n| Name     | Type                                                                | Description                                                                                                                |\n| :------- | :------------------------------------------------------------------ | :------------------------------------------------------------------------------------------------------------------------- |\n| `source` | `string`                                                            | The name of a [ProjectGraphProjectNode](../../devkit/documents/ProjectGraphProjectNode) depending on the target project    |\n| `target` | `string`                                                            | The name of a [ProjectGraphProjectNode](../../devkit/documents/ProjectGraphProjectNode) that the source project depends on |\n| `type`   | typeof [`implicit`](../../devkit/documents/DependencyType#implicit) | -                                                                                                                          |\n```\n\n----------------------------------------\n\nTITLE: Generating Cypress Component Configuration for a Project using Nx\nDESCRIPTION: This command generates a Cypress component configuration for a specific project within the Nx workspace. It adds required files without any pre-configured Cypress settings. It is recommended to use a framework-specific generator instead of this direct call to `cypress-component-configuration`.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g cypress-component-configuration --project=my-cool-project\n```\n\n----------------------------------------\n\nTITLE: Pulling latest changes after Nx Cloud PR merge\nDESCRIPTION: After merging the Nx Cloud setup PR, this command updates your local repository with the latest changes, including the new Nx Cloud configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/4-fast-ci/2-connect-to-nx-cloud/content.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Removing Projects from Nx Workspace\nDESCRIPTION: Command to remove a project named 'my-lib' from the workspace, including its files and configurations\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/workspace/workspace-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/workspace:remove my-lib\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Module Federation in Rspack\nDESCRIPTION: Shows how to set up NxModuleFederationPlugin for client-side rendering in rspack.config.ts. Includes configuration of both NxModuleFederationPlugin and NxModuleFederationDevServerPlugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/module-federation/nx-module-federation-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  NxModuleFederationPlugin,\n  NxModuleFederationDevServerPlugin,\n} from '@nx/module-federation/rspack';\nimport config from './module-federation.config';\n\nexport default {\n  ...otherRspackConfigOptions,\n  plugins: [\n    new NxModuleFederationPlugin({\n      config,\n    }),\n    new NxModuleFederationDevServerPlugin({\n      config,\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Generating a JavaScript Library with Nx\nDESCRIPTION: Use Nx to generate a JavaScript library project for reusable Astro components.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-astro.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/js:lib libs/ui --minimal\n```\n\n----------------------------------------\n\nTITLE: Single Version for All Packages Example (Markdown)\nDESCRIPTION: This markdown snippet demonstrates the structure of a version plan file that uses a single version for all packages. The __default__ key in the Front Matter YAML indicates that all projects will receive the same version bump, simplifying version management for workspaces with multiple packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/file-based-versioning-version-plans.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\n__default__: minor\n---\n\nThis is an awesome change!\n\n```\n\n----------------------------------------\n\nTITLE: Using Nx Import Command in Shell\nDESCRIPTION: Basic usage syntax for the nx import command. The command requires a source repository and destination directory as arguments. Can be invoked using nx directly (if installed globally) or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/import.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx import [sourceRepository] [destinationDirectory]\n```\n\n----------------------------------------\n\nTITLE: Example React Component with Invalid Import\nDESCRIPTION: React component demonstrating a module boundary violation by importing from a restricted library\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport styles from './products.module.css';\n\n// This import is not allowed 👇\nimport { Orders } from '@react-monorepo/orders';\n\nexport function Products() {\n  return (\n    <div className={styles['container']}>\n      <h1>Welcome to Products!</h1>\n      <p>This is a change. 👋</p>\n    </div>\n  );\n}\n\nexport default Products;\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Orders Library in Nx\nDESCRIPTION: Executes the unit tests for the 'orders' library using the Nx CLI command. This command is typically run in the terminal within the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/6-create-local-library/_solution/libs/orders/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx test orders\n```\n\n----------------------------------------\n\nTITLE: Project Configuration for Component Testing\nDESCRIPTION: Nx project configuration file showing the component-test target configuration\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"component-test\": {\n      \"executor\": \"@nx\\/cypress:cypress\",\n      \"options\": {\n        \"cypressConfig\": \"<path-to-project-root>\\/cypress.config.ts\",\n        \"testingType\": \"component\",\n        \"skipServe\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Preprocessor for Vite\nDESCRIPTION: Svelte configuration file to set up the Vite preprocessor for Svelte components.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-svelte.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\nexport default {\n  // Consult https://svelte.dev/docs#compile-time-svelte-preprocess\n  // for more information about preprocessors\n  preprocess: vitePreprocess(),\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Nx Version Command\nDESCRIPTION: Command to properly update Nx versions while maintaining plugin compatibility.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/keep-nx-versions-in-sync.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate <version>\n```\n\n----------------------------------------\n\nTITLE: Building Nx Workspace Plugin\nDESCRIPTION: Command to build the workspace plugin library using Nx build system.\nSOURCE: https://github.com/nrwl/nx/blob/master/tools/workspace-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx build workspace-plugin\n```\n\n----------------------------------------\n\nTITLE: Example of Import Path Resolution\nDESCRIPTION: Demonstrates how absolute imports across library boundaries are automatically fixed by the Module Boundary lint rule.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-08-02-nx-14-5-cypess-v10-output-globs-linter-perf-react-tailwind-support.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// WRONG\nimport { libSayHi } from 'libs/tslib-a/src/index';\n\n// automatically fixed to\nimport { libSayHi } from '@myorg/tslib-a';\n```\n\n----------------------------------------\n\nTITLE: Creating Indigo Theme CSS File\nDESCRIPTION: Defines an indigo theme CSS file with Tailwind layers and custom CSS variables for colors and spacing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_49\n\nLANGUAGE: css\nCODE:\n```\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Colors */\n  --primary-light: #a5b4fc;\n  --primary: #6366f1;\n  --primary-dark: #4338ca;\n  --secondary-light: #e9d5ff;\n  --secondary: #a855f7;\n  --secondary-dark: #7e22ce;\n  --white: #ffffff;\n  --black: #000000;\n\n  /* Spacing */\n  --spacing-sm: 0.5rem;\n  --spacing-md: 1rem;\n  --spacing-lg: 1.5rem;\n  --spacing-xl: 2rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Rsbuild Configuration\nDESCRIPTION: Command to generate Rsbuild configuration for an existing React or Vue application in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-06-nx-update-20-3.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/rsbuild:configuration\n```\n\n----------------------------------------\n\nTITLE: Building Apps with Nx\nDESCRIPTION: This shell command uses the Nx CLI to run the `build` task for all applications in the monorepo. It relies on the Nx CLI to be installed and properly configured.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/10-affected/content.mdx#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n\"npx nx run-many -t build\"\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Configuration Generator for Angular Projects\nDESCRIPTION: Command to generate Storybook configuration for an individual Angular project using the @nx/angular:storybook-configuration generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/plugin-angular.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:storybook-configuration project-name\n```\n\n----------------------------------------\n\nTITLE: Creating Conventional Commit\nDESCRIPTION: Example of creating a conventional commit for feature addition.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-09-versioning-and-releasing-packages.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -am 'feat(buttons): add new background shadow'\n```\n\n----------------------------------------\n\nTITLE: Creating Package.json Template for Astro Application\nDESCRIPTION: Template file for package.json that will be generated in the new Astro application with the project name dynamically inserted.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/tooling-plugin.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"<%= name %>\",\n  \"dependencies\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a Commit Type in Nx Configuration\nDESCRIPTION: This JSON snippet shows how to disable the 'docs' commit type for both versioning and changelog generation by setting it to false. No dependencies are required as this is a configuration file. Inputs include the commit type, and outputs are modifications in the Nx release behavior.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/customize-conventional-commit-types.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"conventionalCommits\": {\n      \"types\": {\n        \"docs\": false,\n        ...\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/react Plugin in Nx 18+\nDESCRIPTION: Command to add the @nx/react plugin to an Nx workspace for version 18 and above.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/react\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Nx-Enhanced Webpack Plugin\nDESCRIPTION: Example showing how to create and compose custom Nx-enhanced webpack plugins using the composePlugins utility, along with built-in plugins like withNx and withReact.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/webpack-plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { composePlugins } = require('@nx/webpack');\n\nfunction myCustomPlugin() {\n  // `options` and `context` are the target options and\n  // `@nx/webpack:webpack` executor context respectively.\n  return (webpackConfig, { options, context }) => {\n    // Do something with the config.\n    return webpackConfig;\n  };\n}\n\nmodule.export = composePlugins(withNx(), withReact(), myCustomPlugin());\n```\n\n----------------------------------------\n\nTITLE: Defining PreTasksExecution Type Alias in TypeScript\nDESCRIPTION: This code defines a generic type alias PreTasksExecution that represents a function taking options and a context, and returning void or a Promise of void. It uses a generic type parameter TOptions defaulting to unknown.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/PreTasksExecution.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **PreTasksExecution**<`TOptions`>: (`options`: `TOptions` | `undefined`, `context`: [`PreTasksExecutionContext`](../../devkit/documents/PreTasksExecutionContext)) => `void` | `Promise`<`void`>\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json Exports for Multiple Entry Points\nDESCRIPTION: Demonstrates how to define multiple entry points in package.json using the exports field to allow importing specific parts of the library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/define-secondary-entrypoints.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \".\": \"./src/index.js\",\n    \"./foo\": \"./src/foo.js\",\n    \"./bar\": \"./src/bar.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Native Code\nDESCRIPTION: Command to upgrade iOS and Android native code to the latest version\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react-native/react-native-plugin.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/react-native:upgrade-native apps/<your-app-name>\n```\n\n----------------------------------------\n\nTITLE: Project Graph JSON - Second CI Run\nDESCRIPTION: This JSON represents the project graph for the second CI run, where `project2` has been changed. It shows which projects need to be re-run (indicated by ↩︎) and which projects can use the cache (indicated by ✓). The hash remains the same as the structure didn't change, but some individual projects have.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/concepts/reduce-waste.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": \"85fd0561bd88f0bcd8703a9e9369592e2805f390d04982fb2401e700dc9ebc59\",\n  \"projects\": [\n    {\n      \"name\": \"project1 ↩︎\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"project2 ↩︎\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"project3 ✓\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    }\n  ],\n  \"dependencies\": {\n    \"project1 ↩︎\": [{ \"source\": \"project1 ↩︎\", \"target\": \"project2 ↩︎\" }],\n    \"project2 ↩︎\": [{ \"source\": \"project2 ↩︎\", \"target\": \"project3 ✓\" }],\n    \"project3 ✓\": []\n  },\n  \"workspaceLayout\": { \"appsDir\": \"apps\", \"libsDir\": \"libs\" },\n  \"affectedProjectIds\": [\"project1 ↩︎\", \"project2 ↩︎\", \"project3 ✓\"],\n  \"focus\": null,\n  \"groupByFolder\": false,\n  \"exclude\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Generating React Web App with Nx CLI\nDESCRIPTION: Shell command to generate a new React application using Nx workspace generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nrwl/react:app daily-horoscope-app\n```\n\n----------------------------------------\n\nTITLE: Enforcing Conformance Rules in CI (Nx Cloud Enterprise)\nDESCRIPTION: This YAML snippet demonstrates how to enforce conformance rules in a CI environment using Nx Cloud Enterprise. It leverages the `nx-cloud` CLI to run the `conformance:check` command, integrating with Nx Cloud's organization-level conformance rule configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/powerpack/conformance.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Enforce all conformance rules\n  run: npx nx-cloud record -- npx nx-cloud conformance:check\n```\n\n----------------------------------------\n\nTITLE: Running Vite Dev Server Command\nDESCRIPTION: Command to start the Vite dev server for a specific app using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/dev-server-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx serve my-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variable Inputs in Nx\nDESCRIPTION: Shows how to include environment variables in the Nx cache hash computation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/inputs.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n\"inputs\": [\n  { \"env\": \"API_KEY\" } // this will include the value of $API_KEY in the cache hash\n]\n```\n\n----------------------------------------\n\nTITLE: Illustrating Domain-Driven Project Structure for Angular Application\nDESCRIPTION: Demonstrates the organization of an Angular application into domain-specific projects or libraries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-18-architecting-angular-applications.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmyshop/\n├── src/               # Main application\n└── packages/          # Library projects\n    ├── products/      # Product domain\n    ├── orders/        # Order management\n    ├── checkout/      # Checkout process\n    ├── user-management/\n    ├── shipping-logistics/\n    └── ...\n```\n\n----------------------------------------\n\nTITLE: Creating Component with OnPush Change Detection Strategy\nDESCRIPTION: This command creates a component named 'my-component' with an OnPush change detection strategy, which can improve performance by reducing the number of checks Angular performs.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/component-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:component apps/my-app/src/lib/my-component/my-component --changeDetection=OnPush\n```\n\n----------------------------------------\n\nTITLE: Implementing Products in Inventory App\nDESCRIPTION: This snippet demonstrates how to use the shared Products component in a separate Inventory application within the monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/7-share-code/content.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```solution:/apps/inventory/src/app/app.tsx title=\"/apps/inventory/src/app/app.tsx\"\n\n```\n```\n\n----------------------------------------\n\nTITLE: Nx 21 Version Prefix Configuration\nDESCRIPTION: This JSON snippet demonstrates how to configure the `versionPrefix` option to '~' in Nx 21's release configuration.  This setting specifies that all dependencies should use the '~' prefix, indicating patch-level compatibility.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/configuration-version-prefix.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"release\": {\n    \"version\": {\n      \"versionPrefix\": \"~\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Code Ownership with CODEOWNERS\nDESCRIPTION: This snippet demonstrates how to use a CODEOWNERS file in a GitHub repository to define code ownership based on directory structure.  Each line specifies a directory and the GitHub usernames or team names responsible for that directory.  This ensures that changes to specific parts of the codebase require approval from the designated owners.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/decisions/code-ownership.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"/libs/happynrwlapp          julie-happynrwlapp-lead\n/apps/happynrwlapp          julie-happynrwlapp-lead\n/libs/shared/ui             hank-the-ui-guy\n/libs/shared/utils-testing  julie,hank\"\n```\n\n----------------------------------------\n\nTITLE: Running Nx Feature Search Tests\nDESCRIPTION: Command to execute Jest-based unit tests for the nx-dev-feature-search library using the Nx CLI\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/feature-search/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx test nx-dev-feature-search\n```\n\n----------------------------------------\n\nTITLE: Listing Specific Plugin Capabilities\nDESCRIPTION: Example command to list generators and executors available in a specific plugin (@nx/web in this case).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/list.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n nx list @nx/web\n```\n\n----------------------------------------\n\nTITLE: Building Nx Utility Library\nDESCRIPTION: Command for building the utility library using Nx workspace tools\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/2-smart-monorepo/6-sync-ts-references/_solution/packages/util/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx build util\n```\n\n----------------------------------------\n\nTITLE: Building and serving Nest.js applications and libraries in Nx\nDESCRIPTION: Commands to build and serve Nest.js applications and buildable libraries using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nest/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-nest-app\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-nest-lib\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx serve my-nest-app\n```\n\n----------------------------------------\n\nTITLE: Connecting to Nx Cloud using Shell Command\nDESCRIPTION: This command connects your workspace to Nx Cloud, which is a prerequisite for enabling flaky task detection. It uses the 'npx' package runner to execute the 'nx connect' command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/features/flaky-tasks.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx connect\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration in nx.json\nDESCRIPTION: Configuration for AWS credentials directly in nx.json file\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/s3-cache/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"s3\": {\n    \"ssoProfile\": \"default\",\n    \"accessKeyId\": \"MYACCESSKEYID\",\n    \"secretAccessKey\": \"MYSECRETACCESSKEY\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing ESLint Migration - JavaScript\nDESCRIPTION: This JavaScript snippet includes Jest tests that verify changes to '.eslintrc.json' and 'eslint.config.js' files. It focuses on ensuring that the '@angular-eslint/prefer-standalone' rule is appropriately set or unset during migration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-2-0/disable-angular-eslint-prefer-standalone.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\\naddProjectConfiguration,\\nwriteJson,\\ntype ProjectConfiguration,\\ntype ProjectGraph,\\ntype Tree,\\n} from '@nx/devkit';\\nimport { createTreeWithEmptyWorkspace } from '@nx/devkit/testing';\\nimport migration from './disable-angular-eslint-prefer-standalone';\\n\\nlet projectGraph: ProjectGraph;\\njest.mock('@nx/devkit', () => ({\\n...jest.requireActual('@nx/devkit'),\\ncreateProjectGraphAsync: () => Promise.resolve(projectGraph),\\n}));\\n\\ndescribe('disable-angular-eslint-prefer-standalone', () => {\\nlet tree: Tree;\\n\\nbeforeEach(() => {\\ntree = createTreeWithEmptyWorkspace();\\n\\n    const projectConfig: ProjectConfiguration = {\\n      name: 'app1',\\n      root: 'apps/app1',\\n    };\\n    projectGraph = {\\n      dependencies: {\\n        app1: [\\n          {\\n            source: 'app1',\\n            target: 'npm:@angular/core',\\n            type: 'static',\\n          },\\n        ],\\n      },\\n      nodes: {\\n        app1: {\\n          data: projectConfig,\\n          name: 'app1',\\n          type: 'app',\\n        },\\n      },\\n    };\\n    addProjectConfiguration(tree, projectConfig.name, projectConfig);\\n\\n});\\n\\ndescribe('.eslintrc.json', () => {\\nit('should not disable @angular-eslint/prefer-standalone when it is set', async () => {\\nwriteJson(tree, 'apps/app1/.eslintrc.json', {\\noverrides: [\\n{\\nfiles: ['*.ts'],\\nrules: { '@angular-eslint/prefer-standalone': ['error'] },\\n},\\n],\\n});\\n\\n      await migration(tree);\\n\\n      expect(tree.read('apps/app1/.eslintrc.json', 'utf8'))\\n        .toMatchInlineSnapshot(`\\n        \\\"{\\n          \\\"overrides\\\": [\\n            {\\n              \\\"files\\\": [\\\"*.ts\\\"],\\n              \\\"rules\\\": {\\n                \\\"@angular-eslint/prefer-standalone\\\": [\\\"error\\\"]\\n              }\\n            }\\n          ]\\n        }\\n        \\\"\\n      `);\\n    });\\n\\n    it('should not disable @angular-eslint/prefer-standalone when there are multiple overrides for angular eslint and the rule is set in one of them', async () => {\\n      writeJson(tree, 'apps/app1/.eslintrc.json', {\\n        overrides: [\\n          {\\n            files: ['*.ts'],\\n            rules: {\\n              '@angular-eslint/directive-selector': [\\n                'error',\\n                { type: 'attribute', prefix: 'app', style: 'camelCase' },\\n              ],\\n            },\\n          },\\n          {\\n            files: ['*.ts'],\\n            rules: { '@angular-eslint/prefer-standalone': ['error'] },\\n          },\\n        ],\\n      });\\n\\n      await migration(tree);\\n\\n      expect(tree.read('apps/app1/.eslintrc.json', 'utf8'))\\n        .toMatchInlineSnapshot(`\\n        \\\"{\\n          \\\"overrides\\\": [\\n            {\\n              \\\"files\\\": [\\\"*.ts\\\"],\\n              \\\"rules\\\": {\\n                \\\"@angular-eslint/directive-selector\\\": [\\n                  \\\"error\\\",\\n                  {\\n                    \\\"type\\\": \\\"attribute\\\",\\n                    \\\"prefix\\\": \\\"app\\\",\\n                    \\\"style\\\": \\\"camelCase\\\"\\n                  }\\n                ]\\n              }\\n            },\\n            {\\n              \\\"files\\\": [\\\"*.ts\\\"],\\n              \\\"rules\\\": {\\n                \\\"@angular-eslint/prefer-standalone\\\": [\\\"error\\\"]\\n              }\\n            }\\n          ]\\n        }\\n        \\\"\\n      `);\\n    });\\n\\n    it('should disable @angular-eslint/prefer-standalone in an existing override for angular eslint', async () => {\\n      writeJson(tree, 'apps/app1/.eslintrc.json', {\\n        overrides: [\\n          {\\n            files: ['*.ts'],\\n            rules: { 'no-unused-vars': 'error' },\\n          },\\n          {\\n            files: ['*.ts'],\\n            rules: {\\n              '@angular-eslint/directive-selector': [\\n                'error',\\n                { type: 'attribute', prefix: 'app', style: 'camelCase' },\\n              ],\\n            },\\n          },\\n        ],\\n      });\\n\\n      await migration(tree);\\n\\n      expect(tree.read('apps/app1/.eslintrc.json', 'utf8'))\\n        .toMatchInlineSnapshot(`\\n        \\\"{\\n          \\\"overrides\\\": [\\n            {\\n              \\\"files\\\": [\\\"*.ts\\\"],\\n              \\\"rules\\\": {\\n                \\\"no-unused-vars\\\": \\\"error\\\"\\n              }\\n            },\\n            {\\n              \\\"files\\\": [\\\"*.ts\\\"],\\n              \\\"rules\\\": {\\n                \\\"@angular-eslint/directive-selector\\\": [\\n                  \\\"error\\\",\\n                  {\\n                    \\\"type\\\": \\\"attribute\\\",\\n                    \\\"prefix\\\": \\\"app\\\",\\n                    \\\"style\\\": \\\"camelCase\\\"\\n                  }\\n                ],\\n                \\\"@angular-eslint/prefer-standalone\\\": \\\"off\\\"\\n              }\\n            }\\n          ]\\n        }\\n        \\\"\\n      `);\\n    });\\n\\n    it('should disable @angular-eslint/prefer-standalone in an existing override for ts files', async () => {\\n      writeJson(tree, 'apps/app1/.eslintrc.json', {\\n        overrides: [\\n          {\\n            files: ['*.ts'],\\n            rules: { 'no-unused-vars': 'error' },\\n          },\\n        ],\\n      });\\n\\n      await migration(tree);\\n\\n      expect(tree.read('apps/app1/.eslintrc.json', 'utf8'))\\n        .toMatchInlineSnapshot(`\\n        \\\"{\\n          \\\"overrides\\\": [\\n            {\\n              \\\"files\\\": [\\\"*.ts\\\"],\\n              \\\"rules\\\": {\\n                \\\"no-unused-vars\\\": \\\"error\\\",\\n                \\\"@angular-eslint/prefer-standalone\\\": \\\"off\\\"\\n              }\\n            }\\n          ]\\n        }\\n        \\\"\\n      `);\\n    });\\n\\n    it('should disable @angular-eslint/prefer-standalone in a new override', async () => {\\n      writeJson(tree, 'apps/app1/.eslintrc.json', {\\n        overrides: [\\n          {\\n            files: ['*.html'],\\n            rules: { 'some-rule-for-html': 'error' },\\n          },\\n        ],\\n      });\\n\\n      await migration(tree);\\n\\n      expect(tree.read('apps/app1/.eslintrc.json', 'utf8'))\\n        .toMatchInlineSnapshot(`\\n        \\\"{\\n          \\\"overrides\\\": [\\n            {\\n              \\\"files\\\": [\\\"*.html\\\"],\\n              \\\"rules\\\": {\\n                \\\"some-rule-for-html\\\": \\\"error\\\"\\n              }\\n            },\\n            {\\n              \\\"files\\\": [\\\"*.ts\\\"],\\n              \\\"rules\\\": {\\n                \\\"@angular-eslint/prefer-standalone\\\": \\\"off\\\"\\n              }\\n            }\\n          ]\\n        }\\n        \\\"\\n      `);\\n    });\\n\\n});\\n\\ndescribe('flat config', () => {\\nit('should not disable @angular-eslint/prefer-standalone when it is set', async () => {\\ntree.write('eslint.config.js', 'module.exports = [];');\\ntree.write(\\n'apps/app1/eslint.config.js',\\n`module.exports = [\\n          {\\n            files: ['*.ts'],\\n            rules: { '@angular-eslint/prefer-standalone': ['error'] },\\n          },\\n        ];\\n        `\\n);\\n\\n      await migration(tree);\\n\\n      expect(tree.read('apps/app1/eslint.config.js', 'utf8'))\\n        .toMatchInlineSnapshot(`\\n        \\\"module.exports = [\\n          {\\n            files: ['*.ts'],\\n            rules: { '@angular-eslint/prefer-standalone': ['error'] },\\n          },\\n        ];\\n        \\\"\\n      `);\\n    });\\n\\n    it('should not disable @angular-eslint/prefer-standalone when there are multiple overrides for angular eslint and the rule is set in one of them', async () => {\\n      tree.write('eslint.config.js', 'module.exports = [];');\\n      tree.write(\\n        'apps/app1/eslint.config.js',\\n        `module.exports = [\\n          {\\n            files: ['*.ts'],\\n            rules: {\\n              '@angular-eslint/directive-selector': [\\n                'error',\\n                { type: 'attribute', prefix: 'app', style: 'camelCase' },\\n              ],\\n            },\\n          },\\n          {\\n            files: ['*.ts'],\\n            rules: { '@angular-eslint/prefer-standalone': ['error'] },\\n          },\\n        ];\\n        `\\n      );\\n\\n      await migration(tree);\\n\\n      expect(tree.read('apps/app1/eslint.config.js', 'utf8'))\\n        .toMatchInlineSnapshot(`\\n        \\\"module.exports = [\\n          {\\n            files: ['*.ts'],\\n            rules: {\\n              '@angular-eslint/directive-selector': [\\n                'error',\\n                {\\n                  type: 'attribute',\\n                  prefix: 'app',\\n                  style: 'camelCase'\\n                }\\n              ]\\n            }\\n          },\\n          {\\n            files: ['*.ts'],\\n            rules: {\\n              '@angular-eslint/prefer-standalone': [\\\"error\\\"]\\n            }\\n          }\\n        ];\\n        \\\"\\n      `);\\n    });\\n\\n    it('should disable @angular-eslint/prefer-standalone in an existing override for angular eslint', async () => {\\n      tree.write('eslint.config.js', 'module.exports = [];');\\n      tree.write(\\n        'apps/app1/eslint.config.js',\\n        `module.exports = [\\n          {\\n            files: ['*.ts'],\\n            rules: { 'no-unused-vars': 'error' },\\n          },\\n          {\\n            files: ['*.ts'],\\n            rules: {\\n              '@angular-eslint/directive-selector': [\\n                'error',\\n                {\\n                  type: 'attribute',\\n                  prefix: 'app',\\n                  style: 'camelCase'\\n                }\\n              ],\\n              '@angular-eslint/prefer-standalone': 'off'\\n            }\\n          },\\n        ];\\n        `\\n      );\\n\\n      await migration(tree);\\n\\n      expect(tree.read('apps/app1/eslint.config.js', 'utf8'))\\n        .toMatchInlineSnapshot(`\\n        \\\"module.exports = [\\n          {\\n            files: ['*.ts'],\\n            rules: { \\\"no-unused-vars\\\": \\\"error\\\" },\\n          },\\n          {\\n            files: ['*.ts'],\\n            rules: {\\n              '@angular-eslint/directive-selector': [\\n                \\\"error\\\",\\n                {\\n                  \\\"type\\\": \\\"attribute\\\",\\n                  \\\"prefix\\\": \\\"app\\\",\\n                  \\\"style\\\": \\\"camelCase\\\"\\n                }\\n              ]\\n            }\\n          }\\n        ];\\n        \\\"\\n      `);\\n    });\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Nx-Rspack Test Suite\nDESCRIPTION: Example test suite implementation for the nx-rspack package showing configuration of repository, branch and test commands.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-06-20-introducing-nx-ecosystem-ci.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function test(options: RunOptions) {\n    await runInRepo({\n        …options,\n        repo: 'nrwl/nx-labs',\n        branch: 'main',\n        build: ['build rspack'],\n        test: ['test rspack'],\n        e2e: ['e2e rspack-e2e'],\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Nx Workspace with React Preset\nDESCRIPTION: Command to create a new Nx workspace with React preset using the workspaces flag for the new experience\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-29-new-nx-experience.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace tsmono --preset=react --workspaces\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Image for Launch Template\nDESCRIPTION: Shows how to specify the Docker image to be used for the agent machine, which defines the available base software.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlaunch-templates:\n  template-one:\n    image: 'ubuntu22.04-node20.11-v9'\n```\n\n----------------------------------------\n\nTITLE: Using Comma-Delimited Globs in Assignment Rules YAML\nDESCRIPTION: Example of using comma-delimited glob patterns in assignment rules. This configuration matches tasks that meet multiple criteria within a single target.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/assignment-rules.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nassignment-rules:\n  - targets:\n      - 'e2e-ci*,*server-test'\n      - 'lint*'\n    run-on:\n      - agent: linux-large\n        parallelism: 5\n```\n\n----------------------------------------\n\nTITLE: Combine Focus and Exclude\nDESCRIPTION: Command combining focus and exclude options to show specific project dependencies while excluding others\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/graph.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx graph --focus=todos-feature-main --exclude=project-one,project-two\n```\n\n----------------------------------------\n\nTITLE: Updating JSON in File System Tree with TypeScript\nDESCRIPTION: This function updates a JSON value in a file system tree. It takes a tree object, file path, updater function, and optional JSON parsing/serializing options. The function is generic, allowing for type-safe operations on different JSON structures.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/updateJson.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateJson<T, U>(tree: Tree, path: string, updater: (value: T) => U, options?: JsonParseOptions & JsonSerializeOptions): void\n```\n\n----------------------------------------\n\nTITLE: Adding an Nx Plugin to a Monorepo (Shell)\nDESCRIPTION: This command adds the `@nx/vite` plugin to an existing Nx monorepo. It simplifies the plugin adoption process by allowing developers to incrementally add plugins based on their needs.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-05-nx-18-project-crystal.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx add @nx/vite\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/cypress Package\nDESCRIPTION: Commands for installing the @nx/cypress package in an Nx workspace, with different instructions for Nx 18+ and earlier versions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/cypress/cypress-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/cypress\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/cypress\n```\n\n----------------------------------------\n\nTITLE: Nx Plugin Configuration\nDESCRIPTION: Configuration options for @nx/expo plugin in nx.json showing target name customization.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/expo/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/expo/plugin\",\n      \"options\": {\n        \"startTargetName\": \"start\",\n        \"serveTargetName\": \"serve\",\n        \"runIosTargetName\": \"run-ios\",\n        \"runAndroidTargetName\": \"run-android\",\n        \"exportTargetName\": \"export\",\n        \"prebuildTargetName\": \"prebuild\",\n        \"installTargetName\": \"install\",\n        \"buildTargetName\": \"build\",\n        \"submitTargetName\": \"submit\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Image with Dark/Light Mode Support\nDESCRIPTION: HTML markup for displaying the Nx logo with support for dark/light mode using the picture element and media queries. The image adapts based on the user's color scheme preference.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/detox/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"text-align: center;\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring External Dependencies for Nx Task\nDESCRIPTION: JSON configuration snippet showing how to specify external dependencies for a specific Nx task using the new externalDependencies input type.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-07-06-nx-16-5-release.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"mylib\",\n  \"targets\": {\n    \"publish-package\": {\n      \"command\": \"lerna publish\",\n      \"inputs\": [{ \"externalDependencies\": [\"lerna\"] }]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with Custom Preset\nDESCRIPTION: Command to create a new Nx workspace using a custom preset defined in an npm package, allowing for tailored initial setups.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-12-23-single-file-monorepo-config-custom-workspace-presets-improved-tailwind-support-and-more-in-nx-13.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace --preset=your-npm-package-name\n```\n\n----------------------------------------\n\nTITLE: Nx Caching Commands for CI\nDESCRIPTION: Example commands to run build, test, lint, and e2e tasks with Nx caching in a CI environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-06-nx-15-3-standalone-projects-vite-task-graph-and-more.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx build\nnpx nx test\nnpx nx lint\nnpx nx e2e\n```\n\n----------------------------------------\n\nTITLE: Creating a .NET library\nDESCRIPTION: This command uses the `@nx-dotnet/core:lib` generator to create a new .NET library named `dotnet-lib` within the `libs/dotnet-lib` directory. It uses the `classlib` template.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-dotnet.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx-dotnet/core:lib dotnet-lib --directory=libs/dotnet-lib\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Nx Distributed Task Execution\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow for Nx projects, enabling distributed task execution. It defines the main job and agent jobs, handles dependencies installation, and runs Nx commands in parallel.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/enterprise/dte/github-dte.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\n# Needed for nx-set-shas when run on the main branch\npermissions:\n  actions: read\n  contents: read\n\nenv:\n  NX_CLOUD_DISTRIBUTED_EXECUTION: true # this enables DTE\n  NX_BRANCH: ${{ github.event.number || github.ref_name }}\n  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}\n  NPM_TOKEN: ${{ secrets.NPM_TOKEN }} # this is needed if our pipeline publishes to npm\n\njobs:\n  main:\n    name: Nx Cloud - Main Job\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        name: Checkout [Pull Request]\n        if: ${{ github.event_name == 'pull_request' }}\n        with:\n          # By default, PRs will be checked-out based on the Merge Commit, but we want the actual branch HEAD.\n          ref: ${{ github.event.pull_request.head.sha }}\n          # We need to fetch all branches and commits so that Nx affected has a base to compare against.\n          fetch-depth: 0\n          filter: tree:0\n\n      - uses: actions/checkout@v4\n        name: Checkout [Default Branch]\n        if: ${{ github.event_name != 'pull_request' }}\n        with:\n          # We need to fetch all branches and commits so that Nx affected has a base to compare against.\n          fetch-depth: 0\n          filter: tree:0\n\n      # Set node/npm/yarn versions using volta\n      - uses: volta-cli/action@v4\n        with:\n          package-json-path: '${{ github.workspace }}/package.json'\n\n      - name: Use the package manager cache if available\n        uses: actions/setup-node@v3\n        with:\n          node-version: 20\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Check out the default branch\n        run: git branch --track main origin/main\n\n      - name: Initialize the Nx Cloud distributed CI run and stop agents when the build tasks are done\n        run: npx nx-cloud start-ci-run --distribute-on=\"manual\" --stop-agents-after=e2e-ci\n\n      - name: Run commands in parallel\n        run: |\n          # initialize an array to store process IDs (PIDs)\n          pids=()\n\n          # function to run commands and store the PID\n          function run_command() {\n            local command=$1\n            $command &  # run the command in the background\n            pids+=($!)  # store the PID of the background process\n          }\n\n          # list of commands to be run on main has env flag NX_CLOUD_DISTRIBUTED_EXECUTION set to false\n          run_command \"NX_CLOUD_DISTRIBUTED_EXECUTION=false npx nx-cloud record -- nx format:check\"\n\n          # list of commands to be run on agents\n          run_command \"npx nx affected -t lint,test,build,e2e-ci --parallel=3\"\n\n          # wait for all background processes to finish\n          for pid in ${pids[*]}; do\n            if ! wait $pid; then\n              exit 1  # exit with an error status if any process fails\n            fi\n          done\n\n          exit 0 # exits with success status if a all processes complete successfully\n\n  agents:\n    name: Agent ${{ matrix.agent }}\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        # Add more agents here as your repository expands\n        agent: [1, 2, 3]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      # Set node/npm/yarn versions using volta\n      - uses: volta-cli/action@v4\n        with:\n          package-json-path: '${{ github.workspace }}/package.json'\n\n      - name: Use the package manager cache if available\n        uses: actions/setup-node@v3\n        with:\n          node-version: 20\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Start Nx Agent ${{ matrix.agent }}\n        run: npx nx-cloud start-agent\n        env:\n          NX_AGENT_NAME: ${{ matrix.agent }}\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/js Plugin for Astro\nDESCRIPTION: Install the @nx/js plugin to use additional Nx features with Astro projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-astro.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/js@<nx-version>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Nx task graph\nDESCRIPTION: Example command to visualize the graph of tasks that would run for a build command, showcasing the new task graph visualization feature in Nx 16.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-05-02-nx-16-is-here.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx build react --graph\n```\n\n----------------------------------------\n\nTITLE: Creating New Nx Workspace\nDESCRIPTION: Commands for setting up a new Nx workspace with Angular monorepo preset\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-17-modern-angular-testing-with-nx.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest --preset=angular-monorepo --appName=my-app\n```\n\n----------------------------------------\n\nTITLE: Building with External All Flag\nDESCRIPTION: This command shows how to use the external flag with the build command.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/tsc-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx build ts-lib --external=all\n```\n\n----------------------------------------\n\nTITLE: Running the nx import Command in an Nx Workspace\nDESCRIPTION: Demonstrates different ways to run the nx import command, including interactive mode and explicitly providing source repository and destination directory arguments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/import-project.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx import\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx import [sourceRepository] [destinationDirectory]\nnx import ../inventory-app apps/inventory\nnx import https://github.com/myorg/inventory-app.git apps/inventory\n```\n\n----------------------------------------\n\nTITLE: Running the Custom CLI locally\nDESCRIPTION: This command executes the custom CLI locally after it has been published to a local Verdaccio instance. It creates a new Nx workspace named `test` using the published CLI package version 1.0.0.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-10-create-your-own-create-react-app-cli.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd tmp\nnpx create-my-own-react-app@1.0.0 test\n```\n\n----------------------------------------\n\nTITLE: Basic Nx Show Command\nDESCRIPTION: Basic usage of the nx show command to display workspace information\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/show.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx show\n```\n\n----------------------------------------\n\nTITLE: Creating New App in Apps Directory\nDESCRIPTION: Command to generate a new application in the apps/temp directory as part of the manual conversion process.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/standalone-to-monorepo.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g app apps/temp\n```\n\n----------------------------------------\n\nTITLE: Generating a Create Package - Shell\nDESCRIPTION: This command initializes a new Nx plugin workspace while specifying a custom package name for the create package.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/create-install-package.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-plugin my-plugin --create-package-name create-my-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Exclusions in nx.json\nDESCRIPTION: JSON configuration to exclude specific packages from the release process using glob patterns.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-09-versioning-and-releasing-packages.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"release\": {\n        \"projects\": [\"*\", \"!@tuskdesign/demo\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Objects to JSON in TypeScript\nDESCRIPTION: This function serializes a given object to a JSON string. It supports generic types and optional formatting options. By default, it uses 2-space indentation for readability.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/serializeJson.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nserializeJson<T extends object = object>(input: T, options?: JsonSerializeOptions): string\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Boundary Override Rules in Nx\nDESCRIPTION: ESLint configuration demonstrating how to override module boundary rules for specific projects, typically used during development or testing phases.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-12-17-mastering-the-project-boundaries-in-nx.md#2025-04-22_snippet_6\n\nLANGUAGE: json5\nCODE:\n```\n{\n  overrides: [\n    {\n      files: ['*.ts', '*.tsx', '*.js', '*.jsx'],\n      rules: {\n        '@nrwl/nx/enforce-module-boundaries': [\n          'error',\n          {\n            allow: ['a-wip-project', 'this-one-is-broken-so-ignore-it'],\n            depConstraints: [\n            ],\n          },\n        ],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Changes in Storybook Main Config File\nDESCRIPTION: Example of configuration changes in .storybook/main.js|ts for Storybook 7, showing the removal of core field and addition of mandatory framework field\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/storybook/storybook-7-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Old v6.5 configuration\n{\n  core: { builder: 'webpack5' },\n  // other config\n}\n\n// New v7 configuration\n{\n  framework: '@storybook/react-webpack5',\n  // other config\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing TypeScript Project References in JSON\nDESCRIPTION: This JSON configuration for a TypeScript project extends a base configuration and lists project references that rely on Nx's synchronization feature. Updated references ensure all dependencies and project configurations (like tsconfig.lib.json and tsconfig.spec.json) remain consistent and up to date.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/maintain-typescript-monorepos.md#2025-04-22_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"extends\": \"../../tsconfig.base.json\",\n  \"files\": [], // intentionally empty\n  \"references\": [\n    // UPDATED BY NX SYNC\n    // All project dependencies\n    {\n      \"path\": \"../../packages/product-state\"\n    },\n    {\n      \"path\": \"../../packages/ui/buttons\"\n    },\n    // This project's other tsconfig.*.json files\n    {\n      \"path\": \"./tsconfig.lib.json\"\n    },\n    {\n      \"path\": \"./tsconfig.spec.json\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for an Application in apps/myapp/tsconfig.json\nDESCRIPTION: Demonstrates the TypeScript configuration for an application, extending from the base config and adding specific settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../../tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"../../dist\",\n    \"declaration\": true\n  },\n  \"include\": [\"src/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Projects from Affected List in Nx\nDESCRIPTION: This command demonstrates how to show affected projects while excluding end-to-end projects using the '--exclude' option.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/show.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx show projects --affected --exclude=*-e2e\n```\n\n----------------------------------------\n\nTITLE: Creating Robots.txt Template for Astro Applications\nDESCRIPTION: Template for robots.txt file that will be included in the public directory of generated Astro applications to control search engine crawling.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/tooling-plugin.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n# Example: Allow all bots to scan and index your site.\n# Full syntax: https://developers.google.com/search/docs/advanced/robots/create-robots-txt\nUser-agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Module Boundaries Rule\nDESCRIPTION: Example configuration for setting up the @nx/enforce-module-boundaries rule in ESLint. Shows how to add the rule to the ESLint configuration with basic options structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/eslint-plugin/documents/enforce-module-boundaries.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"files\": [\"*.ts\", \"*.tsx\", \"*.js\", \"*.jsx\"],\n      \"rules\": {\n        \"@nx/enforce-module-boundaries\": [\n          \"error\",\n          {\n            // ...rule specific configuration\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring nxCloudId in nx.json for Nx >= 19.7\nDESCRIPTION: This snippet shows how to set up the nxCloudId in nx.json for Nx versions 19.7 and above. The nxCloudId property is used to connect the repository to Nx Cloud.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/recipes/personal-access-tokens.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nxCloudId\": \"SOMEID\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Loader Function from Library Server Entry\nDESCRIPTION: Exports a loader function from the library's server entry point, making it available for import in Remix routes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/remix.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nexport * from './lib/admin/admin.loader';\n```\n\n----------------------------------------\n\nTITLE: Setting Up E2E Test for Nx Astro Plugin\nDESCRIPTION: Updates the beforeAll function in the E2E test to add the nx-astro plugin and generate a test application using the custom application generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/tooling-plugin.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nbeforeAll(() => {\n  projectDirectory = createTestProject();\n\n  // The plugin has been built and published to a local registry in the jest globalSetup\n  // Install the plugin built with the latest source code into the test repo\n  execSync('npx nx add nx-astro@e2e', {\n    cwd: projectDirectory,\n    stdio: 'inherit',\n    env: process.env,\n  });\n  execSync('npx nx g nx-astro:application my-lib', {\n    cwd: projectDirectory,\n    stdio: 'inherit',\n    env: process.env,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Nx Import Command in Shell\nDESCRIPTION: This snippet shows the basic usage of the 'nx import' command. It requires specifying the source repository and destination directory as arguments. The command can be run globally if nx is installed, or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/import.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx import [sourceRepository] [destinationDirectory]\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Query in App.tsx\nDESCRIPTION: Implementation of TanStack Query setup in the main App component with dev tools configuration for web platform.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-08-state-management.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\nimport { Platform } from 'react-native';\n\nconst App = () => {\n  const queryClient = new QueryClient();\n  return (\n    <QueryClientProvider client={queryClient}>\n      {Platform.OS === 'web' && <ReactQueryDevtools />}\n      ...\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: ProjectGraph Interface Structure Definition - TypeScript\nDESCRIPTION: Defines the core structure of a project graph with properties for managing dependencies between projects, external nodes, project nodes, and version information in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ProjectGraph.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProjectGraph {\n  dependencies: Record<string, ProjectGraphDependency[]>;\n  externalNodes?: Record<string, ProjectGraphExternalNode>;\n  nodes: Record<string, ProjectGraphProjectNode>;\n  version?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: NxModuleFederationPlugin Class Definition\nDESCRIPTION: API reference for the NxModuleFederationPlugin class constructor, showing the available options and configuration override parameters.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/module-federation/nx-module-federation-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class NxModuleFederationPlugin {\n  constructor(\n    private _options: {\n      config: ModuleFederationConfig;\n      isServer?: boolean;\n    },\n    private configOverride?: NxModuleFederationConfigOverride\n  ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing mergeConfig from Vite\nDESCRIPTION: This snippet shows how to import the mergeConfig function from Vite, which is required when using viteFinal to properly merge the base configuration with your custom settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/custom-builder-configs.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mergeConfig } from 'vite';\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions CI Configuration with AWS OIDC\nDESCRIPTION: Example GitHub Actions workflow configuration for setting up AWS credentials using OIDC authentication\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/s3-cache/s3-cache-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\n...\npermissions:\n  id-token: write\n  ...\n\njobs:\n  main:\n    env:\n      NX_KEY: ${{ secrets.NX_KEY }}\n    runs-on: ubuntu-latest\n    steps:\n        ...\n\n      - name: 'Configure AWS Credentials'\n        uses: aws-actions/configure-aws-credentials@v4.0.2\n        with:\n          role-to-assume: arn:aws:iam::123456789123:role/GhAIBucketUserRole\n          aws-region: us-east-1\n\n        ...\n\n      - run: pnpm exec nx affected -t lint test build\n```\n\n----------------------------------------\n\nTITLE: Interface Definition for PluginAngularOptions in Rsbuild\nDESCRIPTION: TypeScript interface definition for the PluginAngularOptions type used in createConfig. It includes all the configuration options available for Angular applications built with Rsbuild.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rsbuild/create-config.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PluginAngularOptions extends PluginUnsupportedOptions {\n  aot?: boolean;\n  assets?: AssetElement[];\n  browser?: string;\n  commonChunk?: boolean;\n  devServer?: DevServerOptions;\n  extractLicenses?: boolean;\n  fileReplacements?: FileReplacement[];\n  index?: IndexElement;\n  inlineStyleLanguage?: InlineStyleLanguage;\n  namedChunks?: boolean;\n  optimization?: boolean | OptimizationOptions;\n  outputHashing?: OutputHashing;\n  outputPath?:\n    | string\n    | (Required<Pick<OutputPath, 'base'>> & Partial<OutputPath>);\n  polyfills?: string[];\n  root?: string;\n  scripts?: ScriptOrStyleEntry[];\n  server?: string;\n  skipTypeChecking?: boolean;\n  sourceMap?: boolean | Partial<SourceMap>;\n  ssr?:\n    | boolean\n    | {\n        entry: string;\n        experimentalPlatform?: 'node' | 'neutral';\n      };\n  stylePreprocessorOptions?: StylePreprocessorOptions;\n  styles?: ScriptOrStyleEntry[];\n  tsConfig?: string;\n  useTsProjectReferences?: boolean;\n  vendorChunk?: boolean;\n}\n\nexport interface DevServerOptions extends DevServerUnsupportedOptions {\n  port?: number;\n  ssl?: boolean;\n  sslKey?: string;\n  sslCert?: string;\n  proxyConfig?: string;\n}\n\nexport interface OptimizationOptions {\n  scripts?: boolean;\n  styles?: boolean;\n  fonts?: boolean;\n}\n\nexport type OutputHashing = 'none' | 'all' | 'media' | 'bundles';\nexport type HashFormat = {\n  chunk: string;\n  extract: string;\n  file: string;\n  script: string;\n};\n\nexport interface OutputPath {\n  base: string;\n  browser: string;\n  server: string;\n  media: string;\n}\n\nexport type AssetExpandedDefinition = {\n  glob: string;\n  input: string;\n  ignore?: string[];\n  output?: string;\n};\nexport type AssetElement = AssetExpandedDefinition | string;\nexport type NormalizedAssetElement = AssetExpandedDefinition & {\n  output: string;\n};\nexport type ScriptOrStyleEntry =\n  | string\n  | {\n      input: string;\n      bundleName?: string;\n      inject?: boolean;\n    };\nexport type GlobalEntry = {\n  name: string;\n  files: string[];\n  initial: boolean;\n};\nexport type IndexExpandedDefinition = {\n  input: string;\n  output?: string;\n  preloadInitial?: boolean;\n};\nexport type IndexElement = IndexExpandedDefinition | string | false;\nexport type IndexHtmlTransform = (content: string) => Promise<string>;\nexport type NormalizedIndexElement =\n  | (IndexExpandedDefinition & {\n      insertionOrder: [string, boolean][];\n      transformer: IndexHtmlTransform | undefined;\n    })\n  | false;\n\nexport interface SourceMap {\n  scripts: boolean;\n  styles: boolean;\n  hidden: boolean;\n  vendor: boolean;\n}\n\nexport type InlineStyleExtension = 'css' | 'scss' | 'sass' | 'less';\nexport interface FileReplacement {\n  replace: string;\n  with: string;\n}\nexport interface StylePreprocessorOptions {\n  includePaths?: string[];\n  sass?: Sass;\n}\nexport interface Sass {\n  fatalDeprecations?: DeprecationOrId[];\n  futureDeprecations?: DeprecationOrId[];\n  silenceDeprecations?: DeprecationOrId[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateMetadata<T> Type Alias in TypeScript\nDESCRIPTION: This code defines a generic type alias CreateMetadata<T> that represents a function for creating project metadata. The function takes a ProjectGraph, options of type T or undefined, and a CreateMetadataContext as parameters. It returns ProjectsMetadata or a Promise of ProjectsMetadata.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/CreateMetadata.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **CreateMetadata**<`T`>: (`graph`: [`ProjectGraph`](../../devkit/documents/ProjectGraph), `options`: `T` | `undefined`, `context`: [`CreateMetadataContext`](../../devkit/documents/CreateMetadataContext)) => [`ProjectsMetadata`](../../devkit/documents/ProjectsMetadata) | `Promise`<[`ProjectsMetadata`](../../devkit/documents/ProjectsMetadata)>\n```\n\n----------------------------------------\n\nTITLE: Importing Violating Module Boundary Rule in Nx\nDESCRIPTION: This code snippet shows an example of importing a component from a library that violates the defined module boundary rules. The `Orders` component is imported from the `orders` library into the `products` library, which is not allowed based on the ESLint configuration.  This import will trigger an ESLint error.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/11-module-boundaries/content.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport styles from './products.module.css';\n\n// This import is not allowed 👇\nimport { Orders } from '@angular-monorepo/orders';\n\nexport function Products() {\n  return (\n    <div className={styles['container']}>\n      <h1>Welcome to Products!</h1>\n      <p>This is a change. 👋</p>\n    </div>\n  );\n}\n\nexport default Products;\n```\n\n----------------------------------------\n\nTITLE: Running Nx Init in Existing Nuxt Project\nDESCRIPTION: Command to integrate Nx into an existing Nuxt.js project using the nx init command. This adds Nx capabilities while preserving the current project setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-06-nuxt-js-support-in-nx.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx init\n```\n\n----------------------------------------\n\nTITLE: Adding esbuild Configuration\nDESCRIPTION: Commands to add esbuild configuration to existing projects, with optional validation skip.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/esbuild/esbuild-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/esbuild:configuration mylib\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/esbuild:configuration mylib --skipValidation\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel Build Command for Nx Workspace\nDESCRIPTION: This shell command demonstrates how to set up the build command in Vercel project settings for an Nx workspace. It uses the nx CLI to build a specific application in production mode.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/deploy-nuxt-to-vercel.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx build my-app --prod\n```\n\n----------------------------------------\n\nTITLE: Disabling Connections to Nx Cloud in JSON\nDESCRIPTION: This snippet demonstrates how to disable all connections to Nx Cloud by adding the 'neverConnectToCloud' property to nx.json. This is useful for organizations with security reasons to prevent Nx Cloud connections.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/config.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  // The following will cause all attempts to connect your workspace to Nx Cloud to fail\n  \"neverConnectToCloud\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Query Library - Shell Commands\nDESCRIPTION: Nx commands for generating a new library for cat fact queries in both Expo and React Native workspaces.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-08-state-management.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# expo workspace\nnpx nx generate @nx/expo:lib libs/queries/use-cat-fact\n\n# react-native workspace\nnpx nx generate @nx/react-native:lib libs/queries/use-cat-fact\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Cypress Plugin in nx.json\nDESCRIPTION: JSON configuration for the @nx/cypress plugin in nx.json, defining target names for different Cypress operations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/cypress/cypress-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/cypress/plugin\",\n      \"options\": {\n        \"targetName\": \"e2e\",\n        \"ciTargetName\": \"e2e-ci\",\n        \"componentTestingTargetName\": \"component-test\",\n        \"openTargetName\": \"open-cypress\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Nx\nDESCRIPTION: This command runs the unit tests for the ui-podcast library leveraging Jest as the testing framework. It requires the Nx build system to be set up correctly. The command 'nx test ui-podcast' triggers the test suite, which provides output in the console indicating success or failure of the tests.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/ui-podcast/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx test ui-podcast\n```\n\n----------------------------------------\n\nTITLE: Adding Vitest Temp Files to GitIgnore\nDESCRIPTION: Adds entries to .gitignore to exclude temporary configuration files generated by Vitest and Vite. These entries prevent timestamp-based configuration files from being tracked in version control.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/src/migrations/update-20-3-0/add-vitest-temp-files-to-git-ignore.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nvite.config.*.timestamp*\nvitest.config.*.timestamp*\n```\n\n----------------------------------------\n\nTITLE: Configuring Outputs for Nx Target Caching\nDESCRIPTION: Defines output locations for Nx to cache artifacts created by a build target. This example specifies two output paths to be cached.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      \"outputs\": [\n        \"{workspaceRoot}/dist/libs/mylib\",\n        \"{workspaceRoot}/build/libs/mylib/main.js\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Nx Run Command Options Table in Markdown\nDESCRIPTION: This code snippet presents a markdown table listing various options for the Nx run command. It includes option names, types, and detailed descriptions for each option, providing comprehensive documentation for users of the Nx build system.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Option                                      | Type                                                                | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n| ------------------------------------------- | ------------------------------------------------------------------- ||\n| `--batch`                                   | boolean                                                             | Run task(s) in batches for executors which support batches. (Default: `false`|\n| `--configuration`, `--c`                    | string                                                              | This is the configuration to use when performing tasks on projects|\n| `--exclude`                                 | string                                                              | Exclude certain projects from being processed|\n| `--excludeTaskDependencies`                 | boolean                                                             | Skips running dependent tasks first. (Default: `false`|\n| `--graph`                                   | string                                                              | Show the task graph of the command. Pass a file path to save the graph data instead of viewing it in the browser. Pass \"stdout\" to print the results to the terminal|\n| `--nxBail`                                  | boolean                                                             | Stop command execution after the first failed task. (Default: `false`|\n| `--nxIgnoreCycles`                          | boolean                                                             | Ignore cycles in the task graph. (Default: `false`|\n| `--output-style`                            | `dynamic`, `static`, `stream`, `stream-without-prefixes`, `compact` | Defines how Nx emits outputs tasks logs. **dynamic**: use dynamic output life cycle, previous content is overwritten or modified as new outputs are added, display minimal logs by default, always show errors. This output format is recommended on your local development environments. **static**: uses static output life cycle, no previous content is rewritten or modified as new outputs are added. This output format is recommened for CI environments. **stream**: nx by default logs output to an internal output stream, enable this option to stream logs to stdout / stderr. **stream-without-prefixes**: nx prefixes the project name the target is running on, use this option remove the project name prefix from output. |\n| `--parallel`                                | string                                                              | Max number of parallel processes [default is|\n```\n\n----------------------------------------\n\nTITLE: Initializing @nx-dotnet/core in the workspace\nDESCRIPTION: This command runs the `init` generator of the `@nx-dotnet/core` plugin. It scaffolds root-level configuration files required for .NET projects within the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-dotnet.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx-dotnet/core:init\n```\n\n----------------------------------------\n\nTITLE: Listing All Installed Plugins\nDESCRIPTION: Example command to list all plugins installed in the current Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/list.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n nx list\n```\n\n----------------------------------------\n\nTITLE: Generating Next.js Page and Component\nDESCRIPTION: Commands to generate a new page and component in a Next.js application within an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/next/documents/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/next:page apps/my-new-app/pages/my-new-page\n\nnx g @nx/next:component apps/my-new-app/components/my-new-component\n```\n\n----------------------------------------\n\nTITLE: Install Tailwind Dependencies with bun\nDESCRIPTION: This snippet shows how to install the required Tailwind dependencies using bun.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-in-react.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nbun add -D tailwindcss@latest postcss@latest autoprefixer@latest\n```\n\n----------------------------------------\n\nTITLE: Processing MDX Content for Search in Nx Docs AI Assistant\nDESCRIPTION: This function processes MDX content by splitting it into smaller chunks based on headings, generating checksums to track changes, and preparing sections for embedding creation. It's a core part of preprocessing documentation for the Nx Docs AI Assistant.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-21-ai-assistant.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function processMdxForSearch(content: string) {\n  // …\n  const mdTree = fromMarkdown(content, {});\n  const sectionTrees = splitTreeBy(mdTree, (node) => node.type === 'heading');\n  // …\n  const sections = sectionTrees.map((tree: any) => {\n    const [firstNode] = tree.children;\n    const heading =\n      firstNode.type === 'heading' ? toString(firstNode) : undefined;\n    return {\n      content: toMarkdown(tree),\n      heading,\n      slug,\n    };\n  });\n  return {\n    checksum,\n    sections,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pre-defined Steps in Launch Template\nDESCRIPTION: Shows how to use existing step files in the initialization process, including checkout and dependency installation steps.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlaunch-templates:\n  template-one:\n    init-steps:\n      - uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/checkout/main.yaml'\n      - name: 'Install Node Modules'\n        uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/install-node-modules/main.yaml'\n```\n\n----------------------------------------\n\nTITLE: Generate Storybook Configuration for UI Project\nDESCRIPTION: Command to generate Storybook configuration for a specific UI project using TypeScript configuration files.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/storybook-configuration-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react-native:storybook-configuration ui\n```\n\n----------------------------------------\n\nTITLE: Watch for Build Changes with Nx Angular in JSON\nDESCRIPTION: This JSON snippet is used to configure Nx to delegate a project's build process while watching for file changes, using the @nx/angular:delegate-build executor. It includes settings for the build target, output path, and TypeScript configuration. The 'watch' option is enabled, allowing the build to automatically trigger on changes.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/delegate-build-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"prod-build\": {\n    \"executor\": \"@nx/angular:delegate-build\",\n    \"options\": {\n      \"buildTarget\": \"app:build:production\",\n      \"outputPath\": \"dist/apps/app/production\",\n      \"tsConfig\": \"apps/app/tsconfig.json\",\n      \"watch\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Task Dependencies\nDESCRIPTION: This JSON snippet configures the `runBuildTargetDependencies` option to `true`, ensuring that all task dependencies of the build target are also executed before running the application.  This is useful when the application depends on the output of other tasks, such as generating GraphQL schemas.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/node-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"my-app\": {\n  \"targets\": {\n    \"serve\": {\n      \"executor\": \"@nx/js:node\",\n      \"options\": {\n        \"runBuildTargetDependencies\": true,\n        //...\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Embeddings with OpenAI for Nx Docs\nDESCRIPTION: This code snippet shows how embeddings are created for documentation chunks using OpenAI's embeddings API with the 'text-embedding-ada-002' model. These embeddings are vector representations of document content used for similarity searching.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-21-ai-assistant.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst embeddingResponse = await openai.embeddings.create({\n  model: 'text-embedding-ada-002',\n  input,\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting Layout Directory Function Signature\nDESCRIPTION: TypeScript function signature for extractLayoutDirectory that accepts an optional string directory parameter and returns an object containing layoutDirectory and optional projectDirectory properties. This function is marked as experimental.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/extractLayoutDirectory.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nextractLayoutDirectory(directory?: string): {\n  layoutDirectory: string | null;\n  projectDirectory?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Affected Tasks in Nx\nDESCRIPTION: Command to run tasks only for projects affected by recent changes, improving CI efficiency.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-04-19-manage-your-gradle.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# macos/linux\n./nx affected -t <task>\n\n# windows\nnx.bat affected -t <task>\n```\n\n----------------------------------------\n\nTITLE: Running Android E2E Tests (Explicit Targets)\nDESCRIPTION: This command executes end-to-end tests for the React Native application's 'mobile-e2e' project on an Android emulator in debug configuration. It explicitly uses the `test-android` target defined in the project's configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-native.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nnpx nx test-android mobile-e2e\n```\n\n----------------------------------------\n\nTITLE: Tree Interface Method: read Overloads\nDESCRIPTION: Methods to read file contents either as Buffer or as string with specified encoding\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/Tree.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n▸ read(filePath: string): Buffer<ArrayBufferLike>\n▸ read(filePath: string, encoding: BufferEncoding): string\n```\n\n----------------------------------------\n\nTITLE: Redux Store Mock Setup\nDESCRIPTION: Configuration for mocking Redux store in component tests.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-22-unit-testing-expo.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport configureStore, { MockStoreEnhanced } from 'redux-mock-store';\n\nconst mockStore = configureStore<any>([]);\n\nlet store: MockStoreEnhanced<any>;\n\nbeforeEach(() => {\n  store = mockStore({});\n  store.dispatch = jest.fn();\n});\n```\n\n----------------------------------------\n\nTITLE: CircleCI Configuration for Single Agent Execution in Nx\nDESCRIPTION: A basic CircleCI configuration that runs all Nx affected commands (test, lint, e2e, build) sequentially on a single agent. This represents the traditional approach before implementing distributed execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-06-15-distributing-ci-binning-and-distributed-task-execution.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  main:\n    environment:\n    steps:\n      - setup # clones the repo and runs npm install\n      - run: npx nx affected --target=test --parallel --maxParallel=3\n      - run: npx nx affected --target=lint --parallel --maxParallel=3\n      - run: npx nx affected --target=e2e\n      - run: npx nx affected --target=build\nworkflows:\n  PR:\n    jobs:\n      - main\n```\n\n----------------------------------------\n\nTITLE: Adding Nx Cache to .prettierignore\nDESCRIPTION: Shows how to update .prettierignore file to prevent Prettier from formatting files in the .nx/cache directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/src/migrations/update-17-0-0/move-cache-directory.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/dist\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/dist\n.nx/cache\n```\n\n----------------------------------------\n\nTITLE: Watching for Changes in Project Graph\nDESCRIPTION: Demonstrates how to enable watch mode to automatically update the graph in the browser when changes occur.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/dep-graph.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx graph --watch\n```\n\n----------------------------------------\n\nTITLE: Enable Remote Caching with Nx Cloud\nDESCRIPTION: Run the command to connect your workspace to Nx Cloud for enabling remote caching, which allows sharing cache between runs for greater efficiency.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/cache-task-results.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx connect\n```\n\n----------------------------------------\n\nTITLE: React Native Development/Release Bundle Configuration\nDESCRIPTION: Configuration for creating development or release bundles with dev flag control\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/bundle-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    \"bundle-ios\": {\n      \"executor\": \"@nx/react-native:bundle\",\n      \"options\": {\n        \"entryFile\": \"src/main.tsx\",\n        \"platform\": \"ios\",\n        \"bundleOutput\": \"dist/apps/mobile/ios/main.jsbundle\",\n        \"dev\": false\n      }\n    },\n    \"bundle-android\": {\n      \"executor\": \"@nx/react-native:bundle\",\n      \"options\": {\n        \"entryFile\": \"src/main.tsx\",\n        \"platform\": \"android\",\n        \"bundleOutput\": \"dist/apps/mobile/android/main.jsbundle\",\n        \"dev\": false\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Nx Angular Monorepo Directory Structure Example\nDESCRIPTION: Illustrates the expected directory structure after generating local libraries, showing the placement of apps, libs, and their internal configurations\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/6-create-local-library/content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n└─ angular-monorepo\n   ├─ ...\n   ├─ apps\n   ├─ libs\n   │  ├─ products\n   │  │  ├─ ...\n   │  │  ├─ project.json\n   │  │  ├─ src\n   │  │  │  ├─ index.ts\n   │  │  │  ├─ test-setup.ts\n   │  │  │  └─ lib\n   │  │  │     └─ products\n   │  │  ├─ tsconfig.json\n   │  │  ├─ tsconfig.lib.json\n   │  │  └─ tsconfig.spec.json\n   │  ├─ orders\n   │  │  ├─ ...\n   │  │  ├─ project.json\n   │  │  ├─ src\n   │  │  │  ├─ index.ts\n   │  │  │  └─ ...\n   │  │  └─ ...\n   │  └─ shared\n   │     └─ ui\n   │        ├─ ...\n   │        ├─ project.json\n   │        ├─ src\n   │        │  ├─ index.ts\n   │        │  └─ ...\n   │        └─ ...\n```\n\n----------------------------------------\n\nTITLE: Storing Affected Projects for Manual Distribution in YAML\nDESCRIPTION: This snippet shows how to get the list of affected projects and store them in an environment variable for use by agent jobs in a manual distribution setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/concepts/parallelization-distribution.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Get the list of affected projects\n- nx show projects --affected --json > affected-projects.json\n# Store the list of affected projects in a PROJECTS environment variable\n# that is accessible by the agent jobs\n- node storeAffectedProjects.js\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/rspack Package using nx add\nDESCRIPTION: Command to install @nx/rspack package using nx add command for Nx version 18+\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/rspack/rspack-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/rspack\n```\n\n----------------------------------------\n\nTITLE: Generate React Application\nDESCRIPTION: Command to generate a new React application in the apps directory\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/generate.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/react:app apps/myapp\n```\n\n----------------------------------------\n\nTITLE: JSON Schema anyOf Validation for ESLint Formatters\nDESCRIPTION: Shows how to use anyOf to validate string values against an enum list or length constraint\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"format\": {\n    \"type\": \"string\",\n    \"description\": \"ESLint Output formatter (https://eslint.org/docs/user-guide/formatters).\",\n    \"default\": \"stylish\",\n    \"anyOf\": [\n      {\n        \"enum\": [\n          \"stylish\",\n          \"compact\",\n          \"codeframe\",\n          \"unix\",\n          \"visualstudio\",\n          \"table\",\n          \"checkstyle\",\n          \"html\",\n          \"jslint-xml\",\n          \"json\",\n          \"json-with-metadata\",\n          \"junit\",\n          \"tap\"\n        ]\n      },\n      { \"minLength\": 1 }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PNPM Workspaces\nDESCRIPTION: PNPM workspace configuration using pnpm-workspace.yaml to specify project directories.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/switch-to-workspaces-project-references.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npackages:\n  - 'apps/*'\n  - 'libs/*'\n```\n\n----------------------------------------\n\nTITLE: Converting Target Object to String Format in TypeScript\nDESCRIPTION: Function that takes a Target object parameter and returns a formatted string in the pattern 'project:target[:configuration]'. The configuration part is optional and only included if present in the target object.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/targetToTargetString.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntargetToTargetString({ project: \"proj\", target: \"test\" }) // returns \"proj:test\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntargetToTargetString({ project: \"proj\", target: \"test\", configuration: \"production\" }) // returns \"proj:test:production\"\n```\n\n----------------------------------------\n\nTITLE: Custom Library Generator Implementation\nDESCRIPTION: TypeScript implementation of a custom library generator that enforces specific settings and configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/organization-specific-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tree } from '@nx/devkit';\nimport { Linter } from '@nx/eslint';\nimport { libraryGenerator as reactLibraryGenerator } from '@nx/react';\nimport { LibraryGeneratorSchema } from './schema';\n\nexport async function libraryGenerator(\n  tree: Tree,\n  options: LibraryGeneratorSchema\n) {\n  const callbackAfterFilesUpdated = await reactLibraryGenerator(tree, {\n    ...options,\n    linter: Linter.EsLint,\n    style: 'css',\n    unitTestRunner: 'vitest',\n  });\n\n  return callbackAfterFilesUpdated;\n}\n\nexport default libraryGenerator;\n```\n\n----------------------------------------\n\nTITLE: Running the Web file-server with Nx\nDESCRIPTION: This command demonstrates how to use Nx to serve the application using the configured file-server executor.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/web/docs/file-server-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx serve myapp\n```\n\n----------------------------------------\n\nTITLE: Removing Project Configuration in Nx (TypeScript)\nDESCRIPTION: This function removes the configuration of an existing project. It takes two parameters: a Tree object representing the file system tree, and a string projectName which is the unique name of the project to be removed. The function doesn't return any value.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/removeProjectConfiguration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nremoveProjectConfiguration(tree: Tree, projectName: string): void\n```\n\n----------------------------------------\n\nTITLE: Updating with Custom To Versions for Specific Packages\nDESCRIPTION: Example of updating @nx/workspace to 9.0.0 while specifying custom versions for @nx/react and @nx/angular.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/migrate.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate @nx/workspace@9.0.0 --to=\"@nx/react@9.0.1,@nx/angular@9.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Globally with Homebrew\nDESCRIPTION: Commands to install Nx globally using Homebrew package manager. First taps the Nx repository and then installs the Nx package.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/getting-started/installation.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nbrew tap nrwl/nx\nbrew install nx\n```\n\n----------------------------------------\n\nTITLE: Building Next.js Projects\nDESCRIPTION: Commands to build Next.js applications and libraries in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/next/documents/overview.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-new-app\n\nnx build my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Basic Jest Plugin Configuration\nDESCRIPTION: Minimal configuration example for @nx/jest/plugin in nx.json showing target name setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/jest/jest-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/jest/plugin\",\n      \"options\": {\n        \"targetName\": \"test\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating devDependencies for Angular CLI\nDESCRIPTION: This snippet shows how to update the Angular CLI version from ~13.3.0 to ~19.1.0 in the devDependencies section of package.json. It is important to ensure compatibility with other packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-4-0/update-angular-cli.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@angular/cli\": \"~13.3.0\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@angular/cli\": \"~19.1.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Publishable React Native Library\nDESCRIPTION: This command generates a new publishable React Native library named 'shared-ui-layout' with a specified import path. The `--publishable` flag indicates that the library is intended for publishing to a registry, and `--importPath` defines the package name used for importing the library in other projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-native.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\nnpx nx g @nx/react-native:lib libs/shared-ui-layout --publishable --importPath=@happynrwl/ui-components\nnpx nx g @nx/react-native:component libs/shared-ui-layout/src/lib/layout/layout --export\n```\n\n----------------------------------------\n\nTITLE: Building Module Federation Apps with Nx\nDESCRIPTION: Command to build all applications in the Nx workspace using run-many command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-12-next-gen-module-federation-deployments.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many -t build\n```\n\n----------------------------------------\n\nTITLE: Defining TaskGraph Interface Properties in TypeScript\nDESCRIPTION: Interface definition specifying the structure of a task graph. Contains properties for continuous dependencies, task dependencies mapping, root tasks without dependencies, and a mapping of task IDs to Task objects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/TaskGraph.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TaskGraph {\n  continuousDependencies: Record<string, string[]>;\n  dependencies: Record<string, string[]>;\n  roots: string[];\n  tasks: Record<string, Task>;\n}\n```\n\n----------------------------------------\n\nTITLE: NxModuleFederationPlugin Class Definition\nDESCRIPTION: TypeScript class definition for NxModuleFederationPlugin showing constructor parameters including config options and optional config override.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/module-federation/documents/nx-module-federation-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class NxModuleFederationPlugin {\n  constructor(\n    private _options: {\n      config: ModuleFederationConfig;\n      isServer?: boolean;\n    },\n    private configOverride?: NxModuleFederationConfigOverride\n  ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Global Vite Config for Project-specific Use\nDESCRIPTION: This example shows how to extend a global Vite configuration for a specific project by importing the root configuration and applying it through mergeConfig while adding project-specific settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/custom-builder-configs.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/react-vite';\nimport { mergeConfig } from 'vite';\nimport rootMain from '../../../.storybook/main';\n\nconst config: StorybookConfig = {\n  ...rootMain,\n  stories: ...,\n  addons: ...,\n  framework: {\n    name: '@storybook/react-vite',\n    options: {\n      builder: {\n        viteConfigPath: 'apps/web/vite.config.ts',\n      },\n    },\n  },\n  async viteFinal(config, { configType }) {\n    return mergeConfig(config, {\n      ...((await rootMain.viteFinal(config, { configType })) ?? {})\n    });\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Package in Nx Workspace\nDESCRIPTION: Command line instructions for adding the @nrwl/storybook package to an existing Nx React Native workspace using either npm or yarn.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-25-use-storybook-with-nx-react-native.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# npm\nnpm install @nrwl/storybook --save-dev\n\n# yarn\nyarn add --dev @nrwl/storybook\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Dependency Type Alias in TypeScript\nDESCRIPTION: Defines a TypeScript type alias for DynamicDependency that represents a potential dependency between two projects where the source project may or may not load the target project at runtime. It specifies the source project name, target project name, source file path, and dependency type.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/DynamicDependency.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nƬ **DynamicDependency**: `Object`\n```\n\n----------------------------------------\n\nTITLE: Creating HoroscopeState Interface in TypeScript\nDESCRIPTION: Defines the HoroscopeState interface with loadingStatus, error, and zodiacSignItem properties.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface HoroscopeState {\n  loadingStatus: 'not loaded' | 'loading' | 'loaded' | 'error';\n  error?: string;\n  zodiacSignItem?: AdhZodiacSignItem;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Project for Library Build\nDESCRIPTION: Updates the Nx project configuration to build the Angular library and theme files in parallel, and manage the build output directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"targets\": {\n    \"build-angular\": {\n      \"executor\": \"@nrwl/angular:package\",\n      ...\n    },\n    \"build-themes\": {\n      \"executor\": \"@nrwl/workspace:run-commands\",\n      \"outputs\": [\"dist/libs/lib3/themes\"],\n      \"configurations\": {\n        \"production\": {\n          \"commands\": [\n            \"tailwindcss -c libs/lib3/tailwind.config.js -i ./libs/lib3/src/styles/teal.css -o ./dist/libs/lib3/themes/teal.css -m\",\n            \"tailwindcss -c libs/lib3/tailwind.config.js -i ./libs/lib3/src/styles/indigo.css -o ./dist/libs/lib3/themes/indigo.css -m\"\n          ]\n        },\n        \"development\": {\n          \"commands\": [\n            \"tailwindcss -c libs/lib3/tailwind.config.js -i ./libs/lib3/src/styles/teal.css -o ./dist/libs/lib3/themes/teal.css\",\n            \"tailwindcss -c libs/lib3/tailwind.config.js -i ./libs/lib3/src/styles/indigo.css -o ./dist/libs/lib3/themes/indigo.css\"\n          ]\n        }\n      },\n      \"defaultConfiguration\": \"production\"\n    },\n    \"build-lib\": {\n      \"executor\": \"@nrwl/workspace:run-commands\",\n      \"outputs\": [\"dist/libs/lib3\"],\n      \"configurations\": {\n        \"production\": {\n          \"commands\": [\n            \"nx run lib3:build-angular:production\",\n            \"nx run lib3:build-themes:production\"\n          ]\n        },\n        \"development\": {\n          \"commands\": [\n            \"nx run lib3:build-angular:development\",\n            \"nx run lib3:build-themes:development\"\n          ]\n        }\n      },\n      \"defaultConfiguration\": \"production\"\n    },\n    \"build\": {\n      \"executor\": \"@nrwl/workspace:run-commands\",\n      \"outputs\": [\"dist/libs/lib3\"],\n      \"configurations\": {\n        \"production\": {\n          \"commands\": [\n            \"rm -rf dist/libs/lib3\",\n            \"nx run lib3:build-lib:production\"\n          ],\n          \"parallel\": false\n        },\n        \"development\": {\n          \"commands\": [\n            \"rm -rf dist/libs/lib3\",\n            \"nx run lib3:build-lib:development\"\n          ],\n          \"parallel\": false\n        }\n      },\n      \"defaultConfiguration\": \"production\"\n    },\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Cypress Component Testing Configuration\nDESCRIPTION: Example of extending the Nx component testing preset with custom options\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress';\nimport { nxComponentTestingPreset } from '@nx\\/next\\/plugins\\/component-testing';\n\nexport default defineConfig({\n  component: {\n    ...nxComponentTestingPreset(__filename),\n    // extra options here\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using withNx Plugin\nDESCRIPTION: Example demonstrating the usage of withNx plugin, which provides common build configuration including TypeScript support and workspace library linking.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/webpack-plugins.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { composePlugins, withNx } = require('@nx/webpack');\n\nmodule.exports = composePlugins(withNx(), (config) => {\n  // Further customize webpack config\n  return config;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Process.env Variables in Angular Service\nDESCRIPTION: Angular service example showing how to access Node.js-style environment variables in application code.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/use-environment-variables-in-angular.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ApiService {\n  constructor() {\n    console.log('API URL:', process.env.MY_API_URL);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Logging with NX_VERBOSE_LOGGING\nDESCRIPTION: Shows how to enable verbose logging for Nx Cloud by setting the NX_VERBOSE_LOGGING environment variable to true. This outputs debug information about agents communicating with the main job, useful for troubleshooting cache misses and on-prem setup issues.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/env-vars.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nNX_VERBOSE_LOGGING=true\n```\n\n----------------------------------------\n\nTITLE: Creating CI Workflow Branch\nDESCRIPTION: Git commands to create and switch to a new branch for setting up CI workflow.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/tutorial/github-actions.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b setup-ci\n```\n\n----------------------------------------\n\nTITLE: Root tsconfig.json Configuration - JSONC\nDESCRIPTION: This JSONC snippet illustrates how the root tsconfig.json extends tsconfig.base.json and manages project references to support tooling in a TypeScript monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/typescript-project-linking.md#2025-04-22_snippet_8\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.base.json\",\n  \"files\": [], // intentionally empty\n  \"references\": [\n    // UPDATED BY PROJECT GENERATORS\n    // All projects in the repository\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding @nx/module-federation dependency\nDESCRIPTION: This snippet demonstrates how to add the @nx/module-federation package as a dependency in the package.json file. This is necessary for Nx workspaces that utilize Module Federation.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-3-0/ensure-nx-module-federation-package.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@nx/module-federation\": \"20.3.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Workspace Changelog in nx.json\nDESCRIPTION: This code snippet demonstrates how to disable the workspace changelog generation within the `nx.json` file using the `workspaceChangelog` property.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_16\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"release\": {\n    \"changelog\": {\n      // This disables the workspace changelog\n      \"workspaceChangelog\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring exec Command in package.json\nDESCRIPTION: Demonstrates how to add an 'exec' script to package.json to run a command as a project target. This allows the command to be executed for the specific project 'myorg'.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/cli/exec.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myorg\",\n  \"version\": \"0.0.1\",\n  \"scripts\": {\n    \"build\": \"nx exec -- <command> [..args]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Minimal Configuration Differences between Turborepo and Nx\nDESCRIPTION: A diff showing the minimal changes needed when migrating from Turborepo to Nx. Only requires adding the Nx cache to .gitignore, adding the 'nx' package, and creating an nx.json file equivalent to turbo.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/from-turborepo.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n.gitignore        | 3 +++ # Ignore the Nx cache\npackage.json      | 1 + # Add the \"nx\" package\npackage-lock.json |\nnx.json           | # Equivalent to turbo.json\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Plugin for Nx 18+\nDESCRIPTION: Command to add the React Native plugin to an existing Nx workspace for version 18 or higher\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react-native/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/react-native\n```\n\n----------------------------------------\n\nTITLE: Stopping Nx Daemon\nDESCRIPTION: Example of using 'nx reset' with the '--only-daemon' option to stop the Nx Daemon, which will be restarted fresh on the next Nx command execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/reset.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx reset --only-daemon\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace for Expo Project\nDESCRIPTION: Commands to create an empty Nx workspace and install the @nrwl/expo package for Expo support.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-23-introducing-expo-support-for-nx.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace nx-expo-poetry --preset=empty\n\ncd nx-expo-poetry\n# npm\nnpm install @nrwl/expo --save-dev\n\n# yarn\nyarn add @nrwl/expo --dev\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/node Plugin for Nx < 18\nDESCRIPTION: Command to install the @nx/node package using npm for Nx versions lower than 18.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/node/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/node\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Compatible Provider (MinIO) in Nx\nDESCRIPTION: This snippet demonstrates how to configure Nx to use MinIO as an S3 compatible storage provider. It includes settings for region, bucket, endpoint, and authentication.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/s3-cache/s3-cache-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"s3\": {\n    \"region\": \"us-east-1\",\n    \"bucket\": \"my-bucket\",\n    \"endpoint\": \"https://play.min.io\",\n    \"forcePathStyle\": true,\n    \"accessKeyId\": \"abc1234\",\n    \"secretAccessKey\": \"4321cba\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameter Forwarding for Dependent Tasks\nDESCRIPTION: JSON configuration demonstrating options for parameter forwarding to dependency targets in Nx 14.5.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-08-02-nx-14-5-cypess-v10-output-globs-linter-perf-react-tailwind-support.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"build\": {\n   // forward params passed to this target to the dependency targets\n  \"dependsOn\": [\n      { \"projects\": \"dependencies\", \"target\": \"build\", \"params\": \"forward\" }\n  ]\n},\n\"test\": {\n  // ignore params passed to this target, won't be forwarded to the dependency targets\n  \"dependsOn\": [\n      { \"projects\": \"self\", \"target\": \"build\", \"params\": \"ignore\" }\n  ]\n}\n\"lint\": {\n  // ignore params passed to this target, won't be forwarded to the dependency targets\n  \"dependsOn\": [\n      { \"projects\": \"self\", \"target\": \"build\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Version Bump Prompt\nDESCRIPTION: This text shows the prompt displayed by Nx Release to pick a version bump for the packages in the release. The example uses `nx release --first-release --dry-run` command to trigger the prompt.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/get-started-with-nx-release.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n? What kind of change is this for the 3 matched projects(s)? …\n❯ major\n  premajor\n  minor\n  preminor\n  patch\n  prepatch\n  prerelease\n  Custom exact version\n```\n\n----------------------------------------\n\nTITLE: Implementing Odd Number Check Using Even Number Function\nDESCRIPTION: This TypeScript code defines an 'isOdd' function that uses the 'isEven' function from the 'is-even' module to determine if a number is odd.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-27-project-references.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isEven } from 'is-even';\n\nexport function isOdd(n: number): boolean {\n  return !isEven(n);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress for E2E Testing in Nx\nDESCRIPTION: Basic configuration for E2E testing with Cypress in Nx. This setup points to the cypress config file and specifies the development server target to use during testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/docs/cypress-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"targets\": {\n  \"e2e\": {\n    \"executor\": \"@nx/cypress:cypress\",\n    \"options\": {\n      \"cypressConfig\": \"apps/app-e2e/cypres.config.ts\",\n      \"devServerTarget\": \"my-react-app:serve\",\n      \"testingType\": \"e2e\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Qwik Component for a Todo Route\nDESCRIPTION: A simple Qwik component that serves as the initial implementation for the todo route, displaying a basic message.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-15-qwikify-your-dev.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return <div>This is the todo</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Nx Standalone Workspace to Monorepo\nDESCRIPTION: Shows the command to use the new 'convert-to-monorepo' generator in Nx. This generator restructures a standalone Nx workspace into a monorepo setup, moving libraries to 'libs/' and applications to 'apps/' directories.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-09-06-nx-16-8-release.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx g convert-to-monorepo\n```\n\n----------------------------------------\n\nTITLE: Base TypeScript Configuration with Project References\nDESCRIPTION: Shared TypeScript configuration with composite build settings and module resolution options for the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"NodeNext\",\n    \"strict\": true,\n    \"moduleResolution\": \"NodeNext\",\n    \"composite\": true,\n    \"declaration\": true,\n    \"declarationMap\": true,\n    \"sourceMap\": true,\n    \"paths\": {\n      \"@ts-monorepo-linking/lib-a\": [\"packages/lib-a/src/index.ts\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update ModuleFederationConfig Imports\nDESCRIPTION: This code snippet demonstrates updating the import path for ModuleFederationConfig in a webpack configuration file. The update ensures the project uses the @nx/module-federation package for Module Federation configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-2-0/migrate-mf-imports-to-new-package.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ModuleFederationConfig } from '@nx/module-federation';\n```\n\n----------------------------------------\n\nTITLE: Installing Nx esbuild Plugin (Pre-Nx 18)\nDESCRIPTION: Command to install the Nx esbuild plugin in versions before Nx 18 using npm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/esbuild/esbuild-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/esbuild\n```\n\n----------------------------------------\n\nTITLE: Example of Standard Express Server Usage with createServer\nDESCRIPTION: Demonstrates how to create a standard Express server using the createServer function, including points where custom server logic can be added.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rspack/create-server.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from '@nx/angular-rspack/ssr';\nimport bootstrap from './main.server';\n\nconst server = createServer(bootstrap);\n\n/** Add your custom server logic here\n *\n * For example, you can add a custom static file server:\n *\n * server.app.use('/static', express.static(staticFolder));\n *\n * Or add additional api routes:\n *\n * server.app.get('/api/hello', (req, res) => {\n *   res.send('Hello World!');\n * });\n *\n * Or add additional middleware:\n *\n * server.app.use((req, res, next) => {\n *   res.send('Hello World!');\n * });\n */\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript to JavaScript Conversion Function in /nrwl/nx\nDESCRIPTION: This function, named 'toJS', is responsible for renaming and transpiling newly created TypeScript files to JavaScript. It takes a 'Tree' object and optional 'ToJSOptions' as parameters and returns void.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/toJS.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **toJS**(`tree`, `options?`): `void`\n```\n\n----------------------------------------\n\nTITLE: RemoteCache Interface Definition in TypeScript\nDESCRIPTION: Definition of the RemoteCache interface with retrieve and store methods. This interface is used to implement remote caching functionality in Nx for faster builds across multiple machines.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/RemoteCache.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RemoteCache {\n  retrieve: (hash: string, cacheDirectory: string) => Promise<boolean>;\n  store: (hash: string, cacheDirectory: string) => Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Previewing Task Graph in Webview\nDESCRIPTION: Shows how to preview the Nx task graph in a webview interface using the --graph flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n nx run myapp:build --graph\n```\n\n----------------------------------------\n\nTITLE: Nx TypeScript Plugin Configuration\nDESCRIPTION: Configuration for @nx/js/typescript plugin in nx.json for typecheck and build options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/switch-to-workspaces-project-references.md#2025-04-22_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/js/typescript\",\n      \"options\": {\n        \"typecheck\": {\n          \"targetName\": \"typecheck\"\n        },\n        \"build\": {\n          \"targetName\": \"build\",\n          \"configName\": \"tsconfig.lib.json\",\n          \"buildDepsName\": \"build-deps\",\n          \"watchDepsName\": \"watch-deps\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Detox-enabled Applications\nDESCRIPTION: Commands to generate React Native and Expo applications with Detox E2E testing configuration\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/detox/documents/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react-native:app apps/frontend --e2eTestRunner=deotx\nnx g @nx/expo:app apps/frontend --e2eTestRunner=detox\n```\n\n----------------------------------------\n\nTITLE: Enabling Batch Mode for TypeScript Compilation in Nx\nDESCRIPTION: Demonstrates how to enable experimental batch mode for TypeScript compilation in Nx using an environment variable. Batch mode leverages project references to speed up compilation in large monorepos.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-09-06-nx-16-8-release.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n> NX_BATCH_MODE=true nx run-many --target=build\n```\n\n----------------------------------------\n\nTITLE: Generating Next.js Library\nDESCRIPTION: Command to generate a new Next.js library in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/next/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/next:lib libs/my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Running PNPM Filtered Commands\nDESCRIPTION: Shell command demonstrating how to run a specific script (dev) for a particular package (my-remix-app) in the PNPM workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npnpm --filter my-remix-app dev\n```\n\n----------------------------------------\n\nTITLE: EJS Function Transformation Example\nDESCRIPTION: Shows how to pass and use custom functions within EJS templates for advanced transformations\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/creating-files.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// template file\nThis is my <%= uppercase(name) %>\n\n// typescript file\nfunction uppercase(val: string) {\n  return val.toUpperCase();\n}\n\n// later\ngenerateFiles(tree, join(__dirname, './files'), libraryRoot, {\n  uppercase,\n  name: schema.name,\n});\n```\n\n----------------------------------------\n\nTITLE: Initialize Nx in Gradle Project (Shell)\nDESCRIPTION: This command initializes Nx in an existing Gradle project. It downloads the latest version of Nx and configures the repository. This requires Node.js and npm to be installed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Application\nDESCRIPTION: This command generates a new Angular application named 'inventory' in the 'apps' directory. It creates all necessary files and configurations for the new application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/angular:app apps/inventory\n```\n\n----------------------------------------\n\nTITLE: Basic Nx Add Command Usage\nDESCRIPTION: The basic syntax for using the nx add command to install a plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/add.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add <packageSpecifier>\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Deno Plugin for Existing Workspace\nDESCRIPTION: Command to install the experimental Deno plugin in an existing Nx workspace. This allows integration of Deno applications and libraries within Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-03-08-nx-15-8-rust-hasher-nx-console-for-intellij-deno-node-and-storybook.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D @nrwl/deno\n```\n\n----------------------------------------\n\nTITLE: Mixed Import Statements Migration\nDESCRIPTION: Shows how to handle migration when import statements contain data persistence operators and other utilities\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-21-0-0/change-data-persistence-operators-imports-to-ngrx-router-store-data-persistence.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@angular/core';\nimport { fetch, someExtraUtility, navigation } from '@nx/angular';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@angular/core';\nimport { fetch, navigation } from '@ngrx/router-store/data-persistence';\nimport { someExtraUtility } from '@nx/angular';\n```\n\n----------------------------------------\n\nTITLE: Express CORS Header Implementation\nDESCRIPTION: Example of manually setting CORS headers in Express route handler.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-11-14-handling-cors.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/api', (_req, res) => {\n  res\n    .setHeader('Access-Control-Allow-Origin', '*')\n    .send({ message: 'Welcome to api!' });\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Storybook Interaction Tests - Angular\nDESCRIPTION: This command sets up Storybook for an Angular project with interaction tests enabled. The `project-name` argument specifies the name of the Angular project to configure. The `--interactionTests=true` flag ensures that the Storybook configuration includes support for interaction tests by installing the necessary addon (@storybook/addon-interactions).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/interaction-tests.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:storybook-configuration project-name --interactionTests=true\n```\n\n----------------------------------------\n\nTITLE: Implementing Inferred Tasks in TypeScript\nDESCRIPTION: TypeScript code for creating inferred tasks in the nx-astro plugin, including task configuration and node creation logic.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/tooling-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  CreateNodesContextV2,\n  CreateNodesV2,\n  TargetConfiguration,\n  createNodesFromFiles,\n  joinPathFragments,\n} from '@nx/devkit';\nimport { readdirSync, readFileSync } from 'fs';\nimport { dirname, join, resolve } from 'path';\n\nexport interface AstroPluginOptions {\n  buildTargetName?: string;\n  devTargetName?: string;\n}\n\nconst astroConfigGlob = '**/astro.config.{mjs,ts}';\n\nexport const createNodesV2: CreateNodesV2<AstroPluginOptions> = [\n  astroConfigGlob,\n  async (configFiles, options, context) => {\n    return await createNodesFromFiles(\n      (configFile, options, context) =>\n        createNodesInternal(configFile, options, context),\n      configFiles,\n      options,\n      context\n    );\n  },\n];\n\nasync function createNodesInternal(\n  configFilePath: string,\n  options: AstroPluginOptions,\n  context: CreateNodesContextV2\n) {\n  const projectRoot = dirname(configFilePath);\n\n  const siblingFiles = readdirSync(join(context.workspaceRoot, projectRoot));\n  if (\n    !siblingFiles.includes('package.json') &&\n    !siblingFiles.includes('project.json')\n  ) {\n    return {};\n  }\n\n  const astroConfigContent = readFileSync(\n    resolve(context.workspaceRoot, configFilePath)\n  ).toString();\n\n  function getConfigValue(propertyName: string, defaultValue: string) {\n    const result = new RegExp(`${propertyName}: '(.*)'`).exec(\n      astroConfigContent\n    );\n    if (result && result[1]) {\n      return result[1];\n    }\n    return defaultValue;\n  }\n\n  const srcDir = getConfigValue('srcDir', './src');\n  const publicDir = getConfigValue('publicDir', './public');\n  const outDir = getConfigValue('outDir', './dist');\n\n  const buildTarget: TargetConfiguration = {\n    command: `astro build`,\n    options: { cwd: projectRoot },\n    cache: true,\n    inputs: [\n      '{projectRoot}/astro.config.mjs',\n      joinPathFragments('{projectRoot}', srcDir, '**', '*'),\n      joinPathFragments('{projectRoot}', publicDir, '**', '*'),\n      {\n        externalDependencies: ['astro'],\n      },\n    ],\n    outputs: [`{projectRoot}/${outDir}`],\n  };\n  const devTarget: TargetConfiguration = {\n    command: `astro dev`,\n    options: { cwd: projectRoot },\n  };\n\n  return {\n    projects: {\n      [projectRoot]: {\n        targets: {\n          [options.buildTargetName]: buildTarget,\n          [options.devTargetName]: devTarget,\n        },\n      },\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Previewing Task Graph in Webview with Nx run-many\nDESCRIPTION: Example of how to preview the task graph that Nx would run inside a webview using the run-many command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run-many.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t=build --graph\n```\n\n----------------------------------------\n\nTITLE: Deploying Serverless Function to Netlify\nDESCRIPTION: Nx command to deploy the serverless function to Netlify, making it accessible via a unique URL.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-05-26-determine-your-user-location-with-netlify-edge-functions.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx run deploy\n```\n\n----------------------------------------\n\nTITLE: Register TS Path for Jest in Global Setup\nDESCRIPTION: This snippet shows how to register a TS path for Jest to resolve Nx libraries in a global setup file. It imports the `registerTsProject` function from `@nx/js/src/internal` and calls it with the path to the `tsconfig.base.json` file. The returned function should be called to clean up registered paths.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/jest/documents/overview.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerTsProject } from '@nx/js/src/internal';\nconst cleanupRegisteredPaths = registerTsProject('./tsconfig.base.json');\n\nimport { yourFancyFunction } from '@some-org/my-util-library';\nexport default async function () {\n  yourFancyFunction();\n\n  // make sure to run the clean up!\n  cleanupRegisteredPaths();\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Task Graph to Console\nDESCRIPTION: Shows how to print the Nx task graph directly to stdout.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n nx run myapp:build --graph=stdout\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nx Workspace with npm\nDESCRIPTION: Command to create a new Nx workspace using npm package manager. This initiates the interactive setup process for a new Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/getting-started/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace\n```\n\n----------------------------------------\n\nTITLE: Updating WeatherForecast.cs namespace in dotnet-lib\nDESCRIPTION: This code snippet updates the namespace of the `WeatherForecast.cs` file in the `dotnet-lib` library to `DotnetLib`.  This is required after moving the file from the `my-api` application to the `dotnet-lib` library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-dotnet.md#_snippet_13\n\nLANGUAGE: c#\nCODE:\n```\nnamespace DotnetLib;\n\npublic class WeatherForecast\n{\n    public DateOnly Date { get; set; }\n\n    public int TemperatureC { get; set; }\n\n    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n\n    public string? Summary { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding @nx/module-federation Package to Dependencies\nDESCRIPTION: Shows the before and after states of package.json when adding the @nx/module-federation package. The package is added with version 20.3.0 to support Module Federation functionality in Nx workspaces.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/rspack/src/migrations/update-20-3-0/ensure-nx-module-federation-package.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@nx/module-federation\": \"20.3.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring workspaceRoot Variable in TypeScript\nDESCRIPTION: Type declaration for the workspaceRoot variable that stores the root directory path of an Nx workspace as a string value.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/workspaceRoot.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nworkspaceRoot: string\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing nx-shops Repository\nDESCRIPTION: Commands to clone the nx-shops sample repo and install dependencies using PNPM.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/tutorial/github-actions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<your-username>/nx-shops.git\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite in Existing Nx Project\nDESCRIPTION: Command to add Vite configuration to an existing Nx project, adjusting it to match the core team's setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-06-nx-15-3-standalone-projects-vite-task-graph-and-more.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nrwl/vite:configuration\n```\n\n----------------------------------------\n\nTITLE: E2E test for React installation (TypeScript)\nDESCRIPTION: This snippet shows how to write an e2e test to verify that `react` and `react-dom` are installed correctly in the generated workspace using `npm ls`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-10-create-your-own-create-react-app-cli.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nit('react and react-dom should be installed', () => {\n    projectDirectory = createTestProject('dark');\n\n    // npm ls will fail if the package is not installed properly\n    execSync('npm ls react', {\n      cwd: projectDirectory,\n      stdio: 'inherit',\n    });\n    execSync('npm ls react-dom', {\n      cwd: projectDirectory,\n      stdio: 'inherit',\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main.ts to Import Stories\nDESCRIPTION: Configuration for the Storybook main.ts file that imports stories from specific patterns across the workspace. The example shows how to define story patterns and configure the Vite setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/one-storybook-for-all.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/react-vite';\nimport { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';\nimport { mergeConfig } from 'vite';\n\nconst config: StorybookConfig = {\n  stories: ['../../**/ui/**/src/lib/**/*.stories.@(js|jsx|ts|tsx|mdx)'],\n  addons: ['@storybook/addon-essentials', '@storybook/addon-interactions'],\n  framework: {\n    name: '@storybook/react-vite',\n    options: {},\n  },\n\n  viteFinal: async (config) =>\n    mergeConfig(config, {\n      plugins: [nxViteTsPaths()],\n    }),\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Generating a Conformance Rule with Nx CLI\nDESCRIPTION: Use the Nx CLI to generate a new conformance rule file and answer prompts for rule configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/conformance/documents/create-conformance-rule.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnx g @nx/conformance:create-rule\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Level Owners in Nx\nDESCRIPTION: This snippet shows how to configure code ownership at the project level in Nx. It demonstrates assigning owners to specific files or file patterns within a project, including the ability to add descriptions for ownership rules.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/owners/owners-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"owners\": {\n    // Keys are file globs relative to the root of the project\n    // Owners can be listed as a string array\n    \"**/*\": [\"@ahmed\", \"@petra\"],\n    // Owners can be listed as an object with a description\n    \"README.md\": {\n      \"description\": \"Jared is very particular about the README file\",\n      \"owners\": [\"@jared\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Angular Project Configuration (project.json)\nDESCRIPTION: This snippet demonstrates how to update the `project.json` file for an Angular application to include the `@angular/localize/init` polyfill. It modifies the 'polyfills' option within the 'build' target's 'options' to include the polyfill. This ensures that the application correctly handles localization.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-2-0/add-localize-polyfill-to-targets.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@angular/build:application\",\n      \"options\": {\n        \"localize\": true,\n        \"polyfills\": [\"@angular/localize/init\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allow Lists in JSON\nDESCRIPTION: This snippet demonstrates how to use the 'allow' property within the project configuration to define exceptions to module boundary rules. Each entry in the 'allow' array specifies a pattern for allowed imports, such as particular libraries or wildcard matches for libraries. It's essential to understand how the patterns interact to effectively manage dependencies and maintain project structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tags-allow-list.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allow\": [\"@myorg/mylib/testing\"]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allow\": [\"@myorg/mylib/*\"]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allow\": [\"@myorg/mylib/**\"]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allow\": [\"@myorg/**/testing\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Graph Representation in Nx\nDESCRIPTION: This JSON code illustrates a model generated by the 'nx graph' command, visualizing dependencies among various projects in an Nx workspace. The primary function is to map out relationships via 'source' and 'target' attributes with a 'type' of 'static'. Dependencies assume a structured workspace with folders represented as libraries or applications. The output is informative, offering a visual network to aid in code restructuring decisions. Key limitations include the need for proper project configurations beforehand.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/identify-dependencies-between-folders.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": \"9713539543f19c5299e56715e78c576a40b91056b9cbb4e42118780cfcd22b5e\",\n  \"projects\": [\n    {\n      \"name\": \"customers\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"customer\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"orders\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"shared\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"about\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"login\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"core\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"playground\",\n      \"type\": \"app\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"angular-jumpstart\",\n      \"type\": \"app\",\n      \"data\": {\n        \"tags\": []\n      }\n    }\n  ],\n  \"dependencies\": {\n    \"customers\": [\n      { \"source\": \"customers\", \"target\": \"shared\", \"type\": \"static\" },\n      { \"source\": \"customers\", \"target\": \"core\", \"type\": \"static\" }\n    ],\n    \"customer\": [\n      { \"source\": \"customer\", \"target\": \"shared\", \"type\": \"static\" },\n      { \"source\": \"customer\", \"target\": \"core\", \"type\": \"static\" }\n    ],\n    \"orders\": [\n      { \"source\": \"orders\", \"target\": \"core\", \"type\": \"static\" },\n      { \"source\": \"orders\", \"target\": \"shared\", \"type\": \"static\" }\n    ],\n    \"shared\": [],\n    \"about\": [],\n    \"login\": [\n      { \"source\": \"login\", \"target\": \"core\", \"type\": \"static\" },\n      { \"source\": \"login\", \"target\": \"shared\", \"type\": \"static\" }\n    ],\n    \"core\": [\n      { \"source\": \"core\", \"target\": \"shared\", \"type\": \"static\" },\n      { \"source\": \"core\", \"target\": \"angular-jumpstart\", \"type\": \"static\" }\n    ],\n    \"playground\": [\n      { \"source\": \"playground\", \"target\": \"angular-jumpstart\", \"type\": \"static\" },\n      { \"source\": \"playground\", \"target\": \"core\", \"type\": \"static\" },\n      { \"source\": \"playground\", \"target\": \"customer\", \"type\": \"static\" },\n      { \"source\": \"playground\", \"target\": \"customers\", \"type\": \"static\" },\n      { \"source\": \"playground\", \"target\": \"orders\", \"type\": \"static\" },\n      { \"source\": \"playground\", \"target\": \"about\", \"type\": \"static\" },\n      { \"source\": \"playground\", \"target\": \"login\", \"type\": \"static\" },\n      { \"source\": \"playground\", \"target\": \"shared\", \"type\": \"static\" }\n    ],\n    \"angular-jumpstart\": []\n  },\n  \"workspaceLayout\": { \"appsDir\": \"projects\", \"libsDir\": \"projects\" },\n  \"affectedProjectIds\": [],\n  \"focus\": null,\n  \"groupByFolder\": false,\n  \"exclude\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Generating Component Tests\nDESCRIPTION: Command to generate Cypress component configuration with automatic test file generation.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:cypress-component-configuration --project=my-cool-react-project --generate-tests\n```\n\n----------------------------------------\n\nTITLE: Showing Nx Project Details\nDESCRIPTION: Command to display detailed information about a specific Nx project, including its configuration and available tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-06-nuxt-js-support-in-nx.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx show project my-nuxt-app --web\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Codegen Dependencies\nDESCRIPTION: This command installs the necessary dependencies for GraphQL Codegen, including the CLI and plugins for TypeScript and React Apollo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D @graphql-codegen/cli @graphql-codegen/typescript @graphql-codegen/typescript-resolvers @graphql-codegen/typescript-react-apollo\n```\n\n----------------------------------------\n\nTITLE: Generating Basic esbuild Configuration (Nx)\nDESCRIPTION: This command generates a basic esbuild configuration for the specified project. It uses the `@nx/esbuild:configuration` generator. This assumes that no existing 'build' target is already defined for the project.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/esbuild/docs/configuration-examples.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/esbuild:configuration my-package\n```\n\n----------------------------------------\n\nTITLE: Updating ESLint Configuration - JSON\nDESCRIPTION: This JSON snippet displays the structure of an '.eslintrc.json' file before and after a configuration change. It shows the addition of rules for TypeScript files, specifically the '@angular-eslint/prefer-standalone' rule.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-2-0/disable-angular-eslint-prefer-standalone.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"overrides\\\": [\\n    {\\n      \\\"files\\\": [\\\"*.html\\\"],\\n      \\\"rules\\\": {\\n        \\\"some-rule-for-html\\\": \\\"error\\\"\\n      }\\n    }\\n  ]\\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"overrides\\\": [\\n    {\\n      \\\"files\\\": [\\\"*.html\\\"],\\n      \\\"rules\\\": {\\n        \\\"some-rule-for-html\\\": \\\"error\\\"\\n      }\\n    },\\n    {\\n      \\\"files\\\": [\\\"*.ts\\\"],\\n      \\\"rules\\\": {\\n        \\\"@angular-eslint/prefer-standalone\\\": \\\"off\\\"\\n      }\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Federated Module in React Host Application\nDESCRIPTION: Import and use the federated 'hello' function in the host React application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/federate-a-module.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport hello from 'greeting/Hello';\n\nexport function App() {\n  return <div>{hello()}</div>;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace Layout in nx.json\nDESCRIPTION: JSON configuration for customizing the workspace layout in Nx, specifically the locations of applications and libraries directories.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-29-the-react-cli-you-always-wanted-but-didnt-know-about.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workspaceLayout\": {\n    \"appsDir\": \"apps\",\n    \"libsDir\": \"libs\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitbucket Code Owners in nx.json\nDESCRIPTION: Configuration for setting up Bitbucket CODEOWNERS file with similar functionality to GitHub, but specific to Bitbucket's implementation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/owners/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"owners\": {\n    \"format\": \"bitbucket\",\n    \"outputPath\": \"CODEOWNERS\",\n    \"patterns\": [\n      {\n        \"description\": \"A description of the rule\",\n        \"owners\": [\"@joelovesrust\"],\n        \"projects\": [\"my-rust-app\", \"rust-*\", \"tag:rust\"],\n        \"files\": [\".github/workflows/**/*\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Decorators in a React Native Story\nDESCRIPTION: Example showing how to combine both the Store and Navigation decorators in a React Native story to provide all necessary context for a component.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-25-use-storybook-with-nx-react-native.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { storiesOf } from '@storybook/react-native';\nimport { mockPeopleEntity } from '@studio-ghibli-search-engine/models';\nimport React from 'react';\n\nimport { NavigationDecorator, StoreDecorator } from '../../../storybook/mocks';\n\nimport PeopleListItem from './people-list-item';\n\nstoriesOf('PeopleListItem', module)\n  .addDecorator(StoreDecorator)\n  .addDecorator(NavigationDecorator)\n  .add('Primary', () => <PeopleListItem people={mockPeopleEntity} />);\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Details in Nx CLI\nDESCRIPTION: This command shows the project detail view for the e2e project, which includes information about task splitting.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/features/split-e2e-tasks.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx show project my-project-e2e\n```\n\n----------------------------------------\n\nTITLE: Creating Angular Rspack Configuration\nDESCRIPTION: This code snippet demonstrates how to use the `createConfig` function to define different configurations for an Angular Rspack project. It defines a default configuration and a production configuration with specific file replacements and Rspack overrides. It uses the `NGRS_CONFIG` environment variable to determine which configuration to use.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/handling-configurations.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@nx/angular-rspack';\nexport default createConfig(\n  {\n    options: {\n      browser: './src/main.ts',\n      server: './src/main.server.ts',\n      ssrEntry: './src/server.ts',\n    },\n    rspackConfigOverrides: {\n      mode: 'development',\n    },\n  },\n  {\n    production: {\n      options: {\n        fileReplacements: [\n          {\n            replace: './src/environments/environment.ts',\n            with: './src/environments/environment.prod.ts',\n          },\n        ],\n      },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Nx 19 Feature Cards Implementation in Markdown\nDESCRIPTION: Markdown implementation of feature cards layout showcasing the major updates and changes in Nx 19 release\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/19_0_0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% cards cols=\"2\" %}\n{% card title=\"NEW PLUGIN: @nx/gradle\" type=\"document\" url=\"/blog/nx-19-release#new-plugin-nxgradle\" /%}\n{% card title=\"Nx Atomizer Enhancements\" type=\"document\" url=\"/blog/nx-19-release#nx-atomizer-enhancements\" /%}\n{% card title=\"Associated Technologies Added To Tasks\" type=\"document\" url=\"/blog/nx-19-release##associated-technologies-added-to-tasks\" /%}\n{% card title=\"Generators to Migrate to Project Crystal\" type=\"document\" url=\"/blog/nx-19-release#generators-to-migrate-to-project-crystal\" /%}\n{% card title=\"General Crystal Polishing\" type=\"document\" url=\"/blog/nx-19-release#general-crystal-polishing\" /%}\n{% card title=\"Nx Cloud Updates!\" type=\"document\" url=\"/blog/nx-19-release#nx-cloud-updates\" /%}\n{% card title=\"More Miscellaneous Updates!\" type=\"document\" url=\"/blog/nx-19-release#more-miscellaneous-updates\" /%}\n{% card title=\"NEW CONFERENCE: Monorepo World 2024\" type=\"document\" url=\"/blog/nx-19-release#new-conference-monorepo-world-2024\" /%}\n{% /cards %}\n```\n\n----------------------------------------\n\nTITLE: Manual Build Target Specification\nDESCRIPTION: Command to generate Cypress component configuration with manually specified build target.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:cypress-component-configuration --project=my-cool-react-project --build-target:some-react-app:build --generate-tests\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes for Products and Orders in React\nDESCRIPTION: This solution shows the final App component with routes for both Products and Orders components imported from their respective libraries.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/7-share-code/content.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```solution:/apps/react-store/src/app/app.tsx title=\"/apps/react-store/src/app/app.tsx\"\n\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Nx Project Task Details with Shell Command\nDESCRIPTION: This shell command utilizes Nx to display the settings of tasks for a specified project within a workspace. The command uses Nx's web interface to show project details. Ensure you have Nx CLI installed and properly configured within your workspace for execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/inferred-tasks.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx show project my-project --web\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Cloud Runner in nx.json\nDESCRIPTION: This JSON snippet shows the changes made to nx.json when setting up Nx Cloud. It replaces the default runner with @nrwl/nx-cloud and adds an access token for authentication.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-18-nx-console-meets-nx-cloud.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"default\": {\n- \"runner\": \"nx/tasks-runners/default\",\n+ \"runner\": \"@nrwl/nx-cloud\",\n  \"options\": {\n+   \"accessToken\": \"NDM2MmU2YmUtNDFl…ifHJlYWQtd3JpdGU=\",\n    \"cacheableOperations\": [\n      \"build\",\n      \"lint\",\n      \"test\",\n      \"e2e\"\n    ],\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Serving Next.js Applications\nDESCRIPTION: Commands to serve Next.js applications for development and production using inferred tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/next/documents/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx dev my-new-app\n\nnx start my-new-app\n```\n\n----------------------------------------\n\nTITLE: Displaying All Projects in Nx Workspace\nDESCRIPTION: This command shows all projects in the Nx workspace using the 'show projects' subcommand.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/show.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx show projects\n```\n\n----------------------------------------\n\nTITLE: Creating Local Plugin Generator in Nx\nDESCRIPTION: This command creates a local plugin with a generator in an Nx workspace. It's used to codify organization-specific best practices into easily implementable generators.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/workspace/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/plugin:plugin packages/feature\n```\n\n----------------------------------------\n\nTITLE: Configure projects to release\nDESCRIPTION: Configures the `nx release` command to target only specific projects for release by adding the `release.projects` property to `nx.json`. This example releases projects located in the `crates` directory, and configures legacy versioning.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/publish-rust-crates.md#_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"release\": {\n    \"projects\": [\"crates/*\"],\n    \"version\": {\n      // Legacy versioning is currently required for the @monodon/rust plugin, see the note above for more details\n      \"useLegacyVersioning\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Nx Logo HTML\nDESCRIPTION: HTML markup for displaying the Nx logo with dark/light mode support using the picture element and media queries. The logo adapts based on the user's color scheme preference.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/rsbuild/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"text-align: center;\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Android for HTTP Requests\nDESCRIPTION: This XML snippet modifies the network_security_config.xml file to allow HTTP requests for specific domains in Android.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<network-security-config>\n    <domain-config cleartextTrafficPermitted=\"true\">\n        <domain includeSubdomains=\"true\">10.0.2.2</domain>\n        <domain includeSubdomains=\"true\">localhost</domain>\n        <domain includeSubdomains=\"true\">herokuapp.com</domain>\n    </domain-config>\n</network-security-config>\n```\n\n----------------------------------------\n\nTITLE: Testing React Component with React Testing Library\nDESCRIPTION: A test case that renders a React App component and verifies the presence of text containing 'Hello' in the document. Uses React Testing Library for DOM manipulation and Jest for assertions.\nSOURCE: https://github.com/nrwl/nx/blob/master/e2e/nx-init/src/files/cra/src/App.test.js.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { render, screen } from '@testing-library/react';\nimport App from './App';\n\ntest('renders learn react link', () => {\n  render(<App />);\n  const linkElement = screen.getByText(/Hello/);\n  expect(linkElement).toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Generating New Nuxt Component\nDESCRIPTION: Command to generate a new component in a Nuxt application using the @nx/nuxt:component generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nuxt/docs/application-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nuxt:component my-app/src/components/my-cmp\n```\n\n----------------------------------------\n\nTITLE: Default Configuration for Executors - JSON\nDESCRIPTION: This snippet demonstrates how to set a default configuration for an end-to-end testing target in project.json to streamline the process for developers.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/executors-and-configurations.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"e2e\": {\n    \"executor\": \"@nx/cypress:cypress\",\n    \"options\": {\n      \"cypressConfig\": \"apps/my-app-e2e/cypress.config.ts\"\n    },\n    \"configurations\": {\n      \"dev\": {\n        \"devServerTarget\": \"my-app:serve\"\n      },\n      \"qa\": {\n        \"baseUrl\": \"https://some-internal-url.example.com\"\n      }\n    },\n    \"defaultConfiguration\": \"dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up pnpm Workspaces - YAML\nDESCRIPTION: This YAML configuration defines the packages included in the pnpm workspace, enabling linking of multiple projects under specified folders.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/typescript-project-linking.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\npackages:\n  - 'apps/*'\n  - 'packages/*'\n```\n\n----------------------------------------\n\nTITLE: Call to Action Component Implementation\nDESCRIPTION: Template code for rendering a call-to-action component with title, URL and description parameters.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-22-nx-cloud-scale-your-ci-and-team-with-ease.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% call-to-action title=\"Download the recording\" url=\"https://go.nx.dev/jan2025-webinar\" description=\"Sign up to gain access\" /%}\n```\n\n----------------------------------------\n\nTITLE: Joining Path Fragments in TypeScript\nDESCRIPTION: Function that takes multiple string path fragments as arguments and joins them into a normalized path string. Important note that this should not be used for Windows disk operations due to drive letter handling.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/joinPathFragments.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\njoinPathFragments(...fragments: string[]): string\n```\n\n----------------------------------------\n\nTITLE: Building Rust Application in Nx Workspace\nDESCRIPTION: Command to build the Rust application using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-rust.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx build myapp\n```\n\n----------------------------------------\n\nTITLE: Installing Nx as a Dev Dependency with yarn\nDESCRIPTION: Command to install the Nx package as a development dependency using yarn.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/manual.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D nx@latest\n```\n\n----------------------------------------\n\nTITLE: Generating Expo App in Nx Workspace\nDESCRIPTION: Command to generate an Expo app within the Nx workspace using @nrwl/expo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-23-introducing-expo-support-for-nx.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nrwl/expo:app poetry-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Generators Example - TypeScript\nDESCRIPTION: Example showing how to configure default values for Nx generators in the nx.json file, specifically for @nx/react library generator defaults.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/NxJsonConfiguration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"@nx/react\": {\n    \"library\": {\n      \"style\": \"scss\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NxModuleFederationDevServerPlugin Class Definition\nDESCRIPTION: Class definition for the client-side module federation dev server plugin, showing constructor parameters and default options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/module-federation/documents/nx-module-federation-dev-server-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class NxModuleFederationDevServerPlugin {\n  constructor(\n    private _options: {\n      config: ModuleFederationConfig;\n      devServerConfig?: NxModuleFederationDevServerConfig;\n    }\n  ) {\n    this._options.devServerConfig ??= {\n      host: 'localhost',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Web App to Vite\nDESCRIPTION: Command to convert a standard web application to use Vite, including Vitest configuration. Specifies the project name, no UI framework, and enables Vitest integration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/configuration-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/vite:configuration --project=my-web-app --uiFramework=none --includeVitest\n```\n\n----------------------------------------\n\nTITLE: Configuring useNx flag in Lerna configuration\nDESCRIPTION: Example of setting the useNx flag in lerna.json to enable Nx integration, which provides caching and speeds up task execution. In Lerna v6, this is enabled by default.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-10-12-lerna-reborn-whats-new-in-v6.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// lerna.json\n{\n    ...\n    \"useNx\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Custom Steps in Shell\nDESCRIPTION: Shell command to validate custom steps using the nx-cloud validate command. This ensures that custom steps are defined correctly before merging changes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/custom-steps.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx-cloud validate --workflow-file=./.nx/workflows/custom-steps.yaml --step-file\n```\n\n----------------------------------------\n\nTITLE: Installing Nx as a Dev Dependency with pnpm\nDESCRIPTION: Command to install the Nx package as a development dependency using pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/manual.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm add -D nx@latest\n```\n\n----------------------------------------\n\nTITLE: Generate Dynamic Next.js Page\nDESCRIPTION: This command generates a dynamic page at the path `apps/my-app/pages/products/[id]/page.tsx`.  The `[id]` segment indicates a dynamic route parameter. The Nx CLI's `page` generator handles the creation of files needed for a dynamic route in Next.js.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/page-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"nx g page \\\"apps/my-app/pages/products/[id]\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with npx\nDESCRIPTION: This command uses npx to create a new Nx workspace. It's a quick way to get started with Nx without installing it globally.\nSOURCE: https://github.com/nrwl/nx/blob/master/scripts/readme-fragments/content.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-nx-workspace\n```\n\n----------------------------------------\n\nTITLE: Creating New Nx Angular Project\nDESCRIPTION: Command to create a new Nx single-project workspace with Angular standalone preset.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/nx-and-angular.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace myngapp --preset=angular-standalone\n```\n\n----------------------------------------\n\nTITLE: Generating Playwright Configuration for Nx Project\nDESCRIPTION: Demonstrates how to use the Nx generator to add Playwright configuration to an existing project in an Nx workspace. This sets up Playwright and adds an e2e target to the project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-09-06-nx-16-8-release.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/playwright:configuration --project=my-app\n```\n\n----------------------------------------\n\nTITLE: Adding Task Dependencies for Deployment in Nx Configuration\nDESCRIPTION: Enhanced package.json configuration that defines a dependency relationship between build and deploy tasks, ensuring builds run before deployment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"deploy\": \"netlify deploy --dir=dist\"\n  },\n  \"nx\": {\n    \"targets\": {\n      \"deploy\": {\n        \"dependsOn\": [\"build\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Babel Config File Configuration\nDESCRIPTION: Example showing how to specify a custom Babel configuration file path in the webpack executor options.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/webpack/docs/webpack-build-executor-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: json5\nCODE:\n```\n//...\n\"my-app\": {\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/webpack:webpack\",\n      \"options\": {\n        \"webpackConfig\": \"apps/my-app/webpack.config.js\",\n        \"babelConfig\": \"apps/my-app/.babelrc.custom.json\",\n      }\n    },\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Performance Benchmark Results for Build Tools\nDESCRIPTION: Benchmark comparison showing Nx's performance against other monorepo tools like Lage, Turborepo, and Lerna. The results demonstrate that Nx is significantly faster, being over 52x faster than Lage and nearly 8x faster than Turborepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-06-09-nx-14-2-angular-v14-storybook-update-lightweight-nx-and-more.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n* average lage time is: 10203.6\n* average turbo time is: 1532.3\n* average lerna (powered by nx) time is: 272.2\n* average nx time is: 194.8\n* nx is 52.379876796714576x faster than lage\n* nx is 7.866016427104722x faster than turbo\n* nx is 1.3973305954825461x faster than lerna (powered by nx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Plugin in nx.json\nDESCRIPTION: JSON configuration for the Storybook plugin in nx.json, defining target names for build, serve, test, and static Storybook operations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/storybook/plugin-overview.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/storybook/plugin\",\n      \"options\": {\n        \"buildStorybookTargetName\": \"build-storybook\",\n        \"serveStorybookTargetName\": \"storybook\",\n        \"testStorybookTargetName\": \"test-storybook\",\n        \"staticStorybookTargetName\": \"static-storybook\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Library using Nx JS Lib Generator\nDESCRIPTION: The shell command generates a new library package using the `@nx/js:lib` generator. It demonstrates setting configurations for the bundler, linter, and test runner while creating a utility library for shared functionality.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/typescript-packages.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/js:lib packages/util\n```\n\n----------------------------------------\n\nTITLE: Inserting @nx/js Plugin into the Zoo Project package.json\nDESCRIPTION: This code snippet demonstrates the insertion of the @nx/js plugin into the package.json of the zoo project, allowing the plugin to manage build and typecheck tasks as per the new configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/2-smart-monorepo/5-add-plugin/content.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ins\": {\"12\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ToJSOptions Type Interface in TypeScript\nDESCRIPTION: Type declaration for ToJSOptions object that configures JavaScript conversion settings. Includes optional properties for file extension (.js/.mjs/.cjs), module kind, script target, and JSX usage flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ToJSOptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nƬ **ToJSOptions**: `Object`\n\n| Name         | Type                            |\n| :----------- | :------------------------------ |\n| `extension?` | `\".js\"` \\| `\".mjs\"` \\| `\".cjs\"` |\n| `module?`    | `ModuleKind`                    |\n| `target?`    | `ScriptTarget`                  |\n| `useJsx?`    | `boolean`                       |\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for a Library in packages/lib-a/tsconfig.json\nDESCRIPTION: Shows the TypeScript configuration for a library package, extending from the base config and specifying output settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../../tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"../../dist\",\n    \"declaration\": true\n  },\n  \"include\": [\"src/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Export for Web\nDESCRIPTION: Configuration example that targets the web platform specifically. The platform option allows selecting which platform(s) to bundle for, with choices including ios, android, web, or all.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/export-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    \"export\": {\n      \"executor\": \"@nx/expo:export\",\n      \"outputs\": [\"{options.outputDir}\"],\n      \"options\": {\n        \"platform\": \"web\",\n        \"bundler\": \"metro\",\n        \"outputDir\": \"dist/apps/dogs\"\n      },\n      \"dependsOn\": [\"sync-deps\"]\n    },\n```\n\n----------------------------------------\n\nTITLE: Creating an Nx Workspace for a Qwik Application\nDESCRIPTION: Command to initialize a new Nx workspace for a Qwik todo application using the create-nx-workspace CLI tool.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-15-qwikify-your-dev.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest qwik-todo-app\n```\n\n----------------------------------------\n\nTITLE: Type Declaration for ExpandedPluginConfiguration in TypeScript\nDESCRIPTION: The type declaration of ExpandedPluginConfiguration, specifying the required and optional properties. It includes a mandatory plugin property of type string, optional include and exclude arrays containing strings, and an optional options property of generic type T.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ExpandedPluginConfiguration.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n| Name       | Type       |\n| :--------- | :--------- |\n| `exclude?` | `string`[] |\n| `include?` | `string`[] |\n| `options?` | `T`        |\n| `plugin`   | `string`   |\n```\n\n----------------------------------------\n\nTITLE: Commit-Based Affected Testing\nDESCRIPTION: Running tests for projects affected by the last commit on main branch.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/affected.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t test --base=main~1 --head=main\n```\n\n----------------------------------------\n\nTITLE: Generating a Next.js Library\nDESCRIPTION: This command uses the Nx CLI to generate a new library within the specified directory. It creates a reusable module that can be shared between different applications within the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n\"nx g @nx/next:lib libs/my-new-lib\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Solid Application Entry Point\nDESCRIPTION: Set up the entry point for the Solid application. This file imports the App component and renders it to the DOM using Solid's render function.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-solid.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n/* @refresh reload */\nimport { render } from 'solid-js/web';\n\nimport App from './App';\n\nconst root = document.getElementById('root');\n\nif (import.meta.env.DEV && !(root instanceof HTMLElement)) {\n  throw new Error(\n    'Root element not found. Did you forget to add it to your index.html? Or maybe the id attribute got misspelled?'\n  );\n}\n\nrender(() => <App />, root!);\n```\n\n----------------------------------------\n\nTITLE: Homebrew Installation of Nx\nDESCRIPTION: Install Nx globally using Homebrew on macOS. Requires Homebrew package manager to be pre-installed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/installation/install-non-javascript.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew tap nrwl/nx\nbrew install nx\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Setup with SWC in Nx\nDESCRIPTION: This snippet shows how to implement a global setup function when using SWC with Jest in an Nx project. It uses dynamic imports to ensure proper hoisting of imports and registration of TypeScript paths.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/jest/jest-plugin.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerTsProject } from '@nx/js/src/internal';\nconst cleanupRegisteredPaths = registerTsProject('./tsconfig.base.json');\n\nexport default async function () {\n  // swc will hoist all imports, and we need to make sure the register happens first\n  // so we import all nx project alias within the setup function first.\n  const { yourFancyFunction } = await import('@some-org/my-util-library');\n\n  yourFancyFunction();\n\n  // make sure to run the clean up!\n  cleanupRegisteredPaths();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with React Module Federation\nDESCRIPTION: This snippet demonstrates configuring Webpack with React Module Federation using `withModuleFederation` from `@nx/react`. It utilizes `composePlugins` to combine `withNx`, `withReact`, and `withModuleFederation`. It assumes the existence of a `module-federation.config.js` file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/webpack-plugins.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { composePlugins, withNx } = require('@nx/webpack');\nconst { withReact, withModuleFederation } = require('@nx/react');\n\n// Host config\n// e.g. { remotes: ['about', 'dashboard'] }\nconst moduleFederationConfig = require('./module-federation.config');\n\nmodule.exports = composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(moduleFederationConfig),\n  (config) => {\n    // Further customize webpack config\n    return config;\n  }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Mode with Clean False\nDESCRIPTION: This example shows how to configure the `@nx/js:tsc` executor to not clean the output folder before running a build when batch mode is enabled. By setting `clean` to `false`, the executor preserves the `.tsbuildinfo` file, enabling TypeScript to perform important build optimizations.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/tsc-examples.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"executor\": \"@nx/js:tsc\",\n    \"options\": {\n      \"outputPath\": \"dist/libs/ts-lib\",\n      \"main\": \"libs/ts-lib/src/index.ts\",\n      \"tsConfig\": \"libs/ts-lib/tsconfig.lib.json\",\n      \"assets\": [\"libs/ts-lib/*.md\"],\n      \"clean\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Multiple Gradle Build Tasks with Nx (Shell)\nDESCRIPTION: This command runs the `build` task for all projects in the Nx workspace using the `run-many` command. It utilizes Nx's caching to speed up the process by skipping tasks with unchanged outputs.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n./nx run-many -t build\n```\n\n----------------------------------------\n\nTITLE: Configuring Caching for Nx Tasks\nDESCRIPTION: Example showing how to enable caching for a target in project.json. Setting cache to true allows Nx to cache the results of running the task.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"test\": {\n      \"cache\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generator with Nx Devkit\nDESCRIPTION: Example of a generator implementation using Nx Devkit, showing file generation and formatting functionality. Uses Tree and generateFiles utilities from @nx/devkit.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/nx-devkit-angular-devkit.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tree, formatFiles, generateFiles } from '@nx/devkit';\nimport * as path from 'path';\n\ninterface Schema {\n  name: string;\n  skipFormat: boolean;\n}\n\nexport default async function (tree: Tree, options: Schema) {\n  generateFiles(\n    tree,\n    path.join(__dirname, 'files'),\n    path.join('tools/generators', schema.name),\n    options\n  );\n  if (!schema.skipFormat) {\n    await formatFiles(tree);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running iOS App on Specific Simulator\nDESCRIPTION: This bash command shows how to run an iOS app on a specific simulator using the Nx CLI. It includes the '--simulator' flag to specify the target device.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/run-ios-examples.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnx run-ios <app-name> --simulator=\"iPhone 14 Pro (16.2)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Cloud ID in nx.json\nDESCRIPTION: This code snippet shows how to connect to the Nx Cloud service by specifying an `nxCloudId` in the `nx.json` file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_23\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"nxCloudId\": \"SOMEID\"\n}\n```\n\n----------------------------------------\n\nTITLE: Add @monodon/rust plugin\nDESCRIPTION: Installs the `@monodon/rust` plugin, which is required for Nx Release to manage and release Rust crates.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/publish-rust-crates.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @monodon/rust\n```\n\n----------------------------------------\n\nTITLE: Displaying Manual Migration Commands\nDESCRIPTION: This command shows the list of manual migration steps without executing them, allowing for step-by-step migration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/migrate-7-generator-examples.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/storybook:migrate-7 --onlyShowListOfCommands\n```\n\n----------------------------------------\n\nTITLE: Show Project Details\nDESCRIPTION: Shows detailed information about a specific project in interactive mode\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/show.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx show project my-app\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/gradle in an Nx Workspace\nDESCRIPTION: This command adds the @nx/gradle plugin to an existing Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/gradle/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/gradle\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Dependencies in project.json\nDESCRIPTION: Example configuration showing how the package target depends on the build target in a VS Code extension project's project.json file. Demonstrates Nx's task dependency system through the dependsOn property.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-04-10-exploring-nx-console-with-mcp.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      // build configuration\n    },\n    \"package\": {\n      \"executor\": \"nx:run-commands\",\n      \"options\": {\n        \"commands\": [\"node ./tools/scripts/vscode-vsce.js\"]\n      },\n      \"dependsOn\": [\n        \"build\",\n        \"^build\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publish Packages to Local Registry\nDESCRIPTION: This command publishes all projects in the workspace to the local Verdaccio registry. It uses the `publish` target defined in the `project.json` of each project to build and publish the packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-10-create-your-own-create-react-app-cli.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many --targets publish --ver 1.0.0 --tag latest\n```\n\n----------------------------------------\n\nTITLE: Simulator Target Configuration\nDESCRIPTION: Configuration for targeting specific iOS simulators for app deployment.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/build-ios-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nxcrun simctl list devices available\n```\n\nLANGUAGE: json\nCODE:\n```\n    \"build-ios\": {\n      \"executor\": \"@nx/react-native:build-ios\",\n      \"options\": {\n        \"simulator\": \"iPhone 14 Pro\"\n      }\n    }\n```\n\nLANGUAGE: bash\nCODE:\n```\nnx build-ios <app-name> --simulator=\"iPhone 14 Pro\"\n```\n\n----------------------------------------\n\nTITLE: Update Nx Workspace to Latest Version (Shell)\nDESCRIPTION: This command updates the Nx workspace dependencies and code to the latest version. It's the primary method for upgrading an Nx workspace to a newer version. It uses `npx nx migrate latest` to perform the update.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-05-02-nx-v14-is-out-here-is-all-you-need-to-know.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\n----------------------------------------\n\nTITLE: Setting CI Cache Mode in Nx Configuration\nDESCRIPTION: This JSONC snippet demonstrates how to set the CI cache mode in the Nx configuration file. This can be used to configure cache behavior specifically for CI environments, such as setting it to read-only.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/azure-cache/azure-cache-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"azure\": {\n    // ...\n    \"ciMode\": \"read-only\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MDX Plugin with Nx 16+\nDESCRIPTION: Demonstrates how to add the @next/mdx plugin to the Next.js configuration using the composePlugins utility.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/next-config-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugins = [\n  // Add more Next.js plugins to this list if needed.\n  require('@next/mdx')(),\n  withNx,\n];\n\nmodule.exports = composePlugins(...plugins)(nextConfig);\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/express Plugin in Nx Workspace\nDESCRIPTION: This command installs the @nx/express plugin in your Nx workspace. It's important to keep the plugin version in sync with your Nx version to avoid debugging issues.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-express.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/express\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Tag Pattern in nx.json\nDESCRIPTION: This snippet configures the `releaseTagPattern` property in the `release` section of `nx.json` to customize the Git tag format used during releases. The example removes the `v` prefix from the default tag pattern.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_14\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"release\": {\n    // Here we are configuring nx release to use a custom release\n    // tag pattern (we have dropped the v prefix from the default)\n    \"releaseTagPattern\": \"{version}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Git History Filtering Status\nDESCRIPTION: Shows the status message during git history filtering process for specific project files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-10-29-nx-import.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n⠋ Filtering git history to only include files in packages/promise-pool (this might take a few minutes -- install git-filter-repo for faster performance)\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Remix Plugin in nx.json\nDESCRIPTION: JSON configuration for the @nx/remix plugin in nx.json. It allows customization of target names for build, dev, start, and typecheck tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/remix/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/remix/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"build\",\n        \"devTargetName\": \"dev\",\n        \"startTargetName\": \"start\",\n        \"typecheckTargetName\": \"typecheck\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an empty Nx workspace\nDESCRIPTION: This command creates an empty Nx workspace with the 'apps' preset. It skips CI provider setup and remote caching.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation-with-ssr.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-nx-workspace@latest myorg --preset=apps\n```\n\n----------------------------------------\n\nTITLE: Customizing Atomized Unit/E2E Tasks Group Name\nDESCRIPTION: This JSON configuration demonstrates how to customize the atomized tasks group name using the `ciGroupName` plugin option. This allows for a more descriptive name in Nx Cloud or the `nx show project --web` UI.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/jest/documents/overview.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/jest/plugin\",\n      \"include\": [\"e2e/**/*\"],\n      \"options\": {\n        \"targetName\": \"e2e-local\",\n        \"ciTargetName\": \"e2e-ci\",\n        \"ciGroupname\": \"My E2E tests (CI)\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Nx Workspace with Angular\nDESCRIPTION: Command to create a new Nx workspace with Angular preset, configuring the initial application name, stylesheet format, and Nx Cloud options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest angular-tailwind-nx --pm=yarn\n✔ What to create in the new workspace · angular\n✔ Application name                    · app1\n✔ Default stylesheet format           · css\n✔ Use Nx Cloud? (It's free and doesn't require registration.) · No\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Steps for Launch Template\nDESCRIPTION: Demonstrates the structure for defining initialization steps that are performed before an Nx Agent runs tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlaunch-templates:\n  template-one:\n    init-steps:\n```\n\n----------------------------------------\n\nTITLE: Using Expo Build\nDESCRIPTION: Commands to build standalone apps using Expo build for iOS and Android.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-23-introducing-expo-support-for-nx.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo login\n\n# iOS\nnx build-ios poetry-app\n\n# Android\nnx build-android poetry-app\n```\n\n----------------------------------------\n\nTITLE: Executing Unit Tests\nDESCRIPTION: This snippet provides the command to run unit tests for the ui-careers library using the Nx CLI with Jest as the testing framework.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/ui-careers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx test ui-careers\n```\n\n----------------------------------------\n\nTITLE: Update withModuleFederation Import in Nx (Before)\nDESCRIPTION: This snippet shows the original import statement for `withModuleFederation` and `withModuleFederationForSSR` from `@nx/angular/module-federation`. It demonstrates the starting point before migrating to the new package.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-2-0/migrate-with-mf-import-to-new-package.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\\n  withModuleFederation,\\n  withModuleFederationForSSR,\\n} from '@nx/angular/module-federation';\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Form Field Components with Lit Mixins\nDESCRIPTION: This example shows how to use Lit mixins to create reusable form field components. It includes a Field mixin for common field properties and methods, a FieldWrapper mixin for consistent rendering, and an InputField component that combines these mixins.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-06-29-nx-console-gets-lit.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst Field = (superClass) =>\n  class extends superClass {\n    // we can define (reactive) properties that every field is going to need\n    @property()\n    option: Option;\n    protected get fieldId(): string {\n      return `${this.option.name}-field`;\n    }\n\n    // we can define methods that should be available to all fields\n    dispatchValue(value: string) {\n      // ...\n    }\n  };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst FieldWrapper = (superClass) =>\n  class extends superClass {\n    // we can define a render() method so that fields are all rendered the same\n    protected render() {\n      return html` <label for=\"${this.fieldId}\">${this.option.name}</label>\n        <p>${this.option.description}</p>\n        ${this.renderField()}`;\n    }\n  };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('input-field')\nexport class InputField extends FieldWrapper(Field(LitElement)) {\n  renderField() {\n    return html` <input\n      id=\"${this.fieldId}\"\n      @input=\"${(e) => this.dispatchValue(e.target.value)}\"\n    />`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON schema using definitions and references\nDESCRIPTION: This JSON schema demonstrates the use of `$id`, `$schema`, and `$ref` to define and reference nested schemas within a complex object. Specifically, it defines an address schema with its own properties (street_address, city, state) and references the state enum within the address schema's definitions. The state definition could be used to define the possible states.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$id\": \"https://example.com/schemas/customer\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n\n  \"type\": \"object\",\n  \"properties\": {\n    \"first_name\": { \"type\": \"string\" },\n    \"last_name\": { \"type\": \"string\" },\n    \"shipping_address\": { \"$ref\": \"/schemas/address\" },\n    \"billing_address\": { \"$ref\": \"/schemas/address\" }\n  },\n  \"required\": [\n    \"first_name\",\n    \"last_name\",\n    \"shipping_address\",\n    \"billing_address\"\n  ],\n\n  \"$defs\": {\n    \"address\": {\n      \"$id\": \"/schemas/address\",\n      \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n\n      \"type\": \"object\",\n      \"properties\": {\n        \"street_address\": { \"type\": \"string\" },\n        \"city\": { \"type\": \"string\" },\n        \"state\": { \"$ref\": \"#/definitions/state\" }\n      },\n      \"required\": [\"street_address\", \"city\", \"state\"],\n\n      \"definitions\": {\n        \"state\": { \"enum\": [\"CA\", \"NY\", \"... etc ...\"] }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Advent of Code Solutions with Custom Data Sets\nDESCRIPTION: Commands to run solutions against custom data sets. This feature allows testing solutions on additional data beyond the provided sample and actual datasets.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-11-30-advent-of-code-crystal.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n> nx day-1-a-foo\n> nx day-1-foo\n> nx 1-a-foo\n> nx 1-foo\n> nx watch-day-1-a-foo\n> nx watch-day-1-foo\n> nx watch-1-a-foo\n> nx watch-1-foo\n```\n\n----------------------------------------\n\nTITLE: Configuring Android build.gradle for Vector Icons\nDESCRIPTION: Gradle configuration to add vector icons support for Android.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_6\n\nLANGUAGE: gradle\nCODE:\n```\napply from: \"../../../../node\\_modules/react-native-vector-icons/fonts.gradle\"\n```\n\n----------------------------------------\n\nTITLE: Nx-generated React Library Structure\nDESCRIPTION: Illustrates the folder and file structure created by Nx when generating a new React library, showcasing how Nx organizes modular components in a React application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nawesomereactapp\n├─ public\n│  └─ favicon.ico\n├─ src\n│  ├─ app\n│  ├─ ...\n├─ domains\n│  └─ orders\n│     └─ checkout\n│        ├─ src\n│        │  ├─ index.ts\n│        │  └─ lib\n│        │     ├─ domains-orders-checkout.module.css\n│        │     ├─ domains-orders-checkout.spec.tsx\n│        │     └─ domains-orders-checkout.tsx\n│        ├─ tsconfig.json\n│        ├─ tsconfig.lib.json\n│        ├─ tsconfig.spec.json\n│        └─ vite.config.ts\n├─ ...\n├─ index.html\n├─ package-lock.json\n├─ package.json\n├─ ...\n├─ tsconfig.app.json\n├─ tsconfig.base.json\n├─ tsconfig.json\n├─ tsconfig.spec.json\n└─ vite.config.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Nx esbuild Plugin (Nx <18)\nDESCRIPTION: Command to install the @nx/esbuild plugin in older Nx workspaces using npm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/esbuild/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/esbuild\n```\n\n----------------------------------------\n\nTITLE: Generating React Monorepo with Nx CLI\nDESCRIPTION: This command creates a new React monorepo workspace using Nx. It prompts for various configuration options such as bundler, test runner, and styling preferences.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/2-use-preset/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest react-monorepo --preset=react-monorepo\n```\n\n----------------------------------------\n\nTITLE: Defining CreateDependencies Function Type in TypeScript\nDESCRIPTION: Type definition for the createDependencies function used in Nx plugins to analyze workspace files and return a list of project dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/project-graph-plugins.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CreateDependencies<T> = (\n  opts: T,\n  context: CreateDependenciesContext\n) => CandidateDependency[] | Promise<CandidateDependency[]>;\n```\n\n----------------------------------------\n\nTITLE: Adding StackBlitz Buttons in Nx Documentation\nDESCRIPTION: This component creates a button that opens an example in StackBlitz, allowing readers to immediately experiment with the code.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n{% stackblitz-button url=\"github.com/nrwl/nx-recipes/tree/main/angular-standalone?file=README.md\" /%}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Data Access Functions in TypeScript\nDESCRIPTION: Defines core todo data access functions getTodos() and addTodo() that handle fetching and adding todos using an in-memory database. The getTodos function initializes default data if needed while addTodo handles creating new todo items.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-15-qwikify-your-dev.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { db, Todo } from './api';\n\nexport function getTodos() {\n  // A network request or db connection could be made here to fetch persisted todos\n  // For illustrative purposes, we're going to seed a rudimentary in-memory DB if it hasn't been already\n  // Then return the value from it\n  if (db.get('todos')?.length === 0) {\n    db.set('todos', [\n      {\n        id: 1,\n        message: 'First todo',\n      },\n    ]);\n  }\n  const todos: Todo[] = db.get('todos');\n  const lastId = [...todos].sort((a, b) => b.id - a.id)[0].id;\n  return { todos, lastId };\n}\nexport function addTodo(todo: { id: string; message: string }) {\n  const success = db.add('todos', {\n    id: parseInt(todo.id),\n    message: todo.message,\n  });\n  return { success };\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Storybook Configuration Generation for Nuxt\nDESCRIPTION: Basic command to generate Storybook configuration for a Nuxt project. This command sets up the basic Storybook infrastructure for a specified project.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nuxt/docs/storybook-configuration-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/nuxt:storybook-configuration project-name\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for React Monorepo Orders Library\nDESCRIPTION: This command executes the unit tests for the @react-monorepo/orders library using Vitest, a testing framework for Vite-based projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/templates/react-monorepo/lesson-6/libs/orders/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnx test @react-monorepo/orders\n```\n\n----------------------------------------\n\nTITLE: Module Federation Dev Server Configuration Interfaces\nDESCRIPTION: TypeScript interfaces defining the configuration options for the module federation dev server plugins, including SSL settings, static remotes, and retry options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/module-federation/documents/nx-module-federation-dev-server-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NxModuleFederationDevServerConfig {\n  /**\n   * The URL hostname to use for the dev server.\n   */\n  host?: string;\n  /**\n   * The port to use for the static remotes.\n   */\n  staticRemotesPort?: number;\n  /**\n   * The path to the module federation manifest file when using Dynamic Module Federation.\n   */\n  pathToManifestFile?: string;\n  /**\n   * Whether to use SSL for the remote applications.\n   */\n  ssl?: boolean;\n  /**\n   * The path to the SSL certificate file.\n   */\n  sslCert?: string;\n  /**\n   * The path to the SSL key file.\n   */\n  sslKey?: string;\n  /**\n   * The number of parallel processes to use when building the static remotes.\n   */\n  parallel?: number;\n  /**\n   * Options to proivde fine-grained control over how the dev server finds the remote applications.\n   */\n  devRemoteFindOptions?: DevRemoteFindOptions;\n}\n\nexport interface DevRemoteFindOptions {\n  retries?: number;\n  retryDelay?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Nx Logout Command in Shell\nDESCRIPTION: This command logs out the user from Nx Cloud. It can be run directly using 'nx' if installed globally, or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/logout.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx logout\n```\n\n----------------------------------------\n\nTITLE: Implementing Library Function in TypeScript\nDESCRIPTION: This code snippet defines a simple function in a TypeScript library file. It demonstrates how to export functionality from a library in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-express.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function someFunction(): string {\n  return 'some function';\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Cypress Component Configuration for Next.js Project\nDESCRIPTION: Command to add Cypress component testing configuration to a Next.js project using Nx generator\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx\\/next:cypress-component-configuration --project=my-cool-next-project\n```\n\n----------------------------------------\n\nTITLE: Checking Daemon Status in TypeScript for Nx\nDESCRIPTION: This function checks if the daemon is enabled in an Nx project. It returns a boolean value, where true indicates the daemon is enabled and false indicates it is disabled.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/isDaemonEnabled.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nisDaemonEnabled(): boolean\n```\n\n----------------------------------------\n\nTITLE: Serving the Login Application in Development\nDESCRIPTION: Command to run the Angular login application during development using the Nx CLI. This launches the application on port 4201.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnx run login:serve\n```\n\n----------------------------------------\n\nTITLE: Running Detox Tests with Device Selection\nDESCRIPTION: Commands to run Detox tests on specific iOS or Android devices using the device-name option\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/detox/documents/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx test-ios frontend-e2e --device-name \"iPhone 11\"\nnx test-android frontend-e2e --device-name \"Pixel_4a_API_30\"\n```\n\n----------------------------------------\n\nTITLE: Generating a Host Library for Storybook in Nx\nDESCRIPTION: Command to generate a new React library that will host the consolidated Storybook instance. The library is created with no bundler and no unit test runner.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/one-storybook-for-all.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:library libs/storybook-host --bundler=none --unitTestRunner=none\n```\n\n----------------------------------------\n\nTITLE: Setting Yarn Version to Stable\nDESCRIPTION: Command to update Yarn to the latest stable version (Berry)\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/yarn-pnp.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn set version stable\n```\n\n----------------------------------------\n\nTITLE: Registering Conformance Rule in nx.json\nDESCRIPTION: This JSON snippet reflects the registration of a conformance rule within the nx.json configuration file. It specifies the path to the rule's implementation file, ensuring the rule is recognized by the Nx environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/conformance/create-conformance-rule.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"conformance\": {\n    \"rules\": [\n      {\n        \"rule\": \"./packages/my-plugin/local-conformance-rule/index.ts\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Storybook Refs in main.ts (JavaScript)\nDESCRIPTION: This JavaScript snippet configures Storybook Composition by defining references (`refs`) to the other Storybook instances (Angular and React).  It specifies the title and URL for each referenced Storybook, allowing the main Storybook instance to aggregate and display stories from the other instances.  It uses ports 4401 and 4402 which are used by angular and react storybooks respectively.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/one-storybook-with-composition.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/react-vite';\nimport { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';\nimport { mergeConfig } from 'vite';\n\nconst config: StorybookConfig = {\n  stories: ['../src/lib/**/*.stories.@(js|jsx|ts|tsx|mdx)'],\n  addons: ['@storybook/addon-essentials', '@storybook/addon-interactions'],\n  framework: {\n    name: '@storybook/react-vite',\n    options: {},\n  },\n  refs: {\n    'angular-stories': {\n      title: 'Angular Stories',\n      url: 'http://localhost:4401',\n    },\n    'react-stories': {\n      title: 'React Stories',\n      url: 'http://localhost:4402',\n    },\n  },\n  viteFinal: async (config) =>\n    mergeConfig(config, {\n      plugins: [nxViteTsPaths()],\n    }),\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Setting Nx Activation Key in Environment\nDESCRIPTION: Environment variable configuration for storing the Nx activation key\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/s3-cache/s3-cache-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNX_KEY=YOUR_ACTIVATION_KEY\n```\n\n----------------------------------------\n\nTITLE: Preview First Release (Dry Run)\nDESCRIPTION: This command previews the first release using the `--first-release` and `--dry-run` options.  The `--first-release` option indicates that no previous releases exist. The `--dry-run` option prevents any actual changes from being made.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/get-started-with-nx-release.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnx release --first-release --dry-run\n```\n\n----------------------------------------\n\nTITLE: Calculating Directory Offset in TypeScript\nDESCRIPTION: A function that takes a directory path and returns a string representing the relative path to reach the workspace root. The returned string consists of the appropriate number of '../' segments based on the input path depth.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/offsetFromRoot.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noffsetFromRoot('apps/mydir/myapp/'); // returns \"../../../\"\n```\n\n----------------------------------------\n\nTITLE: Storybook Configuration for Admin Scope\nDESCRIPTION: Main Storybook configuration file for admin scope that imports all stories from admin UI libraries using a specific pattern match.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/one-storybook-per-scope.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/angular';\n\nconst config: StorybookConfig = {\n  stories: ['../../admin/ui/**/src/lib/**/*.stories.ts'],\n  addons: ['@storybook/addon-essentials', '@storybook/addon-interactions'],\n  framework: {\n    name: '@storybook/angular',\n    options: {},\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Visualizing Nx Project Graph\nDESCRIPTION: Shows how to use the Nx CLI to generate a visual representation of the project's architecture, helping developers understand the structure and dependencies of their Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx graph\n```\n\n----------------------------------------\n\nTITLE: Updated Cypress Config After Removing experimentalSkipDomainInjection\nDESCRIPTION: Shows the configuration after removing experimentalSkipDomainInjection. The property is completely removed since skipping domain injection is now the default behavior in Cypress v14.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/src/migrations/update-20-8-0/set-inject-document-domain.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { nxE2EPreset } from '@nx/cypress/plugins/cypress-preset';\nimport { defineConfig } from 'cypress';\n\nexport default defineConfig({\n  e2e: {\n    ...nxE2EPreset(__filename, {\n      cypressDir: 'src',\n      bundler: 'vite',\n      webServerCommands: {\n        default: 'pnpm exec nx run app1:dev',\n        production: 'pnpm exec nx run app1:dev',\n      },\n      ciWebServerCommand: 'pnpm exec nx run app1:dev',\n      ciBaseUrl: 'http://localhost:4200',\n    }),\n    baseUrl: 'http://localhost:4200',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Astro Config Template for Generated Applications\nDESCRIPTION: Template for the Astro configuration file that defines the build configuration for the generated Astro application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/tooling-plugin.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'astro/config';\n\n// https://astro.build/config\nexport default defineConfig({});\n```\n\n----------------------------------------\n\nTITLE: Generating CI Workflow File for Nx Projects\nDESCRIPTION: This command generates a CI workflow file for GitHub Actions in an Nx project. It creates a .github/workflows/ci.yml file with a pipeline for running lint, test, build, and e2e tasks on affected projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/4-fast-ci/3-create-ci-workflow/content.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate ci-workflow --ci=github\n```\n\n----------------------------------------\n\nTITLE: Webpack-based Cypress Configuration\nDESCRIPTION: Configuration file for Cypress component testing using webpack bundler in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress';\nimport { nxComponentTestingPreset } from '@nx/react/plugins/component-testing';\n\nexport default defineConfig({\n  component: nxComponentTestingPreset(__filename, {\n    bundler: 'webpack',\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for CreateNodesContext\nDESCRIPTION: Defines the CreateNodesContext interface that extends CreateNodesContextV2. Contains three main properties: configFiles for matching configuration files, nxJsonConfiguration for Nx configuration data, and workspaceRoot for the workspace directory path.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/CreateNodesContext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CreateNodesContext extends CreateNodesContextV2 {\n  readonly configFiles: readonly string[];\n  readonly nxJsonConfiguration: NxJsonConfiguration<string[] | \"*\">;\n  readonly workspaceRoot: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Nx Configuration to Root Package.json\nDESCRIPTION: Adding the empty 'nx' property to the root package.json file to make Nx aware of the scripts. This is the minimum required setup to run scripts with Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/root-level-scripts.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myorg\",\n  \"nx\": {},\n  \"scripts\": {\n    \"docs\": \"node ./generateDocsSite.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Task Graph in Nx\nDESCRIPTION: Command to open the Nx task graph visualization tool which shows task dependencies and input files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-10-20-nx-17-release.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx graph\n```\n\n----------------------------------------\n\nTITLE: Adding Redux Logger Middleware\nDESCRIPTION: Configures the Redux store to include redux-logger middleware for debugging purposes in development mode.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport logger from 'redux-logger';\nconst rootStore = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    isDevelopment\n      ? getDefaultMiddleware().concat(logger)\n      : getDefaultMiddleware(),\n  devTools: isDevelopment,\n  preloadedState: initialRootState,\n});\n```\n\n----------------------------------------\n\nTITLE: Migrated Storybook Configuration for Angular Projects\nDESCRIPTION: This example shows a migrated project-level .storybook/main.js file for an Angular project using Storybook version 7.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/migrate-7-generator-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n  stories: ['../src/app/**/*.stories.@(js|jsx|ts|tsx|mdx)'],\n  addons: ['@storybook/addon-essentials'],\n  framework: {\n    name: '@storybook/angular',\n    options: {},\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Run Next.js Build (Development)\nDESCRIPTION: This command executes the Next.js build process using the 'development' configuration. This is a standard command to trigger a development build of the application. It leverages the settings defined in the project.json file for the development configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/build-next-executor-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"nx run acme:build:development\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Products Component in TypeScript\nDESCRIPTION: The index.ts file in the products library exports the Products component, making it available for use in other projects within the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/7-share-code/content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```file:/libs/products/src/index.ts title=\"/libs/products/src/index.ts\"\n\n```\n```\n\n----------------------------------------\n\nTITLE: Package.json with ^ Version Prefix\nDESCRIPTION: This example shows how the `package.json` file looks with the `versionPrefix` set to '^'. All dependencies will now include the '^' prefix, indicating minor-level compatibility.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/configuration-version-prefix.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"my-package\",\n  \"version\": \"0.1.1\",\n  \"dependencies\": {\n    \"dependency-one\": \"^1.0.0\",\n    \"dependency-two\": \"^2.3.4\",\n    \"dependency-three\": \"^3.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Nx Migrate Command\nDESCRIPTION: The basic syntax for using the 'nx migrate' command. It can be used to create a migrations file or run migrations from an existing file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/migrate.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate [packageAndVersion]\n```\n\n----------------------------------------\n\nTITLE: Task Graph Console Output\nDESCRIPTION: Print the task graph directly to the console.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run-many.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t=build --graph=stdout\n```\n\n----------------------------------------\n\nTITLE: Command Shorthand Syntax\nDESCRIPTION: Simplified configuration syntax for single command execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/docs/run-commands-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"webpack\": {\n    \"command\": \"webpack\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nx Migrations in Shell\nDESCRIPTION: This command runs any necessary migrations after updating Nx dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-06-nx-15-3-standalone-projects-vite-task-graph-and-more.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Generating an Application Generator with Nx CLI\nDESCRIPTION: Command to create a new generator for Astro applications within an Nx plugin using the Nx CLI generator command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/tooling-plugin.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g generator src/generators/application\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App in a Nested Directory with Nx\nDESCRIPTION: Command to generate a Next.js application in a nested directory structure within the Nx workspace. This places the app under the specified path in the apps directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/application-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g app apps/nested/myapp\n```\n\n----------------------------------------\n\nTITLE: Open Project Details in Browser\nDESCRIPTION: Opens project configuration in a web browser for exploration\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/show.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnx show project my-app --web\n```\n\n----------------------------------------\n\nTITLE: File System Structure\nDESCRIPTION: This is a sample directory listing showing the file structure of a Next.js project after building for static export.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n\"- index.d.ts\\n├── jest.config.ts\\n├── next-env.d.ts\\n├── next.config.js\\n├── out\\n├── project.json\\n├── public\\n├── specs\\n├── src\\n├── tsconfig.json\\n└── tsconfig.spec.json\"\n```\n\n----------------------------------------\n\nTITLE: Updating Navigation Stack Screen Component\nDESCRIPTION: Code showing how to replace the HoroscopeCard component with HoroscopeCardContainer in the navigation stack.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack.Screen\n    name=\"Horoscope Card\"\n    component={**HoroscopeCardContainer**}\n  />\n```\n\n----------------------------------------\n\nTITLE: Implementing Aztro API Service\nDESCRIPTION: Creates a service to fetch horoscope data from the Aztro API based on zodiac sign and day parameters.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AdhHoroscopeDay, AdhZodiacSign } from '@aztro-daily-horoscope/models';\n\nimport { AztroHoroscpeResponse } from './aztro-horoscope-response.interface';\n\nasync function getHoroscope(\n  zodiacSign: AdhZodiacSign,\n  day: AdhHoroscopeDay\n): Promise<AztroHoroscpeResponse> {\n  const response = await fetch(\n    `https://aztro.sameerkumar.website/?sign=${zodiacSign}&day=${day}`\n  );\n  if (response.ok) {\n    return response.json();\n  }\n  throw response;\n}\n\nexport const aztroService = { getHoroscope };\n```\n\n----------------------------------------\n\nTITLE: Importing TypeScript Path Mappings in Nx\nDESCRIPTION: This code snippet demonstrates the use of TypeScript path mappings in Nx for managing project linking in integrated monorepos. It's mentioned as part of the historical context for Project Crystal.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-22-nx-highlights-2024.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// TypeScript path mappings example (implied, not explicitly shown)\n```\n\n----------------------------------------\n\nTITLE: Library TypeScript Configuration\nDESCRIPTION: TypeScript configuration for a library package with build output settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../../tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"../../dist/packages/lib-a\",\n    \"rootDir\": \"src\",\n    \"tsBuildInfoFile\": \"../../dist/packages/lib-a/tsconfig.tsbuildinfo\"\n  },\n  \"include\": [\"src/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing nx.json in an Existing Repository\nDESCRIPTION: Command to generate an nx.json file in a repository that's already using Nx. This is useful when you need to customize the default Nx configuration after initially using Nx without an nx.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-06-09-nx-14-2-angular-v14-storybook-update-lightweight-nx-and-more.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx init\n```\n\n----------------------------------------\n\nTITLE: Defining a 'make hello' Terminal Command\nDESCRIPTION: A simple shell command that uses 'make' to run a 'hello' target.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/running-custom-commands.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake hello\n```\n\n----------------------------------------\n\nTITLE: Publishable Library Theme Configuration\nDESCRIPTION: Project configuration for building and distributing a publishable library with Tailwind CSS themes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-with-angular-projects.md#2025-04-22_snippet_12\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"build-angular\": {\n    \"executor\": \"@nx/angular:package\",\n    \"outputs\": [\"{workspaceRoot}/dist/libs/lib1\"],\n    \"options\": {\n      \"project\": \"libs/lib1/ng-package.json\"\n    },\n    \"configurations\": {\n      \"production\": {\n        \"tsConfig\": \"libs/lib1/tsconfig.lib.prod.json\"\n      },\n      \"development\": {\n        \"tsConfig\": \"libs/lib1/tsconfig.lib.json\"\n      }\n    },\n    \"defaultConfiguration\": \"production\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting to nxCloudId in Nx Cloud (Bash)\nDESCRIPTION: Command to convert existing Nx Cloud setup to use nxCloudId instead of nxCloudAccessToken. This is a prerequisite for using personal access tokens.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-10-personal-access-tokens.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx-cloud convert-to-nx-cloud-id\n```\n\n----------------------------------------\n\nTITLE: Implementing Horoscope Card Component\nDESCRIPTION: Creates a card component to display horoscope information using React Native Elements, showing static data for the Leo zodiac sign.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AdhZodiacSign } from '@aztro-daily-horoscope/models';\nimport React from 'react';\nimport { Card, Text } from '@rneui/base';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\n\n/* eslint-disable-next-line */\nexport interface HoroscopeCardProps {}\n\nexport function HoroscopeCard(props: HoroscopeCardProps) {\n  return (\n    <Card>\n      <Card.Title>\n        <Icon name=\"zodiac-leo\" size={40} />\n      </Card.Title>\n      <Card.Title>{AdhZodiacSign.Leo}</Card.Title>\n      <Card.Divider />\n      <Text h4 style={{ width: '100%', textAlign: 'center' }}>\n        Your Horoscope for Today\n      </Text>\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using File Replacements in Angular Rsbuild Configuration\nDESCRIPTION: Example demonstrating how to use file replacements in an Angular Rsbuild configuration. This replaces the development environment file with the production version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rsbuild/create-config.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@nx/angular-rsbuild';\n\nexport default createConfig({\n  options: {\n    browser: './src/main.ts',\n    server: './src/main.server.ts',\n    ssrEntry: './src/server.ts',\n    fileReplacements: [\n      {\n        replace: './src/environments/environment.ts',\n        with: './src/environments/environment.prod.ts',\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing from Nx-generated React Libraries\nDESCRIPTION: Shows how to import components from Nx-generated libraries using the configured TypeScript path mapping, demonstrating the ease of use in a modular Nx React application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SomeComponent } from '@awesomereactapp/domains/orders/checkout';\n```\n\n----------------------------------------\n\nTITLE: Generating a React Application with Dry Run in Nx\nDESCRIPTION: This command generates a new React application named 'inventory' in the 'apps' directory using the @nx/react:app generator. The --dry-run flag is used to preview the changes without actually creating files.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/5-add-application/content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/react:app apps/inventory --dry-run\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Dependencies in NPM Workspaces\nDESCRIPTION: Example of optional dependency reference in consuming package's package.json when using NPM workspaces. Shows how to reference a local dependency using the * version specifier.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@ts-monorepo-linking/myapp\",\n  ...\n  \"dependencies\": {\n    \"@ts-monorepo-linking/lib-a\": \"*\" // optional for NPM workspaces\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Documentation API with Nx\nDESCRIPTION: Command to run tests for the documentation-api library using the Nx build system\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/data-access-documents/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx test documentation-api\n```\n\n----------------------------------------\n\nTITLE: Building Expo Apps with Nx\nDESCRIPTION: Commands for building Expo apps using Nx. Includes options for specifying platforms and build profiles.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-24-step-by-step-guide-to-creating-an-expo-monorepo-with-nx.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx build cats\nnpx nx build dogs\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx build cats --platform=all\nnpx nx build cats --platform=android\nnpx nx build cats --platform=ios\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx build cats --profile=preview\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx build cats --local\n```\n\n----------------------------------------\n\nTITLE: Passing Hash Parameter to Nx Project Graph Task in Bash\nDESCRIPTION: This snippet demonstrates how to pass a hash parameter to the `nxProjectGraph` Gradle task. The `-Phash=12345` argument sets the `hash` property for the task.  This allows customization of the project graph generation process. The Gradle wrapper is assumed to be present.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/gradle/project-graph/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n./gradlew nxProjectGraph -Phash=12345\n```\n\n----------------------------------------\n\nTITLE: Tree Interface Method: children\nDESCRIPTION: Method to list all children (files and directories) of a specified directory path\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/Tree.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n▸ children(dirPath: string): string[]\n```\n\n----------------------------------------\n\nTITLE: Configuring @nx/next Plugin in nx.json\nDESCRIPTION: JSON configuration for the @nx/next plugin in nx.json, including options for build, dev, start, and serve-static target names.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/next/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/next/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"build\",\n        \"devTargetName\": \"dev\",\n        \"startTargetName\": \"start\",\n        \"serveStaticTargetName\": \"serve-static\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for the Host Library\nDESCRIPTION: Command to configure Storybook for the host library using the @nx/storybook:configuration generator. Sets up interaction tests and specifies React-Vite as the UI framework.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/one-storybook-for-all.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/storybook:configuration storybook-host --interactionTests=true --uiFramework=@storybook/react-vite\n```\n\n----------------------------------------\n\nTITLE: Reading Project Configuration in Nx\nDESCRIPTION: Function that reads project configuration from a file system tree. Takes a Tree object and project name as parameters and returns a ProjectConfiguration object. Throws an error if the project name cannot be found.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/readProjectConfiguration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadProjectConfiguration(tree: Tree, projectName: string): ProjectConfiguration\n```\n\n----------------------------------------\n\nTITLE: React App Component with Package Import\nDESCRIPTION: Example React component showing how to import and use a local package from the monorepo\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-29-new-nx-experience.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport NxWelcome from './nx-welcome';\n\nimport { mytslib } from '@tsmono/mytslib';\n\nexport function App() {\n  console.log(mytslib());\n  return (\n    <div>\n      <NxWelcome title=\"@tsmono/myviteapp\" />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Importing Astro Components in TypeScript\nDESCRIPTION: Example of importing Astro components from a library in an Astro page file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-astro.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport Card from '@myrepo/ui/Card.astro';\nimport Footer from '@myrepo/ui/Footer.astro';\nimport Header from '@myrepo/ui/Header.astro';\n```\n\n----------------------------------------\n\nTITLE: Generate Module Federation Setup for React (Shell)\nDESCRIPTION: This command uses the Nx generator to create a new module federation setup for a React application.  It creates a host application named 'shell' and defines 'shop', 'cart', and 'about' as remote modules. This facilitates splitting up a large application into smaller, independently deployable pieces.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-05-02-nx-v14-is-out-here-is-all-you-need-to-know.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nrwl/react:host shell --remotes=shop,cart,about\n```\n\n----------------------------------------\n\nTITLE: Parallel Testing with Worker Limit\nDESCRIPTION: Run tests for projects with a specified number of parallel workers (5).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run-many.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t test -p proj1 proj2 --parallel=5\n```\n\n----------------------------------------\n\nTITLE: Serving Host with Remotes Supporting Live Reloading\nDESCRIPTION: This code shows how to configure the Nx Module Federation Dev Server to host applications with remotes capable of live reloading. It specifies build configurations for production and development, sets the listening port, and includes a list of remotes to be reloaded live, detailing configurations for each. Critical inputs are the build targets and remote details, while the output is the capability for live reloading of remote applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/module-federation-dev-server-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"serve-with-hmr-remotes\": {\n    \"executor\": \"@nx/angular:module-federation-dev-server\",\n    \"configurations\": {\n      \"production\": {\n        \"buildTarget\": \"host:build:production\"\n      },\n      \"development\": {\n        \"buildTarget\": \"host:build:development\"\n      }\n    },\n    \"defaultConfiguration\": \"development\",\n    \"options\": {\n      \"port\": 4200,\n      \"publicHost\": \"http://localhost:4200\",\n      \"devRemotes\": [\n        \"remote1\",\n        {\n          \"remoteName\": \"remote2\",\n          \"configuration\": \"development\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Executor with Nx Devkit\nDESCRIPTION: Example of an executor implementation using Nx Devkit, showing a simple message logging functionality with options handling.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/nx-devkit-angular-devkit.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Schema {\n  message: string;\n  allCaps: boolean;\n}\n\nexport default async function (\n  options: Schema,\n  context: ExecutorContext\n): Promise<{ success: true }> {\n  if (options.allCaps) {\n    console.log(options.message.toUpperCase());\n  } else {\n    console.log(options.message);\n  }\n  return { success: true };\n}\n```\n\n----------------------------------------\n\nTITLE: Project Dependencies Graph Configuration\nDESCRIPTION: JSON configuration showing project dependencies and affected project IDs in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projects\": [\n    {\n      \"name\": \"angular-store\",\n      \"type\": \"app\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"angular-store-e2e\",\n      \"type\": \"e2e\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"inventory\",\n      \"type\": \"app\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"inventory-e2e\",\n      \"type\": \"e2e\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"shared-ui\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"orders\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"products\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    }\n  ],\n  \"dependencies\": {\n    \"angular-store\": [\n      { \"source\": \"angular-store\", \"target\": \"orders\", \"type\": \"static\" },\n      { \"source\": \"angular-store\", \"target\": \"products\", \"type\": \"static\" }\n    ],\n    \"angular-store-e2e\": [\n      {\n        \"source\": \"angular-store-e2e\",\n        \"target\": \"angular-store\",\n        \"type\": \"implicit\"\n      }\n    ],\n    \"inventory\": [\n      { \"source\": \"inventory\", \"target\": \"products\", \"type\": \"static\" }\n    ],\n    \"inventory-e2e\": [\n      { \"source\": \"inventory-e2e\", \"target\": \"inventory\", \"type\": \"implicit\" }\n    ],\n    \"shared-ui\": [],\n    \"orders\": [],\n    \"products\": []\n  },\n  \"workspaceLayout\": { \"appsDir\": \"\", \"libsDir\": \"\" },\n  \"affectedProjectIds\": [\n    \"products\",\n    \"inventory\",\n    \"inventory-e2e\",\n    \"angular-store\",\n    \"angular-store-e2e\"\n  ],\n  \"focus\": null,\n  \"groupByFolder\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Tailwind CSS in Angular App\nDESCRIPTION: Command to generate Tailwind CSS configuration for an Angular application using the Nx generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nrwl/angular:setup-tailwind app1\n```\n\n----------------------------------------\n\nTITLE: Writing JSON Data to Nx Tree - TypeScript Function Signature\nDESCRIPTION: Function signature for writeJson that takes a file system tree, path, value and optional serialization options. It writes a JSON value to the specified path in the Nx file system tree. The function is generic and can handle any object type.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/writeJson.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwriteJson<T extends object = object>(tree: Tree, path: string, value: T, options?: JsonSerializeOptions): void\n```\n\n----------------------------------------\n\nTITLE: Running Nx React App in StackBlitz\nDESCRIPTION: Command to serve a React application in StackBlitz environment using Nx\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-08-01-nx-19-5-update.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx serve react-app\n```\n\n----------------------------------------\n\nTITLE: Resetting Vite Build Output Directory in Nx Monorepo\nDESCRIPTION: Vite configuration that sets the build output directory back to the default './dist' location to maintain compatibility with other tools in the monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  // ...\n  build: {\n    outDir: './dist',\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Generator with Angular Schematic\nDESCRIPTION: Equivalent generator implementation using Angular Devkit (Schematic). Shows template processing and file operations using Angular's chain and mergeWith utilities.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/nx-devkit-angular-devkit.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  apply,\n  branchAndMerge,\n  chain,\n  mergeWith,\n  Rule,\n  template,\n  url,\n  move,\n} from '@angular-devkit/schematics';\nimport { formatFiles } from '@nx/workspace';\nimport { toFileName } from '@nx/workspace';\n\ninterface Schema {\n  name: string;\n  skipFormat: boolean;\n}\n\nexport default function (options: Schema): Rule {\n  const templateSource = apply(url('./files'), [\n    template({\n      dot: '.',\n      tmpl: '',\n      ...(options as any),\n    }),\n    move('tools/generators'),\n  ]);\n  return chain([\n    branchAndMerge(chain([mergeWith(templateSource)])),\n    formatFiles(options),\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Nx Configuration with Plugins (JSON)\nDESCRIPTION: This JSON configuration demonstrates the `plugins` property within `nx.json`. It configures Nx plugins such as `@nx/vite`, `@nx/eslint`, and `@nx/cypress`. The `options` property within each plugin specifies names for inferred targets, reducing redundancy and configuration overhead. These target names will then be dynamically created, even if they are not explicitly defined in the `project.json`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-05-nx-18-project-crystal.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/vite/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"build\",\n        \"previewTargetName\": \"preview\",\n        \"testTargetName\": \"test\",\n        \"serveTargetName\": \"serve\",\n        \"serveStaticTargetName\": \"serve-static\"\n      }\n    },\n    {\n      \"plugin\": \"@nx/eslint/plugin\",\n      \"options\": {\n        \"targetName\": \"lint\"\n      }\n    },\n    {\n      \"plugin\": \"@nx/cypress/plugin\",\n      \"options\": {\n        \"targetName\": \"e2e\",\n        \"componentTestingTargetName\": \"component-test\"\n      }\n    },\n    ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SSR Configuration for Angular with Rsbuild\nDESCRIPTION: Example of creating a configuration for a Server-Side Rendering (SSR) Angular application. This specifies entry points for browser, server, and SSR.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rsbuild/create-config.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@nx/angular-rsbuild';\n\nexport default createConfig({\n  options: {\n    browser: './src/main.ts',\n    server: './src/main.server.ts',\n    ssrEntry: './src/server.ts',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining GraphJson Interface in TypeScript\nDESCRIPTION: This snippet defines the GraphJson interface with three properties: graph (ProjectGraph), taskPlans (optional Record of string arrays), and tasks (optional TaskGraph). It represents the structure of data output by Nx graph and build commands.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/GraphJson.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GraphJson {\n  graph: ProjectGraph;\n  taskPlans?: Record<string, string[]>;\n  tasks?: TaskGraph;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Loader in a Library\nDESCRIPTION: Example of creating a loader function in a library that can be used in a Remix application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/remix/documents/overview.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { json, LoaderFunctionArgs } from '@remix-run/node';\n\nexport const adminLoader = async ({ request }: LoaderFunctionArgs) => {\n  return json({\n    message: 'Hello, world!',\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Default Generator Function\nDESCRIPTION: This TypeScript code defines a default generator function. It imports necessary modules, generates a library using `@nx/js`, formats files, and installs packages. It takes a `Tree` and a `schema` as arguments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/local-generators.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tree, formatFiles, installPackagesTask } from '@nx/devkit';\nimport { libraryGenerator } from '@nx/js';\n\nexport default async function (tree: Tree, schema: any) {\n  await libraryGenerator(tree, { name: schema.name });\n  await formatFiles(tree);\n  return () => {\n    installPackagesTask(tree);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Executing format:write Command in Nx CLI\nDESCRIPTION: This command overwrites un-formatted files in an Nx project. It can be run using nx globally, or through npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/format-write.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx format:write\n```\n\n----------------------------------------\n\nTITLE: List All Projects\nDESCRIPTION: Shows all projects in the Nx workspace\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/show.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx show projects\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Module Boundary Rules\nDESCRIPTION: This snippet demonstrates how to configure ESLint rules to enforce module boundaries based on project tags in the .eslintrc.base.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"overrides\": [\n    {\n      ...\n      \"rules\": {\n        \"@nx/enforce-module-boundaries\": [\n          \"error\",\n          {\n            \"enforceBuildableLibDependency\": true,\n            \"allow\": [],\n            \"depConstraints\": [\n              {\n                \"sourceTag\": \"*\",\n                \"onlyDependOnLibsWithTags\": [\"*\"]\n              },\n              {\n                \"sourceTag\": \"type:feature\",\n                \"onlyDependOnLibsWithTags\": [\"type:feature\", \"type:ui\"]\n              },\n              {\n                \"sourceTag\": \"type:ui\",\n                \"onlyDependOnLibsWithTags\": [\"type:ui\"]\n              },\n              {\n                \"sourceTag\": \"scope:orders\",\n                \"onlyDependOnLibsWithTags\": [\n                  \"scope:orders\",\n                  \"scope:products\",\n                  \"scope:shared\"\n                ]\n              },\n              {\n                \"sourceTag\": \"scope:products\",\n                \"onlyDependOnLibsWithTags\": [\"scope:products\", \"scope:shared\"]\n              },\n              {\n                \"sourceTag\": \"scope:shared\",\n                \"onlyDependOnLibsWithTags\": [\"scope:shared\"]\n              }\n            ]\n          }\n        ]\n      }\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Nx Project Configuration for Vite React App\nDESCRIPTION: Example project.json configuration for a Vite-powered React application in Nx, showing build, serve, and test targets.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-06-nx-15-3-standalone-projects-vite-task-graph-and-more.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"viteapp\",\n  ...\n  \"projectType\": \"application\",\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nrwl/vite:build\",\n      ...\n    },\n    \"serve\": {\n      \"executor\": \"@nrwl/vite:dev-server\",\n      \"defaultConfiguration\": \"development\",\n      ...\n    },\n    \"test\": {\n      \"executor\": \"@nrwl/vite:test\",\n      \"outputs\": [\"{projectRoot}/coverage\"],\n      \"options\": {\n        \"passWithNoTests\": true\n      }\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ESBuild with Custom Bundle Option\nDESCRIPTION: Allows configuration of the esbuildOptions for custom bundle settings in the project.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/library-examples.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"build\": {\n  \"executor\": \"@nx/esbuild:esbuild\",\n  \"options\": {\n    \"esbuildOptions\": {\n        \"bundle\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Node Global Installation of Nx\nDESCRIPTION: Install Nx globally using npm package manager. Requires Node.js to be pre-installed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/installation/install-non-javascript.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --global nx\n```\n\n----------------------------------------\n\nTITLE: Selecting a project using x-dropdown in Nx generator schema\nDESCRIPTION: This JSON schema defines an Nx generator option `project` that allows the user to select a project from the workspace. It uses the `x-dropdown` property set to \"projects\" to automatically populate a selection list with available projects. This allows for interactive selection of an existing project during generator execution. The 'name' property uses a default value from the command line.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://json-schema.org/schema\",\n  \"id\": \"my-generator\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"description\": \"Component name\",\n      \"$default\": {\n        \"$source\": \"argv\",\n        \"index\": 0\n      }\n    },\n    \"project\": {\n      \"type\": \"string\",\n      \"description\": \"The project where the component will be located.\",\n      \"x-prompt\": \"Which project will this component be located in?\",\n      \"x-dropdown\": \"projects\"\n    }\n  },\n  \"required\": [\"name\", \"project\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Executor Options in nx.json\nDESCRIPTION: This snippet shows how to configure default options for a specific executor, in this case, `@nx/js:tsc`, within the `targetDefaults` section of the `nx.json` file. It sets the `generateExportsField` option to `true` for all targets using the `@nx/js:tsc` executor.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"@nx/js:tsc\": {\n      \"options\": {\n        \"generateExportsField\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root State Interface for Redux Store in TypeScript\nDESCRIPTION: This snippet defines the RootState interface for the Redux store, which includes the state type for the 'likes' feature.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-08-state-management.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LikesState } from '../likes/likes.slice';\n\nexport interface RootState {\n  likes: LikesState;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nx GCS Cache Plugin\nDESCRIPTION: Command to add the @nx/gcs-cache package to an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/gcs-cache/gcs-cache-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/gcs-cache\n```\n\n----------------------------------------\n\nTITLE: Generate React Library for Storybook Host (Nx)\nDESCRIPTION: This command generates a React library to serve as the host for Storybook Composition.  It disables the bundler and unit tests to keep the library lightweight, focusing solely on hosting the composed Storybook.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/one-storybook-with-composition.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:lib libs/storybook-host --bundler=none --unitTestRunner=none\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Globally with Yarn v1\nDESCRIPTION: Command to install Nx globally using Yarn v1 package manager. This enables running Nx commands directly without yarn prefix.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/getting-started/installation.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nyarn global add nx@latest\n```\n\n----------------------------------------\n\nTITLE: Angular Markdown Table - Version Compatibility Matrix\nDESCRIPTION: Markdown table showing compatibility between Angular versions and corresponding Nx versions, including recommended versions and supported ranges.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/angular-nx-version-matrix.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Angular Version | **Nx Version _(recommended)_** | Nx Version _(range)_                     |\n| --------------- | ------------------------------ | ---------------------------------------- |\n| ~19.2.0         | **latest**                     | >=20.5.0 <=latest                        |\n| ~19.1.0         | **latest**                     | >=20.4.0 <=latest                        |\n| ~19.0.0         | **latest**                     | >=20.2.0 <=latest                        |\n```\n\n----------------------------------------\n\nTITLE: Running Nx Tasks for Astro\nDESCRIPTION: Demonstrate how to run Nx tasks for an Astro project, including using 'nx exec' to wrap commands for package manager compatibility.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-astro.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx build\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"e2e\": \"nx exec -- playwright test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Library with Vite Bundler\nDESCRIPTION: Sets up a buildable library using Vite as the bundler by implementing the @nx/vite:build executor. Specify vite as the bundler flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/library-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/js:lib libs/mylib --bundler=vite\n```\n\n----------------------------------------\n\nTITLE: Generating Standard Tailwind Setup in Nx Angular\nDESCRIPTION: This command generates a standard Tailwind CSS setup for the specified Angular application (`myapp`). It uses the `@nx/angular:setup-tailwind` generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/setup-tailwind-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:setup-tailwind myapp\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Nx Libraries\nDESCRIPTION: Demonstrates how to run tests for specific Nx-generated libraries using the Nx CLI, showcasing Nx's ability to isolate and test individual modules.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx test domains-orders-checkout\n```\n\n----------------------------------------\n\nTITLE: Migrated Storybook Configuration for React Projects with Vite\nDESCRIPTION: This example demonstrates a migrated project-level .storybook/main.js file for a React project using Vite and Storybook version 7.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/migrate-7-generator-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n  stories: ['../src/app/**/*.stories.@(js|jsx|ts|tsx|mdx)'],\n  addons: ['@storybook/addon-essentials'],\n  framework: {\n    name: '@storybook/react-vite',\n    options: {\n      builder: {\n        viteConfigPath: 'apps/rv1/vite.config.ts',\n      },\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Listing React Plugin Capabilities in Nx\nDESCRIPTION: This command lists all available generators and executors in the @nx/react plugin, showing various options for creating React components, applications, and configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx list @nx/react\n```\n\n----------------------------------------\n\nTITLE: Configuring Build and Publish Targets in project.json\nDESCRIPTION: Updates the project.json file to include both the build target and a new publish target. The publish target depends on the build target and uses the nx-cloud CLI to publish the rules.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/enterprise/conformance/publish-conformance-rules-to-nx-cloud.md#2025-04-22_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // ...any existing project.json content\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/conformance:bundle-rules\",\n      \"outputs\": [\"{options.outputPath}\"],\n      \"options\": {\n        \"outputPath\": \"{projectRoot}/dist\"\n      }\n    },\n    \"publish\": {\n      \"dependsOn\": [\"build\"],\n      \"command\": \"npx nx-cloud publish-conformance-rules {projectRoot}/dist\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Nx Jest Plugin (Nx < 18)\nDESCRIPTION: This command installs the @nx/jest plugin as a development dependency using npm.  It adds the package to the devDependencies section of the package.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/jest/documents/overview.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/jest\n```\n\n----------------------------------------\n\nTITLE: Defining Migrations in migrations.json\nDESCRIPTION: Configuration in migrations.json that registers the change-executor-name migration to be run when upgrading to version 2.0.1.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/migration-generators.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"generators\": {\n    \"change-executor-name\": {\n      \"version\": \"2.0.1\",\n      \"description\": \"Changes the executor name from oldExecutorName to newExecutorName\",\n      \"cli\": \"nx\",\n      \"implementation\": \"./src/migrations/change-executor-name/change-executor-name\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Webpack Executor Configuration in project.json\nDESCRIPTION: Basic configuration setup for the @nx/webpack:webpack executor in project.json, specifying the webpack config file location.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/webpack/docs/webpack-build-executor-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json5\nCODE:\n```\n//...\n\"my-app\": {\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/webpack:webpack\",\n      \"options\": {\n        \"webpackConfig\": \"apps/my-app/webpack.config.js\"\n      }\n    },\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing React Application Root with StrictMode\nDESCRIPTION: Sets up the React application entry point by creating a root instance with ReactDOM.createRoot and rendering the main App component wrapped in StrictMode for additional development checks.\nSOURCE: https://github.com/nrwl/nx/blob/master/e2e/nx-init/src/files/cra/src/index.js.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Install Nx Globally (npm - Shell)\nDESCRIPTION: This command installs Nx globally using npm. Node.js and npm must be installed beforehand. It makes the `nx` command available system-wide.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --global nx\n```\n\n----------------------------------------\n\nTITLE: Configuring Deploy Task with Build Dependency in Nx\nDESCRIPTION: This configuration in package.json sets up the deploy task with a dependency on the build task, ensuring build is run before deployment.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/10-affected/content.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"deploy\": \"netlify deploy --dir=dist\"\n  },\n  \"nx\": {\n    \"targets\": {\n      \"deploy\": {\n        \"dependsOn\": [\"build\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Commands for the Host Library\nDESCRIPTION: Commands to serve, build, or test the consolidated Storybook instance. These commands target the storybook-host library that imports stories from across the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/one-storybook-for-all.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx storybook storybook-host\n```\n\n----------------------------------------\n\nTITLE: Ignoring Paths When Generating Stories\nDESCRIPTION: This command generates a Storybook configuration for the 'ui' project while ignoring specified paths for story generation. This is useful for excluding non-isolated components from generating stories.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/storybook-configuration-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:storybook-configuration ui --generateStories=true --ignorePaths=libs/ui/src/not-stories/**,**/**/src/**/*.other.*,apps/my-app/**/*.something.ts\n```\n\n----------------------------------------\n\nTITLE: Parallel Testing of Specific Projects with Nx run-many\nDESCRIPTION: Demonstrates running tests for specific projects (proj1 and proj2) in parallel using the run-many command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run-many.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t test -p proj1 proj2\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server in Cursor's mcp.json\nDESCRIPTION: JSON configuration for the Nx MCP server in Cursor IDE. This file is automatically created in the .cursor directory and specifies the server details.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-06-making-cursor-smarter.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"servers\": [\n    {\n      \"name\": \"Nx Console\",\n      \"url\": \"http://localhost:58846\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Hello Function in TypeScript\nDESCRIPTION: Update the barrel file to export the hello function as the default export.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/federate-a-module.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport { default } from './lib/hello';\n```\n\n----------------------------------------\n\nTITLE: Default Ignored Story Paths\nDESCRIPTION: This section describes the default paths that the story generator ignores. These include common Storybook file extensions. These defaults can be overwritten using the `--ignorePaths` option.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/stories-examples.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n*.stories.ts, *.stories.tsx, *.stories.js, *.stories.jsx, *.stories.mdx\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Output Directory for Expo Export\nDESCRIPTION: Example showing how to specify a custom output directory for the bundled Expo application. The outputDir option determines where the exported bundle will be stored.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/export-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"export\": {\n      \"executor\": \"@nx/expo:export\",\n      \"outputs\": [\"{options.outputDir}\"],\n      \"options\": {\n        \"platform\": \"all\",\n        \"bundler\": \"metro\",\n        \"outputDir\": \"dist/apps/mobile\"\n      },\n      \"dependsOn\": [\"sync-deps\"]\n    },\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Path Aliases in Root tsconfig.json\nDESCRIPTION: This JSON snippet shows how to configure path aliases in the root tsconfig.json file to resolve module imports within a monorepo structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-27-project-references.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"is-even\": [\"./is-even/index.ts\"],\n      \"is-odd\": [\"./is-odd/index.ts\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Specific Browserslist Query via Command Line\nDESCRIPTION: Command to test a specific browserslist query directly from the command line without modifying configuration files. This allows quick verification of browser support for custom queries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/browser-support.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx browserslist '> 0.5%, not IE 11'\n```\n\n----------------------------------------\n\nTITLE: Type Declaration - Task Interface in TypeScript\nDESCRIPTION: Interface definition for Task representation in Nx executors, including properties for caching, timing, project configuration, and execution details.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/Task.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Task {\n  id: string;\n  cache?: boolean;\n  continuous?: boolean;\n  endTime?: number;\n  hash?: string;\n  hashDetails?: {\n    command: string;\n    implicitDeps?: { [fileName: string]: string };\n    nodes: { [name: string]: string };\n    runtime?: { [input: string]: string };\n  };\n  outputs: string[];\n  overrides: any;\n  parallelism: boolean;\n  projectRoot?: string;\n  startTime?: number;\n  target: {\n    project: string;\n    target: string;\n    configuration?: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Jest Globally\nDESCRIPTION: Command to install Jest testing framework globally using npm\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/detox/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g jest\n```\n\n----------------------------------------\n\nTITLE: Commit Workflow Changes (Git)\nDESCRIPTION: This command commits the changes made to add the CI workflow file and pushes them to the remote repository on the `add-workflow` branch.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit -m 'add CI workflow file'\ngit push origin add-workflow\n```\n\n----------------------------------------\n\nTITLE: Configuring Assignment Rules with Glob Patterns in YAML\nDESCRIPTION: Example of using glob patterns in assignment rules to match multiple targets. This rule applies to tasks starting with 'e2e-ci' or 'lint'.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/assignment-rules.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nassignment-rules:\n  - targets:\n      - e2e-ci*\n      - lint*\n    run-on:\n      - agent: linux-medium\n        parallelism: 2\n```\n\n----------------------------------------\n\nTITLE: Running Prettier Formatting in Nx\nDESCRIPTION: Command to run Prettier code formatting across the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-29-the-react-cli-you-always-wanted-but-didnt-know-about.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx format\n```\n\n----------------------------------------\n\nTITLE: Customizing Nx Daemon Socket Location\nDESCRIPTION: This snippet provides guidance on how to customize the location of the socket used by the Nx Daemon, particularly for Docker environments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/daemon.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nTo control the location of the socket for sharing among Docker containers, set the NX_DAEMON_SOCKET_DIR environment variable to a shared directory.\n```\n\n----------------------------------------\n\nTITLE: Embedding Course Videos in Nx Documentation\nDESCRIPTION: This component embeds a video similar to YouTube embeds but includes additional links to Nx courses, improving discovery of related educational content.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n{% course-video src=\"https://youtu.be/3hW53b1IJ84\" courseTitle=\"From PNPM Workspaces to Distributed CI\" courseUrl=\"/courses/pnpm-nx-next/lessons-01-nx-init\" title=\"Initialize Nx in Your Project with nx init\" /%}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple React Component with Nx\nDESCRIPTION: Generates a basic React component named MyComponent in the specified UI library path using Nx generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/component-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:component libs/ui/src/my-component.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark/Light Mode Image Switch in HTML\nDESCRIPTION: HTML code snippet that implements responsive image loading with dark/light mode support using the picture element and media queries. The code switches between dark and light themed Nx logos based on user's color scheme preference.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/web/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"text-align: center;\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Generated Angular Monorepo File Structure\nDESCRIPTION: This snippet displays the file structure generated by Nx for the Angular monorepo, including the main application, e2e tests, and configuration files.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/2-use-preset/content.mdx#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n└─ angular-monorepo\n   ├─ ...\n   ├─ apps\n   │  ├─ angular-store\n   │  │  ├─ src\n   │  │  │  ├─ app\n   │  │  │  │  ├─ app.component.css\n   │  │  │  │  ├─ app.component.html\n   │  │  │  │  ├─ app.component.spec.ts\n   │  │  │  │  ├─ app.component.ts\n   │  │  │  │  ├─ app.config.ts\n   │  │  │  │  ├─ app.routes.ts\n   │  │  │  │  └─ nx-welcome.component.ts\n   │  │  │  ├─ assets\n   │  │  │  ├─ index.html\n   │  │  │  ├─ main.ts\n   │  │  │  ├─ styles.css\n   │  │  │  └─ test-setup.ts\n   │  │  ├─ eslintrc.json\n   │  │  ├─ jest.config.ts\n   │  │  ├─ project.json\n   │  │  ├─ tsconfig.app.json\n   │  │  ├─ tsconfig.editor.json\n   │  │  ├─ tsconfig.json\n   │  │  └─ tsconfig.spec.json\n   │  └─ angular-store-e2e\n   │     └─ ...\n   ├─ nx.json\n   ├─ tsconfig.base.json\n   └─ package.json\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Cypress Plugin\nDESCRIPTION: Command to install @nx/cypress package in an Nx workspace version 18+\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/cypress/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/cypress\n```\n\n----------------------------------------\n\nTITLE: Creating Zodiac Sign Item Interface\nDESCRIPTION: TypeScript interface definition for zodiac sign items with icon and sign properties.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AdhZodiacSign } from './zodiac-sign.enum';\n\nexport interface AdhZodiacSignItem {\n  icon: string;\n  zodiacSign: AdhZodiacSign;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Workspace to Nx Cloud using CLI\nDESCRIPTION: Basic command to connect a workspace to Nx Cloud. Can be executed using global nx installation or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/connect-to-nx-cloud.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx connect\n```\n\n----------------------------------------\n\nTITLE: Implementing Remix Route Component\nDESCRIPTION: React/TSX code showing how to import and use a Login component from a library in a Remix route\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/remix/remix-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Login } from '@acme/login';\n\nexport default function Index() {\n  return (\n    <div>\n      <Login />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Shared UI Package.json\nDESCRIPTION: Final package.json configuration including build scripts and dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private\": true,\n  \"name\": \"shared-ui\",\n  \"description\": \"Shared UI components\",\n  \"main\": \"dist/index.js\",\n  \"scripts\": {\n    \"build\": \"rm -rf dist && tsc\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"react\": \"^17.0.2\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"^4.6.4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Expo Component\nDESCRIPTION: Command to generate a new Expo component using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-23-introducing-expo-support-for-nx.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nrwl/expo:component poem-of-the-day --directory=components\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Nx CLI Options\nDESCRIPTION: A structured table documenting Nx command line options, their types, and detailed descriptions. Includes information about deprecated features, task execution controls, and configuration parameters.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/affected.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Option                                      | Type                                                     | Description|\n| ------------------------------------------- | -------------------------------------------------------- ||\n| ~~`--all`~~                                 | boolean                                                  | **Deprecated:** Use `nx run-many` instead|\n| `--base`                                    | string                                                   | Base of the current branch (usually main|\n| `--batch`                                   | boolean                                                  | Run task(s) in batches for executors which support batches. (Default: `false`)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| `--configuration`, `--c`                    | string                                                   | This is the configuration to use when performing tasks on projects|\n| `--exclude`                                 | string                                                   | Exclude certain projects from being processed|\n| `--excludeTaskDependencies`                 | boolean                                                  | Skips running dependent tasks first. (Default: `false`|\n| `--files`                                   | string                                                   | Change the way Nx is calculating the affected command by providing directly changed files, list of files delimited by commas or spaces|\n| `--graph`                                   | string                                                   | Show the task graph of the command. Pass a file path to save the graph data instead of viewing it in the browser. Pass \"stdout\" to print the results to the terminal|\n| `--head`                                    | string                                                   | Latest commit of the current branch (usually|\n| `--help`                                    | boolean                                                  | Show help|\n```\n\n----------------------------------------\n\nTITLE: Configuring CI Cache Mode in Nx\nDESCRIPTION: Example showing how to configure the cache mode specifically for CI environments by setting the 'ciMode' property in the Nx configuration. This allows for different cache behaviors between local and CI environments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/s3-cache/documents/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"s3\": {\n    \"region\": \"us-east-1\",\n    \"bucket\": \"my-bucket\",\n    \"ciMode\": \"read-only\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic TypeScript Library\nDESCRIPTION: Generates a new generic TypeScript library using the @nx/js plugin. This is suitable for non-framework specific libraries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/web/web-plugin.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/js:lib libs/my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Watch All Workspace Projects\nDESCRIPTION: Example showing how to watch all projects in the workspace, including newly created ones\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/watch.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx watch --all -- echo \\$NX_PROJECT_NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Formats in ESBuild\nDESCRIPTION: Commands to specify different module output formats (CommonJS or ESM) when building with ESBuild. The format can be specified as a command line option or in the project configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/esbuild/docs/esbuild-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx build <app-name> --format=cjs\nnx build <app-name> --format=esm,cjs\nnx build <app-name> # defaults to es# defaults to esm\n```\n\n----------------------------------------\n\nTITLE: Show Affected Apps\nDESCRIPTION: Shows affected applications, filtering out libraries and other project types\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/show.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx show projects --affected --type app\n```\n\n----------------------------------------\n\nTITLE: Building Nx Packages\nDESCRIPTION: Command to build all packages in the Nx repository.\nSOURCE: https://github.com/nrwl/nx/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: TypeScript Config with Project References\nDESCRIPTION: Shows the structure of tsconfig.json with the 'references' field for TypeScript project references.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-06-nx-update-20-3.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.base.json\",\n  \"compileOnSave\": false,\n  \"files\": [],\n  \"references\": []\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.base.json\",\n  \"compileOnSave\": false,\n  \"files\": [],\n  \"references\": [\n    {\n      \"path\": \"./packages/my-package\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Library Generator\nDESCRIPTION: Command to create a new generator within the recommended plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/organization-specific-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nx/plugin:generator tools/recommended/src/generators/library\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Task Execution Hooks in Nx\nDESCRIPTION: Demonstrates how to implement conditional logic in task execution hooks to control when they run based on environment variables or task types.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/task-running-lifecycle.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function preTasksExecution(options, context) {\n  // Only run for specific environments\n  if (process.env.RUNNER !== 'production') return;\n\n  // Your pre-execution logic\n}\n\nexport async function postTasksExecution(options, context) {\n  // Only run for specific task types\n  const hasAngularTasks = Object.keys(context.taskResults).some((taskId) =>\n    taskId.includes('angular')\n  );\n\n  if (!hasAngularTasks) return;\n\n  // Your post-execution logic\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stack Navigator with Type Checking\nDESCRIPTION: TypeScript code to create a stack navigator with type checking using the RootStackParamList.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n```\n\n----------------------------------------\n\nTITLE: Initializing NPM Workspaces Configuration\nDESCRIPTION: Basic package.json configuration to enable NPM workspaces for managing multiple packages in the monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/typescript-packages.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workspaces\": [\"packages/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Migrations from a File\nDESCRIPTION: Example of running migrations from a specified migrations.json file. This command can be run multiple times after modifying the file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/migrate.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate --run-migrations=migrations.json\n```\n\n----------------------------------------\n\nTITLE: Clearing Nx Workspace Data Directory\nDESCRIPTION: Command to clear the workspace data directory used by Nx to store cached data about the current workspace, including partial results and incremental data.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/reset.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx reset --only-workspace-data\n```\n\n----------------------------------------\n\nTITLE: File-Based Affected Project Testing\nDESCRIPTION: Running tests for projects affected by changes to a specific file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/affected.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t test --files=libs/mylib/src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/rspack Package for Nx < 18\nDESCRIPTION: Command to install @nx/rspack package using npm for Nx versions below 18\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/rspack/rspack-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/rspack\n```\n\n----------------------------------------\n\nTITLE: Example Output of Browserslist Debug Command\nDESCRIPTION: Sample output from the browserslist debug command showing all browsers and versions that would be supported by the current configuration. This helps verify your browser support settings match expectations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/browser-support.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nand_chr 61\nchrome 83\nedge 83\nedge 81\nfirefox 78\nfirefox 68\nie 11\nios_saf 13.4-13.5\nios_saf 13.3\nios_saf 13.2\nios_saf 13.0-13.1\nios_saf 12.2-12.4\nios_saf 12.0-12.1\nsafari 13.1\nsafari 13\nsafari 12.1\nsafari 12\n```\n\n----------------------------------------\n\nTITLE: Filter Projects by Name Pattern\nDESCRIPTION: Shows projects matching a specific name pattern, useful for run-many command preview\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/show.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx show projects --projects api-*\n```\n\n----------------------------------------\n\nTITLE: Implementing a Project Files Reporter Conformance Rule\nDESCRIPTION: Create a conformance rule using the project-files-reporter to ensure correct export syntax in index.ts and server.ts files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/conformance/documents/create-conformance-rule.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConformanceRule, ProjectFilesViolation } from '@nx/conformance';\nimport { existsSync, readFileSync } from 'node:fs';\nimport { join } from 'node:path';\nimport {\n  createSourceFile,\n  isExportDeclaration,\n  isStringLiteral,\n  isToken,\n  ScriptKind,\n  ScriptTarget,\n} from 'typescript';\n\nexport default createConformanceRule({\n  name: 'server-client-public-api',\n  category: 'consistency',\n  description: 'Ensure server-only and client-only public APIs are not mixed',\n  reporter: 'project-files-reporter',\n  implementation: async ({ projectGraph }) => {\n    const violations: ProjectFilesViolation[] = [];\n\n    for (const nodeId in projectGraph.nodes) {\n      const node = projectGraph.nodes[nodeId];\n\n      const sourceRoot = node.data.root;\n\n      const indexPath = join(sourceRoot, 'src/index.ts');\n      const serverPath = join(sourceRoot, 'src/server.ts');\n\n      if (existsSync(indexPath)) {\n        const fileContent = readFileSync(indexPath, 'utf8');\n        violations.push(\n          ...processEntryPoint(fileContent, indexPath, nodeId, 'client')\n        );\n      }\n\n      if (existsSync(serverPath)) {\n        const fileContent = readFileSync(serverPath, 'utf8');\n        violations.push(\n          ...processEntryPoint(fileContent, serverPath, nodeId, 'server')\n        );\n      }\n    }\n\n    return {\n      severity: 'medium',\n      details: { violations },\n    };\n  },\n});\n\nexport function processEntryPoint(\n  fileContent: string,\n  entryPoint: string,\n  project: string,\n  style: 'server' | 'client'\n) {\n  const violations: ProjectFilesViolation[] = [];\n\n  const sf = createSourceFile(\n    entryPoint,\n    fileContent,\n    ScriptTarget.Latest,\n    true,\n    ScriptKind.TS\n  );\n\n  let hasNotOnlyExports = false;\n  sf.forEachChild((node) => {\n    if (isExportDeclaration(node)) {\n      const moduleSpecifier =\n        node.moduleSpecifier && isStringLiteral(node.moduleSpecifier)\n          ? node.moduleSpecifier.getText()\n          : '';\n\n      if (isModuleSpecifierViolated(moduleSpecifier, style)) {\n        if (\n          violations.find(\n            (v) => v.file === entryPoint && v.sourceProject === project\n          )\n        ) {\n          // we already have a violation for this file and project, so we don't need to add another one\n          return;\n        }\n\n        violations.push({\n          message:\n            style === 'client'\n              ? 'Client-side only entry point cannot export from server-side modules'\n              : 'Server-side only entry point can only export server-side modules ',\n          file: entryPoint,\n          sourceProject: project,\n        });\n      }\n    } else if (isToken(node) && node === sf.endOfFileToken) {\n      // do nothing\n    } else {\n      hasNotOnlyExports = true;\n    }\n  });\n\n  if (hasNotOnlyExports) {\n    violations.push({\n      message: `Entry point should only contain exported APIs`,\n      file: entryPoint,\n      sourceProject: project,\n    });\n  }\n\n  return violations;\n}\n\nfunction isModuleSpecifierViolated(\n  moduleSpecifier: string,\n  style: 'server' | 'client'\n) {\n  // should not get here. if this is the case, it's a grammar error in the source code.\n  if (!moduleSpecifier) return false;\n\n  if (style === 'server' && !moduleSpecifier.includes('.server')) {\n    return true;\n  }\n\n  if (style === 'client' && moduleSpecifier.includes('.server')) {\n    return true;\n  }\n\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sync Generator in nx.json\nDESCRIPTION: JSON configuration to register the @nx/owners:sync-codeowners-file generator as a globalGenerator in nx.json\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/owners/owners-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"sync\": {\n    \"globalGenerators\": [\"@nx/owners:sync-codeowners-file\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expo App Configuration\nDESCRIPTION: Example of minimal Expo configuration in app.json file showing required expo key structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/expo/expo-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"name\": \"MyProject\",\n    \"slug\": \"my-project\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated package.json after patch release\nDESCRIPTION: Shows the updated state of a package.json file for a project named 'my-project' after a patch release, including the version and dependency update.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/updating-version-references.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"version\": \"0.1.2\",\n  \"dependencies\": {\n    \"my-other-project-in-the-monorepo\": \"0.1.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Code String Using applyChangesToString in TypeScript\nDESCRIPTION: Demonstrates how to use applyChangesToString function to modify a code string by renaming a property in a method's options. The example shows inserting a new property name and deleting the old one using StringChange objects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/applyChangesToString.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst code = `bootstrap({\n  target: document.querySelector('#app')\n})`;\n\nconst indexOfPropertyName = 13; // Usually determined by analyzing an AST.\nconst updatedCode = applyChangesToString(code, [\n  {\n    type: ChangeType.Insert,\n    index: indexOfPropertyName,\n    text: 'element',\n  },\n  {\n    type: ChangeType.Delete,\n    start: indexOfPropertyName,\n    length: 6,\n  },\n]);\n\nbootstrap({\n  element: document.querySelector('#app'),\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Target String with ExecutorContext in TypeScript\nDESCRIPTION: This overloaded version of parseTargetString uses an ExecutorContext instead of a ProjectGraph. It supports referencing the current project and handles various input formats, including those without an explicit project name.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/parseTargetString.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nparseTargetString('test', executorContext); // returns { project: \"proj\", target: \"test\" }\nparseTargetString('proj:test', executorContext); // returns { project: \"proj\", target: \"test\" }\nparseTargetString('proj:test:production', executorContext); // returns { project: \"proj\", target: \"test\", configuration: \"production\" }\n```\n\n----------------------------------------\n\nTITLE: Enforcing Conformance Rules in CI (Without Nx Cloud)\nDESCRIPTION: This YAML snippet demonstrates how to enforce conformance rules in a CI environment without using Nx Cloud. It executes the `nx conformance:check` command using `npx` to check for rule violations.  The command is designed to run at the beginning of the CI process to ensure adherence to the configured rules.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/powerpack/conformance.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Enforce all conformance rules\n  run: npx nx conformance:check\n```\n\n----------------------------------------\n\nTITLE: Generate CI Workflow File (Nx)\nDESCRIPTION: This command generates a CI workflow file for GitHub Actions. The `--ci=github` option specifies that the workflow should be created for GitHub Actions.  The generated file includes steps to lint, test, build, and run e2e tests for affected projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n./nx generate ci-workflow --ci=github\n```\n\n----------------------------------------\n\nTITLE: Generating Nx Executor With Custom Name\nDESCRIPTION: Creates an Nx executor with a custom exported name 'custom' while maintaining the file name as build.ts\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/plugin/docs/generators/executor-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/plugin:executor tools/my-plugin/src/executors/build.ts --name=custom\n```\n\n----------------------------------------\n\nTITLE: Building production bundle for React app with Nx\nDESCRIPTION: Command to create a production build for the React application named 'react-store' using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/2-use-preset/_solution/react-monorepo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx build react-store\n```\n\n----------------------------------------\n\nTITLE: Manual Splitting with Atomizer - project.json\nDESCRIPTION: Demonstrates how to combine manual E2E project splitting with the Nx Atomizer.  This involves overriding the `dependsOn` property of atomized targets (e.g., `e2e-ci--**/**`) to also depend on the application's build, ensuring that the application is built before the atomized E2E tests are run. This provides the benefits of both automatic task splitting and dependency-aware test execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-04-23-test-splitting-techniques.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"implicitDependencies\": [\"checkout\"],\n  \"targets\": {\n    \"e2e\": {\n      \"dependsOn\": [\"^build\", { \"target\": \"build\", \"projects\": \"app\" }]\n    },\n    \"e2e-ci--**/**\": {\n      \"dependsOn\": [\"^build\", { \"target\": \"build\", \"projects\": \"app\" }]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Vite-bundled Web Application\nDESCRIPTION: Creates a web application using Vite as the bundler and Vitest for unit testing. The --bundler flag specifies Vite as the build tool.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/web/docs/application-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/web:app apps/my-app --bundler=vite\n```\n\n----------------------------------------\n\nTITLE: Connecting Repository to Nx Cloud\nDESCRIPTION: Execute this shell command to initiate the process of linking a GitHub repository to Nx Cloud for enhanced CI execution through caching and task distribution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-monorepo.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx connect\n```\n\n----------------------------------------\n\nTITLE: Creating New Nx Workspace with Nuxt Preset\nDESCRIPTION: Command to create a new Nx monorepo workspace with Nuxt preset configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/nuxt/nuxt-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest --preset=nuxt\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Package Scripts\nDESCRIPTION: Basic package.json configuration showing Storybook scripts with hardcoded port values that can lead to conflicts when running multiple instances.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-18-dynamic-targets-with-inference.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@design-system/buttons\",\n  \"scripts\": {\n    \"storybook\": \"storybook dev\",\n    \"build-storybook\": \"storybook build\",\n    \"test-storybook\": \"start-server-and-test 'storybook dev --port 3000 --no-open' http://localhost:3000 'test-storybook --index-json --url=http://localhost:3000'\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Card Layout in Markdown\nDESCRIPTION: Markdown snippet for creating a card-based layout to display breaking changes information using custom card syntax.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/15_0_0.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% cards cols=\"1\" smCols=\"2\" mdCols=\"3\" %}\n\n{% card title=\"Removed UMD format support for rollup\" type=\"external\" url=\"https://github.com/nrwl/nx/pull/12426\" /%}\n\n{% card title=\"Removed --only-failed option\" type=\"external\" url=\"https://github.com/nrwl/nx/pull/12471\" /%}\n\n{% card title=\"Infer projects from package.json and project.json\" description=\"Nx will now also include folders with package.json/project.json in its graph of projects. You can ignore any unwanted projects by adding the directory to .nxignore.\" type=\"external\" url=\"https://github.com/nrwl/nx/releases/tag/15.0.0\" /%}\n\n{% /cards %}\n```\n\n----------------------------------------\n\nTITLE: Local Registry Configuration - JSON\nDESCRIPTION: This JSONC snippet defines a local registry target in the project configuration, allowing for the use of Verdaccio as a local package registry for testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/create-install-package.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  ...\n  \"targets\": {\n    \"local-registry\": {\n      \"executor\": \"@nx/js:verdaccio\",\n      \"options\": {\n        \"port\": 4873,\n        \"config\": \".verdaccio/config.yml\",\n        \"storage\": \"tmp/local-registry/storage\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Init Generator in TypeScript\nDESCRIPTION: TypeScript code for the init generator that automatically registers the nx-astro plugin in the nx.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/tooling-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formatFiles, readNxJson, Tree, updateNxJson } from '@nx/devkit';\nimport { InitGeneratorSchema } from './schema';\n\nexport async function initGenerator(tree: Tree, options: InitGeneratorSchema) {\n  const nxJson = readNxJson(tree) || {};\n  const hasPlugin = nxJson.plugins?.some((p) =>\n    typeof p === 'string' ? p === 'nx-astro' : p.plugin === 'nx-astro'\n  );\n  if (!hasPlugin) {\n    if (!nxJson.plugins) {\n      nxJson.plugins = [];\n    }\n    nxJson.plugins = [\n      ...nxJson.plugins,\n      {\n        plugin: 'nx-astro',\n        options: {\n          buildTargetName: 'build',\n          devTargetName: 'dev',\n        },\n      },\n    ];\n  }\n  updateNxJson(tree, nxJson);\n  await formatFiles(tree);\n}\n\nexport default initGenerator;\n```\n\n----------------------------------------\n\nTITLE: Filtering Projects by Name Pattern in Nx\nDESCRIPTION: This example demonstrates how to show projects with names starting with 'api-' using the '--projects' option.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/show.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx show projects --projects api-*\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/eslint-plugin with Nx 18+\nDESCRIPTION: Command to install @nx/eslint-plugin package in Nx 18+ workspaces. This ensures the correct version is installed that matches your Nx version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/eslint-plugin/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Expanded Build Dependencies Configuration in nx.json\nDESCRIPTION: JSON configuration showing the expanded form of dependency configuration that the ^ shorthand represents.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-08-02-nx-14-5-cypess-v10-output-globs-linter-perf-react-tailwind-support.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"build\": {\n      \"dependsOn\": [{ \"projects\": \"dependencies\", \"target\": \"build\" }]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StaticDependency Type Interface in TypeScript\nDESCRIPTION: TypeScript type definition for static dependencies between projects in Nx. Represents a dependency where the source project always loads the target project. Includes source and target project identifiers, optional source file path, and dependency type.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/StaticDependency.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype StaticDependency = {\n  source: string;\n  sourceFile?: string;\n  target: string;\n  type: typeof static;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Responsive Nx Logo with Dark Mode Support\nDESCRIPTION: HTML markup that implements a responsive logo display using the picture element, supporting both light and dark color schemes through media queries. The logo is centered and spans full width.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"text-align: center;\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Generating Redux State for Horoscope in Nx\nDESCRIPTION: This command generates a Redux state for horoscope using Nx CLI. It creates a slice file for actions, reducers, and selectors.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nrwl/react:redux horoscope --project=store --directory=horoscope\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for a React Router Application\nDESCRIPTION: Command to run unit tests for a React Router application in an Nx workspace using Vitest as the test runner.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-router.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx test happynrwl\n```\n\n----------------------------------------\n\nTITLE: Installing Lit and Dependencies in Nx\nDESCRIPTION: Commands to install Lit and other necessary dependencies in an Nx workspace using different package managers.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-lit.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/node\nnpm add -D lit http-server\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/node\nyarn add -D lit http-server\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/node\npnpm add -D lit http-server\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/node\nbun add -D lit http-server\n```\n\n----------------------------------------\n\nTITLE: Using ensurePackage with Tree (Deprecated) in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the deprecated version of ensurePackage that takes a Tree object. It installs the @nx/jest package at the specified nxVersion.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ensurePackage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nensurePackage(tree, '@nx/jest', nxVersion);\n```\n\n----------------------------------------\n\nTITLE: Initializing Nx in Existing Project\nDESCRIPTION: Command to add Nx to an existing project, which analyzes the project structure and configures Nx accordingly.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-06-nx-15-3-standalone-projects-vite-task-graph-and-more.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Creating Qwik-Nx Workspace\nDESCRIPTION: Shell command to create a new Nx workspace specifically for Qwik development using a custom CLI. This showcases the ability to build custom CLIs on top of Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-12-28-highlights-2023.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-qwik-nx\n```\n\n----------------------------------------\n\nTITLE: Optional NPM Scope Configuration\nDESCRIPTION: Example of npm scope configuration in nx.json which is now optional in version 14.4.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-05-nx-14-4-inputs-optional-npm-scope-project-graph-cache-directory-and-more.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"npmScope\": \"myorg\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Decorator in a Story\nDESCRIPTION: Example of how to add the NavigationDecorator to a React Native story to provide navigation context for components that use React Navigation hooks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-25-use-storybook-with-nx-react-native.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { storiesOf } from '@storybook/react-native';\nimport { mockFilmEntity } from '@studio-ghibli-search-engine/models';\nimport React from 'react';\n\nimport { NavigationDecorator } from '../../../storybook/mocks/navigation';\n\nimport FilmListItem from './film-list-item';\n\nstoriesOf('FilmListItem', module)\n  .addDecorator(NavigationDecorator)\n  .add('Primary', () => <FilmListItem film={mockFilmEntity} />);\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Cloud Personal Access Token in INI File\nDESCRIPTION: Example of the nxcloud.ini file format used to store personal access tokens for Nx Cloud authentication. The file can contain multiple instances of Nx Cloud, each under its URL.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/nx-cloud-cli.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[https://cloud\\.nx\\.app]\npersonalAccessToken=SOME_ACCESS_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Projects Property Definition\nDESCRIPTION: Describes the projects property of the CreateNodesResult interface. This property is a map of project root paths to ProjectConfiguration objects.  The 'root' property is Optional.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/CreateNodesResult.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nprojects: Record<string, Optional<ProjectConfiguration, \"root\">>\n```\n\n----------------------------------------\n\nTITLE: Adding CLI Package to Existing Nx Plugin\nDESCRIPTION: Command to add a CLI package to an existing Nx plugin workspace for creating custom applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-07-06-nx-16-5-release.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/plugin:create-package <cli name> --project=<existing plugin name> --e2eProject e2e\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with withReact Plugin\nDESCRIPTION: This example shows how to configure Webpack using the `withReact` plugin from `@nx/react`. It utilizes `composePlugins` to combine `withNx` and `withReact`. The `styles`, `svgr`, and `postcssConfig` options are used to customize the Webpack configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/webpack-plugins.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { composePlugins, withNx } = require('@nx/webpack');\nconst { withReact } = require('@nx/react');\n\nmodule.exports = composePlugins(\n  withNx(), // always pass withNx() first\n  withReact({\n    styles: ['my-app/src/styles.css'],\n    svgr: false,\n    postcssConfig: 'my-app/postcss',\n  }),\n  (config) => {\n    // Further customize webpack config\n    return config;\n  }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Default Cypress Config Without Domain Injection Settings\nDESCRIPTION: Shows a basic Cypress configuration that doesn't include any domain injection settings, which would need to be updated for Cypress v14 compatibility.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/src/migrations/update-20-8-0/set-inject-document-domain.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { nxE2EPreset } from '@nx/cypress/plugins/cypress-preset';\nimport { defineConfig } from 'cypress';\n\nexport default defineConfig({\n  e2e: {\n    ...nxE2EPreset(__filename, {\n      cypressDir: 'src',\n      bundler: 'vite',\n      webServerCommands: {\n        default: 'pnpm exec nx run app1:dev',\n        production: 'pnpm exec nx run app1:dev',\n      },\n      ciWebServerCommand: 'pnpm exec nx run app1:dev',\n      ciBaseUrl: 'http://localhost:4200',\n    }),\n    baseUrl: 'http://localhost:4200',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Nx in a Repository - Shell\nDESCRIPTION: This snippet runs a command to initialize Nx in the specified directory. The command utilizes 'npx' to download the latest version of Nx and set up the repository accordingly. The user is then prompted with various configuration questions to fine-tune the setup, specifically regarding script execution order and caching options.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/2-smart-monorepo/2-nx-init/content.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Creating Redux Persist Transform for Entity States in TypeScript\nDESCRIPTION: This snippet defines a transform function for Redux Persist to handle serialization and deserialization of entity states. It uses createTransform from redux-persist to stringify and parse entity state data.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-08-state-management.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EntityState } from '@reduxjs/toolkit';\nimport { createTransform } from 'redux-persist';\nimport { LIKES_FEATURE_KEY } from '../likes/likes.slice';\n\nconst transformEntityStateToPersist = createTransform(\n  // transform state on its way to being serialized and persisted.\n  (\n    entityState: EntityState<any>\n  ): {\n    ids: string;\n    entities: any;\n  } => {\n    return {\n      ...entityState,\n      ids: JSON.stringify(entityState.ids),\n      entities: JSON.stringify(entityState.entities),\n    };\n  },\n  // transform state being rehydrated\n  (entityState: { ids: string; entities: string }): EntityState<any> => {\n    return {\n      ...entityState,\n      ids: JSON.parse(entityState.ids),\n      entities: JSON.parse(entityState.entities),\n    };\n  },\n  // define which reducers this transform gets called for.\n  { whitelist: [LIKES_FEATURE_KEY] }\n);\n\nexport { transformEntityStateToPersist };\n```\n\n----------------------------------------\n\nTITLE: Creating a .gitignore File for Monorepo\nDESCRIPTION: Basic .gitignore file to exclude common build artifacts and dependency directories from version control in a monorepo setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\nnode_modules\ndist\nbuild\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex CI Pipeline with Artifact Sharing in YAML\nDESCRIPTION: This YAML snippet demonstrates a traditional CI pipeline configuration with multiple jobs, dependencies, and artifact sharing. It illustrates the complexity of managing task dependencies and file sharing between jobs in a low-level, explicit manner.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-07-fast-effortless-ci.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  build_base:\n    steps:\n      - run: npm run build-base\n      - name: Save assets for use by other jobs\n        uses: actions/upload-artifact@v4\n        with:\n          name: base_output\n          path: base/output.ts\n\n  build_app1:\n    needs: build_base\n    steps:\n      - name: Download base output\n        uses: actions/download-artifact@v4\n        with:\n          name: base_output\n      - run: npm run build-app1\n\n  build_app2:\n    needs: build_base\n    steps:\n      - name: Download base output\n        uses: actions/download-artifact@v4\n        with:\n          name: base_output\n      - run: npm run build-app2\n```\n\n----------------------------------------\n\nTITLE: Serving the Host Application with SSR\nDESCRIPTION: Command to build and serve the dashboard (host) application along with the login (remote) application using Server-Side Rendering. This builds both browser and server bundles.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-10-setting-up-module-federation-with-server-side-rendering-for-angular.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx serve-ssr dashboard\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Atomizer Targets in nx.json\nDESCRIPTION: This snippet shows how to configure target defaults for task atomizer targets using a glob pattern. It applies options to targets matching the `e2e-ci--**/**` pattern, setting the `headless` option to `true`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"e2e-ci--**/**\": {\n      \"options\": {\n        \"headless\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Plugins in nx.json\nDESCRIPTION: Shows how to configure a custom Nx plugin in the nx.json file by adding it to the plugins array with optional configuration parameters that will be passed to the hook functions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/task-running-lifecycle.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"my-nx-plugin\",\n      \"options\": {\n        \"reportAnalytics\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Execute Application Generation\nDESCRIPTION: This command generates a new Angular application named `inventory` within the `apps/` directory using the `@nx/angular:app` generator. It executes the generator, creating the necessary files and configurations for the new application.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/5-add-application/content.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/angular:app apps/inventory\n```\n\n----------------------------------------\n\nTITLE: Show Affected Projects Excluding E2E\nDESCRIPTION: Shows affected projects while excluding end-to-end testing projects\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/show.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx show projects --affected --exclude=*-e2e\n```\n\n----------------------------------------\n\nTITLE: Defining CreateDependencies Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a generic type alias CreateDependencies<T> which represents a function that takes options and a context, and returns an array of RawProjectGraphDependency objects or a Promise of such an array. It's used for creating dependencies in the ProjectGraph based on workspace files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/CreateDependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **CreateDependencies**<`T`>: (`options`: `T` | `undefined`, `context`: [`CreateDependenciesContext`](../../devkit/documents/CreateDependenciesContext)) => [`RawProjectGraphDependency`](../../devkit/documents/RawProjectGraphDependency)[] | `Promise`<[`RawProjectGraphDependency`](../../devkit/documents/RawProjectGraphDependency)[]>\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/expo Package\nDESCRIPTION: Command to install the @nx/expo package for Nx version 18 and above.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/expo/expo-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/expo\n```\n\n----------------------------------------\n\nTITLE: Generating React Native Component\nDESCRIPTION: Command to generate a new React Native component within a library\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react-native/react-native-plugin.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react-native:component <component-path> --export\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generator with Angular Schematic in TypeScript\nDESCRIPTION: An equivalent generator implementation using Angular Devkit (schematic). This approach uses partial application, RxJS observables, and a more complex API with specialized methods for tree manipulation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/nx-devkit-angular-devkit.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  apply,\n  branchAndMerge,\n  chain,\n  mergeWith,\n  Rule,\n  template,\n  url,\n  move,\n} from '@angular-devkit/schematics';\nimport { formatFiles } from '@nx/workspace';\nimport { toFileName } from '@nx/workspace';\n\ninterface Schema {\n  name: string;\n  skipFormat: boolean;\n}\n\nexport default function (options: Schema): Rule {\n  const templateSource = apply(url('./files'), [\n    template({\n      dot: '.',\n      tmpl: '',\n      ...(options as any),\n    }),\n    move('tools/generators'),\n  ]);\n  return chain([\n    branchAndMerge(chain([mergeWith(templateSource)])),\n    formatFiles(options),\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nx Migrate Command\nDESCRIPTION: Command to run Nx migrate for updating dependencies, including the option to migrate to Angular 19.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-06-nx-update-20-3.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate latest --interactive\n```\n\n----------------------------------------\n\nTITLE: Defining GeneratorsJson Interface in TypeScript\nDESCRIPTION: This code snippet defines the GeneratorsJson interface with three optional properties. The 'extends' property is a string, while 'generators' and 'schematics' are records mapping strings to GeneratorsJsonEntry objects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/GeneratorsJson.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GeneratorsJson {\n  extends?: string;\n  generators?: Record<string, GeneratorsJsonEntry>;\n  schematics?: Record<string, GeneratorsJsonEntry>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sync in Nx\nDESCRIPTION: This JSON snippet demonstrates how to set the `sync.applyChanges` property to ensure code is correctly configured before running tasks. If set to `false`, synchronization must be done manually.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/sync-generators.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"packages/nx/schemas/nx-schema.json\",\n  ...\n  \"sync\": {\n    \"applyChanges\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DTS Plugin with Skip Diagnostics in Vite\nDESCRIPTION: Configuration for vite-plugin-dts with skipDiagnostics enabled to speed up library builds by skipping type checking.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/vite/configure-vite.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n...\nimport dts from 'vite-plugin-dts';\nimport { join } from 'path';\n...\n...\nexport default defineConfig({\n  plugins: [\n    ...,\n    dts({\n      entryRoot: 'src',\n      tsConfigFilePath: join(__dirname, 'tsconfig.lib.json'),\n      skipDiagnostics: true,\n    }),\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with Playwright E2E Testing Option\nDESCRIPTION: Command to create a new Nx workspace with options for selecting Playwright as the E2E testing framework. This demonstrates the integration of Playwright into Nx's project creation flow.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-12-28-highlights-2023.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npx create-nx-workspace@latest\n> NX   Let's create a new workspace [/getting-started/intro]\n✔ Which stack do you want to use? · react\n✔ What framework would you like to use? · none\n✔ Integrated monorepo, or standalone project? · integrated\n✔ Which bundler would you like to use? · vite\n? Test runner to use for end to end (E2E) tests …\nCypress [ https://www.cypress.io/ ]\nPlaywright [ https://playwright.dev/ ]\nNone\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Activation Key\nDESCRIPTION: Environment variable configuration for storing the Nx activation key\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/gcs-cache/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNX_KEY=YOUR_ACTIVATION_KEY\n```\n\n----------------------------------------\n\nTITLE: Commiting changes after reorganization (shell)\nDESCRIPTION: These commands commits the file movements within the standalone project, after having reorganized it in preparation for the monorepo migration. It then pushes the branch to the remote repository to be merged in the nx monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/preserving-git-histories.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -m \"Move files in preparation for monorepo migration\"\ngit push --set-upstream origin monorepo-migration\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress with experimentalFetchPolyfill (Before)\nDESCRIPTION: Cypress configuration with the deprecated experimentalFetchPolyfill option set to true. This configuration imports the nxE2EPreset from @nx/cypress/plugins/cypress-preset and uses it with various options for e2e testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/src/migrations/update-20-8-0/remove-experimental-fetch-polyfill.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { nxE2EPreset } from '@nx/cypress/plugins/cypress-preset';\nimport { defineConfig } from 'cypress';\n\nexport default defineConfig({\n  e2e: {\n    ...nxE2EPreset(__filename, {\n      cypressDir: 'src',\n      bundler: 'vite',\n      webServerCommands: {\n        default: 'pnpm exec nx run app1:dev',\n        production: 'pnpm exec nx run app1:dev',\n      },\n      ciWebServerCommand: 'pnpm exec nx run app1:dev',\n      ciBaseUrl: 'http://localhost:4200',\n    }),\n    baseUrl: 'http://localhost:4200',\n    experimentalFetchPolyfill: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing AsyncStorage for React Native\nDESCRIPTION: Command to install AsyncStorage for React Native, used for persisting data in the mobile app.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# npm\nnpm install @react-native-async-storage/async-storage --save-dev\n\n# yarn\nyarn add @react-native-async-storage/async-storage --dev\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with yarn create\nDESCRIPTION: This command uses yarn create to set up a new Nx workspace. It's the recommended method for Yarn users to initialize an Nx project.\nSOURCE: https://github.com/nrwl/nx/blob/master/scripts/readme-fragments/content.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn create nx-workspace\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Level Outputs in package.json\nDESCRIPTION: Example of defining output paths for a specific project in its package.json file using the nx configuration property, which overrides workspace-level configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/configure-outputs.md#2025-04-22_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"myreactapp\",\n  \"dependencies\": {},\n  \"devDependencies\": {},\n  ...\n  \"nx\": {\n    \"targets\": {\n      \"build\": {\n        \"outputs\": [\"{projectRoot}/dist\"]\n      }\n      ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Target String with ProjectGraph in TypeScript\nDESCRIPTION: This function parses a target string into a Target object using a ProjectGraph. It handles formats like 'proj:test' and 'proj:test:production', extracting project, target, and optional configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/parseTargetString.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nparseTargetString('proj:test', graph); // returns { project: \"proj\", target: \"test\" }\nparseTargetString('proj:test:production', graph); // returns { project: \"proj\", target: \"test\", configuration: \"production\" }\n```\n\n----------------------------------------\n\nTITLE: Installing @nx-dotnet/core plugin with npm\nDESCRIPTION: This command adds the @nx-dotnet/core plugin as a development dependency using npm. This plugin is required to manage .NET projects within an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-dotnet.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx-dotnet/core\n```\n\n----------------------------------------\n\nTITLE: Configuring Versioning in nx.json (Nx v21+)\nDESCRIPTION: This code snippet shows the configuration of the `version` property in `nx.json` for managing project versioning. It includes options for conventional commits, manifest roots to update, and ecosystem-specific options like skipping lock file updates.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_15\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"release\": {\n    \"version\": {\n      // Core options\n      \"conventionalCommits\": true,\n      \"manifestRootsToUpdate\": [\"dist/packages/{projectName}\"],\n      // Ecosystem-specific options\n      \"versionActionsOptions\": {\n        \"skipLockFileUpdate\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Utility Function in Animals Module (TypeScript)\nDESCRIPTION: This TypeScript code imports the `getRandomItem` function from the `@tuskdesign/util` library. The original code for the animals module would have contained the definition for `getRandomItem` before it was moved to the utility library.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/2-smart-monorepo/6-sync-ts-references/content.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getRandomItem } from '@tuskdesign/util';\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Tag-Based Build Filtering\nDESCRIPTION: Running build for affected projects with a specific tag filter.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/affected.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t=build --exclude='*,!tag:dotnet'\n```\n\n----------------------------------------\n\nTITLE: Implementing Deep Dive Sections in Nx Documentation\nDESCRIPTION: Deep Dives are special collapsible callouts intended to contain detailed information that isn't immediately required. They help organize advanced content.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% callout type=\"deepdive\" title=\"string\" %}\nYour deep-dive content goes here.\n{% /callout %}\n```\n\n----------------------------------------\n\nTITLE: Querying Projects Configuration in Nx Workspace using TypeScript\nDESCRIPTION: A function that retrieves all project configurations from an Nx workspace. It takes a Tree object as input and returns a Map containing project names as keys and ProjectConfiguration objects as values. This is useful for workspace-wide operations that need access to all project configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/getProjects.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetProjects(tree): Map<string, ProjectConfiguration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Test TypeScript Settings in Nx\nDESCRIPTION: TypeScript configuration specifically for test files that extends the base config and references the project's library configuration. Includes separate output directory for test compilation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/switch-to-workspaces-project-references.md#2025-04-22_snippet_9\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"extends\": \"../../tsconfig.base.json\",\n  \"compilerOptions\": {\n    // outDir should be local to the project and not in the same folder as any other tsconfig.*.json\n    \"outDir\": \"./out-tsc/spec\"\n    // Any overrides\n  },\n  \"include\": [\n    // test files\n  ],\n  \"references\": [\n    // tsconfig.lib.json for this project\n    {\n      \"path\": \"./tsconfig.lib.json\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Nuxt Application Directory Structure\nDESCRIPTION: Shows the default directory structure generated for a new Nuxt application, including configuration files, source directories, and component organization.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nuxt/docs/application-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmy-nuxt-app\n├── nuxt.config.ts\n├── project.json\n├── src\n│   ├── app.vue\n│   ├── assets\n│   │   └── css\n│   │       └── styles.css\n│   ├── components\n│   │   └── NxWelcome.vue\n│   ├── pages\n│   │   ├── about.vue\n│   │   └── index.vue\n│   ├── public\n│   │   └── favicon.ico\n│   └── server\n│       ├── api\n│       │   └── greet.ts\n│       └── tsconfig.json\n├── tsconfig.app.json\n├── tsconfig.json\n├── tsconfig.spec.json\n└── vitest.config.ts\n```\n\n----------------------------------------\n\nTITLE: Running the convert-to-inferred generator in Nx\nDESCRIPTION: Command to run the convert-to-inferred generator in Nx, which will prompt you to choose a plugin to migrate from executor-based tasks to inferred tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/troubleshoot-convert-to-inferred.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g convert-to-inferred\n```\n\n----------------------------------------\n\nTITLE: Updated Cypress Configuration without experimentalFetchPolyfill (After)\nDESCRIPTION: Updated Cypress configuration with the experimentalFetchPolyfill option removed, as required for Cypress v14 compatibility. The configuration maintains all other settings including the nxE2EPreset with various testing options.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/src/migrations/update-20-8-0/remove-experimental-fetch-polyfill.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { nxE2EPreset } from '@nx/cypress/plugins/cypress-preset';\nimport { defineConfig } from 'cypress';\n\nexport default defineConfig({\n  e2e: {\n    ...nxE2EPreset(__filename, {\n      cypressDir: 'src',\n      bundler: 'vite',\n      webServerCommands: {\n        default: 'pnpm exec nx run app1:dev',\n        production: 'pnpm exec nx run app1:dev',\n      },\n      ciWebServerCommand: 'pnpm exec nx run app1:dev',\n      ciBaseUrl: 'http://localhost:4200',\n    }),\n    baseUrl: 'http://localhost:4200',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Library in Nx Workspace\nDESCRIPTION: Command to generate a new library within the Nx workspace using the @nx/node plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-fastify.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/node:lib libs/my-lib\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/eslint-plugin for Nx < 18\nDESCRIPTION: Command to install the @nx/eslint-plugin package in Nx workspaces below version 18 using npm. This adds the package as a development dependency.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/eslint/eslint-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Start NX Project on iOS\nDESCRIPTION: This JSON snippet configures the start of a mobile project on iOS using NX with Expo. Setting 'ios' to true in 'options' opens the app on a running iOS simulator.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/start-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"start\": {\n      \"executor\": \"@nx/expo:start\",\n      \"options\": {\n        \"port\": 8081,\n        \"ios\": true\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Tree Interface Method: write\nDESCRIPTION: Method to write content to a file, creating it if it doesn't exist\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/Tree.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n▸ write(filePath: string, content: string | Buffer<ArrayBufferLike>, options?: TreeWriteOptions): void\n```\n\n----------------------------------------\n\nTITLE: Creating ZodiacSignList Component with Redux Connection\nDESCRIPTION: Implements the ZodiacSignList component and connects it to Redux using react-redux's connect function.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  AdhZodiacSignItem,\n  AdhZodiacSignList,\n} from '@aztro-daily-horoscope/models';\nimport React from 'react';\nimport { FlatList } from 'react-native';\nimport { ListItem } from '@rneui/base';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\nimport { connect } from 'react-redux';\n\nimport {\n  ZodiacSignListProps,\n  mapDispatchToProps,\n} from './zodiac-sign-list.props';\n\nexport function ZodiacSignList({ setUserZodiacSignItem }: ZodiacSignListProps) {\n  const keyExtractor = (item: AdhZodiacSignItem) => item.zodiacSign;\n\n  return (\n    <FlatList\n      keyExtractor={keyExtractor}\n      data={AdhZodiacSignList}\n      renderItem={({ item }) => (\n        <ListItem bottomDivider onPress={() => setUserZodiacSignItem(item)}>\n          <Icon name={item.icon} />\n          <ListItem.Content>\n            <ListItem.Title>{item.zodiacSign}</ListItem.Title>\n          </ListItem.Content>\n          <ListItem.Chevron />\n        </ListItem>\n      )}\n    />\n  );\n}\n\nexport const ZodiacSignListContainer = connect(\n  null,\n  mapDispatchToProps\n)(ZodiacSignList);\n```\n\n----------------------------------------\n\nTITLE: Generate React Library\nDESCRIPTION: Generates a React library using the `@nx/react:library` generator with specific options for naming, directory, import path, and tags. This snippet illustrates the complexity a custom generator can abstract.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-10-tailoring-nx-for-your-organization.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/react:library --name shared-util --directory libs/shared/util --importPath=\"@org/shared/util\" --tags=type:util,scope:shared\n```\n\n----------------------------------------\n\nTITLE: Running ESLint Fix Command in Nx\nDESCRIPTION: CLI command to run the linter with the fix flag to automatically fix issues.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/eslint/docs/eslint-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx run frontend:lint --fix\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Videos in Nx Documentation\nDESCRIPTION: This component embeds YouTube videos with configurable title and width. The source URL can be in various formats including browser URL, share URL, or embed URL.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n{% youtube\nsrc=\"https://www.youtube.com/embed/rNImFxo9gYs\"\ntitle=\"Nx Console Run UI Form\"\nwidth=\"100%\" /%}\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Store with Redux Toolkit\nDESCRIPTION: Sets up the root reducer and configures the store using Redux Toolkit's configureStore function.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit';\n\nimport { initialRootState } from './root-state.initial';\nimport { rootReducer } from './root.reducer';\n\ndeclare const process: any;\n\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\nconst rootStore = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware(),\n  devTools: isDevelopment,\n  preloadedState: initialRootState,\n});\n\nexport { rootStore };\n```\n\n----------------------------------------\n\nTITLE: Executing Nx Logout Command in Shell\nDESCRIPTION: This command logs out the user from Nx Cloud. It can be run directly if nx is installed globally, or through npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/logout.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx logout\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Similarity Search in Supabase for Nx Docs AI\nDESCRIPTION: This code executes a vector similarity search by calling the PostgreSQL function 'match_page_sections' in Supabase. It compares the user query embedding with stored document embeddings to find the most relevant documentation chunks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-21-ai-assistant.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: pageSections } = await supabaseClient.rpc('match_page_sections', {\n  embedding,\n  // …\n});\n```\n\n----------------------------------------\n\nTITLE: Creating History Object for Web\nDESCRIPTION: TypeScript code to create a history object for the web app using createHashHistory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHashHistory, History } from 'history';\nconst history: History = createHashHistory();\n```\n\n----------------------------------------\n\nTITLE: Jest Error Message Example\nDESCRIPTION: Example of the error message displayed when Jest encounters an unexpected token while parsing files, typically when dealing with non-standard JavaScript syntax or untransformed dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-22-unit-testing-expo.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n console.error\n      Jest encountered an unexpected token\n\n      Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n      Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n      By default \"node_modules\" folder is ignored by transformers.\n\n      Here's what you can do:\n       • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n       • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n       • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n       • If I need a custom transformation specify a \"transform\" option in my config.\n       • If I simply want to mock my non-JS modules (e.g. binary assets) I can stub them out with the \"moduleNameMapper\" config option.\n\n      You'll find more details and examples of these config options in the docs:\n      https://jestjs.io/docs/configuration\n      For information about custom transformations, see:\n      https://jestjs.io/docs/code-transformation\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Nx Projects\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow for Nx projects. It includes steps for checking out code, setting up Node.js, installing dependencies, and running affected tasks. It also has commented lines for enabling Nx Cloud task distribution.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/3r-fast-ci/3-create-ci-workflow/content.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\n# ...\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      # This enables task distribution via Nx Cloud\n      # Run this command as early as possible, before dependencies are installed\n      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun\n      # Uncomment this line to enable task distribution\n      # - run: npx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\" --stop-agents-after=\"e2e-ci\"\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n          cache: 'npm'\n      - run: npm ci --legacy-peer-deps\n      - uses: nrwl/nx-set-shas@v4\n      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected\n      # When you enable task distribution, run the e2e-ci task instead of e2e\n      - run: npx nx affected -t lint test build e2e\n```\n\n----------------------------------------\n\nTITLE: Defining Solid Application Component\nDESCRIPTION: Create the main App component for the Solid application. This component renders a simple header with a link to learn more about Solid.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-solid.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Component } from 'solid-js';\n\nconst App: Component = () => {\n  return (\n    <div>\n      <header>\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          href=\"https://github.com/solidjs/solid\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn Solid Now\n        </a>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Generate Storybook Configuration for Nuxt Project\nDESCRIPTION: This command generates the Storybook configuration for a specific Nuxt project within the Nx workspace. Replace 'my-nuxt-app' with the actual name of your Nuxt application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/plugin-vue.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nuxt:storybook-configuration my-nuxt-app\n```\n\n----------------------------------------\n\nTITLE: Exporting Library Functions\nDESCRIPTION: TypeScript code showing how to export functions from a Remix library server file\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/remix/remix-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport * from './lib/admin/admin.loader';\n```\n\n----------------------------------------\n\nTITLE: Implementing Angular Component Template with Tailwind CSS Utilities\nDESCRIPTION: Angular component template using Tailwind CSS utility classes for styling, including responsive design with grid layout and custom color theme variables.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"font-mono\">\n  <header class=\"px-xl py-md bg-primary-light text-xl font-bold shadow-md\">Angular + Tailwind CSS + Nx</header>\n\n  <main class=\"max-w-xl md:max-w-2xl lg:max-w-6xl mx-auto py-xl px-md md:px-xl grid grid-cols-1 gap-md md:grid-cols-2 lg:grid-cols-3\">\n    <div class=\"flex flex-col p-lg bg-secondary-light shadow-md hover:shadow-lg\">\n      <div class=\"pb-md text-lg font-bold\">Angular</div>\n      <p class=\"mb-xl flex-1\">\n        Angular is an application design framework and development platform for creating efficient and sophisticated single-page apps.\n      </p>\n      <a\n        class=\"py-sm px-md bg-primary-dark hover:bg-primary text-white flex self-end\"\n        href=\"https://angular.io/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Show me!\n      </a>\n    </div>\n\n    <div class=\"flex flex-col p-lg bg-secondary-light shadow-md hover:shadow-lg\">\n      <div class=\"pb-md text-lg font-bold\">Tailwind CSS</div>\n      <p class=\"mb-xl flex-1\">\n        Tailwind CSS is a utility-first CSS framework packed with classes like flex, pt-4, text-center and rotate-90 that can be composed to build any design, directly in your markup.\n      </p>\n      <a\n        class=\"py-sm px-md bg-primary-dark hover:bg-primary text-white flex self-end\"\n        href=\"https://tailwindcss.com/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Show me!\n      </a>\n    </div>\n\n    <div class=\"flex flex-col p-lg bg-secondary-light shadow-md hover:shadow-lg\">\n      <div class=\"pb-md text-lg font-bold\">Nx</div>\n      <p class=\"mb-xl flex-1\">\n        The library for web and native user interfaces\n      </p>\n      <a\n        class=\"py-sm px-md bg-primary-dark hover:bg-primary text-white flex self-end\"\n        href=\"https://react.dev/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Show me!\n      </a>\n    </div>\n  </main>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Content Cards in Nx Documentation\nDESCRIPTION: Cards allow presenting content in a grid system with title, description, type, and URL. They can link to documentation, external resources, or videos.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{% cards %}\n{% card title=\"string\" description=\"string\" type=\"documentation|external|video\" url=\"string\" /%}\n{% card title=\"string\" description=\"string\" type=\"documentation|external|video\" url=\"string\" /%}\n// as many as cards you want\n{% /cards %}\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Version of Nx React Plugin\nDESCRIPTION: Example of installing a specific version (17.0.0) of the @nx/react package.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/add.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/react@17.0.0\n```\n\n----------------------------------------\n\nTITLE: Library Entry Point Export\nDESCRIPTION: TypeScript code exporting the card component from the library's entry point\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n...\nexport * from './lib/card/card.component';\n```\n\n----------------------------------------\n\nTITLE: Serving the Host with Development Remotes - Shell Command\nDESCRIPTION: This command serves the host application while specifying which remotes to run in development mode. Only the specified remotes will be dynamic during development.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/faster-builds.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx serve host --open --devRemotes=\"shop,cart\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for ProjectGraphExternalNode\nDESCRIPTION: Interface defining the structure of external dependency nodes. Contains properties for name (in npm:package format), type, and data object with package information including optional hash, package name and version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ProjectGraphExternalNode.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProjectGraphExternalNode {\n  name: string;\n  type: string;\n  data: {\n    hash?: string;\n    packageName: string;\n    version: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Running Storybook 8 Migration Generator in Nx\nDESCRIPTION: This command runs the @nx/storybook:migrate-8 generator to start the migration process for all projects with Storybook configured in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/migrate-8-generator-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/storybook:migrate-8\n```\n\n----------------------------------------\n\nTITLE: Nx Workspace Creation Configuration Options\nDESCRIPTION: This snippet shows the configuration options and answers when creating a new Nx workspace for a React monorepo. It includes choices for bundler, test runners, styling, and CI provider.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/2-use-preset/content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNX   Let's create a new workspace [https://nx.dev/getting-started/intro]\n\n✔ Application name · react-store\n✔ Which bundler would you like to use? · vite\n✔ Which unit test runner would you like to use? · vitest\n✔ Test runner to use for end to end (E2E) tests · cypress\n✔ Default stylesheet format · css\n✔ Would you like to use ESLint? · Yes\n✔ Would you like to use Prettier for code formatting? · Yes\n✔ Which CI provider would you like to use? · github\n```\n\n----------------------------------------\n\nTITLE: Configuring Sync Generator for @nx/owners in nx.json\nDESCRIPTION: JSON configuration to register the @nx/owners:sync-codeowners-file generator as a globalGenerator in nx.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/owners/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"sync\": {\n    \"globalGenerators\": [\"@nx/owners:sync-codeowners-file\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Commands to install React and TypeScript dependencies for the shared UI library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --filter shared-ui react\npnpm add --filter shared-ui typescript -D\n```\n\n----------------------------------------\n\nTITLE: Implementing a Project Files Reporter Conformance Rule\nDESCRIPTION: This TypeScript implementation ensures that `index.ts` and `server.ts` files follow specific export syntax styles. It utilizes Node.js file system methods to read files and TypeScript AST processing to verify code compliance.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/conformance/create-conformance-rule.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConformanceRule, ProjectFilesViolation } from '@nx/conformance';\nimport { existsSync, readFileSync } from 'node:fs';\nimport { join } from 'node:path';\nimport {\n  createSourceFile,\n  isExportDeclaration,\n  isStringLiteral,\n  isToken,\n  ScriptKind,\n  ScriptTarget,\n} from 'typescript';\n\nexport default createConformanceRule({\n  name: 'server-client-public-api',\n  category: 'consistency',\n  description: 'Ensure server-only and client-only public APIs are not mixed',\n  reporter: 'project-files-reporter',\n  implementation: async ({ projectGraph }) => {\n    const violations: ProjectFilesViolation[] = [];\n\n    for (const nodeId in projectGraph.nodes) {\n      const node = projectGraph.nodes[nodeId];\n\n      const sourceRoot = node.data.root;\n\n      const indexPath = join(sourceRoot, 'src/index.ts');\n      const serverPath = join(sourceRoot, 'src/server.ts');\n\n      if (existsSync(indexPath)) {\n        const fileContent = readFileSync(indexPath, 'utf8');\n        violations.push(\n          ...processEntryPoint(fileContent, indexPath, nodeId, 'client')\n        );\n      }\n\n      if (existsSync(serverPath)) {\n        const fileContent = readFileSync(serverPath, 'utf8');\n        violations.push(\n          ...processEntryPoint(fileContent, serverPath, nodeId, 'server')\n        );\n      }\n    }\n\n    return {\n      severity: 'medium',\n      details: { violations },\n    };\n  },\n});\n\nexport function processEntryPoint(\n  fileContent: string,\n  entryPoint: string,\n  project: string,\n  style: 'server' | 'client'\n) {\n  const violations: ProjectFilesViolation[] = [];\n\n  const sf = createSourceFile(\n    entryPoint,\n    fileContent,\n    ScriptTarget.Latest,\n    true,\n    ScriptKind.TS\n  );\n\n  let hasNotOnlyExports = false;\n  sf.forEachChild((node) => {\n    if (isExportDeclaration(node)) {\n      const moduleSpecifier =\n        node.moduleSpecifier && isStringLiteral(node.moduleSpecifier)\n          ? node.moduleSpecifier.getText()\n          : '';\n\n      if (isModuleSpecifierViolated(moduleSpecifier, style)) {\n        if (\n          violations.find(\n            (v) => v.file === entryPoint && v.sourceProject === project\n          ) {\n          // we already have a violation for this file and project, so we don't need to add another one\n          return;\n        }\n\n        violations.push({\n          message:\n            style === 'client'\n              ? 'Client-side only entry point cannot export from server-side modules'\n              : 'Server-side only entry point can only export server-side modules ',\n          file: entryPoint,\n          sourceProject: project,\n        });\n      }\n    } else if (isToken(node) && node === sf.endOfFileToken) {\n      // do nothing\n    } else {\n      hasNotOnlyExports = true;\n    }\n  });\n\n  if (hasNotOnlyExports) {\n    violations.push({\n      message: `Entry point should only contain exported APIs`,\n      file: entryPoint,\n      sourceProject: project,\n    });\n  }\n\n  return violations;\n}\n\nfunction isModuleSpecifierViolated(\n  moduleSpecifier: string,\n  style: 'server' | 'client'\n) {\n  // should not get here. if this is the case, it's a grammar error in the source code.\n  if (!moduleSpecifier) return false;\n\n  if (style === 'server' && !moduleSpecifier.includes('.server')) {\n    return true;\n  }\n\n  if (style === 'client' && moduleSpecifier.includes('.server')) {\n    return true;\n  }\n\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Definition: CreateNodesResult\nDESCRIPTION: Defines the structure of the CreateNodesResult interface, which represents the output of a createNodes function. It includes properties for external nodes and project configurations, used for representing projects in a graph.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/CreateNodesResult.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface CreateNodesResult {\n  externalNodes: Record<string, ProjectGraphExternalNode>;\n  projects: Record<string, Optional<ProjectConfiguration, \"root\">>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Target for Conformance Rules in project.json\nDESCRIPTION: Updates the project.json file to replace the existing build target with the @nx/conformance:bundle-rules executor. This configuration is used to create appropriate build artifacts for publishing to Nx Cloud.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/enterprise/conformance/publish-conformance-rules-to-nx-cloud.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // ...any existing project.json content\n  \"targets\": {\n    // ...any other existing targets\n    // new build target:\n    \"build\": {\n      \"executor\": \"@nx/conformance:bundle-rules\",\n      \"outputs\": [\"{options.outputPath}\"],\n      \"options\": {\n        \"outputPath\": \"{projectRoot}/dist\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger CLI plugin for Nest.js in Nx\nDESCRIPTION: Example of how to set up a Swagger CLI plugin in the Webpack configuration for a Nest.js application in Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nest/documents/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { NxWebpackPlugin } = require('@nx/webpack');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    new NxWebpackPlugin({\n      // ...\n      transformers: [\n        {\n          name: '@nestjs/swagger/plugin',\n          options: {\n            dtoFileNameSuffix: ['.dto.ts', '.entity.ts'],\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Exec in Package.json\nDESCRIPTION: Shows how to configure the nx exec command in package.json to run commands as project targets\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/exec.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myorg\",\n  \"version\": \"0.0.1\",\n  \"scripts\": {\n    \"build\": \"nx exec -- <command> [..args]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Legacy Project Generation Format in Nx 16.8\nDESCRIPTION: Command for generating apps with the legacy behavior, explicitly setting the name and directory options to control where new projects are placed in the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-09-06-nx-16-8-release.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> nx g app --name=my-app --directory=apps/my-app\n```\n\n----------------------------------------\n\nTITLE: Run Jest Tests via Nx\nDESCRIPTION: This command runs Jest tests for a specified project (in this case, 'frontend') using the Nx CLI.  It utilizes the configured Jest setup for the project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/jest/documents/overview.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx test frontend\n```\n\n----------------------------------------\n\nTITLE: Basic Android Build Configuration in project.json\nDESCRIPTION: Basic configuration for Android builds in project.json showing the executor and output paths for bundle and APK files.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/build-android-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"mobile\",\n  //...\n  \"targets\": {\n    //...\n    \"build-android\": {\n      \"executor\": \"@nx/react-native:build-android\",\n      \"outputs\": [\n        \"{projectRoot}/build/outputs/bundle\",\n        \"{projectRoot}/build/outputs/apk\"\n      ],\n      \"options\": {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic React App Component\nDESCRIPTION: A simple React component that imports CSS styles and renders a basic 'Hello World!' message. The component uses JSX syntax to define the UI structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/e2e/nx-init/src/files/cra/src/App.js.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      Hello World!\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Installing the Nx Remix Plugin\nDESCRIPTION: Adds the Remix plugin to an existing Nx workspace. The plugin provides generators and executors specifically for Remix applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/remix.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/remix\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Executor Target\nDESCRIPTION: This JSON snippet configures a 'serve' target using the `@nx/js:node` executor.  It specifies `my-app:build` as the build target to execute, indicating that the output of the 'build' target for the 'my-app' project will be run by the Node.js executor.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/node-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"my-app\": {\n  \"targets\": {\n    \"serve\": {\n      \"executor\": \"@nx/js:node\",\n      \"options\": {\n        \"buildTarget\": \"my-app:build\"\n      }\n    },\n    \"build\": {\n      \"executor\": \"@nx/esbuild:esbuild\",\n      \"options\": {\n        \"main\": \"my-app/src/main.ts\",\n        \"output\": [\"dist/my-app\"],\n        //...\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace for React Native\nDESCRIPTION: Command to create a new Nx workspace preset for React Native development.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace aztro-daily-horoscope --preset=react-native\n```\n\n----------------------------------------\n\nTITLE: EJS Template Example with Variable Substitution\nDESCRIPTION: Demonstrates a simple EJS markdown template that uses a dynamic variable substitution mechanism\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/creating-files.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nHello, my name is <%= name %>!\n```\n\n----------------------------------------\n\nTITLE: Removing Global Nx Installation with Yarn\nDESCRIPTION: This command removes the global Nx installation using Yarn. It's important for cleaning up obsolete global packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/installation/update-global-installation.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn global remove nx\n```\n\n----------------------------------------\n\nTITLE: Example Command for Generating Stories for a Feature UI Library\nDESCRIPTION: Example command showing how to generate stories for a specific library called 'feature-ui' located in the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/plugin-react.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:stories --project=feature-ui\n```\n\n----------------------------------------\n\nTITLE: Creating History Object for React Native\nDESCRIPTION: TypeScript code to create a history object for the React Native app using createMemoryHistory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMemoryHistory, History } from 'history';\nconst history: History = createMemoryHistory();\n```\n\n----------------------------------------\n\nTITLE: Debug/Release Mode Configuration\nDESCRIPTION: Configuration example demonstrating how to specify debug or release mode for Android builds.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/build-android-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    \"build-android\": {\n      \"executor\": \"@nx/react-native:build-android\",\n      \"outputs\": [\n        \"{projectRoot}/build/outputs/bundle\",\n        \"{projectRoot}/build/outputs/apk\"\n      ],\n      \"options\": {\n        \"mode\": \"debug\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Version Plan File Structure (Markdown)\nDESCRIPTION: This markdown snippet illustrates the structure of a version plan file, which should be located in the .nx/version-plans/ directory and must contain Front Matter YAML metadata at the top, followed by the regular markdown description of changes. This structure is essential for defining the desired semver bumps for projects or release groups.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/file-based-versioning-version-plans.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n#\n# FRONT MATTER YAML HERE\n#\n---\n\n#\n\n# Regular markdown here\n\n#\n\n```\n\n----------------------------------------\n\nTITLE: Building the Zoo Project with Nx CLI\nDESCRIPTION: This command triggers the build process for the 'zoo' project using the Nx CLI. Nx will detect changes in project dependencies and trigger the `typescript-sync` generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/2-smart-monorepo/6-sync-ts-references/content.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx build zoo\n```\n\n----------------------------------------\n\nTITLE: Generate Web Component Application\nDESCRIPTION: Command to generate a new web component application in the apps directory\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/generate.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/web:app apps/myapp\n```\n\n----------------------------------------\n\nTITLE: Saving Task Graph to File\nDESCRIPTION: Example of saving the Nx task graph to a JSON output file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n nx run myapp:build --graph=output.json\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workspace Layout Information in TypeScript\nDESCRIPTION: The workspaceLayout function returns an object containing the directory paths for apps and libs in an Nx workspace. It doesn't take any parameters and returns an object with 'appsDir' and 'libsDir' properties, both of type string.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/workspaceLayout.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **workspaceLayout**(): `Object`\n```\n\n----------------------------------------\n\nTITLE: Defining Init Generator Schema in JSON\nDESCRIPTION: JSON schema definition for the init generator, which doesn't include any properties or required fields.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/tooling-plugin.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://json-schema.org/schema\",\n  \"$id\": \"Init\",\n  \"title\": \"\",\n  \"type\": \"object\",\n  \"properties\": {},\n  \"required\": []\n}\n```\n\n----------------------------------------\n\nTITLE: JSON schema with enum property\nDESCRIPTION: This JSON snippet demonstrates the use of the `enum` keyword to restrict the possible values for a string property. The value of the property must be one of the values specified in the `enum` array.  This is used to create select lists.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_11\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"type\": \"string\",\n  \"enum\": [\"foo\", \"bar\"]\n\n  // valid case: `foo`, `bar`\n  // invalid case: any other string like `hello`\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Cards Layout for Feature Highlights\nDESCRIPTION: Structured markdown layout using cards to display feature highlight videos with titles and URLs\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/16_0_0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% cards cols=\"2\" %}\n{% card title=\"Changing NPM Scope\"  type=\"video\" url=\"https://youtu.be/HzkvhPKAepA\" /%}\n{% card title=\"Migrating React Query\"  type=\"video\" url=\"https://youtu.be/X1I1Aw2sV-Y\" /%}\n{% card title=\"Angular LTS support\"  type=\"video\" url=\"https://youtu.be/AQV4WFldwlY\" /%}\n{% card title=\"Cypress Feature Testing\"  type=\"video\" url=\"https://youtu.be/d5i9_Y8Ip54\" /%}\n{% card title=\"Task Graph Improvements\"  type=\"video\" url=\"https://youtu.be/9_Y6Mop-Kac\" /%}\n{% card title=\"IntelliJ Nx Console Feature Parity\"  type=\"video\" url=\"https://youtu.be/XCoeNiyM6hw\" /%}\n{% /cards %}\n```\n\n----------------------------------------\n\nTITLE: Adding @nx/gradle to an Existing Nx Workspace\nDESCRIPTION: Command to add the @nx/gradle plugin to an existing Nx workspace, enabling Gradle project management.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-04-19-manage-your-gradle.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx add @nx/gradle\n```\n\n----------------------------------------\n\nTITLE: Verifying E2E Project Tasks\nDESCRIPTION: Commands to verify that E2E testing and lint tasks are working correctly for the temporary E2E project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/standalone-to-monorepo.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx lint temp-e2e\nnx e2e temp-e2e\n```\n\n----------------------------------------\n\nTITLE: Utility Function for Retrieving Environment Variables\nDESCRIPTION: This TypeScript function retrieves environment variables using either process.env or react-native-config, allowing for cross-platform compatibility.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport Config from 'react-native-config';\nexport function getEnv(envName: string) {\n  return process.env[envName] || Config[envName];\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration in nx.json\nDESCRIPTION: Configuration for AWS credentials directly in nx.json file (least secure method)\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/s3-cache/s3-cache-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"s3\": {\n    \"ssoProfile\": \"default\",\n    \"accessKeyId\": \"MYACCESSKEYID\",\n    \"secretAccessKey\": \"MYSECRETACCESSKEY\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Angular mount import (v17.2.0+)\nDESCRIPTION: This snippet updates the Angular `mount` import from 'cypress/angular-signals' to 'cypress/angular' for Angular versions greater than or equal to v17.2.0.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/src/migrations/update-20-8-0/update-component-testing-mount-imports.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mount } from 'cypress/angular-signals';\nimport './commands';\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable<Subject> {\n      mount: typeof mount;\n    }\n  }\n}\n\nCypress.Commands.add('mount', mount);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mount } from 'cypress/angular';\nimport './commands';\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable<Subject> {\n      mount: typeof mount;\n    }\n  }\n}\n\nCypress.Commands.add('mount', mount);\n```\n\n----------------------------------------\n\nTITLE: TSConfig for Admin Storybook\nDESCRIPTION: TypeScript configuration for admin scope Storybook that includes story files and enables decorator metadata.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/one-storybook-per-scope.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"emitDecoratorMetadata\": true\n  },\n  \"exclude\": [\"../**/*.spec.ts\"],\n  \"include\": [\"../../admin/ui/**/src/lib/**/*.stories.ts\", \"*.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nx Affected Commands\nDESCRIPTION: Shell commands for running tasks on affected projects and visualizing the affected project graph using Nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/using-nx/affected.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t <task>\n\nnx graph --affected\n```\n\n----------------------------------------\n\nTITLE: Displaying Nx Logo with Dark Mode Support\nDESCRIPTION: HTML markup for displaying the Nx logo with dark mode support using the picture element and media queries. Includes both light and dark SVG versions of the logo with responsive width.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"text-align: center;\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Generating Store Library for Redux\nDESCRIPTION: Command to generate a new library for Redux store in the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnx generate lib store\n```\n\n----------------------------------------\n\nTITLE: Running 'exec' Command in Terminal with Nx\nDESCRIPTION: These examples demonstrate how to use the 'exec' command in the terminal to run commands across all projects in the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/exec.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx exec -- <command> [..args] # runs the command in all projects\nnx exec -- tsc\nnx exec -- echo \\$NX_PROJECT_NAME\nnx exec -- echo \\$NX_PROJECT_ROOT_PATH\n```\n\n----------------------------------------\n\nTITLE: Use getJestProjectsAsync (After)\nDESCRIPTION: This code snippet demonstrates how to use the `getJestProjectsAsync` function to retrieve Jest projects asynchronously in a `jest.config.ts` file. The export is changed to an async function to await the result of `getJestProjectsAsync`.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/jest/src/migrations/update-21-0-0/replace-getJestProjects-with-getJestProjectsAsync.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getJestProjectsAsync } from '@nx/jest';\n\nexport default async () => ({\n  projects: await getJestProjectsAsync(),\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Project Configuration in Web Browser with Nx\nDESCRIPTION: This command opens a web browser to explore the configuration of 'my-app' using the '--web' flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/show.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnx show project my-app --web\n```\n\n----------------------------------------\n\nTITLE: Defining Nx Configuration Interface in TypeScript\nDESCRIPTION: This snippet defines the interface for Nx configuration, including properties for projects, plugins, release settings, and more. It extends from NxJsonConfiguration and ProjectsConfigurations interfaces.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/Workspace.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface NxConfiguration extends NxJsonConfiguration, ProjectsConfigurations {\n  plugins?: string[];\n  pluginsConfig?: Record<string, Record<string, unknown>>;\n  projects: Record<string, ProjectConfiguration>;\n  release?: NxReleaseConfiguration;\n  sync?: NxSyncConfiguration;\n  targetDefaults?: TargetDefaults;\n  tasksRunnerOptions?: {\n    [tasksRunnerName: string]: {\n      runner?: string;\n      options?: any;\n    };\n  };\n  tui?: {\n    enabled?: boolean;\n    autoExit?: boolean | number;\n  };\n  useDaemonProcess?: boolean;\n  useInferencePlugins?: boolean;\n  useLegacyCache?: boolean;\n  version: number;\n  workspaceLayout?: {\n    appsDir?: string;\n    libsDir?: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for React Native Elements\nDESCRIPTION: JSON snippet showing how to add React Native Elements dependencies to the app's package.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"daily-horoscope-app\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    // other dependencies\n    \"@rneui/base\": \"*\",\n    \"react-native-gesture-handler\": \"*\",\n    \"react-native-reanimated\": \"*\",\n    \"react-native-safe-area-context\": \"*\",\n    \"react-native-screens\": \"*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Metafile\nDESCRIPTION: Command to generate a metafile during build for analysis.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/esbuild/esbuild-plugin.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx build mylib --metafile\n```\n\n----------------------------------------\n\nTITLE: Generating a Sync Generator with Nx CLI\nDESCRIPTION: This command uses the Nx CLI to generate a new sync generator within a specified directory. The generator is named 'my-sync-generator' and will be placed in the 'tools/my-plugin/src/generators/my-sync-generator' directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/create-sync-generator.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"nx g my-sync-generator --directory=tools/my-plugin/src/generators/my-sync-generator\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Project Tasks\nDESCRIPTION: Commands to verify that build, test, and lint tasks are working correctly for the temporary app after configuration updates.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/standalone-to-monorepo.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx build temp\nnx test temp\nnx lint temp\n```\n\n----------------------------------------\n\nTITLE: Nx Release Version Subcommand\nDESCRIPTION: Usage of the nx release version subcommand for creating versions and releases for applications and libraries with an optional version specifier.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/release.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx release version [specifier]\n```\n\n----------------------------------------\n\nTITLE: Focus on Specific Project\nDESCRIPTION: Command to show graph nodes that are ancestors or descendants of a specific project\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/graph.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx graph --focus=todos-feature-main\n```\n\n----------------------------------------\n\nTITLE: EJS Control Flow Template Example\nDESCRIPTION: Demonstrates advanced EJS templating with conditional rendering and loop generation\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/creating-files.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<% if(shortVersion) { %>\nThis is the short version.\n<% } else {\n  for(let x=0; x<numRepetitions; x++) {\n  %>\n  This text will be repeated <%= numRepetitions %> times.\n<% } // end for loop\n} // end else block %>\n\n// typescript file\ngenerateFiles(tree, join(__dirname, './files'), libraryRoot, {\n  shortVersion: false,\n  numRepetitions: 3,\n});\n```\n\n----------------------------------------\n\nTITLE: Run Nx Graph (Windows Shell)\nDESCRIPTION: This command visualizes the project graph in a web browser on Windows using the nx.bat executable.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n./nx.bat graph\n```\n\n----------------------------------------\n\nTITLE: Filter Projects by Target\nDESCRIPTION: Shows all projects that have a specific target configured\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/show.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx show projects --with-target serve\n```\n\n----------------------------------------\n\nTITLE: Directory.Build.targets configuration file\nDESCRIPTION: This XML file defines dependent properties and overrides properties late in the build order. It checks Nx module boundaries before building by executing a Node.js script.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-dotnet.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!--\n  This file is imported late in the build order.\n  Use it to override properties and define dependent properties.\n-->\n<Project>\n  <PropertyGroup>\n    <MSBuildProjectDirRelativePath>$([MSBuild]::MakeRelative($(RepoRoot), $(MSBuildProjectDirectory)))</MSBuildProjectDirRelativePath>\n    <NodeModulesRelativePath>$([MSBuild]::MakeRelative($(MSBuildProjectDirectory), $(RepoRoot)))</NodeModulesRelativePath>\n  </PropertyGroup>\n  <Target Name=\"CheckNxModuleBoundaries\" BeforeTargets=\"Build\">\n    <Exec Command=\"node $(NodeModulesRelativePath)/node_modules/@nx-dotnet/core/src/tasks/check-module-boundaries.js --project-root &quot;$(MSBuildProjectDirRelativePath)&quot;\"/>\n  </Target>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Focusing on Specific Project in Graph\nDESCRIPTION: Demonstrates how to focus the graph on a specific project, showing only its ancestors and descendants.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/dep-graph.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx graph --focus=todos-feature-main\n```\n\n----------------------------------------\n\nTITLE: Using ProductsComponent in Inventory App Template\nDESCRIPTION: This HTML snippet shows how to use the ProductsComponent in the inventory application's app.component.html template.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<lib-products></lib-products>\n```\n\n----------------------------------------\n\nTITLE: Running Nx lint task with partial project name\nDESCRIPTION: Demonstrates how to run an Nx lint task using a partial project name instead of the full name, which saves keystrokes and time.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-07-nx-update-20-5.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx lint foo\n```\n\n----------------------------------------\n\nTITLE: Setting Up Yarn Workspaces - JSON\nDESCRIPTION: This JSON snippet configures the root package.json for Yarn to recognize workspaces, allowing for linking of projects and installation of their dependencies in a single node_modules folder.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/typescript-project-linking.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workspaces\": [\"apps/*\", \"packages/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Remote Caching with Nx\nDESCRIPTION: Commands to demonstrate how Nx's remote caching works by building projects and then retrieving cached results.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/tutorial/circle.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx run-many -t build\nrm -rf .nx/cache\npnpm nx run-many -t build\n```\n\n----------------------------------------\n\nTITLE: Watch Multiple Projects with Dependencies\nDESCRIPTION: Example demonstrating watching multiple projects with their dependencies and echoing project names\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/watch.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx watch --projects=app1,app2 --includeDependentProjects -- echo \\$NX_PROJECT_NAME\n```\n\n----------------------------------------\n\nTITLE: Excluding Test Files from Production Inputs in nx.json\nDESCRIPTION: Configuration example showing how to exclude test and config files from the 'production' named input in nx.json. This allows Nx to restore from cache when only test files change while still re-running builds when production code changes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/configure-inputs.md#2025-04-22_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"namedInputs\": {\n    \"default\": [\"{projectRoot}/**/*\", \"sharedGlobals\"],\n    \"production\": [\n      \"default\",\n      \"!{projectRoot}/jest.config.ts\",\n      \"!{projectRoot}/**/?(*.)+(spec|test).ts\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vitest with Nx for Angular\nDESCRIPTION: Commands to add and configure Vitest plugin for an Angular project in Nx workspace\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-17-modern-angular-testing-with-nx.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Add the Vite plugin\nnpx nx add @nx/vite\n\n# Configure Vitest for a project\nnpx nx g @nx/vite:vitest\n```\n\n----------------------------------------\n\nTITLE: Executing Nx Cloud Login Command\nDESCRIPTION: Command syntax for logging into Nx Cloud with optional instance URL parameter. Can be executed via global nx installation or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/login.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx login [nxCloudUrl]\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Boundary Rules with onlyDependOnLibsWithTags\nDESCRIPTION: ESLint configuration for Nx module boundary rules that define allowed dependencies between projects based on tags. This configuration specifies which relationships between libraries and applications are permitted.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-08-what-is-new-in-nx-13-10.md#2025-04-22_snippet_3\n\nLANGUAGE: json5\nCODE:\n```\n{\n  // ... more ESLint config here \"@nrwl/nx/enforce-module-boundaries\": [\n    \"error\",\n    {\n      // update depConstraints based on your tags\n      \"depConstraints\": [\n        {\n          \"sourceTag\": \"type:app\",\n          \"onlyDependOnLibsWithTags\": [\"type:feature\", \"type:util\"]\n        },\n        {\n          \"sourceTag\": \"type:feature\",\n          \"onlyDependOnLibsWithTags\": [\"type:feature\", \"type:util\"]\n        },\n        {\n          \"sourceTag\": \"type:util\",\n          \"onlyDependOnLibsWithTags\": [\"type:util\"]\n        }\n      ]\n    }\n  ] // ... more ESLint config here\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Download Button Component in JSX\nDESCRIPTION: This code snippet demonstrates the usage of a custom DownloadButton component within a JSX block. It's used to provide a download option for the workspace state, as the tutorial section cannot be run in the browser.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/4-fast-ci/1-welcome/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div class=\"my-5\">\n  <DownloadButton client:load></DownloadButton>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Example package.json file\nDESCRIPTION: Shows the initial state of a package.json file for a project named 'my-project' with a version and a dependency on another local project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/updating-version-references.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"version\": \"0.1.1\",\n  \"dependencies\": {\n    \"my-other-project-in-the-monorepo\": \"0.1.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Nx and Jest\nDESCRIPTION: Command to execute unit tests for the generated library using Nx CLI and Jest test runner. The command uses a template variable '<%= name %>' that gets replaced with the actual library name during project generation.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/src/generators/library/files/common/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx test <%= name %>\n```\n\n----------------------------------------\n\nTITLE: Run First Release\nDESCRIPTION: This command performs the first release without the `--dry-run` option.  It will prompt for a version bump, update the `package.json` files, create changelog files, commit the changes, create a git tag, and publish the packages to the npm registry.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/get-started-with-nx-release.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nnx release --first-release\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Path Mappings for Angular Domain Libraries\nDESCRIPTION: Shows how to set up TypeScript path mappings in tsconfig.base.json to link domain libraries in an Angular application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-18-architecting-angular-applications.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@myshop/products-data-access\": [\n        \"packages/products/data-access/src/index.ts\"\n      ],\n      \"@myshop/products-feat-product-list\": [\n        \"packages/products/feat-product-list/src/index.ts\"\n      ],\n      \"@myshop/products-ui-product-card\": [\n        \"packages/products/ui-product-card/src/index.ts\"\n      ],\n      ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Remix Library Module\nDESCRIPTION: TypeScript code demonstrating how to create a loader function for admin route in a Remix library\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/remix/remix-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { json, LoaderFunctionArgs } from '@remix-run/node';\n\nexport const adminLoader = async ({ request }: LoaderFunctionArgs) => {\n  return json({\n    message: 'Hello, world!',\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating to Cypress 10 in Nx\nDESCRIPTION: Command to migrate existing Cypress setup to version 10 in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-10-14-whats-new-in-nx-15.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nrwl/cypress:migrate-to-cypress-10\n```\n\n----------------------------------------\n\nTITLE: Generating React Native Application in Nx\nDESCRIPTION: Command to generate a new React Native application within the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx generate application **daily-horoscope-app**\n```\n\n----------------------------------------\n\nTITLE: Creating React Hooks in Nx\nDESCRIPTION: Command to generate a new React hook in a library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react/documents/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:hook libs/my-new-lib/src/lib/my-new-hook\n```\n\n----------------------------------------\n\nTITLE: Exporting Components\nDESCRIPTION: Public API exports for the shared UI library components.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nexport * from './Button';\n```\n\n----------------------------------------\n\nTITLE: Interactive Migration\nDESCRIPTION: Example of running the migrate command in interactive mode, where the user is prompted for optional package updates and migrations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/migrate.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate latest --interactive\n```\n\n----------------------------------------\n\nTITLE: ESLint Module Boundary Constraints Configuration\nDESCRIPTION: ESLint configuration for enforcing module boundaries based on multiple tag dimensions, defining dependency rules for different project types and scopes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tag-multiple-dimensions.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // ... more ESLint config here\n\n  \"@nx/enforce-module-boundaries\": [\n    \"error\",\n    {\n      \"allow\": [],\n      \"depConstraints\": [\n        {\n          \"sourceTag\": \"scope:shared\",\n          \"onlyDependOnLibsWithTags\": [\"scope:shared\"]\n        },\n        {\n          \"sourceTag\": \"scope:admin\",\n          \"onlyDependOnLibsWithTags\": [\"scope:shared\", \"scope:admin\"]\n        },\n        {\n          \"sourceTag\": \"scope:client\",\n          \"onlyDependOnLibsWithTags\": [\"scope:shared\", \"scope:client\"]\n        },\n        {\n          \"sourceTag\": \"type:app\",\n          \"onlyDependOnLibsWithTags\": [\"type:feature\", \"type:ui\", \"type:util\"]\n        },\n        {\n          \"sourceTag\": \"type:feature\",\n          \"onlyDependOnLibsWithTags\": [\"type:ui\", \"type:util\"]\n        },\n        {\n          \"sourceTag\": \"type:ui\",\n          \"onlyDependOnLibsWithTags\": [\"type:ui\", \"type:util\"]\n        },\n        {\n          \"sourceTag\": \"type:util\",\n          \"onlyDependOnLibsWithTags\": [\"type:util\"]\n        }\n      ]\n    }\n  ]\n\n  // ... more ESLint config here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project File Map from Project Graph in TypeScript\nDESCRIPTION: This function creates a ProjectFileMap using a given ProjectGraph. It takes a 'graph' parameter of type ProjectGraph and returns a Promise that resolves to a ProjectFileMap. The function is part of the Nx devkit and is used for project analysis and dependency management.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/createProjectFileMapUsingProjectGraph.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateProjectFileMapUsingProjectGraph(graph: ProjectGraph): Promise<ProjectFileMap>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generator with Nx Devkit in TypeScript\nDESCRIPTION: A simple implementation of a generator using Nx Devkit. This approach provides direct tree manipulation, doesn't use partial application or RxJS observables, and offers streamlined helpers for common operations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/nx-devkit-angular-devkit.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tree, formatFiles, generateFiles } from '@nx/devkit';\nimport * as path from 'path';\n\ninterface Schema {\n  name: string;\n  skipFormat: boolean;\n}\n\nexport default async function (tree: Tree, options: Schema) {\n  generateFiles(\n    tree,\n    path.join(__dirname, 'files'),\n    path.join('tools/generators', schema.name),\n    options\n  );\n  if (!schema.skipFormat) {\n    await formatFiles(tree);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tutorial Content Structure - Bash\nDESCRIPTION: Illustrates the directory structure for organizing tutorial content into parts, chapters, and lessons.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntutorial\n├── 1-basics-of-vite\n│   ├── 1-introduction\n│   │   ├── 1-welcome\n│   │   │   ├── content.md    # The content of your lesson\n│   │   │   ├── _files        # Initial set of files\n│   │   │   │   └── ...\n│   │   │   └── _solution     # Solution of the lesson\n│   │   │       └── ...\n│   │   ├── 2-why-vite\n│   │   │   ├── content.md\n│   │   │   └── _files\n│   │   │       └── ...\n│   │   └── meta.md           # Metadata for the chapter\n│   └── meta.md               # Metadata for the part\n├── 2-advanced\n│   ├── ...\n│   └── meta.md\n└── meta.md                   # Metadata for the tutorial\n```\n\n----------------------------------------\n\nTITLE: Invoking an Executor Directly (TypeScript)\nDESCRIPTION: This snippet shows how to import and invoke an executor directly within another executor. It demonstrates calling the `printAllCaps` function and shows the basic structure of an Nx executor function.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/compose-executors.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport printAllCaps from 'print-all-caps';\n\nexport default async function (\n  options: Schema,\n  context: ExecutorContext\n): Promise<{ success: true }> {\n  // do something before\n  await printAllCaps({ message: 'All caps' });\n  // do something after\n}\n```\n\n----------------------------------------\n\nTITLE: Install Nx Plugin Package\nDESCRIPTION: Installs the `@nx/plugin` package, providing code scaffolding features for creating new custom plugins.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-10-tailoring-nx-for-your-organization.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/plugin\n```\n\n----------------------------------------\n\nTITLE: Basic Storybook Configuration Generation for React\nDESCRIPTION: Command to generate basic Storybook configuration for a React project using the Nx generator\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/storybook-configuration-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react:storybook-configuration project-name\n```\n\n----------------------------------------\n\nTITLE: Running Nx Watch Command in Windows PowerShell\nDESCRIPTION: Windows PowerShell-specific syntax for the watch command, using % to wrap environment variables instead of $ syntax used in Unix-like shells.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/workspace-watching.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx watch --all -- nx run %NX_PROJECT_NAME%:build\n```\n\n----------------------------------------\n\nTITLE: Tree Interface Method: listChanges\nDESCRIPTION: Method to retrieve an array of recorded file changes\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/Tree.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n▸ listChanges(): FileChange[]\n```\n\n----------------------------------------\n\nTITLE: Running Nx Watch for All Projects\nDESCRIPTION: Example of using the Nx Watch command to watch all projects in the workspace and trigger a build on changes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-22-nx-15-4-vite-4-support-a-new-nx-watch-command-and-more.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx watch --all -- nx build $NX_PROJECT_NAME\n```\n\n----------------------------------------\n\nTITLE: Configuration File Structure Example\nDESCRIPTION: Demonstrates the typical configuration file hierarchy in an Nx workspace, showing global and project-specific configuration files for different tools and Nx settings\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/types-of-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrepo/\n├── apps/\n│   └── my-app/\n│       ├── jest.config.ts\n│       └── project.json\n├── jest.config.ts\n└── nx.json\n```\n\n----------------------------------------\n\nTITLE: Running the Angular Application with Nx\nDESCRIPTION: Command to run the second Angular application using Nx CLI. This serves the app for development purposes, with an optional port parameter to avoid conflicts with other running applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run app2:serve\n```\n\n----------------------------------------\n\nTITLE: Defining PluginConfiguration Type Alias in TypeScript\nDESCRIPTION: Defines a TypeScript type alias named PluginConfiguration that can be either a string value or an instance of the ExpandedPluginConfiguration type that is imported from the devkit/documents module.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/PluginConfiguration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nƬ **PluginConfiguration**: `string` \\| [`ExpandedPluginConfiguration`](../../devkit/documents/ExpandedPluginConfiguration)\n```\n\n----------------------------------------\n\nTITLE: Configuring Default ESLint Module Boundaries in Nx\nDESCRIPTION: Basic ESLint configuration for enforcing module boundaries in Nx workspace with default wildcard settings that allow any project to depend on any library while preventing circular dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-12-17-mastering-the-project-boundaries-in-nx.md#2025-04-22_snippet_0\n\nLANGUAGE: json5\nCODE:\n```\n{\n  overrides: [\n    {\n      files: ['*.ts', '*.tsx', '*.js', '*.jsx'],\n      rules: {\n        '@nrwl/nx/enforce-module-boundaries': [\n          'error',\n          {\n            allow: [],\n            depConstraints: [\n              {\n                sourceTag: '*',\n                onlyDependOnLibsWithTags: ['*'],\n              },\n            ],\n            enforceBuildableLibDependency: true,\n          },\n        ],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Hasher - Bad Hasher\nDESCRIPTION: This TypeScript code showcases a faulty custom hasher that always returns the same static hash value (`my-static-hash`). This example is used to highlight the importance of ensuring the hasher accurately captures all factors that affect the executor's outcome to avoid incorrect cache hits.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/local-executors.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomHasher, Task, HasherContext } from '@nx/devkit';\n\nexport const badHasher: CustomHasher = async (\n  task: Task,\n  context: HasherContext\n) => {\n  return {\n    value: 'my-static-hash',\n  };\n};\n\nexport default badHasher;\n```\n\n----------------------------------------\n\nTITLE: README Template Generation\nDESCRIPTION: Template file for generating a README.md file using EJS syntax for variable injection.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/intro.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n# <%= name %>\n\nThis was generated by the `library-with-readme` generator!\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Elements Dependencies\nDESCRIPTION: Commands to install React Native Elements and related dependencies using npm or yarn.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# npm\nnpm install --save @rneui/base @rneui/themed react-native-vector-icons react-native-safe-area-context\n\n# yarn\n_**yarn add @rneui/base @rneui/themed react-native-vector-icons react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Creating New Nx Workspace with Netlify Functions\nDESCRIPTION: Command to create a new Nx workspace pre-configured for Netlify functions using the @nx/netlify preset.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/node-serverless-functions-netlify.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest my-functions --preset=@nx/netlify --site=my-site\n```\n\n----------------------------------------\n\nTITLE: Configuring E2E Test Splitting in Jest\nDESCRIPTION: Configuration example for enabling task splitting for E2E tests with Jest, allowing for improved caching and distribution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/jest/jest-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/jest/plugin\",\n      \"include\": [\"e2e/**/*\"],\n      \"options\": {\n        \"targetName\": \"e2e-local\",\n        \"ciTargetName\": \"e2e-ci\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Monorepo Structure Example\nDESCRIPTION: Shows the initial basic structure of a monorepo with three applications before optimization.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-10-25-sports-retailer-success.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmonorepo/\n└── apps/\n    ├── storefront/\n    ├── internal-dash/\n    └── support-dash/\n```\n\n----------------------------------------\n\nTITLE: Configuring Serial Step Groups for Cache Restoration in Nx Agents\nDESCRIPTION: A YAML configuration for grouping cache restoration steps to run serially. This approach organizes related steps logically, making the configuration cleaner in the Agents UI without focusing on speed optimization.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- group-name: Restore Cache\n  steps:\n    - name: Restore Node Modules Cache\n      uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/cache/main.yaml'\n      inputs:\n        key: 'package-lock.json'\n        paths: |\n          ~/.npm\n        base-branch: 'main'\n    - name: Restore Browser Binary Cache\n      uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/cache/main.yaml'\n      inputs:\n        key: 'package-lock.json|\"browsers\"'\n        paths: |\n          '~/.cache/Cypress'\n        base-branch: 'main'\n```\n\n----------------------------------------\n\nTITLE: Angular Project Directory Structure\nDESCRIPTION: Example directory structure of an Nx Angular project showing key files and folders organization.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/nx-and-angular.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n└─ myngapp\n   ├─ ...\n   ├─ src\n   │  ├─ app\n   │  │  ├─ app.component.css\n   │  │  ├─ app.component.html\n   │  │  ├─ app.component.spec.ts\n   │  │  ├─ app.component.ts\n   │  │  └─ app.module.ts\n   │  ├─ assets\n   │  ├─ favicon.ico\n   │  ├─ index.html\n   │  ├─ main.ts\n   │  └─ styles.css\n   ├─ nx.json\n   ├─ package.json\n   ├─ project.json\n   ├─ ...\n```\n\n----------------------------------------\n\nTITLE: Utility Function in TypeScript\nDESCRIPTION: Defines a utility function `getRandomItem` in TypeScript to get a random element from an array. This function is moved from other packages to the newly created `util` library to be shared across projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/typescript-packages.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getRandomItem<T>(arr: T[]): T {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying NX Unrecognized Cache Artifacts Warning\nDESCRIPTION: Warning message shown when Nx finds cache artifacts without proper metadata, making them unusable for restoration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/unknown-local-cache.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNX Unrecognized Cache Artifacts\n\nNx found unrecognized artifacts in the cache directory and will not be able to use them.\nNx can only restore artifacts it has metadata about.\nRead about this warning and how to address it here: https://nx.dev/troubleshooting/unknown-local-cache\n```\n\n----------------------------------------\n\nTITLE: Creating a Deno standalone app with Nx\nDESCRIPTION: Command to scaffold a new single-project Deno workspace using Nx, demonstrating the new standalone app support for Deno in Nx 16.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-05-02-nx-16-is-here.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-nx-workspace --preset=@nx/deno\n```\n\n----------------------------------------\n\nTITLE: Configuring Serve Task for Lit Application in Nx\nDESCRIPTION: JSON configuration for the serve task in project.json, setting up HTTP server and watch mode for the Lit application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-lit.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"serve\": {\n      \"dependsOn\": [\"build\"],\n      \"executor\": \"nx:run-commands\",\n      \"options\": {\n        \"commands\": [\n          \"http-server dist/apps/my-lit-app\",\n          \"nx watch --projects=my-lit-app --includeDependentProjects -- nx build my-lit-app\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CI Target for E2E Tests\nDESCRIPTION: JSON configuration showing how to set up the ciTargetName for splitting E2E tests in CI environments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/gradle/gradle-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/gradle\",\n      \"options\": {\n        \"ciTargetName\": \"test-ci\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Node App with Webpack\nDESCRIPTION: Command to generate a new Node.js application using Webpack bundler in an existing Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/plugin-overview.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/node:app apps/my-app --bundler=webpack\n```\n\n----------------------------------------\n\nTITLE: Form Field Implementation with Mixins\nDESCRIPTION: Demonstrates the use of class mixins for creating reusable form field components with shared functionality\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-06-29-nx-console-gets-lit.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst Field = (superClass) =>\n  class extends superClass {\n    // we can define (reactive) properties that every field is going to need\n    @property()\n    option: Option;\n    protected get fieldId(): string {\n      return `${this.option.name}-field`;\n    }\n\n    // we can define methods that should be available to all fields\n    dispatchValue(value: string) {\n      // ...\n    }\n  };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst FieldWrapper = (superClass) =>\n  class extends superClass {\n    // we can define a render() method so that fields are all rendered the same\n    protected render() {\n      return html` <label for=\"${this.fieldId}\">${this.option.name}</label>\n        <p>${this.option.description}</p>\n        ${this.renderField()}`;\n    }\n  };\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('input-field')\nexport class InputField extends FieldWrapper(Field(LitElement)) {\n  renderField() {\n    return html` <input\n      id=\"${this.fieldId}\"\n      @input=\"${(e) => this.dispatchValue(e.target.value)}\"\n    />`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure @nx/gradle plugin with includeSubprojectsTasks in nx.json\nDESCRIPTION: Demonstrates the configuration of the @nx/gradle plugin within the `nx.json` file. The `includeSubprojectsTasks` option is set to `true`, enabling Nx to recognize and manage tasks from Gradle subprojects. This configuration simplifies task execution across a Gradle-based Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/gradle/src/migrations/20-2-0/add-include-subprojects-tasks.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"options\": {\n        \"includeSubprojectsTasks\": true\n      },\n      \"plugin\": \"@nx/gradle\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: NxModuleFederationConfigOverride Type Definition\nDESCRIPTION: TypeScript type definition for NxModuleFederationConfigOverride used to override ModuleFederationPlugin options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/module-federation/documents/nx-module-federation-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NxModuleFederationConfigOverride = Omit<\n  moduleFederationPlugin.ModuleFederationPluginOptions,\n  'exposes' | 'remotes' | 'name' | 'shared' | 'filename'\n>;\n```\n\n----------------------------------------\n\nTITLE: Generating a Remix Application\nDESCRIPTION: Command to generate a new Remix application in an Nx workspace. It creates necessary files and configurations for the app.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/remix/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/remix:app apps/myapp\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository for Monorepo\nDESCRIPTION: Command to initialize a git repository for version control of the monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Globally with pnpm\nDESCRIPTION: Command to install Nx globally using pnpm package manager. Global installation allows running Nx commands without the pnpm prefix.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/getting-started/installation.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --global nx@latest\n```\n\n----------------------------------------\n\nTITLE: Setting Default Generator Options in nx.json\nDESCRIPTION: This code demonstrates how to set default options for generators, such as passing `--buildable=true` when creating new libraries with the `@nx/js` plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_22\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"generators\": {\n    \"@nx/js:library\": {\n      \"buildable\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building UI Elements for a Qwik Todo Application\nDESCRIPTION: Enhanced Qwik component with basic UI elements for a todo application, including a heading, checkbox, and form for adding new todos.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-15-qwikify-your-dev.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { Form } from '@builder.io/qwik-city';\n\nexport default component$(() => {\n  return (\n    <div>\n      <h1>Todos</h1>\n      <div>\n        <label>\n          <input type=\"checkbox\" /> {'My First Todo'}\n        </label>\n      </div>\n      <Form>\n        <input type=\"hidden\" name=\"id\" value={1} />\n        <input type=\"text\" name=\"message\" />\n        <button type=\"submit\">Add</button>\n      </Form>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Netlify Functions (Production)\nDESCRIPTION: Command to deploy Netlify functions to production, using the --prod flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/node-serverless-functions-netlify.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx deploy-functions --prod\n```\n\n----------------------------------------\n\nTITLE: Updating Button Component HTML Template\nDESCRIPTION: Updates the button component's HTML template to use the custom CSS class.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_46\n\nLANGUAGE: html\nCODE:\n```\n<a class=\"atn-button\" href=\"{{ href }}\" target=\"_blank\" rel=\"noopener noreferrer\">\n  <ng-content></ng-content>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Documentation Overview in Markdown\nDESCRIPTION: Simple markdown file describing the contents of the nx.dev folder structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/nx-dev/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# nx.dev\n\nThis folder contains the app and libs to power [nx.dev](https://nx.dev).\n```\n\n----------------------------------------\n\nTITLE: Using Nx Devkit Generator in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use an Nx Devkit generator within a custom generator function. It shows how to pass the virtual file system tree and options to the generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/composing-generators.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { libraryGenerator } from '@nx/js';\n\nexport default async function (tree: Tree, schema: any) {\n  await libraryGenerator(\n    tree, // virtual file system tree\n    { name: schema.name } // options for the generator\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Zodiac Sign List with Navigation\nDESCRIPTION: Creates a list component with navigation functionality to display zodiac signs and handle navigation to the horoscope card screen.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AdhZodiacSignItem, AdhZodiacSignList } from '@aztro-daily-horoscope/models';\nimport { useNavigation } from '@react-navigation/native';\nimport React from 'react';\nimport { FlatList } from 'react-native';\nimport { ListItem } from 'react-native-elements';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\nimport { connect } from 'react-redux';\n\nimport { ZodiacSignListProps, mapDispatchToProps } from './zodiac-sign-list.props';\n\nexport function ZodiacSignList({ setUserZodiacSignItem }: ZodiacSignListProps) {\n  const navigation = useNavigation();\n  const keyExtractor = (item: AdhZodiacSignItem) => item.zodiacSign;\n  const zodiacListItemPress = (item: AdhZodiacSignItem) => {\n    navigation.navigate('Horoscope Card');\n    setUserZodiacSignItem(item);\n  };\n\n  return (\n    <FlatList\n      keyExtractor={keyExtractor}\n      data={AdhZodiacSignList}\n      renderItem={({ item }) => (\n        <ListItem bottomDivider onPress={() => zodiacListItemPress(item)}>\n          <Icon name={item.icon} />\n          <ListItem.Content>\n            <ListItem.Title>{item.zodiacSign}</ListItem.Title>\n          </ListItem.Content>\n          <ListItem.Chevron />\n        </ListItem>\n      )}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Affected Projects in Nx Workspace\nDESCRIPTION: This command displays affected projects in the workspace using the '--affected' flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/show.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx show projects --affected\n```\n\n----------------------------------------\n\nTITLE: Migrating Cypress Config with Domain Injection Configuration\nDESCRIPTION: Demonstrates removing experimentalSkipDomainInjection configuration option when it contains domains. In Cypress v14, skipping domain injection is the default behavior, so this option is no longer needed.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/src/migrations/update-20-8-0/set-inject-document-domain.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { nxE2EPreset } from '@nx/cypress/plugins/cypress-preset';\nimport { defineConfig } from 'cypress';\n\nexport default defineConfig({\n  e2e: {\n    ...nxE2EPreset(__filename, {\n      cypressDir: 'src',\n      bundler: 'vite',\n      webServerCommands: {\n        default: 'pnpm exec nx run app1:dev',\n        production: 'pnpm exec nx run app1:dev',\n      },\n      ciWebServerCommand: 'pnpm exec nx run app1:dev',\n      ciBaseUrl: 'http://localhost:4200',\n    }),\n    baseUrl: 'http://localhost:4200',\n    experimentalSkipDomainInjection: ['https://example.com'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables for App2 Theme\nDESCRIPTION: CSS rules that define the theme values for app2 using CSS custom properties (variables). These variables are referenced in the Tailwind configuration to create a consistent theme across the application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_35\n\nLANGUAGE: css\nCODE:\n```\n... :root {\n  /* Colors */\n  --primary-light: #a5b4fc;\n  --primary: #6366f1;\n  --primary-dark: #4338ca;\n  --secondary-light: #e9d5ff;\n  --secondary: #a855f7;\n  --secondary-dark: #7e22ce;\n  --white: #ffffff;\n  --black: #000000;\n\n  /* Spacing */\n  --spacing-sm: 1rem;\n  --spacing-md: 1.5rem;\n  --spacing-lg: 2rem;\n  --spacing-xl: 3rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PostTasksExecutionContext Type Alias in TypeScript\nDESCRIPTION: TypeScript type alias that defines the structure for post-tasks execution context in NX. Contains nxJsonConfiguration, taskResults, and workspaceRoot properties.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/PostTasksExecutionContext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nƬ PostTasksExecutionContext: Object\n\n{\n  nxJsonConfiguration: NxJsonConfiguration;\n  taskResults: TaskResults;\n  workspaceRoot: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Distributed Task Execution\nDESCRIPTION: Demonstrates how to disable distributed task execution by setting the NX_CLOUD_DISTRIBUTED_EXECUTION environment variable to false. However, this method is deprecated, and it's recommended to use the --no-dte or --no-agents flags instead.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/env-vars.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nNX_CLOUD_DISTRIBUTED_EXECUTION=false\n```\n\n----------------------------------------\n\nTITLE: Adding Nx Cache to .gitignore\nDESCRIPTION: Demonstrates how to update .gitignore file to exclude the .nx/cache directory from version control.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/src/migrations/update-17-0-0/move-cache-directory.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnode_modules\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nnode_modules\n.nx/cache\n```\n\n----------------------------------------\n\nTITLE: Watching Dependencies with Nx\nDESCRIPTION: Command to watch and automatically rebuild dependencies of a specific application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-29-new-nx-experience.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx watch-deps myviteapp\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for ESM Support\nDESCRIPTION: Updates to TypeScript configuration to support ESM modules for Apollo Server\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"lib\": [\"es2020\"],\n    \"target\": \"es2020\",\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rspack Serve Task in Nx\nDESCRIPTION: This snippet outlines the setup of an inferred serve task for projects using Rspack. It configures the Rspack plugin in Nx for serving the project. Rspack needs to be installed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/common-tasks.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"plugins\":[{\"plugin\":\"@nx/rspack/plugin\",\"options\":{\"serveTargetName\":\"serve\"}}]}\n```\n\n----------------------------------------\n\nTITLE: Multiple Source Tags Configuration in ESLint\nDESCRIPTION: Advanced ESLint configuration showing how to use allSourceTags to create more specific constraints by matching multiple source tags simultaneously.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tag-multiple-dimensions.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // ... more ESLint config here\n\n  \"@nx/enforce-module-boundaries\": [\n    \"error\",\n    {\n      \"allow\": [],\n      \"depConstraints\": [\n        {\n          \"sourceTag\": \"scope:admin\",\n          \"onlyDependOnLibsWithTags\": [\"scope:shared\", \"scope:admin\"]\n        },\n        {\n          \"sourceTag\": \"type:ui\",\n          \"onlyDependOnLibsWithTags\": [\"type:ui\", \"type:util\"]\n        },\n        {\n          \"allSourceTags\": [\"scope:admin\", \"type:ui\"],\n          \"onlyDependOnLibsWithTags\": [\"type:util\"],\n          \"bannedExternalImports\": [\"*router*\"]\n        }\n      ]\n    }\n  ]\n\n  // ... more ESLint config here\n}\n```\n\n----------------------------------------\n\nTITLE: Update Nx Gradle plugin in nx.json (Before)\nDESCRIPTION: This snippet shows the original configuration in nx.json, where the plugins array includes \"@nx/gradle\". It needs to be updated to use the new plugin alias.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/gradle/src/migrations/21-0-0/change-plugin-to-v1.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@nx/gradle\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with npm for Svelte Project\nDESCRIPTION: Command to create a new Nx workspace using npm, with TypeScript standalone preset and Nx Cloud enabled.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-svelte.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest acme --preset=ts-standalone --nx-cloud=yes\n```\n\n----------------------------------------\n\nTITLE: Defining RawProjectGraphDependency Type Alias in TypeScript\nDESCRIPTION: The RawProjectGraphDependency type alias represents a dependency between two projects in a ProjectGraph. It can be one of three types: ImplicitDependency, StaticDependency, or DynamicDependency.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/RawProjectGraphDependency.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **RawProjectGraphDependency**: [`ImplicitDependency`](../../devkit/documents/ImplicitDependency) \\| [`StaticDependency`](../../devkit/documents/StaticDependency) \\| [`DynamicDependency`](../../devkit/documents/DynamicDependency)\n```\n\n----------------------------------------\n\nTITLE: Tree Interface Method: changePermissions\nDESCRIPTION: Method to change file permissions using either string (e.g. '755') or octal integer (e.g. 0o755) format\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/Tree.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n▸ changePermissions(filePath: string, mode: Mode): void\n```\n\n----------------------------------------\n\nTITLE: Defining ProjectFileMap Interface in TypeScript\nDESCRIPTION: Defines an indexable interface that maps project names to arrays of FileData objects. The interface allows dynamic project names as keys with corresponding file data arrays as values.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ProjectFileMap.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n▪ [projectName: `string`]: [`FileData`](../../devkit/documents/FileData)[]\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Dependencies During Application Development in Nx\nDESCRIPTION: Command to watch and automatically rebuild an application's dependencies when they change, while excluding the app itself from rebuilds since it's typically served by a dev server.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/workspace-watching.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx watch --projects=my-app --includeDependentProjects -- nx run-many -t build -p \\$NX_PROJECT_NAME --exclude=my-app\n```\n\n----------------------------------------\n\nTITLE: Migrate from Specific Version Excluding Applied Migrations\nDESCRIPTION: Example of migrating from a specific Nx version while excluding migrations that should have been applied in previous updates.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/migrate.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate latest --from=nx@14.5.0 --exclude-applied-migrations\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Defaults with Patterns\nDESCRIPTION: JSON configuration for setting target defaults using pattern matching to handle dynamic task names\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-08-01-nx-19-5-update.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"e2e-ci--**/*\": {\n      \"dependsOn\": [\"build\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Static HTML Files for E2E Testing\nDESCRIPTION: This command serves static HTML files and runs end-to-end (E2E) tests. It builds the application, serves the static files using a simple HTTP server, and then executes Cypress tests against the served files. This is useful for testing in CI pipelines.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n\"nx serve-static my-next-app-e2e\"\n```\n\n----------------------------------------\n\nTITLE: Installing the Nx Angular Plugin\nDESCRIPTION: Command to install the official Nx Angular plugin which provides Angular-specific capabilities to the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-10-setting-up-module-federation-with-server-side-rendering-for-angular.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @nrwl/angular\n```\n\n----------------------------------------\n\nTITLE: Enabling DTE Algorithm V2 in YAML Configuration\nDESCRIPTION: Configuration to enable the experimental DTE Algorithm V2 feature for Nx Agents. This environment variable should be added to the main CI job that invokes the 'npx start-ci-run' command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/release-notes.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nNX_CLOUD_DTE_V2: 'true'\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Markdown\nDESCRIPTION: Markdown snippet for embedding a YouTube video about Nx Console Run UI Form using custom video embedding syntax.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/15_0_0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% youtube\nsrc=\"https://youtu.be/ZST_rmhzRXI\"\ntitle=\"Nx Console Run UI Form\"\nwidth=\"100%\" /%}\n```\n\n----------------------------------------\n\nTITLE: Defining TargetDefaults Type Alias in TypeScript for Nx\nDESCRIPTION: This snippet defines a type alias named TargetDefaults. It represents a record where keys are strings and values are partial TargetConfiguration objects. This type is likely used for configuring default settings for various targets in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/TargetDefaults.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **TargetDefaults**: `Record`\\<`string`, `Partial`\\<[`TargetConfiguration`](../../devkit/documents/TargetConfiguration)\\>\\>\n```\n\n----------------------------------------\n\nTITLE: Configuring Podfile for iOS Vector Icons\nDESCRIPTION: Instructions to add the RNVectorIcons pod to the iOS Podfile.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_4\n\nLANGUAGE: podfile\nCODE:\n```\npod 'RNVectorIcons', :path => '../../../node\\_modules/react-native-vector-icons'\n```\n\n----------------------------------------\n\nTITLE: Karma Test Configuration in project.json\nDESCRIPTION: Example of Karma test configuration that might need to be renamed or removed when switching to Vitest\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-17-modern-angular-testing-with-nx.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"karma:test\": {\n      \"executor\": \"@angular-devkit/build-angular:karma\",\n      \"options\": {\n        \"polyfills\": [\"zone.js\", \"zone.js/testing\"],\n        \"tsConfig\": \"tsconfig.spec.json\",\n        \"assets\": [\n          {\n            \"glob\": \"**/*\",\n            \"input\": \"public\"\n          }\n        ],\n        \"styles\": [\"src/styles.css\"],\n        \"scripts\": []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Component Update Example\nDESCRIPTION: Example of making a change to a product list component template to demonstrate affected project testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<p>product-list works!</p>\n<p>This is a change. 👋</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Tags in project.json\nDESCRIPTION: This snippet shows how to annotate a project with tags in the project.json file, which can be used for configuring lint rules and enforcing module boundaries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_18\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"root\": \"libs/mylib\",\n  \"tags\": [\"scope:myteam\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Graph Plugin in Groovy\nDESCRIPTION: This snippet demonstrates how to install the `dev.nx.gradle.project-graph` Gradle plugin in a Groovy `build.gradle` file. It adds the plugin to the `plugins` block, specifying its ID and version. No specific dependencies are required beyond the Gradle environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/gradle/project-graph/README.md#_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n    id \"dev.nx.gradle.project-graph\" version \"+\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Preset Generator in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates creating a preset generator function for an Nx plugin. It shows how to manipulate the file system tree and configure project settings. Dependencies include Nx libraries for manipulating project structure and formatting code.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/create-preset.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function (tree: Tree, options: PresetGeneratorSchema) {\n  const normalizedOptions = normalizeOptions(tree, options);\n  addProjectConfiguration(tree, normalizedOptions.projectName, {\n    root: normalizedOptions.projectRoot,\n    projectType: 'application',\n    sourceRoot: `${normalizedOptions.projectRoot}/src`,\n    targets: {\n      exec: {\n        executor: 'nx:run-commands',\n        options: {\n          command: `node ${projectRoot}/src/index.js`,\n        },\n      },\n    },\n    tags: normalizedOptions.parsedTags,\n  });\n  addFiles(tree, normalizedOptions);\n  await formatFiles(tree);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Build Target for Component Testing\nDESCRIPTION: This shell command is used to generate the Cypress component configuration while also specifying a build target for the project. This ensures the correct build executor is used during testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:cypress-component-configuration --project=my-cool-angular-project --build-target:some-angular-app:build --generate-tests\n```\n\n----------------------------------------\n\nTITLE: Preset Generator Schema (TypeScript)\nDESCRIPTION: This snippet defines the schema for the preset generator, including the 'name' and 'mode' options. This ensures that the generator expects these parameters during workspace creation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-10-create-your-own-create-react-app-cli.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PresetGeneratorSchema {\n  name: string;\n  mode: 'light' | 'dark';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Makefile with Hello Target\nDESCRIPTION: A basic Makefile that defines a 'hello' target which prints 'Hello, world!' to the console.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/running-custom-commands.md#2025-04-22_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nhello:\n  echo \"Hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: Display Project Details (Shell)\nDESCRIPTION: This command shows detailed information about a specific project within the Nx workspace, including available tasks and dependencies. The `--web` flag opens the project details in a web browser.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./nx show project application --web\n```\n\n----------------------------------------\n\nTITLE: Using Header Component in App Template\nDESCRIPTION: HTML template showing how to use the extracted header component\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"font-mono\">\n  <angular-tailwind-nx-header></angular-tailwind-nx-header>\n\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with Next.js Preset\nDESCRIPTION: Command to create a new Nx workspace with Next.js preset using npx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/next/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest --preset=next\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Vue Plugin\nDESCRIPTION: Command to install the @nx/vue plugin using nx add for Nx version 18 and above. This ensures the correct version is installed that matches the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/vue/vue-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/vue\n```\n\n----------------------------------------\n\nTITLE: React Native Server Configuration with Cache Reset\nDESCRIPTION: Configuration for starting React Native server with cache reset enabled to remove cached files.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/start-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    \"start\": {\n      \"executor\": \"@nx/react-native:start\",\n      \"options\": {\n        \"port\": 8081,\n        \"resetCache\": true\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Package.json with Script Example\nDESCRIPTION: Example of a basic root package.json file with a 'docs' script that generates documentation. This shows the starting point before making the script Nx-aware.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/root-level-scripts.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myorg\",\n  \"scripts\": {\n    \"docs\": \"node ./generateDocsSite.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/express Plugin for Nx 18+\nDESCRIPTION: Command to add the @nx/express plugin to an existing Nx workspace version 18 or higher. This ensures the correct version is installed that matches your Nx version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/express/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/express\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcuts Implementation for Nx Console\nDESCRIPTION: Defines keyboard shortcuts for running generators, performing dry runs, and searching options in the Nx Console UI. These shortcuts improve developer productivity and accessibility.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-06-29-nx-console-gets-lit.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- `Cmd/Ctrl + Enter` to run the generator\n- `Cmd/Ctrl + Shift + Enter` to start a dry run\n- `Cmd/Ctrl + Shift + S` to focus the search bar and look for a specific option\n```\n\n----------------------------------------\n\nTITLE: Running Nx Migration Scripts\nDESCRIPTION: Command to execute the migration scripts generated during the Nx update process. This applies any necessary changes to update the workspace configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/getting-started/installation.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested External Import Checks\nDESCRIPTION: ESLint configuration showing how to enable checking of nested external imports by setting checkNestedExternalImports to true.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-08-02-nx-14-5-cypess-v10-output-globs-linter-perf-react-tailwind-support.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nx-enforce-module-boundaries\": [\n    \"error\",\n    {\n      \"allow\": [],\n      \"checkNestedExternalImports\": true,\n      \"depConstraints\": [\n        {\n          \"sourceTag\": \"framework-agnostic\",\n          \"bannedExternalImports\": [\"react\"]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Component Without Providing the File Extension\nDESCRIPTION: This command generates a component named 'MyComponent' without specifying the file extension. It automatically adds the correct extension based on the configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/component-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:component apps/my-app/src/lib/my-component/my-component\n```\n\n----------------------------------------\n\nTITLE: Running Storybook in Nx After Migration\nDESCRIPTION: This command starts Storybook for a specific project in an Nx workspace after migrating to Storybook 8.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/migrate-8-generator-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx storybook PROJECT_NAME\n```\n\n----------------------------------------\n\nTITLE: Displaying Terminal Output in Nx Documentation\nDESCRIPTION: This component specifically formats terminal output from commands, with options to specify the command that was run and the working directory path.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n``` {% command=\"node index.js\" %}\n My terminal output here!\n```\n```\n\nLANGUAGE: markdown\nCODE:\n```\n``` {% command=\"node index.js\" path=\"~/myorg\" %}\n My terminal output here!\n```\n```\n\n----------------------------------------\n\nTITLE: Default Ignored Path Patterns\nDESCRIPTION: The default file patterns that Nx ignores when generating stories.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/stories-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n*.stories.ts, *.stories.tsx, *.stories.js, *.stories.jsx, *.stories.mdx\n```\n\n----------------------------------------\n\nTITLE: Updating External Package\nDESCRIPTION: Example of updating a non-Nx package (another-package) to version 12.0.0, which will update other packages and generate a migrations.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/migrate.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate another-package@12.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins CI Pipeline with Groovy\nDESCRIPTION: This Groovy pipeline script sets up a Jenkins CI environment for an Nx workspace. It defines parallel stages for 'main' and 'PR' branches, specifying how builds should be processed. The script includes commands for running npm and Nx commands, and allows for distributing agents and managing affected builds. Key commands are wrapped in shell script steps and focus on building and testing impacted projects only.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/monorepo-ci-jenkins.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\npipeline {\n    agent none\n    environment {\n        NX_BRANCH = env.BRANCH_NAME.replace('PR-', '')\n    }\n    stages {\n        stage('Pipeline') {\n            parallel {\n                stage('Main') {\n                    when {\n                        branch 'main'\n                    }\n                    agent any\n                    steps {\n                        // This line enables distribution\n                        // The \"--stop-agents-after\" is optional, but allows idle agents to shut down once the \"e2e-ci\" targets have been requested\n                        // sh \"npx nx-cloud start-ci-run --distribute-on='3 linux-medium-js' --stop-agents-after='e2e-ci'\"\n                        sh \"npm ci\"\n                        sh \"npx nx-cloud record -- nx format:check\"\n                        sh \"npx nx affected --base=HEAD~1 -t lint test build e2e-ci\"\n                    }\n                }\n                stage('PR') {\n                    when {\n                        not { branch 'main' }\n                    }\n                    agent any\n                    steps {\n                        // This line enables distribution\n                        // The \"--stop-agents-after\" is optional, but allows idle agents to shut down once the \"e2e-ci\" targets have been requested\n                        // sh \"npx nx-cloud start-ci-run --distribute-on='3 linux-medium-js' --stop-agents-after='e2e-ci'\"\n                        sh \"npm ci\"\n                        sh \"npx nx-cloud record -- nx format:check\"\n                        sh \"npx nx affected --base origin/${env.CHANGE_TARGET} -t lint test build e2e-ci\"\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Nx Daemon CLI Command\nDESCRIPTION: This snippet demonstrates how to use the 'daemon' command in Nx CLI. It can be used to print information about the Nx Daemon process or start a daemon process. The command can be invoked directly using 'nx' if installed globally, or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/daemon.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx daemon\n```\n\n----------------------------------------\n\nTITLE: Setting Default Command Arguments as Options in nx.json\nDESCRIPTION: Configuring target defaults in nx.json to provide command arguments as options for all projects. This approach applies the same arguments to all targets with the specified name across the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/pass-args-to-commands.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"build\": {\n      \"options\": {\n        \"assetsInlineLimit\": 2048,\n        \"assetsDir\": \"static/assets\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript ESLint Dependencies in package.json (Before)\nDESCRIPTION: This code snippet shows the `devDependencies` section of a `package.json` file before the migration.  It lists the TypeScript ESLint related packages and their versions, which are assumed to be between 8.0.0 and 8.13.0. The purpose is to establish the initial state of the dependencies before the update.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/eslint/src/migrations/update-20-2-0/update-typescript-eslint-v8-13-0.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"typescript-eslint\": \"^8.0.0\",\n    \"@typescript-eslint/eslint-plugin\": \"^8.0.0\",\n    \"@typescript-eslint/parser\": \"^8.0.0\",\n    \"@typescript-eslint/utils\": \"^8.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Jest\nDESCRIPTION: This snippet shows the command to execute the unit tests for the nx-dev-ui-commands library using Jest.  It leverages the Nx CLI to run the tests.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/ui-commands/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"nx test nx-dev-ui-commands\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Quiet Option in ESLint Configuration\nDESCRIPTION: Configuration to always run the linter in quiet mode by default, hiding warnings but still showing errors.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/eslint/docs/eslint-examples.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"lint\": {\n  \"executor\": \"@nx/eslint:lint\",\n  \"outputs\": [\"{options.outputFile}\"],\n  \"options\": {\n    \"lintFilePatterns\": [\"apps/frontend/**/*.ts\"],\n    \"quiet\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Next.js Configuration with Development and Production Modes\nDESCRIPTION: Expanded server configuration showing both development and production configurations with respective build targets.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/server-next-executor-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"serve\": {\n  \"executor\": \"@nx/next:server\",\n  \"defaultConfiguration\": \"development\",\n  \"options\": {\n    \"buildTarget\": \"acme:build\",\n    \"dev\": true\n  },\n  \"configurations\": {\n    \"development\": {\n      \"buildTarget\": \"acme:build:development\",\n      \"dev\": true\n    },\n    \"production\": {\n      \"buildTarget\": \"acme:build:production\",\n      \"dev\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NxScopedHost Class in TypeScript\nDESCRIPTION: This snippet defines the NxScopedHost class, which extends ScopedHost<any>. It includes a constructor, properties, and various methods for file system operations and configuration management.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ngcli_adapter/NxScopedHost.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass NxScopedHost extends ScopedHost<any> {\n  private root: string;\n\n  constructor(root: string) {\n    super();\n    this.root = root;\n  }\n\n  // ... other methods and properties\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Allowed Dependencies with onlyDependOnLibsWithTags in Nx\nDESCRIPTION: This snippet demonstrates how to use the onlyDependOnLibsWithTags property to specify which tags a project is allowed to depend on. It shows that this approach can sometimes lead to a long list of possible options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/ban-dependencies-with-tags.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"sourceTag\": \"scope:client\",\n  // we actually want to say it cannot depend on `scope:admin`\n  \"onlyDependOnLibsWithTags\": [\n    \"scope:shared\",\n    \"scope:utils\",\n    \"scope:core\",\n    \"scope:client\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running React Native Android App Command\nDESCRIPTION: Command to execute the React Native Android app using Nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/run-android-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx run mobile:run-android\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Details Before Conversion\nDESCRIPTION: Command to show project details before converting to Project Crystal, for comparison purposes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-05-08-nx-19-release.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx show project my-react-app-e2e --web\n```\n\n----------------------------------------\n\nTITLE: Adding YouTube Section Links in Nx Documentation\nDESCRIPTION: This component creates a button-like widget that links to a specific timestamp in a YouTube video, useful for tutorials with video references.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n{% video-link link=\"https://youtu.be/OQ-Zc5tcxJE?t=64\" /%}\n```\n\n----------------------------------------\n\nTITLE: Import createServer from @nx/angular-rsbuild/ssr\nDESCRIPTION: Imports the `createServer` function from the `@nx/angular-rsbuild/ssr` package. This function is used to create an Express server integrated with Angular's CommonEngine for Server-Side Rendering (SSR) in an Rsbuild project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rsbuild/create-server.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimport { createServer } from '@nx/angular-rsbuild/ssr';\n```\n\n----------------------------------------\n\nTITLE: Building Storybook in Nx After Migration\nDESCRIPTION: This command builds Storybook for a specific project in an Nx workspace after migrating to Storybook 8.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/migrate-8-generator-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx build-storybook PROJECT_NAME\n```\n\n----------------------------------------\n\nTITLE: Starting React Native Server with Nx Command\nDESCRIPTION: Command to start the React Native server using Nx run command.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/start-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx run mobile:start\n```\n\n----------------------------------------\n\nTITLE: createServer Function Signature\nDESCRIPTION: Defines the function signature for `createServer`. It takes a bootstrap function (typically `main.server.ts`) as an argument and returns an `RsbuildAngularServer` object, which contains the configured Express server instance and a `listen` method to start the server.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rsbuild/create-server.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createServer(bootstrap: any): RsbuildAngularServer;\n```\n\n----------------------------------------\n\nTITLE: Adding Nx Azure Cache Package\nDESCRIPTION: This command adds the @nx/azure-cache NPM package to the workspace and automatically configures it. It includes generating a new activation key for the plugin, which is stored in the repository.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/azure-cache/azure-cache-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"nx add @nx/azure-cache\"\n```\n\n----------------------------------------\n\nTITLE: Defining Zodiac Sign List Constant\nDESCRIPTION: TypeScript constant array defining the list of zodiac signs with their corresponding icons.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AdhZodiacSignItem } from './zodiac-sign-item.interface';\nimport { AdhZodiacSign } from './zodiac-sign.enum';\n\nexport const AdhZodiacSignList: AdhZodiacSignItem[] = [\n  {\n    zodiacSign: AdhZodiacSign.Aries,\n    icon: 'zodiac-aries',\n  },\n  {\n    zodiacSign: AdhZodiacSign.Taurus,\n    icon: 'zodiac-taurus',\n  },\n  {\n    zodiacSign: AdhZodiacSign.Gemini,\n    icon: 'zodiac-gemini',\n  },\n  {\n    zodiacSign: AdhZodiacSign.Cancer,\n    icon: 'zodiac-cancer',\n  },\n  {\n    zodiacSign: AdhZodiacSign.Leo,\n    icon: 'zodiac-leo',\n  },\n  {\n    zodiacSign: AdhZodiacSign.Virgo,\n    icon: 'zodiac-virgo',\n  },\n  {\n    zodiacSign: AdhZodiacSign.Libra,\n    icon: 'zodiac-libra',\n  },\n  {\n    zodiacSign: AdhZodiacSign.Scorpio,\n    icon: 'zodiac-scorpio',\n  },\n  {\n    zodiacSign: AdhZodiacSign.Sagittarius,\n    icon: 'zodiac-sagittarius',\n  },\n  {\n    zodiacSign: AdhZodiacSign.Capricorn,\n    icon: 'zodiac-capricorn',\n  },\n  {\n    zodiacSign: AdhZodiacSign.Aquarius,\n    icon: 'zodiac-aquarius',\n  },\n  {\n    zodiacSign: AdhZodiacSign.Pisces,\n    icon: 'zodiac-pisces',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Customizing commit prefix during migration\nDESCRIPTION: This command runs migrations, creates commits for each migration, and customizes the commit prefix.  The `--commit-prefix` flag allows you to specify a prefix to be added to each commit message for easy identification.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/advanced-update.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"nx migrate --run-migrations --create-commits --commit-prefix=\\\"chore(core): AUTOMATED - \\\"\"\n```\n\n----------------------------------------\n\nTITLE: Call to Action Template\nDESCRIPTION: Markdown template for a call-to-action section that links to Nx Cloud login\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-07-29-explain-with-ai.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% call-to-action title=\"Log in to Nx Cloud\" url=\"https://cloud.nx.app\" icon=\"nxcloud\" description=\"Enable AI features in your organization settings\" %}\nLog in to Nx Cloud\n{% /call-to-action %}\n```\n\n----------------------------------------\n\nTITLE: Feature Cards Layout in Markdown\nDESCRIPTION: Markdown code for displaying feature cards in a two-column layout using custom card components.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/20_0_0.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% cards cols=\"2\" %}\n{% card title=\"Composite Graph\" type=\"document\" url=\"/features/explore-graph\" /%}\n{% card title=\"New repositories can use TypeScript project references instead of path aliases\" type=\"document\" url=\"/nx-api/js\" /%}\n{% card title=\"Rspack plugin graduates from labs\" type=\"document\" url=\"/nx-api/rspack\" /%}\n{% /cards %}\n```\n\n----------------------------------------\n\nTITLE: Using Button Component in Card Template\nDESCRIPTION: Integrates the new button component into an existing card component template, replacing the previous button implementation with the new reusable component.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_44\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"card\">\n  <div class=\"card-title\">{{ title }}</div>\n  <p class=\"card-content\">\n    <ng-content></ng-content>\n  </p>\n  <angular-tailwind-nx-button class=\"flex self-end\" [href]=\"url\">Show me!</angular-tailwind-nx-button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/webpack Plugin in Nx 18+\nDESCRIPTION: This command adds the @nx/webpack plugin to an existing Nx workspace, ensuring the correct version is installed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/webpack/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/webpack\n```\n\n----------------------------------------\n\nTITLE: Running Nx Release Dry Run\nDESCRIPTION: Commands to simulate the release process with Nx, including first-time release configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-09-versioning-and-releasing-packages.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx release --dry-run\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx release --dry-run --first-release\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutorsJson Interface in TypeScript\nDESCRIPTION: This code snippet defines the ExecutorsJson interface with two optional properties: 'builders' and 'executors'. Both properties are of type Record<string, ExecutorsJsonEntry>, representing a mapping of string keys to ExecutorsJsonEntry objects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ExecutorsJson.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ExecutorsJson {\n  builders?: Record<string, ExecutorsJsonEntry>;\n  executors?: Record<string, ExecutorsJsonEntry>;\n}\n```\n\n----------------------------------------\n\nTITLE: Launching a Fly.io Project\nDESCRIPTION: This command initializes a new Fly.io project with a generated name, without deploying it immediately.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/node-server-fly-io.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfly launch --generate-name --no-deploy\n```\n\n----------------------------------------\n\nTITLE: JSON schema with nested properties\nDESCRIPTION: This JSON schema demonstrates the usage of nested `properties` to define a complex object structure. The outer `index` property is an object with its own properties (`input` and `output`), each with its own type, description, and constraints. The `input` property is marked as required within the `index` object.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"index\": {\n    \"description\": \"Configures the generation of the application's HTML index.\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"input\": {\n        \"type\": \"string\",\n        \"minLength\": 1,\n        \"description\": \"The path of a file to use for the application's generated HTML index.\"\n      },\n      \"output\": {\n        \"type\": \"string\",\n        \"minLength\": 1,\n        \"default\": \"index.html\",\n        \"description\": \"The output path of the application's generated HTML index file. The full provided path will be used and will be considered relative to the application's configured output path.\"\n      }\n    },\n    \"required\": [\"input\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AsyncIteratorExecutor Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for an executor that returns an AsyncIterableIterator. It takes generic type T for options, and an ExecutorContext. The iterator yields objects with a success boolean property.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/AsyncIteratorExecutor.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **AsyncIteratorExecutor**<`T`>: (`options`: `T`, `context`: [`ExecutorContext`](../../devkit/documents/ExecutorContext)) => `AsyncIterableIterator`<{ `success`: `boolean` }>\n```\n\n----------------------------------------\n\nTITLE: Configuring @nx/eslint Plugin in nx.json\nDESCRIPTION: JSON configuration for the @nx/eslint plugin in nx.json file, showing how to set the target name for lint tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/eslint/eslint.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/eslint/plugin\",\n      \"options\": {\n        \"targetName\": \"lint\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating React Query Test Wrapper Component\nDESCRIPTION: Implementation of a TestWrapper component that provides QueryClientProvider for testing React Query hooks\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-08-state-management.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport React from 'react';\n\nexport interface TestWrapperProps {\n  children: React.ReactNode;\n}\n\nexport function TestWrapper({ children }: TestWrapperProps) {\n  const queryClient = new QueryClient();\n  return (\n    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Nx Task Graph\nDESCRIPTION: Command to generate and display a visual representation of the Nx task dependencies graph for the project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-06-nuxt-js-support-in-nx.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx graph\n```\n\n----------------------------------------\n\nTITLE: Configuring React Application Package.json\nDESCRIPTION: Defines the core configuration for a React application including testing libraries, React dependencies, build scripts, and browser targeting. Uses Create React App as the foundation with configured test runners and development tools.\nSOURCE: https://github.com/nrwl/nx/blob/master/e2e/nx-init/src/files/cra/package.json.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"<%= appName %>\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@testing-library/jest-dom\": \"5.16.5\",\n    \"@testing-library/react\": \"13.4.0\",\n    \"@testing-library/user-event\": \"13.5.0\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"5.0.1\",\n    \"web-vitals\": \"2.1.4\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NPM Private Package Configuration\nDESCRIPTION: JSON configuration example showing how to mark a package as private in package.json to prevent publication\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-02-22-whats-new-with-lerna-6-5.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\"private\": true]\n```\n\n----------------------------------------\n\nTITLE: createConfig Function Signature in TypeScript\nDESCRIPTION: The function signature for createConfig, showing its parameters and return type. It accepts default options, additional configurations, and a configuration environment variable name.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rspack/create-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function createConfig(\n  defaultOptions: {\n    options: AngularRspackPluginOptions;\n    rspackConfigOverrides?: Partial<Configuration>;\n  },\n  configurations: Record<\n    string,\n    {\n      options: Partial<AngularRspackPluginOptions>;\n      rspackConfigOverrides?: Partial<Configuration>;\n    }\n  > = {},\n  configEnvVar = 'NGRS_CONFIG'\n);\n```\n\n----------------------------------------\n\nTITLE: Validating Strings with minLength in JSON Schema\nDESCRIPTION: This snippet shows how to use the 'minLength' property in a JSON schema to ensure a string value has a minimum length. In this case, the value must be at least 10 characters long.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": {\n    \"type\": \"string\",\n    \"minLength\": 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Standalone React App with Rspack in Nx\nDESCRIPTION: Command to create a new Nx workspace with a pre-configured Rspack-based React application. This setup includes React, TypeScript, ESLint, Jest, and Cypress for e2e testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-03-10-rspack-getting-up-to-speed-with-nx.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace myrspackapp --preset=@nrwl/rspack\n```\n\n----------------------------------------\n\nTITLE: Implementing a Non-Project Files Reporter Conformance Rule\nDESCRIPTION: This TypeScript example evaluates the root `package.json` for the presence and version of the `tmp` package dependency. It ensures that the version is at least 0.2.3, collecting violations as necessary.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/conformance/create-conformance-rule.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readJsonFile, workspaceRoot } from '@nx/devkit';\nimport {\n  createConformanceRule,\n  NonProjectFilesViolation,\n} from '@nx/conformance';\nimport { join } from 'node:path';\nimport { satisfies } from 'semver';\n\nexport default createConformanceRule<object>({\n  name: 'package-tmp-0.2.3',\n  category: 'maintainability',\n  description: 'The tmp dependency should be a minimum version of 0.2.3',\n  reporter: 'non-project-files-reporter',\n  implementation: async () => {\n    const violations: NonProjectFilesViolation[] = [];\n    const applyViolationIfApplicable = (version: string | undefined) => {\n      if (version && !satisfies(version, '>=0.2.3')) {\n        violations.push({\n          message: 'The \"tmp\" package must be version \"0.2.3\" or higher',\n          file: 'package.json',\n        });\n      }\n    };\n\n    const workspaceRootPackageJson = await readJsonFile(\n      join(workspaceRoot, 'package.json')\n    );\n    applyViolationIfApplicable(workspaceRootPackageJson.dependencies?.['tmp']);\n    applyViolationIfApplicable(\n      workspaceRootPackageJson.devDependencies?.['tmp']\n    );\n\n    return {\n      severity: 'low',\n      details: {\n        violations,\n      },\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: React Native Horoscope Card Component\nDESCRIPTION: Implements a React Native component that displays horoscope information using Redux state and actions\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\nexport function HoroscopeCard({\n  zodiacItem,\n  horoscope,\n  loadingStatus,\n  getUserHoroscope,\n}: HoroscopeCardProps) {\n  useEffect(() => {\n    if (zodiacItem?.zodiacSign) {\n      getUserHoroscope(zodiacItem.zodiacSign, 'today');\n    }\n  }, [zodiacItem, getUserHoroscope]);\n\n  return (\n    <SafeAreaView>\n      <ScrollView>\n        <Card>\n          <Card.Title>\n            <Icon name={zodiacItem?.icon} size={40} />\n          </Card.Title>\n          <Card.Title>{zodiacItem?.zodiacSign}</Card.Title>\n          <Card.Divider />\n          <Text h4 style={{ width: '100%', textAlign: 'center' }}>\n            Your Horoscope for Today\n          </Text>\n          {loadingStatus === LoadingStatus.Success ? (\n            <>\n              <Text style={{ marginTop: 10 }}>{horoscope.description}</Text>\n              <Text style={{ marginTop: 10 }}>Mood: {horoscope.mood}</Text>\n              <Text style={{ marginTop: 10 }}>Color: {horoscope.color}</Text>\n              <Text style={{ marginTop: 10 }}>\n                Compatibility: {horoscope.compatibility}\n              </Text>\n              <Text style={{ marginTop: 10 }}>\n                Lucky Number: {horoscope.luckyNumber}\n              </Text>\n              <Text style={{ marginTop: 10 }}>\n                Lucky Time: {horoscope.luckyTime}\n              </Text>\n            </>\n          ) : loadingStatus === LoadingStatus.Error ? (\n```\n\n----------------------------------------\n\nTITLE: Displaying Status Badges and Community Links in HTML\nDESCRIPTION: This HTML snippet centers a group of status badges and community links for the Nx project. It includes badges for CircleCI build status, license, NPM version, semantic release, Commitizen, and links to Gitter and Discord communities.\nSOURCE: https://github.com/nrwl/nx/blob/master/scripts/readme-fragments/links.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div style=\"text-align: center;\">\n\n[![CircleCI](https://circleci.com/gh/nrwl/nx.svg?style=svg)](https://circleci.com/gh/nrwl/nx)\n[![License](https://img.shields.io/npm/l/@nx/workspace.svg?style=flat-square)]()\n[![NPM Version](https://badge.fury.io/js/%40nrwl%2Fworkspace.svg)](https://www.npmjs.com/@nx/workspace)\n[![Semantic Release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?style=flat-square)]()\n[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![Join the chat at https://gitter.im/nrwl-nx/community](https://badges.gitter.im/nrwl-nx/community.svg)](https://gitter.im/nrwl-nx/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Join us on the Official Nx Discord Server](https://img.shields.io/discord/1143497901675401286?label=discord)](https://go.nx.dev/community)\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating ng-package.json for Library Build\nDESCRIPTION: Modifies the ng-package.json file to prevent the Angular build from deleting the destination folder.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"deleteDestPath\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Serving a Next.js Application for Production with flag\nDESCRIPTION: This command serves a Next.js application in production mode using the `@nx/next:server` executor, by adding the `--prod` flag to the serve command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n\"nx serve my-new-app --prod\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Cypress Config with Empty experimentalSkipDomainInjection Array\nDESCRIPTION: Shows a Cypress configuration with experimentalSkipDomainInjection set to an empty array, indicating that no domain injection is skipped in the original configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/src/migrations/update-20-8-0/set-inject-document-domain.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { nxE2EPreset } from '@nx/cypress/plugins/cypress-preset';\nimport { defineConfig } from 'cypress';\n\nexport default defineConfig({\n  e2e: {\n    ...nxE2EPreset(__filename, {\n      cypressDir: 'src',\n      bundler: 'vite',\n      webServerCommands: {\n        default: 'pnpm exec nx run app1:dev',\n        production: 'pnpm exec nx run app1:dev',\n      },\n      ciWebServerCommand: 'pnpm exec nx run app1:dev',\n      ciBaseUrl: 'http://localhost:4200',\n    }),\n    baseUrl: 'http://localhost:4200',\n    experimentalSkipDomainInjection: [],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Workflow Dispatch\nDESCRIPTION: GitHub Actions workflow configuration for manual test suite selection.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-06-20-introducing-nx-ecosystem-ci.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_dispatch:\n    inputs:\n      suite:\n        description: \"testsuite to run\"\n        required: true\n        type: choice\n        options:\n          - nx-remix\n          - nx-rspack\n          - my-new-suite\n```\n\n----------------------------------------\n\nTITLE: Defining Zodiac Sign Enum\nDESCRIPTION: TypeScript enum definition for zodiac signs used in the app.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum AdhZodiacSign {\n  Aries = 'Aries',\n  Taurus = 'Taurus',\n  Gemini = 'Gemini',\n  Cancer = 'Cancer',\n  Leo = 'Leo',\n  Virgo = 'Virgo',\n  Libra = 'Libra',\n  Scorpio = 'Scorpio',\n  Sagittarius = 'Sagittarius',\n  Capricorn = 'Capricorn',\n  Aquarius = 'Aquarius',\n  Pisces = 'Pisces',\n}\n```\n\n----------------------------------------\n\nTITLE: Updating .gitignore for Nx Cache Directories\nDESCRIPTION: Adds Nx cache directories to .gitignore to prevent them from being committed to the repository. This improves repository size and avoids committing cache files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/manual.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n...\n.nx/cache\n.nx/workspace-data\n```\n\n----------------------------------------\n\nTITLE: Adding Svelte Dependencies to Nx Workspace\nDESCRIPTION: Command to add Svelte and related dependencies to the Nx workspace using npm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-svelte.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D vitest vite svelte svelte-check @sveltejs/vite-plugin-svelte\nnx add @nx/vite @nx/js\n```\n\n----------------------------------------\n\nTITLE: Updating React mount import\nDESCRIPTION: This snippet updates the React `mount` import from 'cypress/react18' to 'cypress/react'. This migration is necessary when using React with Cypress component testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/src/migrations/update-20-8-0/update-component-testing-mount-imports.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mount } from 'cypress/react18';\nimport './commands';\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable<Subject> {\n      mount: typeof mount;\n    }\n  }\n}\n\nCypress.Commands.add('mount', mount);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mount } from 'cypress/react';\nimport './commands';\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable<Subject> {\n      mount: typeof mount;\n    }\n  }\n}\n\nCypress.Commands.add('mount', mount);\n```\n\n----------------------------------------\n\nTITLE: Reversing Project Graph Dependencies in TypeScript\nDESCRIPTION: A function that takes a ProjectGraph as input and returns a new ProjectGraph where all dependency edges are reversed. For example, if project A depends on B in the input graph, in the output graph B will depend on A.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/reverse.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreverse(graph: ProjectGraph): ProjectGraph\n```\n\n----------------------------------------\n\nTITLE: Creating NextJS Standalone App with Nx\nDESCRIPTION: Command to create a new Nx workspace with a standalone NextJS app preset using npx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-07-06-nx-16-5-release.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest --preset=nextjs-standalone\n```\n\n----------------------------------------\n\nTITLE: Start Local Registry with Publish Targets (Old)\nDESCRIPTION: This script starts a local registry and publishes packages using `nx run-many` and publish targets. It's the older approach before Nx Release integration, publishing all packages with a fixed version and tag to the local registry.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/update-local-registry-setup.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This script starts a local registry for e2e testing purposes.\n * It is meant to be called in jest's globalSetup.\n */\nimport { startLocalRegistry } from '@nx/js/plugins/jest/local-registry';\nimport { execFileSync } from 'child_process';\n\nexport default async () => {\n  // local registry target to run\n  const localRegistryTarget = '@demo-plugin-1800/source:local-registry';\n  // storage folder for the local registry\n  const storage = './tmp/local-registry/storage';\n\n  global.stopLocalRegistry = await startLocalRegistry({\n    localRegistryTarget,\n    storage,\n    verbose: false,\n  });\n  const nx = require.resolve('nx');\n  execFileSync(\n    nx,\n    ['run-many', '--targets', 'publish', '--ver', '0.0.0-e2e', '--tag', 'e2e'],\n    { env: process.env, stdio: 'inherit' }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Opening a Pull Request with Git Commands\nDESCRIPTION: This shell script demonstrates how to commit changes, push to a feature branch, and open a new pull request on GitHub for the CI workflow file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit -m 'add CI workflow file'\ngit push origin add-workflow\n```\n\n----------------------------------------\n\nTITLE: Specifying Nx Darwin ARM64 Package Name\nDESCRIPTION: Package identifier for the ARM64 architecture build of Nx targeting Apple Darwin systems (macOS on Apple Silicon).\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/native-packages/darwin-arm64/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nnx-darwin-arm64\n```\n\n----------------------------------------\n\nTITLE: Configuring End-to-End Encryption for Nx < 17 in JSON\nDESCRIPTION: This snippet demonstrates how to enable end-to-end encryption for Nx Cloud in nx.json for Nx versions below 17 by adding the 'encryptionKey' property to the 'tasksRunnerOptions' configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/config.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasksRunnerOptions\": {\n    \"default\": {\n      \"runner\": \"nx-cloud\",\n      \"options\": {\n        \"accessToken\": \"SOMETOKEN\",\n        // Add the following property with your secret key\n        \"encryptionKey\": \"cheddar\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Nuxt Storybook Stories\nDESCRIPTION: This command generates Storybook stories for a Nuxt project. It uses the @nx/nuxt:stories generator and also requires a project name.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vue/docs/stories-examples.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/nuxt:stories project-name\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials in GitHub Actions\nDESCRIPTION: GitHub Actions workflow configuration for setting up AWS credentials using OIDC\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/s3-cache/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\n...\npermissions:\n  id-token: write\n  ...\n\njobs:\n  main:\n    env:\n      NX_KEY: ${{ secrets.NX_KEY }}\n    runs-on: ubuntu-latest\n    steps:\n        ...\n\n      - name: 'Configure AWS Credentials'\n        uses: aws-actions/configure-aws-credentials@v4.0.2\n        with:\n          role-to-assume: arn:aws:iam::123456789123:role/GhAIBucketUserRole\n          aws-region: us-east-1\n\n        ...\n\n      - run: pnpm exec nx affected -t lint test build\n```\n\n----------------------------------------\n\nTITLE: Another example package.json file\nDESCRIPTION: Shows the initial state of a package.json file for a project named 'my-other-project-in-the-monorepo' with a version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/updating-version-references.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"my-other-project-in-the-monorepo\",\n  \"version\": \"0.1.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Repository Creation\nDESCRIPTION: Command to create and configure GitHub repository using GitHub CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-12-next-gen-module-federation-deployments.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngh repo create\n```\n\n----------------------------------------\n\nTITLE: Defining ProjectType Type Alias in TypeScript\nDESCRIPTION: TypeScript type definition that restricts project types to either 'library' or 'application'. This is used throughout Nx to ensure type safety when specifying project types.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ProjectType.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ProjectType = \"library\" | \"application\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Version Plan with Nx CLI\nDESCRIPTION: This shell command is used to create a version plan to specify the desired semantic versioning (semver) bump for one or more projects or groups, along with the relevant changelog entry. It requires Nx to be installed and configured in the project. This command reads a bump argument to determine the version change required (e.g., major, minor, patch).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/release.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx release plan [bump]\n```\n\n----------------------------------------\n\nTITLE: Basic Server Execution Command\nDESCRIPTION: Command to run the Next.js server using Nx run command.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/server-next-executor-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx run acme:serve\n```\n\n----------------------------------------\n\nTITLE: Simplified Nx Run-commands in project.json\nDESCRIPTION: Example of simplified run-commands configuration in project.json for executing custom commands in Nx projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-06-nx-15-3-standalone-projects-vite-task-graph-and-more.md#2025-04-22_snippet_10\n\nLANGUAGE: json5\nCODE:\n```\n// project.json\n{\n  \"name\": \"demoapp\",\n  ...\n  \"targets\": {\n    \"prebuild\": {\n      \"command\": \"echo 'hi'\"\n    },\n    \"build\": {\n      ...\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileChange Interface in TypeScript\nDESCRIPTION: Interface definition for tracking file changes in Nx virtual file system. Specifies the structure for file modifications including content buffer, write options, relative path, and change type (create/delete/update).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/FileChange.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FileChange {\n  content: Buffer<ArrayBufferLike>;\n  options?: TreeWriteOptions;\n  path: string;\n  type: \"CREATE\" | \"DELETE\" | \"UPDATE\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Turborepo Workspace\nDESCRIPTION: Command to create a new Turborepo workspace using the recommended create-turbo command, which is the first step in the migration process.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/from-turborepo.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-turbo@latest\n```\n\n----------------------------------------\n\nTITLE: Using ensurePackage without Tree in TypeScript\nDESCRIPTION: This snippet shows how to use the recommended version of ensurePackage that doesn't require a Tree object. It ensures that the @nx/jest package is installed at the specified nxVersion.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ensurePackage.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nensurePackage('@nx/jest', nxVersion);\n```\n\n----------------------------------------\n\nTITLE: Using Library Loader in Route\nDESCRIPTION: React/TSX code demonstrating how to import and use a loader from a library in a Remix route\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/remix/remix-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { adminLoader } from '@acme/login/server';\n\nexport const loader = adminLoader;\n```\n\n----------------------------------------\n\nTITLE: Limiting Release Targets in nx.json\nDESCRIPTION: This snippet configures the `nx release` command to target specific projects, excluding the `ignore-me` project, using the `projects` property in the `release` section of `nx.json`.  It utilizes a glob pattern to include all projects except the excluded one.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_12\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"release\": {\n    // Here we are configuring nx release to target all projects\n    // except the one called \"ignore-me\"\n    \"projects\": [\"*\", \"!ignore-me\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring refs in host Storybook main.ts file\nDESCRIPTION: Example of adding references to composed Storybooks in the host project's .storybook/main.ts file. This configuration specifies the titles and URLs of the composed Storybooks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/storybook-composition-setup.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/react-vite';\n// ...\n\nconst config: StorybookConfig = {\n  // ...\n  refs: {\n    one-composed: {\n      title: 'One composed',\n      url: 'http://localhost:4401',\n    },\n    two-composed: {\n      title: 'Two composed',\n      url: 'http://localhost:4402',\n    },\n    three-composed: {\n      title: 'Three composed',\n      url: 'http://localhost:4403',\n    },\n  },\n  // ...\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Hiding a Commit Type from the Changelog\nDESCRIPTION: Shows how to hide the 'chore' commit type from appearing in the changelog by setting 'changelog' to false. This configuration is part of the JSON setup for Nx Release management.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/customize-conventional-commit-types.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"conventionalCommits\": {\n      \"types\": {\n        ...\n        \"chore\": {\n          \"changelog\": false\n        },\n        ...\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Proxy Configuration for Vite Dev Server\nDESCRIPTION: Configuration example demonstrating how to specify a proxy configuration file path for the Vite dev server.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/dev-server-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"my-app\": {\n    \"targets\": {\n        \"serve\": {\n            \"executor\": \"@nx/vite:dev-server\",\n            \"defaultConfiguration\": \"development\",\n            \"options\": {\n                \"buildTarget\": \"my-app:build\",\n                \"proxyConfig\": \"apps/my-app/proxy.conf.json\"\n            },\n            \"configurations\": {\n                ...\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm\nDESCRIPTION: Commands to install project dependencies using pnpm, with an option for frozen lockfile to avoid dependency changes.\nSOURCE: https://github.com/nrwl/nx/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n\n// or prefer...\n\npnpm install --frozen-lockfile // if you haven't changed any dependency\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests with Nx CLI\nDESCRIPTION: Command to execute unit tests for the project-details library using Jest test runner through the Nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/graph/project-details/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx test project-details\n```\n\n----------------------------------------\n\nTITLE: Creating the FeatureSets Component to Combine Form and List\nDESCRIPTION: React component that integrates the AddSetForm and SetList components into a single feature component, providing a container for the Lego sets functionality.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport AddSetForm from './add-set-form';\nimport SetList from './set-list';\n\nexport function FeatureSets() {\n  return (\n    <div className=\"flex\">\n      <AddSetForm></AddSetForm>\n      <SetList></SetList>\n    </div>\n  );\n}\n\nexport default FeatureSets;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom CSS Class for Button Component\nDESCRIPTION: Defines a custom CSS class using Tailwind's @apply directive to style the button component in the publishable library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_45\n\nLANGUAGE: css\nCODE:\n```\n.atn-button {\n  @apply py-sm px-md bg-primary-dark hover:bg-primary text-white;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Composite Builds\nDESCRIPTION: Kotlin configuration showing how to set up Gradle composite builds with multiple included projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-08-01-nx-19-5-update.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nrootProject.name = \"app\"\n\nincludeBuild(\"number-utils\")\nincludeBuild(\"string-utils\")\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Globally with Bun\nDESCRIPTION: Command to install Nx globally using Bun package manager. This allows running Nx commands directly without the bun prefix.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/getting-started/installation.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nbun install --global nx@latest\n```\n\n----------------------------------------\n\nTITLE: Generate JavaScript Stories Instead of TypeScript\nDESCRIPTION: Generates Storybook configuration using JavaScript instead of TypeScript for story files, resulting in .stories.js files.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nuxt/docs/storybook-configuration-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/nuxt:storybook-configuration ui --generateStories=true --js=true\n```\n\n----------------------------------------\n\nTITLE: Generator Schema JSON Configuration\nDESCRIPTION: JSON schema configuration for the generator options, including prompts and validation rules.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/organization-specific-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://json-schema.org/schema\",\n  \"$id\": \"Library\",\n  \"title\": \"\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"description\": \"\",\n      \"$default\": {\n        \"$source\": \"argv\",\n        \"index\": 0\n      },\n      \"x-prompt\": \"What name would you like to use?\"\n    },\n    \"directory\": {\n      \"type\": \"string\",\n      \"description\": \"\"\n    }\n  },\n  \"required\": [\"name\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Dry-Run Application Generation\nDESCRIPTION: This command demonstrates generating a new Angular application named `inventory` within the `apps/` directory using the `@nx/angular:app` generator. The `--dry-run` flag is used to preview the changes that will be made without actually modifying any files.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/5-add-application/content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/angular:app apps/inventory --dry-run\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/eslint for Nx 17\nDESCRIPTION: Command to install the @nx/eslint package using npm for Nx version 17.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/eslint/eslint.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/eslint\n```\n\n----------------------------------------\n\nTITLE: Opting In to Sharing Library Versions in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to set up Module Federation without specifically declaring shared versions, implying all dependencies are shared by default, enhancing maintainability across remotes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/manage-library-versions-with-module-federation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ModuleFederationConfig } from '@nx/webpack';\n\nconst config: ModuleFederationConfig = {\n  name: 'remote',\n  exposes: {\n    './Module': './src/remote-entry.ts',\n  },\n  // By not declaring a shared function, all dependencies will be shared\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Library Package\nDESCRIPTION: Command to generate a new TypeScript library package in the workspace\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-29-new-nx-experience.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/js:lib packages/mytslib\n```\n\n----------------------------------------\n\nTITLE: Defining ProjectsMetadata Type Alias in TypeScript\nDESCRIPTION: Defines a TypeScript type alias called ProjectsMetadata as a Record with string keys where each value is the 'metadata' property picked from the ProjectConfiguration interface.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ProjectsMetadata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nƬ **ProjectsMetadata**: `Record`\\<`string`, `Pick`\\<[`ProjectConfiguration`](../../devkit/documents/ProjectConfiguration), `\"metadata\"`\\>\\>\n```\n\n----------------------------------------\n\nTITLE: Profiling Nx Task Execution with Shell Commands\nDESCRIPTION: This snippet illustrates how to set the NX_PROFILE environment variable to generate a profile.json file when running Nx commands. It demonstrates building the 'cart' application and affected projects to visualize task execution performance.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/performance-profiling.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nNX_PROFILE=profile.json nx build cart\n```\n\nLANGUAGE: shell\nCODE:\n```\nNX_PROFILE=profile.json nx affected --target build\n```\n\n----------------------------------------\n\nTITLE: Configuring VCS HTTPS Proxy in Helm\nDESCRIPTION: This snippet demonstrates how to configure the VCS HTTPS proxy in the Helm chart for Nx Cloud. This configuration is necessary for GitHub/Bitbucket/Gitlab integrations to work behind a proxy, allowing Nx Cloud to make HTTP calls to these services for posting comments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/release-notes.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"vcsHttpsProxy: '<your-proxy-address>'\"\n```\n\n----------------------------------------\n\nTITLE: Generating Storybook Configuration for React Native in Nx\nDESCRIPTION: Command to generate Storybook configuration for React Native projects in an Nx workspace. This new feature improves support for React Native development within Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-08-what-is-new-in-nx-13-10.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nrwl/react-native:storybook-configuration\n```\n\n----------------------------------------\n\nTITLE: Library Package.json Configuration\nDESCRIPTION: Package.json configuration examples for both buildable and non-buildable library projects with exports configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/switch-to-workspaces-project-references.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@myorg/ui\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./src/index.ts\",\n      \"import\": \"./src/index.ts\",\n      \"default\": \"./src/index.ts\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Application Routes Structure Example\nDESCRIPTION: Shows the structure of an application's routes before breaking them into separate projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-10-25-sports-retailer-success.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nstorefront/\n├── product-search\n├── product-details\n└── checkout\n```\n\n----------------------------------------\n\nTITLE: Optimized Monorepo Structure with Shared Library\nDESCRIPTION: Demonstrates the improved monorepo structure after extracting shared code into a separate library project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-10-25-sports-retailer-success.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmonorepo/\n├── apps/\n│   ├── storefront/\n│   ├── internal-dash/\n│   └── support-dash/\n└── libs/\n    └── date-time-utils/\n```\n\n----------------------------------------\n\nTITLE: Creating a new Nx workspace\nDESCRIPTION: Command to initialize a new Nx workspace using the npx create-nx-workspace command. This is the first step in setting up a Module Federation project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-10-setting-up-module-federation-with-server-side-rendering-for-angular.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest myorg\n```\n\n----------------------------------------\n\nTITLE: Running Advent of Code Solutions (Part B)\nDESCRIPTION: Commands to execute solutions for part B of day 1, including options for both actual and sample data.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-11-30-advent-of-code-crystal.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> nx day-1-b\n> nx 1-b\n> nx day-1-b-sample\n> nx 1-b-sample\n```\n\n----------------------------------------\n\nTITLE: Setting Up ESLint Configuration for Next.js Without Type Information\nDESCRIPTION: This snippet shows an ESLint configuration for a Next.js project that does not require TypeScript type-checking. It is designed for performance without `parserOptions.project` specified.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/eslint.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"plugin:@nx/react\", \"../../.eslintrc.json\"],\n  \"ignorePatterns\": [\"!**/*\"],\n  \"overrides\": [\n    {\n      \"files\": [\"*.ts\", \"*.tsx\", \"*.js\", \"*.jsx\"],\n      \"rules\": {}\n    },\n    {\n      \"files\": [\"*.ts\", \"*.tsx\"],\n      \"rules\": {}\n    },\n    {\n      \"files\": [\"*.js\", \"*.jsx\"],\n      \"rules\": {}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: CI Configuration Without Nx Cloud\nDESCRIPTION: YAML configuration for running conformance checks in CI without Nx Cloud\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/conformance/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Enforce all conformance rules\n  run: npx nx conformance\n```\n\n----------------------------------------\n\nTITLE: Visualizing Project Graph with Nx\nDESCRIPTION: Command to generate and view the project graph using Nx, which helps visualize dependencies between projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-04-19-manage-your-gradle.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# macos/linux\n./nx graph\n\n# windows\nnx.bat graph\n```\n\n----------------------------------------\n\nTITLE: Nx TypeScript Plugin Configuration\nDESCRIPTION: Configuration options for @nx/js/typescript plugin in nx.json\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/js/documents/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/js/typescript\",\n      \"options\": {\n        \"typecheck\": {\n          \"targetName\": \"typecheck\"\n        },\n        \"build\": {\n          \"targetName\": \"build\",\n          \"configName\": \"tsconfig.lib.json\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook Dependencies with CLI\nDESCRIPTION: Command to upgrade Storybook to the latest version. This updates Storybook dependencies in the workspace's package.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/upgrading-storybook.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook@latest upgrade\n```\n\n----------------------------------------\n\nTITLE: Example of a Version Plan with Multiple Projects (Markdown)\nDESCRIPTION: This example markdown snippet shows how to specify version bumps for multiple projects within a single version plan file using Front Matter YAML. Each project is associated with its corresponding semver bump type, illustrating the flexibility of the version plan files to handle concurrent version changes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/file-based-versioning-version-plans.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nmy-app: minor\nmy-lib: patch\nrelease-group-a: major\n---\n\nOne change that affects multiple projects and release groups.\n\n```\n\n----------------------------------------\n\nTITLE: Generating User Service in Shared Library\nDESCRIPTION: Command to generate an Angular service for user authentication in the shared library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:service libs/shared/data-access-user/src/lib/user\n```\n\n----------------------------------------\n\nTITLE: Displaying Options Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table that lists various options for Nx project commands. It includes the option name, type, and a detailed description for each option.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/release.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Option                                      | Type                                                     | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n| ------------------------------------------- | -------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `--access`                                  | `public`, `restricted`                                   | Overrides the access level of the published package. Unscoped packages cannot be set to restricted. See the npm publish documentation for more information.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n| `--all`                                     | boolean                                                  | [deprecated] `run-many` runs all targets on all projects in the workspace if no projects are provided. This option is no longer required. (Default: `true`)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n| `--exclude`                                 | string                                                   | Exclude certain projects from being processed|\n| `--excludeTaskDependencies`                 | boolean                                                  | Skips running dependent tasks first. (Default: `false`|\n| `--first-release`                           | boolean                                                  | Indicates that this is the first release for the selected release group. If the current version cannot be determined as usual, the version on disk will be used as a fallback. This is useful when using git or the registry to determine the current version of packages, since those sources are only available after the first release. Also indicates that changelog generation should not assume a previous git tag exists and that publishing should not check for the existence of the package before running.                                                                                                                                                                                                                       |\n| `--graph`                                   | string                                                   | Show the task graph of the command. Pass a file path to save the graph data instead of viewing it in the browser. Pass \"stdout\" to print the results to the terminal|\n| `--help`                                    | boolean                                                  | Show help|\n| `--nxBail`                                  | boolean                                                  | Stop command execution after the first failed task. (Default: `false`|\n| `--nxIgnoreCycles`                          | boolean                                                  | Ignore cycles in the task graph. (Default: `false`)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| `--otp`                                     | number                                                   | A one-time password for publishing to a registry that requires|\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/eslint for Nx 17\nDESCRIPTION: npm command to install @nx/eslint package for Nx version 17.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/eslint/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/eslint\n```\n\n----------------------------------------\n\nTITLE: Hiding Changelog Entries with Hidden Property\nDESCRIPTION: Uses a nested 'hidden': true property under 'changelog' to hide 'chore' commit type from the changelog. This alternative configuration aids in controlling commit visibility within release notes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/customize-conventional-commit-types.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"conventionalCommits\": {\n      \"types\": {\n        ...\n        \"chore\": {\n          \"changelog\": {\n            \"hidden\": true\n          }\n        },\n        ...\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Value Definition for spaces Property in TypeScript\nDESCRIPTION: Shows the default value (2) for the spaces property in the JsonSerializeOptions interface. This property controls the number of whitespace characters used for indentation in serialized JSON.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/JsonSerializeOptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n2;\n```\n\n----------------------------------------\n\nTITLE: Package Version Updates in YAML\nDESCRIPTION: YAML block defining version update types for two packages, with pkg1 getting a minor version bump and pkg2 getting a patch version bump.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/src/command-line/release/config/test-files/version-plan-2.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npkg1: minor\npkg2: patch\n```\n\n----------------------------------------\n\nTITLE: AsyncStorage Mock Configuration\nDESCRIPTION: Mock setup for AsyncStorage in Jest testing environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-22-unit-testing-expo.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\njest.mock('@react-native-async-storage/async-storage', () =>\n  require('@react-native-async-storage/async-storage/jest/async-storage-mock')\n);\n```\n\n----------------------------------------\n\nTITLE: Defining ImplicitDependencyEntry Generic Type in TypeScript\nDESCRIPTION: TypeScript type alias definition for ImplicitDependencyEntry that accepts a generic type parameter T constrained to '*' or string[]. The type represents an object with string keys mapping to either T or ImplicitJsonSubsetDependency<T>.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ImplicitDependencyEntry.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nƬ **ImplicitDependencyEntry**<T>: Object\n```\n\n----------------------------------------\n\nTITLE: Importing from a Package in TypeScript\nDESCRIPTION: Demonstrates how to import from a package in a TypeScript monorepo using a named import.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { something } from '@tsmono/mypackage';\n```\n\n----------------------------------------\n\nTITLE: Modifying JSON Files with updateJson in Nx\nDESCRIPTION: This code snippet demonstrates how to modify JSON files using the `updateJson` function from `@nx/devkit`. It adds a new script to the `package.json` file. It takes a `Tree` object and a schema as input and modifies the JSON file in place.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/modifying-files.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { updateJson } from '@nx/devkit';\n\nexport default async function (tree: Tree, schema: any) {\n  updateJson(tree, 'package.json', (pkgJson) => {\n    // if scripts is undefined, set it to an empty object\n    pkgJson.scripts = pkgJson.scripts ?? {};\n    // add greet script\n    pkgJson.scripts.greet = 'echo \"Hello!\"';\n    // return modified JSON object\n    return pkgJson;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verbose Version Plan Check in Nx\nDESCRIPTION: Command to run a detailed version plan check that shows additional information about changed files and filtering logic.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/file-based-versioning-version-plans.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx release plan:check --verbose\n```\n\n----------------------------------------\n\nTITLE: Defining StringChange Type Alias in TypeScript\nDESCRIPTION: Type alias that defines possible string modification operations, consisting of either StringInsertion or StringDeletion types. Used for representing string changes in the Nx devkit's modification utilities.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/StringChange.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype StringChange = StringInsertion | StringDeletion\n```\n\n----------------------------------------\n\nTITLE: Graph Preview in Webview\nDESCRIPTION: Previewing the task graph in a webview interface.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/affected.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t=build --graph\n```\n\n----------------------------------------\n\nTITLE: Defining CreateNodesV2<T> Type Alias in TypeScript\nDESCRIPTION: This type alias defines a tuple consisting of a project file pattern string and a node creation function. It's noted that in Nx 21, CreateNodes will be replaced with this type, and in Nx 22, this type will be removed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/CreateNodesV2.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nƬ **CreateNodesV2**\\<`T`\\>: readonly [projectFilePattern: string, createNodesFunction: CreateNodesFunctionV2\\<T\\>]\n```\n\n----------------------------------------\n\nTITLE: YouTube Video Embed in Markdown\nDESCRIPTION: Markdown code for embedding the Nx 20.0 announcement video using custom YouTube component syntax.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/20_0_0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% youtube\nsrc=\"https://youtu.be/5-QwtlhaJK8\"\ntitle=\"Announcing... Nx 20!!!\"\nwidth=\"100%\" /%}\n```\n\n----------------------------------------\n\nTITLE: Implementing Routing in React App Component\nDESCRIPTION: Implements routing in the main App component, importing and rendering components from libraries based on different routes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Route, Routes } from 'react-router-dom';\nimport { Products } from '@react-monorepo/products';\nimport { Orders } from '@react-monorepo/orders';\n\nfunction Home() {\n  return <h1>Home</h1>;\n}\n\nexport function App() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Home />}></Route>\n      <Route path=\"/products\" element={<Products />}></Route>\n      <Route path=\"/orders\" element={<Orders />}></Route>\n    </Routes>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Stopping Nx Daemon\nDESCRIPTION: Command to stop the Nx Daemon, which will be restarted fresh when the next Nx command is run.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/reset.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx reset --only-daemon\n```\n\n----------------------------------------\n\nTITLE: Serving a Built Application Locally\nDESCRIPTION: Serves a built application from the 'dist' folder using the `http-server` package. Allows for local testing of the deployed application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/web/web-plugin.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpx http-server dist/apps/my-new-app\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Root State for Redux Store in TypeScript\nDESCRIPTION: This snippet defines the initial root state for the Redux store, importing the initial state for the 'likes' feature from its slice file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-08-state-management.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initialLikesState } from '../likes/likes.slice';\n\nimport { RootState } from './root-state.interface';\n\nexport const initialRootState: RootState = {\n  likes: initialLikesState,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Cards Layout in Markdown\nDESCRIPTION: Markdown syntax for creating a grid of feature cards showcasing Nx 16.5 features with embedded YouTube video links.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/16_5_0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% cards cols=\"2\" %}\n{% card title=\"Targeting Tasks by Tags\"  type=\"video\" url=\"https://youtu.be/enQDQmFquGU\" /%}\n{% card title=\"Nx Verdaccio Support\"  type=\"video\" url=\"https://youtu.be/t1c925TzrzE\" /%}\n{% card title=\"externalDependencies Input Type\"  type=\"video\" url=\"https://youtu.be/FRqgWBmHmAU\" /%}\n{% card title=\"Nx Console Revamped\"  type=\"video\" url=\"https://youtu.be/p455D4W7330\" /%}\n{% /cards %}\n```\n\n----------------------------------------\n\nTITLE: Installing Codeowners Powerpack Plugin\nDESCRIPTION: Command to add the Nx Codeowners plugin to the project using npx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-25-introducing-nx-powerpack.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx add @nx/owners\n```\n\n----------------------------------------\n\nTITLE: Package Name Reference in Markdown\nDESCRIPTION: Package name reference for the Windows ARM64 MSVC binary distribution of Nx\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/native-packages/win32-arm64-msvc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nnx-win32-arm64-msvc\n```\n\n----------------------------------------\n\nTITLE: Running Migrations with Automatic Commits\nDESCRIPTION: Example of running migrations while automatically creating a dedicated commit for each successfully completed migration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/migrate.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate --run-migrations --create-commits\n```\n\n----------------------------------------\n\nTITLE: Updating Nx Plugins to Specific Version\nDESCRIPTION: Example of updating all Nx plugins to a specific version (9.0.0), which generates a migrations.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/migrate.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate 9.0.0\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Definition for File Tree Traversal\nDESCRIPTION: Function signature for visitNotIgnoredFiles that takes a Tree object, directory path, and visitor callback function. Used to traverse and perform operations on files while respecting git ignore rules. Returns void.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/visitNotIgnoredFiles.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvisitNotIgnoredFiles(tree: Tree, dirPath: string, visitor: (path: string) => void): void\n```\n\n----------------------------------------\n\nTITLE: Testing Nx Workspace Plugin with Jest\nDESCRIPTION: Command to execute unit tests for the workspace plugin using Jest test runner through Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/tools/workspace-plugin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx test workspace-plugin\n```\n\n----------------------------------------\n\nTITLE: Updating Nx Workspace\nDESCRIPTION: Commands for updating Nx workspace dependencies and running necessary migrations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-08-02-nx-14-5-cypess-v10-output-globs-linter-perf-react-tailwind-support.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\nnpx nx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Viewing JSON Project Details in Nx 19\nDESCRIPTION: Command to display project details in JSON format, showing how task grouping information is structured.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-05-08-nx-19-release.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx show project nx-dev-e2e --json | jq\n```\n\n----------------------------------------\n\nTITLE: Executing Unit Tests\nDESCRIPTION: This snippet provides the command to run unit tests for the UI Brands library using the Nx framework with Jest as the testing library. It allows developers to ensure the functionality and reliability of the code within the library.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/ui-brands/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx test ui-brands\n```\n\n----------------------------------------\n\nTITLE: Defining Root-Level Tasks in project.json\nDESCRIPTION: Alternative way to define root-level tasks using project.json instead of package.json, enabling Nx task execution and caching.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/run-tasks.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myorg\",\n  ...\n  \"targets\": {\n    \"docs\": {\n      \"command\": \"node ./generateDocsSite.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Tailwind Dependencies with yarn\nDESCRIPTION: This snippet shows how to install the required Tailwind dependencies using yarn.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-in-react.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D tailwindcss@latest postcss@latest autoprefixer@latest\n```\n\n----------------------------------------\n\nTITLE: Using Shared UI in Remix Route\nDESCRIPTION: Example of importing and using the Button component in a Remix route.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'shared-ui';\nexport default function Index() {\n  return (\n    <div>\n      <Button onClick={() => console.log('clicked')}>Click me</Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring dynamic Storybook staticDir based on environment\nDESCRIPTION: Example of how to dynamically set the staticDir in Storybook configuration based on environment, allowing different static directories for build and serve operations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/troubleshoot-convert-to-inferred.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nconst config: StorybookConfig = {\n  // ...\n  staticDirs:\n    process.env.NODE_ENV === 'production'\n      ? ['../static-prod']\n      : ['../static-dev'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Tree Interface Method: delete\nDESCRIPTION: Method to delete a file at the specified path\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/Tree.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n▸ delete(filePath: string): void\n```\n\n----------------------------------------\n\nTITLE: Example: Bitbucket Owners Configuration in Nx\nDESCRIPTION: This example illustrates a complete Bitbucket owners configuration in Nx. It includes patterns for assigning owners based on project tags, project names, and file globs, with Bitbucket-specific format and output path.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/owners/owners-plugin.md#2025-04-22_snippet_9\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"owners\": {\n    \"format\": \"bitbucket\",\n    // defaults to \".bitbucket/CODEOWNERS\"\n    \"outputPath\": \"CODEOWNERS\",\n    \"patterns\": [\n      {\n        \"description\": \"Joe should double check all changes to rust code\",\n        \"projects\": [\"tag:rust\"],\n        \"owners\": [\"@joelovesrust\"]\n      },\n      {\n        \"description\": \"The Finance team owns these projects\",\n        \"projects\": [\"finance-*\"],\n        \"owners\": [\"@finance-team\"]\n      },\n      {\n        \"description\": \"Alice, Bob and Cecil work together on these projects\",\n        \"projects\": [\"admin\", \"booking\", \"cart\"],\n        \"owners\": [\"@alice\", \"@bob\", \"@cecil\"]\n      },\n      {\n        \"description\": \"CI Workflows\",\n        \"files\": [\".github/workflows/**/*\"],\n        \"owners\": [\"@devops\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure using OpenID Connect\nDESCRIPTION: This YAML snippet demonstrates how to authenticate with Azure Storage using OpenID Connect in a GitHub Actions workflow. It sets permissions for the id-token, defines environment variables for the Nx key, Azure client ID, tenant ID, and subscription ID, and uses the azure/login action to authenticate with Azure.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/azure-cache/azure-cache-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"name: CI\n...\npermissions:\n  id-token: write\n  ...\n\njobs:\n  main:\n    env:\n      NX_KEY: ${{ secrets.NX_KEY }}\n    runs-on: ubuntu-latest\n    steps:\n        ...\n\n      - name: Azure login\n        uses: azure/login@v2\n        with:\n          client-id: ${{ secrets.AZURE_CLIENT_ID }}\n          tenant-id: ${{ secrets.AZURE_TENANT_ID }}\n          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}\n        ...\n\n      - run: pnpm exec nx affected -t lint test build\"\n```\n\n----------------------------------------\n\nTITLE: Use getJestProjects (Before)\nDESCRIPTION: This code snippet shows how to use the deprecated `getJestProjects` function in a `jest.config.ts` file. The `getJestProjects` function synchronously retrieves the Jest projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/jest/src/migrations/update-21-0-0/replace-getJestProjects-with-getJestProjectsAsync.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getJestProjects } from '@nx/jest';\n\nexport default {\n  projects: getJestProjects(),\n};\n```\n\n----------------------------------------\n\nTITLE: Interactive Migration with Skipped Updates Example\nDESCRIPTION: Example of running an interactive Nx migration and noting the command for future skipped updates\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/advanced-update.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate latest --interactive\n```\n\n----------------------------------------\n\nTITLE: YAML Package Version Update Configuration\nDESCRIPTION: YAML frontmatter configuration specifying a patch update for pkg1.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/src/command-line/release/config/test-files/version-plan-1.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\npkg1: patch\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Remote Application with Module Federation\nDESCRIPTION: Command to generate an Angular remote application named 'login' that will be consumed by the 'dashboard' host application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:remote apps/login --prefix=ng-mf --host=dashboard\n```\n\n----------------------------------------\n\nTITLE: Executing Nx Generate Command\nDESCRIPTION: Basic usage of the 'generate' command in Nx CLI. It can be used with the full 'generate' keyword or the shorthand 'g'.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/generate.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx generate <collection:generator>\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g <generator>\n```\n\n----------------------------------------\n\nTITLE: Defining CreateNodesFunctionV2 Generic Type Alias in TypeScript\nDESCRIPTION: A generic type alias that defines a function signature for creating nodes. The function takes project configuration files array, optional generic options, and a context object, returning either a CreateNodesResultV2 or a Promise of it.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/CreateNodesFunctionV2.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nƬ CreateNodesFunctionV2<T>: (projectConfigurationFiles: readonly string[], options: T | undefined, context: CreateNodesContextV2) => CreateNodesResultV2 | Promise<CreateNodesResultV2>\n```\n\n----------------------------------------\n\nTITLE: Implementing the Dogs App with Shared Components\nDESCRIPTION: Implementation of the Dogs app using the same shared UI components. This demonstrates code reuse across different apps within the monorepo with the same navigation setup but different content.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-24-step-by-step-guide-to-creating-an-expo-monorepo-with-nx.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Carousel } from '@nx-expo-monorepo/ui';\n\nconst App = () => {\n  const Stack = createNativeStackNavigator();\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen\n          name=\"Dog Facts\"\n          component={() => (\n            <Carousel\n              title=\"title\"\n              content=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec porta leo justo, id posuere urna tempor convallis. Nulla finibus, dolor sit amet facilisis pellentesque, velit nisi tempor ipsum, nec interdum libero felis a risus. Pellentesque bibendum, dolor vel varius pulvinar, tortor leo ultrices nisi, non sodales dui quam vitae nulla. Integer sed rhoncus dui. Vestibulum bibendum diam ut leo tempus, vel vulputate magna iaculis. Suspendisse tempus magna libero, sed facilisis tellus aliquet ac. Morbi at velit ornare, posuere tortor vitae, mollis erat. Donec maximus mollis luctus. Vivamus sodales sodales dui pellentesque imperdiet. Mauris a ultricies nibh. Integer sed vehicula magna.\"\n            />\n          )}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Overriding Package Versions in Nx Migrate\nDESCRIPTION: Commands to specify different package versions during migration\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/advanced-update.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate latest --to=\"jest@22.0.0,cypress@3.4.0\"\n```\n\n----------------------------------------\n\nTITLE: Exec Command Configuration\nDESCRIPTION: Example of configuring nx exec command in package.json to run custom build script.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/commands.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"nx exec -- node ./my-custom-build.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Nx Workspace\nDESCRIPTION: Command to initialize a new Nx workspace with React monorepo preset and GitHub CI configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/organization-specific-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace myorg --preset=react-monorepo --ci=github\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Plugin for Nx\nDESCRIPTION: Command to add the new Vue.js plugin as a development dependency to an existing Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-10-20-nx-17-release.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/vue\n```\n\n----------------------------------------\n\nTITLE: Installing @nx-dotnet/core plugin with bun\nDESCRIPTION: This command adds the @nx-dotnet/core plugin as a development dependency using bun. This plugin is required to manage .NET projects within an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-dotnet.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun add -D @nx-dotnet/core\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to package.json in Nx Project (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the addDependenciesToPackageJson function to add React and Jest as dependencies to the package.json file. It shows the basic usage of the function with dependencies and devDependencies parameters.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/addDependenciesToPackageJson.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\naddDependenciesToPackageJson(tree, { react: 'latest' }, { jest: 'latest' });\n```\n\n----------------------------------------\n\nTITLE: Package Reference in Markdown\nDESCRIPTION: NPM package reference for the main Nx package\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/native-packages/win32-x64-msvc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n@nx/nx\n```\n\n----------------------------------------\n\nTITLE: Enabling Autodocs in Storybook Configuration\nDESCRIPTION: Configuration of Storybook's main.ts file to enable automatic documentation generation based on component JSDoc comments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/angular-storybook-compodoc.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  stories: ['../src/app/**/*.stories.@(js|jsx|ts|tsx|mdx)'],\n  addons: ['@storybook/addon-essentials'],\n  framework: {\n    name: '@storybook/angular',\n    options: {},\n  },\n  docs: {\n    autodocs: true,\n    defaultName: 'Docs',\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing Poetry Service\nDESCRIPTION: TypeScript code for the poetry service to fetch random poems from the PoetryDB API.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-23-introducing-expo-support-for-nx.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// at libs/services/src/models/poem-response.interface.ts\nexport interface PoemResponse {\n  title: string;\n  author: string;\n  lines: string[];\n  linecount: string;\n}\n\n// at libs/services/src/poetry/poetry.service.ts\nimport { PoemResponse } from '../models/poem-response.interface';\n\nconst POETRY_BASE_URL = 'https://poetrydb.org/';\n\nexport async function getPoemOfTheDay(): Promise<PoemResponse[]> {\n  const response: Response = await fetch(POETRY_BASE_URL + 'random', {\n    method: 'GET',\n  });\n  if (response.ok) {\n    return await response.json();\n  }\n  throw response;\n}\n\nexport const poetryService = { getPoemOfTheDay };\n```\n\n----------------------------------------\n\nTITLE: Generating a Deno Application in Nx\nDESCRIPTION: Command to generate a new Deno application within an Nx workspace using the Deno plugin. This creates a properly configured Deno app with Nx integration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-03-08-nx-15-8-rust-hasher-nx-console-for-intellij-deno-node-and-storybook.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nrwl/deno:app mydenoapp\n```\n\n----------------------------------------\n\nTITLE: Reading Target Options with TypeScript Generics\nDESCRIPTION: A generic function that reads and combines options for a target as if it was invoked without command line overrides. Takes a Target object and ExecutorContext as parameters, returning combined options of type T.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/readTargetOptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadTargetOptions<T>(«destructured»: Target, context: ExecutorContext): T\n```\n\n----------------------------------------\n\nTITLE: Implementing AggregateCreateNodesError in createNodesV2 Function\nDESCRIPTION: This example demonstrates how to use the AggregateCreateNodesError class within a createNodesV2 function to handle partial results and errors when processing files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/AggregateCreateNodesError.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function createNodesV2(files: string[]) {\n  const partialResults = [];\n  const errors = [];\n  await Promise.all(\n    files.map(async (file) => {\n      try {\n        const result = await createNodes(file);\n        partialResults.push(result);\n      } catch (e) {\n        errors.push([file, e]);\n      }\n    })\n  );\n  if (errors.length > 0) {\n    throw new AggregateCreateNodesError(errors, partialResults);\n  }\n  return partialResults;\n}\n```\n\n----------------------------------------\n\nTITLE: Start Local Verdaccio NPM Registry\nDESCRIPTION: This command starts a local Verdaccio-based npm registry. This allows for testing the CLI package locally before publishing to the public npm registry.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-10-create-your-own-create-react-app-cli.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx local-registry\n```\n\n----------------------------------------\n\nTITLE: esbuild Plugin Example (plugin1.js)\nDESCRIPTION: This code shows an example of an esbuild plugin. The plugin defines a name and a setup function that modifies the build's initial options. Specifically, it defines a constant `PLUGIN1_TEXT` that will be available during the build process.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/browser-esbuild-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst plugin1 = {\n  name: 'plugin1',\n  setup(build) {\n    const options = build.initialOptions;\n    options.define.PLUGIN1_TEXT = '\"Value was provided at build time\"';\n  },\n};\n\nmodule.exports = plugin1;\n```\n\n----------------------------------------\n\nTITLE: Basic Nx List Command Usage\nDESCRIPTION: The basic syntax for using the nx list command with an optional plugin parameter.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/list.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx list [plugin]\n```\n\n----------------------------------------\n\nTITLE: Replacing String in Files in Nx\nDESCRIPTION: This code snippet shows how to replace a string within a file using `tree.read` and `tree.write`. It reads the file content, performs a string replacement, and then writes the modified content back to the file. The code replaces only the first instance of the string if regular expression is not used.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/modifying-files.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function (tree: Tree, schema: any) {\n  const filePath = `path/to/index.ts`;\n  const contents = tree.read(filePath).toString();\n  const newContents = contents.replace('thomasEdison', 'nikolaTesla');\n  tree.write(filePath, newContents);\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Code Generation Configuration\nDESCRIPTION: Setup for generating TypeScript types from GraphQL schema\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'libs/models-graphql/src/lib/schema.graphql',\n  generates: {\n    'apps/api/src/__generated__/resolvers.ts': {\n      plugins: ['add', 'typescript-resolvers'],\n      config: {\n        useIndexSignature: true,\n        content: 'import * as types from \"@nx-apollo/models-graphql\"',\n        namespacedImportName: 'types',\n      },\n    },\n  },\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Serve Storybook Instances (Nx)\nDESCRIPTION: These commands start the three Storybook instances required for Storybook Composition. `storybook-host-angular` and `storybook-host-react` serve the individual framework-specific stories, while `storybook-host` serves the composed Storybook.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/one-storybook-with-composition.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx storybook storybook-host-angular\nnx storybook storybook-host-react\nnx storybook storybook-host\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests for Nx Feedback Feature\nDESCRIPTION: Command for executing Jest-based unit tests for the feature-feedback library within an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/feature-feedback/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx test feature-feedback\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Project Configuration for Compodoc\nDESCRIPTION: Configuration of the project.json file to enable Compodoc and specify the output directory for the documentation.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/angular-storybook-compodoc.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"storybook\": {\n      \"executor\": \"@storybook/angular:start-storybook\",\n      \"options\": {\n        \"port\": 4400,\n        \"configDir\": \"apps/my-app/.storybook\",\n        \"browserTarget\": \"my-app:build\",\n        \"compodoc\": true,\n        \"compodocArgs\": [\"-e\", \"json\", \"-d\", \"apps/my-app\"]\n      },\n    },\n```\n\n----------------------------------------\n\nTITLE: Project Configuration with Multi-Dimensional Tags in Nx\nDESCRIPTION: Sample project configurations showing how to assign multiple tags (scope and type) to different Nx projects including client, admin, features, and shared components.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tag-multiple-dimensions.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n// project \"client\"\n{\n  // ... more project configuration here\n\n  \"tags\": [\"scope:client\", \"type:app\"]\n}\n\n// project \"client-e2e\"\n{\n  // ... more project configuration here\n\n  \"tags\": [\"scope:client\", \"type:app\"],\n  \"implicitDependencies\": [\"client\"]\n}\n\n// project \"admin\"\n{\n  // ... more project configuration here\n\n  \"tags\": [\"scope:admin\", \"type:app\"]\n}\n\n// project \"admin-e2e\"\n{\n  // ... more project configuration here\n\n  \"tags\": [\"scope:admin\", \"type:app\"],\n  \"implicitDependencies\": [\"admin\"]\n}\n\n// project \"client-feature-main\"\n{\n  // ... more project configuration here\n\n  \"tags\": [\"scope:client\", \"type:feature\"]\n},\n\n// project \"admin-feature-permissions\"\n{\n  // ... more project configuration here\n\n  \"tags\": [\"scope:admin\", \"type:feature\"]\n}\n\n// project \"components-shared\"\n{\n  // ... more project configuration here\n\n  \"tags\": [\"scope:shared\", \"type:ui\"]\n}\n\n// project \"utils\"\n{\n  // ... more project configuration here\n\n  \"tags\": [\"scope:shared\", \"type:util\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Library Module in App Module\nDESCRIPTION: TypeScript code showing how to import the library module into the application's main module\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n...\nimport { Lib1Module } from '@angular-tailwind-nx/lib1';\n\n@NgModule({\n  ...\n  imports: [BrowserModule, Lib1Module],\n  ...\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: React Module Federation for SSR Configuration\nDESCRIPTION: This configures Webpack for React Module Federation with Server-Side Rendering (SSR) using `withModuleFederationForSSR` from `@nx/react`. It uses `composePlugins` to combine `withNx`, `withReact`, and `withModuleFederationForSSR`. It depends on a `module-federation.config.js` file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/webpack-plugins.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { composePlugins, withNx } = require('@nx/webpack');\nconst { withReact, withModuleFederatioForSSRn } = require('@nx/react');\n\n// Host config\n// e.g. { remotes: ['about', 'dashboard'] }\nconst moduleFederationConfig = require('./module-federation.config');\n\nmodule.exports = composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederationForSSR(moduleFederationConfig),\n  (config) => {\n    // Further customize webpack config\n    return config;\n  }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring App2 Tailwind with Shared Preset\nDESCRIPTION: Updated Tailwind configuration for app2 that imports and uses a shared preset instead of defining explicit theme values. This facilitates theme consistency while allowing for customization through CSS variables.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createGlobPatternsForDependencies } = require('@nrwl/angular/tailwind');\nconst { join } = require('path');\nconst sharedTailwindConfig = require('../../libs/tailwind-preset/tailwind.config');\n\nmodule.exports = {\n  presets: [sharedTailwindConfig],\n  content: [\n    join(__dirname, 'src/**/!(*.stories|*.spec).{ts,html}'),\n    ...createGlobPatternsForDependencies(__dirname),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Plugins for React and Angular - Shell Commands\nDESCRIPTION: These commands install the necessary Nx plugins for React and Angular, enabling specific functionalities for those frameworks within the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/faster-builds.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/react\n\n# If you use Angular\nnx add @nx/angular\n```\n\n----------------------------------------\n\nTITLE: Running Storybook after Migration\nDESCRIPTION: This command starts Storybook for a specific project after the migration to version 7.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/migrate-7-generator-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx storybook PROJECT_NAME\n```\n\n----------------------------------------\n\nTITLE: TypeScript Schema example for required properties\nDESCRIPTION: This TypeScript code snippet shows how to define the schema with a required and optional property. The `name` property is required because it is defined as `name: string;` while the `type` property is optional, and defined as `type?: string;`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Schema {\n  name: string; // required\n  type?: string; // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Component with Nx CLI\nDESCRIPTION: This snippet demonstrates how to generate a new component named 'MyComponent' using the Nx CLI in a specified directory. This operation requires a pre-configured Nx workspace. The command generates the necessary files for a new component. No additional parameters are needed beyond specifying the component name and path.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/component-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g component apps/my-app/src/app/my-component/my-component.tsx\n```\n\n----------------------------------------\n\nTITLE: Initializing PNPM Workspace with Shell Commands\nDESCRIPTION: Basic shell commands to create a new PNPM workspace folder, initialize package.json, and set up a git repository for the monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n❯ mkdir pnpm-mono\n❯ cd pnpm-mono\n❯ pnpm init\n```\n\n----------------------------------------\n\nTITLE: Installing Nx in a Gradle Workspace\nDESCRIPTION: This command adds Nx to an existing Gradle workspace and prompts to select @nx/gradle.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/gradle/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Running PNPM Commands\nDESCRIPTION: Various PNPM commands for managing the monorepo workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\npnpm --filter my-remix-app dev\npnpm run -r build\npnpm run --parallel -r build\npnpm add nx -D -w\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Build Settings in Nx project.json\nDESCRIPTION: Example configuration of build targets and options in project.json file for a React application named 'happynrwl', showing webpack configuration, output paths, and asset definitions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-29-the-react-cli-you-always-wanted-but-didnt-know-about.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nrwl/web:webpack\",\n      \"options\": {\n        \"compiler\": \"babel\",\n        \"outputPath\": \"dist/apps/happynrwl\",\n        \"index\": \"apps/happynrwl/src/index.html\",\n        \"baseHref\": \"/\",\n        \"main\": \"apps/happynrwl/src/main.tsx\",\n        \"polyfills\": \"apps/happynrwl/src/polyfills.ts\",\n        \"tsConfig\": \"apps/happynrwl/tsconfig.app.json\",\n        \"assets\": [\n          \"apps/happynrwl/src/favicon.ico\",\n          \"apps/happynrwl/src/assets\"\n        ],\n        \"styles\": [\"apps/happynrwl/src/styles.css\"],\n        \"scripts\": [],\n        \"webpackConfig\": \"@nrwl/react/plugins/webpack\"\n      },\n      \"configurations\": {\n        \"production\": {}\n      }\n    },\n    \"serve\": {},\n  },\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Angular Application with Nx\nDESCRIPTION: Generates a standard Angular application using Nx generator in the apps directory\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/application-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:application apps/my-app\n```\n\n----------------------------------------\n\nTITLE: Defining GeneratorCallback Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias called GeneratorCallback. It represents a function that returns either void or a Promise<void>, and is executed after changes are made to the file system.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/GeneratorCallback.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **GeneratorCallback**: () => `void` | `Promise`<`void`>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Language Server Request Types in TypeScript\nDESCRIPTION: TypeScript interface showing custom request types implemented for IDE integration in the Nx Language Server, including workspace information and generator availability checks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-03-02-expanding-nx-console-to-jetbrains-ides.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnx/workspace: {\n  params: void;\n  result: WorkspaceInfo;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Value Definition for disallowComments Property\nDESCRIPTION: Defines the default value for the disallowComments property which controls whether JavaScript-style comments are allowed in JSON parsing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/JsonParseOptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfalse;\n```\n\n----------------------------------------\n\nTITLE: Defining Generator<T> Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias named Generator<T> which represents a function that takes a tree and a schema as parameters and returns void, a GeneratorCallback, or a Promise of either. The function is designed to schedule filesystem updates atomically.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/Generator.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **Generator**<`T`>: (`tree`: `any`, `schema`: `T`) => `void` | [`GeneratorCallback`](../../devkit/documents/GeneratorCallback) | `Promise`<`void` | [`GeneratorCallback`](../../devkit/documents/GeneratorCallback)>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Declaration for Svelte Files\nDESCRIPTION: TypeScript declaration file to enable importing of Svelte components in TypeScript files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-svelte.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '*.svelte' {\n  import type { ComponentType } from 'svelte';\n  const component: ComponentType;\n  export default component;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Conformance Plugin\nDESCRIPTION: Command to add the Nx Conformance plugin to the project using npx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-25-introducing-nx-powerpack.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx add @nx/conformance\n```\n\n----------------------------------------\n\nTITLE: Importing Component in TypeScript\nDESCRIPTION: This snippet shows an example of importing a component that violates the module boundary rules, which will trigger an ESLint error.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// This import is not allowed 👇\nimport { OrdersComponent } from '@angular-monorepo/orders';\n\n@Component({\n  selector: 'angular-monorepo-product-list',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.css'],\n})\nexport class ProductsComponent {}\n```\n\n----------------------------------------\n\nTITLE: Build Mode React Native Android Configuration\nDESCRIPTION: Configuration for specifying the build variant (debug/release) when running the React Native Android app.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/run-android-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n    \"run-android\": {\n      \"executor\": \"@nx/react-native:run-android\",\n      \"options\": {\n        \"mode\": \"release\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Generating a Deno Library in Nx\nDESCRIPTION: Command to generate a new Deno library within an Nx workspace. This creates a shareable Deno library that can be used across projects in the monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-03-08-nx-15-8-rust-hasher-nx-console-for-intellij-deno-node-and-storybook.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nrwl/deno:lib mydenolib\n```\n\n----------------------------------------\n\nTITLE: Adding Table of Contents in Nx Documentation\nDESCRIPTION: This component inserts an automatically generated table of contents, particularly useful for longer documents and blog posts.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n{% toc /%}\n```\n\n----------------------------------------\n\nTITLE: Target configuration with explicit continuous option (Before)\nDESCRIPTION: This JSON snippet illustrates a scenario where the `continuous` option is already explicitly set to `false` in the `project.json` file. The executor used is `@nx/angular:dev-server`. In this case, the migration should not modify the existing configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-21-0-0/set-continuous-option.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"targets\": {\n    // ...\n    \"serve\": {\n      \"continuous\": false,\n      \"executor\": \"@nx/angular:dev-server\",\n      \"options\": {\n        \"buildTarget\": \"my-app:build\",\n        \"port\": 4200\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YouTube Video Embed in Markdown\nDESCRIPTION: Markdown implementation for embedding the Nx 19.0 release announcement video using custom YouTube component\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/19_0_0.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% youtube\nsrc=\"https://youtu.be/U6eO8-w9DR0\"\ntitle=\"Nx 19.0 Has Landed!!\"\n/%}\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional Directory Configuration Types for Nx\nDESCRIPTION: This snippet defines TypeScript type declarations for optional configuration properties in Nx. It specifies the types for 'appsDir' and 'libsDir', both of which are optional string values used to configure the directories for applications and libraries respectively.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/NxJsonConfiguration.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  appsDir?: string;\n  libsDir?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Build Task Configuration\nDESCRIPTION: Configuration to disable build task inference in nx.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/js/js-plugin.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/js/typescript\",\n      \"options\": {\n        \"build\": false\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OverwriteStrategy Enumeration in TypeScript\nDESCRIPTION: This enumeration defines three strategies for handling file generation conflicts: keeping the existing file, overwriting it, or throwing an error if the file already exists.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/OverwriteStrategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum OverwriteStrategy {\n  KeepExisting = \"keepExisting\",\n  Overwrite = \"overwrite\",\n  ThrowIfExisting = \"throwIfExisting\"\n}\n```\n\n----------------------------------------\n\nTITLE: Changing browserTarget for Angular Storybook Build\nDESCRIPTION: This configuration demonstrates how to set the browserTarget to use build-storybook as the builder. This is useful when a project doesn't have a build target.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/build-storybook-executor-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build-storybook\": {\n    \"executor\": \"@storybook/angular:build-storybook\",\n    \"outputs\": [\"{options.outputDir}\"],\n    \"options\": {\n      \"outputDir\": \"dist/storybook/ngapp\",\n      \"configDir\": \"apps/ngapp/.storybook\",\n      \"browserTarget\": \"ngapp:build-storybook\",\n      \"compodoc\": false\n    },\n    \"configurations\": {\n      \"ci\": {\n        \"quiet\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Nx Logo with Dark Mode Support in HTML\nDESCRIPTION: This HTML snippet showcases the Nx logo with support for both light and dark color schemes. It uses the <picture> element to provide different image sources based on the user's color scheme preference.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/workspace/README.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p style=\"text-align: center;\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Adding Codegen Target to Project Configuration\nDESCRIPTION: This JSON snippet adds a new target to the project.json file, allowing the codegen command to be run as an Nx task.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"targets\": {\n    \"codegen\": {\n      \"command\": \"npx graphql-codegen --config {projectRoot}/codegen.ts\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Function with Relative Path - TypeScript\nDESCRIPTION: This snippet demonstrates how to import a function using a relative path in TypeScript. This method ties imports to the folder structure, which can lead to problems if files are moved.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/typescript-project-linking.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { someFunction } from '../../teamA/otherProject';\n\nconst result = someFunction();\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables for Nx Workspace\nDESCRIPTION: This snippet shows the content of a .env file at the workspace root, defining a base URL for API requests.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nNX_REQUEST_BASE_URL=://ghibliapi.herokuapp.com\n```\n\n----------------------------------------\n\nTITLE: Start NX Project on Android\nDESCRIPTION: This JSON snippet configures the start of a mobile project on an Android device using NX with Expo. Setting 'android' to true in 'options' opens the app on a connected Android device.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/start-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    \"start\": {\n      \"executor\": \"@nx/expo:start\",\n      \"options\": {\n        \"port\": 8081,\n        \"android\": true\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace Changelog with GitHub Release in nx.json\nDESCRIPTION: This snippet shows the configuration for creating a GitHub release from the workspace changelog, while also disabling the creation of a local CHANGELOG.md file, all within the `nx.json` file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_17\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"release\": {\n    \"changelog\": {\n      \"workspaceChangelog\": {\n        // This will create a GitHub release containing the workspace\n        // changelog contents\n        \"createRelease\": \"github\",\n        // This will disable creating a workspace CHANGELOG.md file\n        \"file\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Boundary Lint Rules with Banned External Imports\nDESCRIPTION: ESLint configuration example showing how to set up banned external imports for frontend and backend projects using the nx-enforce-module-boundaries rule.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-08-02-nx-14-5-cypess-v10-output-globs-linter-perf-react-tailwind-support.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nx-enforce-module-boundaries\": [\n    \"error\",\n    {\n      \"allow\": [],\n      \"depConstraints\": [\n        {\n          \"sourceTag\": \"frontend\",\n          \"bannedExternalImports\": [\"@nestjs/common\"]\n        },\n        {\n          \"sourceTag\": \"backend\",\n          \"bannedExternalImports\": [\"@angular/core\"]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Linting a React Application with Nx\nDESCRIPTION: Command to run linting on a React application in an Nx workspace using ESLint.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx lint\n```\n\n----------------------------------------\n\nTITLE: Installing Nx using npx\nDESCRIPTION: This snippet shows how to quickly set up Nx in your project by using the command line tool npx. The command initializes Nx and automatically configures it based on the existing tools in your workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-monorepo.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Running Target with Special Characters\nDESCRIPTION: Demonstrates how to run a target containing special characters by using quotes to prevent parsing issues.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n nx run myapp:\"build:test\"\n```\n\n----------------------------------------\n\nTITLE: Tree Interface Method: isFile\nDESCRIPTION: Method to check if the path points to a file\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/Tree.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n▸ isFile(filePath: string): boolean\n```\n\n----------------------------------------\n\nTITLE: Adding Nx Plugin Lint Checks to Existing Plugins\nDESCRIPTION: Command to add the new Nx plugin lint rules to an existing plugin project. This generator configures ESLint to perform Nx-specific validation on plugin configuration files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-06-09-nx-14-2-angular-v14-storybook-update-lightweight-nx-and-more.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nrwl/nx-plugin:plugin-lint-checks --projectName=awesomeplugin\n```\n\n----------------------------------------\n\nTITLE: Checking Yarn Version in Shell\nDESCRIPTION: Command to check the currently installed version of Yarn\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/yarn-pnp.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn --version\n```\n\n----------------------------------------\n\nTITLE: Displaying Terminal Commands in Nx Documentation\nDESCRIPTION: This syntax shows how to format and display terminal commands in documentation, optionally with a descriptive title.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n```shell\n npx nx build\n```\n```\n\nLANGUAGE: markdown\nCODE:\n```\n```shell {% title=\"Build the app\" %}\n npx nx build\n```\n```\n\n----------------------------------------\n\nTITLE: Create Package.json and Lockfile - Nx Plugin Development\nDESCRIPTION: This code snippet demonstrates how to generate a package.json and lockfile within an Nx plugin. It utilizes the `createProjectGraphAsync`, `createPackageJson` and `createLockFile` functions from `@nrwl/devkit`. The generated files can then be saved using Node.js file system methods.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-02-16-nx-15-7-node-support-angular-lts-lockfile-pruning.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPackageJson, createLockFile } from '@nrwl/devkit';\n\nconst projectGraph = await createProjectGraphAsync();\nconst packageJson = createPackageJson(projectName, projectGraph);\nconst lockFile = createLockFile(packageJson);\n\n// save files using e.g. `fs.writeFileSync`\n```\n\n----------------------------------------\n\nTITLE: Default Value Definition for expectComments Property\nDESCRIPTION: Defines the default value for the expectComments property which determines if JavaScript-style comments are expected in the JSON content.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/JsonParseOptions.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfalse;\n```\n\n----------------------------------------\n\nTITLE: Markdown Card Component for Playwright Announcement\nDESCRIPTION: Markdown code using cards component to display a video announcement about official Playwright support in Nx\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/16_6_0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% cards cols=\"2\" %}\n{% card title=\"Official Playwright Support\"  type=\"video\" url=\"https://www.youtube.com/watch?v=k1U3PuBrZFQ\" /%}\n{% /cards %}\n```\n\n----------------------------------------\n\nTITLE: Generating Library with Nx CLI (Plugin Selection)\nDESCRIPTION: This command initiates library generation. Because only \"lib\" is specified, Nx prompts the user to select a plugin providing a library generator (e.g., @nx/react or @nx/js).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/generate-code.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g lib packages/mylib\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Playwright Plugin\nDESCRIPTION: JSON configuration for the Nx Playwright plugin in nx.json, specifying target names for e2e testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/playwright/playwright-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/playwright/plugin\",\n      \"options\": {\n        \"ciTargetName\": \"e2e-ci\",\n        \"targetName\": \"e2e\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating esbuild Plugin 1 - TypeScript\nDESCRIPTION: This TypeScript snippet defines the first esbuild plugin, specifying how to modify the build options at the time of the build process. It sets a constant defined during the build for use in the application.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/application-executor-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst plugin1 = {\n  name: 'plugin1',\n  setup(build) {\n    const options = build.initialOptions;\n    options.define.PLUGIN1_TEXT = '\"Value was provided at build time\"';\n  },\n};\n\nmodule.exports = plugin1;\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Component with TodoContextProvider in Qwik\nDESCRIPTION: Sets up the root component with QwikCityProvider and TodoContextProvider to enable global state management. Includes necessary imports and basic document structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-15-qwikify-your-dev.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useStyles$ } from '@builder.io/qwik';\nimport {\n  QwikCityProvider,\n  RouterOutlet,\n  ServiceWorkerRegister,\n} from '@builder.io/qwik-city';\nimport { RouterHead } from './components/router-head/router-head';\nimport globalStyles from './global.css?inline';\nimport { TodoContextProvider } from '@qwik-todo-app/data-access';\n\nexport default component$(() => {\n  useStyles$(globalStyles);\n  return (\n    <QwikCityProvider>\n      <TodoContextProvider>\n        <head>\n          <meta charSet=\"utf-8\" />\n          <link rel=\"manifest\" href=\"/manifest.json\" />\n          <RouterHead />\n        </head>\n        <body lang=\"en\">\n          <RouterOutlet />\n          <ServiceWorkerRegister />\n        </body>\n      </TodoContextProvider>\n    </QwikCityProvider>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Saving Project Graph to JSON File\nDESCRIPTION: Demonstrates how to save the project graph into a JSON file named 'output.json'.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/dep-graph.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx graph --file=output.json\n```\n\n----------------------------------------\n\nTITLE: Directory Structure of React Monorepo Before Creating Libraries\nDESCRIPTION: Shows the initial directory structure of a React monorepo before creating local libraries. The structure includes the main app folder with various domain-specific subfolders.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/6-create-local-library/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n└─ react-monorepo\n   ├─ ...\n   ├─ apps\n   │  └─ react-store\n   │     ├─ ...\n   │     ├─ src\n   │     │  ├─ app\n   │     │  │  ├─ products\n   │     │  │  ├─ cart\n   │     │  │  ├─ ui\n   │     │  │  ├─ ...\n   │     │  │  └─ app.tsx\n   │     │  ├─ ...\n   │     │  └─ main.tsx\n   │     ├─ ...\n   │     └─ package.json\n   ├─ nx.json\n   ├─ ...\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with @monodon/rust Preset\nDESCRIPTION: Commands to create a new Nx workspace using the @monodon/rust preset. This sets up the workspace with necessary configurations for Rust projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-rust.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx -y create-nx-workspace@latest acme --preset=@monodon/rust\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx -y create-nx-workspace@latest acme --preset=@monodon/rust --packageManager=yarn\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx -y create-nx-workspace@latest acme --preset=@monodon/rust --packageManager=pnpm\n```\n\n----------------------------------------\n\nTITLE: Configuring 'exec' Command in package.json for Nx\nDESCRIPTION: This snippet shows how to add an 'exec' script in package.json to run a command as a target for a specific project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/exec.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myorg\",\n  \"version\": \"0.0.1\",\n  \"scripts\": {\n    \"build\": \"nx exec -- <command> [..args]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nx TypeScript Plugin Configuration\nDESCRIPTION: Configuration options for @nx/js/typescript plugin in nx.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/js/js-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/js/typescript\",\n      \"options\": {\n        \"typecheck\": {\n          \"targetName\": \"typecheck\"\n        },\n        \"build\": {\n          \"targetName\": \"build\",\n          \"configName\": \"tsconfig.lib.json\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring styles in Storybook targets for Angular projects\nDESCRIPTION: Example of how to configure styles and stylePreprocessorOptions directly in both storybook and build-storybook targets within project.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/angular-configuring-styles.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n    \"storybook\": {\n      \"executor\": \"@storybook/angular:start-storybook\",\n      \"options\": {\n         ...\n        \"styles\": [\"some-styles.css\"],\n        \"stylePreprocessorOptions\": {\n          \"includePaths\": [\"some-style-paths\"]\n        }\n      },\n      ...\n    },\n    \"build-storybook\": {\n      \"executor\": \"@storybook/angular:build-storybook\",\n       ...\n      \"options\": {\n         ...\n        \"styles\": [\"some-styles.css\"],\n        \"stylePreprocessorOptions\": {\n          \"includePaths\": [\"some-style-paths\"]\n        }\n      },\n     ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Workspace with Custom Preset\nDESCRIPTION: Example of using a custom preset (qwik-nx) to create a new Nx workspace with the create-nx-workspace command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-22-nx-15-4-vite-4-support-a-new-nx-watch-command-and-more.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx create-nx-workspace –preset=qwik-nx\n```\n\n----------------------------------------\n\nTITLE: Generating New Nuxt Application\nDESCRIPTION: Command to generate a new Nuxt application within the Nx workspace\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nuxt/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nuxt:app apps/my-app\n```\n\n----------------------------------------\n\nTITLE: Running Advent of Code Solutions (Actual Data)\nDESCRIPTION: Commands to run solutions for day 1 against the actual challenge data. Various command formats are shown for user convenience.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-11-30-advent-of-code-crystal.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> nx day-1-a\n> nx day-1\n> nx 1-a\n> nx 1\n```\n\n----------------------------------------\n\nTITLE: Defining ChangeType Enum Values in TypeScript\nDESCRIPTION: Defines a TypeScript enumeration with two possible values: Delete and Insert. This enum is used to specify the type of change operation being performed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ChangeType.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum ChangeType {\n  Delete = \"Delete\",\n  Insert = \"Insert\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Federation with disableNxRuntimeLibraryControlPlugin in TypeScript\nDESCRIPTION: This code snippet demonstrates how to disable the `NxRuntimeLibraryControlPlugin` within your `module-federation.config` file. This plugin ensures workspace libraries are shared via active dev remotes. Disabling it might be useful in specific scenarios where you want to control library sharing manually.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/nx-module-federation-technical-overview.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config: ModuleFederationConfig = {\n  ...,\n  disableNxRuntimeLibraryControlPlugin: true\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Nx Cloud Launch Templates via CLI\nDESCRIPTION: Demonstrates how to validate custom launch templates using the nx-cloud CLI. This ensures all necessary fields and inputs are properly defined.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnx-cloud validate --workflow-file=./.nx/workflows/agents.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a Zephyr Apps Project for React Native\nDESCRIPTION: This command initializes a new Zephyr Apps project for React Native, setting up the necessary structure for a super app with Module Federation support.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-31-over-the-air-updates-with-zephyr.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nnpx create-zephyr-apps@latest\n```\n\n----------------------------------------\n\nTITLE: Updating Vite Resolve Conditions Configuration\nDESCRIPTION: Shows the transformation of a Vite configuration file to include default resolve conditions that were removed in Vite 6. The update adds 'module', 'browser', and 'development|production' conditions to maintain consistent behavior.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/src/migrations/update-20-5-0/update-resolve-conditions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n  resolve: {\n    conditions: ['require'],\n  },\n  build: {\n    outDir: 'dist',\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n  resolve: {\n    conditions: ['require', 'module', 'browser', 'development|production'],\n  },\n  build: {\n    outDir: 'dist',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for esbuild Plugin Variables\nDESCRIPTION: This code snippet demonstrates how to define TypeScript types for variables injected by esbuild plugins. This prevents type-checking errors during the build process. The `declare const` statements inform TypeScript about the existence of the `PLUGIN1_TEXT` and `PLUGIN2_TEXT` constants.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/browser-esbuild-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const PLUGIN1_TEXT: number;\ndeclare const PLUGIN2_TEXT: string;\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: This snippet describes the command to execute unit tests for the ui-powerpack library using the Nx testing command. It requires the setup of Nx and Jest in the environment to function correctly. The command executes Jest tests configured for the library.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/ui-powerpack/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx test ui-powerpack\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Persist for React Native\nDESCRIPTION: TypeScript code to configure Redux Persist for the React Native app using AsyncStorage.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nconst persistConfig = {\n  key: 'root',\n  storage: AsyncStorage,\n  whitelist: ['search', 'films', 'people'],\n  transforms: [transformEntityStateToPersist],\n};\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Sharing Library Versions\nDESCRIPTION: This JavaScript snippet represents the Webpack configuration that adheres to sharing library versions, specifying shared dependencies and their properties, such as singleton behavior.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/manage-library-versions-with-module-federation.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // Additional config ignored for brevity\n  plugins: [\n    new ModuleFederationPlugin({\n      // ...\n      name: 'remote',\n      shared: {\n        react: { singleton: true, eager: true, version: '18.2.0' },\n        'acme/utils': { singleton: true, eager: true, version: '1.0.0' }, // <--- This version is determined by the logic discussed earlier\n      },\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Next.js Server Configuration\nDESCRIPTION: Basic project configuration for Next.js server executor in project.json file, defining the base server setup with development options.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/server-next-executor-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"acme\",\n  \"$schema\": \"node_modules/nx/schemas/project-schema.json\",\n  \"sourceRoot\": \".\",\n  \"projectType\": \"application\",\n  \"targets\": {\n    \"serve\": {\n      \"executor\": \"@nx/next:server\",\n      \"defaultConfiguration\": \"production\",\n      \"options\": {\n        \"buildTarget\": \"acme:build\",\n        \"dev\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with SWC in Nx (Using .spec.swcrc)\nDESCRIPTION: This snippet demonstrates an alternative configuration for Jest with SWC in an Nx project. It reads the SWC configuration from a .spec.swcrc file specifically for spec files and sets up the transform options accordingly.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/jest/jest-plugin.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint-disable */\nimport { readFileSync } from 'fs';\n\n// Reading the SWC compilation config for the spec files\nconst swcJestConfig = JSON.parse(\n  readFileSync(`${__dirname}/.spec.swcrc`, 'utf-8')\n);\n\n// Disable .swcrc look-up by SWC core because we're passing in swcJestConfig ourselves\nswcJestConfig.swcrc = false;\n\nexport default {\n  globalSetup: '<rootDir>/src/global-setup-swc.ts',\n  transform: {\n    '^.+\\\\.[tj]s$': ['@swc/jest', swcJestConfig],\n  },\n  // other settings\n};\n```\n\n----------------------------------------\n\nTITLE: Proxy Configuration for Vite Preview Server\nDESCRIPTION: Example showing how to specify a proxy configuration file path for the Vite preview server in project.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/preview-server-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"my-app\": {\n    \"targets\": {\n        \"preview\": {\n            \"executor\": \"@nx/vite:preview-server\",\n            \"defaultConfiguration\": \"development\",\n            \"options\": {\n                \"buildTarget\": \"my-app:build\",\n                \"proxyConfig\": \"apps/my-app/proxy.conf.json\"\n            },\n            \"configurations\": {\n                ...\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Repository Structure in Text Format\nDESCRIPTION: This code snippet shows the structure of the repository, including the apps and libs directories with their respective subdirectories and files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/recipes/cipe-affected-project-graph.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\napps/\n├── web\n├── web-e2e\n├── nx-graph-test\n├── nx-graph-test-e2e\n└── recipes/\n    ├── client\n    └── client-e2e\nlibs/\n├── ui (button and icon components)\n├── forms/\n│   └── input\n└── tooltip\n```\n\n----------------------------------------\n\nTITLE: Viewing Project Details in Nx\nDESCRIPTION: Command to display detailed project information using Nx CLI\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-08-01-nx-19-5-update.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx show project [projectName]\n```\n\n----------------------------------------\n\nTITLE: Building Projects\nDESCRIPTION: Commands to build React applications and buildable libraries using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/web/documents/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-new-app\nnx build my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Nx CLI\nDESCRIPTION: Command to execute Jest unit tests for the nx-dev-models-document library using the Nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/models-document/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx test nx-dev-models-document\n```\n\n----------------------------------------\n\nTITLE: Enabling Dependency Checks ESLint Rule\nDESCRIPTION: JSON configuration snippet showing how to enable the @nx/dependency-checks ESLint rule for JSON files in a project's .eslintrc.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-07-06-nx-16-5-release.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"files\": [\"*.json\"],\n      \"parser\": \"jsonc-eslint-parser\",\n      \"rules\": {\n         \"@nx/dependency-checks\": \"error\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Agents Controller Arguments in YAML\nDESCRIPTION: This YAML snippet shows how to configure the controller arguments for Nx Agents, specifically setting the image registry for executor images. It's part of the upgrade process to version 2025.03.2.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/release-notes.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  # pass the internal image registry where the pods can pull the executor images from\n  # for example: image-registry: us-east1-docker.pkg.dev/nxcloudoperations/nx-cloud-enterprise-public\n  image-registry=<registry-where-nxcloud-images-are-hosted>\n\n  # you can REMOVE the below option, as it's not needed anymore\n  # kube-unix-init-container-name=...\n```\n\n----------------------------------------\n\nTITLE: Adding Code Snippets with Filenames in Nx Documentation\nDESCRIPTION: This syntax allows adding code snippets with specific language highlighting and a filename display, improving context for code examples.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```javascript {% fileName=\"main.js\" %}\n const code = \"goes here\";\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Feature Cards in Markdown\nDESCRIPTION: This snippet uses a custom cards syntax to display a grid of feature cards. Each card represents a new feature or update in Nx 19.6, with a title and link to more information.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/19_6_0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% cards cols=\"2\" %}\n{% card title=\"Explain with AI\" type=\"document\" url=\"/ci/features/explain-with-ai\" /%}\n{% card title=\"File-Based Versioning for Nx Release (Version Plans)\" type=\"document\" url=\"/recipes/nx-release/file-based-versioning-version-plans\" /%}\n{% card title=\"Migrate to Inferred Tasks (Project Crystal)\" type=\"document\" url=\"/recipes/running-tasks/convert-to-inferred\" /%}\n{% card title=\"Angular 18.2.0 Support\" type=\"document\" url=\"https://github.com/nrwl/nx/pull/27379\" /%}\n{% card title=\"Storybook 8 Support\" type=\"document\" url=\"https://github.com/nrwl/nx/pull/27214\" /%}\n{% /cards %}\n```\n\n----------------------------------------\n\nTITLE: Watch Mode Test Command\nDESCRIPTION: Command to run Vitest tests in watch mode using the --watch flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/test-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx run my-app:test --watch\n```\n\n----------------------------------------\n\nTITLE: Creating an Astro App with npm\nDESCRIPTION: Use npm to create a new Astro application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-astro.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create astro@latest\n```\n\n----------------------------------------\n\nTITLE: Serving Nx Documentation Site Locally with Nx CLI\nDESCRIPTION: Command to run the nx-dev documentation site locally using the Nx CLI. This allows developers to view and test changes to the documentation.\nSOURCE: https://github.com/nrwl/nx/blob/master/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx serve-docs nx-dev\n```\n\n----------------------------------------\n\nTITLE: Nx CLI Options Table in Markdown\nDESCRIPTION: Markdown table documenting available command line options for Nx, including option names, types, and detailed descriptions for each flag and configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Option                                      | Type                                                                | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n| ------------------------------------------- | ------------------------------------------------------------------- ||\n| `--batch`                                   | boolean                                                             | Run task(s) in batches for executors which support batches. (Default: `false`|\n| `--configuration`, `--c`                    | string                                                              | This is the configuration to use when performing tasks on projects|\n| `--exclude`                                 | string                                                              | Exclude certain projects from being processed|\n| `--excludeTaskDependencies`                 | boolean                                                             | Skips running dependent tasks first. (Default: `false`|\n| `--graph`                                   | string                                                              | Show the task graph of the command. Pass a file path to save the graph data instead of viewing it in the browser. Pass \"stdout\" to print the results to the terminal|\n| `--nxBail`                                  | boolean                                                             | Stop command execution after the first failed task. (Default: `false`|\n| `--nxIgnoreCycles`                          | boolean                                                             | Ignore cycles in the task graph. (Default: `false`|\n| `--output-style`                            | `dynamic`, `static`, `stream`, `stream-without-prefixes`, `compact` | Defines how Nx emits outputs tasks logs. **dynamic**: use dynamic output life cycle, previous content is overwritten or modified as new outputs are added, display minimal logs by default, always show errors. This output format is recommended on your local development environments. **static**: uses static output life cycle, no previous content is rewritten or modified as new outputs are added. This output format is recommened for CI environments. **stream**: nx by default logs output to an internal output stream, enable this option to stream logs to stdout / stderr. **stream-without-prefixes**: nx prefixes the project name the target is running on, use this option remove the project name prefix from output. |\n| `--parallel`                                | string                                                              | Max number of parallel processes [default is|\n```\n\n----------------------------------------\n\nTITLE: Nx-Set Environment Variables Table in Markdown\nDESCRIPTION: Markdown table showing environment variables that Nx automatically sets during execution, providing runtime context information about the current task being executed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/environment-variables.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Property                     | Type    | Description                                                                                                                                               |\n| ---------------------------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| NX_TASK_TARGET_PROJECT       | string  | Set to the project name of the task being run. Use this to tell which project is being run.                                                               |\n| NX_TASK_TARGET_TARGET        | string  | Set to the target name of the task being run. Use this to tell which target of the project is being run.                                                  |\n| NX_TASK_TARGET_CONFIGURATION | string  | Set to the configuration name of the task being run. Use this to tell which configuration of the target is being run.                                     |\n```\n\n----------------------------------------\n\nTITLE: Pull Latest Changes (Git)\nDESCRIPTION: This command pulls the latest changes from the remote repository after connecting to Nx Cloud. This ensures that the local environment has the updated `nx.json` file with the `nxCloudId` property.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Slice with Thunk Actions\nDESCRIPTION: Creates a Redux slice with async thunk action for fetching horoscope data and corresponding reducers for state management.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nexport const fetchHoroscope = createAsyncThunk<\n  AdhHoroscope,\n  { zodiacSign: AdhZodiacSign; day: AdhHoroscopeDay }\n>('horoscope/fetchStatus', async ({ zodiacSign, day }, { rejectWithValue }) => {\n  try {\n    const horoscopeResponse = await aztroService.getHoroscope(zodiacSign, day);\n    return transfromAztroHoroscpeResponseToAdhHoroscope(horoscopeResponse);\n  } catch (error) {\n    return rejectWithValue({ error });\n  }\n});\n\nexport const horoscopeSlice = createSlice({\n  name: HOROSCOPE_FEATURE_KEY,\n  initialState: initialHoroscopeState,\n  reducers: {\n    setUserZodiacSignItem(\n      state: HoroscopeState,\n      action: PayloadAction<AdhZodiacSignItem>\n    ) {\n      state.zodiacSignItem = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchHoroscope.pending, (state: HoroscopeState) => {\n        state.loadingStatus = 'loading';\n      })\n      .addCase(\n        fetchHoroscope.fulfilled,\n        (state: HoroscopeState, action: PayloadAction<AdhHoroscope>) => {\n          state.horoscope = action.payload;\n          state.loadingStatus = 'loaded';\n        }\n      )\n      .addCase(fetchHoroscope.rejected, (state: HoroscopeState, action) => {\n        state.loadingStatus = 'error';\n        state.error = action.error.message;\n      });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Preview Type Definition - TypeScript\nDESCRIPTION: TypeScript type definition for preview configuration in tutorial metadata.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nstring | [port: number, title: string] | { port: number, title: string }\n```\n\n----------------------------------------\n\nTITLE: Git Repository Setup Commands\nDESCRIPTION: Commands to initialize git repository and create first commit.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-12-next-gen-module-federation-deployments.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit -m \"initial commit\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Front Matter in Markdown for Nx Documentation\nDESCRIPTION: Front matter is used to add metadata to Markdown files, including custom title and description. It is placed at the top of the file and parsed as YAML.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: This is a custom title\ndescription: This is a custom description\n---\n```\n\n----------------------------------------\n\nTITLE: Declaring NX_VERSION Constant in TypeScript\nDESCRIPTION: Declaration of the NX_VERSION constant which provides the version of Nx used by the workspace. Returns null if no version is found.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/NX_VERSION.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nConst NX_VERSION: string\n```\n\n----------------------------------------\n\nTITLE: Simplified Configuration for lib3 after targetDefaults\nDESCRIPTION: The minimalist project.json for lib3 after moving common configuration to targetDefaults, with no project-specific overrides needed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/reduce-repetitive-configuration.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"lib3\",\n  \"$schema\": \"../../node_modules/nx/schemas/project-schema.json\",\n  \"sourceRoot\": \"libs/lib3/src\",\n  \"projectType\": \"library\",\n  \"targets\": {\n    \"build\": {},\n    \"lint\": {},\n    \"test\": {}\n  },\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Converting RxJS Observable to Promise (TypeScript)\nDESCRIPTION: This snippet shows how to convert an RxJS Observable to a Promise within an Nx executor.  It imports `of` from `rxjs` and uses the `toPromise()` method to convert the Observable to a Promise before returning it from the executor.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/compose-executors.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { of } from 'rxjs';\n\nexport default async function (opts) {\n  return of({ success: true }).toPromise();\n}\n```\n\n----------------------------------------\n\nTITLE: Root Babel Configuration\nDESCRIPTION: Root level babel.config.json configuration for enabling babelrc support across all packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/webpack/docs/webpack-build-executor-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"babelrcRoots\": [\"*\"] }\n```\n\n----------------------------------------\n\nTITLE: Building a Package with Dependencies using NPM\nDESCRIPTION: This shell command builds the `zoo` package which has dependencies on other packages in the monorepo. TypeScript project references ensure dependent packages are built first. The `-w` flag specifies the `@tuskdesign/zoo` workspace to target.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/1-introduction/1-welcome/content.mdx#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run build -w @tuskdesign/zoo\n```\n\n----------------------------------------\n\nTITLE: Combining Focus and Exclude Options\nDESCRIPTION: Illustrates how to combine the focus and exclude options to create a more specific graph view.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/dep-graph.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx graph --focus=todos-feature-main --exclude=project-one,project-two\n```\n\n----------------------------------------\n\nTITLE: Listing Available iOS Simulators\nDESCRIPTION: This bash command shows how to list all available iOS simulators using the 'xcrun simctl' tool. It's useful for obtaining simulator names or IDs for configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/run-ios-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nxcrun simctl list devices available\n```\n\n----------------------------------------\n\nTITLE: Example of a Vite proxy configuration in JSON\nDESCRIPTION: Example of a proxy configuration in JSON format that would need to be migrated to the Vite configuration file when converting to inferred tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/troubleshoot-convert-to-inferred.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/api/*\": {\n    \"target\": \"http://localhost:3333\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nx to Latest Version\nDESCRIPTION: Commands for updating Nx workspace dependencies and running necessary migrations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-05-nx-14-4-inputs-optional-npm-scope-project-graph-cache-directory-and-more.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Step Groups in Nx Agents\nDESCRIPTION: A YAML configuration example showing how to define parallel step groups to optimize agent startup time. It includes steps for installing Rust, NPM packages, Poetry, and Localstack in parallel, followed by sequential steps for Playwright installation and service startup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nlaunch-templates:\n  template-one:\n    init-steps:\n      - group-name: Install Dependencies\n        parallel: true\n        # all the below steps will start at the same time and run in parallel\n        steps:\n          - name: Install Rust\n            script: |\n              curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh -s -- -y\n              source \"~/workspace/.cargo/env\"\n              # we write the CARGO_PATH now so that it can be set in the \"Start Services\" step below\n              echo \"CARGO_PATH=~/workspace/.cargo/bin\" >> $NX_CLOUD_ENV\n              rustc --version\n              rustup target add wasm32-wasip1-threads\n              cargo fetch\n              cargo check --locked\n          - name: NPM Install\n            uses: 'nrwl/nx-cloud-workflows/main/workflow-steps/install-node-modules/main.yaml'\n          - name: Install Poetry\n            script: |\n              curl -sSL https://install.python-poetry.org | python3 -\n              # we write the POETRY_PATH now so that it can be set in the \"Start Services\" step below\n              export POETRY_PATH=\"/home/workflows/.local/bin\"\n              export PATH=\"$POETRY_PATH:$PATH\"\n              echo \"POETRY_PATH=$POETRY_PATH\" >> $NX_CLOUD_ENV\n              poetry --version\n              poetry install\n          - name: Install Localstack\n            script: |\n              curl --output localstack-cli-3.7.0-linux-amd64-onefile.tar.gz --location https://github.com/localstack/localstack-cli/releases/download/v3.7.0/localstack-cli-3.7.0-linux-amd64-onefile.tar.gz\n              sudo tar xvzf localstack-cli-3.7.0-linux-*-onefile.tar.gz -C /usr/local/bin\n      # because both playwright and \"npm install\" use NPM and write to a lot of the same places on the filesystem, it would be slower to run them both in parallel\n      # so we run playwright after the parallel group above\n      - name: Install Playwright\n        script: npx playwright install --with-deps\n      - name: Start services\n        script: |\n          # we create the PATH here\n          echo \"PATH=$CARGO_PATH:$POETRY_PATH:$PATH\" >> $NX_CLOUD_ENV\n          npm run start-docker-services\n```\n\n----------------------------------------\n\nTITLE: Responsive Dark/Light Mode Image HTML Implementation\nDESCRIPTION: HTML markup for displaying responsive Nx logo that adapts to system color scheme preferences using picture and source elements. Implements dark/light mode switching using prefers-color-scheme media query.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vue/README.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p style=\"text-align: center;\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Angular Application Configuration with Browser-Esbuild Executor\nDESCRIPTION: Configuration for an Angular application using the @nx/angular:browser-esbuild executor with incremental builds. This uses esbuild for faster compilation but may not benefit as much from incremental builds as webpack.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/setup-incremental-builds-angular.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"projectType\": \"application\",\n  ...\n  \"targets\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"],\n      \"executor\": \"@nx/angular:browser-esbuild\",\n      \"outputs\": [\n        \"{options.outputPath}\"\n      ],\n      \"options\": {\n        \"buildLibsFromSource\": false\n        ...\n      },\n      \"configurations\": {\n        ...\n      },\n      \"defaultConfiguration\": \"production\"\n    },\n    \"serve\": {\n      \"executor\": \"@nx/angular:dev-server\",\n      \"options\": {\n        \"buildTarget\": \"my-app:build\",\n        \"buildLibsFromSource\": false\n      },\n      \"configurations\": {\n        \"production\": {\n          \"buildTarget\": \"my-app:build:production\"\n        }\n      }\n    },\n    ...\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Updating Project Configuration in Nx\nDESCRIPTION: TypeScript function signature for updating project configuration in Nx workspace. Takes a file system tree, project name, and project configuration as parameters. The function modifies existing project configuration without returning a value.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/updateProjectConfiguration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nupdateProjectConfiguration(tree: Tree, projectName: string, projectConfiguration: ProjectConfiguration): void\n```\n\n----------------------------------------\n\nTITLE: Generate Node Application\nDESCRIPTION: Command to generate a new Node.js application in the apps directory\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/generate.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/node:app apps/myapp\n```\n\n----------------------------------------\n\nTITLE: Configuring PnP Node Linker\nDESCRIPTION: Command to set Yarn's node linker to PnP mode\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/yarn-pnp.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn config set nodeLinker pnp\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Priority in Generator Schema\nDESCRIPTION: JSON snippet showing how to use the x-priority property in a generator's schema.json file to mark important fields. This allows prioritization of fields in both CLI help output and Nx Console UI.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-03-08-nx-15-8-rust-hasher-nx-console-for-intellij-deno-node-and-storybook.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"directory\": {\n    \"description\": \"The directory of the new application.\",\n    \"type\": \"string\",\n    \"x-priority\": \"important\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modify Application Code (Java)\nDESCRIPTION: This Java code snippet demonstrates a simple modification to the `application` project's code. The `highlightLines` attribute indicates that line 21 has been changed, which Nx uses to determine that the `application` project is affected.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.multimodule.application;\n\nimport com.example.multimodule.service.MyService;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@SpringBootApplication(scanBasePackages = \"com.example.multimodule\")\n@RestController\npublic class DemoApplication {\n\n    private final MyService myService;\n\n    public DemoApplication(MyService myService) {\n        this.myService = myService;\n    }\n\n    @GetMapping(\"/\")\n    public String home() {\n        return myService.message() + \" changed!\";\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Cards Layout for Breaking Changes\nDESCRIPTION: Structured markdown layout using cards to display breaking changes with links to relevant pull requests\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/16_0_0.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% cards cols=\"2\" %}\n{% card title=\"Removed @nrwl/cypress/plugins/preprocessor\" type=\"external\" url=\"https://github.com/nrwl/nx/pull/16170\" /%}\n{% card title=\"Removed simpleModuleName option from Angular library\" type=\"external\" url=\"https://github.com/nrwl/nx/pull/16219\" /%}\n{% card title=\"Removed affected:apps and affected:libs\" type=\"external\" url=\"https://github.com/nrwl/nx/pull/16349\" /%}\n{% card title=\"Removed @nrwl/web:rollup executor\" type=\"external\" url=\"https://github.com/nrwl/nx/pull/16416\" /%}\n{% card title=\"Removed @nrwl/web:webpack executor\" type=\"external\" url=\"https://github.com/nrwl/nx/pull/16416\" /%}\n{% card title=\"Removed @nrwl/web:dev-server executor\" type=\"external\" url=\"https://github.com/nrwl/nx/pull/16416\" /%}\n{% card title=\"Removed @nrwl/node:webpack executor\" type=\"external\" url=\"https://github.com/nrwl/nx/pull/16416\" /%}\n{% /cards %}\n```\n\n----------------------------------------\n\nTITLE: Removing Indents from Multi-line Strings in TypeScript\nDESCRIPTION: The stripIndents function removes indentation from multi-line strings, which is useful for formatting warning messages or other text output. It takes a template string and any interpolated values as parameters, returning a string with leading whitespace removed from each line.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/stripIndents.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstripIndents`\n Options:\n - option1\n - option2\n`;\n```\n\n----------------------------------------\n\nTITLE: Modifying a React Component in Products Library\nDESCRIPTION: Example of making a change to a React component in a 'products' library, which will be used to demonstrate Nx's affected project detection.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport styles from './products.module.css';\n\nexport function Products() {\n  return (\n    <div className={styles['container']}>\n      <h1>Welcome to Products!</h1>\n      <p>This is a change. 👋</p>\n    </div>\n  );\n}\n\nexport default Products;\n```\n\n----------------------------------------\n\nTITLE: Running Nx Commands with Local Shell Script\nDESCRIPTION: Execute Nx commands using local nx shell script\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/installation/install-non-javascript.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./nx build my-project\n./nx generate application\n./nx graph\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced ESLint Rule Options\nDESCRIPTION: Extended configuration showing all available options for customizing the dependency-checks rule behavior including build targets, dependency checks, and ignored files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/eslint/dependency-checks.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"@nx/dependency-checks\": [\n    \"error\",\n    {\n      \"buildTargets\": [\"build\", \"custom-build\"],\n      \"checkMissingDependencies\": true,\n      \"checkObsoleteDependencies\": true,\n      \"checkVersionMismatches\": true,\n      \"ignoredDependencies\": [\"lodash\"],\n      \"ignoredFiles\": [\"webpack.config.js\", \"eslint.config.cjs\"],\n      \"includeTransitiveDependencies\": true,\n      \"useLocalPathsForWorkspaceDependencies\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Auto-Configuration Dependencies in Spring Boot\nDESCRIPTION: This snippet lists the dependencies required for auto-configuration in a Spring Boot project. It includes spring-boot-autoconfigure, spring-boot-actuator-autoconfigure, spring-boot-devtools, and spring-boot-testcontainers, which are crucial for automatic configuration of various application features and integration with testing containers.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/gradle/src/plugin-v1/utils/__mocks__/gradle-custom-dependencies.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nautoConfiguration\n+--- project :spring-boot-project:spring-boot-autoconfigure\n+--- project :spring-boot-project:spring-boot-actuator-autoconfigure\n+--- project :spring-boot-project:spring-boot-devtools\n\\--- project :spring-boot-project:spring-boot-testcontainers\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Playwright Plugin\nDESCRIPTION: Command to install the Nx Playwright plugin in Nx 18+ workspaces.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/playwright/playwright-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/playwright\n```\n\n----------------------------------------\n\nTITLE: Converting Angular Schematic to Nx Devkit Generator in TypeScript\nDESCRIPTION: Example demonstrating how to wrap an Angular schematic to create an Nx Devkit generator using the wrapAngularDevkitSchematic utility function.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/nx-devkit-angular-devkit.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const libraryGenerator = wrapAngularDevkitSchematic(\n  '@schematics/angular',\n  'library'\n);\n\nexport async function mygenerator(tree: Tree, options: Schema) {\n  await libraryGenerator(tree, options);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Global Nx Installation with pnpm\nDESCRIPTION: This command removes the global Nx package with pnpm. It helps users manage their global package environment effectively.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/installation/update-global-installation.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npnpm rm --global nx\n```\n\n----------------------------------------\n\nTITLE: Reading NX Configuration with Tree Parameter\nDESCRIPTION: Current recommended function signature for reading nx.json configuration that takes a Tree parameter. Returns NxJsonConfiguration or null.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/readNxJson.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadNxJson(tree: Tree): NxJsonConfiguration | null\n```\n\n----------------------------------------\n\nTITLE: Installing Nx S3 Cache Plugin\nDESCRIPTION: Command to add the @nx/s3-cache package to your Nx workspace\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/s3-cache/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/s3-cache\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests for Nx Dev Feature AI\nDESCRIPTION: Command to execute Jest unit tests for the nx-dev-feature-ai library within an Nx workspace. Uses the nx test command to run the test suite.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/feature-ai/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx test nx-dev-feature-ai\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Platform App Component\nDESCRIPTION: React component implementation that works across web and mobile platforms with navigation and store configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_41\n\nLANGUAGE: tsx\nCODE:\n```\nimport { rootStore } from '@aztro-daily-horoscope/store';\nimport {\n  ZodiacSignListContainer,\n  HoroscopeCardContainer,\n} from '@aztro-daily-horoscope/ui';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { Provider } from 'react-redux';\n\nconst Stack = createStackNavigator();\n\nconst App = () => {\n  return (\n    <>\n      <style type=\"text/css\">{`\n        @font-face {\n          font-family: 'MaterialIcons';\n          src: url(${require('react-native-vector-icons/Fonts/MaterialIcons.ttf')}) format('truetype');\n        }\n        @font-face {\n          font-family: 'MaterialCommunityIcons';\n          src: url(${require('react-native-vector-icons/Fonts/MaterialCommunityIcons.ttf')}) format('truetype');\n        }\n      `}</style>\n      <Provider store={rootStore}>\n        <NavigationContainer>\n          <Stack.Navigator>\n            <Stack.Screen\n              name=\"Zodiac Sign List\"\n              component={ZodiacSignListContainer}\n            />\n            <Stack.Screen\n              name=\"Horoscope Card\"\n              component={HoroscopeCardContainer}\n            />\n          </Stack.Navigator>\n        </NavigationContainer>\n      </Provider>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating esbuild Plugin 2 - TypeScript\nDESCRIPTION: This TypeScript snippet defines a second esbuild plugin which accepts options and modifies the build process accordingly. It sets a constant that can be utilized in the application's code.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/application-executor-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction plugin2({ someOption }) {\n  return {\n    name: 'plugin2',\n    setup(build) {\n      const options = build.initialOptions;\n      options.define.PLUGIN2_TEXT = JSON.stringify(someOption);\n    },\n  };\n}\n\nmodule.exports = plugin2;\n```\n\n----------------------------------------\n\nTITLE: Print Graph as JSON\nDESCRIPTION: Command to print the project graph as JSON to the console\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/graph.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx graph --print\n```\n\n----------------------------------------\n\nTITLE: Collecting Skipped Package Updates with Nx Migrate\nDESCRIPTION: Command to collect package updates from a specific Nx version while excluding previously applied migrations\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/advanced-update.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate latest --from=nx@16.0.0 --exclude-applied-migrations\n```\n\n----------------------------------------\n\nTITLE: .nx-dotnet.rc.json configuration file\nDESCRIPTION: This JSON file defines NuGet package configurations for Nx versions earlier than 17. It specifies any custom NuGet packages that should be used in the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-dotnet.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nugetPackages\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Vite Configuration for Applications\nDESCRIPTION: Full Vite configuration setup for applications in an Nx workspace including build, server, and test settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/vite/configure-vite.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types='vitest' />\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';\n\nexport default defineConfig({\n  root: __dirname,\n  build: {\n    outDir: '../../dist/apps/my-app',\n    reportCompressedSize: true,\n    commonjsOptions: {\n      transformMixedEsModules: true,\n    },\n  },\n  cacheDir: '../../node_modules/.vite/apps/my-app',\n  server: {\n    port: 4200,\n    host: 'localhost',\n  },\n\n  preview: {\n    port: 4300,\n    host: 'localhost',\n  },\n\n  plugins: [react(), nxViteTsPaths()],\n\n  test: {\n    reporters: ['default'],\n    coverage: {\n      reportsDirectory: '../../coverage/apps/my-app',\n      provider: 'v8',\n    },\n    globals: true,\n    cache: {\n      dir: '../../node_modules/.vitest/apps/my-app',\n    },\n    environment: 'jsdom',\n    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Project Reporter Conformance Rule\nDESCRIPTION: Create a conformance rule using the project-reporter to check if all projects have owners defined via Nx Owners.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/conformance/documents/create-conformance-rule.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProjectGraphProjectNode } from '@nx/devkit';\nimport { createConformanceRule, ProjectViolation } from '@nx/conformance';\n\nexport default createConformanceRule({\n  name: 'ensure-owners',\n  category: 'consistency',\n  description: 'Ensure that all projects have owners defined via Nx Owners.',\n  reporter: 'project-reporter',\n  implementation: async (context) => {\n    const violations: ProjectViolation[] = [];\n\n    for (const node of Object.values(\n      context.projectGraph.nodes\n    ) as ProjectGraphProjectNode[]) {\n      const metadata = node.data.metadata;\n      if (!metadata?.owners || Object.keys(metadata.owners).length === 0) {\n        violations.push({\n          sourceProject: node.name,\n          message: `This project currently has no owners defined via Nx Owners.`,\n        });\n      }\n    }\n\n    return {\n      severity: 'medium',\n      details: {\n        violations,\n      },\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing CI Workflow Changes\nDESCRIPTION: Commands to commit the new CI workflow file and push the changes to the remote repository.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/tutorial/circle.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit -am \"basic ci workflow\"\ngit push -u origin HEAD\n```\n\n----------------------------------------\n\nTITLE: Installing Missing Peer Dependency\nDESCRIPTION: Command to install a missing peer dependency\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/yarn-pnp.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D @babel/core\n```\n\n----------------------------------------\n\nTITLE: Generating Storybook Configuration for Specific Project\nDESCRIPTION: This example command generates Storybook configuration for the 'ui' project using TypeScript files for configuration. It exemplifies the basic usage of the generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/storybook-configuration-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:storybook-configuration ui\n```\n\n----------------------------------------\n\nTITLE: Defining NxAffectedConfig Interface in TypeScript\nDESCRIPTION: This snippet defines the NxAffectedConfig interface with a single optional property 'defaultBase'. The interface is marked as deprecated, and users are advised to use NxJsonConfiguration#defaultBase instead.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/NxAffectedConfig.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NxAffectedConfig {\n  defaultBase?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic nx.json Configuration File\nDESCRIPTION: Creates an empty nx.json configuration file which is required for Nx to work. This is the minimal configuration needed to start using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/manual.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Connecting Nx Workspace to Nx Cloud\nDESCRIPTION: Command to connect an existing Nx workspace to Nx Cloud for enhanced CI capabilities like remote caching and task distribution.\nSOURCE: https://github.com/nrwl/nx/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx connect\n```\n\n----------------------------------------\n\nTITLE: Generating a Remix Route\nDESCRIPTION: Command to generate a new route for a Remix application in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/remix/documents/overview.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/remix:route apps/myapp/app/routes/admin\n```\n\n----------------------------------------\n\nTITLE: Building Buildable Libraries with Nx SWC - JSON and Shell\nDESCRIPTION: This snippet illustrates the configuration for building buildable libraries using the `@nx/js:swc` executor, specifying `external` as 'none'. It outputs the results to 'dist/libs/ts-lib'.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/swc-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"executor\": \"@nx/js:swc\",\n    \"options\": {\n      \"outputPath\": \"dist/libs/ts-lib\",\n      \"main\": \"libs/ts-lib/src/index.ts\",\n      \"tsConfig\": \"libs/ts-lib/tsconfig.lib.json\",\n      \"assets\": [\"libs/ts-lib/*.md\"],\n      \"external\": \"none\"\n    }\n  }\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx build ts-lib --external=none\n```\n\n----------------------------------------\n\nTITLE: Defining HasherContext Interface Properties in TypeScript\nDESCRIPTION: Interface definition for HasherContext that includes properties for task hashing, configuration management, and project graph handling in Nx. The interface contains five properties: hasher, nxJsonConfiguration, projectGraph, projectsConfigurations, and taskGraph.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/HasherContext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HasherContext {\n  hasher: TaskHasher;\n  nxJsonConfiguration: NxJsonConfiguration<string[] | \"*\">;\n  projectGraph: ProjectGraph;\n  projectsConfigurations: ProjectsConfigurations;\n  taskGraph: TaskGraph;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing 'init' Command in Nx CLI\nDESCRIPTION: This command adds Nx to any type of workspace. It installs nx, creates an nx.json configuration file, and optionally sets up remote caching. The command can be run directly using nx if installed globally, or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/init.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx init\n```\n\n----------------------------------------\n\nTITLE: Fastify Unit Test Implementation\nDESCRIPTION: Unit test example showing how to test Fastify plugins in isolation using Jest\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-02-28-bundling-a-node-api-with-fastify-esbuild-and-nx.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// src/app/app.spec.ts\n// This file is generated by Nx.\nimport Fastify, { FastifyInstance } from 'fastify';\nimport { app } from './app';\n\ndescribe('GET /', () => {\n let server: FastifyInstance; beforeEach(() => {\n server = Fastify();\n server.register(app);\n }); it('should respond with a message', async () => {\n const response = await server.inject({\n method: 'GET',\n url: '/',\n }); expect(response.json()).toEqual({ message: 'Hello API' });\n });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Angular Storybook\nDESCRIPTION: TypeScript configuration for Angular Storybook setup, including the paths to story files that should be included in the compilation process.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/one-storybook-for-all.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"emitDecoratorMetadata\": true\n  },\n  \"exclude\": [\"../**/*.spec.ts\"],\n  \"include\": [\"../../**/ui/**/src/lib/**/*.stories.ts\", \"*.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Node.js Projects with Nx\nDESCRIPTION: Commands to run unit tests for Node.js applications and libraries using Nx. Replace 'my-new-app' or 'my-new-lib' with the actual project name.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/node/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx test my-new-app\nnx test my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing Git Branch for CI Workflow\nDESCRIPTION: These Git commands create a new branch, commit the CI workflow changes, and push the branch to the remote repository for creating a pull request.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-existing-project.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit -m 'add CI workflow file'\ngit push origin add-workflow\n```\n\n----------------------------------------\n\nTITLE: Markdown Cards Layout for Deprecations\nDESCRIPTION: Structured markdown layout using cards to display deprecated features with links to relevant documentation or pull requests\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/16_0_0.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% cards cols=\"2\" %}\n{% card title=\"workspace-lint\" type=\"document\" url=\"https://github.com/nrwl/nx/pull/14287\" /%}\n{% card title=\"module federation utils from devkit public api\" type=\"external\" url=\"https://github.com/nrwl/nx/pull/16574\" /%}\n{% card title=\"Global implicitDependencies\" url=\"/deprecated/global-implicit-dependencies\" /%}\n{% card title=\"stylus style option for react and next\" type=\"external\" url=\"https://github.com/nrwl/nx/pull/16135\" /%}\n{% card title=\"@nrwl/tao package\" type=\"external\" url=\"https://github.com/nrwl/nx/pull/16550\" /%}\n{% /cards %}\n```\n\n----------------------------------------\n\nTITLE: Generating Circle CI Workflow File\nDESCRIPTION: Command to generate a default Circle CI workflow file using Nx generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/tutorial/circle.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx generate ci-workflow --ci=circleci\n```\n\n----------------------------------------\n\nTITLE: Device UDID Configuration\nDESCRIPTION: Configuration for targeting devices using specific UDID identifiers.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/build-ios-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nxcrun simctl list devices available\n```\n\nLANGUAGE: json\nCODE:\n```\n    \"build-ios\": {\n      \"executor\": \"@nx/react-native:build-ios\",\n      \"options\": {\n        \"udid\": \"device udid\"\n      }\n    }\n```\n\nLANGUAGE: bash\nCODE:\n```\nnx build-ios <app-name> --udid=\"device udid\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Project Directory Structure with Treeview\nDESCRIPTION: A treeview representation showing the file structure of a repository with three libraries and their configuration files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/reduce-repetitive-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: treeview\nCODE:\n```\nrepo/\n├── libs/\n│   └── lib1/\n│   │   ├── tsconfig.lib.json\n│   │   └── project.json\n│   └── lib2/\n│   │   ├── tsconfig.lib.json\n│   │   └── project.json\n│   └── lib3/\n│       ├── tsconfig.lib.json\n│       └── project.json\n└── nx.json\n```\n\n----------------------------------------\n\nTITLE: Displaying Nx Logo with Dark Mode Support\nDESCRIPTION: HTML markup for displaying the Nx logo with support for light/dark mode using the picture element and media queries.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/webpack/README.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p style=\"text-align: center;\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Extending Global Webpack Config for Project-specific Use\nDESCRIPTION: This example shows how to extend a global webpack configuration for a specific project by importing the root configuration and applying it first before adding project-specific customizations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/custom-builder-configs.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport rootMain from '../../../.storybook/main';\n\nconst config: StorybookConfig = {\n  ...rootMain,\n  stories: ...,\n  addons: ...,\n  framework: {\n    name: '@storybook/react-webpack5',\n    options: {},\n  },\n  webpackFinal: async (config, { configType }) => {\n    // apply any global webpack configs that might have been specified in .storybook/main.js\n    if (rootMain.webpackFinal) {\n      config = await rootMain.webpackFinal(config, { configType });\n    }\n    // add your own webpack tweaks if needed\n    return config;\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using nxE2EPreset for Playwright Configuration in Nx\nDESCRIPTION: TypeScript configuration using nxE2EPreset for Playwright in an Nx workspace, including custom options and overrides.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/playwright/documents/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport { nxE2EPreset } from '@nx/playwright/preset';\nimport { workspaceRoot } from '@nx/devkit';\n\n// For CI, you may want to set BASE_URL to the deployed application.\nconst baseURL = process.env['BASE_URL'] || 'http://localhost:4200';\n\n/**\n * Read environment variables from file.\n * https://github.com/motdotla/dotenv\n */\n// require('dotenv').config();\n\n/**\n * See https://playwright.dev/docs/test-configuration.\n */\nexport default defineConfig({\n  ...nxE2EPreset(__filename, { testDir: './e2e' }),\n  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */\n  use: {\n    baseURL,\n    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */\n    trace: 'on-first-retry',\n  },\n  /* Run your local dev server before starting the tests */\n  webServer: {\n    command: 'npx nx serve <your-app-name>',\n    url: baseURL,\n    reuseExistingServer: !process.env.CI,\n    cwd: workspaceRoot,\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  ...nxE2EPreset(__filename, {\n    testDir: './e2e',\n    includeMobileBrowsers: true, // includes mobile Chrome and Safari\n    includeBrandedBrowsers: true, // includes Google Chrome and Microsoft Edge\n  }),\n  // other settings\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = nxE2EPreset(__filename, {\n  testDir: './e2e',\n  includeMobileBrowsers: true, // includes mobile Chrome and Safari\n  includeBrandedBrowsers: true, // includes Google Chrome and Microsoft Edge\n});\nexport default defineConfig({\n  ...config\n  retries: 3,\n  reporters: [...config.reporters, /* other reporter settings */],\n});\n```\n\n----------------------------------------\n\nTITLE: Get Jest Projects Async (Nx 18+)\nDESCRIPTION: This TypeScript code demonstrates how to use the `getJestProjectsAsync` utility function from `@nx/jest` to dynamically retrieve a list of paths to all Jest configuration files in the workspace.  It also shows how to manually add additional Jest projects not identified by the function.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/jest/documents/overview.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getJestProjectsAsync } from '@nx/jest';\n\nexport default async () => ({\n  projects: [\n    ...(await getJestProjectsAsync()),\n    '<rootDir>/path/to/jest.config.ts',\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Skipping Remote Caching from Nx Cloud\nDESCRIPTION: This command shows how to skip only remote caching from Nx Cloud while still using local cache. The --no-cloud flag prevents the task from using cached results stored in Nx Cloud.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/skipping-cache.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx build --no-cloud\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate Output Directories for Different Build Tasks\nDESCRIPTION: JSON configuration showing how to separate output directories for JavaScript and CSS builds to improve clarity.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-08-02-nx-14-5-cypess-v10-output-globs-linter-perf-react-tailwind-support.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build-js\": {\n    \"outputs\": [\"dist/libs/mylib/js\"]\n  },\n  \"build-css\": {\n    \"outputs\": [\"dist/libs/mylib/css\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Projects in Nx using JSON\nDESCRIPTION: This JSON code serves to configure individual project folders within an Nx workspace by assigning a name to each folder, establishing foundational metadata needed for dependency analysis. The primary dependency is Nx 15.3, which enables nested project recognition. The key parameter is the 'name' which represents the folder’s identifier. This setup does not produce any direct outputs but is preparatory for running dependency analyses with 'nx graph'.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/identify-dependencies-between-folders.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"[name_of_the_folder]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring @nx/gradle Plugin in nx.json\nDESCRIPTION: JSON configuration for the @nx/gradle plugin in nx.json, specifying custom target names for test, classes, and build tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-04-19-manage-your-gradle.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/gradle\",\n      \"options\": {\n        \"testTargetName\": \"test\",\n        \"classesTargetName\": \"classes\",\n        \"buildTargetName\": \"build\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Implicit Dependency in Nx\nDESCRIPTION: Example of creating an implicit dependency between two projects that is not associated with any specific file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/project-graph-plugins.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  source: 'existing-project',\n  target: 'new-project',\n  dependencyType: DependencyType.implicit,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jest Unit Tests in Nx Workspace\nDESCRIPTION: Command for executing Jest unit tests for the nx-dev-data-access-packages library using the Nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/data-access-packages/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx test nx-dev-data-access-packages\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure - Bash\nDESCRIPTION: Shows the basic directory structure of a TutorialKit project, highlighting key configuration files and content locations.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── astro.config.mjs    # TutorialKit uses Astro 🚀 (https://astro.build)\n├── src\n│   ├── ...\n│   ├── content\n│   │   └── tutorial    # Your tutorial content lives here\n│   └── templates       # Your templates (see below for more information)\n├── public\n│   ├── favicon.svg\n│   └── logo.svg        # Default logo used in top left for your tutorial\n├── ...\n├── theme.ts            # Customize the theme of the tutorial\n└── uno.config.ts       # UnoCSS config (https://unocss.dev/)\n```\n\n----------------------------------------\n\nTITLE: Setting up Create Package with Nx Generator - Shell\nDESCRIPTION: This command runs the generator to set up a new create package associated with an existing Nx plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/create-install-package.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g create-package create-my-plugin --project my-plugin\n```\n\n----------------------------------------\n\nTITLE: JSON Schema allOf Multiple Conditions\nDESCRIPTION: Example of using allOf to enforce multiple conditions on a numeric value\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"a\": {\n    \"type\": \"number\",\n    \"allOf\": [{ \"multipleOf\": 5 }, { \"multipleOf\": 3 }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Angular Libraries\nDESCRIPTION: These commands generate standalone Angular libraries for products, orders, and shared UI components. They create separate library projects within the Nx workspace for better code organization and reusability.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/angular:library libs/products --standalone\nnpx nx g @nx/angular:library libs/orders --standalone\nnpx nx g @nx/angular:library libs/shared/ui --standalone\n```\n\n----------------------------------------\n\nTITLE: Add Nx Plugin to Configure Automatic Caching\nDESCRIPTION: Use the command to add @nx/vite plugin. It automatically detects configuration files and configures caching settings in sync with the vite.config.ts file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/cache-task-results.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx add @nx/vite\n```\n\n----------------------------------------\n\nTITLE: Reverting a Failed Nx Update\nDESCRIPTION: Git commands to reset and clean workspace after a failed migration\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/advanced-update.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngit reset --hard\ngit clean -fd\n```\n\n----------------------------------------\n\nTITLE: Starting host Storybook with Nx\nDESCRIPTION: Shell command to start the host Storybook that will embed the composed Storybooks. This should be run after starting the composed Storybooks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/storybook-composition-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx storybook main-host\n```\n\n----------------------------------------\n\nTITLE: Defining CreateNodes<T> Type Alias in TypeScript\nDESCRIPTION: Defines the CreateNodes type alias as a tuple containing a file pattern string and a node creation function. This type is marked as deprecated in favor of CreateNodesV2, with a detailed migration timeline across Nx versions 19.2 through 22.X.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/CreateNodes.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nƬ **CreateNodes**\\<`T`\\>: readonly [projectFilePattern: string, createNodesFunction: CreateNodesFunction\\<T\\>]\n```\n\n----------------------------------------\n\nTITLE: Default Browserslist Configuration in Nx Applications\nDESCRIPTION: The default browserslist configuration shipped with applications generated by official Nx generators. This configuration targets modern browsers to reduce file size by avoiding unnecessary polyfills.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/browser-support.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlast 1 Chrome version\nlast 1 Firefox version\nlast 2 Edge major versions\nlast 2 Safari major version\nlast 2 iOS major versions\nFirefox ESR\nnot IE 9-11\n```\n\n----------------------------------------\n\nTITLE: Generators Configuration Example\nDESCRIPTION: This snippet illustrates how to configure default values for generators within a project's configuration. It sets the 'style' option to 'scss' for the '@nx/react' library generator. The configuration is defined within the `generators` property of the `ProjectConfiguration` interface.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ProjectConfiguration.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"@nx/react\": {\n    \"library\": {\n      \"style\": \"scss\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Task Sync Generator with Project Graph\nDESCRIPTION: This TypeScript code implements a task sync generator that uses the Nx project graph to generate license files for each project. It retrieves the project graph using `createProjectGraphAsync` and then writes a 'license.txt' file to each project's root directory. An outOfSyncMessage is returned when projects are missing the license.txt file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/create-sync-generator.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tree, createProjectGraphAsync } from '@nx/devkit';\nimport { SyncGeneratorResult } from 'nx/src/utils/sync-generators';\n\nexport async function mySyncGenerator(\n  tree: Tree\n): Promise<SyncGeneratorResult> {\n  const projectGraph = await createProjectGraphAsync();\n  Object.values(projectGraph.nodes).forEach((project) => {\n    tree.write(\n      joinPathFragments(project.data.root, 'license.txt'),\n      `${project.name} uses the Acme Corp license.`\n    );\n  });\n  return {\n    outOfSyncMessage: 'Some projects are missing a license.txt file.',\n  };\n}\n\nexport default mySyncGenerator;\n```\n\n----------------------------------------\n\nTITLE: Generating a Local Nx Plugin with nx-plugin\nDESCRIPTION: Command to generate a new local Nx plugin within your workspace using the @nrwl/nx-plugin generator. This creates a new library with pre-configured setup for developing custom Nx plugins.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-08-what-is-new-in-nx-13-10.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nrwl/nx-plugin:plugin --name=workspace-extensions\n```\n\n----------------------------------------\n\nTITLE: Commit and Push Changes with Git\nDESCRIPTION: This snippet shows the Git commands to add all changes, commit them with a message, and push the branch to the remote repository. It prepares the changes for a pull request.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/3r-fast-ci/4-open-pr/content.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit -m 'add CI workflow file'\ngit push origin add-workflow\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Slice for Likes Feature\nDESCRIPTION: Redux slice implementation for managing likes state with entity adapter\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-08-state-management.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createEntityAdapter,\n  createSelector,\n  createSlice,\n  EntityState,\n} from '@reduxjs/toolkit';\n\nexport const LIKES_FEATURE_KEY = 'likes';\n\nexport interface LikesEntity {\n  id: string;\n  content: string;\n  dateAdded: number;\n}\n\nexport type LikesState = EntityState<LikesEntity>;\n\nexport const likesAdapter = createEntityAdapter<LikesEntity>();\n\nexport const initialLikesState: LikesState = likesAdapter.getInitialState();\n\nexport const likesSlice = createSlice({\n  name: LIKES_FEATURE_KEY,\n  initialState: initialLikesState,\n  reducers: {\n    like: likesAdapter.addOne,\n    remove: likesAdapter.removeOne,\n    clear: likesAdapter.removeAll,\n  },\n});\n\nexport const likesReducer = likesSlice.reducer;\n\nexport const likesActions = likesSlice.actions;\n\nconst { selectAll } = likesAdapter.getSelectors();\n\nconst getlikesState = <ROOT extends { likes: LikesState }>(\n  rootState: ROOT\n): LikesState => rootState[LIKES_FEATURE_KEY];\n\nconst selectAllLikes = createSelector(getlikesState, selectAll);\n\nexport const likesSelectors = {\n  selectAllLikes,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Custom Node Version in Nx Cloud Workflow\nDESCRIPTION: Demonstrates how to install a custom Node.js version in an Nx Cloud workflow using a pre-built step. This requires a specific minimum image version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nlaunch-templates:\n  node-21:\n    resource-class: 'docker_linux_amd64/medium'\n    # note the image version of v9,\n    # earlier versions of the base image will not work\n    image: 'ubuntu22.04-node20.11-v9'\n    init-steps:\n      - name: Checkout\n        uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/checkout/main.yaml'\n      - name: Install Node\n        # note the step is only released as of v4 of the workflow steps\n        uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/install-node/main.yaml'\n        inputs:\n          # can omit value if a '.nvmrc' file is within the root of the repo\n          node_version: '21'\n```\n\n----------------------------------------\n\nTITLE: Implementing In-Memory Database for Todos\nDESCRIPTION: Creates an in-memory database implementation with basic CRUD operations for managing todos. Includes TypeScript interfaces for Todo and DB structures.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-15-qwikify-your-dev.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Todo {\n  id: number;\n  message: string;\n}\n\ninterface DB {\n  store: Record<string, any[]>;\n  get: (storeName: string) => any[];\n  set: (storeName: string, value: any[]) => boolean;\n  add: (storeName: string, value: any) => boolean;\n}\nexport const db: DB = {\n  store: { todos: [] },\n  get(storeName) {\n    return db.store[storeName];\n  },\n  set(storeName, value) {\n    try {\n      db.store[storeName] = value;\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n  add(storeName, value) {\n    try {\n      db.store[storeName].push(value);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Removing Tailwind Config from nx.json Executor Target Defaults\nDESCRIPTION: This snippet illustrates the removal of 'tailwindConfig' from the default options of the ng-packagr-lite executor found in the nx.json configuration. No additional dependencies are needed, as the focus is solely on adjusting the default configuration for Angular packages using NX.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-2-0/remove-tailwind-config-from-ng-packagr-executors.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"@nx/angular:ng-packagr-lite\": {\n      \"options\": {\n        \"project\": \"{projectRoot}/ng-package.json\",\n        \"tailwindConfig\": \"{projectRoot}/tailwind.config.js\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"@nx/angular:ng-packagr-lite\": {\n      \"options\": {\n        \"project\": \"{projectRoot}/ng-package.json\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Unit Tests using Nx and Jest\nDESCRIPTION: This snippet provides the command to run unit tests for the documentation-ui-header library using Nx and Jest. The command utilizes the Nx CLI to initiate the test process, ensuring that all tests written are executed and results returned. No additional dependencies are mentioned, but having Nx and Jest properly configured is required for functionality.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/ui-common/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx test documentation-ui-header\n```\n\n----------------------------------------\n\nTITLE: Git Workflow Commands for PR Creation\nDESCRIPTION: The shell snippet contains Git commands to add changes, commit them with a message for adding a CI workflow file, and push changes to a new branch named 'add-workflow'. This process prepares the repository for opening a new pull request on GitHub, which can trigger CI runs monitored by Nx Cloud.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/typescript-packages.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit -m 'add CI workflow file'\ngit push origin add-workflow\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Nuxt Plugin\nDESCRIPTION: Command to add the Nx Nuxt plugin to an existing Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/nuxt/nuxt-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/nuxt\n```\n\n----------------------------------------\n\nTITLE: ESLint Config Before Update (JavaScript)\nDESCRIPTION: This code snippet shows the original ESLint configuration file before the update. It defines configurations for TypeScript and JavaScript files but does not include .cjs, .mjs, .cts, or .mts extensions. It uses `@eslint/eslintrc` for compatibility and `@nx/eslint-plugin` for Nx-specific linting rules. The snippet defines the configuration using the FlatCompat API.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/eslint/src/migrations/update-20-3-0/add-file-extensions-to-overrides.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { FlatCompat } = require('@eslint/eslintrc');\nconst js = require('@eslint/js');\nconst nxEslintPlugin = require('@nx/eslint-plugin');\n\nconst compat = new FlatCompat({\n  baseDirectory: __dirname,\n  recommendedConfig: js.configs.recommended,\n});\n\nmodule.exports = [\n  ...compat\n    .config({\n      extends: ['plugin:@nx/typescript'],\n    })\n    .map((config) => ({\n      ...config,\n      files: ['**/*.ts', '**/*.tsx'],\n      rules: {\n        ...config.rules,\n      },\n    })),\n  ...compat\n    .config({\n      extends: ['plugin:@nx/javascript'],\n    })\n    .map((config) => ({\n      ...config,\n      files: ['**/*.js', '**/*.jsx'],\n      rules: {\n        ...config.rules,\n      },\n    })),\n];\n```\n\n----------------------------------------\n\nTITLE: Running React Native Application on iOS\nDESCRIPTION: This command runs the React Native application named 'mobile' on an iOS simulator or connected device. It uses the Nx CLI to execute the `run-ios` target, handling building and deploying the application to the iOS environment (Mac only).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-native.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpx nx run-ios mobile\n```\n\n----------------------------------------\n\nTITLE: Ensure Owners Rule Configuration\nDESCRIPTION: This JSON snippet displays the configuration for the `ensure-owners` rule within the `@nx/conformance` plugin. This rule enforces that every project has an owner defined for the `@nx/owners` plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/conformance/conformance-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"conformance\": {\n    \"rules\": [\n      {\n        \"rule\": \"@nx/conformance/ensure-owners\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fly.io Service Port\nDESCRIPTION: This TOML configuration sets the internal port for the Fly.io service, which should match the port specified in the Dockerfile.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/node-server-fly-io.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[[services]]\nhttp_checks = []\ninternal_port = 3000 # Make sure this matches the port in Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the blog post defining metadata like title, authors, tags, and description.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-05-16-introducing-the-nx-champions-program.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'Introducing the Nx Champions Program'\nslug: 'introducing-the-nx-champions-program'\nauthors: ['Isaac Mann']\ncover_image: '/blog/images/2023-05-16/cVGLh0H-uOpy7-D6.png'\ntags: [nx]\ndescription: Introducing the Nx Champions program, recognizing and supporting community leaders in Nx expertise, content creation, and community bridging.\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Outputs in package.json\nDESCRIPTION: Define cached output directories for a build target in a project's package.json file, specifying which directories should be preserved and cached\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/how-caching-works.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"myapp\",\n  \"nx\": {\n    \"targets\": {\n      \"build\": {\n        \"outputs\": [\"{projectRoot}/build\", \"{projectRoot}/public/build\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Module Boundaries Rule\nDESCRIPTION: Configure the enforce-module-boundaries ESLint rule in the root configuration file to control project dependencies\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/enforce-module-boundaries.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"plugins\": [\"@nx\"],\n  \"rules\": {\n    \"@nx\\/enforce-module-boundaries\": [\n      \"error\",\n      {\n        /* options */\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Apollo Client Setup\nDESCRIPTION: Configuration of Apollo Client in React application\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StrictMode } from 'react';\nimport * as ReactDOM from 'react-dom/client';\nimport App from './app/app';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql',\n  cache: new InMemoryCache(),\n});\n\nroot.render(\n  <StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Single Data Persistence Operator Import Migration\nDESCRIPTION: Shows how to migrate a single data persistence operator import from @nx/angular to @ngrx/router-store/data-persistence\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-21-0-0/change-data-persistence-operators-imports-to-ngrx-router-store-data-persistence.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { fetch } from '@nx/angular';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@angular/core';\nimport { fetch } from '@ngrx/router-store/data-persistence';\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Uploader Image for Nx Agents in Workflow Controller\nDESCRIPTION: YAML configuration for enabling the dedicated long-running log uploader that can upload logs even if the main agent container crashes, improving reliability of Nx Agents.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/release-notes.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: LOG_UPLOADER_IMAGE\n  value: 'us-east1-docker.pkg.dev/nxcloudoperations/nx-cloud/nx-cloud-workflow-log-uploader'\n```\n\n----------------------------------------\n\nTITLE: Generated CODEOWNERS file (YAML)\nDESCRIPTION: This YAML snippet shows the generated CODEOWNERS file based on the configurations defined in nx.json. It maps file paths within the repository to specific code owners. The paths are relative to the repository's root. The owners are typically GitHub usernames or team names.  This file is used by Git platforms like GitHub to determine who is responsible for reviewing changes to specific files or directories.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/powerpack/owners.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Joe's Rust projects\n/packages/rust-api @joelovesrust\n/packages/experimental-rust @joelovesrust\n\n# Finance projects\n/packages/finance-ui @finance-team\n/packages/finance-data @finance-team\n\n# Alphabet soup\n/packages/admin @alice @bob @cecil\n/packages/books @alice @bob @cecil\n/packages/cart @alice @bob @cecil\n\n# CI Workflows\n.github/workflows/**/* @devops\n\n/packages/my-project/ @ahmed @petra\n/packages/my-project/package.json @ahmed\n```\n\n----------------------------------------\n\nTITLE: Executing 'report' Command in Nx CLI\nDESCRIPTION: This command runs the 'report' functionality in Nx, which generates version information for issue reporting. It can be executed directly if Nx is installed globally, or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/report.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx report\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Group Configuration in YAML\nDESCRIPTION: YAML configuration block that defines fixed-group-1 as a minor change category.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/src/command-line/release/config/test-files/version-plan-5.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfixed-group-1: minor\n```\n\n----------------------------------------\n\nTITLE: Enforcing Conformance Rules in CI (Nx Cloud Enterprise)\nDESCRIPTION: This YAML snippet demonstrates how to enforce conformance rules in a CI environment using Nx Cloud Enterprise. It leverages the `nx-cloud` CLI to run the `conformance:check` command, integrating with Nx Cloud's organization-level conformance rule configuration. This command also captures logs for conformance checks in the Nx Cloud dashboard.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/powerpack/conformance.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Enforce all conformance rules\n  run: npx nx-cloud record -- npx nx-cloud conformance:check\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Level tsconfig.json in Nx\nDESCRIPTION: Main TypeScript configuration file that extends the base config and provides references to other project-specific TypeScript configurations. This file is primarily for IDE support and doesn't contain direct compiler options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/switch-to-workspaces-project-references.md#2025-04-22_snippet_7\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"extends\": \"../../tsconfig.base.json\",\n  \"files\": [], // intentionally empty\n  \"references\": [\n    // All project dependencies\n    // UPDATED BY NX SYNC\n    // This project's other tsconfig.*.json files\n    {\n      \"path\": \"./tsconfig.lib.json\"\n    },\n    {\n      \"path\": \"./tsconfig.spec.json\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Picture Element with Light/Dark Mode Support in Markdown\nDESCRIPTION: HTML snippet embedded in Markdown that creates a responsive picture element displaying the Nx logo. It provides different logo sources based on the user's color scheme preference (light/dark mode).\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"text-align: center;\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Defining Film Component Props in React Native\nDESCRIPTION: This TypeScript code defines the props for a Film component, including Redux state and dispatch mappings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AnyAction, ThunkDispatch } from '@reduxjs/toolkit';\nimport {\n  filmsActions,\n  filmsSelectors,\n  RootState,\n} from '@studio-ghibli-search-engine/store';\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    getFilm: (id: string) => filmsSelectors.selectFilmById(id)(state),\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<RootState, void, AnyAction>\n) => {\n  return {\n    fetchFilms() {\n      dispatch(filmsActions.fetchFilms());\n    },\n  };\n};\n\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>;\ntype mapDispatchToPropsType = ReturnType<typeof mapDispatchToProps>;\n\ntype FilmProps = mapStateToPropsType & mapDispatchToPropsType;\n\nexport { mapStateToProps, mapDispatchToProps };\nexport type { FilmProps };\n```\n\n----------------------------------------\n\nTITLE: Defining Options and Configurations with Tokens in nx.json\nDESCRIPTION: This snippet shows how to use the `{workspaceRoot}` and `{projectRoot}` tokens within options and configurations defined in the `targetDefaults` section of `nx.json`.  It configures the main entry point and tsconfig file for a TypeScript project and defines inputs and outputs for the build target.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"@nx/js:tsc\": {\n      \"options\": {\n        \"main\": \"{projectRoot}/src/index.ts\"\n      },\n      \"configurations\": {\n        \"prod\": {\n          \"tsconfig\": \"{projectRoot}/tsconfig.prod.json\"\n        }\n      },\n      \"inputs\": [\"prod\"],\n      \"outputs\": [\"{workspaceRoot}/{projectRoot}\"]\n    },\n    \"build\": {\n      \"inputs\": [\"prod\"],\n      \"outputs\": [\"{workspaceRoot}/{projectRoot}\"],\n      \"cache\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Dependency Rules in Nx with ESLint - JSON Configuration\nDESCRIPTION: This JSON configuration snippet illustrates how to enforce module boundaries using ESLint in an Nx workspace. It specifies dependency constraints to maintain clean architectural boundaries between library types like feature, UI, and util. This setup prevents unintended dependencies and enforces architectural guidelines in the codebase.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/decisions/project-dependency-rules.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"root\": true,\n  \"ignorePatterns\": [\"**/*\"],\n  \"plugins\": [\"@nx\"],\n  \"overrides\": [\n    {\n      \"files\": [\"*.ts\", \"*.tsx\", \"*.js\", \"*.jsx\"],\n      \"rules\": {\n        \"@nx/enforce-module-boundaries\": [\n          \"error\",\n          {\n            \"allow\": [],\n            \"depConstraints\": [\n              {\n                \"sourceTag\": \"type:feature\",\n                \"onlyDependOnLibsWithTags\": [\n                  \"type:feature\",\n                  \"type:ui\",\n                  \"type:util\"\n                ]\n              },\n              {\n                \"sourceTag\": \"type:ui\",\n                \"onlyDependOnLibsWithTags\": [\"type:ui\", \"type:util\"]\n              },\n              {\n                \"sourceTag\": \"type:util\",\n                \"onlyDependOnLibsWithTags\": [\"type:util\"]\n              }\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Tailwind CSS Directives in Component Styles\nDESCRIPTION: This CSS snippet demonstrates the use of Tailwind CSS @apply directive and theme function to style a card component in a buildable library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n.card {\n  @apply p-lg flex h-full flex-col shadow-md hover:shadow-lg;\n\n  background-color: theme('colors.secondary.light');\n}\n\n.card-title {\n  @apply text-lg font-bold;\n\n  padding-bottom: theme('spacing.md');\n}\n\n.card-content {\n  @apply mb-xl flex-1;\n}\n```\n\n----------------------------------------\n\nTITLE: Enable GitHub Release Creation - Project Level - JSON\nDESCRIPTION: This JSON snippet configures Nx Release to automatically create GitHub releases for individual projects within the workspace. It sets the `release.changelog.projectChangelogs.createRelease` property to `github` in `nx.json`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/automate-github-releases.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"changelog\": {\n      \"projectChangelogs\": {\n        \"createRelease\": \"github\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated Angular ESLint Rules in JSON Config Files\nDESCRIPTION: This change involves removing deprecated Angular ESLint rules from ESLint configuration files to comply with the updated standards in version 19.0.0. The rules `@angular-eslint/no-host-metadata-property`, `@angular-eslint/sort-ngmodule-metadata-arrays`, and `@angular-eslint/prefer-standalone-component` are removed from files such as `.eslintrc.json` and others similar. No specific inputs are required, and the output is a cleaned-up configuration without these rules.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-2-0/remove-angular-eslint-rules.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"files\": [\"*.ts\"],\n      \"rules\": {\n        \"@angular-eslint/no-host-metadata-property\": [\"error\"],\n        \"@angular-eslint/sort-ngmodule-metadata-arrays\": [\"error\"],\n        \"@angular-eslint/prefer-standalone-component\": [\"error\"]\n      }\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"files\": [\"*.ts\"],\n      \"rules\": {}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Angular Storybook Stories\nDESCRIPTION: This command uses the Nx CLI to generate Storybook stories for a specified Angular project. It requires the project name and can optionally set up interaction tests.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/stories-examples.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:stories project-name\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Route Component with Qwik\nDESCRIPTION: Creates a Qwik component that handles todo list display and management using the extracted data access functions. Implements route loader for fetching todos and action for adding new todos with form validation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-15-qwikify-your-dev.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useContext, useTask$ } from '@builder.io/qwik';\nimport {\n  Form,\n  routeAction$,\n  routeLoader$,\n  z,\n  zod$,\n} from '@builder.io/qwik-city';\nimport { addTodo, getTodos, TodoContext } from '@acme/data-access';\n\nexport const useGetTodos = routeLoader$(() => getTodos());\nexport const useAddTodo = routeAction$(\n  (todo) => addTodo(todo),\n  zod$({ id: z.string(), message: z.string() })\n);\nexport default component$(() => {\n  const todoStore = useContext(TodoContext);\n  const persistedTodos = useGetTodos();\n  const addTodoAction = useAddTodo();\n  useTask$(({ track }) => {\n    track(() => persistedTodos.value);\n    if (persistedTodos.value) {\n      todoStore.todos = persistedTodos.value.todos;\n      todoStore.lastId =\n        todoStore.lastId > persistedTodos.value.lastId\n          ? todoStore.lastId\n          : persistedTodos.value.lastId;\n    }\n  });\n  return (\n    <div>\n      <h1>Todos</h1>\n      {todoStore.todos.map((t) => (\n        <div key={`todo-${t.id}`}>\n          <label>\n            <input type=\"checkbox\" /> {t.message}\n          </label>\n        </div>\n      ))}\n      <Form action={addTodoAction}>\n        <input type=\"hidden\" name=\"id\" value={todoStore.lastId + 1} />\n        <input type=\"text\" name=\"message\" />\n        <button type=\"submit\">Add</button>\n      </Form>\n      {addTodoAction.value?.success && <p>Todo added!</p>}\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Preset with npx\nDESCRIPTION: This shell command is used to create a new Nx workspace with a custom plugin preset. The preset is specified by the name given during the plugin's publication to an npm registry. This enables quick setup of workspaces with pre-configured settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/create-preset.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace my-workspace --preset=my-plugin-name\n```\n\n----------------------------------------\n\nTITLE: Validating Strings with maxLength in JSON Schema\nDESCRIPTION: This example illustrates the use of the 'maxLength' property in a JSON schema to ensure a string value does not exceed a maximum length. Here, the value must be at most 10 characters long.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": {\n    \"type\": \"string\",\n    \"maxLength\": 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from Angular CLI to Nx\nDESCRIPTION: Command to add Nx to an existing Angular CLI workspace. This initiates an automated migration process that transforms the Angular CLI setup into an Nx workspace while preserving existing configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-06-09-nx-14-2-angular-v14-storybook-update-lightweight-nx-and-more.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nng add @nrwl/angular\n```\n\n----------------------------------------\n\nTITLE: Generating React App with Webpack\nDESCRIPTION: Command to generate a new React application using Webpack bundler in an existing Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/plugin-overview.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:app apps/my-app --bundler=webpack\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Typescript for Compodoc\nDESCRIPTION: Configuration of the .storybook/tsconfig.json file to include component files in the TypeScript compilation for Compodoc to process JSDoc comments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/angular-storybook-compodoc.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"emitDecoratorMetadata\": true,\n    \"resolveJsonModule\": true\n  },\n  \"files\": [\"../src/polyfills.ts\"],\n  \"exclude\": [\"../**/*.spec.ts\"],\n  \"include\": [\"../src/**/*.stories.ts\", \"../src/**/*.component.ts\", \"*.js\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Commit and Push Changes with Git\nDESCRIPTION: This snippet demonstrates how to stage, commit, and push changes to a remote Git repository, specifically for adding a CI workflow file. It uses `git add` to stage all changes, `git commit` to create a new commit with a descriptive message, and `git push` to push the local branch to the remote origin.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/3a-fast-ci/4-open-pr/content.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit -m 'add CI workflow file'\ngit push origin add-workflow\n```\n\n----------------------------------------\n\nTITLE: Defining Package Reference\nDESCRIPTION: Reference to the main Nx package name that this architecture-specific binary is built from.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/native-packages/darwin-arm64/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n@nx/nx\n```\n\n----------------------------------------\n\nTITLE: Create Workspace with Install Package\nDESCRIPTION: Creates a new workspace using a custom install package, simplifying the workspace creation process and making it more consistent.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-10-tailoring-nx-for-your-organization.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-org-workspace@latest react-monorepo --framework=react\n```\n\n----------------------------------------\n\nTITLE: Card Component Implementation\nDESCRIPTION: TypeScript class implementation for the card component with input properties\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'angular-tailwind-nx-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.css'],\n})\nexport class CardComponent {\n  @Input() title?: string;\n  @Input() url?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing createConfig from @nx/angular-rspack\nDESCRIPTION: Basic import statement for the createConfig function from the @nx/angular-rspack package.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rspack/create-config.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimport { createConfig } from '@nx/angular-rspack';\n```\n\n----------------------------------------\n\nTITLE: Updating App Component with Zodiac Sign List\nDESCRIPTION: Main App component implementation using the ZodiacSignList component and React Native Elements Header.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { ZodiacSignList } from '@aztro-daily-horoscope/ui';\nimport { Header } from '@rneui/base';\n\nconst App = () => {\n  return (\n    <>\n      <Header centerComponent={{ text: 'Daily Horoscope' }} />\n      <ZodiacSignList />\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Nx TypeScript Sync Prompt (Text)\nDESCRIPTION: This text represents the output from Nx when it detects that the TypeScript project references are out of sync. It prompts the user to synchronize the changes before proceeding with the build.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/2-smart-monorepo/6-sync-ts-references/content.mdx#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n NX   The workspace is out of sync\n\nThe @nx/js:typescript-sync sync generator identified 6 files in the workspace that are out of sync:\nBased on the workspace project graph, some TypeScript configuration files are missing project references to the projects they depend on or contain outdated project references.\n\nPlease note that having the workspace out of sync will result in an error in CI.\n\n? Would you like to sync the identified changes to get your workspace up to date? …\n❯ Yes, sync the changes and run the tasks\n  No, run the tasks without syncing the changes\n```\n\n----------------------------------------\n\nTITLE: Adding Styles to Angular Storybook Build\nDESCRIPTION: This configuration shows how to add stylesheets and style preprocessor options to the Storybook build for Angular projects. It includes options for styles and stylePreprocessorOptions.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/build-storybook-executor-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build-storybook\": {\n    \"executor\": \"@storybook/angular:build-storybook\",\n    \"outputs\": [\"{options.outputDir}\"],\n    \"options\": {\n      \"outputDir\": \"dist/storybook/ngapp\",\n      \"configDir\": \"apps/ngapp/.storybook\",\n      \"browserTarget\": \"ngapp:build-storybook\",\n      \"compodoc\": false,\n      \"styles\": [\"some-styles.css\"],\n      \"stylePreprocessorOptions\": {\n        \"includePaths\": [\"some-style-paths\"]\n      }\n    },\n    \"configurations\": {\n      \"ci\": {\n        \"quiet\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Package Installation Task in Nx (TypeScript)\nDESCRIPTION: This function runs npm or yarn install commands. It optimizes performance by skipping installation if package.json hasn't changed since the last run. The function takes parameters for the file system tree, forcing execution, specifying working directory, and choosing the package manager.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/installPackagesTask.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninstallPackagesTask(tree: Tree, alwaysRun?: boolean, cwd?: string, packageManager?: PackageManager): void\n```\n\n----------------------------------------\n\nTITLE: Passing Values Between Steps in Nx Cloud Workflow\nDESCRIPTION: Demonstrates how to pass values between steps in an Nx Cloud workflow by writing to the NX_CLOUD_ENV environment file. This example shows setting the PATH variable.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nlaunch-templates:\n  my-template-name:\n    init-steps:\n      - name: Set PATH\n        script: echo \"PATH=$HOME/.cargo/bin:$PATH\" >> $NX_CLOUD_ENV\n      - name: Check PATH\n        script: |\n          # now contains $HOME/.cargo/bin\n          echo $PATH \n          # can invoke cargo directly because it's in the PATH now. \n          cargo --version\n```\n\n----------------------------------------\n\nTITLE: Defining Horoscope Day Type\nDESCRIPTION: Defines the allowed values for the horoscope day parameter used in API calls.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AdhHoroscopeDay = 'today' | 'tomorrow' | 'yesterday';\n```\n\n----------------------------------------\n\nTITLE: Angular Rspack Markdown Table - Version Compatibility Matrix\nDESCRIPTION: Markdown table showing compatibility between Angular Rspack versions and corresponding Angular and Nx versions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/angular-nx-version-matrix.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Angular Rspack | Angular     | Nx                  |\n| -------------- | ----------- | ------------------- |\n| ~20.7.0        | **~19.2.0** | >= 20.8.1 <= latest |\n| ~20.6.0        | **~19.2.0** | >= 20.6.0 <= latest |\n```\n\n----------------------------------------\n\nTITLE: Generate Nx Plugin\nDESCRIPTION: Command to generate a local Nx plugin within an Nx workspace. This command allows developers to create custom plugins to automate and extend their Nx workspace functionalities.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-05-02-nx-v14-is-out-here-is-all-you-need-to-know.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nrwl/nx-plugin:plugin --name=workspace-extensions\n```\n\n----------------------------------------\n\nTITLE: Creating New Nx Workspace with Nuxt\nDESCRIPTION: Command to generate a new monorepo workspace with a Nuxt application using nx create-workspace\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nuxt/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest --preset=nuxt\n```\n\n----------------------------------------\n\nTITLE: Generate JavaScript Storybook Configuration\nDESCRIPTION: Command to generate Storybook configuration files using JavaScript instead of TypeScript.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vue/docs/storybook-configuration-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/vue:storybook-configuration ui --tsConfiguration=false\n```\n\n----------------------------------------\n\nTITLE: Project tsconfig.lib.json Configuration - JSONC\nDESCRIPTION: This JSONC snippet for a project's tsconfig.lib.json shows how it references its dependencies and specifies which files to include and exclude during compilation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/typescript-project-linking.md#2025-04-22_snippet_10\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    // Any overrides\n  },\n  \"include\": [\"src/**/*.ts\"],\n  \"exclude\": [\n    // exclude config and test files\n  ],\n  \"references\": [\n    // UPDATED BY NX SYNC\n    // tsconfig.lib.json files for project dependencies\n    {\n      \"path\": \"../utils/tsconfig.lib.json\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Shared UI Package.json\nDESCRIPTION: Basic package.json configuration for the shared UI library, marked as private for internal workspace use.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private\": true,\n  \"name\": \"shared-ui\",\n  \"description\": \"Shared UI components\",\n  \"scripts\": {},\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {},\n  \"devDependencies\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Svelte Application in TypeScript\nDESCRIPTION: TypeScript code to initialize the Svelte application by creating and mounting the main App component.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-svelte.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport App from './App.svelte';\n\nconst app = new App({\n  target: document.getElementById('app'),\n});\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Update Storybook Port (React project.json)\nDESCRIPTION: This JSON snippet configures the Storybook port for the React Storybook host application (`storybook-host-react`). The `port` option is set to `4402` to avoid conflicts when composing the Storybooks.  This configuration is placed in the `project.json` file of the library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/one-storybook-with-composition.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"targets\": {\n    // ...\n    \"storybook\": {\n      \"options\": {\n        \"port\": 4402\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Init Generator for Nx Plugin\nDESCRIPTION: Command to create an init generator for the nx-astro plugin using Nx's generator creation utility.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/tooling-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g generator src/generators/init\n```\n\n----------------------------------------\n\nTITLE: Configuring NxReactWebpackPlugin\nDESCRIPTION: Example demonstrating the configuration of NxReactWebpackPlugin in a webpack configuration file. This plugin adds React-specific features like SVGR support.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/webpack-plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { NxReactWebpackPlugin } = require('@nx/react/webpack-plugin');\nconst { join } = require('path');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    new NxReactWebpackPlugin({\n      svgr: false,\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Outputting build status in JSON format\nDESCRIPTION: This snippet shows how to output the build status in JSON format by setting the `json` option to `true`. The `interactive` option is set to `false` to ensure that the output is purely JSON without any interactive prompts. This is useful for scripting and automation.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/build-list-examples.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"build-list\": {\n      \"executor\": \"@nx/expo:build-list\",\n      \"options\": {\n        \"interactive\": false,\n        \"json\": true\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Tailwind CSS Theme in Nx Workspace\nDESCRIPTION: Custom Tailwind CSS configuration that overrides the default theme with a custom color palette and spacing values to be used throughout the application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  theme: {\n    colors: {\n      primary: {\n        light: '#5eead4',\n        DEFAULT: '#14b8a6',\n        dark: '#0f766e',\n      },\n      secondary: {\n        light: '#bae6fd',\n        DEFAULT: '#0ea5e9',\n        dark: '#0369a1',\n      },\n      white: '#ffffff',\n      black: '#000000',\n    },\n    spacing: {\n      sm: '0.5rem',\n      md: '1rem',\n      lg: '1.5rem',\n      xl: '2rem',\n    },\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Task Dependencies in nx.json\nDESCRIPTION: This JSON snippet shows how to configure task dependencies in the nx.json file, specifically for the 'build' and 'dev' targets. It ensures that dependent projects are built before the main project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasksRunnerOptions\": {\n      ...\n  },\n  ...\n  \"targetDefaults\": {\n    \"build\": {\n      ...\n      \"dependsOn\": [\"^build\"]\n    },\n    \"dev\": {\n      \"dependsOn\": [\"^build\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IDE Communication with Reactive Controllers in Lit\nDESCRIPTION: This snippet demonstrates how to use Reactive Controllers in Lit to handle communication with the IDE. It shows a root element that uses an IdeCommunicationController to manage and render generator schema data.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-06-29-nx-console-gets-lit.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('root-element')\nexport class Root extends LitElement {\n  icc: IdeCommunicationController;\n\n  constructor() {\n    super();\n    this.icc = new IdeCommunicationController(this);\n  }\n  render() {\n    return html`${JSON.stringify(this.icc.generatorSchema)}`;\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// ide-communication-controller.ts\nexport class IdeCommunicationController implements ReactiveController {\n  generatorSchema: GeneratorSchema | undefined;\n  constructor(private host: ReactiveControllerHost) {}\n  // ...\n  private handleMessageFromIde(message: InputMessage) {\n    // ...\n    this.generatorSchema = message.payload;\n    this.host.requestUpdate();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ModuleFederationConfig Interface Definition\nDESCRIPTION: TypeScript interface definition for ModuleFederationConfig showing all available configuration options for module federation setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/module-federation/documents/nx-module-federation-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ModuleFederationConfig {\n  name: string;\n  remotes?: Remotes;\n  library?: ModuleFederationLibrary;\n  exposes?: Record<string, string>;\n  shared?: SharedFunction;\n  additionalShared?: AdditionalSharedConfig;\n  disableNxRuntimeLibraryControlPlugin?: boolean;\n}\n\nexport type Remotes = Array<string | [remoteName: string, remoteUrl: string]>;\nexport type ModuleFederationLibrary = { type: string; name: string };\nexport type SharedFunction = (\n  libraryName: string,\n  sharedConfig: SharedLibraryConfig\n) => undefined | false | SharedLibraryConfig;\nexport interface SharedLibraryConfig {\n  singleton?: boolean;\n  strictVersion?: boolean;\n  requiredVersion?: false | string;\n  eager?: boolean;\n}\nexport type AdditionalSharedConfig = Array<\n  | string\n  | [libraryName: string, sharedConfig: SharedLibraryConfig]\n  | { libraryName: string; sharedConfig: SharedLibraryConfig }\n>;\n```\n\n----------------------------------------\n\nTITLE: Navigation Test with Multiple Assertions\nDESCRIPTION: Extended test example showing navigation testing with multiple assertions and handling new tab events.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-09-18-introducing-playwright-support-for-nx.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest.describe('navigation', () => {\n  test.beforeEach(async ({ page }) => {\n    // Go to the starting url before each test.\n    await page.goto('/');\n  });\n\n  test('has title', async ({ page }) => {\n    // Expect h1 to contain a substring.\n    expect(await page.locator('h1').innerText()).toContain('Welcome');\n  });\n\n  test('should go to documentation site', async ({ page, context }) => {\n    await page.getByTestId('documentation-link').click();\n    // Opening a new tab and waiting for the page to render\n    const pagePromise = context.waitForEvent('page');\n    const newPage = await pagePromise;\n    await newPage.waitForLoadState();\n    expect(await newPage.title()).toContain('Intro to Nx');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Dark/Light Mode Logo in HTML\nDESCRIPTION: HTML code for displaying a responsive logo that changes based on the user's color scheme preference, using the picture element with light and dark mode image sources.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nuxt/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"text-align: center;\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Options in nx.json\nDESCRIPTION: This snippet demonstrates how to configure default options for targets running a specific command, such as `vite build`, within the `targetDefaults` section of the `nx.json` file. It sets default options for the `build` target, assuming it runs `vite build`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"build\": {\n      \"options\": {\n        \"assetsInlineLimit\": 2048,\n        \"assetsDir\": \"static/assets\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Dimensional Module Boundaries in Nx\nDESCRIPTION: Advanced ESLint configuration combining both type and scope tags to enforce complex module boundaries across different application domains.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-12-17-mastering-the-project-boundaries-in-nx.md#2025-04-22_snippet_3\n\nLANGUAGE: json5\nCODE:\n```\n{\n  '@nrwl/nx/enforce-module-boundaries': [\n    'error',\n    {\n      depConstraints: [\n        {\n          sourceTag: 'scope:store',\n          onlyDependOnLibsWithTags: [\n            'scope:store',\n            'scope:shared',\n            'scope:core',\n          ],\n        },\n        {\n          sourceTag: 'scope:admin',\n          onlyDependOnLibsWithTags: [\n            'scope:admin',\n            'scope:shared',\n            'scope:core',\n          ],\n        },\n        {\n          sourceTag: 'scope:core',\n          onlyDependOnLibsWithTags: ['scope:shared'],\n        },\n        {\n          sourceTag: 'scope:shared',\n          onlyDependOnLibsWithTags: ['scope:shared'],\n        },\n      ],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering build status by platform\nDESCRIPTION: This snippet demonstrates how to filter the build status by specifying the `platform` option.  The available options are `ios`, `android`, and `all`. This configuration will only show build statuses for the iOS platform.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/build-list-examples.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"build-list\": {\n      \"executor\": \"@nx/expo:build-list\",\n      \"options\": {\n        \"platform\": \"ios\"\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Vite Package (Legacy)\nDESCRIPTION: Command to install the Nx Vite package for versions prior to Nx 18.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/vite/vite-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/vite\n```\n\n----------------------------------------\n\nTITLE: Composing Next.js Plugins with Nx 16+\nDESCRIPTION: Shows how to use the composePlugins utility introduced in Nx 16 to combine multiple Next.js plugins. Includes basic configuration setup with TypeScript types.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/next-config-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nconst { composePlugins, withNx } = require('@nx/next');\n/**\n * @type {import('@nx/next/plugins/with-nx').WithNxOptions}\n **/\nconst nextConfig = {\n  nx: {\n    // Set this to true if you would like to to use SVGR\n    // See: https://github.com/gregberge/svgr\n    svgr: false,\n  },\n  // Add Next.js configuration here\n};\n\nconst plugins = [\n  // Add more Next.js plugins to this list if needed.\n  withNx,\n];\n\nmodule.exports = composePlugins(...plugins)(nextConfig);\n```\n\n----------------------------------------\n\nTITLE: Viewing Nx project configuration\nDESCRIPTION: These commands show the configuration details for the 'my-app-e2e' and 'my-app' projects in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-17-modern-angular-testing-with-nx.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx show project my-app-e2e\nnpx nx show project my-app\n```\n\n----------------------------------------\n\nTITLE: Embedding iframes in Nx Documentation\nDESCRIPTION: This syntax allows embedding iframes with configurable source, title, and width, useful for displaying external content like dashboards.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n{% iframe\nsrc=\"https://staging.nx.app/orgs/62d013d4d26f260059f7765e/workspaces/62d013ea0852fe0a2df74438?hideHeader=true\"\ntitle=\"Nx Cloud dashboard\"\nwidth=\"100%\" /%}\n```\n\n----------------------------------------\n\nTITLE: Generating a Library with Default Settings\nDESCRIPTION: Initializes a library using the @nx/js:lib generator with default settings, resulting in a buildable library utilizing the @nx/js:tsc executor. No additional options are required.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/js/docs/library-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/js:lib libs/mylib\n```\n\n----------------------------------------\n\nTITLE: Project Graph Configuration for Nx\nDESCRIPTION: JSON configuration representing a project dependency graph with three projects and their relationships, used by Nx to determine task execution order.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/run-tasks.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projects\": [\n    {\n      \"name\": \"myreactapp\",\n      \"type\": \"app\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"shared-ui\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"name\": \"feat-products\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    }\n  ],\n  \"dependencies\": {\n    \"myreactapp\": [\n      { \"source\": \"myreactapp\", \"target\": \"feat-products\", \"type\": \"static\" }\n    ],\n    \"shared-ui\": [],\n    \"feat-products\": [\n      {\n        \"source\": \"feat-products\",\n        \"target\": \"shared-ui\",\n        \"type\": \"static\"\n      }\n    ]\n  },\n  \"workspaceLayout\": { \"appsDir\": \"\", \"libsDir\": \"\" },\n  \"affectedProjectIds\": [],\n  \"focus\": null,\n  \"groupByFolder\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Using EAS Build\nDESCRIPTION: Commands to set up and use EAS (Expo Application Services) for building and submitting apps.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-23-introducing-expo-support-for-nx.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g eas-cli\n\nnpx expo login\n\ncd apps/poetry-app\neas build\n\neas submit\n```\n\n----------------------------------------\n\nTITLE: Repository Structure Comparison for Nx Project Import\nDESCRIPTION: Shows the file structure of a source repository containing a single application and a destination Nx workspace monorepo for comparison when using the nx import command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/import-project.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n└─ inventory-app\n   ├─ ...\n   ├─ public\n   │  └─ ...\n   ├─ src\n   │  ├─ assets\n   │  ├─ App.css\n   │  ├─ App.tsx\n   │  ├─ index.css\n   │  └─ main.tsx\n   ├─ .eslintrc.cjs\n   ├─ index.html\n   ├─ package.json\n   ├─ README.md\n   ├─ tsconfig.json\n   ├─ tsconfig.node.json\n   └─ vite.config.ts\n```\n\nLANGUAGE: shell\nCODE:\n```\n└─ myorg\n   ├─ ...\n   ├─ packages\n   │  └─ ...\n   ├─ apps\n   │  ├─ account\n   │  │  └─ ...\n   │  ├─ cart\n   │  │  └─ ...\n   │  └─ users\n   │     └─ ...\n   ├─ .eslintrc.json\n   ├─ .gitignore\n   ├─ nx.json\n   ├─ package.json\n   ├─ README.md\n   └─ tsconfig.base.json\n```\n\n----------------------------------------\n\nTITLE: Creating React Standalone App with Webpack\nDESCRIPTION: Command to generate a new standalone React application workspace configured with Webpack bundler.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/plugin-overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest --preset=react-standalone --bundler=webpack\n```\n\n----------------------------------------\n\nTITLE: Custom Build Location Configuration\nDESCRIPTION: Configuration to specify a custom location for iOS build artifacts using the buildFolder option.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/build-ios-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    \"build-ios\": {\n      \"executor\": \"@nx/react-native:build-ios\",\n      \"options\": {\n        \"buildFolder\": \"dist/ios/build\"\n      }\n    }\n```\n\nLANGUAGE: bash\nCODE:\n```\nnx build-ios <app-name> --buildFolder=dist/ios/build\n```\n\n----------------------------------------\n\nTITLE: Running a Custom Generator from a Local Nx Plugin\nDESCRIPTION: Command to execute a custom generator from a locally developed Nx plugin. The generator can be invoked like any other Nx generator but uses the workspace name and plugin name.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-08-what-is-new-in-nx-13-10.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @myorg/workspace-extensions:<generator-name>\n```\n\n----------------------------------------\n\nTITLE: Installing Nx as a Dev Dependency with bun\nDESCRIPTION: Command to install the Nx package as a development dependency using bun.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/manual.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbun add -D nx@latest\n```\n\n----------------------------------------\n\nTITLE: Task Graph File Output\nDESCRIPTION: Save the task graph for affected builds to a JSON file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/affected.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t=build --graph=output.json\n```\n\n----------------------------------------\n\nTITLE: Generating a Loader for Remix Route\nDESCRIPTION: Adds a loader function to an existing Remix route using the Nx generator. The loader provides data to the route component.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/remix.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/remix:loader apps/myapp/app/routes/admin.tsx\n```\n\n----------------------------------------\n\nTITLE: Running Nx Format Check Command\nDESCRIPTION: Basic command to check for unformatted files in an Nx workspace. Can be run using global nx installation or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/format-check.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx format:check\n```\n\n----------------------------------------\n\nTITLE: Package.json with Version and Workspace Dependency (JSONC)\nDESCRIPTION: This snippet shows a source package.json file containing both a version and a workspace dependency.  This configuration is specifically designed for use with pnpm or bun, which handle the workspace dependency resolution during publishing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/updating-version-references.md#_snippet_8\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"version\": \"0.1.2\",\n  \"dependencies\": {\n    \"my-other-project-in-the-monorepo\": \"workspace:*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Converted Generator in collections.json\nDESCRIPTION: JSON configuration showing how to register both the original Nx generator and its Angular schematic conversion in the collections.json file for a plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/nx-devkit-angular-devkit.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Nx React\",\n  \"version\": \"0.1\",\n  \"extends\": [\"@nx/workspace\"],\n  \"schematics\": {\n    \"mygenerator\": {\n      \"factory\": \"./src/generators/mygenerator/mygenerator#mygeneratorSchematic\",\n      \"schema\": \"./src/generators/mygenerator/schema.json\"\n    }\n  },\n  \"generators\": {\n    \"init\": {\n      \"factory\": \"./src/generators/mygenerator/mygenerator#mygenerator\",\n      \"schema\": \"./src/generators/mygenerator/schema.json\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Project-specific Webpack Configuration for Storybook\nDESCRIPTION: This example demonstrates how to add a project-specific webpack configuration in the project's Storybook main file, allowing you to customize the webpack build process for a single project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/custom-builder-configs.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/react-webpack5';\n\nconst config: StorybookConfig = {\n  stories: ...,\n  addons: ...,\n  framework: {\n    name: '@storybook/react-webpack5',\n    options: {},\n  },\n  webpackFinal: async (config, { configType }) => {\n    // add your own webpack tweaks if needed\n    return config;\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Nx CLI Command Options Table\nDESCRIPTION: Markdown table documenting the available command line options for the Nx CLI tool. Includes flags for controlling parallel execution, project selection, caching behavior, task running, and debugging output.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run-many.md#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| `--parallel`                                | string                                                   | Max number of parallel processes [default is|\n| `--projects`, `--p`                         | string                                                   | Projects to run. (comma/space delimited project names and/or patterns|\n| `--runner`                                  | string                                                   | This is the name of the tasks runner configured in nx.json|\n| `--skipNxCache`, `--disableNxCache`         | boolean                                                  | Rerun the tasks even when the results are available in the cache. (Default: `false`|\n| `--skipRemoteCache`, `--disableRemoteCache` | boolean                                                  | Disables the remote cache. (Default: `false`|\n| `--skipSync`                                | boolean                                                  | Skips running the sync generators associated with the tasks. (Default: `false`|\n| `--targets`, `--target`, `--t`              | string                                                   | Tasks to run for affected projects|\n| `--tuiAutoExit`                             | string                                                   | Whether or not to exit the TUI automatically after all tasks finish, and after how long. If set to `true`, the TUI will exit immediately. If set to `false` the TUI will not automatically exit. If set to a number, an interruptible countdown popup will be shown for that many seconds before the TUI exits.                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| `--verbose`                                 | boolean                                                  | Prints additional information about the commands (e.g., stack traces|\n| `--version`                                 | boolean                                                  | Show version number|\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Setup with Nx Libraries in TypeScript\nDESCRIPTION: This snippet demonstrates how to use Jest's global setup function with Nx libraries by registering the TypeScript path. It imports a helper function from Nx and uses it to register the project's TypeScript configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/jest/jest-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerTsProject } from '@nx/js/src/internal';\nconst cleanupRegisteredPaths = registerTsProject('./tsconfig.base.json');\n\nimport { yourFancyFunction } from '@some-org/my-util-library';\nexport default async function () {\n  yourFancyFunction();\n\n  // make sure to run the clean up!\n  cleanupRegisteredPaths();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/web Plugin in Nx <18\nDESCRIPTION: Command to install the @nx/web package using npm for Nx workspaces below version 18.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/web/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/web\n```\n\n----------------------------------------\n\nTITLE: Including Dependencies in Root package.json for Nx Projects\nDESCRIPTION: This snippet shows how to include dependencies in the root package.json file. Dependencies must be installed as 'dependencies' in the root package.json to be included in the output package.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/rollup/src/docs/rollup-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"some-dependency\": \"^1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Document Embeddings in Supabase for Nx Docs AI\nDESCRIPTION: This code inserts document embeddings into a Supabase database table called 'nods_page_section'. It stores the embedding vector along with metadata about the document section, enabling vector similarity searches later.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-21-ai-assistant.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: pageSection } = await supabaseClient\n  .from('nods_page_section')\n  .insert({\n    page_id: page.id,\n    slug,\n    heading,\n    longer_heading,\n    content,\n    url_partial,\n    token_count,\n    embedding,\n  }); // …\n```\n\n----------------------------------------\n\nTITLE: Default Output Paths for Cypress E2E Tests in Nx\nDESCRIPTION: This JSON snippet shows the default output paths for Cypress E2E test videos and screenshots as inferred by Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/8-inferred-tasks/content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"{workspaceRoot}/dist/cypress/apps/angular-store-e2e/videos\",\n  \"{workspaceRoot}/dist/cypress/apps/angular-store-e2e/screenshots\"\n]\n```\n\n----------------------------------------\n\nTITLE: Generate JavaScript Stories for React Components\nDESCRIPTION: Command showing how to generate JavaScript-based stories instead of TypeScript for React components\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/storybook-configuration-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react:storybook-configuration ui --generateStories=true --js=true\n```\n\n----------------------------------------\n\nTITLE: Initializing Netlify Site\nDESCRIPTION: Command to initialize a Netlify site for the project, which creates necessary configuration and sets up the deployment environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-05-26-determine-your-user-location-with-netlify-edge-functions.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx netlify init\n```\n\n----------------------------------------\n\nTITLE: Setting Glob Pattern for Implicit Dependencies in project.json\nDESCRIPTION: This snippet demonstrates how to use a glob pattern to set implicit dependencies for a project in the project.json file, affecting multiple projects at once.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_24\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"root\": \"libs/mylib\",\n  \"implicitDependencies\": [\"shop-*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Entry Point for Svelte Application\nDESCRIPTION: HTML template for the main entry point of the Svelte application, including necessary meta tags and script reference.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-svelte.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Acme</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script type=\"module\" src=\"./src/main.ts\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Nx Workspace - Shell Commands\nDESCRIPTION: This shell command initializes a new Nx workspace with the specified preset. Replace 'acme' with your desired workspace name.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/faster-builds.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace acme --preset=apps\ncd acme\n```\n\n----------------------------------------\n\nTITLE: Migrate Nx Version Commands\nDESCRIPTION: Commands to create migrations file or run existing migrations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/commands.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate latest\nnx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Storybook 7 Main Configuration Changes (JavaScript/TypeScript)\nDESCRIPTION: Example showing the key configuration changes in .storybook/main.js|ts file for Storybook 7, including the removal of core.builder and addition of mandatory framework field.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/storybook/documents/storybook-7-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// .storybook/main.js|ts\n{\n  // No longer needed:\n  // core: { builder: ... }\n\n  // Now mandatory:\n  framework: \"@storybook/react-webpack5\", // or your framework\n\n  // Optional:\n  webpackFinal: async (config) => {\n    // Your webpack customization\n    return config;\n  },\n  // Or for Vite:\n  viteFinal: async (config) => {\n    // Your vite customization\n    return config;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Clearing for Expo Export\nDESCRIPTION: Configuration that enables clearing the bundle cache before export. The clear option helps resolve issues by forcing a clean bundle generation rather than using cached assets.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/export-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n    \"export\": {\n      \"executor\": \"@nx/expo:export\",\n      \"outputs\": [\"{options.outputDir}\"],\n      \"options\": {\n        \"platform\": \"web\",\n        \"bundler\": \"metro\",\n        \"outputDir\": \"dist/apps/dogs\",\n        \"clear\": true\n      },\n      \"dependsOn\": [\"sync-deps\"]\n    },\n```\n\n----------------------------------------\n\nTITLE: Using .nxignore File\nDESCRIPTION: The .nxignore file is placed in the root directory of an Nx workspace and uses the same syntax as .gitignore. Files listed in this configuration will be excluded from Nx's affected calculations, meaning changes to these files won't trigger rebuilds or retesting of potentially affected projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nxignore.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.nxignore\n```\n\n----------------------------------------\n\nTITLE: Defining ProjectGraphProjectNode Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure of a project node in a workspace. It contains three main properties: data (project configuration with optional description), name (project identifier), and type (project category - lib, app, or e2e).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ProjectGraphProjectNode.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProjectGraphProjectNode {\n  data: ProjectConfiguration & { description?: string };\n  name: string;\n  type: \"lib\" | \"app\" | \"e2e\";\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nx Graph Command in Shell\nDESCRIPTION: This snippet demonstrates how to generate a graphical representation of project dependencies using the Nx command-line interface. The command can be executed in a terminal to visualize the dependencies for the specified project. This is crucial for maintaining an understanding of the relationships between different parts of the codebase.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/2-smart-monorepo/3-explore-workspace/content.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx graph --focus=@tuskdesign/zoo\n```\n\n----------------------------------------\n\nTITLE: HTML Image Source Configuration\nDESCRIPTION: HTML markup for responsive dark/light mode image display using picture and source elements. Sets up conditional loading of Nx logo SVGs based on user color scheme preferences.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n```\n\n----------------------------------------\n\nTITLE: Using Project Generator with Explicit Format in Nx 16.8\nDESCRIPTION: Commands to generate an app with the new projectNameAndRootFormat option, which controls how project names and filesystem locations are determined. The as-provided option uses the given name directly without derivation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-09-06-nx-16-8-release.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> nx g app my-app --projectNameAndRootFormat=as-provided\n```\n\n----------------------------------------\n\nTITLE: Using Globs for Output Files in Nx Configuration\nDESCRIPTION: JSON configuration demonstrating how to use glob patterns to specify outputs when multiple tasks write to the same directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-08-02-nx-14-5-cypess-v10-output-globs-linter-perf-react-tailwind-support.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build-js\": {\n    \"outputs\": [\"dist/libs/mylib/**/*.js\"]\n  },\n  \"build-css\": {\n    \"outputs\": [\"dist/libs/mylib/**/*.css\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Angular mount import (v17.2.0-)\nDESCRIPTION: This snippet updates the Angular `mount` import from 'cypress/angular' to '@cypress/angular' for Angular versions lower than v17.2.0, after installing the `@cypress/angular@2` package.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/src/migrations/update-20-8-0/update-component-testing-mount-imports.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mount } from 'cypress/angular';\nimport './commands';\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable<Subject> {\n      mount: typeof mount;\n    }\n  }\n}\n\nCypress.Commands.add('mount', mount);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mount } from '@cypress/angular';\nimport './commands';\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable<Subject> {\n      mount: typeof mount;\n    }\n  }\n}\n\nCypress.Commands.add('mount', mount);\n```\n\n----------------------------------------\n\nTITLE: Install @nx/react (Nx < 18)\nDESCRIPTION: Installs the @nx/react plugin for Nx workspaces (versions less than 18).  This command installs @nx/react as a development dependency using npm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react/react-plugin.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/react\n```\n\n----------------------------------------\n\nTITLE: HTML Image with Dark/Light Mode Support\nDESCRIPTION: HTML markup for displaying the Nx logo with support for light and dark color schemes using the picture element and media queries.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"text-align: center;\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Rendering Feature Cards in Markdown\nDESCRIPTION: This code snippet uses custom Markdown syntax to create a two-column card layout showcasing new features. Each card includes a title and a video link.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/16_7_0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% cards cols=\"2\" %}\n{% card title=\"ESLint Flat Config Generator\"  type=\"video\" url=\"https://youtu.be/32XH909CZrY\" /%}\n{% card title=\"Convert To Monorepo Generator\"  type=\"video\" url=\"https://www.youtube.com/watch?v=ztNpLf2Zl-c\" /%}\n{% /cards %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Changelogs with GitHub Release in nx.json\nDESCRIPTION: This snippet configures project changelogs to create a GitHub release per project and disables the creation of project-level CHANGELOG.md files, all defined within the `nx.json` file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_19\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"release\": {\n    \"changelog\": {\n      \"projectChangelogs\": {\n        // This will create one GitHub release per project containing\n        // the project changelog contents\n        \"createRelease\": \"github\",\n        // This will disable creating any project level CHANGELOG.md\n        // files\n        \"file\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Advent of Code Starter Repo with NPX\nDESCRIPTION: Command to set up the Advent of Code workspace using the create-ts-aoc-starter package. This configures all necessary tools and prepares the environment for solving challenges.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-11-30-advent-of-code-crystal.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> npx create-ts-aoc-starter@latest\n```\n\n----------------------------------------\n\nTITLE: Generating a Next.js Page\nDESCRIPTION: This command uses the Nx CLI to generate a new page for a Next.js application within the specified directory. It creates a new route and associated component for the application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n\"nx g @nx/next:page apps/my-new-app/pages/my-new-page\"\n```\n\n----------------------------------------\n\nTITLE: Defining CreateNodesResultV2 Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias named CreateNodesResultV2. It represents a readonly array of tuples, where each tuple contains a string for the config file source and a CreateNodesResult.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/CreateNodesResultV2.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **CreateNodesResultV2**: readonly [configFileSource: string, result: CreateNodesResult][]\n```\n\n----------------------------------------\n\nTITLE: Configuring Affected Base and Head in CI\nDESCRIPTION: Shell commands showing how to configure the base and head commits for affected commands in CI environments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/using-nx/affected.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx affected -t build --base=origin/main --head=$PR_BRANCH_NAME\nnx affected -t build --base=origin/main~1 --head=origin/main\n\nNX_BASE=origin/main~1\nNX_HEAD=origin/main\n```\n\n----------------------------------------\n\nTITLE: Rendering Download Button Component in JSX\nDESCRIPTION: This snippet demonstrates the usage of a custom DownloadButton component within a JSX context. The component is imported and rendered with client-side loading enabled.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/3r-fast-ci/1-welcome/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DownloadButton } from '../../../../../components/DownloadButton';\n\n<div class=\"my-5\">\n  <DownloadButton client:load></DownloadButton>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Validating Numbers with exclusiveMinimum in JSON Schema\nDESCRIPTION: This snippet demonstrates how to use the 'exclusiveMinimum' property in a JSON schema to ensure a number value is strictly greater than the specified minimum. In this case, the value must be greater than 4.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": {\n    \"type\": \"number\",\n    \"exclusiveMinimum\": 4\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nx Import Command Interactive Output\nDESCRIPTION: Shows the complete interactive output of running nx import with the --dry-run flag, including git history filtering and branch creation steps.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-10-29-nx-import.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx import ../example-ts-monorepo --dry-run\n\n NX   Nx will walk you through the process of importing code from the source repository into this repository:\n\n1. Nx will clone the source repository into a temporary directory\n2. The project code from the sourceDirectory will be moved to the destinationDirectory on a temporary branch in this repository\n✔ Filtered git history to only include files in packages/promise-pool\n✔ /Users/zackderose/example-ts-monorepo has been prepared to be imported into this workspace on a temporary branch: __nx_tmp_import__/main in /private/var/folders/r2/7dj0tnbd1174yxxj18nhl5v40000gn/T/nx-import/repo\n✔ Fetched __nx_tmp_import__/main from __tmp_nx_import__\n✔ Merged files and git history from main from /Users/zackderose/example-ts-monorepo into libs/promise-pool\n✔ Cleaned up temporary files and remotes\n```\n\n----------------------------------------\n\nTITLE: TanStack Query Mock Configuration\nDESCRIPTION: Mock setup for TanStack Query's useQuery hook in tests.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-22-unit-testing-expo.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ReactQuery from '@tanstack/react-query';\n\njest.spyOn(ReactQuery, 'useQuery').mockImplementation(\n  jest.fn().mockReturnValue({\n    data: 'random cat fact',\n    isLoading: false,\n    isSuccess: true,\n    refetch: jest.fn(),\n    isFetching: false,\n    isError: false,\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Jest Config Before Migration (getJestProjects)\nDESCRIPTION: This code snippet demonstrates the deprecated usage of `getJestProjects` in a `jest.config.ts` file.  It synchronously retrieves the Jest project configurations. The return value is directly assigned to the `projects` property.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/jest/src/migrations/update-20-0-0/replace-getJestProjects-with-getJestProjectsAsync.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getJestProjects } from '@nx/jest';\n\nexport default {\n  projects: getJestProjects(),\n};\n```\n\n----------------------------------------\n\nTITLE: Project Configuration in package.json\nDESCRIPTION: Example of configuring Nx targets in package.json, showing how to define build and test commands that Nx can execute. This approach uses npm scripts for execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"mylib\",\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"build\": \"tsc -p tsconfig.lib.json\" // the actual command here is arbitrary\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Index.html Transformer - TypeScript\nDESCRIPTION: This TypeScript snippet defines a function meant to transform the contents of the index.html file. It takes the current HTML content as input and returns the modified content with changes specified by the function.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/application-executor-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function (indexContent: string) {\n  return indexContent.replace(\n    '<title>my-app</title>',\n    '<title>my-app (transformed)</title>'\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Navigation Mock Setup\nDESCRIPTION: Mock configuration for React Navigation hooks in test environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-22-unit-testing-expo.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\njest.mock('@react-navigation/native', () => {\n  return {\n    useNavigation: () => ({\n      navigate: jest.fn(),\n      dispatch: jest.fn(),\n      setOptions: jest.fn(),\n    }),\n    useRoute: () => ({\n      params: {\n        id: '123',\n      },\n    }),\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Filters for Task Caching in nx.json\nDESCRIPTION: JSON configuration that demonstrates excluding spec files from caching inputs, which can improve cache hit rates.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-08-02-nx-14-5-cypess-v10-output-globs-linter-perf-react-tailwind-support.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"targetDefaults\": {\n        \"build\": {\n            \"inputs\": [\"!{projectRoot}/**/*.spec.ts\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Graph Plugin in Kotlin\nDESCRIPTION: This snippet demonstrates how to install the `dev.nx.gradle.project-graph` Gradle plugin in a Kotlin `build.gradle.kts` file.  It adds the plugin to the `plugins` block, specifying its ID and version. No specific dependencies are required beyond the Gradle environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/gradle/project-graph/README.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nplugins {\n    id(\"dev.nx.gradle.project-graph\") version(\"+\")\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Nx Init Command in Shell\nDESCRIPTION: This command adds Nx to any type of workspace. It installs nx, creates an nx.json configuration file, and optionally sets up remote caching. The command can be run using nx directly if installed globally, or through npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/init.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx init\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Nx Plugin Development\nDESCRIPTION: ESLint configuration for Nx plugin development that enables special lint rules to validate plugin configuration files. This helps catch common errors in Nx plugin development such as mistyped implementation file paths.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-06-09-nx-14-2-angular-v14-storybook-update-lightweight-nx-and-more.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": [\"./package.json\", \"./generators.json\", \"./executors.json\"],\n  \"parser\": \"jsonc-eslint-parser\",\n  \"rules\": {\n    \"@nrwl/nx/nx-plugin-checks\": \"error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming experimentalJustInTimeCompile to justInTimeCompile for Webpack Bundlers\nDESCRIPTION: This example demonstrates how to migrate a Cypress configuration by renaming experimentalJustInTimeCompile to justInTimeCompile when it's set to false and using webpack as the bundler for Angular applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/src/migrations/update-20-8-0/replace-experimental-just-in-time-compile.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress';\n\nexport default defineConfig({\n  component: {\n    devServer: {\n      framework: 'angular',\n      bundler: 'webpack',\n    },\n    experimentalJustInTimeCompile: false,\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress';\n\nexport default defineConfig({\n  component: {\n    devServer: {\n      framework: 'angular',\n      bundler: 'webpack',\n    },\n    justInTimeCompile: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running iOS E2E Tests (Explicit Targets)\nDESCRIPTION: This command executes end-to-end tests for the React Native application's 'mobile-e2e' project on an iOS simulator in debug configuration (Mac only). It explicitly uses the `test-ios` target defined in the project's configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-native.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nnpx nx test-ios mobile-e2e\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies Update\nDESCRIPTION: Illustrates adding @ngrx/router-store to project dependencies during migration\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-21-0-0/change-data-persistence-operators-imports-to-ngrx-router-store-data-persistence.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@nx/angular\": \"^21.0.0\",\n    \"@ngrx/store\": \"^19.1.0\",\n    \"@ngrx/effects\": \"^19.1.0\"\n  }\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@nx/angular\": \"^21.0.0\",\n    \"@ngrx/store\": \"^19.1.0\",\n    \"@ngrx/effects\": \"^19.1.0\",\n    \"@ngrx/router-store\": \"^19.1.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Graph Representation in JSON\nDESCRIPTION: This JSON configuration represents a project graph used by Nx to map out projects and their dependencies within a monorepo. It includes applications and libraries, their roots, types, tags, and relationships between them. The structure also specifies directories for applications and libraries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/maintain-typescript-monorepos.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"composite\": false,\n  \"projects\": [\n    {\n      \"name\": \"product-state\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"root\": \"packages/cart/product-state\",\n        \"tags\": [\"scope:cart\", \"type:state\"]\n      }\n    },\n    {\n      \"name\": \"ui-buttons\",\n      \"type\": \"lib\",\n      \"data\": {\n        \"root\": \"packages/ui/buttons\",\n        \"tags\": [\"scope:shared\", \"type:ui\"]\n      }\n    },\n    {\n      \"name\": \"cart\",\n      \"type\": \"app\",\n      \"data\": {\n        \"root\": \"apps/cart\",\n        \"tags\": [\"type:app\", \"scope:cart\"]\n      }\n    }\n  ],\n  \"dependencies\": {\n    \"product-state\": [],\n    \"ui-buttons\": [],\n    \"cart\": [\n      { \"source\": \"cart\", \"target\": \"product-state\", \"type\": \"static\" },\n      { \"source\": \"cart\", \"target\": \"ui-buttons\", \"type\": \"static\" }\n    ]\n  },\n  \"workspaceLayout\": {\n    \"appsDir\": \"apps\",\n    \"libsDir\": \"libs\"\n  },\n  \"affectedProjectIds\": [],\n  \"focus\": null,\n  \"groupByFolder\": false,\n  \"exclude\": [],\n  \"enableTooltips\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding injectDocumentDomain: true to Maintain Backward Compatibility\nDESCRIPTION: Shows how to add the injectDocumentDomain: true setting to a configuration that previously didn't specify domain injection settings. This maintains backward compatibility with pre-v14 behavior.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/src/migrations/update-20-8-0/set-inject-document-domain.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { nxE2EPreset } from '@nx/cypress/plugins/cypress-preset';\nimport { defineConfig } from 'cypress';\n\nexport default defineConfig({\n  e2e: {\n    ...nxE2EPreset(__filename, {\n      cypressDir: 'src',\n      bundler: 'vite',\n      webServerCommands: {\n        default: 'pnpm exec nx run app1:dev',\n        production: 'pnpm exec nx run app1:dev',\n      },\n      ciWebServerCommand: 'pnpm exec nx run app1:dev',\n      ciBaseUrl: 'http://localhost:4200',\n    }),\n    baseUrl: 'http://localhost:4200',\n    // Please ensure you use `cy.origin()` when navigating between domains and remove this option.\n    // See https://docs.cypress.io/app/references/migration-guide#Changes-to-cyorigin\n    injectDocumentDomain: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Jest Snapshot Testing Example\nDESCRIPTION: This TypeScript code demonstrates the usage of Jest's snapshot testing feature. It defines a test case for a function `superAwesomeFunction` and asserts that the output matches a previously recorded snapshot.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/jest/documents/overview.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('SuperAwesomeFunction', () => {\n  it('should return the correct data shape', () => {\n    const actual = superAwesomeFunction();\n    expect(actual).toMatchSnapshot();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Module Federation Imports in Rspack Config\nDESCRIPTION: Demonstrates the migration of withModuleFederation and withModuleFederationForSSR imports from the old @nx/rspack/module-federation package to the new @nx/module-federation/rspack package. This change is part of a package restructuring in Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/rspack/src/migrations/update-20-2-0/migrate-with-mf-import-to-new-package.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  withModuleFederation,\n  withModuleFederationForSSR,\n} from '@nx/rspack/module-federation';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  withModuleFederation,\n  withModuleFederationForSSR,\n} from '@nx/module-federation/rspack';\n```\n\n----------------------------------------\n\nTITLE: Auto Generating Test Files for Components\nDESCRIPTION: This shell command will generate test files for every component in the specified Angular project when using the cypress-component-configuration generator in Nx. It is an optional flag that enhances the testing process.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:cypress-component-configuration --project=my-cool-angular-project --generate-tests\n```\n\n----------------------------------------\n\nTITLE: Basic Story Generation Command\nDESCRIPTION: Basic command to generate Storybook stories for all components in a specified project using CSF3 format.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/stories-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react:stories project-name\n```\n\n----------------------------------------\n\nTITLE: Zephyr Cloud Deployment Command\nDESCRIPTION: Command to build and deploy applications to Zephyr Cloud with verbose output.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-12-next-gen-module-federation-deployments.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many -t build --verbose\n```\n\n----------------------------------------\n\nTITLE: Importing createConfig from @nx/angular-rsbuild\nDESCRIPTION: Basic import statement for the createConfig function from the @nx/angular-rsbuild package.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rsbuild/create-config.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimport { createConfig } from '@nx/angular-rsbuild';\n```\n\n----------------------------------------\n\nTITLE: Running Component Tests\nDESCRIPTION: Command to execute component tests using the generated configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx g component-test my-cool-react-project\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dependencies for Annotation Processors in Spring Boot\nDESCRIPTION: This snippet shows the dependencies required for annotation processors used in the 'main' source set of the spring-boot-parent project. It includes libraries such as janino and various BOMs for managing versions of dependencies like ActiveMQ, Artemis, AssertJ, and Jackson.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/gradle/src/plugin-v1/utils/__mocks__/gradle-custom-dependencies.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nannotationProcessor - Annotation processors and their dependencies for source set 'main'.\n\\--- project :spring-boot-project:spring-boot-parent\n     +--- org.codehaus.janino:janino:3.1.10\n     +--- project :spring-boot-project:spring-boot-dependencies\n     |    +--- org.apache.activemq:activemq-bom:6.1.5\n     |    +--- org.apache.activemq:artemis-bom:2.39.0\n     |    +--- org.assertj:assertj-bom:3.27.3\n     |    +--- io.zipkin.reporter2:zipkin-reporter-bom:3.4.3\n     |    +--- io.zipkin.brave:brave-bom:6.0.3\n     |    +--- org.apache.cassandra:java-driver-bom:4.18.1\n     |    +--- org.glassfish.jaxb:jaxb-bom:4.0.5\n     |    +--- org.apache.groovy:groovy-bom:4.0.25\n     |    +--- org.infinispan:infinispan-bom:15.1.5.Final\n     |    +--- com.fasterxml.jackson:jackson-bom:2.18.2\n     |    +--- org.glassfish.jersey:jersey-bom:3.1.10\n     |    +--- org.eclipse.jetty.ee10:jetty-ee10-bom:12.0.16\n     |    +--- org.eclipse.jetty:jetty-bom:12.0.16\n     |    +--- org.junit:junit-bom:5.11.4\n     |    +--- org.jetbrains.kotlin:kotlin-bom:1.9.25\n     |    +--- org.jetbrains.kotlinx:kotlinx-coroutines-bom:1.8.1\n     |    +--- org.jetbrains.kotlinx:kotlinx-serialization-bom:1.6.3\n     |    +--- org.apache.logging.log4j:log4j-bom:2.24.3\n     |    +--- io.micrometer:micrometer-bom:1.15.0-M1\n     |    +--- io.micrometer:micrometer-tracing-bom:1.5.0-M1\n     |    +--- org.mockito:mockito-bom:5.15.2\n     |    +--- io.netty:netty-bom:4.1.117.Final\n     |    +--- io.opentelemetry:opentelemetry-bom:1.46.0\n     |    +--- io.prometheus:prometheus-metrics-bom:1.3.5\n     |    +--- io.prometheus:simpleclient_bom:0.16.0\n     |    +--- org.apache.pulsar:pulsar-bom:4.0.2\n     |    +--- com.querydsl:querydsl-bom:5.1.0\n     |    +--- io.projectreactor:reactor-bom:2024.0.2\n     |    +--- io.rest-assured:rest-assured-bom:5.5.0\n     |    +--- io.rsocket:rsocket-bom:1.1.5\n     |    +--- org.seleniumhq.selenium:selenium-bom:4.28.1\n     |    +--- org.springframework.amqp:spring-amqp-bom:3.2.2\n     |    +--- org.springframework.batch:spring-batch-bom:5.2.1\n     |    +--- org.springframework.data:spring-data-bom:2024.1.2\n     |    +--- org.springframework:spring-framework-bom:6.2.2\n     |    +--- org.springframework.integration:spring-integration-bom:6.5.0-M1\n     |    +--- org.springframework.pulsar:spring-pulsar-bom:1.2.2\n     |    +--- org.springframework.restdocs:spring-restdocs-bom:3.0.3\n     |    +--- org.springframework.security:spring-security-bom:6.5.0-M1\n     |    +--- org.springframework.session:spring-session-bom:3.4.1\n     |    +--- org.springframework.ws:spring-ws-bom:4.0.11\n     |    +--- org.testcontainers:testcontainers-bom:1.20.4\n     |    +--- org.codehaus.janino:janino:3.1.12 -> 3.1.10 (c)\n     |    +--- org.apache.activemq:activemq-bom:{strictly 6.1.5} -> 6.1.5\n     |    +--- org.apache.activemq:artemis-bom:{strictly 2.39.0} -> 2.39.0\n     |    +--- org.assertj:assertj-bom:{strictly 3.27.3} -> 3.27.3\n     |    +--- io.zipkin.reporter2:zipkin-reporter-bom:{strictly 3.4.3} -> 3.4.3\n     |    +--- io.zipkin.brave:brave-bom:{strictly 6.0.3} -> 6.0.3\n     |    +--- org.apache.cassandra:java-driver-bom:{strictly 4.18.1} -> 4.18.1\n     |    +--- org.glassfish.jaxb:jaxb-bom:{strictly 4.0.5} -> 4.0.5\n     |    +--- org.apache.groovy:groovy-bom:{strictly 4.0.25} -> 4.0.25\n     |    +--- org.infinispan:infinispan-bom:{strictly 15.1.5.Final} -> 15.1.5.Final\n     |    +--- com.fasterxml.jackson:jackson-bom:{strictly 2.18.2} -> 2.18.2\n     |    +--- org.glassfish.jersey:jersey-bom:{strictly 3.1.10} -> 3.1.10\n     |    +--- org.eclipse.jetty.ee10:jetty-ee10-bom:{strictly 12.0.16} -> 12.0.16\n     |    +--- org.eclipse.jetty:jetty-bom:{strictly 12.0.16} -> 12.0.16\n     |    +--- org.junit:junit-bom:{strictly 5.11.4} -> 5.11.4\n     |    +--- org.jetbrains.kotlin:kotlin-bom:{strictly 1.9.25} -> 1.9.25\n     |    +--- org.jetbrains.kotlinx:kotlinx-coroutines-bom:{strictly 1.8.1} -> 1.8.1\n     |    +--- org.jetbrains.kotlinx:kotlinx-serialization-bom:{strictly 1.6.3} -> 1.6.3\n     |    +--- org.apache.logging.log4j:log4j-bom:{strictly 2.24.3} -> 2.24.3\n     |    +--- io.micrometer:micrometer-bom:{strictly 1.15.0-M1} -> 1.15.0-M1\n     |    +--- io.micrometer:micrometer-tracing-bom:{strictly 1.5.0-M1} -> 1.5.0-M1\n     |    +--- org.mockito:mockito-bom:{strictly 5.15.2} -> 5.15.2\n     |    +--- io.netty:netty-bom:{strictly 4.1.117.Final} -> 4.1.117.Final\n     |    +--- io.opentelemetry:opentelemetry-bom:{strictly 1.46.0} -> 1.46.0\n     |    +--- io.prometheus:prometheus-metrics-bom:{strictly 1.3.5} -> 1.3.5\n     |    +--- io.prometheus:simpleclient_bom:{strictly 0.16.0} -> 0.16.0\n     |    +--- org.apache.pulsar:pulsar-bom:{strictly 4.0.2} -> 4.0.2\n     |    +--- com.querydsl:querydsl-bom:{strictly 5.1.0} -> 5.1.0\n     |    +--- io.projectreactor:reactor-bom:{strictly 2024.0.2} -> 2024.0.2\n     |    +--- io.rest-assured:rest-assured-bom:{strictly 5.5.0} -> 5.5.0\n     |    +--- io.rsocket:rsocket-bom:{strictly 1.1.5} -> 1.1.5\n     |    +--- org.seleniumhq.selenium:selenium-bom:{strictly 4.28.1} -> 4.28.1\n     |    +--- org.springframework.amqp:spring-amqp-bom:{strictly 3.2.2} -> 3.2.2\n     |    +--- org.springframework.batch:spring-batch-bom:{strictly 5.2.1} -> 5.2.1\n     |    +--- org.springframework.data:spring-data-bom:{strictly 2024.1.2} -> 2024.1.2\n     |    +--- org.springframework:spring-framework-bom:{strictly 6.2.2} -> 6.2.2\n     |    +--- org.springframework.integration:spring-integration-bom:{strictly 6.5.0-M1} -> 6.5.0-M1\n     |    +--- org.springframework.pulsar:spring-pulsar-bom:{strictly 1.2.2} -> 1.2.2\n     |    +--- org.springframework.restdocs:spring-restdocs-bom:{strictly 3.0.3} -> 3.0.3\n     |    +--- org.springframework.security:spring-security-bom:{strictly 6.5.0-M1} -> 6.5.0-M1\n     |    +--- org.springframework.session:spring-session-bom:{strictly 3.4.1} -> 3.4.1\n     |    +--- org.springframework.ws:spring-ws-bom:{strictly 4.0.11} -> 4.0.11\n     |    \\--- org.testcontainers:testcontainers-bom:{strictly 1.20.4} -> 1.20.4\n     \\--- org.codehaus.janino:janino:{strictly 3.1.10} -> 3.1.10\n```\n\n----------------------------------------\n\nTITLE: Implementing a Non-Project Files Reporter Conformance Rule\nDESCRIPTION: Create a conformance rule using the non-project-files-reporter to check the version of the 'tmp' package in the root package.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/conformance/documents/create-conformance-rule.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readJsonFile, workspaceRoot } from '@nx/devkit';\nimport {\n  createConformanceRule,\n  NonProjectFilesViolation,\n} from '@nx/conformance';\nimport { join } from 'node:path';\nimport { satisfies } from 'semver';\n\nexport default createConformanceRule<object>({\n  name: 'package-tmp-0.2.3',\n  category: 'maintainability',\n  description: 'The tmp dependency should be a minimum version of 0.2.3',\n  reporter: 'non-project-files-reporter',\n  implementation: async () => {\n    const violations: NonProjectFilesViolation[] = [];\n    const applyViolationIfApplicable = (version: string | undefined) => {\n      if (version && !satisfies(version, '>=0.2.3')) {\n        violations.push({\n          message: 'The \"tmp\" package must be version \"0.2.3\" or higher',\n          file: 'package.json',\n        });\n      }\n    };\n\n    const workspaceRootPackageJson = await readJsonFile(\n      join(workspaceRoot, 'package.json')\n    );\n    applyViolationIfApplicable(workspaceRootPackageJson.dependencies?.['tmp']);\n    applyViolationIfApplicable(\n      workspaceRootPackageJson.devDependencies?.['tmp']\n    );\n\n    return {\n      severity: 'low',\n      details: {\n        violations,\n      },\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/express Plugin for Nx <18\nDESCRIPTION: Command to install the @nx/express plugin using npm for Nx versions lower than 18.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/express/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/express\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nx Plugin with npx\nDESCRIPTION: This shell command creates a new Nx plugin with a specified organization and plugin name. It uses the `create-nx-plugin` command from Nx. After execution, the command sets up the basic scaffold for an Nx plugin project. Required: Node.js and the Nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/create-preset.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-plugin my-org --pluginName my-plugin\n```\n\n----------------------------------------\n\nTITLE: Implementing Main App Component\nDESCRIPTION: TypeScript code for the main App component using React Native Paper and the custom PoemOfTheDay component.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-23-introducing-expo-support-for-nx.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { SafeAreaView, ScrollView } from 'react-native';\nimport { Provider as PaperProvider } from 'react-native-paper';\n\nimport PoemOfTheDay from '../components/poem-of-the-day/poem-of-the-day';\n\nconst App = () => {\n  return (\n    <PaperProvider>\n      <SafeAreaView>\n        <ScrollView contentInsetAdjustmentBehavior=\"automatic\">\n          <PoemOfTheDay></PoemOfTheDay>\n        </ScrollView>\n      </SafeAreaView>\n    </PaperProvider>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Showing Project Details for the Zoo Package\nDESCRIPTION: This shell command is used to display the project details for the zoo package, specifically examining the inferred build task and its inputs, which should align with the tsconfig settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/2-smart-monorepo/5-add-plugin/content.mdx#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpx nx show project @tuskdesign/zoo\n```\n\n----------------------------------------\n\nTITLE: Cypress Configuration with Task Splitting\nDESCRIPTION: TypeScript configuration for Cypress with e2e task splitting enabled, including web server commands and base URL configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/cypress/cypress-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress';\nimport { nxE2EPreset } from '@nx/cypress/plugins/cypress-preset';\n\nexport default defineConfig({\n  e2e: {\n    ...nxE2EPreset(__filename, {\n      cypressDir: 'src',\n      bundler: 'vite',\n      webServerCommands: {\n        default: 'nx run my-project:serve',\n        production: 'nx run my-project:preview',\n      },\n      ciWebServerCommand: 'nx run my-project:serve-static',\n    }),\n    baseUrl: 'http://localhost:4200',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO as an S3-Compatible Provider in Nx\nDESCRIPTION: Example configuration for connecting Nx to MinIO, an S3-compatible storage provider. This setup includes endpoint specification and path style configuration required for MinIO compatibility.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/s3-cache/documents/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"s3\": {\n    \"region\": \"us-east-1\",\n    \"bucket\": \"my-bucket\",\n    \"endpoint\": \"https://play.min.io\",\n    \"forcePathStyle\": true,\n    \"accessKeyId\": \"abc1234\",\n    \"secretAccessKey\": \"4321cba\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Environment Variables in project.json using @nx/cypress:cypress executor\nDESCRIPTION: This snippet demonstrates how to set Cypress environment variables using the 'env' option in the project.json file when using the @nx/cypress:cypress executor. It shows setting the API_URL environment variable.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/cypress/documents/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"targets\": {\n    \"e2e\": {\n      \"executor\": \"@nx/cypress:cypress\",\n      \"options\": {\n        \"env\": \"API_URL=https://api.my-nx-website.com\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Strings with pattern in JSON Schema\nDESCRIPTION: This example demonstrates how to use the 'pattern' property in a JSON schema to ensure a string value matches a specific regular expression pattern. Here, the value must contain only digits.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": {\n    \"type\": \"string\",\n    \"pattern\": \"^\\\\d+$\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration with Nx Utility\nDESCRIPTION: This snippet configures Tailwind CSS in an Nx workspace by using a utility function to create glob patterns for dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-in-react.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createGlobPatternsForDependencies } = require('@nx/react/tailwind');\nconst { join } = require('path');\n\nmodule.exports = {\n  content: [\n    join(\n      __dirname,\n      '{src,pages,components,app}/**/*!(*.stories|*.spec).{ts,tsx,html}'\n    ),\n    ...createGlobPatternsForDependencies(__dirname),\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Executing Nx Cloud Login Command\nDESCRIPTION: Basic syntax for executing the nx login command. The command accepts an optional nxCloudUrl parameter and can be run using nx directly (when installed globally) or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/login.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx login [nxCloudUrl]\n```\n\n----------------------------------------\n\nTITLE: Connecting Component to Redux Store\nDESCRIPTION: Implements mapStateToProps and mapDispatchToProps functions to connect React component with Redux store\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nconst mapStateToProps = (state: RootState) => {\n  return {\n    zodiacItem: horoscopeSelectors.getUserZodiacItem(state),\n    horoscope: horoscopeSelectors.getUserHoroscope(state),\n    loadingStatus: horoscopeSelectors.getHoroscopeLoadingStatus(state),\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<RootState, void, AnyAction>\n) => {\n  return {\n    getUserHoroscope(zodiacSign: AdhZodiacSign, day: AdhHoroscopeDay) {\n      dispatch(horoscopeActions.fetchHoroscope({ zodiacSign, day }));\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Device for App Deployment\nDESCRIPTION: This JSON snippet illustrates how to configure the 'run-ios' target to deploy the app to a specific physical iOS device. The 'device' option is set to the target device name.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/run-ios-examples.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n    \"run-ios\": {\n      \"executor\": \"@nx/react-native:run-ios\",\n      \"options\": {\n        \"device\": \"deviceName\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Referencing Nx Cloud Workflows Configuration in YAML\nDESCRIPTION: Example of where to find the Nx Cloud Workflows configuration file that is used by the Nx team itself. This file contains the workflow definitions in YAML format and is mentioned as an example of the format being similar to existing CI providers.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-10-13-nx-conf-2023-recap.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttps://github.com/nrwl/nx/blob/master/.nx/workflows/agents.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Playwright (Pre-18)\nDESCRIPTION: Command to install the Nx Playwright plugin in Nx versions before 18.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/playwright/playwright-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/playwright\n```\n\n----------------------------------------\n\nTITLE: Testing Library Command\nDESCRIPTION: Command to run tests for a library\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/js/documents/overview.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnx test my-lib\n```\n\n----------------------------------------\n\nTITLE: Watch for Changes with Jest via Nx\nDESCRIPTION: This command runs Jest tests in watch mode for a specified project (`frontend`) using the Nx CLI.  Jest will automatically re-run tests when files change.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/jest/documents/overview.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnx test frontend --watch\n```\n\n----------------------------------------\n\nTITLE: Debugging Browserslist Configuration with npx Command\nDESCRIPTION: Command to debug browser support by displaying all browsers and versions supported by your current browserslist configuration. This helps identify unexpected browser support that might affect bundle size.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/browser-support.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx browserslist\n```\n\n----------------------------------------\n\nTITLE: Custom Generator Example\nDESCRIPTION: Example of running a custom generator `@org/plugin:library` with simplified options, which internally translates these options into the options required by the underlying Nx generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-10-tailoring-nx-for-your-organization.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @org/plugin:library --name util --scope shared --type util\n```\n\n----------------------------------------\n\nTITLE: Hashing Single Task Method Signatures - TypeScript Interface\nDESCRIPTION: Defines three overloads of the hashTask method for generating a hash from a single task. Supports basic task hashing, hashing with task graph, and hashing with both task graph and process environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/TaskHasher.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nhashTask(task: Task): Promise<Hash>;\nhashTask(task: Task, taskGraph: TaskGraph): Promise<Hash>;\nhashTask(task: Task, taskGraph: TaskGraph, env: ProcessEnv): Promise<Hash>;\n```\n\n----------------------------------------\n\nTITLE: Device-Specific React Native Android Configuration\nDESCRIPTION: Configuration for running the React Native app on a specific Android device or emulator using the deviceId option.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/run-android-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    \"run-android\": {\n      \"executor\": \"@nx/react-native:run-android\",\n      \"options\": {\n        \"deviceId\": \"Pixel_5_API_30\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Build Scripts in package.json\nDESCRIPTION: Basic package.json configuration showing the standard Next.js build and start scripts. These scripts are essential for building the application and starting the production server.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/courses/pnpm-nx-next/lessons/04-task-pipelines.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"scripts\": {\n        ...\n        \"build\": \"next build\",\n        \"start\": \"next start\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Express Server Usage with createServer\nDESCRIPTION: Demonstrates how to create and configure a standard Express server using the `createServer` function.  It imports the `createServer` function, the `bootstrap` function, and shows how to customize the server by adding static file serving, API routes, or middleware before starting the server with `server.listen()`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rsbuild/create-server.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from '@nx/angular-rsbuild/ssr';\nimport bootstrap from './main.server';\n\nconst server = createServer(bootstrap);\n\n/** Add your custom server logic here\n * \n * For example, you can add a custom static file server:\n * \n * server.app.use('/static', express.static(staticFolder));\n * \n * Or add additional api routes:\n * \n * server.app.get('/api/hello', (req, res) => {\n *   res.send('Hello World!');\n * });\n * \n * Or add additional middleware:\n * \n * server.app.use((req, res, next) => {\n *   res.send('Hello World!');\n * });\n */\n\nserver.listen();\n```\n\n----------------------------------------\n\nTITLE: Running Nx Test Command\nDESCRIPTION: Command to execute the test target for myreactapp project which will consider all configured inputs.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/inputs.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx test myreactapp\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Conformance Rule\nDESCRIPTION: TypeScript code example for creating a custom local conformance rule.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-25-introducing-nx-powerpack.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { createConformanceRule } from '@nx/conformance';\n\nconst rule = createConformanceRule({\n  name: 'local-conformance-rule-example',\n  category: 'security',\n  reporter: 'project-reporter',\n  implementation: async (context) => {\n    return {\n      severity: 'low',\n      details: {\n        violations: [],\n      },\n    };\n  },\n});\n\nexport default rule;\n```\n\n----------------------------------------\n\nTITLE: Implementing ESLint Flat Configuration\nDESCRIPTION: Example of ESLint's new flat configuration format using explicit imports and flat cascading rules. Demonstrates configuration for TypeScript and JSON files with Nx-specific rules.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/migrating-to-flat-eslint.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst nxPlugin = require('@nx/eslint-plugin');\nconst js = require('@eslint/js');\nconst baseConfig = require('./eslint.base.config.cjs');\nconst globals = require('globals');\nconst jsoncParser = require('jsonc-eslint-parser');\nconst tsParser = require('@typescript-eslint/parser');\n\nmodule.exports = [\n  js.configs.recommended,\n  ...baseConfig,\n  { plugins: { '@nx': nxPlugin } },\n  {\n    languageOptions: {\n      parser: tsParser,\n      globals: {\n        ...globals.node,\n      },\n    },\n    rules: {\n      '@typescript-eslint/explicit-module-boundary-types': ['error'],\n    },\n  },\n  {\n    files: ['*.json'],\n    languageOptions: {\n      parser: jsoncParser,\n    },\n    rules: {},\n  },\n  {\n    files: ['*.ts', '*.tsx', '*.js', '*.jsx'],\n    rules: {\n      '@nx/enforce-module-boundaries': [\n        'error',\n        {\n          enforceBuildableLibDependency: true,\n          allow: [],\n          depConstraints: [\n            {\n              sourceTag: '*',\n              onlyDependOnLibsWithTags: ['*'],\n            },\n          ],\n        },\n      ],\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests for Data Access Careers Library\nDESCRIPTION: Command to execute unit tests for the data-access-careers library using Jest test runner through the Nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/data-access-careers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx test data-access-careers\n```\n\n----------------------------------------\n\nTITLE: Updating Angular SSR Imports (Before)\nDESCRIPTION: This code snippet shows the original import statements before the update. It imports CommonEngine and related types from '@angular/ssr'. These imports need to be updated to use the '/node' entry point.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-2-0/update-angular-ssr-imports-to-use-node-entry-point.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CommonEngine } from '@angular/ssr';\nimport type {\n  CommonEngineOptions,\n  CommonEngineRenderOptions,\n} from '@angular/ssr';\n```\n\n----------------------------------------\n\nTITLE: Add Existing Angular Rspack App to Nx (CSR)\nDESCRIPTION: This command adds an existing client-side rendered (CSR) Angular application to an Nx workspace using Rspack as the bundler. It generates the necessary files and configurations within the specified `myapp` directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/angular:app myapp --bundler=rspack\n```\n\n----------------------------------------\n\nTITLE: Show Project Details for Nx Tasks\nDESCRIPTION: This shell command retrieves and shows details for the project's tasks using Nx. It provides an overview of the project's configuration and available targets, which can help in managing tasks within the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-monorepo.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx show project my-workspace --web\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx for Svelte Project\nDESCRIPTION: Nx configuration file (nx.json) to set up plugins for ESLint and Vite, defining various build and serve targets.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-svelte.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ... other config\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/eslint/plugin\",\n      \"options\": {\n        \"targetName\": \"lint\"\n      }\n    },\n    {\n      \"plugin\": \"@nx/vite/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"build\",\n        \"previewTargetName\": \"preview\",\n        \"testTargetName\": \"test\",\n        \"serveTargetName\": \"serve\",\n        \"serveStaticTargetName\": \"serve-static\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Playwright Extended Configuration\nDESCRIPTION: Complete Playwright configuration using nxE2EPreset with environment variables and web server settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/playwright/playwright-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport { nxE2EPreset } from '@nx/playwright/preset';\nimport { workspaceRoot } from '@nx/devkit';\n\nconst baseURL = process.env['BASE_URL'] || 'http://localhost:4200';\n\nexport default defineConfig({\n  ...nxE2EPreset(__filename, { testDir: './e2e' }),\n  use: {\n    baseURL,\n    trace: 'on-first-retry',\n  },\n  webServer: {\n    command: 'npx nx serve <your-app-name>',\n    url: baseURL,\n    reuseExistingServer: !process.env.CI,\n    cwd: workspaceRoot,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Conformance Rule in TypeScript\nDESCRIPTION: Define a basic conformance rule using the createConformanceRule function, specifying rule metadata and implementation logic.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/conformance/documents/create-conformance-rule.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConformanceRule, ProjectViolation } from '@nx/conformance';\n\nexport default createConformanceRule({\n  name: 'local-conformance-rule-example',\n  category: 'security',\n  description: 'an example of a conformance rule',\n  reporter: 'project-reporter',\n  implementation: async (context) => {\n    const violations: ProjectViolation[] = [];\n\n    return {\n      severity: 'low',\n      details: {\n        violations,\n      },\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Reducer Action for Zodiac Sign in Redux Slice\nDESCRIPTION: Adds a setUserZodiacSignItem reducer action to the horoscopeSlice to update the zodiacSignItem in the state.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport const horoscopeSlice = createSlice({\n  name: HOROSCOPE_FEATURE_KEY,\n  initialState: initialHoroscopeState,\n  reducers: {\n    setUserZodiacSignItem(\n      state: HoroscopeState,\n      action: PayloadAction<AdhZodiacSignItem>\n    ) {\n      state.zodiacSignItem = action.payload;\n    },\n    ...\n  },\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Configuration Management in NxScopedHost\nDESCRIPTION: This snippet shows methods for reading and merging workspace and project configurations in the NxScopedHost class. These methods are specific to Angular and Nx project management.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ngcli_adapter/NxScopedHost.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadExistingAngularJson(): Observable<any> {\n  // Implementation\n}\n\nreadMergedWorkspaceConfiguration(): Observable<any> {\n  // Implementation\n}\n\nmergeProjectConfiguration(existing: AngularProjectConfiguration, updated: AngularProjectConfiguration, projectName: string): AngularProjectConfiguration {\n  // Implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes Cards Layout in Markdown\nDESCRIPTION: Markdown code for displaying breaking changes cards in a two-column layout using custom card components.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/20_0_0.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% cards cols=\"2\" %}\n{% card title=\"Generators use `as-provided`\" type=\"document\" url=\"/deprecated/as-provided-vs-derived\" /%}\n{% card title=\"Storybook generators use Storybook Component tests instead of Cypress tests\" type=\"document\" url=\"/recipes/storybook/storybook-interaction-tests\" /%}\n{% card title=\"@nrwl/* packages are no longer published\" type=\"document\" url=\"/deprecated/rescope\" /%}\n{% card title=\"Nx Release programatic API changes\" type=\"external\" url=\"https://github.com/nrwl/nx/pull/28224\" /%}\n{% /cards %}\n```\n\n----------------------------------------\n\nTITLE: Documenting @nx/devkit Module Structure in Markdown\nDESCRIPTION: This code snippet outlines the structure of the @nx/devkit module documentation, including links to classes and functions related to the Angular CLI adapter.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/devkit/documents/ngcli_adapter.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @nx/devkit\n\n## Table of contents\n\n### Classes\n\n- [NxScopedHost](../../devkit/documents/ngcli_adapter/NxScopedHost)\n\n### Functions\n\n- [mockSchematicsForTesting](../../devkit/documents/ngcli_adapter/mockSchematicsForTesting)\n- [wrapAngularDevkitSchematic](../../devkit/documents/ngcli_adapter/wrapAngularDevkitSchematic)\n```\n\n----------------------------------------\n\nTITLE: Plugin Registration in nx.json\nDESCRIPTION: Example of how the @nx/vite plugin is registered in nx.json after migration, including configuration for target names used by the plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/convert-to-inferred.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin\": \"@nx/vite/plugin\",\n  \"options\": {\n    \"buildTargetName\": \"build\",\n    \"serveTargetName\": \"serve\",\n    \"previewTargetName\": \"preview\",\n    \"testTargetName\": \"test\",\n    \"serveStaticTargetName\": \"serve-static\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AngularRspackPluginOptions Interface and Related Types\nDESCRIPTION: The TypeScript interface definition for AngularRspackPluginOptions and related configuration types, showing all available options for configuring Angular applications with Rspack.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rspack/create-config.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AngularRspackPluginOptions extends PluginUnsupportedOptions {\n  aot?: boolean;\n  assets?: AssetElement[];\n  browser?: string;\n  commonChunk?: boolean;\n  devServer?: DevServerOptions;\n  extractLicenses?: boolean;\n  fileReplacements?: FileReplacement[];\n  index?: IndexElement;\n  inlineStyleLanguage?: InlineStyleLanguage;\n  namedChunks?: boolean;\n  optimization?: boolean | OptimizationOptions;\n  outputHashing?: OutputHashing;\n  outputPath?:\n    | string\n    | (Required<Pick<OutputPath, 'base'>> & Partial<OutputPath>);\n  polyfills?: string[];\n  root?: string;\n  scripts?: ScriptOrStyleEntry[];\n  server?: string;\n  skipTypeChecking?: boolean;\n  sourceMap?: boolean | Partial<SourceMap>;\n  ssr?:\n    | boolean\n    | {\n        entry: string;\n        experimentalPlatform?: 'node' | 'neutral';\n      };\n  stylePreprocessorOptions?: StylePreprocessorOptions;\n  styles?: ScriptOrStyleEntry[];\n  tsConfig?: string;\n  useTsProjectReferences?: boolean;\n  vendorChunk?: boolean;\n}\n\nexport interface DevServerOptions extends DevServerUnsupportedOptions {\n  port?: number;\n  ssl?: boolean;\n  sslKey?: string;\n  sslCert?: string;\n  proxyConfig?: string;\n}\n\nexport interface OptimizationOptions {\n  scripts?: boolean;\n  styles?: boolean;\n  fonts?: boolean;\n}\n\nexport type OutputHashing = 'none' | 'all' | 'media' | 'bundles';\nexport type HashFormat = {\n  chunk: string;\n  extract: string;\n  file: string;\n  script: string;\n};\n\nexport interface OutputPath {\n  base: string;\n  browser: string;\n  server: string;\n  media: string;\n}\n\nexport type AssetExpandedDefinition = {\n  glob: string;\n  input: string;\n  ignore?: string[];\n  output?: string;\n};\nexport type AssetElement = AssetExpandedDefinition | string;\nexport type NormalizedAssetElement = AssetExpandedDefinition & {\n  output: string;\n};\nexport type ScriptOrStyleEntry =\n  | string\n  | {\n      input: string;\n      bundleName?: string;\n      inject?: boolean;\n    };\nexport type GlobalEntry = {\n  name: string;\n  files: string[];\n  initial: boolean;\n};\nexport type IndexExpandedDefinition = {\n  input: string;\n  output?: string;\n  preloadInitial?: boolean;\n};\nexport type IndexElement = IndexExpandedDefinition | string | false;\nexport type IndexHtmlTransform = (content: string) => Promise<string>;\nexport type NormalizedIndexElement =\n  | (IndexExpandedDefinition & {\n      insertionOrder: [string, boolean][];\n      transformer: IndexHtmlTransform | undefined;\n    })\n  | false;\n\nexport interface SourceMap {\n  scripts: boolean;\n  styles: boolean;\n  hidden: boolean;\n  vendor: boolean;\n}\n\nexport type InlineStyleExtension = 'css' | 'scss' | 'sass' | 'less';\nexport interface FileReplacement {\n  replace: string;\n  with: string;\n}\nexport interface StylePreprocessorOptions {\n  includePaths?: string[];\n  sass?: Sass;\n}\nexport interface Sass {\n  fatalDeprecations?: DeprecationOrId[];\n  futureDeprecations?: DeprecationOrId[];\n  silenceDeprecations?: DeprecationOrId[];\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Projects with Tag Wildcard in Nx run-many\nDESCRIPTION: Shows how to test all projects with tags starting with 'api-' using the run-many command and tag wildcards.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run-many.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t test --projects=tag:api-*\n```\n\n----------------------------------------\n\nTITLE: Running Angular Application with Nx CLI\nDESCRIPTION: Command to serve an Angular application named 'app1' using the Nx CLI, which will compile and serve the application with Tailwind CSS processing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run app1:serve\n```\n\n----------------------------------------\n\nTITLE: Using notDependOnLibsWithTags to Invert Dependency Conditions in Nx\nDESCRIPTION: This snippet shows how to use the notDependOnLibsWithTags property to explicitly specify which tag(s) a project cannot depend on. This approach can simplify dependency rules by inverting the condition.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/ban-dependencies-with-tags.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"sourceTag\": \"scope:client\",\n  // we accept any tag except for `scope:admin`\n  \"notDependOnLibsWithTags\": [\"scope:admin\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab Code Owners in nx.json with Sections\nDESCRIPTION: Enhanced configuration for GitLab CODEOWNERS with support for sections that provide additional control over PR processes, including required approvals and optional reviews.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/owners/documents/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"owners\": {\n    \"format\": \"gitlab\",\n    \"outputPath\": \"CODEOWNERS\",\n    \"patterns\": [\n      {\n        \"description\": \"A description of the rule\",\n        \"owners\": [\"@joelovesrust\"],\n        \"projects\": [\"my-rust-app\", \"rust-*\", \"tag:rust\"],\n        \"files\": [\".github/workflows/**/*\"]\n      }\n    ],\n    \"sections\": [\n      {\n        \"name\": \"My section\",\n        \"defaultOwners\": [\"@cheddar\"],\n        \"numberOfRequiredApprovals\": 2,\n        \"optional\": true,\n        \"patterns\": []\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Project Details in Nx Monorepo\nDESCRIPTION: Command to display detailed information about a specific project in the Nx monorepo, including available tasks and configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx show project react-store\n```\n\n----------------------------------------\n\nTITLE: Ad-hoc Environment Variable Setting on Windows (Powershell)\nDESCRIPTION: Demonstrates setting an environment variable in Windows PowerShell using '$env'. It assigns a value to 'NX_PUBLIC_API_URL' and chains an Nx build command within the PowerShell environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/define-environment-variables.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n($env:NX_PUBLIC_API_URL = \"http://localhost:3333\") -and (nx build myapp)\n```\n\n----------------------------------------\n\nTITLE: Basic Storybook Configuration Command for Vue\nDESCRIPTION: Command to generate basic Storybook configuration for a Vue project using the Nx generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vue/docs/storybook-configuration-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/vue:storybook-configuration project-name\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Remix Plugin Configuration\nDESCRIPTION: JSON configuration for @nx/remix plugin in nx.json, defining build, dev, start and typecheck target names\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/remix/remix-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/remix/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"build\",\n        \"devTargetName\": \"dev\",\n        \"startTargetName\": \"start\",\n        \"typecheckTargetName\": \"typecheck\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running iOS App on Device by UDID\nDESCRIPTION: This bash command illustrates how to run an iOS app on a specific device using its UDID with the Nx CLI. It includes the '--udid' flag to specify the target device's unique identifier.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/run-ios-examples.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnx run-ios <app-name> --udid=\"device udid\"\n```\n\n----------------------------------------\n\nTITLE: Project-Level Caching Configuration in package.json\nDESCRIPTION: Shows how to define caching options in package.json for a specific project, guiding inputs exclusion and specifying output directories.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/cache-task-results.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"some-project\",\n  \"nx\": {\n    \"targets\": {\n      \"build\": {\n        ...\n        \"inputs\": [\"!{projectRoot}/**/*.md\"],\n        \"outputs\": [\"{workspaceRoot}/dist/apps/some-project\"],\n        ...\n      }\n      ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DTS Plugin without Skip Diagnostics in Vite\nDESCRIPTION: Configuration for vite-plugin-dts with full type checking enabled during library builds.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/vite/configure-vite.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n...\nimport dts from 'vite-plugin-dts';\n...\n...\nexport default defineConfig({\n  plugins: [\n    ...,\n    dts({\n      root: '../../',\n      entryRoot: 'libs/my-lib/src',\n      tsConfigFilePath: 'libs/my-lib/tsconfig.lib.json',\n      include: ['libs/my-lib/src/**/*.ts'],\n      outputDir: 'dist/libs/my-lib',\n      skipDiagnostics: false,\n    }),\n```\n\n----------------------------------------\n\nTITLE: Defining FileData Interface Properties in TypeScript\nDESCRIPTION: Interface declaration containing three properties: an optional deps array of FileDataDependency type for storing file dependencies, a required file string property for file paths, and a required hash string property for file hashes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/FileData.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FileData {\n  deps?: FileDataDependency[];\n  file: string;\n  hash: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Line Highlighting in Code Snippets\nDESCRIPTION: This feature enables interactive highlighting of code line groups that can be toggled by users, useful for explaining different parts of a code example.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n```javascript {% lineGroups={ first:[2,3],second:[4,5] } %}\n const code = \"goes here\";\n This is in the first group\n This is also in the first group\n This is in the second group\n This is also in the second group\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Executor with Angular Builder\nDESCRIPTION: Equivalent executor implementation using Angular Builder, demonstrating the same functionality but using RxJS Observable pattern.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/nx-devkit-angular-devkit.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Schema {\n  message: string;\n  allCaps: boolean;\n}\nexport function run(\n  options: Schema,\n  context: BuilderContext\n): Observable<{ success: true }> {\n  if (options.allCaps) {\n    console.log(options.message.toUpperCase());\n  } else {\n    console.log(options.message);\n  }\n  return of({ success: true });\n}\nexport default createBuilder<NextBuildBuilderOptions>(run);\n```\n\n----------------------------------------\n\nTITLE: Removing Dependencies from Package.json in Nx\nDESCRIPTION: Function to remove specified dependencies and devDependencies from a package.json file. Takes a Tree object, arrays of dependencies and devDependencies to remove, and an optional package.json path. Returns a GeneratorCallback for uninstalling dependencies if changes are needed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/removeDependenciesFromPackageJson.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nremoveDependenciesFromPackageJson(tree, ['react'], ['jest']);\n```\n\n----------------------------------------\n\nTITLE: Configuring @nx/webpack Plugin in nx.json\nDESCRIPTION: This JSON configuration in nx.json sets up the @nx/webpack plugin with customizable target names for build, preview, serve, and serve-static tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/webpack/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/webpack/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"build\",\n        \"previewTargetName\": \"preview\",\n        \"serveTargetName\": \"serve\",\n        \"serveStaticTargetName\": \"serve-static\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Activation Key Environment Variable for Nx Shared Cache\nDESCRIPTION: This snippet shows how to set the activation key as an environment variable in a .env file. This is useful for public repositories or CI environments to avoid exposing the key directly in the code.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/shared-fs-cache/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNX_KEY=YOUR_ACTIVATION_KEY\n```\n\n----------------------------------------\n\nTITLE: Creating a project reference\nDESCRIPTION: This command uses the `@nx-dotnet/core:project-reference` generator to add a project reference from the `my-api` application to the `dotnet-lib` library. This allows `my-api` to use code from `dotnet-lib`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-dotnet.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx-dotnet/core:project-reference --project=my-api --reference=dotnet-lib\n```\n\n----------------------------------------\n\nTITLE: React Webpack Configuration\nDESCRIPTION: Webpack configuration for React projects using NxReactWebpackPlugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/webpack-config-setup.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { NxAppWebpackPlugin } = require('@nx/webpack/app-plugin');\nconst { NxReactWebpackPlugin } = require('@nx/react/webpack-plugin');\nconst { join } = require('path');\n\nmodule.exports = {\n  output: {\n    path: join(__dirname, '../../dist/apps/demo'),\n  },\n  devServer: {\n    port: 4200,\n  },\n  plugins: [\n    new NxAppWebpackPlugin({\n      tsConfig: './tsconfig.app.json',\n      compiler: 'swc',\n      main: './src/main.tsx',\n      index: '.src/index.html',\n      styles: ['./src/styles.css'],\n      outputHashing: process.env['NODE_ENV'] === 'production' ? 'all' : 'none',\n      optimization: process.env['NODE_ENV'] === 'production',\n    }),\n    new NxReactWebpackPlugin({}),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Links in Markdown\nDESCRIPTION: Markdown formatting for documentation links and embedded image related to Nx learning resources.\nSOURCE: https://github.com/nrwl/nx/blob/master/scripts/readme-fragments/resources.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Documentation & Resources\n\n- [Nx.Dev: Documentation, Guides, Tutorials](https://nx.dev)\n- [Intro to Nx](https://nx.dev/getting-started/intro)\n- [Official Nx YouTube Channel](https://www.youtube.com/@NxDevtools)\n- [Blog Posts About Nx](https://nx.dev/blog)\n\n<p style=\"text-align: center;\"><a href=\"https://nx.dev/#learning-materials\" target=\"_blank\" rel=\"noreferrer\"><img src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-courses-and-videos.svg\" \nwidth=\"100%\" alt=\"Nx - Smart Monorepos · Fast CI\"></a></p>\n```\n\n----------------------------------------\n\nTITLE: Generating CI Workflow File for Nx Projects\nDESCRIPTION: This command generates a CI workflow file for GitHub Actions in an Nx project. It creates a .github/workflows/ci.yml file that sets up a pipeline for running lint, test, build, and e2e tasks on affected projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/3a-fast-ci/3-create-ci-workflow/content.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate ci-workflow --ci=github\n```\n\n----------------------------------------\n\nTITLE: Creating Static Line Highlighting in Code Snippets\nDESCRIPTION: This syntax allows for static highlighting of specific lines in code examples, which cannot be changed by the user, focusing attention on important lines.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n```javascript {% highlightLines=[2,3] %}\n const code = \"goes here\";\n This is highlighted\n This is also highlighted\n This is not highlighted\n Neither is this\n```\n```\n\n----------------------------------------\n\nTITLE: HTML Logo Display Code\nDESCRIPTION: Responsive HTML code for displaying the Nx logo with dark/light mode support using picture and source elements\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/rspack/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"text-align: center;\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Moving useDaemonProcess Configuration in nx.json\nDESCRIPTION: Shows the configuration change to move useDaemonProcess option from nested tasksRunnerOptions.default.options to the root level of nx.json. This modification simplifies the configuration structure while maintaining the same functionality.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/src/migrations/update-20-0-0/move-use-daemon-process.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasksRunnerOptions\": {\n    \"default\": {\n      \"options\": {\n        \"useDaemonProcess\": false\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"useDaemonProcess\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cypress Environment Variables via Command Line for Inferred Tasks\nDESCRIPTION: This shell command demonstrates how to set multiple Cypress environment variables (API_URL and API_KEY) when running e2e tests using inferred tasks in Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/cypress/documents/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx e2e frontend-e2e -e=API_URL=https://api.my-nx-website.com,API_KEY=abc-123\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Module Federation Plugin in Rspack\nDESCRIPTION: Implementation example showing how to add the NxModuleFederationSSRDevServerPlugin to a Rspack configuration file for server-side rendering.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/module-federation/nx-module-federation-dev-server-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NxModuleFederationSSRDevServerPlugin } from '@nx/module-federation/rspack';\nimport config from './module-federation.config';\n\nexport default {\n  ...otherRspackConfigOptions,\n  plugins: [\n    new NxModuleFederationSSRDevServerPlugin({\n      config,\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing Angular Migrations Configuration\nDESCRIPTION: Example of analyzing migrations.json to determine the correct version for package updates\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/advanced-update.md#2025-04-22_snippet_8\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"packageJsonUpdates\": {\n    \"16.1.0\": {\n      \"version\": \"16.1.0-beta.1\",\n      \"x-prompt\": \"Do you want to update the Angular version to v16?\",\n      \"packages\": {\n        \"@angular/core\": {\n          \"version\": \"~16.0.0\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generate React Library\nDESCRIPTION: Command to generate a new React library in the libs directory\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/generate.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/react:library libs/mylibrary\n```\n\n----------------------------------------\n\nTITLE: Upgrading Storybook with Config Directory\nDESCRIPTION: Command to upgrade Storybook while specifying the configuration directory location. This ensures the CLI can find and update the correct Storybook configuration files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/upgrading-storybook.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook@latest upgrade --config-dir apps/my-app/.storybook\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Outputs in nx.json\nDESCRIPTION: This snippet shows how to configure the `outputs` property within the `targetDefaults` section of the `nx.json` file. It defines the output path for the `build` target using the `{projectRoot}` token, which represents the root directory of the project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"build\": {\n      \"outputs\": [\"{projectRoot}/custom-dist\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx to Disable Source File Analysis\nDESCRIPTION: This JSON configuration in nx.json disables the automatic detection of dependencies from source code analysis. It instructs Nx to only use dependencies defined in package.json, similar to how yarn operates.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/analyze-source-files.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pluginsConfig\": {\n    \"@nx/js\": {\n      \"analyzeSourceFiles\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nx Repair Command\nDESCRIPTION: Basic command to repair Nx configuration. Can be run using global nx installation or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/repair.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx repair\n```\n\n----------------------------------------\n\nTITLE: Filtering Affected Apps in Nx\nDESCRIPTION: This example shows how to display affected apps in the workspace by combining '--affected' and '--type' options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/show.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx show projects --affected --type app\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Nx\nDESCRIPTION: This snippet shows how to run unit tests for the ui-remote-cache library using the Nx CLI. The command utilizes Jest as the testing framework. No additional dependencies are required beyond Nx and Jest.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/ui-remote-cache/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx test ui-remote-cache\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Module Federation with Rspack\nDESCRIPTION: Example configuration for setting up client-side module federation in an Rspack config file using NxModuleFederationPlugin and NxModuleFederationDevServerPlugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/module-federation/documents/nx-module-federation-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  NxModuleFederationPlugin,\n  NxModuleFederationDevServerPlugin,\n} from '@nx/module-federation/rspack';\nimport config from './module-federation.config';\n\nexport default {\n  ...otherRspackConfigOptions,\n  plugins: [\n    new NxModuleFederationPlugin({\n      config,\n    }),\n    new NxModuleFederationDevServerPlugin({\n      config,\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication Service\nDESCRIPTION: TypeScript implementation of the UserService for handling user authentication and logout functionality.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  private isUserLoggedIn = new BehaviorSubject(false);\n  isUserLoggedIn$ = this.isUserLoggedIn.asObservable();\n\n  checkCredentials(username: string, password: string) {\n    if (username === 'demo' && password === 'demo') {\n      this.isUserLoggedIn.next(true);\n    }\n  }\n\n  logout() {\n    this.isUserLoggedIn.next(false);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateNodesFunction<T> Type Alias in TypeScript\nDESCRIPTION: This code defines a generic type alias for a function that creates nodes from a project configuration file. It takes a configuration file path, options, and context as parameters, and returns a CreateNodesResult or a Promise of CreateNodesResult.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/CreateNodesFunction.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **CreateNodesFunction**<`T`>: (`projectConfigurationFile`: `string`, `options`: `T` | `undefined`, `context`: [`CreateNodesContext`](../../devkit/documents/CreateNodesContext)) => [`CreateNodesResult`](../../devkit/documents/CreateNodesResult) | `Promise`<[`CreateNodesResult`](../../devkit/documents/CreateNodesResult)>\n```\n\n----------------------------------------\n\nTITLE: ESM Module Format Example\nDESCRIPTION: Demonstrates the syntax for importing and exporting modules using ECMAScript Modules (ESM) format.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-09-who-gave-js-a-build-step.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport statements\nexport statements\n```\n\n----------------------------------------\n\nTITLE: Editor Context Implementation\nDESCRIPTION: Shows how to implement editor context sharing across components using Lit's Context API\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-06-29-nx-console-gets-lit.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const editorContext = createContext<'vscode' | 'intellij'>(\n  Symbol('editor')\n);\n\nconst EditorContext = (superClass) =>\n  class extends superClass {\n    @consume({ context: editorContext })\n    @state()\n    editor: 'vscode' | 'intellij';\n  };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport class IdeCommunicationController implements ReactiveController {\n  // ...\n  constructor(private host: ReactiveElement) {\n    const editor = isVscode() ? 'vscode' : 'intellij';\n    // provide the context to all DOM children of the host element\n    new ContextProvider(host, {\n      context: editorContext,\n      initialValue: editor,\n    });\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('some-component')\nexport class SomeComponent extends EditorContext(LitElement) {\n  render() {\n    return html`<p>I am rendered in ${this.editor}</p>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Workspace with Canary Release\nDESCRIPTION: Command to create a new Nx workspace using the latest canary release for previewing unreleased features.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-12-20-nx-17-2-release.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@canary\n```\n\n----------------------------------------\n\nTITLE: Passing Auth Token for Private NPM Registry in Nx Cloud\nDESCRIPTION: Shows how to pass an authentication token for a private NPM registry when starting an Nx Cloud CI run.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n# this assumes SOME_AUTH_TOKEN is already defined on the main agent\nnx-cloud start-ci-run --distribute-on=\"5 my-linux-medium-js\" --with-env-vars=\"SOME_AUTH_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Adding Nx JS Plugin Using NX Command\nDESCRIPTION: The following shell command adds @nx/js plugin which helps in managing tasks configurations automatically in a TypeScript monorepo. The command installs and initializes the plugin, updating `nx.json` and `package.json` accordingly. The plugin automatically infers tasks like build and typecheck.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/typescript-packages.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx add @nx/js\n```\n\n----------------------------------------\n\nTITLE: Configuring CircleCI for Nx Agents Task Distribution\nDESCRIPTION: CircleCI configuration file that enables Nx Agents to distribute tasks across multiple machines. It includes setup for PNPM, Nx Cloud distribution across 3 agents, and configures the affected commands to run lint, test, build and e2e-ci tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/tutorial/circle.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\n\norbs:\n  nx: nrwl/nx@1.6.2\n\njobs:\n  main:\n    docker:\n      - image: cimg/node:lts-browsers\n    steps:\n      - checkout\n\n      - run:\n          name: Install PNPM\n          command: npm install --prefix=$HOME/.local -g pnpm@8\n\n      # This enables task distribution via Nx Cloud\n      # Run this command as early as possible, before dependencies are installed\n      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun\n      # Connect your workspace by running \"nx connect\" and uncomment this line to enable task distribution\n      - run: pnpm dlx nx-cloud start-ci-run --distribute-on=\"3 linux-medium-js\" --stop-agents-after=\"e2e-ci\"\n\n      - run: pnpm install --frozen-lockfile\n      - nx/set-shas:\n          main-branch-name: 'main'\n\n      # Prepend any command with \"nx-cloud record --\" to record its logs to Nx Cloud\n      # - run: pnpm exec nx-cloud record -- echo Hello World\n      - run: pnpm exec nx affected --base=$NX_BASE --head=$NX_HEAD -t lint test build e2e-ci\n\nworkflows:\n  version: 2\n\n  ci:\n    jobs:\n      - main\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Environment Variables using Inferred Tasks\nDESCRIPTION: Example of setting Cypress environment variables using inferred tasks in project.json configuration file. Shows how to set API_URL as an environment variable through the args property.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/cypress/cypress-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"targets\": {\n    \"e2e\": {\n      \"options\": {\n        \"args\": \"--env=API_URL=https://api.my-nx-website.com\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cypress Configuration with Task Splitting\nDESCRIPTION: TypeScript configuration for Cypress including e2e task splitting setup with web server commands\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/cypress/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress';\nimport { nxE2EPreset } from '@nx/cypress/plugins/cypress-preset';\n\nexport default defineConfig({\n  e2e: {\n    ...nxE2EPreset(__filename, {\n      cypressDir: 'src',\n      bundler: 'vite',\n      webServerCommands: {\n        default: 'nx run my-project:serve',\n        production: 'nx run my-project:preview',\n      },\n      ciWebServerCommand: 'nx run my-project:serve-static',\n    }),\n    baseUrl: 'http://localhost:4200',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Project-Level Code Ownership Configuration\nDESCRIPTION: Project-specific code ownership rules defined in project.json, supporting file glob patterns and per-file ownership assignments with optional descriptions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/owners/documents/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"owners\": {\n    \"**/*\": [\"@ahmed\", \"@petra\"],\n    \"README.md\": {\n      \"description\": \"Jared is very particular about the README file\",\n      \"owners\": [\"@jared\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Base URL in Nx\nDESCRIPTION: TypeScript configuration for setting the base URL in Playwright tests within an Nx workspace, including environment-specific settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/playwright/documents/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // Rest of your config...\n\n  // Run your local dev server before starting the tests\n  webServer: {\n    command: 'npx serve <your-app-name>',\n    url: 'http://localhost:4200',\n    reuseExistingServer: !process.env.CI,\n  },\n  use: {\n    baseURL: 'http://localhost:4200', // url playwright visits with `await page.goto('/')`;\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\n\nconst baseUrl =\n  process.env.BASE_URL ?? process.env.CI\n    ? 'https://some-staging-url.example.com'\n    : 'http://localhost:4200';\n\nexport default defineConfig({\n  // Rest of your config...\n\n  // Run your local dev server before starting the tests\n  webServer: {\n    command: 'npx serve <your-app-name>',\n    url: baseUrl,\n    reuseExistingServer: !process.env.CI,\n  },\n  use: {\n    baseURL: baseUrl, // url playwright visits with `await page.goto('/')`;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Angular Button Component\nDESCRIPTION: Example HTML template for a my-button component that shows how to bind properties like disabled state, styling with ngStyle, and text content.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/plugin-angular.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button [disabled]=\"disabled\" [ngStyle]=\"{ 'padding.px': padding }\">\n  {{ text }}\n</button>\n```\n\n----------------------------------------\n\nTITLE: React Native Plugin Configuration\nDESCRIPTION: JSON configuration for the React Native plugin in nx.json defining target names for various commands\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react-native/react-native-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/react-native/plugin\",\n      \"options\": {\n        \"startTargetName\": \"start\",\n        \"podInstallTargetName\": \"pod-install\",\n        \"bundleTargetName\": \"bundle\",\n        \"runIosTargetName\": \"run-ios\",\n        \"runAndroidTargetName\": \"run-android\",\n        \"buildIosTargetName\": \"build-ios\",\n        \"buildAndroidTargetName\": \"build-android\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Run Next.js Build (Production)\nDESCRIPTION: This command executes the Next.js build process using the 'production' configuration.  It uses the settings defined in the project.json file for the production configuration to produce an optimized build suitable for deployment.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/build-next-executor-examples.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n\"nx run acme:build:production\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for PreTasksExecutionContext\nDESCRIPTION: Defines a TypeScript type alias for PreTasksExecutionContext with two properties: nxJsonConfiguration of type NxJsonConfiguration and workspaceRoot of type string. This interface is used to provide context for pre-task execution in the Nx build system.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/PreTasksExecutionContext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype PreTasksExecutionContext = {\n  nxJsonConfiguration: NxJsonConfiguration;\n  workspaceRoot: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Router in app.config.ts\nDESCRIPTION: This snippet shows how to set up the Angular router in the app.config.ts file, including the necessary imports and provider configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationConfig } from '@angular/core';\nimport {\n  provideRouter,\n  withEnabledBlockingInitialNavigation,\n} from '@angular/router';\nimport { appRoutes } from './app.routes';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [provideRouter(appRoutes, withEnabledBlockingInitialNavigation())],\n};\n```\n\n----------------------------------------\n\nTITLE: Original Vite Build Target Configuration\nDESCRIPTION: Example of a build target configuration in project.json before migration to inferred tasks, showing explicit executor and configuration options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/convert-to-inferred.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"build\": {\n  \"executor\": \"@nx/vite:build\",\n  \"options\": {\n    \"mode\": \"development\"\n  },\n  \"defaultConfiguration\": \"production\",\n  \"configurations\": {\n    \"development\": {},\n    \"production\": {},\n    \"ci\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Native Minified Bundle Configuration\nDESCRIPTION: Configuration for creating minified bundles for both iOS and Android platforms\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/bundle-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n    \"bundle-ios\": {\n      \"executor\": \"@nx/react-native:bundle\",\n      \"options\": {\n        \"entryFile\": \"src/main.tsx\",\n        \"platform\": \"ios\",\n        \"bundleOutput\": \"dist/apps/mobile/ios/main.jsbundle\",\n        \"minify\": true\n      }\n    },\n    \"bundle-android\": {\n      \"executor\": \"@nx/react-native:bundle\",\n      \"options\": {\n        \"entryFile\": \"src/main.tsx\",\n        \"platform\": \"android\",\n        \"bundleOutput\": \"dist/apps/mobile/android/main.jsbundle\",\n        \"minify\": true\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Legacy Webpack configuration with plugins\nDESCRIPTION: Example of an old-style Webpack configuration file that modifies the config object by adding plugins, which needs to be refactored after migration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/troubleshoot-convert-to-inferred.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.old.js\nmodules.exports = (config) => {\n  config.plugins.push(new SomePlugin());\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: External Nodes Property Definition\nDESCRIPTION: Describes the externalNodes property of the CreateNodesResult interface. This property is a map of external node names to ProjectGraphExternalNode objects. External nodes do not have a root and are referenced by their name.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/CreateNodesResult.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexternalNodes: Record<string, ProjectGraphExternalNode>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Nuxt Plugin\nDESCRIPTION: JSON configuration for the Nx Nuxt plugin in nx.json, including target name customization for build, test, serve, and static operations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/nuxt/nuxt-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/nuxt/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"build\",\n        \"testTargetName\": \"test\",\n        \"serveTargetName\": \"serve\",\n        \"buildStaticTargetName\": \"build-static\",\n        \"serveStaticTargetName\": \"serve-static\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Storybook Configuration for Host Library (Nx)\nDESCRIPTION: This command configures Storybook for the newly generated host library. It enables interaction tests and generates example stories to ensure Storybook loads correctly. A story is required for Storybook to load successfully.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/one-storybook-with-composition.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:storybook-configuration storybook-host --interactionTests=true --generateStories=true\n```\n\n----------------------------------------\n\nTITLE: Listing Available Generators in Nx Plugin\nDESCRIPTION: This command displays all available code generators provided by the specified Nx plugin (e.g., @nx/react). It allows users to discover the different types of scaffolding and automation functionalities offered by the plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/generate-code.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx list @nx/react\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON with TypeScript Generic Function\nDESCRIPTION: A generic function that parses JSON strings into typed objects. Supports JavaScript-style comments and trailing commas by default. Takes a generic type parameter T that extends object (defaults to any) and returns the parsed object of type T.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/parseJson.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nparseJson<T extends object = any>(input: string, options?: JsonParseOptions): T\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Definition\nDESCRIPTION: Example .env file containing environment variable definitions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/use-environment-variables-in-angular.md#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nMY_ORG_API_URL=http://localhost:3333\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Solid Application\nDESCRIPTION: Set up the Vite configuration for the Solid application. This includes specifying plugins for Solid and TypeScript path resolution, as well as build and test settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-solid.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n/// <reference types=\"vitest\" />\nimport { defineConfig } from 'vite';\nimport solidPlugin from 'vite-plugin-solid';\n// import devtools from 'solid-devtools/vite';\n\nimport viteTsConfigPaths from 'vite-tsconfig-paths';\n\nexport default defineConfig({\n  cacheDir: '../../node_modules/.vite/apps/my-solid-app',\n\n  server: {\n    port: 3000,\n  },\n\n  build: {\n    target: 'esnext',\n  },\n\n  plugins: [\n    viteTsConfigPaths({\n      root: '../../',\n    }),\n    /*\n                                                                        Uncomment the following line to enable solid-devtools.\n                                                                        For more info see https://github.com/thetarnav/solid-devtools/tree/main/packages/extension#readme\n                                                                        */\n    // devtools(),\n    solidPlugin(),\n  ],\n\n  // Uncomment this if you are using workers.\n  // worker: {\n  //  plugins: [\n  //    viteTsConfigPaths({\n  //      root: '../../',\n  //    }),\n  //  ],\n  // },\n\n  test: {\n    globals: true,\n    cache: {\n      dir: '../../node_modules/.vitest/apps/my-solid-app',\n    },\n    environment: 'jsdom',\n    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Removing experimentalJustInTimeCompile for Vite Bundlers\nDESCRIPTION: This example shows how to migrate a Cypress configuration by removing the experimentalJustInTimeCompile option entirely when using Vite as the bundler for React applications, as JIT compilation no longer applies to Vite in Cypress v14.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/src/migrations/update-20-8-0/replace-experimental-just-in-time-compile.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress';\n\nexport default defineConfig({\n  component: {\n    devServer: {\n      framework: 'react',\n      bundler: 'vite',\n    },\n    experimentalJustInTimeCompile: false,\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress';\n\nexport default defineConfig({\n  component: {\n    devServer: {\n      framework: 'react',\n      bundler: 'vite',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Expo Export with Nx\nDESCRIPTION: Command to execute the export task for an Expo mobile application using the Nx CLI, which bundles the application according to the configuration specified in project.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/export-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx run mobile:export\n```\n\n----------------------------------------\n\nTITLE: Declaring Cache Directory Constant in TypeScript\nDESCRIPTION: This snippet declares a constant variable 'cacheDir' of type string. It represents the path to the directory where Nx stores its cache and daemon-related files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/cacheDir.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst cacheDir: string\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Sharing Library Versions in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure Module Federation to not share specific library versions between remotes and hosts, allowing each to load its distinct version when necessary.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/manage-library-versions-with-module-federation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ModuleFederationConfig } from '@nx/webpack';\n\nconst config: ModuleFederationConfig = {\n  name: 'remote',\n  exposes: {\n    './Module': './src/remote-entry.ts',\n  },\n  // Determine which libraries to share\n  shared: (packageName: string) {\n    // I do not want to share this package and I will load my own version\n    if(packageName === '@acme/utils') return false;\n  }\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: React Monorepo Project Structure\nDESCRIPTION: This snippet displays the folder structure generated by the Nx CLI for a React monorepo. It shows the main directories and files created, including the React application, e2e tests, and configuration files.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/2-use-preset/content.mdx#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n└─ react-monorepo\n   ├─ ...\n   ├─ apps\n   │  ├─ react-store\n   │  │  ├─ public\n   │  │  │  └─ ...\n   │  │  ├─ src\n   │  │  │  ├─ app\n   │  │  │  │  ├─ app.module.css\n   │  │  │  │  ├─ app.spec.tsx\n   │  │  │  │  ├─ app.tsx\n   │  │  │  │  └─ nx-welcome.tsx\n   │  │  │  ├─ assets\n   │  │  │  ├─ main.tsx\n   │  │  │  └─ styles.css\n   │  │  ├─ index.html\n   │  │  ├─ package.json\n   │  │  ├─ tsconfig.app.json\n   │  │  ├─ tsconfig.json\n   │  │  ├─ tsconfig.spec.json\n   │  │  └─ vite.config.ts\n   │  └─ react-store-e2e\n   │     └─ ...\n   ├─ nx.json\n   ├─ tsconfig.base.json\n   └─ package.json\n```\n\n----------------------------------------\n\nTITLE: NxModuleFederationSSRDevServerPlugin Class Definition\nDESCRIPTION: Class definition for the server-side module federation plugin, showing constructor parameters and default options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/module-federation/nx-module-federation-dev-server-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class NxModuleFederationSSRDevServerPlugin {\n  constructor(\n    private _options: {\n      config: ModuleFederationConfig;\n      devServerConfig?: NxModuleFederationDevServerConfig;\n    }\n  ) {\n    this._options.devServerConfig ??= {\n      host: 'localhost',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Caching in package.json\nDESCRIPTION: Updates package.json to enable Nx caching for the build script. Includes configuration for cache inputs and outputs, which allows Nx to determine when to use cached results versus running the task.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/manual.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"nx exec -- tsc -p tsconfig.json\"\n  },\n  \"nx\": {\n    \"targets\": {\n      \"build\": {\n        \"cache\": true,\n        \"inputs\": [\n          \"{projectRoot}/**/*.ts\",\n          \"{projectRoot}/tsconfig.json\",\n          { \"externalDependencies\": [\"typescript\"] }\n        ],\n        \"outputs\": [\"{projectRoot}/dist\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Assignment Rules for Manual DTE in YAML\nDESCRIPTION: Example YAML configuration for assignment rules using manual Distributed Task Execution (DTE). It specifies rules for different projects and targets.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/assignment-rules.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nassignment-rules:\n  - projects:\n      - app1\n    targets:\n      - e2e-ci*\n    run-on:\n      - agent: linux-medium\n        parallelism: 5\n\n  - targets:\n      - lint,build\n    run-on:\n      - agent: linux-large\n        parallelism: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Lint Task in Nx\nDESCRIPTION: This snippet sets up an inferred lint task for projects using ESLint. It integrates the ESLint plugin into the Nx configuration to facilitate linting. ESLint must be installed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/common-tasks.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\"plugins\":[{\"plugin\":\"@nx/eslint/plugin\",\"options\":{\"targetName\":\"lint\"}}]}\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for Angular Application\nDESCRIPTION: This command runs the end-to-end (E2E) tests for the specified Angular application using the Nx CLI. It uses the configured E2E test runner (default is Cypress) to execute the tests.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/angular/angular-plugin.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\"nx e2e appName\"\n```\n\n----------------------------------------\n\nTITLE: Client-Side Rendering (CSR) Configuration with createConfig\nDESCRIPTION: Example showing how to create a Rspack configuration for a client-side only Angular application, specifying just the browser entry point.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rspack/create-config.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@nx/angular-rspack';\n\nexport default createConfig({\n  options: {\n    browser: './src/main.ts',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generate Storybook Configuration with Ignored Paths\nDESCRIPTION: Command demonstrating how to generate Storybook configuration while excluding specific paths from story generation using the ignorePaths option\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/storybook-configuration-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react:storybook-configuration ui --generateStories=true --ignorePaths=libs/ui/src/not-stories/**,**/**/src/**/*.other.*,apps/my-app/**/*.something.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Application Dependencies\nDESCRIPTION: TOML configuration for the myapp application, specifying dependencies including actix-web and the local cats library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-rust.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"myapp\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n\n[dependencies]\nactix-web = \"4\"\ncats = { path = \"../../libs/cats\" }\n\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Federation for Login Application\nDESCRIPTION: TypeScript configuration for the Module Federation setup in the login application, specifying the name and exposed routes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ModuleFederationConfig } from '@nx/webpack';\n\nconst config: ModuleFederationConfig = {\n  name: 'login',\n  exposes: {\n    './Routes': 'apps/login/src/app/remote-entry/entry.routes.ts',\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: NxModuleFederationDevServerPlugin Class Definition\nDESCRIPTION: Class definition for the client-side module federation plugin, showing constructor parameters and default options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/module-federation/nx-module-federation-dev-server-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class NxModuleFederationDevServerPlugin {\n  constructor(\n    private _options: {\n      config: ModuleFederationConfig;\n      devServerConfig?: NxModuleFederationDevServerConfig;\n    }\n  ) {\n    this._options.devServerConfig ??= {\n      host: 'localhost',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Standalone Project File Structure in Nx\nDESCRIPTION: Shows the typical file structure for a standalone project in Nx, including the root application and e2e testing setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-06-nx-15-3-standalone-projects-vite-task-graph-and-more.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ne2e/\n  src/\n  cypress.config.ts\n  project.json\n  ...\nsrc/\n  app/\n  main.tsx\n  ...\npublic/\nindex.html\nproject.json\ntsconfig.spec.json\ntsconfig.app.json\ntsconfig.json\nvite.config.ts\nnx.json\npackage.json\n```\n\n----------------------------------------\n\nTITLE: Configuration Types and Specificity Table\nDESCRIPTION: Illustrates the different types of configuration files in an Nx workspace, categorized by Nx and tooling configurations, and their global or project-specific scope\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/types-of-configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                  | Nx                          | Tooling                       |\n| ---------------- | --------------------------- | ----------------------------- |\n| Global           | `/nx.json`                  | `/jest.config.ts`             |\n| Project-specific | `/apps/my-app/project.json` | `/apps/my-app/jest.config.ts` |\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Content in Nx Documentation\nDESCRIPTION: This component displays related information in a tabbed interface, allowing readers to switch between different contexts like package managers.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n{% tabs %}\n{% tab label=\"npm\" %}\nNPM related information.\n{% /tab %}\n{% tab label=\"yarn\" %}\nYarn related information.\n{% /tab %}\n{% /tabs %}\n```\n\n----------------------------------------\n\nTITLE: Package.json Scripts with Nx Wrapping\nDESCRIPTION: Example of package.json scripts wrapped by Nx for caching, while preserving original commands for non-cacheable operations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-06-nx-15-3-standalone-projects-vite-task-graph-and-more.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"scripts\": {\n    \"build\": \"nx exec -- vite build\",\n    \"lint\": \"nx exec -- eslint \\\"src/**/*.ts*\\\"\",\n    ...\n    \"dev\": \"vite\",\n    \"start\": \"vite --open\"\n  },\n  \"devDependencies\": {\n    ...\n    \"nx\": \"15.3.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Next.js Application\nDESCRIPTION: This command uses the Nx CLI to generate a new Next.js application within the specified directory. It scaffolds the necessary files and configurations to start building a Next.js application within an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"nx g @nx/next:app apps/my-new-app\"\n```\n\n----------------------------------------\n\nTITLE: Configuring File Monitoring for Nx Monorepo\nDESCRIPTION: This snippet defines the file and directory patterns to be monitored in an Nx monorepo project. It includes JSON files in the root, the entire 'libs' directory, and all subdirectories within 'apps' and 'libs'.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/meta.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"watch\": [\"/*.json\", \"/libs\", \"/(apps|libs)/**\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Library in Nx\nDESCRIPTION: Command to generate a new JavaScript library in an Nx workspace, which will be consumed by the Lit application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-lit.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/js:lib libs/my-lib\n```\n\n----------------------------------------\n\nTITLE: Running Angular Rspack Build with Configuration\nDESCRIPTION: This bash command demonstrates how to run the Angular Rspack build with a specific configuration using the `NGRS_CONFIG` environment variable. Setting `NGRS_CONFIG` to `production` will instruct `createConfig` to use the production configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/handling-configurations.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNGRS_CONFIG=production npx myapp build\n```\n\n----------------------------------------\n\nTITLE: Adding @nx/next to an Nx Workspace\nDESCRIPTION: This command installs the `@nx/next` plugin to an existing Nx workspace. It ensures the Next.js-specific executors and generators are available for managing Next.js applications within the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"nx add @nx/next\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Projects in Nx\nDESCRIPTION: TypeScript configuration for Playwright projects in an Nx workspace, defining browser targets for testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/playwright/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  ...,\n  projects: [\n    {\n      name: \"chromium\",\n      use: { ...devices[\"Desktop Chrome\"] },\n    },\n\n    {\n      name: \"firefox\",\n      use: { ...devices[\"Desktop Firefox\"] },\n    },\n\n    {\n      name: \"webkit\",\n      use: { ...devices[\"Desktop Safari\"] },\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Building the Publishable Library\nDESCRIPTION: Command to build the publishable library with the new configuration, including theme files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_52\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run lib3:build\n```\n\n----------------------------------------\n\nTITLE: Disabling Typecheck Configuration\nDESCRIPTION: TSConfig configuration to disable typecheck task for a specific project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/js/js-plugin.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../../tsconfig.base.json\",\n  \"files\": [],\n  \"include\": [],\n  \"references\": [\n    {\n      \"path\": \"./tsconfig.lib.json\"\n    }\n  ],\n  \"nx\": {\n    \"addTypecheckTarget\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the blog post metadata including title, authors, tags, and description\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-07-29-explain-with-ai.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Introducing Explain with AI\nslug: 'explain-with-ai'\nauthors: ['Philip Fulcher']\ncover_image: '/blog/images/2024-07-29/explain-with-ai-header.avif'\ntags: [nx, nx-cloud, ai, release]\nyoutubeUrl: https://youtu.be/g2m9cHp-O-Q?si=ax-SKCO0Xvy9vFIz\ndescription: Explain with AI in Nx Cloud Pro helps debug CI failures with AI explanations and suggested fixes.\n---\n```\n\n----------------------------------------\n\nTITLE: Package Manager Workspace Configurations\nDESCRIPTION: Workspace configurations for different package managers (NPM/Yarn/Bun and PNPM).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"ts-monorepo-linking\",\n  \"workspaces\": [\n    \"apps/*\",\n    \"packages/*\"\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\npackages:\n  - 'apps/*'\n  - 'packages/*'\n```\n\n----------------------------------------\n\nTITLE: Navigation Command\nDESCRIPTION: Simple shell command to navigate into the newly created workspace directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-12-next-gen-module-federation-deployments.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd myorg\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Nx Custom Remote Cache Server\nDESCRIPTION: OpenAPI 3.0.0 specification that defines the API endpoints required for implementing a custom Nx remote caching server. It includes endpoints for uploading and downloading cached task outputs, authentication mechanisms, and detailed response codes for various scenarios.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/self-hosted-caching.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"Nx custom remote cache specification.\",\n    \"description\": \"Nx is a build system, optimized for monorepos, with AI-powered architectural awareness and advanced CI capabilities.\",\n    \"version\": \"1.0.0\"\n  },\n  \"paths\": {\n    \"/v1/cache/{hash}\": {\n      \"put\": {\n        \"description\": \"Upload a task output\",\n        \"operationId\": \"put\",\n        \"security\": [\n          {\n            \"bearerToken\": []\n          }\n        ],\n        \"responses\": {\n          \"202\": {\n            \"description\": \"Successfully uploaded the output\"\n          },\n          \"401\": {\n            \"description\": \"Missing or invalid authentication token.\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"description\": \"Error message provided to the Nx CLI user\"\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"Access forbidden. (e.g. read-only token used to write)\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"description\": \"Error message provided to the Nx CLI user\"\n                }\n              }\n            }\n          },\n          \"409\": {\n            \"description\": \"Cannot override an existing record\"\n          }\n        },\n        \"parameters\": [\n          {\n            \"in\": \"header\",\n            \"description\": \"The file size in bytes\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"number\"\n            },\n            \"name\": \"Content-Length\"\n          },\n          {\n            \"name\": \"hash\",\n            \"description\": \"The task hash corresponding to the uploaded task output\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/octet-stream\": {\n              \"schema\": {\n                \"type\": \"string\",\n                \"format\": \"binary\"\n              }\n            }\n          }\n        }\n      },\n      \"get\": {\n        \"description\": \"Download a task output\",\n        \"operationId\": \"get\",\n        \"security\": [\n          {\n            \"bearerToken\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successfully retrieved cache artifact\",\n            \"content\": {\n              \"application/octet-stream\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"format\": \"binary\",\n                  \"description\": \"An octet stream with the content.\"\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"Access forbidden\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"description\": \"Error message provided to the Nx CLI user\"\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"The record was not found\"\n          }\n        },\n        \"parameters\": [\n          {\n            \"name\": \"hash\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ]\n      }\n    }\n  },\n  \"components\": {\n    \"securitySchemes\": {\n      \"bearerToken\": {\n        \"type\": \"http\",\n        \"description\": \"Auth mechanism\",\n        \"scheme\": \"bearer\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jest Unit Tests with Nx CLI\nDESCRIPTION: Command to execute unit tests for the ui-theme library using Jest test runner through the Nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/graph/ui-theme/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx test ui-theme\n```\n\n----------------------------------------\n\nTITLE: Setting Cypress Environment Variables via Command Line with @nx/cypress:cypress Executor\nDESCRIPTION: Example of passing multiple environment variables (API_URL and API_KEY) through command line using the @nx/cypress:cypress executor.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/cypress/cypress-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx e2e frontend-e2e --env.API_URL=\"https://api.my-nx-website.com\" --env.API_KEY=\"abc-123\"\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End (E2E) Tests\nDESCRIPTION: Executes end-to-end tests for a specified application.  Replace 'my-new-app-e2e' with the actual E2E project name (typically the application name with '-e2e' appended).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/web/web-plugin.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx e2e my-new-app-e2e\n```\n\n----------------------------------------\n\nTITLE: Creating React Libraries in Nx\nDESCRIPTION: Commands to generate React libraries with different bundler configurations and publishing options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:lib libs/my-new-lib\n\n# If you want the library to be buildable or publishable to npm\nnx g @nx/react:lib libs/my-new-lib --bundler=vite\nnx g @nx/react:lib libs/my-new-lib --bundler=rollup\nnx g @nx/react:lib libs/my-new-lib \\\n--publishable \\\n--importPath=@myorg/my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Generate Stories with Path Exclusions\nDESCRIPTION: Command demonstrating how to generate Storybook configuration while ignoring specific paths and file patterns.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vue/docs/storybook-configuration-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/vue:storybook-configuration ui --generateStories=true --ignorePaths=libs/ui/src/not-stories/**,**/**/src/**/*.other.*,apps/my-app/**/*.something.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Base TypeScript Settings in tsconfig.base.json\nDESCRIPTION: Shows the content of tsconfig.base.json file, which sets base compilation properties for the entire workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"NodeNext\",\n    \"strict\": true,\n    \"moduleResolution\": \"NodeNext\",\n    \"baseUrl\": \".\",\n    \"rootDir\": \".\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Nx Cloud using CLI command\nDESCRIPTION: This command initiates the process of connecting your Nx project to Nx Cloud. It opens a browser window for registration and guides you through creating a PR to enable Nx Cloud on your repository.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/1-ts-packages/4-fast-ci/2-connect-to-nx-cloud/content.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx connect\n```\n\n----------------------------------------\n\nTITLE: Version Update Configuration in YAML\nDESCRIPTION: YAML configuration that specifies version update levels for different packages and groups. fixed-group-1 and pkg3 are set for major version updates, while fixed-group-2 is set for minor version updates.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/src/command-line/release/config/test-files/version-plan-6.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfixed-group-1: major\nfixed-group-2: minor\npkg3: major\n```\n\n----------------------------------------\n\nTITLE: Install Nx Jest Plugin (Nx 18+)\nDESCRIPTION: This command installs the @nx/jest plugin in an Nx workspace using the nx add command. This ensures the correct version of the plugin is installed based on the version of Nx in the repository.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/jest/documents/overview.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/jest\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Cloud ID for Nx >= 19.7 in JSON\nDESCRIPTION: This snippet shows how to configure the Nx Cloud ID in nx.json for Nx versions 19.7 and above. It sets the 'nxCloudId' property with a placeholder value.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/config.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nxCloudId\": \"SOMEID\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CI Target for E2E Test Splitting\nDESCRIPTION: This JSON snippet demonstrates how to configure a CI target name in nx.json for splitting e2e tests in a distributed fashion.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/gradle/documents/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/gradle\",\n      \"options\": {\n        \"ciTargetName\": \"test-ci\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Projects with Nx Move Generator - Shell\nDESCRIPTION: This command allows you to move a project from one folder to another in your Nx workspace. It helps in reorganizing project structures when necessary.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/decisions/folder-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g move --project booking-some-project shared/some-project\n```\n\n----------------------------------------\n\nTITLE: Running Nx migrations interactively\nDESCRIPTION: This command updates Nx in interactive mode, allowing the user to choose optional package updates. The `--interactive` flag prompts the user to decide which updates to apply.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/advanced-update.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n\"nx migrate latest --interactive\"\n```\n\n----------------------------------------\n\nTITLE: Running PNPM Workspace Script Using Nx\nDESCRIPTION: This snippet shows the equivalent Nx command to run a build script for a specific package in a PNPM workspace, demonstrating Nx's task execution syntax.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/courses/pnpm-nx-next/lessons/02-run-tasks.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx build @tasker/web\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Detox Plugin\nDESCRIPTION: JSON configuration for the Nx Detox plugin in nx.json, specifying build, start, and test target names\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/detox/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/detox/plugin\",\n      \"options\": {\n        \"buildTargetName\": \"build\",\n        \"startTargetName\": \"start\",\n        \"testTargetName\": \"test\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running iOS App in Debug Mode\nDESCRIPTION: This bash command demonstrates how to run an iOS app in Debug mode using the Nx CLI. It includes the '--mode' flag to specify the build configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/run-ios-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx run-ios <app-name> --mode=Debug\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Markdown\nDESCRIPTION: This snippet demonstrates how to embed a YouTube video using custom markdown syntax. It specifies the video source URL and title.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/15_4_0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% youtube\nsrc=\"https://www.youtube.com/embed/G02THNy3PcE\"\ntitle=\"Nx 15.4 is out! Here's all you need to know\"\n/%}\n```\n\n----------------------------------------\n\nTITLE: Exporting Components from Library in TypeScript\nDESCRIPTION: Exports all components from the products library's index.ts file, making them available for use in other projects within the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from './lib/products';\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Dependencies in project.json\nDESCRIPTION: This snippet demonstrates how to manually set implicit dependencies for a project in the project.json file, which is useful when dependencies cannot be deduced statically.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_20\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"root\": \"libs/mylib\",\n  \"implicitDependencies\": [\"anotherlib\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Graph Command Usage\nDESCRIPTION: Basic command to open the project graph in the browser\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/graph.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx graph\n```\n\n----------------------------------------\n\nTITLE: Named Inputs Configuration\nDESCRIPTION: Demonstration of using named inputs to define reusable patterns across multiple targets for production files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-05-nx-14-4-inputs-optional-npm-scope-project-graph-cache-directory-and-more.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"namedInputs\": {\n        \"prodFiles\": [\"!{projectRoot}/**/*.spec.ts\"]\n    },\n    \"targetDefaults\": {\n        \"build\": {\n            \"inputs\": [\"prodFiles\", \"^prodFiles\"]\n        },\n        \"publish\": {\n            \"inputs\": [\"prodFiles\", \"^prodFiles\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Scripts Configuration for Nx\nDESCRIPTION: The package.json configuration showing the npm scripts that delegate to Nx commands for serving, building, and testing the application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-01-12-react-vite-and-typescript-get-started-in-under-2-minutes.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"awesomereactapp\",\n  ...\n  \"scripts\": {\n    \"start\": \"nx serve\",\n    \"build\": \"nx build\",\n    \"test\": \"nx test\"\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with All Prompts\nDESCRIPTION: Command to create a new Nx workspace with all possible configuration prompts. This option allows for more detailed customization during workspace setup by appending the --allPrompts flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-08-what-is-new-in-nx-13-10.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@next myorg --allPrompts\n```\n\n----------------------------------------\n\nTITLE: Nx.json Version Prefix Configuration\nDESCRIPTION: This JSONC snippet shows how to set the `versionPrefix` option globally in `nx.json` or `project.json`.  The example sets it to '^', which means dependencies should be compatible with minor-level updates. Other options include '', '~', and '='.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/configuration-version-prefix.md#_snippet_3\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"release\": {\n    \"version\": {\n      \"versionPrefix\": \"^\" // or \"\", \"~\", \"^\", \"=\" depending on your preference\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated CODEOWNERS File\nDESCRIPTION: Example of a generated CODEOWNERS file based on the nx.json configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-25-introducing-nx-powerpack.md#2025-04-22_snippet_4\n\nLANGUAGE: plain\nCODE:\n```\n# CI configuration\n.github/workflows/** @devops\n\n# Design team\n/libs/shared/ui/angular/form-controls/ @team-design\n\n# Design team\n/libs/shared/ui/react/form-controls/ @team-design\n\n# Product team\n/libs/products/feat-product-detail/ @team-products\n\n# Order team\n/libs/orders/feat-current-orders/ @team-orders\n\n...\n```\n\n----------------------------------------\n\nTITLE: Serving Qwik Application with Nx\nDESCRIPTION: Command to serve the Qwik application using Nx. This starts a development server for the todo application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-qwik.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx serve todo\n```\n\n----------------------------------------\n\nTITLE: Nx Migration Commands\nDESCRIPTION: Commands for upgrading an Nx workspace to the latest version and running migration scripts.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-29-the-react-cli-you-always-wanted-but-didnt-know-about.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate --run-migrations=migrations.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Cloud Access Token in nx.json (Nx < 17)\nDESCRIPTION: This JSON snippet demonstrates how to set the Nx Cloud access token in the nx.json file for Nx versions prior to 17. This method is not recommended for security reasons.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/recipes/access-tokens.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasksRunnerOptions\": {\n    \"default\": {\n      \"runner\": \"nx-cloud\",\n      \"options\": {\n        \"accessToken\": \"SOMETOKEN\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature for createServer\nDESCRIPTION: Defines the signature of the createServer function, which takes a bootstrap function and optional RspackAngularServerOptions to create a RspackAngularServer instance.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rspack/create-server.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createServer(\n  bootstrap: any,\n  opts?: RspackAngularServerOptions\n): RspackAngularServer;\n```\n\n----------------------------------------\n\nTITLE: Pick a New Version prompt\nDESCRIPTION: Illustrates the interactive prompt displayed by Nx Release when picking a new version for the crates in the release. It demonstrates the options available for version bumping: major, premajor, minor, preminor, patch, prepatch, prerelease, and Custom exact version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/publish-rust-crates.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nNX   Running release version for project: pkg-1\n\npkg-1 🔍 Reading data for crate \"pkg-1\" from crates/crates/pkg-1/Cargo.toml\npkg-1 📄 Resolved the current version as 0.1.0 from crates/pkg-1/Cargo.toml\n? What kind of change is this for the 3 matched projects(s)? …\n❯ major\n  premajor\n  minor\n  preminor\n  patch\n  prepatch\n  prerelease\n  Custom exact version\n```\n\n----------------------------------------\n\nTITLE: Testing a Remix Application\nDESCRIPTION: Command to run tests for a Remix application using Vitest through Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/remix/documents/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx test myapp\n```\n\n----------------------------------------\n\nTITLE: Creating Buildable Library\nDESCRIPTION: Command to generate a buildable library with rollup bundler\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/js/documents/overview.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/js:lib libs/my-buildable-lib --bundler=rollup\n```\n\n----------------------------------------\n\nTITLE: Nx Cloud dynamic agent allocation configuration\nDESCRIPTION: This YAML configuration file defines different agent allocation strategies based on changeset size for Nx Cloud.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-17-modern-angular-testing-with-nx.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# .nx/workflows/distribution-config.yaml\ndistribute-on:\n  small-changeset: 3 linux-medium-js\n  medium-changeset: 8 linux-medium-js\n  large-changeset: 12 linux-medium-js\n```\n\n----------------------------------------\n\nTITLE: Setting Up npm Workspaces - JSON\nDESCRIPTION: This JSON snippet defines the workspaces property in the root package.json file for npm, enabling it to look for other package.json files in specified folders.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/typescript-project-linking.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workspaces\": [\"apps/*\", \"packages/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Storybook Configuration Using JavaScript\nDESCRIPTION: This command generates Storybook configuration files in JavaScript instead of the default TypeScript format. This is beneficial for projects or developers who prefer JavaScript for configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/storybook-configuration-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/angular:storybook-configuration ui --tsConfiguration=false\n```\n\n----------------------------------------\n\nTITLE: Installing @nx-dotnet/core plugin with pnpm\nDESCRIPTION: This command adds the @nx-dotnet/core plugin as a development dependency using pnpm. This plugin is required to manage .NET projects within an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-dotnet.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm add -D @nx-dotnet/core\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace and Adding Angular Plugin\nDESCRIPTION: Commands to create a new Nx workspace and add the Nx Angular plugin using npm, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/dynamic-mfe-angular.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest ng-mf --preset=apps\ncd ng-mf\nnpx nx add @nx/angular\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Step Inputs in JavaScript\nDESCRIPTION: Demonstrates how to access custom step inputs in a JavaScript file using environment variables. Each input is prefixed with 'NX_CLOUD_INPUT_'.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/custom-steps.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst input1 = process.env.NX_CLOUD_INPUT_input1;\nconsole.log(`The value of input1 is: ${input1}`);\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Automigrations\nDESCRIPTION: Command to run automated migrations for Storybook configuration and story files. This updates the configuration to match the latest Storybook standards.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/upgrading-storybook.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook automigrate --config-dir apps/my-app/.storybook\n```\n\n----------------------------------------\n\nTITLE: Generating a Next.js App with a Custom Express Server in Nx\nDESCRIPTION: Command to create a Next.js application with a custom Express server configuration. The --custom-server flag sets up the necessary Express server files for custom server-side functionality.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/application-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g app apps/myapp --custom-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Storybook Plugin\nDESCRIPTION: JSON configuration for the @nx/storybook plugin in nx.json, defining custom target names for Storybook tasks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/storybook/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/storybook/plugin\",\n      \"options\": {\n        \"buildStorybookTargetName\": \"build-storybook\",\n        \"serveStorybookTargetName\": \"storybook\",\n        \"testStorybookTargetName\": \"test-storybook\",\n        \"staticStorybookTargetName\": \"static-storybook\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing an Angular Application\nDESCRIPTION: This command runs the unit tests for the specified Angular application using the Nx CLI. It uses the configured test runner (default is Jest) to execute the tests.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/angular/angular-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n\"nx test appName\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic TypeScript Library\nDESCRIPTION: Commands to create a generic TypeScript library using the @nx/js plugin, with an option to make it publishable to npm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/web/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/js:lib libs/my-new-lib\n\n# If you want the library to be publishable to npm\nnx g @nx/js:lib libs/my-new-lib \\\n--publishable \\\n--importPath=@myorg/my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Setting Max Cache Size to 10GB in nx.json\nDESCRIPTION: This code snippet shows how to set the maximum cache size to 10 gigabytes by setting `maxCacheSize` to \"10GB\" in the `nx.json` file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_25\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"maxCacheSize\": \"10GB\" // Set the maximum cache size to 10 gigabytes\n}\n```\n\n----------------------------------------\n\nTITLE: Add Nx to Existing Monorepo (Lerna/Yarn/NPM/PNPM)\nDESCRIPTION: Command to add Nx to an existing JavaScript monorepo. This allows users to gradually adopt Nx features in an existing project without a complete rewrite.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-05-02-nx-v14-is-out-here-is-all-you-need-to-know.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx add-nx-to-monorepo\n```\n\n----------------------------------------\n\nTITLE: Creating a Buildable Node.js Library\nDESCRIPTION: This command creates a buildable Node.js library using the Nx CLI. The `--buildable` flag indicates that the library should be built and packaged for distribution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/node/node-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/node:lib libs/my-new-lib --buildable\n```\n\n----------------------------------------\n\nTITLE: Creating Side-by-Side Content Layout in Nx Documentation\nDESCRIPTION: This shortcode arranges content in a two-column grid, useful for comparing related information or showing before/after examples.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n{% side-by-side %}\nYou first content is here.\n\nYou second content is over here. _Note the space in between._\n{% /side-by-side %}\n```\n\n----------------------------------------\n\nTITLE: Markdown Card Component for Storybook Deprecation\nDESCRIPTION: Markdown snippet using cards layout to display information about Storybook v6 deprecation with a link to the pull request.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/16_1_0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% cards cols=\"2\" %}\n{% card title=\"storybook v6 support\" type=\"external\" url=\"https://github.com/nrwl/nx/pull/16650\" /%}\n{% /cards %}\n```\n\n----------------------------------------\n\nTITLE: Generating Project Graph Visualization in Nx\nDESCRIPTION: This command generates a visual representation of the project dependencies in an Nx workspace. It helps developers understand the relationships between different projects and modules.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/8-visualize-project-structure/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx graph\n```\n\n----------------------------------------\n\nTITLE: Configuring Nest.js CLI Plugins with Webpack\nDESCRIPTION: Example of setting up Swagger plugin using NxWebpackPlugin configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/nest/nest-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { NxWebpackPlugin } = require('@nx/webpack');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    new NxWebpackPlugin({\n      // ...\n      transformers: [\n        {\n          name: '@nestjs/swagger/plugin',\n          options: {\n            dtoFileNameSuffix: ['.dto.ts', '.entity.ts'],\n          },\n        },\n      ],\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Update Jest Snapshots with Nx\nDESCRIPTION: This command updates the Jest snapshots for the specified project (`frontend`) using the Nx CLI. The `-u` flag is shorthand for `--updateSnapshot`.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/jest/documents/overview.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnx test frontend -u\n```\n\n----------------------------------------\n\nTITLE: Setting Up Router Outlet in Angular Component\nDESCRIPTION: This HTML snippet shows how to set up the router outlet in the main app component, enabling routing functionality in the Angular application.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/7-share-code/content.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<router-outlet></router-outlet>\n```\n\n----------------------------------------\n\nTITLE: Adding Nx Console Installation Link in Documentation\nDESCRIPTION: This component creates a button that directs readers to install the official Nx plugin for VSCode, improving developer experience.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n{% install-nx-console /%}\n```\n\n----------------------------------------\n\nTITLE: Library Package Configuration\nDESCRIPTION: Package.json configuration for a library package with TypeScript module exports.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@ts-monorepo-linking/lib-a\",\n  \"type\": \"module\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./src/index.ts\",\n      \"import\": \"./src/index.ts\",\n      \"default\": \"./src/index.ts\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"main\": \"./src/index.ts\",\n  \"types\": \"./src/index.ts\",\n  \"module\": \"./src/index.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Linting with Nx\nDESCRIPTION: These shell commands demonstrate how to run tests and linting for specific projects in the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx test angular-store # runs the tests for angular-store\nnpx nx lint inventory # runs the linter on inventory\nnpx nx e2e angular-store-e2e # runs e2e tests for the angular-store\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-config for Environment Variables\nDESCRIPTION: This shell command installs the react-native-config library to handle environment variables in React Native applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n# npm\nnpm install react-native-config --save-dev# yarn\nyarn add react-native-config --dev\n```\n\n----------------------------------------\n\nTITLE: Installing applesimutils via Homebrew\nDESCRIPTION: Commands to install applesimutils, a collection of utilities for Apple simulators, using Homebrew package manager\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/detox/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew tap wix/brew\nbrew install applesimutils\n```\n\n----------------------------------------\n\nTITLE: Configuring PNPM Workspace\nDESCRIPTION: YAML configuration for PNPM workspace that defines the monorepo structure by specifying the locations of applications and packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npackages:\n  # executable/launchable applications\n  - 'apps/*'\n  # all packages in subdirs of packages/ and components/\n  - 'packages/*'\n```\n\n----------------------------------------\n\nTITLE: Serving Netlify Functions Locally\nDESCRIPTION: Command to serve Netlify functions locally for development and testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/node-serverless-functions-netlify.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx serve-functions\n```\n\n----------------------------------------\n\nTITLE: Watch Multiple Projects with Dependencies\nDESCRIPTION: Example demonstrating how to watch multiple projects (app1 and app2) including their dependencies and echo the project name on changes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/watch.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx watch --projects=app1,app2 --includeDependentProjects -- echo \\$NX_PROJECT_NAME\n```\n\n----------------------------------------\n\nTITLE: Adding @nx/module-federation to package.json Dependencies\nDESCRIPTION: This snippet shows how to add the @nx/module-federation package to the dependencies in package.json. It compares the package.json file before and after the addition.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/src/migrations/update-20-3-0/ensure-nx-module-federation-package.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@nx/module-federation\": \"20.3.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding @nx/nuxt Plugin to Nx Project\nDESCRIPTION: This command adds the newly launched @nx/nuxt plugin to an existing Nx project. The plugin is the first to be 'crystalized' from its beginning, integrating seamlessly with Nx's Project Crystal initiative.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-15-launch-week-recap.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/nuxt\n```\n\n----------------------------------------\n\nTITLE: Updated Module Federation Imports (After Migration)\nDESCRIPTION: Shows the updated import statements using the new @nx/module-federation package for both webpack and rspack configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/src/migrations/update-20-2-0/migrate-mf-imports-to-new-package.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ModuleFederationConfig } from '@nx/module-federation';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ModuleFederationConfig } from '@nx/module-federation';\n```\n\n----------------------------------------\n\nTITLE: Declaring CreateMetadataContext Type in TypeScript\nDESCRIPTION: Defines a TypeScript type alias CreateMetadataContext as an object containing nxJsonConfiguration and workspaceRoot properties. The nxJsonConfiguration references the NxJsonConfiguration type, while workspaceRoot is defined as a string.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/CreateMetadataContext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CreateMetadataContext = {\n  nxJsonConfiguration: NxJsonConfiguration;\n  workspaceRoot: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Projects from Graph\nDESCRIPTION: Shows how to exclude specific projects from the generated project graph.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/dep-graph.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx graph --exclude=project-one,project-two\n```\n\n----------------------------------------\n\nTITLE: Debugging CI Test Issues Locally\nDESCRIPTION: Command to reproduce CI environment for debugging test failures with verbose logging and specific package manager settings.\nSOURCE: https://github.com/nrwl/nx/blob/master/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nNX_VERBOSE_LOGGING=true CI=true SELECTED_PM=pnpm pnpm nx e2e e2e-vite --t=\"should do something is this test\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Cats API in Rust Library\nDESCRIPTION: Rust code for the cats library, implementing a simple API for managing a collection of cats using actix-web.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-rust.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse std::collections::HashSet;\nuse std::sync::Mutex;\n\nuse actix_web::web::*;\nuse actix_web::{get, post, HttpResponse, Responder, Scope};\n\npub struct Cats {\n    cats: Mutex<HashSet<Cat>>,\n}\n\n#[derive(Eq, Hash, PartialEq, Clone, Debug, serde::Deserialize, serde::Serialize)]\nstruct Cat {\n    name: String,\n    age: u8,\n}\n\n#[get(\"\")]\nasync fn get_cats(data: Data<Cats>) -> impl Responder {\n    let cats = data.cats.lock().unwrap();\n\n    println!(\"Cats {:?}\", &cats);\n\n    Json(cats.clone())\n}\n\n#[post(\"/add\")]\nasync fn add_cat(cat: Json<Cat>, data: Data<Cats>) -> impl Responder {\n    let mut cats = data.cats.lock().unwrap();\n\n    println!(\"Adding {:?}\", &cat);\n\n    cats.insert(cat.into_inner());\n\n    HttpResponse::Ok()\n}\n\npub fn create_cat_data() -> Data<Cats> {\n    Data::new(Cats {\n        cats: Mutex::new(HashSet::new()),\n    })\n}\n\npub fn create_cat_scope(data: &Data<Cats>) -> Scope {\n    scope(\"/cats\")\n        // Cloning is cheap here because internally, Data uses `Arc`\n        .app_data(Data::clone(data))\n        .service(add_cat)\n        .service(get_cats)\n}\n\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn it_works() {\n        let result = 2 + 2;\n        assert_eq!(result, 4);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Function for Checking Even Numbers\nDESCRIPTION: This snippet defines a TypeScript function 'isEven' that checks if a number is even. It's part of the 'is-even' module in the monorepo example.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-27-project-references.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function isEven(n: number): boolean {\n  return n % 2 === 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema\nDESCRIPTION: This GraphQL schema defines a Set type, a Query type for fetching all sets, and a Mutation type for adding a new set. It's the foundation for the GraphQL API.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Set {\n  id: Int!\n  name: String\n  year: Int\n  numParts: Int\n}\n\ntype Query {\n  allSets: [Set]\n}\n\ntype Mutation {\n  addSet(name: String, year: String, numParts: Int): Set\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Jest Fetch Mock\nDESCRIPTION: Configuration for mocking fetch requests in unit tests using jest-fetch-mock.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-08-state-management.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport fetchMock from 'jest-fetch-mock';\n\nfetchMock.enableMocks();\n```\n\n----------------------------------------\n\nTITLE: Linting an Angular Application\nDESCRIPTION: This command runs the linter (default is ESLint) on the specified Angular application using the Nx CLI. It checks the code for style and syntax errors.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/angular/angular-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n\"nx lint appName\"\n```\n\n----------------------------------------\n\nTITLE: Adding Nx to Existing Workspace\nDESCRIPTION: Command to add Nx to an existing workspace, providing benefits like faster task scheduling and caching.\nSOURCE: https://github.com/nrwl/nx/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx init\n```\n\n----------------------------------------\n\nTITLE: Creating Local Conformance Rule Definition in TypeScript\nDESCRIPTION: This snippet illustrates the creation of a conformance rule definition in TypeScript. It utilizes the `createConformanceRule` function from `@nx/conformance` and specifies details such as name, category, and implementation to return project violations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/conformance/create-conformance-rule.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConformanceRule, ProjectViolation } from '@nx/conformance';\n\nexport default createConformanceRule({\n  name: 'local-conformance-rule-example',\n  category: 'security',\n  description: 'an example of a conformance rule',\n  reporter: 'project-reporter',\n  implementation: async (context) => {\n    const violations: ProjectViolation[] = [];\n\n    return {\n      severity: 'low',\n      details: {\n        violations,\n      },\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom ESLint Output Format in Nx\nDESCRIPTION: Configuration to change the output format of the ESLint linter from the default 'stylish' to 'compact'.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/eslint/docs/eslint-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"lint\": {\n  \"executor\": \"@nx/eslint:lint\",\n  \"outputs\": [\"{options.outputFile}\"],\n  \"options\": {\n    \"lintFilePatterns\": [\"apps/frontend/**/*.ts\"],\n    \"format\": \"compact\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Angular App with Tailwind\nDESCRIPTION: Command to generate a new Angular application with Tailwind CSS configuration using Nx, demonstrating improved Tailwind support.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-12-23-single-file-monorepo-config-custom-workspace-presets-improved-tailwind-support-and-more-in-nx-13.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nrwl/angular:app my-app --addTailwind\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables for Launch Template\nDESCRIPTION: Illustrates how to set environment variables that will be available within all steps of a specific launch template.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlaunch-templates:\n  template-one:\n    env:\n      MY_ENV_VAR: 'my-var-value'\n```\n\n----------------------------------------\n\nTITLE: Generating an Angular Library\nDESCRIPTION: This command generates a new Angular library within an Nx workspace. It utilizes the @nx/angular plugin's 'lib' generator to create the library in the 'libs/libName' directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/angular/angular-plugin.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n\"nx g @nx/angular:lib libs/libName\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nx Workspace with Bun\nDESCRIPTION: Command to create a new Nx workspace using Bun package manager. This uses bunx instead of npx with a --pm flag to specify Bun as the package manager.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/getting-started/installation.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbunx create-nx-workspace --pm bun\n```\n\n----------------------------------------\n\nTITLE: Configuring @nx/playwright Plugin in nx.json\nDESCRIPTION: JSON configuration for the @nx/playwright plugin in nx.json. It allows customization of target names for e2e tests.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/playwright/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/playwright/plugin\",\n      \"options\": {\n        \"ciTargetName\": \"e2e-ci\",\n        \"targetName\": \"e2e\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub App Callback URL\nDESCRIPTION: Specifies the format for the GitHub App callback URL, which is crucial for authentication with Nx Cloud.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/enterprise/single-tenant/custom-github-app.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[your-nx-cloud-url]/callbacks/github-user\n\n# for example\nhttps://my.nx-enterprise.url:8080/callbacks/github-user\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Inputs\nDESCRIPTION: Example of using input glob patterns to control cache invalidation by excluding spec files from build consideration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-05-nx-14-4-inputs-optional-npm-scope-project-graph-cache-directory-and-more.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"targetDefaults\": {\n        \"build\": {\n            \"inputs\": [\"!{projectRoot}/**/*.spec.ts\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Mobile Applications with Detox\nDESCRIPTION: Commands to generate React Native and Expo applications with Detox E2E testing configuration\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/detox/detox-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react-native:app apps/frontend --e2eTestRunner=deotx\nnx g @nx/expo:app apps/frontend --e2eTestRunner=detox\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace Command\nDESCRIPTION: Command to create a new empty Nx workspace using npx create-nx-workspace with interactive prompts for workspace configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-12-next-gen-module-federation-deployments.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace myorg\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/angular (Nx < 18)\nDESCRIPTION: This command installs the @nx/angular package for Nx versions prior to 18 using npm. It adds the package as a development dependency to the project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/angular/angular-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"npm add -D @nx/angular\"\n```\n\n----------------------------------------\n\nTITLE: Defining Launch Templates in YAML\nDESCRIPTION: Basic structure for defining launch templates in a YAML file. This snippet shows the top-level 'launch-templates' key and how to define multiple templates.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/launch-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlaunch-templates:\n  template-one:\n  template-two:\n```\n\n----------------------------------------\n\nTITLE: Adding Nx to Existing Repository\nDESCRIPTION: This command adds Nx to an existing repository. It initializes Nx in the current project, allowing you to leverage Nx features in your existing codebase.\nSOURCE: https://github.com/nrwl/nx/blob/master/scripts/readme-fragments/content.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Initializing Nx in PNPM Workspace using CLI\nDESCRIPTION: Command to initialize Nx in an existing PNPM workspace. The command analyzes the repository and guides through interactive setup while preserving the existing workspace structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/courses/pnpm-nx-next/lessons/01-nx-init.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx init\n```\n\n----------------------------------------\n\nTITLE: Creating a Qwik Library with Nx\nDESCRIPTION: Command to generate a new Qwik library using the qwik-nx plugin within an Nx workspace. This creates the library in the specified directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-qwik.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g qwik-nx:lib data-access --directory=libs/data-access\n```\n\n----------------------------------------\n\nTITLE: App-Level TypeScript Configuration\nDESCRIPTION: TypeScript configuration for an application with project references to its dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../../tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"../../dist/apps/myapp\",\n    \"rootDir\": \"src\",\n    \"tsBuildInfoFile\": \"../../dist/apps/myapp/tsconfig.tsbuildinfo\"\n  },\n  \"references\": [{ \"path\": \"../../packages/lib-a\" }],\n  \"include\": [\"src/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nx Single-Project Angular Workspace\nDESCRIPTION: Command to generate a new Nx workspace with an Angular standalone application setup. This is the equivalent of creating a new Angular project with the Angular CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/nx-and-angular-cli.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace myngapp --preset=angular-standalone\n```\n\n----------------------------------------\n\nTITLE: Displaying Initial Feature-Based Folder Structure in Angular\nDESCRIPTION: Shows the basic folder structure of an Angular application organized by features.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-18-architecting-angular-applications.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nsrc/\n├── app/\n│   ├── auth/          # Authentication feature\n│   ├── products/      # Product management feature\n│   ├── cart/          # Shopping cart feature\n│   └── checkout/      # Checkout feature\n├── assets/\n└── styles/\n```\n\n----------------------------------------\n\nTITLE: Adding Nx to an Existing Workspace\nDESCRIPTION: Command to add Nx capabilities to an existing project or workspace. This allows you to integrate Nx features without starting a new project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/getting-started/intro.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx init\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Library with Nx CLI\nDESCRIPTION: Command to create a new Angular library in an Nx workspace\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nrwl/angular:lib lib1\n```\n\n----------------------------------------\n\nTITLE: Legacy Module Federation Imports (Before Migration)\nDESCRIPTION: Shows the original import statements for ModuleFederationConfig from @nx/webpack and @nx/rspack/module-federation packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/src/migrations/update-20-2-0/migrate-mf-imports-to-new-package.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ModuleFederationConfig } from '@nx/webpack';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ModuleFederationConfig } from '@nx/rspack/module-federation';\n```\n\n----------------------------------------\n\nTITLE: Creating a .NET application\nDESCRIPTION: This command uses the `@nx-dotnet/core:app` generator to create a new .NET application named `my-api` within the `apps/my-api` directory. It uses the `nunit` test template and C# as the language.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-dotnet.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx-dotnet/core:app my-api --directory=apps/my-api --test-template nunit --language C#\n```\n\n----------------------------------------\n\nTITLE: Rendering Nx Logo with Light/Dark Mode Support in HTML\nDESCRIPTION: HTML markup for displaying the Nx logo with support for light and dark mode using the picture element and media queries. The logo is centered and spans the full width of its container.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/devkit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"text-align: center;\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Clone Gradle Tutorial Repository (Shell)\nDESCRIPTION: This command clones the specified Gradle tutorial repository from GitHub to the local machine.  Replace `<your-username>` with the actual GitHub username.  Git must be installed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<your-username>/gradle-tutorial.git\n```\n\n----------------------------------------\n\nTITLE: Reading and Parsing JSON File in TypeScript\nDESCRIPTION: This function reads a JSON file from a given path and returns the parsed content as an object. It supports generic typing and optional JSON parsing options. The function handles file reading and JSON parsing, returning the result as the specified type T.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/readJsonFile.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction readJsonFile<T extends object = any>(path: string, options?: JsonReadOptions): T\n```\n\n----------------------------------------\n\nTITLE: Interactive Workspace Creation\nDESCRIPTION: Command to create a new Nx workspace through interactive prompts\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react-native/react-native-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace your-workspace-name\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Dependencies in Nx.json\nDESCRIPTION: Example showing the traditional way of configuring target dependencies in nx.json to build dependent projects automatically.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-05-nx-14-4-inputs-optional-npm-scope-project-graph-cache-directory-and-more.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"targetDefaults\": {\n    \"build\": {\n        \"dependsOn\": [\n            {\n                \"target\": \"build\",\n                \"projects\": \"dependencies\"\n              }\n        ]\n    }\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Nx CI Workflow Configuration\nDESCRIPTION: Command to scaffold a new CI workflow configuration using Nx generator. This generates the necessary configuration files for setting up Nx-based CI pipeline.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/courses/pnpm-nx-next/lessons/07-optimize-ci.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx g ci-workflow\n```\n\n----------------------------------------\n\nTITLE: Project Configuration Update\nDESCRIPTION: JSON configuration update for the application's build and serve targets\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_19\n\nLANGUAGE: json5\nCODE:\n```\n{\n  ...\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nrwl/angular:webpack-browser\",\n      ...\n    },\n    \"serve\": {\n      \"executor\": \"@nrwl/web:file-server\",\n      \"configurations\": {\n        \"production\": {\n          \"buildTarget\": \"app1:build:production\"\n        },\n        \"development\": {\n          \"buildTarget\": \"app1:build:development\"\n        }\n      },\n      \"defaultConfiguration\": \"development\"\n    },\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom esbuild Options Configuration\nDESCRIPTION: JSON configuration for adding custom esbuild options like banners and footers to the build.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/esbuild/documents/overview.md#2025-04-22_snippet_8\n\nLANGUAGE: jsonc\nCODE:\n```\n\"build\": {\n  \"executor\": \"@nx/esbuild:esbuild\",\n  \"options\": {\n    \"esbuildOptions\": {\n      \"banner\": { \".js\": \"// banner\" },\n      \"footer\": { \".js\": \"// footer\" }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting Project Details as JSON in Nx\nDESCRIPTION: This example demonstrates how to display detailed information about 'my-app' in JSON format using the '--json' flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/show.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx show project my-app --json\n```\n\n----------------------------------------\n\nTITLE: Non-Interactive React Native Server Configuration\nDESCRIPTION: Configuration for starting React Native server in non-interactive mode with specified port.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/start-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"start\": {\n      \"executor\": \"@nx/react-native:start\",\n      \"options\": {\n        \"port\": 8081,\n        \"interactive\": false\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Converting Nx Executor to Angular Devkit Builder in TypeScript\nDESCRIPTION: This function takes an Nx Executor as input and converts it into an Angular Devkit Builder. It's used to make Nx Executors compatible with Angular's build system. The function returns 'any' type, likely representing the converted Angular Builder.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/convertNxExecutor.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **convertNxExecutor**(`executor`): `any`\n```\n\n----------------------------------------\n\nTITLE: Adding Vite Temp Files to Gitignore Configuration\nDESCRIPTION: Adds gitignore entries to exclude temporary Vite and Vitest configuration files that contain timestamps. These entries prevent version control from tracking automatically generated timestamp files.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/src/migrations/update-20-0-4/add-vite-temp-files-to-git-ignore.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nvite.config.*.timestamp*\nvitest.config.*.timestamp*\n```\n\n----------------------------------------\n\nTITLE: Creating Workspace with Create Package - Shell\nDESCRIPTION: This command utilizes the created package to initialize a new workspace, demonstrating its functionality once published.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/create-install-package.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-my-plugin test-workspace\n```\n\n----------------------------------------\n\nTITLE: Reading Projects Configuration from Project Graph in TypeScript\nDESCRIPTION: TypeScript function signature for extracting ProjectsConfigurations from a ProjectGraph object. The function takes a ProjectGraph parameter and returns a ProjectsConfigurations object.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/readProjectsConfigurationFromProjectGraph.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadProjectsConfigurationFromProjectGraph(projectGraph): ProjectsConfigurations\n```\n\n----------------------------------------\n\nTITLE: CLI Command Examples\nDESCRIPTION: Shell commands demonstrating how to invoke generators using the Nx CLI for both Nx Generator and Angular Schematic implementations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/nx-devkit-angular-devkit.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g mygenerator params\nnx g myschematic params\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Nx Cloud using CLI\nDESCRIPTION: Command to authenticate a developer machine with Nx Cloud workspace using Personal Access Tokens for configuring remote cache access permissions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/courses/pnpm-nx-next/lessons/10-nx-login.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx login\n```\n\n----------------------------------------\n\nTITLE: Generating a Route in a Qwik Application\nDESCRIPTION: Command to generate a new route named 'todo' in the Qwik application using the qwik-nx plugin's route generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-15-qwikify-your-dev.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g qwik-nx:route --name=todo --project=todo\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Tasks with Nx\nDESCRIPTION: Demonstrates how to run multiple tasks such as testing and linting for all projects in parallel using Nx commands.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/react-monorepo.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx run-many -t test\n```\n\n----------------------------------------\n\nTITLE: Publishing Versioned Project with Nx Release\nDESCRIPTION: This command publishes a versioned project to a registry using Nx release. It is used after versioning a project to make it available in a package registry.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/release.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx release publish\n```\n\n----------------------------------------\n\nTITLE: Nx Graph Analysis Command\nDESCRIPTION: Command to generate a JSON file containing all files associated with each project for analyzing input glob patterns.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/troubleshoot-cache-misses.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx graph --file=output.json\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Deep Imports in Astro\nDESCRIPTION: Update tsconfig.json to allow deep imports of Astro components without using index.ts files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-astro.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"astro/tsconfigs/strict\",\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@myrepo/ui/*\": [\"ui/src/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Target Dependencies Syntax\nDESCRIPTION: New concise syntax for expressing target dependencies using the ^ operator to reference dependent project builds.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-05-nx-14-4-inputs-optional-npm-scope-project-graph-cache-directory-and-more.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"targetDefaults\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"]\n    }\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Migrations from File\nDESCRIPTION: Example of running migrations from a specific migrations.json file. This command can be run multiple times after modifying the migrations file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/migrate.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate --run-migrations=migrations.json\n```\n\n----------------------------------------\n\nTITLE: Self-Project Target Dependencies\nDESCRIPTION: Configuration example showing how to define dependencies for targets within the same project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-05-nx-14-4-inputs-optional-npm-scope-project-graph-cache-directory-and-more.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"targetDefaults\": {\n    \"build\": {\n        \"dependsOn\": [\n            {\n                \"target\": \"prebuild\",\n                \"projects\": \"self\"\n              }\n        ]\n    }\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Build Error Example with Missing Peer Dependency\nDESCRIPTION: Example error output when building with missing peer dependencies\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/yarn-pnp.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nError: [BABEL]: @babel/plugin-transform-react-jsx tried to access @babel/core (a peer dependency) but it isn't provided by your application; this makes the require call ambiguous and unsound.\n\nRequired package: @babel/core\n```\n\n----------------------------------------\n\nTITLE: Running Single E2E Test Suite\nDESCRIPTION: Command to run a specific test suite within E2E tests using the -t flag for filtering.\nSOURCE: https://github.com/nrwl/nx/blob/master/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnx e2e e2e-vite -t versions # I often add qqqq to my test name so I can use -t qqqq\n```\n\n----------------------------------------\n\nTITLE: Building Internationalized Angular Rspack Application\nDESCRIPTION: Command to build an Angular Rspack application with internationalization support, which generates localized bundles in the dist directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/internationalization.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx build my-app\n```\n\n----------------------------------------\n\nTITLE: Installing Compodoc Package\nDESCRIPTION: Commands for installing the @compodoc/compodoc package using different package managers (npm, yarn, pnpm, bun).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/angular-storybook-compodoc.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @compodoc/compodoc\n```\n\n----------------------------------------\n\nTITLE: Example Lesson Content - Markdown\nDESCRIPTION: Shows the structure of a lesson file with front matter metadata and markdown content.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/README.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntype: lesson\ntitle: Welcome!\n---\n\n# Welcome to TutorialKit!\n\nIn this tutorial we'll walk you through how to setup your environment to\nwrite your first tutorial 🤩\n```\n\n----------------------------------------\n\nTITLE: Basic Lit Component Implementation\nDESCRIPTION: Demonstrates a basic Lit component setup with a root element and corresponding HTML template\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-06-29-nx-console-gets-lit.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('root-element')\nexport class Root extends LitElement {\n  render() {\n    return html`<p>Hello World</p>`;\n  }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <body>\n    <script type=\"module\" src=\"main.js\"></script>\n    <root-element></root-element>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Importing from Multiple Entry Points\nDESCRIPTION: Shows how to import from different entry points of a library that has multiple export paths configured.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/define-secondary-entrypoints.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport myLib from 'my-lib';\nimport foo from 'my-lib/foo';\nimport bar from 'my-lib/bar';\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Pipeline Dependencies in Nx\nDESCRIPTION: Demonstrates how to set up task dependencies in nx.json, including prebuild and cross-project build dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-06-nx-15-3-standalone-projects-vite-task-graph-and-more.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"targetDefaults\": {\n      \"build\": {\n        \"dependsOn\": [\"prebuild\", \"^build\"]\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Jest Projects Configuration (Nx 18+)\nDESCRIPTION: Example of configuring Jest multi-project support using getJestProjectsAsync utility in Nx 18+.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/jest/jest-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getJestProjectsAsync } from '@nx/jest';\n\nexport default async () => ({\n  projects: [\n    ...(await getJestProjectsAsync()),\n    '<rootDir>/path/to/jest.config.ts',\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Remix Plugin\nDESCRIPTION: Command to install the @nx/remix plugin in an Nx workspace. It's important to keep the plugin version in sync with the Nx version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/remix/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/remix\n```\n\n----------------------------------------\n\nTITLE: Generating a React Router Application in Nx\nDESCRIPTION: Command to generate a new React Router application within an existing Nx workspace using the @nx/react plugin with routing enabled.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/react-router.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:app apps/happynrwl --routing --use-react-router\n```\n\n----------------------------------------\n\nTITLE: Publishing a built Nx library to npm\nDESCRIPTION: Command to publish the built Nx library to npm. This should be run from the dist directory containing the built artifact.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/buildable-and-publishable-libraries.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Generating Storybook Configuration Commands\nDESCRIPTION: Various commands for generating Storybook configuration for different frameworks including basic, Angular, React, Vue, and React Native projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/storybook/plugin-overview.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/storybook:configuration project-name\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/angular:storybook-configuration my-angular-project\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:storybook-configuration my-react-project\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/vue:storybook-configuration my-vue-project\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react-native:storybook-configuration my-react-native-project\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace in package.json\nDESCRIPTION: The root-level package.json file defines the workspace configuration, allowing easy import of libraries across the monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/7-share-code/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```file:/package.json title=\"/package.json\" collapse={3-51}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Generating React Standalone App with Webpack in Nx\nDESCRIPTION: This command creates a new standalone React application workspace set up with Webpack using the Nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/webpack/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest --preset=react-standalone --bundler=webpack\n```\n\n----------------------------------------\n\nTITLE: Root TypeScript Configuration with References\nDESCRIPTION: Root TypeScript configuration file with project references for editor tooling support.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/switch-to-workspaces-project-references.md#2025-04-22_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.base.json\",\n  \"files\": [],\n  \"references\": [\n    {\n      \"path\": \"./libs/utils\"\n    },\n    {\n      \"path\": \"./libs/ui\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Task Configuration\nDESCRIPTION: Project configuration showing how to set up a deploy task with build dependency for Netlify deployment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"deploy\": {\n      \"dependsOn\": \"build\",\n      \"command\": \"netlify deploy --dir=dist/angular-store\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Preset as a Separate Library in angular.json\nDESCRIPTION: This JSON snippet demonstrates how to add the Tailwind preset library to the angular.json configuration file in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 2,\n  \"projects\": {\n    ...\n    \"tailwind-preset\": \"libs/tailwind-preset\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Cloud Distributed Task Execution in YAML\nDESCRIPTION: This snippet demonstrates how to set up Nx Cloud's distributed task execution feature, coordinating agents to run tasks and stopping them after build tasks are completed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/concepts/parallelization-distribution.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Coordinate the agents to run the tasks and stop agents when the build tasks are done\n- npx nx-cloud start-ci-run --distribute-on=\"8 linux-medium-js\" --stop-agents-after=build\n# Run any commands you want here\n- nx affected -t lint test build\n```\n\n----------------------------------------\n\nTITLE: Enabling Project-Level Changelogs in Nx\nDESCRIPTION: To generate individual changelogs for each project, enable project-level changelogs by setting `projectChangelogs` to `true` in the `nx.json` file. This option will create and update changelogs for each project individually.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/release-projects-independently.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"changelog\": {\n      \"projectChangelogs\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating React Component for Set List using Nx\nDESCRIPTION: Command to generate a React component for displaying a list of Lego sets using Nx's generators.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nx/react:component libs/feature-sets/src/lib/set-list\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Project Commands in Nx\nDESCRIPTION: Commands for running Storybook operations in an Nx workspace, including serving, building, and testing Storybook instances for specific projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/storybook/best-practices.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx storybook my-project\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx build-storybook my-project\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx test-storybook my-project\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/web (Nx < 18)\nDESCRIPTION: Installs the @nx/web package as a development dependency using npm.  This is for Nx versions prior to 18.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/web/web-plugin.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/web\n```\n\n----------------------------------------\n\nTITLE: Adding Cypress Component Testing to React Project\nDESCRIPTION: Command to add Cypress component testing configuration to an existing React project in Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-10-14-whats-new-in-nx-15.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nrwl/react:cypress-component-configuration --project=your-project\n```\n\n----------------------------------------\n\nTITLE: Library Structure in Nx Workspace (Tree View) - Layout Indication\nDESCRIPTION: This tree view demonstrates the structure of a feature library within an Nx workspace. It represents the organizational layout for a feature library, showcasing the folder hierarchy under 'libs/my-app/feature-home/'. This structure is intended for managing feature-specific components, facilitating ease of access and separation from other library types.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/decisions/project-dependency-rules.md#2025-04-22_snippet_0\n\nLANGUAGE: treeview\nCODE:\n```\nlibs/\n└── my-app/\n    └── feature-home/\n        └── src/\n            ├── index.ts\n            └── lib/\n```\n\n----------------------------------------\n\nTITLE: Fully Optimized Monorepo Structure\nDESCRIPTION: Shows the final optimized structure with routes broken into separate projects and organized in a logical hierarchy.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-10-25-sports-retailer-success.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nmonorepo/\n├── libs/\n│   shared\n│   │   └──date-time-utils/\n│   └──storefront/\n│       ├──product-search/\n│       ├──product-details/\n│       └──checkout\n└── apps/\n    ├── storefront/\n    ├── internal-dash/\n    └── support-dash/\n```\n\n----------------------------------------\n\nTITLE: Testing React Query Hook with Fetch Mock\nDESCRIPTION: Unit test implementation for a custom hook using React Query with fetch mock responses\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-08-state-management.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TestWrapper } from '@nx-expo-monorepo/queries/test-wrapper';\nimport { renderHook, waitFor } from '@testing-library/react-native';\nimport { useCatFact } from './use-cat-fact';\nimport fetchMock from 'jest-fetch-mock';\n\ndescribe('useCatFact', () => {\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  it('status should be success', async () => {\n    fetchMock.mockResponseOnce(\n      JSON.stringify({\n        fact: 'random cat fact',\n      })\n    );\n\n    const { result } = renderHook(() => useCatFact(), {\n      wrapper: TestWrapper,\n    });\n    result.current.refetch();\n    expect(result.current.isLoading).toBeTruthy();\n\n    await waitFor(() => expect(result.current.isLoading).toBe(false));\n    expect(result.current.isSuccess).toBe(true);\n    expect(result.current.data).toEqual('random cat fact');\n  });\n\n  it('status should be error', async () => {\n    fetchMock.mockRejectOnce();\n\n    const { result } = renderHook(() => useCatFact(), {\n      wrapper: TestWrapper,\n    });\n    result.current.refetch();\n    expect(result.current.isLoading).toBeTruthy();\n\n    await waitFor(() => expect(result.current.isLoading).toBe(false));\n    expect(result.current.isError).toBe(true);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Generating a Component with Custom Name using Nx CLI\nDESCRIPTION: This snippet shows how to create a component named 'Custom' using the Nx CLI by specifying the 'name' option. It requires a working Nx setup and takes the component path as input, along with an additional parameter '--name' to alter the symbol name without changing the file structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/component-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g component apps/my-app/src/app/my-component/my-component.tsx --name=custom\n```\n\n----------------------------------------\n\nTITLE: Setting up Tailwind for Library\nDESCRIPTION: Command to configure Tailwind CSS for the library\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nrwl/angular:setup-tailwind lib2\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx TSC Build with Multiple Entry Points (project.json)\nDESCRIPTION: Configuration for @nx/js:tsc executor in project.json to handle multiple entry points with additionalEntryPoints and generateExportsField options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/define-secondary-entrypoints.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"my-awesome-lib\",\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/js:tsc\",\n      \"options\": {\n        \"main\": \"packages/my-awesome-lib/src/index.ts\",\n        \"additionalEntryPoints\": [\n          \"packages/my-awesome-lib/src/foo.ts\",\n          \"packages/my-awesome-lib/src/bar.ts\"\n        ],\n        \"generateExportsField\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scope Plugins to Specific Projects in nx.json (JSONC)\nDESCRIPTION: This code snippet shows how to scope Nx plugins to specific projects using the `include` and `exclude` properties within the plugin configuration in `nx.json`. These properties use file glob patterns to include or exclude configuration files that the plugin interprets, allowing for fine-grained control over which projects a plugin affects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/nx-json.md#_snippet_2\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/jest/plugin\",\n      \"include\": [\"packages/**/*\"], // include any projects in the packages folder\n      \"exclude\": [\"**/*-e2e/**/*\"] // exclude any projects in a *-e2e folder\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Run Local Registry for Plugin Testing\nDESCRIPTION: Starts a local Verdaccio registry for testing an Nx plugin locally before publishing it to a public or private registry.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-10-tailoring-nx-for-your-organization.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnx local-registry\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Test Suite\nDESCRIPTION: Generic test suite implementation showing basic script execution configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-06-20-introducing-nx-ecosystem-ci.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function test(options: RunOptions) {\n    await runInRepo({\n        …options,\n        repo: 'nrwl/nx-labs',\n        branch: 'main',\n        build: ['build'],\n        test: ['test'],\n        e2e: ['e2e'],\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Internal State and Metadata\nDESCRIPTION: Example of using 'nx reset' to clear internal state and metadata, useful for resolving strange errors.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/reset.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx reset\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Dependency Checks Rule\nDESCRIPTION: Example configuration for adding the dependency-checks rule to a project's ESLint configuration file\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/eslint-plugin/documents/dependency-checks.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"files\": [\"*.json\"],\n      \"parser\": \"jsonc-eslint-parser\",\n      \"rules\": {\n        \"@nx/dependency-checks\": \"error\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying available targets for React project with Nx\nDESCRIPTION: Command to show all available targets that can be run for the React project named 'react-store' using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/2-use-preset/_solution/react-monorepo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx show project react-store\n```\n\n----------------------------------------\n\nTITLE: Registering a Conformance Rule in nx.json\nDESCRIPTION: Add the conformance rule to the nx.json configuration file to enable it for the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/conformance/documents/create-conformance-rule.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"conformance\": {\n    \"rules\": [\n      {\n        \"rule\": \"./packages/my-plugin/local-conformance-rule/index.ts\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Next.js Build Output Path\nDESCRIPTION: Example of customizing the output folder path for a Next.js application build using Vite configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/next/documents/overview.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite';\nexport default defineConfig(() => ({\n  build: {\n    outDir: 'dist/my-next-app',\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Basic Nx Run Command Syntax\nDESCRIPTION: The fundamental syntax for running a target in an Nx project. Allows specifying project, target, and configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx run [project][:target][:configuration] [_..]\n```\n\n----------------------------------------\n\nTITLE: Storybook Main Configuration\nDESCRIPTION: TypeScript configuration file for Storybook showing how to add addons to the configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/storybook/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StorybookConfig } from '@storybook/react-vite';\n\nconst config: StorybookConfig = {\n  ...\n  addons: ['@storybook/addon-essentials', '@storybook/addon-interactions', ...],\n  ...\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Initializing Nx Migration for Angular CLI Workspace\nDESCRIPTION: Executes the Nx initialization process for converting an existing Angular CLI project to an Nx monorepo with integrated workspace configuration\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/ng-add-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx@latest init --integrated\n```\n\n----------------------------------------\n\nTITLE: Using a Library in a Remix Application\nDESCRIPTION: Example of importing and using a component from a generated library in a Remix application route.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/remix/documents/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Login } from '@acme/login';\n\nexport default function Index() {\n  return (\n    <div>\n      <Login />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building for iOS\nDESCRIPTION: Commands to build the app for iOS platform, including optional build folder specification\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react-native/documents/overview.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnx build-ios <your-app-name>\nnx build-ios <your-app-name> --buildFolder=\"./build\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Affected Projects in Nx Graph\nDESCRIPTION: This command generates a graph visualization of projects affected by changes in the specified file.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/10-affected/content.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx graph --affected --files=libs/products/src/lib/products.tsx\n```\n\n----------------------------------------\n\nTITLE: Vite-based Cypress Configuration\nDESCRIPTION: Configuration file for Cypress component testing using vite bundler in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress';\nimport { nxComponentTestingPreset } from '@nx/react/plugins/component-testing';\n\nexport default defineConfig({\n  component: nxComponentTestingPreset(__filename, {\n    bundler: 'vite',\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Generate Storybook Configuration for UI Project\nDESCRIPTION: Example command showing how to generate Storybook configuration for a specific UI project using TypeScript configuration files.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vue/docs/storybook-configuration-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/vue:storybook-configuration ui\n```\n\n----------------------------------------\n\nTITLE: Generating React App with Webpack in Nx\nDESCRIPTION: This command generates a new React application configured to use Webpack in an existing Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/webpack/documents/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:app apps/my-app --bundler=webpack\n```\n\n----------------------------------------\n\nTITLE: Generating Storybook Configuration for Nx React Native App or Library\nDESCRIPTION: Command to generate the Storybook configuration files for a React Native application or library in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-25-use-storybook-with-nx-react-native.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nrwl/react-native:storybook-configuration **<your app or lib>**\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Package with Nx Generator\nDESCRIPTION: Command to generate a new package using @nx/plugin create-package generator. Creates an executable that sets up an Nx workspace with a custom plugin preset.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/plugin/docs/generators/create-package-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/plugin:create-package create-my-plugin --project my-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Build in project.json\nDESCRIPTION: This snippet shows how to configure the Storybook build target in a project.json file. It sets up the executor, output directory, and configuration options.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/build-storybook-executor-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui\": {\n    \"targets\": {\n      \"build-storybook\": {\n        \"executor\": \"@nx/storybook:build\",\n        \"outputs\": [\"{options.outputDir}\"],\n        \"options\": {\n          \"outputDir\": \"dist/storybook/ui\",\n          \"configDir\": \"libs/ui/.storybook\"\n        },\n        \"configurations\": {\n          \"ci\": {\n            \"quiet\": true\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating React Monorepo with Webpack in Nx\nDESCRIPTION: This command creates a new React monorepo workspace set up with Webpack using the Nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/webpack/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest --preset=react-monorepo --bundler=webpack\n```\n\n----------------------------------------\n\nTITLE: Filtering Projects by Tag in Nx\nDESCRIPTION: This command shows all projects with a tag starting with 'ui-' using the '--projects' option with tag filtering.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/show.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx show projects --projects tag:ui-*\n```\n\n----------------------------------------\n\nTITLE: S3 Cache Configuration in nx.json\nDESCRIPTION: Basic configuration for S3 cache settings including region, bucket, and encryption key\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/s3-cache/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"s3\": {\n    \"region\": \"us-east-1\",\n    \"bucket\": \"my-bucket\",\n    \"encryptionKey\": \"create-your-own-key\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Nx Project Graph Visualization\nDESCRIPTION: Shortened command to launch the Nx project graph visualization tool. This replaces the longer dep-graph command while maintaining backward compatibility.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-25-new-terminal-output-performance-improvements-in-nx-13-5.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx graph\n```\n\n----------------------------------------\n\nTITLE: Configuring React Router in TypeScript\nDESCRIPTION: The main.tsx file is configured to set up React Router for the application, enabling navigation between different components.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/7-share-code/content.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```solution:/apps/react-store/src/main.tsx title=\"/apps/react-store/src/main.tsx\"\n\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Component Using Nx Generator\nDESCRIPTION: Shell command to generate a new horoscope-card component using Nx CLI within the UI project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nnx generate component horoscope-card --project=ui --export\n```\n\n----------------------------------------\n\nTITLE: Generating New Nuxt Application\nDESCRIPTION: Command to generate a new Nuxt application within the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/nuxt/nuxt-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nuxt:app apps/my-app\n```\n\n----------------------------------------\n\nTITLE: Nx Component Generation Prompt Response\nDESCRIPTION: Example of responding to the Nx generator prompts when creating a component, showing how to keep the component private to the project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n❯ npx nx generate @nx/react:component libs/feature-sets/src/lib/add-set-form\n\n NX  Generating @nx/react:component\n\n✔ Should this component be exported in the project? (y/N) · false\n```\n\n----------------------------------------\n\nTITLE: Listing Global Nx Installation with pnpm\nDESCRIPTION: This command lists the global installations of Nx using pnpm. It provides users with an overview of their global Nx installations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/installation/update-global-installation.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm list --global nx\n```\n\n----------------------------------------\n\nTITLE: Package.json with Workspace Dependency (JSONC)\nDESCRIPTION: This code snippet shows a package.json file using a workspace dependency. The version is not present in the source package.json file, as it's managed externally. The 'dependencies' field contains a workspace reference to another project within the monorepo.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/updating-version-references.md#_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"my-project\", // note there is no version number in the source package.json file because it will never be updated\n  \"dependencies\": {\n    \"my-other-project-in-the-monorepo\": \"workspace:*\" // or \"file:../my-other-project-in-the-monorepo\", depending on your preference and which package manager you are using\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Timeouts for Nx Cloud Requests in Shell\nDESCRIPTION: This snippet demonstrates how to disable the default 10-second timeout for Nx Cloud requests by setting the NX_CLOUD_NO_TIMEOUTS environment variable when running an Nx command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/reference/config.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nNX_CLOUD_NO_TIMEOUTS=true nx run-many -t build\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for nx-dev-ui-animations Library\nDESCRIPTION: This command executes the unit tests for the nx-dev-ui-animations library using Jest as the testing framework. It utilizes the Nx CLI to run the tests.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/ui-animations/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnx test nx-dev-ui-animations\n```\n\n----------------------------------------\n\nTITLE: Running Development Commands\nDESCRIPTION: Various commands for starting Metro server, running on iOS/Android, and building applications\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react-native/react-native-plugin.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx start <your-app-name>\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx run-ios <your-app-name>\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx run-android <your-app-name>\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx build-ios <your-app-name>\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx build-android <your app name>\n```\n\n----------------------------------------\n\nTITLE: Package.json Dependencies Configuration\nDESCRIPTION: Example package.json showing how to configure workspace dependencies\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-29-new-nx-experience.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@tsmono/myviteapp\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@tsmono/mytslib\": \"workspace:*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Buildable Package Configuration Example\nDESCRIPTION: Example package.json configuration for a buildable project with compiled output\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/js/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@acme/pkg1\",\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"default\": \"./dist/index.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Typecheck Configuration\nDESCRIPTION: TSConfig configuration to disable typecheck task for a specific project\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/js/documents/overview.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../../tsconfig.base.json\",\n  \"files\": [],\n  \"include\": [],\n  \"references\": [\n    {\n      \"path\": \"./tsconfig.lib.json\"\n    }\n  ],\n  \"nx\": {\n    \"addTypecheckTarget\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Todo Context and Methods\nDESCRIPTION: TypeScript code to export the todo context and related methods from the data-access library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-qwik.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nexport * from './lib/todo.context';\nexport * from './lib/todo';\n```\n\n----------------------------------------\n\nTITLE: Creating React Button Component\nDESCRIPTION: Simple React button component implementation with basic click handling.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Button(props: any) {\n  return <button onClick={() => props.onClick()}>{props.children}</button>;\n}\nexport default Button;\n```\n\n----------------------------------------\n\nTITLE: Serving Module Federation Host App\nDESCRIPTION: Command to serve the shell (host) application with remote dependencies.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-12-next-gen-module-federation-deployments.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx serve shell\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Detox Package (Legacy)\nDESCRIPTION: Command for installing the Nx Detox package using npm for versions prior to Nx 18\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/detox/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/detox\n```\n\n----------------------------------------\n\nTITLE: Visualizing Nx Project Graph\nDESCRIPTION: Command to visualize the project dependency graph in Nx, which shows relationships between different projects in the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/courses/pnpm-nx-next/lessons/05-implicit-dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx graph\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Paper\nDESCRIPTION: Commands to install React Native Paper, a material design library for React Native.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-23-introducing-expo-support-for-nx.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# npm\nnpm install react-native-paper --save\n\n# yarn\nyarn add react-native-paper\n```\n\n----------------------------------------\n\nTITLE: Generating Nx Executor With Custom Hashing\nDESCRIPTION: Creates an Nx executor that includes a custom hashing function by using the --includeHasher flag\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/plugin/docs/generators/executor-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/plugin:executor tools/my-plugin/src/executors/build --includeHasher\n```\n\n----------------------------------------\n\nTITLE: Displaying Human-Readable Project Information in Nx\nDESCRIPTION: This command shows information about 'my-app' in a human-readable format by explicitly setting '--json false'.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/show.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnx show project my-app --json false\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Vite Plugin\nDESCRIPTION: Commands to add @nx/vite plugin to an existing Nx workspace, with optional TypeScript paths setup.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/vite/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/vite\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/vite --setupPathsPlugin\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/vue Package in Nx Workspace\nDESCRIPTION: This command installs the @nx/vue package in an Nx workspace, ensuring compatibility with the current Nx version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/vue/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/vue\n```\n\n----------------------------------------\n\nTITLE: Project Configuration for Webpack\nDESCRIPTION: Project configuration in project.json specifying the webpack config file path.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/webpack-config-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"my-app\": {\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/webpack:webpack\",\n      \"options\": {\n        \"webpackConfig\": \"apps/my-app/webpack.config.js\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Header Component in Library\nDESCRIPTION: Command to create and export a header component in the lib1 library\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nrwl/angular:component header --project=lib1 --export\n```\n\n----------------------------------------\n\nTITLE: Generating New Library in Nx Workspace\nDESCRIPTION: Command to generate a new library in an Nx workspace, which updates the TypeScript project references.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-06-nx-update-20-3.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx g lib packages/my-package\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Angular Plugin (Nx 18+)\nDESCRIPTION: Command to install the @nx/angular plugin in an Nx workspace using nx add command for version 18 and above.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/angular\n```\n\n----------------------------------------\n\nTITLE: Original Nx Target Defaults Configuration\nDESCRIPTION: Initial configuration showing basic webpack target defaults with build inputs\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/src/migrations/update-18-0-0/add-mf-env-var-to-target-defaults.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetDefaults\": {\n    \"@nx/webpack:webpack\": {\n      \"inputs\": [\"^build\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Non-buildable Package Configuration Example\nDESCRIPTION: Example package.json configuration for a non-buildable project with source file exports\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/js/documents/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@acme/pkg1\",\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \".\": \"./src/index.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nest.js applications and libraries in Nx\nDESCRIPTION: Commands to generate new Nest.js applications and libraries, including options for buildable and publishable libraries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nest/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nest:app apps/my-nest-app\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nest:app apps/my-nest-app --frontendProject my-angular-app\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nest:lib libs/my-nest-lib\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nest:lib libs/my-nest-lib --buildable\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/nest:lib libs/my-nest-lib --publishable --importPath=@my-workspace/my-nest-lib\n```\n\n----------------------------------------\n\nTITLE: Rendering Template Expression\nDESCRIPTION: A basic template expression that interpolates a foo variable value into the output string using ERB-style syntax\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/devkit/src/generators/test-files/directory-foo-__foo__/file-in-directory-foo-__foo__.txt#2025-04-22_snippet_0\n\nLANGUAGE: template\nCODE:\n```\nfile in directory foo <%= foo %> contents\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/vue Package for Older Nx Versions\nDESCRIPTION: This command installs the @nx/vue package using npm for Nx versions prior to 18.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/vue/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/vue\n```\n\n----------------------------------------\n\nTITLE: Nx Linux ARM Package Name\nDESCRIPTION: Package identifier for the ARM-based Linux binary distribution of Nx, using GNU EABI hard-float ABI.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/native-packages/linux-arm-gnueabihf/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nnx-linux-arm-gnueabihf\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Rule for Dependency Checks\nDESCRIPTION: Basic configuration for adding the dependency-checks rule to a project's ESLint configuration. Requires jsonc-eslint-parser for JSON files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/eslint/dependency-checks.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"files\": [\"*.json\"],\n      \"parser\": \"jsonc-eslint-parser\",\n      \"rules\": {\n        \"@nx/dependency-checks\": \"error\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating All Nx Plugins to Specific Version\nDESCRIPTION: Example of using 'nx migrate' to update all Nx plugins to a specific version (9.0.0), which generates a migrations.json file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/migrate.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate 9.0.0\n```\n\n----------------------------------------\n\nTITLE: Disable prefer-standalone in ESLint config (new override)\nDESCRIPTION: This snippet shows how to disable the `@angular-eslint/prefer-standalone` rule by adding a new override to the ESLint configuration file. It adds a new object to the `module.exports` array with `files` matching TypeScript files and sets the rule to `'off'`.  The original rules for other file types are preserved.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-20-2-0/disable-angular-eslint-prefer-standalone.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n`module.exports = [\n          {\n            files: ['*.html'],\n            rules: { 'some-rule-for-html': 'error' },\n          },\n        ];\n        `\n```\n\nLANGUAGE: javascript\nCODE:\n```\n`        \"module.exports = [\n          {\n            files: ['*.html'],\n            rules: { 'some-rule-for-html': 'error' },\n          },\n          {\n            files: ['**/*.ts'],\n            rules: {\n              '@angular-eslint/prefer-standalone': 'off',\n            },\n          },\n        ];\n        \"`\n```\n\n----------------------------------------\n\nTITLE: Generating an Nx Library\nDESCRIPTION: Command to generate a new library in an Nx workspace, which can be used in Remix applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/remix/documents/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/remix:lib libs/login\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Angular Plugin (Pre-Nx 18)\nDESCRIPTION: Command to install the @nx/angular package using npm for versions prior to Nx 18.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/angular\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/react Plugin in Nx <18\nDESCRIPTION: NPM command to install the @nx/react package for Nx versions below 18.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/react\n```\n\n----------------------------------------\n\nTITLE: Serving an Angular Application\nDESCRIPTION: This command serves the specified Angular application using the Nx CLI. It allows developers to preview and test the application during development.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/angular/angular-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"nx serve appName\"\n```\n\n----------------------------------------\n\nTITLE: File System Structure Example\nDESCRIPTION: This snippet illustrates a simple project directory structure as processed by Nx to create the project graph necessary for determining dependencies and task execution order.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/sync-generators.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n└─ myorg\n   ├─ apps\n   │  ├─ app1\n   │  └─ app1\n   ├─ libs\n   │  └─ lib\n   ├─ nx.json\n   └─ package.json\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Plugin with CLI Package\nDESCRIPTION: Command to create a new Nx plugin workspace with a CLI package for creating custom applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-07-06-nx-16-5-release.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-plugin my-own-cli --create-package-name=create-my-own-cli-app\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Build with Nx\nDESCRIPTION: This command demonstrates how to run the Storybook build using the Nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/build-storybook-executor-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx run ui:build-storybook\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Tasks with Nx on Windows\nDESCRIPTION: This command demonstrates how to run a Gradle build task using Nx on Windows systems.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/gradle/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx.bat build <your gradle library>\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Tests\nDESCRIPTION: Command to run tests for the Storybook instance, verifying that stories render correctly and interactions work as expected.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/one-storybook-for-all.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx test-storybook storybook-host\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nx Project for AWS Lambda Functions\nDESCRIPTION: Command to create a new Nx workspace preconfigured for AWS Lambda function development using the @nx/aws-lambda preset.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/node-aws-lambda.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest my-functions --preset=@nx/aws-lambda\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Nx Script Execution\nDESCRIPTION: This snippet shows how to modify package.json to run existing scripts with Nx, including caching settings and input configurations for the test script.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-existing-project.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-workspace\",\n  ...\n  \"scripts\": {\n    \"build\": \"nx next:build\",\n    \"lint\": \"nx eslint:lint\",\n    \"test\": \"nx exec -- node ./run-tests.js\"\n  },\n  ...\n  \"nx\": {\n    \"targets\": {\n      \"test\": {\n        \"cache\": \"true\",\n        \"inputs\": [\n          \"default\",\n          \"^default\"\n        ],\n        \"outputs\": []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Nx Detox Package\nDESCRIPTION: Command to add the Nx Detox package to an existing Nx workspace for Nx version 18+\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/detox/detox-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/detox\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Export in project.json\nDESCRIPTION: Base configuration of the @nx/expo:export executor in the project.json file, which enables bundling an Expo mobile application for all platforms with the output directed to a specific directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/export-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"mobile\",\n  //...\n  \"targets\": {\n    //...\n    \"export\": {\n      \"executor\": \"@nx/expo:export\",\n      \"options\": {\n        \"outputs\": [\"{options.outputDir}\"],\n        \"platform\": \"all\",\n        \"outputDir\": \"dist/apps/mobile\"\n      },\n      \"dependsOn\": [\"sync-deps\"]\n    }\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Conformance Rules in CI (Using Nx Cloud)\nDESCRIPTION: This YAML snippet shows how to enforce conformance rules in a CI environment using Nx Cloud.  It utilizes `npx nx-cloud record --` to capture the logs for the `nx conformance:check` command in the Nx Cloud dashboard, providing insights into the conformance checks.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/features/powerpack/conformance.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Enforce all conformance rules\n  run: npx nx-cloud record -- npx nx conformance:check\n```\n\n----------------------------------------\n\nTITLE: Generating Storybook Configuration for React Project in Nx\nDESCRIPTION: Command to generate Storybook configuration for an individual React project using the @nx/react:storybook-configuration generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/plugin-react.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:storybook-configuration project-name\n```\n\n----------------------------------------\n\nTITLE: Upgrading Native Code\nDESCRIPTION: Command to upgrade iOS and Android native code to the latest version\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react-native/documents/overview.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/react-native:upgrade-native apps/<your-app-name>\n```\n\n----------------------------------------\n\nTITLE: Serve a Built React Application\nDESCRIPTION: Serves a built React application locally using http-server.  This allows testing the deployed application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react/react-plugin.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpx http-server dist/apps/my-new-app\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/linter for Nx < 17\nDESCRIPTION: Command to install the @nx/linter package using npm for Nx versions below 17.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/eslint/eslint.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/linter\n```\n\n----------------------------------------\n\nTITLE: Building an Application\nDESCRIPTION: Builds a specified application using the Nx build command.  The output is typically placed in the 'dist' folder.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/web/web-plugin.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-new-app\n```\n\n----------------------------------------\n\nTITLE: Directory Structure After Build\nDESCRIPTION: Example output directory structure after building with assets.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/esbuild/esbuild-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ndist/libs/mylib/\n├── README.md\n├── docs\n│   ├── CONTRIBUTING.md\n│   └── TESTING.md\n├── index.js\n├── logo.png\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Non-buildable Package Configuration\nDESCRIPTION: Example package.json configuration for a non-buildable project pointing to source files.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/js/js-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@acme/pkg1\",\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \".\": \"./src/index.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Node Application in Nx\nDESCRIPTION: Command to generate a new Node application in an Nx workspace, which will be later converted to a Lit application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-lit.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/node:app apps/my-lit-app\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Tasks with Nx on Mac/Linux\nDESCRIPTION: Command syntax for executing Gradle build tasks through Nx on Unix-based systems.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/gradle/gradle-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./nx build <your gradle library>\n```\n\n----------------------------------------\n\nTITLE: Installing Rspack in an Existing Nx Monorepo\nDESCRIPTION: Command to install the Rspack plugin in an existing Nx monorepo as a development dependency.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-03-10-rspack-getting-up-to-speed-with-nx.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @nrwl/rspack -D\n```\n\n----------------------------------------\n\nTITLE: Project Configuration with Type Tags in Nx\nDESCRIPTION: Example of adding type tags to a project configuration file to categorize projects as applications, features, or utilities.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-12-17-mastering-the-project-boundaries-in-nx.md#2025-04-22_snippet_1\n\nLANGUAGE: json5\nCODE:\n```\n{\n  tags: ['type:app'],\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Nx Migrations\nDESCRIPTION: This command runs the prepared migrations on the codebase, updating it to the specified version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-07-26-evergreen-tooling-more-than-just-codemods.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate —-run-migrations\n```\n\n----------------------------------------\n\nTITLE: Using a Library Loader in a Remix Route\nDESCRIPTION: Example of importing and using a loader from a library in a Remix route file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/remix/documents/overview.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { adminLoader } from '@acme/login/server';\n\nexport const loader = adminLoader;\n```\n\n----------------------------------------\n\nTITLE: Generating Expo Components and Applications\nDESCRIPTION: Commands for generating new Expo applications, libraries, and components in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/expo/expo-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/expo:app apps/my-app\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/expo:lib libs/your-lib-name\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/expo:component libs/your-lib-name/src/your-component-name --export\n```\n\n----------------------------------------\n\nTITLE: Building Production Bundle for Angular Store\nDESCRIPTION: Command to create a production build for the angular-store project using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/templates/angular-monorepo/lesson-2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx build angular-store\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeScript Test Suite Imports\nDESCRIPTION: Basic imports required for creating a new test suite in Nx Ecosystem CI.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-06-20-introducing-nx-ecosystem-ci.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { runInRepo } from '../utils';\nimport { RunOptions } from '../types';\n```\n\n----------------------------------------\n\nTITLE: Testing Next.js Projects\nDESCRIPTION: Commands to run unit tests and E2E tests for Next.js applications and libraries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/next/documents/overview.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx test my-new-app\nnx test my-new-lib\n\nnx e2e my-new-app-e2e\n```\n\n----------------------------------------\n\nTITLE: Running on iOS\nDESCRIPTION: Command to build and run the app on iOS simulator or device\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react-native/documents/overview.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnx run-ios <your-app-name>\n```\n\n----------------------------------------\n\nTITLE: Running Tests Across All Projects\nDESCRIPTION: Execute test target for all projects in the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run-many.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t test\n```\n\n----------------------------------------\n\nTITLE: Building Storybook after Migration\nDESCRIPTION: This command builds Storybook for a specific project after the migration to version 7.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/migrate-7-generator-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx build-storybook PROJECT_NAME\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Detox for Earlier Versions\nDESCRIPTION: Command to install the Nx Detox package for versions prior to Nx 18\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/detox/detox-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/detox\n```\n\n----------------------------------------\n\nTITLE: Generating React Native Library\nDESCRIPTION: Command to generate a new React Native library within the libs directory\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react-native/documents/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react-native:lib libs/<your-lib-name>\n```\n\n----------------------------------------\n\nTITLE: Running Static HTML Export for Next.js\nDESCRIPTION: Command to generate static HTML files for a Next.js application using the build command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/next/documents/overview.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-next-app\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/eslint-plugin for Nx versions below 18\nDESCRIPTION: Command to install @nx/eslint-plugin package using npm for Nx versions prior to 18.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/eslint-plugin/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Generating React Native Application\nDESCRIPTION: Command to generate a new React Native application within the apps directory\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react-native/documents/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react-native:app apps/<your-app-name>\n```\n\n----------------------------------------\n\nTITLE: Shell Command to Run Nx Generator\nDESCRIPTION: Demonstrates how to execute a custom generator using Nx CLI with a recommended dry-run flag\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/creating-files.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx generate my-generator mylib\n```\n\n----------------------------------------\n\nTITLE: Generate JavaScript Stories\nDESCRIPTION: Command to generate Storybook configuration and stories using JavaScript instead of TypeScript.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/storybook-configuration-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react-native:storybook-configuration ui --generateStories=true --js=true\n```\n\n----------------------------------------\n\nTITLE: Visualizing Affected Projects in Nx\nDESCRIPTION: Command to generate a graph highlighting only the projects affected by recent changes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-04-19-manage-your-gradle.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# macos/linux\n./nx affected:graph\n\n# windows\nnx.bat affected:graph\n```\n\n----------------------------------------\n\nTITLE: Generating AWS Lambda Configuration in Nx Project\nDESCRIPTION: Command to set up AWS Lambda configuration in an existing Nx project using the @nx/aws-lambda generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/node-aws-lambda.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/aws-lambda:setup-functions\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Plugin for Nx <18\nDESCRIPTION: Command to install the React Native plugin using npm for Nx versions below 18\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react-native/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/react-native\n```\n\n----------------------------------------\n\nTITLE: Installing Nx S3 Cache Plugin\nDESCRIPTION: Command to add the @nx/s3-cache package to your Nx workspace\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/s3-cache/s3-cache-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/s3-cache\n```\n\n----------------------------------------\n\nTITLE: Disable Changelog File Creation - Workspace Level - JSON\nDESCRIPTION: This JSON snippet configures Nx Release to disable the generation and management of the local `CHANGELOG.md` file while still creating GitHub releases. It sets the `release.changelog.workspaceChangelog.file` property to `false` in `nx.json` along with enabling GitHub releases.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/automate-github-releases.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"changelog\": {\n      \"workspaceChangelog\": {\n        \"file\": false,\n        \"createRelease\": \"github\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Nx CLI\nDESCRIPTION: Command to execute unit tests for the library using Jest test runner through the Nx CLI\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/src/generators/library/files/lib/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx test <%= name %>\n```\n\n----------------------------------------\n\nTITLE: Markdown Options Table Structure\nDESCRIPTION: Table defining available command line options for Nx project configuration, including option names, types, and detailed descriptions.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/create-nx-workspace.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Option                     | Type                                                                          | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| -------------------------- | ----------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `--allPrompts`, `--a`      | boolean                                                                       | Show all prompts. (Default: `false`)                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| `--appName`                | string                                                                        | The name of the app when using a monorepo with certain stacks.                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| `--bundler`                | string                                                                        | Bundler to be used to build the app.                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| `--commit.email`           | string                                                                        | E-mail of the committer.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| `--commit.message`         | string                                                                        | Commit message. (Default: `Initial commit`)                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| `--commit.name`            | string                                                                        | Name of the committer.                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| `--defaultBase`            | string                                                                        | Default base to use for new projects. (Default: `main`)                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| `--docker`                 | boolean                                                                       | Generate a Dockerfile for the Node API.                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| `--e2eTestRunner`          | `playwright`, `cypress`, `none`                                               | Test runner to use for end to end (E2E) tests.                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| `--formatter`              | string                                                                        | Code formatter to use.                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| `--framework`              | string                                                                        | Framework option to be used with certain stacks.                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| `--help`                   | boolean                                                                       | Show help.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| `--interactive`            | boolean                                                                       | Enable interactive mode with presets. (Default: `true`)                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| `--name`                   | string                                                                        | Workspace name (e.g. org name).                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n```\n\n----------------------------------------\n\nTITLE: Run Nx Graph (Mac/Linux Shell)\nDESCRIPTION: This command visualizes the project graph in a web browser.  It illustrates the dependencies and relationships between projects in the workspace, running the nx graph command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n./nx graph\n```\n\n----------------------------------------\n\nTITLE: Enabling Nx Agents for Distributed Task Execution in CI\nDESCRIPTION: This command starts a CI run using Nx Cloud and distributes tasks across 5 Linux-based machines optimized for JavaScript workloads. It's used to parallelize task execution and speed up CI processes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/courses/pnpm-nx-next/lessons/11-nx-agents.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnx-cloud start-ci-run --distribute-on=\"5 linux-medium-js\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Horoscope Data Fetch Hook in React Native\nDESCRIPTION: A React useEffect hook that fetches horoscope data based on the selected zodiac sign when the component mounts.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n  if (zodiacItem?.zodiacSign) {\n    getUserHoroscope(zodiacItem.zodiacSign, 'today');\n  }\n}, [zodiacItem, getUserHoroscope]);\n```\n\n----------------------------------------\n\nTITLE: Running Specific Unit Tests\nDESCRIPTION: Command to run tests for a specific package (jest in this example).\nSOURCE: https://github.com/nrwl/nx/blob/master/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx test jest\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Vue Plugin\nDESCRIPTION: Shell command to add the Nx Vue plugin as a dev dependency to an existing Nx workspace. This enables Vue-specific generators and capabilities in the Nx environment.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-12-28-highlights-2023.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n% npm add -D @nx/vue\n```\n\n----------------------------------------\n\nTITLE: Creating React Monorepo with Webpack\nDESCRIPTION: Command to generate a new React monorepo workspace configured with Webpack bundler.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/plugin-overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest --preset=react-monorepo --bundler=webpack\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Nx Workspace\nDESCRIPTION: Command to create a new Nx workspace with interactive prompts\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react-native/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace your-workspace-name\n```\n\n----------------------------------------\n\nTITLE: Configuring Static HTML Export in Next.js\nDESCRIPTION: Configuration for enabling static HTML export in a Next.js application's config file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/next/documents/overview.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextConfig = {\n  nx: {\n    svgr: false,\n  },\n  output: 'export',\n};\n```\n\n----------------------------------------\n\nTITLE: Legacy React Native Plugin Installation\nDESCRIPTION: NPM command for installing React Native plugin in Nx versions below 18\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/react-native/react-native-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/react-native\n```\n\n----------------------------------------\n\nTITLE: Generating React App with Rspack\nDESCRIPTION: Command to generate a new React application using Rspack as the bundler\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/rspack/rspack-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react:app my-app --bundler=rspack\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Markdown\nDESCRIPTION: Markdown syntax for embedding a YouTube video about the Nx 16.5 release announcement.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/16_5_0.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% youtube\nsrc=\"https://www.youtube.com/embed/7XLoLOc3afY\"\ntitle=\"Nx 16.5 Release!!!!\"\n/%}\n```\n\n----------------------------------------\n\nTITLE: Generating React Native Component\nDESCRIPTION: Command to generate a new React Native component with export capability\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react-native/documents/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react-native:component <component-path> --export\n```\n\n----------------------------------------\n\nTITLE: Generate Component Command\nDESCRIPTION: Command to run a generator that creates/modifies files based on a plugin generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/commands.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/react:component libs/my-lib/src/lib/my-component\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Lambda Functions with Nx\nDESCRIPTION: Command to deploy AWS Lambda functions using the configured 'deploy-functions' target in an Nx project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/node-aws-lambda.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx deploy-functions\n```\n\n----------------------------------------\n\nTITLE: Generating a React Application with Nx\nDESCRIPTION: Shows the command to generate a new React application using Nx in the 'apps' directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/cli/generate.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/react:app apps/myapp\n```\n\n----------------------------------------\n\nTITLE: Generating Vue Library in Nx Workspace\nDESCRIPTION: This command generates a new Vue library in the 'libs' directory of an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/vue/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/vue:lib libs/my-lib\n```\n\n----------------------------------------\n\nTITLE: Physical Device Target Configuration\nDESCRIPTION: Configuration for targeting specific physical iOS devices for app deployment.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/build-ios-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nxcrun simctl list devices available\n```\n\nLANGUAGE: json\nCODE:\n```\n    \"build-ios\": {\n      \"executor\": \"@nx/react-native:build-ios\",\n      \"options\": {\n        \"device\": \"deviceName\"\n      }\n    }\n```\n\nLANGUAGE: bash\nCODE:\n```\nnx build-ios <app-name> --device=\"deviceName\"\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Storybook Package\nDESCRIPTION: Command to install the correct version of @nx/storybook package for Nx 18+ workspaces.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/storybook/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/storybook\n```\n\n----------------------------------------\n\nTITLE: Serving a Remix Application for Development\nDESCRIPTION: Command to serve a Remix application for development purposes using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/remix/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx dev myapp\n```\n\n----------------------------------------\n\nTITLE: Generating Publishable Next.js Library\nDESCRIPTION: Command to generate a publishable Next.js library with a custom import path.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/next/documents/overview.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/next:lib libs/my-new-lib --publishable --importPath=@happynrwl/ui-components\n```\n\n----------------------------------------\n\nTITLE: Generating a Remix Loader\nDESCRIPTION: Command to generate a loader for a Remix route in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/remix/documents/overview.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/remix:loader apps/myapp/app/routes/admin.tsx\n```\n\n----------------------------------------\n\nTITLE: Managing Nest.js Applications\nDESCRIPTION: Commands for building, serving, testing, and linting Nest.js applications and libraries.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/nest/nest-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-nest-app\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-nest-lib\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx serve my-nest-app\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx lint my-nest-app\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx lint my-nest-lib\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx test my-nest-app\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx test my-nest-lib\n```\n\n----------------------------------------\n\nTITLE: Generating New Angular Library\nDESCRIPTION: Command to generate a new Angular library named 'mylib' using the Nx Angular plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/templates/angular-monorepo/lesson-2/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx g @nx/angular:lib mylib\n```\n\n----------------------------------------\n\nTITLE: Generate JavaScript Storybook Configuration\nDESCRIPTION: Command to generate Storybook configuration files using JavaScript instead of TypeScript.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/storybook-configuration-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react-native:storybook-configuration ui --tsConfiguration=false\n```\n\n----------------------------------------\n\nTITLE: Deploying Netlify Functions (Draft)\nDESCRIPTION: Command to deploy Netlify functions as a draft to a temporary URL.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/deployment/node-serverless-functions-netlify.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx deploy-functions\n```\n\n----------------------------------------\n\nTITLE: Generating a new Nx workspace with Nest.js preset\nDESCRIPTION: Commands to create a new Nx workspace with Nest.js preset using npx or yarn.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nest/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace my-workspace --preset=nest\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn create nx-workspace my-workspace --preset=nest\n```\n\n----------------------------------------\n\nTITLE: Generating a Node Application with Nx\nDESCRIPTION: Demonstrates the command to generate a new Node.js application using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/cli/generate.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/node:app apps/myapp\n```\n\n----------------------------------------\n\nTITLE: Initializing Nx in Non-JavaScript Repository\nDESCRIPTION: Initialize Nx in a repository without a package.json file, creating the .nx installation directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/installation/install-non-javascript.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx init\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Cache Plugin in Nx\nDESCRIPTION: Command to install the @nx/azure-cache package in an Nx workspace\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/azure-cache/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/azure-cache\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Commits in Nx Release\nDESCRIPTION: Demonstrates how to handle invalid commit types using a special '__INVALID__' type for patch version bumps and custom changelog titles. This is useful if commits do not adhere to standard formats but still need processing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/customize-conventional-commit-types.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"conventionalCommits\": {\n      \"types\": {\n        \"__INVALID__\": {\n          \"semverBump\": \"patch\",\n          \"changelog\": {\n            \"title\": \"Uncategorized changes\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Nx and Jest\nDESCRIPTION: Command for executing unit tests for the nx-dev-ui-contact library using Nx's testing framework and Jest test runner\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/ui-contact/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx test nx-dev-ui-contact\n```\n\n----------------------------------------\n\nTITLE: Updating Nx Dependencies in Shell\nDESCRIPTION: This command updates the Nx workspace dependencies and code to the latest version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-12-06-nx-15-3-standalone-projects-vite-task-graph-and-more.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\n----------------------------------------\n\nTITLE: Serving React store application\nDESCRIPTION: This command serves the React store application. It will run all three application servers, but only the 'store' will watch for file changes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation-with-ssr.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx serve store\n```\n\n----------------------------------------\n\nTITLE: Removing experimentalJustInTimeCompile When Set to True in Cypress Configuration\nDESCRIPTION: This example shows how to migrate a Cypress configuration by removing the experimentalJustInTimeCompile option when set to true, as JIT compilation is now the default behavior in Cypress v14 for Angular applications using webpack.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/src/migrations/update-20-8-0/replace-experimental-just-in-time-compile.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress';\n\nexport default defineConfig({\n  component: {\n    devServer: {\n      framework: 'angular',\n      bundler: 'webpack',\n    },\n    experimentalJustInTimeCompile: true,\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress';\n\nexport default defineConfig({\n  component: {\n    devServer: {\n      framework: 'angular',\n      bundler: 'webpack',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Profiling Nx Commands with Chrome DevTools\nDESCRIPTION: Command to generate a performance profile JSON file for analyzing Nx command execution using Chrome DevTools. The profile data can be used to visualize and optimize task execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-25-new-terminal-output-performance-improvements-in-nx-13-5.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nNX_PROFILE=profile.json nx build cart\n```\n\n----------------------------------------\n\nTITLE: Configuring NxAppWebpackPlugin for package.json Generation\nDESCRIPTION: Webpack configuration using NxAppWebpackPlugin to generate a package.json file. This setup defines output path, dev server port, and various plugin options including the generatePackageJson flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/ci-deployment.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { NxAppWebpackPlugin } = require('@nx/webpack/app-plugin');\nconst { join } = require('path');\n\nmodule.exports = {\n  output: {\n    path: join(__dirname, '../../dist/apps/acme'),\n  },\n  devServer: {\n    port: 4200,\n  },\n  plugins: [\n    new NxAppWebpackPlugin({\n      tsConfig: './tsconfig.app.json',\n      compiler: 'swc',\n      main: './src/main.tsx',\n      index: '.src/index.html',\n      styles: ['./src/styles.css'],\n      generatePackageJson: true,\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Compodoc JSON in Storybook Preview\nDESCRIPTION: Configuration for importing the generated documentation.json file into Storybook to display API documentation in the Docs tab.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/angular-storybook-compodoc.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setCompodocJson } from '@storybook/addon-docs/angular';\nimport docJson from '../documentation.json';\nsetCompodocJson(docJson);\n```\n\n----------------------------------------\n\nTITLE: Turbo Mode Server Configuration\nDESCRIPTION: Configuration for enabling Turbopack in Next.js server, including both command-line and configuration file approaches.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/server-next-executor-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx run acme:serve --turbo\n```\n\nLANGUAGE: json\nCODE:\n```\n\"serve\": {\n  \"executor\": \"@nx/next:server\",\n  \"defaultConfiguration\": \"development\",\n  \"options\": {\n    \"buildTarget\": \"acme:build\",\n    \"dev\": true\n  },\n  \"configurations\": {\n    \"development\": {\n      \"buildTarget\": \"acme:build:development\",\n      \"dev\": true,\n      \"turbo\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Express Server Setup\nDESCRIPTION: Initial Express server setup without CORS handling, demonstrating a basic API endpoint configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-11-14-handling-cors.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\nimport * as path from 'path';\nconst app = express();\n\napp.use('/assets', express.static(path.join(__dirname, 'assets')));\n\napp.get('/api', (_req, res) => {\n  res.send({ message: 'Welcome to api!' });\n});\n\nconst port = process.env.PORT || 3333;\nconst server = app.listen(port, () => {\n  console.log(`Listening at <http://localhost>:${port}/api`);\n});\nserver.on('error', console.error);\n```\n\n----------------------------------------\n\nTITLE: Using Relative Imports in TypeScript\nDESCRIPTION: Demonstrates how to use relative imports to consume a library in a TypeScript monorepo application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-28-managing-ts-pkgs-in-monorepos.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { greet } from '../../../packages/lib-a/src/index';\n\nconsole.log(greet('World'));\n```\n\n----------------------------------------\n\nTITLE: Computing Project Graph in Nx\nDESCRIPTION: Asynchronous function that computes and returns a ProjectGraph. It handles graph computation either in a daemon process or current process based on environment conditions and configuration settings. The function accepts optional parameters for error handling and daemon client reset.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/createProjectGraphAsync.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateProjectGraphAsync(opts?): Promise<ProjectGraph>\n```\n\n----------------------------------------\n\nTITLE: Save Task Graph to File\nDESCRIPTION: Command to save the Nx task graph to a JSON file instead of executing it.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n nx run myapp:build --graph=output.json\n```\n\n----------------------------------------\n\nTITLE: Setting Glob Pattern for Implicit Dependencies in package.json\nDESCRIPTION: This example shows how to use a glob pattern to set implicit dependencies for a project in the package.json file, affecting multiple projects at once.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_23\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"mylib\",\n  \"nx\": {\n    \"implicitDependencies\": [\"shop-*\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Jest Config After Migration (getJestProjectsAsync)\nDESCRIPTION: This code snippet shows the updated usage of `getJestProjectsAsync` in a `jest.config.ts` file. It asynchronously retrieves the Jest project configurations. The configuration is now wrapped in an async function, and `await` is used to handle the asynchronous retrieval of the projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/jest/src/migrations/update-20-0-0/replace-getJestProjects-with-getJestProjectsAsync.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getJestProjectsAsync } from '@nx/jest';\n\nexport default async () => ({\n  projects: await getJestProjectsAsync(),\n});\n```\n\n----------------------------------------\n\nTITLE: List Android Emulators Command\nDESCRIPTION: Command to display all available Android emulators on the system.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/run-android-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nemulator -list-avds\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation\nDESCRIPTION: Command to generate API documentation from schema.json files and update the documentation structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm documentation\n```\n\n----------------------------------------\n\nTITLE: Generating Rspack React Application\nDESCRIPTION: Command to generate a new React application using Rspack as the bundler.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/rspack/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/react:app my-app --bundler=rspack\n```\n\n----------------------------------------\n\nTITLE: Serving Static HTML for E2E Testing\nDESCRIPTION: Command to serve static HTML files for E2E testing of a Next.js application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/next/documents/overview.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nnx serve-static my-next-app-e2e\n```\n\n----------------------------------------\n\nTITLE: Starting Metro Server\nDESCRIPTION: Command to start the Metro server for device communication\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react-native/documents/overview.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx start <your-app-name>\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Webpack Package (Legacy)\nDESCRIPTION: Command to install the Nx Webpack package for versions prior to Nx 18.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/webpack/plugin-overview.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/webpack\n```\n\n----------------------------------------\n\nTITLE: Generating Web Component Application\nDESCRIPTION: Example of using Nx generate command to create a new web component application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/generate.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/web:app apps/myapp\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Commands to run unit tests for applications and libraries using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/web/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx test my-new-app\nnx test my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Creating React Application in Nx\nDESCRIPTION: Command to generate a new React application in the apps directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:app apps/my-new-app\n```\n\n----------------------------------------\n\nTITLE: Running Basic Build Target\nDESCRIPTION: Example of running a build target for a project named myapp.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/run.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n nx run myapp:build\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Plugin in nx.json\nDESCRIPTION: Configuration to enable the custom Storybook plugin in nx.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-12-18-dynamic-targets-with-inference.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"./tools/storybook\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Build Task Configuration\nDESCRIPTION: Configuration to disable build task inference in nx.json\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/js/documents/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/js/typescript\",\n      \"options\": {\n        \"build\": false\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Package Name Declaration in Markdown\nDESCRIPTION: Defines the package name for the ARM64 MUSL binary variant of Nx\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/native-packages/linux-arm64-musl/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `nx-linux-arm64-musl`\n```\n\n----------------------------------------\n\nTITLE: Filter Projects by Tag\nDESCRIPTION: Shows projects with tags matching a specific pattern\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/show.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx show projects --projects tag:ui-*\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Nx\nDESCRIPTION: Commands for running unit tests for affected packages or specific packages using Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx affected --target=test\n```\n\n----------------------------------------\n\nTITLE: Generating Vue Storybook Stories\nDESCRIPTION: This command generates Storybook stories for a Vue project. It uses the @nx/vue:stories generator and requires a project name as an argument.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vue/docs/stories-examples.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/vue:stories project-name\n```\n\n----------------------------------------\n\nTITLE: Running Nx Commands with Global Installation\nDESCRIPTION: Execute various Nx commands using global installation method\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/installation/install-non-javascript.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-project\nnx generate application\nnx graph\n```\n\n----------------------------------------\n\nTITLE: Project.json Configuration for Angular Storybook\nDESCRIPTION: Example of Storybook target configuration in project.json showing browserTarget usage for both storybook and build-storybook executors.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/plugin-angular.md#2025-04-22_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n    \"storybook\": {\n      \"executor\": \"@storybook/angular:start-storybook\",\n      \"options\": {\n         ...\n        \"browserTarget\": \"my-project:build\"\n      },\n      ...\n    },\n    \"build-storybook\": {\n      \"executor\": \"@storybook/angular:build-storybook\",\n       ...\n      \"options\": {\n         ...\n        \"browserTarget\": \"my-project:build\"\n      },\n     ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Task Graph Preview in Webview\nDESCRIPTION: Generate and display the task graph in a web viewer.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/run-many.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnx run-many -t=build --graph\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Libraries Commands\nDESCRIPTION: Collection of shell commands for creating and managing JS/TS libraries in Nx.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/js/js-plugin.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/js:lib libs/my-lib\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/js:lib libs/my-buildable-lib --bundler=rollup\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-buildable-lib\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx test my-lib\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx lint my-lib\n```\n\n----------------------------------------\n\nTITLE: Defining getOutputsForTargetAndConfiguration Function (TypeScript)\nDESCRIPTION: This snippet defines two overloads of the getOutputsForTargetAndConfiguration function. The first overload is deprecated and takes a task and node as parameters. The second overload takes a target (which can be a Task or an object with configuration, project, and target properties), overrides, and a node as parameters. Both return an array of strings representing the outputs to be cached.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/getOutputsForTargetAndConfiguration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **getOutputsForTargetAndConfiguration**(`task`: Task, `node`: ProjectGraphProjectNode): string[]\n\n▸ **getOutputsForTargetAndConfiguration**(`target`: Task | { configuration?: string; project: string; target: string }, `overrides`: any, `node`: ProjectGraphProjectNode): string[]\n```\n\n----------------------------------------\n\nTITLE: Migrating proxy configuration to Vite config file\nDESCRIPTION: Example of how to add proxy configuration directly in the Vite configuration file after migration from @nx/vite:dev-server proxyConfig option.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/troubleshoot-convert-to-inferred.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  //...\n  server: {\n    // ...\n    proxy: {\n      '/api': {\n        target: 'http://localhost:3333',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating React Library with Nx MCP in TypeScript\nDESCRIPTION: Demonstrates using Nx MCP to create a new React feature library with specific configurations and dependencies in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-04-15-nx-mcp-vscode-copilot.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Example query:\n\"Create a new feature library in packages/order/feat-cancel-order.\nMake it a React library and link it to the data-access-order project.\nDon't use a bundler or generate components.\"\n```\n\n----------------------------------------\n\nTITLE: Running PNPM Workspace Script Using PNPM Filter\nDESCRIPTION: This snippet demonstrates how to run a build script for a specific package in a PNPM workspace using the traditional PNPM filter command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/courses/pnpm-nx-next/lessons/02-run-tasks.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm --filter @tasker/web build\n```\n\n----------------------------------------\n\nTITLE: Defining Generators Object Example in TypeScript\nDESCRIPTION: Example of configuring default generator values in the workspace configuration. Shows how to set style defaults for a React library generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/Workspace.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@nx/react\": {\n    \"library\": {\n      \"style\": \"scss\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Info.plist for iOS Vector Icons\nDESCRIPTION: XML snippet to add font files to the iOS Info.plist for vector icons support.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_5\n\nLANGUAGE: plist\nCODE:\n```\n <key>UIAppFonts</key>\n <array>\n  <string>AntDesign.ttf</string>\n  <string>Entypo.ttf</string>\n  <string>EvilIcons.ttf</string>\n  <string>Feather.ttf</string>\n  <string>FontAwesome.ttf</string>\n  <string>FontAwesome5\\_Brands.ttf</string>\n  <string>FontAwesome5\\_Regular.ttf</string>\n  <string>FontAwesome5\\_Solid.ttf</string>\n  <string>Foundation.ttf</string>\n  <string>Ionicons.ttf</string>\n  <string>MaterialIcons.ttf</string>\n  <string>MaterialCommunityIcons.ttf</string>\n  <string>SimpleLineIcons.ttf</string>\n  <string>Octicons.ttf</string>\n  <string>Zocial.ttf</string>\n  <string>Fontisto.ttf</string>\n </array>\n```\n\n----------------------------------------\n\nTITLE: Publishing Conformance Rules to Nx Cloud via CLI\nDESCRIPTION: Uses the nx-cloud CLI to publish the built conformance rules to Nx Cloud. This command takes the output path of the built rules as an argument.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/enterprise/conformance/publish-conformance-rules-to-nx-cloud.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx-cloud publish-conformance-rules cloud-conformance-rules/dist\n```\n\n----------------------------------------\n\nTITLE: Metafile Output Structure\nDESCRIPTION: Example directory structure showing metafile output.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/esbuild/esbuild-plugin.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ndist/libs/mylib/\n├── README.md\n├── index.js\n├── meta.json\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: E2E Project Configuration\nDESCRIPTION: JSON configuration for setting up an E2E testing project in Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-09-18-introducing-playwright-support-for-nx.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"e2e\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/js Plugin (Nx <18)\nDESCRIPTION: Command to install the @nx/js plugin in Nx versions below 18\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/js/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/js\n```\n\n----------------------------------------\n\nTITLE: Implementing Library Function in TypeScript\nDESCRIPTION: Example of a simple function implementation in a TypeScript library file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-fastify.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport function someFunction(): string {\n  return 'some function';\n}\n```\n\n----------------------------------------\n\nTITLE: Nx Affected Project Configuration\nDESCRIPTION: Configuration for running commands only on affected projects using nx affected.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/docs/run-commands-examples.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx affected --target=generate-docs\n```\n\nLANGUAGE: json\nCODE:\n```\n\"frontend\": {\n    \"targets\": {\n        \"generate-docs\": {\n            \"executor\": \"nx:run-commands\",\n            \"options\": {\n                \"command\": \"npx compodoc -p apps/frontend/tsconfig.app.json\"\n            }\n        }\n    }\n},\n\"api\": {\n    \"targets\": {\n        \"generate-docs\": {\n            \"executor\": \"nx:run-commands\",\n            \"options\": {\n                \"command\":  \"npx compodoc -p apps/api/tsconfig.app.json\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nx Generate Shorthand Syntax\nDESCRIPTION: Shortened version of the generate command using 'g' alias\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/generate.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx g <generator>\n```\n\n----------------------------------------\n\nTITLE: Storybook Preview Configuration\nDESCRIPTION: TypeScript configuration for Storybook preview showing how to add decorators.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/storybook/documents/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport someDecorator from 'some-storybook-addon';\nexport const decorators = [someDecorator];\n```\n\n----------------------------------------\n\nTITLE: Linting Next.js Projects\nDESCRIPTION: Commands to lint Next.js applications and libraries in an Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/next/documents/overview.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnx lint my-new-app\nnx lint my-new-lib\n```\n\n----------------------------------------\n\nTITLE: Package Name Reference in Markdown\nDESCRIPTION: Package identifier for the Linux x64 GNU binary distribution of Nx\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/native-packages/linux-x64-gnu/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nnx-linux-x64-gnu\n```\n\n----------------------------------------\n\nTITLE: Nx FreeBSD Binary Package Name\nDESCRIPTION: Package name reference for the FreeBSD x86_64 build of Nx\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/native-packages/freebsd-x64/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nnx-freebsd-x64\n```\n\n----------------------------------------\n\nTITLE: Generating CI Workflow Configuration for Nx Cloud\nDESCRIPTION: Command to generate a CI workflow configuration compatible with Nx Cloud.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/intro/connect-to-cloud.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g ci-workflow\n```\n\n----------------------------------------\n\nTITLE: Generator Schema Type Definition\nDESCRIPTION: TypeScript interface defining the structure of generator options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/organization-specific-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LibraryGeneratorSchema {\n  name: string;\n  directory?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Global Yarn Configuration for Local Registry\nDESCRIPTION: YAML configuration for the global Yarn config to enable connection to local registry while preserving authentication for the public registry.\nSOURCE: https://github.com/nrwl/nx/blob/master/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: yml\nCODE:\n```\nnpmRegistries:\n  'https://registry.yarnpkg.com':\n    npmAuthToken: npm_******************\nyarnPath: .yarn/releases/yarn-3.2.2.cjs\nnpmRegistryServer: 'http://localhost:4873'\nunsafeHttpWhitelist:\n  - localhost\n```\n\n----------------------------------------\n\nTITLE: Serving Built Application Locally\nDESCRIPTION: Command to serve a built application locally using http-server.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/web/documents/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx http-server dist/apps/my-new-app\n```\n\n----------------------------------------\n\nTITLE: Updating Nx to Latest Version\nDESCRIPTION: Commands to update Nx to the latest version, including updating dependencies and running necessary migrations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-12-23-single-file-monorepo-config-custom-workspace-presets-improved-tailwind-support-and-more-in-nx-13.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nnx migrate --run-migrations\n```\n\n----------------------------------------\n\nTITLE: Creating Serverless Function Directory and File\nDESCRIPTION: Shell commands to create a new directory for the user location serverless function and touch an empty TypeScript file for the function implementation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-05-26-determine-your-user-location-with-netlify-edge-functions.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir src/functions/user-location\ntouch src/functions/user-location/user-location.ts\n```\n\n----------------------------------------\n\nTITLE: Generating Name Variations with Nx Utility Function in TypeScript\nDESCRIPTION: This function takes a string input and returns an object with various name representations. It handles different input formats (kebab-case, camelCase) and generates className, propertyName, constantName, and fileName variations. The function is useful for maintaining consistent naming conventions across an Nx project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/names.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnames('my-name'); // {name: 'my-name', className: 'MyName', propertyName: 'myName', constantName: 'MY_NAME', fileName: 'my-name'}\nnames('myName'); // {name: 'myName', className: 'MyName', propertyName: 'myName', constantName: 'MY_NAME', fileName: 'my-name'}\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration in Markdown\nDESCRIPTION: YAML frontmatter configuration for a blog post/webinar announcement, including metadata like title, description, authors, tags, and registration URL.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-22-nx-cloud-scale-your-ci-and-team-with-ease.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'Nx Cloud: Scale Your CI and Team with Ease'\ndescription: 'Learn how you can attain fast, reliable CI and better coordination across your technical organization with Nx Cloud, and see our new multi-workspace features for organizational scaling in action.'\ndate: 2025-01-22\nslug: 'nx-cloud-scale-your-ci-and-team-with-ease'\nauthors: ['Nicole Oliver', 'Rareș Matei', 'James Henry']\ntags: [webinar]\ncover_image: /blog/images/2025-01-22/Jan-webinar-image.png\nstatus: Past - Gated\nregistrationUrl: https://go.nx.dev/jan2025-webinar\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Files with Template Substitution in Nx\nDESCRIPTION: Example demonstrating how to use generateFiles function to create files from templates with name substitutions. Takes files from a source directory and applies template substitutions both in filenames and content. Supports special naming patterns like __tmpl__ for better editor compatibility.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/generateFiles.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateFiles(tree, path.join(__dirname, 'files'), './tools/scripts', {\n  tmpl: '',\n  name: 'myscript',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Task for Lit Application in Nx\nDESCRIPTION: JSON configuration for the build task in project.json, specifying output format, bundling, and asset handling for the Lit application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-lit.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/esbuild:esbuild\",\n      \"outputs\": [\"{options.outputPath}\"],\n      \"defaultConfiguration\": \"production\",\n      \"options\": {\n        \"outputPath\": \"dist/apps/my-lit-app\",\n        \"format\": [\"esm\"],\n        \"bundle\": true,\n        \"thirdParty\": true,\n        \"main\": \"apps/my-lit-app/src/main.ts\",\n        \"tsConfig\": \"apps/my-lit-app/tsconfig.app.json\",\n        \"assets\": [\"apps/my-lit-app/src/assets\", \"apps/my-lit-app/index.html\"],\n        \"generatePackageJson\": true,\n        \"esbuildOptions\": {\n          \"sourcemap\": true,\n          \"outExtension\": {\n            \".js\": \".js\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nx Project Graph Task in Bash\nDESCRIPTION: This snippet shows how to execute the `nxProjectGraph` Gradle task using the Gradle wrapper.  It generates the Nx project graph JSON file.  The command assumes that the Gradle wrapper is present in the project.  Output is the file path of the generated JSON.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/gradle/project-graph/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n./gradlew nxProjectGraph\n```\n\n----------------------------------------\n\nTITLE: Generating Test Wrapper Library - Shell Commands\nDESCRIPTION: Commands to generate a new library for test wrapper components in Expo and React Native workspaces.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-08-state-management.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# expo library\nnpx nx generate @nx/expo:library libs/queries/test-wrapper\n\n# react native library\nnpx nx generate @nx/react-native:library libs/queries/test-wrapper\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Information in Nx 19\nDESCRIPTION: Command to show detailed project information in Nx 19, demonstrating new task grouping features.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-05-08-nx-19-release.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx show project nx-dev-e2e --web\n```\n\n----------------------------------------\n\nTITLE: Markdown Template Variables\nDESCRIPTION: Markdown template placeholders for dynamic content insertion\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/rspack/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{links}}\n\n<hr>\n\n# Nx: Smart Monorepos · Fast CI\n\nNx is a build system, optimized for monorepos, with plugins for popular frameworks and tools and advanced CI capabilities including caching and distribution.\n\nThis package is a [Rspack plugin for Nx](https://nx.dev/nx-api/rspack).\n\n{{content}}\n```\n\n----------------------------------------\n\nTITLE: Expo Development Commands\nDESCRIPTION: Collection of essential Nx commands for Expo development including app creation, starting server, and component generation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/expo/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/expo:app apps/my-app\nnx start my-app\nnpx nx g @nx/expo:lib libs/your-lib-name\nnpx nx g @nx/expo:component libs/your-lib-name/src/your-component-name --export\n```\n\n----------------------------------------\n\nTITLE: CSS Text Alignment for App Component\nDESCRIPTION: CSS rule that centers text content within elements with the 'App' class using the text-align property.\nSOURCE: https://github.com/nrwl/nx/blob/master/e2e/nx-init/src/files/cra/src/App.css.txt#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.App {\n  text-align: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Rspack Plugin\nDESCRIPTION: Command to install the @nx/rspack plugin in Nx 18+ workspaces.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/rspack/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/rspack\n```\n\n----------------------------------------\n\nTITLE: Setting Nx Activation Key Environment Variable\nDESCRIPTION: Environment variable configuration for storing the Nx activation key\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/s3-cache/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNX_KEY=YOUR_ACTIVATION_KEY\n```\n\n----------------------------------------\n\nTITLE: Using jscodeshift Codemod in Nx Devkit Generator\nDESCRIPTION: This snippet shows how to use a jscodeshift codemod within an Nx Devkit generator. It uses the visitNotIgnoredFiles helper function to apply the codemod to specified files or directories while maintaining compatibility with Nx features.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/composing-generators.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tree, visitNotIgnoredFiles } from '@nx/devkit';\nimport { applyTransform } from 'jscodeshift/src/testUtils';\nimport arrowFunctionsTransform from './arrow-functions';\n\n// The schema path can be an individual file or a directory\nexport default async function (tree: Tree, schema: { path: string }): any {\n  visitNotIgnoredFiles(tree, schema.path, (filePath) => {\n    const input = tree.read(filePath).toString();\n    const transformOptions = {};\n    const output = applyTransform(\n      { default: arrowFunctionsTransform, parser: 'ts' },\n      transformOptions,\n      { source: input, path: filePath }\n    );\n    tree.write(filePath, output);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Add Nx Plugin Command\nDESCRIPTION: Command to install and initialize an Nx plugin in the workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/commands.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add my-plugin\n```\n\n----------------------------------------\n\nTITLE: Listing All Installed Plugins\nDESCRIPTION: Command to list all plugins currently installed in the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nx/documents/list.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n nx list\n```\n\n----------------------------------------\n\nTITLE: Show Affected Projects\nDESCRIPTION: Displays projects affected by recent changes in the workspace\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/show.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx show projects --affected\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Owners Plugin\nDESCRIPTION: Command to add the @nx/owners plugin to an Nx workspace\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/owners/owners-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/owners\n```\n\n----------------------------------------\n\nTITLE: Generate Angular Library\nDESCRIPTION: Command to generate a new Angular library in the libs directory\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/generate.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/angular:library libs/mylibrary\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/expo Plugin\nDESCRIPTION: Commands for installing the @nx/expo plugin in an existing Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/expo/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/expo\n```\n\n----------------------------------------\n\nTITLE: Save Graph to JSON File\nDESCRIPTION: Command to save the project graph to a JSON file output\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/graph.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx graph --file=output.json\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Conformance Plugin\nDESCRIPTION: Command to install the @nx/conformance package\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/conformance/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/conformance\n```\n\n----------------------------------------\n\nTITLE: Running unit tests with Jest\nDESCRIPTION: This snippet shows the command to execute the unit tests for the nx-dev-ui-member-card library using Jest. The command invokes the Nx test runner targeting the specified library.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/ui-member-card/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"nx test nx-dev-ui-member-card\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nx Logo Display with Dark/Light Mode Support\nDESCRIPTION: HTML markup for displaying the Nx logo with support for light/dark mode using the picture element and media queries. The code includes responsive image handling with different source files based on color scheme preferences.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/playwright/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"text-align: center;\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Running Storybook 8 Migration with Auto-Accept\nDESCRIPTION: This command runs the @nx/storybook:migrate-8 generator with the --autoAcceptAllPrompts flag, which automatically accepts all Storybook CLI prompts during the migration process.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/migrate-8-generator-examples.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/storybook:migrate-8 --autoAcceptAllPrompts\n```\n\n----------------------------------------\n\nTITLE: Implementing Qwik Context for Todo State Management\nDESCRIPTION: TypeScript code to create a Qwik context for managing todo items. It defines the Todo interface, TodoStore, and provides a TodoContextProvider component.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-qwik.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  component$,\n  createContextId,\n  Slot,\n  useContextProvider,\n  useStore,\n} from '@builder.io/qwik';\n\nexport interface Todo {\n  id: number;\n  message: string;\n}\n\ninterface TodoStore {\n  todos: Todo[];\n  lastId: number;\n}\n\nexport const TodoContext = createContextId<TodoStore>('todo.context');\n\nexport const TodoContextProvider = component$(() => {\n  const todoStore = useStore<TodoStore>({\n    todos: [],\n    lastId: 0,\n  });\n\n  useContextProvider(TodoContext, todoStore);\n\n  return <Slot />;\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Svelte Component from Library\nDESCRIPTION: TypeScript code to export a Svelte component from a library for use in other parts of the application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-svelte.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport { default as Counter } from './Counter.svelte';\n```\n\n----------------------------------------\n\nTITLE: Importing ProductsComponent in Inventory App\nDESCRIPTION: This code demonstrates how to import and use the ProductsComponent from the products library in the inventory application's app.component.ts file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { ProductsComponent } from '@angular-monorepo/products';\n\n@Component({\n  imports: [ProductsComponent],\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css',\n})\nexport class AppComponent {\n  title = 'inventory';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Replacements in Vite\nDESCRIPTION: Setup for replacing files during build using the replaceFiles plugin in Vite configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/vite/configure-vite.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n...\nimport { replaceFiles } from '@nx/vite/plugins/rollup-replace-files.plugin';\n\nexport default defineConfig({\n  ...\n\n  plugins: [\n    ...\n    replaceFiles([\n      {\n        replace: 'apps/my-app/src/environments/environment.ts',\n        with: 'apps/my-app/src/environments/environment.prod.ts',\n      },\n    ]),\n  ],\n\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Generator Registration in collections.json\nDESCRIPTION: JSON configuration showing how to register both Nx Generator and Angular Schematic implementations in a collection file.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/nx-devkit-angular-devkit.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Nx React\",\n  \"version\": \"0.1\",\n  \"extends\": [\"@nx/workspace\"],\n  \"schematics\": {\n    \"mygenerator\": {\n      \"factory\": \"./src/generators/mygenerator/mygenerator#mygeneratorSchematic\",\n      \"schema\": \"./src/generators/mygenerator/schema.json\"\n    }\n  },\n  \"generators\": {\n    \"init\": {\n      \"factory\": \"./src/generators/mygenerator/mygenerator#mygenerator\",\n      \"schema\": \"./src/generators/mygenerator/schema.json\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building with esbuild\nDESCRIPTION: Command to build a project using esbuild.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/esbuild/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx build mylib\n```\n\n----------------------------------------\n\nTITLE: Implementing Context-based Dependency Injection in Lit\nDESCRIPTION: This snippet demonstrates how to use Lit's context API for dependency injection. It shows the creation of an editor context, a mixin to consume it, and how to provide and use the context in components.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-06-29-nx-console-gets-lit.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const editorContext = createContext<'vscode' | 'intellij'>(\n  Symbol('editor')\n);\n\nconst EditorContext = (superClass) =>\n  class extends superClass {\n    @consume({ context: editorContext })\n    @state()\n    editor: 'vscode' | 'intellij';\n  };\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport class IdeCommunicationController implements ReactiveController {\n  // ...\n  constructor(private host: ReactiveElement) {\n    const editor = isVscode() ? 'vscode' : 'intellij';\n    // provide the context to all DOM children of the host element\n    new ContextProvider(host, {\n      context: editorContext,\n      initialValue: editor,\n    });\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('some-component')\nexport class SomeComponent extends EditorContext(LitElement) {\n  render() {\n    return html`<p>I am rendered in ${this.editor}</p>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cypress Configuration File for Component Testing\nDESCRIPTION: This TypeScript code sets up the Cypress configuration for component testing by using the Nx component testing preset. It is necessary to import the required modules and configure the test preset based on the project file's path.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress';\nimport { nxComponentTestingPreset } from '@nx/angular/plugins/component-testing';\n\nexport default defineConfig({\n  component: nxComponentTestingPreset(__filename),\n});\n```\n\n----------------------------------------\n\nTITLE: Updating target configuration in project.json (Before)\nDESCRIPTION: This JSON snippet shows the original target configuration within a `project.json` file before the migration is applied.  The `serve` target uses the `@angular-devkit/build-angular:dev-server` executor, but does not explicitly define the `continuous` option. The goal of the migration is to add `\"continuous\": true` to such configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-21-0-0/set-continuous-option.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"targets\": {\n    // ...\n    \"serve\": {\n      \"executor\": \"@angular-devkit/build-angular:dev-server\",\n      \"options\": {\n        \"buildTarget\": \"my-app:build\",\n        \"port\": 4200\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Nuxt Plugin\nDESCRIPTION: Command to add @nx/nuxt plugin to an existing Nx workspace\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/nuxt/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/nuxt\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Nx and Jest\nDESCRIPTION: Command for executing unit tests for the nx-dev-ui-icons library using Nx's test runner and Jest testing framework\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/ui-icons/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx test nx-dev-ui-icons\n```\n\n----------------------------------------\n\nTITLE: Target configuration with explicit continuous option (After)\nDESCRIPTION: This JSON snippet demonstrates that when the `continuous` option is already explicitly defined (here, set to `false`), the migration will not modify it.  This ensures that existing configurations are respected and not overwritten by the migration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/angular/src/migrations/update-21-0-0/set-continuous-option.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"targets\": {\n    // ...\n    \"serve\": {\n      \"continuous\": false,\n      \"executor\": \"@nx/angular:dev-server\",\n      \"options\": {\n        \"buildTarget\": \"my-app:build\",\n        \"port\": 4200\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Angular Schematics Through Nx CLI\nDESCRIPTION: Command showing how Nx CLI can directly use existing Angular schematics to generate components, demonstrating compatibility with the Angular ecosystem.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/nx-and-angular-cli.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @schematics/angular:component my-component\n```\n\n----------------------------------------\n\nTITLE: Ensure Owners Rule Configuration\nDESCRIPTION: Configuration example for the ensure-owners rule that requires project ownership definition\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/conformance/documents/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"conformance\": {\n    \"rules\": [\n      {\n        \"rule\": \"@nx/conformance/ensure-owners\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Angular Button Component Template\nDESCRIPTION: Defines the HTML template for the button component. It uses Tailwind CSS classes for styling and includes dynamic binding for the href attribute.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_42\n\nLANGUAGE: html\nCODE:\n```\n<a\n  class=\"py-sm px-md bg-primary-dark hover:bg-primary text-white\"\n  href=\"{{ href }}\"\n  target=\"_blank\"\n  rel=\"noopener noreferrer\"\n>\n  <ng-content></ng-content>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Defining writeJsonFile Function in TypeScript\nDESCRIPTION: This TypeScript function declaration defines writeJsonFile, which takes a path, data, and optional options to write JSON data to a file. It uses a generic type T extending object, and returns void.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/writeJsonFile.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **writeJsonFile**<T>(path: string, data: T, options?: JsonWriteOptions): void\n```\n\n----------------------------------------\n\nTITLE: Crate publishing output\nDESCRIPTION: Illustrates the output from `nx release` during the publishing stage, showing that the publish target runs for each crate (pkg-1, pkg-2, pkg-3).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/publish-rust-crates.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n✔ Do you want to publish these versions? (y/N) · true\n\nNX   Running target nx-release-publish for 3 projects:\n\n- pkg-1\n- pkg-2\n- pkg-3\n\n—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n\n(...cargo publish output here...)\n\n—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\n\nNX   Successfully ran target nx-release-publish for 3 projects\n```\n\n----------------------------------------\n\nTITLE: Generate Nx Web App with Jest\nDESCRIPTION: This command uses the Nx CLI to generate a new web application named 'frontend' within the 'apps' directory. By default, Nx configures new apps to use Jest for testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/jest/documents/overview.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/web:app apps/frontend\n```\n\n----------------------------------------\n\nTITLE: Updating Nx Framework Dependencies\nDESCRIPTION: Command to update Nx workspace dependencies and code to the latest version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-03-08-nx-15-8-rust-hasher-nx-console-for-intellij-deno-node-and-storybook.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\n----------------------------------------\n\nTITLE: Expo App Configuration Example\nDESCRIPTION: Example JSON configuration for an Expo app showing required expo key structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/expo/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"name\": \"MyProject\",\n    \"slug\": \"my-project\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Nx Globally (Homebrew - Shell)\nDESCRIPTION: These commands install Nx globally using Homebrew on macOS.  First, the nrwl/nx tap is added, then the nx package is installed. Homebrew must be pre-installed.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbrew tap nrwl/nx\nbrew install nx\n```\n\n----------------------------------------\n\nTITLE: Creating Task Inference Test for Nx Astro Plugin\nDESCRIPTION: Test case that verifies the Nx plugin correctly infers Astro tasks (build and dev) with appropriate configurations, inputs, and outputs.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/plugins/tooling-plugin.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nit('should infer tasks', () => {\n  const projectDetails = JSON.parse(\n    execSync('npx nx show project my-lib --json', {\n      cwd: projectDirectory,\n    }).toString()\n  );\n\n  expect(projectDetails).toMatchObject({\n    name: 'my-lib',\n    root: 'my-lib',\n    sourceRoot: 'my-lib/src',\n    targets: {\n      build: {\n        cache: true,\n        executor: 'nx:run-commands',\n        inputs: [\n          '{projectRoot}/astro.config.mjs',\n          '{projectRoot}/src/**/*',\n          '{projectRoot}/public/**/*',\n          {\n            externalDependencies: ['astro'],\n          },\n        ],\n        options: {\n          command: 'astro build',\n          cwd: 'my-lib',\n        },\n        outputs: ['{projectRoot}/./dist'],\n      },\n      dev: {\n        executor: 'nx:run-commands',\n        options: {\n          command: 'astro dev',\n          cwd: 'my-lib',\n        },\n      },\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Card Component\nDESCRIPTION: Command to create and export a card component in the lib2 library\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nrwl/angular:component card --project=lib2 --export\n```\n\n----------------------------------------\n\nTITLE: Basic Nx List Command Syntax\nDESCRIPTION: The basic syntax for the nx list command that can optionally take a plugin name as an argument.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/list.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx list [plugin]\n```\n\n----------------------------------------\n\nTITLE: Building Library Command\nDESCRIPTION: Command to build a buildable library\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/js/documents/overview.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnx build my-buildable-lib\n```\n\n----------------------------------------\n\nTITLE: Basic React Native Android Project Configuration in Nx\nDESCRIPTION: Basic project.json configuration for running a React Native Android app using Nx executor.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/run-android-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"mobile\",\n  //...\n  \"targets\": {\n    //...\n    \"run-android\": {\n      \"executor\": \"@nx/react-native:run-android\",\n      \"options\": {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fine-tuning Cache Inputs in nx.json\nDESCRIPTION: Demonstrates how to exclude specific files (e.g., Markdown) from being considered as cache inputs for certain targets like 'build'.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-07-14-setup-a-monorepo-with-pnpm-workspaces-and-speed-it-up-with-nx.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasksRunnerOptions\": {\n    \"default\": {\n      \"runner\": \"nx/tasks-runners/default\",\n      \"options\": {\n        \"cacheableOperations\": [\"build\", \"test\"]\n      }\n    }\n  },\n  \"targetDefaults\": {\n    \"build\": {\n      \"inputs\": [\"!{projectRoot}/**/*.md\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Original package.json Build Script\nDESCRIPTION: Example of a typical build script in package.json before integrating with Nx. This shows the starting point before enabling Nx caching.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/manual.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"tsc -p tsconfig.json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NxPlugin Type Alias in TypeScript\nDESCRIPTION: Creates a type alias named NxPlugin that references the NxPluginV2 interface. This type is used to define plugins that extend Nx's functionality.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/NxPlugin.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nƬ **NxPlugin**: [`NxPluginV2`]\n```\n\n----------------------------------------\n\nTITLE: Defining PostTasksExecution Type Alias in TypeScript\nDESCRIPTION: This code defines a TypeScript type alias for a function that handles post-tasks execution. It takes generic options and a context object as parameters, and returns void or a Promise of void.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/PostTasksExecution.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **PostTasksExecution**<`TOptions`>: (`options`: `TOptions` | `undefined`, `context`: [`PostTasksExecutionContext`](../../devkit/documents/PostTasksExecutionContext)) => `void` | `Promise`<`void`>\n```\n\n----------------------------------------\n\nTITLE: Header Component Template Implementation\nDESCRIPTION: HTML markup for the header component using Tailwind CSS classes\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<header class=\"px-xl py-md bg-primary-light text-xl font-bold shadow-md\">\n  Angular + Tailwind CSS + Nx\n</header>\n```\n\n----------------------------------------\n\nTITLE: Defining ProjectsConfigurations Interface in TypeScript\nDESCRIPTION: Interface definition that specifies the structure for projects configurations in Nx. Contains an index signature for project configurations mapped by project name and a version number for the configuration format.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ProjectsConfigurations.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProjectsConfigurations {\n  projects: {\n    [projectName: string]: ProjectConfiguration\n  };\n  version: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StaleProjectGraphCacheError Class in TypeScript\nDESCRIPTION: This snippet defines the StaleProjectGraphCacheError class, which extends the built-in Error class. It includes a constructor and inherits properties and methods from Error.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/StaleProjectGraphCacheError.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass StaleProjectGraphCacheError extends Error {\n  constructor() {\n    super();\n  }\n\n  // Inherited properties\n  cause?: unknown;\n  message: string;\n  name: string;\n  stack?: string;\n\n  // Inherited static properties\n  static prepareStackTrace?: (err: Error, stackTraces: CallSite[]) => any;\n  static stackTraceLimit: number;\n\n  // Inherited static method\n  static captureStackTrace(targetObject: object, constructorOpt?: Function): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux Store Decorator for Storybook\nDESCRIPTION: A React component that provides a mocked Redux store to stories, preventing the 'Could not find store' error for components that use Redux.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-25-use-storybook-with-nx-react-native.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  initialRootState,\n  RootState,\n} from '@studio-ghibli-search-engine/store';\nimport React from 'react';\nimport { Provider as StoreProvider } from 'react-redux';\nimport configureStore from 'redux-mock-store';\n\nexport const StoreDecorator = (story) => {\n  const mockStore = configureStore<RootState>([]);\n  const store = mockStore(initialRootState);\n  return <StoreProvider store={store}>{story()}</StoreProvider>;\n};\n```\n\n----------------------------------------\n\nTITLE: Linting Library Command\nDESCRIPTION: Command to lint a library\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/js/documents/overview.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnx lint my-lib\n```\n\n----------------------------------------\n\nTITLE: Defining Project Scripts in package.json (JSON)\nDESCRIPTION: This snippet shows the structure of the scripts section within a package.json file, highlighting common scripts such as build, lint, and test. These scripts serve as entry points for executing tasks within the project.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-existing-project.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"scripts\": {\n    \"build\": \"next build\",\n    \"lint\": \"eslint ./src\",\n    \"test\": \"node ./run-tests.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preview Release Results (Dry Run)\nDESCRIPTION: This text shows the output of the `nx release --first-release --dry-run` command. It displays the resolved version, the applied semver bump, and the new version written to the `package.json` files for each project. It also previews the changes and an entry in CHANGELOG.md.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/get-started-with-nx-release.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n NX   Running release version for project: pkg-1\n\npkg-1 📄 Resolved the current version as 0.0.1 from manifest: packages/pkg-1/package.json\npkg-1 ❓ Applied semver relative bump \"major\", from the prompted specifier, to get new version 1.0.0\npkg-1 ✍️ New version 1.0.0 written to manifest: packages/pkg-1/package.json\n\n NX   Running release version for project: pkg-2\n\npkg-2 📄 Resolved the current version as 0.0.1 from manifest: packages/pkg-2/package.json\npkg-2 ❓ Applied version 1.0.0 directly, because the project is a member of a fixed release group containing pkg-1\npkg-2 ✍️ New version 1.0.0 written to manifest: packages/pkg-2/package.json\n\n NX   Running release version for project: pkg-3\n\npkg-3 📄 Resolved the current version as 0.0.1 from manifest: packages/pkg-3/package.json\npkg-3 ❓ Applied version 1.0.0 directly, because the project is a member of a fixed release group containing pkg-1\npkg-3 ✍️ New version 1.0.0 written to manifest: packages/pkg-3/package.json\n\nUPDATE packages/pkg-1/package.json [dry-run]\n\n    \"name\": \"@myorg/pkg-1\",\n-   \"version\": \"0.0.1\",\n+   \"version\": \"0.0.2\",\n    \"dependencies\": {\n      \"tslib\": \"^2.3.0\",\n-     \"@myorg/pkg-2\": \"0.0.1\"\n+     \"@myorg/pkg-2\": \"0.0.2\"\n    },\n\n UPDATE packages/pkg-2/package.json [dry-run]\n\n    \"name\": \"@myorg/pkg-2\",\n-   \"version\": \"0.0.1\",\n+   \"version\": \"0.0.2\",\n    \"dependencies\": {\n\n UPDATE packages/pkg-3/package.json [dry-run]\n\n    \"name\": \"@myorg/pkg-3\",\n-   \"version\": \"0.0.1\",\n+   \"version\": \"0.0.2\",\n    \"dependencies\": {\n\n\nNX   Updating npm lock file\n\n\nNX   Staging changed files with git\n\n\nNOTE: The \"dryRun\" flag means no changes were made.\n\nNX   Previewing an entry in CHANGELOG.md for v0.0.2\n\n\nCREATE CHANGELOG.md [dry-run]\n+ ## 0.0.2 (2024-01-23)\n+\n+ This was a version bump only, there were no code changes.\n\nNX   Staging changed files with git\n\n\nNOTE: The \"dryRun\" flag means no changelogs were actually created.\n\nNX   Committing changes with git\n\n\nNX   Tagging commit with git\n\nSkipped publishing packages.\n```\n\n----------------------------------------\n\nTITLE: Update Snapshots Command\nDESCRIPTION: Command to update outdated test snapshots in Vitest.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/docs/test-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnx run my-app:test -u\n```\n\n----------------------------------------\n\nTITLE: Running Jest Unit Tests for Nx Dev Models Package\nDESCRIPTION: Command to execute unit tests using Jest test runner in an Nx workspace for the nx-dev-models-package library.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/models-package/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx test nx-dev-models-package\n```\n\n----------------------------------------\n\nTITLE: Declaring isWorkspacesEnabled Function in TypeScript\nDESCRIPTION: This function checks if the workspace is using npm workspaces, yarn workspaces, or pnpm workspaces. It takes optional parameters for package manager and root directory, and returns a boolean value.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/isWorkspacesEnabled.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **isWorkspacesEnabled**(`packageManager?`, `root?`): `boolean`\n```\n\n----------------------------------------\n\nTITLE: Function Signature for createConfig in Angular Rsbuild\nDESCRIPTION: The function signature for the createConfig function, showing the expected parameters and their types. It accepts default options, configurations, and an optional config environment variable name.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rsbuild/create-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function createConfig(\n  defaultOptions: {\n    options: PluginAngularOptions;\n    rsbuildConfigOverrides?: Partial<RsbuildConfig>;\n  },\n  configurations: Record<\n    string,\n    {\n      options: Partial<PluginAngularOptions>;\n      rsbuildConfigOverrides?: Partial<RsbuildConfig>;\n    }\n  > = {},\n  configEnvVar = 'NGRS_CONFIG'\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Nx as a Dev Dependency with npm\nDESCRIPTION: Command to install the Nx package as a development dependency using npm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/manual.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D nx@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing a Library Function in TypeScript\nDESCRIPTION: TypeScript code for a simple function in the created library, which will be imported and used in the Lit application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-lit.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport function someFunction(): string {\n  return 'some function';\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Implementation with Custom Options\nDESCRIPTION: Example of a plugin that accepts and uses custom options to add tags to detected projects, demonstrating how to type and consume options in the createNodesV2 function.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/project-graph-plugins.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createNodesFromFiles } from '@nx/devkit';\nimport { dirname } from 'path';\n\ntype MyPluginOptions = { tagName: string };\n\nexport const createNodesV2: CreateNodesV2<MyPluginOptions> = [\n  '**/tsconfig.json',\n  async (configFiles, options, context) => {\n    return await createNodesFromFiles(\n      (configFile, options, context) =>\n        const root = dirname(configFile);\n\n        return {\n          projects: {\n            [root]: {\n              tags: options.tagName ? [options.tagName] : [],\n            },\n          },\n        };\n      configFiles,\n      options,\n      context\n    );\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Reading NX Configuration without Tree Parameter (Deprecated)\nDESCRIPTION: Deprecated function signature for reading nx.json configuration. Will be removed in Nx 21. Returns NxJsonConfiguration or null.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/readNxJson.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadNxJson(): NxJsonConfiguration | null\n```\n\n----------------------------------------\n\nTITLE: Creating CI Workflow Branch\nDESCRIPTION: Commands to create a new branch for setting up the CI workflow.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/tutorial/circle.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b setup-ci\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Non-Sharing Library Versions\nDESCRIPTION: This JavaScript snippet illustrates the Webpack configuration resulting from opting out of sharing specific library versions to maintain distinct implementations in federated modules.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/module-federation/manage-library-versions-with-module-federation.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    new ModuleFederationPlugin({\n      // additional config\n      name: 'remote',\n      shared: {\n        react: { singleton: true, eager: true },\n        // acme/utils will not be shared\n      },\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TaskResults Type Alias in TypeScript\nDESCRIPTION: Creates a type alias TaskResults that represents a record mapping string task IDs to their corresponding TaskResult objects. This enables type-safe handling of task execution results in the Nx build system.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/TaskResults.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nƬ **TaskResults**: `Record`\\<`string`, [`TaskResult`](../../devkit/documents/TaskResult)\\>\n```\n\n----------------------------------------\n\nTITLE: Generate JavaScript Stories\nDESCRIPTION: Command showing how to generate Storybook stories using JavaScript instead of TypeScript.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vue/docs/storybook-configuration-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/vue:storybook-configuration ui --generateStories=true --js=true\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Plugin in nx.json\nDESCRIPTION: JSON configuration for the React Native plugin in nx.json, including target name specifications for various commands\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/react-native/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/react-native/plugin\",\n      \"options\": {\n        \"startTargetName\": \"start\",\n        \"podInstallTargetName\": \"pod-install\",\n        \"bundleTargetName\": \"bundle\",\n        \"runIosTargetName\": \"run-ios\",\n        \"runAndroidTargetName\": \"run-android\",\n        \"buildIosTargetName\": \"build-ios\",\n        \"buildAndroidTargetName\": \"build-android\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Tasks with Nx on Mac/Linux\nDESCRIPTION: This command demonstrates how to run a Gradle build task using Nx on Mac or Linux systems.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/gradle/documents/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./nx build <your gradle library>\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Graph Dependencies in JSON for Nx Workspace\nDESCRIPTION: A JSON representation of a project graph showing dependencies between main-lib and other libraries in an Nx workspace. This illustrates the relationship between projects that can be monitored with workspace watching.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/running-tasks/workspace-watching.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projects\": [\n    {\n      \"type\": \"lib\",\n      \"name\": \"main-lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"type\": \"lib\",\n      \"name\": \"lib\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"type\": \"lib\",\n      \"name\": \"lib2\",\n      \"data\": {\n        \"tags\": []\n      }\n    },\n    {\n      \"type\": \"lib\",\n      \"name\": \"lib3\",\n      \"data\": {\n        \"tags\": []\n      }\n    }\n  ],\n  \"groupByFolder\": false,\n  \"dependencies\": {\n    \"main-lib\": [\n      {\n        \"target\": \"lib\",\n        \"source\": \"main-lib\",\n        \"type\": \"direct\"\n      },\n      {\n        \"target\": \"lib2\",\n        \"source\": \"main-lib\",\n        \"type\": \"direct\"\n      },\n      {\n        \"target\": \"lib3\",\n        \"source\": \"main-lib\",\n        \"type\": \"direct\"\n      }\n    ],\n    \"lib\": [],\n    \"lib2\": [],\n    \"lib3\": []\n  },\n  \"workspaceLayout\": {\n    \"appsDir\": \"apps\",\n    \"libsDir\": \"libs\"\n  },\n  \"affectedProjectIds\": [],\n  \"focus\": null,\n  \"groupByFolder\": false,\n  \"exclude\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Nx Repair Command in Shell\nDESCRIPTION: This command runs the Nx repair process to fix any outdated configuration. It can be executed using nx directly if installed globally, or through package managers like npx, yarn, or pnpm.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/cli/repair.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx repair\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Body Styles in CSS\nDESCRIPTION: Defines base styles for the HTML body element, removing default margin and setting sans-serif font family.\nSOURCE: https://github.com/nrwl/nx/blob/master/e2e/nx-init/src/files/cra/src/index.css.txt#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  margin: 0;\n  font-family: sans-serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Buildable Library Configuration for Angular\nDESCRIPTION: Project configuration for a buildable Angular library using the ng-packagr-lite executor. This configuration is optimized for incremental builds and includes outputs property for caching.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/setup-incremental-builds-angular.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"projectType\": \"library\",\n  ...\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/angular:ng-packagr-lite\",\n      \"outputs\": [\n        \"{workspaceRoot}/dist/libs/my-lib\"\n      ],\n      \"options\": {\n        ...\n      },\n      \"configurations\": {\n        ...\n      },\n      \"defaultConfiguration\": \"production\"\n    },\n    ...\n  },\n  ...\n},\n```\n\n----------------------------------------\n\nTITLE: Adding Project Configuration Function Signature - TypeScript\nDESCRIPTION: Function signature for addProjectConfiguration that adds project configuration to an Nx workspace. Takes a file system tree, project name, configuration object, and optional standalone flag as parameters.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/addProjectConfiguration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\naddProjectConfiguration(tree: Tree, projectName: string, projectConfiguration: ProjectConfiguration, standalone: boolean = true): void\n```\n\n----------------------------------------\n\nTITLE: Increasing Node.js Memory Allocation for Nx Documentation Site\nDESCRIPTION: Command to increase the maximum old memory size for Node.js to resolve 'JavaScript heap out of memory' errors when running the Nx documentation site.\nSOURCE: https://github.com/nrwl/nx/blob/master/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nexport NODE_OPTIONS=\"--max-old-space-size=4096\"\n```\n\n----------------------------------------\n\nTITLE: Running Prebuild Command\nDESCRIPTION: Shell command to execute the prebuild target for a mobile project using Nx\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/prebuild-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx run mobile:prebuild\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests Locally in Nx\nDESCRIPTION: This command runs the e2e tests for a specific project locally. It's more efficient for single-machine development.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/features/split-e2e-tasks.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx e2e my-project-e2e\n```\n\n----------------------------------------\n\nTITLE: Command Type Definition - TypeScript\nDESCRIPTION: TypeScript type definition for command configuration in tutorial metadata.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstring | [command: string, title: string] | { command: string, title: string }\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultTasksRunnerOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the DefaultTasksRunnerOptions interface with various optional and required properties for configuring Nx task runners. It includes options for caching, parallelization, and remote execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/DefaultTasksRunnerOptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DefaultTasksRunnerOptions {\n  batch?: boolean;\n  cacheDirectory?: string;\n  cacheableOperations?: string[];\n  cacheableTargets?: string[];\n  captureStderr?: boolean;\n  lifeCycle: LifeCycle;\n  parallel?: number;\n  remoteCache?: RemoteCache;\n  runtimeCacheInputs?: string[];\n  skipNxCache?: boolean;\n  skipRemoteCache?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS for HTTP Requests\nDESCRIPTION: This XML snippet modifies the Info.plist file to allow HTTP requests for specific domains in iOS.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSAppTransportSecurity</key>\n <dict>\n  <key>NSExceptionDomains</key>\n  <dict>\n   <key>localhost</key>\n   <dict>\n    <key>NSExceptionAllowsInsecureHTTPLoads</key>\n    <true/>\n   </dict>\n   <key>ghibliapi.herokuapp.com</key>\n   <dict>\n    <key>NSExceptionAllowsInsecureHTTPLoads</key>\n    <true/>\n   </dict>\n  </dict>\n </dict>\n```\n\n----------------------------------------\n\nTITLE: Example React Native Story File Structure\nDESCRIPTION: A sample TypeScript story file that defines a story for a React Native component called 'Loading'. It uses the storiesOf API from @storybook/react-native.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-25-use-storybook-with-nx-react-native.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { storiesOf } from '@storybook/react-native';\nimport React from 'react';\n\nimport { Loading } from './loading';\n\nconst props = {};\n\nstoriesOf('Loading', module).add('Primary', () => <Loading {...props} />);\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json Updates in migrations.json\nDESCRIPTION: Configuration to update dependency versions without creating a full generator, specifying which packages should be updated and to which versions when upgrading to version 12.10.0-beta.2.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/migration-generators.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageJsonUpdates\": {\n    // this can be any name\n    \"12.10.0\": {\n      // this is version at which the change will be applied\n      \"version\": \"12.10.0-beta.2\",\n      \"packages\": {\n        // the name of the dependency to update\n        \"@testing-library/react\": {\n          // the version to set the dependency to\n          \"version\": \"11.2.6\",\n          // When true, the dependency will be added if it isn't there.  When false, the dependency is skipped if it isn't already present.\n          \"alwaysAddToPackageJson\": false\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling interactive mode for build-list\nDESCRIPTION: This configuration enables interactive mode for the `build-list` executor using the `interactive` option. When set to `true`, the executor will prompt the user for input to guide the build status retrieval process.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/build-list-examples.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"build-list\": {\n      \"executor\": \"@nx/expo:build-list\",\n      \"options\": {\n        \"interactive\": true\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Nx Report Command for Debugging Installation Issues\nDESCRIPTION: The nx report command provides essential diagnostic information about your system configuration that's helpful for troubleshooting Nx installation issues. It shows details about your OS, architecture, and other environment information needed to diagnose installation problems.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/installation/troubleshoot-installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx report\n```\n\n----------------------------------------\n\nTITLE: Building Production Bundle for React Store\nDESCRIPTION: This command creates a production bundle for the 'react-store' project in the Nx workspace.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/templates/react-monorepo/lesson-2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx build react-store\n```\n\n----------------------------------------\n\nTITLE: Updated Nx Release Version Configuration (After)\nDESCRIPTION: Shows the updated Nx release version configuration structure after v21.  It replaces `generatorOptions` with top-level options and `versionActionsOptions`. `packageRoot` is replaced by `manifestRootsToUpdate`, and ecosystem-specific options like `skipLockFileUpdate` are moved to `versionActionsOptions`.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/src/migrations/update-21-0-0/release-version-config-changes.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"release\": {\n    \"version\": {\n      \"manifestRootsToUpdate\": [\"build/packages/{projectName}\"],\n      \"currentVersionResolver\": \"registry\",\n      \"versionActionsOptions\": {\n        \"skipLockFileUpdate\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Aliases for Svelte Library\nDESCRIPTION: Vite configuration to set up aliases for importing Svelte components from the library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-svelte.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  //... other config\n  resolve: {\n    alias: {\n      '@acme/counter': fileURLToPath(\n        new URL('/libs/counter/src/index.ts', import.meta.url)\n      ),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Example Nx Project Graph JSON Output\nDESCRIPTION: This snippet shows an example JSON output generated by the `nxProjectGraph` task. It includes `nodes`, `dependencies`, and `externalNodes` sections. This JSON represents the project graph structure that Nx consumes.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/gradle/project-graph/README.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"nodes\": {\n    \"app\": {\n      \"targets\": {}\n    }\n  },\n  \"dependencies\": [],\n  \"externalNodes\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating JavaScript Library in Nx Workspace\nDESCRIPTION: This command generates a new JavaScript library project within the Nx workspace. It creates a models-graphql library in the libs directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx g @nx/js:library --directory=libs/models-graphql models-graphql\n```\n\n----------------------------------------\n\nTITLE: Implementing PoemOfTheDay Component\nDESCRIPTION: TypeScript code for the PoemOfTheDay component using React Native Paper to display a static poem.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-03-23-introducing-expo-support-for-nx.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { Card, Title, Paragraph, Subheading } from 'react-native-paper';\n\n/* eslint-disable-next-line */\nexport interface PoemOfTheDayProps {}\n\nexport function PoemOfTheDay(props: PoemOfTheDayProps) {\n  return (\n    <Card>\n      <Card.Cover source={{ uri: `https://picsum.photos/300/200` }} />\n      <Card.Content>\n        <Title>Ozymandias</Title>\n        <Subheading>Percy Bysshe Shelley</Subheading>\n        <Paragraph>\n          I met a traveller from an antique land {'\\n'}\n          Who said: Two vast and trunkless legs of stone {'\\n'}\n          Stand in the desert...Near them, on the sand, {'\\n'}\n          Half sunk, a shattered visage lies, whose frown,{'\\n'}\n          And wrinkled lip, and sneer of cold command, {'\\n'}\n          Tell that its sculptor well those passions read {'\\n'}\n          Which yet survive, stamped on these lifeless things, {'\\n'}\n          The hand that mocked them, and the heart that fed: {'\\n'}\n          And on the pedestal these words appear: {'\\n'}\n          'My name is Ozymandias, king of kings: {'\\n'}\n          Look on my works, ye Mighty, and despair!' {'\\n'}\n          Nothing beside remains. Round the decay{'\\n'}\n          Of that colossal wreck, boundless and bare{'\\n'}\n          The lone and level sands stretch far away.\n        </Paragraph>\n      </Card.Content>\n    </Card>\n  );\n}\n\nexport default PoemOfTheDay;\n```\n\n----------------------------------------\n\nTITLE: Example React Button Component\nDESCRIPTION: Sample React component code for a button with text, padding, and disabled props that would be used in a Storybook story.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/plugin-react.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MyButtonProps {\n  text: string;\n  padding: number;\n  disabled: boolean;\n}\n\nexport function MyButton(props: MyButtonProps) {\n  return (\n    <button disabled={props.disabled} style={{ padding: props.padding }}>\n      {props.text}\n    </button>\n  );\n}\n\nexport default MyButton;\n```\n\n----------------------------------------\n\nTITLE: Viewing Project Configuration with Nx CLI\nDESCRIPTION: Command to view the combined project configuration using the Nx CLI, displaying all settings from inferred tasks, target defaults, and project-level configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx show project myproject --web\n```\n\n----------------------------------------\n\nTITLE: Creating a New Angular Monorepo with Nx\nDESCRIPTION: Command to create a new Angular monorepo workspace using Nx. This creates an initial Angular application called 'angular-store' with ESBuild as the bundler, CSS for styling, and Cypress for E2E testing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest angular-monorepo --preset=angular-monorepo\n```\n\n----------------------------------------\n\nTITLE: Importing createServer from @nx/angular-rspack/ssr\nDESCRIPTION: Shows how to import the createServer function from the @nx/angular-rspack/ssr package.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/angular-rspack/api/nx-angular-rspack/create-server.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimport { createServer } from '@nx/angular-rspack/ssr';\n```\n\n----------------------------------------\n\nTITLE: Implementing File System Operations in NxScopedHost\nDESCRIPTION: This snippet shows the implementation of file system operations like exists, isFile, read, and write in the NxScopedHost class. These methods override the base class methods to provide custom functionality.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ngcli_adapter/NxScopedHost.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexists(path: Path): Observable<boolean> {\n  // Implementation\n}\n\nisFile(path: Path): Observable<boolean> {\n  // Implementation\n}\n\nread(path: Path): Observable<ArrayBuffer> {\n  // Implementation\n}\n\nwrite(path: Path, content: ArrayBuffer): Observable<void> {\n  // Implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Aztro API Response Interface\nDESCRIPTION: Defines the interface for the Aztro API response and includes a transform function to convert API data to the application's domain model.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AdhHoroscope, AdhZodiacSign } from '@aztro-daily-horoscope/models';\n\nexport interface AztroHoroscpeResponse {\n  date_range: string;\n  current_date: string;\n  description: string;\n  compatibility: string;\n  mood: string;\n  color: string;\n  lucky_number: string;\n  lucky_time: string;\n}\n\nexport function transfromAztroHoroscpeResponseToAdhHoroscope(\n  responose: AztroHoroscpeResponse\n): AdhHoroscope {\n  return {\n    currentDate: new Date(responose.current_date),\n    description: responose.description,\n    compatibility: responose.compatibility as AdhZodiacSign,\n    mood: responose.mood,\n    color: responose.color,\n    luckyNumber: parseInt(responose.lucky_number),\n    luckyTime: responose.lucky_time,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Nx UI Library\nDESCRIPTION: Executes the unit tests for the UI library using the Nx CLI command. This command is used to ensure the library's components and functionality are working as expected.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/3-angular-monorepo/2a-smart-monorepo/6-create-local-library/_solution/libs/shared/ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx test ui\n```\n\n----------------------------------------\n\nTITLE: Installing @nx/web Plugin in Nx 18+\nDESCRIPTION: Command to install the correct version of @nx/web plugin in Nx workspaces version 18 and above.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/web/documents/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx add @nx/web\n```\n\n----------------------------------------\n\nTITLE: GCS CI Mode Configuration\nDESCRIPTION: Configuration for CI-specific cache mode settings in nx.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/gcs-cache/gcs-cache-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gcs\": {\n    \"ciMode\": \"read-only\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining static options in schema.json for Nx generator\nDESCRIPTION: This JSON schema defines two static options for an Nx generator: `name` (required string) and `type` (optional string). The `name` property uses `$default` to populate a default value from command line arguments.  This file outlines the structure and constraints for user inputs to the generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://json-schema.org/schema\",\n  \"id\": \"my-generator\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"description\": \"Library name\",\n      \"$default\": {\n        \"$source\": \"argv\",\n        \"index\": 0\n      }\n    },\n    \"type\": {\n      \"type\": \"string\",\n      \"description\": \"Provide the library type, such as 'data-access' or 'state'\"\n    }\n  },\n  \"required\": [\"name\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rspack for Angular Application\nDESCRIPTION: TypeScript configuration file that sets up Rspack bundler for an Angular application using the createConfig function from @nx/angular-rspack. Includes settings for output paths, entry points, assets, styles and multiple build configurations.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-19-using-angular-with-rspack.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@nx/angular-rspack';\nexport default createConfig(\n  {\n    options: {\n      root: __dirname,\n      outputPath: {\n        base: '../../dist/apps/app',\n      },\n      index: './src/index.html',\n      browser: './src/main.ts',\n      polyfills: ['zone.js'],\n      tsConfig: './tsconfig.app.json',\n      assets: [\n        './src/favicon.ico',\n        './src/assets',\n        {\n          input: './public',\n          glob: '**/*',\n        },\n      ],\n      styles: ['./src/styles.scss'],\n      scripts: [],\n    },\n  },\n  {\n    production: {\n      options: {\n        outputPath: {\n          base: '../../dist/apps/app-prod',\n        },\n        index: './src/index.prod.html',\n        browser: './src/main.prod.ts',\n        tsConfig: './tsconfig.prod.json',\n      },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Generating a Node Library with Nx\nDESCRIPTION: Demonstrates how to create a new Node.js library using the Nx generate command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/cli/generate.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/node:library libs/mylibrary\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with Pnpm\nDESCRIPTION: Demonstrates how to create an Nx workspace using Pnpm as the package manager.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-06-nx-update-20-3.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpx create-nx-workspace@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest --pm=pnpm\n```\n\n----------------------------------------\n\nTITLE: Prebuild for Specific Platform\nDESCRIPTION: Configuration to generate native code specifically for Android platform using the platform option\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/expo/docs/prebuild-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"prebuild\": {\n  \"executor\": \"@nx/expo:prebuild\",\n  \"options\": {\n    \"platform\": \"android\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Jest Task Group Names\nDESCRIPTION: Example showing how to customize the atomized tasks group name for Jest tests in Nx Cloud UI.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/jest/jest-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"plugin\": \"@nx/jest/plugin\",\n      \"include\": [\"e2e/**/*\"],\n      \"options\": {\n        \"targetName\": \"e2e-local\",\n        \"ciTargetName\": \"e2e-ci\",\n        \"ciGroupname\": \"My E2E tests (CI)\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating React Class Component\nDESCRIPTION: Generates a class-based React component instead of a functional component using the --classComponent flag.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react/docs/component-examples.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnx g @nx/react:component libs/ui/src/my-component --classComponent\n```\n\n----------------------------------------\n\nTITLE: Creating Teal Theme CSS File\nDESCRIPTION: Defines a teal theme CSS file with Tailwind layers and custom CSS variables for colors and spacing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_48\n\nLANGUAGE: css\nCODE:\n```\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Colors */\n  --primary-light: #5eead4;\n  --primary: #14b8a6;\n  --primary-dark: #0f766e;\n  --secondary-light: #bae6fd;\n  --secondary: #0ea5e9;\n  --secondary-dark: #0369a1;\n  --white: #ffffff;\n  --black: #000000;\n\n  /* Spacing */\n  --spacing-sm: 0.5rem;\n  --spacing-md: 1rem;\n  --spacing-lg: 1.5rem;\n  --spacing-xl: 2rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Nx Format Check Command with Nx Cloud in Bash\nDESCRIPTION: Shows how to record the output of an Nx format check command using Nx Cloud. This allows for easy viewing and sharing of formatting check results within the Nx Cloud interface.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/set-up/record-commands.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx-cloud record -- nx format:check\n```\n\n----------------------------------------\n\nTITLE: Commit Changes to Main Branch (Git)\nDESCRIPTION: This command commits all outstanding changes to the `main` branch locally. This ensures that Nx can accurately determine the affected projects based on the changes made.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -am \"changes\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Nx Logo with Dark/Light Mode Support\nDESCRIPTION: HTML code for displaying the Nx logo with support for dark/light mode using picture and source elements. The code uses media queries to switch between dark and light theme versions of the logo.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/node/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"text-align: center;\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Using Task Configurations in JSON - JSON\nDESCRIPTION: This snippet illustrates how to define task configurations for a build target in project.json, specifying options and configurations for different environments.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/concepts/executors-and-configurations.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"executor\": \"@nx/js:tsc\",\n    \"outputs\": [\"{workspaceRoot}/dist/libs/mylib\"],\n    \"dependsOn\": [\"^build\"],\n    \"options\": {\n      \"tsConfig\": \"libs/mylib/tsconfig.lib.json\",\n      \"main\": \"libs/mylib/src/main.ts\"\n    },\n    \"configurations\": {\n      \"production\": {\n        \"tsConfig\": \"libs/mylib/tsconfig-prod.lib.json\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Lit Component to Use Library Function\nDESCRIPTION: Modified TypeScript code for the Lit component, now importing and using a function from the created library.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/add-stack/add-lit.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { someFunction } from '@my-org/my-lib';\n\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  @property()\n  version = 'STARTING';\n\n  render() {\n    return html`\n      <p>Welcome to the Lit tutorial!</p>\n      <p>This is the ${this.version} code.</p>\n      <p>Imported from a library: ${someFunction()}.</p>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Package Manager Type Alias in TypeScript\nDESCRIPTION: Defines a TypeScript type alias called 'PackageManager' that restricts values to four specific package manager strings: 'yarn', 'pnpm', 'npm', or 'bun'.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/PackageManager.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nƬ **PackageManager**: `\"yarn\"` \\| `\"pnpm\"` \\| `\"npm\"` \\| `\"bun\"`\n```\n\n----------------------------------------\n\nTITLE: Updating Project ESLintRC to Ignore Vite/Vitest Timestamp Files\nDESCRIPTION: Shows how to update a project's .eslintrc.json file to ignore Vite and Vitest timestamp configuration files using the traditional eslintrc format.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vite/src/migrations/update-20-5-0/eslint-ignore-vite-temp-files.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ignorePatterns\": [\n    \"!**/*\",\n    \"vite.config.*.timestamp*\",\n    \"vitest.config.*.timestamp*\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Todo Interface for a Qwik Application\nDESCRIPTION: TypeScript interface definition for a Todo item, establishing the data structure used in the application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-08-15-qwikify-your-dev.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Todo {\n  id: number;\n  message: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Paths during Story Generation\nDESCRIPTION: This command generates stories for components within the 'ui' project, while ignoring components located in the 'libs/ui/src/not-stories' directory and files matching the pattern `*.other.*`.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/vue/docs/stories-examples.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/vue:stories --name=ui --ignorePaths=libs/ui/src/not-stories/**,**/**/src/**/*.other.*\n```\n\n----------------------------------------\n\nTITLE: Multi-format Rollup Configuration\nDESCRIPTION: Enhanced Rollup configuration that enables compilation to multiple formats (ESM and CommonJS) with additional entry points.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/compile-multiple-formats.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"my-awesome-lib\",\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/rollup:rollup\",\n      \"options\": {\n        \"main\": \"packages/my-awesome-lib/src/index.ts\",\n        \"format\": [\"esm\", \"cjs\"],\n        \"additionalEntryPoints\": [\"packages/my-awesome-lib/src/foo.ts\"],\n        \"generateExportsField\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Target Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface definition specifying the structure of a Target object used in Nx. Contains optional configuration string and required project and target string properties.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/Target.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Target {\n  configuration?: string;\n  project: string;\n  target: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nx Analytics Unit Tests with Jest\nDESCRIPTION: Command to execute unit tests for the nx-dev-feature-analytics library using the Jest testing framework\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/feature-analytics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx test nx-dev-feature-analytics\n```\n\n----------------------------------------\n\nTITLE: Defining the Schema for a Sync Generator\nDESCRIPTION: This JSON schema defines the input options for the 'my-sync-generator'. It specifies that the generator doesn't require any input properties, making it suitable for global sync operations that don't depend on specific parameters.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/create-sync-generator.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"$schema\": \"https://json-schema.org/schema\",\n  \"$id\": \"MySyncGenerator\",\n  \"title\": \"\",\n  \"type\": \"object\",\n  \"properties\": {},\n  \"required\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Card Layout in Markdown\nDESCRIPTION: This snippet shows how to create a card layout using custom markdown syntax. It defines the column structure for different screen sizes and includes a single card with a title, type, and URL.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/15_4_0.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% cards cols=\"2\" smCol=\"2\" mdCol=\"2\" lgCol=\"2\" %}\n{% card title=\"One Command to Run Multiple Tasks in Parallel\"  type=\"video\" url=\"https://youtu.be/ROTO89i5m_4\" /%}\n{% /cards %}\n```\n\n----------------------------------------\n\nTITLE: Performing Tree-Aware Glob Search in TypeScript\nDESCRIPTION: This function performs a tree-aware glob search on files in a workspace. It can find newly created files and hide deleted files before updates are committed to disk. The function takes a Tree object and an array of glob patterns as parameters, and returns an array of normalized paths that match the patterns.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/glob.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nglob(tree: Tree, patterns: string[]): string[]\n```\n\n----------------------------------------\n\nTITLE: Defining TaskResult Interface Properties in TypeScript\nDESCRIPTION: Interface definition specifying the structure of a task execution result. Contains properties for execution code, status, task reference, and optional terminal output.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/TaskResult.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TaskResult {\n  code: number;\n  status: TaskStatus;\n  task: Task;\n  terminalOutput?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Git Commit Command\nDESCRIPTION: Simple git commit command for saving changes before testing affected projects.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -a -m \"some commit message\"\n```\n\n----------------------------------------\n\nTITLE: Adding Packages to Nx Workspace\nDESCRIPTION: Command to add a package to an Nx workspace. This installs the package and runs any initialization generators if available.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/nx-and-angular.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnx add [package]\n```\n\n----------------------------------------\n\nTITLE: Using CustomResourceHandler for JCEF in IntelliJ Plugin (Kotlin)\nDESCRIPTION: This code snippet references a Kotlin implementation for a CustomResourceHandler that enables JCEF to load files from the /resources folder bundled in the plugin JAR. It's based on a solution described in an article by Rafal Mucha but reimplemented in Kotlin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-03-02-expanding-nx-console-to-jetbrains-ides.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// Referenced but not included in the text: https://github.com/nrwl/nx-console/blob/master/apps/intellij/src/main/kotlin/dev/nx/console/generate_ui/CustomResourceHandler.kt\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Vue Plugin (Legacy)\nDESCRIPTION: Command to install the @nx/vue plugin using npm for Nx versions below 18. This adds the plugin as a dev dependency.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/vue/vue-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/vue\n```\n\n----------------------------------------\n\nTITLE: Global Setup with SWC and Dynamic Imports\nDESCRIPTION: This snippet demonstrates a global setup file for Jest when using `@swc/jest`. It uses dynamic imports to load Nx project aliases within the setup function, ensuring that the `registerTsProject` function is called before any other imports. This resolves issues related to SWC hoisting imports.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/jest/documents/overview.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerTsProject } from '@nx/js/src/internal';\nconst cleanupRegisteredPaths = registerTsProject('./tsconfig.base.json');\n\nexport default async function () {\n  // swc will hoist all imports, and we need to make sure the register happens first\n  // so we import all nx project alias within the setup function first.\n  const { yourFancyFunction } = await import('@some-org/my-util-library');\n\n  yourFancyFunction();\n\n  // make sure to run the clean up!\n  cleanupRegisteredPaths();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Dependency in Nx\nDESCRIPTION: Example of creating a static dependency associated with a specific source file, allowing Nx to track changes efficiently.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/plugins/project-graph-plugins.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  source: 'existing-project',\n  target: 'new-project',\n  sourceFile: 'libs/existing-project/src/index.ts',\n  dependencyType: DependencyType.static,\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-waiting Example in Playwright\nDESCRIPTION: Simple example demonstrating Playwright's auto-waiting functionality when interacting with page elements.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-09-18-introducing-playwright-support-for-nx.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.getByTestId('submit-button').click();\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition - MigrationsJson\nDESCRIPTION: Defines the MigrationsJson interface used for configuring migrations in Nx. Contains optional properties for collection name, generators map, package updates, schematics map, and version information.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/MigrationsJson.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MigrationsJson {\n  collection?: string;\n  generators?: { [name: string]: MigrationsJsonEntry };\n  name?: string;\n  packageJsonUpdates?: PackageJsonUpdates;\n  schematics?: { [name: string]: MigrationsJsonEntry };\n  version?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Component Encapsulation\nDESCRIPTION: Updates the button component to use ViewEncapsulation.None for easier style overriding by consumers.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-01-28-set-up-tailwind-css-with-angular-in-an-nx-workspace.md#2025-04-22_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  ...\n  encapsulation: ViewEncapsulation.None,\n})\nexport class ButtonComponent {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Executor Type Alias in TypeScript\nDESCRIPTION: Type definition for an Executor which can be either a PromiseExecutor or an AsyncIteratorExecutor. This type is used to implement targets in Nx projects and allows for flexible return types.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/Executor.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nƬ **Executor**\\<`T`\\>: [`PromiseExecutor`](../../devkit/documents/PromiseExecutor)\\<`T`\\> \\| [`AsyncIteratorExecutor`](../../devkit/documents/AsyncIteratorExecutor)\\<`T`\\>\n```\n\n----------------------------------------\n\nTITLE: Yarn Berry Registry Configuration\nDESCRIPTION: YAML configuration for .yarnrc.yml to set up connection to local registry for testing published packages.\nSOURCE: https://github.com/nrwl/nx/blob/master/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: yml\nCODE:\n```\nnodeLinker: node-modules\nnpmRegistryServer: 'http://localhost:4873'\nunsafeHttpWhitelist:\n  - localhost\n```\n\n----------------------------------------\n\nTITLE: Advanced Webpack configuration with inline plugin definition\nDESCRIPTION: Example of a Webpack configuration with an inline plugin definition that can access compiler options, useful when you need to apply configuration changes after NxAppWebpackPlugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/troubleshoot-convert-to-inferred.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async () => ({\n  devServer: devServerOptions,\n  plugins: [\n    new NxAppWebpackPlugin(pluginOptions),\n    {\n      apply(compiler) {\n        const babelLoader = compiler.options.module.rules.find(\n          (rule) =>\n            rule &&\n            typeof rule !== 'string' &&\n            rule.loader?.toString().includes('babel-loader')\n        );\n\n        // do something with `babelLoader...\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation - Nx Glossary Structure\nDESCRIPTION: Structured markdown document that defines and explains key Nx terminology and concepts. Includes detailed sections on applications, build systems, caching mechanisms, CI/CD features, and workspace organization.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/glossary.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Nx Glossary\ndescription: A comprehensive reference of Nx-specific terminology to help you understand the concepts and features of the Nx ecosystem.\n---\n\n# Glossary\n\nThis is a short list of Nx-specific terms that will help you understand the rest of the documentation.\n```\n\n----------------------------------------\n\nTITLE: Defining CustomHasher Type Alias in TypeScript\nDESCRIPTION: Defines a type alias CustomHasher as a function that takes task and context parameters and returns a Promise of Hash. It uses TypeScript's type system to specify the structure and return type of the function.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/CustomHasher.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **CustomHasher**: (`task`: [`Task`](../../devkit/documents/Task), `context`: [`HasherContext`](../../devkit/documents/HasherContext)) => `Promise`<[`Hash`](../../devkit/documents/Hash)>\n```\n\n----------------------------------------\n\nTITLE: Installing applesimutils for iOS Testing\nDESCRIPTION: Commands to install applesimutils via Homebrew for Apple simulator utils on Mac systems\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/detox/detox-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew tap wix/brew\nbrew install applesimutils\n```\n\n----------------------------------------\n\nTITLE: Configuring Owners in nx.json\nDESCRIPTION: JSON configuration in nx.json to define project owners using tags and file patterns.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-09-25-introducing-nx-powerpack.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"owners\": {\n        \"format\": \"github\",\n        \"patterns\": [\n            {\n                \"description\": \"CI configuration\",\n                \"owners\": [\"@devops\"],\n                \"files\": [\".github/workflows/**\"]\n            },\n            {\n                \"description\": \"Order team\",\n                \"owners\": [\"@team-orders\"],\n                \"projects\": [\"tag:scope:orders\"]\n            },\n            {\n                \"description\": \"Product team\",\n                \"owners\": [\"@team-products\"],\n                \"projects\": [\"tag:scope:products\"]\n            },\n            {\n                \"description\": \"Design team\",\n                \"owners\": [\"@team-design\"],\n                \"projects\": [\"tag:scope:design-system\"]\n            }\n        ]\n    },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Advent of Code Solutions for Changes\nDESCRIPTION: Command to run solutions in watch mode, automatically re-running when file system changes are detected. This uses nx watch behind the scenes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-11-30-advent-of-code-crystal.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> nx watch-1\n```\n\n----------------------------------------\n\nTITLE: Executing Nx Build Command\nDESCRIPTION: Demonstrates how to run the build target for a frontend project using the nx run command.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/docs/run-script-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx run frontend:build\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Cache Outputs in Nx\nDESCRIPTION: Shows how to customize cached output directories for a build target by specifying the outputs array with custom paths.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/docs/run-script-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"targets\": {\n    \"build\": {\n        \"executor\": \"nx:run-script\",\n        \"outputs\": [\"{projectRoot}/dist\", \"{projectRoot}/docs\"],\n        \"options\": {\n            \"script\": \"build-my-project\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json Scripts\nDESCRIPTION: Example package.json script configuration for Nx test suite execution.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-06-20-introducing-nx-ecosystem-ci.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"build\": \"nx build\",\n    \"test\": \"nx test\",\n    \"e2e\": \"nx e2e\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with npm init\nDESCRIPTION: This command uses npm init to create a new Nx workspace. It's an alternative method for npm users to set up an Nx project.\nSOURCE: https://github.com/nrwl/nx/blob/master/scripts/readme-fragments/content.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init nx-workspace\n```\n\n----------------------------------------\n\nTITLE: Generating Storybook Configuration with Nx\nDESCRIPTION: This command generates a Storybook configuration for an Nx project using the @nx/storybook:configuration generator.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/configuration-generator-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx g @nx/storybook:configuration\n```\n\n----------------------------------------\n\nTITLE: Project Details JSON Configuration\nDESCRIPTION: Complete JSON configuration showing the detected tasks for the angular-store-e2e project, including target configurations, dependencies, inputs, outputs, and metadata about where each configuration was inferred from.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/angular-monorepo.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"project\": {\n    \"name\": \"angular-store-e2e\",\n    \"type\": \"e2e\",\n    \"data\": {\n      \"metadata\": {\n        \"targetGroups\": {\n          \"E2E (CI)\": [\"e2e-ci--src/e2e/app.cy.ts\", \"e2e-ci\"]\n        }\n      },\n      \"name\": \"angular-store-e2e\",\n      \"root\": \"apps/angular-store-e2e\",\n      \"sourceRoot\": \"apps/angular-store-e2e/src\",\n      \"projectType\": \"application\",\n      \"tags\": [],\n      \"implicitDependencies\": [\"angular-store\"],\n      \"targets\": {\n        \"e2e\": {\n          \"options\": {\n            \"cwd\": \"apps/angular-store-e2e\",\n            \"command\": \"cypress run\"\n          },\n          \"cache\": true,\n          \"inputs\": [\n            \"default\",\n            \"^production\",\n            {\n              \"externalDependencies\": [\"cypress\"]\n            }\n          ],\n          \"outputs\": [\n            \"{workspaceRoot}/dist/cypress/apps/angular-store-e2e/videos\",\n            \"{workspaceRoot}/dist/cypress/apps/angular-store-e2e/screenshots\"\n          ],\n          \"configurations\": {\n            \"production\": {\n              \"command\": \"cypress run --env webServerCommand=\\\"nx run angular-store:serve:production\\\"\"\n            }\n          },\n          \"executor\": \"nx:run-commands\",\n          \"metadata\": {\n            \"technologies\": [\"cypress\"]\n          }\n        },\n        \"e2e-ci--src/e2e/app.cy.ts\": {\n          \"outputs\": [\n            \"{workspaceRoot}/dist/cypress/apps/angular-store-e2e/videos\",\n            \"{workspaceRoot}/dist/cypress/apps/angular-store-e2e/screenshots\"\n          ],\n          \"inputs\": [\n            \"default\",\n            \"^production\",\n            {\n              \"externalDependencies\": [\"cypress\"]\n            }\n          ],\n          \"cache\": true,\n          \"options\": {\n            \"cwd\": \"apps/angular-store-e2e\",\n            \"command\": \"cypress run --env webServerCommand=\\\"nx run angular-store:serve-static\\\" --spec src/e2e/app.cy.ts\"\n          },\n          \"executor\": \"nx:run-commands\",\n          \"configurations\": {},\n          \"metadata\": {\n            \"technologies\": [\"cypress\"]\n          }\n        },\n        \"e2e-ci\": {\n          \"executor\": \"nx:noop\",\n          \"cache\": true,\n          \"inputs\": [\n            \"default\",\n            \"^production\",\n            {\n              \"externalDependencies\": [\"cypress\"]\n            }\n          ],\n          \"outputs\": [\n            \"{workspaceRoot}/dist/cypress/apps/angular-store-e2e/videos\",\n            \"{workspaceRoot}/dist/cypress/apps/angular-store-e2e/screenshots\"\n          ],\n          \"dependsOn\": [\n            {\n              \"target\": \"e2e-ci--src/e2e/app.cy.ts\",\n              \"projects\": \"self\",\n              \"params\": \"forward\"\n            }\n          ],\n          \"options\": {},\n          \"configurations\": {},\n          \"metadata\": {\n            \"technologies\": [\"cypress\"]\n          }\n        },\n        \"lint\": {\n          \"cache\": true,\n          \"options\": {\n            \"cwd\": \"apps/angular-store-e2e\",\n            \"command\": \"eslint .\"\n          },\n          \"inputs\": [\n            \"default\",\n            \"{workspaceRoot}/.eslintrc.json\",\n            \"{workspaceRoot}/apps/angular-store-e2e/.eslintrc.json\",\n            \"{workspaceRoot}/tools/eslint-rules/**/*\",\n            {\n              \"externalDependencies\": [\"eslint\"]\n            }\n          ],\n          \"executor\": \"nx:run-commands\",\n          \"configurations\": {},\n          \"metadata\": {\n            \"technologies\": [\"eslint\"]\n          }\n        }\n      }\n    }\n  },\n  \"sourceMap\": {\n    \"targets\": [\"apps/angular-store-e2e/project.json\", \"nx/core/project-json\"],\n    \"targets.e2e\": [\n      \"apps/angular-store-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e.cache\": [\n      \"apps/angular-store-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e.inputs\": [\n      \"apps/angular-store-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e.outputs\": [\n      \"apps/angular-store-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e.options\": [\n      \"apps/angular-store-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e.configurations\": [\n      \"apps/angular-store-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/app.cy.ts\": [\n      \"apps/angular-store-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/app.cy.ts.cache\": [\n      \"apps/angular-store-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/app.cy.ts.inputs\": [\n      \"apps/angular-store-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/app.cy.ts.outputs\": [\n      \"apps/angular-store-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci--src/e2e/app.cy.ts.options\": [\n      \"apps/angular-store-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci\": [\n      \"apps/angular-store-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci.cache\": [\n      \"apps/angular-store-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci.dependsOn\": [\n      \"apps/angular-store-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci.inputs\": [\n      \"apps/angular-store-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci.outputs\": [\n      \"apps/angular-store-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.e2e-ci.executor\": [\n      \"apps/angular-store-e2e/cypress.config.ts\",\n      \"@nx/cypress/plugin\"\n    ],\n    \"targets.lint\": [\n      \"apps/angular-store-e2e/project.json\",\n      \"@nx/eslint/plugin\"\n    ],\n    \"targets.lint.cache\": [\n      \"apps/angular-store-e2e/project.json\",\n      \"@nx/eslint/plugin\"\n    ],\n    \"targets.lint.inputs\": [\n      \"apps/angular-store-e2e/project.json\",\n      \"@nx/eslint/plugin\"\n    ],\n    \"targets.lint.options\": [\n      \"apps/angular-store-e2e/project.json\",\n      \"@nx/eslint/plugin\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Component Tests\nDESCRIPTION: Command to execute component tests for a specified project\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnx g component-test my-cool-next-project\n```\n\n----------------------------------------\n\nTITLE: Installing Nx Rspack Plugin (Legacy)\nDESCRIPTION: Command to install the @nx/rspack package for Nx versions below 18.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/rspack/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm add -D @nx/rspack\n```\n\n----------------------------------------\n\nTITLE: Defining Horoscope Interface\nDESCRIPTION: Defines the application's domain model interface for horoscope data transformed from API responses.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AdhZodiacSign } from './zodiac-sign.enum';\n\nexport interface AdhHoroscope {\n  currentDate: Date;\n  description: string;\n  compatibility: AdhZodiacSign;\n  mood: string;\n  color: string;\n  luckyNumber: number;\n  luckyTime: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Callouts in Nx Documentation\nDESCRIPTION: Callouts are used to highlight specific types of information to readers. This custom markdown syntax supports caution, check, note, and warning types.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% callout type=\"caution|check|note|warning\" title=\"string\" %}\nYour content goes here.\n{% /callout %}\n```\n\n----------------------------------------\n\nTITLE: Importing from Workspace Project in TypeScript\nDESCRIPTION: Demonstrates how to import from another project within an Nx workspace using TypeScript path aliases.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-06-nx-update-20-3.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { foo } from '@my-workspace/my-project;\n```\n\n----------------------------------------\n\nTITLE: Installing Jest Globally\nDESCRIPTION: Command to install Jest test runner globally via npm\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/detox/detox-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g jest\n```\n\n----------------------------------------\n\nTITLE: Defining DependencyType Enum in TypeScript\nDESCRIPTION: Enumeration defining three types of project dependencies: dynamic (loaded at runtime), implicit (inferred), and static (loaded with module).\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/DependencyType.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum DependencyType {\n  dynamic = \"dynamic\",   // Dynamic dependencies are brought in by the module at run time\n  implicit = \"implicit\", // Implicit dependencies are inferred\n  static = \"static\"     // Static dependencies are tied to the loading of the module\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExpandedPluginConfiguration Generic Type in TypeScript\nDESCRIPTION: A TypeScript type alias that defines a plugin configuration structure for the Nx framework. It includes a required plugin identifier string, optional arrays of include and exclude patterns, and configurable options of generic type T.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ExpandedPluginConfiguration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nƬ **ExpandedPluginConfiguration**\\<`T`\\>: `Object`\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for SVGR\nDESCRIPTION: Vite configuration snippet for enabling SVG import as React components using the `vite-plugin-svgr` plugin. It requires setting up various options such as `exportType` and `titleProp` for compatibility.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/adding-assets.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/// <reference types='vitest' />\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';\nimport svgr from 'vite-plugin-svgr';\n\nexport default defineConfig({\n  // ...\n  plugins: [\n    svgr({\n      svgrOptions: {\n        exportType: 'named',\n        ref: true,\n        svgo: false,\n        titleProp: true,\n      },\n      include: '**/*.svg',\n    }),\n    react(),\n    nxViteTsPaths(),\n    // ...\n  ],\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Hasher Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias named Hasher. It is set to be equivalent to the TaskHasher type, which is imported from a relative path '../../devkit/documents/TaskHasher'. This allows for a more concise or context-specific naming of the TaskHasher type within the current module.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/Hasher.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **Hasher**: [`TaskHasher`](../../devkit/documents/TaskHasher)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Operations Definition\nDESCRIPTION: GraphQL queries and mutations for the frontend\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nmutation addSet($name: String!, $year: String!, $numParts: Int!) {\n  addSet(name: $name, year: $year, numParts: $numParts) {\n    id\n    name\n    numParts\n    year\n  }\n}\n\nquery setList {\n  allSets {\n    id\n    name\n    numParts\n    year\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Nx Release Output\nDESCRIPTION: This code snippet shows an example output of running `nx release` with independent releases and conventional commits enabled. It demonstrates how Nx Release determines version bumps for different projects based on their commit history and applies patch or minor version updates accordingly, or skips projects with no relevant commits.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/automatically-version-with-conventional-commits.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\n NX   Running release version for project: pkg-1\n\npkg-1 🏷️ Resolved the current version as 0.4.0 from git tag \"pkg-1@0.4.0\", based on releaseTagPattern \"{projectName}@{version}\"\npkg-1 📄 Resolved the specifier as \"patch\" using git history and the conventional commits standard\npkg-1 ❓ Applied semver relative bump \"patch\", derived from conventional commits data, to get new version 0.4.1\npkg-1 ✍️ New version 0.4.1 written to manifest: packages/pkg-1/package.json\n\n NX   Running release version for project: pkg-2\n\npkg-2 🏷️ Resolved the current version as 0.4.0 from git tag \"pkg-2@0.4.0\", based on releaseTagPattern \"{projectName}@{version}\"\npkg-2 📄 Resolved the specifier as \"minor\" using git history and the conventional commits standard\npkg-2 ❓ Applied semver relative bump \"minor\", derived from conventional commits data, to get new version 0.5.0\npkg-2 ✍️ New version 0.5.0 written to manifest: packages/pkg-2/package.json\n\n NX   Running release version for project: pkg-3\n\npkg-3 🏷️ Resolved the current version as 0.4.0 from git tag \"pkg-3@0.4.0\", based on releaseTagPattern \"{projectName}@{version}\"\npkg-3 🚫 No changes were detected using git history and the conventional commits standard\n\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Tasks with Nx on Windows\nDESCRIPTION: Command syntax for executing Gradle build tasks through Nx on Windows systems.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/gradle/gradle-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnx.bat build <your gradle library>\n```\n\n----------------------------------------\n\nTITLE: Running unit tests with Jest\nDESCRIPTION: This snippet shows the command to execute the unit tests for the `nx-dev-ui-fence` library using Jest.  The command invokes the Nx test runner with the target library name.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/ui-fence/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"nx test nx-dev-ui-fence\"\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Configuration with Google Cloud Authentication\nDESCRIPTION: YAML configuration for GitHub Actions workflow that includes Google Cloud authentication setup and Nx command execution\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/gcs-cache/documents/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\n...\npermissions:\n  id-token: write\n  ...\n\njobs:\n  main:\n    env:\n      NX_KEY: ${{ secrets.NX_KEY }}\n    runs-on: ubuntu-latest\n    steps:\n        ...\n\n      - id: 'auth'\n        name: 'Authenticate to Google Cloud'\n        uses: 'google-github-actions/auth@v2'\n        with:\n          token_format: 'access_token'\n          workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'\n          service_account: 'my-service-account@my-project.iam.gserviceaccount.com'\n\n      - name: 'Set up Cloud SDK'\n        uses: 'google-github-actions/setup-gcloud@v2'\n        with:\n          version: '>= 363.0.0'\n\n        ...\n\n      - run: pnpm exec nx affected -t lint test build\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Dev Server in project.json\nDESCRIPTION: This snippet shows how to configure the Storybook dev server in the project.json file for an Nx project. It sets the port, configDir, and includes a CI configuration.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/storybook/docs/storybook-executor-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"ui\": {\n    \"targets\": {\n        \"storybook\": {\n            \"executor\": \"@nx/storybook:storybook\",\n            \"options\": {\n                \"port\": 4400,\n                \"configDir\": \"libs/ui/.storybook\"\n            },\n            \"configurations\": {\n                \"ci\": {\n                    \"quiet\": true\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Next.js Build with Experimental App Only Flag\nDESCRIPTION: This bash command shows how to enable the experimental app only build feature using the `--experimentalAppOnly` flag. It builds only `app/` routes.  Requires Next.js 13 or later.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/next/docs/build-next-executor-examples.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n\"nx run acme:build:production --experimentalAppOnly\"\n```\n\n----------------------------------------\n\nTITLE: Adding Redux Provider to App Component\nDESCRIPTION: Wraps the App component with Redux Provider and replaces ZodiacSignList with ZodiacSignListContainer.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { rootStore } from '@aztro-daily-horoscope/store';\nimport { ZodiacSignListContainer } from '@aztro-daily-horoscope/ui';\nimport { Header } from '@rneui/base';\n\nconst App = () => {\n  return (\n    <Provider store={rootStore}>\n      <Header centerComponent={{ text: 'Daily Horoscope' }} />\n      <ZodiacSignListContainer />\n    </Provider>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: React Native Bundle with Sourcemap Configuration\nDESCRIPTION: Configuration for generating source maps alongside bundles for both iOS and Android platforms\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/docs/bundle-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"bundle-ios\": {\n      \"executor\": \"@nx/react-native:bundle\",\n      \"options\": {\n        \"entryFile\": \"src/main.tsx\",\n        \"platform\": \"ios\",\n        \"bundleOutput\": \"dist/apps/mobile/ios/main.jsbundle\",\n        \"sourcemapOutput\": \"../../dist/apps/mobile/ios/main.map\",\n      }\n    },\n    \"bundle-android\": {\n      \"executor\": \"@nx/react-native:bundle\",\n      \"options\": {\n        \"entryFile\": \"src/main.tsx\",\n        \"platform\": \"android\",\n        \"bundleOutput\": \"dist/apps/mobile/android/main.jsbundle\",\n        \"sourcemapOutput\": \"../../dist/apps/mobile/android/main.map\",\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Traditional ESLint JavaScript Configuration\nDESCRIPTION: Example of traditional ESLint configuration using JavaScript format with module.exports syntax and similar structure to JSON format.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/tips-n-tricks/migrating-to-flat-eslint.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  root: true,\n  env: {\n    node: true,\n  },\n  parser: '@typescript-eslint/parser',\n  extends: ['eslint:recommended', './.eslintrc.base.js'],\n  plugins: ['@nx'],\n  rules: {\n    '@typescript-eslint/explicit-module-boundary-types': ['error'],\n  },\n  overrides: [\n    {\n      files: ['*.json'],\n      parser: 'jsonc-eslint-parser',\n      rules: {},\n    },\n    {\n      files: ['*.ts', '*.tsx', '*.js', '*.jsx'],\n      rules: {\n        '@nx/enforce-module-boundaries': [\n          'error',\n          {\n            enforceBuildableLibDependency: true,\n            allow: [],\n            depConstraints: [\n              {\n                sourceTag: '*',\n                onlyDependOnLibsWithTags: ['*'],\n              },\n            ],\n          },\n        ],\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark/Light Mode Image Switch in HTML\nDESCRIPTION: HTML markup for displaying different images based on the user's color scheme preference, using the picture element with source media queries.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/react-native/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"text-align: center;\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Serving Angular store application with SSR\nDESCRIPTION: This command serves the Angular store application with SSR enabled. It will run all three application servers, but only the 'store' will watch for file changes.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation-with-ssr.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx serve-ssr store\n```\n\n----------------------------------------\n\nTITLE: Serve Shell Project with Nx (Shell)\nDESCRIPTION: This command serves the 'shell' project using Nx.  It leverages Nx Cloud distributed caching to serve the remote modules statically from the cache, speeding up local serve times. This requires that module federation has been set up and configured correctly.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-05-02-nx-v14-is-out-here-is-all-you-need-to-know.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx serve shell\n```\n\n----------------------------------------\n\nTITLE: Generating Nx JavaScript Library for Conformance Rules\nDESCRIPTION: Creates a new library project to contain custom Nx Conformance rules using the Nx CLI.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/enterprise/conformance/publish-conformance-rules-to-nx-cloud.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/js:library cloud-conformance-rules\n```\n\n----------------------------------------\n\nTITLE: Gradle Version Check (Shell)\nDESCRIPTION: This command checks the installed Gradle version on the system. It's a prerequisite to ensure Gradle is correctly set up before proceeding with the tutorial.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/tutorials/gradle.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngradle --version\n```\n\n----------------------------------------\n\nTITLE: Generating an Angular Library with Nx\nDESCRIPTION: Shows how to use Nx generate command to create a new Angular library in the 'libs' directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/cli/generate.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnx generate @nx/angular:library libs/mylibrary\n```\n\n----------------------------------------\n\nTITLE: Validating Dependencies in TypeScript for Project Graph Creation\nDESCRIPTION: This function validates dependencies in a CreateDependencies context. It takes a RawProjectGraphDependency and a CreateDependenciesContext as parameters, and throws an error if the dependency is invalid.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/validateDependency.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **validateDependency**(`dependency`, `ctx`): `void`\n```\n\n----------------------------------------\n\nTITLE: Analyzing Checkstyle Dependencies in Spring Boot\nDESCRIPTION: This snippet details the dependencies required for Checkstyle in a Spring Boot project. It lists the Checkstyle library and its dependencies such as picocli, antlr4-runtime, commons-beanutils, google guava, reflections, saxon, checker-qual, doxia-core, and doxia-module-xdoc, enabling code style validation and enforcement.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/gradle/src/plugin-v1/utils/__mocks__/gradle-custom-dependencies.txt#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\ncheckstyle - The Checkstyle libraries to be used for this project.\n+--- com.puppycrawl.tools:checkstyle:10.12.4\n|    +--- info.picocli:picocli:4.7.5\n|    +--- org.antlr:antlr4-runtime:4.13.1\n|    +--- commons-beanutils:commons-beanutils:1.9.4\n|    |    \\--- commons-collections:commons-collections:3.2.2\n|    +--- com.google.guava:guava:32.0.1-jre\n|    |    +--- com.google.guava:failureaccess:1.0.1\n|    |    +--- com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava\n|    |    +--- com.google.code.findbugs:jsr305:3.0.2\n|    |    +--- com.google.errorprone:error_prone_annotations:2.18.0\n|    |    \\--- com.google.j2objc:j2objc-annotations:2.8\n|    +--- org.reflections:reflections:0.10.2\n|    |    +--- org.javassist:javassist:3.28.0-GA\n|    |    \\--- com.google.code.findbugs:jsr305:3.0.2\n|    +--- net.sf.saxon:Saxon-HE:12.3\n|    |    \\--- org.xmlresolver:xmlresolver:5.2.0\n|    |         +--- org.apache.httpcomponents.client5:httpclient5:5.1.3\n|    |         |    +--- org.apache.httpcomponents.core5:httpcore5:5.1.3\n|    |         |    +--- org.apache.httpcomponents.core5:httpcore5-h2:5.1.3\n|    |         |    |    \\--- org.apache.httpcomponents.core5:httpcore5:5.1.3\n|    |         |    \\--- commons-codec:commons-codec:1.15\n|    |         \\--- org.apache.httpcomponents.core5:httpcore5:5.1.3\n|    +--- org.checkerframework:checker-qual:3.27.0\n|    +--- org.apache.maven.doxia:doxia-core:1.12.0\n|    |    +--- org.apache.maven.doxia:doxia-sink-api:1.12.0\n|    |    |    \\--- org.apache.maven.doxia:doxia-logging-api:1.12.0\n|    |    |         \\--- org.codehaus.plexus:plexus-container-default:2.1.0\n|    |    |              +--- org.codehaus.plexus:plexus-utils:3.1.1 -> 3.3.0\n|    |    |              +--- org.codehaus.plexus:plexus-classworlds:2.6.0\n|    |    |              +--- org.apache.xbean:xbean-reflect:3.7\n|    |    |              \\--- com.google.collections:google-collections:1.0\n|    |    +--- org.apache.maven.doxia:doxia-logging-api:1.12.0 (*)\n|    |    +--- org.codehaus.plexus:plexus-utils:3.3.0\n|    |    +--- org.codehaus.plexus:plexus-container-default:2.1.0 (*)\n|    |    +--- org.codehaus.plexus:plexus-component-annotations:2.1.0\n|    |    +--- org.apache.commons:commons-lang3:3.8.1\n|    |    +--- org.apache.commons:commons-text:1.3\n|    |    |    \\--- org.apache.commons:commons-lang3:3.7 -> 3.8.1\n|    |    +--- org.apache.httpcomponents:httpclient:4.5.13\n|    |    |    +--- org.apache.httpcomponents:httpcore:4.4.13 -> 4.4.14\n|    |    |    \\--- commons-codec:commons-codec:1.11 -> 1.15\n|    |    \\--- org.apache.httpcomponents:httpcore:4.4.14\n|    \\--- org.apache.maven.doxia:doxia-module-xdoc:1.12.0\n|         +--- org.codehaus.plexus:plexus-utils:3.3.0\n|         +--- org.apache.maven.doxia:doxia-core:1.12.0 (*)\n|         +--- org.apache.maven.doxia:doxia-sink-api:1.12.0 (*)\n```\n\n----------------------------------------\n\nTITLE: Minimalist Changelog Format Example in Markdown\nDESCRIPTION: This snippet illustrates the result of using the minimalist changelog configuration. It shows a simplified changelog entry with only the version number and feature information, without any metadata.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/nx-release/configure-changelog-format.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 7.9.0\n\n### 🚀 Features\n\n- **rule-tester:** check for missing placeholder data in the message\n```\n\n----------------------------------------\n\nTITLE: Example Playwright test file\nDESCRIPTION: This TypeScript code snippet shows an example of a Playwright test file with artificial delays to simulate long-running tests.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-17-modern-angular-testing-with-nx.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('example 1 - test 1', async ({ page }) => {\n  await page.goto('/');\n  await page.waitForTimeout(3000);\n  expect(page.url()).toBe(page.url());\n});\n\ntest('example 1 - test 2', async ({ page }) => {\n  await page.goto('/');\n  await page.waitForTimeout(3000);\n  expect(page.url()).toBe(page.url());\n});\n\n// ...\n\ntest('example 1 - test 10', async ({ page }) => {\n  await page.goto('/');\n  await page.waitForTimeout(3000);\n  expect(page.url()).toBe(page.url());\n});\n```\n\n----------------------------------------\n\nTITLE: Generating a Next.js Component\nDESCRIPTION: This command uses the Nx CLI to generate a new component for a Next.js application within the specified directory. It creates a reusable UI element for the application.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/packages/next/plugin-overview.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\"nx g @nx/next:component apps/my-new-app/components/my-new-component\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Library with Additional Entry Points in Nx\nDESCRIPTION: Project configuration for a TypeScript library that uses @nx/js:tsc executor with the new additionalEntryPoints and generateExportsField options to automatically generate the exports field in the resulting package.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-09-06-nx-16-8-release.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// packages/my-awesome-lib/project.json\n{\n  \"name\": \"my-awesome-lib\",\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/js:tsc\",\n      ...\n      \"options\": {\n        \"main\": \"packages/my-awesome-lib/src/index.ts\",\n        ...\n        \"additionalEntryPoints\": [\"packages/my-awesome-lib/src/foo.ts\"],\n        \"generateExportsField\": true\n      },\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Stack Param List for React Navigation\nDESCRIPTION: TypeScript code to define the RootStackParamList type for type checking with react-navigation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-02-01-share-code-between-react-web-react-native-mobile-with-nx.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RootStackParamList = {\n  [AppRoutes.search]: undefined;\n  [AppRoutes.results]: { search: string };\n};\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace ReactNavigation {\n    // eslint-disable-next-line @typescript-eslint/no-empty-interface\n    interface RootParamList extends RootStackParamList {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Configs Function Definition\nDESCRIPTION: Function signature for updateTsConfigsToJs that takes a Tree object and options containing projectRoot. Used to modify TypeScript configuration for JavaScript support.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/updateTsConfigsToJs.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nupdateTsConfigsToJs(tree: Tree, options: { projectRoot: string }): void\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Navigation Decorator with Route Parameters\nDESCRIPTION: An enhanced NavigationDecorator that includes a Stack Navigator to provide route parameters for components that use the useRoute hook.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-25-use-storybook-with-nx-react-native.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport React from 'react';\n\nconst NavigationDecorator = (story) => {\n  const Stack = createNativeStackNavigator();\n  return (\n    <NavigationContainer independent={true}>\n      <Stack.Navigator>\n        <Stack.Screen\n          name=\"MyStorybookScreen\"\n          component={story}\n          initialParams={{ id: 123 }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Serving a Remote Application\nDESCRIPTION: Nx commands to serve a remote application using standard and static serving methods\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/module-federation/creating-a-remote.md#2025-04-22_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nnx serve myremote\nnx serve-static myremote\n```\n\n----------------------------------------\n\nTITLE: Implementing Zodiac Sign List Component\nDESCRIPTION: React Native component implementation for rendering the list of zodiac signs using FlatList and React Native Elements.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  AdhZodiacSignItem,\n  AdhZodiacSignList,\n} from '@aztro-daily-horoscope/models';\nimport React from 'react';\nimport { FlatList } from 'react-native';\nimport { ListItem } from '@rneui/base';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\n\nexport function ZodiacSignList() {\n  const keyExtractor = (item: AdhZodiacSignItem) => item.zodiacSign;\n\n  return (\n    <FlatList\n      keyExtractor={keyExtractor}\n      data={AdhZodiacSignList}\n      renderItem={({ item }) => (\n        <ListItem bottomDivider>\n          <Icon name={item.icon} />\n          <ListItem.Content>\n            <ListItem.Title>{item.zodiacSign}</ListItem.Title>\n          </ListItem.Content>\n          <ListItem.Chevron />\n        </ListItem>\n      )}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Global Nx Installation with npm\nDESCRIPTION: This command lists the globally installed Nx package using npm. It's useful for verifying the installation status of Nx in the global node_modules directory.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/installation/update-global-installation.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm list --global nx\n```\n\n----------------------------------------\n\nTITLE: Binary Specification in Markdown\nDESCRIPTION: Specifies the exact architecture and platform target for the Nx binary\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/native-packages/linux-arm64-musl/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThis is the **aarch64-unknown-linux-musl** binary for `@nx/nx`\n```\n\n----------------------------------------\n\nTITLE: Implementing React Navigation Stack in App.tsx\nDESCRIPTION: Sets up the main navigation structure using React Navigation with Redux store integration. Configures the stack navigator and initial screen for the zodiac sign list.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { store } from '@aztro-daily-horoscope/store';\nimport { ZodiacSignListContainer } from '@aztro-daily-horoscope/ui';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { Provider } from 'react-redux';\n\nconst Stack = createStackNavigator();\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <NavigationContainer>\n        <Stack.Navigator>\n          <Stack.Screen\n            name=\"Zodiac Sign List\"\n            component={ZodiacSignListContainer}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </Provider>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: TestID Query Example\nDESCRIPTION: Example of querying elements by testID in React Native tests.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-11-22-unit-testing-expo.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { getByTestId } = render(<your component>);\nexpect(getByTestId('title')).toHaveTextContent(...);\n```\n\n----------------------------------------\n\nTITLE: Project Configuration (JSON)\nDESCRIPTION: This JSON configuration shows the structure of a `project.json` file in an Nx workspace using Project Crystal. The `targets` property is empty, as targets are inferred by Nx plugins based on the project's configuration. This configuration represents the default setup in Nx 18, where the plugin infers the targets.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-02-05-nx-18-project-crystal.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"reactapp\",\n  \"$schema\": \"../../node_modules/nx/schemas/project-schema.json\",\n  \"sourceRoot\": \"apps/reactapp/src\",\n  \"projectType\": \"application\",\n  \"targets\": {},\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Package Name Display in Markdown\nDESCRIPTION: Package identifier for the Windows x64 MSVC binary distribution of Nx\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/native-packages/win32-x64-msvc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nnx-win32-x64-msvc\n```\n\n----------------------------------------\n\nTITLE: Creating Title-Only Cards in Nx Documentation\nDESCRIPTION: Title cards display only a title in a card layout with an associated URL, organized in a grid with configurable columns.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{% cards cols=\"4\" %}\n{% title-card title=\"string\" url=\"string\" /%}\n{% title-card title=\"string\" url=\"string\" /%}\n{% title-card title=\"string\" url=\"string\" /%}\n{% title-card title=\"string\" url=\"string\" /%}\n{% /cards %}\n```\n\n----------------------------------------\n\nTITLE: IDE Communication with Reactive Controller\nDESCRIPTION: Shows implementation of IDE communication using Lit's Reactive Controller pattern for handling IDE messages and UI updates\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2023-06-29-nx-console-gets-lit.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('root-element')\nexport class Root extends LitElement {\n  icc: IdeCommunicationController;\n\n  constructor() {\n    super();\n    this.icc = new IdeCommunicationController(this);\n  }\n  render() {\n    return html`${JSON.stringify(this.icc.generatorSchema)}`;\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// ide-communication-controller.ts\nexport class IdeCommunicationController implements ReactiveController {\n  generatorSchema: GeneratorSchema | undefined;\n  constructor(private host: ReactiveControllerHost) {}\n  // ...\n  private handleMessageFromIde(message: InputMessage) {\n    // ...\n    this.generatorSchema = message.payload;\n    this.host.requestUpdate();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated WorkspaceJsonConfiguration Type Alias in TypeScript\nDESCRIPTION: Creates a type alias WorkspaceJsonConfiguration that references ProjectsConfigurations type. The alias is marked as deprecated, indicating developers should use ProjectsConfigurations directly instead.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/WorkspaceJsonConfiguration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nƬ **WorkspaceJsonConfiguration**: [`ProjectsConfigurations`](../../devkit/documents/ProjectsConfigurations)\n```\n\n----------------------------------------\n\nTITLE: Loading Bundled JavaScript in HTML\nDESCRIPTION: Demonstrates how to include a bundled JavaScript file in an HTML document. This approach loads all JavaScript in a single request, which can be efficient but may lead to longer initial load times for large applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-01-09-who-gave-js-a-build-step.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>My Webapp</title>\n  </head>\n  <body>\n    <div id=\"app\">\n      <!-- Content will be injected by the JavaScript application -->\n    </div>\n\n    <!-- Reference to the bundled JavaScript -->\n    <script src=\"main.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Legacy Nx Release Version Configuration (Before)\nDESCRIPTION: Demonstrates the old Nx release version configuration structure before v21. It uses `generatorOptions` to configure versioning options like `packageRoot`, `currentVersionResolver`, `skipLockFileUpdate`, and `preserveLocalDependencyProtocols`.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/src/migrations/update-21-0-0/release-version-config-changes.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"release\": {\n    \"version\": {\n      \"generatorOptions\": {\n        \"packageRoot\": \"build/packages/{projectName}\",\n        \"currentVersionResolver\": \"registry\",\n        \"skipLockFileUpdate\": true,\n        \"preserveLocalDependencyProtocols\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nx to the Latest Version\nDESCRIPTION: Command to update an Nx workspace to the latest version. This initiates the migration process which updates dependencies and prepares necessary code changes for the new version.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-06-09-nx-14-2-angular-v14-storybook-update-lightweight-nx-and-more.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx migrate latest\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native Web Entry Point\nDESCRIPTION: Main entry point configuration for React Native Web application using AppRegistry.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2021-10-14-step-by-step-guide-on-creating-a-monorepo-for-react-native-apps-using-nx.md#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppRegistry } from 'react-native';\nimport App from './app/app';\nAppRegistry.registerComponent('main', () => App);\nAppRegistry.runApplication('main', {\n  rootTag: document.getElementById('root'),\n});\n```\n\n----------------------------------------\n\nTITLE: Using ESLint Flat Config File in Nx\nDESCRIPTION: Configuration to use the newer ESLint Flat Config file format (eslint.config.cjs) instead of the default .eslintrc.json.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/eslint/docs/eslint-examples.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"lint\": {\n  \"executor\": \"@nx/eslint:lint\",\n  \"outputs\": [\"{options.outputFile}\"],\n  \"options\": {\n    \"lintFilePatterns\": [\"apps/frontend/**/*.ts\"],\n    \"eslintConfig\": \"eslint.config.cjs\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Component Test Target to a Nex Project\nDESCRIPTION: This command adds a new `component-test` target to the specified project in the Nx workspace. This target facilitates the execution of component tests using Cypress for the designated project.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/cypress/docs/cypress-component-configuration-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx g component-test my-cool-project\n```\n\n----------------------------------------\n\nTITLE: Markdown Structure for Nx Release Documentation\nDESCRIPTION: Markdown content defining the structure of Nx 17.2 release documentation, including video embed and feature cards\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/changelog/17_2_0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Nx 17.2\n\n[Read the 17.2 release blog post](/blog/nx-17-2-release)\n\n{% youtube\nsrc=\"https://www.youtube.com/embed/cWIFVWKhpHQ\"\ntitle=\"Nx 17.2 Has Landed!!\"\n/%}\n\n## New Features:\n\n{% cards cols=\"2\" %}\n{% card title=\"Module Federation Updates\"  type=\"external\" url=\"https://github.com/nrwl/nx/pull/20006\" /%}\n{% card title=\"Nx Release Programmatic API\"  type=\"document\" url=\"features/manage-releases#using-the-programmatic-api-for-nx-release\" /%}\n{% card title=\"Angular 17 Support\"  type=\"external\" url=\"https://github.com/nrwl/nx/pull/19689\" /%}\n{% card title=\"Nx Canary Releases\"  type=\"external\" url=\"https://github.com/nrwl/nx/pull/20540\" /%}\n{% /cards %}\n```\n\n----------------------------------------\n\nTITLE: Adding Packages to Nx Workspace (Older Versions)\nDESCRIPTION: Alternative commands for adding packages to Nx workspace for versions prior to 17.3.0. Shown for different package managers.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/packages/angular/documents/nx-and-angular.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm add [package]\nnx g [package]:ng-add\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add [package]\nnx g [package]:ng-add\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add [package]\nnx g [package]:ng-add\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add [package]\nnx g [package]:ng-add\n```\n\n----------------------------------------\n\nTITLE: Setting Up Angular Testing Demo\nDESCRIPTION: Commands to clone and set up the Angular testing demo project with instructions for running tests\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-03-17-modern-angular-testing-with-nx.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n# Set up\ngit clone https://github.com/jaysoo/angular-testing-demo.git\ncd angular-testing-demo\nnpm install\n\n# Run test for each project\nnpx nx test demo\nnpx nx test ui\n\n# Run in interactive mode (try updating files to see how fast HMR is)\nnpx nx test ui --watch\n\n# Run all tests\nnpx nx run-many -t test\n```\n\n----------------------------------------\n\nTITLE: ImplicitDependencyEntry Index Signature Definition\nDESCRIPTION: Index signature definition for the ImplicitDependencyEntry type, specifying that string keys map to either the generic type T or ImplicitJsonSubsetDependency<T>.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/ImplicitDependencyEntry.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n▪ [key: string]: T | ImplicitJsonSubsetDependency<T>\n```\n\n----------------------------------------\n\nTITLE: Object with invalid additional properties\nDESCRIPTION: This JSON example shows an object that violates the schema defined with `additionalProperties: false`. The `direction` property is not defined in the schema, thus, it is considered invalid.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/generator-options.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"number\": 1600,\n  \"street_name\": \"Pennsylvania\",\n  \"street_type\": \"Avenue\",\n  \"direction\": \"NW\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PromiseExecutor Type Alias in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias called PromiseExecutor. It represents a function that takes options and an ExecutorContext, and returns a Promise resolving to an object with a success boolean. The type is generic, allowing for flexible option types.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/PromiseExecutor.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **PromiseExecutor**<`T`>: (`options`: `T`, `context`: [`ExecutorContext`](../../devkit/documents/ExecutorContext)) => `Promise`<{ `success`: `boolean` }>\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallelism for Nx Tasks\nDESCRIPTION: Example showing how to disable parallelism for a target in project.json. This is useful for tasks that require exclusive access to a shared resource like a port.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/reference/project-configuration.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"e2e\": {\n      \"parallelism\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tree Interface Method: exists\nDESCRIPTION: Method to check if a file exists at the specified path\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/Tree.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n▸ exists(filePath: string): boolean\n```\n\n----------------------------------------\n\nTITLE: HTML Image with Dark/Light Mode Support\nDESCRIPTION: HTML markup for displaying the Nx logo with support for dark/light mode using the picture element and media queries.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/rollup/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"text-align: center;\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-dark.svg\">\n    <img alt=\"Nx - Smart Monorepos · Fast CI\" src=\"https://raw.githubusercontent.com/nrwl/nx/master/images/nx-light.svg\" width=\"100%\">\n  </picture>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Installing Nx for a Non-Monorepo Project (Shell)\nDESCRIPTION: This snippet illustrates the command to initialize Nx in a non-monorepo project using npx. It explains that this command sets up Nx according to the tools detected in the workspace, enabling caching for the defined scripts.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/migration/adding-to-existing-project.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx@latest init\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Pipeline with Nx MCP in TypeScript\nDESCRIPTION: Shows how to use Nx MCP to add a task pipeline in nx.json that runs the build of all downstream projects before the dev command.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-04-15-nx-mcp-vscode-copilot.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Example query:\n'Add a task pipeline in nx.json that runs the build of all downstream projects before the dev command';\n```\n\n----------------------------------------\n\nTITLE: Implementing a Global Sync Generator in TypeScript\nDESCRIPTION: This TypeScript code implements a global sync generator function. It checks for the existence and content of a 'legal-message.txt' file and creates/updates it if necessary. It returns an 'outOfSyncMessage' if the file needs to be created or updated, informing the user that the sync generator needs to be run.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/generators/create-sync-generator.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tree } from '@nx/devkit';\nimport { SyncGeneratorResult } from 'nx/src/utils/sync-generators';\n\nexport async function mySyncGenerator(\n  tree: Tree\n): Promise<SyncGeneratorResult> {\n  if (\n    !tree.exists('/legal-message.txt') ||\n    tree.read('/legal-message.txt').toString() !==\n      'This is an important legal message.'\n  ) {\n    tree.write('/legal-message.txt', 'This is an important legal message.');\n  }\n  return {\n    outOfSyncMessage: 'The legal-message.txt file needs to be created',\n  };\n}\n\nexport default mySyncGenerator;\n```\n\n----------------------------------------\n\nTITLE: Running Storybook with Compodoc Documentation\nDESCRIPTION: Nx commands for running and building Storybook with the integrated Compodoc documentation.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/recipes/storybook/angular-storybook-compodoc.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnx storybook my-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for BitBucket OAuth Consumer\nDESCRIPTION: Demonstrates the correct format for the callback URL when setting up a BitBucket OAuth consumer for Nx Cloud authentication. The URL should include the Nx Cloud instance address followed by '/auth-callback' without a trailing backslash.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/nx-cloud/enterprise/single-tenant/auth-bitbucket.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[your-nx-cloud-url]/auth-callback\n\n# for example\nhttps://my.nx-enterprise.url:8080/auth-callback\n```\n\n----------------------------------------\n\nTITLE: Express CORS Middleware Integration\nDESCRIPTION: Implementation of CORS middleware in Express application with origin configuration options.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2024-11-14-handling-cors.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n  cors({\n    origin: '<http://example.com>',\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS in a React Component\nDESCRIPTION: This snippet demonstrates a simple React component that utilizes Tailwind CSS classes for styling.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/shared/guides/using-tailwind-css-in-react.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Hello() {\n  return <div className=\"bg-indigo-500 p-2 font-mono\">Hello!</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Tree Interface Properties\nDESCRIPTION: Defines the root property of the Tree interface which represents the workspace root directory\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/Tree.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n• root: string\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Mock Store for Storybook\nDESCRIPTION: Commands to install redux-mock-store and its TypeScript type definitions, which are needed for mocking Redux store in Storybook stories.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2022-04-25-use-storybook-with-nx-react-native.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n# npm\nnpm install redux-mock-store @types/redux-mock-store --save-dev# yarn\nyarn add redux-mock-store @types/redux-mock-store --dev\n```\n\n----------------------------------------\n\nTITLE: Configuring CI Cache Mode in Nx\nDESCRIPTION: JSON configuration for setting the CI cache mode in nx.json to control cache behavior in CI environments\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/external-generated/packages/azure-cache/documents/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"azure\": {\n    \"ciMode\": \"read-only\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Peer Dependencies from NPM V1\nDESCRIPTION: Recursively traverses node_modules directory to find all packages with peer dependencies. Handles scoped packages and generates a report of peer dependencies and their metadata in a format suitable for mocking.\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/src/plugins/js/lock-file/__fixtures__/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst readFileSync = require('fs').readFileSync;\nconst readdirSync = require('fs').readdirSync;\nconst existsSync = require('fs').existsSync;\n\nlet report = '';\n\nconst packageNames = [];\n\nfunction processNodeModules(path = '.') {\n  if (existsSync(`${path}/node_modules`)) {\n    readdirSync(`${path}/node_modules`).forEach((folder) => {\n      if (folder.startsWith('@')) {\n        readdirSync(`${path}/node_modules/${folder}`).forEach((subfolder) => {\n          packageNames.push(`${path}/node_modules/${folder}/${subfolder}`);\n          processNodeModules(`${path}/node_modules/${folder}/${subfolder}`);\n        });\n      } else {\n        packageNames.push(`${path}/node_modules/${folder}`);\n        processNodeModules(`${path}/node_modules/${folder}`);\n      }\n    });\n  }\n}\n\nprocessNodeModules();\n\npackageNames.forEach((path) => {\n  const filePath = `${path}/package.json`;\n  if (existsSync(filePath)) {\n    const content = readFileSync(filePath, 'utf-8');\n    const peerDependencies = JSON.parse(content).peerDependencies;\n    const peerDependenciesMeta = JSON.parse(content).peerDependenciesMeta;\n    const output = JSON.stringify({\n      ...(peerDependencies && { peerDependencies }),\n      ...(peerDependenciesMeta && { peerDependenciesMeta }),\n    });\n    if (output === '{}') return;\n    report += `'${filePath.slice(2)}': '${output}',\\n`;\n  }\n});\n\nconsole.log(report);\n```\n\n----------------------------------------\n\nTITLE: Creating Nodes from Files with TypeScript Generics\nDESCRIPTION: Generic function that creates nodes from configuration files. Takes a node creation function, array of config files, options, and context. Returns a promise resolving to an array of file-value pairs. Supports type parameter T for flexible options typing.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/generated/devkit/createNodesFromFiles.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateNodesFromFiles<T>(createNodes, configFiles, options, context): Promise<[file: string, value: CreateNodesResult][]>\n```\n\n----------------------------------------\n\nTITLE: Generating React Component for Add Set Form using Nx\nDESCRIPTION: Command to generate a React component for adding Lego sets using Nx's generators, which creates the necessary file structure.\nSOURCE: https://github.com/nrwl/nx/blob/master/docs/blog/2025-02-21-using-apollo-graphql-with-react-in-an-nx-workspace.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpx nx generate @nx/react:component libs/feature-sets/src/lib/add-set-form\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic HTML Document with Root Container\nDESCRIPTION: Creates a minimal HTML5 document structure with English language specification and a root div element for application mounting. This template serves as a basic starting point for web applications.\nSOURCE: https://github.com/nrwl/nx/blob/master/e2e/nx-init/src/files/cra/public/index.html.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<body>\n  <div id=\"root\"></div>\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Package Name in Markdown\nDESCRIPTION: Displays the package name for the Linux x64 musl binary build of Nx\nSOURCE: https://github.com/nrwl/nx/blob/master/packages/nx/native-packages/linux-x64-musl/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `nx-linux-x64-musl`\n```\n\n----------------------------------------\n\nTITLE: Generating new React library with Nx\nDESCRIPTION: Command to generate a new React library named 'mylib' using the Nx React plugin.\nSOURCE: https://github.com/nrwl/nx/blob/master/nx-dev/tutorial/src/content/tutorial/2-react-monorepo/2r-smart-monorepo/2-use-preset/_solution/react-monorepo/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx g @nx/react:lib mylib\n```"
  }
]