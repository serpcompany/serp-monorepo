[
  {
    "owner": "sqlfluff",
    "repo": "sqlfluff",
    "content": "TITLE: Basic API Usage Example\nDESCRIPTION: Shows basic usage of SQLFluff's public API methods for linting and fixing SQL code.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/api.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../examples/01_basic_api_usage.py\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLFluff with FluffConfig\nDESCRIPTION: Demonstrates how to configure SQLFluff behavior using the FluffConfig class by overriding default settings. Shows setting dialect and rules configuration programmatically.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/api.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../examples/04_config_overrides.py\n```\n\n----------------------------------------\n\nTITLE: Installing and Running SQLFluff CLI\nDESCRIPTION: Basic example of installing SQLFluff via pip and running the linter on a simple SQL query. Shows installation command and sample linting output with various spacing and formatting errors.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install sqlfluff\n$ echo \"  SELECT a  +  b FROM tbl;  \" > test.sql\n$ sqlfluff lint test.sql --dialect ansi\n== [test.sql] FAIL\nL:   1 | P:   1 | LT01 | Expected only single space before 'SELECT' keyword.\n                       | Found '  '. [layout.spacing]\nL:   1 | P:   1 | LT02 | First line should not be indented.\n                       | [layout.indent]\nL:   1 | P:   1 | LT13 | Files must not begin with newlines or whitespace.\n                       | [layout.start_of_file]\nL:   1 | P:  11 | LT01 | Expected only single space before binary operator '+'.\n                       | Found '  '. [layout.spacing]\nL:   1 | P:  14 | LT01 | Expected only single space before naked identifier.\n                       | Found '  '. [layout.spacing]\nL:   1 | P:  27 | LT01 | Unnecessary trailing whitespace at end of file.\n                       | [layout.spacing]\nL:   1 | P:  27 | LT12 | Files must end with a single trailing newline.\n                       | [layout.end_of_file]\nAll Finished ðŸ“œ ðŸŽ‰!\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLFluff using CFG format\nDESCRIPTION: Example configuration in .sqlfluff file format showing basic settings for templater, file extensions, and indentation rules.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/setting_configuration.rst#2025-04-14_snippet_0\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff]\ntemplater = jinja\nsql_file_exts = .sql,.sql.j2,.dml,.ddl\n\n[sqlfluff:indentation]\nindented_joins = False\nindented_using_on = True\ntemplate_blocks_indent = False\n\n[sqlfluff:templater]\nunwrap_wrapped_queries = True\n\n[sqlfluff:templater:jinja]\napply_dbt_builtins = True\n```\n\n----------------------------------------\n\nTITLE: Installing and Running SQLFluff in Bash\nDESCRIPTION: This snippet demonstrates how to install SQLFluff using pip, create a sample SQL file, and run SQLFluff to lint the file. It shows the command-line usage and example output.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install sqlfluff\n$ echo \"  SELECT a  +  b FROM tbl;  \" > test.sql\n$ sqlfluff lint test.sql --dialect ansi\n```\n\nLANGUAGE: text\nCODE:\n```\n== [test.sql] FAIL\nL:   1 | P:   1 | LT01 | Expected only single space before 'SELECT' keyword.\n                       | Found '  '. [layout.spacing]\nL:   1 | P:   1 | LT02 | First line should not be indented.\n                       | [layout.indent]\nL:   1 | P:   1 | LT13 | Files must not begin with newlines or whitespace.\n                       | [layout.start_of_file]\nL:   1 | P:  11 | LT01 | Expected only single space before binary operator '+'.\n                       | Found '  '. [layout.spacing]\nL:   1 | P:  14 | LT01 | Expected only single space before naked identifier.\n                       | Found '  '. [layout.spacing]\nL:   1 | P:  27 | LT01 | Unnecessary trailing whitespace at end of file.\n                       | [layout.spacing]\nL:   1 | P:  27 | LT12 | Files must end with a single trailing newline.\n                       | [layout.end_of_file]\nAll Finished ðŸ“œ ðŸŽ‰!\n```\n\n----------------------------------------\n\nTITLE: Configuring dbt Project Settings for SQLFluff\nDESCRIPTION: Configuration in .sqlfluff file to specify dbt project directory, profiles directory, profile, and target for use with SQLFluff.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/dbt.rst#2025-04-14_snippet_2\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:templater:dbt]\nproject_dir = <relative or absolute path to dbt_project directory>\nprofiles_dir = <relative or absolute path to the directory that contains the profiles.yml file>\nprofile = <dbt profile>\ntarget = <dbt target>\n```\n\n----------------------------------------\n\nTITLE: Ignoring Individual Lines in SQL with SQLFluff\nDESCRIPTION: Demonstrates how to ignore all errors, specific rules, or categories of errors for individual lines in SQL using SQLFluff's 'noqa' comment.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/ignoring_configuration.rst#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Ignore all errors\nSeLeCt  1 from tBl ;    -- noqa\n\n-- Ignore rule CP02 & rule CP03\nSeLeCt  1 from tBl ;    -- noqa: CP02,CP03\n\n-- Ignore all parsing errors\nSeLeCt from tBl ;       -- noqa: PRS\n```\n\n----------------------------------------\n\nTITLE: Setting Common Rule Configurations in SQLFluff\nDESCRIPTION: Example of setting common rule configurations in the [sqlfluff:rules] section of the .sqlfluff configuration file. This shows how to enable scalar operations, set single table reference style, and define the policy for unquoted identifiers.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/rule_configuration.rst#2025-04-14_snippet_0\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:rules]\nallow_scalar = True\nsingle_table_references = consistent\nunquoted_identifiers_policy = all\n```\n\n----------------------------------------\n\nTITLE: Configuring .sqlfluffignore File for SQLFluff\nDESCRIPTION: Demonstrates how to create a .sqlfluffignore file to control which files are linted by SQLFluff, similar to .gitignore for Git.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/ignoring_configuration.rst#2025-04-14_snippet_2\n\nLANGUAGE: cfg\nCODE:\n```\n# Comments start with a hash.\n\n# Ignore anything in the \"temp\" path\n/temp/\n\n# Ignore anything called \"testing.sql\"\ntesting.sql\n\n# Ignore any \".tsql\" files\n*.tsql\n```\n\n----------------------------------------\n\nTITLE: ANSI-compliant CREATE CAST Statement Grammar Implementation\nDESCRIPTION: Implementation of the CREATE CAST statement grammar following ANSI SQL standard specifications, supporting various function types and the AS ASSIGNMENT option for use across dialects.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass CreateCastStatementSegment(BaseSegment):\n   \"\"\"A `CREATE CAST` statement.\n   https://jakewheat.github.io/sql-overview/sql-2016-foundation-grammar.html#_11_63_user_defined_cast_definition\n   \"\"\"\n\n   type = \"create_cast_statement\"\n\n   match_grammar: Matchable = Sequence(\n       \"CREATE\",\n       \"CAST\",\n       Bracketed(\n           Ref(\"DatatypeSegment\"),\n           \"AS\",\n           Ref(\"DatatypeSegment\"),\n       ),\n       \"WITH\",\n       Ref.keyword(\"SPECIFIC\", optional=True),\n       OneOf(\n           \"ROUTINE\",\n           \"FUNCTION\",\n           \"PROCEDURE\",\n           Sequence(\n               OneOf(\"INSTANCE\", \"STATIC\", \"CONSTRUCTOR\", optional=True),\n               \"METHOD\",\n           ),\n       ),\n       Ref(\"FunctionNameSegment\"),\n       Ref(\"FunctionParameterListGrammar\", optional=True),\n       Sequence(\"FOR\", Ref(\"ObjectReferenceSegment\"), optional=True),\n       Sequence(\"AS\", \"ASSIGNMENT\", optional=True),\n   )\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic SQLFluff Pre-commit Hooks\nDESCRIPTION: Basic pre-commit configuration for SQLFluff that sets up both linting and fixing hooks. Includes commented examples for dbt integration and custom rule arguments.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/production/pre_commit.rst#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrepos:\n- repo: https://github.com/sqlfluff/sqlfluff\n  rev: |release|\n  hooks:\n    - id: sqlfluff-lint\n      # For dbt projects, this installs the dbt \"extras\".\n      # You will need to select the relevant dbt adapter for your dialect\n      # (https://docs.getdbt.com/docs/available-adapters):\n      # additional_dependencies: ['<dbt-adapter>', 'sqlfluff-templater-dbt']\n    - id: sqlfluff-fix\n      # Arbitrary arguments to show an example\n      # args: [--rules, \"LT02,CP02\"]\n      # additional_dependencies: ['<dbt-adapter>', 'sqlfluff-templater-dbt']\n```\n\n----------------------------------------\n\nTITLE: Configuring Element Alignment in SQLFluff\nDESCRIPTION: INI configuration for SQLFluff showing how to set up alignment for alias expressions within a select clause.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/layout.rst#2025-04-14_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[sqlfluff:layout:type:alias_expression]\n# We want non-default spacing _before_ the alias expressions.\nspacing_before = align\n# We want to align them within the next outer select clause.\n# This means for example that alias expressions within the FROM\n# or JOIN clause would _not_ be aligned with them.\nalign_within = select_clause\n# The point at which to stop searching outward for siblings, which\n# in this example would likely be the boundary of a CTE. Stopping\n# when we hit brackets is usually a good rule of thumb for this\n# configuration.\nalign_scope = bracketed\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Rules in SQLFluff Configuration\nDESCRIPTION: Example showing how to disable specific rules (LT08 and RF02) using the exclude_rules parameter in the SQLFluff configuration file. Rules can be referenced by their code, name, alias, or group.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/rule_configuration.rst#2025-04-14_snippet_2\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff]\nexclude_rules = LT08, RF02\n```\n\n----------------------------------------\n\nTITLE: Configuring Capitalization Policy for Keywords in SQLFluff\nDESCRIPTION: Example of setting a rule-specific configuration to enforce uppercase keywords using the capitalisation.keywords rule (CP01). This demonstrates how to create a rule-specific subsection in the configuration file.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/rule_configuration.rst#2025-04-14_snippet_1\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:rules:capitalisation.keywords]\n# Keywords\ncapitalisation_policy = upper\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLFluff to use dbt Templater\nDESCRIPTION: Basic configuration in .sqlfluff file to set dbt as the templater for SQLFluff.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/dbt.rst#2025-04-14_snippet_0\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff]\ntemplater = dbt\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Jinja Filter in SQLFluff\nDESCRIPTION: Shows how to define a custom Jinja filter named 'ds' that can be used in SQL templates. This enables date string formatting in SQL queries.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/jinja.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nSQLFLUFF_JINJA_FILTERS = {\"ds\": ds_filter}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jinja Loader Search Path in SQLFluff\nDESCRIPTION: Configuration example showing how to set up the loader_search_path for Jinja templates. This allows SQLFluff to find included files in specified directories relative to the config file.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/jinja.rst#2025-04-14_snippet_5\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:templater:jinja]\nloader_search_path = included_templates,other_templates\n```\n\n----------------------------------------\n\nTITLE: Using Variables in SQL with Jinja Templating\nDESCRIPTION: Example of using Jinja variables in an SQL query with include statements. This demonstrates how undefined variables are handled when --ignore=templating is enabled.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/jinja.rst#2025-04-14_snippet_7\n\nLANGUAGE: SQL+Jinja\nCODE:\n```\nselect {{ my_variable }}\nfrom {% include \"my_table.sql\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuring ON Clause Alignment in SQL using SQLFluff\nDESCRIPTION: Demonstrates how to align the contents of an ON clause using the 'indented_on_contents' setting in SQLFluff. Shows different combinations of settings and their effects on SQL formatting.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/layout.rst#2025-04-14_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n   a,\n   b\nFROM my_table\nJOIN another_table\n   ON condition1\n   AND condition2\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n   a,\n   b\nFROM my_table\nJOIN another_table\nON condition1\nAND condition2\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLFluff 2.0 with Custom Rules and Layout\nDESCRIPTION: This snippet demonstrates a configuration file for SQLFluff 2.0, setting dialect, templater, line length, and custom rule configurations. It also shows how to exclude specific rules and configure layout specifications.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/releasenotes.rst#2025-04-14_snippet_6\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff]\ndialect = snowflake\ntemplater = dbt\nmax_line_length = 120\n\n# Exclude some specific rules based on a mixture of codes and names\nexclude_rules = RF02, RF03, RF04, ST06, ST07, AM05, AM06, convention.left_join, layout.select_targets\n\n[sqlfluff:indentation]\n# Enabling implicit indents for this project.\n# See https://docs.sqlfluff.com/en/stable/perma/indent_locations.html\nallow_implicit_indents = True\n\n# Add a few specific rule configurations, referenced by the rule names\n# and not by the rule codes.\n[sqlfluff:rules:capitalisation.keywords]\ncapitalisation_policy = lower\n\n[sqlfluff:rules:capitalisation.identifiers]\ncapitalisation_policy = lower\n\n[sqlfluff:rules:capitalisation.functions]\nextended_capitalisation_policy = lower\n\n# An example of setting a custom layout specification which\n# is more lenient than default config.\n[sqlfluff:layout:type:set_operator]\nline_position = alone\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder Style and Values in SQLFluff\nDESCRIPTION: Configuration example showing how to set the parameter style and provide sample values for placeholders in SQLFluff.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/placeholder.rst#2025-04-14_snippet_3\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:templater:placeholder]\nparam_style = colon\nmy_name = 'john'\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Parameter Regex in SQLFluff\nDESCRIPTION: Configuration example showing how to define a custom regex pattern for parameter placeholders when the built-in styles don't match your needs.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/placeholder.rst#2025-04-14_snippet_5\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:templater:placeholder]\nparam_regex = __(?P<param_name>[\\w_]+)__\nmy_name = 'john'\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout and Spacing in SQLFluff\nDESCRIPTION: Explains how to configure layout and spacing rules in SQLFluff using the [sqlfluff:layout] section. Covers spacing elements, line position, and keyword line position settings.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/layout.rst#2025-04-14_snippet_17\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:layout:type:comma]\nspacing_before = touch\nline_position = trailing\n```\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:layout:type:comma]\nline_position = leading\n```\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:layout:type:set_operator]\nline_position = alone:strict\n```\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:layout:type:where_clause]\nkeyword_line_position = alone\n```\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:layout:type:join_on_condition]\nkeyword_line_position = trailing\n```\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:layout:type:partitionby_clause]\nkeyword_line_position = leading\n```\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:layout:type:where_clause]\nkeyword_line_position = none\n\n[sqlfluff:layout:type:orderby_clause]\nkeyword_line_position = none\n\n[sqlfluff:layout:type:groupby_clause]\nkeyword_line_position = none\n\n[sqlfluff:layout:type:having_clause]\nkeyword_line_position = none\n```\n\n----------------------------------------\n\nTITLE: Running Specific SQLFluff Tests with Tox\nDESCRIPTION: Commands demonstrating how to run specific tests using Tox's posargs feature, which allows for targeting tests by name or location to speed up development.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ntox -e py39 -- -k AL02 test\n```\n\n----------------------------------------\n\nTITLE: Python Library Implementation for Jinja Templates\nDESCRIPTION: Python module implementing custom functions for use in Jinja SQL templates\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/jinja.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef group_by(n):\n    return \"GROUP BY 1,2\"\n```\n\nLANGUAGE: python\nCODE:\n```\ndef custom_sum(a: str, b: str) -> str:\n    return a + b\n```\n\nLANGUAGE: python\nCODE:\n```\ndef another_sum(a: str, b: str) -> str:\n   return a + b\n```\n\nLANGUAGE: python\nCODE:\n```\ndef ds_filter(value: datetime.date | datetime.time | None) -> str | None:\n    \"\"\"Date filter.\"\"\"\n    if value is None:\n        return None\n    return value.strftime(\"%Y-%m-%d\")\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLFluff Jinja Templater\nDESCRIPTION: Basic SQLFluff configuration file showing Jinja templater setup with variables, macros, and path configurations\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/jinja.rst#2025-04-14_snippet_0\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff]\ntemplater = jinja\n\n[sqlfluff:templater:jinja]\napply_dbt_builtins = True\nload_macros_from_path = my_macros\nloader_search_path = included_templates\nlibrary_path = sqlfluff_libs\nexclude_macros_from_path = my_macros_exclude\n\n[sqlfluff:templater:jinja:context]\nmy_list = ['a', 'b', 'c']\nMY_LIST = (\"d\", \"e\", \"f\")\nmy_where_dict = {\"field_1\": 1, \"field_2\": 2}\n\n[sqlfluff:templater:jinja:macros]\na_macro_def = {% macro my_macro(n) %}{{ n }} + {{ n * 2 }}{% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Enabling Core Rules in SQLFluff Configuration\nDESCRIPTION: Example showing how to enable the 'core' rule grouping in SQLFluff. This will enable all rules that have been designated as core rules by the SQLFluff team.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/rule_configuration.rst#2025-04-14_snippet_4\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff]\nrules = core\n```\n\n----------------------------------------\n\nTITLE: Fixing FROM Clause Terminator Grammar to Support Keyword Table Names\nDESCRIPTION: Updating the FromClauseTerminatorGrammar to only match complete clause keywords rather than individual words, allowing table names that match SQL keywords like 'group' to be properly parsed in FROM clauses.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nFromClauseTerminatorGrammar=OneOf(\n   \"WHERE\",\n   \"LIMIT\",\n   Sequence(\"GROUP\", \"BY\"),\n   Sequence(\"ORDER\", \"BY\"),\n   \"HAVING\",\n   \"QUALIFY\",\n   \"WINDOW\",\n   Ref(\"SetOperatorSegment\"),\n   Ref(\"WithNoSchemaBindingClauseSegment\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SQL Column Spacing and Comma Placement\nDESCRIPTION: Example showing how commas can be placed in SQL queries, with newlines before commas and proper spacing when inline.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/layout.rst#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n   col_a\n   , col_b\n   -- Newline present before column\n   , col_c\n   -- When inline, comma should still touch element before.\n   , GREATEST(col_d, col_e) as col_f\nFROM tbl_a\n```\n\n----------------------------------------\n\nTITLE: Downgrading Rules to Warnings in SQLFluff\nDESCRIPTION: Example showing how to downgrade specific rules (LT01 and LT04) to warnings instead of errors. This allows the issues to be displayed without causing a file to fail linting.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/rule_configuration.rst#2025-04-14_snippet_5\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff]\nwarnings = LT01, LT04\n```\n\n----------------------------------------\n\nTITLE: Creating a Configuration Dictionary in Python for SQLFluff\nDESCRIPTION: Shows how to create a Python dictionary that represents a nested configuration structure corresponding to a .sqlfluff config file format. This example sets the capitalization policy for SQL keywords to lowercase.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/internals/config.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconfigs = {\n    \"rules\":{\n        \"capitalisation.keywords\": {\n            \"capitalisation_policy\": \"lower\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running SQLFluff with GitHub Annotations Native Format\nDESCRIPTION: This command runs SQLFluff's lint command with the 'github-annotation-native' format option to produce output compatible with GitHub workflow commands.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/production/github_actions.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsqlfluff lint --format github-annotation-native\n```\n\n----------------------------------------\n\nTITLE: Creating and Parsing FluffConfig Instances\nDESCRIPTION: Shows different methods of creating FluffConfig instances, either manually or through parsing. Illustrates configuration setup for SQLFluff operations.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/api.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../examples/05_simple_api_config.py\n```\n\n----------------------------------------\n\nTITLE: Using In-File Configuration Directives in SQL\nDESCRIPTION: Example showing how to use inline SQL comments to configure SQLFluff behavior within individual SQL files.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/setting_configuration.rst#2025-04-14_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Set Indented Joins\n-- sqlfluff:indentation:indented_joins:True\n\n-- Set a smaller indent for this file\n-- sqlfluff:indentation:tab_space_size:2\n\n-- Set keywords to be capitalised\n-- sqlfluff:rules:capitalisation.keywords:capitalisation_policy:upper\n\nSELECT *\nFROM a\n  JOIN b USING(c)\n```\n\n----------------------------------------\n\nTITLE: Defining a Failing Query Test in YAML for SQLFluff\nDESCRIPTION: This snippet shows how to create a test case for a query that should fail linting in SQLFluff. It uses a descriptive test name and the 'fail_str' key to specify the failing query.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/test/fixtures/rules/std_rule_cases/README.md#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndescriptive_test_name:\n  fail_str: select * FROM x\n```\n\n----------------------------------------\n\nTITLE: Running SQLFluff with GitHub Annotations Format\nDESCRIPTION: This command runs SQLFluff's lint command with the 'github-annotation' format option to produce output compatible with the yuzutech action for GitHub PR annotations.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/production/github_actions.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsqlfluff lint --format github-annotation\n```\n\n----------------------------------------\n\nTITLE: SQLFluff Configuration for Jinja Templater\nDESCRIPTION: Configuration example for the Jinja templater in SQLFluff. Shows how to define context variables in the .sqlfluff config file to replace template placeholders.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:templater:jinja:context]\nnum_things=456\ntbl_name=my_table\n```\n\n----------------------------------------\n\nTITLE: Using Default Filter with Jinja Variables in SQL\nDESCRIPTION: Shows how to use Jinja's default filter to provide fallback values for undefined variables. This is useful when working with the --ignore=templating option.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/jinja.rst#2025-04-14_snippet_8\n\nLANGUAGE: SQL+Jinja\nCODE:\n```\nselect {{ my_variable | default(\"col_a\") }}\nfrom my_table\n```\n\n----------------------------------------\n\nTITLE: Enabling dbt Builtin Functions in SQLFluff Jinja Templater\nDESCRIPTION: Configuration to enable usage of builtin dbt Jinja functions within SQLFluff templates.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/dbt.rst#2025-04-14_snippet_3\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:templater:jinja]\napply_dbt_builtins = True\n```\n\n----------------------------------------\n\nTITLE: Configuring JOIN Indentation in SQL using SQLFluff\nDESCRIPTION: Example of how to configure JOIN indentation in SQLFluff. Shows the default behavior and how to modify it using the 'indented_using_on' and 'allow_implicit_indents' settings.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/layout.rst#2025-04-14_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n   a,\n   b\nFROM my_table\nJOIN another_table\nON\n   condition1\n   AND condition2\n```\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:indentation]\nindented_using_on = False\nallow_implicit_indents = True\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n   a,\n   b\nFROM my_table\nJOIN another_table\nON condition1\n   AND condition2\n```\n\n----------------------------------------\n\nTITLE: Using SQLAlchemy-style Placeholders in SQL Queries\nDESCRIPTION: Example of an SQL query using SQLAlchemy-style placeholders where ':myid' represents a parameter that will be replaced at runtime with a value provided by the application.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/placeholder.rst#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM table WHERE id = :myid\n```\n\n----------------------------------------\n\nTITLE: Defining a Passing Query Test in YAML for SQLFluff\nDESCRIPTION: This snippet demonstrates how to write a test case for a query that should pass linting in SQLFluff. It uses a descriptive test name and the 'pass_str' key to specify the query.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/test/fixtures/rules/std_rule_cases/README.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndescriptive_test_name:\n  pass_str: select * from x\n```\n\n----------------------------------------\n\nTITLE: Disabling library_path via SQLFluff CLI\nDESCRIPTION: This command demonstrates how to disable the library_path option entirely when using SQLFluff via the command line interface. This is recommended for secure environments to prevent users from importing arbitrary Python methods.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/production/security.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sqlfluff lint my_path --library-path none\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLFluff Ignore for dbt Projects\nDESCRIPTION: Configuration for .sqlfluffignore file to exclude dbt-specific directories and files from SQLFluff linting.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/dbt.rst#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntarget/\n# dbt <1.0.0\ndbt_modules/\n# dbt >=1.0.0\ndbt_packages/\nmacros/\n```\n\n----------------------------------------\n\nTITLE: Complex Jinja SQL Template Example\nDESCRIPTION: SQL template demonstrating Jinja variable usage with loops and conditional statements\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/jinja.rst#2025-04-14_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    {% for elem in MY_LIST %}\n        '{{elem}}' {% if not loop.last %}||{% endif %}\n    {% endfor %} as concatenated_list\nFROM tbl\nWHERE\n    {% for field, value in my_where_dict.items() %}\n        {{field}} = {{value}} {% if not loop.last %}and{% endif %}\n    {% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Disabling library_path via SQLFluff Python API\nDESCRIPTION: This code snippet shows how to disable the library_path option entirely when using SQLFluff via the Python API. It uses the FluffConfig object with an override option, which is recommended for secure environments to restrict importing arbitrary Python methods.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/production/security.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Code snippet not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Specifying dbt Variables in SQLFluff Configuration\nDESCRIPTION: Configuration to pass variables to dbt through SQLFluff configuration, equivalent to using --vars in dbt command line.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/dbt.rst#2025-04-14_snippet_5\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:templater:dbt:context]\nmy_variable = 1\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL JOIN Indentation in SQLFluff\nDESCRIPTION: These snippets demonstrate how to configure JOIN indentation in SQLFluff, showing both the default behavior and the indented JOIN behavior when 'indented_joins' is set to True in the configuration.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/layout.rst#2025-04-14_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\n   SELECT\n      a,\n      b\n   FROM my_table\n   JOIN another_table\n      ON\n         condition1\n         AND condition2\n```\n\nLANGUAGE: SQL\nCODE:\n```\n   SELECT\n      a,\n      b\n   FROM my_table\n      JOIN another_table\n         ON\n            condition1\n            AND condition2\n```\n\n----------------------------------------\n\nTITLE: Referencing SQLFluff Default Configuration File\nDESCRIPTION: This code is a directive to include the contents of the default configuration file from SQLFluff's source code. It uses the literalinclude directive to display the actual default config.cfg file with proper syntax highlighting.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/default_configuration.rst#2025-04-14_snippet_0\n\nLANGUAGE: cfg\nCODE:\n```\n.. literalinclude:: ../../../src/sqlfluff/core/default_config.cfg\n   :language: cfg\n```\n\n----------------------------------------\n\nTITLE: Basic SQLFluff Configuration\nDESCRIPTION: Shows the configuration setup for Python templater with a simple variable substitution in .sqlfluff file.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/python.rst#2025-04-14_snippet_1\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff]\ntemplater = python\n\n[sqlfluff:templater:python:context]\ntbl_name = my_table\n```\n\n----------------------------------------\n\nTITLE: Running diff-quality with SQLFluff for Changed Lines\nDESCRIPTION: Command to run diff-quality with SQLFluff as the underlying linting tool. This will show SQLFluff violations only for changed or new lines in the current git branch compared to the main branch.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/production/diff_quality.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ diff-quality --violations sqlfluff\n```\n\n----------------------------------------\n\nTITLE: Generating Parse Fixture YAML Files with Python for SQLFluff\nDESCRIPTION: Command to generate YAML fixtures for parser tests. This script creates or updates .yml files that define the expected parsed structure for SQL test files. Options include filtering by dialect, applying glob patterns, and only generating new files.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/test/fixtures/dialects/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython test/generate_parse_fixture_yml.py [--dialect <dialect>] [--filter <glob_filter>] [--new-only]\n```\n\n----------------------------------------\n\nTITLE: Enabling Placeholder Templater in SQLFluff Configuration\nDESCRIPTION: Configuration snippet showing how to enable the placeholder templater in SQLFluff's configuration file.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/placeholder.rst#2025-04-14_snippet_1\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff]\ntemplater = placeholder\n```\n\n----------------------------------------\n\nTITLE: Supported Placeholder Styles in SQL Queries\nDESCRIPTION: Examples of different placeholder styles supported by SQLFluff's placeholder templater, including colon, pyformat, dollar, question mark, numeric, and other formats.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/placeholder.rst#2025-04-14_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- colon\nWHERE bla = :my_name\n\n-- colon_nospaces\n-- (use with caution as more prone to false positives)\nWHERE bla = table:my_name\n\n-- colon_optional_quotes\nSELECT :\"column\" FROM :table WHERE bla = :'my_name'\n\n-- numeric_colon\nWHERE bla = :2\n\n-- pyformat\nWHERE bla = %(my_name)s\n\n-- dollar\nWHERE bla = $my_name or WHERE bla = ${my_name}\n\n-- question_mark\nWHERE bla = ?\n\n-- numeric_dollar\nWHERE bla = $3 or WHERE bla = ${3}\n\n-- percent\nWHERE bla = %s\n\n-- ampersand\nWHERE bla = &s or WHERE bla = &{s} or USE DATABASE MARK_{ENV}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Line Ranges in SQL with SQLFluff\nDESCRIPTION: Shows how to ignore specific rules or all rules for ranges of lines in SQL using SQLFluff's 'noqa:disable' and 'noqa:enable' directives.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/ignoring_configuration.rst#2025-04-14_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Ignore rule AL02 from this line forward\nSELECT col_a a FROM foo -- noqa: disable=AL02\n\n-- Ignore all rules from this line forward\nSELECT col_a a FROM foo -- noqa: disable=all\n\n-- Enforce all rules from this line forward\nSELECT col_a a FROM foo -- noqa: enable=all\n```\n\n----------------------------------------\n\nTITLE: Running Full SQLFluff Test Suite with Tox\nDESCRIPTION: Command for running the complete SQLFluff test suite using Tox, which tests against multiple Python versions and performs linting checks.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntox\n```\n\n----------------------------------------\n\nTITLE: Configuring CTE Indentation in SQL using SQLFluff\nDESCRIPTION: Shows how to configure indentation for Common Table Expressions (CTEs) using the 'indented_ctes' setting in SQLFluff.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/layout.rst#2025-04-14_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nWITH\n   some_cte AS (\n      SELECT 1 FROM table1\n   ),\n\n   some_other_cte AS (\n      SELECT 1 FROM table1\n   )\n\nSELECT 1 FROM some_cte\n```\n\n----------------------------------------\n\nTITLE: Illustrating SQL Hanging Indents\nDESCRIPTION: This snippet demonstrates two examples of hanging indents in SQL: a SELECT statement with complex expressions and a TSQL DECLARE statement.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/layout.rst#2025-04-14_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\n   -- A select statement with two hanging indents:\n   SELECT no_line_break_before_me,\n          indented_to_match_the_first,\n          1 + (a\n               + b) AS another_more_complex_example\n   FROM my_table;\n\n   -- This TSQL example is also in essence a hanging indent:\n   DECLARE @prv_qtr_1st_dt DATETIME,\n           @last_qtr INT,\n           @last_qtr_first_mn INT,\n           @last_qtr_yr INT;\n```\n\n----------------------------------------\n\nTITLE: Running SQLFluff tests before submitting a pull request\nDESCRIPTION: Command to run all automated tests using tox before submitting a pull request. This ensures code quality by executing fixture generation, coverage reporting, and linting checks.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/git.rst#2025-04-14_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ntox -e generate-fixture-yml,cov-init,py39,cov-report,linting\n```\n\n----------------------------------------\n\nTITLE: Configuring CASE Statement Indentation in SQL using SQLFluff\nDESCRIPTION: Demonstrates how to configure indentation for CASE statements using the 'indented_then' setting in SQLFluff.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/layout.rst#2025-04-14_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n   a,\n   CASE\n      WHEN b >= 42 THEN\n         1\n      ELSE 0\n   END AS c\nFROM some_table\n```\n\n----------------------------------------\n\nTITLE: Listing Available Dialects and Rules\nDESCRIPTION: Demonstrates how to retrieve supported SQL dialects and available linting rules using list_dialects() and list_rules() functions.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/api.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../examples/03_getting_rules_and_dialects.py\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SQL Case Statement Indentation\nDESCRIPTION: This snippet shows the correct indentation for a SQL CASE statement, including alignment of WHEN and ELSE clauses, as well as comment alignment.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/layout.rst#2025-04-14_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\n         case\n            -- This is aligned correctly with below\n            when indented then take_care\n            else try_harder\n         end as the_general_guidance\n      -- Even here we align with the line below\n      FROM my_table\n```\n\n----------------------------------------\n\nTITLE: Running SQLFluff Tests with Tox\nDESCRIPTION: Command to run test suite for SQLFluff using tox, including generating fixtures, coverage reports, and linting checks.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/git.rst#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntox -e generate-fixture-yml,cov-init,py39,cov-report,linting\n```\n\n----------------------------------------\n\nTITLE: Illustrating SQL Implicit Indents\nDESCRIPTION: These snippets demonstrate the use of implicit indents in SQL WHERE clauses, showing both the compact layout with implicit indents and the traditional layout without them.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/layout.rst#2025-04-14_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\n   -- This WHERE clause here takes advantage of an implicit indent.\n   SELECT *\n   FROM my_table\n   WHERE condition_a\n      AND condition_b;\n\n   -- With implicit indents disabled (which is currently the\n   -- default), the above formulation is not allowed, and instead\n   -- there should be a newline immediately after `WHERE` (which\n   -- is the location of the _implicit_ indent).\n   SELECT *\n   FROM my_table\n   WHERE\n      condition_a\n      AND condition_b;\n```\n\n----------------------------------------\n\nTITLE: SQL Inline Comment Formatting\nDESCRIPTION: Example showing how inline comments should be formatted in SQL, either on the same line as code or aligned with following code.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/layout.rst#2025-04-14_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n   -- This is fine\n   this_column as what_we_align_to,\n   another_column as something_short,  -- Is ok\n```\n\n----------------------------------------\n\nTITLE: Overriding NotOperatorGrammar in MySQL Dialect\nDESCRIPTION: Example showing how MySQL dialect overrides the ANSI NotOperatorGrammar to include the '!' operator as an alternative to NOT.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nNotOperatorGrammar=OneOf(\n    StringParser(\"NOT\", KeywordSegment, type=\"keyword\"),\n    StringParser(\"!\", CodeSegment, name=\"not_operator\", type=\"not_operator\"),\n),\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SQL+Jinja Templated Indents\nDESCRIPTION: This snippet shows how SQLFluff handles indentation in SQL code with Jinja templating, including simple cases and more complex scenarios where template tags cross parse tree levels.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/layout.rst#2025-04-14_snippet_11\n\nLANGUAGE: SQL+Jinja\nCODE:\n```\n   SELECT\n      a,\n      {% for n in ['b', 'c', 'd'] %}\n         -- This section is indented relative to 'a' because\n         -- it is inside a jinja for loop.\n         {{ n }},\n      {% endfor %}\n      e\n   FROM my_table\n```\n\nLANGUAGE: SQL+Jinja\nCODE:\n```\n   SELECT\n      a,\n      {% if True %}\n         -- This is a simple case. The opening and closing tag are\n         -- both at the same level within the SELECT clause.\n         simple_case AS example,\n      {% endif %}\n      b,\n   {% if True %}\n      -- This is a complex case. The opening tag is within the SELECT\n      -- clause, but the closing tag is outside the statement\n      -- entirely.\n      complex_case AS example\n   FROM table_option_one\n   {% else %}\n      complex_case_two AS example\n   FROM table_option_two\n   {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLFluff using TOML format\nDESCRIPTION: Example configuration in pyproject.toml format showing the same settings as the CFG example but with TOML syntax.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/setting_configuration.rst#2025-04-14_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.sqlfluff.core]\ntemplater = \"jinja\"\nsql_file_exts = \".sql,.sql.j2,.dml,.ddl\"\n\n[tool.sqlfluff.indentation]\nindented_joins = false\nindented_using_on = true\ntemplate_blocks_indent = false\n\n[tool.sqlfluff.templater]\nunwrap_wrapped_queries = true\n\n[tool.sqlfluff.templater.jinja]\napply_dbt_builtins = true\n\n[tool.sqlfluff.rules.capitalisation.keywords]\ncapitalisation_policy = \"upper\"\n```\n\n----------------------------------------\n\nTITLE: SQL Indentation Example\nDESCRIPTION: Example showing proper SQL indentation with nested elements and consistent alignment for elements at the same level.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/layout.rst#2025-04-14_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n   nested_within_select AS first_column,\n   some_function(\n      nested_within_function,\n      also_nested_within_function\n   ) AS indented_the_same_as_opening_bracket\nFROM indented_the_same_as_select\n```\n\n----------------------------------------\n\nTITLE: Running All Dialect Tests in SQLFluff\nDESCRIPTION: Command to run all dialect tests in SQLFluff using tox.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ntox -e py39 -- test/dialects/dialects_test.py\n```\n\n----------------------------------------\n\nTITLE: Complex SQL Template with Dot Notation\nDESCRIPTION: Demonstrates SQL template using dot notation for complex variable access.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/python.rst#2025-04-14_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- this SQL\nSELECT * FROM {foo.bar}\n\n-- becomes this\nSELECT * FROM {sqlfluff[\"foo.bar\"]}\n```\n\n----------------------------------------\n\nTITLE: SQL Alignment Scope Examples\nDESCRIPTION: Multiple SQL examples showing how different alignment scope and within settings affect the formatting of alias expressions across CTEs and queries.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/layout.rst#2025-04-14_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- With\n--    align_scope = bracketed\n--    align_within = select_clause\n\nWITH foo as (\n   SELECT\n      a,\n      b,\n      c     AS first_column\n      d + e AS second_column\n)\n\nSELECT\n   a           AS first_column,\n   (a + b) / 2 AS third_column\nFROM foo AS bar;\n\n-- With\n--    align_scope = bracketed\n--    align_within = statement\n\nWITH foo as (\n   SELECT\n      a,\n      b,\n      c     AS first_column\n      d + e AS second_column\n)\n\nSELECT\n   a           AS first_column,\n   (a + b) / 2 AS third_column\nFROM foo       AS bar            -- Now the FROM alias is also aligned.\n\n-- With\n--    align_scope = file\n--    align_within = select_clause\n\nWITH foo as (\n   SELECT\n      a,\n      b,\n      c        AS first_column   -- Now the aliases here are aligned\n      d + e    AS second_column  -- with the outer query.\n)\n\nSELECT\n   a           AS first_column,\n   (a + b) / 2 AS third_column\nFROM foo AS bar\n\n-- With\n--    align_scope = file\n--    align_within = statement\n\nWITH foo as (\n   SELECT\n      a,\n      b,\n      c        AS first_column\n      d + e    AS second_column\n)\n\nSELECT\n   a           AS first_column,\n   (a + b) / 2 AS third_column\nFROM foo       AS bar\n```\n\n----------------------------------------\n\nTITLE: Generating Parse Fixture YAML Files with Tox for SQLFluff\nDESCRIPTION: Using Tox to run the YAML fixture generation script. This is a simpler command that uses the tox environment to regenerate all the parsed structure yml files.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/test/fixtures/dialects/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntox -e generate-fixture-yml\n```\n\n----------------------------------------\n\nTITLE: Using Check Option in SQLFluff Fix Command\nDESCRIPTION: The --force option is now the default behavior for sqlfluff fix in SQLFluff 3.0. A new --check option has been introduced to mimic the old default behavior.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/releasenotes.rst#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsqlfluff fix --check\n```\n\n----------------------------------------\n\nTITLE: Aligned Elements in SQL SELECT Statement\nDESCRIPTION: Example of SQL with aligned alias expressions where the AS keywords line up vertically for better readability.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/layout.rst#2025-04-14_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n   a           AS first_column,\n   b           AS second_column,\n   (a + b) / 2 AS third_column\nFROM foo AS bar\n```\n\n----------------------------------------\n\nTITLE: Configuring TOML entry points for SQLFluff plugin discovery\nDESCRIPTION: This code snippet shows how to configure the entry point for a SQLFluff plugin in a pyproject.toml file. The entry point is essential for SQLFluff to discover and load custom plugins during runtime.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/setup/developing_custom_rules.rst#2025-04-14_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[project.entry-points.sqlfluff]\n# Change this name in your plugin, e.g. company name or plugin purpose.\nsqlfluff_example = \"sqlfluff_plugin_example\"\n```\n\n----------------------------------------\n\nTITLE: Implementing SQLFluff Segment Matching\nDESCRIPTION: This snippet shows the basic structure of a segment's match method, which uses a match_grammar to determine if the segment matches the input. It's a crucial part of the parsing process in SQLFluff.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/architecture.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Segment:\n    def match(self, input):\n        return self.match_grammar.match(input)\n```\n\n----------------------------------------\n\nTITLE: Disabling Progress Bar in SQLFluff Commands\nDESCRIPTION: The --disable_progress_bar option has been removed in SQLFluff 3.0. Users should migrate to --disable-progress-bar for lint, fix, and format commands.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/releasenotes.rst#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsqlfluff lint --disable-progress-bar\n```\n\n----------------------------------------\n\nTITLE: Rendered SQL Query after Templating\nDESCRIPTION: The SQL query after the templating engine has processed it. Shows how template variables are replaced with their configured values to produce valid SQL.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 456 FROM my_table WHERE id > 10 LIMIT 5\n```\n\n----------------------------------------\n\nTITLE: Configuring DBT Adapter Version in Pre-commit\nDESCRIPTION: Example showing how to specify a particular version of dbt-adapter when using SQLFluff with pre-commit and dbt integration.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/production/pre_commit.rst#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nadditional_dependencies : ['dbt-bigquery==1.0.0', 'sqlfluff-templater-dbt']\n```\n\n----------------------------------------\n\nTITLE: Using GitHub Annotation Level in SQLFluff Lint Command\nDESCRIPTION: The default annotation_level for the --annotation-level option on the sqlfluff lint command has been changed from 'notice' to 'warning' in SQLFluff 3.0.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/releasenotes.rst#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsqlfluff lint --annotation-level warning\n```\n\n----------------------------------------\n\nTITLE: Running SQLFluff with Default Configuration\nDESCRIPTION: Command to run SQLFluff linting with stock configuration to establish a baseline of how your project performs with default settings.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/setup/teamrollout.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsqlfluff lint\n```\n\n----------------------------------------\n\nTITLE: Customizing BigQuery Lexer for Variable Recognition in SQLFluff\nDESCRIPTION: Example of inserting a custom lexer matcher for BigQuery dialect to recognize parameterized variables in the form @variable_name as a single CodeSegment. The before parameter indicates the order of preference for matching symbols.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbigquery_dialect.insert_lexer_matchers(\n    [\n        RegexLexer(\"atsign_literal\", r\"@[a-zA-Z_][\\w]*\", CodeSegment),\n    ],\n    before=\"equals\",\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing SQLFluff Plugin Rule Import Pattern\nDESCRIPTION: Demonstrates the recommended pattern for importing rule definitions within a SQLFluff plugin. Rules should be imported within the get_rules() method rather than in the main module body to ensure proper initialization order.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/plugins.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# The root module will need to import `hookimpl`, but\n# should not yet import the rule definitions for the plugin.\nfrom sqlfluff.core.plugin import hookimpl\n\n@hookimpl\ndef get_rules():\n    # Rules should be imported within the `get_rules` method instead\n    from my_plugin.rules import MyRule\n    return [MyRule]\n```\n\n----------------------------------------\n\nTITLE: Running All SQLFluff Rule Tests\nDESCRIPTION: Command to run all YAML test cases for SQLFluff rules using pytest. This executes all rule tests defined in the YAML fixtures.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/rules.rst#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npytest test/rules/yaml_test_cases_test.py -vv\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Comment Lexer\nDESCRIPTION: Example of how SQL comments are defined in the lexer using regular expressions, showing how text is split into tokens before parsing.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nRegexLexer(\n    \"inline_comment\",\n    r\"(--|#)[^\\n]*\",\n    CommentSegment,\n    segment_kwargs={\"trim_start\": (\"--\", \"#\")},\n),\n```\n\n----------------------------------------\n\nTITLE: Defining SelectClauseSegment in ANSI SQL with Match and Parse Grammar\nDESCRIPTION: Example segment definition for SELECT clauses showing how match_grammar is used for quick identification of clause boundaries while parse_grammar handles the detailed parsing of the clause contents.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SelectClauseSegment(BaseSegment):\n    \"\"\"A group of elements in a select target statement.\"\"\"\n\n    type = \"select_clause\"\n    match_grammar = StartsWith(\n        Sequence(\"SELECT\", Ref(\"WildcardExpressionSegment\", optional=True)),\n        terminator=OneOf(\n            \"FROM\",\n            \"WHERE\",\n            \"ORDER\",\n            \"LIMIT\",\n            \"OVERLAPS\",\n            Ref(\"SetOperatorSegment\"),\n        ),\n        enforce_whitespace_preceding_terminator=True,\n    )\n\n    parse_grammar = Ref(\"SelectClauseSegmentGrammar\")\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Template Example\nDESCRIPTION: Demonstrates a simple SQL template using Python f-string style variable substitution.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/python.rst#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM {tbl_name}\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment for SQLFluff Development\nDESCRIPTION: Commands to create and activate a development virtual environment using Tox. This example uses the dbt 1.8.0 environment, which installs SQLFluff in editable mode along with necessary dependencies.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntox -e dbt180 --devenv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Implementing Templater Plugin Render Function\nDESCRIPTION: SQLFluff 2.2 changes the templater plugin interface to use a render_func callable instead of make_template. This function should accept a str and return a str.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/releasenotes.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef render_func(template_str: str) -> str:\n    # Implementation for rendering the template\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteStatementSegment with Optional WHERE Clause\nDESCRIPTION: Example showing how to define a DELETE statement with optional components using the optional=True parameter.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nparse_grammar = Sequence(\n    \"DELETE\",\n    Ref(\"FromClauseSegment\"),\n    Ref(\"WhereClauseSegment\", optional=True),\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying dbt Dependencies for SQLFluff\nDESCRIPTION: This snippet defines the required versions of dbt-core and dbt-postgres for use with SQLFluff. It uses the tilde-equals operator (~=) to specify compatibility with version 1.7.0 and any compatible minor or patch versions.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/constraints/dbt170.txt#2025-04-14_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\ndbt-core~=1.7.0\ndbt-postgres~=1.7.0\n```\n\n----------------------------------------\n\nTITLE: Installing SQLFluff Plugins in Development Mode\nDESCRIPTION: Command for installing SQLFluff plugins in editable mode, using the dbt templater as an example. This allows developers to work on plugins while seeing changes reflected immediately.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -e plugins/sqlfluff-templater-dbt/.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SQL Parsing Error in SQLFluff\nDESCRIPTION: An example of invalid SQL that causes a parsing error in SQLFluff. The query incorrectly places multiple numbers without operators between them, resulting in an unparsable section that SQLFluff will flag during linting.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/troubleshooting/how_to.rst#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect 1 2 3\nfrom my_table\n```\n\n----------------------------------------\n\nTITLE: Python String Templating Example\nDESCRIPTION: Demonstrates basic SQL templating using Python's string format syntax to create dynamic SQL queries by substituting variables.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/why_sqlfluff.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"SELECT {foo} FROM {tbl}\".format(foo=\"bar\", tbl=\"mytable\")\n```\n\n----------------------------------------\n\nTITLE: Including Templates in Jinja\nDESCRIPTION: Shows how to include external template files in a Jinja template using the include directive. The example demonstrates including a template from the configured search path.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/jinja.rst#2025-04-14_snippet_6\n\nLANGUAGE: Jinja\nCODE:\n```\n{% include 'included_templates/my_template.sql' %}\n```\n\n----------------------------------------\n\nTITLE: Manually Testing SQLFluff Against SQL Files\nDESCRIPTION: Command for manually testing SQLFluff against a SQL file, which is useful for verifying changes in a development environment.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsqlfluff parse test.sql\n```\n\n----------------------------------------\n\nTITLE: Using ReflowSequence class for SQL formatting\nDESCRIPTION: Reference to the ReflowSequence class which provides methods for reformatting sections of SQL code or entire files.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/internals/reflow.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nReflowSequence\n```\n\n----------------------------------------\n\nTITLE: Defining a Failing Query Test with Fix in YAML for SQLFluff\nDESCRIPTION: This snippet demonstrates how to create a test case for a failing query that includes the expected fixed version. It uses 'fail_str' for the original query and 'fix_str' for the corrected version.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/test/fixtures/rules/std_rule_cases/README.md#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndescriptive_test_name:\n  fail_str: select * FROM x\n  fix_str: select * from x\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Specific SQLFluff Rule\nDESCRIPTION: Command to run tests for a specific rule (e.g., RF01) using pytest's -k option to filter test cases by name.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/rules.rst#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npytest -vv test/rules/ -k RF01\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Array Accessor Implementation in SQLFluff\nDESCRIPTION: Python implementation of array accessor grammar in SQLFluff, showing the original implementation with limitations on numeric literals and slice expressions.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass ArrayAccessorSegment(ansi.ArrayAccessorSegment):\n    \"\"\"Overwrites Array Accessor in ANSI to allow n many consecutive brackets.\n\n    Postgres can also have array access like python [:2] or [2:] so\n    numbers on either side of the slice segment are optional.\n    \"\"\"\n\n    match_grammar = Sequence(\n        AnyNumberOf(\n            Bracketed(\n                Sequence(\n                    OneOf(\n                        OneOf(\n                            Ref(\"QualifiedNumericLiteralSegment\"),\n                            Ref(\"NumericLiteralSegment\"),\n                        ),\n                        Sequence(\n                            OneOf(\n                                Ref(\"QualifiedNumericLiteralSegment\"),\n                                Ref(\"NumericLiteralSegment\"),\n                                optional=True,\n                            ),\n                            Ref(\"SliceSegment\"),\n                            OneOf(\n                                Ref(\"QualifiedNumericLiteralSegment\"),\n                                Ref(\"NumericLiteralSegment\"),\n                            ),\n                        ),\n                        Sequence(\n                            OneOf(\n                                Ref(\"QualifiedNumericLiteralSegment\"),\n                                Ref(\"NumericLiteralSegment\"),\n                            ),\n                            Ref(\"SliceSegment\"),\n                            OneOf(\n                                Ref(\"QualifiedNumericLiteralSegment\"),\n                                Ref(\"NumericLiteralSegment\"),\n                                optional=True,\n                            ),\n                        ),\n                    ),\n                ),\n                bracket_type=\"square\",\n            )\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing SETOF Support in PostgreSQL Function Grammar\nDESCRIPTION: Adding support for the SETOF keyword in PostgreSQL function return types by expanding the parse grammar to include it as a valid return option alongside existing TABLE and basic datatype returns.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nparse_grammar = Sequence(\n   \"CREATE\",\n   Sequence(\"OR\", \"REPLACE\", optional=True),\n   Ref(\"TemporaryGrammar\", optional=True),\n   \"FUNCTION\",\n   Sequence(\"IF\", \"NOT\", \"EXISTS\", optional=True),\n   Ref(\"FunctionNameSegment\"),\n   Ref(\"FunctionParameterListGrammar\"),\n   Sequence(  # Optional function return type\n       \"RETURNS\",\n       OneOf(\n           Sequence(\n               \"TABLE\",\n               Bracketed(\n                   Delimited(\n                       OneOf(\n                           Ref(\"DatatypeSegment\"),\n                           Sequence(\n                               Ref(\"ParameterNameSegment\"), Ref(\"DatatypeSegment\")\n                           ),\n                       ),\n                       delimiter=Ref(\"CommaSegment\"),\n                   )\n               ),\n               optional=True,\n           ),\n           Sequence(\n               \"SETOF\",\n               Ref(\"DatatypeSegment\"),\n           ),\n           Ref(\"DatatypeSegment\"),\n       ),\n       optional=True,\n   ),\n   Ref(\"FunctionDefinitionGrammar\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing dbt Builtin Macros in SQLFluff\nDESCRIPTION: Configuration to customize builtin dbt macros for use in SQLFluff Jinja templating.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/dbt.rst#2025-04-14_snippet_4\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:templater:jinja:macros]\n# Macros provided as builtins for dbt projects\ndbt_ref = {% macro ref(model_ref) %}{{model_ref}}{% endmacro %}\ndbt_source = {% macro source(source_name, table) %}{{source_name}}_{{table}}{% endmacro %}\ndbt_config = {% macro config() %}{% for k in kwargs %}{% endfor %}{% endmacro %}\ndbt_var = {% macro var(variable, default='') %}item{% endmacro %}\ndbt_is_incremental = {% macro is_incremental() %}True{% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Running Single Dialect Test in SQLFluff\nDESCRIPTION: Commands to run a specific dialect test in SQLFluff, using tox or pytest directly. The example tests the Hive 'select_interval.sql' fixture.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ntox -e py39 -- -s test/dialects/dialects_test.py -k hive-select_interval.sql\n\npytest -s test/dialects/dialects_test.py -k hive-select_interval.sql\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Array Slice Test Query\nDESCRIPTION: Simple SQL test case demonstrating array slice syntax in PostgreSQL.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a[2:2+3];\n```\n\n----------------------------------------\n\nTITLE: Example SQLFluff Configuration File Format\nDESCRIPTION: Demonstrates the structure of a .sqlfluff configuration file that sets the capitalization policy for keywords to lowercase. This gets converted to a nested dictionary when used in the Python API.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/internals/config.rst#2025-04-14_snippet_1\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:rules:capitalisation.keywords]\ncapitalisation_policy = lower\n```\n\n----------------------------------------\n\nTITLE: Running SQLFluff Tests with Coverage Reporting\nDESCRIPTION: Command for running SQLFluff tests with coverage reporting, which initializes coverage tracking, runs tests in Python 3.9, and generates a coverage report.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntox -e generate-fixture-yml,cov-init,py39,cov-report,linting,mypy\n```\n\n----------------------------------------\n\nTITLE: Importing the ReflowSequence class in Python\nDESCRIPTION: Example of importing the ReflowSequence class from the sqlfluff.utils.reflow module for handling code formatting operations.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/internals/reflow.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsqlfluff.utils.reflow\n```\n\n----------------------------------------\n\nTITLE: Installing Tox for SQLFluff Development\nDESCRIPTION: Commands for installing Tox, which is used to set up development environments for SQLFluff. Python 3.9 is the minimum supported version, with testing available up to Python 3.13.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3.12 -m pip install -U tox\n```\n\n----------------------------------------\n\nTITLE: Defining SQLFluff Segment Structure\nDESCRIPTION: This code snippet illustrates the hierarchical structure of segments in SQLFluff, starting from FileSegment at the top level, which contains StatementSegments. It demonstrates how SQL is parsed into a tree-like structure.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/architecture.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass FileSegment:\n    def __init__(self):\n        self.statements = []\n\nclass StatementSegment:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running Full Test Suite in SQLFluff\nDESCRIPTION: Commands to run the full test suite, including coverage and linting, in SQLFluff using tox.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ntox -e py311\n\ntox -e generate-fixture-yml,cov-init,py311,cov-report,linting\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ambiguous SQL Formatting\nDESCRIPTION: This snippet shows an example of poorly formatted SQL code that could be interpreted as either a hanging indent or a traditional indent, highlighting the ambiguity SQLFluff aims to resolve.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/layout.rst#2025-04-14_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\n   SELECT   this_is,\n   badly_formatted, code_and,\n      not_obvious,\n         what_was,\n   intended FROM my_table\n```\n\n----------------------------------------\n\nTITLE: Running Targeted SQLFluff Tests with Tox\nDESCRIPTION: Commands showing how to run specific test environments for development purposes, including examples with Python 3.9, linting, and mypy type checking.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntox -e generate-fixture-yml,py39,linting,mypy\n```\n\n----------------------------------------\n\nTITLE: Running Rule Autofix Tests with Tox\nDESCRIPTION: Command to run the standard rule autofix tests using tox, which is useful when working with rules that have interactions with other rules.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ntox -e py39 -- test/rules/std_fix_auto_test.py\n```\n\n----------------------------------------\n\nTITLE: Merging Changes from Upstream Main into Working Branch\nDESCRIPTION: Sequence of commands to update a branch with changes from the upstream main branch, ensuring your code stays compatible with the latest SQLFluff codebase.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/git.rst#2025-04-14_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit merge upstream/main\ngit commit -a\ngit push\n```\n\n----------------------------------------\n\nTITLE: Defining JoinOnConditionSegment with Match Grammar Only\nDESCRIPTION: Example of a segment that only requires match_grammar without a separate parse_grammar, used for the ON condition within JOIN clauses.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass JoinOnConditionSegment(BaseSegment):\n    \"\"\"The `ON` condition within a `JOIN` clause.\"\"\"\n\n    type = \"join_on_condition\"\n    match_grammar = Sequence(\n        \"ON\",\n        Indent,\n        OptionallyBracketed(Ref(\"ExpressionSegment\")),\n        Dedent,\n    )\n```\n\n----------------------------------------\n\nTITLE: Enabling Individual Rules in SQLFluff Configuration\nDESCRIPTION: Example showing how to enable a specific rule (RF02) using the rules parameter in the SQLFluff configuration file. This explicitly includes only the specified rule.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/rule_configuration.rst#2025-04-14_snippet_3\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff]\nrules = RF02\n```\n\n----------------------------------------\n\nTITLE: Running Rule Autofix Tests with pytest\nDESCRIPTION: Direct pytest command to run standard rule autofix tests without tox, for faster iteration during development.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\npytest test/rules/std_fix_auto_test.py\n```\n\n----------------------------------------\n\nTITLE: Defining SQLFluff LintResult Class\nDESCRIPTION: This code snippet shows the import of the LintResult class from SQLFluff's core rules module. LintResult is used by the linter to report rule violations found during the analysis of the SQL parse tree.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/architecture.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlfluff.core.rules.base import LintResult\n```\n\n----------------------------------------\n\nTITLE: Generating YAML Fixture Files for All Dialects in SQLFluff\nDESCRIPTION: Command to regenerate YAML parse tree files for all SQL test fixtures in SQLFluff. This is used to verify parsing changes across dialects.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ntox -e generate-fixture-yml\n```\n\n----------------------------------------\n\nTITLE: Running CLI Tests with Tox\nDESCRIPTION: Command to run the CLI-specific test suite using tox, which is useful when making changes to the SQLFluff CLI module.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ntox -e py39 -- test/cli\n```\n\n----------------------------------------\n\nTITLE: Utilizing ReflowBlock in SQLFluff\nDESCRIPTION: Reference to the ReflowBlock class which is part of the reflow elements module used for handling blocks in SQL code formatting.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/internals/reflow.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsqlfluff.utils.reflow.elements.ReflowBlock\n```\n\n----------------------------------------\n\nTITLE: Generating YAML Fixture Files for Specific Dialect in SQLFluff\nDESCRIPTION: Command to regenerate YAML parse tree files for a specific dialect or only for new and changed SQL test fixtures in SQLFluff.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ntox -e generate-fixture-yml -- --dialect postgres\ntox -e generate-fixture-yml -- --new-only\n```\n\n----------------------------------------\n\nTITLE: Structuring Rule Plugin Imports\nDESCRIPTION: SQLFluff 2.2 recommends structuring rule plugin imports to improve performance. Rules should be defined in a separate module and imported within the get_rules() method.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/releasenotes.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlfluff.core.plugin import hookimpl\n\n@hookimpl\ndef get_rules():\n    from .rules import MyCustomRule\n    return [MyCustomRule]\n```\n\n----------------------------------------\n\nTITLE: Running Templater Tests with Tox\nDESCRIPTION: Command to run the templater-specific test suite using tox, which is useful when making changes to the SQLFluff templater module.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ntox -e py39 -- test/core/templaters\n```\n\n----------------------------------------\n\nTITLE: Working with ReflowPoint in SQLFluff\nDESCRIPTION: Reference to the ReflowPoint class which is part of the reflow elements module used for SQL code formatting.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/internals/reflow.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsqlfluff.utils.reflow.elements.ReflowPoint\n```\n\n----------------------------------------\n\nTITLE: Running Parser Tests with Pytest for SQLFluff\nDESCRIPTION: Command to run just the parser tests instead of the full test suite. This targets only the dialect tests, saving time during parser development.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/test/fixtures/dialects/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest test/dialects/dialects_test.py\n```\n\n----------------------------------------\n\nTITLE: Running Parser Grammar Tests with Tox\nDESCRIPTION: Command to run the grammar-specific parser tests using tox, which is the first step when making changes to SQLFluff's parser module.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ntox -e py39 -- test/core/parser/grammar_test.py\n```\n\n----------------------------------------\n\nTITLE: Complex SQLFluff Configuration\nDESCRIPTION: Shows the configuration setup for Python templater with complex dictionary-based variable substitution.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/python.rst#2025-04-14_snippet_4\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:templater:python:context]\nsqlfluff = {\"foo.bar\": \"abc\"}\n```\n\n----------------------------------------\n\nTITLE: Running MySQL-specific Dialect Tests with Tox\nDESCRIPTION: Commands to run MySQL-specific dialect tests using tox, which is useful when making changes to dialect files in SQLFluff.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ntox -e generate-fixture-yml -- -d mysql\n```\n\n----------------------------------------\n\nTITLE: Defining NotOperatorGrammar in ANSI SQL\nDESCRIPTION: Example of a grammar definition in the ANSI dialect that can be overridden by other dialects.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nNotOperatorGrammar=StringParser(\"NOT\", KeywordSegment, type=\"keyword\")\n```\n\n----------------------------------------\n\nTITLE: Running dbt Templater Tests\nDESCRIPTION: Command to run the dbt-related tests with code coverage reporting, which requires a locally running Postgres instance with specific connection parameters.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ntox -e cov-init,dbt019-py39,cov-report-dbt -- plugins/sqlfluff-templater-dbt\n```\n\n----------------------------------------\n\nTITLE: Switching Git branches in SQLFluff development\nDESCRIPTION: Commands for switching between Git branches during SQLFluff development. These commands allow developers to move between feature branches when working on multiple features simultaneously.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/git.rst#2025-04-14_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout feature1\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout feature2\n```\n\n----------------------------------------\n\nTITLE: Running Rule-specific YAML Tests with Tox\nDESCRIPTION: Command to run tests for a specific rule (in this case AL01) using the YAML test cases and tox. Useful when developing or modifying individual rules.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ntox -e py39 -- test/rules/yaml_test_cases_test.py -k AL01\n```\n\n----------------------------------------\n\nTITLE: Running SQLFluff Tests from Specific Directories or Files\nDESCRIPTION: Commands showing how to run tests from specific directories or files using Tox, which is useful for focusing on relevant tests during development.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ntox -e py39 -- test/cli\ntox -e py39 -- test/cli/commands_test.py\n```\n\n----------------------------------------\n\nTITLE: Alternative Git Commit Workflow with Explicit Message\nDESCRIPTION: Sequence of commands for a Git workflow that avoids using vi by specifying the commit message directly in the command line.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/git.rst#2025-04-14_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit status\ngit add file1 file2\ngit commit -m \"Committing file1 and file2\"\n```\n\n----------------------------------------\n\nTITLE: Running Rule-specific YAML Tests with pytest\nDESCRIPTION: Direct pytest command to run tests for a specific rule using YAML test cases without tox, for faster iteration during rule development.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\npytest test/rules/yaml_test_cases_test.py -k AL01\n```\n\n----------------------------------------\n\nTITLE: Configuring Positional Parameters in SQLFluff\nDESCRIPTION: Example of configuring positional parameters (like question marks) in SQLFluff by assigning values based on their order of appearance.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/placeholder.rst#2025-04-14_snippet_4\n\nLANGUAGE: cfg\nCODE:\n```\n[sqlfluff:templater:placeholder]\nparam_style = question_mark\n1 = 'john'\n```\n\n----------------------------------------\n\nTITLE: Running MySQL-specific Dialect Tests with Python\nDESCRIPTION: Direct Python command to run MySQL-specific dialect tests without using tox, useful for faster iteration when developing dialect support.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npython test/generate_parse_fixture_yml.py -d mysql\n```\n\n----------------------------------------\n\nTITLE: Specifying dbt package dependencies for SQLFluff\nDESCRIPTION: Lists the dbt packages required by SQLFluff with version constraints. It specifies dbt-core and dbt-postgres both with version 1.5.0 or compatible versions as indicated by the tilde operator.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/constraints/dbt150.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndbt-core~=1.5.0\ndbt-postgres~=1.5.0\n```\n\n----------------------------------------\n\nTITLE: Referencing Code Snippets in reStructuredText\nDESCRIPTION: Examples of how to format and reference code snippets in SQLFluff documentation using reStructuredText syntax\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/docs.rst#2025-04-14_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:code:`*text with single asterisks*`\n```\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:code:`**double asterisks**`\n```\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:code:`:ref:`\n```\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:code:`postgres_dialect_ref`\n```\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:sqlfluff:ref:`LT01`\n```\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:sqlfluff:ref:`layout.spacing`\n```\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:py:class:`sqlfluff.core.rules.base.BaseRule`\n```\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:py:class:`~sqlfluff.core.rules.base.BaseRule`\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-Commit Hooks with Tox\nDESCRIPTION: Command to install pre-commit hooks using tox, which helps identify and fix potential linting/typing violations before committing code.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ntox -e pre-commit -- install\n```\n\n----------------------------------------\n\nTITLE: Specifying dbt Package Requirements for Python Project\nDESCRIPTION: Lists the required dbt packages and their version constraints. Uses the tilde-equals operator (~=) to specify minimum version requirements with compatibility for patch version updates. Both packages require version 1.9.0 beta 1.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/constraints/dbt190-winpy.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndbt-core~=1.9.0b1\ndbt-postgres~=1.9.0b1\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText for SQLFluff Reference Documentation\nDESCRIPTION: A reStructuredText directive that creates a table of contents with a maximum depth of 2 levels, linking to various sections of the SQLFluff documentation including dialects, rules, CLI, API, internals, and release notes.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   dialects\n   rules\n   cli\n   api\n   internals/index\n   releasenotes\n```\n\n----------------------------------------\n\nTITLE: Running Specific Dialect Tests in SQLFluff\nDESCRIPTION: Commands to run tests for a specific dialect or a specific rule in SQLFluff using tox.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ntox -e py39 -- test/dialects/dialects_test.py -k ansi\n\ntox -e py39 -- -k LT01 test\n```\n\n----------------------------------------\n\nTITLE: Running Release Script for SQLFluff\nDESCRIPTION: Command to run the release script for preparing a new SQLFluff release, including setting up the environment variables and running the script with a specific version number.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nsource .venv/bin/activate\nexport GITHUB_REPOSITORY_OWNER=sqlfluff\nexport GITHUB_TOKEN=gho_xxxxxxxx # Change to your token with \"repo\" permissions.\npython util.py release 2.0.3 # Change to your release number\n```\n\n----------------------------------------\n\nTITLE: Generating CLI Reference with Sphinx and Click\nDESCRIPTION: Uses Sphinx's click directive to automatically generate documentation for the SQLFluff CLI. The directive points to the cli function in the sqlfluff.cli.commands module and shows all nested commands.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/cli.rst#2025-04-14_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. click:: sqlfluff.cli.commands:cli\n   :prog: sqlfluff\n   :show-nested:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Reference to SQLFluff Rules Base Module\nDESCRIPTION: ReStructuredText directive to automatically generate API documentation for the sqlfluff.core.rules.base module and its members.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/internals/rules.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:code:`sqlfluff.core.rules.base`: Base Rule Classes\n---------------------------------------------------\n\n.. automodule:: sqlfluff.core.rules.base\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Building SQLFluff Documentation with Tox\nDESCRIPTION: Uses Tox to run the docbuild and doclinting environments to generate the documentation website. This automates the process of building and linting the documentation.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntox -e docbuild,doclinting\n```\n\n----------------------------------------\n\nTITLE: RST Module Reference - SQLFluff Raw File Slices\nDESCRIPTION: ReStructuredText directive for auto-documenting the raw_file_slices module which handles raw file slice operations.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/internals/functional.rst#2025-04-14_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: sqlfluff.utils.functional.raw_file_slices\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Example diff-quality Output with SQLFluff Violations\nDESCRIPTION: Sample console output showing what diff-quality produces when using SQLFluff. It shows the file with violations, the line numbers affected, description of the issues, and a summary of code quality statistics.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/production/diff_quality.rst#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-------------\nDiff Quality\nQuality Report: sqlfluff\nDiff: origin/master...HEAD, staged and unstaged changes\n-------------\nsql/audience_size_queries/constraints/_postcondition_check_gdpr_compliance.sql (0.0%):\nsql/audience_size_queries/constraints/_postcondition_check_gdpr_compliance.sql:5: Unquoted Identifiers must be consistently upper case.\n-------------\nTotal:   1 line\nViolations: 1 line\n% Quality: 0%\n-------------\n```\n\n----------------------------------------\n\nTITLE: Cleaning the Documentation Build with Make\nDESCRIPTION: Forces a clean build of the documentation using Make when configuration changes have been made. The command can be run from the project root directory or within the docs directory.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake -C docs clean\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration Reference in RST\nDESCRIPTION: RST directive for referencing the rule configuration documentation section.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/rules.rst#2025-04-14_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n:ref:`ruleconfig`\n```\n\n----------------------------------------\n\nTITLE: Specifying SQLFluff Project Dependencies\nDESCRIPTION: This snippet lists all the required dependencies for the SQLFluff project, categorized by their purpose. It includes version specifications and notes for certain packages.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/requirements_dev.txt#2025-04-14_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n# NOTE: Install with -U to keep all requirements up-to-date.\n\n# code linting and formatting\n# ---------------------------\nflake8\nflake8-docstrings\npydocstyle!=6.2.0, !=6.2.1  # See: https://github.com/PyCQA/pydocstyle/issues/618\nblack>=22.1.0\nflake8-black>=0.2.4\nruff\nimport-linter\nyamllint\n\n# documentation checks\n# --------------------\ndoc8\nPygments\n\n# python testing\n# --------------\ncoverage>=6.4\nhypothesis\npytest\npytest-cov\npytest-xdist\n\n# MyPy\n# ----\n# `types-*` dependencies here should be the same as in `.pre-commit-config.yaml`.\n# If you update these dependencies, make sure to update those too.\nmypy[mypyc]\ntypes-toml\ntypes-chardet\ntypes-appdirs\ntypes-colorama\ntypes-pyyaml\ntypes-regex\ntypes-tqdm\n\n# util.py dependencies\n# ----\nrequests\nghapi\n```\n\n----------------------------------------\n\nTITLE: Building SQLFluff Documentation Manually from Docs Directory\nDESCRIPTION: A set of manual commands to build the documentation without using Tox. These commands should be run from the docs directory after setting up the Python environment as detailed in CONTRIBUTING.md.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd docs\npip install -r requirements.txt\nmake html\npython -m http.server --directory build/html\n```\n\n----------------------------------------\n\nTITLE: Ignore Configuration Reference in RST\nDESCRIPTION: RST directive for referencing the ignore configuration documentation section.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/rules.rst#2025-04-14_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n:ref:`ignoreconfig`\n```\n\n----------------------------------------\n\nTITLE: Checking Git Version on Command Line\nDESCRIPTION: A simple command to verify if Git is installed on your system and check its version. This is the first step before starting to work with Git on a local machine.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/git.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit --version\n```\n\n----------------------------------------\n\nTITLE: Core Rule Group Reference in RST\nDESCRIPTION: Demonstrates the RST syntax for referencing the core rule group designation used in SQLFluff. Core rules must be stable, applicable to most dialects, capable of detecting syntax issues, and not overly opinionated.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/rules.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:code:`core`\n```\n\n----------------------------------------\n\nTITLE: Building SQLFluff Documentation Manually from Root Directory\nDESCRIPTION: Alternative manual commands to build the documentation from the project root directory. This approach installs requirements and uses Make to generate the HTML documentation.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/README.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install -r docs/requirements.txt\nmake -C docs html\npython -m http.server --directory docs/build/html\n```\n\n----------------------------------------\n\nTITLE: Configuration Section Reference in RST\nDESCRIPTION: RST directive for referencing the general configuration documentation section.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/rules.rst#2025-04-14_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n:ref:`config`\n```\n\n----------------------------------------\n\nTITLE: Working on Multiple Branches Simultaneously\nDESCRIPTION: Workflow example for switching between multiple feature branches, ensuring clean transitions and proper branch creation from the main branch.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/git.rst#2025-04-14_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# Check your branch is clean and everything has been committed\ngit status\n# Create a new branch from main (note I've not included the resyncing of main to upstream here for forks)\ngit checkout main\ngit pull\ngit checkout -b feature2\n# Make some changes and push your new branch to GitHub\ngit commit -m \"Commit some changes for feature2\"\ngit push --set-upstream origin feature2\n# Make some more changes and push those too\ngit commit -m \"Commit more changes for feature2\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Specifying Documentation Dependencies for SQLFluff\nDESCRIPTION: This requirements file lists all necessary Python packages for building the SQLFluff documentation, including Sphinx (version 2.4.1 or higher), Pygments (version 2.13.0 or higher, which added SQL+Jinja syntax support), sphinx-click for CLI documentation, sphinx-reredirects for handling redirects, doc8 for linting documentation, and tqdm for progress tracking.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/requirements.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Requirements for building docs\nsphinx>=2.4.1\n# 2.13.0 added the sql+jinja syntax\npygments>=2.13.0\nsphinx-click\nsphinx-reredirects\ndoc8\ntqdm\n```\n\n----------------------------------------\n\nTITLE: RST Backticks HTML Definition\nDESCRIPTION: RST directive that defines an HTML representation of double backticks to be used in dialect documentation for showing backtick quote behavior.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/dialects.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. |back_quotes| raw:: html\n\n    <code class=\"code docutils literal notranslate\">``</code>\n```\n\n----------------------------------------\n\nTITLE: Viewing Parse Tree Output with Unparsable Sections\nDESCRIPTION: Shows the detailed parse tree output from SQLFluff when encountering an error. The highlighted lines indicate the unparsable section of the query where SQLFluff cannot interpret the SQL structure.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/troubleshooting/how_to.rst#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[L:  1, P:  1]      |file:\n[L:  1, P:  1]      |    statement:\n[L:  1, P:  1]      |        select_statement:\n[L:  1, P:  1]      |            select_clause:\n[L:  1, P:  1]      |                keyword:                                      'select'\n[L:  1, P:  7]      |                [META] indent:\n[L:  1, P:  7]      |                whitespace:                                   ' '\n[L:  1, P:  8]      |                select_clause_element:\n[L:  1, P:  8]      |                    numeric_literal:                          '1'\n[L:  1, P:  9]      |                [META] dedent:\n[L:  1, P:  9]      |                whitespace:                                   ' '\n[L:  1, P: 10]      |                unparsable:                                   !! Expected: 'Nothing here.'\n[L:  1, P: 10]      |                    numeric_literal:                          '2'\n[L:  1, P: 11]      |                    whitespace:                               ' '\n[L:  1, P: 12]      |                    numeric_literal:                          '3'\n[L:  1, P: 13]      |            newline:                                          '\\n'\n[L:  2, P:  1]      |            from_clause:\n[L:  2, P:  1]      |                keyword:                                      'from'\n[L:  2, P:  5]      |                whitespace:                                   ' '\n[L:  2, P:  6]      |                from_expression:\n[L:  2, P:  6]      |                    [META] indent:\n[L:  2, P:  6]      |                    from_expression_element:\n[L:  2, P:  6]      |                        table_expression:\n[L:  2, P:  6]      |                            table_reference:\n[L:  2, P:  6]      |                                naked_identifier:             'my_table'\n[L:  2, P: 14]      |                    [META] dedent:\n[L:  2, P: 14]      |    newline:                                                  '\\n'\n[L:  3, P:  1]      |    [META] end_of_file:\n```\n\n----------------------------------------\n\nTITLE: Specifying dbt Dependencies for SQLFluff\nDESCRIPTION: Defines the required dbt-related Python packages and their version constraints for use with SQLFluff. It specifies dbt-core and dbt-postgres, both pinned to approximately version 1.8.0 using the '~=' operator.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/constraints/dbt180.txt#2025-04-14_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\ndbt-core~=1.8.0\ndbt-postgres~=1.8.0\n```\n\n----------------------------------------\n\nTITLE: RST Module Reference - SQLFluff Raw File Slice Predicates\nDESCRIPTION: ReStructuredText directive for auto-documenting the raw_file_slice_predicates module which contains predicate functions for raw file slice filtering and matching.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/internals/functional.rst#2025-04-14_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: sqlfluff.utils.functional.raw_file_slice_predicates\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Specifying dbt Dependencies with Version Constraints\nDESCRIPTION: This configuration specifies required dbt packages with version constraints. It requires dbt-core and dbt-postgres, both compatible with version 1.8.0 or minor updates within the 1.8.x range.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/constraints/dbt180-winpy.txt#2025-04-14_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\ndbt-core~=1.8.0\ndbt-postgres~=1.8.0\n```\n\n----------------------------------------\n\nTITLE: Referencing Code in reStructuredText\nDESCRIPTION: This snippet demonstrates how to reference code inline within reStructuredText documentation. It uses the :code: directive to format text as code.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/inthewild.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:code:`code`\n```\n\n----------------------------------------\n\nTITLE: Complete Branch Management Workflow Example\nDESCRIPTION: Comprehensive example demonstrating a workflow for creating, committing to, and pushing changes to a feature branch, including the proper command for first-time pushes.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/git.rst#2025-04-14_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\ngit pull\ngit checkout -b feature1\n# Make some changes\ngit commit -m \"Commit my changes for feature1\"\n# Make some more changes\ngit commit -m \"Commit some more changes for feature1\"\n# Push changes to Github.com if you want to (always good to do this in case your computer dies!)\ngit push\n# Note the first time you push a new branch you will need a slightly different push comment:\n# `git push --set-upstream origin feature1`\n# Helpfully, git will tell you this if you try using just `git push`.\n```\n\n----------------------------------------\n\nTITLE: Specifying dbt Package Requirements with Version Constraints\nDESCRIPTION: This requirements specification defines dbt-core and dbt-postgres packages with version constraints using tilde notation (~=). The tilde indicates that patch version updates are allowed, but minor and major versions must match exactly.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/constraints/dbt160.txt#2025-04-14_snippet_0\n\nLANGUAGE: requirements.txt\nCODE:\n```\ndbt-core~=1.6.0\ndbt-postgres~=1.6.0\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Header and Navigation\nDESCRIPTION: Sets up the structure for SQLFluff's production usage documentation using ReStructuredText directives, including section references and table of contents.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/production/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _production-use:\n\nProduction Usage & Security\n===========================\n\nSQLFluff is designed to be used both as a utility for developers but also to\nbe part of `CI/CD`_ pipelines.\n\n.. _`CI/CD`: https://en.wikipedia.org/wiki/Continuous_integration\n\n.. toctree::\n   :maxdepth: 2\n\n   security\n   cli_use\n   diff_quality\n   pre_commit\n   github_actions\n```\n\n----------------------------------------\n\nTITLE: DBT Core and Postgres Package Dependencies\nDESCRIPTION: Specifies the required versions of dbt-core and dbt-postgres packages using the tilde-equals operator (~=) to allow patch version updates while maintaining minor version compatibility.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/constraints/dbt150-winpy.txt#2025-04-14_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\ndbt-core~=1.5.0\ndbt-postgres~=1.5.0\n```\n\n----------------------------------------\n\nTITLE: Adding Rule Configuration to a Test Case in YAML for SQLFluff\nDESCRIPTION: This snippet shows how to include additional rule configuration for a test case. It uses the 'configs' key to specify rule-specific settings, such as disabling the 'only_aliases' option for the 'references.keywords' rule.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/test/fixtures/rules/std_rule_cases/README.md#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntest_keyword_as_identifier:\n  fail_str: SELECT parameter\n\n  configs:\n    rules:\n      references.keywords:\n        only_aliases: false\n```\n\n----------------------------------------\n\nTITLE: Using Custom Jinja Filter in SQL Query\nDESCRIPTION: Demonstrates using the 'ds' custom filter in an SQL query to format a date string. The filter is applied to the string '2000-01-01'.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/jinja.rst#2025-04-14_snippet_4\n\nLANGUAGE: SQL+Jinja\nCODE:\n```\nSELECT \"{{ \"2000-01-01\" | ds }}\";\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLFluff with pyproject.toml\nDESCRIPTION: SQLFluff 3.x migrates to using pyproject.toml instead of setup.cfg for Python packaging configuration, while keeping setuptools as the default backend.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/releasenotes.rst#2025-04-14_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\npyproject.toml\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Jinja Template Variables\nDESCRIPTION: Example SQL file with Jinja template placeholders for variables. Shows how variables like num_things and tbl_name can be used within SQL queries.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: SQL+Jinja\nCODE:\n```\nSELECT {{ num_things }} FROM {{ tbl_name }} WHERE id > 10 LIMIT 5\n```\n\n----------------------------------------\n\nTITLE: Rendered SQL Output\nDESCRIPTION: Shows the final SQL after template processing with the variable substituted.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/templating/python.rst#2025-04-14_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM my_table\n```\n\n----------------------------------------\n\nTITLE: Force Resetting Local Main Branch to Upstream\nDESCRIPTION: Sequence of commands to completely reset your local main branch to match upstream, discarding all local changes.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/git.rst#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit checkout main\ngit reset --hard upstream/main\ngit push origin main --force\n```\n\n----------------------------------------\n\nTITLE: Merging Changes from Local Main into Working Branch\nDESCRIPTION: Sequence of commands to update a branch with changes from the local main branch when working directly on the main repository.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/git.rst#2025-04-14_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch origin main\ngit merge main\ngit commit -a\ngit push\n```\n\n----------------------------------------\n\nTITLE: Cloning a Forked Git Repository\nDESCRIPTION: This command clones a forked version of the SQLFluff repository to your local machine. Replace 'tunetheweb' with your GitHub username.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/git.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.tunetheweb/sqlfluff.git\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote to Git Repository\nDESCRIPTION: This command adds a link to the upstream SQLFluff repository in your local Git configuration. It allows you to fetch changes from the original repository.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/git.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream git@github.com:sqlfluff/sqlfluff.git\n```\n\n----------------------------------------\n\nTITLE: Adding SQLFluff Upstream Remote\nDESCRIPTION: Command to add the SQLFluff main repository as an upstream remote if not already present.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/git.rst#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream git@github.com:sqlfluff/sqlfluff.git\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents Configuration\nDESCRIPTION: Defines a table of contents tree for SQLFluff configuration documentation using ReStructuredText directives. Sets maximum depth to 2 and lists configuration-related pages.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   setting_configuration\n   rule_configuration\n   layout\n   templating/index\n   ignoring_configuration\n   default_configuration\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository using SSH\nDESCRIPTION: This command clones the SQLFluff repository to your local machine using SSH. It creates a local copy of the repository that you can work on.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/git.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:sqlfluff/sqlfluff.git\n```\n\n----------------------------------------\n\nTITLE: Example Query with Table Named 'group'\nDESCRIPTION: SQL query that previously failed to parse because it uses a table named 'group', which was erroneously identified as a clause terminator before the grammar fix.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect 1 from group\n```\n\n----------------------------------------\n\nTITLE: Checking Git Remote Configuration\nDESCRIPTION: Command to check if the upstream remote already exists in your Git configuration.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/git.rst#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: SQL Block Comment Formatting\nDESCRIPTION: Example demonstrating how block comments should be formatted in SQL, including alignment and indentation rules.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/configuration/layout.rst#2025-04-14_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n   /* This is a block comment starting on a new line\n   which contains a newline (continuing with at least\n   the same indent.\n      - potentially containing greater indents\n      - having no other code following it in the same line\n      - and aligned with the line of code following it */\n   this_column as what_we_align_the_column_to\nFROM my_table\n```\n\n----------------------------------------\n\nTITLE: Committing All Changes with Inline Message\nDESCRIPTION: Command to commit all tracked files with changes while providing the commit message directly on the command line, avoiding vi editor.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/git.rst#2025-04-14_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit status\ngit commit -a -m \"Committing all open files\"\n```\n\n----------------------------------------\n\nTITLE: Running dbt Templater Tests in Docker Container\nDESCRIPTION: Command to run dbt templater tests inside a Docker container, after starting up the Docker Compose environment with the provided scripts.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/CONTRIBUTING.md#2025-04-14_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\npy.test -v plugins/sqlfluff-templater-dbt/test/\n```\n\n----------------------------------------\n\nTITLE: Specifying dbt Core and Postgres Package Requirements\nDESCRIPTION: Defines the required versions of dbt Core and dbt Postgres packages using pip's compatible release operator (~=). Both packages are specified to use version 1.9.0 beta 1 or compatible versions.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/constraints/dbt190.txt#2025-04-14_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\ndbt-core~=1.9.0b1\ndbt-postgres~=1.9.0b1\n```\n\n----------------------------------------\n\nTITLE: RST Module Reference - SQLFluff Segments\nDESCRIPTION: ReStructuredText directive for auto-documenting the segments module which contains core segment manipulation functionality.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/internals/functional.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: sqlfluff.utils.functional.segments\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Committing All Changes in Git\nDESCRIPTION: Command for committing all tracked files with changes, which opens the default editor for commit message entry.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/git.rst#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -a\n```\n\n----------------------------------------\n\nTITLE: Rule Selection Configuration Reference in RST\nDESCRIPTION: RST directive for referencing the rule selection configuration documentation section.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/rules.rst#2025-04-14_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n:ref:`ruleselection`\n```\n\n----------------------------------------\n\nTITLE: DBT Style Guide Reference in RST\nDESCRIPTION: Shows the RST syntax for referencing the dbt style guide as an example of opinionated styling that would not qualify for core rule designation.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/rules.rst#2025-04-14_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n:code:`dbt`\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Bison Grammar - Function Arguments Definition\nDESCRIPTION: Example of recursive bison grammar defining bracketed comma-delimited function arguments, demonstrating why SQLFluff's high-level constructs are preferred over recursion.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/dialect.rst#2025-04-14_snippet_11\n\nLANGUAGE: bison\nCODE:\n```\nfunc_args:\t'(' func_args_list ')'              { $$ = $2; }\n                | '(' ')'                           { $$ = NIL; }\n            ;\n\n    func_args_list:\n                func_arg                            { $$ = list_make1($1); }\n                | func_args_list ',' func_arg       { $$ = lappend($1, $3); }\n            ;\n```\n\n----------------------------------------\n\nTITLE: Importing SQLFluff RawSegment Class\nDESCRIPTION: This snippet shows the import of the RawSegment class from SQLFluff, which is a core component used in the lexing stage to represent typed segments of SQL code.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/guides/contributing/architecture.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlfluff.core import RawSegment\n```\n\n----------------------------------------\n\nTITLE: RST Module Reference - SQLFluff Segment Predicates\nDESCRIPTION: ReStructuredText directive for auto-documenting the segment_predicates module which contains predicate functions for segment filtering and matching.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/reference/internals/functional.rst#2025-04-14_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: sqlfluff.utils.functional.segment_predicates\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Serving Documentation Locally with Python HTTP Server\nDESCRIPTION: Starts a simple HTTP server to serve the built documentation locally. After running this command, the documentation can be accessed by navigating to http://127.0.0.1:8000/ in a web browser.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m http.server --directory docs/build/html\n```\n\n----------------------------------------\n\nTITLE: Basic SQL SELECT Query for Extension Testing\nDESCRIPTION: A minimal SQL query that selects the literal value 1. This simple query is used as a test case to verify SQLFluff's ability to discover and process files with configured extensions.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/test/fixtures/linter/discovery_file.txt#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- This is a text file to test discovery of configured file extensions.\nSELECT 1\n```\n\n----------------------------------------\n\nTITLE: Specifying DBT Dependencies with Version Constraints in pip\nDESCRIPTION: This snippet defines dependencies on dbt-core and dbt-postgres, both constrained to version 1.4.1 or compatible newer patch versions using the tilde (~) version specifier. These are likely used for SQLFluff's integration with DBT projects for SQL linting and formatting.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/constraints/dbt140.txt#2025-04-14_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\ndbt-core~=1.4.1\ndbt-postgres~=1.4.1\n```\n\n----------------------------------------\n\nTITLE: Generating Parse Fixture YAML Files with Tox and Arguments for SQLFluff\nDESCRIPTION: Using Tox with arguments to run the YAML fixture generation script. This allows passing arguments to the underlying script, such as filtering by specific dialect.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/test/fixtures/dialects/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntox -e generate-fixture-yml -- --dialect <dialect>\n```\n\n----------------------------------------\n\nTITLE: Resulting SQL Query\nDESCRIPTION: Shows the SQL query that results from evaluating the Python string template with the provided variables.\nSOURCE: https://github.com/sqlfluff/sqlfluff/blob/main/docs/source/why_sqlfluff.rst#2025-04-14_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT bar FROM mytable\n```"
  }
]