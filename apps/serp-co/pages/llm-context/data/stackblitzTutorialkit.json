[
  {
    "owner": "stackblitz",
    "repo": "tutorialkit",
    "content": "TITLE: Defining I18nText Type for TutorialKit Localization in TypeScript\nDESCRIPTION: This type definition outlines the structure for customizing UI text elements in TutorialKit. It allows for localization of various interface components including navigation elements, editor labels, button text, and system messages.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype I18nText = {\n  /**\n   * Template on how to format a part. Variables: ${index} and ${title}.\n   *\n   * @default 'Part ${index}: ${title}'\n   */\n  partTemplate?: string,\n\n  /**\n   * Text of the edit page link.\n   *\n   * @default 'Edit this page'\n   */\n  editPageText?: string,\n\n  /**\n   * Text of the WebContainer link.\n   *\n   * @default 'Powered by WebContainers'\n   */\n  webcontainerLinkText?: string,\n\n  /**\n   * Text shown on the call to action button to start webcontainer when boot was blocked\n   * due to memory restrictions.\n   *\n   * @default 'Start WebContainer'\n   */\n  startWebContainerText?: string,\n\n  /**\n   * Text shown in the preview section when there are no steps to run and no preview to show.\n   *\n   * @default 'No preview to run nor steps to show'\n   */\n  noPreviewNorStepsText?: string,\n\n  /**\n   * Text shown on top of the file tree.\n   *\n   * @default 'Files'\n   */\n  filesTitleText?: string,\n\n  /**\n   * Text shown on file tree's context menu's file creation button.\n   *\n   * @default 'Create file'\n   */\n  fileTreeCreateFileText?: string,\n\n  /**\n   * Text shown on file tree's context menu's folder creation button.\n   *\n   * @default 'Create folder'\n   */\n  fileTreeCreateFolderText?: string,\n\n  /**\n   * Text shown on dialog when user attempts to edit files that don't match allowed patterns.\n   *\n   * @default 'This action is not allowed'\n   */\n  fileTreeActionNotAllowedText?: string,\n\n  /**\n   * Text shown on dialog when user attempts create file or folder that already exists on filesystem but is not visible on file tree, e.g. template files.\n   *\n   * @default 'File exists on filesystem already'\n   */\n  fileTreeFileExistsAlreadyText?: string,\n\n  /**\n   * Text shown on dialog describing allowed patterns when file or folder creation failed.\n   *\n   * @default 'Created files and folders must match following patterns:'\n   */\n  fileTreeAllowedPatternsText?: string,\n\n  /**\n   * Text shown on confirmation buttons on dialogs.\n   *\n   * @default 'OK'\n   */\n  confirmationText?: string,\n\n  /**\n   * Text shown on top of the steps section.\n   *\n   * @default 'Preparing Environment'\n   */\n  prepareEnvironmentTitleText?: string,\n\n  /**\n   * Text shown on top of the preview section when `previews[_].title` is not configured.\n   *\n   * @default 'Preview'\n   */\n  defaultPreviewTitleText?: string,\n\n  /**\n   * Title attribute for the preview reload button.\n   *\n   * @default 'Reload Preview'\n   */\n  reloadPreviewTitle?: string,\n\n  /**\n   * Text for the toggle terminal button.\n   *\n   * @default 'Toggle Terminal'\n   */\n  toggleTerminalButtonText?: string,\n\n  /**\n   * Text for the solve button.\n   *\n   * @default 'Solve'\n   */\n  solveButtonText?: string,\n\n  /**\n   * Text for the reset button.\n   *\n   * @default 'Reset'\n   */\n  resetButtonText?: string,\n}\n```\n\n----------------------------------------\n\nTITLE: Editor Document Interface Definition\nDESCRIPTION: Defines the TypeScript interface for editor documents in TutorialKit, representing files that are open or available in the editor with their content and metadata.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/tutorialkit-api.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { FileDescriptor } from '@tutorialkit/types';\n\ninterface EditorDocument {\n    value: string | Uint8Array;\n    loading: boolean;\n    filePath: string;\n    type: FileDescriptor['type'];\n    scroll?: ScrollPosition;\n}\n\ninterface ScrollPosition {\n    top: number;\n    left: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Feedback on Lesson Completion with TutorialKit API in React\nDESCRIPTION: This component uses TutorialKit's Core and Store APIs to check if a lesson has been solved. It monitors changes to a specific file, runs a check script, and displays a congratulatory message when the lesson is completed.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/how-to-use-tutorialkit-api.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from '@tutorialkit/react';\nimport { useEffect, useState } from 'react';\nimport { webcontainer } from 'tutorialkit:core';\nimport tutorialStore from 'tutorialkit:store';\n\nexport default function LessonChecker() {\n  const [success, setSuccess] = useState(false);\n\n  useEffect(() => {\n    let timeout: ReturnType<typeof setTimeout> | undefined = undefined;\n\n    const unsubscribe = tutorialStore.onDocumentChanged('/math.js', () => {\n      clearTimeout(timeout);\n\n      timeout = setTimeout(async () => {\n        if (await checkLesson()) {\n          setSuccess(true);\n          unsubscribe();\n        }\n      }, 250);\n    });\n\n    return function cleanup() {\n      unsubscribe();\n      clearTimeout(timeout);\n    };\n  }, []);\n\n  return (\n    <>\n      {success && (\n        <Dialog title=\"Lesson complete\" confirmText=\"OK\" onClose={() => setSuccess(false)}>\n          Lesson complete, congratulations! 🎉\n        </Dialog>\n      )}\n    </>\n  );\n}\n\nasync function checkLesson(): Promise<boolean> {\n  const webcontainerInstance = await webcontainer;\n  const process = await webcontainerInstance.spawn('node', ['./check-lesson.mjs']);\n\n  const exitCode = await process.exit;\n\n  return exitCode === 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TutorialKit with npm\nDESCRIPTION: Command to create a new TutorialKit project using npm package manager. This initiates the TutorialKit installation wizard.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/installation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# create a new project with npm\nnpm create tutorial\n```\n\n----------------------------------------\n\nTITLE: Configuring TutorialKit Project Settings in YAML\nDESCRIPTION: YAML configuration file that defines how a TutorialKit project should be initialized and run. It specifies the tutorial type, logo link, preview ports, auto-reload settings, main server command, and preparation steps for installation.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: tutorial\nlogoLink: https://tutorialkit.dev\npreviews:\n  - 8080\nautoReload: true\nmainCommand: ['npm start', 'Starting HTTP server']\nprepareCommands:\n  - ['npm install', 'Installing dependencies']\ni18n:\n  partTemplate: ${title}\nopenInStackBlitz:\n  projectTitle: Example Title\n  projectDescription: Example Description\ndownloadAsZip:\n  filename: custom-lesson-name-without-extension\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Editor Type for TutorialKit Configuration in TypeScript\nDESCRIPTION: This type definition specifies the structure for configuring the editor component in TutorialKit. It allows for enabling or disabling the editor, configuring the file tree, and setting file editing permissions using glob patterns.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype GlobPattern = string\n\ntype Editor =\n    | false\n    | { editor: { allowEdits: boolean | GlobPattern | GlobPattern[] } }\n```\n\n----------------------------------------\n\nTITLE: Writing to Terminal using TutorialKit Store API in React\nDESCRIPTION: This component demonstrates how to write commands to the terminal using TutorialKit's store API. It provides a button that, when clicked, runs a 'npm run test' command in the terminal.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/how-to-use-tutorialkit-api.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport tutorialStore from 'tutorialkit:store';\n\nexport default function TerminalWriter() {\n  async function onClick() {\n    const terminal = tutorialStore.terminalConfig.value!.panels[0];\n    terminal.input('npm run test\\n');\n  }\n\n  return (\n    <button\n      onClick={onClick}\n      className=\"px-4 py-1 my-3 cursor-pointer border-1 border-tk-border-primary rounded-md bg-tk-elements-primaryButton-backgroundColor text-tk-elements-primaryButton-textColor\"\n    >\n      Run tests\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TutorialKit with pnpm\nDESCRIPTION: Command to create a new TutorialKit project using pnpm package manager. This initiates the TutorialKit installation wizard.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/installation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# create a new project with pnpm\npnpm create tutorial\n```\n\n----------------------------------------\n\nTITLE: Configuring TutorialKit Project Settings in YAML\nDESCRIPTION: This YAML configuration sets up a TutorialKit project with server commands and GitHub links. It specifies the main command to start an HTTP server, preparation commands to install dependencies, and provides an edit link to the tutorial's GitHub source.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/src/content/tutorial/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: tutorial\nmainCommand: ['npm run dev', 'Starting http server']\nprepareCommands:\n- ['npm install', 'Installing dependencies']\neditPageLink: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/src/content/tutorial/${path}?plain=1\n---\n```\n\n----------------------------------------\n\nTITLE: Preview Configuration Examples in YAML for TutorialKit\nDESCRIPTION: These examples demonstrate different ways to configure preview panels in TutorialKit using YAML frontmatter. Options include specifying ports, titles, and pathnames in various formats, or disabling previews entirely.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npreviews:\n  - 3000 # Preview is on :3000/\n  - \"3001/docs\" # Preview is on :3001/docs/\n  - [3002, \"Dev Server\"] # Preview is on :3002/. Displayed title is \"Dev Server\".\n  - [3003, \"Dev Server\", \"/docs\"] # Preview is on :3003/docs/. Displayed title is \"Dev Server\".\n  - { port: 3004, title: \"Dev Server\" } # Preview is on :3004/. Displayed title is \"Dev Server\".\n  - { port: 3005, title: \"Dev Server\", pathname: \"/docs\" } # Preview is on :3005/docs/. Displayed title is \"Dev Server\".\n\npreviews: false # Do not show preview panel\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Component in MDX for TutorialKit\nDESCRIPTION: This MDX file shows how to integrate a custom React component (HelpButton) into a tutorial lesson. It sets up the lesson structure and includes the custom component for user interaction.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/how-to-use-tutorialkit-api.mdx#2025-04-18_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntype: lesson\ntitle: TutorialKit API usage example\nfocus: /index.js\n---\n\nimport HelpButton from '@components/HelpButton';\n\n# TutorialKit API usage example\n\nClick this button if you get stuck:\n\n<HelpButton client:load />\n```\n\n----------------------------------------\n\nTITLE: Installing TutorialKit with Yarn\nDESCRIPTION: Command to create a new TutorialKit project using Yarn package manager. This initiates the TutorialKit installation wizard.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/installation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# create a new project with Yarn\nyarn create tutorial\n```\n\n----------------------------------------\n\nTITLE: Editor Configuration Examples in YAML for TutorialKit\nDESCRIPTION: These examples demonstrate different ways to configure the editor component in TutorialKit using YAML frontmatter. Options include hiding the editor entirely, hiding just the file tree, and configuring file editing permissions with different patterns.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\neditor: false # Editor is hidden\n\neditor: # Editor is visible\n  fileTree: false # File tree is hidden\n\neditor: # Editor is visible\n  fileTree: # File tree is visible\n    allowEdits: true # User can add new files and folders from the file tree\n\n\neditor: # Editor is visible\n  fileTree: # File tree is visible\n    allowEdits: \"/src/**\" # User can add files and folders anywhere inside \"/src/\"\n\neditor: # Editor is visible\n  fileTree: # File tree is visible\n    allowEdits:\n      - \"/*\" # User can add files and folders directly in the root\n      - \"/first-level/allowed-filename-only.js\" # Only \"allowed-filename-only.js\" inside \"/first-level\" folder\n      - \"**/second-level/**\" # Anything inside \"second-level\" folders anywhere\n```\n\n----------------------------------------\n\nTITLE: Defining FileSystem Type for TutorialKit Configuration in TypeScript\nDESCRIPTION: This type definition outlines the structure for configuring file system monitoring in TutorialKit. It allows for specifying whether file changes should be automatically reflected in the editor and which files to watch.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype FileSystem = {\n  watch: boolean | string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tutorial Core in TypeScript\nDESCRIPTION: Imports the Tutorial Core module which provides access to WebContainer APIs, allowing for file system operations and other low-level interactions with the virtual environment.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/tutorialkit-api.mdx#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as core from \"tutorialkit:core\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Tutorial Lesson Settings in YAML\nDESCRIPTION: YAML configuration block that defines a tutorial lesson structure including type, title, focus file, preview configurations, editor settings, and terminal panels. Sets up multiple preview ports and pathnames along with editor and terminal configurations.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/1-basics/1-introduction/2-foo/content.mdx#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: lesson\ntitle: Foo from part 1\nslug: foo\nfocus: /src/index.html\npreviews:\n  - { title: 'Main Page', port: 8080, pathname: '/src'}\n  - [1, 'Test Runner']\n  - '2/some/custom/pathname'\n  - '2/another/pathname'\neditor:\n  fileTree:\n    allowEdits: true\nterminal:\n  panels: 'terminal'\neditPageLink: 'https://tutorialkit.dev'\n```\n\n----------------------------------------\n\nTITLE: Starting TutorialKit development server with Yarn\nDESCRIPTION: Command to start the TutorialKit development server using Yarn after installation. This will launch the server on port 4321 by default.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/installation.mdx#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Defining MetaTagsSchema Configuration Types in TypeScript\nDESCRIPTION: TypeScript type definition for the MetaTagsSchema configuration, which allows setting metadata for social media and search engines.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\ntype MetaTagsSchema = {\n  image?: string;\n  description?: string;\n  title?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TutorialStore in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the TutorialStore from the @tutorialkit/runtime package. The TutorialStore is the main component for managing tutorial content in WebContainer and in your application components.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/runtime/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TutorialStore } from '@tutorialkit/runtime';\n```\n\n----------------------------------------\n\nTITLE: Defining Preview Type for TutorialKit Configuration in TypeScript\nDESCRIPTION: This type definition outlines the structure for configuring preview panels in TutorialKit. It allows for specifying port numbers, titles, and pathnames for application previews in various formats.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Preview =\n    | number\n    | string\n    | [port: number, title: string]\n    | [port: number, title: string, pathname: string]\n    | { port: number, title: string, pathname?: string }\n```\n\n----------------------------------------\n\nTITLE: Starting TutorialKit development server with npm\nDESCRIPTION: Command to start the TutorialKit development server using npm after installation. This will launch the server on port 4321 by default.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/installation.mdx#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Implementing FileTree Component\nDESCRIPTION: Example implementation of the FileTree component, which displays a tree view of files and directories with selection and editing capabilities.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/react-components.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FileTree } from '@tutorialkit/react';\nimport { useTheme } from './hooks/useTheme';\n\nexport default function ExampleFileTree() {\n  const theme = useTheme();\n\n  return (\n    <FileTree\n      files={[\n        '/index.html',\n        '/src/index.js',\n        '/src/components/Header.js',\n        '/src/components/Footer.js',\n        '/src/styles/main.css',\n        '/package.json',\n      ]}\n      selectedFile=\"/src/index.js\"\n      onFileSelect={(file) => console.log('Selected file:', file)}\n      onFileChange={async (event) => {\n        console.log('File change event:', event);\n      }}\n      allowEditPatterns={['**/*']}\n      theme={theme}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TutorialKit Astro Integration\nDESCRIPTION: Example configuration for the TutorialKit Astro integration in the Astro configuration file, showing basic setup.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nimport tutorialkit from \"@tutorialkit/astro\";\nimport { defineConfig } from \"astro/config\";\n\nexport default defineConfig({\n  devToolbar: {\n    enabled: false,\n  },\n  integrations: [\n    tutorialkit(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing TutorialKit React Components\nDESCRIPTION: Commands to install the necessary dependencies for using TutorialKit's React components, including the React package and theme.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/react-components.mdx#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @tutorialkit/react @tutorialkit/theme\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm install @tutorialkit/react @tutorialkit/theme\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @tutorialkit/react @tutorialkit/theme\n```\n\n----------------------------------------\n\nTITLE: Implementing Terminal Component\nDESCRIPTION: Example implementation of the Terminal component, which provides an interactive terminal interface using xterm.js, with lazy loading for SSR compatibility.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/react-components.mdx#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { lazy, Suspense } from 'react';\nimport { useTheme } from './hooks/useTheme';\nimport { useWebcontainer } from './hooks/useWebcontainer';\n\nconst Terminal = lazy(() =>\n  import('@tutorialkit/react').then(({ Terminal }) => ({ default: Terminal }))\n);\n\nexport default function ExampleTerminal() {\n  const theme = useTheme();\n  const { terminal } = useWebcontainer();\n\n  return (\n    <Suspense fallback={<div>Loading terminal...</div>}>\n      <Terminal\n        onTerminalReady={terminal.setTerminal}\n        onTerminalResize={terminal.resize}\n        theme={theme}\n      />\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding TopBar Component in TutorialKit\nDESCRIPTION: This example demonstrates how to override the TopBar component by specifying a custom Astro component file path in the TutorialKit configuration.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/overriding-components.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntutorialkit({\n  components: {\n    TopBar: './src/components/CustomTopBar.astro',\n  },\n}),\n```\n\n----------------------------------------\n\nTITLE: Example Lesson Content Structure\nDESCRIPTION: Demonstrates the basic structure of a lesson content file with frontmatter and markdown content.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/creating-content.mdx#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntype: lesson\ntitle: Welcome to TutorialKit\n# ...\n---\n\n# Kitchen Sink [Heading 1]\nLorem ipsum dolor\n<!--  ... -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Reload with YAML Frontmatter\nDESCRIPTION: YAML frontmatter configuration for a lesson with auto-reload functionality. It specifies the content type, title, template to use, auto-reload setting, and preview server configuration with port 8000.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/preview/auto-reload-1-from/content.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: lesson\ntitle: Auto Reload From\ntemplate: file-server\nautoReload: true\npreviews:\n  - [8000, \"Server\"]\n---\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Text Highlighting in Expressive Code (Markdown)\nDESCRIPTION: Shows how to use string and regex patterns to highlight specific text within code blocks. This example demonstrates using title, string literals, and regex patterns with add/del modifiers.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/creating-content.mdx#2025-04-18_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n```jsx title=\"code.js\" \"hello\" /ye[sp]/ add=/add[12]/ del=/remove[12]/\nconsole.log(\n  'Hello, the words yes and yep will be marked. Also add1, add2, remove1, remove2',\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Command Type for TutorialKit Execution in TypeScript\nDESCRIPTION: This type definition specifies the structure for configuring terminal commands in TutorialKit. It allows for defining commands as simple strings or with custom titles in array or object format.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype Command = string\n    | [command: string, title: string]\n    | { command: string, title: string }\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Preview Targets in YAML Frontmatter\nDESCRIPTION: This YAML frontmatter configuration defines a lesson with multiple preview targets. It specifies two preview URLs: one for the root server path and another for an about page, both running on port 8000.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/preview/multiple/content.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: lesson\ntitle: Multiple\npreviews:\n  - [8000, \"First Server\"]\n  - [8000, \"Second Server\", \"/about.html\"]\n---\n```\n\n----------------------------------------\n\nTITLE: Accessing Tutorial State with TutorialKit API in React\nDESCRIPTION: This component demonstrates how to access the tutorial state using TutorialKit's store API. It reads the contents of 'index.js' and provides hints to the user when they click a 'Help' button.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/how-to-use-tutorialkit-api.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport tutorialStore from \"tutorialkit:store\";\nimport { Dialog } from \"@tutorialkit/react\";\nimport { useState } from \"react\";\nimport { parseModule } from \"magicast\";\n\nexport default function HelpButton() {\n  const [message, setMessage] = useState<string | null>(null);\n\n  function onClick() {\n    const files = tutorialStore.documents.value;\n    const index = files[\"/index.js\"].value as string;\n\n    const message = verifyIndexJs(index);\n    setMessage(message);\n  }\n\n  return (\n    <>\n      <button onClick={onClick} className=\"px-4 py-1 rounded-md bg-tk-elements-primaryButton-backgroundColor text-tk-elements-primaryButton-textColor\">\n        Help\n      </button>\n\n      {message && (\n        <Dialog title=\"Help\" confirmText=\"OK\" onClose={() => setMessage(null)}>\n          {message}\n        </Dialog>\n      )}\n    </>\n  );\n}\n\nfunction verifyIndexJs(code: string) {\n  const mod = parseModule(code);\n\n  const hasSumFunction =\n    mod.$ast.type === \"Program\" &&\n    mod.$ast.body.some(\n      (node) => node.type === \"FunctionDeclaration\" && node.id.name === \"sum\"\n    );\n\n  if (!hasSumFunction) {\n    return \"Your index.js should have a sum function\";\n  }\n\n  if (mod.exports.default?.$name !== \"sum\") {\n    return \"Your index.js should export sum as default export\";\n  }\n\n  return \"All good\";\n}\n```\n\n----------------------------------------\n\nTITLE: Text Highlighting in JSX Code Block\nDESCRIPTION: Demonstrates how the highlighted code appears when rendered, with specific patterns marked according to the highlighting rules defined above.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/creating-content.mdx#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconsole.log(\n  'Hello, the words yes and yep will be marked. Also add1, add2, remove1, remove2',\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Terminal Configuration Types in TypeScript\nDESCRIPTION: TypeScript type definitions that describe the structure of terminal configuration options in TutorialKit, including panel types, titles, and permission settings.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\ntype Terminal = {\n    panels: TerminalPanel[],\n    activePanel?: number,\n    allowRedirects?: boolean,\n    allowCommands?: string[],\n    open?: boolean,\n}\n\ntype TerminalPanel = TerminalType\n    | [type: TerminalType, title: string]\n    | { type: TerminalType, title?: string, id?: string, allowRedirects?: boolean, allowCommands?: boolean }\n\ntype TerminalType = 'terminal' | 'output'\n```\n\n----------------------------------------\n\nTITLE: Importing Files Using Shortcodes (Markdown)\nDESCRIPTION: Shows how to use the file shortcode to import content from external files in the _files or code template folder.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/creating-content.mdx#2025-04-18_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n```file:/box.css\n```\n```\n\n----------------------------------------\n\nTITLE: Complete TutorialKit Theme CSS Template\nDESCRIPTION: This code block represents a comprehensive CSS file (theme.css) containing all available CSS variables for theming TutorialKit. It includes variables for both light and dark modes, covering various UI elements.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<Code code={themeCSS} lang=\"css\" title=\"theme.css\" class=\"limit-code-height\" />\n```\n\n----------------------------------------\n\nTITLE: Lesson Completion Check Script in JavaScript\nDESCRIPTION: This script is used to verify if the lesson has been completed correctly. It imports functions from a 'math.js' file and checks if they produce the expected results, exiting with different codes based on the outcome.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/how-to-use-tutorialkit-api.mdx#2025-04-18_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport * as math from './math.js';\n\nif (math.sum(25, 32) !== 57) {\n  process.exit(1);\n}\n\nif (math.multiply(3, 25) !== 75) {\n  process.exit(1);\n}\n\nprocess.exit(0);\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Settings in YAML\nDESCRIPTION: Example YAML configuration for TutorialKit terminals, showing how to set up multiple panels with different types, titles, and permissions.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nterminal:\n  open: true\n  activePanel: 1\n  panels:\n    - ['output', 'Dev Server']\n    - type: terminal\n      id: 'cmds'\n      title: 'Command Line'\n      allowRedirects: true\n      allowCommands:\n        - ls\n        - echo\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata in YAML\nDESCRIPTION: Examples of YAML configuration for setting metadata like images, titles, and descriptions for social media and search engines.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nmeta:\n  image: /cover.png\n  title: Title shown on social media and search engines\n  description: Description shown on social media and search engines\n\nmeta:\n  image: /cover.png # Resolves to public/cover.png\n\nmeta:\n  image: 'https://tutorialkit.dev/tutorialkit-opengraph.png' # URL is used as is\n```\n\n----------------------------------------\n\nTITLE: Code Block with Annotations\nDESCRIPTION: Example of a code block with syntax highlighting, line numbers, and annotations.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/creating-content.mdx#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst greeting = 'Hello, World!';\n\n// This is a comment\nconst added = 'This line was added';\nconst removed = 'This line was removed';\nconst highlighted = 'This line is highlighted';\n```\n\n----------------------------------------\n\nTITLE: Integrating Lesson Checker Component in MDX for TutorialKit\nDESCRIPTION: This MDX file shows how to integrate the LessonChecker component into a tutorial lesson. It sets up the lesson structure and includes the custom component for providing feedback on lesson completion.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/how-to-use-tutorialkit-api.mdx#2025-04-18_snippet_6\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntype: lesson\ntitle: TutorialKit API usage example\nfocus: /math.js\n---\n\nimport LessonChecker from '@components/LessonChecker';\n\n# TutorialKit API usage example\n\nSolve <code>math.js</code> and you'll see notification about completed lesson!\n\n<LessonChecker client:load />\n```\n\n----------------------------------------\n\nTITLE: Overriding TutorialKit Components\nDESCRIPTION: Example configuration showing how to override default TutorialKit components with custom implementations.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\ntutorialkit({\n  components: {\n    TopBar: './src/components/CustomTopBar.astro',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TutorialKit Component Overrides in Astro\nDESCRIPTION: This snippet shows how to set up the 'components' option in the Astro configuration file to override TutorialKit's default components.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/overriding-components.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport tutorialkit from '@tutorialkit/astro';\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  integrations: [\n    tutorialkit({\n      components: {\n        // Component overrides go here\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom HeadTags Component in Astro\nDESCRIPTION: This example shows how to create a custom HeadTags component using Astro, incorporating TutorialKit's default head components and adding custom tags.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/overriding-components.mdx#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<slot name=\"title\" />\n<slot name=\"links\" />\n<slot name=\"meta\" />\n{/** Add your own tags */}\n<link rel=\"sitemap\" href=\"/sitemap-index.xml\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TopBar Component in Astro\nDESCRIPTION: This code snippet shows how to create a custom TopBar component using Astro, utilizing named slots to incorporate TutorialKit's default components.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/overriding-components.mdx#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<nav>\n  <slot name=\"logo\" />\n\n  <a href=\"https://tutorialkit.dev/\">\n    Home page\n  </a>\n\n  <slot name=\"theme-switch\" />\n\n  <LanguageSelect />\n\n  <slot name=\"download-button\" />\n\n  <slot name=\"open-in-stackblitz-link\" />\n\n  <slot name=\"login-button\" />\n</nav>\n```\n\n----------------------------------------\n\nTITLE: PreviewInfo TypeScript Interface Definition\nDESCRIPTION: Defines the types for managing preview tabs and port information in TutorialKit. This includes classes for handling preview information, port status, and utility methods for working with previews.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/tutorialkit-api.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PreviewSchema } from '@tutorialkit/types';\n\nclass PreviewInfo {\n    readonly portInfo: PortInfo;\n    title?: string;\n    pathname?: string;\n    get url(): string | undefined;\n    get port(): number;\n    get baseUrl(): string | undefined;\n    get ready(): boolean;\n    static parse(preview: Exclude<PreviewSchema, boolean>[0]): Preview;\n    static equals(a: PreviewInfo, b: PreviewInfo): boolean;\n}\nclass PortInfo {\n    readonly port: number;\n    origin?: string | undefined;\n    ready: boolean;\n}\ninterface Preview {\n    port: number;\n    pathname?: string;\n    title?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Chapter Metadata in YAML for Tutorial Project\nDESCRIPTION: This YAML frontmatter defines the metadata for a chapter in a tutorial project. It specifies the content type as a chapter, sets the title, and enables options for opening in StackBlitz and downloading as a zip file.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/1-basics/2-foo/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: chapter\ntitle: The second chapter in part 1\nopenInStackBlitz: true\ndownloadAsZip: true\n---\n```\n\n----------------------------------------\n\nTITLE: Editor Configuration Interface Definition\nDESCRIPTION: Defines the TypeScript interface for managing editor configuration in TutorialKit, including visibility settings and file tree options.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/tutorialkit-api.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass EditorConfig {\n    get visible(): boolean;\n    get fileTree(): {\n        visible: boolean;\n        allowEdits: false | string[];\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dialog Component Props Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the props for a custom Dialog component, including title, confirmation text, close callback, and children content.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/overriding-components.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Props {\n  /** Title of the dialog */\n  title: string;\n\n  /** Text for the confirmation button */\n  confirmText: string;\n\n  /** Callback invoked when dialog is closed */\n  onClose: () => void;\n\n  /** Content of the dialog */\n  children: ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StackBlitz TutorialKit Project in YAML\nDESCRIPTION: YAML configuration block that sets up a tutorial project in StackBlitz TutorialKit. It specifies the tutorial type, leaves the main command empty, initializes prepare commands as an empty array, and enables the option to download the project as a ZIP file.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: tutorial\nmainCommand: ''\nprepareCommands: []\ndownloadAsZip: true\n---\n```\n\n----------------------------------------\n\nTITLE: Terminal Configuration Interface Definition\nDESCRIPTION: Defines the TypeScript interfaces for managing terminal panels and their configurations in TutorialKit. Includes classes for terminal configuration, panel management, and process handling.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/tutorialkit-api.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TerminalPanelType, TerminalSchema } from '@tutorialkit/types';\nimport type { WebContainerProcess } from '@webcontainer/api';\n\nclass TerminalConfig {\n    get panels(): TerminalPanel[];\n    get activePanel(): number;\n    get defaultOpen(): boolean;\n}\n\nclass TerminalPanel implements ITerminal {\n    readonly type: TerminalPanelType;\n    static panelCount: Record<TerminalPanelType, number>;\n    static resetCount(): void;\n    readonly id: string;\n    readonly title: string;\n    get terminal(): ITerminal | undefined;\n    get process(): WebContainerProcess | undefined;\n    get processOptions(): {\n        allowRedirects: boolean;\n        allowCommands: string[] | undefined;\n    } | undefined;\n    get cols(): number | undefined;\n    get rows(): number | undefined;\n    reset(): void;\n    write(data: string): void;\n    onData(callback: (data: string) => void): void;\n    attachProcess(process: WebContainerProcess): void;\n    attachTerminal(terminal: ITerminal): void;\n}\n\ninterface ITerminal {\n    readonly cols?: number;\n    readonly rows?: number;\n    reset: () => void;\n    write: (data: string) => void;\n    onData: (cb: (data: string) => void) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Fields in TypeScript\nDESCRIPTION: Example TypeScript code showing how to access custom fields from the tutorial collection entries.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nimport { getCollection } from 'astro:content';\nconst collection = await getCollection('tutorial');\nfor (const entry of collection) {\n  console.log(\"This part was published at:\", entry.data?.custom?.publishedAt)\n}\n```\n\n----------------------------------------\n\nTITLE: FileSystem Configuration Examples in YAML for TutorialKit\nDESCRIPTION: These examples demonstrate different ways to configure file system monitoring in TutorialKit using YAML frontmatter. Options include enabling monitoring for all files, disabling it entirely, or specifying patterns for selective monitoring.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nfilesystem:\n  watch: true  # Filesystem changes to files already in the editor are reflected in the editor\n\nfilesystem:\n  watch: false # Or if it's omitted, the default value is false\n\nfilesystem:\n  watch: ['/*.json', '/src/**/*'] # Files changed, added or deleted that match one of the globs are updated in the editor\n```\n\n----------------------------------------\n\nTITLE: Defining Chapter Structure in YAML\nDESCRIPTION: YAML configuration that defines a tutorial chapter titled 'Navigation' with six lessons covering page navigation and layout changes. The configuration specifies the chapter type, title, lesson pages, and command settings.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/navigation/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: chapter\ntitle: Navigation\nlessons:\n  - page-one\n  - page-two\n  - page-three\n  - layout-change-all-off\n  - layout-change-from\n  - layout-change-to\nmainCommand: ''\nprepareCommands: []\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Tutorial Store in TypeScript\nDESCRIPTION: Imports the tutorial store module which provides access to TutorialKit's internal state management system. This module is experimental and may change in minor version updates.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/tutorialkit-api.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport tutorialStore from \"tutorialkit:store\";\n```\n\n----------------------------------------\n\nTITLE: Installing TutorialKit with NPM\nDESCRIPTION: Command to create a new tutorial project using NPM's npx command. This will execute the latest version of tutorialkit and create a new project with the specified name.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/cli/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx tutorialkit@latest create my-tutorial\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fields in YAML\nDESCRIPTION: Example YAML configuration for adding custom fields to chapters, parts, or lessons that can be processed by custom code.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ncustom:\n  publishedAt: 2024-16-10\n  tags: tutorialkit,astro,vite\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor File Tree Permissions in YAML\nDESCRIPTION: YAML configuration block that enables file editing capabilities in the editor's file tree interface. Sets up terminal panels and editing permissions.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/file-tree/allow-edits-enabled/content.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: lesson\ntitle: Allow Edits Enabled\npreviews: false\neditor:\n  fileTree:\n    allowEdits: true\nterminal:\n  panels: terminal\n```\n\n----------------------------------------\n\nTITLE: Viem Client Setup with Collapsible Sections\nDESCRIPTION: This TypeScript code demonstrates setting up a Viem client with collapsible sections to hide certain parts of the code for better readability.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/1-basics/1-introduction/1-welcome/content.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Import modules.\nimport { createPublicClient } from 'viem'; // [!code --]\nimport { createPublicClient, http } from 'viem'; // [!code ++]\nimport { mainnet } from 'viem/chains';\n\n// 2. Set up your client with desired chain & transport.\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n});\n\n// 3. Consume an action!\nconst blockNumber = await client.getBlockNumber();\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Custom Properties for File Tree in TutorialKit\nDESCRIPTION: These CSS custom properties define the styling for the file tree, including text, background, and icon colors for normal and hover states.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n--tk-elements-fileTree-textColor\n--tk-elements-fileTree-textColorHover\n--tk-elements-fileTree-backgroundColor\n--tk-elements-fileTree-backgroundColorHover\n--tk-elements-fileTree-iconColor\n--tk-elements-fileTree-iconColorHover\n```\n\n----------------------------------------\n\nTITLE: Configuring Watch Glob Patterns in YAML\nDESCRIPTION: YAML frontmatter configuration that defines filesystem watch patterns using glob syntax. Specifies monitoring for .txt files in root directory and all files in /a/ and /src/ subdirectories.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/filesystem/watch-glob/content.mdx#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: lesson\ntitle: Watch Glob\nfocus: /bar.txt\nfilesystem:\n  watch: ['/*.txt', '/a/**/*', '/src/**/*']\n```\n\n----------------------------------------\n\nTITLE: Template Configuration JSON\nDESCRIPTION: Demonstrates how to configure template inheritance using .tk-config.json file.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/creating-content.mdx#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../shared-template\"\n}\n```\n\n----------------------------------------\n\nTITLE: File Descriptor Type Definition\nDESCRIPTION: Defines the TypeScript type for representing files and folders in the TutorialKit file system, including their path and type (file or folder).\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/tutorialkit-api.mdx#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype FileDescriptor = {\n    path: string;\n    type: 'file' | 'folder';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Custom Properties for Skipped Status in TutorialKit\nDESCRIPTION: These CSS custom properties define the text and icon colors for the skipped status in the preview window. The icon color defaults to the text color if not specified.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n--tk-elements-status-skipped-textColor\n--tk-elements-status-skipped-iconColor\n```\n\n----------------------------------------\n\nTITLE: Building TutorialKit Project with yarn\nDESCRIPTION: Command to create a production build of a TutorialKit project using yarn. This generates a dist directory containing static files for deployment.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/deployment.mdx#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Origin Security Headers\nDESCRIPTION: Sets Cross-Origin-Embedder-Policy to 'require-corp' and Cross-Origin-Opener-Policy to 'same-origin'. These headers together create a cross-origin isolated context that improves security and enables certain browser features like SharedArrayBuffer.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/cli/src/commands/create/hosting-config/_headers.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCross-Origin-Embedder-Policy: require-corp\nCross-Origin-Opener-Policy: same-origin\n```\n\n----------------------------------------\n\nTITLE: Configuring TutorialKit Preview Settings in YAML\nDESCRIPTION: YAML configuration that defines the basic parameters for a TutorialKit preview, including the content type as chapter, title as Preview, and the main command to execute the index.mjs file using Node.js.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/preview/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: chapter\ntitle: Preview\nmainCommand: 'node ./index.mjs'\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Custom Properties for Disabled Status in TutorialKit\nDESCRIPTION: These CSS custom properties define the text and icon colors for the disabled status in the preview window. The icon color defaults to the text color if not specified.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n--tk-elements-status-disabled-textColor\n--tk-elements-status-disabled-iconColor\n```\n\n----------------------------------------\n\nTITLE: PostBuild Script for Cloudflare Headers\nDESCRIPTION: JSON configuration for package.json that adds a postbuild script to copy the _headers file to the dist directory after building the project.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/deployment.mdx#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"postbuild\": \"cp _headers ./dist/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Settings in TutorialKit Frontmatter\nDESCRIPTION: YAML configuration in the frontmatter that specifies terminal settings for a lesson. It sets the terminal to be open by default and configures it to show only the terminal panel.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/terminal/open-by-default/content.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: lesson\ntitle: Open by default\nterminal:\n  open: true\n  panels: \"terminal\"\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Site URL in Astro Configuration\nDESCRIPTION: Example of setting the site configuration in astro.config.mjs to point to the website's absolute URL. This allows computing absolute URLs for SEO metadata.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/deployment.mdx#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// astro.config.mjs\nsite:\"https://tutorialkit.dev\"\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Custom Properties for Active Status in TutorialKit\nDESCRIPTION: These CSS custom properties define the text and icon colors for the active status in the preview window. The icon color defaults to the text color if not specified.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n--tk-elements-status-active-textColor\n--tk-elements-status-active-iconColor\n```\n\n----------------------------------------\n\nTITLE: Configuring Headers for Netlify Deployment\nDESCRIPTION: YAML configuration for netlify.toml that adds the required WebContainers headers to all routes on a Netlify deployment.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/deployment.mdx#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n[[headers]]\n  for = \"/*\"\n  [headers.values]\n    Cross-Origin-Embedder-Policy = \"require-corp\"\n    Cross-Origin-Opener-Policy = \"same-origin\"\n```\n\n----------------------------------------\n\nTITLE: Installing Vocs Package using npm in Bash\nDESCRIPTION: This code snippet demonstrates how to install the Vocs package using npm in a terminal environment.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/1-basics/1-introduction/1-welcome/content.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i vocs\n```\n\n----------------------------------------\n\nTITLE: Setting up Viem Public Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import modules, set up a public client, and consume an action using the Viem library in TypeScript.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/1-basics/1-introduction/1-welcome/content.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Import modules\nimport { createPublicClient, http } from 'viem';\nimport { mainnet } from 'viem/chains';\n\n// 2. Set up your client with desired chain & transport\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n});\n\n// 3. Consume an action\nconst blockNumber = await client.getBlockNumber();\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Custom Property for Top Bar Background in TutorialKit\nDESCRIPTION: This CSS custom property defines the background color of the top bar, which contains the logo at the top of the page.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n--tk-elements-topBar-backgroundColor\n```\n\n----------------------------------------\n\nTITLE: Configuring Headers for Vercel Deployment\nDESCRIPTION: JSON configuration for vercel.json that adds the required WebContainers headers to all routes on a Vercel deployment.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/deployment.mdx#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"headers\": [\n    {\n      \"source\": \"/(.*)\",\n      \"headers\": [\n        {\n          \"key\": \"Cross-Origin-Embedder-Policy\",\n          \"value\": \"require-corp\"\n        },\n        {\n          \"key\": \"Cross-Origin-Opener-Policy\",\n          \"value\": \"same-origin\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TutorialKit Lesson Frontmatter\nDESCRIPTION: YAML frontmatter configuration that defines the document as a lesson type with a title 'Welcome to TutorialKit from part 2'. This metadata is used by TutorialKit to process and render the lesson appropriately.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/2-advanced/1-unicorn/1-welcome/content.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: lesson\ntitle: Welcome to TutorialKit from part 2\n---\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Custom Properties for Panels in TutorialKit\nDESCRIPTION: These CSS custom properties define the text and background colors for panels, which are resizable containers for components like file trees or terminals.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n--tk-elements-panel-textColor\n--tk-elements-panel-backgroundColor\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Custom Properties for Icon Button in Top Bar of TutorialKit\nDESCRIPTION: These CSS custom properties define the styling for icon buttons in the top bar, including background and icon colors for normal and hover states.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n--tk-elements-topBar-iconButton-backgroundColor\n--tk-elements-topBar-iconButton-backgroundColorHover\n--tk-elements-topBar-iconButton-iconColor\n--tk-elements-topBar-iconButton-iconColorHover\n```\n\n----------------------------------------\n\nTITLE: Supporting Glob Patterns in Editor File Tree Feature\nDESCRIPTION: Implementation for supporting glob patterns in the editor.fileTree.allowEdits configuration, allowing more flexible control over which files can be edited.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/theme/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* support glob patterns in `editor.fileTree.allowEdits` ([#332](https://github.com/stackblitz/tutorialkit/issues/332)) ([c1a59f5](https://github.com/stackblitz/tutorialkit/commit/c1a59f54c5b5700b8ec8ed5a4a3ebf2169b2409c))\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Tutorial Section in YAML\nDESCRIPTION: YAML configuration block that defines a tutorial section marked as type 'part' with title 'Basics'. Includes filesystem watching configuration to enable live updates.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/1-basics/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: part\ntitle: Basics\nfilesystem:\n  watch: true\n```\n\n----------------------------------------\n\nTITLE: Disabling Edit Page Link in YAML\nDESCRIPTION: Example YAML configuration to disable an inherited edit page link for specific lessons.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\neditPageLink: false\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Custom Properties for Panel Headers in TutorialKit\nDESCRIPTION: These CSS custom properties define the styling for panel headers, including background color, text color, and icon color.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n--tk-elements-panel-header-backgroundColor\n--tk-elements-panel-header-textColor\n--tk-elements-panel-header-iconColor\n```\n\n----------------------------------------\n\nTITLE: Adding Edit Page Link Feature\nDESCRIPTION: Implementation of an \"Edit this page\" link feature, enabling users to easily navigate to the editing interface for the current documentation page.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/theme/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n* add \"Edit this page\" link ([#130](https://github.com/stackblitz/tutorialkit/issues/130)) ([dd9c52c](https://github.com/stackblitz/tutorialkit/commit/dd9c52c6f1d3c90cc1d993d8c0fec61dadfc5815))\n```\n\n----------------------------------------\n\nTITLE: Configuring Tutorial Project with npm in YAML\nDESCRIPTION: This YAML configuration sets up a tutorial project. It specifies the type as 'tutorial', defines the main command to start an HTTP server, and includes a preparation command to install dependencies using npm.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/cli/overwrites/src/content/tutorial/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: tutorial\nmainCommand: ['npm run dev', 'Starting http server']\nprepareCommands:\n  - ['npm install', 'Installing dependencies']\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS for TutorialKit\nDESCRIPTION: Configuration file for setting up UnoCSS with TutorialKit's components. This defines the UnoCSS configuration for the project.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/react-components.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@tutorialkit/theme';\n\nexport default defineConfig({\n  // add your UnoCSS config here: https://unocss.dev/guide/config-file\n});\n```\n\n----------------------------------------\n\nTITLE: Starting TutorialKit development server with pnpm\nDESCRIPTION: Command to start the TutorialKit development server using pnpm after installation. This will launch the server on port 4321 by default.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/installation.mdx#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Setting Edit Page Link in YAML\nDESCRIPTION: Example YAML configuration to create an edit link for lessons, with a GitHub URL pattern that includes the lesson's relative path.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\neditPageLink: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/${path}\n```\n\n----------------------------------------\n\nTITLE: Displaying TutorialKit Project Structure in Bash\nDESCRIPTION: Shows the directory structure of a TutorialKit project, highlighting key files and folders for tutorial content, templates, and configuration.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── astro.config.mjs    # TutorialKit uses Astro 🚀 (https://astro.build)\n├── src\n│   ├── ...\n│   ├── content\n│   │   └── tutorial    # Your tutorial content lives here\n│   └── templates       # Your templates (see below for more information)\n├── public\n│   ├── favicon.svg\n│   └── logo.svg        # Default logo used in top left for your tutorial\n├── ...\n├── theme.ts            # Customize the theme of the tutorial\n└── uno.config.ts       # UnoCSS config (https://unocss.dev/)\n```\n\n----------------------------------------\n\nTITLE: Viem Client Setup with Line Highlighting and Focus\nDESCRIPTION: This TypeScript code demonstrates setting up a Viem client with line highlighting and focus comments to emphasize specific parts of the code.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/1-basics/1-introduction/1-welcome/content.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Import modules\nimport { createPublicClient, http } from 'viem';\nimport { mainnet } from 'viem/chains';\n\n// 2. Set up your client with desired chain & transport\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n});\n\n// 3. Consume an action! // [!code focus]\nconst blockNumber = await client.getBlockNumber(); // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Building TutorialKit Project with npm\nDESCRIPTION: Command to create a production build of a TutorialKit project using npm. This generates a dist directory containing static files for deployment.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/deployment.mdx#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining DownloadAsZip Configuration Types in TypeScript\nDESCRIPTION: TypeScript type definition for the DownloadAsZip configuration option, which can be a boolean or an object with filename details.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\ntype DownloadAsZip =\n    | boolean\n    | { filename?: string }\n```\n\n----------------------------------------\n\nTITLE: Implementing File Operation Buttons in React JSX\nDESCRIPTION: Renders multiple ButtonWriteToFile components to write content to different file paths and a ButtonDeleteFile component to delete a file. Each component has client-side loading enabled and specifies WebContainer access.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/filesystem/watch/content.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonWriteToFile client:load access=\"webcontainer\" filePath=\"/bar.txt\" newContent='Something else' />\n<ButtonWriteToFile client:load access=\"webcontainer\" filePath=\"/a/b/baz.txt\" newContent='Foo' testId='write-to-file-in-subfolder' />\n<ButtonWriteToFile client:load access=\"webcontainer\" filePath=\"/unknown/other.txt\" newContent='Ignore this' testId='write-new-ignored-file' />\n\n<ButtonDeleteFile client:load access=\"webcontainer\" filePath=\"/bar.txt\" testId='delete-file' />\n```\n\n----------------------------------------\n\nTITLE: Viem Client Setup with Code Diff Highlighting\nDESCRIPTION: This TypeScript snippet shows how to set up a Viem client with code diff highlighting to indicate added and removed lines.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/1-basics/1-introduction/1-welcome/content.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Import modules.\nimport { createPublicClient } from 'viem'; // [!code --]\nimport { createPublicClient, http } from 'viem'; // [!code ++]\nimport { mainnet } from 'viem/chains';\n\n// 2. Set up your client with desired chain & transport.\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n});\n\n// 3. Consume an action!\nconst blockNumber = await client.getBlockNumber();\n```\n\n----------------------------------------\n\nTITLE: Building TutorialKit Project with pnpm\nDESCRIPTION: Command to create a production build of a TutorialKit project using pnpm. This generates a dist directory containing static files for deployment.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/deployment.mdx#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Visualizing TutorialKit UI Structure in Markdown\nDESCRIPTION: ASCII diagram illustrating the layout of the TutorialKit user interface, showing the content area, code editor, preview/boot screen, and terminal sections.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/README.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n┌─────────────────────────────────────────────────────┐\n│ ● ● ●                                               │\n├───────────────────────────┬─────────────────────────┤\n│                           │                         │\n│                           │                         │\n│                           │                         │\n│                           │                         │\n│                           │       Code Editor       │\n│                           │                         │\n│                           │                         │\n│                           │                         │\n│                           │                         │\n│          Content          ├─────────────────────────┤\n│                           │                         │\n│                           │                         │\n│                           │  Preview & Boot Screen  │\n│                           │                         │\n│                           │                         │\n│                           ├─────────────────────────┤\n│                           │                         │\n│                           │        Terminal         │\n│                           │                         │\n└───────────────────────────┴─────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Implementing CodeMirrorEditor Component\nDESCRIPTION: Example implementation of the CodeMirrorEditor component, which provides a code editor with syntax highlighting and multi-file editing capabilities.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/react-components.mdx#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport { CodeMirrorEditor } from '@tutorialkit/react';\nimport { useTheme } from './hooks/useTheme';\n\nexport default function ExampleCodeMirrorEditor() {\n  const theme = useTheme();\n  const [content, setContent] = useState('console.log(\"Hello World!\");');\n\n  return (\n    <CodeMirrorEditor\n      doc={{\n        content,\n        language: 'javascript',\n        path: '/src/index.js',\n      }}\n      onChange={(update) => {\n        setContent(update.doc.toString());\n      }}\n      theme={theme}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting TypeScript Code in Markdown\nDESCRIPTION: This snippet shows how to create a TypeScript code block with syntax highlighting and line highlighting in Markdown.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/1-basics/1-introduction/1-welcome/content.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Example = string; // [!code hl]\nconst example: Example = 'example';\n```\n\n----------------------------------------\n\nTITLE: Required CORS Headers for WebContainers\nDESCRIPTION: YAML configuration showing the required headers for WebContainers technology to work correctly. These headers ensure the site is cross-origin isolated.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/deployment.mdx#2025-04-18_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nCross-Origin-Embedder-Policy: require-corp\nCross-Origin-Opener-Policy: same-origin\n```\n\n----------------------------------------\n\nTITLE: Displaying TutorialKit Content Structure in Bash\nDESCRIPTION: Shows the directory structure for organizing tutorial content into parts, chapters, and lessons, including metadata and solution files.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntutorial\n├── 1-basics-of-vite\n│   ├── 1-introduction\n│   │   ├── 1-welcome\n│   │   │   ├── content.md    # The content of your lesson\n│   │   │   ├── _files        # Initial set of files\n│   │   │   │   └── ...\n│   │   │   └── _solution     # Solution of the lesson\n│   │   │       └── ...\n│   │   ├── 2-why-vite\n│   │   │   ├── content.md\n│   │   │   └── _files\n│   │   │       └── ...\n│   │   └── meta.md           # Metadata for the chapter\n│   └── meta.md               # Metadata for the part\n├── 2-advanced\n│   ├── ...\n│   └── meta.md\n└── meta.md                   # Metadata for the tutorial\n```\n\n----------------------------------------\n\nTITLE: Configuring File Server with Auto Reload Off in YAML\nDESCRIPTION: YAML configuration that defines a lesson using the file-server template with auto reload disabled. It specifies the lesson type, title, template to use, and sets up a preview server on port 8000.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/preview/auto-reload-3-off/content.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: lesson\ntitle: Auto Reload Off\ntemplate: file-server\nautoReload: false\npreviews:\n  - [8000, \"Server\"]\n---\n```\n\n----------------------------------------\n\nTITLE: Integrating Terminal Writer Component in MDX for TutorialKit\nDESCRIPTION: This MDX file demonstrates how to integrate the TerminalWriter component into a tutorial lesson. It sets up the lesson structure and includes the custom component for running tests.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/how-to-use-tutorialkit-api.mdx#2025-04-18_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntype: lesson\ntitle: Write to Terminal example\n---\n\nimport TerminalWriter from \"@components/TerminalWriter\";\n\n# Write to Terminal example\n\nFix <code>counter.js</code> and run the tests!\n\n<TerminalWriter client:load />\n```\n\n----------------------------------------\n\nTITLE: Configuring Headers for Cloudflare Pages\nDESCRIPTION: Example of configuring required WebContainers headers in a _headers file for Cloudflare Pages deployment.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/deployment.mdx#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n/*\n  Cross-Origin-Embedder-Policy: require-corp\n  Cross-Origin-Opener-Policy: same-origin\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Tutorial Structure in Plaintext\nDESCRIPTION: Shows the hierarchical organization of a tutorial using parts, chapters, and lessons in a plain text format.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/creating-content.mdx#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- Part 1: Basics of Vite\n  - Chapter 1: Introduction\n    - Lesson 1: Welcome!\n    - Lesson 2: Why Vite?\n    - …\n  - Chapter 2: Your first Vite project\n- Part 2: Vite CLI\n  - …\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables for Light and Dark Themes in TutorialKit\nDESCRIPTION: This CSS snippet demonstrates how to set up root selectors for light and dark themes in TutorialKit. It provides a structure for defining custom color variables for both modes.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n:root[data-theme='light'] {\n  /* Light mode colors */\n}\n\n:root[data-theme='dark'] {\n  /* Dark mode colors */\n}\n```\n\n----------------------------------------\n\nTITLE: Applying :focus-within to Enhance Fieldset and Legend Styling in CSS\nDESCRIPTION: This CSS applies the :focus-within pseudo-selector to fieldset elements to highlight both the fieldset and its legend when any descendant element receives focus. It sets a light blue background and border for the fieldset, and darkens the legend text color for better visual guidance.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/src/content/tutorial/1-forms-css/3-fieldset/5-focus-within/content.md#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nfieldset:focus-within {\n  background: #00a1;\n  border-color: #00a6;\n}\n\nfieldset:focus-within legend {\n  color: #00a9;\n  border-color: #00a6;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TutorialKit Project in Astro\nDESCRIPTION: This code snippet sets up the configuration for a TutorialKit project using Astro. It defines the title, description, and template for the page, and imports and renders a HomePage component.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/index.mdx#2025-04-18_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n---\ntitle: TutorialKit\ndescription: Get started with TutorialKit\ntemplate: splash\n---\nimport HomePage from './index.astro';\n\n<HomePage />\n```\n\n----------------------------------------\n\nTITLE: Defining Chapter Frontmatter in Markdown\nDESCRIPTION: A YAML frontmatter block that declares the content type as a chapter and sets the title to 'Introduction'. This is commonly used in static site generators and documentation platforms to organize content.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/cli/overwrites/src/content/tutorial/1-basics/1-introduction/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntype: chapter\ntitle: Introduction\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Chapter Metadata in Markdown\nDESCRIPTION: This snippet defines the metadata for a chapter in a tutorial or course using YAML front matter in a markdown file. It specifies the type as 'chapter', sets the title, and configures options for StackBlitz integration and zip download.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/2-advanced/1-unicorn/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntype: chapter\ntitle: The first chatper in part 2\nopenInStackBlitz: false\ndownloadAsZip: false\n---\n```\n\n----------------------------------------\n\nTITLE: Editor Gutter Theming Tokens in CSS\nDESCRIPTION: CSS custom properties for styling the editor's gutter area where line numbers are displayed.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_17\n\nLANGUAGE: CSS\nCODE:\n```\n--tk-elements-editor-gutter-textColor\n--tk-elements-editor-gutter-backgroundColor\n--tk-elements-editor-gutter-activeLineTextColor\n```\n\n----------------------------------------\n\nTITLE: Importing CSS for TutorialKit Components\nDESCRIPTION: Main TypeScript file that imports the necessary CSS for TutorialKit's design system and components.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/react-components.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'uno.css';\nimport './theme.css';\n```\n\n----------------------------------------\n\nTITLE: Defining Chapter Metadata in YAML\nDESCRIPTION: A YAML front matter block that specifies the document type as 'chapter' and sets the title to 'Metadata'. This metadata likely controls how the document is processed in the Tutorial Kit system.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/metadata/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: chapter\ntitle: Metadata\n---\n```\n\n----------------------------------------\n\nTITLE: Starting the Documentation Website\nDESCRIPTION: This command runs the documentation website for the TutorialKit project.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run docs\n```\n\n----------------------------------------\n\nTITLE: Editor Search Panel Theming Tokens in CSS\nDESCRIPTION: CSS custom properties for styling the search panel component within the editor, including colors for buttons, input fields, and interactive states.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_19\n\nLANGUAGE: CSS\nCODE:\n```\n--tk-elements-editor-search-textColor\n--tk-elements-editor-search-backgroundColor\n--tk-elements-editor-search-closeButton-textColor\n--tk-elements-editor-search-closeButton-textColorHover\n--tk-elements-editor-search-closeButton-backgroundColor\n--tk-elements-editor-search-closeButton-backgroundColorHover\n--tk-elements-editor-search-button-textColor\n--tk-elements-editor-search-button-textColorHover\n--tk-elements-editor-search-button-backgroundColor\n--tk-elements-editor-search-button-backgroundColorHover\n--tk-elements-editor-search-button-borderColor\n--tk-elements-editor-search-button-borderColorHover\n--tk-elements-editor-search-button-borderColorFocused\n--tk-elements-editor-search-input-backgroundColor\n--tk-elements-editor-search-input-borderColor\n--tk-elements-editor-search-input-borderColorFocused\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Dev Server in Bash\nDESCRIPTION: Commands for installing project dependencies and starting the development server. The package manager is dynamically inserted based on the user's environment.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n<% pkgManager %> install\n<% pkgManager %> run dev\n```\n\n----------------------------------------\n\nTITLE: Defining Tutorial Lesson Order in YAML\nDESCRIPTION: YAML frontmatter configuration that specifies the type as 'chapter' and defines an ordered list of lessons to be included in the tutorial sequence. Uses simple array notation to list lesson names in the desired order.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/lesson-order/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: chapter\ntitle: Lesson order\nlessons:\n  - 2-lesson\n  - 3-lesson\n  - 1-lesson\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pnpm\nDESCRIPTION: This command uses pnpm to install all project dependencies defined in the workspace.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Custom Properties for Positive Status in TutorialKit\nDESCRIPTION: These CSS custom properties define the text and icon colors for the positive status in the preview window. The icon color defaults to the text color if not specified.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--tk-elements-status-positive-textColor\n--tk-elements-status-positive-iconColor\n```\n\n----------------------------------------\n\nTITLE: Example of TutorialKit Lesson Content in Markdown\nDESCRIPTION: Demonstrates the structure of a lesson file in TutorialKit, including Front Matter for metadata and the main content in Markdown format.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/README.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntype: lesson\ntitle: Welcome!\n---\n\n# Welcome to TutorialKit!\n\nIn this tutorial we'll walk you through how to setup your environment to\nwrite your first tutorial 🤩\n```\n\n----------------------------------------\n\nTITLE: Setting Accent-Color for Document Elements in CSS\nDESCRIPTION: This code snippet demonstrates how to set the accent-color property on the body selector to customize the color of form elements like checkboxes, radio buttons, and progress bars throughout the document. The accent-color is set to a pink shade (#ff3399).\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/src/content/tutorial/1-forms-css/2-colors/1-accent-color/content.md#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  accent-color: #ff3399;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Tree Edit Permissions with Glob Patterns in YAML\nDESCRIPTION: This YAML configuration defines which files and directories are editable in the project's file tree. It uses glob patterns to specify editable items in the root, a specific file in a first-level folder, and all contents of 'second-level' folders anywhere in the project structure.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/file-tree/allow-edits-glob/content.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: lesson\ntitle: Allow Edits Glob\npreviews: false\neditor:\n  fileTree:\n    allowEdits:\n      # Items in root\n      - \"/*\"\n      # Only \"allowed-filename-only.js\" inside \"/first-level\" folder\n      - \"/first-level/allowed-filename-only.js\"\n      # Anything inside \"second-level\" folders anywhere\n      - \"**/second-level/**\"\nterminal:\n  panels: terminal\n```\n\n----------------------------------------\n\nTITLE: Styling Fieldsets and Legends with CSS\nDESCRIPTION: The code snippet shows how to customize the appearance of HTML fieldset elements. It demonstrates setting border style properties and suggests further customization to match a specific visual design.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/src/content/tutorial/1-forms-css/3-fieldset/3-fieldset-styling/content.md#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-style: solid\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for TutorialKit Lesson\nDESCRIPTION: YAML frontmatter block defining the content type and title for a TutorialKit lesson.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src-custom/lessons-in-root/content/tutorial/lesson-two/content.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: lesson\ntitle: Lesson two\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Legend to HTML Fieldset\nDESCRIPTION: Demonstrates how to add a legend element to a fieldset containing form controls for name input. The legend 'Step 1' helps users understand the purpose of this form section containing first and last name fields.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/src/content/tutorial/1-forms-css/3-fieldset/2-a-legend/content.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n  <fieldset>\n    <legend>Step 1</legend>\n    <div>\n      <label for=\"q_1\">First name:</label>\n      <input id=\"q_1\" />\n    </div>\n    <div>\n      <label for=\"q_2\">Last name:</label>\n      <input id=\"q_2\" />\n    </div>\n  </fieldset>\n```\n\n----------------------------------------\n\nTITLE: Lesson Slug Configuration\nDESCRIPTION: Shows how to configure a custom URL slug for a lesson using frontmatter.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/creating-content.mdx#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Welcome!\nslug: hello-world\n---\n```\n\n----------------------------------------\n\nTITLE: Styling Fieldset with CSS\nDESCRIPTION: This CSS snippet shows how to style a fieldset and its legend for improved visual presentation in a form.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/src/content/tutorial/1-forms-css/3-fieldset/meta.md#2025-04-18_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\nfieldset {\n  border: 2px solid #ccc;\n  border-radius: 5px;\n  padding: 20px;\n  margin-bottom: 20px;\n}\n\nlegend {\n  font-weight: bold;\n  padding: 0 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Lesson Metadata in Markdown\nDESCRIPTION: This code snippet defines the metadata for the lesson using YAML front matter in a markdown file. It specifies the content type as a lesson and sets the title.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src-custom/lessons-in-part/content/tutorial/part-two/chapter-one/lesson-4/content.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntype: lesson\ntitle: Lesson four\n---\n```\n\n----------------------------------------\n\nTITLE: Importing ButtonWriteToFile Component in JSX\nDESCRIPTION: Imports a custom React component named ButtonWriteToFile from the @components directory. This component is likely used to write content to a file in the project.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/preview/single/content.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ButtonWriteToFile } from '@components/ButtonWriteToFile';\n```\n\n----------------------------------------\n\nTITLE: Editor Documents Interface Definition\nDESCRIPTION: Defines the TypeScript interface for tracking all documents available in the editor, represented as a record of file paths mapped to their editor document objects.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/tutorialkit-api.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { FileDescriptor } from '@tutorialkit/types';\n\ntype EditorDocuments = Record<string, EditorDocument | undefined>\n\ninterface EditorDocument {\n    value: string | Uint8Array;\n    loading: boolean;\n    filePath: string;\n    type: FileDescriptor['type'];\n    scroll?: ScrollPosition;\n}\n\ninterface ScrollPosition {\n    top: number;\n    left: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User Schema and Model with Mongoose\nDESCRIPTION: Defines a Mongoose schema for user data with validation and creates a model. The schema includes fields for name, email, and age with validation rules for each field.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/1-basics/1-introduction/2-foo/_files/src/test-5.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n    lowercase: true\n  },\n  age: {\n    type: Number,\n    min: 18,\n    max: 100\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\n\nconst User = mongoose.model('User', userSchema);\n\nmodule.exports = User;\n```\n\n----------------------------------------\n\nTITLE: Configuring Lesson with Hidden File Tree in YAML\nDESCRIPTION: This YAML configuration sets up a lesson with a hidden file tree and a specific focus file. It demonstrates how to structure the lesson metadata for a particular learning environment.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/file-tree/hidden/content.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: lesson\ntitle: Hidden\neditor:\n  fileTree: false\nfocus: /example.js\n---\n```\n\n----------------------------------------\n\nTITLE: Importing ButtonWriteToFile Component in React\nDESCRIPTION: Import statement for the ButtonWriteToFile component used for file system operations.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/filesystem/no-watch/content.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ButtonWriteToFile } from '@components/ButtonWriteToFile';\n```\n\n----------------------------------------\n\nTITLE: Boot Status Type Definition\nDESCRIPTION: Defines the possible states of WebContainer boot process in TutorialKit, including unknown, blocked, booting, and booted states.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/tutorialkit-api.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype BootStatus = 'unknown' | 'blocked' | 'booting' | 'booted';\n```\n\n----------------------------------------\n\nTITLE: Integrating User Routes into Express Application\nDESCRIPTION: Sets up a complete Express application with middleware and route registration for the user API. Configures JSON parsing, error handling, and connects the user router to the application.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/1-basics/1-introduction/2-foo/_files/src/test-5.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst userRoutes = require('./routes/userRoutes');\n\n// Initialize express app\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Middleware\napp.use(express.json());\n\n// Connect to MongoDB\nmongoose\n  .connect('mongodb://localhost:27017/your-database-name', {\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  })\n  .then(() => console.log('MongoDB connected successfully'))\n  .catch(err => console.error('MongoDB connection error:', err));\n\n// Register routes\napp.use('/api/users', userRoutes);\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send('Something broke!');\n});\n\n// Start server\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components for File Management in React\nDESCRIPTION: Imports two button components from a components library that will be used to trigger file operations in the WebContainer filesystem. These components enable writing to files and deleting files.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/filesystem/watch/content.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ButtonWriteToFile } from '@components/ButtonWriteToFile';\nimport { ButtonDeleteFile } from '@components/ButtonDeleteFile';\n```\n\n----------------------------------------\n\nTITLE: ButtonWriteToFile Component Usage\nDESCRIPTION: Implementation of ButtonWriteToFile components for writing to different files in the webcontainer. Demonstrates writing to both existing and new files with specified content.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/filesystem/no-watch/content.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonWriteToFile client:load access=\"webcontainer\" filePath=\"/bar.txt\" newContent='Something else' />\n<ButtonWriteToFile client:load access=\"webcontainer\" filePath=\"/src/new.txt\" newContent='New' testId='write-new-file' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Hook\nDESCRIPTION: A simple hook that returns the current theme. This is used in the examples to provide theme context to components.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/react-components.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useTheme() {\n  return 'light';\n}\n```\n\n----------------------------------------\n\nTITLE: File Operation Button Components Implementation\nDESCRIPTION: React components implementation for writing to various file paths and deleting files. Includes buttons with specific file paths, content, and test IDs for different operations.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/filesystem/watch-glob/content.mdx#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonWriteToFile client:load access=\"webcontainer\" filePath=\"/bar.txt\" newContent='Something else' />\n<ButtonWriteToFile client:load access=\"webcontainer\" filePath=\"/a/b/baz.txt\" newContent='Foo' testId='write-to-file-in-subfolder' />\n<ButtonWriteToFile client:load access=\"webcontainer\" filePath=\"/src/new.txt\" newContent='New' testId='write-new-file' />\n<ButtonWriteToFile client:load access=\"webcontainer\" filePath=\"/unknown/other.txt\" newContent='Ignore this' testId='write-new-ignored-file' />\n\n<ButtonDeleteFile client:load access=\"webcontainer\" filePath=\"/bar.txt\" testId='delete-file' />\n```\n\n----------------------------------------\n\nTITLE: Starting the TutorialKit Demo Website\nDESCRIPTION: Command to run the TutorialKit demo website for local development and testing.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run demo\n```\n\n----------------------------------------\n\nTITLE: Cloning TutorialKit Repository\nDESCRIPTION: Commands for cloning the TutorialKit repository and navigating to the project directory.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/stackblitz/tutorialkit\ncd tutorialkit\n```\n\n----------------------------------------\n\nTITLE: Defining OpenInStackBlitz Configuration Types in TypeScript\nDESCRIPTION: TypeScript type definition for the OpenInStackBlitz configuration option, which can be a boolean or an object with project details.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/configuration.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\ntype OpenInStackBlitz =\n    | boolean\n    | { projectTitle?: string, projectDescription?: string, projectTemplate?: TemplateType }\n\ntype TemplateType = \"html\" | \"node\" | \"angular-cli\" | \"create-react-app\" | \"javascript\" | \"polymer\" | \"typescript\" | \"vue\"\n```\n\n----------------------------------------\n\nTITLE: Importing File Operation Components in JSX\nDESCRIPTION: Import statements for React components that handle file writing and deletion operations.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/filesystem/watch-glob/content.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ButtonWriteToFile } from '@components/ButtonWriteToFile';\nimport { ButtonDeleteFile } from '@components/ButtonDeleteFile';\n```\n\n----------------------------------------\n\nTITLE: Package Overrides Configuration for External Testing\nDESCRIPTION: JSON configuration example showing how to override TutorialKit package dependencies with local versions using pnpm.overrides in the root package.json file.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pnpm\": {\n    \"overrides\": {\n      \"@tutorialkit/astro\": \"file:../tutorialkit/packages/astro\",\n      \"@tutorialkit/react\": \"file:../tutorialkit/packages/react\",\n      \"@tutorialkit/runtime\": \"file:../tutorialkit/packages/runtime\",\n      \"@tutorialkit/theme\": \"file:../tutorialkit/packages/theme\",\n      \"@tutorialkit/types\": \"file:../tutorialkit/packages/types\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Custom Properties for Negative Status in TutorialKit\nDESCRIPTION: These CSS custom properties define the text and icon colors for the negative status in the preview window. The icon color defaults to the text color if not specified.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n--tk-elements-status-negative-textColor\n--tk-elements-status-negative-iconColor\n```\n\n----------------------------------------\n\nTITLE: Creating Theme Package for Non-Astro Usage\nDESCRIPTION: Addition of a standalone @tutorialkit/theme package that allows using the TutorialKit theme without requiring the Astro framework, increasing flexibility for developers.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/theme/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n* add `@tutorialkit/theme` package to use the theme without astro ([#105](https://github.com/stackblitz/tutorialkit/issues/105)) ([9805996](https://github.com/stackblitz/tutorialkit/commit/9805996a4211a1c8a3e1bfbbd958a27f1957d4d7))\n```\n\n----------------------------------------\n\nTITLE: Implementing Mobile Fixes and i18n Support\nDESCRIPTION: Bug fixes for mobile device compatibility and implementation of basic internationalization (i18n) support to expand the platform's global reach.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/theme/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* mobile fixes and basic i18n support ([#127](https://github.com/stackblitz/tutorialkit/issues/127)) ([f85e8eb](https://github.com/stackblitz/tutorialkit/commit/f85e8eb6058473b0ad2e061d39e14d111f3f34fe))\n```\n\n----------------------------------------\n\nTITLE: Viem Public Client Setup with Syntax Highlighting\nDESCRIPTION: This snippet showcases the setup of a Viem public client with syntax highlighting, word highlighting, and focus comments in TypeScript.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/1-basics/1-introduction/1-welcome/content.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Import modules\nimport { createPublicClient, http } from 'viem';\nimport { mainnet } from 'viem/chains';\n\n// 2. Set up your client with desired chain & transport\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http(),\n});\n\n// 3. Consume an action!\nconst blockNumber = await client.getBlockNumber();\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Custom Properties for Panel Header Tabs in TutorialKit\nDESCRIPTION: These CSS custom properties define the styling for tabs in panel headers, including text, background, border, and icon colors for normal, hover, and active states.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n--tk-elements-panel-headerTab-textColor\n--tk-elements-panel-headerTab-textColorHover\n--tk-elements-panel-headerTab-textColorActive\n--tk-elements-panel-headerTab-backgroundColor\n--tk-elements-panel-headerTab-backgroundColorHover\n--tk-elements-panel-headerTab-backgroundColorActive\n--tk-elements-panel-headerTab-borderColor\n--tk-elements-panel-headerTab-borderColorHover\n--tk-elements-panel-headerTab-borderColorActive\n--tk-elements-panel-headerTab-iconColor\n--tk-elements-panel-headerTab-iconColorHover\n--tk-elements-panel-headerTab-iconColorActive\n```\n\n----------------------------------------\n\nTITLE: Using ButtonWriteToFile Component in JSX\nDESCRIPTION: Renders the ButtonWriteToFile component with specific props. It's set to write 'New content' to the '/index.html' file when triggered, and uses the client:load directive for client-side rendering.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/preview/single/content.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonWriteToFile client:load filePath=\"/index.html\" newContent=\"New content\" />\n```\n\n----------------------------------------\n\nTITLE: Adding WebContainers.io Link\nDESCRIPTION: Feature implementation that adds a link to WebContainers.io, enhancing the documentation and providing additional resources for users.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/theme/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* add link to webcontainers.io ([#202](https://github.com/stackblitz/tutorialkit/issues/202)) ([70d20c7](https://github.com/stackblitz/tutorialkit/commit/70d20c7b3801b458aa11c7d70a11ea1392d0fa60))\n```\n\n----------------------------------------\n\nTITLE: Defining a Chapter with YAML Frontmatter in Markdown\nDESCRIPTION: This snippet contains YAML frontmatter that defines a chapter in what appears to be a tutorial system. It specifies the content type as 'chapter', sets the title to 'Introduction', and defines the URL slug as 'introduction'.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/src/content/tutorial/1-forms-css/1-introduction/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntype: chapter\ntitle: Introduction\nslug: introduction\n---\n```\n\n----------------------------------------\n\nTITLE: Previews Theming Tokens in CSS\nDESCRIPTION: CSS custom property for styling the borders between multiple preview sections in TutorialKit.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_15\n\nLANGUAGE: CSS\nCODE:\n```\n--tk-elements-previews-borderColor\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Custom Properties for Panel Header Buttons in TutorialKit\nDESCRIPTION: These CSS custom properties define the styling for buttons in panel headers, including text and background colors for normal and hover states, as well as icon colors.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n--tk-elements-panel-headerButton-textColor\n--tk-elements-panel-headerButton-textColorHover\n--tk-elements-panel-headerButton-backgroundColor\n--tk-elements-panel-headerButton-backgroundColorHover\n--tk-elements-panel-headerButton-iconColor\n--tk-elements-panel-headerButton-iconColorHover\n```\n\n----------------------------------------\n\nTITLE: Renaming Components Package and Simplifying UnoCSS Integration\nDESCRIPTION: Breaking changes including renaming @tutorialkit/components-react to @tutorialkit/react and simplifying the UnoCSS integration for improved developer experience.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/theme/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* rename `@tutorialkit/components-react` to `@tutorialkit/react` ([#155](https://github.com/stackblitz/tutorialkit/issues/155)) ([e3c0fee](https://github.com/stackblitz/tutorialkit/commit/e3c0fee902a7bfc312fb01b30531209815d460c3))\n* simplify UnoCSS integration ([#270](https://github.com/stackblitz/tutorialkit/issues/270)) ([8d49ef8](https://github.com/stackblitz/tutorialkit/commit/8d49ef81272d84cbfa2c1a10742f01540fe3650c))\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Reload with Server Preview in TutorialKit YAML\nDESCRIPTION: YAML configuration for a TutorialKit lesson that enables automatic reloading with a server preview. The configuration specifies the lesson type, title, template, auto reload setting, and preview port.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/preview/auto-reload-2-to/content.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: lesson\ntitle: Auto Reload To\ntemplate: file-server\nautoReload: true\npreviews:\n  - [8000, \"Server\"]\n---\n```\n\n----------------------------------------\n\nTITLE: Editor Fold Gutter Theming Tokens in CSS\nDESCRIPTION: CSS custom properties for styling the fold gutter area where code folding icons are displayed.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_18\n\nLANGUAGE: CSS\nCODE:\n```\n--tk-elements-editor-foldGutter-textColor\n--tk-elements-editor-foldGutter-textColorHover\n```\n\n----------------------------------------\n\nTITLE: Dropdown Theming Tokens in CSS\nDESCRIPTION: CSS custom properties for customizing the appearance of the breadcrumb dropdown component, including colors for background, text, borders, and interactive states.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_14\n\nLANGUAGE: CSS\nCODE:\n```\n--tk-elements-breadcrumbs-dropdown-backgroundColor\n--tk-elements-breadcrumbs-dropdown-borderColor\n--tk-elements-breadcrumbs-dropdown-textColor\n--tk-elements-breadcrumbs-dropdown-textColorHover\n--tk-elements-breadcrumbs-dropdown-accordionTextColor\n--tk-elements-breadcrumbs-dropdown-accordionTextColorSelected\n--tk-elements-breadcrumbs-dropdown-accordionTextColorHover\n--tk-elements-breadcrumbs-dropdown-accordionIconColor\n--tk-elements-breadcrumbs-dropdown-accordionIconColorSelected\n--tk-elements-breadcrumbs-dropdown-accordionIconColorHover\n--tk-elements-breadcrumbs-dropdown-lessonBackgroundColor\n--tk-elements-breadcrumbs-dropdown-lessonBackgroundColorSelected\n--tk-elements-breadcrumbs-dropdown-lessonTextColor\n--tk-elements-breadcrumbs-dropdown-lessonTextColorSelected\n--tk-elements-breadcrumbs-dropdown-lessonTextColorHover\n```\n\n----------------------------------------\n\nTITLE: Fixing Fast-Glob Windows Issue for @ Matches\nDESCRIPTION: Bug fix that applies a Windows operating system work-around for fast-glob when matching patterns containing the @ symbol, resolving compatibility issues.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/theme/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* **theme:** apply `fast-glob` Windows work-around for all `\\@` matches ([#383](https://github.com/stackblitz/tutorialkit/issues/383)) ([9f4bd13](https://github.com/stackblitz/tutorialkit/commit/9f4bd13270f877b9f52e6b85eca5693c283ee249))\n```\n\n----------------------------------------\n\nTITLE: Installing TutorialKit with PNPM\nDESCRIPTION: Command to create a new tutorial project using PNPM's dlx command. This executes the latest version of tutorialkit and creates a new project with the specified name.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/cli/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx tutorialkit@latest create my-tutorial\n```\n\n----------------------------------------\n\nTITLE: Editor Core Theming Tokens in CSS\nDESCRIPTION: CSS custom properties for customizing the main editor component, including text colors, background colors, cursor, and selection styling.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/reference/theming.mdx#2025-04-18_snippet_16\n\nLANGUAGE: CSS\nCODE:\n```\n--tk-elements-editor-textColor\n--tk-elements-editor-backgroundColor\n--tk-elements-editor-activeLineBackgroundColor\n--tk-elements-editor-cursorColor\n--tk-elements-editor-matchingBracketBackgroundColor\n--tk-elements-editor-panels-borderColor\n--tk-elements-editor-selection-backgroundColor\n--tk-elements-editor-selection-backgroundOpacity\n--tk-elements-editor-selection-inactiveBackgroundColor\n--tk-elements-editor-selection-inactiveBackgroundOpacity\n```\n\n----------------------------------------\n\nTITLE: Setting Cross-Origin Security Headers in Netlify TOML\nDESCRIPTION: Configures Cross-Origin-Embedder-Policy and Cross-Origin-Opener-Policy headers for all routes (*) to enable cross-origin isolation. These headers are required for certain secure features like SharedArrayBuffer.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/cli/src/commands/create/hosting-config/netlify_toml.txt#2025-04-18_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[headers]]\n  for = \"/*\"\n  [headers.values]\n    Cross-Origin-Embedder-Policy = \"require-corp\"\n    Cross-Origin-Opener-Policy = \"same-origin\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Responsive Form Layout with CSS\nDESCRIPTION: This CSS snippet demonstrates how to create a responsive form layout using flexbox. It sets the display property to flex and uses flex-direction to arrange form elements vertically on smaller screens.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/src/content/tutorial/1-forms-css/meta.md#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.form-container {\n  display: flex;\n  flex-direction: column;\n  max-width: 400px;\n  margin: 0 auto;\n}\n\n@media (min-width: 768px) {\n  .form-container {\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: space-between;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Lesson Metadata in Markdown Frontmatter\nDESCRIPTION: This code snippet defines metadata for a lesson page using YAML frontmatter in a markdown file. It specifies the content type as 'lesson' and sets the title to 'Page one'.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/lesson-order/1-lesson/content.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntype: lesson\ntitle: Page one\n---\n```\n\n----------------------------------------\n\nTITLE: Conditional Progress Bar Styling with @supports\nDESCRIPTION: CSS code snippet demonstrating how to conditionally apply progress bar styles only for browsers that support WebKit progress bar customization. This prevents style conflicts in Firefox which handles progress bars differently.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/src/content/tutorial/1-forms-css/2-colors/4-handle-firefox/content.md#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@supports selector(::-webkit-progress-bar) {\n  progress { ...\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Form Labels with CSS\nDESCRIPTION: This CSS snippet shows how to style form labels. It sets the display property to block, adds margin, and defines font properties to improve readability and layout.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/src/content/tutorial/1-forms-css/meta.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nlabel {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: bold;\n  font-size: 14px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for a TutorialKit Chapter\nDESCRIPTION: YAML frontmatter configuration for defining a chapter in a TutorialKit project. It specifies the content type as 'chapter', sets the title to 'The first chapter in part 1', and defines a custom URL slug 'custom-chapter-slug'.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/1-basics/1-introduction/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: chapter\ntitle: The first chapter in part 1\nslug: custom-chapter-slug\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Layout in YAML Frontmatter\nDESCRIPTION: YAML frontmatter configuration that disables previews and sets up a custom terminal panel. This configuration controls the layout and interactive elements shown on the tutorial page.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/navigation/layout-change-to/content.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: lesson\ntitle: Layout change to\npreviews: false\nterminal:\n  panels:\n    - [\"terminal\", \"Custom Terminal\"]\n---\n```\n\n----------------------------------------\n\nTITLE: Styling Form Inputs with CSS\nDESCRIPTION: This CSS snippet demonstrates how to style form input elements. It sets properties like padding, border, and font size to create a consistent look for text inputs.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/src/content/tutorial/1-forms-css/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ninput[type=\"text\"] {\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CustomMetaData Component in Astro\nDESCRIPTION: This code snippet imports a CustomMetaData component from the @components directory. The component is likely used to display or process the custom metadata defined in the frontmatter.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/metadata/custom/content.mdx#2025-04-18_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nimport CustomMetaData from \"@components/CustomMetadata.astro\"\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for a Tutorial Lesson\nDESCRIPTION: YAML configuration that sets up a lesson with type, title, template, main command, and preview settings. The configuration includes a custom preview that runs on port 8000.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src/content/tutorial/tests/navigation/layout-change-from/content.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: lesson\ntitle: Layout change from\ntemplate: default\nmainCommand: node index.mjs\npreviews:\n  - title: \"Custom preview\"\n    port: 8000\n---\n```\n\n----------------------------------------\n\nTITLE: Basic Fieldset Usage in HTML\nDESCRIPTION: This snippet demonstrates the basic structure of a fieldset element in an HTML form, including a legend and grouped form controls.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/src/content/tutorial/1-forms-css/3-fieldset/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<form>\n  <fieldset>\n    <legend>Personal Information</legend>\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\" required>\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required>\n  </fieldset>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining Tutorial Part in Markdown\nDESCRIPTION: This snippet uses YAML frontmatter in a markdown file to define the type and title of a tutorial section.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src-custom/lessons-in-part/content/tutorial/part-one/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntype: part\ntitle: 'Part one'\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Fieldset Element in HTML Form\nDESCRIPTION: This snippet demonstrates how to use the <fieldset> element to group related form inputs. It wraps two input fields (first name and last name) within a fieldset, allowing for common styling and logical grouping.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/src/content/tutorial/1-forms-css/3-fieldset/1-fieldset-element/content.md#2025-04-18_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n  <fieldset>\n    <div>\n      <label for=\"q_1\">First name:</label>\n      <input id=\"q_1\" />\n    </div>\n    <div>\n      <label for=\"q_2\">Last name:</label>\n      <input id=\"q_2\" />\n    </div>\n  </fieldset>\n```\n\n----------------------------------------\n\nTITLE: Removing borders from progress element in CSS\nDESCRIPTION: This snippet shows how to remove the default border from the HTML progress element using CSS. Removing the border affects other visual aspects like the height and border radius of the progress bar.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/src/content/tutorial/1-forms-css/2-colors/2-progressbar/content.md#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nprogress {\n  border: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Empty Tutorial Settings in YAML\nDESCRIPTION: A base YAML configuration that establishes a tutorial type project with no main command or preparation commands defined. This represents the minimal required structure for a tutorial configuration.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src-custom/lessons-in-part/content/tutorial/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: tutorial\nmainCommand: ''\nprepareCommands: []\n```\n\n----------------------------------------\n\nTITLE: Styling Progress Bar Components with Vendor Prefixes in CSS\nDESCRIPTION: Code showing how to target and style the two main components of a progress bar using -webkit- vendor prefixes. The selectors target the background container and the value indicator separately to allow for custom styling.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/src/content/tutorial/1-forms-css/2-colors/3-more-progressbar/content.md#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nprogress::-webkit-progress-bar {\n  /* ... */\n}\n\nprogress::-webkit-progress-value {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Express Router for User Routes\nDESCRIPTION: Creates an Express router with endpoints for user data management. Includes routes for getting all users, finding a user by ID, and creating a new user with appropriate error handling.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/1-basics/1-introduction/2-foo/_files/src/test-5.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst User = require('../models/User');\n\nconst router = express.Router();\n\n// Get all users\nrouter.get('/', async (req, res) => {\n  try {\n    const users = await User.find({});\n    res.status(200).json(users);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n});\n\n// Get user by ID\nrouter.get('/:id', async (req, res) => {\n  try {\n    const user = await User.findById(req.params.id);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    res.status(200).json(user);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n});\n\n// Create a new user\nrouter.post('/', async (req, res) => {\n  try {\n    const newUser = new User(req.body);\n    const savedUser = await newUser.save();\n    res.status(201).json(savedUser);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n});\n\nmodule.exports = router;\n```\n\n----------------------------------------\n\nTITLE: Tutorial Configuration in YAML\nDESCRIPTION: Minimal YAML frontmatter configuration for a tutorial project. Defines the content type as 'tutorial' with empty mainCommand and prepareCommands fields.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/src-custom/lessons-in-root/content/tutorial/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: tutorial\nmainCommand: ''\nprepareCommands: []\n---\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Form Element Reference\nDESCRIPTION: Shows the basic HTML form element tag being referenced in the tutorial context\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/src/content/tutorial/1-forms-css/1-introduction/1-welcome/content.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div> <section>\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connection with Mongoose\nDESCRIPTION: Sets up a MongoDB connection using mongoose with connection string and options. The code establishes a connection to the database with retry capability and proper error handling.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/1-basics/1-introduction/2-foo/_files/src/test-5.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\n\nconst connectionString = 'mongodb://localhost:27017/your-database-name';\nconst connectionOptions = {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n};\n\nmongoose\n  .connect(connectionString, connectionOptions)\n  .then(() => console.log('MongoDB connected successfully'))\n  .catch(err => console.error('MongoDB connection error:', err));\n```\n\n----------------------------------------\n\nTITLE: Cloning TutorialKit Repository and Navigating to Project Directory\nDESCRIPTION: These commands clone the TutorialKit repository from GitHub and change the current directory to the cloned project folder.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:stackblitz/tutorialkit.git\ncd tutorialkit\n```\n\n----------------------------------------\n\nTITLE: CSS Box Styling Example\nDESCRIPTION: An example of CSS code that would be imported from the box.css file, defining a simple red box with specific dimensions.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/creating-content.mdx#2025-04-18_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.box {\n  width: 100px;\n  height: 100px;\n  background-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning TutorialKit Repository and Navigating to Project Directory\nDESCRIPTION: Commands to clone the TutorialKit GitHub repository and navigate into the project directory. Uses SSH for repository access.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:stackblitz/tutorialkit.git\ncd tutorialkit\n```\n\n----------------------------------------\n\nTITLE: File Structure Example - Navigation Tests\nDESCRIPTION: Example directory structure showing the organization of navigation test files and their corresponding content in the project.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── src/content/tutorial\n│   └── tests\n│       └──── navigation\n│           ├── page-one\n│           ├── page-three\n│           └── page-two\n└── test\n    └── navigation.test.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM Workspaces\nDESCRIPTION: Command to install project dependencies using PNPM workspaces from the root of the project.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/demo/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: TutorialKit Changelog Entry Format\nDESCRIPTION: Standard changelog entry format showing version number, date, and categorized changes including features, bug fixes and breaking changes.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [1.5.0](https://github.com/stackblitz/tutorialkit/compare/1.4.0...1.5.0) (2025-04-16)\n\n### Bug Fixes\n\n* **react:** allow preview panel to be fully collapsed ([#445](https://github.com/stackblitz/tutorialkit/issues/445)) ([11aa9ad](https://github.com/stackblitz/tutorialkit/commit/11aa9ad338de76cf0fe18d18d889504faea1c40c))\n\n### Features\n\n* **astro:** custom expressive code plugins ([#444](https://github.com/stackblitz/tutorialkit/issues/444)) ([d586225](https://github.com/stackblitz/tutorialkit/commit/d586225d11e900b6a63d7e3c9afdf1d04aa6485c))\n* **astro:** preserve file path for imported file code blocks ([#446](https://github.com/stackblitz/tutorialkit/issues/446)) ([df69da2](https://github.com/stackblitz/tutorialkit/commit/df69da20e01d4cbed26a3f314f787e4e1ed015b9))\n```\n\n----------------------------------------\n\nTITLE: File Structure Example - File Tree Tests\nDESCRIPTION: Example directory structure showing the organization of file tree test files and their corresponding content in the project.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/e2e/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n├── src/content/tutorial\n│   └── tests\n│       └── file-tree\n│           └── lesson-and-solution\n└── test\n    └── file-tree.test.ts\n```\n\n----------------------------------------\n\nTITLE: Adding Click Event Listener to Counter Button in JavaScript/TypeScript\nDESCRIPTION: This code snippet shows how to set up a counter function with an event listener. It initializes a counter, defines a setCounter function to update the counter value and button text, and adds a click event listener to increment the counter when the button is clicked.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/cli/overwrites/src/content/tutorial/1-basics/1-introduction/1-welcome/content.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function setupCounter(element) {\n  let counter = 0;\n\n  const setCounter = (count) => {\n    counter = count;\n    element.innerHTML = `count is ${counter}`;\n  };\n\n  element.addEventListener('click', () => setCounter(counter + 1));\n\n  setCounter(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Callout Example\nDESCRIPTION: Shows how to create a callout block in markdown with links and code syntax.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/docs/tutorialkit.dev/src/content/docs/guides/creating-content.mdx#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n:::info\nSome info with some markdown `syntax` and a [`link`](https://tutorialkit.dev/).\n\nHere's a normal [link](https://tutorialkit.dev/).\n:::\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Plain Text Code Block in Markdown\nDESCRIPTION: This snippet shows how to create a plain text code block in Markdown using triple backticks.\nSOURCE: https://github.com/stackblitz/tutorialkit/blob/main/packages/template/src/content/tutorial/1-basics/1-introduction/1-welcome/content.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nwowee plain text!\n```"
  }
]