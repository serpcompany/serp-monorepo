[
  {
    "owner": "activepieces",
    "repo": "activepieces",
    "content": "TITLE: Dynamic Properties Definition in Typescript\nDESCRIPTION: Defines a property that generates a dynamic form based on data fetched, often from an API. `refreshers` specifies which properties trigger a refresh.  The `props` property is an async function returning a set of property definitions (e.g., ShortText, Number).\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/properties.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nProperty.DynamicProperties({\n  description: 'Dynamic Form',\n  displayName: 'Dynamic Form',\n  required: true,\n  refreshers: ['authentication'],\n  props: async (propsValue) => {\n    const authentication = propsValue['authentication'];\n    const apiEndpoint = 'https://someapi.com';\n    const response = await fetch(apiEndpoint);\n    const data = await response.json();\n\n    const properties = {\n      prop1: Property.ShortText({\n        displayName: 'Property 1',\n        description: 'Enter property 1',\n        required: true,\n      }),\n      prop2: Property.Number({\n        displayName: 'Property 2',\n        description: 'Enter property 2',\n        required: false,\n      }),\n    };\n\n    return properties;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Property (BETA) Definition in Typescript\nDESCRIPTION: Defines a custom property with Javascript code to inject into the frontend for DOM manipulation.  The `code` property contains the Javascript function. The function receives a `params` object with properties such as `containerId`, `value`, `onChange`, `isEmbedded`, `projectId`, and `disabled`.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/properties.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n Property.Custom({\n      code: `\n      (params) => {\n        const containerId = params.containerId;\n        const label = document.createElement('div');\n        label.textContent = 'Hello from custom property';\n        const labelClasses = 'text-sm font-medium text-gray-900'.split(' ');\n        label.classList.add(...labelClasses);\n        const container = document.getElementById(containerId);\n        container.appendChild(label);\n        container.appendChild(button);\n        const containerClasses = 'flex items-center justify-between'.split(' ');\n        container.classList.add(...containerClasses);\n        const input = document.createElement('input');\n        const inputClassList = 'border border-solid border-border rounded-md'.split(' ');\n        input.classList.add(...inputClassList)\n        input.type = 'text';\n        input.value = params.value?? \"Default value\";\n        input.oninput = (e) => {\n          console.log(\"input changed\", e.target.value);\n          params.onChange(e.target.value);\n        }\n        container.appendChild(input);\n      }`,\n      displayName: 'Custom Property',\n      required: true,\n      defaultValue: \"Default Value\", \n      description: \"Custom Property Made By You\",\n    })\n```\n\n----------------------------------------\n\nTITLE: Implementing a Polling Trigger in TypeScript\nDESCRIPTION: This snippet shows the implementation of a polling trigger using the Activepieces framework. It defines a `newFlavorCreated` trigger that polls a remote API for new ice cream flavors. It uses the `pollingHelper` and `httpClient` from `@activepieces/pieces-common` to fetch data and manage the polling process. It uses `DedupeStrategy.TIMEBASED` to prevent duplicate events.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/building-pieces/create-trigger.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { gelatoAuth } from '../../';\nimport {\n  DedupeStrategy,\n  HttpMethod,\n  HttpRequest,\n  Polling,\n  httpClient,\n  pollingHelper,\n} from '@activepieces/pieces-common';\nimport {\n  PiecePropValueSchema,\n  TriggerStrategy,\n  createTrigger,\n} from '@activepieces/pieces-framework';\nimport dayjs from 'dayjs';\n\nconst polling: Polling<\n  PiecePropValueSchema<typeof gelatoAuth>,\n  Record<string, never>\n> = {\n  strategy: DedupeStrategy.TIMEBASED,\n  items: async ({ auth, propsValue, lastFetchEpochMS }) => {\n    const request: HttpRequest = {\n      method: HttpMethod.GET,\n      url: 'https://cloud.activepieces.com/api/v1/webhooks/aHlEaNLc6vcF1nY2XJ2ed/sync',\n      headers: {\n        authorization: auth,\n      },\n    };\n    const res = await httpClient.sendRequest(request);\n    return res.body['flavors'].map((flavor: string) => ({\n      epochMilliSeconds: dayjs().valueOf(),\n      data: flavor,\n    }));\n  },\n};\n\nexport const newFlavorCreated = createTrigger({\n  auth: gelatoAuth,\n  name: 'newFlavorCreated',\n  displayName: 'new flavor created',\n  description: 'triggers when a new icecream flavor is created.',\n  props: {},\n  sampleData: {},\n  type: TriggerStrategy.POLLING,\n  async test(context) {\n    return await pollingHelper.test(polling, context);\n  },\n  async onEnable(context) {\n    const { store, auth, propsValue } = context;\n    await pollingHelper.onEnable(polling, { store, auth, propsValue });\n  },\n\n  async onDisable(context) {\n    const { store, auth, propsValue } = context;\n    await pollingHelper.onDisable(polling, { store, auth, propsValue });\n  },\n\n  async run(context) {\n    return await pollingHelper.poll(polling, context);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Webhook URL, Payload, and PropsValue in Trigger Context - TypeScript\nDESCRIPTION: This snippet highlights accessing `webhookUrl`, `payload`, and `propsValue` from the context object within a trigger's `run` function. `context.webhookUrl` provides a unique URL to trigger the flow via a webhook. `context.payload` holds data from the HTTP request. `context.propsValue` contains the user-defined properties.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/triggers/overview.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Webhook URL: A unique, auto-generated URL that will trigger the flow. Useful when you need to develop a trigger based on webhooks.\ncontext.webhookUrl;\n\n// Payload: Contains information about the HTTP request sent by the third party. It has three properties: status, headers, and body.\ncontext.payload;\n\n// PropsValue: Contains the information filled by the user in defined properties.\ncontext.propsValue;\n```\n\n----------------------------------------\n\nTITLE: Chat Completion using AI in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `AI` class within Activepieces to perform chat completion. It initializes the AI provider using the context properties, sends a message to the AI model, and retrieves a response.  It requires `AIChatRole` to be defined and the `context` object to provide `propsValue` with `provider` and `model` properties, as well as a `server` property.  The output is the response from the AI model.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/unified-ai/chat.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = AI({ provider: context.propsValue.provider, server: context.server });\n\nconst response = await ai.chat.text({\n  model: context.propsValue.model,\n  messages: [\n    {\n      role: AIChatRole.USER,\n      content: \"Can you provide examples of TypeScript code formatting?\",\n    },\n  ],\n  /**\n   * Controls the creativity of the AI response.\n   * A higher value will make the AI more creative and a lower value will make it more deterministic.\n   */\n  creativity: 0.7,\n  /**\n   * The maximum number of tokens to generate in the completion.\n   */\n  maxTokens: 100,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the Icecream Flavor Action\nDESCRIPTION: This TypeScript code defines an Activepieces action named `getIcecreamFlavor`. It fetches a random icecream flavor from a remote endpoint using an HTTP GET request with API key authentication.  It utilizes the `@activepieces/pieces-framework` and `@activepieces/pieces-common` libraries.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/building-pieces/create-action.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createAction,\n  Property,\n  PieceAuth,\n} from '@activepieces/pieces-framework';\nimport { httpClient, HttpMethod } from '@activepieces/pieces-common';\nimport { gelatoAuth } from '../..';\n\nexport const getIcecreamFlavor = createAction({\n  name: 'get_icecream_flavor', // Must be a unique across the piece, this shouldn't be changed.\n  auth: gelatoAuth,\n  displayName: 'Get Icecream Flavor',\n  description: 'Fetches random icecream flavor',\n  props: {},\n  async run(context) {\n    const res = await httpClient.sendRequest<string[]>({\n      method: HttpMethod.GET,\n      url: 'https://cloud.activepieces.com/api/v1/webhooks/RGjv57ex3RAHOgs0YK6Ja/sync',\n      headers: {\n        Authorization: context.auth, // Pass API key in headers\n      },\n    });\n    return res.body;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Pausing Flow for Webhook - Typescript\nDESCRIPTION: This code snippet shows how to pause a flow and wait for a webhook callback in Activepieces. It uses the `ctx.run.pause()` method with `pauseMetadata` of type `PauseType.WEBHOOK`.  A `callbackUrl` is generated using `context.generateResumeUrl` which is then provided in the HTTP response. The flow will resume when the generated URL is called with a payload.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/flow-control.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nctx.run.pause({\n  pauseMetadata: {\n    type: PauseType.WEBHOOK,\n    response: {\n      callbackUrl: context.generateResumeUrl({\n        queryParams: {},\n      }),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Multi-Select Dynamic Dropdown Property in Typescript\nDESCRIPTION: Defines a property that allows multiple selections from dynamically loaded options.  The `refreshers` array lists properties whose changes trigger option updates. The `options` property takes an async function returning options with `label` and `value`.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/properties.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nProperty.MultiSelectDropdown({\n  displayName: 'Options',\n  description: 'Select one or more options',\n  required: true,\n  refreshers: ['auth'],\n  options: async ({ auth }) => {\n    if (!auth) {\n      return {\n        disabled: true,\n      };\n    }\n    return {\n      options: [\n        {\n          label: 'Option One',\n          value: '1',\n        },\n        {\n          label: 'Option Two',\n          value: '2',\n        },\n      ],\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Add API Key Authentication to Activepieces Piece (Gelato)\nDESCRIPTION: This code snippet demonstrates how to add API Key authentication to an Activepieces piece named Gelato. It uses `PieceAuth.SecretText` to define the authentication method, which requires an API key to be provided. The API key is then used in subsequent actions or triggers. The example uses \"test-key\" as value for the API Key.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/building-pieces/piece-authentication.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PieceAuth, createPiece } from '@activepieces/pieces-framework';\n\nexport const gelatoAuth = PieceAuth.SecretText({\n  displayName: 'API Key',\n  required: true,\n  description: 'Please use **test-key** as value for API Key',\n});\n\nexport const gelato = createPiece({\n  displayName: 'Gelato',\n  logoUrl: 'https://cdn.activepieces.com/pieces/gelato.png',\n  auth: gelatoAuth,\n  authors: [],\n  actions: [],\n  triggers: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Storing a Value in Persistent Storage (Put)\nDESCRIPTION: Stores a value associated with a given key in the Activepieces persistent storage. The `ctx.store.put` method is used to store the value. The scope can be either at flow or project level. The example demonstrates storing a string value with 'KEY' as the key in the project scope.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/persistent-storage.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nctx.store.put('KEY', 'VALUE', StoreScope.PROJECT);\n```\n\n----------------------------------------\n\nTITLE: Stopping Flow without Response - Typescript\nDESCRIPTION: This code snippet demonstrates how to stop the execution of a flow without sending a response back to the webhook trigger in Activepieces. It uses the `context.run.stop()` method without any arguments, effectively terminating the flow without any additional output.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/flow-control.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncontext.run.stop();\n```\n\n----------------------------------------\n\nTITLE: Time-based Polling Strategy\nDESCRIPTION: This snippet demonstrates the time-based polling strategy for fetching new items based on a timestamp. It defines the `items` method, which fetches the most recent items and returns them with their epoch milliseconds and data. The polling object's generic type consists of the props value and the object type.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/triggers/polling-trigger.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst polling: Polling<{ authentication: OAuth2PropertyValue, object: string }> = {\n  strategy: DedupeStrategy.TIMEBASED,\n  items: async ({ propsValue, lastFetchEpochMS }) => {\n    // Todo implement the logic to fetch the items\n    const items = [ {id: 1, created_date: '2021-01-01T00:00:00Z'}, {id: 2, created_date: '2021-01-01T00:00:00Z'}];\n    return items.map((item) => ({\n      epochMilliSeconds: dayjs(item.created_date).valueOf(),\n      data: item,\n    }));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing the Trigger in the Piece Definition (TypeScript)\nDESCRIPTION: This snippet shows how to expose the `newFlavorCreated` trigger within the piece definition. It imports the trigger and adds it to the `triggers` array in the `createPiece` function. This makes the trigger available for use in Activepieces flows.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/building-pieces/create-trigger.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPiece } from '@activepieces/pieces-framework';\nimport { getIcecreamFlavor } from './lib/actions/get-icecream-flavor';\n// Don't forget to add the following import.\nimport { newFlavorCreated } from './lib/triggers/new-flavor-created';\n\nexport const gelato = createPiece({\n  displayName: 'Gelato Tutorial',\n  logoUrl: 'https://cdn.activepieces.com/pieces/gelato.png',\n  authors: [],\n  auth: gelatoAuth,\n  actions: [getIcecreamFlavor],\n  // Add the trigger here.\n  triggers: [newFlavorCreated], // <--------\n});\n```\n\n----------------------------------------\n\nTITLE: Calling the Connect Method in HTML\nDESCRIPTION: This snippet demonstrates how to call the `connect` method of the `activepieces` object within an HTML script tag. It opens a new connection dialog for the specified piece (`@activepieces/piece-google-sheets`). This requires the Activepieces SDK to be initialized and available in the `window` object.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/embedding/embed-connections.mdx#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script> \n        activepieces.connect({pieceName:'@activepieces/piece-google-sheets'});\n        </script>\n```\n\n----------------------------------------\n\nTITLE: Generating JWT with jsonwebtoken in Node.js\nDESCRIPTION: This Node.js snippet demonstrates how to generate a JWT token using the `jsonwebtoken` library. It sets the payload claims, including user ID, project ID, role, and expiration time. The token is signed using the RS256 algorithm and a private key (ACTIVEPIECES_SIGNING_KEY), and the signing key ID (`kid`) is included in the header.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/embedding/provision-users.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwt = require('jsonwebtoken');\n\n// JWT NumericDates specified in seconds:\nconst currentTime = Math.floor(Date.now() / 1000);\nlet token = jwt.sign(\n  {\n    version: \"v3\",\n    externalUserId: \"user_id\",\n    externalProjectId: \"user_project_id\",\n    firstName: \"John\",\n    lastName: \"Doe\",\n    role: \"EDITOR\",\n    piecesFilterType: \"NONE\",\n    exp: currentTime + (60 * 60), // 1 hour from now\n  },\n  process.env.ACTIVEPIECES_SIGNING_KEY,\n  {\n    algorithm: \"RS256\",\n    header: {\n      kid: signingKeyID, // Include the \"kid\" in the header\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Chat Function Calling\nDESCRIPTION: This TypeScript code snippet demonstrates how to use `ai.chat.function` to extract structured data from text using a chat-based AI model. It takes `model` and `text` from `context.propsValue`, defines a function `extract_structured_data` with arguments for customer name, order ID, purchase date, and total amount. It returns a structured data object based on the text analysis.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/unified-ai/function-calling.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst chatResponse = await ai.chat.function({\n    model: context.propsValue.model,\n    messages: [\n        {\n            role: AIChatRole.USER,\n            content: context.propsValue.text,\n        },\n    ],\n    functions: [\n        {\n            name: 'extract_structured_data',\n            description: 'Extract the following data from the provided text.',\n            arguments: [\n                { name: 'customerName', type: 'string', description: 'The customer\\'s name.', isRequired: true },\n                { name: 'orderId', type: 'string', description: 'Unique order identifier.', isRequired: true },\n                { name: 'purchaseDate', type: 'string', description: 'Date of purchase (YYYY-MM-DD).', isRequired: false },\n                { name: 'totalAmount', type: 'number', description: 'Total transaction amount in dollars.', isRequired: false },\n            ],\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Image Function Calling\nDESCRIPTION: This TypeScript code snippet shows how to use `ai.image.function` to extract structured data from an image using an image-based AI model. It retrieves `imageModel` and `imageData` from `context.propsValue`, defines a function `extract_structured_data` with similar arguments as in the chat example (customer name, order ID, purchase date, and total amount). The output is structured data extracted from the image's text.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/unified-ai/function-calling.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst imageResponse = await ai.image.function({\n    model: context.propsValue.imageModel,\n    image: context.propsValue.imageData,\n    functions: [\n        {\n            name: 'extract_structured_data',\n            description: 'Extract the following data from the image text.',\n            arguments: [\n                { name: 'customerName', type: 'string', description: 'The customer\\'s name.', isRequired: true },\n                { name: 'orderId', type: 'string', description: 'Unique order identifier.', isRequired: true },\n                { name: 'purchaseDate', type: 'string', description: 'Date of purchase (YYYY-MM-DD).', isRequired: false },\n                { name: 'totalAmount', type: 'number', description: 'Total transaction amount in dollars.', isRequired: false },\n            ],\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Stopping Flow with Response - Typescript\nDESCRIPTION: This code snippet demonstrates how to stop the execution of a flow and send a response back to the webhook trigger in Activepieces. It utilizes the `context.run.stop()` method with a `response` object, which can be customized with status code, body, and headers. The status code defaults to 200 if not provided, and headers and body are retrieved from `context.propsValue`.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/flow-control.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncontext.run.stop({\n  response: {\n    status: context.propsValue.status ?? StatusCodes.OK,\n    body: context.propsValue.body,\n    headers: (context.propsValue.headers as Record<string, string>) ?? {},\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Pieces Claim in Provision Token\nDESCRIPTION: This JSON snippet demonstrates how to configure the `pieces` claim within a provision token to filter available pieces based on tags. The `piecesFilterType` specifies the filtering method (ALLOWED in this case), and `piecesTags` lists the allowed tags. Only pieces with these specified tags will be synced to the project when the token is used.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/embedding/customize-pieces.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \t\t\t/// Other claims\n            \"piecesFilterType\": \"ALLOWED\",\n            \"piecesTags\": [ \"free\" ]\n        }\n```\n\n----------------------------------------\n\nTITLE: Username and Password Authentication with Validation\nDESCRIPTION: Defines a `BasicAuth` authentication method for collecting username and password credentials. Includes optional validation to ensure that credentials have been passed. Returns a validation result with a boolean 'valid' and an optional error message.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/authentication.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPieceAuth.BasicAuth({\n    displayName: 'Credentials',\n    description: 'Enter your username and password',\n    required: true,\n    username: {\n        displayName: 'Username',\n        description: 'Enter your username',\n    },\n    password: {\n        displayName: 'Password',\n        description: 'Enter your password',\n    },\n    // Optional Validation\n    validate: async ({auth}) => {\n        if(auth){\n            return {\n                valid: true,\n            }\n        }\n        return {\n            valid: false,\n            error: 'Invalid Api Key'\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Dictionary Property Definition in Typescript\nDESCRIPTION: Defines a property that collects key-value pairs from the user. It's also referred to as Object property. It includes options for display name, description, whether the field is required, and a default value (as a JSON object).\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/properties.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nProperty.Object({\n  displayName: 'Options',\n  description: 'Enter key-value pairs',\n  required: true,\n  defaultValue: {\n    key1: 'value1',\n    key2: 'value2',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Polling Trigger Implementation\nDESCRIPTION: This snippet shows how to implement a polling trigger using the polling helper. It defines the trigger's name, display name, description, type, and properties. It also defines the `onEnable`, `onDisable`, `run`, and `test` methods, which use the polling helper to manage the trigger's lifecycle.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/triggers/polling-trigger.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const newTicketInView = createTrigger({\n    name: 'new_ticket_in_view',\n    displayName: 'New ticket in view',\n    description: 'Triggers when a new ticket is created in a view',\n    type: TriggerStrategy.POLLING,\n    props: {\n        authentication: Property.SecretText({\n            displayName: 'Authentication',\n            description: markdownProperty,\n            required: true,\n        }),\n    },\n    sampleData: {},\n    onEnable: async (context) => {\n        await pollingHelper.onEnable(polling, {\n            store: context.store,\n            propsValue: context.propsValue,\n            auth: context.auth\n        })\n    },\n    onDisable: async (context) => {\n        await pollingHelper.onDisable(polling, {\n            store: context.store,\n            propsValue: context.propsValue,\n            auth: context.auth\n\n        })\n    },\n    run: async (context) => {\n        return await pollingHelper.poll(polling, context);\n    },\n    test: async (context) => {\n        return await pollingHelper.test(polling, context);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Image with AI in Activepieces (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to generate an image using AI within Activepieces. It uses the `AI` class to interact with an AI provider and the `image.generate` method to create an image based on a prompt, model, and other options. It requires `context.propsValue` to access configuration values and `context.server` for server-related functionalities.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/unified-ai/image.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = AI({\n  provider: context.propsValue.provider,\n  server: context.server,\n});\n\nconst response = await image.generate({\n  // The model to use for image generation\n  model: context.propsValue.model,\n  // The prompt to guide the image generation\n  prompt: context.propsValue.prompt,\n  // The resolution of the generated image\n  size: \"1024x1024\",\n  // Any advanced options for the image generation\n  advancedOptions: {},\n});\n```\n\n----------------------------------------\n\nTITLE: JWT Payload Example\nDESCRIPTION: This JSON snippet shows the structure of the JWT payload. It includes claims like version, external user and project IDs, user details (first name, last name), role, pieces filter type, and an expiry timestamp. The `externalUserId` and `externalProjectId` are critical as they uniquely identify the user and project within your SaaS.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/embedding/provision-users.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"v3\",\n  \"externalUserId\": \"user_id\",\n  \"externalProjectId\": \"user_project_id\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"role\": \"EDITOR\",\n  \"piecesFilterType\": \"NONE\",\n  \"exp\": 1856563200\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom API Call Action for Jira Cloud\nDESCRIPTION: This snippet shows how to enable the `Custom API Call` action for the Jira Cloud piece. It features a dynamic base URL that depends on the user's authentication details, as well as basic authentication using email and API token. The `authMapping` function constructs the appropriate authorization header.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/custom-api-calls.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nactions: [\n  ...yourActions,\n  createCustomApiCallAction({\n    baseUrl: (auth) => {\n      return `${(auth as JiraAuth).instanceUrl}/rest/api/3`\n    },\n    auth: jiraCloudAuth,\n    authMapping: async (auth) => {\n      const typedAuth = auth  as JiraAuth\n      return {\n        'Authorization': `Basic ${typedAuth.email}:${typedAuth.apiToken}`\n      }\n    }\n  })\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a New Trigger with `createTrigger` - TypeScript\nDESCRIPTION: This code snippet demonstrates the structure of a trigger in Activepieces using the `createTrigger` function. It showcases the configuration options for a trigger, including authentication, name, display name, description, trigger type (polling or webhook), properties, and lifecycle methods like `onEnable`, `onDisable`, and the `run` function for trigger execution. The `run` method returns an array of payloads, each representing a separate flow run.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/triggers/overview.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const createNewIssue = createTrigger({\n    auth: PieceAuth | undefined\n    name: string, // Unique name across the piece.\n    displayName: string, // Display name on the interface.\n\tdescription: string, // Description for the action\n    triggerType: POLLING | WEBHOOK,\n\n    props: {}; // Required properties from the user.\n    // Run when the user enable or publish the flow.\n\n\tonEnable: (ctx) => {};\n    // Run when the user disable the flow or\n    // the old flow is deleted after new one is published.\n\tonDisable: (ctx) => {};\n\n    // Trigger implementation, It takes context as parameter.\n    // should returns an array of payload, each payload considered\n    // a separate flow run.\n    run: async run(ctx): unknown[] => {}\n})\n```\n\n----------------------------------------\n\nTITLE: GitHub Action for Syncing Custom Pieces\nDESCRIPTION: This GitHub Action automates the synchronization of custom pieces to an Activepieces instance when changes are pushed to the `main` branch or when triggered manually.  It checks out the repository, caches Node.js dependencies, sets up Node.js, installs dependencies, and then runs the `sync-pieces` script. The `AP_API_KEY` and `INSTANCE_URL` are fetched from GitHub secrets.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/misc/pieces-ci-cd.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Sync Custom Pieces\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  sync-pieces:\n    runs-on: ubuntu-latest\n\n    steps:\n      # Step 1: Check out the repository code with full history\n      - name: Check out repository code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      # Step 2: Cache Node.js dependencies\n      - name: Cache Node.js dependencies\n        uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: npm-${{ hashFiles('package-lock.json') }}\n          restore-keys: |\n            npm-\n\n      # Step 3: Set up Node.js\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '20' # Use Node.js version 20\n          cache: 'npm'\n\n      # Step 4: Install dependencies using npm ci\n      - name: Install dependencies\n        run: npm ci --ignore-scripts\n\n      # Step 6: Sync Custom Pieces\n      - name: Sync Custom Pieces\n        env:\n          AP_API_KEY: ${{ secrets.AP_API_KEY }}\n        run: npm run sync-pieces -- --apiUrl ${{ secrets.INSTANCE_URL }}/api\n\n```\n\n----------------------------------------\n\nTITLE: Exposing Action in Piece Definition\nDESCRIPTION: This TypeScript code demonstrates how to expose the newly created `getIcecreamFlavor` action within the Activepieces piece definition.  It imports the action and adds it to the `actions` array of the piece configuration, making it available for use in flows.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/building-pieces/create-action.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPiece } from '@activepieces/pieces-framework';\n// Don't forget to add the following import.\nimport { getIcecreamFlavor } from './lib/actions/get-icecream-flavor';\n\nexport const gelato = createPiece({\n  displayName: 'Gelato',\n  logoUrl: 'https://cdn.activepieces.com/pieces/gelato.png',\n  authors: [],\n  auth: gelatoAuth,\n  // Add the action here.\n  actions: [getIcecreamFlavor], // <--------\n  triggers: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Zod Validation Example in Activepieces (TypeScript)\nDESCRIPTION: This code demonstrates how to use Zod for runtime validation of piece properties in Activepieces. It imports necessary modules, defines properties, and uses the propsValidation helper with Zod schemas to validate input. The example defines an action `getIcecreamFlavor` with properties like `sweetnessLevel`, `includeToppings`, and `numberOfFlavors`. It then uses `propsValidation.validateZod` to validate these properties against Zod schemas, ensuring that `sweetnessLevel` is between 0 and 10 and `numberOfFlavors` is between 1 and 5.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/properties-validation.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAction, Property } from '@activepieces/pieces-framework';\nimport { propsValidation } from '@activepieces/pieces-common';\nimport { z } from 'zod';\n\nexport const getIcecreamFlavor = createAction({\n  name: 'get_icecream_flavor', // Unique name for the action.\n  displayName: 'Get Ice Cream Flavor',\n  description: 'Fetches a random ice cream flavor based on user preferences.',\n  props: {\n    sweetnessLevel: Property.Number({\n      displayName: 'Sweetness Level',\n      required: true,\n      description: 'Specify the sweetness level (0 to 10).',\n    }),\n    includeToppings: Property.Checkbox({\n      displayName: 'Include Toppings',\n      required: false,\n      description: 'Should the flavor include toppings?',\n      defaultValue: true,\n    }),\n    numberOfFlavors: Property.Number({\n      displayName: 'Number of Flavors',\n      required: true,\n      description: 'How many flavors do you want to fetch? (1-5)',\n      defaultValue: 1,\n    }),\n  },\n  async run({ propsValue }) {\n    // Validate the input properties using Zod\n    await propsValidation.validateZod(propsValue, {\n      sweetnessLevel: z.number().min(0).max(10, 'Sweetness level must be between 0 and 10.'),\n      numberOfFlavors: z.number().min(1).max(5, 'You can fetch between 1 and 5 flavors.'),\n    });\n\n    // Action logic\n    const sweetnessLevel = propsValue.sweetnessLevel;\n    const includeToppings = propsValue.includeToppings ?? true; // Default to true\n    const numberOfFlavors = propsValue.numberOfFlavors;\n\n    // Simulate fetching random ice cream flavors\n    const allFlavors = [\n      'Vanilla',\n      'Chocolate',\n      'Strawberry',\n      'Mint',\n      'Cookie Dough',\n      'Pistachio',\n      'Mango',\n      'Coffee',\n      'Salted Caramel',\n      'Blackberry',\n    ];\n    const selectedFlavors = allFlavors.slice(0, numberOfFlavors);\n\n    return {\n      message: `Here are your ${numberOfFlavors} flavors: ${selectedFlavors.join(', ')}`,\n      sweetnessLevel: sweetnessLevel,\n      includeToppings: includeToppings,\n    };\n  },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Activepieces Embedding SDK\nDESCRIPTION: This code snippet demonstrates how to initialize the Activepieces embedding SDK using the `activepieces.configure` method. It configures the SDK with parameters like the instance URL, JWT token, container ID, and various UI customization options. The SDK provides methods to configure an Activepieces instance in an iframe for use in other applications.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/embedding/embed-builder.mdx#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://cdn.activepieces.com/sdk/embed/0.3.7.js\">\n</script>\n<script>\nactivepieces.configure({\n  prefix: \"/\",\n  instanceUrl: 'INSTANCE_URL',\n  jwtToken: \"GENERATED_JWT_TOKEN\",\n  embedding: {\n    containerId: \"container\",\n    builder: {\n      disableNavigation: false,\n      hideLogo: false,\n      hideFlowName: false\n    },\n    dashboard: {\n      hideSidebar: false\n    },\n    hideFolders: false,\n    navigation: {\n      handler: ({ route }) => {\n          // The iframe route has changed, make sure you check the navigation section.\n        }\n    }\n  },\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Dropdown Property Definition in Typescript\nDESCRIPTION: Defines a property that dynamically loads options based on the user's input or other factors. `refreshers` specifies which other properties trigger a refresh of the dropdown options. The `options` property is an asynchronous function that fetches the options.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/properties.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nProperty.Dropdown({\n  displayName: 'Options',\n  description: 'Select an option',\n  required: true,\n  refreshers: ['auth'],\n  refreshOnSearch: false,\n  options: async ({ auth }, { searchValue }) => {\n    // Search value only works when refreshOnSearch is true\n    if (!auth) {\n      return {\n        disabled: true,\n      };\n    }\n    return {\n      options: [\n        {\n          label: 'Option One',\n          value: '1',\n        },\n        {\n          label: 'Option Two',\n          value: '2',\n        },\n      ],\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Long Text Property Definition in Typescript\nDESCRIPTION: Defines a property that collects a long text input from the user.  Includes options for display name, description, and whether the field is required.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/properties.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nProperty.LongText({\n  displayName: 'Description',\n  description: 'Enter a description',\n  required: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing an External Library with npm\nDESCRIPTION: This command installs a specified library as a dependency for the project. The `--save` flag ensures that the library is added to the `package.json` file. Replace `<library-name>` with the actual name of the library you wish to install. This command should be run from the root directory of the Activepieces project.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/external-libraries.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save <library-name>\n```\n\n----------------------------------------\n\nTITLE: File Property Definition in Typescript\nDESCRIPTION: Defines a property that collects a file from the user, either by providing a URL or uploading a file.  It includes options for display name, description, and whether the field is required.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/properties.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nProperty.File({\n  displayName: 'File',\n  description: 'Upload a file',\n  required: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Array of Fields Property Definition in Typescript\nDESCRIPTION: Defines a property that collects an array of objects from the user, defining a dynamic array of fields.  Each object within the array is described by `properties`, where each property is defined with its own Property definition (e.g., ShortText, StaticDropdown).\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/properties.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nProperty.Array({\n  displayName: 'Fields',\n  description: 'Enter fields',\n  properties: {\n    fieldName: Property.ShortText({\n      displayName: 'Field Name',\n      required: true,\n    }),\n    fieldType: Property.StaticDropdown({\n      displayName: 'Field Type',\n      required: true,\n      options: {\n        options: [\n          { label: 'TEXT', value: 'TEXT' },\n          { label: 'NUMBER', value: 'NUMBER' },\n        ],\n      },\n    }),\n  },\n  required: false,\n  defaultValue: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Authentication with Validation\nDESCRIPTION: Defines a `CustomAuth` authentication method allowing for custom properties such as base URL and access token. Utilizes `Property.ShortText` and `PieceAuth.SecretText` for input fields. Includes optional validation to ensure that credentials have been passed. Returns a validation result with a boolean 'valid' and an optional error message.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/authentication.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nPieceAuth.CustomAuth({\n    displayName: 'Custom Authentication',\n    description: 'Enter custom authentication details',\n    props: {\n        base_url: Property.ShortText({\n            displayName: 'Base URL',\n            description: 'Enter the base URL',\n            required: true,\n        }),\n        access_token: PieceAuth.SecretText({\n            displayName: 'Access Token',\n            description: 'Enter the access token',\n            required: true\n        })\n    },\n    // Optional Validation\n    validate: async ({auth}) => {\n        if(auth){\n            return {\n                valid: true,\n            }\n        }\n        return {\n            valid: false,\n            error: 'Invalid Api Key'\n        }\n    },\n    required: true\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Encryption Keys with OpenSSL\nDESCRIPTION: These commands generate 16-byte (for AP_ENCRYPTION_KEY) and 32-character hexadecimal keys (for AP_JWT_SECRET and AP_POSTGRES_PASSWORD) using OpenSSL. These keys are used for encryption and authentication purposes. OpenSSL must be installed on the system.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/configuration/environment-variables.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -hex 16\n```\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -hex 32\n```\n\n----------------------------------------\n\nTITLE: Secret Text Authentication with Validation\nDESCRIPTION: Defines a `SecretText` authentication method for collecting sensitive information like API keys. Includes optional validation to check if the input starts with 'sk_'. Returns a validation result with a boolean 'valid' and an optional error message.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/authentication.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nPieceAuth.SecretText({\n    displayName: 'API Key',\n    description: 'Enter your API key',\n    required: true,\n    // Optional Validation\n    validate: async ({auth}) => {\n        if(auth.startsWith('sk_')){\n            return {\n                valid: true,\n            }\n        }\n        return {\n            valid: false,\n            error: 'Invalid Api Key'\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom API Call Action for OpenAI\nDESCRIPTION: This code snippet demonstrates how to enable the `Custom API Call` action for the OpenAI piece. It utilizes a bearer token for authentication and defines a base URL for the API. The `authMapping` function maps the authentication object to the appropriate authorization header.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/custom-api-calls.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nactions: [\n  ...yourActions,\n  createCustomApiCallAction({\n    // The auth object defined in the piece\n    auth: openaiAuth,\n    // The base URL for the API\n    baseUrl: () => {\n      'https://api.openai.com/v1'\n    },\n    // Mapping the auth object to the needed authorization headers\n    authMapping: async (auth) => {\n      return {\n        'Authorization': `Bearer ${auth}`\n      }\n    }\n  })\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Trigger with Activepieces CLI (Bash)\nDESCRIPTION: This snippet shows how to create a new trigger using the Activepieces command-line interface (CLI). It prompts the user for the piece folder name, trigger display name, trigger description, and trigger technique (polling or webhook).\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/building-pieces/create-trigger.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli triggers create\n```\n\n----------------------------------------\n\nTITLE: Setting AP_DEV_PIECES Environment Variable\nDESCRIPTION: This code snippet demonstrates how to set the `AP_DEV_PIECES` environment variable to enable specific pieces during development.  It sets the variable with a comma-separated list of piece names and then starts the application using `npm start`. This allows developers to work with specific pieces without loading all pieces, thus avoiding performance issues during development.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/development-setup/getting-started.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nAP_DEV_PIECES=google-sheets,cal-com npm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Activepieces SDK for URL Sync (JavaScript)\nDESCRIPTION: This snippet configures the Activepieces SDK to automatically synchronize the URL in the embedded iframe with the browser's URL. It listens for route changes within the iframe and updates the browser's history accordingly. It also listens for browser back/forward navigation events and syncs them back to the iframe using `activepieces.navigate`. This requires a valid instance URL and JWT token. The code assumes there is an element with the ID 'container' where Activepieces is embedded.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/embedding/navigation.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nactivepieces.configure({\n  prefix: \"/\",\n  instanceUrl: 'INSTANCE_URL',\n  jwtToken: \"GENERATED_JWT_TOKEN\",\n  embedding: {\n    containerId: \"container\",\n    builder: {\n      disableNavigation: false,\n      hideLogo: false,\n      hideFlowName: false\n    },\n    dashboard: {\n      hideSidebar: false\n    },\n    hideFolders: false,\n    navigation: {\n      handler: ({ route }) => {\n        //route can include search params at the end of it\n        if (!window.location.href.endsWith(route)) {\n          window.history.pushState({}, \"\", window.location.origin + route);\n        }\n      }\n    }\n  },\n});\n\nwindow.addEventListener(\"popstate\", () => {\n  const route = activepieces.extractActivepiecesRouteFromUrl({ vendorUrl: window.location.href });\n  activepieces.navigate({ route });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Gelato Piece\nDESCRIPTION: This TypeScript code initializes a new Activepieces piece named 'Gelato'. It defines the display name, logo URL, authentication type, authors, actions, and triggers. The piece is created using the `createPiece` function from the `@activepieces/pieces-framework` package.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/building-pieces/piece-definition.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PieceAuth, createPiece } from '@activepieces/pieces-framework';\n\nexport const gelato = createPiece({\n  displayName: 'Gelato',\n  logoUrl: 'https://cdn.activepieces.com/pieces/gelato.png',\n  auth: PieceAuth.None(),\n  authors: [],\n  actions: [],\n  triggers: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Writing a File to Storage\nDESCRIPTION: This code snippet demonstrates how to write a file to storage using the `files.write` method. It stores the file in either the database (testing mode) or a local temporary directory. The method takes a file name and data (as a Buffer) as input and returns a file reference string.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/files.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileReference = await files.write({\n    fileName: 'file.txt',\n    data: Buffer.from('text')\n});\n```\n\n----------------------------------------\n\nTITLE: Example CLI prompts\nDESCRIPTION: This example shows the prompts and responses when creating a new piece using the Activepieces CLI. It sets the piece name to 'gelato', the package name to '@activepieces/piece-gelato', and the piece type to 'community'.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/building-pieces/piece-definition.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli pieces create\n\n? Enter the piece name: gelato\n? Enter the package name: @activepieces/piece-gelato\n? Select the piece type: community\n```\n\n----------------------------------------\n\nTITLE: Running Activepieces with Docker Compose\nDESCRIPTION: This command starts Activepieces using Docker Compose. It reads the docker-compose.yml file and brings up the necessary containers. Requires Docker and Docker Compose to be installed and configured properly.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/docker-compose.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -p activepieces up\n```\n\n----------------------------------------\n\nTITLE: Accessing Store in Trigger Context - TypeScript\nDESCRIPTION: This snippet illustrates how to use the `store` property of the context object within a trigger's `run` function. The store allows you to persist data between trigger runs, such as the last fetched date. The snippet demonstrates how to `put` and `get` values from the store using asynchronous operations.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/triggers/overview.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Store: A simple, lightweight key-value store that is helpful when you are developing triggers that persist between runs, used to store information like the last polling date.\nawait context.store.put('_lastFetchedDate', new Date());\nconst lastFetchedData = await context.store.get('_lastFetchedDate', new Date());\n```\n\n----------------------------------------\n\nTITLE: Array of Strings Property Definition in Typescript\nDESCRIPTION: Defines a property that collects an array of strings from the user.  It includes options for display name, description, whether the field is required, and a default value (as a string array).\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/properties.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nProperty.Array({\n  displayName: 'Tags',\n  description: 'Enter tags',\n  required: false,\n  defaultValue: ['tag1', 'tag2'],\n});\n```\n\n----------------------------------------\n\nTITLE: Last ID Polling Strategy\nDESCRIPTION: This snippet demonstrates the last ID polling strategy for fetching new items based on the last item ID. It defines the `items` method, which fetches the most recent items and returns them with their ID and data. The polling object's generic type consists of the props value and the object type.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/triggers/polling-trigger.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst polling: Polling<{ authentication: AuthProps}> = {\n    strategy: DedupeStrategy.LAST_ITEM,\n    items: async ({ propsValue }) => {\n        // Implement the logic to fetch the items\n        const items = [{ id: 1 }, { id: 2 }];\n        return items.map((item) => ({\n            id: item.id,\n            data: item,\n        }));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Value from Persistent Storage (Get)\nDESCRIPTION: Retrieves a value from the Activepieces persistent storage using the specified key. The `ctx.store.get` method is used with a generic type parameter specifying the expected data type. The example retrieves a string value with 'KEY' from the project scope.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/persistent-storage.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = ctx.store.get<string>('KEY', StoreScope.PROJECT);\n```\n\n----------------------------------------\n\nTITLE: Login to npm\nDESCRIPTION: This command logs the user into their npm account, allowing them to publish packages to the npm registry.  It requires the user to have an npm account and have npm installed. The command prompts for username, password, and email.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/sharing-pieces/community.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm login\n```\n\n----------------------------------------\n\nTITLE: Running Activepieces Docker Container\nDESCRIPTION: This command pulls the Activepieces Docker image and runs the container. It configures the container with memory queue, SQLite3 database, and sets the frontend URL.  It maps port 8080 and volume for persistence. Dependencies: Docker.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/docker.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8080:80 -v ~/.activepieces:/root/.activepieces -e AP_QUEUE_MODE=MEMORY -e AP_DB_TYPE=SQLITE3 -e AP_FRONTEND_URL=\"http://localhost:8080\" activepieces/activepieces:latest\n```\n\n----------------------------------------\n\nTITLE: Configure Persistent Volume - Docker\nDESCRIPTION: This snippet shows how to configure a persistent volume for the worker to cache flows and pieces in a Docker environment. This significantly improves the execution speed of pieces and flows.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/configuration/separate-workers.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - <your path>:/usr/src/app/cache\n```\n\n----------------------------------------\n\nTITLE: Implement AI Interface in TypeScript\nDESCRIPTION: This code snippet demonstrates how to implement the `AI` interface for a custom AI provider in TypeScript. It defines a factory function that returns an object conforming to the `AI` interface, including a `chat.text` method for interacting with the provider's API. The function expects `serverUrl` and `engineToken` as input parameters. The `YourAiProviderSDK` class (not shown) is assumed to handle the actual API calls.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/misc/create-new-ai-provider.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const yourAiProvider = ({\n  serverUrl,\n  engineToken,\n}: { serverUrl: string, engineToken: string }): AI<YourAiProviderSDK> => {\n  const impl = new YourAiProviderSDK(serverUrl, engineToken);\n  return {\n    provider: \"YOUR_AI_PROVIDER\" as const,\n    chat: {\n      text: async (params) => {\n        try {\n          const response = await impl.chat.text(params);\n          return response;\n        } catch (e: any) {\n          if (e?.error?.error) {\n            throw e.error.error;\n          }\n          throw e;\n        }\n      }\n    },\n  };\n};\n\n```\n\n----------------------------------------\n\nTITLE: Generating Environment Variables for Activepieces\nDESCRIPTION: This script generates the necessary environment variables for Activepieces. It's essential for configuring the application. The script handles the creation of the .env file which contains configuration details for Activepieces.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/docker-compose.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsh tools/deploy.sh\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Authentication\nDESCRIPTION: Defines an `OAuth2` authentication method with authorization code grant type. Specifies authentication URL, token URL, and scope. `OAuth2GrantType.CLIENT_CREDENTIALS` is also supported.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/authentication.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nPieceAuth.OAuth2({\n    displayName: 'OAuth2 Authentication',\n    grantType: OAuth2GrantType.AUTHORIZATION_CODE,\n    required: true,\n    authUrl: 'https://example.com/auth',\n    tokenUrl: 'https://example.com/token',\n    scope: ['read', 'write']\n})\n```\n\n----------------------------------------\n\nTITLE: Publish piece using npm\nDESCRIPTION: This command is used to publish a custom piece to the Activepieces platform. It requires the piece folder name, API URL, and API Key Source as input.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/misc/publish-piece.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run publish-piece-to-api\n```\n\n----------------------------------------\n\nTITLE: Starting Ngrok to Expose Local Webhooks\nDESCRIPTION: This command starts Ngrok, exposing the local port 8080 to the internet, which is used to make webhooks accessible. Requires Ngrok to be installed. Useful for testing Activepieces triggers without a public IP address.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/docker-compose.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 8080\n```\n\n----------------------------------------\n\nTITLE: Pull Latest Activepieces Docker Image\nDESCRIPTION: This command pulls the latest Activepieces Docker image from Docker Hub, ensuring that the user has the most recent version of the application.  Requires Docker.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/docker.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull activepieces/activepieces:latest\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for HTTPS\nDESCRIPTION: This configuration file sets up Nginx to listen on ports 80 and 443, redirect HTTP traffic to HTTPS, and act as a reverse proxy for the application running on localhost:8080. It assumes that SSL certificates are located at /etc/cert.pem and /etc/key.pem.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/configuration/setup-ssl.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserver {\n    listen 80;\n    listen [::]:80;\n\n    server_name example.com www.example.com;\n\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n\n    server_name example.com www.example.com;\n\n    ssl_certificate /etc/cert.pem;\n    ssl_certificate_key /etc/key.pem;\n\n    location / {\n        proxy_pass http://localhost:8080;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Property Definition in Typescript\nDESCRIPTION: Defines a property that collects JSON data from the user.  It includes options for display name, description, whether the field is required, and a default value (as a JSON object).\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/properties.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nProperty.Json({\n  displayName: 'Data',\n  description: 'Enter JSON data',\n  required: true,\n  defaultValue: { key: 'value' },\n});\n```\n\n----------------------------------------\n\nTITLE: Update Password in SQLite3\nDESCRIPTION: This SQL query updates the password for a specific user in the `user_identity` table. It requires a pre-generated bcrypt hash and the user's email address. Replace `HASH_PASSWORD` with the bcrypt hash and `YOUR_EMAIL_ADDRESS` with the actual email.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/configuration/troubleshooting.mdx#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE user_identity SET password = 'HASH_PASSWORD' WHERE email = 'YOUR_EMAIL_ADDRESS';\n```\n\n----------------------------------------\n\nTITLE: Short Text Property Definition in Typescript\nDESCRIPTION: Defines a property that collects a short text input from the user. It includes options for display name, description, whether the field is required, and a default value.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/properties.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nProperty.ShortText({\n  displayName: 'Name',\n  description: 'Enter your name',\n  required: true,\n  defaultValue: 'John Doe',\n});\n```\n\n----------------------------------------\n\nTITLE: Publish Piece to npm\nDESCRIPTION: This command publishes the specified piece to the npm registry. Replace `PIECE_FOLDER_NAME` with the actual folder name of the piece. It depends on the `publish-piece` script defined in `package.json`. It expects the piece's `package.json` to be correctly configured, including a unique name and version.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/sharing-pieces/community.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run publish-piece PIECE_FOLDER_NAME\n```\n\n----------------------------------------\n\nTITLE: Run Updated Activepieces Docker Container\nDESCRIPTION: This command runs the updated Activepieces container with the latest image. It uses the same configuration as the initial setup, including port mapping, volume mounting, and environment variables. Requires Docker.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/docker.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8080:80 -v ~/.activepieces:/root/.activepieces -e AP_QUEUE_MODE=MEMORY -e AP_DB_TYPE=SQLITE3 -e AP_FRONTEND_URL=\"http://localhost:8080\" --name activepieces_container_name activepieces/activepieces:latest\n```\n\n----------------------------------------\n\nTITLE: Sync Custom Pieces using CLI\nDESCRIPTION: This command syncs custom pieces from the `packages/pieces/custom/` directory to Activepieces instances using the CLI. It requires an API key and the instance URL. Replace `your_api_key_here` with the actual API key and `INSTANCE_URL` with the URL of your Activepieces instance.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/misc/pieces-ci-cd.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAP_API_KEY=your_api_key_here npm run sync-pieces -- --apiUrl https://INSTANCE_URL/api\n```\n\n----------------------------------------\n\nTITLE: Pulling the Latest Docker Compose File\nDESCRIPTION: This command pulls the latest version of the docker-compose.yml file from the Git repository. Requires Git to be installed and the user to be in the activepieces repository directory.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/docker-compose.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Deleting a Value from Persistent Storage (Delete)\nDESCRIPTION: Deletes a key-value pair from the Activepieces persistent storage. The `ctx.store.delete` method removes the entry associated with the given key from the specified scope. The example shows deleting the key-value pair associated with 'KEY' from the project scope.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/persistent-storage.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nctx.store.delete('KEY', StoreScope.PROJECT);\n```\n\n----------------------------------------\n\nTITLE: Register AI Provider in TypeScript\nDESCRIPTION: This code shows how to register the newly created AI provider within the `AiProviders` array. This involves adding an object with properties such as `logoUrl`, `defaultBaseUrl`, `label`, `value`, `models`, and `factory`. The `factory` property points to the AI interface implementation (the previous snippet).  The values for `logoUrl`, `defaultBaseUrl`, and model names/values need to be configured appropriately for the custom AI provider.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/misc/create-new-ai-provider.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const AiProviders = [\n  {\n    logoUrl: 'https://cdn.activepieces.com/pieces/openai.png',\n    defaultBaseUrl: 'https://api.your-ai-provider.com',\n    label: 'Your AI Provider' as const,\n    value: 'your-ai-provider' as const,\n    models: [\n      { label: 'model-1', value: 'model-1' },\n      { label: 'model-2', value: 'model-2' },\n      { label: 'model-3', value: 'model-3' },\n    ],\n    factory: yourAiProvider,\n  },\n...\n]\n```\n\n----------------------------------------\n\nTITLE: Cloning Activepieces Repository with Git\nDESCRIPTION: This command clones the Activepieces repository from GitHub. It's the first step in setting up Activepieces using Docker Compose.  Requires Git to be installed.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/docker-compose.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/activepieces/activepieces.git\n```\n\n----------------------------------------\n\nTITLE: Define Authentication Header in TypeScript\nDESCRIPTION: This snippet illustrates how to define the authentication mechanism for the custom AI provider. The `auth` property, added to the AI provider configuration, uses the `authHeader` function (not provided) to specify the authentication header's name and type (e.g., bearer token or API key).  The example demonstrates setting up either a bearer token or a named API key header.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/misc/create-new-ai-provider.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const AiProviders = [\n  {\n    logoUrl: 'https://cdn.activepieces.com/pieces/openai.png',\n    defaultBaseUrl: 'https://api.your-ai-provider.com',\n    label: 'Your AI Provider' as const,\n    value: 'your-ai-provider' as const,\n    models: [\n      { label: 'model-1', value: 'model-1' },\n      { label: 'model-2', value: 'model-2' },\n      { label: 'model-3', value: 'model-3' },\n    ],\n    auth: authHeader({ bearer: true }), // or authHeader({ name: 'x-api-key', bearer: false })\n    factory: yourAiProvider,\n  },\n...\n]\n```\n\n----------------------------------------\n\nTITLE: Static Dropdown Property Definition in Typescript\nDESCRIPTION: Defines a property that presents a dropdown menu with predefined options. The `options` parameter contains an array of objects, each with a `label` (display text) and `value`.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/properties.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nProperty.StaticDropdown({\n  displayName: 'Country',\n  description: 'Select your country',\n  required: true,\n  options: {\n    options: [\n      {\n        label: 'Option One',\n\n        value: '1',\n      },\n      {\n        label: 'Option Two',\n        value: '2',\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Backup Activepieces Data Directory\nDESCRIPTION: This command creates a backup of the Activepieces data directory, typically located at `~/.activepieces`. This is crucial before performing any upgrades to prevent data loss. Dependencies: cp.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/docker.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp -r ~/.activepieces ~/.activepieces_backup\n```\n\n----------------------------------------\n\nTITLE: Running Updated Docker Images in Detached Mode\nDESCRIPTION: This command starts the updated Docker images in detached mode, removing any orphaned containers.  Requires Docker Compose to be installed and configured properly.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/docker-compose.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d --remove-orphans\n```\n\n----------------------------------------\n\nTITLE: Example Pulumi Output Variables\nDESCRIPTION: This JSON snippet is an example of the output from a successful Pulumi deployment. It shows the URL and environment variables.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/aws.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n    _:{        activePiecesUrl: \"http://<alb name & id>.us-east-1.elb.amazonaws.com\"        activepiecesEnv: [         . . . .        ]       }\n```\n\n----------------------------------------\n\nTITLE: Publish Piece with Env Variable API Key - Example\nDESCRIPTION: This example demonstrates publishing a custom piece using the CLI, specifying the piece folder name, API URL, and using an environment variable for the API Key. The API key is expected to be available in the `.env` file as `AP_API_KEY`.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/misc/publish-piece.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run publish-piece-to-api\n\n? Enter the piece folder name : google-drive\n? Enter the API URL : https://cloud.activepieces.com/api\n? Enter the API Key Source : Env Variable (AP_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Restarting Nginx\nDESCRIPTION: This command restarts the Nginx service, applying the new configuration. It requires root privileges to execute. This ensures that the changes made to the Nginx configuration file are applied.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/configuration/setup-ssl.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Connect to ActivePieces Database\nDESCRIPTION: This SQL command connects to the `activepieces` database within the PostgreSQL console. This is required to execute the update statement for resetting the user password.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/configuration/troubleshooting.mdx#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n\\c activepieces\n```\n\n----------------------------------------\n\nTITLE: Remove Activepieces Docker Container\nDESCRIPTION: This command stops and removes the existing Activepieces Docker container.  This is part of the upgrade process to ensure a clean installation of the new version.  Requires knowing the container's name.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/docker.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop activepieces_container_name\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker rm activepieces_container_name\n```\n\n----------------------------------------\n\nTITLE: Pulling the Latest Docker Images for Activepieces\nDESCRIPTION: This command pulls the latest Docker images defined in the docker-compose.yml file.  Requires Docker Compose to be installed and configured properly.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/docker-compose.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose pull\n```\n\n----------------------------------------\n\nTITLE: Setting Slack Webhook Secret Environment Variable\nDESCRIPTION: Sets the environment variable `AP_APP_WEBHOOK_SECRETS` to store the Slack signing secret. This secret is used to verify the authenticity of webhooks received from Slack. It requires restarting the application instance after setting the variable.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/configuration/setup-app-webhooks.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\nAP_APP_WEBHOOK_SECRETS={\"@activepieces/piece-slack\": {\"webhookSecret\": \"SIGNING_SECRET\"}}\n```\n\n----------------------------------------\n\nTITLE: Generate Migration - Bash\nDESCRIPTION: This Bash command uses the `nx` tool to generate a database migration. The `name` parameter specifies the descriptive name for the migration. The command needs the database to be configured beforehand.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/handbook/engineering/playbooks/database-migration.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx db-migration server-api name=<MIGRATION_NAME>\n```\n\n----------------------------------------\n\nTITLE: Creating Contributor Table Cells\nDESCRIPTION: This HTML snippet defines a table cell that displays a contributor's avatar, name, and a link to their GitHub profile or other relevant links like bug reports or plugin contributions.  The `align`, `valign`, and `width` attributes are used for formatting.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/tarunsamanta2k20\"><img src=\"https://avatars.githubusercontent.com/u/55488549?v=4?s=100\" width=\"100px;\" alt=\"Tarun Samanta\"/><br /><sub><b>Tarun Samanta</b></sub></a><br /><a href=\"https://github.com/activepieces/activepieces/issues?q=author%3Atarunsamanta2k20\" title=\"Bug reports\">🐛</a></td>\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Activepieces Repository Directory\nDESCRIPTION: This command changes the current directory to the cloned Activepieces repository. It is crucial for subsequent commands to be executed in the correct context. Requires a successful execution of the git clone command.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/docker-compose.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd activepieces\n```\n\n----------------------------------------\n\nTITLE: API Authentication Header Example\nDESCRIPTION: This example shows how to include the API key in the Authorization header as a Bearer token. The API_KEY should be replaced with the actual API key obtained from the platform dashboard. This is a mandatory step to authenticate requests.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/endpoints/overview.mdx#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nAuthorization: Bearer {API_KEY}\n```\n\n----------------------------------------\n\nTITLE: Access PostgreSQL Docker Container\nDESCRIPTION: This command is used to access the PostgreSQL Docker container using SSH. It requires the container ID which can be found using `docker ps` command. This step is necessary to access the PostgreSQL console and modify the user password.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/configuration/troubleshooting.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it POSTGRES_CONTAINER_ID /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Start Development Environment\nDESCRIPTION: This command starts the activepieces application in a development mode with sqlite3 as database and in-memory queue. It's the main command to run the application locally.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/development-setup/local.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: DateTime Property Definition in Typescript\nDESCRIPTION: Defines a property that collects a date and time from the user. It includes options for display name, description, whether the field is required, and a default value (ISO 8601 format).\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/properties.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nProperty.DateTime({\n  displayName: 'Date and Time',\n  description: 'Select a date and time',\n  required: true,\n  defaultValue: '2023-06-09T12:00:00Z',\n});\n```\n\n----------------------------------------\n\nTITLE: Running the Update Script for Activepieces\nDESCRIPTION: This script automates the update process for Activepieces by pulling the latest changes and restarting the containers. It requires the user to be in the activepieces repository directory.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/docker-compose.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsh tools/update.sh\n```\n\n----------------------------------------\n\nTITLE: Pausing Flow for Delay - Typescript\nDESCRIPTION: This code snippet demonstrates how to pause a flow for a specified delay in Activepieces. It utilizes the `ctx.run.pause()` method with `pauseMetadata` of type `PauseType.DELAY`.  The `resumeDateTime` property specifies the future timestamp, in UTC string format, when the flow should resume.  `futureTime` is assumed to be a `Date` object representing the future time.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/flow-control.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nctx.run.pause({\n    pauseMetadata: {\n        type: PauseType.DELAY,\n        resumeDateTime: futureTime.toUTCString()\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Trigger with CLI - Bash\nDESCRIPTION: This command creates a new trigger for the activepieces platform using the command line interface (CLI).  The command initiates the trigger creation process, guiding the developer through prompts for the piece folder name, trigger display name, trigger description, and trigger technique (polling or webhook).\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/triggers/overview.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli triggers create\n```\n\n----------------------------------------\n\nTITLE: Number Property Definition in Typescript\nDESCRIPTION: Defines a property that collects a numeric input from the user.  It includes options for display name, description, and whether the field is required.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/properties.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nProperty.Number({\n  displayName: 'Quantity',\n  description: 'Enter a number',\n  required: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with Activepieces SDK\nDESCRIPTION: This JavaScript code snippet demonstrates how to make an HTTP request to an Activepieces instance using the `activepieces.request` method. It initializes the SDK, then calls the request method with the path set to '/flows' and the method to 'GET'. The response from the request is then logged to the console.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/embedding/sdk-server-requests.mdx#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n        <script> \n        activepieces.request({path:'/flows',method:'GET'}).then(console.log);\n        </script>\n\n```\n\n----------------------------------------\n\nTITLE: Open PostgreSQL Console\nDESCRIPTION: This command opens the PostgreSQL console inside the Docker container, allowing you to interact directly with the database. It uses the default postgres user.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/configuration/troubleshooting.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npsql -U postgres\n```\n\n----------------------------------------\n\nTITLE: Get MCP Server Info\nDESCRIPTION: Retrieves information about the MCP server. Returns a promise that resolves to the MCP server info schema.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/embedding/mcps.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nactivepieces.getMcpInfo()\n```\n\n----------------------------------------\n\nTITLE: Publish Piece with Manual API Key - Example\nDESCRIPTION: This example shows how to publish a piece using the CLI, providing the API key manually. It prompts for the piece folder name, API URL, API key source, and the API key itself.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/misc/publish-piece.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run publish-piece-to-api\n\n? Enter the piece folder name : google-drive\n? Enter the API URL : https://cloud.activepieces.com/api\n? Enter the API Key Source : Manually\n? Enter the API Key : ap_1234567890abcdef1234567890abcdef\n```\n\n----------------------------------------\n\nTITLE: Sync Your Fork\nDESCRIPTION: Fetches changes from the upstream (original) repository and rebases the local branch on top of it, keeping the fork up-to-date. Requires the upstream remote to be configured.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/misc/private-fork.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit merge upstream/main\n```\n\n----------------------------------------\n\nTITLE: Update Password in PostgreSQL\nDESCRIPTION: This SQL query updates the password for a specific user in the `user_identity` table of the `public` schema. It requires a pre-generated bcrypt hash and the user's email address. Replace `HASH_PASSWORD` with the bcrypt hash and `YOUR_EMAIL_ADDRESS` with the actual email.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/configuration/troubleshooting.mdx#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE public.user_identity SET password='HASH_PASSWORD' WHERE email='YOUR_EMAIL_ADDRESS';\n```\n\n----------------------------------------\n\nTITLE: Remove Tool from MCP Server\nDESCRIPTION: Removes a tool from the MCP server. It requires the piece name. Returns a promise that resolves to the MCP server info schema.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/embedding/mcps.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nactivepieces.removeMcpTool({pieceName:\"your_piece_name\"})\n```\n\n----------------------------------------\n\nTITLE: Creating a directory and deploying Activepieces with Pulumi\nDESCRIPTION: This snippet demonstrates the commands to create a new directory, navigate into it, and then deploy Activepieces using Pulumi from a remote repository. This assumes you have Pulumi installed and configured.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/aws.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir deploy-activepieces && cd deploy-activepieces \n$ pulumi new https://github.com/activepieces/activepieces/tree/main/deploy/pulumi\n$ pulumi up\n```\n\n----------------------------------------\n\nTITLE: Connect Method Result Type Definition in TypeScript\nDESCRIPTION: This TypeScript snippet defines the structure of the object returned by the `connect` method's promise. It includes an optional `connection` object with `id` and `name` properties. The `name` property represents the external ID of the connection.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/embedding/embed-connections.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n            connection?: {\n                id: string,\n                name: string\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Example Action Creation Prompts\nDESCRIPTION: This example shows the prompts and expected input from the user when creating a new action.  It gathers the piece folder name, action display name, and description, which define the action's metadata.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/building-pieces/create-action.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli actions create\n\n? Enter the piece folder name : gelato\n? Enter the action display name : get icecream flavor\n? Enter the action description : fetches random icecream flavor.\n```\n\n----------------------------------------\n\nTITLE: Stop Activepieces Docker Container\nDESCRIPTION: This command stops the currently running Activepieces Docker container.  It's used as part of the data backup and upgrade processes. Requires knowing the container's name.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/docker.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop activepieces_container_name\n```\n\n----------------------------------------\n\nTITLE: Add Tool to MCP Server\nDESCRIPTION: Adds a tool (piece) to the MCP server. It requires the piece name and optionally a connection ID if the piece needs a connection. The status of the tool can be set to ENABLED or DISABLED after adding. Returns a promise that resolves to the MCP server info schema.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/embedding/mcps.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nactivepieces.addMcpTool({pieceName:\"your_piece_name\", connectionId:\"your_connection_id \"})\n```\n\n----------------------------------------\n\nTITLE: Setup Development Environment\nDESCRIPTION: This command executes a script to set up the local development environment. It likely handles tasks such as installing dependencies and configuring the development environment.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/development-setup/local.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode tools/setup-dev.js\n```\n\n----------------------------------------\n\nTITLE: Logging into Pulumi using an S3 Bucket\nDESCRIPTION: This snippet shows how to log into the Pulumi backend using an S3 bucket for state management. Make sure the bucket exists before running this command. The region must match the bucket's region.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/aws.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npulumi login s3://pulumi-state?region=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Static Multiple Dropdown Property Definition in Typescript\nDESCRIPTION: Defines a property that presents a dropdown menu with multiple selection options. The `options` parameter contains an array of objects, each with a `label` and `value`.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/properties.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nProperty.StaticMultiSelectDropdown({\n  displayName: 'Colors',\n  description: 'Select one or more colors',\n  required: true,\n  options: {\n    options: [\n      {\n        label: 'Red',\n        value: 'red',\n      },\n      {\n        label: 'Green',\n        value: 'green',\n      },\n      {\n        label: 'Blue',\n        value: 'blue',\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: SAML Certificate Snippet\nDESCRIPTION: This snippet represents the format for pasting the signing certificate obtained from the IDP metadata into the Signing Key field during SAML configuration with JumpCloud. It shows the necessary BEGIN and END CERTIFICATE lines surrounding the certificate value.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/security/sso.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n -----BEGIN CERTIFICATE-----\n [PASTE THE VALUE FROM IDP METADATA]\n -----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Cloning Activepieces Repository\nDESCRIPTION: This snippet shows how to clone the Activepieces repository from GitHub. This is the first step to deploy a locally built Docker image.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/aws.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/activepieces/activepieces\n```\n\n----------------------------------------\n\nTITLE: Expose Localhost using Ngrok\nDESCRIPTION: This command uses ngrok to expose a local port (8080) to the internet, creating a public URL.  This is useful for making webhooks accessible from outside the local network. Dependencies: ngrok.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/docker.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 8080\n```\n\n----------------------------------------\n\nTITLE: Uncomment Database Connection Export - TypeScript\nDESCRIPTION: This TypeScript code snippet shows the line that needs to be uncommented in `packages/server/api/src/app/database/database-connection.ts` to enable database connection export for migration generation. This is a necessary step before generating migrations.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/handbook/engineering/playbooks/database-migration.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const exportedConnection = databaseConnection()\n```\n\n----------------------------------------\n\nTITLE: Configure Database Type - SQLite - Environment Variables\nDESCRIPTION: This snippet defines the environment variable `AP_DATABASE_TYPE` set to `SQLITE`. This configuration is crucial for specifying that SQLite should be used for database operations during migration generation. Default database is SQLite.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/handbook/engineering/playbooks/database-migration.mdx#_snippet_1\n\nLANGUAGE: env\nCODE:\n```\n# For SQLite migrations (default)\nAP_DATABASE_TYPE=SQLITE\n```\n\n----------------------------------------\n\nTITLE: Create piece using CLI\nDESCRIPTION: This command uses the Activepieces CLI to create a new piece. It prompts for the piece name, package name, and piece type. The created piece will be located at `packages/pieces/community/gelato/`.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/building-pieces/piece-definition.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli pieces create\n```\n\n----------------------------------------\n\nTITLE: Create Action CLI Command\nDESCRIPTION: This command initiates the process of creating a new action within an Activepieces piece using the command-line interface. It prompts the user for the piece folder name, action display name, and action description.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/building-pieces/create-action.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli actions create\n```\n\n----------------------------------------\n\nTITLE: Successful Piece Build Output\nDESCRIPTION: This is an example of the output displayed after a piece has been successfully built and packaged. It indicates the piece name and the path to the generated `.tgz` archive.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/misc/build-piece.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPiece 'google-drive' built and packed successfully at dist/packages/pieces/community/google-drive\n```\n\n----------------------------------------\n\nTITLE: JWT Header Example\nDESCRIPTION: This JSON snippet demonstrates the structure of a JWT header required for authentication with Activepieces. It specifies the RS256 algorithm, JWT type, and signing key ID.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/embedding/provision-users.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"alg\": \"RS256\",\n  \"typ\": \"JWT\",\n  \"kid\": \"SIGNING_KEY_ID\"\n}\n```\n\n----------------------------------------\n\nTITLE: Re-comment Export - TypeScript\nDESCRIPTION: This TypeScript code snippet shows the line that needs to be re-commented in `packages/server/api/src/app/database/database-connection.ts` after generating the database migration. This reverts the changes made in step 1.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/handbook/engineering/playbooks/database-migration.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// export const exportedConnection = databaseConnection()\n```\n\n----------------------------------------\n\nTITLE: Checkbox Property Definition in Typescript\nDESCRIPTION: Defines a property that presents a checkbox for the user to select or deselect. It includes options for display name, description, whether the checkbox is required, and a default value.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/properties.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nProperty.Checkbox({\n  displayName: 'Agree to Terms',\n  description: 'Check this box to agree to the terms',\n  required: true,\n  defaultValue: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Open SQLite3 Shell\nDESCRIPTION: This command opens the SQLite3 shell to interact with the database. It assumes the database file is located at `~/.activepieces/database.sqlite`. Replace the path with the actual path to your database file if it's different.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/configuration/troubleshooting.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsqlite3 ~/.activepieces/database.sqlite\n```\n\n----------------------------------------\n\nTITLE: Markdown Property Definition in Typescript\nDESCRIPTION: Defines a property that displays a markdown snippet to the user.  It uses the MarkdownVariant enum to style the markdown with options for BORDERLESS, INFO, WARNING, and TIP.  The `value` parameter is the markdown content to display.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/piece-reference/properties.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nProperty.MarkDown({\n    value: '## This is a markdown snippet',\n    variant: MarkdownVariant.WARNING,\n}),\n```\n\n----------------------------------------\n\nTITLE: List Tools on MCP Server\nDESCRIPTION: Retrieves a list of tools (pieces) on the MCP server. Returns a promise that resolves to an object containing an array of McpPiece objects.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/embedding/mcps.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nactivepieces.getMcpTools()\n```\n\n----------------------------------------\n\nTITLE: Running the Reset Script for Activepieces\nDESCRIPTION: This script resets Activepieces by deleting all Docker containers and associated data. It is a destructive operation and should be used with caution. It requires the user to be in the activepieces repository directory.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/docker-compose.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsh tools/reset.sh\n```\n\n----------------------------------------\n\nTITLE: Navigating and installing npm packages in Pulumi Directory\nDESCRIPTION: These commands are executed inside the cloned Activepieces directory to install npm packages which are necessary to successfully deploy Activepieces with Pulumi.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/aws.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd deploy/pulumi && npm i\n```\n\n----------------------------------------\n\nTITLE: Configure Database Type - PostgreSQL - Environment Variables\nDESCRIPTION: This snippet defines the environment variables required for configuring a PostgreSQL database connection. The variables specify the database type, database name, host, port, username, and password. These configurations are required when migrations need to target PostgreSQL.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/handbook/engineering/playbooks/database-migration.mdx#_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nAP_DATABASE_TYPE=POSTGRES\nAP_POSTGRES_DATABASE=activepieces\nAP_POSTGRES_HOST=db\nAP_POSTGRES_PORT=5432\nAP_POSTGRES_USERNAME=postgres\nAP_POSTGRES_PASSWORD=password\n```\n\n----------------------------------------\n\nTITLE: Building a Piece using npm run build-piece\nDESCRIPTION: This command initiates the piece building process within the Activepieces CLI. It prompts the user for the piece folder name, then builds and packages the specified piece into a `.tgz` archive. The output path to the archive is then displayed.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/misc/build-piece.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build-piece\n```\n\n----------------------------------------\n\nTITLE: Initializing Pulumi Stack for Local Development\nDESCRIPTION: This snippet initializes a Pulumi stack for local development using pre-existing stack configuration file. Make sure the stack name matches the filename `Pulumi.activepieces-dev.yaml`.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/aws.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npulumi stack init activepieces-dev && pulumi up\n```\n\n----------------------------------------\n\nTITLE: Creating an S3 Bucket for Pulumi State\nDESCRIPTION: This snippet demonstrates how to create an S3 bucket using the AWS CLI. This bucket is used by Pulumi to store the state of the infrastructure. Replace `us-east-1` with your desired AWS region.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/options/aws.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws s3api create-bucket --bucket pulumi-state --region us-east-1\n```\n\n----------------------------------------\n\nTITLE: Example Trigger Creation Interaction (Bash)\nDESCRIPTION: This snippet shows an example interaction with the Activepieces CLI during trigger creation. It shows the prompts and the expected user inputs for the piece folder name, display name, description, and trigger technique. The trigger technique here is Polling.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/building-pieces/create-trigger.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli triggers create\n\n? Enter the piece folder name : gelato\n? Enter the trigger display name : new flavor created\n? Enter the trigger description : triggers when a new icecream flavor is created.\n? Select the trigger technique: polling\n```\n\n----------------------------------------\n\nTITLE: Building a Piece with npm\nDESCRIPTION: This command is used to build a piece using npm. Replace `${name}` with the actual name of the piece. It assumes you are in the correct directory with the `package.json` containing the build scripts.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/sharing-pieces/private.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run pieces -- build --name=${name}\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx\nDESCRIPTION: This command installs Nginx using the apt-get package manager. It requires root privileges to execute. This step is a prerequisite for setting up a reverse proxy for HTTPS.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/configuration/setup-ssl.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install nginx\n```\n\n----------------------------------------\n\nTITLE: Feature Ticket Template\nDESCRIPTION: This is the template that should be used when creating a GitHub issue for a new feature. It includes sections for describing the problem solved, how the feature works, the target audience, and relevant user scenarios. A video link demonstrating the feature is also recommended.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/handbook/engineering/playbooks/product-announcement.mdx#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### What Problem Does This Feature Solve?\n\n### Explain How the Feature Works\n[Insert the video link here]\n\n### Target Audience\nEnterprise / Everyone \n\n### Relevant User Scenarios\n[Insert Pylon tickets or community posts here]\n```\n\n----------------------------------------\n\nTITLE: Kernel Namespaces Sandboxing Execution\nDESCRIPTION: Demonstrates the command used to initiate flow execution within a kernel namespace sandbox. This involves using an `isolate` command to launch a new Node.js process with the flow script and arguments, providing a sandboxed environment with limited access to system resources. This mode is secure, allowing usage of NPM packages, but is slow and CPU intensive due to Node.js cold boots.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/architecture/workers.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./isolate node path/to/flow.js --- rest of args\n```\n\n----------------------------------------\n\nTITLE: Exit SQLite3 Shell\nDESCRIPTION: This command exits the SQLite3 shell, saving any changes made to the database.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/install/configuration/troubleshooting.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n.exit\n```\n\n----------------------------------------\n\nTITLE: Rendering Team Member Card with JSX\nDESCRIPTION: This code snippet demonstrates how to render a card component displaying information about a team member, Hazem Adel. It includes his name, title, profile image, and a short description within a Card component. The card utilizes inline styling to add margin to the description.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/_snippets/profile/hazem.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Card title=\"Hazem Adel (@hazem)\">\n  Product Engineer\n  <img src=\"/resources/profile/hazem.jpg\" width=\"270px\" height=\"270px\"/>\n  <div style={{marginTop: \"10px\"}}>Building the future of automation, one piece at a time 🚀</div>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Creating Contributor Table Rows\nDESCRIPTION: This HTML snippet defines a table row that contains multiple contributor cells. Each cell displays a contributor's avatar, name, and a link to their GitHub profile or other relevant links.  This snippet shows how the cells are grouped horizontally.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/README.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/BastienMe\"><img src=\"https://avatars.githubusercontent.com/u/71411115?v=4?s=100\" width=\"100px;\" alt=\"BastienMe\"/><br /><sub><b>BastienMe</b></sub></a><br /><a href=\"#plugin-BastienMe\" title=\"Plugin/utility libraries\">🔌</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://blog.fosketts.net\"><img src=\"https://avatars.githubusercontent.com/u/8627862?v=4?s=100\" width=\"100px;\" alt=\"Stephen Foskett\"/><br /><sub><b>Stephen Foskett</b></sub></a><br /><a href=\"https://github.com/activepieces/activepieces/commits?author=SFoskett\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ganapati.fr\"><img src=\"https://avatars.githubusercontent.com/u/15729117?v=4?s=100\" width=\"100px;\" alt=\"Nathan\"/><br /><sub><b>Nathan</b></sub></a><br /><a href=\"https://github.com/activepieces/activepieces/commits?author=asuri0n\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.n-soft.pl\"><img src=\"https://avatars.githubusercontent.com/u/4056319?v=4?s=100\" width=\"100px;\" alt=\"Marcin Natanek\"/><br /><sub><b>Marcin Natanek</b></sub></a><br /><a href=\"#plugin-mnatanek\" title=\"Plugin/utility libraries\">🔌</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://all-tech-plus.com\"><img src=\"https://avatars.githubusercontent.com/u/23551912?v=4?s=100\" width=\"100px;\" alt=\"Mark van Bellen\"/><br /><sub><b>Mark van Bellen</b></sub></a><br /><a href=\"#plugin-buttonsbond\" title=\"Plugin/utility libraries\">🔌</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://guzguz.fr\"><img src=\"https://avatars.githubusercontent.com/u/13715916?v=4?s=100\" width=\"100px;\" alt=\"Olivier Guzzi\"/><br /><sub><b>Olivier Guzzi</b></sub></a><br /><a href=\"#plugin-olivierguzzi\" title=\"Plugin/utility libraries\">🔌</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Ozak93\"><img src=\"https://avatars.githubusercontent.com/u/31257994?v=4?s=100\" width=\"100px;\" alt=\"Osama Zakarneh\"/><br /><sub><b>Osama Zakarneh</b></sub></a><br /><a href=\"#plugin-Ozak93\" title=\"Plugin/utility libraries\">🔌</a></td>\n    </tr>\n```\n\n----------------------------------------\n\nTITLE: Mirror-Push to the Private Repository\nDESCRIPTION: Mirrors the bare clone to a newly created private repository.  Replace `<your_username>` with your GitHub username. Requires the `activepieces.git` directory to exist.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/misc/private-fork.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd activepieces.git\ngit push --mirror git@github.com:<your_username>/activepieces.git\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Information in a Card - JSX\nDESCRIPTION: This snippet displays contributor information within a Card component using JSX. It includes the contributor's name, role, profile picture, and a quote.  The styling is applied inline using the `style` attribute.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/_snippets/profile/abood.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Card title=\"Abdullah Alwarawreh (@abood)\">\n  **👋 Former** Product Engineer (Intern)\n  <img src=\"/resources/profile/abood.webp\" width=\"270px\" height=\"270px\"/>\n  <div style={{marginTop: \"10px\"}}>Speed isn't everything... But my code compiles before I finish my coffee</div>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Resetting Dev Container\nDESCRIPTION: This script resets the dev container environment.  It is used for troubleshooting after errors occur during development.  It is executed from the project's root directory.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/development-setup/dev-container.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsh tools/reset-dev.sh\n```\n\n----------------------------------------\n\nTITLE: Add Original Repository as a Remote\nDESCRIPTION: Adds the original activepieces repository as a remote named 'upstream' for fetching updates. The push operation for this remote is disabled.  Requires git to be installed and configured.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/misc/private-fork.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream git@github.com:activepieces/activepieces.git\ngit remote set-url --push upstream DISABLE\n```\n\n----------------------------------------\n\nTITLE: Install seven.io Activepieces Package\nDESCRIPTION: Installs the seven.io Activepieces package using npm. This command is used to add the seven.io piece to your Activepieces project, allowing you to use its actions and triggers within your flows. Ensure npm is installed and configured correctly before running this command.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/packages/pieces/community/seven/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm i @seven.io/activepieces\n```\n\n----------------------------------------\n\nTITLE: Update Tool in MCP Server\nDESCRIPTION: Updates an existing tool in the MCP server. It requires the piece name and optionally a connection ID and a status (ENABLED or DISABLED).  Returns a promise that resolves to the MCP server info schema.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/embedding/mcps.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nactivepieces.updateMcpTool({pieceName:\"your_piece_name\", status:\"DISABLED\"})\n```\n\n----------------------------------------\n\nTITLE: View Remotes\nDESCRIPTION: Displays a list of all configured git remotes and their fetch/push URLs. Useful for verifying the remote configuration.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/misc/private-fork.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: GitHub Action for Auto Deploy\nDESCRIPTION: This GitHub action automatically pulls changes to an Activepieces project upon merging to the main branch.  It requires setting the `INSTANCE_URL`, `PROJECT_ID` and `ACTIVEPIECES_API_KEY` secrets in the GitHub repository settings. The action uses `curl` to send a POST request to the Activepieces API endpoint to trigger the pull.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/operations/git-sync.mdx#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nname: Auto Deploy\non:\n  workflow_dispatch:\n  push:\n    branches: [ \"main\" ]\njobs:\n  run-pull:\n    runs-on: ubuntu-latest\n    steps:\n      - name: deploy\n        # Use GitHub secrets\n        run: |\n          curl --request POST \\\n            --url {INSTANCE_URL}/api/v1/git-repos/pull \\\n            --header 'Authorization: Bearer ${{ secrets.ACTIVEPIECES_API_KEY }}' \\\n            --header 'Content-Type: application/json' \\\n            --data '{\n              \"projectId\": \"{PROJECT_ID}\"\n            }'\n```\n\n----------------------------------------\n\nTITLE: Team Member Card Component\nDESCRIPTION: This snippet defines a card component in JSX that displays information about a team member. It includes the member's name as the title, job title, profile image, and a descriptive text. The card's styling is done inline using the style attribute.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/_snippets/profile/aboodzein.mdx#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<Card title=\"Abdulrahaman Zein (@aboodzein)\">\n  Product Engineer (Part Time)\n  <img src=\"/resources/profile/aboodzein.png\" width=\"270px\" height=\"270px\"/>\n  <div style={{marginTop: \"10px\"}}>Quiet but lethal, building in stealth like an Arctic fox in the snow</div>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Rendering Team Member Card with JSX\nDESCRIPTION: This JSX snippet renders a Card component that displays a team member's profile. It includes the team member's name as the card title, their job title, a profile image, and a short description. The Card component likely handles styling and layout details, and inline styles are used for spacing.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/_snippets/profile/abdulyki.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Card title=\"Abdul Rahman Yasir (@Abdulyki)\">\n  Product Engineer\n  <img src=\"/resources/profile/abdulyki.png\" width=\"270px\" height=\"270px\"/>\n  <div style={{marginTop: \"10px\"}}>A stoic software engineer, looking to make the world a better place</div>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Team Member Card Component\nDESCRIPTION: This JSX snippet defines a card component that displays information about a team member. It includes the member's title, an image, and a brief description. The component uses inline styles for layout and presentation.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/_snippets/profile/ash.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Card title=\"Ashraf Samhouri (@Ash)\">\n  CEO\n  <img src=\"/resources/profile/ash.png\" width=\"270px\" height=\"270px\"/>\n  <div style={{marginTop: \"10px\"}}>On a mission to democratize automation for everyone.⚡</div>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Entering the Piece Folder Name\nDESCRIPTION: This is an example of the CLI prompt asking the user for the name of the piece they wish to build. The user is expected to enter the folder name corresponding to the piece, such as 'google-drive'.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/misc/build-piece.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n? Enter the piece folder name : google-drive\n```\n\n----------------------------------------\n\nTITLE: Remove the Temporary Local Repository\nDESCRIPTION: Removes the temporary bare clone of the activepieces repository. Requires being in the parent directory of `activepieces.git`.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/misc/private-fork.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\nrm -rf activepieces.git\n```\n\n----------------------------------------\n\nTITLE: Generating Database Migrations with nx\nDESCRIPTION: This script generates a new database migration using the nx CLI within the Activepieces project. It executes the 'db-migration' command for the 'server-api' project, including a custom migration name specified via the '--name' flag.  It requires the nx CLI to be installed and configured within the project.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/packages/server/api/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx nx db-migration server-api -- --name migration-name\n```\n\n----------------------------------------\n\nTITLE: Cloning the Activepieces Repository\nDESCRIPTION: Creates a bare clone of the activepieces repository for mirroring to a private repository. This is a temporary step and the cloned directory will be deleted later.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/misc/private-fork.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --bare git@github.com:activepieces/activepieces.git\n```\n\n----------------------------------------\n\nTITLE: API Response Structure Example\nDESCRIPTION: This JSON structure represents the standard response format for API endpoints using seek pagination. It includes a `data` array containing the results, a `next` cursor for the next page of results, and a `previous` cursor for the previous page. The `next` and `previous` fields will be null if there are no more pages in that direction.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/endpoints/overview.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"data\": [],\n    \"next\": \"string\",\n    \"previous\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Your Private Repository\nDESCRIPTION: Clones the private fork of the activepieces repository onto the local machine. Requires providing the path to the desired directory and replacing `<your_username>` with your GitHub username.\nSOURCE: https://github.com/activepieces/activepieces/blob/main/docs/developers/misc/private-fork.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/path/to/directory\ngit clone git@github.com:<your_username>/activepieces.git\n```"
  }
]