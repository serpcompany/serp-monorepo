[
  {
    "owner": "vercel",
    "repo": "satori",
    "content": "TITLE: Basic Satori Usage with JSX\nDESCRIPTION: Demonstrates how to use Satori with JSX syntax to render a div element into an SVG. Includes configuration for width, height, and fonts. The example shows importing Satori and calling it with a JSX element and options.\nSOURCE: https://github.com/vercel/satori/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// api.jsx\nimport satori from 'satori'\n\nconst svg = await satori(\n  <div style={{ color: 'black' }}>hello, world</div>,\n  {\n    width: 600,\n    height: 400,\n    fonts: [\n      {\n        name: 'Roboto',\n        // Use `fs` (Node.js only) or `fetch` to read the font as Buffer/ArrayBuffer and provide `data` here.\n        data: robotoArrayBuffer,\n        weight: 400,\n        style: 'normal',\n      },\n    ],\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: CSS Properties Support Reference\nDESCRIPTION: Comprehensive list of supported CSS properties in Satori including display, position, dimensions, borders, flex layout, typography, backgrounds and transformations. Not all CSS features are supported, but covers most common use cases.\nSOURCE: https://github.com/vercel/satori/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\ndisplay: flex | none;\nposition: relative | absolute;\ncolor: <value>;\nmargin: <value>;\nwidth: <value>;\nheight: <value>;\nborder: <width> solid|dashed <color>;\nborderRadius: <value>;\nflexDirection: row | column | row-reverse | column-reverse;\nfontFamily: <value>;\nfontSize: <value>;\ntextAlign: start | end | left | right | center | justify;\nbackgroundColor: <value>;\ntransform: translate() | rotate() | scale() | skew();\nopacity: <value>;\nboxShadow: <value>;\noverflow: visible | hidden;\n```\n\n----------------------------------------\n\nTITLE: Configuring Fonts in Satori\nDESCRIPTION: Demonstrates how to specify custom fonts for text rendering in Satori. The example shows loading TTF, OTF, or WOFF fonts by providing the font data as an ArrayBuffer or Buffer, with support for different weights and styles.\nSOURCE: https://github.com/vercel/satori/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait satori(\n  <div style={{ fontFamily: 'Inter' }}>Hello</div>,\n  {\n    width: 600,\n    height: 400,\n    fonts: [\n      {\n        name: 'Inter',\n        data: inter,\n        weight: 400,\n        style: 'normal',\n      },\n      {\n        name: 'Inter',\n        data: interBold,\n        weight: 700,\n        style: 'normal',\n      },\n    ],\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using Satori without JSX\nDESCRIPTION: Demonstrates how to use Satori without a JSX transpiler by passing React-elements-like objects directly. The example shows a div element with text content and styling.\nSOURCE: https://github.com/vercel/satori/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nawait satori(\n  {\n    type: 'div',\n    props: {\n      children: 'hello, world',\n      style: { color: 'black' },\n    },\n  },\n  options\n)\n```\n\n----------------------------------------\n\nTITLE: Using Images with Satori\nDESCRIPTION: Shows how to embed images in Satori using the img element. The example demonstrates setting width and height attributes for proper rendering of remote images.\nSOURCE: https://github.com/vercel/satori/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nawait satori(\n  <img src=\"https://picsum.photos/200/300\" width={200} height={300} />,\n  options\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Satori with WASM Runtime\nDESCRIPTION: Demonstrates how to initialize Satori using WASM instead of the default asm.js runtime. Requires fetching and initializing the Yoga WASM module before use.\nSOURCE: https://github.com/vercel/satori/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport satori, { init } from 'satori/wasm'\nimport initYoga from 'yoga-wasm-web'\n\nconst yoga = initYoga(await fetch('/yoga.wasm').then(res => res.arrayBuffer()))\ninit(yoga)\n\nawait satori(...)\n```\n\n----------------------------------------\n\nTITLE: Setting Language Locale for Text Rendering\nDESCRIPTION: Demonstrates how to specify language locales for proper text rendering with the lang attribute. This ensures characters are rendered correctly according to the specified locale's typographic rules.\nSOURCE: https://github.com/vercel/satori/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\nawait satori(\n  <div lang=\"ja-JP\">éª¨</div>\n)\n```\n\n----------------------------------------\n\nTITLE: Using Base64 Encoded Images with Satori\nDESCRIPTION: Demonstrates how to use base64 encoded image data directly with Satori to avoid extra I/O operations. This approach is recommended when rendering the generated SVG to other image formats like PNG.\nSOURCE: https://github.com/vercel/satori/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nawait satori(\n  <img src=\"data:image/png;base64,...\" width={200} height={300} />,\n  // Or src={arrayBuffer}, src={buffer}\n  options\n)\n```\n\n----------------------------------------\n\nTITLE: Dynamically Loading Emojis and Fonts in Satori\nDESCRIPTION: Shows how to use the loadAdditionalAsset function to dynamically load emoji images and fonts during rendering. The callback function handles different content types based on the detected language code.\nSOURCE: https://github.com/vercel/satori/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait satori(\n  <div>ðŸ‘‹ ä½ å¥½</div>,\n  {\n    // `code` will be the detected language code, `emoji` if it's an Emoji, or `unknown` if not able to tell.\n    // `segment` will be the content to render.\n    loadAdditionalAsset: async (code: string, segment: string) => {\n      if (code === 'emoji') {\n        // if segment is an emoji\n        return `data:image/svg+xml;base64,...`\n      }\n\n      // if segment is normal text\n      return loadFontFromSystem(code)\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Emoji Images in Satori\nDESCRIPTION: Shows how to use the graphemeImages option to map specific emoji characters to custom image sources. This allows for consistent emoji rendering by using external SVG images instead of system emoji fonts.\nSOURCE: https://github.com/vercel/satori/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait satori(\n  <div>Next.js is ðŸ¤¯!</div>,\n  {\n    ...,\n    graphemeImages: {\n      'ðŸ¤¯': 'https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/1f92f.svg',\n    },\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Embedding in Satori\nDESCRIPTION: Shows how to disable font path embedding in SVG output by setting embedFont to false, which will use <text> elements instead of <path> elements.\nSOURCE: https://github.com/vercel/satori/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst svg = await satori(\n  <div style={{ color: 'black' }}>hello, world</div>,\n  {\n    ...,\n    embedFont: false,\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Satori SVG Output Example\nDESCRIPTION: Shows the output format of Satori, which returns an SVG string representation of the rendered element. The SVG includes paths with appropriate fill attributes.\nSOURCE: https://github.com/vercel/satori/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n'<svg ...><path d=\"...\" fill=\"black\"></path></svg>'\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in Satori\nDESCRIPTION: Demonstrates how to enable debug mode in Satori by setting the debug option to true, which will draw bounding boxes for visual debugging.\nSOURCE: https://github.com/vercel/satori/blob/main/README.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst svg = await satori(\n  <div style={{ color: 'black' }}>hello, world</div>,\n  {\n    ...,\n    debug: true,\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Starting Satori Playground with Local Development\nDESCRIPTION: This command starts the Satori playground along with the local development environment, allowing developers to see live changes.\nSOURCE: https://github.com/vercel/satori/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev:playground\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm for Satori Project\nDESCRIPTION: This command installs the project dependencies using pnpm, which is the package manager used for the Satori project.\nSOURCE: https://github.com/vercel/satori/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Vitest for Satori with Live Snapshot Updates\nDESCRIPTION: This command starts Vitest in watch mode, running tests and updating snapshot images for the Satori project.\nSOURCE: https://github.com/vercel/satori/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev:test\n```"
  }
]