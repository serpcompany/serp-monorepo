[
  {
    "owner": "martinothamar",
    "repo": "mediator",
    "content": "TITLE: Implementing Request/Response Pattern in C# Mediator\nDESCRIPTION: Example of creating and handling a request/response pattern using IRequest<> and IRequestHandler<>.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar mediator = serviceProvider.GetRequiredService<IMediator>();\nvar ping = new Ping(Guid.NewGuid());\nvar pong = await mediator.Send(ping);\nDebug.Assert(ping.Id == pong.Id);\n\npublic sealed record Ping(Guid Id) : IRequest<Pong>;\n\npublic sealed record Pong(Guid Id);\n\npublic sealed class PingHandler : IRequestHandler<Ping, Pong>\n{\n    public ValueTask<Pong> Handle(Ping request, CancellationToken cancellationToken)\n    {\n        return new ValueTask<Pong>(new Pong(request.Id));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Mediator Setup with DI in C#\nDESCRIPTION: Shows how to set up Mediator with dependency injection using IServiceCollection.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Mediator;\nusing Microsoft.Extensions.DependencyInjection;\nusing System;\n\nvar services = new ServiceCollection();\n\nservices.AddMediator();\nvar serviceProvider = services.BuildServiceProvider();\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Validation in C# Mediator Pipeline\nDESCRIPTION: Shows two approaches for message validation: using IPipelineBehavior or MessagePreProcessor. Validates incoming messages and throws ValidationException for invalid messages.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class MessageValidatorBehaviour<TMessage, TResponse> : IPipelineBehavior<TMessage, TResponse>\n    where TMessage : IValidate\n{\n    public ValueTask<TResponse> Handle(\n        TMessage message,\n        CancellationToken cancellationToken,\n        MessageHandlerDelegate<TMessage, TResponse> next\n    )\n    {\n        if (!message.IsValid(out var validationError))\n            throw new ValidationException(validationError);\n\n        return next(message, cancellationToken);\n    }\n}\n\n// Or as a pre-processor\npublic sealed class MessageValidatorBehaviour<TMessage, TResponse> : MessagePreProcessor<TMessage, TResponse>\n    where TMessage : IValidate\n{\n    protected override ValueTask Handle(TMessage message, CancellationToken cancellationToken)\n    {\n        if (!message.IsValid(out var validationError))\n            throw new ValidationException(validationError);\n\n        return default;\n    }\n}\n\n// Register as IPipelineBehavior<,> in either case\nservices.AddSingleton(typeof(IPipelineBehavior<,>), typeof(MessageValidatorBehaviour<,>))\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming Messages with IAsyncEnumerable in C#\nDESCRIPTION: Example of using streaming with IAsyncEnumerable in Mediator. The code shows a streaming request implementation, the corresponding handler, and consuming the stream with await foreach.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/README.md#2025-04-17_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar mediator = serviceProvider.GetRequiredService<IMediator>();\n\nvar ping = new StreamPing(Guid.NewGuid());\n\nawait foreach (var pong in mediator.CreateStream(ping))\n{\n    Debug.Assert(ping.Id == pong.Id);\n    Console.WriteLine(\"Received pong!\"); // Should log 5 times\n}\n\n// ...\n\npublic sealed record StreamPing(Guid Id) : IStreamRequest<Pong>;\n\npublic sealed record Pong(Guid Id);\n\npublic sealed class PingHandler : IStreamRequestHandler<StreamPing, Pong>\n{\n    public async IAsyncEnumerable<Pong> Handle(StreamPing request, [EnumeratorCancellation] CancellationToken cancellationToken)\n    {\n        for (int i = 0; i < 5; i++)\n        {\n            await Task.Delay(1000, cancellationToken);\n            yield return new Pong(request.Id);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Notification Handler in C#\nDESCRIPTION: A generic notification handler that can process any type implementing INotification. The implementation automatically registers as an open constrained type.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/README.md#2025-04-17_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class GenericNotificationHandler<TNotification> : INotificationHandler<TNotification>\n    where TNotification : INotification // Generic notification handlers will be registered as open constrained types automatically\n{\n    public ValueTask Handle(TNotification notification, CancellationToken cancellationToken)\n    {\n        return default;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphic Notification Handler in C#\nDESCRIPTION: A notification handler that receives all notifications implementing INotification. This handler tracks statistics about processed messages and increments counters based on the notification type.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class StatsNotificationHandler : INotificationHandler<INotification> // or any other interface deriving from INotification\n{\n    private long _messageCount;\n    private long _messageErrorCount;\n\n    public (long MessageCount, long MessageErrorCount) Stats => (_messageCount, _messageErrorCount);\n\n    public ValueTask Handle(INotification notification, CancellationToken cancellationToken)\n    {\n        Interlocked.Increment(ref _messageCount);\n        if (notification is ErrorMessage)\n            Interlocked.Increment(ref _messageErrorCount);\n        return default;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Logging Implementation in C# Mediator\nDESCRIPTION: Demonstrates error logging using either IPipelineBehavior or MessageExceptionHandler. Logs errors during message handling and provides exception handling capabilities.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class ErrorLoggingBehaviour<TMessage, TResponse> : IPipelineBehavior<TMessage, TResponse>\n    where TMessage : IMessage\n{\n    private readonly ILogger<ErrorLoggingBehaviour<TMessage, TResponse>> _logger;\n\n    public ErrorLoggingBehaviour(ILogger<ErrorLoggingBehaviour<TMessage, TResponse>> logger)\n    {\n        _logger = logger;\n    }\n\n    public async ValueTask<TResponse> Handle(\n        TMessage message,\n        CancellationToken cancellationToken,\n        MessageHandlerDelegate<TMessage, TResponse> next\n    )\n    {\n        try\n        {\n            return await next(message, cancellationToken);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error handling message of type {messageType}\", message.GetType().Name);\n            throw;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Notification Publisher in C#\nDESCRIPTION: A custom notification publisher implementation using Task.WhenAll for parallel execution. This example shows how to configure a fire-and-forget notification publisher that suppresses exceptions.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/README.md#2025-04-17_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMediator(options =>\n{\n    options.NotificationPublisherType = typeof(FireAndForgetNotificationPublisher);\n});\n\npublic sealed class FireAndForgetNotificationPublisher : INotificationPublisher\n{\n    public async ValueTask Publish<TNotification>(\n        NotificationHandlers<TNotification> handlers,\n        TNotification notification,\n        CancellationToken cancellationToken\n    )\n        where TNotification : INotification\n    {\n        try\n        {\n            await Task.WhenAll(handlers.Select(handler => handler.Handle(notification, cancellationToken).AsTask()));\n        }\n        catch (Exception ex)\n        {\n            // Notifications should be fire-and-forget, we just need to log it!\n            // This way we don't have to worry about exceptions bubbling up when publishing notifications\n            Console.Error.WriteLine(ex);\n\n            // NOTE: not necessarily saying this is a good idea!\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mediator Configuration in C#\nDESCRIPTION: Shows configuration options for Mediator using either assembly level attributes or the AddMediator function delegate. Allows setting namespace and service lifetime.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMediator(options =>\n{\n    options.Namespace = \"SimpleConsole.Mediator\";\n    options.DefaultServiceLifetime = ServiceLifetime.Transient;\n});\n\n// or\n\n[assembly: MediatorOptions(Namespace = \"SimpleConsole.Mediator\", DefaultServiceLifetime = ServiceLifetime.Transient)]\n```\n\n----------------------------------------\n\nTITLE: Running Mediator Console Example\nDESCRIPTION: Console output showing successful request handling with matching IDs and error handling demonstration. The output shows a Ping-Pong pattern with matching GUIDs and an error message for invalid input.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/samples/Showcase/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dotnet run\nGot the right ID: (Ping { Id = 34dd8a5f-9ed5-4bde-b675-188155b9ace1 }, Pong { Id = 34dd8a5f-9ed5-4bde-b675-188155b9ace1 })\nError handling message: Invalid input\nDone!\n```\n\n----------------------------------------\n\nTITLE: Running Mediator Streaming Sample with Console Output\nDESCRIPTION: Shows the output of a .NET application that implements streaming with the Mediator pattern. The console output displays a series of StreamPing and Pong messages with matching IDs, demonstrating the back-and-forth communication flow in the streaming implementation.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/samples/basic/Streaming/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dotnet run\n-----------------------------------\nID: 93365b37-c597-4ebf-9f30-63327536efc8\nStreamPing { Id = 93365b37-c597-4ebf-9f30-63327536efc8 }\nPong { Id = 93365b37-c597-4ebf-9f30-63327536efc8 }\n-----------------------------------\nID: 93365b37-c597-4ebf-9f30-63327536efc8\nStreamPing { Id = 93365b37-c597-4ebf-9f30-63327536efc8 }\nPong { Id = 93365b37-c597-4ebf-9f30-63327536efc8 }\n-----------------------------------\nID: 93365b37-c597-4ebf-9f30-63327536efc8\nStreamPing { Id = 93365b37-c597-4ebf-9f30-63327536efc8 }\nPong { Id = 93365b37-c597-4ebf-9f30-63327536efc8 }\n-----------------------------------\nID: 93365b37-c597-4ebf-9f30-63327536efc8\nStreamPing { Id = 93365b37-c597-4ebf-9f30-63327536efc8 }\nPong { Id = 93365b37-c597-4ebf-9f30-63327536efc8 }\n-----------------------------------\nID: 93365b37-c597-4ebf-9f30-63327536efc8\nStreamPing { Id = 93365b37-c597-4ebf-9f30-63327536efc8 }\nPong { Id = 93365b37-c597-4ebf-9f30-63327536efc8 }\n```\n\n----------------------------------------\n\nTITLE: Running SimpleConsole Mediator Example with Console Output\nDESCRIPTION: Shows how to build and run the SimpleConsole example along with the expected console output. The output demonstrates the execution flow through handlers, validators, and the final response with a unique ID.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/samples/basic/Console/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dotnet run\n1) Running logger handler\n2) Running ping validator\n3) Valid input!\n4) Returning pong!\n5) No error!\n-----------------------------------\nID: 4f5e8fe3-e64f-4042-9ed3-33b894be8776\nPing { Id = 4f5e8fe3-e64f-4042-9ed3-33b894be8776 }\nPong { Id = 4f5e8fe3-e64f-4042-9ed3-33b894be8776 }\n```\n\n----------------------------------------\n\nTITLE: Running a Mediator Notifications Example with Multiple Handlers in Console\nDESCRIPTION: A console output showing the result of running a notifications example. It demonstrates three different notification handlers (CatchAll, Concrete, and Generic) all processing the same notification with the same ID.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/samples/basic/Notifications/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dotnet run\nPublishing!\n-----------------------------------\nCatchAllNotificationHandler - 360412c0-e7cf-452c-97f3-0e4be166b26c\nConcreteNotificationHandler - 360412c0-e7cf-452c-97f3-0e4be166b26c\nGenericNotificationHandler`1 - 360412c0-e7cf-452c-97f3-0e4be166b26c\n-----------------------------------\nFinished publishing!\n```\n\n----------------------------------------\n\nTITLE: Request Performance Benchmarks with Singleton Service Lifetime\nDESCRIPTION: Benchmark results comparing request handling performance across different mediator implementations including baseline, concrete Mediator, MessagePipe, IMediator interface, and MediatR. The benchmark shows significant performance advantages of this library over MediatR.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/benchmarks/README.md#2025-04-17_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.13.1, OS=Windows 10.0.19044.1586 (21H2)\nAMD Ryzen 5 5600X, 1 CPU, 12 logical and 6 physical cores\n.NET SDK=6.0.300-preview.22204.3\n  [Host]     : .NET 6.0.4 (6.0.422.16404), X64 RyuJIT\n  DefaultJob : .NET 6.0.4 (6.0.422.16404), X64 RyuJIT\n\n\n```\n\n----------------------------------------\n\nTITLE: Notification Performance Benchmarks with Singleton Service Lifetime\nDESCRIPTION: Benchmark results comparing notification handling performance across different mediator implementations. Shows the relative performance advantages of this library's implementation over alternatives like MessagePipe and MediatR for notification scenarios.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/benchmarks/README.md#2025-04-17_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.13.1, OS=Windows 10.0.19044.1586 (21H2)\nAMD Ryzen 5 5600X, 1 CPU, 12 logical and 6 physical cores\n.NET SDK=6.0.300-preview.22204.3\n  [Host]     : .NET 6.0.4 (6.0.422.16404), X64 RyuJIT\n  DefaultJob : .NET 6.0.4 (6.0.422.16404), X64 RyuJIT\n\n\n```\n\n----------------------------------------\n\nTITLE: Streaming Performance Benchmarks with IAsyncEnumerable\nDESCRIPTION: Benchmark results for streaming operations using IAsyncEnumerable with 10 iterations. Compares the baseline, IMediator interface, concrete Mediator, and MediatR implementations, showing this library maintaining performance close to baseline calls.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/benchmarks/README.md#2025-04-17_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.13.1, OS=Windows 10.0.19044.1586 (21H2)\nAMD Ryzen 5 5600X, 1 CPU, 12 logical and 6 physical cores\n.NET SDK=6.0.300-preview.22204.3\n  [Host]     : .NET 6.0.4 (6.0.422.16404), X64 RyuJIT\n  DefaultJob : .NET 6.0.4 (6.0.422.16404), X64 RyuJIT\n\n\n```\n\n----------------------------------------\n\nTITLE: Struct Request Performance Benchmarks with Singleton Service Lifetime\nDESCRIPTION: Benchmark results comparing performance when handling struct-based requests. The results demonstrate significant performance advantages when using structs with this library compared to other implementations, especially MediatR.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/benchmarks/README.md#2025-04-17_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.13.1, OS=Windows 10.0.19044.1586 (21H2)\nAMD Ryzen 5 5600X, 1 CPU, 12 logical and 6 physical cores\n.NET SDK=6.0.300-preview.22204.3\n  [Host]     : .NET 6.0.4 (6.0.422.16404), X64 RyuJIT\n  DefaultJob : .NET 6.0.4 (6.0.422.16404), X64 RyuJIT\n\n\n```\n\n----------------------------------------\n\nTITLE: Building and Running ConsoleAOT Project\nDESCRIPTION: This snippet demonstrates how to build and run the ConsoleAOT project using the dotnet CLI. It shows the output of the application, including the execution of a logger handler, ping validator, and the resulting Ping and Pong objects.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/samples/basic/ConsoleAOT/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dotnet run\n1) Running logger handler\n2) Running ping validator\n3) Valid input!\n4) Returning pong!\n5) No error!\n-----------------------------------\nID: 2dded749-c651-49d3-b7b9-5669ce953c52\nPing { Id = 2dded749-c651-49d3-b7b9-5669ce953c52 }\nPong { Id = 2dded749-c651-49d3-b7b9-5669ce953c52 }\n```\n\n----------------------------------------\n\nTITLE: Benchmarking ConsoleAOT vs Console Projects with Hyperfine\nDESCRIPTION: This snippet shows the use of the hyperfine benchmarking tool to compare the performance of the ConsoleAOT project against a standard Console project. It demonstrates a significant performance improvement with ConsoleAOT, running about 37 times faster than the regular Console application.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/samples/basic/ConsoleAOT/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ hyperfine './Console/bin/Release/net8.0/linux-x64/publish/Console' './ConsoleAOT/bin/Release/net8.0/linux-x64/publish/ConsoleAOT'\nBenchmark 1: ./Console/bin/Release/net8.0/linux-x64/publish/Console\n  Time (mean ± σ):     100.0 ms ±  17.0 ms    [User: 32.9 ms, System: 9.1 ms]\n  Range (min … max):    71.6 ms … 136.4 ms    34 runs\n\nBenchmark 2: ./ConsoleAOT/bin/Release/net8.0/linux-x64/publish/ConsoleAOT\n  Time (mean ± σ):       2.7 ms ±   0.4 ms    [User: 2.5 ms, System: 0.3 ms]\n  Range (min … max):     2.1 ms …   6.1 ms    941 runs\n\n  Warning: Command took less than 5 ms to complete. Note that the results might be inaccurate because hyperfine can not calibrate the shell startup time much more precise than this limit. You can try to use the `-N`/`--shell=none` option to disable the shell completely.\n  Warning: Statistical outliers were detected. Consider re-running this benchmark on a quiet system without any interferences from other programs. It might help to use the '--warmup' or '--prepare' options.\n\nSummary\n  ./ConsoleAOT/bin/Release/net8.0/linux-x64/publish/ConsoleAOT ran\n   37.34 ± 8.09 times faster than ./Console/bin/Release/net8.0/linux-x64/publish/Console\n```\n\n----------------------------------------\n\nTITLE: Running Custom Notification Publisher Console Output\nDESCRIPTION: Console output showing the execution of a custom notification publisher that catches and logs exceptions. The output includes the handler name, a GUID, and the full exception stack trace.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/samples/basic/NotificationPublisher/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dotnet run\nPublishing!\n-----------------------------------\nMyNotificationHandler - 6ae7d56b-8a2f-404c-a24b-c5df1e6691d2\nSystem.Exception: Something went wrong!\n   at MyNotificationHandler.Handle(Notification notification, CancellationToken cancellationToken) in /home/martin/code/private/Mediator/samples/basic/NotificationPublisher/Program.cs:line 79\n   at MyNotificationPublisher.Publish[TNotification](NotificationHandlers`1 handlers, TNotification notification, CancellationToken cancellationToken) in /home/martin/code/private/Mediator/samples/basic/NotificationPublisher/Program.cs:line 46\n-----------------------------------\nFinished publishing!\n```\n\n----------------------------------------\n\nTITLE: Testing TODO API with REST Client\nDESCRIPTION: HTTP request to test the Todo API endpoint, demonstrating validation error handling when attempting to create a todo item with an empty title. The response shows a 400 Bad Request with appropriate validation error message.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/samples/apps/ASPNET_Core_CleanArchitecture/README.md#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:5000/api/todos HTTP/1.1\ncontent-type: application/json\n\n{\n  \"title\": \"\",\n  \"text\": \"This is a todo without a title, we should get an error...\"\n}\n\nHTTP/1.1 400 Bad Request\nConnection: close\nDate: Mon, 17 May 2021 10:51:45 GMT\nContent-Type: application/json; charset=utf-8\nServer: Kestrel\nTransfer-Encoding: chunked\n\n{\n  \"errors\": [\n    \"'Title' must be between 1 and 40 characters. You entered 0 characters.\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Weather Forecast API using HTTP GET\nDESCRIPTION: An HTTP GET request to the WeatherForecast endpoint with the corresponding JSON response showing forecast data. The response includes an array of weather forecast items with date, temperature, and summary information.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/samples/apps/ASPNET_Core_Indirect/README.md#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:5000/WeatherForecast\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\nDate: Sat, 14 Jan 2023 16:10:38 GMT\nServer: Kestrel\nTransfer-Encoding: chunked\n\n[\n  {\n    \"date\": \"2023-01-15T19:10:38.959973+03:00\",\n    \"temperatureC\": 33,\n    \"temperatureF\": 91,\n    \"summary\": \"Warm\"\n  },\n  {\n    \"date\": \"2023-01-16T19:10:38.978643+03:00\",\n    \"temperatureC\": 7,\n    \"temperatureF\": 44,\n    \"summary\": \"Freezing\"\n  },\n  {\n    \"date\": \"2023-01-17T19:10:38.978647+03:00\",\n    \"temperatureC\": 11,\n    \"temperatureF\": 51,\n    \"summary\": \"Sweltering\"\n  },\n  {\n    \"date\": \"2023-01-18T19:10:38.978647+03:00\",\n    \"temperatureC\": 25,\n    \"temperatureF\": 76,\n    \"summary\": \"Balmy\"\n  },\n  {\n    \"date\": \"2023-01-19T19:10:38.978647+03:00\",\n    \"temperatureC\": -18,\n    \"temperatureF\": 0,\n    \"summary\": \"Balmy\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Running ASP.NET Core Minimal API with Mediator and Autofac\nDESCRIPTION: This snippet shows the console command to run the application and the expected output. It demonstrates the application starting, listening on http://localhost:5000, and provides information about the hosting environment and content root path.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/samples/use-cases/Autofac_DI/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dotnet run\nBuilding...\ninfo: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://localhost:5000\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl+C to shut down.\ninfo: Microsoft.Hosting.Lifetime[0]\n      Hosting environment: Development\ninfo: Microsoft.Hosting.Lifetime[0]\n      Content root path: /home/martin/code/private/Mediator/samples/use-cases/Autofac_DI\n```\n\n----------------------------------------\n\nTITLE: Installing Mediator Packages\nDESCRIPTION: Package installation instructions for Mediator using either NuGet CLI or XML package references.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: pwsh\nCODE:\n```\ndotnet add package Mediator.SourceGenerator --version 2.0.*\ndotnet add package Mediator.Abstractions --version 2.0.*\n```\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Mediator.SourceGenerator\" Version=\"2.0.*\">\n  <PrivateAssets>all</PrivateAssets>\n  <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>\n</PackageReference>\n<PackageReference Include=\"Mediator.Abstractions\" Version=\"2.0.*\" />\n```\n\n----------------------------------------\n\nTITLE: Source Generation Compilation Performance Benchmark\nDESCRIPTION: Benchmark measuring the source generation and compilation time for the Mediator library. The benchmark shows the memory usage and time required to compile the generated source code.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/benchmarks/README.md#2025-04-17_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.13.1, OS=Windows 10.0.22621\nAMD Ryzen 5 5600X, 1 CPU, 12 logical and 6 physical cores\n.NET SDK=6.0.202\n  [Host] : .NET 6.0.14 (6.0.1423.7309), X64 RyuJIT\n\nJob=InProcess  Toolchain=InProcessEmitToolchain\n\n```\n\n----------------------------------------\n\nTITLE: Displaying MediatorGenerator Warning Diagnostic Message\nDESCRIPTION: JSON structure showing a diagnostic warning from MediatorGenerator indicating that a message of type 'Some.Nested.Types.Program.Ping' lacks a registered handler. Includes metadata like severity, warning level, and diagnostic ID.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/test/Mediator.SourceGenerator.Tests/_snapshots/ReportingTests.Test_Request_Without_Handler_Warning.verified.txt#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Diagnostics\": [\n    {\n      \"Id\": \"MSG0005\",\n      \"Title\": \"MediatorGenerator message warning\",\n      \"Severity\": \"Warning\",\n      \"WarningLevel\": 1,\n      \"Location\": \": (0,0)-(0,0)\",\n      \"MessageFormat\": \"MediatorGenerator found message without any registered handler: {0}\",\n      \"Message\": \"MediatorGenerator found message without any registered handler: Some.Nested.Types.Program.Ping\",\n      \"Category\": \"MediatorGenerator\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Diagnostic Warning for Unhandled Message in MediatorGenerator\nDESCRIPTION: A JSON diagnostic output from MediatorGenerator showing a warning (MSG0005) that a message of type 'Some.Nested.Types.Program.Ping' has no registered handler. The diagnostic includes metadata such as severity level, location, and message format.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/test/Mediator.SourceGenerator.Tests/_snapshots/ReportingTests.Test_Abstract_Handler_Program.verified.txt#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Diagnostics: [\n    {\n      Id: MSG0005,\n      Title: MediatorGenerator message warning,\n      Severity: Warning,\n      WarningLevel: 1,\n      Location: : (0,0)-(0,0),\n      MessageFormat: MediatorGenerator found message without any registered handler: {0},\n      Message: MediatorGenerator found message without any registered handler: Some.Nested.Types.Program.Ping,\n      Category: MediatorGenerator\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MediatorGenerator Diagnostics for Handler Issues in JSON\nDESCRIPTION: JSON configuration that defines diagnostic messages for the MediatorGenerator. It specifies warning messages for cases where multiple handlers exist for the same message type (DuplicatePingHandler) and where an invalid handler type (StructPingHandler) is detected.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/test/Mediator.SourceGenerator.Tests/_snapshots/ReportingTests.Test_Multiple_Errors.verified.txt#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Diagnostics: [\n    {\n      Id: MSG0001,\n      Title: MediatorGenerator multiple handlers,\n      Severity: Warning,\n      WarningLevel: 1,\n      Location: : (0,0)-(0,0),\n      MessageFormat: MediatorGenerator found multiple handlers of message type {0},\n      Message: MediatorGenerator found multiple handlers of message type DuplicatePingHandler,\n      Category: MediatorGenerator\n    },\n    {\n      Id: MSG0002,\n      Title: MediatorGenerator invalid handler,\n      Severity: Warning,\n      WarningLevel: 1,\n      Location: : (0,0)-(0,0),\n      MessageFormat: MediatorGenerator found invalid handler type {0},\n      Message: MediatorGenerator found invalid handler type StructPingHandler,\n      Category: MediatorGenerator\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: MediatorGenerator Diagnostic JSON Output\nDESCRIPTION: A JSON structure containing diagnostic warnings from the MediatorGenerator. It shows two warnings: one for an invalid handler type (PingHandler) and another for a message (Ping) without any registered handler.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/test/Mediator.SourceGenerator.Tests/_snapshots/ReportingTests.Test_Invalid_Handler_Type.verified.txt#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Diagnostics: [\n    {\n      Id: MSG0002,\n      Title: MediatorGenerator invalid handler,\n      Severity: Warning,\n      WarningLevel: 1,\n      Location: : (0,0)-(0,0),\n      MessageFormat: MediatorGenerator found invalid handler type {0},\n      Message: MediatorGenerator found invalid handler type PingHandler,\n      Category: MediatorGenerator\n    },\n    {\n      Id: MSG0005,\n      Title: MediatorGenerator message warning,\n      Severity: Warning,\n      WarningLevel: 1,\n      Location: : (0,0)-(0,0),\n      MessageFormat: MediatorGenerator found message without any registered handler: {0},\n      Message: MediatorGenerator found message without any registered handler: Ping,\n      Category: MediatorGenerator\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MediatorGenerator Error Diagnostic Message in JSON\nDESCRIPTION: Defines diagnostic error message structure for scenario where both MediatorOptions and MediatorOptionsAttribute configurations are detected simultaneously. Includes error ID, severity level, location details and message formatting.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/test/Mediator.SourceGenerator.Tests/_snapshots/ReportingTests.Test_Configuratoin_Conflict.verified.txt#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Diagnostics\": [\n    {\n      \"Id\": \"MSG0006\",\n      \"Title\": \"MediatorGenerator configuration error\",\n      \"Severity\": \"Error\",\n      \"WarningLevel\": 0,\n      \"Location\": \": (0,0)-(0,0)\",\n      \"MessageFormat\": \"MediatorGenerator found conflicting configuration - both MediatorOptions and MediatorOptionsAttribute configuration are being used.\",\n      \"Message\": \"MediatorGenerator found conflicting configuration - both MediatorOptions and MediatorOptionsAttribute configuration are being used.\",\n      \"Category\": \"MediatorGenerator\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying MediatorGenerator Configuration Error Diagnostics in JSON Format\nDESCRIPTION: JSON structure showing error diagnostics from the MediatorGenerator. The errors indicate that only compile-time constant values can be used in MediatorOptions configuration, suggesting invalid configuration settings were attempted.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/test/Mediator.SourceGenerator.Tests/_snapshots/ReportingTests.Test_Unassigned_Variables_In_Config.verified.txt#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Diagnostics: [\n    {\n      Id: MSG0007,\n      Title: MediatorGenerator configuration error,\n      Severity: Error,\n      WarningLevel: 0,\n      Location: : (0,0)-(0,0),\n      MessageFormat: MediatorGenerator cannot parse MediatorOptions-based configuration. Only compile-time constant values can be used in MediatorOptions configuration.,\n      Message: MediatorGenerator cannot parse MediatorOptions-based configuration. Only compile-time constant values can be used in MediatorOptions configuration.,\n      Category: MediatorGenerator\n    },\n    {\n      Id: MSG0007,\n      Title: MediatorGenerator configuration error,\n      Severity: Error,\n      WarningLevel: 0,\n      Location: : (0,0)-(0,0),\n      MessageFormat: MediatorGenerator cannot parse MediatorOptions-based configuration. Only compile-time constant values can be used in MediatorOptions configuration.,\n      Message: MediatorGenerator cannot parse MediatorOptions-based configuration. Only compile-time constant values can be used in MediatorOptions configuration.,\n      Category: MediatorGenerator\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying MediatorGenerator Configuration Errors in JSON\nDESCRIPTION: This JSON structure represents a collection of diagnostic messages for MediatorGenerator configuration errors. It includes detailed information about each error, such as its ID, title, severity, location, and specific error message.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/test/Mediator.SourceGenerator.Tests/_snapshots/ReportingTests.Test_Unassigned_Namespace_Variable_In_Config.verified.txt#2025-04-17_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Diagnostics\": [\n    {\n      \"Id\": \"MSG0007\",\n      \"Title\": \"MediatorGenerator configuration error\",\n      \"Severity\": \"Error\",\n      \"WarningLevel\": 0,\n      \"Location\": \": (0,0)-(0,0)\",\n      \"MessageFormat\": \"MediatorGenerator cannot parse MediatorOptions-based configuration. Only compile-time constant values can be used in MediatorOptions configuration.\",\n      \"Message\": \"MediatorGenerator cannot parse MediatorOptions-based configuration. Only compile-time constant values can be used in MediatorOptions configuration.\",\n      \"Category\": \"MediatorGenerator\"\n    },\n    {\n      \"Id\": \"MSG0007\",\n      \"Title\": \"MediatorGenerator configuration error\",\n      \"Severity\": \"Error\",\n      \"WarningLevel\": 0,\n      \"Location\": \": (0,0)-(0,0)\",\n      \"MessageFormat\": \"MediatorGenerator cannot parse MediatorOptions-based configuration. Only compile-time constant values can be used in MediatorOptions configuration.\",\n      \"Message\": \"MediatorGenerator cannot parse MediatorOptions-based configuration. Only compile-time constant values can be used in MediatorOptions configuration.\",\n      \"Category\": \"MediatorGenerator\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MediatorGenerator Error Diagnostic Configuration in JSON\nDESCRIPTION: Defines a diagnostic error message configuration for MediatorGenerator when it encounters configuration parsing issues. Specifies error details including ID, severity, location, and message format for compile-time constant validation failures.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/test/Mediator.SourceGenerator.Tests/_snapshots/ReportingTests.Test_Unassigned_Lifetime_Variable_In_Config.verified.txt#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Diagnostics\": [\n    {\n      \"Id\": \"MSG0007\",\n      \"Title\": \"MediatorGenerator configuration error\",\n      \"Severity\": \"Error\",\n      \"WarningLevel\": 0,\n      \"Location\": \": (0,0)-(0,0)\",\n      \"MessageFormat\": \"MediatorGenerator cannot parse MediatorOptions-based configuration. Only compile-time constant values can be used in MediatorOptions configuration.\",\n      \"Message\": \"MediatorGenerator cannot parse MediatorOptions-based configuration. Only compile-time constant values can be used in MediatorOptions configuration.\",\n      \"Category\": \"MediatorGenerator\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: MediatorGenerator Error Diagnostic JSON Configuration\nDESCRIPTION: Diagnostic output detailing a configuration error in MediatorGenerator where non-constant values were used in MediatorOptions configuration. The error indicates that only compile-time constant values are permitted.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/test/Mediator.SourceGenerator.Tests/_snapshots/ReportingTests.Test_Invalid_Variable_In_Config.verified.txt#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Diagnostics\": [\n    {\n      \"Id\": \"MSG0007\",\n      \"Title\": \"MediatorGenerator configuration error\",\n      \"Severity\": \"Error\",\n      \"WarningLevel\": 0,\n      \"Location\": \": (0,0)-(0,0)\",\n      \"MessageFormat\": \"MediatorGenerator cannot parse MediatorOptions-based configuration. Only compile-time constant values can be used in MediatorOptions configuration.\",\n      \"Message\": \"MediatorGenerator cannot parse MediatorOptions-based configuration. Only compile-time constant values can be used in MediatorOptions configuration.\",\n      \"Category\": \"MediatorGenerator\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MediatorGenerator Error Diagnostic in JSON\nDESCRIPTION: JSON configuration defining a diagnostic error (MSG0007) from the MediatorGenerator. The error occurs when the generator cannot parse MediatorOptions-based configuration because non-compile-time constant values were used.\nSOURCE: https://github.com/martinothamar/Mediator/blob/main/test/Mediator.SourceGenerator.Tests/_snapshots/ReportingTests.Test_Cast_Lifetime_Config.verified.txt#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Diagnostics: [\n    {\n      Id: MSG0007,\n      Title: MediatorGenerator configuration error,\n      Severity: Error,\n      WarningLevel: 0,\n      Location: : (0,0)-(0,0),\n      MessageFormat: MediatorGenerator cannot parse MediatorOptions-based configuration. Only compile-time constant values can be used in MediatorOptions configuration.,\n      Message: MediatorGenerator cannot parse MediatorOptions-based configuration. Only compile-time constant values can be used in MediatorOptions configuration.,\n      Category: MediatorGenerator\n    }\n  ]\n}\n```"
  }
]