[
  {
    "owner": "sumsubstance",
    "repo": "apptokenusageexamples",
    "content": "TITLE: Adding Axios Request and Response Interceptors (JavaScript)\nDESCRIPTION: Shows how to add request and response interceptors to Axios.  Request interceptors can modify the request config before it's sent. Response interceptors can process the response data before it's handled by `then` or `catch`.  Dependencies: axios\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Add a request interceptor\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    return Promise.reject(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Handling Axios Errors (JavaScript)\nDESCRIPTION: Illustrates how to handle errors when making requests with Axios using a `catch` block.  It checks for different types of errors, including server responses with error status codes, no response received, and errors during request setup.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\n----------------------------------------\n\nTITLE: Performing a POST Request with Axios\nDESCRIPTION: This JavaScript code snippet demonstrates how to perform a POST request using Axios. It sends data (firstName and lastName) to the '/user' endpoint and handles the success or error of the request.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting Global Axios Defaults\nDESCRIPTION: This snippet demonstrates how to set global Axios defaults for baseURL, common headers (Authorization), and post headers (Content-Type).  These defaults will be applied to every request made using the Axios instance.  This allows for easy configuration of commonly used settings without needing to specify them on each individual request.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\naxios.defaults.baseURL = 'https://api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n----------------------------------------\n\nTITLE: Performing a GET Request with Axios (Simplified)\nDESCRIPTION: This JavaScript code snippet demonstrates how to perform a GET request using Axios with a simplified syntax, passing only the URL to the `axios()` function. It uses the GET method by default.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Send a GET request (default method)\naxios('/user/12345');\n```\n\n----------------------------------------\n\nTITLE: Creating an Axios Instance\nDESCRIPTION: This JavaScript code snippet demonstrates how to create a new instance of Axios with a custom configuration.  It sets the `baseURL`, `timeout`, and custom headers for the instance.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n----------------------------------------\n\nTITLE: Posting Form Data using form-data Library (Node.js)\nDESCRIPTION: Illustrates how to send form data, including files and buffers, using the `form-data` library in Node.js. It also shows how to set the correct headers for the request.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst FormData = require('form-data');\n \nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\naxios.post('https://example.com', form, { headers: form.getHeaders() })\n```\n\n----------------------------------------\n\nTITLE: Making Requests with Axios Config\nDESCRIPTION: This JavaScript code snippet demonstrates how to make a POST request using Axios with a configuration object. It specifies the method, URL, and data to be sent.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Send a POST request\naxios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Interceptors to Axios Instance (JavaScript)\nDESCRIPTION: Shows how to add request interceptors to a custom Axios instance.  This allows you to apply specific interceptors to certain requests only. Dependencies: axios\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\n----------------------------------------\n\nTITLE: Axios Error Handling\nDESCRIPTION: This snippet shows how to handle errors in Axios requests using the `catch` method. It demonstrates how to access the error message, code, configuration, and response from the error object. The error object will always be an instance of Error, and include the response if available.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/UPGRADE_GUIDE.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/user/12345')\n  .catch((error) => {\n    console.log(error.message);\n    console.log(error.code); // Not always specified\n    console.log(error.config); // The config that was used to make the request\n    console.log(error.response); // Only available if response was received from the server\n  });\n```\n\n----------------------------------------\n\nTITLE: File Upload with Axios\nDESCRIPTION: This snippet demonstrates how to upload a file using the `axios` library in a Node.js environment. It creates a `FormData` object, appends a file stream, and then uses `axios.post` to send the form data. It also sets the 'Content-Type' header with the correct boundary obtained from `form.getHeaders()`.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new FormData();\nconst stream = fs.createReadStream(PATH_TO_FILE);\n\nform.append('image', stream);\n\n// In Node.js environment you need to set boundary in the header field 'Content-Type' by calling method `getHeaders`\nconst formHeaders = form.getHeaders();\n\naxios.post('http://example.com', form, {\n  headers: {\n    ...formHeaders,\n  },\n})\n.then(response => response)\n.catch(error => error)\n```\n\n----------------------------------------\n\nTITLE: Accessing Axios Response Data\nDESCRIPTION: This JavaScript code demonstrates how to access the data, status, statusText, headers, and config properties of an Axios response within a `.then()` block. It shows how to handle the successful response and log its different parts to the console. It assumes Axios is available in the execution environment.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\n----------------------------------------\n\nTITLE: Validating Axios Response Status (JavaScript)\nDESCRIPTION: Demonstrates how to use the `validateStatus` option to define HTTP status codes that should be considered successful.  If the status code is outside the range defined by `validateStatus`, an error will be thrown.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Performing a GET Request with Axios\nDESCRIPTION: This JavaScript code snippet demonstrates how to perform a GET request using Axios. It makes a request to '/user?ID=12345' and handles the success, error, and completion of the request using Promises.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst axios = require('axios');\n\n// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });\n\n// Optionally the request above could also be done as\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });  \n\n// Want to use async/await? Add the `async` keyword to your outer function/method.\nasync function getUser() {\n  try {\n    const response = await axios.get('/user?ID=12345');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Axios Promise Usage\nDESCRIPTION: This snippet demonstrates the recommended way to handle responses and errors using `axios.then` and `axios.catch`, replacing the deprecated `axios.success` and `axios.error` methods. This is the standard way to use promises with Axios.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/UPGRADE_GUIDE.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('some/url')\n  .then(function (res) {\n    /* ... */\n  })\n  .catch(function (err) {\n    /* ... */\n  });\n```\n\n----------------------------------------\n\nTITLE: Axios Response Schema\nDESCRIPTION: This snippet describes the structure of an Axios response object. It includes properties like `data`, `status`, `statusText`, `headers`, `config`, and `request`. This details the information available in the response after making an Axios request.  Understanding the response schema allows developers to effectively handle and process the data received from the server.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lower cased and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Following Redirects with http.get in Node.js\nDESCRIPTION: This snippet demonstrates how to use the `follow-redirects` module to make an HTTP GET request that automatically follows redirects.  It imports the `http` and `https` objects from the `follow-redirects` module and uses `http.get` to retrieve data from a URL that redirects. The response data is then logged to the console. The error handler catches any request errors. Dependencies: follow-redirects.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/follow-redirects/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { http, https } = require('follow-redirects');\n\nhttp.get('http://bit.ly/900913', response => {\n  response.on('data', chunk => {\n    console.log(chunk);\n  });\n}).on('error', err => {\n  console.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Submitting Form with Custom Headers\nDESCRIPTION: This code shows how to submit form data with custom HTTP headers.  The `headers` key is used within the object passed to `form.submit()` to define the custom headers.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nform.submit({\n  host: 'example.com',\n  path: '/surelynot.php',\n  headers: {'x-test-header': 'test-header-value'}\n}, function(err, res) {\n  console.log(res.statusCode);\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Concurrent Requests with Axios\nDESCRIPTION: This JavaScript code snippet demonstrates how to perform multiple concurrent requests using Axios and `Promise.all`.  It fetches user account and permissions data concurrently and processes the results when all requests are complete.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\nPromise.all([getUserAccount(), getUserPermissions()])\n  .then(function (results) {\n    const acct = results[0];\n    const perm = results[1];\n  });\n```\n\n----------------------------------------\n\nTITLE: Posting Form Data using URLSearchParams (JavaScript)\nDESCRIPTION: Shows how to send data in the `application/x-www-form-urlencoded` format in a browser environment using the `URLSearchParams` API.  Dependencies: URLSearchParams API (polyfill required for older browsers)\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = new URLSearchParams();\nparams.append('param1', 'value1');\nparams.append('param2', 'value2');\naxios.post('/foo', params);\n```\n\n----------------------------------------\n\nTITLE: Posting Form Data using qs Library and ES6 (JavaScript)\nDESCRIPTION: Illustrates an alternative approach to using the `qs` library for serializing data with ES6 syntax, including setting headers for the correct content type.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);\n```\n\n----------------------------------------\n\nTITLE: Canceling Axios Requests with CancelToken (JavaScript)\nDESCRIPTION: Illustrates how to cancel Axios requests using the `CancelToken` API. It demonstrates creating a cancel token source and associating it with a request.  Dependencies: axios\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\n----------------------------------------\n\nTITLE: Axios Progress Event Handlers\nDESCRIPTION: This snippet demonstrates how to define handlers for upload and download progress events in Axios. This allows you to track the progress of requests and provide feedback to the user. Requires the `onUploadProgress` and `onDownloadProgress` config options.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/UPGRADE_GUIDE.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // Define a handler for upload progress events\n  onUploadProgress: function (progressEvent) {\n    // ...\n  },\n\n  // Define a handler for download progress events\n  onDownloadProgress: function (progressEvent) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for follow-redirects Browser Usage\nDESCRIPTION: This snippet shows how to configure webpack to replace `follow-redirects` with the built-in browser equivalents (`http` and `https`) when using `follow-redirects` in a browser environment.  This optimizes the bundle size and uses the browser's native redirect handling.  Requires: webpack\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/follow-redirects/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"follow-redirects/http\"  : \"http\",\n  \"follow-redirects/https\" : \"https\"\n}\n```\n\n----------------------------------------\n\nTITLE: Posting Form Data using URLSearchParams (Node.js)\nDESCRIPTION: Demonstrates how to send data in the `application/x-www-form-urlencoded` format in Node.js using the built-in `URLSearchParams` from the `url` module.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = require('url');\nconst params = new url.URLSearchParams({ foo: 'bar' });\naxios.post('http://something.com/', params.toString());\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Request Options including beforeRedirect in Node.js\nDESCRIPTION: This snippet demonstrates how to set per-request options for `follow-redirects`, including using the `beforeRedirect` callback to modify request options before a redirect.  It uses `url.parse` to construct the request options, and then sets `maxRedirects` and `beforeRedirect`. Dependencies: url, follow-redirects.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/follow-redirects/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = require('url');\nconst { http, https } = require('follow-redirects');\n\nconst options = url.parse('http://bit.ly/900913');\noptions.maxRedirects = 10;\noptions.beforeRedirect = (options, response, request) => {\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n\n  // response.headers = the redirect response headers\n  // response.statusCode = the redirect response code (eg. 301, 307, etc.)\n\n  // request.url = the requested URL that resulted in a redirect\n  // request.headers = the headers in the request that resulted in a redirect\n  // request.method = the method of the request that resulted in a redirect\n  if (options.hostname === \"example.com\") {\n    options.auth = \"user:password\";\n  }\n};\nhttp.request(options);\n```\n\n----------------------------------------\n\nTITLE: Submitting Form to URL with Query String and Auth\nDESCRIPTION: This example demonstrates how to submit a form to a URL containing a query string and HTTP authentication credentials. The parameters are passed as an object to the form.submit() method.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nform.submit({\n  host: 'example.com',\n  path: '/probably.php?extra=params',\n  auth: 'username:password'\n}, function(err, res) {\n  console.log(res.statusCode);\n});\n```\n\n----------------------------------------\n\nTITLE: Posting Form Data using querystring Module (Node.js)\nDESCRIPTION: Shows how to send data in the `application/x-www-form-urlencoded` format in Node.js using the built-in `querystring` module.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst querystring = require('querystring');\naxios.post('http://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\n----------------------------------------\n\nTITLE: Form Submission with Node-Fetch\nDESCRIPTION: This snippet demonstrates how to submit a form using the `node-fetch` library. It creates a new `FormData` object, appends a key-value pair, and then uses `fetch` to send the form data as a POST request. The code includes error handling and logs the JSON response from the server.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar form = new FormData();\n\nform.append('a', 1);\n\nfetch('http://example.com', { method: 'POST', body: form })\n    .then(function(res) {\n        return res.json();\n    }).then(function(json) {\n        console.log(json);\n    });\n```\n\n----------------------------------------\n\nTITLE: Inspecting the Final Redirected URL using https.request in Node.js\nDESCRIPTION: This snippet demonstrates how to inspect the final redirected URL after following redirects using `https.request`. It uses the `responseUrl` property on the response object to retrieve the URL after all redirects have been resolved. Dependencies: follow-redirects.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/follow-redirects/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst request = https.request({\n  host: 'bitly.com',\n  path: '/UHfDGO',\n}, response => {\n  console.log(response.responseUrl);\n  // 'http://duckduckgo.com/robots.txt'\n});\nrequest.end();\n```\n\n----------------------------------------\n\nTITLE: Submitting Form Data with Node's HTTP Client\nDESCRIPTION: This code demonstrates how to use Node's built-in HTTP client interface to submit the form data. It shows how to set the request options, including headers, and pipe the form data to the request.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar http = require('http');\n\nvar request = http.request({\n  method: 'post',\n  host: 'example.org',\n  path: '/upload',\n  headers: form.getHeaders()\n});\n\nform.pipe(request);\n\nrequest.on('response', function(res) {\n  console.log(res.statusCode);\n});\n```\n\n----------------------------------------\n\nTITLE: Wrapping follow-redirects around custom protocol implementations in Node.js\nDESCRIPTION: This snippet demonstrates how to wrap `follow-redirects` around custom implementations of the `http` and `https` protocols. This allows leveraging caching, intermediate request tracking, or other advanced features within the custom protocols while still utilizing `follow-redirects` for automatic redirect handling. Dependencies: follow-redirects, your-custom-http, your-custom-https.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/follow-redirects/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { http, https } = require('follow-redirects').wrap({\n  http: require('your-custom-http'),\n  https: require('your-custom-https'),\n});\n```\n\n----------------------------------------\n\nTITLE: Posting Form Data using qs Library (JavaScript)\nDESCRIPTION: Demonstrates how to use the `qs` library to serialize data into the `application/x-www-form-urlencoded` format.  Dependencies: qs library\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n\n----------------------------------------\n\nTITLE: Creating a content-type header\nDESCRIPTION: This JavaScript code shows how to use the `mime.contentType()` function to create a full content-type header, optionally adding a charset if one is not already present. It uses the `mime.lookup()` function internally when an extension is provided as input.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/mime-types/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmime.contentType('markdown') // 'text/x-markdown; charset=utf-8'\nmime.contentType('file.json') // 'application/json; charset=utf-8'\nmime.contentType('text/html') // 'text/html; charset=utf-8'\nmime.contentType('text/html; charset=iso-8859-1') // 'text/html; charset=iso-8859-1'\n\n// from a full path\nmime.contentType(path.extname('/path/to/file.json')) // 'application/json; charset=utf-8'\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios Instance Defaults (JavaScript)\nDESCRIPTION: Demonstrates how to configure an Axios instance with default settings, including setting the timeout. It shows how instance defaults are overridden by request-specific configurations.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nconst instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests using this instance will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n----------------------------------------\n\nTITLE: Axios Request Configuration\nDESCRIPTION: This code snippet shows the available configuration options for making requests with Axios.  It includes properties such as url, method, baseURL, transformRequest, transformResponse, headers, params, data, timeout, withCredentials, adapter, auth, responseType, and more.  The snippet showcases how to customize various aspects of the request, such as headers, parameters, data transformation, authentication, and timeout settings.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional function in charge of serializing `params`\n  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\n  paramsSerializer: function (params) {\n    return Qs.stringify(params, {arrayFormat: 'brackets'})\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 5, // default\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`.\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // `decompress` indicates whether or not the response body should be decompressed\n  // automatically. If set to `true` will also remove the 'content-encoding' header\n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Form with String, Buffer, and File Stream\nDESCRIPTION: This example demonstrates how to construct a form with three fields containing a string, a buffer, and a file stream using the form-data library. It showcases appending different types of data to the form.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar FormData = require('form-data');\nvar fs = require('fs');\n\nvar form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n```\n\n----------------------------------------\n\nTITLE: Combining streams using a callback function\nDESCRIPTION: This example demonstrates how to combine two files (file1.txt and file2.txt) into a single file (combined.txt) using the combined-stream module. Instead of directly appending the streams, it appends callback functions that return the streams. The callback functions take a `next` parameter, which must be invoked to provide the stream.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/combined-stream/Readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar CombinedStream = require('combined-stream');\nvar fs = require('fs');\n\nvar combinedStream = CombinedStream.create();\ncombinedStream.append(function(next) {\n  next(fs.createReadStream('file1.txt'));\n});\ncombinedStream.append(function(next) {\n  next(fs.createReadStream('file2.txt'));\n});\n\ncombinedStream.pipe(fs.createWriteStream('combined.txt'));\n```\n\n----------------------------------------\n\nTITLE: Setting Filename and Content Type when Appending File\nDESCRIPTION: This example shows how to set the filename and content type when appending a file to a FormData object, using both string and object formats for the options parameter.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Set filename by providing a string for options\nform.append( 'my_file', fs.createReadStream('/foo/bar.jpg'), 'bar.jpg' );\n\n// provide an object.\nform.append( 'my_file', fs.createReadStream('/foo/bar.jpg'), {filename: 'bar.jpg', contentType: 'image/jpeg', knownLength: 19806} );\n```\n\n----------------------------------------\n\nTITLE: Creating Form with Request Stream\nDESCRIPTION: This example demonstrates the usage of request stream from @mikeal's request library with the form-data library. It appends a string, a buffer, and a logo fetched via a request stream to the form.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar FormData = require('form-data');\nvar request = require('request');\n\nvar form = new FormData();\n\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_logo', request('http://nodejs.org/images/logo.png'));\n```\n\n----------------------------------------\n\nTITLE: Canceling Axios Requests with Executor Function (JavaScript)\nDESCRIPTION: Demonstrates an alternative way to cancel Axios requests using the `CancelToken` constructor with an executor function. This allows you to obtain a cancel function that can be called later.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n----------------------------------------\n\nTITLE: Getting the default file extension\nDESCRIPTION: This JavaScript code demonstrates how to use the `mime.extension()` function to get the default file extension associated with a specific content type. It returns the most common extension for a given content type.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/mime-types/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmime.extension('application/octet-stream') // 'bin'\n```\n\n----------------------------------------\n\nTITLE: Submitting Form with Content-Length Header\nDESCRIPTION: This snippet shows how to submit the form to a URL and have the 'Content-Length' header automatically set.  The submit() method handles setting the header.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nform.submit('example.org/upload', function(err, res) {\n  console.log(res.statusCode);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Options for follow-redirects in Node.js\nDESCRIPTION: This snippet shows how to set global options for the `follow-redirects` module, such as the maximum number of redirects and the maximum body length. These options apply to all subsequent requests made using the module. Dependencies: follow-redirects.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/follow-redirects/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst followRedirects = require('follow-redirects');\nfollowRedirects.maxRedirects = 10;\nfollowRedirects.maxBodyLength = 20 * 1024 * 1024; // 20 MB\n```\n\n----------------------------------------\n\nTITLE: Combining two files using combined-stream\nDESCRIPTION: This example demonstrates how to combine two files (file1.txt and file2.txt) into a single file (combined.txt) using the combined-stream module. It uses the fs module to create read streams for the input files and a write stream for the output file, and then pipes the combined stream to the output file.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/combined-stream/Readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar CombinedStream = require('combined-stream');\nvar fs = require('fs');\n\nvar combinedStream = CombinedStream.create();\ncombinedStream.append(fs.createReadStream('file1.txt'));\ncombinedStream.append(fs.createReadStream('file2.txt'));\n\ncombinedStream.pipe(fs.createWriteStream('combined.txt'));\n```\n\n----------------------------------------\n\nTITLE: Setting Headers with Axios Interceptor for Form Data (JavaScript)\nDESCRIPTION: Shows how to use an interceptor to automatically set the correct headers when sending `FormData` with Axios.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\naxios.interceptors.request.use(config => {\n  if (config.data instanceof FormData) {\n    Object.assign(config.headers, config.data.getHeaders());\n  }\n  return config;\n});\n```\n\n----------------------------------------\n\nTITLE: Looking up content-type by file extension\nDESCRIPTION: This JavaScript code demonstrates how to use the `mime.lookup()` function to retrieve the content type associated with various file extensions or file paths. The function returns `false` if the input is invalid or not found.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/mime-types/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmime.lookup('json') // 'application/json'\nmime.lookup('.md') // 'text/markdown'\nmime.lookup('file.html') // 'text/html'\nmime.lookup('folder/file.js') // 'application/javascript'\nmime.lookup('folder/.htaccess') // false\n\nmime.lookup('cats') // false\n```\n\n----------------------------------------\n\nTITLE: Importing Axios in CommonJS\nDESCRIPTION: This JavaScript code snippet demonstrates how to import Axios in a CommonJS environment.  It uses `require()` to load Axios and access its default export. This approach allows TypeScript typings (for autocompletion and parameter hints) to be recognized.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst axios = require('axios').default;\n\n// axios.<method> will now provide autocomplete and parameter typings\n```\n\n----------------------------------------\n\nTITLE: Form Submission with Request\nDESCRIPTION: This snippet demonstrates how to submit a form using the `request` library. It creates a form with a string field and a file upload, then uses `request.post` to send the form data to a specified URL. The code includes error handling and logging of the server response.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar formData = {\n  my_field: 'my_value',\n  my_file: fs.createReadStream(__dirname + '/unicycle.jpg'),\n};\n\nrequest.post({url:'http://service.com/upload', formData: formData}, function(err, httpResponse, body) {\n  if (err) {\n    return console.error('upload failed:', err);\n  }\n  console.log('Upload successful!  Server responded with:', body);\n});\n```\n\n----------------------------------------\n\nTITLE: Axios Module Loading\nDESCRIPTION: This snippet shows how to load Axios using both AMD (Asynchronous Module Definition) and CommonJS module systems, showcasing the UMD (Universal Module Definition) format.  This allows Axios to be used in a variety of environments.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/UPGRADE_GUIDE.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// AMD\nrequire(['bower_components/axios/dist/axios'], function (axios) {\n  /* ... */\n});\n\n// CommonJS\nvar axios = require('axios/dist/axios');\n```\n\n----------------------------------------\n\nTITLE: Parallel Jobs with Input Object in AsyncKit\nDESCRIPTION: This example demonstrates running asynchronous jobs in parallel using an input object. It initializes an object with named properties, defines an asynchronous job function (`asyncJob`), and uses `asynckit/parallel` to execute the jobs concurrently, collecting the results. The `asyncJob` function receives the item, key, and callback as parameters. An abort function is implemented to terminate jobs upon error.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/asynckit/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar parallel = require('asynckit/parallel')\n  , assert   = require('assert')\n  ;\n\nvar source         = { first: 1, one: 1, four: 4, sixteen: 16, sixtyFour: 64, thirtyTwo: 32, eight: 8, two: 2 }\n  , expectedResult = { first: 2, one: 2, four: 8, sixteen: 32, sixtyFour: 128, thirtyTwo: 64, eight: 16, two: 4 }\n  , expectedTarget = [ 1, 1, 2, 4, 8, 16, 32, 64 ]\n  , expectedKeys   = [ 'first', 'one', 'two', 'four', 'eight', 'sixteen', 'thirtyTwo', 'sixtyFour' ]\n  , target         = []\n  , keys           = []\n  ;\n\nparallel(source, asyncJob, function(err, result)\n{\n  assert.deepEqual(result, expectedResult);\n  assert.deepEqual(target, expectedTarget);\n  assert.deepEqual(keys, expectedKeys);\n});\n\n// supports full value, key, callback (shortcut) interface\nfunction asyncJob(item, key, cb)\n{\n  // different delays (in ms) per item\n  var delay = item * 25;\n\n  // pretend different jobs take different time to finish\n  // and not in consequential order\n  var timeoutId = setTimeout(function() {\n    keys.push(key);\n    target.push(item);\n    cb(null, item * 2);\n  }, delay);\n\n  // allow to cancel \"leftover\" jobs upon error\n  // return function, invoking of which will abort this job\n  return clearTimeout.bind(null, timeoutId);\n}\n```\n\n----------------------------------------\n\nTITLE: Serial Jobs with Input Array in AsyncKit\nDESCRIPTION: This example demonstrates running asynchronous jobs serially (sequentially) using an input array. It defines an array, defines an asynchronous job function (`asyncJob`), and uses `asynckit/serial` to execute the jobs one after another, collecting the results. The `asyncJob` function receives the item, key, and callback as parameters.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/asynckit/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar serial = require('asynckit/serial')\n  , assert = require('assert')\n  ;\n\nvar source         = [ 1, 1, 4, 16, 64, 32, 8, 2 ]\n  , expectedResult = [ 2, 2, 8, 32, 128, 64, 16, 4 ]\n  , expectedTarget = [ 0, 1, 2, 3, 4, 5, 6, 7 ]\n  , target         = []\n  ;\n\nserial(source, asyncJob, function(err, result)\n{\n  assert.deepEqual(result, expectedResult);\n  assert.deepEqual(target, expectedTarget);\n});\n\n// extended interface (item, key, callback)\n// also supported for arrays\nfunction asyncJob(item, key, cb)\n{\n  target.push(key);\n\n  // it will be automatically made async\n  // even it iterator \"returns\" in the same event loop\n  cb(null, item * 2);\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Data to Form\nDESCRIPTION: This example shows how to append different types of data (string, integer, boolean, buffer, and JSON string) to a FormData object.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar form = new FormData();\nform.append( 'my_string', 'my value' );\nform.append( 'my_integer', 1 );\nform.append( 'my_boolean', true );\nform.append( 'my_buffer', new Buffer(10) );\nform.append( 'my_array_as_json', JSON.stringify( ['bird','cute'] ) )\n```\n\n----------------------------------------\n\nTITLE: GET Request for Image in Node.js\nDESCRIPTION: This JavaScript code snippet demonstrates how to make a GET request for a remote image in Node.js using Axios.  It sets the `responseType` to 'stream' and pipes the response data to a file.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'http://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n----------------------------------------\n\nTITLE: HTTP Echo Server with Delayed Response (JavaScript)\nDESCRIPTION: This example demonstrates creating an HTTP echo server that delays its response by 1000 ms using delayed-stream. It creates a delayed stream from the request, sets a timeout, writes the response head, and pipes the delayed stream to the response, effectively delaying the request processing.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/delayed-stream/Readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar DelayedStream = require('delayed-stream');\nvar http = require('http');\n\nhttp.createServer(function(req, res) {\n  var delayed = DelayedStream.create(req);\n\n  setTimeout(function() {\n    res.writeHead(200);\n    delayed.pipe(res);\n  }, 1000);\n});\n```\n\n----------------------------------------\n\nTITLE: Combining two files without pausing streams\nDESCRIPTION: This example demonstrates how to combine two files (file1.txt and file2.txt) into a single file (combined.txt) using the combined-stream module, but sets the `pauseStreams` option to `false`. This prevents the source streams from being paused until needed.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/combined-stream/Readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar CombinedStream = require('combined-stream');\nvar fs = require('fs');\n\nvar combinedStream = CombinedStream.create({pauseStreams: false});\ncombinedStream.append(fs.createReadStream('file1.txt'));\ncombinedStream.append(fs.createReadStream('file2.txt'));\n\ncombinedStream.pipe(fs.createWriteStream('combined.txt'));\n```\n\n----------------------------------------\n\nTITLE: Installing Axios via yarn\nDESCRIPTION: This command installs the Axios library using Yarn, a package manager for JavaScript. Axios is a promise-based HTTP client for making requests from Node.js or the browser.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ yarn add axios\n```\n\n----------------------------------------\n\nTITLE: Installing Axios via npm\nDESCRIPTION: This command installs the Axios library using the Node Package Manager (npm). Axios is a promise-based HTTP client for making requests from Node.js or the browser.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm install axios\n```\n\n----------------------------------------\n\nTITLE: Installing Form-Data Package\nDESCRIPTION: This command installs the form-data package using npm.  The --save flag adds form-data as a dependency to your project's package.json file.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save form-data\n```\n\n----------------------------------------\n\nTITLE: Appending Stream with File Information\nDESCRIPTION: This example demonstrates how to append a stream with file-related information, such as filename, filepath, contentType, and knownLength, to a form-data object when dealing with stream types where the required information cannot be automatically determined.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsomeModule.stream(function(err, stdout, stderr) {\n  if (err) throw err;\n\n  var form = new FormData();\n\n  form.append('file', stdout, {\n    filename: 'unicycle.jpg', // ... or:\n    filepath: 'photos/toys/unicycle.jpg',\n    contentType: 'image/jpeg',\n    knownLength: 19806\n  });\n\n  form.submit('http://example.com/', function(err, res) {\n    if (err) throw err;\n    console.log('Done');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing combined-stream\nDESCRIPTION: This command installs the combined-stream package using npm. It adds the package and its dependencies to your project.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/combined-stream/Readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install combined-stream\n```\n\n----------------------------------------\n\nTITLE: Installing AsyncKit with NPM\nDESCRIPTION: This command installs the AsyncKit package as a dependency in your project using npm.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/asynckit/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save asynckit\n```\n\n----------------------------------------\n\nTITLE: Getting Content Length Asynchronously\nDESCRIPTION: This code demonstrates how to get the content length of a FormData object asynchronously using the `getLength` method. A callback function is used to handle potential errors and process the length once it is calculated.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nthis.getLength(function(err, length) {\n  if (err) {\n    this._error(err);\n    return;\n  }\n\n  // add content length\n  request.setHeader('Content-Length', length);\n\n  ...\n}.bind(this));\n```\n\n----------------------------------------\n\nTITLE: AppToken C# Example\nDESCRIPTION: This is a working sample code demonstrating the usage of AppTokens with the api.sumsub.com service. The code is written in C# and provides a practical example of how to interact with the Sumsub API using AppTokens for authentication and authorization.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/C#/README.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Axios Adapter Implementation in JavaScript\nDESCRIPTION: This code snippet demonstrates an example Axios adapter. It takes a configuration object, makes a request, and settles the Promise using the `settle` function. The response includes data, status, headers, configuration, and the original request.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/lib/adapters/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar settle = require('./../core/settle');\n\nmodule.exports = function myAdapter(config) {\n  // At this point:\n  //  - config has been merged with defaults\n  //  - request transformers have already run\n  //  - request interceptors have already run\n  \n  // Make the request using config provided\n  // Upon response settle the Promise\n\n  return new Promise(function(resolve, reject) {\n  \n    var response = {\n      data: responseData,\n      status: request.status,\n      statusText: request.statusText,\n      headers: responseHeaders,\n      config: config,\n      request: request\n    };\n\n    settle(resolve, reject, response);\n\n    // From here:\n    //  - response transformers will run\n    //  - response interceptors will run\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Various Application and Text MIME Types\nDESCRIPTION: This snippet demonstrates the addition of a variety of MIME types for different application and text formats. These types include formats related to automation, data interchange, and specialized text formats.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/mime-db/HISTORY.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n- `application/a2l`\n- `application/aml`\n- `application/atfx`\n- `application/atxml`\n- `application/cdfx+xml`\n- `application/dii`\n- `application/json5`\n- `application/lxf`\n- `application/mf4`\n- `application/vnd.apache.thrift.compact`\n- `application/vnd.apache.thrift.json`\n- `application/vnd.coffeescript`\n- `application/vnd.enphase.envoy`\n- `application/vnd.ims.imsccv1p1`\n- `text/csv-schema`\n- `text/hjson`\n- `text/markdown`\n- `text/yaml`\n```\n\n----------------------------------------\n\nTITLE: Importing Axios in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Axios library in a TypeScript project, using the ES2015 module syntax. It also shows a basic GET request with promise handling for response and error logging. The project must be configured to compile TypeScript code.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/UPGRADE_GUIDE.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport axios from 'axios';\n\naxios.get('/foo')\n  .then(response => console.log(response))\n  .catch(error => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Adding Font and JSON MIME Types\nDESCRIPTION: This snippet displays the addition of MIME types related to web fonts and JSON formats, indicating support for modern web technologies and data interchange.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/mime-db/HISTORY.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n- `application/font-woff2`\n- `application/coap-group+json`\n- `application/dcd`\n- `application/vnd.apache.thrift.binary`\n- `image/vnd.tencent.tap`\n```\n\n----------------------------------------\n\nTITLE: Adding JSON5 and HJSON MIME Types\nDESCRIPTION: This snippet illustrates the addition of MIME types for JSON5 and HJSON formats, indicating that these formats are now supported. This update was part of version 1.3.1.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/mime-db/HISTORY.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- `application/json5`\n- `text/hjson`\n```\n\n----------------------------------------\n\nTITLE: Using Axios with TypeScript\nDESCRIPTION: Illustrates how to use Axios with TypeScript, showcasing a simple GET request.  Requires: Axios and TypeScript to be set up in the project.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport axios from 'axios';\naxios.get('/user?ID=12345');\n```\n\n----------------------------------------\n\nTITLE: Downloading mime-db JSON using jsDelivr\nDESCRIPTION: This provides a URL for downloading the `db.json` file, containing the mime-db data, from the jsDelivr CDN. It is suggested to use a release tag rather than `master` for stability. The URL can be used to retrieve the data directly in a browser environment.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/mime-db/README.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nhttps://cdn.jsdelivr.net/gh/jshttp/mime-db@master/db.json\n```\n\n----------------------------------------\n\nTITLE: Browser Usage Configuration with Webpack (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure Webpack (or similar bundlers) to replace `follow-redirects` with the built-in `http` and `https` modules in a browser environment. This is useful since browsers handle redirects natively.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/node_modules/follow-redirects/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"follow-redirects/http\"  : \"http\",\n  \"follow-redirects/https\" : \"https\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing follow-redirects for Browser (JavaScript)\nDESCRIPTION: This code snippet shows how to import the http and https modules from follow-redirects within a browser environment. This pattern enables tools like webpack to replace follow-redirects with the native browser implementations of these protocols.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/node_modules/follow-redirects/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('follow-redirects/http');\nconst https = require('follow-redirects/https');\n```\n\n----------------------------------------\n\nTITLE: Using Custom Headers and Known Length\nDESCRIPTION: This example demonstrates how to use custom headers and pre-known length in parts when appending data to the form.  It defines custom header information and uses the `options` parameter of `form.append()` to configure it.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar CRLF = '\\r\\n';\nvar form = new FormData();\n\nvar options = {\n  header: CRLF + '--' + form.getBoundary() + CRLF + 'X-Custom-Header: 123' + CRLF + CRLF,\n  knownLength: 1\n};\n\nform.append('my_buffer', buffer, options);\n\nform.submit('http://example.com/', function(err, res) {\n  if (err) throw err;\n  console.log('Done');\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Axios Request Adapter (New)\nDESCRIPTION: This snippet shows a the newer version of a custom request adapter in Axios, which returns a `Promise`, and no longer requires invoking `transformData` or receiving `resolve` and `reject` as arguments. This is for compatibility with Axios versions 0.13.0 and later.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/UPGRADE_GUIDE.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myAdapter(config) {\n  return new Promise(function (resolve, reject) {\n    var response = {\n      data: responseData,\n      status: request.status,\n      statusText: request.statusText,\n      headers: responseHeaders\n    };\n    settle(resolve, reject, response);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing follow-redirects for Browser Usage\nDESCRIPTION: This snippet demonstrates how to import follow-redirects in a way that allows webpack to easily replace it with the built-in http and https modules in the browser. This enables using the native browser redirect handling. Dependencies: follow-redirects.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/follow-redirects/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('follow-redirects/http');\nconst https = require('follow-redirects/https');\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Request Options for Redirects (Node.js)\nDESCRIPTION: This snippet demonstrates how to configure per-request options using the `options` object when making an HTTP request with `follow-redirects`. It shows how to set the `maxRedirects` option and the `beforeRedirect` callback function to modify the request options upon redirecting. It requires the `follow-redirects` and `url` packages.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/node_modules/follow-redirects/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = require('url');\nconst { http, https } = require('follow-redirects');\n\nconst options = url.parse('http://bit.ly/900913');\noptions.maxRedirects = 10;\noptions.beforeRedirect = (options, { headers }) => {\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  if (options.hostname === \"example.com\") {\n    options.auth = \"user:password\";\n  }\n};\nhttp.request(options);\n```\n\n----------------------------------------\n\nTITLE: Parallel Jobs with Input Array in AsyncKit\nDESCRIPTION: This example demonstrates running asynchronous jobs in parallel using an input array. It initializes an array, defines an asynchronous job function (`asyncJob`), and uses `asynckit.parallel` to execute the jobs concurrently, collecting the results. An abort function is used to terminate leftover jobs upon error.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/asynckit/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar parallel = require('asynckit').parallel\n  , assert   = require('assert')\n  ;\n\nvar source         = [ 1, 1, 4, 16, 64, 32, 8, 2 ]\n  , expectedResult = [ 2, 2, 8, 32, 128, 64, 16, 4 ]\n  , expectedTarget = [ 1, 1, 2, 4, 8, 16, 32, 64 ]\n  , target         = []\n  ;\n\nparallel(source, asyncJob, function(err, result)\n{\n  assert.deepEqual(result, expectedResult);\n  assert.deepEqual(target, expectedTarget);\n});\n\n// async job accepts one element from the array\n// and a callback function\nfunction asyncJob(item, cb)\n{\n  // different delays (in ms) per item\n  var delay = item * 25;\n\n  // pretend different jobs take different time to finish\n  // and not in consequential order\n  var timeoutId = setTimeout(function() {\n    target.push(item);\n    cb(null, item * 2);\n  }, delay);\n\n  // allow to cancel \"leftover\" jobs upon error\n  // return function, invoking of which will abort this job\n  return clearTimeout.bind(null, timeoutId);\n}\n```\n\n----------------------------------------\n\nTITLE: Axios Agent Configuration\nDESCRIPTION: This snippet demonstrates how to configure custom HTTP and HTTPS agents in Axios using the `httpAgent` and `httpsAgent` options. This allows for fine-grained control over connection pooling and other agent-related settings.  Requires the 'http' and 'https' modules.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/UPGRADE_GUIDE.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // Define a custom agent for HTTP\n  httpAgent: new http.Agent({ keepAlive: true }),\n  // Define a custom agent for HTTPS\n  httpsAgent: new https.Agent({ keepAlive: true })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Options for Redirect Following (Node.js)\nDESCRIPTION: This snippet illustrates how to set global options for the `follow-redirects` module, such as `maxRedirects` (maximum number of redirects allowed) and `maxBodyLength` (maximum request body size).  Changes to these options will affect all subsequent requests made using the module. It requires the `follow-redirects` package.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/node_modules/follow-redirects/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst followRedirects = require('follow-redirects');\nfollowRedirects.maxRedirects = 10;\nfollowRedirects.maxBodyLength = 20 * 1024 * 1024; // 20 MB\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Axios Instance Defaults\nDESCRIPTION: This code shows how to create a custom Axios instance with specific default configurations, such as a baseURL.  It also demonstrates how to alter the defaults of an instance after it has been created, specifically for common headers (Authorization).  This allows for creating multiple Axios instances with different configurations tailored to specific use cases.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Set config defaults when creating the instance\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n----------------------------------------\n\nTITLE: Serial Jobs with Input Object in AsyncKit\nDESCRIPTION: This example demonstrates running asynchronous jobs serially (sequentially) using an input object. It defines an object with named properties, defines an asynchronous job function (`asyncJob`), and uses `asynckit`.serial to execute the jobs one after another, collecting the results. The `asyncJob` function receives the item and callback as parameters.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/asynckit/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar serial = require('asynckit').serial\n  , assert = require('assert')\n  ;\n\nvar source         = [ 1, 1, 4, 16, 64, 32, 8, 2 ]\n  , expectedResult = [ 2, 2, 8, 32, 128, 64, 16, 4 ]\n  , expectedTarget = [ 0, 1, 2, 3, 4, 5, 6, 7 ]\n  , target         = []\n  ;\n\nvar source         = { first: 1, one: 1, four: 4, sixteen: 16, sixtyFour: 64, thirtyTwo: 32, eight: 8, two: 2 }\n  , expectedResult = { first: 2, one: 2, four: 8, sixteen: 32, sixtyFour: 128, thirtyTwo: 64, eight: 16, two: 4 }\n  , expectedTarget = [ 1, 1, 4, 16, 64, 32, 8, 2 ]\n  , target         = []\n  ;\n\n\nserial(source, asyncJob, function(err, result)\n{\n  assert.deepEqual(result, expectedResult);\n  assert.deepEqual(target, expectedTarget);\n});\n\n// shortcut interface (item, callback)\n// works for object as well as for the arrays\nfunction asyncJob(item, cb)\n{\n  target.push(item);\n\n  // it will be automatically made async\n  // even it iterator \"returns\" in the same event loop\n  cb(null, item * 2);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Form with HTTP Response Stream\nDESCRIPTION: This example shows how to create a form using an HTTP response stream.  It appends a string, a buffer and a logo fetched from a URL to the form.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar FormData = require('form-data');\nvar http = require('http');\n\nvar form = new FormData();\n\nhttp.request('http://nodejs.org/images/logo.png', function(response) {\n  form.append('my_field', 'my value');\n  form.append('my_buffer', new Buffer(10));\n  form.append('my_logo', response);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Buffer from Form Data\nDESCRIPTION: This snippet shows how to obtain the full form data request package as a Buffer using the `getBuffer()` method, which can be used with libraries such as Axios to send multipart data.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar form = new FormData();\nform.append( 'my_buffer', Buffer.from([0x4a,0x42,0x20,0x52,0x6f,0x63,0x6b,0x73]) );\nform.append( 'my_file', fs.readFileSync('/foo/bar.jpg') );\n\naxios.post( 'https://example.com/path/to/api',\n            form.getBuffer(),\n            form.getHeaders()\n          )\n```\n\n----------------------------------------\n\nTITLE: Looking up default charset\nDESCRIPTION: This JavaScript code demonstrates how to use the `mime.charset()` function to lookup the implied default charset of a content-type. The function returns the default charset or `false` if not found.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/mime-types/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nmime.charset('text/markdown') // 'UTF-8'\n```\n\n----------------------------------------\n\nTITLE: Submitting Form to a Web Application\nDESCRIPTION: This example demonstrates how to submit a form to a web application using the submit() method. It also shows how to handle the response.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nform.submit('http://example.org/', function(err, res) {\n  // res – response object (http.IncomingMessage)  //\n  res.resume();\n});\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP GET Request with Redirect Following (Node.js)\nDESCRIPTION: This snippet demonstrates a basic HTTP GET request using the `follow-redirects` module. It automatically follows any redirects and logs the received data to the console. It requires the `follow-redirects` package.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/node_modules/follow-redirects/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { http, https } = require('follow-redirects');\n\nhttp.get('http://bit.ly/900913', response => {\n  response.on('data', chunk => {\n    console.log(chunk);\n  });\n}).on('error', err => {\n  console.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Wrapping Custom HTTP/HTTPS Implementations (Node.js)\nDESCRIPTION: This code snippet demonstrates how to wrap custom HTTP and HTTPS implementations with `follow-redirects` to enable redirect following with specialized protocol handling. It requires custom implementations of `http` and `https` with a `request` method.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/node_modules/follow-redirects/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { http, https } = require('follow-redirects').wrap({\n  http: require('your-custom-http'),\n  https: require('your-custom-https'),\n});\n```\n\n----------------------------------------\n\nTITLE: Removing an Axios Interceptor (JavaScript)\nDESCRIPTION: Demonstrates how to remove an interceptor from the Axios interceptor chain using `eject`.  The interceptor is identified by its ID, which is returned when the interceptor is added using `use`.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\n----------------------------------------\n\nTITLE: HTTPS Request and Response URL Inspection (Node.js)\nDESCRIPTION: This snippet shows how to make an HTTPS request using `follow-redirects` and inspect the final redirected URL using the `responseUrl` property of the response object. It requires the `follow-redirects` package.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/node_modules/follow-redirects/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst request = https.request({\n  host: 'bitly.com',\n  path: '/UHfDGO',\n}, response => {\n  console.log(response.responseUrl);\n  // 'http://duckduckgo.com/robots.txt'\n});\nrequest.end();\n```\n\n----------------------------------------\n\nTITLE: Submitting a Form\nDESCRIPTION: This example shows how to submit form data to a web application using the submit() method of the FormData object. It appends a string to the form and then submits it to the specified URL.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar form = new FormData();\nform.append( 'my_string', 'Hello World' );\n\nform.submit( 'http://example.com/', function(err, res) {\n  // res – response object (http.IncomingMessage)  //\n  res.resume();\n} );\n```\n\n----------------------------------------\n\nTITLE: Custom Options with Form Data\nDESCRIPTION: This code snippet shows how to provide custom options to the FormData constructor, such as setting the `maxDataSize` property. This allows you to configure the maximum allowed data size for the form.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/form-data/Readme.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar FormData = require('form-data');\n\nvar form = new FormData({ maxDataSize: 20971520 });\nform.append('my_field', 'my value');\nform.append('my_buffer', /* something big */);\n```\n\n----------------------------------------\n\nTITLE: Including Axios via unpkg CDN\nDESCRIPTION: This script tag includes the Axios library from the unpkg Content Delivery Network (CDN). This allows you to use Axios in your HTML without needing to install it locally.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Importing mime-types in JavaScript\nDESCRIPTION: This JavaScript code imports the mime-types module, allowing you to use its functions for content-type manipulation. The `require` function is used to load the module into the `mime` variable.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/mime-types/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar mime = require('mime-types')\n```\n\n----------------------------------------\n\nTITLE: ES6 Promise Polyfill\nDESCRIPTION: This snippet shows how to polyfill the ES6 Promise in older environments that do not natively support it, using the 'es6-promise' library.  This is needed if using Axios version 0.6.0 or later in an environment that doesn't have native Promise support.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/UPGRADE_GUIDE.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('es6-promise').polyfill();\nvar axios = require('axios');\n```\n\n----------------------------------------\n\nTITLE: Accessing mime-db Data in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to import the `mime-db` module using `require()` and access data for a specific MIME type.  It retrieves the database and then accesses data associated with the 'application/javascript' MIME type.  The `data` variable will then contain an object with properties like `extensions` and `compressible` if they exist for 'application/javascript'.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/mime-db/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar db = require('mime-db')\n\n// grab data on .js files\nvar data = db['application/javascript']\n```\n\n----------------------------------------\n\nTITLE: Using Axios Error toJSON Method (JavaScript)\nDESCRIPTION: Shows how to use the `toJSON` method of an Axios error object to get a more detailed representation of the error.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n  });\n```\n\n----------------------------------------\n\nTITLE: Installing Axios via bower\nDESCRIPTION: This command installs the Axios library using Bower, a package manager for the web. Axios is a promise-based HTTP client for making requests from Node.js or the browser.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ bower install axios\n```\n\n----------------------------------------\n\nTITLE: Including Axios via jsDelivr CDN\nDESCRIPTION: This script tag includes the Axios library from the jsDelivr Content Delivery Network (CDN). This allows you to use Axios in your HTML without needing to install it locally.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/README.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Custom Axios Request Adapter (Previous)\nDESCRIPTION: This snippet shows a previous version of a custom request adapter in Axios, which includes invoking `transformData` on response data, and receiving `resolve` and `reject` as arguments. This is for compatibility with Axios versions prior to 0.13.0.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/axios/UPGRADE_GUIDE.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myAdapter(resolve, reject, config) {\n  var response = {\n    data: transformData(\n      responseData,\n      responseHeaders,\n      config.transformResponse\n    ),\n    status: request.status,\n    statusText: request.statusText,\n    headers: responseHeaders\n  };\n  settle(resolve, reject, response);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing mime-types with npm\nDESCRIPTION: This command installs the mime-types package using npm, making it available for use in a Node.js project. It adds the mime-types package to the project's dependencies.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/mime-types/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install mime-types\n```\n\n----------------------------------------\n\nTITLE: Installing mime-db using npm\nDESCRIPTION: This command installs the mime-db package using the Node Package Manager (npm).  It downloads and installs the package and its dependencies into the project's `node_modules` directory, making it available for use in JavaScript code.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/mime-db/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install mime-db\n```\n\n----------------------------------------\n\nTITLE: Adding More Application MIME Types\nDESCRIPTION: This snippet showcases the addition of more MIME types, particularly focusing on application-specific formats. This includes types for electronic forms, media streaming APIs, and others.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/mime-db/HISTORY.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n- `application/cea`\n- `application/dit`\n- `application/vnd.gov.sk.e-form+zip`\n- `application/vnd.tmd.mediaflex.api+xml`\n```\n\n----------------------------------------\n\nTITLE: Manually Releasing Buffered Events (JavaScript)\nDESCRIPTION: This example demonstrates manually releasing buffered events using `delayedStream.resume()`. A delayed stream is created from the request, and after a timeout, `delayedStream.resume()` is called to emit all buffered events and resume the underlying source stream.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/delayed-stream/Readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar delayed = DelayedStream.create(req);\n\nsetTimeout(function() {\n  // Emit all buffered events and resume underlaying source\n  delayed.resume();\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Adding Data Interchange and Multipart MIME Types\nDESCRIPTION: This snippet demonstrates the addition of MIME types for various data interchange formats and a multipart type.  This includes JSON merge patches, atf application, and mixed-replace multipart messages.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/mime-db/HISTORY.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n- `application/atf`\n- `application/merge-patch+json`\n- `multipart/x-mixed-replace`\n```\n\n----------------------------------------\n\nTITLE: Installation using npm\nDESCRIPTION: This command installs the delayed-stream package using npm, making it available for use in Node.js projects.  It retrieves the package from the npm registry and adds it to the project's dependencies.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/delayed-stream/Readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install delayed-stream\n```\n\n----------------------------------------\n\nTITLE: Removing Example MIME Types\nDESCRIPTION: This snippet shows a list of MIME types that are being removed, typically because they are placeholder or example types that should not be used in production environments. These are generic 'example' types for various media formats.\nSOURCE: https://github.com/sumsubstance/apptokenusageexamples/blob/master/JS/node_modules/mime-db/HISTORY.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- `application/example`\n- `audio/example`\n- `image/example`\n- `message/example`\n- `model/example`\n- `multipart/example`\n- `text/example`\n- `video/example`\n```"
  }
]