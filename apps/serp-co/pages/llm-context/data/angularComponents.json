[
  {
    "owner": "angular",
    "repo": "components",
    "content": "TITLE: Creating a Simple Autocomplete Panel in Angular\nDESCRIPTION: Demonstrates how to create a basic autocomplete panel with options using mat-autocomplete and mat-option tags.\nSOURCE: https://github.com/angular/components/blob/main/src/material/autocomplete/autocomplete.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mat-autocomplete #auto=\"matAutocomplete\">\n  @for (option of options; track option) {\n    <mat-option [value]=\"option\">{{option}}</mat-option>\n  }\n</mat-autocomplete>\n```\n\n----------------------------------------\n\nTITLE: Defining Column Templates in Angular Material Table\nDESCRIPTION: Shows how to create column definitions with custom header and cell templates. Each column needs a unique name and templates for header and row cells.\nSOURCE: https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ng-container matColumnDef=\"score\">\n  <th mat-header-cell *matHeaderCellDef> Score </th>\n  <td mat-cell *matCellDef=\"let user\"> {{user.score}} </td>\n</ng-container>\n```\n\n----------------------------------------\n\nTITLE: Importing Angular Material Core Dependencies\nDESCRIPTION: List of imports required for Angular Material core functionality including forms, animations, a11y, and other core Angular features.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/core/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbstractControl } from '@angular/forms';\nimport { AfterViewChecked } from '@angular/core';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { FocusableOption } from '@angular/cdk/a11y';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport { FormGroupDirective } from '@angular/forms';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport { InjectionToken } from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { NgForm } from '@angular/forms';\nimport { NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { Provider } from '@angular/core';\nimport { QueryList } from '@angular/core';\nimport { Signal } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Version } from '@angular/core';\n```\n\n----------------------------------------\n\nTITLE: Basic Ripple Effect Implementation in Angular\nDESCRIPTION: Shows how to add a basic ripple effect to a container element using the matRipple directive with optional color customization.\nSOURCE: https://github.com/angular/components/blob/main/src/material/core/ripple/ripple.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div matRipple [matRippleColor]=\"myColor\">\n  <ng-content></ng-content>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sortable Table with Angular CDK Drag and Drop\nDESCRIPTION: Example of integrating CDK drag and drop functionality with Angular Material to create a sortable table.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/drag-drop/drag-drop.md#2025-04-21_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-drag-drop-table) -->\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Checkbox API in TypeScript\nDESCRIPTION: Complete API documentation for the Angular Material Checkbox module, including the main MatCheckbox component, supporting types, and configuration options. This API specification defines all public interfaces, classes, and tokens that developers can use when implementing checkbox functionality.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/checkbox/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbstractControl } from '@angular/forms';\nimport { AfterViewInit } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { FocusableOption } from '@angular/cdk/a11y';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport { InjectionToken } from '@angular/core';\nimport { OnChanges } from '@angular/core';\nimport { SimpleChanges } from '@angular/core';\nimport { ValidationErrors } from '@angular/forms';\nimport { Validator } from '@angular/forms';\n\n// @public\nexport const MAT_CHECKBOX_DEFAULT_OPTIONS: InjectionToken<MatCheckboxDefaultOptions>;\n\n// @public @deprecated\nexport function MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY(): MatCheckboxDefaultOptions;\n\n// @public (undocumented)\nexport class MatCheckbox implements AfterViewInit, OnChanges, ControlValueAccessor, Validator, FocusableOption {\n    constructor(...args: unknown[]);\n    protected _animationClasses: {\n        uncheckedToChecked: string;\n        uncheckedToIndeterminate: string;\n        checkedToUnchecked: string;\n        checkedToIndeterminate: string;\n        indeterminateToChecked: string;\n        indeterminateToUnchecked: string;\n    };\n    // (undocumented)\n    protected _animationsDisabled: boolean;\n    ariaControls: string;\n    ariaDescribedby: string;\n    ariaExpanded: boolean;\n    ariaLabel: string;\n    ariaLabelledby: string | null;\n    ariaOwns: string;\n    readonly change: EventEmitter<MatCheckboxChange>;\n    get checked(): boolean;\n    set checked(value: boolean);\n    color: string | undefined;\n    protected _createChangeEvent(isChecked: boolean): MatCheckboxChange;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    disabledInteractive: boolean;\n    disableRipple: boolean;\n    // (undocumented)\n    _elementRef: ElementRef<HTMLElement>;\n    focus(): void;\n    protected _getAnimationTargetElement(): HTMLInputElement;\n    // (undocumented)\n    protected _handleInputClick(): void;\n    id: string;\n    get indeterminate(): boolean;\n    set indeterminate(value: boolean);\n    readonly indeterminateChange: EventEmitter<boolean>;\n    _inputElement: ElementRef<HTMLInputElement>;\n    get inputId(): string;\n    // (undocumented)\n    _isRippleDisabled(): boolean;\n    _labelElement: ElementRef<HTMLInputElement>;\n    labelPosition: 'before' | 'after';\n    name: string | null;\n    // (undocumented)\n    static ngAcceptInputType_ariaExpanded: unknown;\n    // (undocumented)\n    static ngAcceptInputType_checked: unknown;\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    static ngAcceptInputType_disabledInteractive: unknown;\n    // (undocumented)\n    static ngAcceptInputType_disableRipple: unknown;\n    // (undocumented)\n    static ngAcceptInputType_indeterminate: unknown;\n    // (undocumented)\n    static ngAcceptInputType_required: unknown;\n    // (undocumented)\n    static ngAcceptInputType_tabIndex: unknown;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnChanges(changes: SimpleChanges): void;\n    // (undocumented)\n    _onBlur(): void;\n    // (undocumented)\n    _onInputClick(): void;\n    // (undocumented)\n    _onInteractionEvent(event: Event): void;\n    _onLabelTextChange(): void;\n    _onTouched: () => any;\n    // (undocumented)\n    _onTouchTargetClick(): void;\n    _preventBubblingFromLabel(event: MouseEvent): void;\n    // (undocumented)\n    registerOnChange(fn: (value: any) => void): void;\n    // (undocumented)\n    registerOnTouched(fn: any): void;\n    // (undocumented)\n    registerOnValidatorChange(fn: () => void): void;\n    required: boolean;\n    // (undocumented)\n    setDisabledState(isDisabled: boolean): void;\n    tabIndex: number;\n    toggle(): void;\n    // (undocumented)\n    validate(control: AbstractControl<boolean>): ValidationErrors | null;\n    value: string;\n    // (undocumented)\n    writeValue(value: any): void;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatCheckbox, \"mat-checkbox\", [\"matCheckbox\"], { \"ariaLabel\": { \"alias\": \"aria-label\"; \"required\": false; }; \"ariaLabelledby\": { \"alias\": \"aria-labelledby\"; \"required\": false; }; \"ariaDescribedby\": { \"alias\": \"aria-describedby\"; \"required\": false; }; \"ariaExpanded\": { \"alias\": \"aria-expanded\"; \"required\": false; }; \"ariaControls\": { \"alias\": \"aria-controls\"; \"required\": false; }; \"ariaOwns\": { \"alias\": \"aria-owns\"; \"required\": false; }; \"id\": { \"alias\": \"id\"; \"required\": false; }; \"required\": { \"alias\": \"required\"; \"required\": false; }; \"labelPosition\": { \"alias\": \"labelPosition\"; \"required\": false; }; \"name\": { \"alias\": \"name\"; \"required\": false; }; \"value\": { \"alias\": \"value\"; \"required\": false; }; \"disableRipple\": { \"alias\": \"disableRipple\"; \"required\": false; }; \"tabIndex\": { \"alias\": \"tabIndex\"; \"required\": false; }; \"color\": { \"alias\": \"color\"; \"required\": false; }; \"disabledInteractive\": { \"alias\": \"disabledInteractive\"; \"required\": false; }; \"checked\": { \"alias\": \"checked\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"indeterminate\": { \"alias\": \"indeterminate\"; \"required\": false; }; }, { \"change\": \"change\"; \"indeterminateChange\": \"indeterminateChange\"; }, never, [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatCheckbox, never>;\n}\n\n// @public\nexport class MatCheckboxChange {\n    checked: boolean;\n    source: MatCheckbox;\n}\n\n// @public\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n// @public\nexport interface MatCheckboxDefaultOptions {\n    clickAction?: MatCheckboxClickAction;\n    color?: ThemePalette;\n    disabledInteractive?: boolean;\n}\n\n// @public (undocumented)\nexport class MatCheckboxModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatCheckboxModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatCheckboxModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatCheckboxModule, never, [typeof MatCheckbox, typeof MatCommonModule], [typeof MatCheckbox, typeof MatCommonModule]>;\n}\n\n// @public\nexport enum TransitionCheckState {\n    Checked = 1,\n    Indeterminate = 3,\n    Init = 0,\n    Unchecked = 2\n}\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: High-Contrast Mode Support Example\nDESCRIPTION: This example demonstrates how to provide styles for Windows high-contrast mode using the `cdk-high-contrast` mixin. This enhances accessibility for low-vision users.\nSOURCE: https://github.com/angular/components/blob/main/CODING_STANDARDS.md#2025-04-21_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n@include cdk-high-contrast(active, off) {\n  .unicorn-motocycle {\n    border: 1px solid #fff !important;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Binding Data to Angular Material Table\nDESCRIPTION: Demonstrates how to set up a basic Material table with a data source array. The table renders rows for each object in the data array.\nSOURCE: https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table mat-table [dataSource]=\"myDataArray\">\n  ...\n</table>\n```\n\n----------------------------------------\n\nTITLE: DragDropRegistry Class Definition\nDESCRIPTION: Core service that maintains state of all drag-drop operations. Handles registration of drag items and drop containers, manages pointer events, and tracks drag state.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/drag-drop/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DragDropRegistry implements OnDestroy {\n    constructor(...args: unknown[]);\n    getDragDirectiveForNode(node: Node): CdkDrag | null;\n    isDragging(drag: DragRef): boolean;\n    ngOnDestroy(): void;\n    readonly pointerMove: Subject<TouchEvent | MouseEvent>;\n    readonly pointerUp: Subject<TouchEvent | MouseEvent>;\n    registerDirectiveNode(node: Node, dragRef: CdkDrag): void;\n    registerDragItem(drag: DragRef): void;\n    registerDropContainer(drop: DropListRef): void;\n    removeDirectiveNode(node: Node): void;\n    removeDragItem(drag: DragRef): void;\n    removeDropContainer(drop: DropListRef): void;\n    scrolled(shadowRoot?: DocumentOrShadowRoot | null): Observable<Event>;\n    startDragging(drag: DragRef, event: TouchEvent | MouseEvent): void;\n    stopDragging(drag: DragRef): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with Components Through Harnesses\nDESCRIPTION: This snippet demonstrates how to use a MatButtonHarness to interact with a button component, including checking its disabled state and clicking it, which automatically handles change detection and waiting for stability.\nSOURCE: https://github.com/angular/components/blob/main/guides/using-component-harnesses.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nit('should mark confirmed when ok button clicked', async () => {\n  const okButton = await loader.getHarness(MatButtonHarness.with({selector: '.confirm'});\n  expect(fixture.componentInstance.confirmed).toBe(false);\n  expect(await okButton.isDisabled()).toBe(false);\n  await okButton.click();\n  expect(fixture.componentInstance.confirmed).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Testing Utility Functions in TypeScript for Angular CDK\nDESCRIPTION: This code snippet defines a set of utility functions for testing in Angular CDK. It includes functions for creating and dispatching various types of events, manipulating DOM elements, and handling keyboard input. These functions are crucial for simulating user interactions in unit tests.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/testing/private/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function clearElement(element: HTMLInputElement | HTMLTextAreaElement): void;\n\n// @public\nexport function createFakeEvent(type: string, bubbles?: boolean, cancelable?: boolean, composed?: boolean): Event;\n\n// @public\nexport function createKeyboardEvent(type: string, keyCode?: number, key?: string, modifiers?: ModifierKeys, code?: string): KeyboardEvent;\n\n// @public\nexport function createMouseEvent(type: string, clientX?: number, clientY?: number, offsetX?: number, offsetY?: number, button?: number, modifiers?: ModifierKeys): MouseEvent;\n\n// @public\nexport function createPointerEvent(type: string, clientX?: number, clientY?: number, offsetX?: number, offsetY?: number, options?: PointerEventInit): PointerEvent;\n\n// @public\nexport function createTouchEvent(type: string, pageX?: number, pageY?: number, clientX?: number, clientY?: number): UIEvent;\n\n// @public\nexport function dedent(strings: TemplateStringsArray, ...values: any[]): string;\n\n// @public\nfunction dispatchEvent_2<T extends Event>(node: Node | Window, event: T): T;\nexport { dispatchEvent_2 as dispatchEvent }\n\n// @public\nexport function dispatchFakeEvent(node: Node | Window, type: string, bubbles?: boolean): Event;\n\n// @public\nexport function dispatchKeyboardEvent(node: Node, type: string, keyCode?: number, key?: string, modifiers?: ModifierKeys, code?: string): KeyboardEvent;\n\n// @public\nexport function dispatchMouseEvent(node: Node, type: string, clientX?: number, clientY?: number, offsetX?: number, offsetY?: number, button?: number, modifiers?: ModifierKeys): MouseEvent;\n\n// @public\nexport function dispatchPointerEvent(node: Node, type: string, clientX?: number, clientY?: number, offsetX?: number, offsetY?: number, options?: PointerEventInit): PointerEvent;\n\n// @public\nexport function dispatchTouchEvent(node: Node, type: string, pageX?: number, pageY?: number, clientX?: number, clientY?: number): UIEvent;\n\n// @public\nexport function isTextInput(element: Element): element is HTMLInputElement | HTMLTextAreaElement;\n\n// @public\nexport function patchElementFocus(element: HTMLElement): void;\n\n// @public\nexport function triggerBlur(element: HTMLElement): void;\n\n// @public\nexport function triggerFocus(element: HTMLElement): void;\n\n// @public\nexport function typeInElement(element: HTMLElement, ...keys: (string | {\n    keyCode?: number;\n    key?: string;\n})[]): void;\n\n// @public\nexport function typeInElement(element: HTMLElement, modifiers: ModifierKeys, ...keys: (string | {\n    keyCode?: number;\n    key?: string;\n})[]): void;\n\n// @public\nexport function wrappedErrorMessage(e: Error): RegExp;\n```\n\n----------------------------------------\n\nTITLE: Defining TestbedHarnessEnvironment Class in TypeScript for Angular CDK Testing\nDESCRIPTION: This class extends HarnessEnvironment and provides methods for creating test environments, elements, and loaders for Angular component testing. It includes utility methods for stabilization and native element retrieval.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/testing/testbed/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TestbedHarnessEnvironment extends HarnessEnvironment<Element> {\n    protected constructor(rawRootElement: Element, _fixture: ComponentFixture<unknown>, options?: TestbedHarnessEnvironmentOptions);\n    protected createEnvironment(element: Element): HarnessEnvironment<Element>;\n    protected createTestElement(element: Element): TestElement;\n    static documentRootLoader(fixture: ComponentFixture<unknown>, options?: TestbedHarnessEnvironmentOptions): HarnessLoader;\n    forceStabilize(): Promise<void>;\n    protected getAllRawElements(selector: string): Promise<Element[]>;\n    protected getDocumentRoot(): Element;\n    static getNativeElement(el: TestElement): Element;\n    static harnessForFixture<T extends ComponentHarness>(fixture: ComponentFixture<unknown>, harnessType: ComponentHarnessConstructor<T>, options?: TestbedHarnessEnvironmentOptions): Promise<T>;\n    static loader(fixture: ComponentFixture<unknown>, options?: TestbedHarnessEnvironmentOptions): HarnessLoader;\n    waitForTasksOutsideAngular(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Accessibility Labels for Angular Material Checkbox\nDESCRIPTION: Example demonstrating how to properly bind accessibility labels to a Material checkbox using aria-label. Shows the correct way to bind dynamic accessibility labels without using attr prefix.\nSOURCE: https://github.com/angular/components/blob/main/src/material/checkbox/checkbox.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<mat-checkbox [aria-label]=\"isSubscribedToEmailsMessage\">\n</mat-checkbox>\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Chip List\nDESCRIPTION: Example of creating a static chip list with proper accessibility roles.\nSOURCE: https://github.com/angular/components/blob/main/src/material/chips/chips.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<mat-chip-set role=\"list\">\n  <mat-chip role=\"listitem\"> Sugar </mat-chip>\n  <mat-chip role=\"listitem\"> Spice </mat-chip>\n  <mat-chip role=\"listitem\"> Everything Nice </mat-chip>\n</mat-chip-set>\n```\n\n----------------------------------------\n\nTITLE: Connecting Drop Lists Using Direct References or IDs in Angular CDK\nDESCRIPTION: Demonstrates two ways to connect drop lists: either by using direct references through template variables or by using string IDs. Both approaches enable items to be transferred between the connected lists.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/drag-drop/drag-drop.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- This is valid -->\n<div cdkDropList #listOne=\"cdkDropList\" [cdkDropListConnectedTo]=\"[listTwo]\"></div>\n<div cdkDropList #listTwo=\"cdkDropList\" [cdkDropListConnectedTo]=\"[listOne]\"></div>\n\n<!-- This is valid as well -->\n<div cdkDropList id=\"list-one\" [cdkDropListConnectedTo]=\"['list-two']\"></div>\n<div cdkDropList id=\"list-two\" [cdkDropListConnectedTo]=\"['list-one']\"></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing disabled property in Angular Custom Form Control\nDESCRIPTION: Implementation of the disabled property getter and setter that handles the form control's disabled state and propagates changes to child form parts.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-form-field-control.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Input()\nget disabled(): boolean { return this._disabled; }\nset disabled(value: BooleanInput) {\n  this._disabled = coerceBooleanProperty(value);\n  this._disabled ? this.parts.disable() : this.parts.enable();\n  this.stateChanges.next();\n}\nprivate _disabled = false;\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Dialog Defaults in TypeScript\nDESCRIPTION: Demonstrates how to set global default options for all dialogs in an Angular application using MAT_DIALOG_DEFAULT_OPTIONS.\nSOURCE: https://github.com/angular/components/blob/main/src/material/dialog/dialog.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@NgModule({\n  providers: [\n    {provide: MAT_DIALOG_DEFAULT_OPTIONS, useValue: {hasBackdrop: false}}\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Inline Menu with cdkMenu directive in Angular CDK\nDESCRIPTION: Example of implementing an inline menu that lives directly on the page using the cdkMenu directive. This creates a persistent menu interaction where items are logically grouped and keyboard navigable.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/menu/menu.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"example-menu\" cdkMenu>\n  <button class=\"example-menu-item\" cdkMenuItem>Item 1</button>\n  <button class=\"example-menu-item\" cdkMenuItem>Item 2</button>\n  <button class=\"example-menu-item\" cdkMenuItem>Item 3</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Virtual Scrolling Implementation in Angular CDK\nDESCRIPTION: Basic usage of cdk-virtual-scroll-viewport with cdkVirtualFor directive, which replaces ngFor inside the viewport. Requires setting the itemSize property on the viewport.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/scrolling/scrolling.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-virtual-scroll-overview) -->\n```\n\n----------------------------------------\n\nTITLE: Testing Angular Component With Harness\nDESCRIPTION: Modern approach to testing the same issue report selector component using Angular Material component harnesses. This approach provides a more intuitive and maintainable way to interact with components in tests.\nSOURCE: https://github.com/angular/components/blob/main/guides/using-component-harnesses.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('issue-report-selector', () => {\n  let fixture: ComponentFixture<IssueReportSelector>;\n  let loader: HarnessLoader;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [IssueReportSelectorModule],\n      declarations: [IssueReportSelector],\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(IssueReportSelector);\n    fixture.detectChanges();\n    loader = TestbedHarnessEnvironment.loader(fixture);\n  });\n\n  it('should switch to bug report template', async () => {\n    expect(fixture.debugElement.query('bug-report-form')).toBeNull();\n    const select = await loader.getHarness(MatSelectHarness);\n    await select.open();\n    const bugOption = await select.getOption({text: 'Bug'});\n    await bugOption.click();\n    expect(fixture.debugElement.query('bug-report-form')).not.toBeNull();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Menu Base Classes and Interfaces Definition in TypeScript\nDESCRIPTION: Core type definitions for the menu system including CdkMenuTriggerBase, CdkTargetMenuAim and supporting interfaces. Defines the contract for menu interactions, positioning and focus management.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/menu/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CdkMenuTriggerBase {\n    protected isElementInsideMenuStack(element: Element): boolean;\n    isOpen(): boolean;\n    menuData: unknown;\n    menuPosition: ConnectedPosition[];\n    protected readonly menuScrollStrategy: () => ScrollStrategy;\n    protected readonly menuStack: MenuStack;\n    menuTemplateRef: TemplateRef<unknown> | null;\n    ngOnDestroy(): void;\n    readonly opened: EventEmitter<void>;\n    protected overlayRef: OverlayRef | null;\n    registerChildMenu(child: Menu): void;\n    protected readonly stopOutsideClicksListener: rxjs.Observable<void>;\n    protected readonly viewContainerRef: ViewContainerRef;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkMenuTriggerBase, never, never, {}, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkMenuTriggerBase, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Angular Material with ng add command\nDESCRIPTION: Command to add Angular Material to an Angular project using the Angular CLI. This will install Angular Material, Component Dev Kit (CDK), and Angular Animations.\nSOURCE: https://github.com/angular/components/blob/main/guides/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng add @angular/material\n```\n\n----------------------------------------\n\nTITLE: Installing Angular Material with Angular CLI\nDESCRIPTION: Command to install Angular Material, Component Dev Kit (CDK), and Angular Animations in your project. This will also run the installation schematic that sets up your project with Material Design.\nSOURCE: https://github.com/angular/components/blob/main/guides/schematics.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng add @angular/material\n```\n\n----------------------------------------\n\nTITLE: Adding Material Slide Toggle to HTML Template\nDESCRIPTION: HTML markup to add a Material Design slide toggle component to your application template. This creates a toggle button with the label 'Toggle me!'.\nSOURCE: https://github.com/angular/components/blob/main/guides/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<mat-slide-toggle>Toggle me!</mat-slide-toggle>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Angular Material Progress Bar API Definitions\nDESCRIPTION: Comprehensive TypeScript definitions for the Angular Material Progress Bar component, including the main component class, module declarations, interfaces for configuration options, and type definitions. Includes injection tokens, component class with properties and methods, and supporting interfaces.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/progress-bar/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterViewInit } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport { InjectionToken } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\n\nexport const MAT_PROGRESS_BAR_DEFAULT_OPTIONS: InjectionToken<MatProgressBarDefaultOptions>;\n\nexport const MAT_PROGRESS_BAR_LOCATION: InjectionToken<MatProgressBarLocation>;\n\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation;\n\nexport class MatProgressBar implements AfterViewInit, OnDestroy {\n    constructor(...args: unknown[]);\n    readonly animationEnd: EventEmitter<ProgressAnimationEnd>;\n    get bufferValue(): number;\n    set bufferValue(v: number);\n    get color(): string | null | undefined;\n    set color(value: string | null | undefined);\n    readonly _elementRef: ElementRef<HTMLElement>;\n    _getBufferBarFlexBasis(): string;\n    _getPrimaryBarTransform(): string;\n    _isIndeterminate(): boolean;\n    _isNoopAnimation: boolean;\n    get mode(): ProgressBarMode;\n    set mode(value: ProgressBarMode);\n    static ngAcceptInputType_bufferValue: unknown;\n    static ngAcceptInputType_value: unknown;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    get value(): number;\n    set value(v: number);\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatProgressBar, \"mat-progress-bar\", [\"matProgressBar\"], { \"color\": { \"alias\": \"color\"; \"required\": false; }; \"value\": { \"alias\": \"value\"; \"required\": false; }; \"bufferValue\": { \"alias\": \"bufferValue\"; \"required\": false; }; \"mode\": { \"alias\": \"mode\"; \"required\": false; }; }, { \"animationEnd\": \"animationEnd\"; }, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatProgressBar, never>;\n}\n\nexport interface MatProgressBarDefaultOptions {\n    color?: ThemePalette;\n    mode?: ProgressBarMode;\n}\n\nexport interface MatProgressBarLocation {\n    getPathname: () => string;\n}\n\nexport class MatProgressBarModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatProgressBarModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatProgressBarModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatProgressBarModule, never, [typeof MatProgressBar], [typeof MatProgressBar, typeof MatCommonModule]>;\n}\n\nexport interface ProgressAnimationEnd {\n    value: number;\n}\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate' | 'buffer' | 'query';\n```\n\n----------------------------------------\n\nTITLE: Loading Component Harnesses in TestbedHarnessEnvironment\nDESCRIPTION: Demonstrates how to load harnesses for different components using TestbedHarnessEnvironment in a unit test setup. It shows creating loaders, loading harnesses for bootstrapped components, and handling components outside the fixture's root element.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet fixture: ComponentFixture<MyDialogButton>;\nlet loader: HarnessLoader;\nlet rootLoader: HarnessLoader;\n\nbeforeEach(() => {\n  fixture = TestBed.createComponent(MyDialogButton);\n  loader = TestbedHarnessEnvironment.loader(fixture);\n  rootLoader = TestbedHarnessEnvironment.documentRootLoader(fixture);\n});\n\nit('loads harnesses', async () => {\n  // Load a harness for the bootstrapped component with `harnessForFixture`\n  dialogButtonHarness =\n      await TestbedHarnessEnvironment.harnessForFixture(fixture, MyDialogButtonHarness);\n\n  // The button element is inside the fixture's root element, so we use `loader`.\n  const buttonHarness = await loader.getHarness(MyButtonHarness);\n\n  // Click the button to open the dialog\n  await buttonHarness.click();\n\n  // The dialog is appended to `document.body`, outside of the fixture's root element,\n  // so we use `rootLoader` in this case.\n  const dialogHarness = await rootLoader.getHarness(MyDialogHarness);\n\n  // ... make some assertions\n});\n```\n\n----------------------------------------\n\nTITLE: Date Range Selection in Angular Material\nDESCRIPTION: Shows how to implement date range selection using mat-date-range-input and mat-date-range-picker components.\nSOURCE: https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<mat-date-range-input [rangePicker]=\"picker\">\n  <input matStartDate placeholder=\"Start date\">\n  <input matEndDate placeholder=\"End date\">\n</mat-date-range-input>\n\n<mat-date-range-picker #picker></mat-date-range-picker>\n```\n\n----------------------------------------\n\nTITLE: Implementing CdkPortal in HTML for Angular Components\nDESCRIPTION: Demonstrates how to use CdkPortal directive to capture template content in a portal. Two equivalent syntaxes are shown.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/portal/portal.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ng-template cdkPortal>\n  <p>The content of this template is captured by the portal.</p>\n</ng-template>\n\n<!-- OR -->\n\n<!-- This result here is identical to the syntax above -->\n<p *cdkPortal>\n  The content of this template is captured by the portal.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Providing Component as MatFormFieldControl\nDESCRIPTION: Implementation showing how to provide the custom component as a MatFormFieldControl to work with mat-form-field.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-form-field-control.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  ...\n  providers: [{provide: MatFormFieldControl, useExisting: MyTelInput}],\n})\nexport class MyTelInput implements MatFormFieldControl<MyTel> {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Datepicker Events in Angular\nDESCRIPTION: Illustrates how to handle dateInput and dateChange events for user interactions with the datepicker.\nSOURCE: https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<input [matDatepicker]=\"picker\" (dateInput)=\"addEvent('input', $event)\" (dateChange)=\"addEvent('change', $event)\">\n```\n\n----------------------------------------\n\nTITLE: Defining ComponentPortal and DomPortal Classes\nDESCRIPTION: This snippet defines the ComponentPortal and DomPortal classes, which are used to create portals for components and DOM elements respectively.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/portal/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n    constructor(component: ComponentType<T>, viewContainerRef?: ViewContainerRef | null, injector?: Injector | null, projectableNodes?: Node[][] | null);\n    component: ComponentType<T>;\n    injector?: Injector | null;\n    projectableNodes?: Node[][] | null;\n    viewContainerRef?: ViewContainerRef | null;\n}\n\nexport class DomPortal<T = HTMLElement> extends Portal<T> {\n    constructor(element: T | ElementRef<T>);\n    readonly element: T;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Label Floating Behavior in Angular\nDESCRIPTION: Configures the default floating label behavior for all mat-form-field components in an Angular application to 'always' using dependency injection.\nSOURCE: https://github.com/angular/components/blob/main/src/material/form-field/form-field.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@NgModule({\n  providers: [\n    {provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: {floatLabel: 'always'}}\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript API Definitions for Angular CDK Dialog\nDESCRIPTION: Complete TypeScript definitions for the Angular CDK Dialog module including interfaces, classes, and tokens. Defines core dialog functionality like containers, configurations, and services with full type information.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/dialog/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterContentInit } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport * as _angular_cdk_portal from '@angular/cdk/portal';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { ComponentRef } from '@angular/core';\nimport { DoCheck } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EmbeddedViewRef } from '@angular/core';\nimport { EnvironmentInjector } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { Location as Location_2 } from '@angular/common';\nimport { NgIterable } from '@angular/core';\nimport { NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\nimport { SimpleChanges } from '@angular/core';\nimport { StaticProvider } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Subscription } from 'rxjs';\nimport { TemplateRef } from '@angular/core';\nimport { TrackByFunction } from '@angular/core';\nimport { Type } from '@angular/core';\nimport { ViewContainerRef } from '@angular/core';\n\nexport type AutoFocusTarget = 'dialog' | 'first-tabbable' | 'first-heading';\n\nexport class CdkDialogContainer<C extends DialogConfig = DialogConfig> extends BasePortalOutlet implements OnDestroy {\n    constructor(...args: unknown[]);\n    _addAriaLabelledBy(id: string): void;\n    _ariaLabelledByQueue: string[];\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    attachDomPortal: (portal: DomPortal) => void;\n    attachTemplatePortal<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n    protected _captureInitialFocus(): void;\n    protected readonly _changeDetectorRef: ChangeDetectorRef;\n    _closeInteractionType: FocusOrigin | null;\n    readonly _config: C;\n    protected _contentAttached(): void;\n    protected _document: Document;\n    protected _elementRef: ElementRef<HTMLElement>;\n    protected _focusTrapFactory: FocusTrapFactory;\n    ngOnDestroy(): void;\n    protected _ngZone: NgZone;\n    _portalOutlet: CdkPortalOutlet;\n    _recaptureFocus(): void;\n    _removeAriaLabelledBy(id: string): void;\n    protected _trapFocus(options?: FocusOptions): void;\n    static ɵcmp: i0.ɵɵComponentDeclaration<CdkDialogContainer<any>, \"cdk-dialog-container\", never, {}, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkDialogContainer<any>, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Material Dialog API Declarations\nDESCRIPTION: Core TypeScript declarations for Angular Material Dialog module including imports, interfaces, classes and type definitions. Defines the complete public API surface of the dialog component including configuration options, services and directives.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/dialog/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CdkDialogContainer } from '@angular/cdk/dialog';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ComponentRef } from '@angular/core';\nimport { ComponentType } from '@angular/cdk/overlay';\nimport { Dialog } from '@angular/cdk/dialog';\nimport { DialogRef } from '@angular/cdk/dialog';\nimport { Direction } from '@angular/cdk/bidi';\nimport { EventEmitter } from '@angular/core';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/dialog';\nimport * as i1_2 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/overlay';\nimport * as i3 from '@angular/cdk/portal';\nimport * as i5 from '@angular/cdk/scrolling';\nimport { InjectionToken } from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\nimport { SimpleChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { TemplateRef } from '@angular/core';\nimport { ViewContainerRef } from '@angular/core';\n\n// @public\nexport type AutoFocusTarget = 'dialog' | 'first-tabbable' | 'first-heading';\n\n// @public\nexport function _closeDialogVia<R>(ref: MatDialogRef<R>, interactionType: FocusOrigin, result?: R): void;\n\n// @public @deprecated\nexport const _defaultParams: {\n    params: {\n        enterAnimationDuration: string;\n        exitAnimationDuration: string;\n    };\n};\n\n// @public\nexport interface DialogPosition {\n    bottom?: string;\n    left?: string;\n    right?: string;\n    top?: string;\n}\n\n// @public\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n// @public\nexport const MAT_DIALOG_DATA: InjectionToken<any>;\n\n// @public\nexport const MAT_DIALOG_DEFAULT_OPTIONS: InjectionToken<MatDialogConfig<any>>;\n\n// @public\nexport const MAT_DIALOG_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n\n// @public\nexport class MatDialog implements OnDestroy {\n    constructor(...args: unknown[]);\n    readonly afterAllClosed: Observable<void>;\n    get afterOpened(): Subject<MatDialogRef<any>>;\n    closeAll(): void;\n    // (undocumented)\n    protected _dialog: Dialog;\n    // (undocumented)\n    protected dialogConfigClass: typeof MatDialogConfig;\n    getDialogById(id: string): MatDialogRef<any> | undefined;\n    // (undocumented)\n    ngOnDestroy(): void;\n    open<T, D = any, R = any>(component: ComponentType<T>, config?: MatDialogConfig<D>): MatDialogRef<T, R>;\n    open<T, D = any, R = any>(template: TemplateRef<T>, config?: MatDialogConfig<D>): MatDialogRef<T, R>;\n    // (undocumented)\n    open<T, D = any, R = any>(template: ComponentType<T> | TemplateRef<T>, config?: MatDialogConfig<D>): MatDialogRef<T, R>;\n    get openDialogs(): MatDialogRef<any>[];\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDialog, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<MatDialog>;\n}\n\n// @public\nexport class MatDialogActions extends MatDialogLayoutSection {\n    align?: 'start' | 'center' | 'end';\n    // (undocumented)\n    protected _onAdd(): void;\n    // (undocumented)\n    protected _onRemove(): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatDialogActions, \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", never, { \"align\": { \"alias\": \"align\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDialogActions, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Application in Application\nDESCRIPTION: Example of applying the custom theme along with Material theme configurations.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_26\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n@use './path/to/carousel-theme' as carousel;\n\n$my-primary: mat.m2-define-palette(mat.$m2-indigo-palette, 500);\n$my-accent: mat.m2-define-palette(mat.$m2-pink-palette, A200, A100, A400);\n\n$my-theme: mat.m2-define-light-theme((\n  color: (\n    primary: $my-primary,\n    accent: $my-accent,\n  ),\n  typography: mat.m2-define-typography-config(\n    $font-family: serif,\n  ),\n));\n\n@include mat.all-component-themes($my-theme);\n@include carousel.theme($my-theme);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Phone Input Component in TypeScript\nDESCRIPTION: Initial implementation of a phone number input component that splits the number into area code, exchange, and subscriber parts using FormGroup and FormBuilder.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-form-field-control.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyTel {\n  constructor(public area: string, public exchange: string, public subscriber: string) {}\n}\n\n@Component({\n  selector: 'example-tel-input',\n  template: `\n    <div role=\"group\" [formGroup]=\"parts\">\n      <input class=\"area\" formControlName=\"area\" maxlength=\"3\">\n      <span>&ndash;</span>\n      <input class=\"exchange\" formControlName=\"exchange\" maxlength=\"3\">\n      <span>&ndash;</span>\n      <input class=\"subscriber\" formControlName=\"subscriber\" maxlength=\"4\">\n    </div>\n  `,\n  styles: [`\n    div {\n      display: flex;\n    }\n    input {\n      border: none;\n      background: none;\n      padding: 0;\n      outline: none;\n      font: inherit;\n      text-align: center;\n      color: currentColor;\n    }\n  `],\n})\nexport class MyTelInput {\n  parts: FormGroup;\n\n  @Input()\n  get value(): MyTel | null {\n    let n = this.parts.value;\n    if (n.area.length == 3 && n.exchange.length == 3 && n.subscriber.length == 4) {\n      return new MyTel(n.area, n.exchange, n.subscriber);\n    }\n    return null;\n  }\n  set value(tel: MyTel | null) {\n    tel = tel || new MyTel('', '', '');\n    this.parts.setValue({area: tel.area, exchange: tel.exchange, subscriber: tel.subscriber});\n  }\n\n  constructor(fb: FormBuilder) {\n    this.parts =  fb.group({\n      'area': '',\n      'exchange': '',\n      'subscriber': '',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Item Sorting with Predicate in Angular CDK\nDESCRIPTION: Demonstrates the use of cdkDropListSortPredicate to control whether an item can be sorted into a particular index within a cdkDropList.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/drag-drop/drag-drop.md#2025-04-21_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-drag-drop-sort-predicate) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing FocusTrap with cdkTrapFocus Directive in HTML\nDESCRIPTION: This snippet demonstrates how to use the cdkTrapFocus directive to trap focus within a div element. When applied, Tab and Shift + Tab key presses will not allow focus to leave the element, which is useful for creating accessible modal dialogs.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/focus-trap/focus-trap.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"my-inner-dialog-content\" cdkTrapFocus>\n  <!-- Tab and Shift + Tab will not leave this element. -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Checking Element Disability in TypeScript\nDESCRIPTION: Method to determine if a given HTML element is disabled. This is part of the InteractivityChecker class used for accessibility checks in Angular components.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/interactivity-checker/interactivity-checker.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nisDisabled(element: HTMLElement): boolean\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Color Map with Explicit Theme Type\nDESCRIPTION: Theme configuration that applies a violet primary color and orange tertiary color with the theme-type explicitly set to light mode, along with Roboto typography and standard density.\nSOURCE: https://github.com/angular/components/blob/main/guides/theming.md#2025-04-21_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\nhtml {\n  @include mat.theme((\n    color: (\n      primary: mat.$violet-palette,\n      tertiary: mat.$orange-palette,\n      theme-type: light,\n    ),\n    typography: Roboto,\n    density: 0\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Drag Movement within Boundary in Angular CDK\nDESCRIPTION: Demonstrates how to restrict the movement of a cdkDrag element within a specified boundary using the cdkDragBoundary attribute. The boundary is defined by a CSS selector.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/drag-drop/drag-drop.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-drag-drop-boundary) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Light and Dark Mode with Angular Material\nDESCRIPTION: This snippet demonstrates how to set up a theme that supports both light and dark modes using the 'color-scheme' property and Angular Material's theming system.\nSOURCE: https://github.com/angular/components/blob/main/guides/theming.md#2025-04-21_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\nhtml {\n  color-scheme: light dark;\n  @include mat.theme((\n    color: mat.$violet-palette,\n    typography: Roboto,\n    density: 0\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Coercion in Angular Components\nDESCRIPTION: A comprehensive example demonstrating how to use Angular CDK's coercion utilities to handle different input types. It shows coerceBooleanProperty for boolean inputs, coerceNumberProperty for numeric inputs with fallback values, and coerceElement for normalizing ElementRef or DOM node references.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/coercion/coercion.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Directive, ElementRef} from '@angular/core';\nimport {\n  coerceBooleanProperty,\n  BooleanInput,\n  NumberInput,\n  coerceNumberProperty,\n  coerceElement,\n} from '@angular/cdk/coercion';\n\n@Directive({\n  selector: 'my-button',\n  host: {\n    '[disabled]': 'disabled',\n    '(click)': 'greet()',\n  }\n})\nclass MyButton {\n  // Using `coerceBooleanProperty` allows for the disabled value of a button to be set as\n  // `<my-button disabled></my-button>` instead of `<my-button [disabled]=\"true\"></my-button>`.\n  // It also allows for a string to be passed like `<my-button disabled=\"true\"></my-button>`.\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: BooleanInput) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  // `coerceNumberProperty` turns any value coming in from the view into a number, allowing the\n  // consumer to use a shorthand string while storing the parsed number in memory. E.g. the consumer can write:\n  // `<my-button greetDelay=\"500\"></my-button>` instead of `<my-button [greetDelay]=\"500\"></my-button>`.\n  // The second parameter specifies a fallback value to be used if the value can't be\n  // parsed to a number.\n  @Input()\n  get greetDelay() { return this._greetDelay; }\n  set greetDelay(value: NumberInput) {\n    this._greetDelay = coerceNumberProperty(value, 0);\n  }\n  private _greetDelay = 0;\n\n  greet() {\n    setTimeout(() => alert('Hello!'), this.greetDelay);\n  }\n\n  // `coerceElement` allows you to accept either an `ElementRef`\n  // or a raw DOM node and to always return a DOM node.\n  getElement(elementOrRef: ElementRef<HTMLElement> | HTMLElement): HTMLElement {\n    return coerceElement(elementOrRef);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Angular CDK Overlay Dependencies\nDESCRIPTION: TypeScript imports defining the required dependencies for the Angular CDK Overlay module including core Angular components and RxJS observables.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterContentInit } from '@angular/core';\nimport { ComponentRef } from '@angular/core';\nimport { DoCheck } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EmbeddedViewRef } from '@angular/core';\nimport { EnvironmentInjector } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { Location as Location_2 } from '@angular/common';\nimport { NgIterable } from '@angular/core';\nimport { NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\nimport { SimpleChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Subscription } from 'rxjs';\nimport { TemplateRef } from '@angular/core';\nimport { TrackByFunction } from '@angular/core';\nimport { Type } from '@angular/core';\nimport { ViewContainerRef } from '@angular/core';\n```\n\n----------------------------------------\n\nTITLE: Opening a Dialog with MatDialog in TypeScript\nDESCRIPTION: Demonstrates how to open a dialog using the MatDialog service, specifying a component and configuration options. It also shows how to handle the dialog result using the afterClosed() Observable.\nSOURCE: https://github.com/angular/components/blob/main/src/material/dialog/dialog.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet dialogRef = dialog.open(UserProfileComponent, {\n  height: '400px',\n  width: '600px',\n});\n\ndialogRef.afterClosed().subscribe(result => {\n  console.log(`Dialog result: ${result}`); // Pizza!\n});\n\ndialogRef.close('Pizza!');\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Form Linear Stepper in Angular\nDESCRIPTION: Example showing how to implement a linear stepper using a single form with form array controls. Demonstrates proper button configuration to prevent premature form submission.\nSOURCE: https://github.com/angular/components/blob/main/src/material/stepper/stepper.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form [formGroup]=\"formGroup\">\n  <mat-stepper formArrayName=\"formArray\" linear>\n    <mat-step formGroupName=\"0\" [stepControl]=\"formArray.get([0])\">\n      ...\n      <div>\n        <button matButton matStepperNext type=\"button\">Next</button>\n      </div>\n    </mat-step>\n    <mat-step formGroupName=\"1\" [stepControl]=\"formArray.get([1])\">\n      ...\n      <div>\n        <button matButton matStepperPrevious type=\"button\">Back</button>\n        <button matButton matStepperNext type=\"button\">Next</button>\n      </div>\n    </mat-step>\n    ...\n  </mat-stepper>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Progress Spinner API Types and Components\nDESCRIPTION: Complete TypeScript definition for the Angular Material Progress Spinner component and its supporting types. Includes injection tokens, component class, module declaration, and configuration interfaces. The code defines the public API surface of the progress spinner component including its properties, methods, and configuration options.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/progress-spinner/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ElementRef } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport { InjectionToken } from '@angular/core';\n\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS: InjectionToken<MatProgressSpinnerDefaultOptions>;\n\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions;\n\nexport class MatProgressSpinner {\n    constructor(...args: unknown[]);\n    _circleRadius(): number;\n    _circleStrokeWidth(): number;\n    get color(): string | null | undefined;\n    set color(value: string | null | undefined);\n    _determinateCircle: ElementRef<HTMLElement>;\n    get diameter(): number;\n    set diameter(size: number);\n    readonly _elementRef: ElementRef<HTMLElement>;\n    mode: ProgressSpinnerMode;\n    static ngAcceptInputType_diameter: unknown;\n    static ngAcceptInputType_strokeWidth: unknown;\n    static ngAcceptInputType_value: unknown;\n    _noopAnimations: boolean;\n    _strokeCircumference(): number;\n    _strokeDashOffset(): number | null;\n    get strokeWidth(): number;\n    set strokeWidth(value: number);\n    get value(): number;\n    set value(v: number);\n    _viewBox(): string;\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatProgressSpinner, \"mat-progress-spinner, mat-spinner\", [\"matProgressSpinner\"], { \"color\": { \"alias\": \"color\"; \"required\": false; }; \"mode\": { \"alias\": \"mode\"; \"required\": false; }; \"value\": { \"alias\": \"value\"; \"required\": false; }; \"diameter\": { \"alias\": \"diameter\"; \"required\": false; }; \"strokeWidth\": { \"alias\": \"strokeWidth\"; \"required\": false; }; }, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatProgressSpinner, never>;\n}\n\nexport interface MatProgressSpinnerDefaultOptions {\n    color?: ThemePalette;\n    diameter?: number;\n    _forceAnimations?: boolean;\n    strokeWidth?: number;\n}\n\nexport class MatProgressSpinnerModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatProgressSpinnerModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatProgressSpinnerModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatProgressSpinnerModule, never, [typeof MatProgressSpinner, typeof MatProgressSpinner], [typeof MatProgressSpinner, typeof MatProgressSpinner, typeof MatCommonModule]>;\n}\n\nexport const MatSpinner: typeof MatProgressSpinner;\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n```\n\n----------------------------------------\n\nTITLE: Component Content Projection in Angular\nDESCRIPTION: Demonstrates the recommended approach of exposing native input elements through content projection rather than wrapping them, which allows direct access to native behaviors.\nSOURCE: https://github.com/angular/components/blob/main/CODING_STANDARDS.md#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!-- Do: Implementation -->\n<ng-content></ng-content>\n\n<!-- Do: Usage -->\n<your-component>\n  <input>\n</your-component>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- Don't: Implementation -->\n<input>\n\n<!-- Don't: Usage -->\n<component></component>\n```\n\n----------------------------------------\n\nTITLE: Implementing CDK Accordion with Accessibility in HTML\nDESCRIPTION: This snippet demonstrates how to implement a CDK accordion with proper accessibility attributes. It includes role assignments, aria-controls, aria-expanded, and aria-labelledby attributes to ensure the accordion is accessible to screen readers and other assistive technologies.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/accordion/accordion.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-accordion-overview) -->\n```\n\n----------------------------------------\n\nTITLE: MatTabGroup Component Definition\nDESCRIPTION: This code defines the `MatTabGroup` component, which is the main container for tabs.  It manages the selection of tabs, displays the ink bar, and handles animations.  It contains properties and methods for configuring the appearance and behavior of the tab group.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport class MatTabGroup implements AfterViewInit, AfterContentInit, AfterContentChecked, OnDestroy {\n    constructor(...args: unknown[]);\n    alignTabs: string | null;\n    _allTabs: QueryList<MatTab>;\n    readonly animationDone: EventEmitter<void>;\n    get animationDuration(): string;\n    set animationDuration(value: string | number);\n    // (undocumented)\n    _animationsDisabled: boolean;\n    ariaLabel: string;\n    ariaLabelledby: string;\n    // @deprecated\n    get backgroundColor(): ThemePalette;\n    set backgroundColor(value: ThemePalette);\n    protected _bodyCentered(isCenter: boolean): void;\n    color: ThemePalette;\n    get contentTabIndex(): number | null;\n    set contentTabIndex(value: number);\n    disablePagination: boolean;\n    disableRipple: boolean;\n    dynamicHeight: boolean;\"\n```\n\n----------------------------------------\n\nTITLE: Input Modality Detection Service\nDESCRIPTION: Service for detecting and tracking input modality (keyboard, mouse, touch). Provides observables for modality changes and current state.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/a11y/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class InputModalityDetector implements OnDestroy {\n    constructor(...args: unknown[]);\n    readonly modalityChanged: Observable<InputModality>;\n    readonly modalityDetected: Observable<InputModality>;\n    get mostRecentModality(): InputModality;\n    _mostRecentTarget: HTMLElement | null;\n    ngOnDestroy(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Using cdkDropListGroup to Connect Multiple Lists in Angular CDK\nDESCRIPTION: Shows how to use the cdkDropListGroup directive to automatically connect multiple drop lists. All cdkDropList elements inside the group will be connected, supporting dynamic list generation.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/drag-drop/drag-drop.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div cdkDropListGroup>\n  <!-- All lists in here will be connected. -->\n  @for (list of lists; track list) {\n    <div cdkDropList></div>\n  }\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Key Constants in TypeScript for Angular CDK\nDESCRIPTION: This code defines constants for all keyboard key codes used in Angular CDK. It includes letter keys (A-Z), number keys (0-9), function keys (F1-F12), navigation keys, and special characters. These constants enable developers to use semantic names instead of numeric codes when handling keyboard events.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/keycodes/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport const A = 65;\n\n// @public (undocumented)\nexport const ALT = 18;\n\n// @public (undocumented)\nexport const APOSTROPHE = 192;\n\n// @public (undocumented)\nexport const AT_SIGN = 64;\n\n// @public (undocumented)\nexport const B = 66;\n\n// @public (undocumented)\nexport const BACKSLASH = 220;\n\n// @public (undocumented)\nexport const BACKSPACE = 8;\n\n// @public (undocumented)\nexport const C = 67;\n\n// @public (undocumented)\nexport const CAPS_LOCK = 20;\n\n// @public (undocumented)\nexport const CLOSE_SQUARE_BRACKET = 221;\n\n// @public (undocumented)\nexport const COMMA = 188;\n\n// @public (undocumented)\nexport const CONTEXT_MENU = 93;\n\n// @public (undocumented)\nexport const CONTROL = 17;\n\n// @public (undocumented)\nexport const D = 68;\n\n// @public (undocumented)\nexport const DASH = 189;\n\n// @public (undocumented)\nexport const DELETE = 46;\n\n// @public (undocumented)\nexport const DOWN_ARROW = 40;\n\n// @public (undocumented)\nexport const E = 69;\n\n// @public (undocumented)\nexport const EIGHT = 56;\n\n// @public (undocumented)\nexport const END = 35;\n\n// @public (undocumented)\nexport const ENTER = 13;\n\n// @public (undocumented)\nexport const EQUALS = 187;\n\n// @public (undocumented)\nexport const ESCAPE = 27;\n\n// @public (undocumented)\nexport const F = 70;\n\n// @public (undocumented)\nexport const F1 = 112;\n\n// @public (undocumented)\nexport const F10 = 121;\n\n// @public (undocumented)\nexport const F11 = 122;\n\n// @public (undocumented)\nexport const F12 = 123;\n\n// @public (undocumented)\nexport const F2 = 113;\n\n// @public (undocumented)\nexport const F3 = 114;\n\n// @public (undocumented)\nexport const F4 = 115;\n\n// @public (undocumented)\nexport const F5 = 116;\n\n// @public (undocumented)\nexport const F6 = 117;\n\n// @public (undocumented)\nexport const F7 = 118;\n\n// @public (undocumented)\nexport const F8 = 119;\n\n// @public (undocumented)\nexport const F9 = 120;\n\n// @public (undocumented)\nexport const FF_EQUALS = 61;\n\n// @public (undocumented)\nexport const FF_MINUS = 173;\n\n// @public (undocumented)\nexport const FF_MUTE = 181;\n\n// @public (undocumented)\nexport const FF_SEMICOLON = 59;\n\n// @public (undocumented)\nexport const FF_VOLUME_DOWN = 182;\n\n// @public (undocumented)\nexport const FF_VOLUME_UP = 183;\n\n// @public (undocumented)\nexport const FIRST_MEDIA = 166;\n\n// @public (undocumented)\nexport const FIVE = 53;\n\n// @public (undocumented)\nexport const FOUR = 52;\n\n// @public (undocumented)\nexport const G = 71;\n\n// @public (undocumented)\nexport const H = 72;\n\n// @public (undocumented)\nexport const HOME = 36;\n\n// @public (undocumented)\nexport const I = 73;\n\n// @public (undocumented)\nexport const INSERT = 45;\n\n// @public (undocumented)\nexport const J = 74;\n\n// @public (undocumented)\nexport const K = 75;\n\n// @public (undocumented)\nexport const L = 76;\n\n// @public (undocumented)\nexport const LAST_MEDIA = 183;\n\n// @public (undocumented)\nexport const LEFT_ARROW = 37;\n\n// @public (undocumented)\nexport const M = 77;\n\n// @public (undocumented)\nexport const MAC_ENTER = 3;\n\n// @public (undocumented)\nexport const MAC_META = 224;\n\n// @public (undocumented)\nexport const MAC_WK_CMD_LEFT = 91;\n\n// @public (undocumented)\nexport const MAC_WK_CMD_RIGHT = 93;\n\n// @public (undocumented)\nexport const META = 91;\n\n// @public (undocumented)\nexport const MUTE = 173;\n\n// @public (undocumented)\nexport const N = 78;\n\n// @public (undocumented)\nexport const NINE = 57;\n\n// @public (undocumented)\nexport const NUM_CENTER = 12;\n\n// @public (undocumented)\nexport const NUM_LOCK = 144;\n\n// @public (undocumented)\nexport const NUMPAD_DIVIDE = 111;\n\n// @public (undocumented)\nexport const NUMPAD_EIGHT = 104;\n\n// @public (undocumented)\nexport const NUMPAD_FIVE = 101;\n\n// @public (undocumented)\nexport const NUMPAD_FOUR = 100;\n\n// @public (undocumented)\nexport const NUMPAD_MINUS = 109;\n\n// @public (undocumented)\nexport const NUMPAD_MULTIPLY = 106;\n\n// @public (undocumented)\nexport const NUMPAD_NINE = 105;\n\n// @public (undocumented)\nexport const NUMPAD_ONE = 97;\n\n// @public (undocumented)\nexport const NUMPAD_PERIOD = 110;\n\n// @public (undocumented)\nexport const NUMPAD_PLUS = 107;\n\n// @public (undocumented)\nexport const NUMPAD_SEVEN = 103;\n\n// @public (undocumented)\nexport const NUMPAD_SIX = 102;\n\n// @public (undocumented)\nexport const NUMPAD_THREE = 99;\n\n// @public (undocumented)\nexport const NUMPAD_TWO = 98;\n\n// @public (undocumented)\nexport const NUMPAD_ZERO = 96;\n\n// @public (undocumented)\nexport const O = 79;\n\n// @public (undocumented)\nexport const ONE = 49;\n\n// @public (undocumented)\nexport const OPEN_SQUARE_BRACKET = 219;\n\n// @public (undocumented)\nexport const P = 80;\n\n// @public (undocumented)\nexport const PAGE_DOWN = 34;\n\n// @public (undocumented)\nexport const PAGE_UP = 33;\n\n// @public (undocumented)\nexport const PAUSE = 19;\n\n// @public (undocumented)\nexport const PERIOD = 190;\n\n// @public (undocumented)\nexport const PLUS_SIGN = 43;\n\n// @public (undocumented)\nexport const PRINT_SCREEN = 44;\n\n// @public (undocumented)\nexport const Q = 81;\n\n// @public (undocumented)\nexport const QUESTION_MARK = 63;\n\n// @public (undocumented)\nexport const R = 82;\n\n// @public (undocumented)\nexport const RIGHT_ARROW = 39;\n\n// @public (undocumented)\nexport const S = 83;\n\n// @public (undocumented)\nexport const SCROLL_LOCK = 145;\n\n// @public (undocumented)\nexport const SEMICOLON = 186;\n\n// @public (undocumented)\nexport const SEVEN = 55;\n\n// @public (undocumented)\nexport const SHIFT = 16;\n\n// @public (undocumented)\nexport const SINGLE_QUOTE = 222;\n\n// @public (undocumented)\nexport const SIX = 54;\n\n// @public (undocumented)\nexport const SLASH = 191;\n\n// @public (undocumented)\nexport const SPACE = 32;\n\n// @public (undocumented)\nexport const T = 84;\n\n// @public (undocumented)\nexport const TAB = 9;\n\n// @public (undocumented)\nexport const THREE = 51;\n\n// @public (undocumented)\nexport const TILDE = 192;\n\n// @public (undocumented)\nexport const TWO = 50;\n\n// @public (undocumented)\nexport const U = 85;\n\n// @public (undocumented)\nexport const UP_ARROW = 38;\n\n// @public (undocumented)\nexport const V = 86;\n\n// @public (undocumented)\nexport const VOLUME_DOWN = 174;\n\n// @public (undocumented)\nexport const VOLUME_UP = 175;\n\n// @public (undocumented)\nexport const W = 87;\n\n// @public (undocumented)\nexport const X = 88;\n\n// @public (undocumented)\nexport const Y = 89;\n\n// @public (undocumented)\nexport const Z = 90;\n\n// @public (undocumented)\nexport const ZERO = 48;\n```\n\n----------------------------------------\n\nTITLE: Defining Rows in CdkTable\nDESCRIPTION: This snippet demonstrates how to define header, data, and footer rows in CdkTable using cdkHeaderRowDef, cdkRowDef, and cdkFooterRowDef directives.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/table/table.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<tr cdk-header-row *cdkHeaderRowDef=\"['username', 'age', 'title']\"></tr>\n<tr cdk-row *cdkRowDef=\"let row; columns: ['username', 'age', 'title']\"></tr>\n<tr cdk-footer-row *cdkFooterRowDef=\"['username', 'age', 'title']\"></tr>\n```\n\n----------------------------------------\n\nTITLE: Interactivity Checker Service\nDESCRIPTION: Service for checking element interactivity states including focus, tab, visibility and disabled states.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/a11y/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class InteractivityChecker {\n    constructor(...args: unknown[]);\n    isDisabled(element: HTMLElement): boolean;\n    isFocusable(element: HTMLElement, config?: IsFocusableConfig): boolean;\n    isTabbable(element: HTMLElement): boolean;\n    isVisible(element: HTMLElement): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Templates for Tree Nodes in HTML\nDESCRIPTION: Illustrates how to use multiple node templates with conditional rendering based on the 'when' predicate. This allows for different node representations based on data characteristics.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/tree/tree.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<cdk-tree-node *cdkNodeDef=\"let node\" cdkTreeNodePadding>\n  {{node.value}}\n</cdk-tree-node>\n<cdk-tree-node *cdkNodeDef=\"let node; when: isSpecial\" cdkTreeNodePadding>\n  [ A special node {{node.value}} ]\n</cdk-tree-node>\n```\n\n----------------------------------------\n\nTITLE: Attaching Data to Drag Items and Drop Lists in Angular CDK\nDESCRIPTION: Demonstrates how to associate custom data with both cdkDrag and cdkDropList elements using the cdkDragData and cdkDropListData properties, enabling data tracking during drag-and-drop operations.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/drag-drop/drag-drop.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n@for (list of lists; track list) {\n  <div cdkDropList [cdkDropListData]=\"list\" (cdkDropListDropped)=\"drop($event)\">\n    @for (item of list; track item) {\n      <div cdkDrag [cdkDragData]=\"item\"></div>\n    }\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Datepicker to Input in Angular\nDESCRIPTION: Demonstrates how to connect a datepicker to an input field using the matDatepicker property and add a toggle button.\nSOURCE: https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mat-form-field>\n  <input matInput [matDatepicker]=\"picker\" placeholder=\"Choose a date\">\n  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n  <mat-datepicker #picker></mat-datepicker>\n</mat-form-field>\n```\n\n----------------------------------------\n\nTITLE: Positioning Tooltip in Angular\nDESCRIPTION: This example shows how to position the tooltip using the matTooltipPosition input in Angular Material.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tooltip/tooltip.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(tooltip-position) -->\n```\n\n----------------------------------------\n\nTITLE: Angular CDK Menu Core Type Imports\nDESCRIPTION: Import statements for core Angular dependencies and utility types needed for the menu implementation.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/menu/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterContentInit } from '@angular/core';\nimport { ComponentRef } from '@angular/core';\nimport { DoCheck } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EmbeddedViewRef } from '@angular/core';\nimport { EnvironmentInjector } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { Location as Location_2 } from '@angular/common';\nimport { NgIterable } from '@angular/core';\nimport { NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { Optional } from '@angular/core';\nimport { QueryList } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\nimport * as rxjs from 'rxjs';\nimport { Signal } from '@angular/core';\nimport { SimpleChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Subscription } from 'rxjs';\nimport { TemplateRef } from '@angular/core';\nimport { TrackByFunction } from '@angular/core';\nimport { Type } from '@angular/core';\nimport { ViewContainerRef } from '@angular/core';\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu Item Checkbox in Angular CDK Menu\nDESCRIPTION: Example of implementing a checkbox menu item using cdkMenuItemCheckbox. The state is managed through cdkMenuItemChecked input binding and cdkMenuItemTriggered output.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/menu/menu.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<button\n  class=\"example-menu-item\"\n  cdkMenuItemCheckbox\n  [cdkMenuItemChecked]=\"bold\"\n  (cdkMenuItemTriggered)=\"bold = !bold\">\n  Bold\n  <span class=\"example-menu-item-check\"></span>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Clipboard Module and Components in TypeScript\nDESCRIPTION: TypeScript definitions for the Angular CDK Clipboard module, including the CdkCopyToClipboard directive, Clipboard service, and related interfaces. Includes configuration tokens, event emitters, and core clipboard functionality.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/clipboard/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\n\n// @public\nexport const CDK_COPY_TO_CLIPBOARD_CONFIG: InjectionToken<CdkCopyToClipboardConfig>;\n\n// @public\nexport class CdkCopyToClipboard implements OnDestroy {\n    constructor(...args: unknown[]);\n    attempts: number;\n    readonly copied: EventEmitter<boolean>;\n    copy(attempts?: number): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    text: string;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkCopyToClipboard, \"[cdkCopyToClipboard]\", never, { \"text\": { \"alias\": \"cdkCopyToClipboard\"; \"required\": false; }; \"attempts\": { \"alias\": \"cdkCopyToClipboardAttempts\"; \"required\": false; }; }, { \"copied\": \"cdkCopyToClipboardCopied\"; }, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkCopyToClipboard, never>;\n}\n\n// @public\nexport interface CdkCopyToClipboardConfig {\n    attempts?: number;\n}\n\n// @public\nclass Clipboard_2 {\n    constructor(...args: unknown[]);\n    beginCopy(text: string): PendingCopy;\n    copy(text: string): boolean;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<Clipboard_2, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<Clipboard_2>;\n}\nexport { Clipboard_2 as Clipboard }\n\n// @public (undocumented)\nexport class ClipboardModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<ClipboardModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<ClipboardModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<ClipboardModule, never, [typeof CdkCopyToClipboard], [typeof CdkCopyToClipboard]>;\n}\n\n// @public\nexport class PendingCopy {\n    constructor(text: string, _document: Document);\n    copy(): boolean;\n    destroy(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Input Property Type Coercion in Angular\nDESCRIPTION: Shows how to properly set up type coercion for Angular component inputs, ensuring that boolean properties are correctly converted from HTML attribute values.\nSOURCE: https://github.com/angular/components/blob/main/CODING_STANDARDS.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Input, booleanAttribute} from '@angular/core';\n\n@Input({transform: booleanAttribute}) disabled: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Implementing Column Sorting in Angular Material Table\nDESCRIPTION: Example of adding sortable column headers using matSort directive and mat-sort-header. Shows basic column definition with sorting capability for a 'position' column.\nSOURCE: https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ng-container matColumnDef=\"position\">\n  <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\n  <td mat-cell *matCellDef=\"let element\"> {{element.position}} </td>\n</ng-container>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Platform API Declarations\nDESCRIPTION: TypeScript declarations for the @angular/cdk_platform package including platform detection utilities, DOM helpers, and event handling functions. Contains a Platform class for browser detection and various utility functions for handling events, DOM operations, and RTL support.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/platform/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as i0 from '@angular/core';\n\n// @public\nexport function _getEventTarget<T extends EventTarget>(event: Event): T | null;\n\n// @public\nexport function _getFocusedElementPierceShadowDom(): HTMLElement | null;\n\n// @public\nexport function getRtlScrollAxisType(): RtlScrollAxisType;\n\n// @public\nexport function _getShadowRoot(element: HTMLElement): ShadowRoot | null;\n\n// @public (undocumented)\nexport function getSupportedInputTypes(): Set<string>;\n\n// @public\nexport function _isTestEnvironment(): boolean;\n\n// @public\nexport function normalizePassiveListenerOptions(options: AddEventListenerOptions): AddEventListenerOptions | boolean;\n\n// @public\nexport class Platform {\n    constructor(..._args: unknown[]);\n    ANDROID: boolean;\n    BLINK: boolean;\n    EDGE: boolean;\n    FIREFOX: boolean;\n    IOS: boolean;\n    isBrowser: boolean;\n    SAFARI: boolean;\n    TRIDENT: boolean;\n    WEBKIT: boolean;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<Platform, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<Platform>;\n}\n\n// @public (undocumented)\nexport class PlatformModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<PlatformModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<PlatformModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<PlatformModule, never, never, never>;\n}\n\n// @public\nexport enum RtlScrollAxisType {\n    INVERTED = 2,\n    NEGATED = 1,\n    NORMAL = 0\n}\n\n// @public\nexport function supportsPassiveEventListeners(): boolean;\n\n// @public\nexport function supportsScrollBehavior(): boolean;\n\n// @public\nexport function _supportsShadowDom(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Using Text Columns in Angular Material Table\nDESCRIPTION: Demonstrates a simplified way to define columns that only display text values using mat-text-column. This is a shorthand for columns that only render simple string values.\nSOURCE: https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<mat-text-column name=\"score\"></mat-text-column>\n```\n\n----------------------------------------\n\nTITLE: Defining MatDatepickerInput Class in TypeScript\nDESCRIPTION: Implements a directive for input elements that connect to a datepicker. It handles value assignment, validation, and provides the interface between form controls and the datepicker component.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatDatepickerInput<D> extends MatDatepickerInputBase<D | null, D> implements MatDatepickerControl<D | null>, OnDestroy {\n    constructor(...args: unknown[]);\n    protected _ariaOwns: i0.WritableSignal<string | null>;\n    // (undocumented)\n    protected _assignValueToModel(value: D | null): void;\n    get dateFilter(): DateFilterFn<D | null>;\n    set dateFilter(value: DateFilterFn<D | null>);\n    // (undocumented)\n    _datepicker: MatDatepickerPanel<MatDatepickerControl<D>, D | null, D>;\n    getConnectedOverlayOrigin(): ElementRef;\n    protected _getDateFilter(): DateFilterFn<D | null>;\n    _getMaxDate(): D | null;\n    _getMinDate(): D | null;\n    getOverlayLabelId(): string | null;\n    getStartValue(): D | null;\n    getThemePalette(): ThemePalette;\n    // (undocumented)\n    protected _getValueFromModel(modelValue: D | null): D | null;\n    set matDatepicker(datepicker: MatDatepickerPanel<MatDatepickerControl<D>, D | null, D>);\n    get max(): D | null;\n    set max(value: D | null);\n    get min(): D | null;\n    set min(value: D | null);\n    // (undocumented)\n    ngOnDestroy(): void;\n    protected _openPopup(): void;\n    // (undocumented)\n    protected _shouldHandleChangeEvent(event: DateSelectionModelChange<D>): boolean;\n    protected _validator: ValidatorFn | null;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatDatepickerInput<any>, \"input[matDatepicker]\", [\"matDatepickerInput\"], { \"matDatepicker\": { \"alias\": \"matDatepicker\"; \"required\": false; }; \"min\": { \"alias\": \"min\"; \"required\": false; }; \"max\": { \"alias\": \"max\"; \"required\": false; }; \"dateFilter\": { \"alias\": \"matDatepickerFilter\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDatepickerInput<any>, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced ErrorState Implementation with Parent Form Integration\nDESCRIPTION: Comprehensive error state handling that includes parent form submission status and updates through ngDoCheck lifecycle hook.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-form-field-control.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/** Whether the component is in an error state. */\nerrorState: boolean = false;\n\nconstructor(\n  ...,\n  @Optional() private _parentForm: NgForm,\n  @Optional() private _parentFormGroup: FormGroupDirective\n) {\n...\n}\n\nngDoCheck() {\n  if (this.ngControl) {\n    this.updateErrorState();\n  }\n}\n\nprivate updateErrorState() {\n  const parentSubmitted = this._parentFormGroup?.submitted || this._parentForm?.submitted;\n  const touchedOrParentSubmitted = this.touched || parentSubmitted;\n\n  const newState = (this.ngControl?.invalid || this.parts.invalid) && touchedOrParentSubmitted;\n\n  if (this.errorState !== newState) {\n    this.errorState = newState;\n    this.stateChanges.next(); // Notify listeners of state changes.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Host Element Example\nDESCRIPTION: This example showcases how to style the host element directly, making it easier to override styles compared to targeting elements inside the template. This improves maintainability and customization.\nSOURCE: https://github.com/angular/components/blob/main/CODING_STANDARDS.md#2025-04-21_snippet_13\n\nLANGUAGE: scss\nCODE:\n```\nthe-host-element {\n  // ...\n  color: red;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing MatSlideToggleModule in Angular Component\nDESCRIPTION: Code to import the MatSlideToggleModule in a standalone Angular component. This is necessary to use the Material slide toggle component in your application.\nSOURCE: https://github.com/angular/components/blob/main/guides/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\n\n@Component ({\n  imports: [\n    MatSlideToggleModule,\n  ]\n})\nclass AppComponent {}\n```\n\n----------------------------------------\n\nTITLE: Adding Expand/Collapse Functionality to Tree Nodes\nDESCRIPTION: Shows how to add expand/collapse functionality to tree nodes using the matTreeNodeToggle directive. This example includes a toggle button with an icon and aria-label for accessibility.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tree/tree.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<mat-tree-node *matNodeDef=\"let node\">\n  <button matTreeNodeToggle aria-label=\"toggle tree node\" [matTreeNodeToggleRecursive]=\"true\">\n    <mat-icon>expand</mat-icon>\n  </button>\n  {{node.value}}\n</mat-tree-node>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dialog Component in TypeScript\nDESCRIPTION: Shows how to create a dialog component that can close itself and pass a result value back to the caller.\nSOURCE: https://github.com/angular/components/blob/main/src/material/dialog/dialog.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({/* ... */})\nexport class YourDialog {\n  constructor(public dialogRef: MatDialogRef<YourDialog>) { }\n\n  closeDialog() {\n    this.dialogRef.close('Pizza!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Input to Autocomplete Panel in Angular\nDESCRIPTION: Shows how to connect an input field to an autocomplete panel using matAutocomplete directive and formControl.\nSOURCE: https://github.com/angular/components/blob/main/src/material/autocomplete/autocomplete.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" [formControl]=\"myControl\" [matAutocomplete]=\"auto\">\n<mat-autocomplete #auto=\"matAutocomplete\">\n  @for (option of options; track option) {\n    <mat-option [value]=\"option\">{{option}}</mat-option>\n  }\n</mat-autocomplete>\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Rendering in Angular Material Menu\nDESCRIPTION: HTML implementation of lazy rendering for mat-menu using ng-template with the matMenuContent attribute to defer content initialization until the menu is opened.\nSOURCE: https://github.com/angular/components/blob/main/src/material/menu/menu.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<mat-menu #appMenu=\"matMenu\">\n  <ng-template matMenuContent>\n    <button mat-menu-item>Settings</button>\n    <button mat-menu-item>Help</button>\n  </ng-template>\n</mat-menu>\n\n<button matIconButton [matMenuTriggerFor]=\"appMenu\">\n  <mat-icon>more_vert</mat-icon>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing OverlayConfig Class in TypeScript\nDESCRIPTION: This class defines the configuration options for creating an overlay, including positioning, scrolling, and styling options.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class OverlayConfig {\n    constructor(config?: OverlayConfig);\n    backdropClass?: string | string[];\n    direction?: Direction | Directionality;\n    disableAnimations?: boolean;\n    disposeOnNavigation?: boolean;\n    hasBackdrop?: boolean;\n    height?: number | string;\n    maxHeight?: number | string;\n    maxWidth?: number | string;\n    minHeight?: number | string;\n    minWidth?: number | string;\n    panelClass?: string | string[];\n    positionStrategy?: PositionStrategy;\n    scrollStrategy?: ScrollStrategy;\n    width?: number | string;\n}\n```\n\n----------------------------------------\n\nTITLE: Component Design: Focused Components vs Complex Components in HTML\nDESCRIPTION: Compares two approaches to component design, showing the preferred method of creating more focused, granular components rather than complex, configurable ones with many options.\nSOURCE: https://github.com/angular/components/blob/main/CODING_STANDARDS.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Preferred approach with focused components -->\n<mat-button>Basic button</mat-button>\n<mat-fab>FAB</mat-fab>\n<mat-icon-button>pony</mat-icon-button>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- Avoid this approach with complex, configurable components -->\n<mat-button>Basic button</mat-button>\n<mat-button class=\"mat-fab\">FAB</mat-button>\n<mat-button class=\"mat-icon-button\">pony</mat-button>\n```\n\n----------------------------------------\n\nTITLE: Implementing MatMultiYearView Class in Angular\nDESCRIPTION: Class implementation for multi-year view in Angular Material datepicker. Manages year selection, date ranges, and keyboard navigation across multiple years.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatMultiYearView<D> implements AfterContentInit, OnDestroy {\n    constructor(...args: unknown[]);\n    get activeDate(): D;\n    set activeDate(value: D);\n    readonly activeDateChange: EventEmitter<D>;\n    _dateAdapter: DateAdapter<D, any>;\n    dateClass: MatCalendarCellClassFunction<D>;\n    dateFilter: (date: D) => boolean;\n    // ... additional methods and properties ...\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Data to a Dialog Component in TypeScript\nDESCRIPTION: Shows how to pass data to a dialog component when opening it, and how to access that data within the dialog component using the MAT_DIALOG_DATA injection token.\nSOURCE: https://github.com/angular/components/blob/main/src/material/dialog/dialog.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet dialogRef = dialog.open(YourDialog, {\n  data: { name: 'austin' },\n});\n\nimport {Component, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA} from '../dialog';\n\n@Component({\n  selector: 'your-dialog',\n  template: 'passed in {{ data.name }}',\n})\nexport class YourDialog {\n  constructor(@Inject(MAT_DIALOG_DATA) public data: {name: string}) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Theme Overrides in Angular Material's Theme Mixin\nDESCRIPTION: This example shows how to provide an optional override map directly in the 'mat.theme' mixin to replace specific values applied by the mixin.\nSOURCE: https://github.com/angular/components/blob/main/guides/theming.md#2025-04-21_snippet_12\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\nhtml {\n  color-scheme: light dark;\n  @include mat.theme((\n    color: mat.$violet-palette,\n    typography: Roboto,\n    density: 0\n  ), $overrides: (\n    primary-container: orange,\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Sidenav Layout with Left Positioning\nDESCRIPTION: Creates a basic sidenav layout with a left-positioned sidenav and explicit content sections.\nSOURCE: https://github.com/angular/components/blob/main/src/material/sidenav/sidenav.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mat-sidenav-container>\n  <mat-sidenav>Start</mat-sidenav>\n  <mat-sidenav-content>Main</mat-sidenav-content>\n</mat-sidenav-container>\n```\n\n----------------------------------------\n\nTITLE: Writing Useful Comments in TypeScript\nDESCRIPTION: Demonstrates how to write useful comments that explain the rationale behind code decisions rather than simply describing what the code does. This helps other developers understand the reasoning behind implementation choices.\nSOURCE: https://github.com/angular/components/blob/main/CODING_STANDARDS.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Unless the user specifies so, the calendar should not be a tab stop.\n// This is necessary because ngAria might add a tabindex to anything with an ng-model\n// (based on whether or not the user has turned that particular feature on/off).\nif (!$attrs['tabindex']) {\n  $element.attr('tabindex', '-1');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chip Listbox Pattern\nDESCRIPTION: Example of creating a chip listbox for selectable options with proper accessibility attributes.\nSOURCE: https://github.com/angular/components/blob/main/src/material/chips/chips.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<mat-chip-listbox aria-label=\"select a shirt size\">\n  <mat-chip-option> Small </mat-chip-option>\n  <mat-chip-option> Medium </mat-chip-option>\n  <mat-chip-option> Large </mat-chip-option>\n</mat-chip-listbox>\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Form Field Control Interface\nDESCRIPTION: This snippet defines the abstract class MatFormFieldControl<T> which serves as an interface for form field controls in Angular Material. It includes properties and methods that form field controls should implement.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/form-field/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport abstract class MatFormFieldControl<T> {\n    readonly autofilled?: boolean;\n    readonly controlType?: string;\n    readonly describedByIds?: string[];\n    readonly disableAutomaticLabeling?: boolean;\n    readonly disabled: boolean;\n    readonly empty: boolean;\n    readonly errorState: boolean;\n    readonly focused: boolean;\n    readonly id: string;\n    readonly ngControl: NgControl | AbstractControlDirective | null;\n    abstract onContainerClick(event: MouseEvent): void;\n    readonly placeholder: string;\n    readonly required: boolean;\n    abstract setDescribedByIds(ids: string[]): void;\n    readonly shouldLabelFloat: boolean;\n    readonly stateChanges: Observable<void>;\n    readonly userAriaDescribedBy?: string;\n    value: T | null;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatFormFieldControl<any>, never, never, {}, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatFormFieldControl<any>, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Form Field Types and Tokens\nDESCRIPTION: This section defines various types, error functions, and injection tokens used in Angular Material form fields. It includes definitions for float label types, error messages, and component tokens.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/form-field/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FloatLabelType = 'always' | 'auto';\n\nexport function getMatFormFieldDuplicatedHintError(align: string): Error;\n\nexport function getMatFormFieldMissingControlError(): Error;\n\nexport function getMatFormFieldPlaceholderConflictError(): Error;\n\nexport const MAT_ERROR: InjectionToken<MatError>;\n\nexport const MAT_FORM_FIELD: InjectionToken<MatFormField>;\n\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS: InjectionToken<MatFormFieldDefaultOptions>;\n\nexport const MAT_PREFIX: InjectionToken<MatPrefix>;\n\nexport const MAT_SUFFIX: InjectionToken<MatSuffix>;\n```\n\n----------------------------------------\n\nTITLE: Generating Navigation Component with Material Design\nDESCRIPTION: Command to generate a new Angular component with a Material Design toolbar and responsive side navigation. Includes app name in toolbar and is based on Material breakpoints.\nSOURCE: https://github.com/angular/components/blob/main/guides/schematics.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng generate @angular/material:navigation <component-name>\n```\n\n----------------------------------------\n\nTITLE: Implementing MatAutocompleteHarness Class in TypeScript\nDESCRIPTION: Defines a harness class for interacting with Material Autocomplete components in tests. It includes methods for manipulating the autocomplete, querying its state, and selecting options.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/autocomplete/testing/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatAutocompleteHarness extends ComponentHarness {\n    blur(): Promise<void>;\n    clear(): Promise<void>;\n    enterText(value: string): Promise<void>;\n    focus(): Promise<void>;\n    getOptionGroups(filters?: Omit<OptgroupHarnessFilters, 'ancestor'>): Promise<MatOptgroupHarness[]>;\n    getOptions(filters?: Omit<OptionHarnessFilters, 'ancestor'>): Promise<MatOptionHarness[]>;\n    protected _getPanelSelector(): Promise<string>;\n    getValue(): Promise<string>;\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isFocused(): Promise<boolean>;\n    isOpen(): Promise<boolean>;\n    selectOption(filters: OptionHarnessFilters): Promise<void>;\n    static with<T extends MatAutocompleteHarness>(this: ComponentHarnessConstructor<T>, options?: AutocompleteHarnessFilters): HarnessPredicate<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Slider Harness Classes in Angular Material - TypeScript\nDESCRIPTION: This snippet defines two primary classes, MatSliderHarness and MatSliderThumbHarness, for testing Angular Material sliders. The MatSliderHarness class provides methods to interact with a slider's attributes and state, such as getting range values and checking if it's disabled. The MatSliderThumbHarness class includes methods for thumb manipulation, like getting the position and setting values. Dependencies include Angular Component Dev Kit (CDK) testing utilities.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/slider/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport class MatSliderHarness extends ComponentHarness {\n    getEndThumb(): Promise<MatSliderThumbHarness>;\n    getMaxValue(): Promise<number>;\n    getMinValue(): Promise<number>;\n    getStartThumb(): Promise<MatSliderThumbHarness>;\n    getStep(): Promise<number>;\n    // (undocumented)\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isRange(): Promise<boolean>;\n    static with<T extends MatSliderHarness>(this: ComponentHarnessConstructor<T>, options?: SliderHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport class MatSliderThumbHarness extends ComponentHarness {\n    blur(): Promise<void>;\n    focus(): Promise<void>;\n    getDisplayValue(): Promise<string>;\n    getId(): Promise<string>;\n    getMaxValue(): Promise<number>;\n    getMinValue(): Promise<number>;\n    getName(): Promise<string>;\n    getPercentage(): Promise<number>;\n    getPosition(): Promise<ThumbPosition>;\n    getValue(): Promise<number>;\n    // (undocumented)\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isFocused(): Promise<boolean>;\n    setValue(newValue: number): Promise<void>;\n    static with<T extends MatSliderThumbHarness>(this: ComponentHarnessConstructor<T>, options?: SliderThumbHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport interface SliderHarnessFilters extends BaseHarnessFilters {\n    disabled?: boolean;\n    isRange?: boolean;\n}\n\n// @public\nexport interface SliderThumbHarnessFilters extends BaseHarnessFilters {\n    position?: ThumbPosition;\n}\n\n// @public\nexport enum ThumbPosition {\n    // (undocumented)\n    END = 1,\n    // (undocumented)\n    START = 0\n}\n\n// (No @packageDocumentation comment for this package)\n\n```\n\n----------------------------------------\n\nTITLE: DragDrop Service Definition\nDESCRIPTION: Service for creating drag and drop references. Provides factory methods to create DragRef and DropListRef instances.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/drag-drop/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DragDrop {\n    constructor(...args: unknown[]);\n    createDrag<T = any>(element: ElementRef<HTMLElement> | HTMLElement, config?: DragRefConfig): DragRef<T>;\n    createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): DropListRef<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Datepicker Component\nDESCRIPTION: Shows how to properly type a component using MatDatepicker with the correct generic type corresponding to the DateAdapter implementation.\nSOURCE: https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({...})\nexport class MyComponent {\n  @ViewChild(MatDatepicker) datepicker: MatDatepicker<Date>;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Dialog with Configuration in TypeScript\nDESCRIPTION: Shows how to open a dialog using the Dialog service's open method. It includes configuration options for height, width, and custom CSS class.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/dialog/dialog.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst dialogRef = dialog.open(UserProfileComponent, {\n  height: '400px',\n  width: '600px',\n  panelClass: 'my-dialog',\n});\n```\n\n----------------------------------------\n\nTITLE: Reacting to Viewport Changes with BreakpointObserver in TypeScript\nDESCRIPTION: This example shows how to use the observe method of BreakpointObserver to get an observable stream that emits when the viewport size crosses specified breakpoints. It observes changes in orientation and calls a function to update the layout accordingly.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/layout/layout.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst layoutChanges = breakpointObserver.observe([\n  '(orientation: portrait)',\n  '(orientation: landscape)',\n]);\n\nlayoutChanges.subscribe(result => {\n  updateMyLayoutForOrientationChange();\n});\n```\n\n----------------------------------------\n\nTITLE: Accessible Navigation Lists in Angular Material\nDESCRIPTION: Example of an accessible navigation list with proper ARIA attributes and semantic HTML structure.\nSOURCE: https://github.com/angular/components/blob/main/src/material/list/list.md#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<mat-nav-list aria-label=\"Select a folder\">\n  <ul>\n    @for (link of list; track link) {\n    <li>\n      <a mat-list-item href=\"...\" [activated]=\"link.isActive\">{{ link }}</a>\n    </li>\n    }\n  </ul>\n</mat-nav-list>\n```\n\n----------------------------------------\n\nTITLE: Custom Tab Labels in Angular Material\nDESCRIPTION: Example showing how to create custom tab labels using the mat-tab-label directive inside a mat-tab component.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tabs/tabs.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mat-tab>\n  <ng-template mat-tab-label>\n    <mat-icon>thumb_up</mat-icon>\n    First\n  </ng-template>\n  Content 1\n</mat-tab>\n```\n\n----------------------------------------\n\nTITLE: Lazy Loaded Tab Content\nDESCRIPTION: Example of implementing lazy loaded tab content using ng-template with matTabContent attribute.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tabs/tabs.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<mat-tab label=\"First\">\n  <ng-template matTabContent>\n    Content that will be lazy loaded\n  </ng-template>\n</mat-tab>\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Selection Models in Angular\nDESCRIPTION: Implementation of date selection models for single dates and date ranges. Includes validation and clone functionality for date selections.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatRangeDateSelectionModel<D> extends MatDateSelectionModel<DateRange<D>, D> {\n    constructor(adapter: DateAdapter<D>);\n    add(date: D | null): void;\n    clone(): MatRangeDateSelectionModel<D>;\n    isComplete(): boolean;\n    isValid(): boolean;\n}\n\nexport class MatSingleDateSelectionModel<D> extends MatDateSelectionModel<D | null, D> {\n    constructor(adapter: DateAdapter<D>);\n    add(date: D | null): void;\n    clone(): MatSingleDateSelectionModel<D>;\n    isComplete(): boolean;\n    isValid(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Using cdkObserveContent Directive in Angular HTML Template\nDESCRIPTION: This snippet demonstrates how to use the cdkObserveContent directive in an Angular template. It observes changes to the content of a div element and calls a method when mutations are detected. The directive is applied to a wrapper div that contains ng-content for content projection.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/observers/observers.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"projected-content-wrapper\" (cdkObserveContent)=\"projectContentChanged()\">\n  <ng-content></ng-content>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Method Naming Best Practices in TypeScript\nDESCRIPTION: Demonstrates how to name methods to reflect what they do rather than when they are called, making the code more descriptive and self-explanatory.\nSOURCE: https://github.com/angular/components/blob/main/CODING_STANDARDS.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/** PREFER: describes the action performed by the function. */\nactivateRipple() {\n  // ...\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/** AVOID: does not describe what the function does. */\nhandleClick() {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ListKeyManagerOption Interface in TypeScript\nDESCRIPTION: Defines the interface for options managed by ListKeyManager, including optional disabled property and getLabel method.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/a11y.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ListKeyManagerOption {\n  disabled?: boolean;\n  getLabel?(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up TestbedHarnessEnvironment for Unit Testing\nDESCRIPTION: This snippet shows how to set up a HarnessLoader using TestbedHarnessEnvironment in a Karma unit test for a UserProfile component. It demonstrates the basic setup required before loading component harnesses.\nSOURCE: https://github.com/angular/components/blob/main/guides/using-component-harnesses.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {HarnessLoader} from '@angular/cdk/testing';\nimport {TestbedHarnessEnvironment} from '@angular/cdk/testing/testbed';\n\nlet loader: HarnessLoader;\n\ndescribe('my-component', () => {\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({imports: [MyModule], declarations: [UserProfile]})\n        .compileComponents();\n    fixture = TestBed.createComponent(UserProfile);\n    loader = TestbedHarnessEnvironment.loader(fixture);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Checkbox Testing API\nDESCRIPTION: Complete API definition for the @angular/material_checkbox_testing package, including the MatCheckboxHarness class and CheckboxHarnessFilters interface. The harness provides methods to interact with and verify the state of checkbox components during tests.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/checkbox/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as _angular_cdk_testing from '@angular/cdk/testing';\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport interface CheckboxHarnessFilters extends BaseHarnessFilters {\n    checked?: boolean;\n    disabled?: boolean;\n    label?: string | RegExp;\n    name?: string;\n}\n\n// @public\nexport class MatCheckboxHarness extends ComponentHarness {\n    blur(): Promise<void>;\n    check(): Promise<void>;\n    focus(): Promise<void>;\n    getAriaLabel(): Promise<string | null>;\n    getAriaLabelledby(): Promise<string | null>;\n    getLabelText(): Promise<string>;\n    getName(): Promise<string | null>;\n    getValue(): Promise<string | null>;\n    // (undocumented)\n    static hostSelector: string;\n    // (undocumented)\n    _input: _angular_cdk_testing.AsyncFactoryFn<_angular_cdk_testing.TestElement>;\n    isChecked(): Promise<boolean>;\n    isDisabled(): Promise<boolean>;\n    isFocused(): Promise<boolean>;\n    isIndeterminate(): Promise<boolean>;\n    isRequired(): Promise<boolean>;\n    isValid(): Promise<boolean>;\n    toggle(): Promise<void>;\n    uncheck(): Promise<void>;\n    static with<T extends MatCheckboxHarness>(this: ComponentHarnessConstructor<T>, options?: CheckboxHarnessFilters): HarnessPredicate<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel Property Reading in Angular Tests\nDESCRIPTION: Shows how to read multiple properties simultaneously using the parallel function to optimize change detection and improve test performance.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nit('reads properties in parallel', async () => {\n  const checkboxHarness = loader.getHarness(MyCheckboxHarness);\n  // Read the checked and intermediate properties simultaneously.\n  const [checked, indeterminate] = await parallel(() => [\n    checkboxHarness.isChecked(),\n    checkboxHarness.isIndeterminate()\n  ]);\n  expect(checked).toBe(false);\n  expect(indeterminate).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining MatSortHeaderHarness Class in Angular Testing\nDESCRIPTION: The MatSortHeaderHarness class provides methods for interacting with individual sort headers in Angular Material tests. Key functionalities include clicking a header, retrieving its label, and obtaining its current sort direction. The class also offers methods to check the active and disabled state of a header.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sort/testing/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatSortHeaderHarness extends ComponentHarness {\n    click(): Promise<void>;\n    getLabel(): Promise<string>;\n    getSortDirection(): Promise<SortDirection>;\n    // (undocumented)\n    static hostSelector: string;\n    isActive(): Promise<boolean>;\n    isDisabled(): Promise<boolean>;\n    static with(options?: SortHeaderHarnessFilters): HarnessPredicate<MatSortHeaderHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatDatepicker Class in TypeScript\nDESCRIPTION: Implements the main datepicker component that extends MatDatepickerBase with specific type parameters. This is the primary component used for date selection in forms.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatDatepicker<D> extends MatDatepickerBase<MatDatepickerControl<D>, D | null, D> {\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatDatepicker<any>, \"mat-datepicker\", [\"matDatepicker\"], {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDatepicker<any>, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CdkTree Component in TypeScript\nDESCRIPTION: This snippet defines the CdkTree component class, which is the core component for rendering tree structures. It handles data binding, expansion state, and node rendering.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/tree/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CdkTree<T, K = T> implements AfterContentChecked, AfterContentInit, AfterViewInit, CollectionViewer, OnDestroy, OnInit {\n    constructor(...args: unknown[]);\n    childrenAccessor?: (dataNode: T) => T[] | Observable<T[]>;\n    collapse(dataNode: T): void;\n    collapseAll(): void;\n    collapseDescendants(dataNode: T): void;\n    get dataSource(): DataSource<T> | Observable<T[]> | T[];\n    set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]);\n    expand(dataNode: T): void;\n    expandAll(): void;\n    expandDescendants(dataNode: T): void;\n    expansionKey?: (dataNode: T) => K;\n    _getChildrenAccessor(): ((dataNode: T) => T[] | Observable<T[]> | null | undefined) | undefined;\n    _getDirectChildren(dataNode: T): Observable<T[]>;\n    _getExpansionModel(): SelectionModel<K>;\n    _getLevel(node: T): number | undefined;\n    _getLevelAccessor(): ((dataNode: T) => number) | undefined;\n    _getNodeChildren(node: CdkTreeNode<T, K>): Observable<CdkTreeNode<T, K>[]>;\n    _getNodeDef(data: T, i: number): CdkTreeNodeDef<T>;\n    _getNodeParent(node: CdkTreeNode<T, K>): CdkTreeNode<T, K> | null | undefined;\n    _getPositionInSet(dataNode: T): number;\n    _getSetSize(dataNode: T): number;\n    insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T): void;\n    isExpanded(dataNode: T): boolean;\n    _keyManager: TreeKeyManagerStrategy<CdkTreeNode<T, K>>;\n    levelAccessor?: (dataNode: T) => number;\n    ngAfterContentChecked(): void;\n    ngAfterContentInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    _nodeDefs: QueryList<CdkTreeNodeDef<T>>;\n    _nodeOutlet: CdkTreeNodeOutlet;\n    _registerNode(node: CdkTreeNode<T, K>): void;\n    renderNodeChanges(data: readonly T[], dataDiffer?: IterableDiffer<T>, viewContainer?: ViewContainerRef, parentData?: T): void;\n    protected _sendKeydownToKeyManager(event: KeyboardEvent): void;\n    _setNodeTypeIfUnset(newType: 'flat' | 'nested'): void;\n    toggle(dataNode: T): void;\n    toggleDescendants(dataNode: T): void;\n    trackBy: TrackByFunction<T>;\n    treeControl?: TreeControl<T, K>;\n    _unregisterNode(node: CdkTreeNode<T, K>): void;\n    readonly viewChange: BehaviorSubject<{\n        start: number;\n        end: number;\n    }>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<CdkTree<any, any>, \"cdk-tree\", [\"cdkTree\"], { \"dataSource\": { \"alias\": \"dataSource\"; \"required\": false; }; \"treeControl\": { \"alias\": \"treeControl\"; \"required\": false; }; \"levelAccessor\": { \"alias\": \"levelAccessor\"; \"required\": false; }; \"childrenAccessor\": { \"alias\": \"childrenAccessor\"; \"required\": false; }; \"trackBy\": { \"alias\": \"trackBy\"; \"required\": false; }; \"expansionKey\": { \"alias\": \"expansionKey\"; \"required\": false; }; }, {}, [\"_nodeDefs\"], never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkTree<any, any>, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Input with DatePicker in Angular Material\nDESCRIPTION: This snippet demonstrates how to properly associate an input element with a MatDatepicker component using template references. This association is crucial for the datepicker to function correctly and avoid errors.\nSOURCE: https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-21_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<input [matDatepicker]=\"picker\">\n<mat-datepicker #picker></mat-datepicker>\n```\n\n----------------------------------------\n\nTITLE: Creating a Popup Menu with cdkMenuTriggerFor in Angular CDK\nDESCRIPTION: Example showing how to create a popup menu with a trigger button using cdkMenuTriggerFor. The menu can be toggled to show/hide and is implemented using an ng-template for the menu content.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/menu/menu.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"example-menu-bar-item\" [cdkMenuTriggerFor]=\"menu\">Click me!</button>\n\n<ng-template #menu>\n  <div class=\"example-menu\" cdkMenu>\n    <button class=\"example-menu-item\" cdkMenuItem>Item 1</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Item 2</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Item 3</button>\n  </div>\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Creating and Attaching Content to an Overlay\nDESCRIPTION: Demonstrates how to create an OverlayRef instance and attach content to it using a ComponentPortal.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/overlay/overlay.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst overlayRef = overlay.create();\nconst userProfilePortal = new ComponentPortal(UserProfile);\noverlayRef.attach(userProfilePortal);\n```\n\n----------------------------------------\n\nTITLE: Creating a Range Slider with Angular Material in HTML\nDESCRIPTION: This example shows how to create a range slider using mat-slider with both matSliderStartThumb and matSliderEndThumb inputs. This allows for selecting a range of values.\nSOURCE: https://github.com/angular/components/blob/main/src/material/slider/slider.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<mat-slider>\n  <input matSliderStartThumb>\n  <input matSliderEndThumb>\n</mat-slider>\n```\n\n----------------------------------------\n\nTITLE: Enhanced Component Harness with User Actions\nDESCRIPTION: Advanced implementation of a component harness that provides high-level methods for common user actions and state checks.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyPopupHarness extends ComponentHarness {\n  static hostSelector = 'my-popup';\n\n  protected getTriggerElement = this.locatorFor('button');\n  protected getContentElement = this.locatorForOptional('.my-popup-content');\n\n  /** Toggles the open state of the popup. */\n  async toggle() {\n    const trigger = await this.getTriggerElement();\n    return trigger.click();\n  }\n\n  /** Checks if the popup us open. */\n  async isOpen() {\n    const content = await this.getContentElement();\n    return !!content;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Creating Steps with Custom Component\nDESCRIPTION: Example of iteratively creating steps with a custom component by looping through an array and passing the index to each step component.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-stepper-using-the-cdk-stepper.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<app-custom-stepper>\n  @for (step of mySteps; track step) {\n    <cdk-step>\n      <my-step-component [step]=\"$index\"></my-step-component>\n    </cdk-step>\n  }\n</app-custom-stepper>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Filtering for Autocomplete in Angular\nDESCRIPTION: Illustrates how to add custom filtering to an autocomplete component using RxJS operators on the formControl's valueChanges Observable.\nSOURCE: https://github.com/angular/components/blob/main/src/material/autocomplete/autocomplete.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AutocompleteFilterExample implements OnInit {\n  myControl = new FormControl('');\n  options: string[] = ['One', 'Two', 'Three'];\n  filteredOptions: Observable<string[]>;\n\n  ngOnInit() {\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map(value => this._filter(value || ''))\n    );\n  }\n\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n    return this.options.filter(option => option.toLowerCase().includes(filterValue));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatCalendarHeader Class in TypeScript\nDESCRIPTION: Implements a header component for the Material calendar with navigation controls. Provides methods for handling next/previous navigation and period selection.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatCalendarHeader<D> {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    calendar: MatCalendar<D>;\n    currentPeriodClicked(): void;\n    get nextButtonLabel(): string;\n    nextClicked(): void;\n    nextEnabled(): boolean;\n    get periodButtonDescription(): string;\n    get periodButtonLabel(): string;\n    // (undocumented)\n    _periodButtonLabelId: string;\n    get periodButtonText(): string;\n    get prevButtonLabel(): string;\n    previousClicked(): void;\n    previousEnabled(): boolean;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatCalendarHeader<any>, \"mat-calendar-header\", [\"matCalendarHeader\"], {}, {}, never, [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatCalendarHeader<any>, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog Component with Close Method in TypeScript\nDESCRIPTION: Shows how to create a dialog component that injects DialogRef and uses it to close the dialog with a result value.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/dialog/dialog.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({/* ... */})\nexport class YourDialog {\n  constructor(public dialogRef: DialogRef<string>) {}\n\n  closeDialog() {\n    this.dialogRef.close('Pizza!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Button API in TypeScript\nDESCRIPTION: This code snippet defines the API for Angular Material buttons, including various button types, configuration interfaces, and injection tokens. It covers standard buttons, FAB buttons, icon buttons, and their associated classes and interfaces.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/button/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterViewInit } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport { InjectionToken } from '@angular/core';\nimport { NgZone } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\n\n// @public\nexport const MAT_BUTTON_CONFIG: InjectionToken<MatButtonConfig>;\n\n// @public\nexport const MAT_FAB_DEFAULT_OPTIONS: InjectionToken<MatFabDefaultOptions>;\n\n// @public @deprecated\nexport function MAT_FAB_DEFAULT_OPTIONS_FACTORY(): MatFabDefaultOptions;\n\n// @public\nexport const MatAnchor: typeof MatButton;\n\n// @public (undocumented)\nexport type MatAnchor = MatButton;\n\n// @public\nexport class MatButton extends MatButtonBase {\n    constructor(...args: unknown[]);\n    get appearance(): MatButtonAppearance | null;\n    set appearance(value: MatButtonAppearance | '');\n    setAppearance(appearance: MatButtonAppearance): void;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatButton, \"    button[matButton], a[matButton], button[mat-button], button[mat-raised-button],    button[mat-flat-button], button[mat-stroked-button], a[mat-button], a[mat-raised-button],    a[mat-flat-button], a[mat-stroked-button]  \", [\"matButton\", \"matAnchor\"], { \"appearance\": { \"alias\": \"matButton\"; \"required\": false; }; }, {}, never, [\".material-icons:not([iconPositionEnd]), mat-icon:not([iconPositionEnd]), [matButtonIcon]:not([iconPositionEnd])\", \"*\", \".material-icons[iconPositionEnd], mat-icon[iconPositionEnd], [matButtonIcon][iconPositionEnd]\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatButton, never>;\n}\n\n// @public\nexport type MatButtonAppearance = 'text' | 'filled' | 'elevated' | 'outlined' | 'tonal';\n\n// @public\nexport interface MatButtonConfig {\n    color?: ThemePalette;\n    defaultAppearance?: MatButtonAppearance;\n    disabledInteractive?: boolean;\n}\n\n// @public (undocumented)\nexport class MatButtonModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatButtonModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatButtonModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatButtonModule, never, [typeof MatCommonModule, typeof MatRippleModule, typeof MatButton, typeof MatMiniFabButton, typeof MatIconButton, typeof MatFabButton], [typeof MatCommonModule, typeof MatButton, typeof MatMiniFabButton, typeof MatIconButton, typeof MatFabButton]>;\n}\n\n// @public\nexport const MatFabAnchor: typeof MatFabButton;\n\n// @public (undocumented)\nexport type MatFabAnchor = MatFabButton;\n\n// @public\nexport class MatFabButton extends MatButtonBase {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    extended: boolean;\n    // (undocumented)\n    _isFab: boolean;\n    // (undocumented)\n    static ngAcceptInputType_extended: unknown;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatFabButton, \"button[mat-fab], a[mat-fab], button[matFab], a[matFab]\", [\"matButton\", \"matAnchor\"], { \"extended\": { \"alias\": \"extended\"; \"required\": false; }; }, {}, never, [\".material-icons:not([iconPositionEnd]), mat-icon:not([iconPositionEnd]), [matButtonIcon]:not([iconPositionEnd])\", \"*\", \".material-icons[iconPositionEnd], mat-icon[iconPositionEnd], [matButtonIcon][iconPositionEnd]\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatFabButton, never>;\n}\n\n// @public\nexport interface MatFabDefaultOptions {\n    color?: ThemePalette;\n}\n\n// @public\nexport const MatIconAnchor: typeof MatIconButton;\n\n// @public (undocumented)\nexport type MatIconAnchor = MatIconButton;\n\n// @public\nexport class MatIconButton extends MatButtonBase {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatIconButton, \"button[mat-icon-button], a[mat-icon-button], button[matIconButton], a[matIconButton]\", [\"matButton\", \"matAnchor\"], {}, {}, never, [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatIconButton, never>;\n}\n\n// @public\nexport const MatMiniFabAnchor: typeof MatMiniFabButton;\n\n// @public (undocumented)\nexport type MatMiniFabAnchor = MatMiniFabButton;\n\n// @public\nexport class MatMiniFabButton extends MatButtonBase {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    _isFab: boolean;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatMiniFabButton, \"button[mat-mini-fab], a[mat-mini-fab], button[matMiniFab], a[matMiniFab]\", [\"matButton\", \"matAnchor\"], {}, {}, never, [\".material-icons:not([iconPositionEnd]), mat-icon:not([iconPositionEnd]), [matButtonIcon]:not([iconPositionEnd])\", \"*\", \".material-icons[iconPositionEnd], mat-icon[iconPositionEnd], [matButtonIcon][iconPositionEnd]\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatMiniFabButton, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Entry Chip Grid\nDESCRIPTION: Example of creating a form field with chip grid for text entry and chip creation.\nSOURCE: https://github.com/angular/components/blob/main/src/material/chips/chips.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<mat-form-field>\n  <mat-chip-grid #myChipGrid [(ngModel)]=\"mySelection\"\n    aria-label=\"enter sandwich fillings\">\n    @for (filling of fillings; track filling) {\n      <mat-chip-row (removed)=\"remove(filling)\">\n        {{filling.name}}\n        <button matChipRemove>\n          <mat-icon>cancel</mat-icon>\n        </button>\n      </mat-chip-row>\n    }\n  </mat-chip-grid>\n  <input [matChipInputFor]=\"myChipGrid\"\n          [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n          (matChipInputTokenEnd)=\"add($event)\"\n          aria-label=\"Add sandwich fillings...\" />\n</mat-form-field>\n```\n\n----------------------------------------\n\nTITLE: Defining MatSelectionListHarness Class\nDESCRIPTION: This class extends MatListHarnessBase and represents a harness for testing Angular Material selection lists. It provides methods for interacting with selection lists, such as selecting and deselecting items, and checking if the list is disabled. It uses MatListOptionHarness for individual list options and ListOptionHarnessFilters for filtering.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport class MatSelectionListHarness extends MatListHarnessBase<typeof MatListOptionHarness, MatListOptionHarness, ListOptionHarnessFilters> {\n    deselectItems(...filters: ListItemHarnessFilters[]): Promise<void>;\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    // (undocumented)\n    _itemHarness: typeof MatListOptionHarness;\n    selectItems(...filters: ListOptionHarnessFilters[]): Promise<void>;\n    static with<T extends MatSelectionListHarness>(this: ComponentHarnessConstructor<T>, options?: SelectionListHarnessFilters): HarnessPredicate<T>;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using SelectionModel in JavaScript\nDESCRIPTION: Demonstrates the basic usage of SelectionModel, including initialization, selection operations, and event listening. The model is used for managing multiple selections with initial values.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/collections/collections.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst model = new SelectionModel(\n  true,   // multiple selection or not\n  [2,1,3] // initial selected values\n);\n\n// select a value\nmodel.select(4);\nconsole.log(model.selected.length) //->  4\n\n// deselect a value\nmodel.deselect(4);\nconsole.log(model.selected.length) //->  3\n\n// toggle a value\nmodel.toggle(4);\nconsole.log(model.selected.length) //->  4\n\n// check for selection\nconsole.log(model.isSelected(4)) //-> true\n\n// sort the selections\nconsole.log(model.sort()) //-> [1,2,3,4]\n\n// listen for changes\nmodel.changed.subscribe(s => console.log(s));\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Form Linear Stepper in Angular\nDESCRIPTION: Example showing how to implement a vertical linear stepper using separate forms for each step. Each step has its own form group control.\nSOURCE: https://github.com/angular/components/blob/main/src/material/stepper/stepper.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<mat-stepper orientation=\"vertical\" linear>\n  <mat-step [stepControl]=\"formGroup1\">\n    <form [formGroup]=\"formGroup1\">\n      ...\n    </form>\n  </mat-step>\n  <mat-step [stepControl]=\"formGroup2\">\n    <form [formGroup]=\"formGroup2\">\n      ...\n    </form>\n  </mat-step>\n</mat-stepper>\n```\n\n----------------------------------------\n\nTITLE: Implementing UnitTestElement Class in TypeScript for Angular CDK Testing\nDESCRIPTION: This class implements the TestElement interface and provides methods for interacting with DOM elements in unit tests, including actions like clicking, sending keys, and getting element properties.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/testing/testbed/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UnitTestElement implements TestElement {\n    constructor(element: Element, _stabilize: () => Promise<void>);\n    blur(): Promise<void>;\n    clear(): Promise<void>;\n    click(modifiers?: ModifierKeys): Promise<void>;\n    click(location: 'center', modifiers?: ModifierKeys): Promise<void>;\n    click(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;\n    dispatchEvent(name: string, data?: Record<string, EventData>): Promise<void>;\n    readonly element: Element;\n    focus(): Promise<void>;\n    getAttribute(name: string): Promise<string | null>;\n    getCssValue(property: string): Promise<string>;\n    getDimensions(): Promise<ElementDimensions>;\n    getProperty<T = any>(name: string): Promise<T>;\n    hasClass(name: string): Promise<boolean>;\n    hover(): Promise<void>;\n    isFocused(): Promise<boolean>;\n    matchesSelector(selector: string): Promise<boolean>;\n    mouseAway(): Promise<void>;\n    rightClick(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;\n    selectOptions(...optionIndexes: number[]): Promise<void>;\n    sendKeys(...keys: (string | TestKey)[]): Promise<void>;\n    sendKeys(modifiers: ModifierKeys, ...keys: (string | TestKey)[]): Promise<void>;\n    setContenteditableValue(value: string): Promise<void>;\n    setInputValue(value: string): Promise<void>;\n    text(options?: TextOptions): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic Ripple Control in TypeScript\nDESCRIPTION: Shows how to programmatically trigger ripples using the MatRipple directive reference, including centered and persistent ripples.\nSOURCE: https://github.com/angular/components/blob/main/src/material/core/ripple/ripple.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyComponent {\n\n  /** Reference to the directive instance of the ripple. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /** Shows a centered and persistent ripple. */\n  launchRipple() {\n    const rippleRef = this.ripple.launch({\n      persistent: true,\n      centered: true\n    });\n\n    // Fade out the ripple later.\n    rippleRef.fadeOut();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MatSliderThumb Class Declaration\nDESCRIPTION: This code defines the `MatSliderThumb` class, which represents a single thumb on the slider.  It implements the `ControlValueAccessor` interface, allowing it to be used with Angular forms.  It includes properties for controlling the thumb's position, value, and disabled state, as well as methods for handling user interactions and updating the UI.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/slider/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public\nexport class MatSliderThumb implements _MatSliderThumb, OnDestroy, ControlValueAccessor {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    blur(): void;\n    // (undocumented)\n    _calcTranslateXByPointerEvent(event: PointerEvent): number;\n    // (undocumented)\n    _calcTranslateXByValue(): number;\n    // (undocumented)\n    readonly _cdr: ChangeDetectorRef;\n    // (undocumented)\n    _clamp(v: number): number;\n    protected readonly _destroyed: Subject<void>;\n    get disabled(): boolean;\n    set disabled(v: boolean);\n    readonly dragEnd: EventEmitter<MatSliderDragEvent>;\n    readonly dragStart: EventEmitter<MatSliderDragEvent>;\n    // (undocumented)\n    readonly _elementRef: ElementRef<HTMLInputElement>;\n    get fillPercentage(): number;\n    _fixValue(event: PointerEvent): void;\n    // (undocumented)\n    focus(): void;\n    // (undocumented)\n    _getDefaultValue(): number;\n    _hostElement: HTMLInputElement;\n    _initialValue: string | undefined;\n    initProps(): void;\n    initUI(): void;\n    // (undocumented)\n    _initValue(): void;\n    _isActive: boolean;\n    protected _isControlInitialized: boolean;\n    _isFocused: boolean;\n    _knobRadius: number;\n    get max(): number;\n    set max(v: number);\n    get min(): number;\n    set min(v: number);\n    // (undocumented)\n    static ngAcceptInputType_value: unknown;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    readonly _ngZone: NgZone;\n    // (undocumented)\n    _onBlur(): void;\n    // (undocumented)\n    _onChange(): void;\n    protected _onChangeFn: ((value: any) => void) | undefined;\n    // (undocumented)\n    _onFocus(): void;\n    // (undocumented)\n    _onInput(): void;\n    // (undocumented)\n    _onNgControlValueChange(): void;\n    // (undocumented)\n    _onPointerDown(event: PointerEvent): void;\n    // (undocumented)\n    _onPointerMove(event: PointerEvent): void;\n    // (undocumented)\n    _onPointerUp(): void;\n    get percentage(): number;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    protected _setValue(value: string): void;\n    _skipUIUpdate: boolean;\n    // (undocumented)\n    protected _slider: _MatSlider;\n    // (undocumented)\n    get step(): number;\n    set step(v: number);\n    thumbPosition: _MatThumb;\n    _tickMarkOffset: number;\n    get translateX(): number;\n    set translateX(v: number);\n    // (undocumented)\n    _updateThumbUI(options?: {\n        withAnimation: boolean;\n    }): void;\n    // (undocumented)\n    _updateThumbUIByPointerEvent(event: PointerEvent, options?: {\n        withAnimation: boolean;\n    }): void;\n    // (undocumented)\n    _updateThumbUIByValue(options?: {\n        withAnimation: boolean;\n    }): void;\n    _updateWidthActive(): void;\n    _updateWidthInactive(): void;\n    // (undocumented)\n    get value(): number;\n```\n```\n\n----------------------------------------\n\nTITLE: Component Declaration for CdkTable\nDESCRIPTION: Defines the component declaration for the CdkTable component, which is the main component for rendering a table.  It includes input properties like trackBy, dataSource, multiTemplateDataRows, and fixedLayout. The selector, input/output properties, content queries, and factory declaration are included.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n    static ɵcmp: i0.ɵɵComponentDeclaration<CdkTable<any>, \"cdk-table, table[cdk-table]\", [\"cdkTable\"], { \"trackBy\": { \"alias\": \"trackBy\"; \"required\": false; }; \"dataSource\": { \"alias\": \"dataSource\"; \"required\": false; }; \"multiTemplateDataRows\": { \"alias\": \"multiTemplateDataRows\"; \"required\": false; }; \"fixedLayout\": { \"alias\": \"fixedLayout\"; \"required\": false; }; }, { \"contentChanged\": \"contentChanged\"; }, [\"_noDataRow\", \"_contentColumnDefs\", \"_contentRowDefs\", \"_contentHeaderRowDefs\", \"_contentFooterRowDefs\"], [\"caption\", \"colgroup, col\", \"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkTable<any>, never>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Overlay Class in TypeScript\nDESCRIPTION: This class provides methods for creating and managing overlays, including positioning and scroll strategies.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Overlay {\n    constructor(...args: unknown[]);\n    create(config?: OverlayConfig): OverlayRef;\n    position(): OverlayPositionBuilder;\n    // (undocumented)\n    scrollStrategies: ScrollStrategyOptions;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<Overlay, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<Overlay>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Copy Attempts for cdkCopyToClipboard Directive in Angular\nDESCRIPTION: Shows how to use the cdkCopyToClipboardAttempts input to automatically attempt copying text a specified number of times when using the cdkCopyToClipboard directive.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/clipboard/clipboard.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button [cdkCopyToClipboard]=\"longText\" [cdkCopyToClipboardAttempts]=\"5\">Copy text</button>\n```\n\n----------------------------------------\n\nTITLE: Setting Separate Control and Display Values for Autocomplete in Angular\nDESCRIPTION: Demonstrates how to use the displayWith property to set different values for form control and display in an autocomplete component.\nSOURCE: https://github.com/angular/components/blob/main/src/material/autocomplete/autocomplete.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AutocompleteDisplayExample {\n  myControl = new FormControl<string | User>('');\n  options: User[] = [{ name: 'Mary' }, { name: 'Shelley' }, { name: 'Igor' }];\n\n  displayFn(user: User): string {\n    return user && user.name ? user.name : '';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Directionality in an Angular Component\nDESCRIPTION: This code demonstrates how to inject and use the Directionality service from @angular/cdk/bidi in a custom Angular component. It captures the initial text direction value and subscribes to direction changes, updating the component's internal direction property accordingly.\nSOURCE: https://github.com/angular/components/blob/main/guides/bidirectionality.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({ /* ... */ })\nexport class MyCustomComponent {\n  private dir: Direction;\n\n  constructor(directionality: Directionality) {\n    this.dir = directionality.value;\n\n    directionality.change.subscribe(() => {\n      this.dir = directionality.value;\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Nested Tree Structure in Angular Material\nDESCRIPTION: Shows the DOM structure for a nested tree using mat-tree and mat-nested-tree-node components. Nested trees place children nodes inside their parent node, which is useful for visually representing complex hierarchical relationships.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tree/tree.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<mat-tree>\n   <mat-nested-tree-node>\n     parent node\n     <mat-nested-tree-node> -- child node1 </mat-nested-tree-node>\n     <mat-nested-tree-node> -- child node2 </mat-nested-tree-node>\n   </mat-nested-tree-node>\n</mat-tree>\n```\n\n----------------------------------------\n\nTITLE: Checking Current Viewport Size with BreakpointObserver in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the isMatched method of BreakpointObserver to evaluate a media query against the current viewport size. It checks if the screen is small based on a max-width of 599px.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/layout/layout.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst isSmallScreen = breakpointObserver.isMatched('(max-width: 599px)');\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Maps Marker Component in TypeScript\nDESCRIPTION: Demonstrates the setup of a Google Maps component with marker functionality. The component allows adding markers on map click events and manages marker positions with configurable options. Includes center coordinates initialization, zoom level setting, and marker position handling.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-marker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// google-map-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapMarker} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap, MapMarker],\n})\nexport class GoogleMapDemo {\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n  markerOptions: google.maps.MarkerOptions = {draggable: false};\n  markerPositions: google.maps.LatLngLiteral[] = [];\n\n  addMarker(event: google.maps.MapMouseEvent) {\n    this.markerPositions.push(event.latLng.toJSON());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injection Token for MatTabsConfig\nDESCRIPTION: This code defines an injection token for a configuration object that can be used to customize the behavior of the `MatTab` and `MatTabGroup` components.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const MAT_TABS_CONFIG: InjectionToken<MatTabsConfig>;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Tree with DataSource and TrackBy Function\nDESCRIPTION: Shows how to connect a tree to a data source and provide a trackBy function for improved performance. This is essential for efficiently rendering and updating large tree structures.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tree/tree.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" [trackBy]=\"trackByFn\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Modifier Key Detection in Angular CDK\nDESCRIPTION: This TypeScript code defines a utility function and type for checking if specific modifier keys (alt, shift, ctrl, meta) were pressed during a keyboard event. The hasModifierKey function accepts a KeyboardEvent and a variable number of modifier keys to check.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/keycodes/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type ModifierKey = 'altKey' | 'shiftKey' | 'ctrlKey' | 'metaKey';\n\n// @public\nexport function hasModifierKey(event: KeyboardEvent, ...modifiers: ModifierKey[]): boolean;\n```\n\n----------------------------------------\n\nTITLE: Selection Column Template for Angular Material Table\nDESCRIPTION: HTML template for implementing checkboxes in table header and rows for selection functionality.\nSOURCE: https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<ng-container matColumnDef=\"select\">\n  <th mat-header-cell *matHeaderCellDef>\n    <mat-checkbox (change)=\"$event ? toggleAllRows() : null\"\n                  [checked]=\"selection.hasValue() && isAllSelected()\"\n                  [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\n    </mat-checkbox>\n  </th>\n  <td mat-cell *matCellDef=\"let row\">\n    <mat-checkbox (click)=\"$event.stopPropagation()\"\n                  (change)=\"$event ? selection.toggle(row) : null\"\n                  [checked]=\"selection.isSelected(row)\">\n    </mat-checkbox>\n  </td>\n</ng-container>\n```\n\n----------------------------------------\n\nTITLE: Implementing MatCalendar Component Class in TypeScript\nDESCRIPTION: The MatCalendar component class implementation that manages date selection and view changing functionality. It handles different calendar views (month, year, multi-year) and supports both single date and date range selection.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n    constructor(...args: unknown[]);\n    get activeDate(): D;\n    set activeDate(value: D);\n    protected _activeDrag: MatCalendarUserEvent<D> | null;\n    _calendarHeaderPortal: Portal<any>;\n    comparisonEnd: D | null;\n    comparisonStart: D | null;\n    get currentView(): MatCalendarView;\n    set currentView(value: MatCalendarView);\n    dateClass: MatCalendarCellClassFunction<D>;\n    dateFilter: (date: D) => boolean;\n    _dateSelected(event: MatCalendarUserEvent<D | null>): void;\n    _dragEnded(event: MatCalendarUserEvent<DateRange<D> | null>): void;\n    _dragStarted(event: MatCalendarUserEvent<D>): void;\n    endDateAccessibleName: string | null;\n    focusActiveCell(): void;\n    _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void;\n    headerComponent: ComponentType<any>;\n    get maxDate(): D | null;\n    set maxDate(value: D | null);\n    get minDate(): D | null;\n    set minDate(value: D | null);\n    readonly monthSelected: EventEmitter<D>;\n    _monthSelectedInYearView(normalizedMonth: D): void;\n    monthView: MatMonthView<D>;\n    multiYearView: MatMultiYearView<D>;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngAfterViewChecked(): void;\n    // (undocumented)\n    ngOnChanges(changes: SimpleChanges): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    get selected(): DateRange<D> | D | null;\n    set selected(value: DateRange<D> | D | null);\n    readonly selectedChange: EventEmitter<D | null>;\n    get startAt(): D | null;\n    set startAt(value: D | null);\n    startDateAccessibleName: string | null;\n    startView: MatCalendarView;\n    readonly stateChanges: Subject<void>;\n    updateTodaysDate(): void;\n    readonly _userDragDrop: EventEmitter<MatCalendarUserEvent<DateRange<D>>>;\n    readonly _userSelection: EventEmitter<MatCalendarUserEvent<D | null>>;\n    readonly viewChanged: EventEmitter<MatCalendarView>;\n    readonly yearSelected: EventEmitter<D>;\n    _yearSelectedInMultiYearView(normalizedYear: D): void;\n    yearView: MatYearView<D>;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatCalendar<any>, \"mat-calendar\", [\"matCalendar\"], { \"headerComponent\": { \"alias\": \"headerComponent\"; \"required\": false; }; \"startAt\": { \"alias\": \"startAt\"; \"required\": false; }; \"startView\": { \"alias\": \"startView\"; \"required\": false; }; \"selected\": { \"alias\": \"selected\"; \"required\": false; }; \"minDate\": { \"alias\": \"minDate\"; \"required\": false; }; \"maxDate\": { \"alias\": \"maxDate\"; \"required\": false; }; \"dateFilter\": { \"alias\": \"dateFilter\"; \"required\": false; }; \"dateClass\": { \"alias\": \"dateClass\"; \"required\": false; }; \"comparisonStart\": { \"alias\": \"comparisonStart\"; \"required\": false; }; \"comparisonEnd\": { \"alias\": \"comparisonEnd\"; \"required\": false; }; \"startDateAccessibleName\": { \"alias\": \"startDateAccessibleName\"; \"required\": false; }; \"endDateAccessibleName\": { \"alias\": \"endDateAccessibleName\"; \"required\": false; }; }, { \"selectedChange\": \"selectedChange\"; \"yearSelected\": \"yearSelected\"; \"monthSelected\": \"monthSelected\"; \"viewChanged\": \"viewChanged\"; \"_userSelection\": \"_userSelection\"; \"_userDragDrop\": \"_userDragDrop\"; }, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatCalendar<any>, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Date Validation in Angular Material Datepicker\nDESCRIPTION: Shows how to add date validation to the datepicker input using min, max, and matDatepickerFilter properties.\nSOURCE: https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<input [matDatepicker]=\"picker\" [min]=\"minDate\" [max]=\"maxDate\" [matDatepickerFilter]=\"myFilter\">\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Paginator Testing Harness in TypeScript\nDESCRIPTION: Defines the testing harness class and interfaces for Angular Material's paginator component. Includes methods for interacting with paginator functionality like navigation, page size management, and state checking. Extends ComponentHarness from Angular CDK testing.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/paginator/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as _angular_cdk_testing from '@angular/cdk/testing';\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { ContentContainerComponentHarness } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport class MatPaginatorHarness extends ComponentHarness {\n    getPageSize(): Promise<number>;\n    getRangeLabel(): Promise<string>;\n    goToFirstPage(): Promise<void>;\n    goToLastPage(): Promise<void>;\n    goToNextPage(): Promise<void>;\n    goToPreviousPage(): Promise<void>;\n    static hostSelector: string;\n    isNextPageDisabled(): Promise<boolean>;\n    // (undocumented)\n    isPreviousPageDisabled(): Promise<boolean>;\n    // (undocumented)\n    _rangeLabel: _angular_cdk_testing.AsyncFactoryFn<_angular_cdk_testing.TestElement>;\n    // (undocumented)\n    _select: _angular_cdk_testing.AsyncFactoryFn<MatSelectHarness | null>;\n    setPageSize(size: number): Promise<void>;\n    static with<T extends MatPaginatorHarness>(this: ComponentHarnessConstructor<T>, options?: PaginatorHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport interface PaginatorHarnessFilters extends BaseHarnessFilters {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Column in CdkTable\nDESCRIPTION: This snippet shows how to define a column in CdkTable using ng-container with cdkColumnDef directive. It includes templates for header, data, and footer cells.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/table/table.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ng-container cdkColumnDef=\"username\">\n  <th cdk-header-cell *cdkHeaderCellDef> User name </th>\n  <td cdk-cell *cdkCellDef=\"let row\"> {{row.a}} </td>\n  <td cdk-footer-cell *cdkFooterCellDef> User name </td>\n</ng-container>\n```\n\n----------------------------------------\n\nTITLE: Implementing ScrollDispatcher Class in TypeScript\nDESCRIPTION: This class manages scroll events and scrollable containers in the application.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ScrollDispatcher implements OnDestroy {\n    constructor(...args: unknown[]);\n    ancestorScrolled(elementOrElementRef: ElementRef | HTMLElement, auditTimeInMs?: number): Observable<CdkScrollable | void>;\n    deregister(scrollable: CdkScrollable): void;\n    getAncestorScrollContainers(elementOrElementRef: ElementRef | HTMLElement): CdkScrollable[];\n    // (undocumented)\n    ngOnDestroy(): void;\n    register(scrollable: CdkScrollable): void;\n    scrollContainers: Map<CdkScrollable, Subscription>;\n    scrolled(auditTimeInMs?: number): Observable<CdkScrollable | void>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<ScrollDispatcher, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<ScrollDispatcher>;\n}\n```\n\n----------------------------------------\n\nTITLE: MatTabHeader Class Definition in TypeScript\nDESCRIPTION: Implementation of the tab header component that extends MatPaginatedTabHeader. It handles accessibility attributes, ripple effects, and contains references to DOM elements needed for the tab header functionality.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatTabHeader extends MatPaginatedTabHeader implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy {\n    ariaLabel: string;\n    ariaLabelledby: string;\n    disableRipple: boolean;\n    // (undocumented)\n    _inkBar: MatInkBar;\n    // (undocumented)\n    _items: QueryList<MatTabLabelWrapper>;\n    // (undocumented)\n    protected _itemSelected(event: KeyboardEvent): void;\n    // (undocumented)\n    _nextPaginator: ElementRef<HTMLElement>;\n    // (undocumented)\n    static ngAcceptInputType_disableRipple: unknown;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    _previousPaginator: ElementRef<HTMLElement>;\n    // (undocumented)\n    _tabList: ElementRef;\n    // (undocumented)\n    _tabListContainer: ElementRef;\n    // (undocumented)\n    _tabListInner: ElementRef;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatTabHeader, \"mat-tab-header\", never, { \"ariaLabel\": { \"alias\": \"aria-label\"; \"required\": false; }; \"ariaLabelledby\": { \"alias\": \"aria-labelledby\"; \"required\": false; }; \"disableRipple\": { \"alias\": \"disableRipple\"; \"required\": false; }; }, {}, [\"_items\"], [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTabHeader, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Google Maps Template Integration in Angular HTML\nDESCRIPTION: HTML template that sets up the Google Map component with markers and info window. It configures map properties like height, width, center, and zoom, while implementing click handlers for interactive features.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-info-window/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<google-map\n  height=\"400px\"\n  width=\"750px\"\n  [center]=\"center\"\n  [zoom]=\"zoom\"\n  (mapClick)=\"addMarker($event)\">\n    @for (position of markerPositions; track position) {\n      <map-advanced-marker\n        #marker=\"mapAdvancedMarker\"\n        [position]=\"position\"\n        (mapClick)=\"openInfoWindow(marker)\" />\n    }\n    <map-info-window>Info Window content</map-info-window>\n</google-map>\n```\n\n----------------------------------------\n\nTITLE: Implementing Angular Material Form Field Components\nDESCRIPTION: This section includes the implementation of various Angular Material form field components such as MatError, MatFormField, MatHint, MatLabel, MatPrefix, and MatSuffix. These components are used to create and manage form fields in Angular applications.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/form-field/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatError {\n    constructor(...args: unknown[]);\n    id: string;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatError, \"mat-error, [matError]\", never, { \"id\": { \"alias\": \"id\"; \"required\": false; }; }, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatError, never>;\n}\n\nexport class MatFormField implements FloatingLabelParent, AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy {\n    // ... (implementation details omitted for brevity)\n}\n\nexport class MatHint {\n    align: 'start' | 'end';\n    id: string;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatHint, \"mat-hint\", never, { \"align\": { \"alias\": \"align\"; \"required\": false; }; \"id\": { \"alias\": \"id\"; \"required\": false; }; }, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatHint, never>;\n}\n\nexport class MatLabel {\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatLabel, \"mat-label\", never, {}, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatLabel, never>;\n}\n\nexport class MatPrefix {\n    _isText: boolean;\n    set _isTextSelector(value: '');\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatPrefix, \"[matPrefix], [matIconPrefix], [matTextPrefix]\", never, { \"_isTextSelector\": { \"alias\": \"matTextPrefix\"; \"required\": false; }; }, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatPrefix, never>;\n}\n\nexport class MatSuffix {\n    _isText: boolean;\n    set _isTextSelector(value: '');\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatSuffix, \"[matSuffix], [matIconSuffix], [matTextSuffix]\", never, { \"_isTextSelector\": { \"alias\": \"matTextSuffix\"; \"required\": false; }; }, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatSuffix, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Dialog Container in TypeScript\nDESCRIPTION: Shows how to create a custom dialog container component that extends CdkDialogContainer for more control over dialog behavior and styling.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/dialog/dialog.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {CdkDialogContainer} from '@angular/cdk/dialog';\n\n@Component({\n  selector: 'my-dialog-container',\n  styles: [`\n    :host {\n      display: block;\n      background: #fff;\n      border-radius: 8px;\n      padding: 16px;\n    }\n  `]\n})\nclass MyDialogContainer extends CdkDialogContainer {}\n```\n\n----------------------------------------\n\nTITLE: Using BreakpointObserver in Angular Component\nDESCRIPTION: This snippet demonstrates how to use BreakpointObserver in an Angular component to respond to changes in device breakpoints. It subscribes to the 'Handset' breakpoint and calls different methods based on whether the breakpoint matches or not.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/layout/breakpoints-observer.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({ ... })\nexport class MyWidget {\n  isHandset: Observable<BreakpointState>;\n\n  constructor(bm: BreakpointObserver) {\n    bm.observe(Handset).subscribe((state: BreakpointState) => {\n      if (state.matches) {\n        this.makeEverythingFitOnSmallScreen();\n      } else {\n        this.expandEverythingToFillTheScreen();\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Snackbars with MatSnackBar in TypeScript\nDESCRIPTION: Demonstrates various ways to open snackbars using the MatSnackBar service, including simple messages, messages with actions, and custom components.\nSOURCE: https://github.com/angular/components/blob/main/src/material/snack-bar/snack-bar.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Simple message.\nlet snackBarRef = snackBar.open('Message archived');\n\n// Simple message with an action.\nlet snackBarRef = snackBar.open('Message archived', 'Undo');\n\n// Load the given component into the snackbar.\nlet snackBarRef = snackBar.openFromComponent(MessageArchivedComponent);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Date Adapter\nDESCRIPTION: Example of providing a custom DateAdapter implementation with custom date formats.\nSOURCE: https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nbootstrapApplication(MyApp, {\n  providers: [\n    {provide: DateAdapter, useClass: MyDateAdapter},\n    {provide: MAT_DATE_FORMATS, useValue: MY_DATE_FORMATS},\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Resetable Menu Item with cdkMenuItemTriggered Output\nDESCRIPTION: Code showing how to create a menu item with a custom action using the cdkMenuItemTriggered output event. This example creates a reset button in a stateful menu.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/menu/menu.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button\n  class=\"example-menu-item\"\n  cdkMenuItem\n  (cdkMenuItemTriggered)=\"resetDefaults()\">\n  Reset\n</button>\n```\n\n----------------------------------------\n\nTITLE: Attaching Autocomplete Panel to Custom Element in Angular\nDESCRIPTION: Shows how to attach an autocomplete panel to a custom wrapper element using matAutocompleteOrigin and matAutocompleteConnectedTo directives.\nSOURCE: https://github.com/angular/components/blob/main/src/material/autocomplete/autocomplete.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"custom-wrapper-example\" matAutocompleteOrigin #origin=\"matAutocompleteOrigin\">\n  <input\n    matInput\n    [formControl]=\"myControl\"\n    [matAutocomplete]=\"auto\"\n    [matAutocompleteConnectedTo]=\"origin\">\n</div>\n\n<mat-autocomplete #auto=\"matAutocomplete\">\n  @for (option of options; track option) {\n    <mat-option [value]=\"option\">{{option}}</mat-option>\n  }\n</mat-autocomplete>\n```\n\n----------------------------------------\n\nTITLE: Fluent API Design in TypeScript\nDESCRIPTION: Shows how to create a builder-pattern style API with method chaining by returning 'this' from methods to enable a fluent interface pattern.\nSOURCE: https://github.com/angular/components/blob/main/CODING_STANDARDS.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass ConfigBuilder {\n  withName(name: string): this {\n    this.config.name = name;\n    return this;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Form Field Module\nDESCRIPTION: This snippet defines the MatFormFieldModule, which is an Angular module that encapsulates all the form field related components and directives for use in Angular applications.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/form-field/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatFormFieldModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatFormFieldModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatFormFieldModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatFormFieldModule, never, [typeof MatCommonModule, typeof i2.ObserversModule, typeof MatFormField, typeof MatLabel, typeof MatError, typeof MatHint, typeof MatPrefix, typeof MatSuffix], [typeof MatFormField, typeof MatLabel, typeof MatHint, typeof MatError, typeof MatPrefix, typeof MatSuffix, typeof MatCommonModule]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Context-specific Themes in Angular Material\nDESCRIPTION: This snippet demonstrates how to apply multiple themes in different contexts within an Angular Material application, using a cyan-based palette for a specific container.\nSOURCE: https://github.com/angular/components/blob/main/guides/theming.md#2025-04-21_snippet_9\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\nhtml {\n  @include mat.theme((\n    color: mat.$violet-palette,\n    typography: Roboto,\n    density: 0,\n  ));\n}\n\n.example-bright-container {\n  @include mat.theme((\n    color: mat.$cyan-palette,\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Using FocusMonitor in TypeScript\nDESCRIPTION: Shows how to use FocusMonitor to listen for focus changes on an element and handle the focus origin outside of Angular zone.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/a11y.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfocusMonitor.monitor(el).subscribe(origin => this.ngZone.run(() => /* ... */ ));\n```\n\n----------------------------------------\n\nTITLE: Disabling Drag and Drop Functionality in Angular CDK\nDESCRIPTION: Shows how to disable dragging for specific items using cdkDragDisabled, disable an entire list with cdkDropListDisabled, or disable a particular handle using cdkDragHandleDisabled.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/drag-drop/drag-drop.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-drag-drop-disabled) -->\n```\n\n----------------------------------------\n\nTITLE: Defining MatDivider and MatDividerModule in TypeScript for Angular Material\nDESCRIPTION: This code snippet defines the MatDivider component and MatDividerModule for Angular Material. MatDivider includes properties for vertical and inset styling, while MatDividerModule sets up the necessary Angular module configuration.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/divider/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\n\n// @public (undocumented)\nexport class MatDivider {\n    get inset(): boolean;\n    set inset(value: BooleanInput);\n    get vertical(): boolean;\n    set vertical(value: BooleanInput);\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatDivider, \"mat-divider\", never, { \"vertical\": { \"alias\": \"vertical\"; \"required\": false; }; \"inset\": { \"alias\": \"inset\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDivider, never>;\n}\n\n// @public (undocumented)\nexport class MatDividerModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDividerModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatDividerModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatDividerModule, never, [typeof MatCommonModule, typeof MatDivider], [typeof MatDivider, typeof MatCommonModule]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Dialog Defaults in TypeScript\nDESCRIPTION: Demonstrates how to specify global default options for dialogs by providing a DEFAULT_DIALOG_CONFIG in the application's root module.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/dialog/dialog.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@NgModule({\n  providers: [\n    {provide: DEFAULT_DIALOG_CONFIG, useValue: {hasBackdrop: false}}\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring CDK Tree with DataSource and TrackBy Function in HTML\nDESCRIPTION: Shows how to connect a CDK Tree to a data source and implement a trackBy function for improved performance. The trackBy function helps the tree efficiently track changes in the data.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/tree/tree.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" [trackBy]=\"trackByFn\">\n```\n\n----------------------------------------\n\nTITLE: Defining MatAutocomplete Component Class\nDESCRIPTION: This snippet defines the MatAutocomplete component class with its properties, methods, and lifecycle hooks for implementing autocomplete functionality.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/autocomplete/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatAutocomplete implements AfterContentInit, OnDestroy {\n    constructor(...args: unknown[]);\n    protected _animationsDisabled: boolean;\n    ariaLabel: string;\n    ariaLabelledby: string;\n    autoActiveFirstOption: boolean;\n    autoSelectActiveOption: boolean;\n    set classList(value: string | string[]);\n    _classList: string | string[];\n    readonly closed: EventEmitter<void>;\n    protected _color: ThemePalette;\n    protected _defaults: MatAutocompleteDefaultOptions;\n    disableRipple: boolean;\n    displayWith: ((value: any) => string) | null;\n    _emitSelectEvent(option: MatOption): void;\n    _getPanelAriaLabelledby(labelId: string | null): string | null;\n    _getScrollTop(): number;\n    get hideSingleSelectionIndicator(): boolean;\n    set hideSingleSelectionIndicator(value: boolean);\n    id: string;\n    readonly inertGroups: boolean;\n    get isOpen(): boolean;\n    _isOpen: boolean;\n    _keyManager: ActiveDescendantKeyManager<MatOption>;\n    _latestOpeningTrigger: unknown;\n    static ngAcceptInputType_autoActiveFirstOption: unknown;\n    static ngAcceptInputType_autoSelectActiveOption: unknown;\n    static ngAcceptInputType_disableRipple: unknown;\n    static ngAcceptInputType_hideSingleSelectionIndicator: unknown;\n    static ngAcceptInputType_requireSelection: unknown;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    readonly opened: EventEmitter<void>;\n    readonly optionActivated: EventEmitter<MatAutocompleteActivatedEvent>;\n    optionGroups: QueryList<MatOptgroup>;\n    options: QueryList<MatOption>;\n    readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent>;\n    panel: ElementRef;\n    panelWidth: string | number;\n    requireSelection: boolean;\n    _setColor(value: ThemePalette): void;\n    _setScrollTop(scrollTop: number): void;\n    _setVisibility(): void;\n    showPanel: boolean;\n    protected _skipPredicate(): boolean;\n    _syncParentProperties(): void;\n    template: TemplateRef<any>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatAutocomplete, \"mat-autocomplete\", [\"matAutocomplete\"], { \"ariaLabel\": { \"alias\": \"aria-label\"; \"required\": false; }; \"ariaLabelledby\": { \"alias\": \"aria-labelledby\"; \"required\": false; }; \"displayWith\": { \"alias\": \"displayWith\"; \"required\": false; }; \"autoActiveFirstOption\": { \"alias\": \"autoActiveFirstOption\"; \"required\": false; }; \"autoSelectActiveOption\": { \"alias\": \"autoSelectActiveOption\"; \"required\": false; }; \"requireSelection\": { \"alias\": \"requireSelection\"; \"required\": false; }; \"panelWidth\": { \"alias\": \"panelWidth\"; \"required\": false; }; \"disableRipple\": { \"alias\": \"disableRipple\"; \"required\": false; }; \"classList\": { \"alias\": \"class\"; \"required\": false; }; \"hideSingleSelectionIndicator\": { \"alias\": \"hideSingleSelectionIndicator\"; \"required\": false; }; }, { \"optionSelected\": \"optionSelected\"; \"opened\": \"opened\"; \"closed\": \"closed\"; \"optionActivated\": \"optionActivated\"; }, [\"options\", \"optionGroups\"], [\"*\"], true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatAutocomplete, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ViewportRuler Class in TypeScript for Angular\nDESCRIPTION: This class provides methods to get information about the viewport, including size, scroll position, and changes. It's useful for responsive design and scroll-based behaviors in Angular applications.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ViewportRuler implements OnDestroy {\n    constructor(...args: unknown[]);\n    change(throttleTime?: number): Observable<Event>;\n    protected _document: Document;\n    getViewportRect(): {\n        top: number;\n        left: number;\n        bottom: number;\n        right: number;\n        height: number;\n        width: number;\n    };\n    getViewportScrollPosition(): ViewportScrollPosition;\n    getViewportSize(): Readonly<{\n        width: number;\n        height: number;\n    }>;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<ViewportRuler, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<ViewportRuler>;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Injected Data in Bottom Sheet Component\nDESCRIPTION: Shows how to access data passed to a bottom sheet component using the MAT_BOTTOM_SHEET_DATA injection token.\nSOURCE: https://github.com/angular/components/blob/main/src/material/bottom-sheet/bottom-sheet.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component, Inject} from '@angular/core';\nimport {MAT_BOTTOM_SHEET_DATA} from '../bottom-sheet';\n\n@Component({\n  selector: 'hobbit-sheet',\n  template: 'passed in {{ data.names }}',\n})\nexport class HobbitSheet {\n  constructor(@Inject(MAT_BOTTOM_SHEET_DATA) public data: {names: string[]}) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatCalendarCell Class in TypeScript\nDESCRIPTION: Implements a calendar cell class for Angular Material datepicker with properties for display value, ARIA label, enabled state, and CSS classes. Each cell represents a date in the calendar view.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatCalendarCell<D = any> {\n    constructor(value: number, displayValue: string, ariaLabel: string, enabled: boolean, cssClasses?: MatCalendarCellCssClasses, compareValue?: number, rawValue?: D | undefined);\n    // (undocumented)\n    ariaLabel: string;\n    // (undocumented)\n    compareValue: number;\n    // (undocumented)\n    cssClasses: MatCalendarCellCssClasses;\n    // (undocumented)\n    displayValue: string;\n    // (undocumented)\n    enabled: boolean;\n    // (undocumented)\n    readonly id: number;\n    // (undocumented)\n    rawValue?: D | undefined;\n    // (undocumented)\n    value: number;\n}\n```\n\n----------------------------------------\n\nTITLE: MatSnackBarContainer Class Definition\nDESCRIPTION: This snippet features the MatSnackBarContainer class, which extends BasePortalOutlet and manages the actual presentation of the snack bar. It handles animations, attachment of components or templates, and lifecycle events for the snack bar.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/snack-bar/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    protected _animationsDisabled: boolean;\n    _animationState: string;\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    // @deprecated\n    attachDomPortal: (portal: DomPortal) => void;\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n    enter(): void;\n    exit(): Observable<void>;\n    _label: ElementRef;\n    _live: AriaLivePoliteness;\n    readonly _liveElementId: string;\n    ngOnDestroy(): void;\n    onAnimationEnd(animationName: string): void;\n    readonly _onAnnounce: Subject<void>;\n    readonly _onEnter: Subject<void>;\n    readonly _onExit: Subject<void>;\n    _portalOutlet: CdkPortalOutlet;\n    _role?: 'status' | 'alert';\n    // (undocumented)\n    snackBarConfig: MatSnackBarConfig<any>;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatSnackBarContainer, \"mat-snack-bar-container\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatSnackBarContainer, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatDatepickerIntl Class in TypeScript\nDESCRIPTION: This class provides internationalization support for the datepicker component. It includes properties for various labels and methods for formatting date ranges.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatDatepickerIntl {\n    calendarLabel: string;\n    readonly changes: Subject<void>;\n    closeCalendarLabel: string;\n    comparisonDateLabel: string;\n    // @deprecated\n    endDateLabel: string;\n    formatYearRange(start: string, end: string): string;\n    formatYearRangeLabel(start: string, end: string): string;\n    nextMonthLabel: string;\n    nextMultiYearLabel: string;\n    nextYearLabel: string;\n    openCalendarLabel: string;\n    prevMonthLabel: string;\n    prevMultiYearLabel: string;\n    prevYearLabel: string;\n    // @deprecated\n    startDateLabel: string;\n    switchToMonthViewLabel: string;\n    switchToMultiYearViewLabel: string;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDatepickerIntl, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<MatDatepickerIntl>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CdkPortalOutlet in HTML for Angular Components\nDESCRIPTION: Demonstrates how to use CdkPortalOutlet directive to add a portal outlet to a template, attaching a previously defined portal.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/portal/portal.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Attaches the `userSettingsPortal` from the previous example. -->\n<ng-template [cdkPortalOutlet]=\"userSettingsPortal\"></ng-template>\n```\n\n----------------------------------------\n\nTITLE: Assigning Value to Multiple-Selection Mat-Select in Angular\nDESCRIPTION: This snippet demonstrates the correct way to assign a value to a mat-select component in multiple-selection mode. It shows both the incorrect and correct approaches.\nSOURCE: https://github.com/angular/components/blob/main/src/material/select/select.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Incorrect\nmySelect.value = 'option1';\n\n// Correct\nmySelect.value = ['option1'];\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Menu Component in TypeScript\nDESCRIPTION: Example implementation of a menu component using Angular with content projection and item management.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  selector: 'my-menu',\n  template: `\n    <my-popup>\n      <ng-content></ng-content>\n    </my-popup>\n  `\n})\nclass MyMenu {\n  @Input() triggerText: string;\n\n  @ContentChildren(MyMenuItem) items: QueryList<MyMenuItem>;\n}\n\n@Directive({\n  selector: 'my-menu-item'\n})\nclass MyMenuItem {}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Dialog Close Event in TypeScript\nDESCRIPTION: Demonstrates how to subscribe to the closed event of a DialogRef to handle the dialog result when it closes.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/dialog/dialog.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndialogRef.closed.subscribe(result => {\n  console.log(`Dialog result: ${result}`); // Pizza!\n});\n\ndialogRef.close('Pizza!');\n```\n\n----------------------------------------\n\nTITLE: Locking Drag Movement to Specific Axis in Angular CDK\nDESCRIPTION: Shows how to restrict dragging to a specific axis (x or y) using cdkDragLockAxis on cdkDrag or cdkDropListLockAxis on cdkDropList.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/drag-drop/drag-drop.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-drag-drop-axis-lock) -->\n```\n\n----------------------------------------\n\nTITLE: Generating Dashboard Component with Material Design\nDESCRIPTION: Command to generate an Angular component containing a dynamic grid list of Material Design cards.\nSOURCE: https://github.com/angular/components/blob/main/guides/schematics.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng generate @angular/material:dashboard <component-name>\n```\n\n----------------------------------------\n\nTITLE: Defining MatDatepickerModule Class in TypeScript\nDESCRIPTION: This class represents the Angular module for the datepicker component. It includes declarations for various sub-components and dependencies.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatDatepickerModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDatepickerModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatDatepickerModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatDatepickerModule, never, [typeof MatButtonModule, typeof i2.OverlayModule, typeof i1_2.A11yModule, typeof i3.PortalModule, typeof MatCommonModule, typeof MatCalendar, typeof MatCalendarBody, typeof MatDatepicker, typeof MatDatepickerContent, typeof MatDatepickerInput, typeof MatDatepickerToggle, typeof MatDatepickerToggleIcon, typeof MatMonthView, typeof MatYearView, typeof MatMultiYearView, typeof MatCalendarHeader, typeof MatDateRangeInput, typeof MatStartDate, typeof MatEndDate, typeof MatDateRangePicker, typeof MatDatepickerActions, typeof MatDatepickerCancel, typeof MatDatepickerApply], [typeof i5.CdkScrollableModule, typeof MatCalendar, typeof MatCalendarBody, typeof MatDatepicker, typeof MatDatepickerContent, typeof MatDatepickerInput, typeof MatDatepickerToggle, typeof MatDatepickerToggleIcon, typeof MatMonthView, typeof MatYearView, typeof MatMultiYearView, typeof MatCalendarHeader, typeof MatDateRangeInput, typeof MatStartDate, typeof MatEndDate, typeof MatDateRangePicker, typeof MatDatepickerActions, typeof MatDatepickerCancel, typeof MatDatepickerApply]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Date Locale in Angular Material Datepicker\nDESCRIPTION: Demonstrates how to configure the locale for the Angular Material datepicker by providing a value for the MAT_DATE_LOCALE injection token at bootstrap.\nSOURCE: https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nbootstapApplication(MyApp, {\n  providers: [{provide: MAT_DATE_LOCALE, useValue: 'en-GB'}],\n});\n```\n\n----------------------------------------\n\nTITLE: Module Declaration for CdkTableModule\nDESCRIPTION: Defines the module declaration for the CdkTableModule. This module provides all the necessary components and directives for creating tables using the Angular CDK.  It lists the declarations, imports, and exports for the module.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkTableModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<CdkTableModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<CdkTableModule, never, [typeof ScrollingModule, typeof CdkTable, typeof CdkRowDef, typeof CdkCellDef, typeof CdkCellOutlet, typeof CdkHeaderCellDef, typeof CdkFooterCellDef, typeof CdkColumnDef, typeof CdkCell, typeof CdkRow, typeof CdkHeaderCell, typeof CdkFooterCell, typeof CdkHeaderRow, typeof CdkHeaderRowDef, typeof CdkFooterRow, typeof CdkFooterRowDef, typeof DataRowOutlet, typeof HeaderRowOutlet, typeof FooterRowOutlet, typeof CdkTextColumn, typeof CdkNoDataRow, typeof CdkRecycleRows, typeof NoDataRowOutlet], [typeof CdkTable, typeof CdkRowDef, typeof CdkCellDef, typeof CdkCellOutlet, typeof CdkHeaderCellDef, typeof CdkFooterCellDef, typeof CdkColumnDef, typeof CdkCell, typeof CdkRow, typeof CdkHeaderCell, typeof CdkFooterCell, typeof CdkHeaderRow, typeof CdkHeaderRowDef, typeof CdkFooterRow, typeof CdkFooterRowDef, typeof DataRowOutlet, typeof HeaderRowOutlet, typeof FooterRowOutlet, typeof CdkTextColumn, typeof CdkNoDataRow, typeof CdkRecycleRows, typeof NoDataRowOutlet]>;\n```\n\n----------------------------------------\n\nTITLE: Setting ARIA Labels in Angular Material Radio Button\nDESCRIPTION: Example showing how to properly bind aria-label to a mat-radio-button component dynamically without using attr prefix. This demonstrates the accessibility-focused implementation for radio buttons without visible text content.\nSOURCE: https://github.com/angular/components/blob/main/src/material/radio/radio.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mat-radio-button [aria-label]=\"getMultipleChoiceAnswer()\">\n</mat-radio-button>\n```\n\n----------------------------------------\n\nTITLE: List Key Manager Implementation\nDESCRIPTION: Manager class for handling keyboard navigation in lists. Supports type-ahead, horizontal/vertical navigation, and various keyboard shortcuts.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/a11y/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n    constructor(items: QueryList<T> | T[] | readonly T[]);\n    constructor(items: Signal<T[]> | Signal<readonly T[]>, injector: Injector);\n    get activeItem(): T | null;\n    get activeItemIndex(): number | null;\n    setActiveItem(index: number): void;\n    setActiveItem(item: T): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Dialog Content in HTML\nDESCRIPTION: Demonstrates how to structure dialog content using Material Dialog directives, including mat-dialog-title, mat-dialog-content, mat-dialog-actions, and mat-dialog-close.\nSOURCE: https://github.com/angular/components/blob/main/src/material/dialog/dialog.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<h2 mat-dialog-title>Delete all elements?</h2>\n<mat-dialog-content>This will delete all elements that are currently on this page and cannot be undone.</mat-dialog-content>\n<mat-dialog-actions>\n  <button matButton mat-dialog-close>Cancel</button>\n  <!-- The mat-dialog-close directive optionally accepts a value as a result for the dialog. -->\n  <button matButton [mat-dialog-close]=\"true\">Delete</button>\n</mat-dialog-actions>\n```\n\n----------------------------------------\n\nTITLE: Scroll Dispatcher Class Definition\nDESCRIPTION: Defines a ScrollDispatcher class that manages scrollable elements and their subscriptions. Provides methods to register, deregister and track scroll events on elements.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/scrolling/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ScrollDispatcher implements OnDestroy {\n    constructor(...args: unknown[]);\n    ancestorScrolled(elementOrElementRef: ElementRef | HTMLElement, auditTimeInMs?: number): Observable<CdkScrollable | void>;\n    deregister(scrollable: CdkScrollable): void;\n    getAncestorScrollContainers(elementOrElementRef: ElementRef | HTMLElement): CdkScrollable[];\n    ngOnDestroy(): void;\n    register(scrollable: CdkScrollable): void;\n    scrollContainers: Map<CdkScrollable, Subscription>;\n    scrolled(auditTimeInMs?: number): Observable<CdkScrollable | void>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<ScrollDispatcher, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<ScrollDispatcher>;\n}\n```\n\n----------------------------------------\n\nTITLE: Reactive Forms with Angular CDK Listbox\nDESCRIPTION: Demonstrates the usage of CDK listbox with reactive forms in Angular, using formControlName for form control binding.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/listbox/listbox.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<form [formGroup]=\"form\">\n  <ul cdkListbox formControlName=\"options\">\n    <li cdkOption value=\"1\">Option 1</li>\n    <li cdkOption value=\"2\">Option 2</li>\n    <li cdkOption value=\"3\">Option 3</li>\n  </ul>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining CdkOption Class in TypeScript for Angular CDK\nDESCRIPTION: Implements an option component for use within a CdkListbox. Handles selection, focus, and accessibility features for individual listbox options.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/listbox/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class CdkOption<T = unknown> implements ListKeyManagerOption, Highlightable, OnDestroy {\n    readonly _clicked: Subject<MouseEvent>;\n    deselect(): void;\n    protected destroyed: Subject<void>;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    readonly element: HTMLElement;\n    get enabledTabIndex(): number | null | undefined;\n    set enabledTabIndex(value: number | null | undefined);\n    focus(): void;\n    getLabel(): string;\n    // ... (other methods and properties)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatTabHarness for Angular Material Testing\nDESCRIPTION: This class serves as a test harness for individual MatTab components, providing methods to get text content, check selection status, and interact with the tabs. It also supports options for filtering through a HarnessPredicate.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/testing/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatTabHarness extends ContentContainerComponentHarness<string> {\n    getAriaLabel(): Promise<string | null>;\n    getAriaLabelledby(): Promise<string | null>;\n    getLabel(): Promise<string>;\n    // (undocumented)\n    protected getRootHarnessLoader(): Promise<HarnessLoader>;\n    getTextContent(): Promise<string>;\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isSelected(): Promise<boolean>;\n    select(): Promise<void>;\n    static with<T extends MatTabHarness>(this: ComponentHarnessConstructor<T>, options?: TabHarnessFilters): HarnessPredicate<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Angular Module with TypeScript\nDESCRIPTION: This snippet declares the MatSelectModule using Angular's NgModule framework in TypeScript, defining its dependencies with other modules like OverlayModule and MatOptionModule. This modular declaration enables the integration and management of MatSelect components within an Angular application.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/select/index.api.md#2025-04-21_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatSelectModule { static ɵfac: i0.ɵɵFactoryDeclaration<MatSelectModule, never>; static ɵinj: i0.ɵɵInjectorDeclaration<MatSelectModule>; static ɵmod: i0.ɵɵNgModuleDeclaration<MatSelectModule, never, [typeof i2.OverlayModule, typeof MatOptionModule, typeof MatCommonModule, typeof MatSelect, typeof MatSelectTrigger], [typeof i5.CdkScrollableModule, typeof MatFormFieldModule, typeof MatSelect, typeof MatSelectTrigger, typeof MatOptionModule, typeof MatCommonModule]>; }\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Tooltip in Angular\nDESCRIPTION: This example demonstrates how to use the basic tooltip component in Angular Material.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tooltip/tooltip.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(tooltip-overview) -->\n```\n\n----------------------------------------\n\nTITLE: Complex Navigation Lists in Angular Material\nDESCRIPTION: Implementation of a navigation list with additional interactive elements like buttons using matListItemMeta.\nSOURCE: https://github.com/angular/components/blob/main/src/material/list/list.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<mat-nav-list>\n  @for (link of links; track link) {\n    <mat-list-item [activated]=\"link.isActive\">\n       <a matListItemTitle href=\"...\">{{ link }}</a>\n       <button matIconButton (click)=\"showInfo(link)\" matListItemMeta>\n          <mat-icon>info</mat-icon>\n       </button>\n    </mat-list-item>\n  }\n</mat-nav-list>\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Selection Model in Angular Material Table\nDESCRIPTION: TypeScript implementation for handling row selection state using SelectionModel from @angular/cdk/collections.\nSOURCE: https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst initialSelection = [];\nconst allowMultiSelect = true;\nthis.selection = new SelectionModel<MyDataType>(allowMultiSelect, initialSelection);\n```\n\n----------------------------------------\n\nTITLE: Disabling Sorting in Drag and Drop Lists with Angular CDK\nDESCRIPTION: Demonstrates how to use cdkDropListSortingDisabled to prevent sorting within a source list while still allowing items to be dragged between lists.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/drag-drop/drag-drop.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-drag-drop-disabled-sorting) -->\n```\n\n----------------------------------------\n\nTITLE: Handling Focus Restoration in Bottom Sheets\nDESCRIPTION: Shows how to handle focus restoration when closing a bottom sheet, especially in cases where the previously focused element no longer exists.\nSOURCE: https://github.com/angular/components/blob/main/src/material/bottom-sheet/bottom-sheet.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst bottomSheetRef = bottomSheet.open(FileTypeChooser);\nbottomSheetRef.afterDismissed().subscribe(() => {\n  // Restore focus to an appropriate element for the user's workflow here.\n});\n```\n\n----------------------------------------\n\nTITLE: Lists with Icons in Angular Material\nDESCRIPTION: Implementation of a list with icons using matListItemIcon directive alongside content.\nSOURCE: https://github.com/angular/components/blob/main/src/material/list/list.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<mat-list>\n  @for (message of messages; track message) {\n    <mat-list-item>\n      <mat-icon matListItemIcon>folder</mat-icon>\n      <h3 matListItemTitle>{{message.from}}</h3>\n      <p matListItemLine>\n        <span>{{message.subject}}</span>\n        <span class=\"demo-2\"> -- {{message.content}}</span>\n      </p>\n    </mat-list-item>\n  }\n</mat-list>\n```\n\n----------------------------------------\n\nTITLE: Copying to Clipboard on Click Using cdkCopyToClipboard Directive in Angular\nDESCRIPTION: Demonstrates how to use the cdkCopyToClipboard directive to add copy-on-click functionality to an HTML element. The directive also serves as an @Input() for the text to be copied.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/clipboard/clipboard.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"avatar.jpg\" alt=\"Hero avatar\" [cdkCopyToClipboard]=\"getShortBio()\">\n```\n\n----------------------------------------\n\nTITLE: MatRadioGroup Component Implementation\nDESCRIPTION: Implements the MatRadioGroup component representing a group of radio buttons. It manages the selected state, emits change events, and handles control value accessor methods. Dependencies include Angular core, forms, and CDK.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/radio/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatRadioGroup implements AfterContentInit, OnDestroy, ControlValueAccessor {\n    constructor(...args: unknown[]);\n    readonly change: EventEmitter<MatRadioChange>;\n    // (undocumented)\n    _checkSelectedRadioButton(): void;\n    color: ThemePalette;\n    _controlValueAccessorChangeFn: (value: any) => void;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    get disabledInteractive(): boolean;\n    set disabledInteractive(value: boolean);\n    _emitChangeEvent(): void;\n    get labelPosition(): 'before' | 'after';\n    set labelPosition(v: \"before\" | \"after\");\n    // (undocumented)\n    _markRadiosForCheck(): void;\n    get name(): string;\n    set name(value: string);\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    static ngAcceptInputType_disabledInteractive: unknown;\n    // (undocumented)\n    static ngAcceptInputType_required: unknown;\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    onTouched: () => any;\n    _radios: QueryList<MatRadioButton>;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: any): void;\n    get required(): boolean;\n    set required(value: boolean);\n    get selected(): MatRadioButton | null;\n    set selected(selected: MatRadioButton | null);\n    setDisabledState(isDisabled: boolean): void;\n    _touch(): void;\n    get value(): any;\n    set value(newValue: any);\n    writeValue(value: any): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatRadioGroup, \"mat-radio-group\", [\"matRadioGroup\"], { \"color\": { \"alias\": \"color\"; \"required\": false; }; \"name\": { \"alias\": \"name\"; \"required\": false; }; \"labelPosition\": { \"alias\": \"labelPosition\"; \"required\": false; }; \"value\": { \"alias\": \"value\"; \"required\": false; }; \"selected\": { \"alias\": \"selected\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"required\": { \"alias\": \"required\"; \"required\": false; }; \"disabledInteractive\": { \"alias\": \"disabledInteractive\"; \"required\": false; }; }, { \"change\": \"change\"; }, [\"_radios\"], never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatRadioGroup, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Form Field Appearance in Angular\nDESCRIPTION: Sets the default appearance for all mat-form-field components in an Angular application to 'outline' style using dependency injection.\nSOURCE: https://github.com/angular/components/blob/main/src/material/form-field/form-field.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@NgModule({\n  providers: [\n    {provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: {appearance: 'outline'}}\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Exporting Angular Component with Multiple Interfaces\nDESCRIPTION: This snippet defines the MatSelect component in TypeScript, implementing multiple Angular lifecycle interfaces such as AfterContentInit, OnChanges, and OnDestroy. It provides detailed methods and properties for handling selections, focus events, and configurations within a Material Design Select component. Dependencies include ChangeDetectorRef and various Angular Material configurations.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/select/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatSelect implements AfterContentInit, OnChanges, OnDestroy, OnInit, DoCheck, ...{ constructor(...args: unknown[]); protected _animationsDisabled: boolean; ariaLabel: string; ariaLabelledby: string; ...}\n```\n\n----------------------------------------\n\nTITLE: CdkTable with Fixed Layout\nDESCRIPTION: This snippet shows how to enable fixed layout for CdkTable, which can improve performance for large tables by enforcing uniform column widths.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/table/table.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<table cdk-table [dataSource]=\"dataSource\" fixedLayout>\n```\n\n----------------------------------------\n\nTITLE: Creating Mat Table Harness in Angular CDK Testing\nDESCRIPTION: The MatTableHarness class provides methods for interacting with Angular Material table elements like cells, footer rows, header rows, and data rows. It implements filtering and data extraction functionalities, including hostSelector and with() for identifying elements.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/table/testing/index.api.md#2025-04-21_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatTableHarness extends ContentContainerComponentHarness<string> {\n    getCellTextByColumnName(): Promise<MatTableHarnessColumnsText>;\n    getCellTextByIndex(): Promise<string[][]>;\n    getFooterRows(filter?: RowHarnessFilters): Promise<MatFooterRowHarness[]>;\n    getHeaderRows(filter?: RowHarnessFilters): Promise<MatHeaderRowHarness[]>;\n    getRows(filter?: RowHarnessFilters): Promise<MatRowHarness[]>;\n    _headerRowHarness: typeof MatHeaderRowHarness;\n    static hostSelector: string;\n    _rowHarness: typeof MatRowHarness;\n    static with<T extends MatTableHarness>(this: ComponentHarnessConstructor<T>, options?: TableHarnessFilters): HarnessPredicate<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Virtual Scrolling with Parent Tag Requirements in Angular\nDESCRIPTION: Example of virtual scrolling for elements with parent tag requirements like <tr> and <li>. Places elements in their proper parent and wraps everything in a cdk-virtual-scroll-viewport.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/scrolling/scrolling.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-virtual-scroll-dl) -->\n```\n\n----------------------------------------\n\nTITLE: Defining MatDrawer as a Class in Angular Material\nDESCRIPTION: This snippet defines the MatDrawer class for the Angular Material library. It implements AfterViewInit and OnDestroy interfaces, providing methods for opening and closing the drawer, as well as handling various properties like 'mode' and 'position'. The class relies on Angular core and CDK libraries for its functionality.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sidenav/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterViewInit } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\n\n// @public\nexport class MatDrawer implements AfterViewInit, OnDestroy {\n    constructor(...args: unknown[]);\n    readonly _animationEnd: Subject<unknown>;\n    readonly _animationStarted: Subject<unknown>;\n    get autoFocus(): AutoFocusTarget | string | boolean;\n    set autoFocus(value: AutoFocusTarget | string | BooleanInput);\n    close(): Promise<MatDrawerToggleResult>;\n    readonly closedStart: Observable<void>;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult>;\n    readonly opened: boolean;\n    set opened(value: BooleanInput);\n    get position(): 'start' | 'end';\n    set position(value: 'start' | 'end');\n    toggle(isOpen?: boolean, openedVia?: FocusOrigin): Promise<MatDrawerToggleResult>;\n    // More properties and methods...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FakeMatIconRegistry Class in Angular TypeScript\nDESCRIPTION: This TypeScript snippet defines the FakeMatIconRegistry class, which implements the PublicApi interface for MatIconRegistry and OnDestroy lifecycle hook. The class provides methods to add, retrieve, and manage SVG icons, while maintaining compatibility with Angular lifecycles. Key methods are getNamedSvgIcon and getSvgIconFromUrl, both returning Observables. Dependencies include angular/core, angular/common/http, and rxjs.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/icon/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ErrorHandler } from '@angular/core';\nimport { HarnessPredicate } from '@angular/cdk/testing';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { SafeResourceUrl } from '@angular/platform-browser';\n\n// @public\nexport class FakeMatIconRegistry implements PublicApi<MatIconRegistry>, OnDestroy {\n    // (undocumented)\n    addSvgIcon(): this;\n    // (undocumented)\n    addSvgIconInNamespace(): this;\n    // (undocumented)\n    addSvgIconLiteral(): this;\n    // (undocumented)\n    addSvgIconLiteralInNamespace(): this;\n    // (undocumented)\n    addSvgIconResolver(): this;\n    // (undocumented)\n    addSvgIconSet(): this;\n    // (undocumented)\n    addSvgIconSetInNamespace(): this;\n    // (undocumented)\n    addSvgIconSetLiteral(): this;\n    // (undocumented)\n    addSvgIconSetLiteralInNamespace(): this;\n    // (undocumented)\n    classNameForFontAlias(alias: string): string;\n    // (undocumented)\n    getDefaultFontSetClass(): string[];\n    // (undocumented)\n    getNamedSvgIcon(): Observable<SVGElement>;\n    // (undocumented)\n    getSvgIconFromUrl(): Observable<SVGElement>;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    registerFontClassAlias(): this;\n    // (undocumented)\n    setDefaultFontSetClass(): this;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<FakeMatIconRegistry, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<FakeMatIconRegistry>;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling MatSnackBarRef Events in TypeScript\nDESCRIPTION: Shows how to use the MatSnackBarRef to subscribe to dismissal and action events, and how to manually dismiss a snackbar.\nSOURCE: https://github.com/angular/components/blob/main/src/material/snack-bar/snack-bar.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsnackBarRef.afterDismissed().subscribe(() => {\n  console.log('The snackbar was dismissed');\n});\n\n\nsnackBarRef.onAction().subscribe(() => {\n  console.log('The snackbar action was triggered!');\n});\n\nsnackBarRef.dismiss();\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Button Toggle API\nDESCRIPTION: TypeScript definitions for Angular Material's button toggle component including classes, interfaces, and injection tokens. Includes functionality for button toggle groups, individual toggles, and their associated configuration options.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/button-toggle/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterContentInit } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Direction } from '@angular/cdk/bidi';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport { InjectionToken } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { QueryList } from '@angular/core';\n\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS: InjectionToken<MatButtonToggleDefaultOptions>;\n\nexport const MAT_BUTTON_TOGGLE_GROUP: InjectionToken<MatButtonToggleGroup>;\n\nexport function MAT_BUTTON_TOGGLE_GROUP_DEFAULT_OPTIONS_FACTORY(): MatButtonToggleDefaultOptions;\n\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any;\n\nexport class MatButtonToggle implements OnInit, AfterViewInit, OnDestroy {\n    constructor(...args: unknown[]);\n    get appearance(): MatButtonToggleAppearance;\n    set appearance(value: MatButtonToggleAppearance);\n    ariaLabel: string;\n    ariaLabelledby: string | null;\n    _buttonElement: ElementRef<HTMLButtonElement>;\n    get buttonId(): string;\n    buttonToggleGroup: MatButtonToggleGroup;\n    readonly change: EventEmitter<MatButtonToggleChange>;\n    get checked(): boolean;\n    set checked(value: boolean);\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    get disabledInteractive(): boolean;\n    set disabledInteractive(value: boolean);\n    disableRipple: boolean;\n    focus(options?: FocusOptions): void;\n    _getButtonName(): string | null;\n    id: string;\n    isSingleSelector(): boolean;\n    _markForCheck(): void;\n    name: string;\n    static ngAcceptInputType_checked: unknown;\n    static ngAcceptInputType_disabled: unknown;\n    static ngAcceptInputType_disabledInteractive: unknown;\n    static ngAcceptInputType_disableRipple: unknown;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    _onButtonClick(): void;\n    get tabIndex(): number | null;\n    set tabIndex(value: number | null);\n    value: any;\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatButtonToggle, \"mat-button-toggle\", [\"matButtonToggle\"], { \"ariaLabel\": { \"alias\": \"aria-label\"; \"required\": false; }; \"ariaLabelledby\": { \"alias\": \"aria-labelledby\"; \"required\": false; }; \"id\": { \"alias\": \"id\"; \"required\": false; }; \"name\": { \"alias\": \"name\"; \"required\": false; }; \"value\": { \"alias\": \"value\"; \"required\": false; }; \"tabIndex\": { \"alias\": \"tabIndex\"; \"required\": false; }; \"disableRipple\": { \"alias\": \"disableRipple\"; \"required\": false; }; \"appearance\": { \"alias\": \"appearance\"; \"required\": false; }; \"checked\": { \"alias\": \"checked\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"disabledInteractive\": { \"alias\": \"disabledInteractive\"; \"required\": false; }; }, { \"change\": \"change\"; }, never, [\"*\"], true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatButtonToggle, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MatSliderVisualThumb Component in TypeScript\nDESCRIPTION: This code snippet defines the MatSliderVisualThumb class which implements visual representation of a slider thumb. It includes methods for managing the visual state, value indicators, and ripple effects. The class contains properties for discrete mode, thumb positioning, and DOM element references.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/slider/index.api.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatSliderVisualThumb implements _MatSliderVisualThumb, AfterViewInit, OnDestroy {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    readonly _cdr: ChangeDetectorRef;\n    discrete: boolean;\n    _getKnob(): HTMLElement;\n    // (undocumented)\n    _getSibling(): _MatSliderVisualThumb;\n    _getValueIndicatorContainer(): HTMLElement | undefined;\n    _hideValueIndicator(): void;\n    _hostElement: HTMLElement;\n    _isActive: boolean;\n    // (undocumented)\n    _isShowingAnyRipple(): boolean;\n    _isValueIndicatorVisible: boolean;\n    _knob: ElementRef<HTMLElement>;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    readonly _ripple: MatRipple;\n    _showValueIndicator(): void;\n    thumbPosition: _MatThumb;\n    _valueIndicatorContainer: ElementRef<HTMLElement>;\n    valueIndicatorText: string;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatSliderVisualThumb, \"mat-slider-visual-thumb\", never, { \"discrete\": { \"alias\": \"discrete\"; \"required\": false; }; \"thumbPosition\": { \"alias\": \"thumbPosition\"; \"required\": false; }; \"valueIndicatorText\": { \"alias\": \"valueIndicatorText\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatSliderVisualThumb, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OverlayContainer Class in TypeScript\nDESCRIPTION: This class manages the creation and access of the overlay container element in the DOM.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class OverlayContainer implements OnDestroy {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    protected _containerElement: HTMLElement;\n    protected _createContainer(): void;\n    // (undocumented)\n    protected _document: Document;\n    getContainerElement(): HTMLElement;\n    protected _loadStyles(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    protected _platform: Platform;\n    // (undocumented)\n    protected _styleLoader: _CdkPrivateStyleLoader;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<OverlayContainer, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<OverlayContainer>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Remove Button to Chip Option\nDESCRIPTION: Implementation of a removable chip option with an icon button.\nSOURCE: https://github.com/angular/components/blob/main/src/material/chips/chips.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n <mat-chip-option>\n  Orange\n  <button matChipRemove aria-label=\"Remove orange\">\n    <mat-icon>cancel</mat-icon>\n  </button>\n</mat-chip-option>\n```\n\n----------------------------------------\n\nTITLE: Adding Expand/Collapse Functionality to Tree Nodes in HTML\nDESCRIPTION: Shows how to implement expand/collapse functionality using the cdkTreeNodeToggle directive. This example includes a toggle button with an icon and demonstrates how to make the toggle recursive.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/tree/tree.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<cdk-tree-node *cdkNodeDef=\"let node\">\n  <button cdkTreeNodeToggle aria-label=\"toggle tree node\" [cdkTreeNodeToggleRecursive]=\"true\">\n    <mat-icon>expand</mat-icon>\n  </button>\n  {{node.value}}\n</cdk-tree-node>\n```\n\n----------------------------------------\n\nTITLE: Custom Scrolling Strategy for Virtual Scrolling in Angular\nDESCRIPTION: Implementation of a custom VirtualScrollStrategy by creating a class that implements the VirtualScrollStrategy interface and providing it as the VIRTUAL_SCROLL_STRATEGY on the component.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/scrolling/scrolling.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-virtual-scroll-custom-strategy) -->\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Expansion Accordion in Angular\nDESCRIPTION: Shows how to create an accordion with multiple expansion panels where more than one panel can be expanded simultaneously.\nSOURCE: https://github.com/angular/components/blob/main/src/material/expansion/expansion.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<mat-accordion multi=\"true\">\n  <mat-expansion-panel>\n    <mat-expansion-panel-header>\n      Panel 1\n    </mat-expansion-panel-header>\n    <p>Panel 1 content</p>\n  </mat-expansion-panel>\n  <mat-expansion-panel>\n    <mat-expansion-panel-header>\n      Panel 2\n    </mat-expansion-panel-header>\n    <p>Panel 2 content</p>\n  </mat-expansion-panel>\n</mat-accordion>\n```\n\n----------------------------------------\n\nTITLE: Copying Long Text to Clipboard with Retry Logic in Angular\nDESCRIPTION: Demonstrates how to copy longer text to the clipboard using the beginCopy method of the Clipboard service. It includes retry logic and proper cleanup of the PendingCopy object.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/clipboard/clipboard.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Clipboard} from '@angular/cdk/clipboard';\n\nclass HeroProfile {\n  lifetimeAchievements: string;\n\n  constructor(private clipboard: Clipboard) {}\n\n  copyAchievements() {\n    const pending = this.clipboard.beginCopy(this.lifetimeAchievements);\n    let remainingAttempts = 3;\n    const attempt = () => {\n      const result = pending.copy();\n      if (!result && --remainingAttempts) {\n        setTimeout(attempt);\n      } else {\n        // Remember to destroy when you're done!\n        pending.destroy();\n      }\n    };\n    attempt();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Progress Bar in Angular Material\nDESCRIPTION: Example of using the query mode for the <mat-progress-bar> component. This mode is used to indicate pre-loading before the actual loading begins. It renders as an inverted 'indeterminate' bar, and the 'value' property is ignored in this mode.\nSOURCE: https://github.com/angular/components/blob/main/src/material/progress-bar/progress-bar.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(progress-bar-query) -->\n```\n\n----------------------------------------\n\nTITLE: Defining Injection Tokens for MatSnackBar\nDESCRIPTION: This snippet defines two InjectionTokens, MAT_SNACK_BAR_DATA and MAT_SNACK_BAR_DEFAULT_OPTIONS, which are used for configuration and data handling in the MatSnackBar component. The tokens are essential for dependency injection within Angular applications using MatSnackBar.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/snack-bar/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const MAT_SNACK_BAR_DATA: InjectionToken<any>;\n\n// @public\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS: InjectionToken<MatSnackBarConfig<any>>;\n\n// @public @deprecated\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig;\n```\n\n----------------------------------------\n\nTITLE: Enabling Tick Marks on Angular Material Slider in HTML\nDESCRIPTION: This example shows how to enable tick marks along the thumb track of the slider. It uses the showTickMarks attribute on the mat-slider component.\nSOURCE: https://github.com/angular/components/blob/main/src/material/slider/slider.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<mat-slider showTickMarks>\n  <input matSliderThumb>\n</mat-slider>\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Component Class\nDESCRIPTION: This snippet defines a MatSelectChange class with a constructor for capturing selection changes in a MatSelect component using TypeScript. It holds references to the source MatSelect component and the selected value, making it integral to handling selection events within Angular Material.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/select/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatSelectChange<T = any> { constructor(source: MatSelect, value: T); source: MatSelect; value: T; }\n```\n\n----------------------------------------\n\nTITLE: Implementing MapInfoWindow Component in Angular TypeScript\nDESCRIPTION: TypeScript component implementation that demonstrates how to handle Google Maps info windows and markers. It includes marker position management, info window reference handling via ViewChild, and click event handling for both map and markers.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-info-window/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component, ViewChild} from '@angular/core';\nimport {GoogleMap, MapInfoWindow, MapMarker} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap, MapInfoWindow, MapMarker],\n})\nexport class GoogleMapDemo {\n  @ViewChild(MapInfoWindow) infoWindow: MapInfoWindow;\n\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  markerPositions: google.maps.LatLngLiteral[] = [];\n  zoom = 4;\n\n  addMarker(event: google.maps.MapMouseEvent) {\n    this.markerPositions.push(event.latLng.toJSON());\n  }\n\n  openInfoWindow(marker: MapMarker) {\n    this.infoWindow.open(marker);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Template-driven Forms with Angular CDK Listbox\nDESCRIPTION: Shows how to use the CDK listbox with template-driven forms in Angular, utilizing ngModel for two-way binding.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/listbox/listbox.md#2025-04-21_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<ul cdkListbox [(ngModel)]=\"selectedValues\" name=\"options\">\n  <li cdkOption value=\"1\">Option 1</li>\n  <li cdkOption value=\"2\">Option 2</li>\n  <li cdkOption value=\"3\">Option 3</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: MatRadioButton Component Implementation\nDESCRIPTION: Implements the MatRadioButton component which is a key part of the Angular Material radio control elements. It features properties like 'checked', 'disabled', and emits change events. It requires Angular core and CDK for its dependencies.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/radio/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatRadioButton implements OnInit, AfterViewInit, DoCheck, OnDestroy {\n    constructor(...args: unknown[]);\n    ariaDescribedby: string;\n    ariaLabel: string;\n    ariaLabelledby: string;\n    readonly change: EventEmitter<MatRadioChange>;\n    get checked(): boolean;\n    set checked(value: boolean);\n    get color(): ThemePalette;\n    set color(newValue: ThemePalette);\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    get disabledInteractive(): boolean;\n    set disabledInteractive(value: boolean);\n    disableRipple: boolean;\n    // (undocumented)\n    protected _elementRef: ElementRef<any>;\n    focus(options?: FocusOptions, origin?: FocusOrigin): void;\n    id: string;\n    _inputElement: ElementRef<HTMLInputElement>;\n    get inputId(): string;\n    // (undocumented)\n    _isRippleDisabled(): boolean;\n    get labelPosition(): 'before' | 'after';\n    set labelPosition(value: \"before\" | \"after\");\n    _markForCheck(): void;\n    name: string;\n    // (undocumented)\n    static ngAcceptInputType_checked: unknown;\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    static ngAcceptInputType_disabledInteractive: unknown;\n    // (undocumented)\n    static ngAcceptInputType_disableRipple: unknown;\n    // (undocumented)\n    static ngAcceptInputType_required: unknown;\n    // (undocumented)\n    static ngAcceptInputType_tabIndex: unknown;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngDoCheck(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    ngOnInit(): void;\n    _noopAnimations: boolean;\n    _onInputInteraction(event: Event): void;\n    _onTouchTargetClick(event: Event): void;\n    radioGroup: MatRadioGroup;\n    get required(): boolean;\n    set required(value: boolean);\n    _rippleTrigger: ElementRef<HTMLElement>;\n    protected _setDisabled(value: boolean): void;\n    tabIndex: number;\n    get value(): any;\n    set value(value: any);\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatRadioButton, \"mat-radio-button\", [\"matRadioButton\"], { \"id\": { \"alias\": \"id\"; \"required\": false; }; \"name\": { \"alias\": \"name\"; \"required\": false; }; \"ariaLabel\": { \"alias\": \"aria-label\"; \"required\": false; }; \"ariaLabelledby\": { \"alias\": \"aria-labelledby\"; \"required\": false; }; \"ariaDescribedby\": { \"alias\": \"aria-describedby\"; \"required\": false; }; \"disableRipple\": { \"alias\": \"disableRipple\"; \"required\": false; }; \"tabIndex\": { \"alias\": \"tabIndex\"; \"required\": false; }; \"checked\": { \"alias\": \"checked\"; \"required\": false; }; \"value\": { \"alias\": \"value\"; \"required\": false; }; \"labelPosition\": { \"alias\": \"labelPosition\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"required\": { \"alias\": \"required\"; \"required\": false; }; \"color\": { \"alias\": \"color\"; \"required\": false; }; \"disabledInteractive\": { \"alias\": \"disabledInteractive\"; \"required\": false; }; }, { \"change\": \"change\"; }, never, [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatRadioButton, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Tab Navigation Bar Implementation\nDESCRIPTION: Shows how to implement tab-based navigation using mat-tab-nav-bar for routing between different views.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tabs/tabs.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<nav mat-tab-nav-bar>\n  <a mat-tab-link\n     *ngFor=\"let link of links\"\n     [active]=\"activeLink == link\"\n     (click)=\"activeLink = link\">\n    {{link}}\n  </a>\n</nav>\n<mat-tab-nav-panel>\n```\n\n----------------------------------------\n\nTITLE: Defining Angular CDK Observers Module TypeScript Classes and Interfaces\nDESCRIPTION: Defines the core classes and interfaces for the Angular CDK Observers module, including CdkObserveContent directive, ContentObserver service, MutationObserverFactory, and ObserversModule. These components enable monitoring DOM mutations and content changes in Angular applications.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/observers/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterContentInit } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\n\n// @public\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\n    constructor(...args: unknown[]);\n    get debounce(): number;\n    set debounce(value: NumberInput);\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    readonly event: EventEmitter<MutationRecord[]>;\n    static ngAcceptInputType_disabled: unknown;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkObserveContent, \"[cdkObserveContent]\", [\"cdkObserveContent\"], { \"disabled\": { \"alias\": \"cdkObserveContentDisabled\"; \"required\": false; }; \"debounce\": { \"alias\": \"debounce\"; \"required\": false; }; }, { \"event\": \"cdkObserveContent\"; }, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkObserveContent, never>;\n}\n\n// @public\nexport class ContentObserver implements OnDestroy {\n    constructor(...args: unknown[]);\n    ngOnDestroy(): void;\n    observe(element: Element): Observable<MutationRecord[]>;\n    observe(element: ElementRef<Element>): Observable<MutationRecord[]>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<ContentObserver, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<ContentObserver>;\n}\n\n// @public\nexport class MutationObserverFactory {\n    create(callback: MutationCallback): MutationObserver | null;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MutationObserverFactory, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<MutationObserverFactory>;\n}\n\n// @public (undocumented)\nexport class ObserversModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<ObserversModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<ObserversModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<ObserversModule, never, [typeof CdkObserveContent], [typeof CdkObserveContent]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Alternate Drag Root Element in Angular CDK\nDESCRIPTION: Explains how to use cdkDragRootElement to make an element draggable when direct access is not available. Useful for scenarios like making a dialog draggable.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/drag-drop/drag-drop.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-drag-drop-root-element) -->\n```\n\n----------------------------------------\n\nTITLE: Creating MatTimepickerInputHarness Class in Angular\nDESCRIPTION: This snippet defines the MatTimepickerInputHarness class, allowing tests to simulate user interactions with the MatTimepicker input. It includes methods for focus, blur, getting the current value, and opening the timepicker. The class also has filters for custom input handling.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/timepicker/testing/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatTimepickerInputHarness extends ComponentHarness {\n    blur(): Promise<void>;\n    closeTimepicker(): Promise<void>;\n    focus(): Promise<void>;\n    getPlaceholder(): Promise<string>;\n    getTimepicker(filter?: TimepickerHarnessFilters): Promise<MatTimepickerHarness>;\n    getValue(): Promise<string>;\n    // (undocumented)\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isFocused(): Promise<boolean>;\n    isRequired(): Promise<boolean>;\n    isTimepickerOpen(): Promise<boolean>;\n    openTimepicker(): Promise<MatTimepickerHarness>;\n    setValue(newValue: string): Promise<void>;\n    static with<T extends MatTimepickerInputHarness>(this: ComponentHarnessConstructor<T>, options?: TimepickerInputHarnessFilters): HarnessPredicate<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Angular CDK Layout API Types and Classes\nDESCRIPTION: Typescript declarations for the Angular CDK Layout module including breakpoint observation, media matching, and layout utilities. Defines core classes like BreakpointObserver for responsive layout detection and MediaMatcher for media query handling.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/layout/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as i0 from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\n\n// @public\nexport class BreakpointObserver implements OnDestroy {\n    constructor(...args: unknown[]);\n    isMatched(value: string | readonly string[]): boolean;\n    ngOnDestroy(): void;\n    observe(value: string | readonly string[]): Observable<BreakpointState>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<BreakpointObserver, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<BreakpointObserver>;\n}\n\n// @public (undocumented)\nexport const Breakpoints: {\n    XSmall: string;\n    Small: string;\n    Medium: string;\n    Large: string;\n    XLarge: string;\n    Handset: string;\n    Tablet: string;\n    Web: string;\n    HandsetPortrait: string;\n    TabletPortrait: string;\n    WebPortrait: string;\n    HandsetLandscape: string;\n    TabletLandscape: string;\n    WebLandscape: string;\n};\n\n// @public\nexport interface BreakpointState {\n    breakpoints: {\n        [key: string]: boolean;\n    };\n    matches: boolean;\n}\n\n// @public (undocumented)\nexport class LayoutModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<LayoutModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<LayoutModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<LayoutModule, never, never, never>;\n}\n\n// @public\nexport class MediaMatcher {\n    constructor(...args: unknown[]);\n    matchMedia(query: string): MediaQueryList;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MediaMatcher, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<MediaMatcher>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing setDescribedByIds for Accessibility\nDESCRIPTION: Implementation of setDescribedByIds method to handle aria-describedby attributes for accessibility support.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-form-field-control.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsetDescribedByIds(ids: string[]) {\n  const controlElement = this._elementRef.nativeElement\n    .querySelector('.example-tel-input-container')!;\n  controlElement.setAttribute('aria-describedby', ids.join(' '));\n}\n```\n\n----------------------------------------\n\nTITLE: Angular CDK A11y Module and Imports Declaration\nDESCRIPTION: Defines imports and the main A11yModule class for Angular CDK's accessibility features. Includes imports from @angular/core and rxjs, along with module declarations and component exports.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/a11y/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterContentInit } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { DoCheck } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { Provider } from '@angular/core';\nimport { QueryList } from '@angular/core';\nimport { Signal } from '@angular/core';\nimport { SimpleChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nexport class A11yModule {\n    constructor();\n    static ɵfac: i0.ɵɵFactoryDeclaration<A11yModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<A11yModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<A11yModule, never, [typeof ObserversModule, typeof CdkAriaLive, typeof CdkTrapFocus, typeof CdkMonitorFocus], [typeof CdkAriaLive, typeof CdkTrapFocus, typeof CdkMonitorFocus]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MapDirectionsRenderer in Angular Component\nDESCRIPTION: This example demonstrates how to use MapDirectionsService and MapDirectionsRenderer in an Angular component. It shows the setup of a directions request and the creation of an Observable for the directions results.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-directions-renderer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// google-maps-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapDirectionsRenderer, MapDirectionsService} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n    imports: [GoogleMap, MapDirectionsRenderer],\n})\nexport class GoogleMapDemo {\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n\n  readonly directionsResults$: Observable<google.maps.DirectionsResult|undefined>;\n\n  constructor(mapDirectionsService: MapDirectionsService) {\n    const request: google.maps.DirectionsRequest = {\n      destination: {lat: 12, lng: 4},\n      origin: {lat: 14, lng: 8},\n      travelMode: google.maps.TravelMode.DRIVING\n    };\n    this.directionsResults$ = mapDirectionsService.route(request).pipe(map(response => response.result));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Option Groups in Autocomplete for Angular\nDESCRIPTION: Illustrates how to group options in an autocomplete component using mat-optgroup element.\nSOURCE: https://github.com/angular/components/blob/main/src/material/autocomplete/autocomplete.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<mat-autocomplete #auto=\"matAutocomplete\">\n  @for (group of stateGroupOptions | async; track group) {\n    <mat-optgroup [label]=\"group.letter\">\n      @for (name of group.names; track name) {\n        <mat-option [value]=\"name\">{{name}}</mat-option>\n      }\n    </mat-optgroup>\n  }\n</mat-autocomplete>\n```\n\n----------------------------------------\n\nTITLE: Using HarnessPredicate to Filter Component Harnesses\nDESCRIPTION: This snippet demonstrates how to use the static 'with' method on component harnesses to create a HarnessPredicate that filters harnesses based on various constraints like selector, text content, or ancestor elements.\nSOURCE: https://github.com/angular/components/blob/main/guides/using-component-harnesses.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nit('should work', async () => {\n  // Harness for mat-button whose id is 'more-info'.\n  const info = await loader.getHarness(MatButtonHarness.with({selector: '#more-info'}));\n  // Harness for mat-button whose text is 'Cancel'.\n  const cancel = await loader.getHarness(MatButtonHarness.with({text: 'Cancel'}));\n  // Harness for mat-button with class 'confirm' and whose text is either 'Ok' or 'Okay'.\n  const okButton = await loader.getHarness(\n      MatButtonHarness.with({selector: '.confirm', text: /^(Ok|Okay)$/}));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Context Menu Triggers with cdkContextMenuTriggerFor\nDESCRIPTION: Example showing how to implement nested context menu container elements. The context menu triggers respond to right-clicks within their container elements.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/menu/menu.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"example-context-container outer\"\n     [cdkContextMenuTriggerFor]=\"outerMenu\">\n  Outer context menu\n  <div class=\"example-context-container inner\"\n       [cdkContextMenuTriggerFor]=\"innerMenu\">\n    Inner context menu\n  </div>\n</div>\n\n<ng-template #outerMenu>\n  <div class=\"example-menu\" cdkMenu>\n    <button class=\"example-menu-item\" cdkMenuItem>Outer Option 1</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Outer Option 2</button>\n  </div>\n</ng-template>\n\n<ng-template #innerMenu>\n  <div class=\"example-menu\" cdkMenu>\n    <button class=\"example-menu-item\" cdkMenuItem>Inner Option 1</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Inner Option 2</button>\n  </div>\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Flat Tree Structure in Angular Material\nDESCRIPTION: Demonstrates the DOM structure for a flat tree using mat-tree and mat-tree-node components. Flat trees render nodes as siblings in sequence, making them easier to style and scroll.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tree/tree.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mat-tree>\n  <mat-tree-node> parent node </mat-tree-node>\n  <mat-tree-node> -- child node1 </mat-tree-node>\n  <mat-tree-node> -- child node2 </mat-tree-node>\n</mat-tree>\n```\n\n----------------------------------------\n\nTITLE: MatTabBody Component Definition\nDESCRIPTION: This code defines the `MatTabBody` component, which is responsible for displaying the content of a tab. It handles animations and manages the content's position based on the selected tab.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport class MatTabBody implements OnInit, OnDestroy {\n    constructor(...args: unknown[]);\n    readonly _afterLeavingCenter: EventEmitter<void>;\n    animationDuration: string;\n    readonly _beforeCentering: EventEmitter<boolean>;\n    _content: TemplatePortal;\n    _contentElement: ElementRef<HTMLElement> | undefined;\n    _getLayoutDirection(): Direction;\n    _isCenterPosition(): boolean;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    ngOnInit(): void;\n    readonly _onCentered: EventEmitter<void>;\n    readonly _onCentering: EventEmitter<number>;\n    _portalHost: MatTabBodyPortal;\n    set position(position: number);\n    _position: MatTabBodyPositionState;\n    preserveContent: boolean;\n    protected _previousPosition: MatTabBodyPositionState | undefined;\n    _setActiveClass(isActive: boolean): void;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatTabBody, \\\"mat-tab-body\\\", never, { \\\"_content\\\": { \\\"alias\\\": \\\"content\\\"; \\\"required\\\": false; }; \\\"animationDuration\\\": { \\\"alias\\\": \\\"animationDuration\\\"; \\\"required\\\": false; }; \\\"preserveContent\\\": { \\\"alias\\\": \\\"preserveContent\\\"; \\\"required\\\": false; }; \\\"position\\\": { \\\"alias\\\": \\\"position\\\"; \\\"required\\\": false; }; }, { \\\"_onCentering\\\": \\\"_onCentering\\\"; \\\"_beforeCentering\\\": \\\"_beforeCentering\\\"; \\\"_onCentered\\\": \\\"_onCentered\\\"; }, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTabBody, never>;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Form Error Display in Angular Material Stepper\nDESCRIPTION: Example of using mat-error within mat-form-field for accessible error handling in stepper forms. This pattern ensures error messages are properly communicated to assistive technologies.\nSOURCE: https://github.com/angular/components/blob/main/src/material/stepper/stepper.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<mat-error></mat-error>\n```\n\nLANGUAGE: html\nCODE:\n```\n<mat-form-field></mat-form-field>\n```\n\n----------------------------------------\n\nTITLE: Defining Test Harness Interfaces\nDESCRIPTION: Defines interfaces for component harness filters and auto-detection status\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/testing/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AutoChangeDetectionStatus {\n    isDisabled: boolean;\n    onDetectChangesNow?: () => void;\n}\n\nexport interface BaseHarnessFilters {\n    ancestor?: string;\n    selector?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Error State Matcher in Angular\nDESCRIPTION: This snippet demonstrates how to set up a global error state matcher using ShowOnDirtyErrorStateMatcher. This configuration applies to all inputs and causes errors to show when the input is dirty and invalid.\nSOURCE: https://github.com/angular/components/blob/main/src/material/input/input.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@NgModule({\n  providers: [\n    {provide: ErrorStateMatcher, useClass: ShowOnDirtyErrorStateMatcher}\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using DataSource with Virtual Scrolling in Angular\nDESCRIPTION: Example of using custom DataSource with cdkVirtualFor. The DataSource is the same one used by table and tree components, implementing connect and disconnect methods.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/scrolling/scrolling.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-virtual-scroll-data-source) -->\n```\n\n----------------------------------------\n\nTITLE: Parent Element Scrolling with Virtual Scrolling in Angular\nDESCRIPTION: Configuration of cdk-virtual-scroll-viewport to use a parent element as the scrolling element by applying cdkVirtualScrollingElement to the scrolling parent.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/scrolling/scrolling.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-virtual-scroll-parent-scrolling) -->\n```\n\n----------------------------------------\n\nTITLE: Transfer Array Item Function in TypeScript\nDESCRIPTION: Transfers an item from a current array to a target array, adjusting their respective indices accordingly. Requires no external dependencies, and takes the source and destination arrays and indices as primary inputs.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/drag-drop/index.api.md#2025-04-21_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function transferArrayItem<T = any>(currentArray: T[], targetArray: T[], currentIndex: number, targetIndex: number): void;\n```\n\n----------------------------------------\n\nTITLE: CSS Animations for Drag-and-Drop in Angular CDK\nDESCRIPTION: Defines CSS transitions to animate elements during drag operations. Includes animations for items being sorted within a list and for items being animated to their final position after being dropped.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/drag-drop/drag-drop.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* Animate items as they're being sorted. */\n.cdk-drop-list-dragging .cdk-drag {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n\n/* Animate an item that has been dropped. */\n.cdk-drag-animating {\n  transition: transform 300ms cubic-bezier(0, 0, 0.2, 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Lists in Angular Material\nDESCRIPTION: Basic implementation of a single-line list using mat-list component. Each list item contains simple text content.\nSOURCE: https://github.com/angular/components/blob/main/src/material/list/list.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mat-list>\n <mat-list-item>Pepper</mat-list-item>\n <mat-list-item>Salt</mat-list-item>\n <mat-list-item>Paprika</mat-list-item>\n</mat-list>\n```\n\n----------------------------------------\n\nTITLE: Class Declaration for MatSort in Angular\nDESCRIPTION: Defines the `MatSort` class, implementing several Angular lifecycle interfaces. It provides sorting capabilities, including managing the active sorting state, direction, and registered sortables.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sort/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatSort implements OnChanges, OnDestroy, OnInit {\n    constructor(_defaultOptions?: MatSortDefaultOptions | undefined);\n    active: string;\n    deregister(sortable: MatSortable): void;\n    get direction(): SortDirection;\n    set direction(direction: SortDirection);\n    disableClear: boolean;\n    disabled: boolean;\n    getNextSortDirection(sortable: MatSortable): SortDirection;\n    initialized: Observable<void>;\n    static ngAcceptInputType_disableClear: unknown;\n    static ngAcceptInputType_disabled: unknown;\n    ngOnChanges(): void;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    register(sortable: MatSortable): void;\n    sort(sortable: MatSortable): void;\n    sortables: Map<string, MatSortable>;\n    readonly sortChange: EventEmitter<Sort>;\n    start: SortDirection;\n    readonly _stateChanges: Subject<void>;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatSort, \"[matSort]\", [\"matSort\"], { \"active\": { \"alias\": \"matSortActive\"; \"required\": false; }; \"start\": { \"alias\": \"matSortStart\"; \"required\": false; }; \"direction\": { \"alias\": \"matSortDirection\"; \"required\": false; }; \"disableClear\": { \"alias\": \"matSortDisableClear\"; \"required\": false; }; \"disabled\": { \"alias\": \"matSortDisabled\"; \"required\": false; }; }, { \"sortChange\": \"matSortChange\"; }, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatSort, [{ optional: true; }]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Slide Toggle Harness Class - Angular TypeScript\nDESCRIPTION: This snippet defines the MatSlideToggleHarness class, which extends ComponentHarness from Angular CDK. It includes methods for manipulating slide toggle components, such as checking, unchecking, and focusing on the toggle, as well as fetching its properties like label and state. Dependencies on Angular CDK modules are necessary for proper functionality.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/slide-toggle/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as _angular_cdk_testing from '@angular/cdk/testing';\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport class MatSlideToggleHarness extends ComponentHarness {\n    blur(): Promise<void>;\n    check(): Promise<void>;\n    focus(): Promise<void>;\n    getAriaLabel(): Promise<string | null>;\n    getAriaLabelledby(): Promise<string | null>;\n    getLabelText(): Promise<string>;\n    getName(): Promise<string | null>;\n    // (undocumented)\n    static hostSelector: string;\n    isChecked(): Promise<boolean>;\n    isDisabled(): Promise<boolean>;\n    isFocused(): Promise<boolean>;\n    isRequired(): Promise<boolean>;\n    isValid(): Promise<boolean>;\n    // (undocumented)\n    _nativeElement: _angular_cdk_testing.AsyncFactoryFn<_angular_cdk_testing.TestElement>;\n    toggle(): Promise<void>;\n    uncheck(): Promise<void>;\n    static with<T extends MatSlideToggleHarness>(this: ComponentHarnessConstructor<T>, options?: SlideToggleHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport interface SlideToggleHarnessFilters extends BaseHarnessFilters {\n    checked?: boolean;\n    disabled?: boolean;\n    label?: string | RegExp;\n    name?: string;\n}\n\n// (No @packageDocumentation comment for this package)\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Expansion Panel in Angular HTML\nDESCRIPTION: Demonstrates the basic structure of an expansion panel with a header containing a title and description.\nSOURCE: https://github.com/angular/components/blob/main/src/material/expansion/expansion.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mat-expansion-panel>\n  <mat-expansion-panel-header>\n    <mat-panel-title>\n      This is the expansion title\n    </mat-panel-title>\n    <mat-panel-description>\n      This is a summary of the content\n    </mat-panel-description>\n  </mat-expansion-panel-header>\n\n  <p>This is the primary content of the panel.</p>\n</mat-expansion-panel>\n```\n\n----------------------------------------\n\nTITLE: Defining MatNativeSelectHarness Class\nDESCRIPTION: This class extends MatFormFieldControlHarness and provides methods for interacting with MatNativeSelect components in tests. It includes methods for blurring, focusing, getting the ID, name, and options, as well as checking if the select is disabled, focused, multiple, or required. It also includes a method for selecting options.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/input/testing/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport class MatNativeSelectHarness extends MatFormFieldControlHarness {\n    blur(): Promise<void>;\n    focus(): Promise<void>;\n    getId(): Promise<string>;\n    getName(): Promise<string>;\n    getOptions(filter?: NativeOptionHarnessFilters): Promise<MatNativeOptionHarness[]>;\n    // (undocumented)\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isFocused(): Promise<boolean>;\n    isMultiple(): Promise<boolean>;\n    isRequired(): Promise<boolean>;\n    selectOptions(filter?: NativeOptionHarnessFilters): Promise<void>;\n    static with(options?: NativeSelectHarnessFilters): HarnessPredicate<MatNativeSelectHarness>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Angular Material Bottom Sheet Core API Definitions\nDESCRIPTION: Core TypeScript definitions for the Angular Material Bottom Sheet component including imports, interfaces, classes, and injection tokens. Defines the public API surface for creating and managing bottom sheet dialogs.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/bottom-sheet/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CdkDialogContainer } from '@angular/cdk/dialog';\nimport { ComponentRef } from '@angular/core';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { DialogRef } from '@angular/cdk/dialog';\nimport { Direction } from '@angular/cdk/bidi';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/dialog';\nimport * as i1_2 from '@angular/cdk/bidi';\nimport * as i3 from '@angular/cdk/portal';\nimport { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\nimport { TemplateRef } from '@angular/core';\nimport { ViewContainerRef } from '@angular/core';\n\nexport type AutoFocusTarget = 'dialog' | 'first-tabbable' | 'first-heading';\n\nexport const MAT_BOTTOM_SHEET_DATA: InjectionToken<any>;\n\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS: InjectionToken<MatBottomSheetConfig<any>>;\n\nexport class MatBottomSheet implements OnDestroy {\n    constructor(...args: unknown[]);\n    dismiss<R = any>(result?: R): void;\n    ngOnDestroy(): void;\n    open<T, D = any, R = any>(component: ComponentType<T>, config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n    open<T, D = any, R = any>(template: TemplateRef<T>, config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n    get _openedBottomSheetRef(): MatBottomSheetRef<any> | null;\n    set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null);\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatBottomSheet, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<MatBottomSheet>;\n}\n\nexport const matBottomSheetAnimations: {\n    readonly bottomSheetState: any;\n};\n\nexport class MatBottomSheetConfig<D = any> {\n    ariaLabel?: string | null;\n    ariaModal?: boolean;\n    autoFocus?: AutoFocusTarget | string | boolean;\n    backdropClass?: string;\n    closeOnNavigation?: boolean;\n    data?: D | null;\n    direction?: Direction;\n    disableClose?: boolean;\n    hasBackdrop?: boolean;\n    height?: string;\n    maxHeight?: number | string;\n    minHeight?: number | string;\n    panelClass?: string | string[];\n    restoreFocus?: boolean;\n    scrollStrategy?: ScrollStrategy;\n    viewContainerRef?: ViewContainerRef;\n}\n\nexport class MatBottomSheetContainer extends CdkDialogContainer implements OnDestroy {\n    constructor(...args: unknown[]);\n    protected _animationsDisabled: boolean;\n    _animationState: 'void' | 'visible' | 'hidden';\n    _animationStateChanged: EventEmitter<{\n        toState: \"visible\" | \"hidden\";\n        phase: \"start\" | \"done\";\n    }>;\n    enter(): void;\n    exit(): void;\n    protected _handleAnimationEvent(isStart: boolean, animationName: string): void;\n    ngOnDestroy(): void;\n    protected _trapFocus(): void;\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatBottomSheetContainer, \"mat-bottom-sheet-container\", never, {}, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatBottomSheetContainer, never>;\n}\n\nexport class MatBottomSheetModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatBottomSheetModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatBottomSheetModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatBottomSheetModule, never, [typeof i1.DialogModule, typeof MatCommonModule, typeof i3.PortalModule, typeof MatBottomSheetContainer], [typeof MatBottomSheetContainer, typeof MatCommonModule]>;\n}\n\nexport class MatBottomSheetRef<T = any, R = any> {\n    constructor(_ref: DialogRef<R, T>, config: MatBottomSheetConfig, containerInstance: MatBottomSheetContainer);\n    afterDismissed(): Observable<R | undefined>;\n    afterOpened(): Observable<void>;\n    backdropClick(): Observable<MouseEvent>;\n    get componentRef(): ComponentRef<T> | null;\n    containerInstance: MatBottomSheetContainer;\n    disableClose: boolean | undefined;\n    dismiss(result?: R): void;\n    get instance(): T;\n    keydownEvents(): Observable<KeyboardEvent>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatDateRangePicker Class in TypeScript\nDESCRIPTION: This class extends the base datepicker to provide functionality for selecting date ranges. It handles the creation and management of the date range picker component.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatDateRangePicker<D> extends MatDatepickerBase<MatDateRangePickerInput<D>, DateRange<D>, D> {\n    // (undocumented)\n    protected _forwardContentValues(instance: MatDatepickerContent<DateRange<D>, D>): void;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatDateRangePicker<any>, \"mat-date-range-picker\", [\"matDateRangePicker\"], {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDateRangePicker<any>, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Popup Component Implementation\nDESCRIPTION: Example implementation of a basic popup component with toggle functionality and content projection.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  selector: 'my-popup',\n  template: `\n    <button (click)=\"toggle()\">{{triggerText}}</button>\n    <div *ngIf=\"open\" class=\"my-popup-content\"><ng-content></ng-content></div>\n  `\n})\nclass MyPopup {\n  @Input() triggerText: string;\n\n  open = false;\n\n  toggle() {\n    this.open = !this.open;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MatFormFieldHarness Class Definition\nDESCRIPTION: Defines the harness for testing MatFormField components. It provides methods for interacting with and querying the state of the form field, such as getting the appearance, control, errors, label, prefix/suffix text, theme color, and validity. It also includes methods for checking if the control is autofilled, dirty, pending, touched, valid, disabled, and if the label is floating.  A static `with` method creates a HarnessPredicate.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/form-field/testing/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\\nexport class MatFormFieldHarness extends ComponentHarness {\\n    getAppearance(): Promise<'fill' | 'outline'>;\\n    getControl(): Promise<FormFieldControlHarness | null>;\\n    getControl<X extends MatFormFieldControlHarness>(type: ComponentHarnessConstructor<X>): Promise<X | null>;\\n    getControl<X extends MatFormFieldControlHarness>(type: HarnessPredicate<X>): Promise<X | null>;\\n    getErrors(filter?: ErrorHarnessFilters): Promise<MatErrorHarness[]>;\\n    getLabel(): Promise<string | null>;\\n    getPrefixText(): Promise<string>;\\n    getSuffixText(): Promise<string>;\\n    getTextErrors(): Promise<string[]>;\\n    getTextHints(): Promise<string[]>;\\n    getThemeColor(): Promise<'primary' | 'accent' | 'warn'>;\\n    hasErrors(): Promise<boolean>;\\n    hasLabel(): Promise<boolean>;\\n    // (undocumented)\\n    static hostSelector: string;\\n    isAutofilled(): Promise<boolean>;\\n    isControlDirty(): Promise<boolean | null>;\\n    isControlPending(): Promise<boolean | null>;\\n    isControlTouched(): Promise<boolean | null>;\\n    isControlValid(): Promise<boolean | null>;\\n    isDisabled(): Promise<boolean>;\\n    isLabelFloating(): Promise<boolean>;\\n    static with<T extends MatFormFieldHarness>(this: ComponentHarnessConstructor<T>, options?: FormFieldHarnessFilters): HarnessPredicate<T>;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Directionality in an Angular Component\nDESCRIPTION: Example showing how to inject and use the Directionality service in an Angular component to detect and respond to RTL/LTR direction changes. The component subscribes to direction changes and properly cleans up the subscription in ngOnDestroy.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/bidi/bidi.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({ ... })\nexport class MyWidget implements OnDestroy {\n\n  /** Whether the widget is in RTL mode or not. */\n  private isRtl: boolean;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  constructor(dir: Directionality) {\n    this.isRtl = dir.value === 'rtl';\n\n    this._dirChangeSubscription = dir.change.subscribe(() => {\n      this.flipDirection();\n    });\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Navigation Options in Angular CDK Listbox\nDESCRIPTION: Shows how to customize keyboard navigation behavior in a CDK listbox, including disabling wrap-around navigation and allowing navigation through disabled options.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/listbox/listbox.md#2025-04-21_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<ul cdkListbox cdkListboxNavigationWrapDisabled cdkListboxNavigatesDisabledOptions>\n  <li cdkOption value=\"1\">Option 1</li>\n  <li cdkOption value=\"2\" cdkOptionDisabled>Option 2 (Disabled)</li>\n  <li cdkOption value=\"3\">Option 3</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Implementing LiveAnnouncer in an Angular Component\nDESCRIPTION: Example of how to inject and use the LiveAnnouncer service in an Angular component. The LiveAnnouncer is injected into the component's constructor and used to announce a message for screen readers.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/live-announcer/live-announcer.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  selector: 'my-component'\n  providers: [LiveAnnouncer]\n})\nexport class MyComponent {\n\n  constructor(liveAnnouncer: LiveAnnouncer) {\n    liveAnnouncer.announce(\"Hey Google\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Drag Position in Angular CDK\nDESCRIPTION: Shows how to use cdkDragFreeDragPosition to explicitly set the position of a standalone cdkDrag element, useful for restoring positions after navigation.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/drag-drop/drag-drop.md#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-drag-drop-free-drag-position) -->\n```\n\n----------------------------------------\n\nTITLE: MatTabBodyPortal Class Definition\nDESCRIPTION: This code defines the `MatTabBodyPortal` directive, which extends `CdkPortalOutlet` and is responsible for hosting the content of a tab within the `MatTabBody` component. It handles the attachment and detachment of the tab's content using the Angular CDK's portal system.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n    constructor(...args: unknown[]);\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatTabBodyPortal, \\\"[matTabBodyHost] \\\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTabBodyPortal, never>;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Custom Ripple Trigger Implementation\nDESCRIPTION: Demonstrates how to separate the ripple container from its trigger element using matRippleTrigger directive.\nSOURCE: https://github.com/angular/components/blob/main/src/material/core/ripple/ripple.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <div matRipple [matRippleTrigger]=\"trigger\" class=\"my-ripple-container\">\n    <!-- This is the ripple container, but not the trigger element for ripples. -->\n  </div>\n\n  <div #trigger></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating the MatIcon Component\nDESCRIPTION: Defines the MatIcon class implementing OnInit, AfterViewChecked, and OnDestroy interfaces for managing icon display in Angular. Handles properties like color, inline, svgIcon, fontSet, and fontIcon.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/icon/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatIcon implements OnInit, AfterViewChecked, OnDestroy {\n    constructor(...args: unknown[]);\n    get color(): string | null | undefined;\n    set color(value: string | null | undefined);\n    readonly _elementRef: ElementRef<HTMLElement>;\n    get fontIcon(): string;\n    set fontIcon(value: string);\n    get fontSet(): string;\n    set fontSet(value: string);\n    inline: boolean;\n    static ngAcceptInputType_inline: unknown;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    get svgIcon(): string;\n    set svgIcon(value: string);\n    _svgName: string | null;\n    _svgNamespace: string | null;\n    _usingFontIcon(): boolean;\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatIcon, \"mat-icon\", [\"matIcon\"], { \"color\": { \"alias\": \"color\"; \"required\": false; }; \"inline\": { \"alias\": \"inline\"; \"required\": false; }; \"svgIcon\": { \"alias\": \"svgIcon\"; \"required\": false; }; \"fontSet\": { \"alias\": \"fontSet\"; \"required\": false; }; \"fontIcon\": { \"alias\": \"fontIcon\"; \"required\": false; }; }, {}, never, [\"*\"], true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatIcon, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Address Form Component with Material Design\nDESCRIPTION: Command to generate a new Angular component with Material Design form controls for shipping address input. Creates a component with form fields, radio controls, and buttons.\nSOURCE: https://github.com/angular/components/blob/main/guides/schematics.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng generate @angular/material:address-form <component-name>\n```\n\n----------------------------------------\n\nTITLE: Defining Color Palettes for a Theme in Angular Material 2\nDESCRIPTION: Shows how to define primary, accent, and warn color palettes using the m2-define-palette function. The function accepts a base palette and optional hue numbers for default, lighter, darker, and text variants.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\n$my-primary: mat.m2-define-palette(mat.$m2-indigo-palette, 500);\n$my-accent: mat.m2-define-palette(mat.$m2-pink-palette, A200, A100, A400);\n\n// The \"warn\" palette is optional and defaults to red if not specified.\n$my-warn: mat.m2-define-palette(mat.$m2-red-palette);\n```\n\n----------------------------------------\n\nTITLE: Defining MatDrawerContainer Class in Angular Material\nDESCRIPTION: This code snippet defines the MatDrawerContainer class that manages multiple MatDrawer components. It includes methods for opening and closing drawers, as well as managing backdrop clicks. The class utilizes Angular’s lifecycle hooks and CDK for its functionality.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sidenav/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterContentInit } from '@angular/core';\nimport { DoCheck } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { QueryList } from '@angular/core';\n\n// @public\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n    constructor(...args: unknown[]);\n    _allDrawers: QueryList<MatDrawer>;\n    close(): void;\n    open(): void;\n    ngAfterContentInit(): void;\n    ngDoCheck(): void;\n    ngOnDestroy(): void;\n    // More properties and methods...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Header with Title, Subtitle, and Avatar in Angular Material\nDESCRIPTION: Shows how to structure a card header using mat-card-header component with title, subtitle, and avatar image elements.\nSOURCE: https://github.com/angular/components/blob/main/src/material/card/card.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<mat-card-header>\n  <mat-card-title></mat-card-title>\n  <mat-card-subtitle></mat-card-subtitle>\n  <img mat-card-avatar>\n</mat-card-header>\n```\n\n----------------------------------------\n\nTITLE: Defining MapMarker in Angular with Google Maps\nDESCRIPTION: This snippet defines the 'MapMarker' class which represents a marker on a Google Map. It includes observable properties related to mouse events on the marker and methods for handling lifecycle events like initialization and destruction.\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly mapDragend: Observable<google.maps.MapMouseEvent>;\nreadonly mapDragstart: Observable<google.maps.MapMouseEvent>;\nreadonly mapMousedown: Observable<google.maps.MapMouseEvent>;\nreadonly mapMouseout: Observable<google.maps.MapMouseEvent>;\nreadonly mapMouseover: Observable<google.maps.MapMouseEvent>;\nreadonly mapMouseup: Observable<google.maps.MapMouseEvent>;\nreadonly mapRightclick: Observable<google.maps.MapMouseEvent>;\nmarker?: google.maps.Marker;\nreadonly markerInitialized: EventEmitter<google.maps.Marker>;\nngOnChanges(changes: SimpleChanges): void;\nngOnDestroy(): void;\nngOnInit(): void;\nset options(options: google.maps.MarkerOptions);\nset position(position: google.maps.LatLngLiteral | google.maps.LatLng);\nreadonly positionChanged: Observable<void>;\n_resolveMarker(): Promise<google.maps.Marker>;\nreadonly shapeChanged: Observable<void>;\nset title(title: string);\nreadonly titleChanged: Observable<void>;\nset visible(value: boolean);\nreadonly visibleChanged: Observable<void>;\nreadonly zindexChanged: Observable<void>;\nstatic ɵdir: i0.ɵɵDirectiveDeclaration<MapMarker, \"map-marker\", [\"mapMarker\"], { \"title\": { \"alias\": \"title\"; \"required\": false; }; \"position\": { \"alias\": \"position\"; \"required\": false; }; \"label\": { \"alias\": \"label\"; \"required\": false; }; \"clickable\": { \"alias\": \"clickable\"; \"required\": false; }; \"options\": { \"alias\": \"options\"; \"required\": false; }; \"icon\": { \"alias\": \"icon\"; \"required\": false; }; \"visible\": { \"alias\": \"visible\"; \"required\": false; }; }, { \"animationChanged\": \"animationChanged\"; \"mapClick\": \"mapClick\"; \"clickableChanged\": \"clickableChanged\"; \"cursorChanged\": \"cursorChanged\"; \"mapDblclick\": \"mapDblclick\"; \"mapDrag\": \"mapDrag\"; \"mapDragend\": \"mapDragend\"; \"draggableChanged\": \"draggableChanged\"; \"mapDragstart\": \"mapDragstart\"; \"flatChanged\": \"flatChanged\"; \"iconChanged\": \"iconChanged\"; \"mapMousedown\": \"mapMousedown\"; \"mapMouseout\": \"mapMouseout\"; \"mapMouseover\": \"mapMouseover\"; \"mapMouseup\": \"mapMouseup\"; \"positionChanged\": \"positionChanged\"; \"mapRightclick\": \"mapRightclick\"; \"shapeChanged\": \"shapeChanged\"; \"titleChanged\": \"titleChanged\"; \"visibleChanged\": \"visibleChanged\"; \"zindexChanged\": \"zindexChanged\"; \"markerInitialized\": \"markerInitialized\"; }, never, never, true, never>;\nstatic ɵfac: i0.ɵɵFactoryDeclaration<MapMarker, never>;\n```\n\n----------------------------------------\n\nTITLE: Enabling Wrap Mode in ListKeyManager\nDESCRIPTION: This method turns on wrapping mode, ensuring that the active item wraps to the other end of the list when there are no more items in the given direction.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/key-manager/list-key-manager.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwithWrap(): this;\n```\n\n----------------------------------------\n\nTITLE: Defining Connected Overlay Component\nDESCRIPTION: Angular component implementation for connected overlays with comprehensive configuration options and lifecycle hooks.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n    constructor(...args: unknown[]);\n    readonly attach: EventEmitter<void>;\n    attachOverlay(): void;\n    backdropClass: string | string[];\n    readonly backdropClick: EventEmitter<MouseEvent>;\n    readonly detach: EventEmitter<void>;\n    detachOverlay(): void;\n    get dir(): Direction;\n    disableClose: boolean;\n    get disposeOnNavigation(): boolean;\n    set disposeOnNavigation(value: boolean);\n    flexibleDimensions: boolean;\n    growAfterOpen: boolean;\n    hasBackdrop: boolean;\n    height: number | string;\n    lockPosition: boolean;\n    minHeight: number | string;\n    minWidth: number | string;\n    static ngAcceptInputType_disposeOnNavigation: unknown;\n    static ngAcceptInputType_flexibleDimensions: unknown;\n    static ngAcceptInputType_growAfterOpen: unknown;\n    static ngAcceptInputType_hasBackdrop: unknown;\n    static ngAcceptInputType_lockPosition: unknown;\n    static ngAcceptInputType_push: unknown;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    // Additional properties and methods...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FlexibleConnectedPositionStrategy Class in TypeScript\nDESCRIPTION: This class implements a flexible position strategy for connected overlays. It handles positioning, scrolling, and viewport calculations.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\n    constructor(connectedTo: FlexibleConnectedPositionStrategyOrigin, _viewportRuler: ViewportRuler, _document: Document, _platform: Platform, _overlayContainer: OverlayContainer);\n    apply(): void;\n    attach(overlayRef: OverlayRef): void;\n    // (undocumented)\n    detach(): void;\n    dispose(): void;\n    _origin: FlexibleConnectedPositionStrategyOrigin;\n    positionChanges: Observable<ConnectedOverlayPositionChange>;\n    get positions(): ConnectionPositionPair[];\n    _preferredPositions: ConnectionPositionPair[];\n    reapplyLastPosition(): void;\n    setOrigin(origin: FlexibleConnectedPositionStrategyOrigin): this;\n    withDefaultOffsetX(offset: number): this;\n    withDefaultOffsetY(offset: number): this;\n    withFlexibleDimensions(flexibleDimensions?: boolean): this;\n    withGrowAfterOpen(growAfterOpen?: boolean): this;\n    withLockedPosition(isLocked?: boolean): this;\n    withPositions(positions: ConnectedPosition[]): this;\n    withPush(canPush?: boolean): this;\n    withScrollableContainers(scrollables: CdkScrollable[]): this;\n    withTransformOriginOn(selector: string): this;\n    withViewportMargin(margin: number): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatDateRangeInput Class in TypeScript\nDESCRIPTION: This class implements the input component for date range selection. It handles user input, validation, and integration with the form field.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatDateRangeInput<D> implements MatFormFieldControl<DateRange<D>>, MatDatepickerControl<D>, MatDateRangePickerInput<D>, AfterContentInit, OnChanges, OnDestroy {\n    constructor(...args: unknown[]);\n    _ariaDescribedBy: string | null;\n    _ariaOwns: i0.WritableSignal<string | null>;\n    comparisonEnd: D | null;\n    comparisonStart: D | null;\n    controlType: string;\n    get dateFilter(): DateFilterFn<D>;\n    set dateFilter(value: DateFilterFn<D>);\n    get describedByIds(): string[];\n    readonly disableAutomaticLabeling = true;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    get empty(): boolean;\n    // (undocumented)\n    _endInput: MatEndDate<D>;\n    get errorState(): boolean;\n    focused: boolean;\n    _getAriaLabelledby(): string | null;\n    getConnectedOverlayOrigin(): ElementRef;\n    // (undocumented)\n    _getEndDateAccessibleName(): string;\n    _getInputMirrorValue(part: 'start' | 'end'): string;\n    getOverlayLabelId(): string | null;\n    // (undocumented)\n    _getStartDateAccessibleName(): string;\n    getStartValue(): D | null;\n    getThemePalette(): ThemePalette;\n    // (undocumented)\n    _groupDisabled: boolean;\n    _handleChildValueChange(): void;\n    id: string;\n    get max(): D | null;\n    set max(value: D | null);\n    get min(): D | null;\n    set min(value: D | null);\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    static ngAcceptInputType_required: unknown;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    ngControl: NgControl | null;\n    // (undocumented)\n    ngOnChanges(changes: SimpleChanges): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    onContainerClick(): void;\n    _openDatepicker(): void;\n    get placeholder(): string;\n    get rangePicker(): MatDatepickerPanel<MatDatepickerControl<D>, DateRange<D>, D>;\n    set rangePicker(rangePicker: MatDatepickerPanel<MatDatepickerControl<D>, DateRange<D>, D>);\n    get required(): boolean;\n    set required(value: boolean);\n    separator: string;\n    setDescribedByIds(ids: string[]): void;\n    _shouldHidePlaceholders(): boolean;\n    _shouldHideSeparator(): boolean | \"\" | null;\n    get shouldLabelFloat(): boolean;\n    // (undocumented)\n    _startInput: MatStartDate<D>;\n    readonly stateChanges: Subject<void>;\n    _updateFocus(origin: FocusOrigin): void;\n    get value(): DateRange<D> | null;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatDateRangeInput<any>, \"mat-date-range-input\", [\"matDateRangeInput\"], { \"rangePicker\": { \"alias\": \"rangePicker\"; \"required\": false; }; \"required\": { \"alias\": \"required\"; \"required\": false; }; \"dateFilter\": { \"alias\": \"dateFilter\"; \"required\": false; }; \"min\": { \"alias\": \"min\"; \"required\": false; }; \"max\": { \"alias\": \"max\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"separator\": { \"alias\": \"separator\"; \"required\": false; }; \"comparisonStart\": { \"alias\": \"comparisonStart\"; \"required\": false; }; \"comparisonEnd\": { \"alias\": \"comparisonEnd\"; \"required\": false; }; }, {}, never, [\"input[matStartDate]\", \"input[matEndDate]\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDateRangeInput<any>, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Component Tokens in Angular Material\nDESCRIPTION: This snippet demonstrates how to use a component's 'overrides' mixin (in this case, for the Card component) to customize specific tokenized styles such as colors, shapes, and typography.\nSOURCE: https://github.com/angular/components/blob/main/guides/theming.md#2025-04-21_snippet_13\n\nLANGUAGE: scss\nCODE:\n```\nhtml {\n  @include mat.card-overrides((\n    elevated-container-color: red,\n    elevated-container-shape: 32px,\n    title-text-size: 2rem,\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Drag-and-Drop State with Subjects in TypeScript\nDESCRIPTION: Defines subjects to track the state of drag-and-drop operations, such as when items are being received or sorted. It also includes flags and methods for starting and stopping the drag-and-drop process, as well as configuring options such as direction and orientation.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/drag-drop/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nlockAxis: 'x' | 'y';\nreadonly receivingStarted: Subject<{\n    receiver: DropListRef;\n    initiator: DropListRef;\n    items: DragRef[];\n}>;\nreadonly receivingStopped: Subject<{\n    receiver: DropListRef;\n    initiator: DropListRef;\n}>;\nreadonly sorted: Subject<{\n    previousIndex: number;\n    currentIndex: number;\n    container: DropListRef;\n    item: DragRef;\n}>;\nsortingDisabled: boolean;\n_sortItem(item: DragRef, pointerX: number, pointerY: number, pointerDelta: {\n    x: number;\n    y: number;\n}): void;\nsortPredicate: (index: number, drag: DragRef, drop: DropListRef) => boolean;\nstart(): void;\n_startReceiving(sibling: DropListRef, items: DragRef[]): void;\n_startScrollingIfNecessary(pointerX: number, pointerY: number): void;\n_stopReceiving(sibling: DropListRef): void;\n_stopScrolling(): void;\nwithDirection(direction: Direction): this;\nwithElementContainer(container: HTMLElement): this;\nwithItems(items: DragRef[]): this;\nwithOrientation(orientation: DropListOrientation): this;\nwithScrollableParents(elements: HTMLElement[]): this;\n```\n\n----------------------------------------\n\nTITLE: Creating Sortable Tabs with Angular CDK Drag and Drop\nDESCRIPTION: Demonstrates how to add sorting support to mat-tab-group using CDK drag and drop functionality.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/drag-drop/drag-drop.md#2025-04-21_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-drag-drop-tabs) -->\n```\n\n----------------------------------------\n\nTITLE: Handling Node Activation in Angular Material Tree\nDESCRIPTION: Demonstrates how to handle node activation events in the tree, including both click and keyboard interactions. This is important for implementing interactive tree nodes with actions.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tree/tree.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<mat-tree-node\n    *matNodeDef=\"let node\"\n    (click)=\"performAction(node)\"\n    (activation)=\"performAction($event)\">\n</mat-tree-node>\n```\n\n----------------------------------------\n\nTITLE: MatSnackBar Configuration Interface\nDESCRIPTION: This snippet defines the MatSnackBarConfig interface, which allows configuration of snack bars, including message content, duration, direction, position, and accessibility options. It serves as a blueprint for creating customizable snack bar instances.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/snack-bar/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatSnackBarConfig<D = any> {\n    announcementMessage?: string;\n    data?: D | null;\n    direction?: Direction;\n    duration?: number;\n    horizontalPosition?: MatSnackBarHorizontalPosition;\n    panelClass?: string | string[];\n    politeness?: AriaLivePoliteness;\n    verticalPosition?: MatSnackBarVerticalPosition;\n    viewContainerRef?: ViewContainerRef;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YouTube Player Component in Angular with TypeScript\nDESCRIPTION: The code snippet defines the Angular YouTubePlayer component in TypeScript. It includes class definitions, interface types, and module declarations relevant to the component. Dependencies include core Angular modules and the RxJS Observable. Key functionalities are managing video playback, reporting state changes, and handling user interactions. The snippet also includes type definitions for configuring the player behavior through YouTubePlayerConfig. The input properties and event outputs facilitate the integration of the player into Angular applications.\nSOURCE: https://github.com/angular/components/blob/main/goldens/youtube-player/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n/// <reference types=\"youtube\" />\n\nimport { AfterViewInit } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { SimpleChanges } from '@angular/core';\n\n// @public\nexport type PlaceholderImageQuality = 'high' | 'standard' | 'low';\n\n// @public\nexport const YOUTUBE_PLAYER_CONFIG: InjectionToken<YouTubePlayerConfig>;\n\n// @public\nexport class YouTubePlayer implements AfterViewInit, OnChanges, OnDestroy {\n    constructor(...args: unknown[]);\n    readonly apiChange: Observable<YT.PlayerEvent>;\n    disableCookies: boolean;\n    disablePlaceholder: boolean;\n    endSeconds: number | undefined;\n    readonly error: Observable<YT.OnErrorEvent>;\n    getAvailablePlaybackRates(): number[];\n    getAvailableQualityLevels(): YT.SuggestedVideoQuality[];\n    getCurrentTime(): number;\n    getDuration(): number;\n    getPlaybackQuality(): YT.SuggestedVideoQuality;\n    getPlaybackRate(): number;\n    getPlayerState(): YT.PlayerState | undefined;\n    getVideoEmbedCode(): string;\n    getVideoLoadedFraction(): number;\n    getVideoUrl(): string;\n    getVolume(): number;\n    // (undocumented)\n    protected _hasPlaceholder: boolean;\n    get height(): number;\n    set height(height: number | undefined);\n    // (undocumented)\n    protected _isLoading: boolean;\n    isMuted(): boolean;\n    protected _load(playVideo: boolean): void;\n    loadApi: boolean;\n    mute(): void;\n    // (undocumented)\n    static ngAcceptInputType_disableCookies: unknown;\n    // (undocumented)\n    static ngAcceptInputType_disablePlaceholder: unknown;\n    // (undocumented)\n    static ngAcceptInputType_endSeconds: number | undefined;\n    // (undocumented)\n    static ngAcceptInputType_height: unknown;\n    // (undocumented)\n    static ngAcceptInputType_loadApi: unknown;\n    // (undocumented)\n    static ngAcceptInputType_showBeforeIframeApiLoads: unknown;\n    // (undocumented)\n    static ngAcceptInputType_startSeconds: number | undefined;\n    // (undocumented)\n    static ngAcceptInputType_width: unknown;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnChanges(changes: SimpleChanges): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    pauseVideo(): void;\n    placeholderButtonLabel: string;\n    placeholderImageQuality: PlaceholderImageQuality;\n    readonly playbackQualityChange: Observable<YT.OnPlaybackQualityChangeEvent>;\n    readonly playbackRateChange: Observable<YT.OnPlaybackRateChangeEvent>;\n    playerVars: YT.PlayerVars | undefined;\n    playVideo(): void;\n    readonly ready: Observable<YT.PlayerEvent>;\n    requestFullscreen(options?: FullscreenOptions): Promise<void>;\n    seekTo(seconds: number, allowSeekAhead: boolean): void;\n    setPlaybackRate(playbackRate: number): void;\n    setVolume(volume: number): void;\n    protected _shouldShowPlaceholder(): boolean;\n    showBeforeIframeApiLoads: boolean;\n    startSeconds: number | undefined;\n    readonly stateChange: Observable<YT.OnStateChangeEvent>;\n    stopVideo(): void;\n    suggestedQuality: YT.SuggestedVideoQuality | undefined;\n    unMute(): void;\n    videoId: string | undefined;\n    get width(): number;\n    set width(width: number | undefined);\n    youtubeContainer: ElementRef<HTMLElement>;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<YouTubePlayer, \"youtube-player\", never, { \"videoId\": { \"alias\": \"videoId\"; \"required\": false; }; \"height\": { \"alias\": \"height\"; \"required\": false; }; \"width\": { \"alias\": \"width\"; \"required\": false; }; \"startSeconds\": { \"alias\": \"startSeconds\"; \"required\": false; }; \"endSeconds\": { \"alias\": \"endSeconds\"; \"required\": false; }; \"suggestedQuality\": { \"alias\": \"suggestedQuality\"; \"required\": false; }; \"playerVars\": { \"alias\": \"playerVars\"; \"required\": false; }; \"disableCookies\": { \"alias\": \"disableCookies\"; \"required\": false; }; \"loadApi\": { \"alias\": \"loadApi\"; \"required\": false; }; \"disablePlaceholder\": { \"alias\": \"disablePlaceholder\"; \"required\": false; }; \"showBeforeIframeApiLoads\": { \"alias\": \"showBeforeIframeApiLoads\"; \"required\": false; }; \"placeholderButtonLabel\": { \"alias\": \"placeholderButtonLabel\"; \"required\": false; }; \"placeholderImageQuality\": { \"alias\": \"placeholderImageQuality\"; \"required\": false; }; }, { \"ready\": \"ready\"; \"stateChange\": \"stateChange\"; \"error\": \"error\"; \"apiChange\": \"apiChange\"; \"playbackQualityChange\": \"playbackQualityChange\"; \"playbackRateChange\": \"playbackRateChange\"; }, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<YouTubePlayer, never>;\n}\n\n// @public\nexport interface YouTubePlayerConfig {\n    disablePlaceholder?: boolean;\n    loadApi?: boolean;\n    placeholderButtonLabel?: string;\n    placeholderImageQuality?: PlaceholderImageQuality;\n}\n\n// @public (undocumented)\nexport class YouTubePlayerModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<YouTubePlayerModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<YouTubePlayerModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<YouTubePlayerModule, never, [typeof YouTubePlayer], [typeof YouTubePlayer]>;\n}\n\n// (No @packageDocumentation comment for this package)\n\n\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Angular Material Menu\nDESCRIPTION: HTML implementation showing how to pass context data to a mat-menu using matMenuTriggerData, allowing a single menu instance to be rendered with different data depending on which trigger opened it.\nSOURCE: https://github.com/angular/components/blob/main/src/material/menu/menu.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<mat-menu #appMenu=\"matMenu\">\n  <ng-template matMenuContent let-name=\"name\">\n    <button mat-menu-item>Settings</button>\n    <button mat-menu-item>Log off {{name}}</button>\n  </ng-template>\n</mat-menu>\n\n<button matIconButton [matMenuTriggerFor]=\"appMenu\" [matMenuTriggerData]=\"{name: 'Sally'}\">\n  <mat-icon>more_vert</mat-icon>\n</button>\n\n<button matIconButton [matMenuTriggerFor]=\"appMenu\" [matMenuTriggerData]=\"{name: 'Bob'}\">\n  <mat-icon>more_vert</mat-icon>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining MatDatepickerContent Class in TypeScript\nDESCRIPTION: Implements the content component for the datepicker popup. It manages the calendar, animations, and selection handling with support for accessibility features.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatDatepickerContent<S, D = ExtractDateTypeFromSelection<S>> implements AfterViewInit, OnDestroy {\n    constructor(...args: unknown[]);\n    _actionsPortal: TemplatePortal | null;\n    readonly _animationDone: Subject<void>;\n    // (undocumented)\n    protected _animationsDisabled: boolean;\n    _applyPendingSelection(): void;\n    _assignActions(portal: TemplatePortal<any> | null, forceRerender: boolean): void;\n    _calendar: MatCalendar<D>;\n    _closeButtonFocused: boolean;\n    _closeButtonText: string;\n    color: ThemePalette;\n    comparisonEnd: D | null;\n    comparisonStart: D | null;\n    datepicker: MatDatepickerBase<any, S, D>;\n    _dialogLabelId: string | null;\n    // (undocumented)\n    protected _elementRef: ElementRef<HTMLElement>;\n    endDateAccessibleName: string | null;\n    // (undocumented)\n    _getSelected(): D | DateRange<D> | null;\n    // (undocumented)\n    _handleUserDragDrop(event: MatCalendarUserEvent<DateRange<D>>): void;\n    // (undocumented)\n    _handleUserSelection(event: MatCalendarUserEvent<D | null>): void;\n    _isAbove: boolean;\n    _isAnimating: boolean;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    startDateAccessibleName: string | null;\n    // (undocumented)\n    _startExitAnimation(): void;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatDatepickerContent<any, any>, \"mat-datepicker-content\", [\"matDatepickerContent\"], { \"color\": { \"alias\": \"color\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDatepickerContent<any, any>, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Button Toggle with Dynamic ARIA Label in Angular\nDESCRIPTION: Example showing how to implement an accessible button toggle with a dynamic aria-label for icon-only content. The aria-label updates based on the alertsEnabled state to provide appropriate screen reader context.\nSOURCE: https://github.com/angular/components/blob/main/src/material/button-toggle/button-toggle.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mat-button-toggle [aria-label]=\"alertsEnabled ? 'Disable alerts' : 'Enable alerts'\">\n  <mat-icon>notifications</mat-icon>\n</mat-button-toggle>\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Dragging in Angular CDK\nDESCRIPTION: Explains how to use cdkDragStartDelay to add a delay before initiating the drag sequence, useful for preventing accidental drags on touch devices.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/drag-drop/drag-drop.md#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-drag-drop-delay) -->\n```\n\n----------------------------------------\n\nTITLE: Active Descendant Focus Management in Angular CDK Listbox\nDESCRIPTION: Demonstrates how to use the aria-activedescendant strategy for focus management in a CDK listbox by setting useActiveDescendant to true.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/listbox/listbox.md#2025-04-21_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<ul cdkListbox [useActiveDescendant]=\"true\">\n  <li cdkOption value=\"1\">Option 1</li>\n  <li cdkOption value=\"2\">Option 2</li>\n  <li cdkOption value=\"3\">Option 3</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Injection Token for Ink Bar Positioner\nDESCRIPTION: This code defines an injection token for the ink bar positioner, allowing custom strategies for positioning the ink bar under the active tab. It enables developers to provide their own logic for calculating the left and width styles of the ink bar.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const _MAT_INK_BAR_POSITIONER: InjectionToken<_MatInkBarPositioner>;\"\n```\n\n----------------------------------------\n\nTITLE: Accessible Action Lists in Angular Material\nDESCRIPTION: Implementation of an accessible action list with proper ARIA attributes and semantic HTML structure.\nSOURCE: https://github.com/angular/components/blob/main/src/material/list/list.md#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<mat-action-list role=\"list\" aria-label=\"Post actions\">\n  <li>\n    <button mat-list-item (click)=\"save()\">Save</button>\n  </li>\n  <li>\n    <button mat-list-item (click)=\"undo()\">Undo</button>\n  </li>\n</mat-action-list>\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended FAB Button in Angular Material\nDESCRIPTION: Example showing how to create an extended Floating Action Button (FAB) that includes both an icon and text label. This implementation uses the matFab directive with the extended attribute.\nSOURCE: https://github.com/angular/components/blob/main/src/material/button/button.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button matFab extended>\n  <mat-icon>home</mat-icon>\n  Home\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining MatInputHarness Class\nDESCRIPTION: This class extends MatFormFieldControlHarness and provides methods for interacting with MatInput components in tests. It includes methods for blurring, focusing, getting the ID, name, placeholder, type, and value, as well as setting the value and checking if the input is disabled, focused, readonly, or required.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/input/testing/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport class MatInputHarness extends MatFormFieldControlHarness {\n    blur(): Promise<void>;\n    focus(): Promise<void>;\n    getId(): Promise<string>;\n    getName(): Promise<string>;\n    getPlaceholder(): Promise<string>;\n    getType(): Promise<string>;\n    getValue(): Promise<string>;\n    // (undocumented)\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isFocused(): Promise<boolean>;\n    isReadonly(): Promise<boolean>;\n    isRequired(): Promise<boolean>;\n    setValue(newValue: string): Promise<void>;\n    static with(options?: InputHarnessFilters): HarnessPredicate<MatInputHarness>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Interface for SelectionList Behavior\nDESCRIPTION: Defines an interface SelectionList, which extends MatListBase, outlining the properties and methods required for selection list behavior. This includes methods for handling multiple selections and event emissions. It requires Angular core and Material SelectionModel.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SelectionList extends MatListBase {\n    color: ThemePalette;\n    compareWith: (o1: any, o2: any) => boolean;\n    _emitChangeEvent(options: MatListOption[]): void;\n    hideSingleSelectionIndicator: boolean;\n    multiple: boolean;\n    _onTouched(): void;\n    _reportValueChange(): void;\n    selectedOptions: SelectionModel<MatListOption>;\n    _value: string[] | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Google Maps Marker Template Implementation in HTML\nDESCRIPTION: HTML template for Google Maps component that displays the map and handles marker rendering. Configures map dimensions, center position, zoom level, and implements click event handling for adding markers. Uses Angular's for loop to render multiple markers.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-marker/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- google-map-demo.component.html -->\n<google-map\n  height=\"400px\"\n  width=\"750px\"\n  [center]=\"center\"\n  [zoom]=\"zoom\"\n  (mapClick)=\"addMarker($event)\">\n    @for (position of markerPositions; track position) {\n      <map-marker [position]=\"position\" [options]=\"markerOptions\" />\n    }\n</google-map>\n```\n\n----------------------------------------\n\nTITLE: Implementing MatDrawerContainerHarness in Angular\nDESCRIPTION: This code defines a class MatDrawerContainerHarness which extends ContentContainerComponentHarness, providing methods to retrieve content and drawers for testing. It includes a static method to apply specific filtering criteria using HarnessPredicate.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sidenav/testing/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatDrawerContainerHarness extends ContentContainerComponentHarness<string> {\n    getContent(): Promise<MatDrawerContentHarness>;\n    getDrawers(filter?: DrawerHarnessFilters): Promise<MatDrawerHarness[]>;\n    static hostSelector: string;\n    static with(options?: DrawerContainerHarnessFilters): HarnessPredicate<MatDrawerContainerHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: MatStep Component Implementation\nDESCRIPTION: The MatStep class extends CdkStep and implements ErrorStateMatcher. It manages state and lifecycle events associated with a step in the stepper. The component provides a method to determine the error state of the step.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/stepper/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport class MatStep extends CdkStep implements ErrorStateMatcher, AfterContentInit, OnDestroy {\n    color: ThemePalette;\n    isErrorState(control: AbstractControl | null, form: FormGroupDirective | NgForm | null): boolean;\n    _lazyContent: MatStepContent;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    _portal: TemplatePortal;\n    stepLabel: MatStepLabel;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatStep, \"mat-step\", [\"matStep\"], { \"color\": { \"alias\": \"color\"; \"required\": false; }; }, {}, [\"stepLabel\", \"_lazyContent\"], [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatStep, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tree Node Padding Directive in TypeScript\nDESCRIPTION: Defines a directive for handling tree node padding with configurable indent levels and units. Includes methods for setting padding and handling level changes.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/tree/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CdkTreeNodePadding<T, K = T> implements OnDestroy {\n    constructor(...args: unknown[]);\n    get indent(): number | string;\n    set indent(indent: number | string);\n    _indent: number;\n    indentUnits: string;\n    get level(): number;\n    set level(value: number);\n    _level: number;\n    static ngAcceptInputType_level: unknown;\n    ngOnDestroy(): void;\n    _paddingIndent(): string | null;\n    protected _setIndentInput(indent: number | string): void;\n    protected _setLevelInput(value: number): void;\n    _setPadding(forceChange?: boolean): void;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkTreeNodePadding<any, any>, \"[cdkTreeNodePadding]\", never, { \"level\": { \"alias\": \"cdkTreeNodePadding\"; \"required\": false; }; \"indent\": { \"alias\": \"cdkTreeNodePaddingIndent\"; \"required\": false; }; }, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkTreeNodePadding<any, any>, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Light and Dark Mode with CSS Class in Angular Material\nDESCRIPTION: This example shows how to set up a theme that defaults to light mode but switches to dark mode when a specific CSS class is applied to the body element.\nSOURCE: https://github.com/angular/components/blob/main/guides/theming.md#2025-04-21_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\nhtml {\n  color-scheme: light;\n  @include mat.theme((\n    color: mat.$violet-palette,\n    typography: Roboto,\n    density: 0\n  ));\n}\n\nbody.dark-mode {\n  color-scheme: dark;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MatChip core component class in TypeScript\nDESCRIPTION: Definition of the MatChip class, which is the core component implementing chip functionality. It handles keyboard interactions, focus management, and various display states like highlighting and removal capabilities.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/chips/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatChip implements OnInit, AfterViewInit, AfterContentInit, DoCheck, OnDestroy {\n    constructor(...args: unknown[]);\n    protected _allLeadingIcons: QueryList<MatChipAvatar>;\n    protected _allRemoveIcons: QueryList<MatChipRemove>;\n    protected _allTrailingIcons: QueryList<MatChipTrailingIcon>;\n    _animationsDisabled: boolean;\n    ariaDescription: string | null;\n    _ariaDescriptionId: string;\n    ariaLabel: string | null;\n    protected basicChipAttrName: string;\n    // (undocumented)\n    _changeDetectorRef: ChangeDetectorRef;\n    _chipListDisabled: boolean;\n    color?: string | null;\n    readonly destroyed: EventEmitter<MatChipEvent>;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    disableRipple: boolean;\n    // (undocumented)\n    protected _document: Document;\n    // (undocumented)\n    _elementRef: ElementRef<HTMLElement>;\n    focus(): void;\n    _getActions(): MatChipAction[];\n    _getSourceAction(target: Node): MatChipAction | undefined;\n    _handleKeydown(event: KeyboardEvent): void;\n    _handlePrimaryActionInteraction(): void;\n    // (undocumented)\n    _hasFocus(): boolean;\n    _hasTrailingIcon(): boolean;\n    highlighted: boolean;\n    id: string;\n    // (undocumented)\n    protected _injector: Injector;\n    _isBasicChip: boolean;\n    _isRippleDisabled(): boolean;\n    leadingIcon: MatChipAvatar;\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    static ngAcceptInputType_disableRipple: unknown;\n    // (undocumented)\n    static ngAcceptInputType_highlighted: unknown;\n    // (undocumented)\n    static ngAcceptInputType_removable: unknown;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngDoCheck(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    ngOnInit(): void;\n    // (undocumented)\n    protected _ngZone: NgZone;\n    readonly _onBlur: Subject<MatChipEvent>;\n    readonly _onFocus: Subject<MatChipEvent>;\n    primaryAction: MatChipAction;\n    removable: boolean;\n    remove(): void;\n    readonly removed: EventEmitter<MatChipEvent>;\n    removeIcon: MatChipRemove;\n    role: string | null;\n    trailingIcon: MatChipTrailingIcon;\n    get value(): any;\n    set value(value: any);\n    // (undocumented)\n    protected _value: any;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatChip, \"mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]\", [\"matChip\"], { \"role\": { \"alias\": \"role\"; \"required\": false; }; \"id\": { \"alias\": \"id\"; \"required\": false; }; \"ariaLabel\": { \"alias\": \"aria-label\"; \"required\": false; }; \"ariaDescription\": { \"alias\": \"aria-description\"; \"required\": false; }; \"value\": { \"alias\": \"value\"; \"required\": false; }; \"color\": { \"alias\": \"color\"; \"required\": false; }; \"removable\": { \"alias\": \"removable\"; \"required\": false; }; \"highlighted\": { \"alias\": \"highlighted\"; \"required\": false; }; \"disableRipple\": { \"alias\": \"disableRipple\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; }, { \"removed\": \"removed\"; \"destroyed\": \"destroyed\"; }, [\"leadingIcon\", \"trailingIcon\", \"removeIcon\", \"_allLeadingIcons\", \"_allTrailingIcons\", \"_allRemoveIcons\"], [\"mat-chip-avatar, [matChipAvatar]\", \"*\", \"mat-chip-trailing-icon,[matChipRemove],[matChipTrailingIcon]\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatChip, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling for Label Floating State\nDESCRIPTION: CSS implementation for handling the visual state when labels are floating in the form field.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-form-field-control.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nspan {\n  opacity: 0;\n  transition: opacity 200ms;\n}\n:host.floating span {\n  opacity: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: CdkTable with Event and Class Binding\nDESCRIPTION: This example demonstrates how to add event and property bindings directly to the row elements in CdkTable.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/table/table.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<tr cdk-header-row *cdkHeaderRowDef=\"['age', 'username']\"\n    (click)=\"handleHeaderRowClick(row)\">\n</tr>\n\n<tr cdk-row *cdkRowDef=\"let row; columns: ['age', 'username']\"\n    [class.can-vote]=\"row.age >= 18\"\n    (click)=\"handleRowClick(row)\">\n</tr>\n```\n\n----------------------------------------\n\nTITLE: MatTimepicker Class Definition\nDESCRIPTION: This snippet defines the MatTimepicker component class, which implements the timepicker functionality. It includes properties for managing the timepicker's state, such as whether it is open, disabled, and the selected value. It also defines methods for opening and closing the timepicker panel and registering input elements.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/timepicker/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatTimepicker<D> implements OnDestroy, MatOptionParentComponent {\n    constructor();\n    readonly activeDescendant: Signal<string | null>;\n    // (undocumented)\n    protected _animationsDisabled: boolean;\n    readonly ariaLabel: InputSignal<string | null>;\n    readonly ariaLabelledby: InputSignal<string | null>;\n    close(): void;\n    readonly closed: OutputEmitterRef<void>;\n    readonly disabled: Signal<boolean>;\n    readonly disableRipple: InputSignalWithTransform<boolean, unknown>;\n    protected _getAriaLabelledby(): string | null;\n    protected _handleAnimationEnd(event: AnimationEvent): void;\n    readonly interval: InputSignalWithTransform<number | null, number | string | null>;\n    readonly isOpen: Signal<boolean>;\n    // (undocumented)\n    ngOnDestroy(): void;\n    open(): void;\n    readonly opened: OutputEmitterRef<void>;\n    readonly options: InputSignal<readonly MatTimepickerOption<D>[] | null>;\n    // (undocumented)\n    protected _options: Signal<readonly MatOption<any>[]>;\n    readonly panelId: string;\n    // (undocumented)\n    protected _panelTemplate: Signal<TemplateRef<unknown>>;\n    registerInput(input: MatTimepickerInput<D>): void;\n    readonly selected: OutputEmitterRef<MatTimepickerSelected<D>>;\n    protected _selectValue(option: MatOption<D>): void;\n    // (undocumented)\n    protected _timeOptions: readonly MatTimepickerOption<D>[];\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatTimepicker<any>, \"mat-timepicker\", [\"matTimepicker\"], { \"interval\": { \"alias\": \"interval\"; \"required\": false; \"isSignal\": true; }; \"options\": { \"alias\": \"options\"; \"required\": false; \"isSignal\": true; }; \"disableRipple\": { \"alias\": \"disableRipple\"; \"required\": false; \"isSignal\": true; }; \"ariaLabel\": { \"alias\": \"aria-label\"; \"required\": false; \"isSignal\": true; }; \"ariaLabelledby\": { \"alias\": \"aria-labelledby\"; \"required\": false; \"isSignal\": true; }; }, { \"selected\": \"selected\"; \"opened\": \"opened\"; \"closed\": \"closed\"; }, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTimepicker<any>, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Menu Stack Implementation in TypeScript\nDESCRIPTION: MenuStack class implementation for managing hierarchical menu structures with methods for handling menu open/close states and focus management.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/menu/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MenuStack {\n    close(lastItem: MenuStackItem, options?: CloseOptions): void;\n    closeAll(options?: CloseOptions): void;\n    readonly closed: Observable<MenuStackCloseEvent>;\n    closeSubMenuOf(lastItem: MenuStackItem): boolean;\n    readonly emptied: Observable<FocusNext | undefined>;\n    readonly hasFocus: Observable<boolean>;\n    hasInlineMenu(): boolean;\n    readonly id: string;\n    static inline(orientation: 'vertical' | 'horizontal'): MenuStack;\n    inlineMenuOrientation(): \"vertical\" | \"horizontal\" | null;\n    isEmpty(): boolean;\n    length(): number;\n    peek(): MenuStackItem | undefined;\n    push(menu: MenuStackItem): void;\n    setHasFocus(hasFocus: boolean): void;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MenuStack, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<MenuStack>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatListHarness Class\nDESCRIPTION: This class extends MatListHarnessBase and represents a harness for testing Angular Material lists. It provides methods for interacting with and querying lists in tests, using MatListItemHarness for individual items and ListItemHarnessFilters for filtering.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport class MatListHarness extends MatListHarnessBase<typeof MatListItemHarness, MatListItemHarness, ListItemHarnessFilters> {\n    static hostSelector: string;\n    // (undocumented)\n    _itemHarness: typeof MatListItemHarness;\n    static with<T extends MatListHarness>(this: ComponentHarnessConstructor<T>, options?: ListHarnessFilters): HarnessPredicate<T>;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Timepicker Interval in TypeScript\nDESCRIPTION: Sets up a default 90-minute interval for all timepickers in the application using the MAT_TIMEPICKER_CONFIG injection token\nSOURCE: https://github.com/angular/components/blob/main/src/material/timepicker/timepicker.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {MAT_TIMEPICKER_CONFIG} from '../timepicker';\n\n{\n  provide: MAT_TIMEPICKER_CONFIG,\n  useValue: {interval: '90 minutes'},\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Card Testing API in TypeScript\nDESCRIPTION: This code snippet defines the API for testing Angular Material Card components. It includes interfaces for harness filters, a harness class for interacting with cards, and an enum for card sections.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/card/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { ContentContainerComponentHarness } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport interface CardHarnessFilters extends BaseHarnessFilters {\n    subtitle?: string | RegExp;\n    text?: string | RegExp;\n    title?: string | RegExp;\n}\n\n// @public\nexport class MatCardHarness extends ContentContainerComponentHarness<MatCardSection> {\n    getSubtitleText(): Promise<string>;\n    getText(): Promise<string>;\n    getTitleText(): Promise<string>;\n    static hostSelector: string;\n    static with<T extends MatCardHarness>(this: ComponentHarnessConstructor<T>, options?: CardHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport enum MatCardSection {\n    // (undocumented)\n    ACTIONS = \".mat-mdc-card-actions\",\n    // (undocumented)\n    CONTENT = \".mat-mdc-card-content\",\n    // (undocumented)\n    FOOTER = \".mat-mdc-card-footer\",\n    // (undocumented)\n    HEADER = \".mat-mdc-card-header\"\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically Copying Small Text to Clipboard in Angular\nDESCRIPTION: Shows how to use the Clipboard service to directly copy a small amount of text to the clipboard using the copy method. This is suitable for short text that can be copied quickly.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/clipboard/clipboard.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Clipboard} from '@angular/cdk/clipboard';\n\nclass HeroProfile {\n  constructor(private clipboard: Clipboard) {}\n\n  copyHeroName() {\n    this.clipboard.copy('Alphonso');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Tree Node Template with Child Outlet\nDESCRIPTION: Demonstrates how to create a nested tree node template that includes a matTreeNodeOutlet for rendering child nodes. This is essential for properly structuring nested trees.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tree/tree.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<mat-nested-tree-node *matNodeDef=\"let node\">\n  {{node.value}}\n  <ng-container matTreeNodeOutlet></ng-container>\n</mat-nested-tree-node>\n```\n\n----------------------------------------\n\nTITLE: MatStepperIntl Class Implementation\nDESCRIPTION: The MatStepperIntl class provides internationalization support for the stepper component, including customizable labels for completed, editable, and optional steps.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/stepper/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatStepperIntl {\n    readonly changes: Subject<void>;\n    completedLabel: string;\n    editableLabel: string;\n    optionalLabel: string;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatStepperIntl, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<MatStepperIntl>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Error State Matcher in Angular\nDESCRIPTION: This code snippet shows how to globally specify an error state matcher by setting the ErrorStateMatcher provider in an Angular module. The ShowOnDirtyErrorStateMatcher causes input errors to display when inputs are dirty and invalid.\nSOURCE: https://github.com/angular/components/blob/main/src/material/select/select.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@NgModule({\n  providers: [\n    {provide: ErrorStateMatcher, useClass: ShowOnDirtyErrorStateMatcher}\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining MatSidenavContainer Class in Angular Material\nDESCRIPTION: This snippet defines the MatSidenavContainer class, which extends MatDrawerContainer. It is responsible for managing multiple MatSidenav components, helping with synchronized visibility and interactions of the sidebar elements.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sidenav/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MatDrawerContainer } from './mat-drawer-container';\n\n// @public (undocumented)\nexport class MatSidenavContainer extends MatDrawerContainer {\n    // Additional properties and methods specific to MatSidenavContainer...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Chip Set Implementation\nDESCRIPTION: Example of creating a basic chip set without specific accessibility roles.\nSOURCE: https://github.com/angular/components/blob/main/src/material/chips/chips.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<mat-chip-set>\n  <mat-chip> John </mat-chip>\n  <mat-chip> Paul </mat-chip>\n  <mat-chip> James </mat-chip>\n</mat-chip-set>\n```\n\n----------------------------------------\n\nTITLE: Defining MapRectangle in Angular with Google Maps\nDESCRIPTION: This snippet defines the 'MapRectangle' class which is used to create rectangular shapes on a Google Map. It includes methods to handle visibility, interactivity, and lifecycle events for the rectangle, including event emitters for user interactions.\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MapRectangle implements OnInit, OnDestroy {\n    constructor(...args: unknown[]);\n    set bounds(bounds: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral);\n    readonly boundsChanged: Observable<void>;\n    getBounds(): google.maps.LatLngBounds | null;\n    getDraggable(): boolean;\n    getEditable(): boolean;\n    getVisible(): boolean;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    set options(options: google.maps.RectangleOptions);\n    rectangle?: google.maps.Rectangle;\n    readonly rectangleClick: Observable<google.maps.MapMouseEvent>;\n    readonly rectangleDblclick: Observable<google.maps.MapMouseEvent>;\n    readonly rectangleDrag: Observable<google.maps.MapMouseEvent>;\n    readonly rectangleDragend: Observable<google.maps.MapMouseEvent>;\n    readonly rectangleDragstart: Observable<google.maps.MapMouseEvent>;\n    readonly rectangleInitialized: EventEmitter<google.maps.Rectangle>;\n    readonly rectangleMousedown: Observable<google.maps.MapMouseEvent>;\n    readonly rectangleMousemove: Observable<google.maps.MapMouseEvent>;\n    readonly rectangleMouseout: Observable<google.maps.MapMouseEvent>;\n    readonly rectangleMouseover: Observable<google.maps.MapMouseEvent>;\n    readonly rectangleMouseup: Observable<google.maps.MapMouseEvent>;\n    readonly rectangleRightclick: Observable<google.maps.MapMouseEvent>;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MapRectangle, \"map-rectangle\", [\"mapRectangle\"], { \"options\": { \"alias\": \"options\"; \"required\": false; }; }, { \"rectangleClick\": \"rectangleClick\"; \"rectangleDblclick\": \"rectangleDblclick\"; \"rectangleDrag\": \"rectangleDrag\"; \"rectangleDragend\": \"rectangleDragend\"; \"rectangleDragstart\": \"rectangleDragstart\"; \"rectangleMousedown\": \"rectangleMousedown\"; \"rectangleMousemove\": \"rectangleMousemove\"; \"rectangleMouseout\": \"rectangleMouseout\"; \"rectangleMouseover\": \"rectangleMouseover\"; \"rectangleMouseup\": \"rectangleMouseup\"; \"rectangleRightclick\": \"rectangleRightclick\"; \"rectangleInitialized\": \"rectangleInitialized\"; }, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MapRectangle, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Map Marker Directive in Angular\nDESCRIPTION: An Angular directive for creating and managing Google Maps markers with extensive configuration options and event handling\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MapMarker implements OnInit, OnChanges, OnDestroy, MapAnchorPoint, MarkerDirective {\n  constructor(...args: unknown[]);\n  readonly animationChanged: Observable<void>;\n  set clickable(clickable: boolean);\n  readonly clickableChanged: Observable<void>;\n  // Additional marker configuration and event methods\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Datepicker Range Colors with SCSS\nDESCRIPTION: Shows how to customize the colors for date range selection in the datepicker using Angular Material's SCSS mixin.\nSOURCE: https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-21_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\n@include mat.datepicker-date-range-colors(hotpink, teal, yellow, purple);\n```\n\n----------------------------------------\n\nTITLE: MatErrorHarness Class Definition\nDESCRIPTION: Defines the harness for testing MatError components. It provides methods for getting the error text and a static `with` method for creating a HarnessPredicate.  The `_getErrorPredicate` method helps to create predicates for filtering error harnesses.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/form-field/testing/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\\nexport class MatErrorHarness extends ComponentHarness {\\n    // (undocumented)\\n    protected static _getErrorPredicate<T extends MatErrorHarness>(type: ComponentHarnessConstructor<T>, options: ErrorHarnessFilters): HarnessPredicate<T>;\\n    getText(): Promise<string>;\\n    // (undocumented)\\n    static hostSelector: string;\\n    static with<T extends MatErrorHarness>(this: ComponentHarnessConstructor<T>, options?: ErrorHarnessFilters): HarnessPredicate<T>;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Color Palettes with Angular Schematic\nDESCRIPTION: Angular CLI command to generate custom color palettes using the Angular Material theme-color schematic, which builds palettes based on input colors for primary, secondary, tertiary, and neutral colors.\nSOURCE: https://github.com/angular/components/blob/main/guides/theming.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng generate @angular/material:theme-color\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection Listbox in Angular CDK\nDESCRIPTION: Demonstrates how to enable multiple selection in a CDK listbox by adding the cdkListboxMultiple attribute to the container element.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/listbox/listbox.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<ul cdkListbox cdkListboxMultiple>\n  <li cdkOption value=\"1\">Option 1</li>\n  <li cdkOption value=\"2\">Option 2</li>\n  <li cdkOption value=\"3\">Option 3</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Checking Element Tabbability in TypeScript\nDESCRIPTION: Method to check if an HTML element can be reached via the Tab key. It assumes that the element has already been checked for focusability. Part of the InteractivityChecker class in Angular components.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/interactivity-checker/interactivity-checker.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nisTabbable(element: HTMLElement): boolean\n```\n\n----------------------------------------\n\nTITLE: Loading MatButton Harnesses with getAllHarnesses and getHarness\nDESCRIPTION: This snippet demonstrates how to load harnesses for MatButton components using the getAllHarnesses method to get all button harnesses and getHarness to get the first matching button harness.\nSOURCE: https://github.com/angular/components/blob/main/guides/using-component-harnesses.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {MatButtonHarness} from '@angular/material/button/testing';\n\n...\n\nit('should work', async () => {\n  const buttons = await loader.getAllHarnesses(MatButtonHarness); // length: 3\n  const firstButton = await loader.getHarness(MatButtonHarness); // === buttons[0]\n});\n```\n\n----------------------------------------\n\nTITLE: MatTimepickerInput Class Definition\nDESCRIPTION: This snippet defines the MatTimepickerInput directive class, which is used to bind a standard input field to a MatTimepicker component. It implements the ControlValueAccessor and Validator interfaces, allowing it to be used with Angular forms. It also includes properties for managing the input's value, min/max values, and disabled state.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/timepicker/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatTimepickerInput<D> implements ControlValueAccessor, Validator, OnDestroy {\n    constructor();\n    protected readonly _ariaActiveDescendant: Signal<string | null>;\n    protected readonly _ariaControls: Signal<string | null>;\n    protected readonly _ariaExpanded: Signal<string>;\n    readonly disabled: Signal<boolean>;\n    readonly disabledInput: InputSignalWithTransform<boolean, unknown>;\n    focus(): void;\n    _getLabelId(): string | null;\n    getOverlayOrigin(): ElementRef<HTMLElement>;\n    protected _handleBlur(): void;\n    protected _handleInput(event: Event): void;\n    protected _handleKeydown(event: KeyboardEvent): void;\n    readonly max: InputSignalWithTransform<D | null, unknown>;\n    readonly min: InputSignalWithTransform<D | null, unknown>;\n    // (undocumented)\n    ngOnDestroy(): void;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: () => void): void;\n    registerOnValidatorChange(fn: () => void): void;\n    setDisabledState(isDisabled: boolean): void;\n    readonly timepicker: InputSignal<MatTimepicker<D>>;\n    validate(control: AbstractControl): ValidationErrors | null;\n    readonly value: ModelSignal<D | null>;\n    writeValue(value: any): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatTimepickerInput<any>, \"input[matTimepicker]\", [\"matTimepickerInput\"], { \"value\": { \"alias\": \"value\"; \"required\": false; \"isSignal\": true; }; \"timepicker\": { \"alias\": \"matTimepicker\"; \"required\": true; \"isSignal\": true; }; \"min\": { \"alias\": \"matTimepickerMin\"; \"required\": false; \"isSignal\": true; }; \"max\": { \"alias\": \"matTimepickerMax\"; \"required\": false; \"isSignal\": true; }; \"disabledInput\": { \"alias\": \"disabled\"; \"required\": false; \"isSignal\": true; }; }, { \"value\": \"valueChange\"; }, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTimepickerInput<any>, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Date Adapter Abstract Class\nDESCRIPTION: Abstract class defining interface for date implementations providing methods for date manipulation, formatting, and locale handling.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/core/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport abstract class DateAdapter<D, L = any> {\n    abstract addCalendarDays(date: D, days: number): D;\n    abstract addCalendarMonths(date: D, months: number): D;\n    abstract addCalendarYears(date: D, years: number): D;\n    addSeconds(date: D, amount: number): D;\n    clampDate(date: D, min?: D | null, max?: D | null): D;\n    abstract clone(date: D): D;\n    compareDate(first: D, second: D): number;\n    compareTime(first: D, second: D): number;\n    abstract createDate(year: number, month: number, date: number): D;\n    deserialize(value: any): D | null;\n    abstract format(date: D, displayFormat: any): string;\n    abstract getDate(date: D): number;\n    abstract getDateNames(): string[];\n    abstract getDayOfWeek(date: D): number;\n    abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n    abstract getFirstDayOfWeek(): number;\n    getHours(date: D): number;\n    getMinutes(date: D): number;\n    abstract getMonth(date: D): number;\n    abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n    abstract getNumDaysInMonth(date: D): number;\n    getSeconds(date: D): number;\n    getValidDateOrNull(obj: unknown): D | null;\n    abstract getYear(date: D): number;\n    abstract getYearName(date: D): string;\n    abstract invalid(): D;\n    abstract isDateInstance(obj: any): boolean;\n    abstract isValid(date: D): boolean;\n    protected locale: L;\n    readonly localeChanges: Observable<void>;\n    protected readonly _localeChanges: Subject<void>;\n    abstract parse(value: any, parseFormat: any): D | null;\n    parseTime(value: any, parseFormat: any): D | null;\n    sameDate(first: D | null, second: D | null): boolean;\n    sameTime(first: D | null, second: D | null): boolean;\n    setLocale(locale: L): void;\n    setTime(target: D, hours: number, minutes: number, seconds: number): D;\n    abstract today(): D;\n    abstract toIso8601(date: D): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Breakpoints with BreakpointObserver in TypeScript\nDESCRIPTION: This snippet demonstrates the use of predefined breakpoints from the Breakpoints constant with BreakpointObserver. It observes changes for handset layouts in both landscape and portrait orientations, activating a specific layout when matched.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/layout/layout.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbreakpointObserver.observe([\n  Breakpoints.HandsetLandscape,\n  Breakpoints.HandsetPortrait\n]).subscribe(result => {\n  if (result.matches) {\n    this.activateHandsetLayout();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: DragDropConfig Interface Definition\nDESCRIPTION: Configuration interface for drag-drop operations. Defines customizable options like boundary elements, constraints, delays and orientations.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/drag-drop/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DragDropConfig extends Partial<DragRefConfig> {\n    boundaryElement?: string;\n    constrainPosition?: DragConstrainPosition;\n    draggingDisabled?: boolean;\n    dragStartDelay?: DragStartDelay;\n    listAutoScrollDisabled?: boolean;\n    listOrientation?: DropListOrientation;\n    lockAxis?: DragAxis;\n    previewClass?: string | string[];\n    previewContainer?: 'global' | 'parent';\n    rootElementSelector?: string;\n    sortingDisabled?: boolean;\n    zIndex?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Bottom Sheet Dismissal in Angular Material\nDESCRIPTION: Shows how to subscribe to the afterDismissed event and programmatically dismiss a bottom sheet using the MatBottomSheetRef.\nSOURCE: https://github.com/angular/components/blob/main/src/material/bottom-sheet/bottom-sheet.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbottomSheetRef.afterDismissed().subscribe(() => {\n  console.log('Bottom sheet has been dismissed.');\n});\n\nbottomSheetRef.dismiss();\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Datepicker Testing API\nDESCRIPTION: Comprehensive TypeScript definitions for testing harnesses used with Angular Material's datepicker components. Includes interfaces for filters, enums for calendar views, and classes for interacting with calendar cells, inputs, toggles, and date ranges during testing.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport interface CalendarCellHarnessFilters extends BaseHarnessFilters {\n    active?: boolean;\n    disabled?: boolean;\n    inComparisonRange?: boolean;\n    inPreviewRange?: boolean;\n    inRange?: boolean;\n    selected?: boolean;\n    text?: string | RegExp;\n    today?: boolean;\n}\n\n// @public\nexport interface CalendarHarnessFilters extends BaseHarnessFilters {\n}\n\n// @public\nexport enum CalendarView {\n    // (undocumented)\n    MONTH = 0,\n    // (undocumented)\n    MULTI_YEAR = 2,\n    // (undocumented)\n    YEAR = 1\n}\n\n// @public\nexport interface DatepickerInputHarnessFilters extends BaseHarnessFilters {\n    placeholder?: string | RegExp;\n    value?: string | RegExp;\n}\n\n// @public\nexport interface DatepickerToggleHarnessFilters extends BaseHarnessFilters {\n}\n\n// @public\nexport interface DateRangeInputHarnessFilters extends BaseHarnessFilters {\n    value?: string | RegExp;\n}\n\n// @public\nexport class MatCalendarCellHarness extends ComponentHarness {\n    blur(): Promise<void>;\n    focus(): Promise<void>;\n    getAriaLabel(): Promise<string>;\n    getText(): Promise<string>;\n    // (undocumented)\n    static hostSelector: string;\n    hover(): Promise<void>;\n    isActive(): Promise<boolean>;\n    isComparisonRangeEnd(): Promise<boolean>;\n    isComparisonRangeStart(): Promise<boolean>;\n    isDisabled(): Promise<boolean>;\n    isInComparisonRange(): Promise<boolean>;\n    isInPreviewRange(): Promise<boolean>;\n    isInRange(): Promise<boolean>;\n    isPreviewRangeEnd(): Promise<boolean>;\n    isPreviewRangeStart(): Promise<boolean>;\n    isRangeEnd(): Promise<boolean>;\n    isRangeStart(): Promise<boolean>;\n    isSelected(): Promise<boolean>;\n    isToday(): Promise<boolean>;\n    mouseAway(): Promise<void>;\n    select(): Promise<void>;\n    static with(options?: CalendarCellHarnessFilters): HarnessPredicate<MatCalendarCellHarness>;\n}\n\n// @public\nexport class MatCalendarHarness extends ComponentHarness {\n    changeView(): Promise<void>;\n    getCells(filter?: CalendarCellHarnessFilters): Promise<MatCalendarCellHarness[]>;\n    getCurrentView(): Promise<CalendarView>;\n    getCurrentViewLabel(): Promise<string>;\n    // (undocumented)\n    static hostSelector: string;\n    next(): Promise<void>;\n    previous(): Promise<void>;\n    selectCell(filter?: CalendarCellHarnessFilters): Promise<void>;\n    static with(options?: CalendarHarnessFilters): HarnessPredicate<MatCalendarHarness>;\n}\n\n// @public\nexport class MatDatepickerInputHarness extends MatDatepickerInputHarnessBase implements DatepickerTrigger {\n    closeCalendar(): Promise<void>;\n    getCalendar(filter?: CalendarHarnessFilters): Promise<MatCalendarHarness>;\n    hasCalendar(): Promise<boolean>;\n    // (undocumented)\n    static hostSelector: string;\n    isCalendarOpen(): Promise<boolean>;\n    openCalendar(): Promise<void>;\n    static with(options?: DatepickerInputHarnessFilters): HarnessPredicate<MatDatepickerInputHarness>;\n}\n\n// @public\nexport class MatDatepickerToggleHarness extends DatepickerTriggerHarnessBase {\n    // (undocumented)\n    static hostSelector: string;\n    isCalendarOpen(): Promise<boolean>;\n    isDisabled(): Promise<boolean>;\n    // (undocumented)\n    protected _openCalendar(): Promise<void>;\n    static with(options?: DatepickerToggleHarnessFilters): HarnessPredicate<MatDatepickerToggleHarness>;\n}\n\n// @public\nexport class MatDateRangeInputHarness extends DatepickerTriggerHarnessBase {\n    getEndInput(): Promise<MatEndDateHarness>;\n    getSeparator(): Promise<string>;\n    getStartInput(): Promise<MatStartDateHarness>;\n    getValue(): Promise<string>;\n    // (undocumented)\n    static hostSelector: string;\n    isCalendarOpen(): Promise<boolean>;\n    isDisabled(): Promise<boolean>;\n    isRequired(): Promise<boolean>;\n    // (undocumented)\n    protected _openCalendar(): Promise<void>;\n    static with(options?: DateRangeInputHarnessFilters): HarnessPredicate<MatDateRangeInputHarness>;\n}\n\n// @public\nexport class MatEndDateHarness extends MatDatepickerInputHarnessBase {\n    // (undocumented)\n    static hostSelector: string;\n    static with(options?: DatepickerInputHarnessFilters): HarnessPredicate<MatEndDateHarness>;\n}\n\n// @public\nexport class MatStartDateHarness extends MatDatepickerInputHarnessBase {\n    // (undocumented)\n    static hostSelector: string;\n    static with(options?: DatepickerInputHarnessFilters): HarnessPredicate<MatStartDateHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu Trigger in Angular CDK Menu\nDESCRIPTION: Code snippet showing how to create a menu trigger that opens a menu. This demonstrates using the cdkMenuTriggerFor directive with a reference to the menu template.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/menu/menu.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"example-standalone-trigger\" [cdkMenuTriggerFor]=\"menu\">Open</button>\n\n<ng-template #menu>\n```\n\n----------------------------------------\n\nTITLE: Defining MatRadioGroupHarness for Angular Testing\nDESCRIPTION: This snippet defines the MatRadioGroupHarness class, which manages a group of radio buttons, allowing for interaction and state checking. It includes methods for checking specific radio buttons and getting checked values. Similar to the previous harness, it depends on Angular CDK Testing.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/radio/testing/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatRadioGroupHarness extends ComponentHarness {\n    checkRadioButton(filter?: RadioButtonHarnessFilters): Promise<void>;\n    protected static _checkRadioGroupName(harness: MatRadioGroupHarness, name: string): Promise<boolean>;\n    getCheckedRadioButton(): Promise<MatRadioButtonHarness | null>;\n    getCheckedValue(): Promise<string | null>;\n    getId(): Promise<string | null>;\n    getName(): Promise<string | null>;\n    getRadioButtons(filter?: RadioButtonHarnessFilters): Promise<MatRadioButtonHarness[]>;\n    static hostSelector: string;\n    static with<T extends MatRadioGroupHarness>(this: ComponentHarnessConstructor<T>, options?: RadioGroupHarnessFilters): HarnessPredicate<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lists with Inset Dividers in Angular Material\nDESCRIPTION: Demonstrates how to use <mat-divider> elements within a <mat-list> to separate content into sections and create distinct elements. It includes examples of using inset dividers and conditional rendering to avoid overlapping with section dividers.\nSOURCE: https://github.com/angular/components/blob/main/src/material/divider/divider.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<mat-list>\n   <h3 mat-subheader>Folders</h3>\n   @for (folder of folders; track folder) {\n      <mat-list-item>\n         <mat-icon mat-list-icon>folder</mat-icon>\n         <h4 mat-line>{{folder.name}}</h4>\n         <p mat-line class=\"demo-2\">{{folder.updated}}</p>\n         @if (!$last) {\n            <mat-divider [inset]=\"true\"></mat-divider>\n         }\n      </mat-list-item>\n   }\n   <mat-divider></mat-divider>\n   <h3 mat-subheader>Notes</h3>\n   @for (note of notes; track node) {\n      <mat-list-item>\n         <mat-icon mat-list-icon>note</mat-icon>\n         <h4 mat-line>{{note.name}}</h4>\n         <p mat-line class=\"demo-2\"> {{note.updated}} </p>\n      </mat-list-item>\n   }\n</mat-list>\n```\n\n----------------------------------------\n\nTITLE: Using Context Variables with cdkVirtualFor in Angular\nDESCRIPTION: Example showing how to use the context variables (index, count, first, last, even, odd) available in cdkVirtualFor templates. These variables apply to the index in the data source, not the rendered portion.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/scrolling/scrolling.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-virtual-scroll-context) -->\n```\n\n----------------------------------------\n\nTITLE: Array Item Movement Utility Function in TypeScript\nDESCRIPTION: A function to move an item within an array from one index to another. No additional dependencies are required. Key parameters include the array to be manipulated and the indices indicating where the item is moved from and to respectively.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/drag-drop/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void;\n```\n\n----------------------------------------\n\nTITLE: Progress Spinner Test Harness Implementation in TypeScript\nDESCRIPTION: Defines the test harness implementation for Material Progress Spinner component testing. Includes a harness class with methods for retrieving spinner mode and value, along with static utilities for component selection and filtering.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/progress-spinner/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport class MatProgressSpinnerHarness extends ComponentHarness {\n    getMode(): Promise<ProgressSpinnerMode>;\n    getValue(): Promise<number | null>;\n    static hostSelector: string;\n    static with<T extends MatProgressSpinnerHarness>(this: ComponentHarnessConstructor<T>, options?: ProgressSpinnerHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport interface ProgressSpinnerHarnessFilters extends BaseHarnessFilters {\n}\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Divider in Angular Material\nDESCRIPTION: Illustrates the use of the [vertical] attribute to create a vertically-oriented divider with the <mat-divider> element.\nSOURCE: https://github.com/angular/components/blob/main/src/material/divider/divider.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<mat-divider [vertical]=\"true\"></mat-divider>\n```\n\n----------------------------------------\n\nTITLE: Defining SelectHarnessFilters Interface in TypeScript\nDESCRIPTION: This code defines the `SelectHarnessFilters` interface, which extends `BaseHarnessFilters`. It's used to filter `MatSelectHarness` instances based on specific criteria. In this case, it allows filtering by the `disabled` property of the select component.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/select/testing/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public\nexport interface SelectHarnessFilters extends BaseHarnessFilters {\n    disabled?: boolean;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing MatChipEditInput directive for editable chips\nDESCRIPTION: A directive that enables editing of chip content. It provides methods to manage the input element's state during editing operations, including initialization and value retrieval.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/chips/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatChipEditInput {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    getNativeElement(): HTMLElement;\n    // (undocumented)\n    getValue(): string;\n    // (undocumented)\n    initialize(initialValue: string): void;\n    // (undocumented)\n    setValue(value: string): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatChipEditInput, \"span[matChipEditInput]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatChipEditInput, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract DataSource Class in TypeScript\nDESCRIPTION: This snippet defines the abstract DataSource class with abstract methods for connecting and disconnecting collection viewers.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/collections/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport abstract class DataSource<T> {\n    abstract connect(collectionViewer: CollectionViewer): Observable<readonly T[]>;\n    abstract disconnect(collectionViewer: CollectionViewer): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Typography Map with Multiple Font Families\nDESCRIPTION: Theme configuration that specifies different font families for plain and brand text, along with custom font weights for bold, medium, and regular text styles, combined with a violet color palette and standard density.\nSOURCE: https://github.com/angular/components/blob/main/guides/theming.md#2025-04-21_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\nhtml {\n  @include mat.theme((\n    color: mat.$violet-palette,\n    typography: (\n      plain-family: Roboto,\n      brand-family: Open Sans,\n      bold-weight: 900,\n      medium-weight: 500,\n      regular-weight: 300,\n    ),\n    density: 0,\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Discrete Thumb Label to Angular Material Slider in HTML\nDESCRIPTION: This snippet demonstrates how to add a discrete thumb label to the slider, which displays the exact selected value. It uses the discrete attribute on the mat-slider component.\nSOURCE: https://github.com/angular/components/blob/main/src/material/slider/slider.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<mat-slider discrete>\n  <input matSliderThumb>\n</mat-slider>\n```\n\n----------------------------------------\n\nTITLE: Positioning Content in Angular Material Toolbar\nDESCRIPTION: Demonstrates how to position content within a toolbar using flexbox. This example shows a common pattern of placing a title on the left and actions on the right.\nSOURCE: https://github.com/angular/components/blob/main/src/material/toolbar/toolbar.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<mat-toolbar>\n  <span>My Application</span>\n  <span class=\"example-spacer\"></span>\n  <button mat-icon-button class=\"example-icon\" aria-label=\"Example icon-button with menu icon\">\n    <mat-icon>menu</mat-icon>\n  </button>\n  <button mat-icon-button class=\"example-icon favorite-icon\" aria-label=\"Example icon-button with heart icon\">\n    <mat-icon>favorite</mat-icon>\n  </button>\n  <button mat-icon-button class=\"example-icon\" aria-label=\"Example icon-button with share icon\">\n    <mat-icon>share</mat-icon>\n  </button>\n</mat-toolbar>\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Interaction for Angular CDK Stepper\nDESCRIPTION: This snippet outlines the keyboard shortcuts and their corresponding actions for interacting with the CDK Stepper component. It provides accessibility through keyboard navigation.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/stepper/stepper.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Keyboard shortcut      | Action                          |\n|------------------------|---------------------------------|\n| <kbd>Left Arrow</kbd>  | Focus the previous step header. |\n| <kbd>Right Arrow</kbd> | Focus the next step header.     |\n| <kbd>Enter</kbd>       | Select the focused step.        |\n| <kbd>Space</kbd>       | Select the focused step.        |\n```\n\n----------------------------------------\n\nTITLE: Class Declaration for MatSortHeader in Angular\nDESCRIPTION: The `MatSortHeader` class provides the sorting header component for Material tables, implementing Angular lifecycle hooks and interactions including keyboard inputs and animations.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sort/index.api.md#2025-04-21_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatSortHeader implements MatSortable, OnDestroy, OnInit, AfterViewInit {\n    constructor(...args: unknown[]);\n    protected _animationsDisabled: boolean;\n    arrowPosition: SortHeaderArrowPosition;\n    _columnDef: MatSortHeaderColumnDef | null;\n    disableClear: boolean;\n    disabled: boolean;\n    _getAriaSortAttribute(): \"none\" | \"ascending\" | \"descending\";\n    _handleKeydown(event: KeyboardEvent): void;\n    id: string;\n    _intl: MatSortHeaderIntl;\n    _isDisabled(): boolean;\n    _isSorted(): boolean;\n    static ngAcceptInputType_disableClear: unknown;\n    static ngAcceptInputType_disabled: unknown;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    protected _recentlyCleared: i0.WritableSignal<SortDirection | null>;\n    _renderArrow(): boolean;\n    _sort: MatSort;\n    get sortActionDescription(): string;\n    set sortActionDescription(value: string);\n    start: SortDirection;\n    _toggleOnInteraction(): void;\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatSortHeader, \"[mat-sort-header]\", [\"matSortHeader\"], { \"id\": { \"alias\": \"mat-sort-header\"; \"required\": false; }; \"arrowPosition\": { \"alias\": \"arrowPosition\"; \"required\": false; }; \"start\": { \"alias\": \"start\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"sortActionDescription\": { \"alias\": \"sortActionDescription\"; \"required\": false; }; \"disableClear\": { \"alias\": \"disableClear\"; \"required\": false; }; }, {}, never, [\"*\"], true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatSortHeader, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MapPolyline Component in TypeScript\nDESCRIPTION: Sets up an Angular component that defines a polyline on a Google Map using coordinate vertices. The component initializes map center coordinates, zoom level, and an array of latitude/longitude points that form the polyline path.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-polyline/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// google-maps-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapPolyline} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap, MapPolyline],\n})\nexport class GoogleMapDemo {\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n\n  vertices: google.maps.LatLngLiteral[] = [\n    {lat: 13, lng: 13},\n    {lat: -13, lng: 0},\n    {lat: 13, lng: -13},\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatSidenav as a Class in Angular Material\nDESCRIPTION: This snippet defines the MatSidenav class, which inherits from MatDrawer. It adds specific properties related to fixed gaps within the viewport and the bottom of the fixed element. This class enhances the drawer functionality with additional visual capabilities.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sidenav/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MatDrawer } from './mat-drawer';\n\n// @public (undocumented)\nexport class MatSidenav extends MatDrawer {\n    get fixedBottomGap(): number;\n    set fixedBottomGap(value: NumberInput);\n    get fixedInViewport(): boolean;\n    set fixedInViewport(value: BooleanInput);\n    // More properties and methods...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Tree Node Template in Angular Material\nDESCRIPTION: Illustrates how to define a basic tree node template using matNodeDef directive. This template defines the look of the tree node and allows binding to the node data.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tree/tree.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<mat-tree-node *matNodeDef=\"let node\">\n  {{node.key}}: {{node.value}}\n</mat-tree-node>\n```\n\n----------------------------------------\n\nTITLE: Creating Mat Cell Harness in Angular CDK Testing\nDESCRIPTION: The MatCellHarness class extends _MatCellHarnessBase to represent a cell in an Angular Material table. It includes static methods like hostSelector and a with() method to retrieve cell harnesses based on specified filters. It operates within the Angular CDK testing environment.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/table/testing/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatCellHarness extends _MatCellHarnessBase {\n    static hostSelector: string;\n    static with(options?: CellHarnessFilters): HarnessPredicate<MatCellHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Option Values in Angular CDK Listbox\nDESCRIPTION: Shows how to define values for options in a CDK listbox. Each option can have an explicit value, or use an empty string as a default value if not specified.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/listbox/listbox.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<li cdkOption=\"red\">Red</li>\n<li cdkOption>No color preference</li>\n```\n\n----------------------------------------\n\nTITLE: Applying a Theme to Components in Angular Material 2\nDESCRIPTION: Shows how to apply a theme to individual components by including their theme mixins. This example includes the core theme and button component theme, which will apply styles based on the provided theme configuration.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\n$my-primary: mat.m2-define-palette(mat.$m2-indigo-palette, 500);\n$my-accent: mat.m2-define-palette(mat.$m2-pink-palette, A200, A100, A400);\n\n$my-theme: mat.m2-define-light-theme((\n color: (\n   primary: $my-primary,\n   accent: $my-accent,\n ),\n typography: mat.m2-define-typography-config(),\n density: 0,\n));\n\n// Emit theme-dependent styles for common features used across multiple components.\n@include mat.core-theme($my-theme);\n\n// Emit styles for MatButton based on `$my-theme`. Because the configuration\n// passed to `m2-define-light-theme` omits typography, `button-theme` will not\n// emit any typography styles.\n@include mat.button-theme($my-theme);\n\n// Include the theme mixins for other components you use here.\n```\n\n----------------------------------------\n\nTITLE: MatTabLink Class Definition in TypeScript\nDESCRIPTION: Implementation of a tab link for use in tab navigation components. It extends InkBarItem and implements various interfaces for focus management, accessibility, and ripple effects.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatTabLink extends InkBarItem implements AfterViewInit, OnDestroy, RippleTarget, FocusableOption {\n    constructor(...args: unknown[]);\n    get active(): boolean;\n    set active(value: boolean);\n    disabled: boolean;\n    disableRipple: boolean;\n    // (undocumented)\n    elementRef: ElementRef<any>;\n    focus(): void;\n    // (undocumented)\n    _getAriaControls(): string | null;\n    // (undocumented)\n    _getAriaCurrent(): string | null;\n    // (undocumented)\n    _getAriaSelected(): string | null;\n    // (undocumented)\n    _getRole(): string | null;\n    // (undocumented)\n    _getTabIndex(): number;\n    // (undocumented)\n    _handleFocus(): void;\n    // (undocumented)\n    _handleKeydown(event: KeyboardEvent): void;\n    id: string;\n    protected _isActive: boolean;\n    // (undocumented)\n    static ngAcceptInputType_active: unknown;\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    static ngAcceptInputType_disableRipple: unknown;\n    // (undocumented)\n    static ngAcceptInputType_tabIndex: unknown;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    rippleConfig: RippleConfig & RippleGlobalOptions;\n    get rippleDisabled(): boolean;\n    // (undocumented)\n    tabIndex: number;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatTabLink, \"[mat-tab-link], [matTabLink]\", [\"matTabLink\"], { \"active\": { \"alias\": \"active\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"disableRipple\": { \"alias\": \"disableRipple\"; \"required\": false; }; \"tabIndex\": { \"alias\": \"tabIndex\"; \"required\": false; }; \"id\": { \"alias\": \"id\"; \"required\": false; }; }, {}, never, [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTabLink, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Defaults for Bottom Sheets in Angular Material\nDESCRIPTION: Demonstrates how to specify global default options for bottom sheets using MAT_BOTTOM_SHEET_DEFAULT_OPTIONS in the application's root module.\nSOURCE: https://github.com/angular/components/blob/main/src/material/bottom-sheet/bottom-sheet.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@NgModule({\n  providers: [\n    {provide: MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, useValue: {hasBackdrop: false}}\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Scroll Strategy Class\nDESCRIPTION: TypeScript class implementing ScrollStrategy interface for blocking scroll behavior during overlay display.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class BlockScrollStrategy implements ScrollStrategy {\n    constructor(_viewportRuler: ViewportRuler, document: any);\n    attach(): void;\n    disable(): void;\n    enable(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing DialogRef in Template in HTML\nDESCRIPTION: Demonstrates how to access both the data and DialogRef in a TemplateRef-based dialog content.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/dialog/dialog.md#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<ng-template let-data let-dialogRef=\"dialogRef\">\n    Hello, {{data.name}}\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Injection Token for MatTab\nDESCRIPTION: This code defines an injection token for the `MatTab` component, which can be used to access instances of the tab within the Angular dependency injection system.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const MAT_TAB: InjectionToken<any>;\"\n```\n\n----------------------------------------\n\nTITLE: Defining MatStepperPreviousHarness Class - TypeScript\nDESCRIPTION: The MatStepperPreviousHarness class extends StepperButtonHarness for testing the previous button of the Angular Material stepper. It provides a static method to create instances with specific options. Dependencies include the Angular CDK testing module.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/stepper/testing/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatStepperPreviousHarness extends StepperButtonHarness {\n    static hostSelector: string;\n    static with(options?: StepperButtonHarnessFilters): HarnessPredicate<MatStepperPreviousHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatDatepickerControl Interface in TypeScript\nDESCRIPTION: Defines an interface for components that can be used with a datepicker. It includes methods and properties for getting/setting date ranges, validation, and connecting to overlay components.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MatDatepickerControl<D> {\n    // (undocumented)\n    dateFilter: DateFilterFn<D>;\n    // (undocumented)\n    disabled: boolean;\n    // (undocumented)\n    getConnectedOverlayOrigin(): ElementRef;\n    // (undocumented)\n    getOverlayLabelId(): string | null;\n    // (undocumented)\n    getStartValue(): D | null;\n    // (undocumented)\n    getThemePalette(): ThemePalette;\n    // (undocumented)\n    max: D | null;\n    // (undocumented)\n    min: D | null;\n    // (undocumented)\n    stateChanges: Observable<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: MapBicyclingLayer Template Implementation in HTML\nDESCRIPTION: HTML template that renders a Google Map with specified dimensions and includes the bicycling layer component. Sets map properties through component bindings.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-bicycling-layer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- google-maps-demo.component.html -->\n<google-map height=\"400px\" width=\"750px\" [center]=\"center\" [zoom]=\"zoom\">\n  <map-bicycling-layer />\n</google-map>\n```\n\n----------------------------------------\n\nTITLE: Using cdk-visually-hidden Class in HTML\nDESCRIPTION: Shows how to apply the cdk-visually-hidden class to an input element to make it visually hidden but accessible to assistive technology.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/a11y.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"custom-checkbox\">\n  <input type=\"checkbox\" class=\"cdk-visually-hidden\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Determinate Progress Bar in Angular Material\nDESCRIPTION: Example of using the determinate mode for the <mat-progress-bar> component. This mode is used when the percentage of completion is known and represented by the 'value' property.\nSOURCE: https://github.com/angular/components/blob/main/src/material/progress-bar/progress-bar.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(progress-bar-determinate) -->\n```\n\n----------------------------------------\n\nTITLE: Using MediaMatcher in an Angular Component\nDESCRIPTION: This example demonstrates how to inject and use the MediaMatcher service from Angular CDK to check for landscape orientation. The component constructor uses MediaMatcher to determine the device orientation and call the appropriate setup method.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/layout/media-matcher.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({ ... }) \nexport class MyWidget {  \n  constructor(mm: MediaMatcher) {\n    mm.matchMedia('(orientation: landscape)').matches ? \n      this.setLandscapeMode() :\n      this.setPortraitMode();\n  }\n}  \n```\n\n----------------------------------------\n\nTITLE: Defining MatTabNavBarHarness for Angular Material Testing\nDESCRIPTION: This class acts as a test harness for the MatTabNavBar, providing methods to interact with links, retrieve the currently active link, and fetch all links. It also allows for the filtering of links through its static methods.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/testing/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatTabNavBarHarness extends ComponentHarness {\n    clickLink(filter?: TabLinkHarnessFilters): Promise<void>;\n    getActiveLink(): Promise<MatTabLinkHarness>;\n    getLinks(filter?: TabLinkHarnessFilters): Promise<MatTabLinkHarness[]>;\n    getPanel(): Promise<MatTabNavPanelHarness>;\n    static hostSelector: string;\n    static with<T extends MatTabNavBarHarness>(this: ComponentHarnessConstructor<T>, options?: TabNavBarHarnessFilters): HarnessPredicate<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatSelectionList Component\nDESCRIPTION: Defines the MatSelectionList class which includes properties, methods, and event emitters for handling a selection list. This component leverages Angular Material to provide robust selection capabilities and integrates lifecycle hooks such as ngAfterViewInit. It is dependent on Angular core and Material libraries.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass MatSelectionList {\n    constructor(...args: unknown[]);\n    color: ThemePalette;\n    compareWith: (o1: any, o2: any) => boolean;\n    deselectAll(): MatListOption[];\n    get disabled(): boolean;\n    set disabled(value: BooleanInput);\n    _element: ElementRef<HTMLElement>;\n    _emitChangeEvent(options: MatListOption[]): void;\n    focus(options?: FocusOptions): void;\n    _handleKeydown(event: KeyboardEvent): void;\n    get hideSingleSelectionIndicator(): boolean;\n    set hideSingleSelectionIndicator(value: BooleanInput);\n    _items: QueryList<MatListOption>;\n    get multiple(): boolean;\n    set multiple(value: BooleanInput);\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    _onTouched: () => void;\n    get options(): QueryList<MatListOption>;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: () => void): void;\n    _reportValueChange(): void;\n    selectAll(): MatListOption[];\n    selectedOptions: SelectionModel<MatListOption>;\n    readonly selectionChange: EventEmitter<MatSelectionListChange>;\n    setDisabledState(isDisabled: boolean): void;\n    _value: string[] | null;\n    writeValue(values: string[]): void;\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatSelectionList, \"mat-selection-list\", [\"matSelectionList\"], { \"color\": { \"alias\": \"color\"; \"required\": false; }; \"compareWith\": { \"alias\": \"compareWith\"; \"required\": false; }; \"multiple\": { \"alias\": \"multiple\"; \"required\": false; }; \"hideSingleSelectionIndicator\": { \"alias\": \"hideSingleSelectionIndicator\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; }, { \"selectionChange\": \"selectionChange\"; }, [\"_items\"], [\"*\"], true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatSelectionList, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Indeterminate Progress Bar in Angular Material\nDESCRIPTION: Example of using the indeterminate mode for the <mat-progress-bar> component. This mode is used when the duration of an operation is unknown. In this mode, the 'value' property is ignored.\nSOURCE: https://github.com/angular/components/blob/main/src/material/progress-bar/progress-bar.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(progress-bar-indeterminate) -->\n```\n\n----------------------------------------\n\nTITLE: Defining MatDatepickerApply Class in TypeScript\nDESCRIPTION: Implements a directive for the apply button in datepickers. When clicked, it triggers the selection to be applied to the connected input field.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatDatepickerApply {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    _applySelection(): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatDatepickerApply, \"[matDatepickerApply], [matDateRangePickerApply]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDatepickerApply, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Selection Logic for Angular Material Table\nDESCRIPTION: TypeScript implementation of selection handling methods for toggling all rows and checking selection state.\nSOURCE: https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/** Whether the number of selected elements matches the total number of rows. */\nisAllSelected() {\n  const numSelected = this.selection.selected.length;\n  const numRows = this.dataSource.data.length;\n  return numSelected == numRows;\n}\n\n/** Selects all rows if they are not all selected; otherwise clear selection. */\ntoggleAllRows() {\n  this.isAllSelected() ?\n      this.selection.clear() :\n      this.dataSource.data.forEach(row => this.selection.select(row));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectionModel Class in TypeScript\nDESCRIPTION: This class provides methods for managing selections, including selecting, deselecting, and toggling items. It supports both single and multiple selection modes.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/collections/index.api.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport class SelectionModel<T> {\n    constructor(_multiple?: boolean, initiallySelectedValues?: T[], _emitChanges?: boolean, compareWith?: ((o1: T, o2: T) => boolean) | undefined);\n    readonly changed: Subject<SelectionChange<T>>;\n    clear(flushEvent?: boolean): boolean;\n    compareWith?: ((o1: T, o2: T) => boolean) | undefined;\n    deselect(...values: T[]): boolean;\n    hasValue(): boolean;\n    isEmpty(): boolean;\n    isMultipleSelection(): boolean;\n    isSelected(value: T): boolean;\n    select(...values: T[]): boolean;\n    get selected(): T[];\n    setSelection(...values: T[]): boolean;\n    sort(predicate?: (a: T, b: T) => number): void;\n    toggle(value: T): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Divider in Angular Material\nDESCRIPTION: Demonstrates how to use the <mat-divider> element to create a basic horizontal or vertical line separator styled with Material theme.\nSOURCE: https://github.com/angular/components/blob/main/src/material/divider/divider.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mat-divider></mat-divider>\n```\n\n----------------------------------------\n\nTITLE: Defining BasePortalOutlet Abstract Class\nDESCRIPTION: This snippet defines the BasePortalOutlet abstract class, which implements the PortalOutlet interface and provides basic functionality for portal outlets.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/portal/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport abstract class BasePortalOutlet implements PortalOutlet {\n    attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n    attach(portal: any): any;\n    abstract attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    readonly attachDomPortal: null | ((portal: DomPortal) => any);\n    protected _attachedPortal: Portal<any> | null;\n    abstract attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n    detach(): void;\n    dispose(): void;\n    hasAttached(): boolean;\n    setDisposeFn(fn: () => void): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Bottom Sheet in Angular Material\nDESCRIPTION: Demonstrates how to open a bottom sheet using the MatBottomSheet service. It shows how to pass configuration options and get a reference to the opened bottom sheet.\nSOURCE: https://github.com/angular/components/blob/main/src/material/bottom-sheet/bottom-sheet.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst bottomSheetRef = bottomSheet.open(SocialShareComponent, {\n  ariaLabel: 'Share on social media'\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Buffer Progress Bar in Angular Material\nDESCRIPTION: Example of using the buffer mode for the <mat-progress-bar> component. This mode is used to indicate activity or loading from the server. The 'value' property determines the primary bar progress, while 'bufferValue' shows additional buffering progress.\nSOURCE: https://github.com/angular/components/blob/main/src/material/progress-bar/progress-bar.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(progress-bar-buffer) -->\n```\n\n----------------------------------------\n\nTITLE: MatSliderRangeThumb Class Declaration\nDESCRIPTION: This code defines the `MatSliderRangeThumb` class, which extends `MatSliderThumb` and represents a thumb for range sliders.  It includes methods for handling user interactions, updating the UI, and managing the value of the thumb within the range.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/slider/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public (undocumented)\nexport class MatSliderRangeThumb extends MatSliderThumb implements _MatSliderRangeThumb {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    readonly _cdr: ChangeDetectorRef;\n    // (undocumented)\n    _clamp(v: number): number;\n    // (undocumented)\n    _fixValue(event: PointerEvent): void;\n    // (undocumented)\n    _getDefaultValue(): number;\n    getMaxPos(): number;\n    getMinPos(): number;\n    getSibling(): _MatSliderRangeThumb | undefined;\n    _isEndThumb: boolean;\n    _isLeftThumb: boolean;\n    // (undocumented)\n    _onInput(): void;\n    // (undocumented)\n    _onNgControlValueChange(): void;\n    // (undocumented)\n    _onPointerDown(event: PointerEvent): void;\n    // (undocumented)\n    _onPointerMove(event: PointerEvent): void;\n    // (undocumented)\n    _onPointerUp(): void;\n    // (undocumented)\n    _setIsLeftThumb(): void;\n    // (undocumented)\n    _setValue(value: string): void;\n    // (undocumented)\n    _updateMinMax(): void;\n    // (undocumented)\n    _updateStaticStyles(): void;\n    // (undocumented)\n    _updateWidthActive(): void;\n    // (undocumented)\n    _updateWidthInactive(): void;\n    writeValue(value: any): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatSliderRangeThumb, \"input[matSliderStartThumb], input[matSliderEndThumb]\", [\"matSliderRangeThumb\"], {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatSliderRangeThumb, never>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining MatTabLinkHarness for Angular Material Testing\nDESCRIPTION: This class provides a harness for testing MatTabLink components, enabling interactions like clicking links and fetching their labels, alongside checking the state of the link (active or disabled). It includes static methods for harness creation with filtering options.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/testing/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatTabLinkHarness extends ComponentHarness {\n    click(): Promise<void>;\n    getLabel(): Promise<string>;\n    static hostSelector: string;\n    isActive(): Promise<boolean>;\n    isDisabled(): Promise<boolean>;\n    static with<T extends MatTabLinkHarness>(this: ComponentHarnessConstructor<T>, options?: TabLinkHarnessFilters): HarnessPredicate<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Badge Size Configuration in Angular Material\nDESCRIPTION: Illustrates how to set badge sizes using matBadgeSize attribute. Supports small, medium, and large sizes, with medium being the default.\nSOURCE: https://github.com/angular/components/blob/main/src/material/badge/badge.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nmatBadgeSize\n```\n\n----------------------------------------\n\nTITLE: Import Statements for Angular Material Tabs\nDESCRIPTION: These import statements bring in necessary Angular core and CDK (Component Dev Kit) modules for building and managing the tab component, including lifecycle hooks, observables, and portal functionalities.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"import { AfterContentChecked } from '@angular/core';\nimport { AfterContentInit } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport { CdkPortalOutlet } from '@angular/cdk/portal';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { Direction } from '@angular/cdk/bidi';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { FocusableOption } from '@angular/cdk/a11y';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport { InjectionToken } from '@angular/core';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { QueryList } from '@angular/core';\nimport { SimpleChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { TemplateRef } from '@angular/core';\"\n```\n\n----------------------------------------\n\nTITLE: Defining MatDrawerContent Class in Angular Material\nDESCRIPTION: This snippet defines the MatDrawerContent class which extends CdkScrollable. It is responsible for rendering the content inside a drawer, implementing the AfterContentInit lifecycle hook. This class helps to manage the scrollable content within the drawer component.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sidenav/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterContentInit } from '@angular/core';\nimport { CdkScrollable } from '@angular/cdk/scrolling';\n\n// @public (undocumented)\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n    constructor(...args: unknown[]);\n    ngAfterContentInit(): void;\n    // More properties and methods...\n}\n```\n\n----------------------------------------\n\nTITLE: Map Geocoder Service Implementation\nDESCRIPTION: An Angular service for performing geocoding operations with support for Google Maps geocoding requests and responses\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MapGeocoder {\n  constructor(...args: unknown[]);\n  geocode(request: google.maps.GeocoderRequest): Observable<MapGeocoderResponse>;\n  static ɵfac: i0.ɵɵFactoryDeclaration<MapGeocoder, never>;\n  static ɵprov: i0.ɵɵInjectableDeclaration<MapGeocoder>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Material MDC Theme\nDESCRIPTION: Sass configuration for setting up theme and typography for MDC-based components, including palette definition and typography configuration.\nSOURCE: https://github.com/angular/components/blob/main/src/material-experimental/README.md#2025-04-21_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n@use '@angular/material-experimental' as mat-experimental;\n\n$my-primary: mat.define-palette(mat.$indigo-palette);\n$my-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);\n$my-theme: mat.define-light-theme((\n  color: (\n    primary: $my-primary,\n    accent: $my-accent\n  ),\n  typography: mat-experimental.define-mdc-typography-config(),\n  density: 0\n));\n\n@include mat-experimental.all-mdc-component-themes($my-theme);\n```\n\n----------------------------------------\n\nTITLE: Implementing GlobalPositionStrategy Class in TypeScript\nDESCRIPTION: This class implements a global position strategy for overlays. It provides methods for positioning the overlay relative to the viewport.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class GlobalPositionStrategy implements PositionStrategy {\n    apply(): void;\n    // (undocumented)\n    attach(overlayRef: OverlayRef): void;\n    bottom(value?: string): this;\n    centerHorizontally(offset?: string): this;\n    centerVertically(offset?: string): this;\n    dispose(): void;\n    end(value?: string): this;\n    // @deprecated\n    height(value?: string): this;\n    left(value?: string): this;\n    right(value?: string): this;\n    start(value?: string): this;\n    top(value?: string): this;\n    // @deprecated\n    width(value?: string): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Bottom Sheet Component in Angular Material\nDESCRIPTION: Demonstrates how to pass data to a bottom sheet component using the data property in the configuration object.\nSOURCE: https://github.com/angular/components/blob/main/src/material/bottom-sheet/bottom-sheet.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst bottomSheetRef = bottomSheet.open(HobbitSheet, {\n  data: { names: ['Frodo', 'Bilbo'] },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Single-Row Toolbar in Angular Material\nDESCRIPTION: Demonstrates a simple implementation of a single-row toolbar, typically used at the top of an application to display the application title.\nSOURCE: https://github.com/angular/components/blob/main/src/material/toolbar/toolbar.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mat-toolbar>\n  <span>My Application</span>\n</mat-toolbar>\n```\n\n----------------------------------------\n\nTITLE: Creating MatTimepickerHarness Class in Angular\nDESCRIPTION: This snippet defines the MatTimepickerHarness class extending ComponentHarness, enabling interaction with the MatTimepicker component during testing. Key functionalities include methods to get options, check if the timepicker is open, and select an option. It uses the Omit utility for filter parameters.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/timepicker/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public (undocumented)\nexport class MatTimepickerHarness extends ComponentHarness {\n    getOptions(filters?: Omit<OptionHarnessFilters, 'ancestor'>): Promise<MatOptionHarness[]>;\n    protected _getPanelSelector(): Promise<string>;\n    // (undocumented)\n    static hostSelector: string;\n    isOpen(): Promise<boolean>;\n    selectOption(filters: OptionHarnessFilters): Promise<void>;\n    static with<T extends MatTimepickerHarness>(this: ComponentHarnessConstructor<T>, options?: TimepickerHarnessFilters): HarnessPredicate<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Directive Declaration for CdkNoDataRow\nDESCRIPTION: Defines the directive declaration for the CdkNoDataRow component. This component is used to display a row when no data is available in the table. It includes the directive selector, type definition, and factory declaration for Angular's dependency injection system.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkNoDataRow, \"ng-template[cdkNoDataRow]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkNoDataRow, never>;\n```\n\n----------------------------------------\n\nTITLE: Defining CdkListboxModule Class in TypeScript for Angular CDK\nDESCRIPTION: Declares the Angular module for the CdkListbox component, including necessary imports and exports.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/listbox/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class CdkListboxModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkListboxModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<CdkListboxModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<CdkListboxModule, never, [typeof CdkListbox, typeof CdkOption], [typeof CdkListbox, typeof CdkOption]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Tree Node Template with Outlet in HTML\nDESCRIPTION: Demonstrates how to create a nested tree node template that includes a cdkTreeNodeOutlet. This outlet specifies where child nodes will be rendered within the parent node.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/tree/tree.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<cdk-nested-tree-node *cdkNodeDef=\"let node\">\n  {{node.value}}\n  <ng-container cdkTreeNodeOutlet></ng-container>\n</cdk-nested-tree-node>\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollStrategyOptions Class in TypeScript for Angular\nDESCRIPTION: This class provides methods to create different scroll strategies for overlays. It includes factory methods for block, close, noop, and reposition scroll strategies.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ScrollStrategyOptions {\n    constructor(...args: unknown[]);\n    block: () => BlockScrollStrategy;\n    close: (config?: CloseScrollStrategyConfig) => CloseScrollStrategy;\n    noop: () => NoopScrollStrategy;\n    reposition: (config?: RepositionScrollStrategyConfig) => RepositionScrollStrategy;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<ScrollStrategyOptions, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<ScrollStrategyOptions>;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Smart Menu Aim in Angular CDK Menu\nDESCRIPTION: To enable the Smart Menu Aim feature for a menu and its sub-menus, add the cdkTargetMenuAim directive to the cdkMenu or cdkMenuBar element. This allows intelligent prediction of user navigation intentions.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/menu/menu.md#2025-04-21_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n<cdkMenu cdkTargetMenuAim>\n  <!-- Menu content -->\n</cdkMenu>\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Templates in Angular Material Tree\nDESCRIPTION: Illustrates how to use conditional templates in the tree based on node data. This example shows a regular node template and a special node template using the 'when' predicate.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tree/tree.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<mat-tree-node *matNodeDef=\"let node\" matTreeNodePadding>\n  {{node.value}}\n</mat-tree-node>\n<mat-tree-node *matNodeDef=\"let node; when: isSpecial\" matTreeNodePadding>\n  [ A special node {{node.value}} ]\n</mat-tree-node>\n```\n\n----------------------------------------\n\nTITLE: Declaring MatChipSet Component in Angular\nDESCRIPTION: Declaration of the MatChipSet component with its properties, inputs, and metadata for Angular's dependency injection system.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/chips/index.api.md#2025-04-21_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic ɵcmp: i0.ɵɵComponentDeclaration<MatChipSet, \"mat-chip-set\", never, { \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"role\": { \"alias\": \"role\"; \"required\": false; }; \"tabIndex\": { \"alias\": \"tabIndex\"; \"required\": false; }; }, {}, [\"_chips\"], [\"*\"], true, never>;\nstatic ɵfac: i0.ɵɵFactoryDeclaration<MatChipSet, never>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Component Harness that Accesses Elements Outside Host in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a component harness that accesses elements outside its host element using documentRootLocatorFactory(). This is useful for components that use CDK overlay to create elements attached to the document body.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyPopupHarness extends ComponentHarness {\n  static hostSelector = 'my-popup';\n\n  /** Gets a `HarnessLoader` whose root element is the popup's content element. */\n  async getHarnessLoaderForContent(): Promise<HarnessLoader> {\n    const rootLocator = this.documentRootLocatorFactory();\n    return rootLocator.harnessLoaderFor('my-popup-content');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MapPolyline in Angular with Google Maps\nDESCRIPTION: This snippet defines the 'MapPolyline' class for creating a polyline on a Google Map. It includes methods to manage path properties, with lifecycle hooks for controlling the polyline's visibility and functionality.\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MapPolyline implements OnInit, OnDestroy {\n    constructor(...args: unknown[]);\n    getDraggable(): boolean;\n    getEditable(): boolean;\n    getPath(): google.maps.MVCArray<google.maps.LatLng>;\n    getVisible(): boolean;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    set options(options: google.maps.PolylineOptions);\n    set path(path: google.maps.MVCArray<google.maps.LatLng> | google.maps.LatLng[] | google.maps.LatLngLiteral[]);\n    polyline?: google.maps.Polyline;\n    readonly polylineClick: Observable<google.maps.PolyMouseEvent>;\n    readonly polylineDblclick: Observable<google.maps.PolyMouseEvent>;\n    readonly polylineDrag: Observable<google.maps.MapMouseEvent>;\n    readonly polylineDragend: Observable<google.maps.MapMouseEvent>;\n    readonly polylineDragstart: Observable<google.maps.MapMouseEvent>;\n    readonly polylineInitialized: EventEmitter<google.maps.Polyline>;\n    readonly polylineMousedown: Observable<google.maps.PolyMouseEvent>;\n    readonly polylineMousemove: Observable<google.maps.PolyMouseEvent>;\n    readonly polylineMouseout: Observable<google.maps.PolyMouseEvent>;\n    readonly polylineMouseover: Observable<google.maps.PolyMouseEvent>;\n    readonly polylineMouseup: Observable<google.maps.PolyMouseEvent>;\n    readonly polylineRightclick: Observable<google.maps.PolyMouseEvent>;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MapPolyline, \"map-polyline\", [\"mapPolyline\"], { \"options\": { \"alias\": \"options\"; \"required\": false; }; \"path\": { \"alias\": \"path\"; \"required\": false; }; }, { \"polylineClick\": \"polylineClick\"; \"polylineDblclick\": \"polylineDblclick\"; \"polylineDrag\": \"polylineDrag\"; \"polylineDragend\": \"polylineDragend\"; \"polylineDragstart\": \"polylineDragstart\"; \"polylineMousedown\": \"polylineMousedown\"; \"polylineMousemove\": \"polylineMousemove\"; \"polylineMouseout\": \"polylineMouseout\"; \"polylineMouseover\": \"polylineMouseover\"; \"polylineMouseup\": \"polylineMouseup\"; \"polylineRightclick\": \"polylineRightclick\"; \"polylineInitialized\": \"polylineInitialized\"; }, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MapPolyline, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using cdkTrapFocus Directive in HTML\nDESCRIPTION: Demonstrates how to use the cdkTrapFocus directive to trap focus within an element, useful for modal dialogs.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/a11y.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"my-inner-dialog-content\" cdkTrapFocus>\n  <!-- Tab and Shift + Tab will not leave this element. -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Angular CDK Drag-Drop Core Imports\nDESCRIPTION: TypeScript imports declaration for Angular CDK drag-drop module, including core Angular dependencies and RxJS observables required for drag-drop functionality.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/drag-drop/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterViewInit } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\nimport { SimpleChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Subscription } from 'rxjs';\nimport { TemplateRef } from '@angular/core';\nimport { ViewContainerRef } from '@angular/core';\n```\n\n----------------------------------------\n\nTITLE: Implementing StickyStyler Class for Table Element Positioning\nDESCRIPTION: Class that handles applying and removing sticky positioning styles to table elements. It manages calculation of positions, z-indexes, and coordinates updates with positioning listeners.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport class StickyStyler {\n    constructor(_isNativeHtmlTable: boolean, _stickCellCss: string, direction: Direction, _coalescedStyleScheduler: _CoalescedStyleScheduler, _isBrowser?: boolean, _needsPositionStickyOnElement?: boolean, _positionListener?: StickyPositioningListener | undefined, _tableInjector?: Injector | undefined);\n    _addStickyStyle(element: HTMLElement, dir: StickyDirection, dirValue: number, isBorderElement: boolean): void;\n    clearStickyPositioning(rows: HTMLElement[], stickyDirections: StickyDirection[]): void;\n    destroy(): void;\n    // (undocumented)\n    direction: Direction;\n    _getCalculatedZIndex(element: HTMLElement): string;\n    _getCellWidths(row: HTMLElement, recalculateCellWidths?: boolean): number[];\n    _getStickyEndColumnPositions(widths: number[], stickyStates: boolean[]): number[];\n    _getStickyStartColumnPositions(widths: number[], stickyStates: boolean[]): number[];\n    _removeStickyStyle(element: HTMLElement, stickyDirections: StickyDirection[]): void;\n    stickRows(rowsToStick: HTMLElement[], stickyStates: boolean[], position: 'top' | 'bottom'): void;\n    updateStickyColumns(rows: HTMLElement[], stickyStartStates: boolean[], stickyEndStates: boolean[], recalculateCellWidths?: boolean, replay?: boolean): void;\n    updateStickyFooterContainer(tableElement: Element, stickyStates: boolean[]): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Badge Position Configuration in Angular Material\nDESCRIPTION: Demonstrates how to configure badge positioning using matBadgePosition attribute. The badge can be positioned above/below and before/after the target element.\nSOURCE: https://github.com/angular/components/blob/main/src/material/badge/badge.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nmatBadgePosition=\"above after\"\n```\n\n----------------------------------------\n\nTITLE: Defining API for @angular/material_expansion_testing in TypeScript\nDESCRIPTION: This code snippet defines the public API for Angular Material's expansion panel testing module. It includes interfaces for harness filters, harness classes for accordion and expansion panel components, and an enum for expansion panel sections.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/expansion/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { ContentContainerComponentHarness } from '@angular/cdk/testing';\nimport { HarnessLoader } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public (undocumented)\nexport interface AccordionHarnessFilters extends BaseHarnessFilters {\n}\n\n// @public (undocumented)\nexport interface ExpansionPanelHarnessFilters extends BaseHarnessFilters {\n    // (undocumented)\n    content?: string | RegExp;\n    // (undocumented)\n    description?: string | RegExp | null;\n    // (undocumented)\n    disabled?: boolean;\n    // (undocumented)\n    expanded?: boolean;\n    // (undocumented)\n    title?: string | RegExp | null;\n}\n\n// @public\nexport class MatAccordionHarness extends ComponentHarness {\n    getExpansionPanels(filter?: ExpansionPanelHarnessFilters): Promise<MatExpansionPanelHarness[]>;\n    // (undocumented)\n    static hostSelector: string;\n    isMulti(): Promise<boolean>;\n    static with(options?: AccordionHarnessFilters): HarnessPredicate<MatAccordionHarness>;\n}\n\n// @public\nexport class MatExpansionPanelHarness extends ContentContainerComponentHarness<MatExpansionPanelSection> {\n    blur(): Promise<void>;\n    collapse(): Promise<void>;\n    expand(): Promise<void>;\n    focus(): Promise<void>;\n    getDescription(): Promise<string | null>;\n    // @deprecated\n    getHarnessLoaderForContent(): Promise<HarnessLoader>;\n    getTextContent(): Promise<string>;\n    getTitle(): Promise<string | null>;\n    getToggleIndicatorPosition(): Promise<'before' | 'after'>;\n    hasToggleIndicator(): Promise<boolean>;\n    // (undocumented)\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isExpanded(): Promise<boolean>;\n    isFocused(): Promise<boolean>;\n    toggle(): Promise<void>;\n    static with(options?: ExpansionPanelHarnessFilters): HarnessPredicate<MatExpansionPanelHarness>;\n}\n\n// @public\nexport enum MatExpansionPanelSection {\n    // (undocumented)\n    CONTENT = \".mat-expansion-panel-content\",\n    // (undocumented)\n    DESCRIPTION = \".mat-expansion-panel-header-description\",\n    // (undocumented)\n    HEADER = \".mat-expansion-panel-header\",\n    // (undocumented)\n    TITLE = \".mat-expansion-panel-header-title\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Theme to All Components in Angular Material 2\nDESCRIPTION: Demonstrates how to apply a theme to all Angular Material components at once using the all-component-themes mixin. This approach is convenient but may produce unnecessary CSS if not all components are used in the application.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\n$my-primary: mat.m2-define-palette(mat.$m2-indigo-palette, 500);\n$my-accent: mat.m2-define-palette(mat.$m2-pink-palette, A200, A100, A400);\n\n$my-theme: mat.m2-define-light-theme((\n color: (\n   primary: $my-primary,\n   accent: $my-accent,\n ),\n typography: mat.m2-define-typography-config(),\n density: 0,\n));\n\n@include mat.all-component-themes($my-theme);\n```\n\n----------------------------------------\n\nTITLE: Defining BidiModule, Dir, and Directionality Classes in TypeScript for Angular\nDESCRIPTION: This code snippet defines the main classes and interfaces for bidirectional text support in Angular. It includes BidiModule for module declaration, Dir for directive implementation, and Directionality for managing text direction. It also defines types and injection tokens used in the bidi system.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/bidi/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterContentInit } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\n\nexport class BidiModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<BidiModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<BidiModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<BidiModule, never, [typeof Dir], [typeof Dir]>;\n}\n\nexport class Dir implements Directionality, AfterContentInit, OnDestroy {\n    readonly change: EventEmitter<Direction>;\n    get dir(): Direction;\n    set dir(value: Direction | 'auto');\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    _rawDir: string;\n    get value(): Direction;\n    readonly valueSignal: i0.WritableSignal<Direction>;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<Dir, \"[dir]\", [\"dir\"], { \"dir\": { \"alias\": \"dir\"; \"required\": false; }; }, { \"change\": \"dirChange\"; }, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<Dir, never>;\n}\n\nexport const DIR_DOCUMENT: InjectionToken<Document>;\n\nexport type Direction = 'ltr' | 'rtl';\n\nexport class Directionality implements OnDestroy {\n    constructor(...args: unknown[]);\n    readonly change: EventEmitter<Direction>;\n    ngOnDestroy(): void;\n    get value(): Direction;\n    readonly valueSignal: i0.WritableSignal<Direction>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<Directionality, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<Directionality>;\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Controlling Tooltip Display in Angular\nDESCRIPTION: This example demonstrates how to manually show or hide the tooltip using the show and hide directive methods.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tooltip/tooltip.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(tooltip-manual) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing GoogleMap Component in Angular TypeScript\nDESCRIPTION: This snippet shows how to implement a GoogleMapDemo component in Angular using TypeScript. It demonstrates setting up the map center and zoom, and handling map click and mousemove events.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/google-map/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// google-maps-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap],\n})\nexport class GoogleMapDemo {\n\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n  display: google.maps.LatLngLiteral;\n\n  moveMap(event: google.maps.MapMouseEvent) {\n    this.center = (event.latLng.toJSON());\n  }\n\n  move(event: google.maps.MapMouseEvent) {\n    this.display = event.latLng.toJSON();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MatTimepickerToggleHarness Class in Angular\nDESCRIPTION: This snippet defines the MatTimepickerToggleHarness class to facilitate testing the toggle of the MatTimepicker component. It provides methods to check if the toggle is disabled, whether the timepicker is open, and to open the timepicker.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/timepicker/testing/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatTimepickerToggleHarness extends ComponentHarness {\n    // (undocumented)\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isTimepickerOpen(): Promise<boolean>;\n    openTimepicker(): Promise<void>;\n    static with(options?: TimepickerToggleHarnessFilters): HarnessPredicate<MatTimepickerToggleHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Material Core Testing API Definitions\nDESCRIPTION: Defines component harnesses for Angular Material core components, including MatOptionHarness and MatOptgroupHarness classes along with their associated filter interfaces. These harnesses provide testing utilities for interacting with Material Option components in unit tests.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/core/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { ContentContainerComponentHarness } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport class MatOptgroupHarness extends ComponentHarness {\n    getLabelText(): Promise<string>;\n    getOptions(filter?: OptionHarnessFilters): Promise<MatOptionHarness[]>;\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    static with<T extends MatOptgroupHarness>(this: ComponentHarnessConstructor<T>, options?: OptgroupHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport class MatOptionHarness extends ContentContainerComponentHarness {\n    click(): Promise<void>;\n    getText(): Promise<string>;\n    static hostSelector: string;\n    isActive(): Promise<boolean>;\n    isDisabled(): Promise<boolean>;\n    isMultiple(): Promise<boolean>;\n    isSelected(): Promise<boolean>;\n    static with<T extends MatOptionHarness>(this: ComponentHarnessConstructor<T>, options?: OptionHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public (undocumented)\nexport interface OptgroupHarnessFilters extends BaseHarnessFilters {\n    // (undocumented)\n    labelText?: string | RegExp;\n}\n\n// @public (undocumented)\nexport interface OptionHarnessFilters extends BaseHarnessFilters {\n    // (undocumented)\n    isSelected?: boolean;\n    // (undocumented)\n    text?: string | RegExp;\n}\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Rendering a Nested Tree Structure in HTML\nDESCRIPTION: Shows the DOM structure for a nested tree using cdk-tree and cdk-nested-tree-node elements. Nested trees place children nodes inside their parent node, which is useful for visually representing hierarchical relationships.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/tree/tree.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cdk-tree>\n  <cdk-nested-tree-node>\n    parent node\n    <cdk-nested-tree-node> -- child node1 </cdk-nested-tree-node>\n    <cdk-nested-tree-node> -- child node2 </cdk-nested-tree-node>\n  </cdk-nested-tree-node>\n</cdk-tree>\n```\n\n----------------------------------------\n\nTITLE: Class Declaration for MatSortHeaderIntl\nDESCRIPTION: The `MatSortHeaderIntl` class handles internationalization changes for sort headers and provides a subject for notifying observers about these changes.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sort/index.api.md#2025-04-21_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatSortHeaderIntl {\n    readonly changes: Subject<void>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatSortHeaderIntl, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<MatSortHeaderIntl>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Column Display in TypeScript\nDESCRIPTION: Shows how to create a TypeScript variable that contains the list of columns to display in the table. This array controls which columns appear in the rendered table.\nSOURCE: https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncolumnsToDisplay = ['userName', 'age'];\n```\n\n----------------------------------------\n\nTITLE: Using Theme Styles in Custom Components with Angular Material\nDESCRIPTION: This example shows how to use CSS variables defined by Angular Material's theming system in custom components to apply consistent colors and typography.\nSOURCE: https://github.com/angular/components/blob/main/guides/theming.md#2025-04-21_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n:host {\n  background: var(--mat-sys-primary-container);\n  color: var(--mat-sys-on-primary-container);\n  border: 1px solid var(--mat-sys-outline-variant);\n  font: var(--mat-sys-body-large);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fullscreen Overlay Container in NgModule\nDESCRIPTION: Demonstrates how to provide FullscreenOverlayContainer as the implementation for OverlayContainer to support fullscreen mode.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/overlay/overlay.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@NgModule({\n  providers: [{provide: OverlayContainer, useClass: FullscreenOverlayContainer}],\n  // ...\n})\nexport class MyModule { }\n```\n\n----------------------------------------\n\nTITLE: MatStepHeader Component Implementation\nDESCRIPTION: The MatStepHeader class extends CdkStepHeader, providing features such as visual states for active, error, and optional steps in the stepper. It also manages focus and interaction states.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/stepper/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport class MatStepHeader extends CdkStepHeader implements AfterViewInit, OnDestroy {\n    constructor(...args: unknown[]);\n    active: boolean;\n    color: ThemePalette;\n    disableRipple: boolean;\n    errorMessage: string;\n    focus(origin?: FocusOrigin, options?: FocusOptions): void;\n    // (undocumented)\n    _getDefaultTextForState(state: StepState): string;\n    _getHostElement(): HTMLElement;\n    _getIconContext(): MatStepperIconContext;\n    iconOverrides: {\n        [key: string]: TemplateRef<MatStepperIconContext>;\n    };\n    index: number;\n    // (undocumented)\n    _intl: MatStepperIntl;\n    label: MatStepLabel | string;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    optional: boolean;\n    selected: boolean;\n    state: StepState;\n    _stringLabel(): string | null;\n    _templateLabel(): MatStepLabel | null;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatStepHeader, \"mat-step-header\", never, { \"state\": { \"alias\": \"state\"; \"required\": false; }; \"label\": { \"alias\": \"label\"; \"required\": false; }; \"errorMessage\": { \"alias\": \"errorMessage\"; \"required\": false; }; \"iconOverrides\": { \"alias\": \"iconOverrides\"; \"required\": false; }; \"index\": { \"alias\": \"index\"; \"required\": false; }; \"selected\": { \"alias\": \"selected\"; \"required\": false; }; \"active\": { \"alias\": \"active\"; \"required\": false; }; \"optional\": { \"alias\": \"optional\"; \"required\": false; }; \"disableRipple\": { \"alias\": \"disableRipple\"; \"required\": false; }; \"color\": { \"alias\": \"color\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatStepHeader, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Item Movement Between Containers in Angular CDK\nDESCRIPTION: Demonstrates the use of cdkDropListEnterPredicate to control which items can be moved into a container. The predicate function determines if an item is allowed to enter a new container.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/drag-drop/drag-drop.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-drag-drop-enter-predicate) -->\n```\n\n----------------------------------------\n\nTITLE: Managing Change Detection in Angular Tests\nDESCRIPTION: Demonstrates how to control change detection manually during tests using manualChangeDetection function, particularly useful when testing async operations.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nit('checks state while async action is in progress', async () => {\n  const buttonHarness = loader.getHarness(MyButtonHarness);\n  await manualChangeDetection(async () => {\n    await buttonHarness.click();\n    fixture.detectChanges();\n    // Check expectations while async click operation is in progress.\n    expect(isProgressSpinnerVisible()).toBe(true);\n    await fixture.whenStable();\n    // Check expectations after async click operation complete.\n    expect(isProgressSpinnerVisible()).toBe(false);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating MatSelectionListChange Class\nDESCRIPTION: Defines the MatSelectionListChange class representing the selection change events emitted by MatSelectionList. It contains details about the source list and the options affected by the change.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatSelectionListChange {\n    constructor(\n    source: MatSelectionList,\n    options: MatListOption[]);\n    options: MatListOption[];\n    source: MatSelectionList;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatDatepickerPanel Interface in TypeScript\nDESCRIPTION: This interface defines the structure for a datepicker panel, including properties for handling input, state changes, and events.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface MatDatepickerPanel<C extends MatDatepickerControl<D>, S, D = ExtractDateTypeFromSelection<S>> {\n    closedStream: EventEmitter<void>;\n    color: ThemePalette;\n    datepickerInput: C;\n    disabled: boolean;\n    id: string;\n    open(): void;\n    opened: boolean;\n    openedStream: EventEmitter<void>;\n    registerInput(input: C): MatDateSelectionModel<S, D>;\n    stateChanges: Subject<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Tooltip Delay in Angular\nDESCRIPTION: This example demonstrates how to add a delay before showing or hiding the tooltip using matTooltipShowDelay and matTooltipHideDelay inputs.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tooltip/tooltip.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(tooltip-delay) -->\n```\n\n----------------------------------------\n\nTITLE: Option Component State Management\nDESCRIPTION: Provides methods and properties for managing option component state, including disabled status, selection state, and view configuration\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/autocomplete/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nget disabled(): boolean;\nset disabled(value: boolean);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nget selected(): boolean;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly onSelectionChange: EventEmitter<MatOptionSelectionChange<T>>;\n```\n\n----------------------------------------\n\nTITLE: Defining Angular CDK Stepper API in TypeScript\nDESCRIPTION: This code snippet defines the API for the Angular CDK Stepper module. It includes imports, classes, interfaces, and types necessary for implementing a stepper component in Angular applications.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/stepper/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbstractControl } from '@angular/forms';\nimport { AfterContentInit } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { FormGroupDirective } from '@angular/forms';\nimport * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { QueryList } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { TemplateRef } from '@angular/core';\n\nexport class CdkStep implements OnChanges {\n    // ... (implementation details)\n}\n\nexport class CdkStepHeader implements FocusableOption {\n    // ... (implementation details)\n}\n\nexport class CdkStepLabel {\n    // ... (implementation details)\n}\n\nexport class CdkStepper implements AfterContentInit, AfterViewInit, OnDestroy {\n    // ... (implementation details)\n}\n\nexport class CdkStepperModule {\n    // ... (implementation details)\n}\n\nexport class CdkStepperNext {\n    // ... (implementation details)\n}\n\nexport class CdkStepperPrevious {\n    // ... (implementation details)\n}\n\nexport const STEP_STATE: {\n    NUMBER: string;\n    EDIT: string;\n    DONE: string;\n    ERROR: string;\n};\n\nexport type StepContentPositionState = 'previous' | 'current' | 'next';\n\nexport const STEPPER_GLOBAL_OPTIONS: InjectionToken<StepperOptions>;\n\nexport interface StepperOptions {\n    displayDefaultIndicatorType?: boolean;\n    showError?: boolean;\n}\n\nexport type StepperOrientation = 'horizontal' | 'vertical';\n\nexport class StepperSelectionEvent {\n    previouslySelectedIndex: number;\n    previouslySelectedStep: CdkStep;\n    selectedIndex: number;\n    selectedStep: CdkStep;\n}\n\nexport type StepState = 'number' | 'edit' | 'done' | 'error' | string;\n```\n\n----------------------------------------\n\nTITLE: Defining API for @angular/material_expansion in TypeScript\nDESCRIPTION: This code snippet defines the API for the @angular/material_expansion package. It includes imports, constants, classes, interfaces, and types related to the expansion panel component.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/expansion/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterContentInit } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { CdkAccordion } from '@angular/cdk/accordion';\nimport { CdkAccordionItem } from '@angular/cdk/accordion';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { FocusableOption } from '@angular/cdk/a11y';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/accordion';\nimport * as i3 from '@angular/cdk/portal';\nimport { InjectionToken } from '@angular/core';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { QueryList } from '@angular/core';\nimport { SimpleChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { TemplateRef } from '@angular/core';\n\n// @public @deprecated\nexport const EXPANSION_PANEL_ANIMATION_TIMING = \"225ms cubic-bezier(0.4,0.0,0.2,1)\";\n\n// @public\nexport const MAT_ACCORDION: InjectionToken<MatAccordionBase>;\n\n// @public\nexport const MAT_EXPANSION_PANEL: InjectionToken<MatExpansionPanelBase>;\n\n// @public\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS: InjectionToken<MatExpansionPanelDefaultOptions>;\n\n// @public\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit, OnDestroy {\n    displayMode: MatAccordionDisplayMode;\n    // (undocumented)\n    _handleHeaderFocus(header: MatExpansionPanelHeader): void;\n    _handleHeaderKeydown(event: KeyboardEvent): void;\n    _headers: QueryList<MatExpansionPanelHeader>;\n    hideToggle: boolean;\n    // (undocumented)\n    static ngAcceptInputType_hideToggle: unknown;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    togglePosition: MatAccordionTogglePosition;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatAccordion, \"mat-accordion\", [\"matAccordion\"], { \"hideToggle\": { \"alias\": \"hideToggle\"; \"required\": false; }; \"displayMode\": { \"alias\": \"displayMode\"; \"required\": false; }; \"togglePosition\": { \"alias\": \"togglePosition\"; \"required\": false; }; }, {}, [\"_headers\"], never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatAccordion, never>;\n}\n\n// @public\nexport interface MatAccordionBase extends CdkAccordion {\n    displayMode: MatAccordionDisplayMode;\n    _handleHeaderFocus: (header: any) => void;\n    _handleHeaderKeydown: (event: KeyboardEvent) => void;\n    hideToggle: boolean;\n    togglePosition: MatAccordionTogglePosition;\n}\n\n// @public\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n// @public\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n// @public @deprecated\nexport const matExpansionAnimations: {\n    readonly indicatorRotate: any;\n    readonly bodyExpansion: any;\n};\n\n// @public (undocumented)\nexport class MatExpansionModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatExpansionModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatExpansionModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatExpansionModule, never, [typeof MatCommonModule, typeof i2.CdkAccordionModule, typeof i3.PortalModule, typeof MatAccordion, typeof MatExpansionPanel, typeof MatExpansionPanelActionRow, typeof MatExpansionPanelHeader, typeof MatExpansionPanelTitle, typeof MatExpansionPanelDescription, typeof MatExpansionPanelContent], [typeof MatAccordion, typeof MatExpansionPanel, typeof MatExpansionPanelActionRow, typeof MatExpansionPanelHeader, typeof MatExpansionPanelTitle, typeof MatExpansionPanelDescription, typeof MatExpansionPanelContent]>;\n}\n\n// @public\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges, OnDestroy {\n    constructor(...args: unknown[]);\n    accordion: MatAccordionBase;\n    readonly afterCollapse: EventEmitter<void>;\n    readonly afterExpand: EventEmitter<void>;\n    _body: ElementRef<HTMLElement>;\n    protected _bodyWrapper: ElementRef<HTMLElement> | undefined;\n    close(): void;\n    _containsFocus(): boolean;\n    _getExpandedState(): MatExpansionPanelState;\n    _hasSpacing(): boolean;\n    _headerId: string;\n    get hideToggle(): boolean;\n    set hideToggle(value: boolean);\n    readonly _inputChanges: Subject<SimpleChanges>;\n    _lazyContent: MatExpansionPanelContent;\n    // (undocumented)\n    static ngAcceptInputType_hideToggle: unknown;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngOnChanges(changes: SimpleChanges): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    open(): void;\n    _portal: TemplatePortal;\n    // (undocumented)\n    protected _setupAnimationEvents(): void;\n    toggle(): void;\n    get togglePosition(): MatAccordionTogglePosition;\n    set togglePosition(value: MatAccordionTogglePosition);\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatExpansionPanel, \"mat-expansion-panel\", [\"matExpansionPanel\"], { \"hideToggle\": { \"alias\": \"hideToggle\"; \"required\": false; }; \"togglePosition\": { \"alias\": \"togglePosition\"; \"required\": false; }; }, { \"afterExpand\": \"afterExpand\"; \"afterCollapse\": \"afterCollapse\"; }, [\"_lazyContent\"], [\"mat-expansion-panel-header\", \"*\", \"mat-action-row\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatExpansionPanel, never>;\n}\n\n// @public\nexport class MatExpansionPanelActionRow {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatExpansionPanelActionRow, \"mat-action-row\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatExpansionPanelActionRow, never>;\n}\n\n// @public\nexport class MatExpansionPanelContent {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    _expansionPanel: MatExpansionPanelBase | null;\n    // (undocumented)\n    _template: TemplateRef<any>;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatExpansionPanelContent, \"ng-template[matExpansionPanelContent]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatExpansionPanelContent, never>;\n}\n\n// @public\nexport interface MatExpansionPanelDefaultOptions {\n    collapsedHeight: string;\n    expandedHeight: string;\n    hideToggle: boolean;\n}\n\n// @public\nexport class MatExpansionPanelDescription {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatExpansionPanelDescription, \"mat-panel-description\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatExpansionPanelDescription, never>;\n}\n\n// @public\nexport class MatExpansionPanelHeader implements AfterViewInit, OnDestroy, FocusableOption {\n    constructor(...args: unknown[]);\n    collapsedHeight: string;\n    get disabled(): boolean;\n    expandedHeight: string;\n    focus(origin?: FocusOrigin, options?: FocusOptions): void;\n    _getExpandedState(): string;\n    _getHeaderHeight(): string | null;\n    _getPanelId(): string;\n    _getTogglePosition(): MatAccordionTogglePosition;\n    _isExpanded(): boolean;\n    _keydown(event: KeyboardEvent): void;\n    // (undocumented)\n    static ngAcceptInputType_tabIndex: unknown;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    panel: MatExpansionPanel;\n    _showToggle(): boolean;\n    tabIndex: number;\n    _toggle(): void;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatExpansionPanelHeader, \"mat-expansion-panel-header\", never, { \"expandedHeight\": { \"alias\": \"expandedHeight\"; \"required\": false; }; \"collapsedHeight\": { \"alias\": \"collapsedHeight\"; \"required\": false; }; \"tabIndex\": { \"alias\": \"tabIndex\"; \"required\": false; }; }, {}, never, [\"mat-panel-title\", \"mat-panel-description\", \"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatExpansionPanelHeader, never>;\n}\n\n// @public\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n// @public\nexport class MatExpansionPanelTitle {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatExpansionPanelTitle, \"mat-panel-title\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatExpansionPanelTitle, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Typography in Theme Definition\nDESCRIPTION: This SCSS snippet shows how to apply custom typography in theme definition for Angular Material. It includes a default theme and a 'kids theme' with different typography settings.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_17\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\n$my-primary: mat.m2-define-palette(mat.$indigo-palette, 500);\n$my-accent: mat.m2-define-palette(mat.$pink-palette, A200, A100, A400);\n$my-typography: mat.m2-define-typography-config();\n\n$my-theme: mat.m2-define-light-theme((\n color: (\n   primary: $my-primary,\n   accent: $my-accent,\n ),\n  typography: $my-typography,\n));\n\n@include mat.all-component-themes($my-theme);\n\n.kids-theme {\n  $kids-primary: mat.m2-define-palette(mat.$cyan-palette);\n  $kids-accent: mat.m2-define-palette(mat.$yellow-palette);\n\n  // Typography config based on the default, but using \"Comic Sans\" as the\n  // default font family for all levels.\n  $kids-typography: mat.m2-define-typography-config(\n    $font-family: 'Comic Sans',\n  );\n\n  $kids-theme: mat.m2-define-light-theme((\n   color: (\n     primary: $kids-primary,\n     accent: $kids-accent,\n   ),\n   typography: $kids-typography,\n  ));\n\n  @include mat.all-component-themes($kids-theme);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stepper Internationalization in Angular\nDESCRIPTION: TypeScript configuration for localizing stepper labels by providing a custom MatStepperIntl implementation in the application's root module.\nSOURCE: https://github.com/angular/components/blob/main/src/material/stepper/stepper.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@NgModule({\n  imports: [MatStepperModule],\n  providers: [\n    {provide: MatStepperIntl, useClass: MyIntl},\n  ],\n})\nexport class MyApp {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Card Structure in Angular Material\nDESCRIPTION: Demonstrates the basic structure of a mat-card component with its various sections including header, content, image, actions, and footer.\nSOURCE: https://github.com/angular/components/blob/main/src/material/card/card.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mat-card>\n  <mat-card-header></mat-card-header>\n  <mat-card-content></mat-card-content>\n  <img mat-card-image>\n  <mat-card-actions></mat-card-actions>\n  <mat-card-footer></mat-card-footer>\n</mat-card>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic Angular Material Slider in HTML\nDESCRIPTION: This snippet demonstrates how to create a basic slider with custom minimum, maximum, and step values. It uses the mat-slider component with a matSliderThumb input.\nSOURCE: https://github.com/angular/components/blob/main/src/material/slider/slider.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mat-slider min=\"1\" max=\"5\" step=\"0.5\">\n  <input matSliderThumb value=\"1.5\">\n</mat-slider>\n```\n\n----------------------------------------\n\nTITLE: Defining StepperHarnessFilters Interface - TypeScript\nDESCRIPTION: The StepperHarnessFilters interface extends BaseHarnessFilters and provides filtering capabilities for stepper harnesses in Angular Material. It allows filtering based on the orientation of the stepper. Dependencies include the Angular CDK testing module.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/stepper/testing/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface StepperHarnessFilters extends BaseHarnessFilters {\n    orientation?: StepperOrientation;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatTabGroupHarness for Angular Material Testing\nDESCRIPTION: This class represents a test harness for the MatTabGroup component, allowing retrieval of selected tabs, available tabs, and selecting a specific tab. It also includes a static method for creating a harness with specific options through a HarnessPredicate.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { ContentContainerComponentHarness } from '@angular/cdk/testing';\nimport { HarnessLoader } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport class MatTabGroupHarness extends ComponentHarness {\n    getSelectedTab(): Promise<MatTabHarness>;\n    getTabs(filter?: TabHarnessFilters): Promise<MatTabHarness[]>;\n    static hostSelector: string;\n    selectTab(filter?: TabHarnessFilters): Promise<void>;\n    static with<T extends MatTabGroupHarness>(this: ComponentHarnessConstructor<T>, options?: TabGroupHarnessFilters): HarnessPredicate<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NavListHarnessFilters Interface\nDESCRIPTION: This interface extends the BaseHarnessFilters and is used to define the filter options for NavListHarness. It provides a way to filter navigation lists based on properties inherited from BaseHarnessFilters, enabling targeted selection of navigation lists during testing.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport interface NavListHarnessFilters extends BaseHarnessFilters {\n}\"\n```\n\n----------------------------------------\n\nTITLE: Applying Typography Styles to Specific Component in SCSS\nDESCRIPTION: This SCSS snippet demonstrates how to apply typography styles to a specific component (button) using a custom typography config in Angular Material.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_18\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\n$kids-typography: mat.m2-define-typography-config(\n  // Specify \"Comic Sans\" as the default font family for all levels.\n  $font-family: 'Comic Sans',\n);\n\n// Now we have sweet buttons with Comic Sans.\n@include mat.button-typography($kids-typography);\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Component Interface\nDESCRIPTION: This snippet defines the MatSelectConfig interface in TypeScript, offering configuration options such as enabling nullable options, centering, and panel width. These options configure the behavior of the MatSelect component and are implemented via various optional properties.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/select/index.api.md#2025-04-21_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface MatSelectConfig { canSelectNullableOptions?: boolean; disableOptionCentering?: boolean; hideSingleSelectionIndicator?: boolean; overlayPanelClass?: string | string[]; panelWidth?: string | number | null; typeaheadDebounceInterval?: number; }\n```\n\n----------------------------------------\n\nTITLE: Complete CdkTable Example with Three Columns\nDESCRIPTION: This snippet shows a complete example of a CdkTable with three columns (username, age, title) including column definitions and row declarations.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/table/table.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<table cdk-table [dataSource]=\"dataSource\">\n  <!-- User name Definition -->\n  <ng-container cdkColumnDef=\"username\">\n    <th cdk-header-cell *cdkHeaderCellDef> User name </th>\n    <td cdk-cell *cdkCellDef=\"let row\"> {{row.username}} </td>\n  </ng-container>\n\n  <!-- Age Definition -->\n  <ng-container cdkColumnDef=\"age\">\n    <th cdk-header-cell *cdkHeaderCellDef> Age </th>\n    <td cdk-cell *cdkCellDef=\"let row\"> {{row.age}} </td>\n  </ng-container>\n\n  <!-- Title Definition -->\n  <ng-container cdkColumnDef=\"title\">\n    <th cdk-header-cell *cdkHeaderCellDef> Title </th>\n    <td cdk-cell *cdkCellDef=\"let row\"> {{row.title}} </td>\n  </ng-container>\n\n  <!-- Header and Row Declarations -->\n  <tr cdk-header-row *cdkHeaderRowDef=\"['username', 'age', 'title']\"></tr>\n  <tr cdk-row *cdkRowDef=\"let row; columns: ['username', 'age', 'title']\"></tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Scroll Strategy with Angular Overlay\nDESCRIPTION: This snippet demonstrates how to configure an overlay with a built-in scroll strategy. The example uses the 'block' strategy which prevents the user from scrolling while the overlay is open.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/overlay/scroll/scroll-strategy.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet overlayConfig = new OverlayConfig({\n  scrollStrategy: overlay.scrollStrategies.block()\n});\n\nthis._overlay.create(overlayConfig).attach(yourPortal);\n```\n\n----------------------------------------\n\nTITLE: MatGridTileHarness Class\nDESCRIPTION: Defines the `MatGridTileHarness` class for interacting with Angular Material grid tile components in tests.  It extends `ContentContainerComponentHarness` and provides methods to retrieve the colspan, rowspan, header text, and footer text. Also includes methods to check for the presence of a header, footer and avatar. The `hostSelector` is defined, and a static `with` method is provided to create a `HarnessPredicate` for filtering harnesses.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/grid-list/testing/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n \"// @public\\nexport class MatGridTileHarness extends ContentContainerComponentHarness<MatGridTileSection> {\\n    getColspan(): Promise<number>;\\n    getFooterText(): Promise<string | null>;\\n    getHeaderText(): Promise<string | null>;\\n    getRowspan(): Promise<number>;\\n    hasAvatar(): Promise<boolean>;\\n    hasFooter(): Promise<boolean>;\\n    hasHeader(): Promise<boolean>;\\n    static hostSelector: string;\\n    static with(options?: GridTileHarnessFilters): HarnessPredicate<MatGridTileHarness>;\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Adding Action Bar to Angular Expansion Panel\nDESCRIPTION: Illustrates how to include an action bar at the bottom of an expansion panel, visible only when expanded.\nSOURCE: https://github.com/angular/components/blob/main/src/material/expansion/expansion.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<mat-expansion-panel>\n  <mat-expansion-panel-header>\n    This is the expansion title\n  </mat-expansion-panel-header>\n  <p>This is the primary content of the panel.</p>\n  <mat-action-row>\n    <button mat-button>Cancel</button>\n    <button mat-button>Save</button>\n  </mat-action-row>\n</mat-expansion-panel>\n```\n\n----------------------------------------\n\nTITLE: Defining CDK Table Row Classes\nDESCRIPTION: This snippet defines classes for table rows, including CdkHeaderRow, CdkFooterRow, and their respective definitions.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CdkHeaderRow {\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<CdkHeaderRow, \"cdk-header-row, tr[cdk-header-row]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkHeaderRow, never>;\n}\n\nexport class CdkHeaderRowDef extends BaseRowDef implements CanStick, OnChanges {\n    constructor(...args: unknown[]);\n    hasStickyChanged(): boolean;\n    // (undocumented)\n    static ngAcceptInputType_sticky: unknown;\n    // (undocumented)\n    ngOnChanges(changes: SimpleChanges): void;\n    resetStickyChanged(): void;\n    get sticky(): boolean;\n    set sticky(value: boolean);\n    // (undocumented)\n    _table?: any;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkHeaderRowDef, \"[cdkHeaderRowDef]\", never, { \"columns\": { \"alias\": \"cdkHeaderRowDef\"; \"required\": false; }; \"sticky\": { \"alias\": \"cdkHeaderRowDefSticky\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkHeaderRowDef, never>;\n}\n\nexport class CdkFooterRow {\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<CdkFooterRow, \"cdk-footer-row, tr[cdk-footer-row]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkFooterRow, never>;\n}\n\nexport class CdkFooterRowDef extends BaseRowDef implements CanStick, OnChanges {\n    constructor(...args: unknown[]);\n    hasStickyChanged(): boolean;\n    // (undocumented)\n    static ngAcceptInputType_sticky: unknown;\n    // (undocumented)\n    ngOnChanges(changes: SimpleChanges): void;\n    resetStickyChanged(): void;\n    get sticky(): boolean;\n    set sticky(value: boolean);\n    // (undocumented)\n    _table?: any;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkFooterRowDef, \"[cdkFooterRowDef]\", never, { \"columns\": { \"alias\": \"cdkFooterRowDef\"; \"required\": false; }; \"sticky\": { \"alias\": \"cdkFooterRowDefSticky\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkFooterRowDef, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Button Menu Items with cdkMenuItemRadio\nDESCRIPTION: Example showing how to create radio button menu items using cdkMenuItemRadio. The checked state is managed through cdkMenuItemChecked binding and cdkMenuItemTriggered event.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/menu/menu.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"example-menu-group\" cdkMenuGroup>\n  <button\n    class=\"example-menu-item\"\n    cdkMenuItemRadio\n    [cdkMenuItemChecked]=\"fontSize === 'small'\"\n    (cdkMenuItemTriggered)=\"fontSize = 'small'\">\n    Small\n    <span class=\"example-menu-item-check\"></span>\n  </button>\n  <button\n    class=\"example-menu-item\"\n    cdkMenuItemRadio\n    [cdkMenuItemChecked]=\"fontSize === 'normal'\"\n    (cdkMenuItemTriggered)=\"fontSize = 'normal'\">\n    Normal\n    <span class=\"example-menu-item-check\"></span>\n  </button>\n  <button\n    class=\"example-menu-item\"\n    cdkMenuItemRadio\n    [cdkMenuItemChecked]=\"fontSize === 'large'\"\n    (cdkMenuItemTriggered)=\"fontSize = 'large'\">\n    Large\n    <span class=\"example-menu-item-check\"></span>\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Datepicker Types and Interfaces in TypeScript\nDESCRIPTION: Various type definitions and interfaces for the datepicker functionality including filter functions, position types, and selection model change interfaces.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type DateFilterFn<D> = (date: D | null) => boolean;\n\n// @public\nexport type DatepickerDropdownPositionX = 'start' | 'end';\n\n// @public\nexport type DatepickerDropdownPositionY = 'above' | 'below';\n\n// @public\nexport interface DateSelectionModelChange<S> {\n    oldValue?: S;\n    selection: S;\n    source: unknown;\n}\n\n// @public\nexport type ExtractDateTypeFromSelection<T> = T extends DateRange<infer D> ? D : NonNullable<T>;\n```\n\n----------------------------------------\n\nTITLE: Defining DateRange Class in TypeScript\nDESCRIPTION: Implementation of the DateRange class which stores the start and end dates for a date range selection. This class is used for range-based date selections in the datepicker.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class DateRange<D> {\n    constructor(\n    start: D | null,\n    end: D | null);\n    readonly end: D | null;\n    readonly start: D | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Option Interface\nDESCRIPTION: Typescript interface defining the core properties and methods for a material option component, including selection, state management, and interaction capabilities\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/autocomplete/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(...args: unknown[]);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nget active(): boolean;\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndeselect(emitEvent?: boolean): void;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfocus(_origin?: FocusOrigin, options?: FocusOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Paginator API Types and Classes\nDESCRIPTION: Comprehensive TypeScript declarations for Angular Material's paginator component including imports, class definitions, interfaces, and tokens. Contains the main MatPaginator component, configuration interfaces, and internationalization support classes.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/paginator/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbstractControl } from '@angular/forms';\nimport { AbstractControlDirective } from '@angular/forms';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\n// ... additional imports\n\nexport const MAT_PAGINATOR_DEFAULT_OPTIONS: InjectionToken<MatPaginatorDefaultOptions>;\n\nexport const MAT_PAGINATOR_INTL_PROVIDER: {\n    provide: typeof MatPaginatorIntl;\n    deps: Optional[][];\n    useFactory: typeof MAT_PAGINATOR_INTL_PROVIDER_FACTORY;\n};\n\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl): MatPaginatorIntl;\n\nexport class MatPaginator implements OnInit, OnDestroy {\n    constructor(...args: unknown[]);\n    protected _buttonClicked(targetIndex: number, isDisabled: boolean): void;\n    _changePageSize(pageSize: number): void;\n    color: ThemePalette;\n    disabled: boolean;\n    _displayedPageSizeOptions: number[];\n    firstPage(): void;\n    _formFieldAppearance?: MatFormFieldAppearance;\n    // ... additional class members\n}\n\nexport interface MatPaginatorDefaultOptions {\n    formFieldAppearance?: MatFormFieldAppearance;\n    hidePageSize?: boolean;\n    pageSize?: number;\n    pageSizeOptions?: number[];\n    showFirstLastButtons?: boolean;\n}\n\nexport class MatPaginatorIntl {\n    readonly changes: Subject<void>;\n    firstPageLabel: string;\n    getRangeLabel: (page: number, pageSize: number, length: number) => string;\n    // ... additional class members\n}\n\nexport class MatPaginatorModule {\n    // Angular module declarations\n}\n\nexport interface MatPaginatorSelectConfig {\n    disableOptionCentering?: boolean;\n    panelClass?: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n}\n\nexport class PageEvent {\n    length: number;\n    pageIndex: number;\n    pageSize: number;\n    previousPageIndex?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Window Scrolling with Virtual Scrolling in Angular\nDESCRIPTION: Using the window itself as the scrolling element for better mobile user experience by adding the scrollWindow attribute to the cdk-virtual-scroll-viewport.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/scrolling/scrolling.md#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-virtual-scroll-window-scrolling) -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkbox Click Action in Angular\nDESCRIPTION: Example showing how to customize the checkbox click behavior by providing a custom MAT_CHECKBOX_DEFAULT_OPTIONS value. This configuration sets the click action to 'noop' which prevents default toggling behavior.\nSOURCE: https://github.com/angular/components/blob/main/src/material/checkbox/checkbox.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nproviders: [\n  {provide: MAT_CHECKBOX_DEFAULT_OPTIONS, useValue: { clickAction: 'noop' } as MatCheckboxDefaultOptions}\n]\n```\n\n----------------------------------------\n\nTITLE: Tab Label Alignment Configuration\nDESCRIPTION: Shows how to align tab labels using the mat-align-tabs attribute.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tabs/tabs.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<mat-tab-group mat-align-tabs=\"start\">\n  <mat-tab label=\"First\">Content 1</mat-tab>\n  <mat-tab label=\"Second\">Content 2</mat-tab>\n  <mat-tab label=\"Third\">Content 3</mat-tab>\n</mat-tab-group>\n```\n\n----------------------------------------\n\nTITLE: Defining MatSubheaderHarness Class\nDESCRIPTION: This class extends ComponentHarness and represents a harness for testing Angular Material subheaders. It provides a method to get the text content of the subheader and a filter to locate specific subheaders based on their text.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport class MatSubheaderHarness extends ComponentHarness {\n    getText(): Promise<string>;\n    // (undocumented)\n    static hostSelector: string;\n    // (undocumented)\n    static with(options?: SubheaderHarnessFilters): HarnessPredicate<MatSubheaderHarness>;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing OverlayOutsideClickDispatcher Class in TypeScript\nDESCRIPTION: This class handles outside click events for overlays, extending the BaseOverlayDispatcher.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    add(overlayRef: OverlayRef): void;\n    protected detach(): void;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<OverlayOutsideClickDispatcher, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<OverlayOutsideClickDispatcher>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Field Control Properties\nDESCRIPTION: Code snippets showing implementation of various required MatFormFieldControl properties including stateChanges, value handling, and component destruction.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-form-field-control.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstateChanges = new Subject<void>();\n\nset value(tel: MyTel | null) {\n  ...\n  this.stateChanges.next();\n}\n\nngOnDestroy() {\n  this.stateChanges.complete();\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Angular CDK Text Field API Definitions\nDESCRIPTION: Defines the core interfaces, classes and types for the Angular CDK text field functionality. Includes autofill event handling, textarea auto-sizing, and the main text field module. Contains imports from @angular/core and RxJS, with implementations for lifecycle hooks and event handling.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/text-field/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterViewInit } from '@angular/core';\nimport { DoCheck } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\n\n// @public\nexport type AutofillEvent = {\n    target: Element;\n    isAutofilled: boolean;\n};\n\n// @public\nexport class AutofillMonitor implements OnDestroy {\n    constructor(...args: unknown[]);\n    monitor(element: Element): Observable<AutofillEvent>;\n    monitor(element: ElementRef<Element>): Observable<AutofillEvent>;\n    // (undocumented)\n    ngOnDestroy(): void;\n    stopMonitoring(element: Element): void;\n    stopMonitoring(element: ElementRef<Element>): void;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<AutofillMonitor, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<AutofillMonitor>;\n}\n\n// @public\nexport class CdkAutofill implements OnDestroy, OnInit {\n    constructor(...args: unknown[]);\n    readonly cdkAutofill: EventEmitter<AutofillEvent>;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    ngOnInit(): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkAutofill, \"[cdkAutofill]\", never, {}, { \"cdkAutofill\": \"cdkAutofill\"; }, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkAutofill, never>;\n}\n\n// @public\nexport class CdkTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n    constructor(...args: unknown[]);\n    protected _document?: Document | null | undefined;\n    get enabled(): boolean;\n    set enabled(value: boolean);\n    get maxRows(): number;\n    set maxRows(value: NumberInput);\n    get minRows(): number;\n    set minRows(value: NumberInput);\n    // (undocumented)\n    static ngAcceptInputType_enabled: unknown;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngDoCheck(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    _noopInputHandler(): void;\n    // (undocumented)\n    get placeholder(): string;\n    set placeholder(value: string);\n    reset(): void;\n    resizeToFitContent(force?: boolean): void;\n    _setMaxHeight(): void;\n    _setMinHeight(): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkTextareaAutosize, \"textarea[cdkTextareaAutosize]\", [\"cdkTextareaAutosize\"], { \"minRows\": { \"alias\": \"cdkAutosizeMinRows\"; \"required\": false; }; \"maxRows\": { \"alias\": \"cdkAutosizeMaxRows\"; \"required\": false; }; \"enabled\": { \"alias\": \"cdkTextareaAutosize\"; \"required\": false; }; \"placeholder\": { \"alias\": \"placeholder\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkTextareaAutosize, never>;\n}\n\n// @public (undocumented)\nexport class TextFieldModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<TextFieldModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<TextFieldModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<TextFieldModule, never, [typeof CdkAutofill, typeof CdkTextareaAutosize], [typeof CdkAutofill, typeof CdkTextareaAutosize]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Title Group with Image in Angular Material\nDESCRIPTION: Demonstrates how to use mat-card-title-group to combine title, subtitle, and image in a single section of the card.\nSOURCE: https://github.com/angular/components/blob/main/src/material/card/card.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<mat-card-title-group>\n  <mat-card-title></mat-card-title>\n  <mat-card-subtitle></mat-card-subtitle>\n  <img mat-card-sm-image>\n  <!-- or -->\n  <img mat-card-md-image>\n  <!-- or -->\n  <img mat-card-lg-image>\n</mat-card-title-group>\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Rendering in Angular Expansion Panel\nDESCRIPTION: Demonstrates how to use ng-template for lazy rendering of expansion panel content, deferring initialization until the panel is opened.\nSOURCE: https://github.com/angular/components/blob/main/src/material/expansion/expansion.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<mat-expansion-panel>\n  <mat-expansion-panel-header>\n    This is the expansion title\n  </mat-expansion-panel-header>\n\n  <ng-template matExpansionPanelContent>\n    Some deferred content\n  </ng-template>\n</mat-expansion-panel>\n```\n\n----------------------------------------\n\nTITLE: Implementing Strong Focus Indicators in Angular Material (SCSS)\nDESCRIPTION: This snippet demonstrates how to include strong focus indicator styles in an Angular Material application alongside a custom theme. It uses the strong-focus-indicators and strong-focus-indicators-theme mixins.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\n@include mat.strong-focus-indicators();\n\n$my-primary: mat.m2-define-palette(mat.$m2-indigo-palette, 500);\n$my-accent: mat.m2-define-palette(mat.$m2-pink-palette, A200, A100, A400);\n\n$my-theme: mat.m2-define-light-theme((\n color: (\n   primary: $my-primary,\n   accent: $my-accent,\n )\n));\n\n@include mat.all-component-themes($my-theme);\n@include mat.strong-focus-indicators-theme($my-theme);\n```\n\n----------------------------------------\n\nTITLE: Angular Material List Component Imports\nDESCRIPTION: TypeScript imports required for Angular Material List components including core Angular dependencies and CDK modules.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterViewInit } from '@angular/core';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/observers';\nimport { InjectionToken } from '@angular/core';\nimport { NgZone } from '@angular/core';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { QueryList } from '@angular/core';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { SimpleChanges } from '@angular/core';\n```\n\n----------------------------------------\n\nTITLE: Dual Sidenav Layout\nDESCRIPTION: Demonstrates a layout with both left and right sidenavs using implicit content.\nSOURCE: https://github.com/angular/components/blob/main/src/material/sidenav/sidenav.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<mat-sidenav-container>\n  <mat-sidenav>Start</mat-sidenav>\n  <mat-sidenav position=\"end\">End</mat-sidenav>\n  <section>Main</section>\n</mat-sidenav-container>\n```\n\n----------------------------------------\n\nTITLE: MapMarkerClusterer Template Implementation\nDESCRIPTION: HTML template showing how to set up the Google Map with marker clustering. Includes map configuration and marker rendering using Angular's for loop.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-marker-clusterer/README.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<google-map\n  height=\"400px\"\n  width=\"750px\"\n  [center]=\"center\"\n  [zoom]=\"zoom\"\n  (mapClick)=\"addMarker($event)\">\n  <map-marker-clusterer>\n    @for (markerPosition of markerPositions; track $index) {\n      <map-advanced-marker [position]=\"markerPosition\"/>\n    }\n  </map-marker-clusterer>\n</google-map>\n```\n\n----------------------------------------\n\nTITLE: Defining MatSliderThumb Interface Properties in TypeScript\nDESCRIPTION: This code snippet defines properties and methods for the MatSliderThumb interface. It includes a value setter, valueChange EventEmitter, _valuetext signal, and writeValue method for form control integration. It also contains Angular-specific metadata for the directive.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/slider/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nset value(value: number);\nreadonly valueChange: EventEmitter<number>;\n_valuetext: i0.WritableSignal<string>;\nwriteValue(value: any): void;\n// (undocumented)\nstatic ɵdir: i0.ɵɵDirectiveDeclaration<MatSliderThumb, \"input[matSliderThumb]\", [\"matSliderThumb\"], { \"value\": { \"alias\": \"value\"; \"required\": false; }; }, { \"valueChange\": \"valueChange\"; \"dragStart\": \"dragStart\"; \"dragEnd\": \"dragEnd\"; }, never, never, true, never>;\n// (undocumented)\nstatic ɵfac: i0.ɵɵFactoryDeclaration<MatSliderThumb, never>;\n```\n\n----------------------------------------\n\nTITLE: Directive Declaration for CdkRowDef\nDESCRIPTION: Defines the directive declaration for the CdkRowDef directive, which defines a template for a row in the table. It includes input properties such as 'columns' and 'when', which determine when the row should be rendered. The selector, input properties, and factory declaration are included.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkRowDef<any>, \"[cdkRowDef]\", never, { \"columns\": { \"alias\": \"cdkRowDefColumns\"; \"required\": false; }; \"when\": { \"alias\": \"cdkRowDefWhen\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkRowDef<any>, never>;\n```\n\n----------------------------------------\n\nTITLE: Binding Accessibility Labels in Angular Material Slide Toggle\nDESCRIPTION: Demonstrates how to bind dynamic aria labels to a mat-slide-toggle component for improved accessibility. This example shows the correct way to bind the aria-label property without using the attr. prefix.\nSOURCE: https://github.com/angular/components/blob/main/src/material/slide-toggle/slide-toggle.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mat-slide-toggle [aria-label]=\"isSubscribedToEmailsMessage\">\n</mat-slide-toggle>\n```\n\n----------------------------------------\n\nTITLE: Defining Autocomplete Error and Configuration Tokens\nDESCRIPTION: This snippet defines error functions and configuration tokens for the Autocomplete component, including default options and scroll strategy.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/autocomplete/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getMatAutocompleteMissingPanelError(): Error;\n\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS: InjectionToken<MatAutocompleteDefaultOptions>;\n\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions;\n\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY;\n};\n\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any;\n```\n\n----------------------------------------\n\nTITLE: Defining MatSnackBarHarness Test Harness for Angular\nDESCRIPTION: A test harness class for interacting with Angular Material Snack Bar components during testing. Provides methods to check snack bar state, retrieve messages, and simulate user interactions.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/snack-bar/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatSnackBarHarness extends ContentContainerComponentHarness<string> {\n    dismissWithAction(): Promise<void>;\n    getActionDescription(): Promise<string>;\n    getAriaLive(): Promise<AriaLivePoliteness>;\n    getMessage(): Promise<string>;\n    getRole(): Promise<'alert' | 'status' | null>;\n    hasAction(): Promise<boolean>;\n    static hostSelector: string;\n    isDismissed(): Promise<boolean>;\n    static with(options?: SnackBarHarnessFilters): HarnessPredicate<MatSnackBarHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatBadge Class in TypeScript for Angular Material\nDESCRIPTION: Defines the MatBadge class which implements OnInit and OnDestroy interfaces. It includes properties for badge customization such as color, content, position, and size.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/badge/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatBadge implements OnInit, OnDestroy {\n    constructor(...args: unknown[]);\n    get color(): ThemePalette;\n    set color(value: ThemePalette);\n    get content(): string | number | undefined | null;\n    set content(newContent: string | number | undefined | null);\n    get description(): string;\n    set description(newDescription: string);\n    disabled: boolean;\n    getBadgeElement(): HTMLElement | undefined;\n    hidden: boolean;\n    isAbove(): boolean;\n    isAfter(): boolean;\n    static ngAcceptInputType_disabled: unknown;\n    static ngAcceptInputType_hidden: unknown;\n    static ngAcceptInputType_overlap: unknown;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    overlap: boolean;\n    position: MatBadgePosition;\n    size: MatBadgeSize;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatBadge, \"[matBadge]\", never, { \"color\": { \"alias\": \"matBadgeColor\"; \"required\": false; }; \"overlap\": { \"alias\": \"matBadgeOverlap\"; \"required\": false; }; \"disabled\": { \"alias\": \"matBadgeDisabled\"; \"required\": false; }; \"position\": { \"alias\": \"matBadgePosition\"; \"required\": false; }; \"content\": { \"alias\": \"matBadge\"; \"required\": false; }; \"description\": { \"alias\": \"matBadgeDescription\"; \"required\": false; }; \"size\": { \"alias\": \"matBadgeSize\"; \"required\": false; }; \"hidden\": { \"alias\": \"matBadgeHidden\"; \"required\": false; }; }, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatBadge, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PortalModule and Related Classes\nDESCRIPTION: This snippet shows the implementation of PortalModule and related classes, including PortalHostDirective and TemplatePortalDirective.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/portal/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class PortalModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<PortalModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<PortalModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<PortalModule, never, [typeof CdkPortal, typeof CdkPortalOutlet, typeof TemplatePortalDirective, typeof PortalHostDirective], [typeof CdkPortal, typeof CdkPortalOutlet, typeof TemplatePortalDirective, typeof PortalHostDirective]>;\n}\n\nexport class PortalHostDirective extends CdkPortalOutlet {\n    static ɵdir: i0.ɵɵDirectiveDeclaration<PortalHostDirective, \"[cdkPortalHost], [portalHost]\", [\"cdkPortalHost\"], { \"portal\": { \"alias\": \"cdkPortalHost\"; \"required\": false; }; }, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<PortalHostDirective, never>;\n}\n\nexport class TemplatePortalDirective extends CdkPortal {\n    static ɵdir: i0.ɵɵDirectiveDeclaration<TemplatePortalDirective, \"[cdk-portal], [portal]\", [\"cdkPortal\"], {}, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<TemplatePortalDirective, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Autocomplete Interfaces and Classes\nDESCRIPTION: This snippet defines interfaces and classes related to Autocomplete events, options, and triggers, including MatAutocompleteActivatedEvent, MatAutocompleteDefaultOptions, and MatAutocompleteTrigger.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/autocomplete/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MatAutocompleteActivatedEvent {\n    option: MatOption | null;\n    source: MatAutocomplete;\n}\n\nexport interface MatAutocompleteDefaultOptions {\n    autoActiveFirstOption?: boolean;\n    autoSelectActiveOption?: boolean;\n    backdropClass?: string;\n    hasBackdrop?: boolean;\n    hideSingleSelectionIndicator?: boolean;\n    overlayPanelClass?: string | string[];\n    requireSelection?: boolean;\n}\n\nexport class MatAutocompleteModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatAutocompleteModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatAutocompleteModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatAutocompleteModule, never, [typeof i2.OverlayModule, typeof MatOptionModule, typeof MatCommonModule, typeof MatAutocomplete, typeof MatAutocompleteTrigger, typeof MatAutocompleteOrigin], [typeof i5.CdkScrollableModule, typeof MatAutocomplete, typeof MatOptionModule, typeof MatCommonModule, typeof MatAutocompleteTrigger, typeof MatAutocompleteOrigin]>;\n}\n\nexport class MatAutocompleteOrigin {\n    constructor(...args: unknown[]);\n    elementRef: ElementRef<HTMLElement>;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatAutocompleteOrigin, \"[matAutocompleteOrigin]\", [\"matAutocompleteOrigin\"], {}, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatAutocompleteOrigin, never>;\n}\n\nexport class MatAutocompleteSelectedEvent {\n    constructor(\n    source: MatAutocomplete,\n    option: MatOption);\n    option: MatOption;\n    source: MatAutocomplete;\n}\n\nexport class MatAutocompleteTrigger implements ControlValueAccessor, AfterViewInit, OnChanges, OnDestroy {\n    constructor(...args: unknown[]);\n    get activeOption(): MatOption | null;\n    autocomplete: MatAutocomplete;\n    autocompleteAttribute: string;\n    autocompleteDisabled: boolean;\n    closePanel(): void;\n    connectedTo: MatAutocompleteOrigin;\n    _handleClick(): void;\n    _handleFocus(): void;\n    _handleInput(event: Event): void;\n    _handleKeydown(e: Event): void;\n    static ngAcceptInputType_autocompleteDisabled: unknown;\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    _onChange: (value: any) => void;\n    _onTouched: () => void;\n    openPanel(): void;\n    readonly optionSelections: Observable<MatOptionSelectionChange>;\n    get panelClosingActions(): Observable<MatOptionSelectionChange | null>;\n    get panelOpen(): boolean;\n    position: 'auto' | 'above' | 'below';\n    registerOnChange(fn: (value: any) => {}): void;\n    registerOnTouched(fn: () => {}): void;\n    setDisabledState(isDisabled: boolean): void;\n    updatePosition(): void;\n    writeValue(value: any): void;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatAutocompleteTrigger, \"input[matAutocomplete], textarea[matAutocomplete]\", [\"matAutocompleteTrigger\"], { \"autocomplete\": { \"alias\": \"matAutocomplete\"; \"required\": false; }; \"position\": { \"alias\": \"matAutocompletePosition\"; \"required\": false; }; \"connectedTo\": { \"alias\": \"matAutocompleteConnectedTo\"; \"required\": false; }; \"autocompleteAttribute\": { \"alias\": \"autocomplete\"; \"required\": false; }; \"autocompleteDisabled\": { \"alias\": \"matAutocompleteDisabled\"; \"required\": false; }; }, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatAutocompleteTrigger, never>;\n}\n\nexport class MatOptgroup {\n    constructor(...args: unknown[]);\n    disabled: boolean;\n    _inert: boolean;\n    label: string;\n    _labelId: string;\n    static ngAcceptInputType_disabled: unknown;\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatOptgroup, \"mat-optgroup\", [\"matOptgroup\"], { \"label\": { \"alias\": \"label\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; }, {}, never, [\"*\", \"mat-option, ng-container\"], true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatOptgroup, never>;\n}\n\nexport class MatOption<T = any> implements FocusableOption, AfterViewChecked, OnDestroy {\n```\n\n----------------------------------------\n\nTITLE: Setting Calendar Starting View in Angular Datepicker\nDESCRIPTION: Demonstrates how to set the initial view of the calendar when it opens using the startView property.\nSOURCE: https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<mat-datepicker #picker startView=\"year\" [startAt]=\"startDate\"></mat-datepicker>\n```\n\n----------------------------------------\n\nTITLE: Accessing Dialog Data in Component in TypeScript\nDESCRIPTION: Demonstrates how to access data passed to a dialog component using the DIALOG_DATA injection token.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/dialog/dialog.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component, Inject} from '@angular/core';\nimport {DIALOG_DATA} from '@angular/cdk/dialog';\n\n@Component({\n  selector: 'your-dialog',\n  template: 'passed in {{ data.name }}',\n})\nexport class YourDialog {\n  constructor(@Inject(DIALOG_DATA) public data: {name: string}) { }\n}\n```\n\n----------------------------------------\n\nTITLE: MatTimepickerModule Class Definition\nDESCRIPTION: This snippet defines the MatTimepickerModule, which is responsible for bundling all of the components, directives, and services related to the timepicker.  It declares the necessary components and exports them for use in other modules.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/timepicker/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatTimepickerModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTimepickerModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatTimepickerModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatTimepickerModule, never, [typeof MatTimepicker, typeof MatTimepickerInput, typeof MatTimepickerToggle], [typeof i5.CdkScrollableModule, typeof MatTimepicker, typeof MatTimepickerInput, typeof MatTimepickerToggle]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DomPortalOutlet Class\nDESCRIPTION: This snippet shows the implementation of the DomPortalOutlet class, which is used to attach portals to DOM elements.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/portal/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class DomPortalOutlet extends BasePortalOutlet {\n    constructor(\n    outletElement: Element, _appRef?: ApplicationRef | undefined, _defaultInjector?: Injector | undefined);\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    attachDomPortal: (portal: DomPortal) => void;\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n    dispose(): void;\n    outletElement: Element;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RepositionScrollStrategyConfig Interface in TypeScript\nDESCRIPTION: This interface defines the configuration options for the RepositionScrollStrategy, including auto-close and scroll throttle settings.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface RepositionScrollStrategyConfig {\n    autoClose?: boolean;\n    scrollThrottle?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Palette in SCSS for Angular Material 2\nDESCRIPTION: Shows the structure of a color palette in Angular Material, which is represented as a Sass map containing hue values and their corresponding contrast colors. This example shows the indigo palette structure.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$m2-indigo-palette: (\n 50: #e8eaf6,\n 100: #c5cae9,\n 200: #9fa8da,\n 300: #7986cb,\n // ... continues to 900\n contrast: (\n   50: rgba(black, 0.87),\n   100: rgba(black, 0.87),\n   200: rgba(black, 0.87),\n   300: white,\n   // ... continues to 900\n )\n);\n```\n\n----------------------------------------\n\nTITLE: Import Statements\nDESCRIPTION: This snippet imports necessary modules and classes from Angular core, forms, cdk, and rxjs. These imports are required for the components and services defined within the @angular/material_timepicker module to function correctly.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/timepicker/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbstractControl } from '@angular/forms';\nimport { AfterViewChecked } from '@angular/core';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { FocusableOption } from '@angular/cdk/a11y';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport * as i0 from '@angular/core';\nimport * as i5 from '@angular/cdk/scrolling';\nimport { InjectionToken } from '@angular/core';\nimport { InputSignal } from '@angular/core';\nimport { InputSignalWithTransform } from '@angular/core';\nimport { ModelSignal } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OutputEmitterRef } from '@angular/core';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\nimport { Signal } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { TemplateRef } from '@angular/core';\nimport { ValidationErrors } from '@angular/forms';\nimport { Validator } from '@angular/forms';\n```\n\n----------------------------------------\n\nTITLE: Modifying Default Tooltip Behavior in Angular\nDESCRIPTION: This example shows how to configure the app's default tooltip show/hide delays using the MAT_TOOLTIP_DEFAULT_OPTIONS injection token.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tooltip/tooltip.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(tooltip-modified-defaults) -->\n```\n\n----------------------------------------\n\nTITLE: Badge Visibility Control in Angular Material\nDESCRIPTION: Shows how to programmatically control badge visibility using the matBadgeHidden attribute.\nSOURCE: https://github.com/angular/components/blob/main/src/material/badge/badge.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\nmatBadgeHidden\n```\n\n----------------------------------------\n\nTITLE: Creating Mat Row Harness in Angular CDK Testing\nDESCRIPTION: The MatRowHarness class extends _MatRowHarnessBase to represent data rows in Material tables. It allows selection and interaction with rows using specific filters, defining a hostSelector for identification.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/table/testing/index.api.md#2025-04-21_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatRowHarness extends _MatRowHarnessBase<typeof MatCellHarness, MatCellHarness> {\n    protected _cellHarness: typeof MatCellHarness;\n    static hostSelector: string;\n    static with<T extends MatRowHarness>(this: ComponentHarnessConstructor<T>, options?: RowHarnessFilters): HarnessPredicate<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ComponentPortal in TypeScript for Angular Components\nDESCRIPTION: Shows how to create a ComponentPortal from a component type in the ngAfterViewInit lifecycle hook.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/portal/portal.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nngAfterViewInit() {\n  this.userSettingsPortal = new ComponentPortal(UserSettingsComponent);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Progress Bar Test Harness in TypeScript\nDESCRIPTION: Defines the MatProgressBarHarness class and ProgressBarHarnessFilters interface for testing Angular Material progress bar components. The harness provides methods to get progress bar mode and value, along with static utilities for component selection.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/progress-bar/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport class MatProgressBarHarness extends ComponentHarness {\n    getMode(): Promise<string | null>;\n    getValue(): Promise<number | null>;\n    // (undocumented)\n    static hostSelector: string;\n    static with<T extends MatProgressBarHarness>(this: ComponentHarnessConstructor<T>, options?: ProgressBarHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport interface ProgressBarHarnessFilters extends BaseHarnessFilters {\n}\n```\n\n----------------------------------------\n\nTITLE: Footer Row Implementation in Angular Material Table\nDESCRIPTION: HTML template showing how to add a footer row with custom cell definitions.\nSOURCE: https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<ng-container matColumnDef=\"cost\">\n  <th mat-header-cell *matHeaderCellDef> Cost </th>\n  <td mat-cell *matCellDef=\"let data\"> {{data.cost}} </td>\n  <td mat-footer-cell *matFooterCellDef> {{totalCost}} </td>\n</ng-container>\n\n...\n\n<tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n<tr mat-row *matRowDef=\"let myRowData; columns: columnsToDisplay\"></tr>\n<tr mat-footer-row *matFooterRowDef=\"columnsToDisplay\"></tr>\n```\n\n----------------------------------------\n\nTITLE: MatSliderDragEvent Interface Declaration\nDESCRIPTION: This code declares the `MatSliderDragEvent` interface, which represents the event emitted when the slider thumb is dragged. It includes properties for the parent slider component, the source thumb being dragged, and the current value of the slider during the drag operation.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/slider/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public\nexport interface MatSliderDragEvent {\n    parent: _MatSlider;\n    source: _MatSliderThumb;\n    value: number;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining MatChipTextControl Interface in Angular\nDESCRIPTION: Interface definition for MatChipTextControl, specifying properties and methods for chip text control functionality.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/chips/index.api.md#2025-04-21_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface MatChipTextControl {\n    readonly describedByIds?: string[];\n    empty: boolean;\n    focus(): void;\n    focused: boolean;\n    id: string;\n    placeholder: string;\n    setDescribedByIds(ids: string[]): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Snackbar Duration in TypeScript\nDESCRIPTION: Demonstrates how to set a custom duration for a snackbar using the configuration object.\nSOURCE: https://github.com/angular/components/blob/main/src/material/snack-bar/snack-bar.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsnackBar.open('Message archived', 'Undo', {\n  duration: 3000\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Datepicker Injection Tokens and Factories in TypeScript\nDESCRIPTION: Injection tokens and factory functions for the datepicker module that provide scroll strategies, validators, and date selection models through Angular's dependency injection system.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const MAT_DATE_RANGE_SELECTION_STRATEGY: InjectionToken<MatDateRangeSelectionStrategy<any>>;\n\n// @public\nexport const MAT_DATEPICKER_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n\n// @public @deprecated\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n\n// @public @deprecated\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY;\n};\n\n// @public\nexport const MAT_DATEPICKER_VALIDATORS: any;\n\n// @public\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any;\n\n// @public @deprecated\nexport function MAT_RANGE_DATE_SELECTION_MODEL_FACTORY(parent: MatSingleDateSelectionModel<unknown>, adapter: DateAdapter<unknown>): MatSingleDateSelectionModel<unknown>;\n\n// @public @deprecated\nexport const MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER: FactoryProvider;\n\n// @public @deprecated\nexport function MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY(parent: MatSingleDateSelectionModel<unknown>, adapter: DateAdapter<unknown>): MatSingleDateSelectionModel<unknown>;\n\n// @public @deprecated\nexport const MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER: FactoryProvider;\n```\n\n----------------------------------------\n\nTITLE: Defining MatMenuTrigger Directive Declarations in Angular TypeScript\nDESCRIPTION: Defines directive declarations for MatMenuTrigger, including properties for controlling menu operations and event bindings. It contains types and aliases for parameters like 'menu', 'menuData', and events such as 'menuOpened' and 'menuClosed'. It is essential in managing menu behaviors in Angular applications.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/menu/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic ɵdir: i0.ɵɵDirectiveDeclaration<MatMenuTrigger, \"[mat-menu-trigger-for], [matMenuTriggerFor]\", [\"matMenuTrigger\"], { \"_deprecatedMatMenuTriggerFor\": { \"alias\": \"mat-menu-trigger-for\"; \"required\": false; }; \"menu\": { \"alias\": \"matMenuTriggerFor\"; \"required\": false; }; \"menuData\": { \"alias\": \"matMenuTriggerData\"; \"required\": false; }; \"restoreFocus\": { \"alias\": \"matMenuTriggerRestoreFocus\"; \"required\": false; }; }, { \"menuOpened\": \"menuOpened\"; \"onMenuOpen\": \"onMenuOpen\"; \"menuClosed\": \"menuClosed\"; \"onMenuClose\": \"onMenuClose\"; }, never, never, true, never>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstatic ɵfac: i0.ɵɵFactoryDeclaration<MatMenuTrigger, never>;\n```\n\n----------------------------------------\n\nTITLE: Angular Material Chips Testing API Declarations\nDESCRIPTION: Comprehensive API declarations for Angular Material Chips testing harnesses. Includes interfaces for harness filters and classes for testing various chip components including avatars, inputs, grids, and listboxes. The code defines test harnesses that allow interaction with chip components in unit tests.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/chips/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as _angular_cdk_testing from '@angular/cdk/testing';\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { ContentContainerComponentHarness } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\nimport { TestKey } from '@angular/cdk/testing';\n\nexport interface ChipAvatarHarnessFilters extends BaseHarnessFilters {\n}\n\nexport interface ChipEditInputHarnessFilters extends BaseHarnessFilters {\n}\n\nexport interface ChipGridHarnessFilters extends BaseHarnessFilters {\n    disabled?: boolean;\n}\n\nexport interface ChipHarnessFilters extends BaseHarnessFilters {\n    disabled?: boolean;\n    text?: string | RegExp;\n}\n\nexport interface ChipInputHarnessFilters extends BaseHarnessFilters {\n    disabled?: boolean;\n    placeholder?: string | RegExp;\n    value?: string | RegExp;\n}\n\nexport interface ChipListboxHarnessFilters extends BaseHarnessFilters {\n    disabled?: boolean;\n}\n\nexport interface ChipOptionHarnessFilters extends ChipHarnessFilters {\n    selected?: boolean;\n}\n\nexport interface ChipRemoveHarnessFilters extends BaseHarnessFilters {\n}\n\nexport interface ChipRowHarnessFilters extends ChipHarnessFilters {\n}\n\nexport interface ChipSetHarnessFilters extends BaseHarnessFilters {\n}\n\nexport class MatChipAvatarHarness extends ComponentHarness {\n    static hostSelector: string;\n    static with<T extends MatChipAvatarHarness>(this: ComponentHarnessConstructor<T>, options?: ChipAvatarHarnessFilters): HarnessPredicate<T>;\n}\n\nexport class MatChipEditInputHarness extends ComponentHarness {\n    static hostSelector: string;\n    setValue(value: string): Promise<void>;\n    static with<T extends MatChipEditInputHarness>(this: ComponentHarnessConstructor<T>, options?: ChipEditInputHarnessFilters): HarnessPredicate<T>;\n}\n\nexport class MatChipGridHarness extends ComponentHarness {\n    getInput(filter?: ChipInputHarnessFilters): Promise<MatChipInputHarness | null>;\n    getRows(filter?: ChipRowHarnessFilters): Promise<MatChipRowHarness[]>;\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isInvalid(): Promise<boolean>;\n    isRequired(): Promise<boolean>;\n    static with<T extends MatChipGridHarness>(this: ComponentHarnessConstructor<T>, options?: ChipGridHarnessFilters): HarnessPredicate<T>;\n}\n\nexport class MatChipHarness extends ContentContainerComponentHarness {\n    getAvatar(filter?: ChipAvatarHarnessFilters): Promise<MatChipAvatarHarness | null>;\n    getRemoveButton(filter?: ChipRemoveHarnessFilters): Promise<MatChipRemoveHarness>;\n    getText(): Promise<string>;\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    protected _primaryAction: _angular_cdk_testing.AsyncFactoryFn<_angular_cdk_testing.TestElement>;\n    remove(): Promise<void>;\n    static with<T extends MatChipHarness>(this: ComponentHarnessConstructor<T>, options?: ChipHarnessFilters): HarnessPredicate<T>;\n}\n\nexport class MatChipInputHarness extends ComponentHarness {\n    blur(): Promise<void>;\n    focus(): Promise<void>;\n    getPlaceholder(): Promise<string>;\n    getValue(): Promise<string>;\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isFocused(): Promise<boolean>;\n    isRequired(): Promise<boolean>;\n    sendSeparatorKey(key: TestKey | string): Promise<void>;\n    setValue(newValue: string): Promise<void>;\n    static with<T extends MatChipInputHarness>(this: ComponentHarnessConstructor<T>, options?: ChipInputHarnessFilters): HarnessPredicate<T>;\n}\n\nexport class MatChipListboxHarness extends ComponentHarness {\n    getChips(filter?: ChipOptionHarnessFilters): Promise<MatChipOptionHarness[]>;\n    getOrientation(): Promise<'horizontal' | 'vertical'>;\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isMultiple(): Promise<boolean>;\n    isRequired(): Promise<boolean>;\n    selectChips(filter?: ChipOptionHarnessFilters): Promise<void>;\n    static with<T extends MatChipListboxHarness>(this: ComponentHarnessConstructor<T>, options?: ChipListboxHarnessFilters): HarnessPredicate<T>;\n}\n\nexport class MatChipOptionHarness extends MatChipHarness {\n    deselect(): Promise<void>;\n    static hostSelector: string;\n    isSelected(): Promise<boolean>;\n    select(): Promise<void>;\n    toggle(): Promise<void>;\n    static with<T extends MatChipHarness>(this: ComponentHarnessConstructor<T>, options?: ChipOptionHarnessFilters): HarnessPredicate<T>;\n}\n\nexport class MatChipRemoveHarness extends ComponentHarness {\n    click(): Promise<void>;\n    static hostSelector: string;\n    static with<T extends MatChipRemoveHarness>(this: ComponentHarnessConstructor<T>, options?: ChipRemoveHarnessFilters): HarnessPredicate<T>;\n}\n\nexport class MatChipRowHarness extends MatChipHarness {\n    finishEditing(): Promise<void>;\n    getEditInput(filter?: ChipEditInputHarnessFilters): Promise<MatChipEditInputHarness>;\n    static hostSelector: string;\n    isEditable(): Promise<boolean>;\n    isEditing(): Promise<boolean>;\n    startEditing(): Promise<void>;\n}\n\nexport class MatChipSetHarness extends ComponentHarness {\n    getChips(filter?: ChipHarnessFilters): Promise<MatChipHarness[]>;\n    static hostSelector: string;\n    static with<T extends MatChipSetHarness>(this: ComponentHarnessConstructor<T>, options?: ChipSetHarnessFilters): HarnessPredicate<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Badge Overlap Configuration in Angular Material\nDESCRIPTION: Shows how to control badge overlap behavior with the matBadgeOverlap attribute. This determines whether the badge should overlap its containing element.\nSOURCE: https://github.com/angular/components/blob/main/src/material/badge/badge.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nmatBadgeOverlap\n```\n\n----------------------------------------\n\nTITLE: Lists with Avatars in Angular Material\nDESCRIPTION: Implementation of a list with avatar images using the matListItemAvatar directive.\nSOURCE: https://github.com/angular/components/blob/main/src/material/list/list.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<mat-list>\n  @for (message of messages; track message) {\n    <mat-list-item>\n      <img matListItemAvatar src=\"...\" alt=\"...\">\n      <h3 matListItemTitle>{{message.from}}</h3>\n      <p matListItemLine>\n        <span>{{message.subject}}</span>\n        <span class=\"demo-2\"> -- {{message.content}}</span>\n      </p>\n    </mat-list-item>\n  }\n</mat-list>\n```\n\n----------------------------------------\n\nTITLE: MatTimepickerConfig Interface Definition\nDESCRIPTION: This snippet defines the MatTimepickerConfig interface, which specifies the configuration options for the MatTimepicker component. It includes properties for disabling the ripple effect and setting the time interval.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/timepicker/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MatTimepickerConfig {\n    disableRipple?: boolean;\n    interval?: string | number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MatChipGridChange class for change events\nDESCRIPTION: A class representing a change event from the MatChipGrid component. It includes a reference to the source grid and the new value after the change occurred.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/chips/index.api.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatChipGridChange {\n    constructor(\n    source: MatChipGrid,\n    value: any);\n    source: MatChipGrid;\n    value: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Markers Controller in Angular TypeScript\nDESCRIPTION: TypeScript component class that handles the logic for adding and managing advanced markers on a Google Map. It defines the map center, zoom level, marker options, and includes a method for adding new markers on map click events.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-advanced-marker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapAdvancedMarker} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap, MapAdvancedMarker],\n})\nexport class GoogleMapDemo {\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n  advancedMarkerOptions: google.maps.marker.AdvancedMarkerElementOptions = {gmpDraggable: false};\n  advancedMarkerPositions: google.maps.LatLngLiteral[] = [];\n\n  addAdvancedMarker(event: google.maps.MapMouseEvent) {\n    this.advancedMarkerPositions.push(event.latLng.toJSON());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ListItemHarnessFilters Interface\nDESCRIPTION: This interface extends BaseListItemHarnessFilters and defines filter options for ListItemHarness. By inheriting from BaseListItemHarnessFilters, it gains access to common list item filtering properties, making it easier to locate specific list items during testing.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport interface ListItemHarnessFilters extends BaseListItemHarnessFilters {\n}\"\n```\n\n----------------------------------------\n\nTITLE: Extending CdkStepper in a Custom Component\nDESCRIPTION: Creates a custom stepper component by extending the CdkStepper class, providing itself as CdkStepper for other components to recognize, and implementing a click handler to navigate between steps.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-stepper-using-the-cdk-stepper.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  selector: 'app-custom-stepper',\n  templateUrl: './custom-stepper.component.html',\n  styleUrl: './custom-stepper.component.css',\n  // This custom stepper provides itself as CdkStepper so that it can be recognized\n  // by other components.\n  providers: [{ provide: CdkStepper, useExisting: CustomStepperComponent }]\n})\nexport class CustomStepperComponent extends CdkStepper {\n  onClick(index: number): void {\n    this.selectedIndex = index;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LiveAnnouncer in TypeScript\nDESCRIPTION: Demonstrates how to use LiveAnnouncer to announce messages for screen-reader users using an aria-live region.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/a11y.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({...})\nexport class MyComponent {\n\n constructor(liveAnnouncer: LiveAnnouncer) {\n   liveAnnouncer.announce(\"Hey Google\");\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Stepper Options in Angular\nDESCRIPTION: TypeScript configuration for customizing stepper default indicator type through global options in the application's root module.\nSOURCE: https://github.com/angular/components/blob/main/src/material/stepper/stepper.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@NgModule({\n  providers: [\n    {\n      provide: STEPPER_GLOBAL_OPTIONS,\n      useValue: { displayDefaultIndicatorType: false }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining ViewRepeater-related Types and Interfaces in TypeScript\nDESCRIPTION: This snippet defines various types and interfaces related to view repeaters, including _ViewRepeater interface, _ViewRepeaterItemChange interface, and _ViewRepeaterOperation enum.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/collections/index.api.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport const _VIEW_REPEATER_STRATEGY: InjectionToken<_ViewRepeater<unknown, unknown, _ViewRepeaterItemContext<unknown>>>;\n\nexport interface _ViewRepeater<T, R, C extends _ViewRepeaterItemContext<T>> {\n    applyChanges(changes: IterableChanges<R>, viewContainerRef: ViewContainerRef, itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>, itemValueResolver: _ViewRepeaterItemValueResolver<T, R>, itemViewChanged?: _ViewRepeaterItemChanged<R, C>): void;\n    detach(): void;\n}\n\nexport interface _ViewRepeaterItemChange<R, C> {\n    context?: C;\n    operation: _ViewRepeaterOperation;\n    record: IterableChangeRecord<R>;\n}\n\nexport type _ViewRepeaterItemChanged<R, C> = (change: _ViewRepeaterItemChange<R, C>) => void;\n\nexport interface _ViewRepeaterItemContext<T> {\n    $implicit?: T;\n}\n\nexport type _ViewRepeaterItemContextFactory<T, R, C extends _ViewRepeaterItemContext<T>> = (record: IterableChangeRecord<R>, adjustedPreviousIndex: number | null, currentIndex: number | null) => _ViewRepeaterItemInsertArgs<C>;\n\nexport interface _ViewRepeaterItemInsertArgs<C> {\n    context?: C;\n    index?: number;\n    templateRef: TemplateRef<C>;\n}\n\nexport type _ViewRepeaterItemValueResolver<T, R> = (record: IterableChangeRecord<R>) => T;\n\nexport enum _ViewRepeaterOperation {\n    INSERTED = 1,\n    MOVED = 2,\n    REMOVED = 3,\n    REPLACED = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Chip Options\nDESCRIPTION: Angular module configuration for setting default chip options using MAT_CHIPS_DEFAULT_OPTIONS token.\nSOURCE: https://github.com/angular/components/blob/main/src/material/chips/chips.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n@NgModule({\n  providers: [\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [COMMA, SPACE]\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Height Tabs Implementation\nDESCRIPTION: Demonstrates how to implement tabs with dynamic height that animates according to the active tab's content height.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tabs/tabs.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<mat-tab-group dynamicHeight>\n  <mat-tab label=\"Short tab\">\n    <div class=\"small-content\">Small content</div>\n  </mat-tab>\n  <mat-tab label=\"Large tab\">\n    <div class=\"large-content\">Large content</div>\n  </mat-tab>\n</mat-tab-group>\n```\n\n----------------------------------------\n\nTITLE: Defining MatDatepickerToggle Class in TypeScript\nDESCRIPTION: This class implements the toggle button for the datepicker. It handles user interactions and accessibility features.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n    constructor(...args: unknown[]);\n    ariaLabel: string;\n    _button: MatButton;\n    _customIcon: MatDatepickerToggleIcon;\n    datepicker: MatDatepickerPanel<MatDatepickerControl<any>, D>;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    disableRipple: boolean;\n    // (undocumented)\n    _intl: MatDatepickerIntl;\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngOnChanges(changes: SimpleChanges): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    _open(event: Event): void;\n    tabIndex: number | null;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatDatepickerToggle<any>, \"mat-datepicker-toggle\", [\"matDatepickerToggle\"], { \"datepicker\": { \"alias\": \"for\"; \"required\": false; }; \"tabIndex\": { \"alias\": \"tabIndex\"; \"required\": false; }; \"ariaLabel\": { \"alias\": \"aria-label\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"disableRipple\": { \"alias\": \"disableRipple\"; \"required\": false; }; }, {}, [\"_customIcon\"], [\"[matDatepickerToggleIcon]\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDatepickerToggle<any>, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Highlightable Interface for List Items\nDESCRIPTION: Interface extending ListKeyManagerOption to provide methods for setting active and inactive styles on list items.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/a11y/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Highlightable extends ListKeyManagerOption {\n    setActiveStyles(): void;\n    setInactiveStyles(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Coordinate-Based Ripple Launch\nDESCRIPTION: Example of launching ripples at specific coordinates within the container element.\nSOURCE: https://github.com/angular/components/blob/main/src/material/core/ripple/ripple.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst rippleRef = this.ripple.launch(10, 10, {persistent: true});\n```\n\n----------------------------------------\n\nTITLE: Defining MatChipEvent interface for chip interactions\nDESCRIPTION: A basic interface for chip-related events that provides a reference to the chip instance that triggered the event. Used as a basis for more specific chip event types.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/chips/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface MatChipEvent {\n    chip: MatChip;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OverlayPositionBuilder Class in TypeScript\nDESCRIPTION: This class provides methods for creating flexible connected and global position strategies for overlays.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class OverlayPositionBuilder {\n    constructor(...args: unknown[]);\n    flexibleConnectedTo(origin: FlexibleConnectedPositionStrategyOrigin): FlexibleConnectedPositionStrategy;\n    global(): GlobalPositionStrategy;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<OverlayPositionBuilder, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<OverlayPositionBuilder>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatNavListItemHarness Class\nDESCRIPTION: This class extends MatListItemHarnessBase and represents a harness for testing Angular Material navigation list items. It provides methods for interacting with navigation list items, such as focusing, blurring, and clicking, along with methods to determine the href and activated state.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport class MatNavListItemHarness extends MatListItemHarnessBase {\n    blur(): Promise<void>;\n    click(): Promise<void>;\n    focus(): Promise<void>;\n    getHref(): Promise<string | null>;\n    static hostSelector: string;\n    isActivated(): Promise<boolean>;\n    isFocused(): Promise<boolean>;\n    static with<T extends MatNavListItemHarness>(this: ComponentHarnessConstructor<T>, options?: NavListItemHarnessFilters): HarnessPredicate<T>;\n}\"\n```\n\n----------------------------------------\n\nTITLE: MatFormFieldControlHarness Abstract Class Definition\nDESCRIPTION: Defines an abstract base class for form field control harnesses. It extends ComponentHarness and serves as a common base for specific control harnesses like MatInputHarness and MatSelectHarness.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/form-field/testing/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\\nexport abstract class MatFormFieldControlHarness extends ComponentHarness {\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining BaseListItemHarnessFilters Interface\nDESCRIPTION: This interface serves as a base for filtering list item harnesses and extends BaseHarnessFilters. It includes properties for filtering based on text content within list items (full text, secondary text, tertiary text, and title), providing flexibility in targeting specific list items during testing.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport interface BaseListItemHarnessFilters extends BaseHarnessFilters {\n    // (undocumented)\n    fullText?: string | RegExp;\n    // (undocumented)\n    secondaryText?: string | RegExp | null;\n    // (undocumented)\n    tertiaryText?: string | RegExp | null;\n    // @deprecated (undocumented)\n    text?: string | RegExp;\n    // (undocumented)\n    title?: string | RegExp;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing MapPolygon in Angular TypeScript Component\nDESCRIPTION: This TypeScript code defines an Angular component that uses the GoogleMap and MapPolygon components from @angular/google-maps. It sets up the map center, zoom level, and defines vertices for a polygon.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-polygon/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// google-maps-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapPolygon} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap, MapPolygon],\n})\nexport class GoogleMapDemo {\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n\n  vertices: google.maps.LatLngLiteral[] = [\n    {lat: 13, lng: 13},\n    {lat: -13, lng: 0},\n    {lat: 13, lng: -13},\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Tab Focus in Dialog HTML\nDESCRIPTION: Shows how to control which elements are tab stops within a dialog using the tabindex attribute.\nSOURCE: https://github.com/angular/components/blob/main/src/material/dialog/dialog.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<button matButton tabindex=\"-1\">Not Tabbable</button>\n```\n\n----------------------------------------\n\nTITLE: MatTimepickerSelected Interface Definition\nDESCRIPTION: This snippet defines the MatTimepickerSelected interface, which represents the event emitted when a time is selected in the MatTimepicker.  It contains the source (MatTimepicker) and the selected value.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/timepicker/index.api.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MatTimepickerSelected<D> {\n    // (undocumented)\n    source: MatTimepicker<D>;\n    // (undocumented)\n    value: D;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Google Fonts for Angular Material Typography\nDESCRIPTION: HTML snippet for loading the Roboto and Open Sans font families with multiple weights from Google Fonts, which can be used in conjunction with the typography configurations in the theme.\nSOURCE: https://github.com/angular/components/blob/main/guides/theming.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&family=Roboto:wght@400;500;700&display=swap\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Defining MapBicyclingLayer Component in TypeScript\nDESCRIPTION: This snippet defines the MapBicyclingLayer component, which represents a bicycling layer on the map with initialization and destruction logic.\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MapBicyclingLayer implements OnInit, OnDestroy {\n    bicyclingLayer?: google.maps.BicyclingLayer;\n    readonly bicyclingLayerInitialized: EventEmitter<google.maps.BicyclingLayer>;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Chip Row\nDESCRIPTION: Example of creating a disabled chip row for input-connected chips.\nSOURCE: https://github.com/angular/components/blob/main/src/material/chips/chips.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<mat-chip-row disabled>Orange</mat-chip-row>\n```\n\n----------------------------------------\n\nTITLE: Viewport Ruler Class Definition\nDESCRIPTION: Defines ViewportRuler class that provides methods to get viewport dimensions and scroll position. Includes methods for observing viewport changes.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/scrolling/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ViewportRuler implements OnDestroy {\n    constructor(...args: unknown[]);\n    change(throttleTime?: number): Observable<Event>;\n    protected _document: Document;\n    getViewportRect(): {\n        top: number;\n        left: number;\n        bottom: number;\n        right: number;\n        height: number;\n        width: number;\n    };\n    getViewportScrollPosition(): ViewportScrollPosition;\n    getViewportSize(): Readonly<{\n        width: number;\n        height: number;\n    }>;\n    ngOnDestroy(): void;\n    static ɵfac: i0.ɵɵFactoryDeclaration<ViewportRuler, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<ViewportRuler>;\n}\n```\n\n----------------------------------------\n\nTITLE: Localizing Datepicker Text\nDESCRIPTION: Shows how to provide custom localized text strings for the datepicker through MatDatepickerIntl.\nSOURCE: https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nbootstrapApplication(MyApp, {\n  providers: [\n    {provide: MatDatepickerIntl, useClass: MyIntl},\n    provideNativeDateAdapter(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Styling the Custom Stepper Component\nDESCRIPTION: CSS styling for the custom stepper component that defines the container, navigation bar, step indicators, and active step highlighting without any Material Design constraints.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-stepper-using-the-cdk-stepper.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.example-container {\n  border: 1px solid black;\n  padding: 10px;\n  margin: 10px;\n}\n\n.example-step-navigation-bar {\n  display: flex;\n  justify-content: flex-start;\n  margin-top: 10px;\n}\n\n.example-active {\n  color: blue;\n}\n\n.example-step {\n  background: transparent;\n  border: 0;\n  margin: 0 10px;\n  padding: 10px;\n  color: black;\n}\n\n.example-step.example-active {\n  color: blue;\n  border-bottom: 1px solid blue;\n}\n\n.example-nav-button {\n  background: transparent;\n  border: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: MatTabLabel Class Definition in TypeScript\nDESCRIPTION: Implementation of a tab label component that extends CdkPortal to provide content projection for tab labels.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatTabLabel extends CdkPortal {\n    // (undocumented)\n    _closestTab: any;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatTabLabel, \"[mat-tab-label], [matTabLabel]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTabLabel, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ListKeyManager with Wrap in TypeScript\nDESCRIPTION: Shows how to initialize a FocusKeyManager with wrapping enabled for navigation through options.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/a11y.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nthis.keyManager = new FocusKeyManager(...).withWrap();\n```\n\n----------------------------------------\n\nTITLE: Factory Function for Providing MatSortHeaderIntl\nDESCRIPTION: This function `MAT_SORT_HEADER_INTL_PROVIDER_FACTORY` is designed for providing an instance of `MatSortHeaderIntl`, using parent Intl if available. It's part of Angular's dependency injection system.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sort/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl): MatSortHeaderIntl;\n```\n\n----------------------------------------\n\nTITLE: Google Maps Advanced Marker Template Implementation\nDESCRIPTION: HTML template that renders a Google Map with advanced markers. It configures the map dimensions, center, zoom, and uses Angular's for loop to render markers at specified positions.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-advanced-marker/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<google-map\n  mapId=\"yourMapId\"\n  height=\"400px\"\n  width=\"750px\"\n  [center]=\"center\"\n  [zoom]=\"zoom\"\n  (mapClick)=\"addAdvancedMarker($event)\">\n    @for (position of advancedMarkerPositions; track position) {\n      <map-advanced-marker [position]=\"position\" [options]=\"advancedMarkerOptions\" />\n    }\n</google-map>\n```\n\n----------------------------------------\n\nTITLE: Map Traffic Layer Component Definition\nDESCRIPTION: Angular component class for implementing a Google Maps traffic layer with auto-refresh capability.\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MapTrafficLayer implements OnInit, OnDestroy {\n    constructor(...args: unknown[]);\n    set autoRefresh(autoRefresh: boolean);\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    trafficLayer?: google.maps.TrafficLayer;\n    readonly trafficLayerInitialized: EventEmitter<google.maps.TrafficLayer>;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MapTrafficLayer, \"map-traffic-layer\", [\"mapTrafficLayer\"], { \"autoRefresh\": { \"alias\": \"autoRefresh\"; \"required\": false; }; }, { \"trafficLayerInitialized\": \"trafficLayerInitialized\"; }, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MapTrafficLayer, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Material Option Component Definition\nDESCRIPTION: Core Angular Material option component with selection, focus, and interaction management capabilities\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/select/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatOption<T = any> implements FocusableOption, AfterViewChecked, OnDestroy\n```\n\n----------------------------------------\n\nTITLE: Defining MatDatepickerInputEvent Class in TypeScript\nDESCRIPTION: Implements an event class for datepicker input interactions. It captures both the input control and the DOM element that triggered the event.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatDatepickerInputEvent<D, S = unknown> {\n    constructor(\n    target: MatDatepickerInputBase<S, D>,\n    targetElement: HTMLElement);\n    target: MatDatepickerInputBase<S, D>;\n}\n```\n\n----------------------------------------\n\nTITLE: MatPaginatedTabHeader Abstract Class\nDESCRIPTION: This code defines an abstract class `MatPaginatedTabHeader` which provides common functionality for tab headers that support pagination. It handles scrolling, keyboard navigation, and updating the ink bar position.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport abstract class MatPaginatedTabHeader implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy {\n    constructor(...args: unknown[]);\n    _alignInkBarToSelectedTab(): void;\n    // (undocumented)\n    _animationsDisabled: boolean;\n    // (undocumented)\n    protected _changeDetectorRef: ChangeDetectorRef;\n    _checkPaginationEnabled(): void;\n    _checkScrollingControls(): void;\n    protected readonly _destroyed: Subject<void>;\n    disablePagination: boolean;\n    _disableScrollAfter: boolean;\n    _disableScrollBefore: boolean;\n    // (undocumented)\n    protected _elementRef: ElementRef<HTMLElement>;\n    get focusIndex(): number;\n    set focusIndex(value: number);\n    _getLayoutDirection(): Direction;\n    _getMaxScrollDistance(): number;\n    _handleKeydown(event: KeyboardEvent): void;\n    _handlePaginatorClick(direction: ScrollDirection): void;\n    _handlePaginatorPress(direction: ScrollDirection, mouseEvent?: MouseEvent): void;\n    readonly indexFocused: EventEmitter<number>;\n    // (undocumented)\n    abstract _inkBar: {\n        hide: () => void;\n        alignToElement: (element: HTMLElement) => void;\n    };\n    _isValidIndex(index: number): boolean;\n    // (undocumented)\n    abstract _items: QueryList<MatPaginatedTabHeaderItem>;\n    protected abstract _itemSelected(event: KeyboardEvent): void;\n    // (undocumented)\n    abstract _nextPaginator: ElementRef<HTMLElement>;\n    // (undocumented)\n    static ngAcceptInputType_disablePagination: unknown;\n    // (undocumented)\n    static ngAcceptInputType_selectedIndex: unknown;\n    // (undocumented)\n    ngAfterContentChecked(): void;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    _onContentChanges(): void;\n    // (undocumented)\n    abstract _previousPaginator: ElementRef<HTMLElement>;\n    get scrollDistance(): number;\n    set scrollDistance(value: number);\n    _scrollHeader(direction: ScrollDirection): {maxScrollDistance: number; distance: number;};\n    _scrollToLabel(labelIndex: number): void;\n    get selectedIndex(): number;\n    set selectedIndex(v: number);\n    readonly selectFocusedIndex: EventEmitter<number>;\n    _setTabFocus(tabIndex: number): void;\n    _showPaginationControls: boolean;\n    _stopInterval(): void;\n    // (undocumented)\n    abstract _tabList: ElementRef<HTMLElement>;\n    // (undocumented)\n    abstract _tabListContainer: ElementRef<HTMLElement>;\n    // (undocumented)\n    abstract _tabListInner: ElementRef<HTMLElement>;\n    updatePagination(): void;\n    _updateTabScrollPosition(): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatPaginatedTabHeader, never, never, { \"disablePagination\": { \"alias\": \"disablePagination\"; \"required\": false; }; \"selectedIndex\": { \"alias\": \"selectedIndex\"; \"required\": false; }; }, { \"selectFocusedIndex\": \"selectFocusedIndex\"; \"indexFocused\": \"indexFocused\"; }, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatPaginatedTabHeader, never>;\n}\"\n```\n\n----------------------------------------\n\nTITLE: MatTab Component Definition\nDESCRIPTION: This code defines the `MatTab` component, representing a single tab within a tab group. It includes properties for managing the tab's label, content, disabled state, and accessibility attributes.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport class MatTab implements OnInit, OnChanges, OnDestroy {\n    constructor(...args: unknown[]);\n    ariaLabel: string;\n    ariaLabelledby: string;\n    bodyClass: string | string[];\n    // (undocumented)\n    _closestTabGroup: any;\n    get content(): TemplatePortal | null;\n    disabled: boolean;\n    id: string | null;\n    _implicitContent: TemplateRef<any>;\n    isActive: boolean;\n    labelClass: string | string[];\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    ngOnChanges(changes: SimpleChanges): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    ngOnInit(): void;\n    origin: number | null;\n    position: number | null;\n    readonly _stateChanges: Subject<void>;\n    get templateLabel(): MatTabLabel;\n    set templateLabel(value: MatTabLabel);\n    textLabel: string;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatTab, \\\"mat-tab\\\", [\\\"matTab\\\"], { \\\"disabled\\\": { \\\"alias\\\": \\\"disabled\\\"; \\\"required\\\": false; }; \\\"textLabel\\\": { \\\"alias\\\": \\\"label\\\"; \\\"required\\\": false; }; \\\"ariaLabel\\\": { \\\"alias\\\": \\\"aria-label\\\"; \\\"required\\\": false; }; \\\"ariaLabelledby\\\": { \\\"alias\\\": \\\"aria-labelledby\\\"; \\\"required\\\": false; }; \\\"labelClass\\\": { \\\"alias\\\": \\\"labelClass\\\"; \\\"required\\\": false; }; \\\"bodyClass\\\": { \\\"alias\\\": \\\"bodyClass\\\"; \\\"required\\\": false; }; \\\"id\\\": { \\\"alias\\\": \\\"id\\\"; \\\"required\\\": false; }; }, {}, [\\\"templateLabel\\\", \\\"_explicitContent\\\"], [\\\"*\\\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTab, never>;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing MapHeatmapLayer in Angular Component\nDESCRIPTION: This TypeScript code demonstrates how to set up a component that uses the MapHeatmapLayer directive. It includes imports, component configuration, and data setup for the heatmap.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-heatmap-layer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// google-map-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapHeatmapLayer} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap, MapHeatmapLayer],\n})\nexport class GoogleMapDemo {\n  center = {lat: 37.774546, lng: -122.433523};\n  zoom = 12;\n  heatmapOptions = {radius: 5};\n  heatmapData = [\n    {lat: 37.782, lng: -122.447},\n    {lat: 37.782, lng: -122.445},\n    {lat: 37.782, lng: -122.443},\n    {lat: 37.782, lng: -122.441},\n    {lat: 37.782, lng: -122.439},\n    {lat: 37.782, lng: -122.437},\n    {lat: 37.782, lng: -122.435},\n    {lat: 37.785, lng: -122.447},\n    {lat: 37.785, lng: -122.445},\n    {lat: 37.785, lng: -122.443},\n    {lat: 37.785, lng: -122.441},\n    {lat: 37.785, lng: -122.439},\n    {lat: 37.785, lng: -122.437},\n    {lat: 37.785, lng: -122.435}\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Selection Chip Option\nDESCRIPTION: Example of implementing a disabled chip option for selection lists.\nSOURCE: https://github.com/angular/components/blob/main/src/material/chips/chips.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<mat-chip-option disabled>Orange</mat-chip-option>\n```\n\n----------------------------------------\n\nTITLE: Typescript API Report for Angular Material Tooltip\nDESCRIPTION: A comprehensive API definition for the @angular/material_tooltip package generated by API Extractor. It includes all exported classes, interfaces, tokens, and functions with their signatures and type definitions.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tooltip/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterViewInit } from '@angular/core';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { ConnectedPosition } from '@angular/cdk/overlay';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ElementRef } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i1_2 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/overlay';\nimport * as i5 from '@angular/cdk/scrolling';\nimport { InjectionToken } from '@angular/core';\nimport { NumberInput } from '@angular/cdk/coercion';\nimport { Observable } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nimport { OriginConnectionPosition } from '@angular/cdk/overlay';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { OverlayConnectionPosition } from '@angular/cdk/overlay';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\n\n// @public\nexport function getMatTooltipInvalidPositionError(position: string): Error;\n\n// @public\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS: InjectionToken<MatTooltipDefaultOptions>;\n\n// @public @deprecated\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions;\n\n// @public\nexport const MAT_TOOLTIP_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n\n// @public @deprecated\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n\n// @public @deprecated\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY;\n};\n\n// @public\nexport class MatTooltip implements OnDestroy, AfterViewInit {\n    constructor(...args: unknown[]);\n    protected _addOffset(position: ConnectedPosition): ConnectedPosition;\n    // (undocumented)\n    protected _dir: Directionality;\n    get disabled(): boolean;\n    set disabled(value: BooleanInput);\n    _getOrigin(): {\n        main: OriginConnectionPosition;\n        fallback: OriginConnectionPosition;\n    };\n    _getOverlayPosition(): {\n        main: OverlayConnectionPosition;\n        fallback: OverlayConnectionPosition;\n    };\n    hide(delay?: number): void;\n    get hideDelay(): number;\n    set hideDelay(value: NumberInput);\n    _isTooltipVisible(): boolean;\n    get message(): string;\n    set message(value: string | null | undefined);\n    // (undocumented)\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    // (undocumented)\n    _overlayRef: OverlayRef | null;\n    get position(): TooltipPosition;\n    set position(value: TooltipPosition);\n    get positionAtOrigin(): boolean;\n    set positionAtOrigin(value: BooleanInput);\n    show(delay?: number, origin?: {\n        x: number;\n        y: number;\n    }): void;\n    get showDelay(): number;\n    set showDelay(value: NumberInput);\n    toggle(origin?: {\n        x: number;\n        y: number;\n    }): void;\n    get tooltipClass(): string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    set tooltipClass(value: string | string[] | Set<string> | {\n        [key: string]: any;\n    });\n    // (undocumented)\n    _tooltipInstance: TooltipComponent | null;\n    touchGestures: TooltipTouchGestures;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatTooltip, \"[matTooltip]\", [\"matTooltip\"], { \"position\": { \"alias\": \"matTooltipPosition\"; \"required\": false; }; \"positionAtOrigin\": { \"alias\": \"matTooltipPositionAtOrigin\"; \"required\": false; }; \"disabled\": { \"alias\": \"matTooltipDisabled\"; \"required\": false; }; \"showDelay\": { \"alias\": \"matTooltipShowDelay\"; \"required\": false; }; \"hideDelay\": { \"alias\": \"matTooltipHideDelay\"; \"required\": false; }; \"touchGestures\": { \"alias\": \"matTooltipTouchGestures\"; \"required\": false; }; \"message\": { \"alias\": \"matTooltip\"; \"required\": false; }; \"tooltipClass\": { \"alias\": \"matTooltipClass\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTooltip, never>;\n}\n\n// @public @deprecated\nexport const matTooltipAnimations: {\n    readonly tooltipState: any;\n};\n\n// @public\nexport interface MatTooltipDefaultOptions {\n    disableTooltipInteractivity?: boolean;\n    hideDelay: number;\n    position?: TooltipPosition;\n    positionAtOrigin?: boolean;\n    showDelay: number;\n    tooltipClass?: string | string[];\n    touchendHideDelay: number;\n    touchGestures?: TooltipTouchGestures;\n    touchLongPressShowDelay?: number;\n}\n\n// @public (undocumented)\nexport class MatTooltipModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTooltipModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatTooltipModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatTooltipModule, never, [typeof i1.A11yModule, typeof i2.OverlayModule, typeof MatCommonModule, typeof MatTooltip, typeof TooltipComponent], [typeof MatTooltip, typeof TooltipComponent, typeof MatCommonModule, typeof i5.CdkScrollableModule]>;\n}\n\n// @public\nexport const SCROLL_THROTTLE_MS = 20;\n\n// @public @deprecated\nexport const TOOLTIP_PANEL_CLASS = \"mat-mdc-tooltip-panel\";\n\n// @public\nexport class TooltipComponent implements OnDestroy {\n    constructor(...args: unknown[]);\n    afterHidden(): Observable<void>;\n    _cancelPendingAnimations(): void;\n    // (undocumented)\n    protected _elementRef: ElementRef<HTMLElement>;\n    _handleAnimationEnd({ animationName }: AnimationEvent): void;\n    _handleBodyInteraction(): void;\n    // (undocumented)\n    _handleMouseLeave({ relatedTarget }: MouseEvent): void;\n    hide(delay: number): void;\n    // (undocumented)\n    _isMultiline: boolean;\n    isVisible(): boolean;\n    _markForCheck(): void;\n    message: string;\n    _mouseLeaveHideDelay: number;\n    // (undocumented)\n    ngOnDestroy(): void;\n    protected _onShow(): void;\n    show(delay: number): void;\n    _tooltip: ElementRef<HTMLElement>;\n    tooltipClass: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    _triggerElement: HTMLElement;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<TooltipComponent, \"mat-tooltip-component\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<TooltipComponent, never>;\n}\n\n// @public\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n// @public\nexport type TooltipTouchGestures = 'auto' | 'on' | 'off';\n\n// @public\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Defining ListboxValueChangeEvent Interface in TypeScript for Angular CDK\nDESCRIPTION: Describes the structure of the event emitted when the value of a CdkListbox changes, including references to the listbox, selected option, and current value.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/listbox/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ListboxValueChangeEvent<T> {\n    readonly listbox: CdkListbox<T>;\n    readonly option: CdkOption<T> | null;\n    readonly value: readonly T[];\n}\n```\n\n----------------------------------------\n\nTITLE: Injectable Declaration\nDESCRIPTION: Defines an injectable declaration for ShowOnDirtyErrorStateMatcher using Angular's dependency injection system. This metadata is used by the Angular compiler to generate code for creating and injecting instances of the class.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/core/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nstatic ɵprov: i0.ɵɵInjectableDeclaration<ShowOnDirtyErrorStateMatcher>;\n```\n\n----------------------------------------\n\nTITLE: MatSlider Class Declaration\nDESCRIPTION: This code snippet defines the `MatSlider` class, which is the main component class for the Angular Material slider. It implements several interfaces like `AfterViewInit` and `OnDestroy`, and includes properties for controlling the slider's behavior, such as `disabled`, `discrete`, `min`, `max`, and `step`. It also defines methods for updating the slider's UI and handling user interactions.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/slider/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public\nexport class MatSlider implements AfterViewInit, OnDestroy, _MatSlider {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    _cachedLeft: number;\n    // (undocumented)\n    _cachedWidth: number;\n    _calcTickMarkTransform(index: number): string;\n    // (undocumented)\n    readonly _cdr: ChangeDetectorRef;\n    color: ThemePalette;\n    // (undocumented)\n    readonly _dir: Directionality | null;\n    get disabled(): boolean;\n    set disabled(v: boolean);\n    disableRipple: boolean;\n    get discrete(): boolean;\n    set discrete(v: boolean);\n    displayWith: (value: number) => string;\n    // (undocumented)\n    readonly _elementRef: ElementRef<HTMLElement>;\n    // (undocumented)\n    _endThumbTransform: string;\n    protected endValueIndicatorText: string;\n    _getInput(thumbPosition: _MatThumb): _MatSliderThumb | _MatSliderRangeThumb | undefined;\n    _getThumb(thumbPosition: _MatThumb): _MatSliderVisualThumb;\n    // (undocumented)\n    readonly _globalRippleOptions: RippleGlobalOptions | null;\n    // (undocumented)\n    _hasAnimation: boolean;\n    _input: _MatSliderThumb;\n    // (undocumented)\n    _inputPadding: number;\n    _inputs: QueryList<_MatSliderRangeThumb>;\n    _isCursorOnSliderThumb(event: PointerEvent, rect: DOMRect): boolean;\n    // (undocumented)\n    _isRange: boolean;\n    _isRtl: boolean;\n    _knobRadius: number;\n    get max(): number;\n    set max(v: number);\n    get min(): number;\n    set min(v: number);\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    static ngAcceptInputType_disableRipple: unknown;\n    // (undocumented)\n    static ngAcceptInputType_discrete: unknown;\n    // (undocumented)\n    static ngAcceptInputType_max: unknown;\n    // (undocumented)\n    static ngAcceptInputType_min: unknown;\n    // (undocumented)\n    static ngAcceptInputType_showTickMarks: unknown;\n    // (undocumented)\n    static ngAcceptInputType_step: unknown;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    readonly _ngZone: NgZone;\n    _noopAnimations: boolean;\n    // (undocumented)\n    _onMinMaxOrStepChange(): void;\n    // (undocumented)\n    _onResize(): void;\n    // (undocumented)\n    _onTranslateXChange(source: _MatSliderThumb): void;\n    // (undocumented)\n    _onTranslateXChangeBySideEffect(input1: _MatSliderRangeThumb, input2: _MatSliderRangeThumb): void;\n    // (undocumented)\n    _onValueChange(source: _MatSliderThumb): void;\n    // (undocumented)\n    _rippleRadius: number;\n    _setTrackActiveStyles(styles: {\n        left: string;\n        right: string;\n        transform: string;\n        transformOrigin: string;\n    }): void;\n    // (undocumented)\n    _setTransition(withAnimation: boolean): void;\n    showTickMarks: boolean;\n    // (undocumented)\n    _startThumbTransform: string;\n    protected startValueIndicatorText: string;\n    get step(): number;\n    set step(v: number);\n    _thumbs: QueryList<_MatSliderVisualThumb>;\n    _tickMarks: _MatTickMark[];\n    _tickMarkTrackWidth: number;\n    _trackActive: ElementRef<HTMLElement>;\n    _updateDimensions(): void;\n    _updateThumbUI(source: _MatSliderThumb): void;\n    _updateTickMarkUI(): void;\n    _updateTrackUI(source: _MatSliderThumb): void;\n    _updateValueIndicatorUI(source: _MatSliderThumb): void;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatSlider, \"mat-slider\", [\"matSlider\"], { \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"discrete\": { \"alias\": \"discrete\"; \"required\": false; }; \"showTickMarks\": { \"alias\": \"showTickMarks\"; \"required\": false; }; \"min\": { \"alias\": \"min\"; \"required\": false; }; \"color\": { \"alias\": \"color\"; \"required\": false; }; \"disableRipple\": { \"alias\": \"disableRipple\"; \"required\": false; }; \"max\": { \"alias\": \"max\"; \"required\": false; }; \"step\": { \"alias\": \"step\"; \"required\": false; }; \"displayWith\": { \"alias\": \"displayWith\"; \"required\": false; }; }, {}, [\"_input\", \"_inputs\"], [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatSlider, never>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Card API with TypeScript\nDESCRIPTION: This code snippet defines the complete Angular Material Card API, including the card component, its configuration token, and various child components and directives for structuring card content. It shows component declarations, interfaces, and type definitions used throughout the module.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/card/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport { InjectionToken } from '@angular/core';\n\n// @public\nexport const MAT_CARD_CONFIG: InjectionToken<MatCardConfig>;\n\n// @public\nexport class MatCard {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    appearance: MatCardAppearance;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatCard, \"mat-card\", [\"matCard\"], { \"appearance\": { \"alias\": \"appearance\"; \"required\": false; }; }, {}, never, [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatCard, never>;\n}\n\n// @public\nexport class MatCardActions {\n    align: 'start' | 'end';\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatCardActions, \"mat-card-actions\", [\"matCardActions\"], { \"align\": { \"alias\": \"align\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatCardActions, never>;\n}\n\n// @public (undocumented)\nexport type MatCardAppearance = 'outlined' | 'raised';\n\n// @public\nexport class MatCardAvatar {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatCardAvatar, \"[mat-card-avatar], [matCardAvatar]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatCardAvatar, never>;\n}\n\n// @public\nexport interface MatCardConfig {\n    appearance?: MatCardAppearance;\n}\n\n// @public\nexport class MatCardContent {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatCardContent, \"mat-card-content\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatCardContent, never>;\n}\n\n// @public\nexport class MatCardFooter {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatCardFooter, \"mat-card-footer\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatCardFooter, never>;\n}\n\n// @public\nexport class MatCardHeader {\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatCardHeader, \"mat-card-header\", never, {}, {}, never, [\"[mat-card-avatar], [matCardAvatar]\", \"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\", \"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatCardHeader, never>;\n}\n\n// @public\nexport class MatCardImage {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatCardImage, \"[mat-card-image], [matCardImage]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatCardImage, never>;\n}\n\n// @public\nexport class MatCardLgImage {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatCardLgImage, \"[mat-card-lg-image], [matCardImageLarge]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatCardLgImage, never>;\n}\n\n// @public\nexport class MatCardMdImage {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatCardMdImage, \"[mat-card-md-image], [matCardImageMedium]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatCardMdImage, never>;\n}\n\n// @public (undocumented)\nexport class MatCardModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatCardModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatCardModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatCardModule, never, [typeof MatCommonModule, typeof MatCard, typeof MatCardActions, typeof MatCardAvatar, typeof MatCardContent, typeof MatCardFooter, typeof MatCardHeader, typeof MatCardImage, typeof MatCardLgImage, typeof MatCardMdImage, typeof MatCardSmImage, typeof MatCardSubtitle, typeof MatCardTitle, typeof MatCardTitleGroup, typeof MatCardXlImage], [typeof MatCard, typeof MatCardActions, typeof MatCardAvatar, typeof MatCardContent, typeof MatCardFooter, typeof MatCardHeader, typeof MatCardImage, typeof MatCardLgImage, typeof MatCardMdImage, typeof MatCardSmImage, typeof MatCardSubtitle, typeof MatCardTitle, typeof MatCardTitleGroup, typeof MatCardXlImage, typeof MatCommonModule]>;\n}\n\n// @public\nexport class MatCardSmImage {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatCardSmImage, \"[mat-card-sm-image], [matCardImageSmall]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatCardSmImage, never>;\n}\n\n// @public\nexport class MatCardSubtitle {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatCardSubtitle, \"mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatCardSubtitle, never>;\n}\n\n// @public\nexport class MatCardTitle {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatCardTitle, \"mat-card-title, [mat-card-title], [matCardTitle]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatCardTitle, never>;\n}\n\n// @public\nexport class MatCardTitleGroup {\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatCardTitleGroup, \"mat-card-title-group\", never, {}, {}, never, [\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\", \"[mat-card-image], [matCardImage],\\n                    [mat-card-sm-image], [matCardImageSmall],\\n                    [mat-card-md-image], [matCardImageMedium],\\n                    [mat-card-lg-image], [matCardImageLarge],\\n                    [mat-card-xl-image], [matCardImageXLarge]\", \"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatCardTitleGroup, never>;\n}\n\n// @public\nexport class MatCardXlImage {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatCardXlImage, \"[mat-card-xl-image], [matCardImageXLarge]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatCardXlImage, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Button Testing Types and Harness\nDESCRIPTION: TypeScript definitions for button testing utilities including button appearance types, harness filters, and the MatButtonHarness class for testing Material buttons. The code includes methods for interacting with buttons and retrieving their properties in test environments.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/button/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { ContentContainerComponentHarness } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport type ButtonAppearance = 'text' | 'filled' | 'elevated' | 'outlined' | 'tonal';\n\n// @public\nexport interface ButtonHarnessFilters extends BaseHarnessFilters {\n    appearance?: ButtonAppearance;\n    disabled?: boolean;\n    text?: string | RegExp;\n    variant?: ButtonVariant;\n}\n\n// @public\nexport type ButtonVariant = 'basic' | 'icon' | 'fab' | 'mini-fab';\n\n// @public\nexport class MatButtonHarness extends ContentContainerComponentHarness {\n    blur(): Promise<void>;\n    click(relativeX: number, relativeY: number): Promise<void>;\n    click(location: 'center'): Promise<void>;\n    click(): Promise<void>;\n    focus(): Promise<void>;\n    getAppearance(): Promise<ButtonAppearance | null>;\n    getText(): Promise<string>;\n    getVariant(): Promise<ButtonVariant>;\n    // (undocumented)\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isFocused(): Promise<boolean>;\n    static with<T extends MatButtonHarness>(this: ComponentHarnessConstructor<T>, options?: ButtonHarnessFilters): HarnessPredicate<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Selection Column Styling for Angular Material Table\nDESCRIPTION: CSS styling to ensure proper overflow behavior for selection column checkboxes.\nSOURCE: https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-21_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.mat-column-select {\n  overflow: initial;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PositionStrategy Interface in TypeScript\nDESCRIPTION: This interface defines the methods that a position strategy for overlays must implement.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface PositionStrategy {\n    apply(): void;\n    attach(overlayRef: OverlayRef): void;\n    detach?(): void;\n    dispose(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TemplatePortal in HTML and TypeScript for Angular Components\nDESCRIPTION: Demonstrates how to create a TemplatePortal from an ng-template, allowing Angular content to be rendered elsewhere.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/portal/portal.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ng-template #templatePortalContent>Some content here</ng-template>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@ViewChild('templatePortalContent') templatePortalContent: TemplateRef<unknown>;\n\nngAfterViewInit() {\n  this.templatePortal = new TemplatePortal(\n    this.templatePortalContent,\n    this._viewContainerRef\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using MapGeocoder in Angular Component\nDESCRIPTION: This example demonstrates how to use the MapGeocoder in an Angular component. It imports the necessary dependencies, injects the MapGeocoder into the constructor, and uses it to geocode an address. The results are then logged to the console.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-geocoder/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// google-maps-demo.component.ts\nimport {Component} from '@angular/core';\nimport {MapGeocoder} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n})\nexport class GoogleMapDemo {\n  constructor(geocoder: MapGeocoder) {\n    geocoder.geocode({\n      address: '1600 Amphitheatre Parkway, Mountain View, CA'\n    }).subscribe(({results}) => {\n      console.log(results);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MatSidenavContainerHarness in Angular\nDESCRIPTION: MatSidenavContainerHarness extends ContentContainerComponentHarness to test sidenav container components. It includes methods to fetch content and sidenavs, alongside static methods to interact with harness predicates.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sidenav/testing/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatSidenavContainerHarness extends ContentContainerComponentHarness<string> {\n    getContent(): Promise<MatSidenavContentHarness>;\n    getSidenavs(filter?: DrawerHarnessFilters): Promise<MatSidenavHarness[]>;\n    static hostSelector: string;\n    static with(options?: DrawerContainerHarnessFilters): HarnessPredicate<MatSidenavContainerHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mat Header Cell Harness in Angular CDK Testing\nDESCRIPTION: The MatHeaderCellHarness class is used to harness header cells in Angular Material tables. It extends _MatCellHarnessBase with methods for selection based on harness filters, implementing a hostSelector.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/table/testing/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatHeaderCellHarness extends _MatCellHarnessBase {\n    static hostSelector: string;\n    static with(options?: CellHarnessFilters): HarnessPredicate<MatHeaderCellHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: Horizontal Virtual Scrolling in Angular CDK\nDESCRIPTION: Example of configuring a virtual-scroll viewport with horizontal orientation. Requires CSS targeting .cdk-virtual-scroll-content-wrapper to ensure items are laid out horizontally.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/scrolling/scrolling.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-virtual-scroll-horizontal) -->\n```\n\n----------------------------------------\n\nTITLE: MatStepContent Component Implementation\nDESCRIPTION: Defines a component MatStepContent that serves as a container for the dynamic content of a step. It allows the use of a template reference for rendering custom content in each step.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/stepper/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatStepContent {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    _template: TemplateRef<any>;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatStepContent, \"ng-template[matStepContent]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatStepContent, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Material Option Module in TypeScript\nDESCRIPTION: Angular module declaration for Material Option component with dependencies and exports.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/core/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatOptionModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatOptionModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatOptionModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatOptionModule, never, [typeof MatRippleModule, typeof MatCommonModule, typeof MatPseudoCheckboxModule, typeof MatOption, typeof MatOptgroup], [typeof MatOption, typeof MatOptgroup]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Selenium WebDriver Testing Classes and Interfaces in TypeScript\nDESCRIPTION: Defines core classes and interfaces for Selenium WebDriver integration with Angular CDK testing. Includes SeleniumWebDriverElement for DOM manipulation, SeleniumWebDriverHarnessEnvironment for test environment setup, and helper utilities for Angular integration.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/testing/selenium-webdriver/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as webdriver from 'selenium-webdriver';\n\n// @public\nexport class SeleniumWebDriverElement implements TestElement {\n    constructor(element: () => webdriver.WebElement, _stabilize: () => Promise<void>);\n    blur(): Promise<void>;\n    clear(): Promise<void>;\n    click(modifiers?: ModifierKeys): Promise<void>;\n    click(location: 'center', modifiers?: ModifierKeys): Promise<void>;\n    click(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;\n    dispatchEvent(name: string, data?: Record<string, EventData>): Promise<void>;\n    // (undocumented)\n    readonly element: () => webdriver.WebElement;\n    focus(): Promise<void>;\n    getAttribute(name: string): Promise<string | null>;\n    getCssValue(property: string): Promise<string>;\n    getDimensions(): Promise<ElementDimensions>;\n    getProperty<T = any>(name: string): Promise<T>;\n    hasClass(name: string): Promise<boolean>;\n    hover(): Promise<void>;\n    isFocused(): Promise<boolean>;\n    matchesSelector(selector: string): Promise<boolean>;\n    mouseAway(): Promise<void>;\n    rightClick(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;\n    selectOptions(...optionIndexes: number[]): Promise<void>;\n    sendKeys(...keys: (string | TestKey)[]): Promise<void>;\n    sendKeys(modifiers: ModifierKeys, ...keys: (string | TestKey)[]): Promise<void>;\n    setContenteditableValue(value: string): Promise<void>;\n    setInputValue(newValue: string): Promise<void>;\n    text(options?: TextOptions): Promise<string>;\n}\n\n// @public\nexport class SeleniumWebDriverHarnessEnvironment extends HarnessEnvironment<() => webdriver.WebElement> {\n    protected constructor(rawRootElement: () => webdriver.WebElement, options?: WebDriverHarnessEnvironmentOptions);\n    protected createEnvironment(element: () => webdriver.WebElement): HarnessEnvironment<() => webdriver.WebElement>;\n    protected createTestElement(element: () => webdriver.WebElement): TestElement;\n    forceStabilize(): Promise<void>;\n    protected getAllRawElements(selector: string): Promise<(() => webdriver.WebElement)[]>;\n    protected getDocumentRoot(): () => webdriver.WebElement;\n    static getNativeElement(el: TestElement): webdriver.WebElement;\n    static loader(driver: webdriver.WebDriver, options?: WebDriverHarnessEnvironmentOptions): HarnessLoader;\n    waitForTasksOutsideAngular(): Promise<void>;\n}\n\n// @public\nexport function waitForAngularReady(wd: webdriver.WebDriver): Promise<void>;\n\n// @public\nexport interface WebDriverHarnessEnvironmentOptions {\n    queryFn: (selector: string, root: () => webdriver.WebElement) => Promise<webdriver.WebElement[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MapMarkerClusterer in Angular with Google Maps\nDESCRIPTION: This snippet defines the 'MapMarkerClusterer' class which manages a cluster of markers on a Google Map. It utilizes lifecycle hooks for initialization, changes, and destruction, while providing observable events for cluster interactions.\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MapMarkerClusterer implements OnInit, OnChanges, OnDestroy {\n    algorithm: Algorithm_2;\n    readonly clusterClick: EventEmitter<Cluster>;\n    readonly clusteringbegin: Observable<void>;\n    readonly clusteringend: Observable<void>;\n    markerClusterer?: MarkerClusterer;\n    readonly markerClustererInitialized: EventEmitter<MarkerClusterer>;\n    _markers: QueryList<MarkerDirective>;\n    ngOnChanges(changes: SimpleChanges): Promise<void>;\n    ngOnDestroy(): void;\n    ngOnInit(): Promise<void>;\n    renderer: Renderer;\n    static ɵcmp: i0.ɵɵComponentDeclaration<MapMarkerClusterer, \"map-marker-clusterer\", [\"mapMarkerClusterer\"], { \"renderer\": { \"alias\": \"renderer\"; \"required\": false; }; \"algorithm\": { \"alias\": \"algorithm\"; \"required\": false; }; }, { \"clusteringbegin\": \"clusteringbegin\"; \"clusteringend\": \"clusteringend\"; \"clusterClick\": \"clusterClick\"; \"markerClustererInitialized\": \"markerClustererInitialized\"; }, [\"_markers\"], [\"*\"], true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MapMarkerClusterer, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DomPortal in HTML and TypeScript for Angular Components\nDESCRIPTION: Shows how to create a DomPortal from a native DOM element, allowing arbitrary DOM content to be rendered elsewhere.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/portal/portal.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div #domPortalContent>Some content here</div>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@ViewChild('domPortalContent') domPortalContent: ElementRef<HTMLElement>;\nngAfterViewInit() {\n  this.domPortal = new DomPortal(this.domPortalContent);\n}\n```\n\n----------------------------------------\n\nTITLE: Linear Stepper Implementation with Completion Control\nDESCRIPTION: Example of using the stepper in linear mode where users must complete the current step before proceeding to the next, with editable and completion properties.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-stepper-using-the-cdk-stepper.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<app-custom-stepper linear>\n  <cdk-step editable=\"false\" [completed]=\"completed\">\n    <input type=\"text\" name=\"a\" value=\"Cannot proceed to next step\" />\n    <button (click)=\"completeStep()\">Complete step</button>\n  </cdk-step>\n  <cdk-step editable=\"false\">\n    <input type=\"text\" name=\"b\" value=\"b\" />\n  </cdk-step>\n</app-custom-stepper>\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Static Chip in Angular Material\nDESCRIPTION: Example of creating a disabled static chip using mat-chip component.\nSOURCE: https://github.com/angular/components/blob/main/src/material/chips/chips.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mat-chip disabled>Orange</mat-chip>\n```\n\n----------------------------------------\n\nTITLE: Angular Google Maps Type Definitions and Core Components\nDESCRIPTION: Contains TypeScript reference declarations, imports, and interface definitions for the @angular/google-maps library. Includes core functionality for maps, markers, and clustering.\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"google.maps\" />\n\nimport { AfterContentInit } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { QueryList } from '@angular/core';\nimport { SimpleChanges } from '@angular/core';\n\n// @public (undocumented)\ninterface Algorithm_2 {\n    calculate: ({ markers, map }: AlgorithmInput) => AlgorithmOutput;\n}\nexport { Algorithm_2 as Algorithm }\n\n// @public (undocumented)\nexport interface AlgorithmInput {\n    map: google.maps.Map;\n    mapCanvasProjection: google.maps.MapCanvasProjection;\n    markers: Marker[];\n}\n\n// @public (undocumented)\nexport interface AlgorithmOptions {\n    // (undocumented)\n    maxZoom?: number;\n}\n\n// @public (undocumented)\nexport interface AlgorithmOutput {\n    changed?: boolean;\n    clusters: Cluster[];\n}\n\n// @public\nexport type AriaLabelFn = (text: string) => string;\n\n// @public\nexport type Calculator = (markers: google.maps.Marker[], clusterIconStylesCount: number) => ClusterIconInfo;\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Divider Testing Harness in TypeScript\nDESCRIPTION: Defines the testing harness for Material Divider component, including filters interface and harness class with methods for checking orientation and inset status. The harness extends ComponentHarness and provides methods to interact with Material Divider components during testing.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/divider/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public (undocumented)\nexport interface DividerHarnessFilters extends BaseHarnessFilters {\n}\n\n// @public\nexport class MatDividerHarness extends ComponentHarness {\n    // (undocumented)\n    getOrientation(): Promise<'horizontal' | 'vertical'>;\n    // (undocumented)\n    static hostSelector: string;\n    // (undocumented)\n    isInset(): Promise<boolean>;\n    // (undocumented)\n    static with(options?: DividerHarnessFilters): HarnessPredicate<MatDividerHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatCalendarUserEvent Interface in TypeScript\nDESCRIPTION: Defines an interface for calendar user events that include both the original DOM event and the value associated with the interaction. This is used for tracking user interactions with the calendar.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MatCalendarUserEvent<D> {\n    // (undocumented)\n    event: Event;\n    // (undocumented)\n    value: D;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Moment Date Adapter with UTC\nDESCRIPTION: Demonstrates how to configure the MomentDateAdapter to use UTC timezone when parsing dates.\nSOURCE: https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nbootstrapApplication(MyApp, {\n  providers: [provideMomentDateAdapter(undefined, {useUtc: true})]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing OverlayRef Class in TypeScript\nDESCRIPTION: This class represents an overlay instance and provides methods for attaching, detaching, and managing the overlay.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class OverlayRef implements PortalOutlet {\n    constructor(_portalOutlet: PortalOutlet, _host: HTMLElement, _pane: HTMLElement, _config: ImmutableObject<OverlayConfig>, _ngZone: NgZone, _keyboardDispatcher: OverlayKeyboardDispatcher, _document: Document, _location: Location_2, _outsideClickDispatcher: OverlayOutsideClickDispatcher, _animationsDisabled: boolean | undefined, _injector: EnvironmentInjector, _renderer: Renderer2);\n    addPanelClass(classes: string | string[]): void;\n    // (undocumented)\n    attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    // (undocumented)\n    attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n    // (undocumented)\n    attach(portal: any): any;\n    attachments(): Observable<void>;\n    backdropClick(): Observable<MouseEvent>;\n    get backdropElement(): HTMLElement | null;\n    detach(): any;\n    detachBackdrop(): void;\n    detachments(): Observable<void>;\n    dispose(): void;\n    getConfig(): OverlayConfig;\n    getDirection(): Direction;\n    hasAttached(): boolean;\n    get hostElement(): HTMLElement;\n    keydownEvents(): Observable<KeyboardEvent>;\n    readonly _keydownEvents: Subject<KeyboardEvent>;\n    outsidePointerEvents(): Observable<MouseEvent>;\n    readonly _outsidePointerEvents: Subject<MouseEvent>;\n    get overlayElement(): HTMLElement;\n    removePanelClass(classes: string | string[]): void;\n    setDirection(dir: Direction | Directionality): void;\n    updatePosition(): void;\n    updatePositionStrategy(strategy: PositionStrategy): void;\n    updateScrollStrategy(strategy: ScrollStrategy): void;\n    updateSize(sizeConfig: OverlaySizeConfig): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Component Harness with Element Locators\nDESCRIPTION: Demonstrates implementation of a component harness with methods to locate and interact with DOM elements.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyPopupHarness extends ComponentHarness {\n  static hostSelector = 'my-popup';\n\n  /** Gets the trigger element */\n  getTriggerElement = this.locatorFor('button');\n\n  /** Gets the content element. */\n  getContentElement = this.locatorForOptional('.my-popup-content');\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Theme with High Contrast Media Query\nDESCRIPTION: Example showing CSS theme variables with high contrast support using media queries. High contrast color values are applied when the user prefers more contrast.\nSOURCE: https://github.com/angular/components/blob/main/src/material/schematics/ng-generate/theme-color/README.md#2025-04-21_snippet_6\n\nLANGUAGE: css\nCODE:\n```\nhtml {\n  /* COLOR SYSTEM VARIABLES */\n  color-scheme: light;\n\n  /* Primary palette variables */\n  --mat-sys-primary: light-dark(#984061, #ffb0c8);\n  --mat-sys-on-primary: light-dark(#ffffff, #5e1133);\n  ...\n\n  @media (prefers-contrast: more) {\n    /* Primary palette variables */\n    --mat-sys-primary: light-dark(#580b2f, #ffebef);\n    --mat-sys-on-primary: light-dark(#ffffff, #000000);\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MatTabGroupBaseHeader Interface Definition in TypeScript\nDESCRIPTION: Interface definition for the base header used in Material tab components. Defines methods for aligning ink bar, updating pagination, and handling focus index.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MatTabGroupBaseHeader {\n    // (undocumented)\n    _alignInkBarToSelectedTab(): void;\n    // (undocumented)\n    focusIndex: number;\n    // (undocumented)\n    updatePagination(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing System Tokens with Theme Overrides in Angular Material\nDESCRIPTION: This snippet demonstrates how to use the 'mat.theme-overrides' mixin to customize specific system-level theme tokens in an Angular Material application.\nSOURCE: https://github.com/angular/components/blob/main/guides/theming.md#2025-04-21_snippet_11\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\nhtml {\n  color-scheme: light dark;\n  @include mat.theme((\n    color: mat.$violet-palette,\n    typography: Roboto,\n    density: 0\n  ));\n\n  .example-orange-primary-container {\n    @include mat.theme-overrides((\n      primary-container: #84ffff\n    ));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatNativeOptionHarness Class\nDESCRIPTION: This class extends ComponentHarness and provides methods for interacting with MatNativeOption components in tests. It includes methods for getting the index and text of the option, as well as checking if the option is disabled or selected.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/input/testing/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport class MatNativeOptionHarness extends ComponentHarness {\n    getIndex(): Promise<number>;\n    getText(): Promise<string>;\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isSelected(): Promise<boolean>;\n    static with(options?: NativeOptionHarnessFilters): HarnessPredicate<MatNativeOptionHarness>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Sidenav Width Styling\nDESCRIPTION: CSS styling to set explicit width for sidenav component.\nSOURCE: https://github.com/angular/components/blob/main/src/material/sidenav/sidenav.md#2025-04-21_snippet_6\n\nLANGUAGE: css\nCODE:\n```\nmat-sidenav {\n  width: 200px;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ListOptionHarnessFilters Interface\nDESCRIPTION: This interface extends BaseListItemHarnessFilters and defines filter options specific to ListOptionHarness. It adds a `selected` property to filter list options based on their selected state, enabling more precise targeting during testing.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport interface ListOptionHarnessFilters extends BaseListItemHarnessFilters {\n    // (undocumented)\n    selected?: boolean;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing MatSidenavHarness in Angular\nDESCRIPTION: Defined as a subclass of MatDrawerHarnessBase, MatSidenavHarness provides an API to interact with sidenav components in tests, including a method to check if the sidenav is fixed in the viewport.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sidenav/testing/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatSidenavHarness extends MatDrawerHarnessBase {\n    static hostSelector: string;\n    isFixedInViewport(): Promise<boolean>;\n    static with(options?: DrawerHarnessFilters): HarnessPredicate<MatSidenavHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the MatToolbar Class\nDESCRIPTION: This code defines the `MatToolbar` class, which is the main component for creating toolbars. It includes properties like `color` and methods like `ngAfterViewInit`, along with Angular metadata for component declaration and factory.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/toolbar/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport class MatToolbar implements AfterViewInit {\n    constructor(...args: unknown[]);\n    color?: string | null;\n    // (undocumented)\n    protected _elementRef: ElementRef<any>;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    _toolbarRows: QueryList<MatToolbarRow>;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatToolbar, \"mat-toolbar\", [\"matToolbar\"], { \"color\": { \"alias\": \"color\"; \"required\": false; }; }, {}, [\"_toolbarRows\"], [\"*\", \"mat-toolbar-row\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatToolbar, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: MatStepperIcon Class Implementation\nDESCRIPTION: Defines a MatStepperIcon class that encapsulates the properties of each step icon in the stepper, allowing for template customization of icons based on the state of each step.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/stepper/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatStepperIcon {\n    constructor(...args: unknown[]);\n    name: StepState;\n    // (undocumented)\n    templateRef: TemplateRef<MatStepperIconContext>;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatStepperIcon, \"ng-template[matStepperIcon]\", never, { \"name\": { \"alias\": \"matStepperIcon\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatStepperIcon, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Material Menu Imports\nDESCRIPTION: Core imports required for the Angular Material Menu component system, including dependencies from @angular/core, @angular/cdk/bidi, and other Angular CDK modules.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/menu/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterContentInit } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { Direction } from '@angular/cdk/bidi';\nimport { EventEmitter } from '@angular/core';\nimport { FocusableOption } from '@angular/cdk/a11y';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/overlay';\nimport * as i5 from '@angular/cdk/scrolling';\nimport { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { QueryList } from '@angular/core';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\nimport { Subject } from 'rxjs';\nimport { TemplateRef } from '@angular/core';\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces and Classes for Angular Material Button Toggle Testing\nDESCRIPTION: This code snippet defines interfaces for button toggle harness filters and classes for button toggle group and individual button toggle harnesses. These harnesses provide methods to interact with and query the state of button toggles in Angular Material components during testing.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/button-toggle/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport interface ButtonToggleGroupHarnessFilters extends BaseHarnessFilters {\n    disabled?: boolean;\n}\n\n// @public\nexport interface ButtonToggleHarnessFilters extends BaseHarnessFilters {\n    checked?: boolean;\n    disabled?: boolean;\n    name?: string | RegExp;\n    text?: string | RegExp;\n}\n\n// @public\nexport class MatButtonToggleGroupHarness extends ComponentHarness {\n    getAppearance(): Promise<MatButtonToggleAppearance>;\n    getToggles(filter?: ButtonToggleHarnessFilters): Promise<MatButtonToggleHarness[]>;\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isVertical(): Promise<boolean>;\n    static with(options?: ButtonToggleGroupHarnessFilters): HarnessPredicate<MatButtonToggleGroupHarness>;\n}\n\n// @public\nexport class MatButtonToggleHarness extends ComponentHarness {\n    blur(): Promise<void>;\n    check(): Promise<void>;\n    focus(): Promise<void>;\n    getAppearance(): Promise<MatButtonToggleAppearance>;\n    getAriaLabel(): Promise<string | null>;\n    getAriaLabelledby(): Promise<string | null>;\n    getName(): Promise<string | null>;\n    getText(): Promise<string>;\n    static hostSelector: string;\n    isChecked(): Promise<boolean>;\n    isDisabled(): Promise<boolean>;\n    isFocused(): Promise<boolean>;\n    toggle(): Promise<void>;\n    uncheck(): Promise<void>;\n    static with(options?: ButtonToggleHarnessFilters): HarnessPredicate<MatButtonToggleHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of Custom Stepper in App Component\nDESCRIPTION: Example of using the custom stepper component in an application by wrapping content within cdk-step tags to create multiple steps.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-stepper-using-the-cdk-stepper.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<app-custom-stepper>\n  <cdk-step><p>This is any content of \"Step 1\"</p></cdk-step>\n  <cdk-step><p>This is any content of \"Step 2\"</p></cdk-step>\n</app-custom-stepper>\n```\n\n----------------------------------------\n\nTITLE: Applying Padding to Flat Tree Nodes\nDESCRIPTION: Demonstrates how to use the matTreeNodePadding directive to display level information for flat tree nodes. This is useful for visually representing the hierarchy in flat trees.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tree/tree.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<mat-tree-node *matNodeDef=\"let node\" matNodePadding>\n  {{node.value}}\n</mat-tree-node>\n```\n\n----------------------------------------\n\nTITLE: Scoping Custom Theme Styles in Angular Material\nDESCRIPTION: Shows how to customize component styles within a specific scope using Sass mixins. Demonstrates creating a special theme section with custom palette colors.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\n.my-special-section {\n $special-primary: mat.m2-define-palette(mat.$m2-orange-palette);\n $special-accent: mat.m2-define-palette(mat.$m2-brown-palette);\n $special-theme: mat.m2-define-dark-theme((\n   color: (primary: $special-primary, accent: $special-accent),\n ));\n\n @include mat.button-color($special-theme);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Position Validation Functions in TypeScript for Angular\nDESCRIPTION: These functions validate horizontal and vertical positions for connected overlays. They ensure that the provided values are valid for the respective positioning.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos): void;\n\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos): void;\n```\n\n----------------------------------------\n\nTITLE: MatTabNav Class Definition in TypeScript\nDESCRIPTION: Implementation of a tab navigation bar component that extends MatPaginatedTabHeader. It manages tab links, handles ink bar positioning, and provides options for customization like colors and animations.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatTabNav extends MatPaginatedTabHeader implements AfterContentInit, AfterViewInit {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    get animationDuration(): string;\n    set animationDuration(value: string | number);\n    get backgroundColor(): ThemePalette;\n    set backgroundColor(value: ThemePalette);\n    color: ThemePalette;\n    disableRipple: boolean;\n    get fitInkBarToContent(): boolean;\n    set fitInkBarToContent(value: boolean);\n    // (undocumented)\n    _fitInkBarToContent: BehaviorSubject<boolean>;\n    // (undocumented)\n    _getRole(): string | null;\n    // (undocumented)\n    _inkBar: MatInkBar;\n    _items: QueryList<MatTabLink>;\n    // (undocumented)\n    protected _itemSelected(): void;\n    // (undocumented)\n    _nextPaginator: ElementRef<HTMLElement>;\n    // (undocumented)\n    static ngAcceptInputType_disableRipple: unknown;\n    // (undocumented)\n    static ngAcceptInputType_fitInkBarToContent: unknown;\n    // (undocumented)\n    static ngAcceptInputType_stretchTabs: unknown;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    _previousPaginator: ElementRef<HTMLElement>;\n    stretchTabs: boolean;\n    // (undocumented)\n    _tabList: ElementRef;\n    // (undocumented)\n    _tabListContainer: ElementRef;\n    // (undocumented)\n    _tabListInner: ElementRef;\n    tabPanel?: MatTabNavPanel;\n    updateActiveLink(): void;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatTabNav, \"[mat-tab-nav-bar]\", [\"matTabNavBar\", \"matTabNav\"], { \"fitInkBarToContent\": { \"alias\": \"fitInkBarToContent\"; \"required\": false; }; \"stretchTabs\": { \"alias\": \"mat-stretch-tabs\"; \"required\": false; }; \"animationDuration\": { \"alias\": \"animationDuration\"; \"required\": false; }; \"backgroundColor\": { \"alias\": \"backgroundColor\"; \"required\": false; }; \"disableRipple\": { \"alias\": \"disableRipple\"; \"required\": false; }; \"color\": { \"alias\": \"color\"; \"required\": false; }; \"tabPanel\": { \"alias\": \"tabPanel\"; \"required\": false; }; }, {}, [\"_items\"], [\"*\"], true, never>;\n    // (undocumented)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Constants and Types in Angular TypeScript\nDESCRIPTION: Declares a set of constants and type definitions for menu operations in Angular. Includes a deprecated constant MENU_PANEL_TOP_PADDING and various type aliases like MenuCloseReason and MenuPositionX/Y, which define possible menu behaviors.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/menu/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const MENU_PANEL_TOP_PADDING = 8;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MenuCloseReason = void | 'click' | 'keydown' | 'tab';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MenuPositionX = 'before' | 'after';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MenuPositionY = 'above' | 'below';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const transformMenu: any;\n```\n\n----------------------------------------\n\nTITLE: Defining MatSelectHarness Class in TypeScript\nDESCRIPTION: This code defines the `MatSelectHarness` class, which extends `MatFormFieldControlHarness` and provides methods for interacting with a `mat-select` component in testing environments. It includes methods for blurring, clicking options, closing, focusing, retrieving option groups and options, getting the value text, checking disabled state, emptiness, focus, multiple selection, open state, required state, and validity. It also includes methods for opening the select and a static `with` method for creating a `HarnessPredicate`.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/select/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { ContentContainerComponentHarness } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport class MatSelectHarness extends MatFormFieldControlHarness {\n    blur(): Promise<void>;\n    clickOptions(filter?: OptionHarnessFilters): Promise<void>;\n    close(): Promise<void>;\n    focus(): Promise<void>;\n    getOptionGroups(filter?: Omit<OptgroupHarnessFilters, 'ancestor'>): Promise<MatOptgroupHarness[]>;\n    getOptions(filter?: Omit<OptionHarnessFilters, 'ancestor'>): Promise<MatOptionHarness[]>;\n    getValueText(): Promise<string>;\n    // (undocumented)\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isEmpty(): Promise<boolean>;\n    isFocused(): Promise<boolean>;\n    isMultiple(): Promise<boolean>;\n    isOpen(): Promise<boolean>;\n    isRequired(): Promise<boolean>;\n    isValid(): Promise<boolean>;\n    open(): Promise<void>;\n    static with<T extends MatSelectHarness>(this: ComponentHarnessConstructor<T>, options?: SelectHarnessFilters): HarnessPredicate<T>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining MatSlideToggle Component in Angular\nDESCRIPTION: Main component for creating a slide toggle with extensive configuration options for accessibility, state management, and interaction\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/slide-toggle/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatSlideToggle implements OnDestroy, AfterContentInit, OnChanges, ControlValueAccessor, Validator {\n  constructor(...args: unknown[]);\n  ariaDescribedby: string;\n  ariaLabel: string | null;\n  ariaLabelledby: string | null;\n  get buttonId(): string;\n  readonly change: EventEmitter<MatSlideToggleChange>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Date Formats\nDESCRIPTION: Shows how to provide custom date formats with the Native Date Adapter.\nSOURCE: https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nbootstrapApplication(MyApp, {\n  providers: [provideNativeDateAdapter(MY_NATIVE_DATE_FORMATS)],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining MapBaseLayer Component in TypeScript\nDESCRIPTION: This snippet defines the MapBaseLayer component, which serves as a base class for various map layers with common initialization and destruction logic.\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MapBaseLayer implements OnInit, OnDestroy {\n    constructor(...args: unknown[]);\n    protected _initializeObject(): void;\n    protected readonly _map: GoogleMap;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    protected readonly _ngZone: NgZone;\n    protected _setMap(): void;\n    protected _unsetMap(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Template Caching with cdkVirtualFor in Angular\nDESCRIPTION: Demonstrates how to configure the template cache size for cdkVirtualFor to improve rendering performance. The cache size can be adjusted via the templateCacheSize property.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/scrolling/scrolling.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-virtual-scroll-template-cache) -->\n```\n\n----------------------------------------\n\nTITLE: Setting Row Height Ratio in mat-grid-list\nDESCRIPTION: Example of setting row height using column-width to row-height ratio notation\nSOURCE: https://github.com/angular/components/blob/main/src/material/grid-list/grid-list.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n4:3\n```\n\n----------------------------------------\n\nTITLE: Defining Test Element Interface\nDESCRIPTION: Defines interface for interacting with DOM elements in tests, including methods for clicking, typing, and checking properties\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/testing/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TestElement {\n    blur(): Promise<void>;\n    clear(): Promise<void>;\n    click(modifiers?: ModifierKeys): Promise<void>;\n    click(location: 'center', modifiers?: ModifierKeys): Promise<void>;\n    click(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;\n    dispatchEvent(name: string, data?: Record<string, EventData>): Promise<void>;\n    focus(): Promise<void>;\n    getAttribute(name: string): Promise<string | null>;\n    getCssValue(property: string): Promise<string>;\n    getDimensions(): Promise<ElementDimensions>;\n    getProperty<T = any>(name: string): Promise<T>;\n    hasClass(name: string): Promise<boolean>;\n    hover(): Promise<void>;\n    isFocused(): Promise<boolean>;\n    matchesSelector(selector: string): Promise<boolean>;\n    mouseAway(): Promise<void>;\n    rightClick(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;\n    selectOptions(...optionIndexes: number[]): Promise<void>;\n    sendKeys(...keys: (string | TestKey)[]): Promise<void>;\n    sendKeys(modifiers: ModifierKeys, ...keys: (string | TestKey)[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatActionListItemHarness Class\nDESCRIPTION: This class extends MatListItemHarnessBase and represents a harness for testing Angular Material action list items. It provides methods for interacting with action list items, such as focusing, blurring, and clicking, along with a filter for locating specific items.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport class MatActionListItemHarness extends MatListItemHarnessBase {\n    blur(): Promise<void>;\n    click(): Promise<void>;\n    focus(): Promise<void>;\n    static hostSelector: string;\n    isFocused(): Promise<boolean>;\n    static with<T extends MatActionListItemHarness>(this: ComponentHarnessConstructor<T>, options?: ActionListItemHarnessFilters): HarnessPredicate<T>;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Runtime Global Ripple Options Service\nDESCRIPTION: Implementation of a service for managing global ripple options that can be updated at runtime.\nSOURCE: https://github.com/angular/components/blob/main/src/material/core/ripple/ripple.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable({providedIn: 'root'})\nexport class AppGlobalRippleOptions implements RippleGlobalOptions {\n  /** Whether ripples should be disabled globally. */\n  disabled: boolean = false;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@NgModule({\n  providers: [\n    {provide: MAT_RIPPLE_GLOBAL_OPTIONS, useExisting: AppGlobalRippleOptions},\n  ]\n})\nexport class MyModule {...}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Component(...)\nexport class MyComponent {\n  constructor(private _appRippleOptions: AppGlobalRippleOptions) {}\n\n  disableRipples() {\n    this._appRippleOptions.disabled = true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CDK Tree Dependencies in TypeScript\nDESCRIPTION: This snippet shows the import statements for various Angular Core and RxJS dependencies used in the CDK Tree implementation.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/tree/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterContentChecked } from '@angular/core';\nimport { AfterContentInit } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { IterableDiffer } from '@angular/core';\nimport { IterableDiffers } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { QueryList } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { TemplateRef } from '@angular/core';\nimport { TrackByFunction } from '@angular/core';\nimport { ViewContainerRef } from '@angular/core';\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Directive for MatSelectTrigger\nDESCRIPTION: This snippet declares an Angular directive for MatSelectTrigger using TypeScript with Angular's Ivy Compiler API. It specifies the directive configuration using ɵɵDirectiveDeclaration, which is key for customizing the behavior of the MatSelect triggers within Angular applications.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/select/index.api.md#2025-04-21_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatSelectTrigger { static ɵdir: i0.ɵɵDirectiveDeclaration<MatSelectTrigger, \"mat-select-trigger\", never, {}, {}, never, never, true, never>; static ɵfac: i0.ɵɵFactoryDeclaration<MatSelectTrigger, never>; }\n```\n\n----------------------------------------\n\nTITLE: FormFieldControlHarness Type Definition\nDESCRIPTION: Defines a type alias for the different form field control harnesses that can be used with MatFormFieldHarness. It includes MatInputHarness, MatSelectHarness, MatDatepickerInputHarness, and MatDateRangeInputHarness.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/form-field/testing/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\\nexport type FormFieldControlHarness = MatInputHarness | MatSelectHarness | MatDatepickerInputHarness | MatDateRangeInputHarness;\"\n```\n\n----------------------------------------\n\nTITLE: Defining TimepickerToggleHarnessFilters Interface in Angular\nDESCRIPTION: This snippet declares the TimepickerToggleHarnessFilters interface that allows testing filters for the MatTimepicker toggle button, extending from the base harness filters to maintain consistency in test implementations.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/timepicker/testing/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TimepickerToggleHarnessFilters extends BaseHarnessFilters {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IconHarnessFilters Interface in Angular TypeScript\nDESCRIPTION: This snippet defines the IconHarnessFilters interface, extending BaseHarnessFilters. It includes optional properties for filtering icon harnesses by name, namespace, and type. This interface is crucial for testing scenarios where precise harness selection is required. Depends on Angular CDK testing library.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/icon/testing/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface IconHarnessFilters extends BaseHarnessFilters {\n    name?: string | RegExp;\n    namespace?: string | null | RegExp;\n    type?: IconType;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MatTable with Flex Display in Angular\nDESCRIPTION: Example of using MatTable with display: flex styling instead of native HTML table elements. Shows how to define columns for username, age, and title with corresponding header and cell definitions. Uses mat-table, mat-row, and mat-cell components instead of traditional table elements.\nSOURCE: https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<mat-table [dataSource]=\"dataSource\">\n  <!-- User name Definition -->\n  <ng-container matColumnDef=\"username\">\n    <mat-header-cell *matHeaderCellDef> User name </mat-header-cell>\n    <mat-cell *matCellDef=\"let row\"> {{row.username}} </mat-cell>\n  </ng-container>\n\n  <!-- Age Definition -->\n  <ng-container matColumnDef=\"age\">\n    <mat-header-cell *matHeaderCellDef> Age </mat-header-cell>\n    <mat-cell *matCellDef=\"let row\"> {{row.age}} </mat-cell>\n  </ng-container>\n\n  <!-- Title Definition -->\n  <ng-container matColumnDef=\"title\">\n    <mat-header-cell *matHeaderCellDef> Title </mat-header-cell>\n    <mat-cell *matCellDef=\"let row\"> {{row.title}} </mat-cell>\n  </ng-container>\n\n  <!-- Header and Row Declarations -->\n  <mat-header-row *matHeaderRowDef=\"['username', 'age', 'title']\"></mat-header-row>\n  <mat-row *matRowDef=\"let row; columns: ['username', 'age', 'title']\"></mat-row>\n</mat-table>\n```\n\n----------------------------------------\n\nTITLE: Disabling Options in Angular CDK Listbox\nDESCRIPTION: Shows how to disable individual options using cdkOptionDisabled and the entire listbox using cdkListboxDisabled.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/listbox/listbox.md#2025-04-21_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<ul cdkListbox [cdkListboxDisabled]=\"isListboxDisabled\">\n  <li cdkOption value=\"1\">Option 1</li>\n  <li cdkOption value=\"2\" [cdkOptionDisabled]=\"isOption2Disabled\">Option 2</li>\n  <li cdkOption value=\"3\">Option 3</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Including Typography Hierarchy in SCSS\nDESCRIPTION: This SCSS snippet shows how to include the typography hierarchy using the default configuration in Angular Material. It applies the typography styles to the application.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_19\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\n// Use the default configuration.\n$my-typography: mat.m2-define-typography-config();\n@include mat.typography-hierarchy($my-typography);\n```\n\n----------------------------------------\n\nTITLE: Reading Typography Values in Angular Material (SCSS)\nDESCRIPTION: Shows how to access typography settings from an Angular Material theme using the get-theme-typography function to retrieve font properties for different typography levels.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_11\n\nLANGUAGE: scss\nCODE:\n```\n$theme: mat.m2-define-dark-theme(...);\n\nbody {\n  font: mat.get-theme-typography($theme, body-1);\n  letter-spacing: mat.get-theme-typography($theme, body-1, letter-spacing);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StickyUpdate Interface for Position Change Tracking\nDESCRIPTION: Interface used to communicate sticky positioning updates including elements, offsets, and sizes.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StickyUpdate {\n    // (undocumented)\n    elements?: readonly (HTMLElement[] | undefined)[];\n    // (undocumented)\n    offsets?: StickyOffset[];\n    // (undocumented)\n    sizes: StickySize[];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Locale for Angular Material Timepicker\nDESCRIPTION: Demonstrates how to configure the locale for the timepicker using MAT_DATE_LOCALE token in the application bootstrap\nSOURCE: https://github.com/angular/components/blob/main/src/material/timepicker/timepicker.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbootstapApplication(MyApp, {\n  providers: [{provide: MAT_DATE_LOCALE, useValue: 'en-GB'}],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining MapAdvancedMarker Component in TypeScript\nDESCRIPTION: This snippet defines the MapAdvancedMarker component, which represents an advanced marker on the map with various properties and event emitters.\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MapAdvancedMarker implements OnInit, OnChanges, OnDestroy, MapAnchorPoint, MarkerDirective {\n    constructor(...args: unknown[]);\n    advancedMarker: google.maps.marker.AdvancedMarkerElement;\n    set content(content: Node | google.maps.marker.PinElement | null);\n    getAnchor(): google.maps.marker.AdvancedMarkerElement;\n    set gmpDraggable(draggable: boolean);\n    readonly mapClick: Observable<google.maps.MapMouseEvent>;\n    readonly mapDblclick: Observable<google.maps.MapMouseEvent>;\n    readonly mapDrag: Observable<google.maps.MapMouseEvent>;\n    readonly mapDragend: Observable<google.maps.MapMouseEvent>;\n    readonly mapDragstart: Observable<google.maps.MapMouseEvent>;\n    readonly mapMouseout: Observable<google.maps.MapMouseEvent>;\n    readonly mapMouseover: Observable<google.maps.MapMouseEvent>;\n    readonly mapMouseup: Observable<google.maps.MapMouseEvent>;\n    readonly mapRightclick: Observable<google.maps.MapMouseEvent>;\n    readonly markerInitialized: EventEmitter<google.maps.marker.AdvancedMarkerElement>;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    set options(options: google.maps.marker.AdvancedMarkerElementOptions);\n    set position(position: google.maps.LatLngLiteral | google.maps.LatLng | google.maps.LatLngAltitude | google.maps.LatLngAltitudeLiteral);\n    _resolveMarker(): Promise<google.maps.marker.AdvancedMarkerElement>;\n    set title(title: string);\n    set zIndex(zIndex: number);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Date-FNS Adapter for Timepicker\nDESCRIPTION: Shows how to set up the date-fns adapter for the timepicker component using provideDateFnsAdapter\nSOURCE: https://github.com/angular/components/blob/main/src/material/timepicker/timepicker.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {provideDateFnsAdapter} from '@angular/material-date-fns-adapter';\n\nbootstrapApplication(MyApp, {\n  providers: [provideDateFnsAdapter()]\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Row Height in mat-grid-list\nDESCRIPTION: Examples of setting fixed row heights using different unit measurements (px, em, rem)\nSOURCE: https://github.com/angular/components/blob/main/src/material/grid-list/grid-list.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n100px, 5em, 250\n```\n\n----------------------------------------\n\nTITLE: Defining MatRadioButtonHarness for Angular Testing\nDESCRIPTION: This snippet defines the MatRadioButtonHarness class, which provides methods to interact with and query radio button elements in Angular tests. Key functionalities include checking inputs, obtaining values, and manipulating focus states. Dependencies include the Angular CDK Testing module.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/radio/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as _angular_cdk_testing from '@angular/cdk/testing';\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport class MatRadioButtonHarness extends ComponentHarness {\n    blur(): Promise<void>;\n    check(): Promise<void>;\n    // (undocumented)\n    protected _clickLabel: _angular_cdk_testing.AsyncFactoryFn<_angular_cdk_testing.TestElement>;\n    focus(): Promise<void>;\n    getId(): Promise<string | null>;\n    getLabelText(): Promise<string>;\n    getName(): Promise<string | null>;\n    getValue(): Promise<string | null>;\n    static hostSelector: string;\n    isChecked(): Promise<boolean>;\n    isDisabled(): Promise<boolean>;\n    isFocused(): Promise<boolean>;\n    isRequired(): Promise<boolean>;\n    // (undocumented)\n    protected _textLabel: _angular_cdk_testing.AsyncFactoryFn<_angular_cdk_testing.TestElement>;\n    static with<T extends MatRadioButtonHarness>(this: ComponentHarnessConstructor<T>, options?: RadioButtonHarnessFilters): HarnessPredicate<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Component Harnesses for Specific DOM Sections with getChildLoader\nDESCRIPTION: This snippet shows how to create a child loader for a specific section of the DOM using the getChildLoader method, which helps target components within a specific container rather than the entire component.\nSOURCE: https://github.com/angular/components/blob/main/guides/using-component-harnesses.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nit('should work', async () => {\n  const footerLoader = await loader.getChildLoader('.footer');\n  const footerButton = await footerLoader.getHarness(MatButtonHarness);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining RenderRow Interface in Angular CDK Tables\nDESCRIPTION: Interface that defines the structure for rendering a row in an Angular CDK table. It contains the data object, index position, and row definition reference.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RenderRow<T> {\n    // (undocumented)\n    data: T;\n    // (undocumented)\n    dataIndex: number;\n    // (undocumented)\n    rowDef: CdkRowDef<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MapMarkerClusterer Component in TypeScript\nDESCRIPTION: Angular component implementation showing marker clustering functionality with click handling to add markers. Includes component configuration and necessary imports.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-marker-clusterer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// google-map-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapMarkerClusterer, MapAdvancedMarker} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap, MapMarkerClusterer, MapAdvancedMarker],\n})\nexport class GoogleMapDemo {\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n  markerPositions: google.maps.LatLngLiteral[] = [];\n\n  addMarker(event: google.maps.MapMouseEvent) {\n    this.markerPositions.push(event.latLng.toJSON());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StepperButtonHarnessFilters Interface - TypeScript\nDESCRIPTION: The StepperButtonHarnessFilters interface extends BaseHarnessFilters, offering additional filtering options for stepper button harnesses in Angular Material. It allows for filtering by button text, which can be a string or regex. Dependencies include the Angular CDK testing module.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/stepper/testing/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface StepperButtonHarnessFilters extends BaseHarnessFilters {\n    text?: string | RegExp;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Portal Abstract Class\nDESCRIPTION: This snippet defines the Portal abstract class, which serves as a base for all portal implementations.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/portal/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport abstract class Portal<T> {\n    attach(host: PortalOutlet): T;\n    detach(): void;\n    get isAttached(): boolean;\n    setAttachedHost(host: PortalOutlet | null): void;\n}\n```\n\n----------------------------------------\n\nTITLE: MatRadioModule Declaration\nDESCRIPTION: Defines the MatRadioModule, which encapsulates all radio button related components and dependencies in Angular Material. This module is necessary to import for using radio buttons in an Angular application, requiring the standard Angular core and CDK modules.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/radio/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport class MatRadioModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatRadioModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatRadioModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatRadioModule, never, [typeof MatCommonModule, typeof MatRippleModule, typeof MatRadioGroup, typeof MatRadioButton], [typeof MatCommonModule, typeof MatRadioGroup, typeof MatRadioButton]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BaseTreeControl Class in TypeScript\nDESCRIPTION: This snippet defines an abstract BaseTreeControl class that implements the TreeControl interface. It provides basic tree control functionality for expanding, collapsing, and tracking tree nodes.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/tree/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport abstract class BaseTreeControl<T, K = T> implements TreeControl<T, K> {\n    collapse(dataNode: T): void;\n    collapseAll(): void;\n    collapseDescendants(dataNode: T): void;\n    dataNodes: T[];\n    expand(dataNode: T): void;\n    abstract expandAll(): void;\n    expandDescendants(dataNode: T): void;\n    expansionModel: SelectionModel<K>;\n    getChildren: (dataNode: T) => Observable<T[]> | T[] | undefined | null;\n    abstract getDescendants(dataNode: T): T[];\n    getLevel: (dataNode: T) => number;\n    isExpandable: (dataNode: T) => boolean;\n    isExpanded(dataNode: T): boolean;\n    toggle(dataNode: T): void;\n    toggleDescendants(dataNode: T): void;\n    trackBy?: (dataNode: T) => K;\n    protected _trackByValue(value: T | K): K;\n}\n```\n\n----------------------------------------\n\nTITLE: Abstract Class for Mat Cell Harness Base\nDESCRIPTION: The _MatCellHarnessBase class is an abstract class that extends ContentContainerComponentHarness. It provides methods to get cell column names and text, and defines a static method _getCellPredicate for generating specific cell predicates.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/table/testing/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport abstract class _MatCellHarnessBase extends ContentContainerComponentHarness {\n    protected static _getCellPredicate<T extends MatCellHarness>(type: ComponentHarnessConstructor<T>, options: CellHarnessFilters): HarnessPredicate<T>;\n    getColumnName(): Promise<string>;\n    getText(): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Date Adapter in Angular\nDESCRIPTION: Demonstrates how to bootstrap an Angular application with the native date adapter provider for the datepicker component.\nSOURCE: https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nbootstrapApplication(MyApp, {\n  providers: [provideNativeDateAdapter()]\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Mat-Paginator Component Example\nDESCRIPTION: A placeholder for a paginator component example. This appears to reference an example named 'paginator-overview' that would demonstrate the basic implementation of the component.\nSOURCE: https://github.com/angular/components/blob/main/src/material/paginator/paginator.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(paginator-overview) -->\n```\n\n----------------------------------------\n\nTITLE: MatTabChangeEvent Class Definition\nDESCRIPTION: This code defines the `MatTabChangeEvent` class, which is emitted when the selected tab changes within a `MatTabGroup`. It contains the index and `MatTab` instance of the newly selected tab.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport class MatTabChangeEvent {\n    index: number;\n    tab: MatTab;\n}\"\n```\n\n----------------------------------------\n\nTITLE: MatSliderModule Class Declaration\nDESCRIPTION: This code defines the `MatSliderModule` class, which is the Angular module for the Material Slider component.  It imports and exports the necessary components and modules for using the slider in an Angular application, including `MatCommonModule`, `MatRippleModule`, `MatSlider`, `MatSliderThumb`, and `MatSliderRangeThumb`.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/slider/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public (undocumented)\nexport class MatSliderModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatSliderModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatSliderModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatSliderModule, never, [typeof MatCommonModule, typeof MatRippleModule, typeof MatSlider, typeof MatSliderThumb, typeof MatSliderRangeThumb, typeof MatSliderVisualThumb], [typeof MatSlider, typeof MatSliderThumb, typeof MatSliderRangeThumb]>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Menu Testing Components and Interfaces\nDESCRIPTION: Defines the testing harnesses and interfaces for Angular Material menu components. Includes classes for menu and menu item testing, along with their respective filter interfaces. The code provides methods for interacting with menus and menu items in tests.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/menu/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { ContentContainerComponentHarness } from '@angular/cdk/testing';\nimport { HarnessLoader } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport class MatMenuHarness extends ContentContainerComponentHarness<string> {\n    blur(): Promise<void>;\n    clickItem(itemFilter: Omit<MenuItemHarnessFilters, 'ancestor'>, ...subItemFilters: Omit<MenuItemHarnessFilters, 'ancestor'>[]): Promise<void>;\n    close(): Promise<void>;\n    focus(): Promise<void>;\n    getItems(filters?: Omit<MenuItemHarnessFilters, 'ancestor'>): Promise<MatMenuItemHarness[]>;\n    // (undocumented)\n    protected getRootHarnessLoader(): Promise<HarnessLoader>;\n    getTriggerText(): Promise<string>;\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isFocused(): Promise<boolean>;\n    isOpen(): Promise<boolean>;\n    open(): Promise<void>;\n    static with<T extends MatMenuHarness>(this: ComponentHarnessConstructor<T>, options?: MenuHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public (undocumented)\nexport class MatMenuItemHarness extends ContentContainerComponentHarness<string> {\n    blur(): Promise<void>;\n    click(): Promise<void>;\n    focus(): Promise<void>;\n    getSubmenu(): Promise<MatMenuHarness | null>;\n    getText(): Promise<string>;\n    hasSubmenu(): Promise<boolean>;\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isFocused(): Promise<boolean>;\n    static with<T extends MatMenuItemHarness>(this: ComponentHarnessConstructor<T>, options?: MenuItemHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport interface MenuHarnessFilters extends BaseHarnessFilters {\n    triggerText?: string | RegExp;\n}\n\n// @public\nexport interface MenuItemHarnessFilters extends BaseHarnessFilters {\n    hasSubmenu?: boolean;\n    text?: string | RegExp;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Dropdown Positions in TypeScript for Angular\nDESCRIPTION: These constants define standard connected positions for dropdown menus in Angular applications. They specify the positioning for adjacent and below placements.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const STANDARD_DROPDOWN_ADJACENT_POSITIONS: ConnectedPosition[];\n\nexport const STANDARD_DROPDOWN_BELOW_POSITIONS: ConnectedPosition[];\n```\n\n----------------------------------------\n\nTITLE: Implementing MatChipGrid component for form integration\nDESCRIPTION: A component that manages a set of chips as a form control. It implements ControlValueAccessor for integration with Angular Forms and handles keyboard navigation, focus management, and form field validation.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/chips/index.api.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatChipGrid extends MatChipSet implements AfterContentInit, AfterViewInit, ControlValueAccessor, DoCheck, MatFormFieldControl<any>, OnDestroy {\n    constructor(...args: unknown[]);\n    protected _allowFocusEscape(): void;\n    _blur(): void;\n    readonly change: EventEmitter<MatChipGridChange>;\n    get chipBlurChanges(): Observable<MatChipEvent>;\n    protected _chipInput: MatChipTextControl;\n    // (undocumented)\n    _chips: QueryList<MatChipRow>;\n    readonly controlType: string;\n    // (undocumented)\n    protected _defaultRole: string;\n    get describedByIds(): string[];\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    get empty(): boolean;\n    get errorState(): boolean;\n    set errorState(value: boolean);\n    get errorStateMatcher(): ErrorStateMatcher;\n    set errorStateMatcher(value: ErrorStateMatcher);\n    focus(): void;\n    get focused(): boolean;\n    // (undocumented)\n    _focusLastChip(): void;\n    _handleKeydown(event: KeyboardEvent): void;\n    get id(): string;\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    static ngAcceptInputType_required: unknown;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngControl: NgControl;\n    // (undocumented)\n    ngDoCheck(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    _onChange: (value: any) => void;\n    onContainerClick(event: MouseEvent): void;\n    _onTouched: () => void;\n    get placeholder(): string;\n    set placeholder(value: string);\n    // (undocumented)\n    protected _placeholder: string;\n    registerInput(inputElement: MatChipTextControl): void;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: () => void): void;\n    get required(): boolean;\n    set required(value: boolean);\n    // (undocumented)\n    protected _required: boolean | undefined;\n    setDescribedByIds(ids: string[]): void;\n    setDisabledState(isDisabled: boolean): void;\n    get shouldLabelFloat(): boolean;\n    readonly stateChanges: Subject<void>;\n    updateErrorState(): void;\n    get value(): any;\n    set value(value: any);\n    // (undocumented)\n    protected _value: any[];\n    readonly valueChange: EventEmitter<any>;\n    writeValue(value: any): void;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatChipGrid, \"mat-chip-grid\", never, { \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"placeholder\": { \"alias\": \"placeholder\"; \"required\": false; }; \"required\": { \"alias\": \"required\"; \"required\": false; }; \"value\": { \"alias\": \"value\"; \"required\": false; }; \"errorStateMatcher\": { \"alias\": \"errorStateMatcher\"; \"required\": false; }; }, { \"change\": \"change\"; \"valueChange\": \"valueChange\"; }, [\"_chips\"], [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatChipGrid, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GoogleMap Component in Angular HTML Template\nDESCRIPTION: This snippet demonstrates the HTML template for the GoogleMapDemo component. It shows how to use the google-map element, set its properties, and bind event handlers.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/google-map/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- google-maps-demo.component.html -->\n<google-map\n  height=\"400px\"\n  width=\"750px\"\n  [center]=\"center\"\n  [zoom]=\"zoom\"\n  (mapClick)=\"moveMap($event)\"\n  (mapMousemove)=\"move($event)\" />\n\n<div>Latitude: {{display?.lat}}</div>\n<div>Longitude: {{display?.lng}}</div>\n```\n\n----------------------------------------\n\nTITLE: Building HTML Template for Custom Stepper\nDESCRIPTION: HTML template for the custom stepper component that displays the current step number, projects the content from each CdkStep, and provides navigation controls with next/previous buttons and step indicators.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-stepper-using-the-cdk-stepper.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<section class=\"container\">\n  <header><h2>Step {{selectedIndex + 1}}/{{steps.length}}</h2></header>\n\n  <div [style.display]=\"selected ? 'block' : 'none'\">\n    <!-- Content from the CdkStep is projected here -->\n    <ng-container [ngTemplateOutlet]=\"selected.content\"></ng-container>\n  </div>\n\n  <footer class=\"step-navigation-bar\">\n    <button class=\"nav-button\" cdkStepperPrevious>&larr;</button>\n    @for (step of steps; track step) {\n      <button class=\"step\" [class.active]=\"selectedIndex === $index\" (click)=\"onClick(i)\">\n        Step {{i + 1}}\n      </button>\n    }\n    <button class=\"nav-button\" cdkStepperNext>&rarr;</button>\n  </footer>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Implementing MatDrawerHarness in Angular\nDESCRIPTION: This code snippet defines MatDrawerHarness, a class that extends MatDrawerHarnessBase to manage drawer elements specifically. It provides a static method to create a harness predicate based on drawer-specific filters.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sidenav/testing/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatDrawerHarness extends MatDrawerHarnessBase {\n    static hostSelector: string;\n    static with(options?: DrawerHarnessFilters): HarnessPredicate<MatDrawerHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Density for Compact Layout\nDESCRIPTION: Theme configuration that uses a negative density value (-2) to create a more compact layout with less whitespace, while maintaining the violet color palette and Roboto typography.\nSOURCE: https://github.com/angular/components/blob/main/guides/theming.md#2025-04-21_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\nhtml {\n  @include mat.theme((\n    color: mat.$violet-palette,\n    typography: Roboto,\n    density: -2,\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto Change Detection Status Handler in Angular\nDESCRIPTION: Describes the interface and usage of AutoChangeDetectionStatus handler, which includes isDisabled flag to control automatic change detection and an optional onDetectChangesNow callback for triggering immediate change detection.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AutoChangeDetectionStatus {\n  isDisabled: boolean;\n  onDetectChangesNow?: () => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GoogleMap Component Properties in TypeScript\nDESCRIPTION: This snippet defines various properties and methods for the GoogleMap component, including map options, event observables, and Angular-specific metadata.\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nset options(options: google.maps.MapOptions);\nget overlayMapTypes(): google.maps.MVCArray<google.maps.MapType | null>;\npanBy(x: number, y: number): void;\npanTo(latLng: google.maps.LatLng | google.maps.LatLngLiteral): void;\npanToBounds(latLngBounds: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral, padding?: number | google.maps.Padding): void;\nreadonly projectionChanged: Observable<void>;\n_resolveMap(): Promise<google.maps.Map>;\nreadonly tilesloaded: Observable<void>;\nreadonly tiltChanged: Observable<void>;\nwidth: string | number | null;\nset zoom(zoom: number);\nreadonly zoomChanged: Observable<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining Material Select Configuration Token\nDESCRIPTION: Injection token for configuring global select component settings and behavior in Angular Material\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/select/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const MAT_SELECT_CONFIG: InjectionToken<MatSelectConfig>\n```\n\n----------------------------------------\n\nTITLE: Accessing Dialog Data in Template in HTML\nDESCRIPTION: Shows how to access data passed to a dialog in a TemplateRef-based dialog content.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/dialog/dialog.md#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<ng-template let-data>\n  Hello, {{data.name}}\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for Sort Direction\nDESCRIPTION: Defines `SortDirection`, a type accepting string literals 'asc', 'desc', or an empty string, to represent sorting order in material components.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sort/index.api.md#2025-04-21_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type SortDirection = 'asc' | 'desc' | '';\n```\n\n----------------------------------------\n\nTITLE: Defining SELECTION_LIST Token\nDESCRIPTION: Defines the SELECTION_LIST constant as an Angular InjectionToken used to provide and inject selection list services across the application.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const SELECTION_LIST: InjectionToken<SelectionList>;\n```\n\n----------------------------------------\n\nTITLE: Importing Angular Material Form Field Components and Interfaces\nDESCRIPTION: This snippet shows the imports required for using Angular Material form field components and related interfaces. It includes imports from Angular core, forms, and RxJS.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/form-field/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbstractControlDirective } from '@angular/forms';\nimport { AfterContentChecked } from '@angular/core';\nimport { AfterContentInit } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { ElementRef } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/observers';\nimport { InjectionToken } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nimport { QueryList } from '@angular/core';\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types and Utility Functions for Angular CDK Coercion\nDESCRIPTION: Defines a collection of utility functions and types for coercing values in Angular applications. Includes functions for converting values to arrays, booleans, numbers, CSS pixel values, and DOM elements. Also defines types for boolean and number inputs.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/coercion/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ElementRef } from '@angular/core';\n\nexport type BooleanInput = string | boolean | null | undefined;\n\nexport function coerceArray<T>(value: T | T[]): T[];\nexport function coerceArray<T>(value: T | readonly T[]): readonly T[];\n\nexport function coerceBooleanProperty(value: any): boolean;\n\nexport function coerceCssPixelValue(value: any): string;\n\nexport function coerceElement<T>(elementOrRef: ElementRef<T> | T): T;\n\nexport function coerceNumberProperty(value: any): number;\nexport function coerceNumberProperty<D>(value: any, fallback: D): number | D;\n\nexport function coerceStringArray(value: any, separator?: string | RegExp): string[];\n\nexport function _isNumberValue(value: any): boolean;\n\nexport type NumberInput = string | number | null | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining ActionListItemHarnessFilters Interface\nDESCRIPTION: This interface extends BaseListItemHarnessFilters and defines filter options specifically for ActionListItemHarness. By extending BaseListItemHarnessFilters, it incorporates common list item filtering capabilities, making it easier to locate specific action list items.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport interface ActionListItemHarnessFilters extends BaseListItemHarnessFilters {\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Moment Date Adapter with Strict Parsing\nDESCRIPTION: Shows how to enable strict date parsing mode for the MomentDateAdapter.\nSOURCE: https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nbootstrapApplication(MyApp, {\n  providers: [provideMomentDateAdapter(undefined, {strict: true})]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing MapCircle Component in Angular HTML Template\nDESCRIPTION: This snippet shows how to use the MapCircle component in an Angular HTML template. It demonstrates the usage of the google-map element with height, width, center, and zoom properties, as well as the map-circle element with center and radius properties.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-circle/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- google-maps-demo.component.html -->\n<google-map height=\"400px\" width=\"750px\" [center]=\"center\" [zoom]=\"zoom\">\n  <map-circle [center]=\"circleCenter\" [radius]=\"radius\" />\n</google-map>\n```\n\n----------------------------------------\n\nTITLE: Injection Token for MatTabLabel\nDESCRIPTION: This code defines an injection token for the `MatTabLabel` directive, enabling it to be injected into other parts of the application that need to access or modify the tab label.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const MAT_TAB_LABEL: InjectionToken<MatTabLabel>;\"\n```\n\n----------------------------------------\n\nTITLE: MatInkBar Class Definition\nDESCRIPTION: This code defines the `MatInkBar` class, responsible for visually highlighting the currently active tab. It aligns itself to the selected tab and can be hidden when necessary. It takes a QueryList of `MatInkBarItem` as a constructor parameter.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport class MatInkBar {\n    constructor(_items: QueryList<MatInkBarItem>);\n    alignToElement(element: HTMLElement): void;\n    hide(): void;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Declaring MatTabNavPanel Component in Angular\nDESCRIPTION: This snippet defines the MatTabNavPanel component class with its properties and Angular compiler metadata. It includes an optional active tab ID and a required panel ID.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatTabNavPanel {\n    _activeTabId?: string;\n    id: string;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatTabNavPanel, \"mat-tab-nav-panel\", [\"matTabNavPanel\"], { \"id\": { \"alias\": \"id\"; \"required\": false; }; }, {}, never, [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTabNavPanel, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Step Completion Handler in App Component\nDESCRIPTION: TypeScript implementation for the app component that manages the completion state of steps in the linear stepper mode.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-stepper-using-the-cdk-stepper.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AppComponent {\n  completed = false;\n\n  completeStep(): void {\n    this.completed = true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatTabsConfig Interface for Angular Material Tabs\nDESCRIPTION: This interface specifies configuration options for Material tabs, including alignment, animation duration, pagination settings, and content preservation options.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface MatTabsConfig {\n    alignTabs?: 'start' | 'center' | 'end';\n    animationDuration?: string;\n    contentTabIndex?: number;\n    disablePagination?: boolean;\n    dynamicHeight?: boolean;\n    fitInkBarToContent?: boolean;\n    preserveContent?: boolean;\n    stretchTabs?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FocusableOption Interface in TypeScript\nDESCRIPTION: Extends ListKeyManagerOption interface to include a focus method for use with FocusKeyManager.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/a11y.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FocusableOption extends ListKeyManagerOption {\n  focus(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Lists with Simple Links in Angular Material\nDESCRIPTION: Example of a navigation list using mat-nav-list with anchor tags and Angular's for loop directive.\nSOURCE: https://github.com/angular/components/blob/main/src/material/list/list.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<mat-nav-list>\n  @for (link of list; track link) {\n    <a mat-list-item href=\"...\" [activated]=\"link.isActive\">{{ link }}</a>\n  }\n</mat-nav-list>\n```\n\n----------------------------------------\n\nTITLE: Angular Module Declaration for MatSortModule\nDESCRIPTION: The `MatSortModule` class declares the Angular module containing all necessary declarations and imports for using `MatSort` and `MatSortHeader` components, providing dependency injection configurations.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sort/index.api.md#2025-04-21_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatSortModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatSortModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatSortModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatSortModule, never, [typeof MatCommonModule, typeof MatSort, typeof MatSortHeader], [typeof MatSort, typeof MatSortHeader]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Value Binding in Angular CDK Listbox\nDESCRIPTION: Shows how to bind the listbox value using [cdkListboxValue] for input and (cdkListboxValueChange) for output. The value is an array of selected option values.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/listbox/listbox.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<ul cdkListbox [cdkListboxValue]=\"selectedValues\" (cdkListboxValueChange)=\"onSelectionChange($event)\">\n  <li cdkOption value=\"1\">Option 1</li>\n  <li cdkOption value=\"2\">Option 2</li>\n  <li cdkOption value=\"3\">Option 3</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining NavListItemHarnessFilters Interface\nDESCRIPTION: This interface extends BaseListItemHarnessFilters and defines filter options specifically for NavListItemHarness. It includes properties for filtering based on the activated state and href of the navigation list item, in addition to the base list item filters.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport interface NavListItemHarnessFilters extends BaseListItemHarnessFilters {\n    // (undocumented)\n    activated?: boolean;\n    // (undocumented)\n    href?: string | RegExp | null;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing MapGroundOverlay Component in TypeScript\nDESCRIPTION: TypeScript component that configures a Google Map with a ground overlay. Defines the map center, zoom level, and image bounds for displaying an Angular logo overlay on the map.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-ground-overlay/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// google-maps-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapGroundOverlay} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap, MapGroundOverlay],\n})\nexport class GoogleMapDemo {\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n\n  imageUrl = 'https://angular.io/assets/images/logos/angular/angular.svg';\n  imageBounds: google.maps.LatLngBoundsLiteral = {\n    east: 10,\n    north: 10,\n    south: -10,\n    west: -10,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring MatTabsModule in Angular Material\nDESCRIPTION: This snippet defines the MatTabsModule class with Angular compiler metadata. It includes declarations for various tab-related components and imports/exports the MatCommonModule.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatTabsModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTabsModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatTabsModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatTabsModule, never, [typeof MatCommonModule, typeof MatTabContent, typeof MatTabLabel, typeof MatTab, typeof MatTabGroup, typeof MatTabNav, typeof MatTabNavPanel, typeof MatTabLink], [typeof MatCommonModule, typeof MatTabContent, typeof MatTabLabel, typeof MatTab, typeof MatTabGroup, typeof MatTabNav, typeof MatTabNavPanel, typeof MatTabLink]>;\n}\n```\n\n----------------------------------------\n\nTITLE: MatStepperModule Class Implementation\nDESCRIPTION: Defines the MatStepperModule which encompasses all stepper related components and services. It imports necessary Angular material modules and declares essential components making them available for use in other modules.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/stepper/index.api.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatStepperModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatStepperModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatStepperModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatStepperModule, never, [typeof MatCommonModule, typeof i3.PortalModule, typeof i3$1.CdkStepperModule, typeof MatIconModule, typeof MatRippleModule, typeof MatStep, typeof MatStepLabel, typeof MatStepper, typeof MatStepperNext, typeof MatStepperPrevious, typeof MatStepHeader, typeof MatStepperIcon, typeof MatStepContent], [typeof MatCommonModule, typeof MatStep, typeof MatStepLabel, typeof MatStepper, typeof MatStepperNext, typeof MatStepperPrevious, typeof MatStepHeader, typeof MatStepperIcon, typeof MatStepContent]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Typography Styles in HTML\nDESCRIPTION: This HTML snippet demonstrates the usage of typography styles emitted by the typography-hierarchy mixin in an Angular Material application. It shows how different elements are styled based on their classes and context.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <!-- This header will *not* be styled because it is outside `.mat-typography` -->\n  <h1>Top header</h1>\n\n  <!-- This paragraph will be styled as `body-1` via the `.mat-body` CSS class applied -->\n  <p class=\"mat-body\">Introductory text</p>\n\n  <div class=\"mat-typography\">\n    <!-- This header will be styled as `title` because it is inside `.mat-typography` -->\n    <h2>Inner header</h2>\n\n    <!-- This paragraph will be styled as `body-1` because it is inside `.mat-typography` -->\n    <p>Some inner text</p>\n  </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Defining MatDatepickerCancel Class in TypeScript\nDESCRIPTION: Implements a directive for the cancel button in datepickers. When clicked, it closes the datepicker without applying the selection.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatDatepickerCancel {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    _datepicker: MatDatepickerBase<MatDatepickerControl<any>, unknown, {}>;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatDatepickerCancel, \"[matDatepickerCancel], [matDateRangePickerCancel]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDatepickerCancel, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MatMonthView Class in Angular\nDESCRIPTION: Class implementation for month view in Angular Material datepicker. Handles date selection, keyboard navigation, and date range functionality. Includes calendar body interactions and accessibility features.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatMonthView<D> implements AfterContentInit, OnChanges, OnDestroy {\n    constructor(...args: unknown[]);\n    get activeDate(): D;\n    set activeDate(value: D);\n    readonly activeDateChange: EventEmitter<D>;\n    activeDrag: MatCalendarUserEvent<D> | null;\n    readonly _changeDetectorRef: ChangeDetectorRef;\n    comparisonEnd: D | null;\n    _comparisonRangeEnd: number | null;\n    _comparisonRangeStart: number | null;\n    comparisonStart: D | null;\n    _dateAdapter: DateAdapter<D, any>;\n    dateClass: MatCalendarCellClassFunction<D>;\n    dateFilter: (date: D) => boolean;\n    _dateSelected(event: MatCalendarUserEvent<number>): void;\n    readonly dragEnded: EventEmitter<MatCalendarUserEvent<DateRange<D> | null>>;\n    protected _dragEnded(event: MatCalendarUserEvent<D | null>): void;\n    readonly dragStarted: EventEmitter<MatCalendarUserEvent<D>>;\n    endDateAccessibleName: string | null;\n    _firstWeekOffset: number;\n    // ... additional methods and properties ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FullscreenOverlayContainer Class in TypeScript\nDESCRIPTION: This class extends OverlayContainer to provide fullscreen overlay functionality. It handles creation and management of the fullscreen container element.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    protected _createContainer(): void;\n    getFullscreenElement(): Element;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<FullscreenOverlayContainer, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<FullscreenOverlayContainer>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Date Formats with Native Date Adapter in Angular\nDESCRIPTION: This snippet demonstrates how to bootstrap an Angular application with a custom MAT_DATE_FORMATS configuration using the Native Date Adapter. It uses the provideNativeDateAdapter function to set up the date adapter with custom formats.\nSOURCE: https://github.com/angular/components/blob/main/src/material/timepicker/timepicker.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbootstrapApplication(MyApp, {\n  providers: [provideNativeDateAdapter(MY_NATIVE_DATE_FORMATS)],\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating MapKmlLayer in Angular HTML Template\nDESCRIPTION: This HTML snippet demonstrates how to use the google-map component with a map-kml-layer child component. It sets the map's height, width, center, and zoom, and binds the KML URL to the layer.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-kml-layer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- google-maps-demo.component.html -->\n<google-map height=\"400px\" width=\"750px\" [center]=\"center\" [zoom]=\"zoom\">\n  <map-kml-layer [url]=\"kmlUrl\" />\n</google-map>\n```\n\n----------------------------------------\n\nTITLE: _MatInkBarPositioner Interface\nDESCRIPTION: This code defines the `_MatInkBarPositioner` interface, which represents a function that calculates the position (left and width) of the ink bar. The function takes an HTMLElement and returns an object with left and width properties as strings.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport interface _MatInkBarPositioner {\n    // (undocumented)\n    (element: HTMLElement): {\n        left: string;\n        width: string;\n    };\n}\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Angular Expansion Panel\nDESCRIPTION: Demonstrates how to disable an expansion panel using the disabled attribute, preventing user interaction.\nSOURCE: https://github.com/angular/components/blob/main/src/material/expansion/expansion.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<mat-expansion-panel [disabled]=\"isDisabled\">\n  <mat-expansion-panel-header>\n    This is the expansion title\n  </mat-expansion-panel-header>\n  <p>This is the primary content of the panel.</p>\n</mat-expansion-panel>\n```\n\n----------------------------------------\n\nTITLE: Defining Angular CDK Accordion API Types and Components\nDESCRIPTION: Declares the core types and components for the CDK Accordion module including CdkAccordion directive, CdkAccordionItem directive, and CdkAccordionModule. Includes dependency imports, public classes with their methods and properties, and Angular dependency injection tokens.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/accordion/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { SimpleChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n// @public\nexport const CDK_ACCORDION: InjectionToken<CdkAccordion>;\n\n// @public\nexport class CdkAccordion implements OnDestroy, OnChanges {\n    closeAll(): void;\n    readonly id: string;\n    multi: boolean;\n    // (undocumented)\n    static ngAcceptInputType_multi: unknown;\n    // (undocumented)\n    ngOnChanges(changes: SimpleChanges): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    openAll(): void;\n    readonly _openCloseAllActions: Subject<boolean>;\n    readonly _stateChanges: Subject<SimpleChanges>;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkAccordion, \"cdk-accordion, [cdkAccordion]\", [\"cdkAccordion\"], { \"multi\": { \"alias\": \"multi\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkAccordion, never>;\n}\n\n// @public\nexport class CdkAccordionItem implements OnInit, OnDestroy {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    accordion: CdkAccordion;\n    close(): void;\n    readonly closed: EventEmitter<void>;\n    readonly destroyed: EventEmitter<void>;\n    disabled: boolean;\n    get expanded(): boolean;\n    set expanded(expanded: boolean);\n    readonly expandedChange: EventEmitter<boolean>;\n    // (undocumented)\n    protected _expansionDispatcher: UniqueSelectionDispatcher;\n    readonly id: string;\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    static ngAcceptInputType_expanded: unknown;\n    ngOnDestroy(): void;\n    // (undocumented)\n    ngOnInit(): void;\n    open(): void;\n    readonly opened: EventEmitter<void>;\n    toggle(): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkAccordionItem, \"cdk-accordion-item, [cdkAccordionItem]\", [\"cdkAccordionItem\"], { \"expanded\": { \"alias\": \"expanded\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; }, { \"closed\": \"closed\"; \"opened\": \"opened\"; \"destroyed\": \"destroyed\"; \"expandedChange\": \"expandedChange\"; }, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkAccordionItem, never>;\n}\n\n// @public (undocumented)\nexport class CdkAccordionModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkAccordionModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<CdkAccordionModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<CdkAccordionModule, never, [typeof CdkAccordion, typeof CdkAccordionItem], [typeof CdkAccordion, typeof CdkAccordionItem]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MapPolygon in Angular with Google Maps\nDESCRIPTION: This snippet defines the 'MapPolygon' class which represents a polygon shape on a Google Map. It provides methods for managing the polygon's path and visibility, with lifecycle hooks for initialization and destruction.\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MapPolygon implements OnInit, OnDestroy {\n    constructor(...args: unknown[]);\n    getDraggable(): boolean;\n    getEditable(): boolean;\n    getPath(): google.maps.MVCArray<google.maps.LatLng>;\n    getPaths(): google.maps.MVCArray<google.maps.MVCArray<google.maps.LatLng>>;\n    getVisible(): boolean;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    set options(options: google.maps.PolygonOptions);\n    set paths(paths: google.maps.MVCArray<google.maps.MVCArray<google.maps.LatLng>> | google.maps.MVCArray<google.maps.LatLng> | google.maps.LatLng[] | google.maps.LatLngLiteral[]);\n    polygon?: google.maps.Polygon;\n    readonly polygonClick: Observable<google.maps.PolyMouseEvent>;\n    readonly polygonDblclick: Observable<google.maps.PolyMouseEvent>;\n    readonly polygonDrag: Observable<google.maps.MapMouseEvent>;\n    readonly polygonDragend: Observable<google.maps.MapMouseEvent>;\n    readonly polygonDragstart: Observable<google.maps.MapMouseEvent>;\n    readonly polygonInitialized: EventEmitter<google.maps.Polygon>;\n    readonly polygonMousedown: Observable<google.maps.PolyMouseEvent>;\n    readonly polygonMousemove: Observable<google.maps.PolyMouseEvent>;\n    readonly polygonMouseout: Observable<google.maps.PolyMouseEvent>;\n    readonly polygonMouseover: Observable<google.maps.PolyMouseEvent>;\n    readonly polygonMouseup: Observable<google.maps.PolyMouseEvent>;\n    readonly polygonRightclick: Observable<google.maps.PolyMouseEvent>;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MapPolygon, \"map-polygon\", [\"mapPolygon\"], { \"options\": { \"alias\": \"options\"; \"required\": false; }; \"paths\": { \"alias\": \"paths\"; \"required\": false; }; }, { \"polygonClick\": \"polygonClick\"; \"polygonDblclick\": \"polygonDblclick\"; \"polygonDrag\": \"polygonDrag\"; \"polygonDragend\": \"polygonDragend\"; \"polygonDragstart\": \"polygonDragstart\"; \"polygonMousedown\": \"polygonMousedown\"; \"polygonMousemove\": \"polygonMousemove\"; \"polygonMouseout\": \"polygonMouseout\"; \"polygonMouseover\": \"polygonMouseover\"; \"polygonMouseup\": \"polygonMouseup\"; \"polygonRightclick\": \"polygonRightclick\"; \"polygonInitialized\": \"polygonInitialized\"; }, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MapPolygon, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MatChipInput directive for text entry\nDESCRIPTION: A directive that connects an input element to a chip grid, enabling users to add new chips. It handles blur events, key events, and manages the input's enabled state in coordination with the grid.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/chips/index.api.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatChipInput implements MatChipTextControl, OnChanges, OnDestroy {\n    constructor(...args: unknown[]);\n    addOnBlur: boolean;\n    _blur(): void;\n    readonly chipEnd: EventEmitter<MatChipInputEvent>;\n    get chipGrid(): MatChipGrid;\n    set chipGrid(value: MatChipGrid);\n    // (undocumented)\n    protected _chipGrid: MatChipGrid;\n    clear(): void;\n    get describedByIds(): string[];\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    disabledInteractive: boolean;\n    // (undocumented)\n    protected _elementRef: ElementRef<HTMLInputElement>;\n    _emitChipEnd(event?: KeyboardEvent): void;\n    get empty(): boolean;\n    focus(): void;\n    // (undocumented)\n    _focus(): void;\n    focused: boolean;\n    protected _getReadonlyAttribute(): string | null;\n    id: string;\n```\n\n----------------------------------------\n\nTITLE: Defining MatChipSelectionChange Class in TypeScript\nDESCRIPTION: Class definition for events emitted when chip selection state changes. Contains references to the chip that changed, whether it's selected, and if the change was triggered by user interaction.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/chips/index.api.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatChipSelectionChange {\n    constructor(\n    source: MatChipOption,\n    selected: boolean,\n    isUserInput?: boolean);\n    isUserInput: boolean;\n    selected: boolean;\n    source: MatChipOption;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Container Click Handler\nDESCRIPTION: Handles click events on the form field container to provide focus management for nested inputs.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-form-field-control.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nonContainerClick(event: MouseEvent) {\n  if ((event.target as Element).tagName.toLowerCase() != 'input') {\n    this._elementRef.nativeElement.querySelector('input').focus();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatChipListboxChange Class in TypeScript\nDESCRIPTION: Class representing change events from a MatChipListbox component. It contains a reference to the source chip listbox and the new selected value(s).\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/chips/index.api.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatChipListboxChange {\n    constructor(\n    source: MatChipListbox,\n    value: any);\n    source: MatChipListbox;\n    value: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatToolbarSection Enum in Angular Testing\nDESCRIPTION: The MatToolbarSection enum defines constants used as selectors for different parts of a Material toolbar, such as ROW, which represents the toolbar row. This enum is crucial for identifying specific sections within a toolbar during testing.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/toolbar/testing/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum MatToolbarSection {\\n    // (undocumented)\\n    ROW = \".mat-toolbar-row\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Dual Start Sidenav Layout\nDESCRIPTION: Example of invalid sidenav layout with two start-positioned sidenavs.\nSOURCE: https://github.com/angular/components/blob/main/src/material/sidenav/sidenav.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<mat-sidenav-container>\n  <mat-sidenav>Start</mat-sidenav>\n  <mat-sidenav position=\"start\">Start 2</mat-sidenav>\n</mat-sidenav-container>\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Material Chips Injection Tokens\nDESCRIPTION: Declaration of various InjectionTokens used in the chips components for dependency injection. These tokens allow components to provide and inject specific functionality in the chips system.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/chips/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const MAT_CHIP: InjectionToken<unknown>;\n\n// @public\nexport const MAT_CHIP_AVATAR: InjectionToken<unknown>;\n\n// @public\nexport const MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR: any;\n\n// @public\nexport const MAT_CHIP_REMOVE: InjectionToken<unknown>;\n\n// @public\nexport const MAT_CHIP_TRAILING_ICON: InjectionToken<unknown>;\n\n// @public\nexport const MAT_CHIPS_DEFAULT_OPTIONS: InjectionToken<MatChipsDefaultOptions>;\n```\n\n----------------------------------------\n\nTITLE: Scrolling Module Definition\nDESCRIPTION: Defines the ScrollingModule that bundles various scrolling-related components and directives. Includes virtual scrolling and scrollable components.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/scrolling/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ScrollingModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<ScrollingModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<ScrollingModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<ScrollingModule, never, [typeof BidiModule, typeof CdkScrollableModule, typeof CdkVirtualScrollViewport, typeof CdkFixedSizeVirtualScroll, typeof CdkVirtualForOf, typeof CdkVirtualScrollableWindow, typeof CdkVirtualScrollableElement], [typeof BidiModule, typeof CdkScrollableModule, typeof CdkFixedSizeVirtualScroll, typeof CdkVirtualForOf, typeof CdkVirtualScrollViewport, typeof CdkVirtualScrollableWindow, typeof CdkVirtualScrollableElement]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Toggle Icon in Angular Expansion Panel Header\nDESCRIPTION: Shows how to hide the default toggle icon in the expansion panel header using the hideToggle property.\nSOURCE: https://github.com/angular/components/blob/main/src/material/expansion/expansion.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<mat-expansion-panel hideToggle>\n  <mat-expansion-panel-header>\n    This is the expansion title\n  </mat-expansion-panel-header>\n  <p>This is the primary content of the panel.</p>\n</mat-expansion-panel>\n```\n\n----------------------------------------\n\nTITLE: Directive Declaration for DataRowOutlet\nDESCRIPTION: Defines the directive declaration for the DataRowOutlet directive. This directive marks the location in the template where data rows should be rendered.  It includes the directive selector and factory declaration.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n    static ɵdir: i0.ɵɵDirectiveDeclaration<DataRowOutlet, \"[rowOutlet]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<DataRowOutlet, never>;\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Functions in TypeScript\nDESCRIPTION: This snippet defines utility functions for error handling and type checking in the context of data sources and selection models.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/collections/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getMultipleValuesInSingleSelectionError(): Error;\nexport function isDataSource(value: any): value is DataSource<any>;\n```\n\n----------------------------------------\n\nTITLE: Defining SelectionChange Interface in TypeScript\nDESCRIPTION: This interface represents a selection change event with added and removed items, and a reference to the source SelectionModel.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/collections/index.api.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SelectionChange<T> {\n    added: T[];\n    removed: T[];\n    source: SelectionModel<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for MatSortDefaultOptions\nDESCRIPTION: Defines optional default properties for sorting headers, such as arrow position and a flag for clearing sort state. This is often injected into services or components to standardize appearance.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sort/index.api.md#2025-04-21_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface MatSortDefaultOptions {\n    arrowPosition?: SortHeaderArrowPosition;\n    disableClear?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatBadgeModule in TypeScript for Angular Material\nDESCRIPTION: Declares the MatBadgeModule which is responsible for providing the MatBadge directive and related dependencies.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/badge/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatBadgeModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatBadgeModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatBadgeModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatBadgeModule, never, [typeof i1.A11yModule, typeof MatCommonModule, typeof MatBadge, typeof _MatBadgeStyleLoader], [typeof MatBadge, typeof MatCommonModule]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Field Autofill CSS with Angular CDK\nDESCRIPTION: SCSS mixin implementation for adding autofill animation hooks to text fields. Required when using autofill monitoring without Angular Material.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/text-field/text-field.md#2025-04-21_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/cdk';\n\n@include cdk.text-field-autofill();\n```\n\n----------------------------------------\n\nTITLE: Rendering MapPolygon in Angular HTML Template\nDESCRIPTION: This HTML snippet shows how to use the google-map component with a map-polygon child component. It sets the map's height, width, center, and zoom, and binds the polygon's paths to the vertices defined in the TypeScript component.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-polygon/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- google-maps-demo.component.html -->\n<google-map height=\"400px\" width=\"750px\" [center]=\"center\" [zoom]=\"zoom\">\n  <map-polygon [paths]=\"vertices\" />\n</google-map>\n```\n\n----------------------------------------\n\nTITLE: Defining Mat Row Harness Columns Text Interface\nDESCRIPTION: The MatRowHarnessColumnsText interface maps column names to their respective string content. Used within Angular testing contexts to manage data access.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/table/testing/index.api.md#2025-04-21_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface MatRowHarnessColumnsText {\n    [columnName: string]: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CDK Table Cell and Column Classes\nDESCRIPTION: This snippet defines classes for table cells and columns, including CdkCell, CdkCellDef, and CdkColumnDef.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class BaseCdkCell {\n    constructor(columnDef: CdkColumnDef, elementRef: ElementRef);\n}\n\nexport class CdkCell extends BaseCdkCell {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkCell, \"cdk-cell, td[cdk-cell]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkCell, never>;\n}\n\nexport class CdkCellDef implements CellDef {\n    constructor(...args: unknown[]);\n    template: TemplateRef<any>;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkCellDef, \"[cdkCellDef]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkCellDef, never>;\n}\n\nexport class CdkColumnDef implements CanStick {\n    constructor(...args: unknown[]);\n    cell: CdkCellDef;\n    _columnCssClassName: string[];\n    cssClassFriendlyName: string;\n    footerCell: CdkFooterCellDef;\n    hasStickyChanged(): boolean;\n    headerCell: CdkHeaderCellDef;\n    get name(): string;\n    set name(name: string);\n    // (undocumented)\n    protected _name: string;\n    // (undocumented)\n    static ngAcceptInputType_sticky: unknown;\n    // (undocumented)\n    static ngAcceptInputType_stickyEnd: unknown;\n    resetStickyChanged(): void;\n    protected _setNameInput(value: string): void;\n    get sticky(): boolean;\n    set sticky(value: boolean);\n    get stickyEnd(): boolean;\n    set stickyEnd(value: boolean);\n    // (undocumented)\n    _stickyEnd: boolean;\n    // (undocumented)\n    _table?: any;\n    protected _updateColumnCssClassName(): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkColumnDef, \"[cdkColumnDef]\", never, { \"name\": { \"alias\": \"cdkColumnDef\"; \"required\": false; }; \"sticky\": { \"alias\": \"sticky\"; \"required\": false; }; \"stickyEnd\": { \"alias\": \"stickyEnd\"; \"required\": false; }; }, {}, [\"cell\", \"headerCell\", \"footerCell\"], never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkColumnDef, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Factory Declaration for Structural Styles Loader\nDESCRIPTION: Defines the factory declaration for the _StructuralStylesLoader. This allows Angular's dependency injection system to create instances of the component. The ɵfac property provides the factory function used for component instantiation.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/core/index.api.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nstatic ɵfac: i0.ɵɵFactoryDeclaration<_StructuralStylesLoader, never>;\n```\n\n----------------------------------------\n\nTITLE: Sort Implementation with Material Table Example Reference\nDESCRIPTION: A reference to an example showcasing how to integrate sorting functionality with Angular Material tables.\nSOURCE: https://github.com/angular/components/blob/main/src/material/sort/sort.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(table-sorting) -->\n```\n\n----------------------------------------\n\nTITLE: Defining MatCalendarCellCssClasses Type in TypeScript\nDESCRIPTION: Defines a type for CSS classes that can be applied to calendar cells. Classes can be provided as a string, array of strings, Set of strings, or an object with string keys.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {\n    [key: string]: any;\n};\n```\n\n----------------------------------------\n\nTITLE: Fixed Size Virtual Scrolling with Buffer Parameters in Angular\nDESCRIPTION: Implementation of FixedSizeVirtualScrollStrategy with buffer parameters (minBufferPx and maxBufferPx) that determine how much extra content is rendered beyond what is visible in the viewport.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/scrolling/scrolling.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-virtual-scroll-fixed-buffer) -->\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoSizeVirtualScrollStrategy with Buffer Properties\nDESCRIPTION: This example shows how to configure the AutoSizeVirtualScrollStrategy using the minBufferPx and maxBufferPx properties. These properties control the amount of content rendered outside the viewport and the incremental rendering as the user scrolls.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk-experimental/scrolling/scrolling.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cdk-virtual-scroll-viewport autosize minBufferPx=\"50\" maxBufferPx=\"100\">\n  ...\n</cdk-virtual-scroll-viewport>\n```\n\n----------------------------------------\n\nTITLE: Declaring Angular Directive for MatSuffix\nDESCRIPTION: This snippet defines an Angular directive for MatSuffix utilizing TypeScript and Angular’s Ivy Compiler API. It configures the directive for application with MatSuffix, MatIconSuffix, and MatTextSuffix, facilitating suffix application in material design forms.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/select/index.api.md#2025-04-21_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatSuffix { _isText: boolean; set _isTextSelector(value: ''); static ɵdir: i0.ɵɵDirectiveDeclaration<MatSuffix, \"[matSuffix], [matIconSuffix], [matTextSuffix]\", never, { \"_isTextSelector\": { \"alias\": \"matTextSuffix\"; \"required\": false; }; }, {}, never, never, true, never>; static ɵfac: i0.ɵɵFactoryDeclaration<MatSuffix, never>; }\n```\n\n----------------------------------------\n\nTITLE: Basic Form Field Usage Example\nDESCRIPTION: Shows basic usage of the custom form control within a mat-form-field.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-form-field-control.md#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<mat-form-field>\n  <example-tel-input></example-tel-input>\n</mat-form-field>\n```\n\n----------------------------------------\n\nTITLE: Implementing MatBottomSheetHarness Class in TypeScript\nDESCRIPTION: Defines a class for testing bottom sheet components. It extends ContentContainerComponentHarness and provides methods for interacting with and querying bottom sheet elements during tests.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/bottom-sheet/testing/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatBottomSheetHarness extends ContentContainerComponentHarness<string> {\n    dismiss(): Promise<void>;\n    getAriaLabel(): Promise<string | null>;\n    // (undocumented)\n    static hostSelector: string;\n    static with(options?: BottomSheetHarnessFilters): HarnessPredicate<MatBottomSheetHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Theme with Light-Dark Function Support\nDESCRIPTION: Example of CSS theme variables using the light-dark() function to support both light and dark themes. Shows how to set color-scheme to automatically toggle between themes.\nSOURCE: https://github.com/angular/components/blob/main/src/material/schematics/ng-generate/theme-color/README.md#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nhtml {\n  /* COLOR SYSTEM VARIABLES */\n  color-scheme: light dark; /* Change to `light dark` to automatically toggle between light and dark themes. */\n\n  /* Primary palette variables */\n  --mat-sys-primary: light-dark(#984061, #ffb0c8);\n  --mat-sys-on-primary: light-dark(#ffffff, #5e1133);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Angular Material Autocomplete Dependencies\nDESCRIPTION: This snippet shows the import statements for various Angular core and CDK dependencies used in the Autocomplete component.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/autocomplete/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { AfterContentInit } from '@angular/core';\nimport { AfterViewChecked } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { FocusableOption } from '@angular/cdk/a11y';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/overlay';\nimport * as i5 from '@angular/cdk/scrolling';\nimport { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { QueryList } from '@angular/core';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\nimport { SimpleChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { TemplateRef } from '@angular/core';\n```\n\n----------------------------------------\n\nTITLE: Slide Toggle Change Event Model\nDESCRIPTION: Represents the change event for a slide toggle, capturing the source component and the new checked state\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/slide-toggle/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatSlideToggleChange {\n  constructor(\n    source: MatSlideToggle,\n    checked: boolean\n  );\n  checked: boolean;\n  source: MatSlideToggle;\n}\n```\n\n----------------------------------------\n\nTITLE: FormFieldHarnessFilters Interface Definition\nDESCRIPTION: Defines the interface for filtering MatFormFieldHarness instances. It extends BaseHarnessFilters and allows filtering based on the floating label text (string or RegExp), the presence of errors, and the validity state of the form field.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/form-field/testing/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\\nexport interface FormFieldHarnessFilters extends BaseHarnessFilters {\\n    floatingLabelText?: string | RegExp;\\n    hasErrors?: boolean;\\n    isValid?: boolean;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining CDK Table Constants\nDESCRIPTION: This snippet defines constants used in the CDK Table implementation, including the row template and table template.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const CDK_ROW_TEMPLATE = \"<ng-container cdkCellOutlet></ng-container>\";\n\nexport const CDK_TABLE: InjectionToken<any>;\n\nexport const CDK_TABLE_TEMPLATE = \"\n  <ng-content select=\\\"caption\\\"/>\n  <ng-content select=\\\"colgroup, col\\\"/>\n\n  <!--\n    Unprojected content throws a hydration error so we need this to capture it.\n    It gets removed on the client so it doesn't affect the layout.\n  -->\n  @if (_isServer) {\n    <ng-content/>\n  }\n\n  @if (_isNativeHtmlTable) {\n    <thead role=\\\"rowgroup\\\">\n      <ng-container headerRowOutlet/>\n    </thead>\n    <tbody role=\\\"rowgroup\\\">\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n    </tbody>\n    <tfoot role=\\\"rowgroup\\\">\n      <ng-container footerRowOutlet/>\n    </tfoot>\n  } @else {\n    <ng-container headerRowOutlet/>\n    <ng-container rowOutlet/>\n    <ng-container noDataRowOutlet/>\n    <ng-container footerRowOutlet/>\n  }\n\";\n```\n\n----------------------------------------\n\nTITLE: Defining IconType Enum in Angular TypeScript\nDESCRIPTION: This TypeScript snippet defines the IconType enumeration, which specifies the types of icons, FONT and SVG, used in the Angular Material Icon testing. It serves as a constraint for icon filtering and manipulations within the API.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/icon/testing/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport enum IconType {\n    // (undocumented)\n    FONT = 1,\n    // (undocumented)\n    SVG = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder Image Quality for YouTube Player\nDESCRIPTION: Shows different options for setting the quality of the placeholder image used by the YouTube Player component. This can be useful for optimizing the appearance of the player before the video loads.\nSOURCE: https://github.com/angular/components/blob/main/src/youtube-player/README.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- Default value, should exist for most videos. -->\n<youtube-player videoId=\"mVjYG9TSN88\" placeholderImageQuality=\"standard\"/>\n\n<!-- High quality image that should be present for most videos from the past few years. -->\n<youtube-player videoId=\"mVjYG9TSN88\" placeholderImageQuality=\"high\"/>\n\n<!-- Very low quality image, but should exist for all videos. -->\n<youtube-player videoId=\"mVjYG9TSN88\" placeholderImageQuality=\"low\"/>\n```\n\n----------------------------------------\n\nTITLE: Including CDK Overlay Styles with Sass Mixin\nDESCRIPTION: Demonstrates how to include the CDK overlay styles using the cdk.overlay mixin in a Sass file. This is an alternative to importing the prebuilt styles.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/dialog/dialog.md#2025-04-21_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/cdk' as cdk;\n\n@include cdk.overlay();\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for Arrow View State Transition\nDESCRIPTION: This snippet defines an interface `ArrowViewStateTransition` which holds properties to manage state transitions between different arrow states. It includes optional fields `fromState` and `toState` of type `ArrowViewState`.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sort/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ArrowViewStateTransition {\n    fromState?: ArrowViewState;\n    toState?: ArrowViewState;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mat Footer Cell Harness in Angular CDK Testing\nDESCRIPTION: The MatFooterCellHarness class extends _MatCellHarnessBase to represent a footer cell in an Angular Material table. It includes a hostSelector and a with() method to filter footer cell harnesses.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/table/testing/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatFooterCellHarness extends _MatCellHarnessBase {\n    static hostSelector: string;\n    static with(options?: CellHarnessFilters): HarnessPredicate<MatFooterCellHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Material Grid List Components API Definition\nDESCRIPTION: TypeScript definitions for Angular Material's grid list components, including grid list, grid tiles, and styling classes. Contains class definitions with properties, methods, and Angular decorators for the grid system implementation.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/grid-list/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterContentChecked } from '@angular/core';\nimport { AfterContentInit } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport { NumberInput } from '@angular/cdk/coercion';\nimport { OnInit } from '@angular/core';\nimport { QueryList } from '@angular/core';\n\n// @public\nexport class MatGridAvatarCssMatStyler {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatGridAvatarCssMatStyler, \"[mat-grid-avatar], [matGridAvatar]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatGridAvatarCssMatStyler, never>;\n}\n\n// @public (undocumented)\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked, TileStyleTarget {\n    constructor(...args: unknown[]);\n    get cols(): number;\n    set cols(value: NumberInput);\n    get gutterSize(): string;\n    set gutterSize(value: string);\n    ngAfterContentChecked(): void;\n    // (undocumented)\n    ngOnInit(): void;\n    get rowHeight(): string | number;\n    set rowHeight(value: string | number);\n    _setListStyle(style: [string, string | null] | null): void;\n    _tiles: QueryList<MatGridTile>;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatGridList, \"mat-grid-list\", [\"matGridList\"], { \"cols\": { \"alias\": \"cols\"; \"required\": false; }; \"gutterSize\": { \"alias\": \"gutterSize\"; \"required\": false; }; \"rowHeight\": { \"alias\": \"rowHeight\"; \"required\": false; }; }, {}, [\"_tiles\"], [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatGridList, never>;\n}\n\n// @public (undocumented)\nexport class MatGridListModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatGridListModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatGridListModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatGridListModule, never, [typeof MatLineModule, typeof MatCommonModule, typeof MatGridList, typeof MatGridTile, typeof MatGridTileText, typeof MatGridTileHeaderCssMatStyler, typeof MatGridTileFooterCssMatStyler, typeof MatGridAvatarCssMatStyler], [typeof MatGridList, typeof MatGridTile, typeof MatGridTileText, typeof MatLineModule, typeof MatCommonModule, typeof MatGridTileHeaderCssMatStyler, typeof MatGridTileFooterCssMatStyler, typeof MatGridAvatarCssMatStyler]>;\n}\n\n// @public (undocumented)\nexport class MatGridTile {\n    constructor(...args: unknown[]);\n    get colspan(): number;\n    set colspan(value: NumberInput);\n    // (undocumented)\n    _colspan: number;\n    // (undocumented)\n    _gridList?: MatGridListBase | null | undefined;\n    get rowspan(): number;\n    set rowspan(value: NumberInput);\n    // (undocumented)\n    _rowspan: number;\n    _setStyle(property: string, value: any): void;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatGridTile, \"mat-grid-tile\", [\"matGridTile\"], { \"rowspan\": { \"alias\": \"rowspan\"; \"required\": false; }; \"colspan\": { \"alias\": \"colspan\"; \"required\": false; }; }, {}, never, [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatGridTile, never>;\n}\n\n// @public\nexport class MatGridTileFooterCssMatStyler {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatGridTileFooterCssMatStyler, \"mat-grid-tile-footer\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatGridTileFooterCssMatStyler, never>;\n}\n\n// @public\nexport class MatGridTileHeaderCssMatStyler {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatGridTileHeaderCssMatStyler, \"mat-grid-tile-header\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatGridTileHeaderCssMatStyler, never>;\n}\n\n// @public (undocumented)\nexport class MatGridTileText implements AfterContentInit {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    _lines: QueryList<MatLine>;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatGridTileText, \"mat-grid-tile-header, mat-grid-tile-footer\", never, {}, {}, [\"_lines\"], [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatGridTileText, never>;\n}\n\n// @public\nexport class MatLine {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatLine, \"[mat-line], [matLine]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatLine, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatNavListHarness Class\nDESCRIPTION: This class extends MatListHarnessBase and represents a harness for testing Angular Material navigation lists. It provides methods for interacting with and querying navigation lists in tests, using MatNavListItemHarness for individual items and NavListItemHarnessFilters for filtering.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport class MatNavListHarness extends MatListHarnessBase<typeof MatNavListItemHarness, MatNavListItemHarness, NavListItemHarnessFilters> {\n    static hostSelector: string;\n    // (undocumented)\n    _itemHarness: typeof MatNavListItemHarness;\n    static with<T extends MatNavListHarness>(this: ComponentHarnessConstructor<T>, options?: NavListHarnessFilters): HarnessPredicate<T>;\n}\"\n```\n\n----------------------------------------\n\nTITLE: MatSnackBar Class Implementation\nDESCRIPTION: This snippet contains the implementation of the MatSnackBar class, which provides methods to open and dismiss snack bar messages. It also manages actions related to snack bars and keeps track of the currently opened snack bar instance.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/snack-bar/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatSnackBar implements OnDestroy {\n    constructor(...args: unknown[]);\n    dismiss(): void;\n    handsetCssClass: string;\n    // (undocumented)\n    ngOnDestroy(): void;\n    open(message: string, action?: string, config?: MatSnackBarConfig): MatSnackBarRef<TextOnlySnackBar>;\n    get _openedSnackBarRef(): MatSnackBarRef<any> | null;\n    set _openedSnackBarRef(value: MatSnackBarRef<any> | null);\n    openFromComponent<T, D = any>(component: ComponentType<T>, config?: MatSnackBarConfig<D>): MatSnackBarRef<T>;\n    openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig): MatSnackBarRef<EmbeddedViewRef<any>>;\n    simpleSnackBarComponent: typeof SimpleSnackBar;\n    snackBarContainerComponent: typeof MatSnackBarContainer;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatSnackBar, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<MatSnackBar>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatChipInputEvent Interface in TypeScript\nDESCRIPTION: Interface definition for events emitted by MatChipInput component when chips are added. It contains references to the originating input element, the chip input component, and the value entered.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/chips/index.api.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MatChipInputEvent {\n    chipInput: MatChipInput;\n    // @deprecated\n    input: HTMLInputElement;\n    value: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Development Server\nDESCRIPTION: Command to start the local Angular development server. After running this command, the application will be available at http://localhost:4200.\nSOURCE: https://github.com/angular/components/blob/main/guides/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Defining ListRange Type in TypeScript\nDESCRIPTION: This snippet defines the ListRange type, which represents a range with start and end properties.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/collections/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ListRange = {\n    start: number;\n    end: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Dialog Component with Component Styles in TypeScript\nDESCRIPTION: Demonstrates how to style a dialog component using the styles property in the component decorator.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/dialog/dialog.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  selector: 'my-dialog',\n  styles: [`\n    :host {\n      display: block;\n      background: #fff;\n      border-radius: 8px;\n      padding: 16px;\n    }\n  `]\n})\nclass MyDialog {}\n```\n\n----------------------------------------\n\nTITLE: Defining Row Templates in Angular Material Table\nDESCRIPTION: Demonstrates how to define header and data row templates using mat-header-row and mat-row directives. The column list defines which columns will appear in the rendered rows.\nSOURCE: https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n<tr mat-row *matRowDef=\"let myRowData; columns: columnsToDisplay\"></tr>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for Sort Header Arrow Position\nDESCRIPTION: The `SortHeaderArrowPosition` type specifies potential positions ('before' or 'after') for sorting arrows relative to header content, aiding in UI customization.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sort/index.api.md#2025-04-21_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type SortHeaderArrowPosition = 'before' | 'after';\n```\n\n----------------------------------------\n\nTITLE: Defining TextColumnOptions Interface for Column Configuration\nDESCRIPTION: Interface that allows customization of data access and header text transformation for text columns in CDK tables.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TextColumnOptions<T> {\n    defaultDataAccessor?: (data: T, name: string) => string;\n    defaultHeaderTextTransform?: (name: string) => string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Arrow Key Press Counter Directive in Angular TypeScript\nDESCRIPTION: This snippet demonstrates how to create an Angular directive that counts arrow key presses using keycode constants from @angular/cdk/keycodes. It imports necessary dependencies, defines a directive with a keypress host listener, and implements logic to increment a counter when arrow keys are pressed.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/keycodes/keycodes.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Directive} from '@angular/core';\nimport {UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\n\n@Directive({\n  selector: '[count-arrows]'\n  host: {\n    (keypress): 'handleKeyPress($event)'\n  }\n})\nexport class ArrowCounterDirective {\n  arrowPressCount = 0;\n\n  handleKeyPress(event: KeyboardEvent) {\n    if ([UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW].includes(event.keyCode)) {\n      this.arrowPresscount++;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Action Lists in Angular Material\nDESCRIPTION: Example of an action list using mat-action-list with button elements for interactive actions.\nSOURCE: https://github.com/angular/components/blob/main/src/material/list/list.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<mat-action-list>\n  <button mat-list-item (click)=\"save()\">Save</button>\n  <button mat-list-item (click)=\"undo()\">Undo</button>\n</mat-action-list>\n```\n\n----------------------------------------\n\nTITLE: Defining RadioButtonHarnessFilters Interface\nDESCRIPTION: This snippet defines the RadioButtonHarnessFilters interface, specifying filters that can be applied to radio button queries. These filters include the checked state and labels for matching. It extends from BaseHarnessFilters, requiring it to comply with base filtering criteria.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/radio/testing/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface RadioButtonHarnessFilters extends BaseHarnessFilters {\n    checked?: boolean;\n    label?: string | RegExp;\n    name?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Arguments Best Practice in TypeScript\nDESCRIPTION: Demonstrates the recommended approach of creating separate, well-named methods instead of using boolean parameters to control function behavior.\nSOURCE: https://github.com/angular/components/blob/main/CODING_STANDARDS.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// PREFER\nfunction getExistingTargetElement() {\n  // ...\n}\n\nfunction createTargetElement() {\n // ...\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// AVOID\nfunction getTargetElement(createIfNotFound = false) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MapGeocoderResponse Interface in TypeScript\nDESCRIPTION: This snippet defines the MapGeocoderResponse interface, which represents the structure of the response from the MapGeocoder.geocode method. It includes the status of the geocoding request and an array of geocoder results.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-geocoder/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MapGeocoderResponse {\n  status: google.maps.GeocoderStatus;\n  results: google.maps.GeocoderResult[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the MatToolbarModule Class\nDESCRIPTION: This snippet defines the `MatToolbarModule`, which encapsulates the components, directives, and services related to the toolbar. It includes Angular metadata for module declaration, factory, and injector.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/toolbar/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport class MatToolbarModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatToolbarModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatToolbarModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatToolbarModule, never, [typeof MatCommonModule, typeof MatToolbar, typeof MatToolbarRow], [typeof MatToolbar, typeof MatToolbarRow, typeof MatCommonModule]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MapTransitLayer in HTML Template\nDESCRIPTION: HTML template that shows how to set up the Google Map component with the MapTransitLayer. Configures the map dimensions and binds the center and zoom properties.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-transit-layer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- google-maps-demo.component.html -->\n<google-map height=\"400px\" width=\"750px\" [center]=\"center\" [zoom]=\"zoom\">\n  <map-transit-layer />\n</google-map>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Typography Config in SCSS\nDESCRIPTION: This SCSS snippet demonstrates how to create a custom typography config using the m2-define-typography-config function from Angular Material. It defines styles for various typography levels.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_16\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\n$my-custom-typography-config: mat.m2-define-typography-config(\n  $headline-1: mat.m2-define-typography-level(112px, 112px, 300, $letter-spacing: -0.05em),\n  $headline-2: mat.m2-define-typography-level(56px, 56px, 400, $letter-spacing: -0.02em),\n  $headline-3: mat.m2-define-typography-level(45px, 48px, 400, $letter-spacing: -0.005em),\n  $headline-4: mat.m2-define-typography-level(34px, 40px, 400),\n  $headline-5: mat.m2-define-typography-level(24px, 32px, 400),\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Defining throwToolbarMixedModesError Function\nDESCRIPTION: This snippet defines a function `throwToolbarMixedModesError` which likely throws an error when incompatible toolbar modes are used. The function is part of the public API.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/toolbar/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport function throwToolbarMixedModesError(): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing RepositionScrollStrategy Class in TypeScript\nDESCRIPTION: This class implements a scroll strategy that repositions the overlay on scroll events.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class RepositionScrollStrategy implements ScrollStrategy {\n    constructor(_scrollDispatcher: ScrollDispatcher, _viewportRuler: ViewportRuler, _ngZone: NgZone, _config?: RepositionScrollStrategyConfig | undefined);\n    attach(overlayRef: OverlayRef): void;\n    // (undocumented)\n    detach(): void;\n    disable(): void;\n    enable(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatBadgePosition and MatBadgeSize Types in TypeScript\nDESCRIPTION: Declares types for badge position and size options used in the MatBadge component.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/badge/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after' | 'before' | 'after' | 'above' | 'below';\n\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n```\n\n----------------------------------------\n\nTITLE: Defining RenderRow Interface in TypeScript for Angular Table Components\nDESCRIPTION: This code snippet defines the RenderRow interface used for rendering rows in Angular table components. It includes properties for the data object, its index, and the row definition.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/table/render-rows.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RenderRow<T> {\n  data: T;\n  dataIndex: number;\n  rowDef: CdkRowDef<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing _DisposeViewRepeaterStrategy Class in TypeScript\nDESCRIPTION: This class implements the _ViewRepeater interface and provides methods for applying changes and detaching views.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/collections/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class _DisposeViewRepeaterStrategy<T, R, C extends _ViewRepeaterItemContext<T>> implements _ViewRepeater<T, R, C> {\n    applyChanges(changes: IterableChanges<R>, viewContainerRef: ViewContainerRef, itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>, itemValueResolver: _ViewRepeaterItemValueResolver<T, R>, itemViewChanged?: _ViewRepeaterItemChanged<R, C>): void;\n    detach(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Angular Component Without Harness\nDESCRIPTION: Traditional approach to testing an issue report selector component using direct DOM manipulation and Angular TestBed utilities. This example shows manual handling of component selection and async operations.\nSOURCE: https://github.com/angular/components/blob/main/guides/using-component-harnesses.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('issue-report-selector', () => {\n  let fixture: ComponentFixture<IssueReportSelector>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [IssueReportSelectorModule],\n      declarations: [IssueReportSelector],\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(IssueReportSelector);\n    fixture.detectChanges();\n  });\n\n  it('should switch to bug report template', async () => {\n    expect(fixture.debugElement.query('bug-report-form')).toBeNull();\n    const selectTrigger = fixture.debugElement.query(By.css('.mat-select-trigger'));\n    selectTrigger.triggerEventHandler('click', {});\n    fixture.detectChanges();\n    await fixture.whenStable();\n    const options = document.querySelectorAll('.mat-select-panel mat-option');\n    options[1].click(); // Click the second option, \"Bug\".\n    fixture.detectChanges();\n    await fixture.whenStable();\n    expect(fixture.debugElement.query('bug-report-form')).not.toBeNull();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting First Item Active in ListKeyManager\nDESCRIPTION: This method sets the active item to the first enabled item in the list.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/key-manager/list-key-manager.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsetFirstItemActive(): void;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for MatSortable\nDESCRIPTION: The `MatSortable` interface defines properties for sortable elements in Material Design, including id, starting sort direction, and a flag for clearing state.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sort/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface MatSortable {\n    disableClear: boolean;\n    id: string;\n    start: SortDirection;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Keyboard Events in ListKeyManager\nDESCRIPTION: This method sets the active item based on the key event passed in.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/key-manager/list-key-manager.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nonKeydown(event: KeyboardEvent): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Sidenav Harness Interfaces in Angular\nDESCRIPTION: This code snippet defines three interfaces inheriting from BaseHarnessFilters, tailored to filter Angular Material drawer harnesses based on specific criteria like position. These interfaces are part of the Angular CDK testing framework.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sidenav/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface DrawerContainerHarnessFilters extends BaseHarnessFilters {\n}\n\nexport interface DrawerContentHarnessFilters extends BaseHarnessFilters {\n}\n\nexport interface DrawerHarnessFilters extends BaseHarnessFilters {\n    position?: 'start' | 'end';\n}\n```\n\n----------------------------------------\n\nTITLE: Including a11y-visually-hidden Mixin in SCSS\nDESCRIPTION: Demonstrates how to include the a11y-visually-hidden mixin in a global stylesheet for creating visually hidden elements accessible to assistive technology.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/a11y.md#2025-04-21_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/cdk';\n\n@include cdk.a11y-visually-hidden();\n```\n\n----------------------------------------\n\nTITLE: Lists with Multiple Sections in Angular Material\nDESCRIPTION: Example of a sectioned list using matSubheader and mat-divider to create distinct groups.\nSOURCE: https://github.com/angular/components/blob/main/src/material/list/list.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<mat-list>\n   <h3 matSubheader>Folders</h3>\n   @for (folder of folders; track folder) {\n     <mat-list-item>\n        <mat-icon matListIcon>folder</mat-icon>\n        <h4 matListItemTitle>{{folder.name}}</h4>\n        <p matListItemLine class=\"demo-2\"> {{folder.updated}} </p>\n     </mat-list-item>\n   }\n   <mat-divider></mat-divider>\n   <h3 matSubheader>Notes</h3>\n   @for (note of notes; track note) {\n     <mat-list-item>\n        <mat-icon matListIcon>note</mat-icon>\n        <h4 matListItemTitle>{{note.name}}</h4>\n        <p matListItemLine class=\"demo-2\"> {{note.updated}} </p>\n     </mat-list-item>\n   }\n</mat-list>\n```\n\n----------------------------------------\n\nTITLE: Defining MatChipEditedEvent interface for chip editing\nDESCRIPTION: An interface extending MatChipEvent that includes a value property to capture the edited text value when a chip's content is modified by the user.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/chips/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface MatChipEditedEvent extends MatChipEvent {\n    value: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Density Scale in Angular Material (SCSS)\nDESCRIPTION: Demonstrates how to read the density scale from an Angular Material theme using the get-theme-density function.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_12\n\nLANGUAGE: scss\nCODE:\n```\n$theme: mat.m2-define-dark-theme(...);\n\n$density-scale: mat.get-theme-density($theme);\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Tree Control in TypeScript\nDESCRIPTION: Defines a deprecated class for nested tree control that extends BaseTreeControl. Includes methods for expanding nodes and managing descendants recursively.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/tree/index.api.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class NestedTreeControl<T, K = T> extends BaseTreeControl<T, K> {\n    constructor(getChildren: (dataNode: T) => Observable<T[]> | T[] | undefined | null, options?: NestedTreeControlOptions<T, K> | undefined);\n    expandAll(): void;\n    getChildren: (dataNode: T) => Observable<T[]> | T[] | undefined | null;\n    getDescendants(dataNode: T): T[];\n    protected _getDescendants(descendants: T[], dataNode: T): void;\n    options?: NestedTreeControlOptions<T, K> | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: MatRadioChange Class Declaration\nDESCRIPTION: Defines the MatRadioChange class which encapsulates the change event emitted by a MatRadioButton. This class has properties for the source button and the new value, facilitating the communication of changes within the radio button group. No additional dependencies are needed.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/radio/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatRadioChange<T = any> {\n    constructor(\n    source: MatRadioButton,\n    value: T);\n    source: MatRadioButton;\n    value: T;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatCalendarView Type in TypeScript\nDESCRIPTION: Defines a type for the different view modes available in the Material calendar. The calendar can display a month view, year view, or multi-year view.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n```\n\n----------------------------------------\n\nTITLE: Using MapTrafficLayer in Angular HTML Template\nDESCRIPTION: This HTML snippet shows how to use the google-map component with the map-traffic-layer. It sets the map's height, width, center, and zoom, and includes a map-traffic-layer with autoRefresh set to false.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-traffic-layer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- google-maps-demo.component.html -->\n<google-map height=\"400px\" width=\"750px\" [center]=\"center\" [zoom]=\"zoom\">\n  <map-traffic-layer [autoRefresh]=\"false\" />\n</google-map>\n```\n\n----------------------------------------\n\nTITLE: Including Roboto Font from Google Fonts in HTML\nDESCRIPTION: This HTML snippet demonstrates how to include the Roboto font from Google Fonts in an Angular application's <head> section. It loads the font weights 300, 400, and 500.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">\n<link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated Tab Animations in Angular Material\nDESCRIPTION: This snippet declares a deprecated constant 'matTabsAnimations' containing a 'translateTab' animation. It's marked as public but deprecated, indicating it should not be used in new code.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const matTabsAnimations: {\n    readonly translateTab: any;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RadioGroupHarnessFilters Interface\nDESCRIPTION: This snippet defines the RadioGroupHarnessFilters interface, allowing for filters to be applied when querying radio groups in tests. Currently, it includes the 'name' filter and extends BaseHarnessFilters, ensuring consistent filtering across different harnesses.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/radio/testing/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface RadioGroupHarnessFilters extends BaseHarnessFilters {\n    name?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatChipsDefaultOptions Interface in TypeScript\nDESCRIPTION: Interface for configuring default options for the chips components, including separator key codes for splitting input into multiple chips and display options.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/chips/index.api.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MatChipsDefaultOptions {\n    hideSingleSelectionIndicator?: boolean;\n    inputDisabledInteractive?: boolean;\n    separatorKeyCodes: readonly number[] | ReadonlySet<number>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Animation Configuration\nDESCRIPTION: This snippet exports a set of animation configurations for MatSelect using TypeScript. It encapsulates the transformPanel animation setting, providing a centralized configuration point for animations related to select panels within Angular Material.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/select/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const matSelectAnimations: { readonly transformPanel: any; };\n```\n\n----------------------------------------\n\nTITLE: Handling Node Activation Events in CDK Tree HTML\nDESCRIPTION: Demonstrates how to handle both click and keyboard activation events for tree nodes. This example shows how to perform actions when a node is activated through different interaction methods.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/tree/tree.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<cdk-tree-node\n    *cdkNodeDef=\"let node\"\n    (click)=\"performAction(node)\"\n    (activation)=\"performAction($event)\">\n</cdk-tree-node>\n```\n\n----------------------------------------\n\nTITLE: Defining Material Tree Harness in Angular\nDESCRIPTION: Provides a testing harness for Angular Material Tree components with methods to interact with and query tree nodes\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tree/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatTreeHarness extends ComponentHarness {\n    getNodes(filter?: TreeNodeHarnessFilters): Promise<MatTreeNodeHarness[]>;\n    getTreeStructure(): Promise<TextTree>;\n    static hostSelector: string;\n    static with(options?: TreeHarnessFilters): HarnessPredicate<MatTreeHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Universal Application Server\nDESCRIPTION: Command to start a local server that renders components server-side and hydrates them on the client. Note that this server does not support live reload functionality.\nSOURCE: https://github.com/angular/components/blob/main/src/universal-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm universal-app\n```\n\n----------------------------------------\n\nTITLE: Theme Palette Type Definition\nDESCRIPTION: Defines a type alias for ThemePalette, which can be one of 'primary', 'accent', 'warn', or undefined. This type is used to specify the color palette for Angular Material components.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/core/index.api.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n```\n\n----------------------------------------\n\nTITLE: Rendering a Flat Tree Structure in HTML\nDESCRIPTION: Demonstrates the DOM structure for a flat tree using cdk-tree and cdk-tree-node elements. Flat trees render nodes as siblings in sequence, making them easier to style and scroll.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/tree/tree.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<cdk-tree>\n  <cdk-tree-node> parent node </cdk-tree-node>\n  <cdk-tree-node> -- child node1 </cdk-tree-node>\n  <cdk-tree-node> -- child node2 </cdk-tree-node>\n</cdk-tree>\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Angular Material Documentation\nDESCRIPTION: Markdown link syntax directing users to the official Angular Material documentation website.\nSOURCE: https://github.com/angular/components/blob/main/src/material/autocomplete/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[material.angular.io](https://material.angular.io/)\n```\n\n----------------------------------------\n\nTITLE: MatStepper Component Implementation\nDESCRIPTION: The MatStepper class extends CdkStepper, enabling multiple configurable properties like header position, label position, animation, and managing the lifecycle of steps. It supports navigation between steps and emits events during animation.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/stepper/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport class MatStepper extends CdkStepper implements AfterViewInit, AfterContentInit, OnDestroy {\n    constructor(...args: unknown[]);\n    _animatedContainers: QueryList<ElementRef>;\n    readonly animationDone: EventEmitter<void>;\n    get animationDuration(): string;\n    set animationDuration(value: string);\n    color: ThemePalette;\n    disableRipple: boolean;\n    // (undocumented)\n    _getAnimationDuration(): string;\n    headerPosition: 'top' | 'bottom';\n    _iconOverrides: Record<string, TemplateRef<MatStepperIconContext>>;\n    _icons: QueryList<MatStepperIcon>;\n    // (undocumented)\n    protected _isAnimating: i0.WritableSignal<boolean>;\n    protected _isServer: boolean;\n    labelPosition: 'bottom' | 'end';\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    _stepHeader: QueryList<MatStepHeader>;\n    // (undocumented)\n    _stepIsNavigable(index: number, step: MatStep): boolean;\n    readonly steps: QueryList<MatStep>;\n    _steps: QueryList<MatStep>;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatStepper, \"mat-stepper, mat-vertical-stepper, mat-horizontal-stepper, [matStepper]\", [\"matStepper\", \"matVerticalStepper\", \"matHorizontalStepper\"], { \"disableRipple\": { \"alias\": \"disableRipple\"; \"required\": false; }; \"color\": { \"alias\": \"color\"; \"required\": false; }; \"labelPosition\": { \"alias\": \"labelPosition\"; \"required\": false; }; \"headerPosition\": { \"alias\": \"headerPosition\"; \"required\": false; }; \"animationDuration\": { \"alias\": \"animationDuration\"; \"required\": false; }; }, { \"animationDone\": \"animationDone\"; }, [\"_steps\", \"_icons\"], [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatStepper, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StepHarnessFilters Interface - TypeScript\nDESCRIPTION: The StepHarnessFilters interface extends BaseHarnessFilters, allowing for filtering options when interacting with step harnesses in Angular Material. It includes optional filters for completion status, validity, label, and selection state. Dependencies include the Angular CDK testing module.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/stepper/testing/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface StepHarnessFilters extends BaseHarnessFilters {\n    completed?: boolean;\n    invalid?: boolean;\n    label?: string | RegExp;\n    selected?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Factory Declaration for _CoalescedStyleScheduler\nDESCRIPTION: Defines the factory and injectable declarations for the _CoalescedStyleScheduler. This service is used to coalesce style updates for performance optimization. It is part of the internal implementation details of the CDK table.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n    static ɵfac: i0.ɵɵFactoryDeclaration<_CoalescedStyleScheduler, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<_CoalescedStyleScheduler>;\n```\n\n----------------------------------------\n\nTITLE: Disabling Placeholder for YouTube Player\nDESCRIPTION: Shows how to disable the placeholder functionality of the YouTube Player component, causing it to load the API immediately on initialization instead of waiting for user interaction.\nSOURCE: https://github.com/angular/components/blob/main/src/youtube-player/README.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<youtube-player videoId=\"mVjYG9TSN88\" disablePlaceholder/>\n```\n\n----------------------------------------\n\nTITLE: Defining Progress Spinner Modes in HTML\nDESCRIPTION: This snippet demonstrates how to set the mode of a mat-progress-spinner to 'indeterminate'. It also shows that mat-spinner is an alias for this configuration.\nSOURCE: https://github.com/angular/components/blob/main/src/material/progress-spinner/progress-spinner.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<mat-progress-spinner mode=\"indeterminate\"></mat-progress-spinner>\n```\n\n----------------------------------------\n\nTITLE: Defining MatCalendarCellClassFunction Type in TypeScript\nDESCRIPTION: Defines a type for a function that returns CSS classes for calendar cells based on date and view type. This is used for customizing the appearance of cells in different calendar views.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MatCalendarCellClassFunction<D> = (date: D, view: 'month' | 'year' | 'multi-year') => MatCalendarCellCssClasses;\n```\n\n----------------------------------------\n\nTITLE: Defining TestbedHarnessEnvironmentOptions Interface in TypeScript for Angular CDK Testing\nDESCRIPTION: This interface defines the options for the TestbedHarnessEnvironment, including a query function for selecting elements within a root element.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/testing/testbed/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TestbedHarnessEnvironmentOptions {\n    queryFn: (selector: string, root: Element) => Iterable<Element> | ArrayLike<Element>;\n}\n```\n\n----------------------------------------\n\nTITLE: MatTimepickerToggle Class Definition\nDESCRIPTION: This snippet defines the MatTimepickerToggle component class, which is a button that opens the associated MatTimepicker when clicked.  It includes properties for accessibility, managing the disabled state and customising the ripple effect.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/timepicker/index.api.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatTimepickerToggle<D> {\n    readonly ariaLabel: InputSignal<string | undefined>;\n    readonly ariaLabelledby: InputSignal<string | undefined>;\n    readonly disabled: InputSignalWithTransform<boolean, unknown>;\n    readonly disableRipple: InputSignalWithTransform<boolean, unknown>;\n    getAriaLabel(): string | null;\n    // (undocumented)\n    protected _isDisabled: i0.Signal<boolean>;\n    protected _open(event: Event): void;\n    readonly tabIndex: InputSignal<number | null>;\n    readonly timepicker: InputSignal<MatTimepicker<D>>;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatTimepickerToggle<any>, \"mat-timepicker-toggle\", [\"matTimepickerToggle\"], { \"timepicker\": { \"alias\": \"for\"; \"required\": true; \"isSignal\": true; }; \"ariaLabel\": { \"alias\": \"aria-label\"; \"required\": false; \"isSignal\": true; }; \"ariaLabelledby\": { \"alias\": \"aria-labelledby\"; \"required\": false; \"isSignal\": true; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; \"isSignal\": true; }; \"tabIndex\": { \"alias\": \"tabIndex\"; \"required\": false; \"isSignal\": true; }; \"disableRipple\": { \"alias\": \"disableRipple\"; \"required\": false; \"isSignal\": true; }; }, {}, never, [\"[matTimepickerToggleIcon]\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTimepickerToggle<any>, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Abstract Class for Mat Row Harness Base\nDESCRIPTION: The _MatRowHarnessBase is an abstract class providing the framework for row-related harness operations. It encompasses methods to interact with an array of cell harnesses, applicable for multiple table contexts.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/table/testing/index.api.md#2025-04-21_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport abstract class _MatRowHarnessBase<CellType extends ComponentHarnessConstructor<Cell> & {\n    with: (options?: CellHarnessFilters) => HarnessPredicate<Cell>;\n}, Cell extends _MatCellHarnessBase> extends ComponentHarness {\n    protected abstract _cellHarness: CellType;\n    getCells(filter?: CellHarnessFilters): Promise<Cell[]>;\n    getCellTextByColumnName(): Promise<MatRowHarnessColumnsText>;\n    getCellTextByIndex(filter?: CellHarnessFilters): Promise<string[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Typeahead Labels in Angular CDK Listbox\nDESCRIPTION: Demonstrates how to set custom typeahead labels for options in a CDK listbox using the cdkOptionTypeaheadLabel attribute.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/listbox/listbox.md#2025-04-21_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<ul cdkListbox>\n  <li cdkOption value=\"1\" cdkOptionTypeaheadLabel=\"First\">Option 1 ✨</li>\n  <li cdkOption value=\"2\" cdkOptionTypeaheadLabel=\"Second\">Option 2 🌟</li>\n  <li cdkOption value=\"3\" cdkOptionTypeaheadLabel=\"Third\">Option 3 💫</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Tab Animation Duration Control\nDESCRIPTION: Demonstrates how to control tab animation duration using the animationDuration input property.\nSOURCE: https://github.com/angular/components/blob/main/src/material/tabs/tabs.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<mat-tab-group animationDuration=\"2000ms\">\n  <mat-tab label=\"First\">Content 1</mat-tab>\n  <mat-tab label=\"Second\">Content 2</mat-tab>\n</mat-tab-group>\n```\n\n----------------------------------------\n\nTITLE: CdkTable with Row Recycling\nDESCRIPTION: This snippet shows how to enable row recycling in CdkTable, which can improve performance by caching and reusing row elements.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/table/table.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<table cdk-table [dataSource]=\"dataSource\" recycleRows>\n```\n\n----------------------------------------\n\nTITLE: Injection Token for MatTabGroup\nDESCRIPTION: This code defines an injection token for the `MatTabGroup` component, providing a way to access the tab group instance through Angular's dependency injection system.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const MAT_TAB_GROUP: InjectionToken<any>;\"\n```\n\n----------------------------------------\n\nTITLE: Importing Angular Material Input Dependencies\nDESCRIPTION: TypeScript import statements showing all required dependencies for the Material Input module including core Angular, forms, and CDK modules.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/input/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbstractControl } from '@angular/forms';\nimport { AbstractControlDirective } from '@angular/forms';\nimport { AfterContentChecked } from '@angular/core';\nimport { AfterContentInit } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { DoCheck } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { FormGroupDirective } from '@angular/forms';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/observers';\nimport * as i4 from '@angular/cdk/text-field';\nimport { InjectionToken } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { NgForm } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { QueryList } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { WritableSignal } from '@angular/core';\n```\n\n----------------------------------------\n\nTITLE: Customizing Placeholder Button Label for Internationalization\nDESCRIPTION: Demonstrates how to customize the aria-label of the placeholder button for better accessibility and internationalization support in the YouTube Player component.\nSOURCE: https://github.com/angular/components/blob/main/src/youtube-player/README.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<youtube-player videoId=\"mVjYG9TSN88\" placeholderButtonLabel=\"Afspil video\"/>\n```\n\n----------------------------------------\n\nTITLE: GridTileHarnessFilters Interface\nDESCRIPTION: Defines the interface `GridTileHarnessFilters` for filtering `MatGridTileHarness` instances. It extends `BaseHarnessFilters` and includes properties for filtering based on header and footer text using strings or regular expressions.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/grid-list/testing/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n \"// @public\\nexport interface GridTileHarnessFilters extends BaseHarnessFilters {\\n    footerText?: string | RegExp;\\n    headerText?: string | RegExp;\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Custom Comparison Function in Angular CDK Listbox\nDESCRIPTION: Demonstrates how to use a custom comparison function for complex option values using the cdkListboxCompareWith input on the listbox element.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/listbox/listbox.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<ul cdkListbox [cdkListboxCompareWith]=\"compareObjects\">\n  <li cdkOption [value]=\"{id: 1, name: 'Option 1'}\">Option 1</li>\n  <li cdkOption [value]=\"{id: 2, name: 'Option 2'}\">Option 2</li>\n  <li cdkOption [value]=\"{id: 3, name: 'Option 3'}\">Option 3</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: GestureConfig usage in NgModule\nDESCRIPTION: Example of how the deprecated GestureConfig from Angular Material might be provided in an NgModule, which needs to be migrated or removed.\nSOURCE: https://github.com/angular/components/blob/main/guides/v9-hammerjs-migration.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {GestureConfig} from '@angular/material/core';\n\n@NgModule({\n  ...\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Defining Harness Filters for Tab Components\nDESCRIPTION: Interfaces that define filters for harnesses associated with tabs and tab links, allowing for the selection of specific components based on attributes such as visibility and selection state, enhancing test query precision.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/testing/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface TabGroupHarnessFilters extends BaseHarnessFilters {\n    selectedTabLabel?: string | RegExp;\n}\n\n// @public\nexport interface TabHarnessFilters extends BaseHarnessFilters {\n    label?: string | RegExp;\n    selected?: boolean;\n}\n\n// @public\nexport interface TabLinkHarnessFilters extends BaseHarnessFilters {\n    label?: string | RegExp;\n}\n\n// @public\nexport interface TabNavBarHarnessFilters extends BaseHarnessFilters {\n}\n\n// @public\nexport interface TabNavPanelHarnessFilters extends BaseHarnessFilters {\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Angular CLI\nDESCRIPTION: Command to access help information for Angular CLI directly from the command line.\nSOURCE: https://github.com/angular/components/blob/main/integration/harness-e2e-cli/README.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Defining Cell Harness Filters in Angular CDK Testing\nDESCRIPTION: The CellHarnessFilters interface extends BaseHarnessFilters to allow filtering of cells based on column name or text. These are used in the Angular CDK testing framework. No additional dependencies are required other than Angular CDK.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/table/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface CellHarnessFilters extends BaseHarnessFilters {\n    columnName?: string | RegExp;\n    text?: string | RegExp;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Adaptive Theme with High Contrast Support in Sass\nDESCRIPTION: Example showing how to create an adaptive theme that works for both light and dark modes with high contrast support. The theme adapts to system preferences automatically.\nSOURCE: https://github.com/angular/components/blob/main/src/material/schematics/ng-generate/theme-color/README.md#2025-04-21_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material';\n@use './path/to/my-theme'; // location of generated file\n\nhtml {\n  // Must specify color-scheme for theme mixin to automatically work\n  color-scheme: light dark;\n\n  // Create one theme that works automatically for light and dark theme\n  @include material.theme((\n    color: (\n      primary: my-theme.$primary-palette,\n      tertiary: my-theme.$tertiary-palette,\n    ),\n    typography: Roboto,\n    density: 0,\n  ));\n\n  // Use high contrast values when users prefer contrast\n  @media (prefers-contrast: more) {\n    @include my-theme.high-contrast-overrides(color-scheme);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Row Toolbar in Angular Material\nDESCRIPTION: Shows how to create a toolbar with multiple rows using the <mat-toolbar-row> element inside a <mat-toolbar>.\nSOURCE: https://github.com/angular/components/blob/main/src/material/toolbar/toolbar.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<mat-toolbar>\n  <mat-toolbar-row>\n    <span>First Row</span>\n  </mat-toolbar-row>\n\n  <mat-toolbar-row>\n    <span>Second Row</span>\n  </mat-toolbar-row>\n</mat-toolbar>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Type for Arrow View State\nDESCRIPTION: This snippet defines a TypeScript type alias `ArrowViewState` which includes a custom string type or predefined sorting directions. This is used for managing the state transitions of sorting arrows.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sort/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n```\n\n----------------------------------------\n\nTITLE: ErrorHarnessFilters Interface Definition\nDESCRIPTION: Defines the interface for filtering MatErrorHarness instances during testing. It extends BaseHarnessFilters and allows filtering based on the error text, which can be a string or a regular expression.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/form-field/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\\nexport interface ErrorHarnessFilters extends BaseHarnessFilters {\\n    text?: string | RegExp;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Event Data Types\nDESCRIPTION: Defines recursive type for event data that can be dispatched in tests\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/testing/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type EventData = string | number | boolean | Function | undefined | null | EventData[] | {\n    [key: string]: EventData;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Injection Token for Text Column Options\nDESCRIPTION: Defines an injection token for configuring text column behavior in CDK tables.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport const TEXT_COLUMN_OPTIONS: InjectionToken<TextColumnOptions<any>>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Angular Material Theme with mat.theme Mixin\nDESCRIPTION: Example of a basic theme file that applies a violet color palette, Roboto font, and standard density to Angular Material components. It uses the light-dark CSS color function to support both light and dark modes based on system preferences.\nSOURCE: https://github.com/angular/components/blob/main/guides/theming.md#2025-04-21_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\nhtml {\n  color-scheme: light dark;\n  @include mat.theme((\n    color: mat.$violet-palette,\n    typography: Roboto,\n    density: 0\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Inset Divider in Angular Material\nDESCRIPTION: Shows how to create an inset divider using the [inset] attribute on the <mat-divider> element.\nSOURCE: https://github.com/angular/components/blob/main/src/material/divider/divider.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<mat-divider [inset]=\"true\"></mat-divider>\n```\n\n----------------------------------------\n\nTITLE: Checking Element Focusability in TypeScript\nDESCRIPTION: Method to determine if an HTML element can be focused by the user. This is part of the InteractivityChecker class used for accessibility checks in Angular components.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/interactivity-checker/interactivity-checker.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nisFocusable(element: HTMLElement): boolean\n```\n\n----------------------------------------\n\nTITLE: Defining NativeSelectHarnessFilters Interface\nDESCRIPTION: This interface extends BaseHarnessFilters and defines the filters that can be used to locate MatNativeSelectHarness instances.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/input/testing/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport interface NativeSelectHarnessFilters extends BaseHarnessFilters {\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining MatStepHarness Class - TypeScript\nDESCRIPTION: The MatStepHarness class extends ContentContainerComponentHarness to provide methods for interacting with step components in Angular Material. It includes methods to retrieve the aria label, check completion status, and select steps. Dependencies include the Angular CDK testing module.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/stepper/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ContentContainerComponentHarness } from '@angular/cdk/testing';\nimport { HarnessLoader } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport class MatStepHarness extends ContentContainerComponentHarness<string> {\n    getAriaLabel(): Promise<string | null>;\n    getAriaLabelledby(): Promise<string | null>;\n    getLabel(): Promise<string>;\n    // (undocumented)\n    protected getRootHarnessLoader(): Promise<HarnessLoader>;\n    hasErrors(): Promise<boolean>;\n    static hostSelector: string;\n    isCompleted(): Promise<boolean>;\n    isOptional(): Promise<boolean>;\n    isSelected(): Promise<boolean>;\n    select(): Promise<void>;\n    static with(options?: StepHarnessFilters): HarnessPredicate<MatStepHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting coerceObservable Function in TypeScript\nDESCRIPTION: Defines a utility function named 'coerceObservable' that accepts either a value or an Observable of that value type and returns an Observable of the value type. This function is marked as a public API.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/coercion/private/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Observable } from 'rxjs';\n\n// @public\nexport function coerceObservable<T>(data: T | Observable<T>): Observable<T>;\n```\n\n----------------------------------------\n\nTITLE: Using MediaMatcher in TypeScript Angular Component\nDESCRIPTION: This example shows how to use the MediaMatcher utility in an Angular component. It demonstrates creating a MediaQueryList for a simple media query, which can be used for responsive design or testing purposes.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/layout/layout.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({...})\nclass MyComponent {\n  constructor(mediaMatcher: MediaMatcher) {\n    const mediaQueryList = mediaMatcher.matchMedia('(min-width: 1px)');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Append-Only Mode for Virtual Scrolling in Angular\nDESCRIPTION: Using appendOnly input for virtual scroll viewports to improve performance by ensuring rendered views persist in the DOM after they scroll out of view.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/scrolling/scrolling.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(cdk-virtual-scroll-append-only) -->\n```\n\n----------------------------------------\n\nTITLE: Defining ToolbarHarnessFilters Interface in Angular Testing\nDESCRIPTION: The ToolbarHarnessFilters interface extends BaseHarnessFilters to specify filtering criteria, such as text, used in locating and interacting with toolbar harness elements. It allows for more precise control in selecting elements during tests.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/toolbar/testing/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ToolbarHarnessFilters extends BaseHarnessFilters {\\n    text?: string | RegExp;\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NativeOptionHarnessFilters Interface\nDESCRIPTION: This interface extends BaseHarnessFilters and defines the filters that can be used to locate MatNativeOptionHarness instances. It includes filters for index, isSelected, and text, allowing tests to target specific option elements based on these attributes.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/input/testing/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport interface NativeOptionHarnessFilters extends BaseHarnessFilters {\n    // (undocumented)\n    index?: number;\n    // (undocumented)\n    isSelected?: boolean;\n    // (undocumented)\n    text?: string | RegExp;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Global Ripple Configuration Setup\nDESCRIPTION: Demonstrates how to configure global ripple options including animation duration and disabled state.\nSOURCE: https://github.com/angular/components/blob/main/src/material/core/ripple/ripple.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst globalRippleConfig: RippleGlobalOptions = {\n  disabled: true,\n  animation: {\n    enterDuration: 300,\n    exitDuration: 0\n  }\n};\n\n@NgModule({\n  providers: [\n    {provide: MAT_RIPPLE_GLOBAL_OPTIONS, useValue: globalRippleConfig}\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining InputHarnessFilters Interface\nDESCRIPTION: This interface extends BaseHarnessFilters and defines the filters that can be used to locate MatInputHarness instances. It includes filters for placeholder and value, allowing tests to target specific input elements based on these attributes.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/input/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport interface InputHarnessFilters extends BaseHarnessFilters {\n    placeholder?: string | RegExp;\n    value?: string | RegExp;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Flat Tree Control in TypeScript\nDESCRIPTION: Defines a deprecated class for flat tree control that extends BaseTreeControl. Includes methods for expanding nodes and getting descendants.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/tree/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class FlatTreeControl<T, K = T> extends BaseTreeControl<T, K> {\n    constructor(getLevel: (dataNode: T) => number, isExpandable: (dataNode: T) => boolean, options?: FlatTreeControlOptions<T, K> | undefined);\n    expandAll(): void;\n    getDescendants(dataNode: T): T[];\n    getLevel: (dataNode: T) => number;\n    isExpandable: (dataNode: T) => boolean;\n    options?: FlatTreeControlOptions<T, K> | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Theme Colors in Angular Material (SCSS)\nDESCRIPTION: Demonstrates how to read various color values from an Angular Material theme including primary, accent, warn colors and their contrast variants using the get-theme-color function.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_10\n\nLANGUAGE: scss\nCODE:\n```\n$theme: mat.m2-define-dark-theme(...);\n\n$primary-default: mat.get-theme-color($theme, primary, default);\n$accent-a100: mat.get-theme-color($theme, accent, A100);\n$warn-500-contrast: mat.get-theme-color($theme, warn, 500-contrast);\n$foreground-text: mat.get-theme-color($theme, foreground, text);\n$background-card: mat.get-theme-color($theme, background, card);\n$type: mat.get-theme-type($theme);\n$custom-background: if($type == dark, #030, #dfd);\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-line Lists in Angular Material\nDESCRIPTION: Implementation of a multi-line list where each item contains a title and a description line using matListItemTitle and matListItemLine directives.\nSOURCE: https://github.com/angular/components/blob/main/src/material/list/list.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<mat-list>\n  <mat-list-item>\n    <span matListItemTitle>Pepper</span>\n    <span matListItemLine>Produced by a plant</span>\n  </mat-list-item>\n  <mat-list-item>\n    <span matListItemTitle>Salt</span>\n    <span matListItemLine>Extracted from sea water</span>\n  </mat-list-item>\n  <mat-list-item>\n    <span matListItemTitle>Paprika</span>\n    <span matListItemLine>Produced by dried and ground red peppers</span>\n  </mat-list-item>\n</mat-list>\n```\n\n----------------------------------------\n\nTITLE: Importing Angular Material Chips dependencies in TypeScript\nDESCRIPTION: A comprehensive list of imports used by the Angular Material Chips package, including core Angular dependencies, forms-related classes, and RxJS observables.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/chips/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbstractControl } from '@angular/forms';\nimport { AbstractControlDirective } from '@angular/forms';\nimport { AfterContentInit } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { DoCheck } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { FormGroupDirective } from '@angular/forms';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport { InjectionToken } from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { NgForm } from '@angular/forms';\nimport { NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { QueryList } from '@angular/core';\nimport { Subject } from 'rxjs';\n```\n\n----------------------------------------\n\nTITLE: Defining BottomSheetHarnessFilters Interface in TypeScript\nDESCRIPTION: Defines an interface for bottom sheet harness filters, extending BaseHarnessFilters. This interface is used to filter bottom sheet components during testing.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/bottom-sheet/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BottomSheetHarnessFilters extends BaseHarnessFilters {\n}\n```\n\n----------------------------------------\n\nTITLE: Structural SCSS Component Styles\nDESCRIPTION: Separated structural styles for the carousel component after theme extraction.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_22\n\nLANGUAGE: scss\nCODE:\n```\n.my-carousel {\n  display: flex;\n}\n\n.my-carousel-button {\n  border-radius: 50%;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sticky Direction Constants for CDK Tables\nDESCRIPTION: Constant array that defines all possible sticky directions ('top', 'bottom', 'left', 'right') for table elements.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport const STICKY_DIRECTIONS: StickyDirection[];\n```\n\n----------------------------------------\n\nTITLE: Applying Theme Colors to Body Element\nDESCRIPTION: CSS snippet that applies the theme's surface background and on-surface text colors to the body element, establishing consistent default styling across the application.\nSOURCE: https://github.com/angular/components/blob/main/guides/theming.md#2025-04-21_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\nbody {\n  background: var(--mat-sys-surface);\n  color: var(--mat-sys-on-surface);\n}\n```\n\n----------------------------------------\n\nTITLE: Using compareWith Function with Angular Material Select\nDESCRIPTION: This snippet refers to the correct usage of the compareWith property in Angular Material Select. It emphasizes that compareWith must be assigned a function, not any other type of value.\nSOURCE: https://github.com/angular/components/blob/main/src/material/select/select.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Example usage (not explicitly provided in the text)\n<mat-select [compareWith]=\"compareObjects\">\n  ...\n</mat-select>\n\ncompareObjects(o1: any, o2: any): boolean {\n  return o1.id === o2.id;\n}\n```\n\n----------------------------------------\n\nTITLE: Observing Tab Key Press in ListKeyManager\nDESCRIPTION: This observable emits when the Tab key is pressed, allowing components to react when focus shifts off the list.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/key-manager/list-key-manager.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntabOut: Observable<any>;\n```\n\n----------------------------------------\n\nTITLE: Empty Sidenav Container\nDESCRIPTION: Shows an empty sidenav container setup with no sidenavs and implicit empty content.\nSOURCE: https://github.com/angular/components/blob/main/src/material/sidenav/sidenav.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<mat-sidenav-container></mat-sidenav-container>\n```\n\n----------------------------------------\n\nTITLE: Defining RowOutlet Interface in Angular CDK Tables\nDESCRIPTION: Interface that provides access to the ViewContainerRef for row insertion in Angular CDK tables.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RowOutlet {\n    // (undocumented)\n    viewContainer: ViewContainerRef;\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Material Tree API Declarations in TypeScript\nDESCRIPTION: This code defines the complete public API for Angular Material's tree components. It includes classes for tree nodes, tree structure, data sources, and various directives for tree manipulation. The code extends functionality from the CDK (Component Development Kit) tree implementation.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tree/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterContentInit } from '@angular/core';\nimport { CdkNestedTreeNode } from '@angular/cdk/tree';\nimport { CdkTree } from '@angular/cdk/tree';\nimport { CdkTreeNode } from '@angular/cdk/tree';\nimport { CdkTreeNodeDef } from '@angular/cdk/tree';\nimport { CdkTreeNodeOutlet } from '@angular/cdk/tree';\nimport { CdkTreeNodePadding } from '@angular/cdk/tree';\nimport { CdkTreeNodeToggle } from '@angular/cdk/tree';\nimport { CollectionViewer } from '@angular/cdk/collections';\nimport { DataSource } from '@angular/cdk/collections';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/tree';\nimport * as i1_2 from '@angular/cdk/bidi';\nimport { Observable } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { TreeControl } from '@angular/cdk/tree';\nimport { ViewContainerRef } from '@angular/core';\n\n// @public\nexport class MatNestedTreeNode<T, K = T> extends CdkNestedTreeNode<T, K> implements AfterContentInit, OnDestroy, OnInit {\n    // @deprecated\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    static ngAcceptInputType_tabIndex: unknown;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    ngOnInit(): void;\n    // (undocumented)\n    node: T;\n    get tabIndex(): number;\n    set tabIndex(value: number);\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatNestedTreeNode<any, any>, \"mat-nested-tree-node\", [\"matNestedTreeNode\"], { \"node\": { \"alias\": \"matNestedTreeNode\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"tabIndex\": { \"alias\": \"tabIndex\"; \"required\": false; }; }, { \"activation\": \"activation\"; \"expandedChange\": \"expandedChange\"; }, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatNestedTreeNode<any, any>, never>;\n}\n\n// @public\nexport class MatTree<T, K = T> extends CdkTree<T, K> {\n    // (undocumented)\n    _nodeOutlet: MatTreeNodeOutlet;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatTree<any, any>, \"mat-tree\", [\"matTree\"], {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTree<any, any>, never>;\n}\n\n// @public @deprecated\nexport class MatTreeFlatDataSource<T, F, K = F> extends DataSource<F> {\n    constructor(_treeControl: FlatTreeControl<F, K>, _treeFlattener: MatTreeFlattener<T, F, K>, initialData?: T[]);\n    // (undocumented)\n    connect(collectionViewer: CollectionViewer): Observable<F[]>;\n    // (undocumented)\n    get data(): T[];\n    set data(value: T[]);\n    // (undocumented)\n    disconnect(): void;\n}\n\n// @public @deprecated\nexport class MatTreeFlattener<T, F, K = F> {\n    constructor(transformFunction: (node: T, level: number) => F, getLevel: (node: F) => number, isExpandable: (node: F) => boolean, getChildren: (node: T) => Observable<T[]> | T[] | undefined | null);\n    expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F, K>): F[];\n    // (undocumented)\n    _flattenChildren(children: T[], level: number, resultNodes: F[], parentMap: boolean[]): void;\n    // (undocumented)\n    _flattenNode(node: T, level: number, resultNodes: F[], parentMap: boolean[]): F[];\n    flattenNodes(structuredData: T[]): F[];\n    // (undocumented)\n    getChildren: (node: T) => Observable<T[]> | T[] | undefined | null;\n    // (undocumented)\n    getLevel: (node: F) => number;\n    // (undocumented)\n    isExpandable: (node: F) => boolean;\n    // (undocumented)\n    transformFunction: (node: T, level: number) => F;\n}\n\n// @public (undocumented)\nexport class MatTreeModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTreeModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatTreeModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatTreeModule, never, [typeof i1.CdkTreeModule, typeof MatCommonModule, typeof MatNestedTreeNode, typeof MatTreeNodeDef, typeof MatTreeNodePadding, typeof MatTreeNodeToggle, typeof MatTree, typeof MatTreeNode, typeof MatTreeNodeOutlet], [typeof MatCommonModule, typeof MatNestedTreeNode, typeof MatTreeNodeDef, typeof MatTreeNodePadding, typeof MatTreeNodeToggle, typeof MatTree, typeof MatTreeNode, typeof MatTreeNodeOutlet]>;\n}\n\n// @public\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n    // (undocumented)\n    connect(collectionViewer: CollectionViewer): Observable<T[]>;\n    get data(): T[];\n    set data(value: T[]);\n    // (undocumented)\n    disconnect(): void;\n}\n\n// @public\nexport class MatTreeNode<T, K = T> extends CdkTreeNode<T, K> implements OnInit, OnDestroy {\n    constructor(...args: unknown[]);\n    // @deprecated\n    defaultTabIndex: number;\n    // @deprecated\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    // (undocumented)\n    protected _getTabindexAttribute(): number | null;\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    static ngAcceptInputType_tabIndexInputBinding: unknown;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    ngOnInit(): void;\n    // @deprecated\n    get tabIndexInputBinding(): number;\n    set tabIndexInputBinding(value: number);\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatTreeNode<any, any>, \"mat-tree-node\", [\"matTreeNode\"], { \"tabIndexInputBinding\": { \"alias\": \"tabIndex\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; }, { \"activation\": \"activation\"; \"expandedChange\": \"expandedChange\"; }, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTreeNode<any, any>, never>;\n}\n\n// @public\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    // (undocumented)\n    data: T;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatTreeNodeDef<any>, \"[matTreeNodeDef]\", never, { \"when\": { \"alias\": \"matTreeNodeDefWhen\"; \"required\": false; }; \"data\": { \"alias\": \"matTreeNode\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTreeNodeDef<any>, never>;\n}\n\n// @public\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n    // (undocumented)\n    _node: {} | null;\n    // (undocumented)\n    viewContainer: ViewContainerRef;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatTreeNodeOutlet, \"[matTreeNodeOutlet]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTreeNodeOutlet, never>;\n}\n\n// @public\nexport class MatTreeNodePadding<T, K = T> extends CdkTreeNodePadding<T, K> {\n    get indent(): number | string;\n    set indent(indent: number | string);\n    get level(): number;\n    set level(value: number);\n    // (undocumented)\n    static ngAcceptInputType_level: unknown;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatTreeNodePadding<any, any>, \"[matTreeNodePadding]\", never, { \"level\": { \"alias\": \"matTreeNodePadding\"; \"required\": false; }; \"indent\": { \"alias\": \"matTreeNodePaddingIndent\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTreeNodePadding<any, any>, never>;\n}\n\n// @public\nexport class MatTreeNodeToggle<T, K = T> extends CdkTreeNodeToggle<T, K> {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatTreeNodeToggle<any, any>, \"[matTreeNodeToggle]\", never, { \"recursive\": { \"alias\": \"matTreeNodeToggleRecursive\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTreeNodeToggle<any, any>, never>;\n}\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Defining MatListItemType Enum\nDESCRIPTION: This enum defines the different types of list items based on the number of lines of text they contain. It includes ONE_LINE_ITEM, TWO_LINE_ITEM, and THREE_LINE_ITEM to represent the different layout options.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport enum MatListItemType {\n    // (undocumented)\n    ONE_LINE_ITEM = 0,\n    // (undocumented)\n    THREE_LINE_ITEM = 2,\n    // (undocumented)\n    TWO_LINE_ITEM = 1\n}\"\n```\n\n----------------------------------------\n\nTITLE: Generating Drag and Drop Component with Angular CDK\nDESCRIPTION: Command to generate an Angular component that uses the CDK drag and drop directives to create interactive, draggable elements.\nSOURCE: https://github.com/angular/components/blob/main/guides/schematics.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nng generate @angular/cdk:drag-drop <component-name>\n```\n\n----------------------------------------\n\nTITLE: Defining Snack Bar Harness Filters Interface\nDESCRIPTION: An interface extending base harness filters for configuring snack bar test harness selections and filtering options.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/snack-bar/testing/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SnackBarHarnessFilters extends BaseHarnessFilters {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tree Node Toggle Directive in TypeScript\nDESCRIPTION: Defines a directive for handling tree node toggling with optional recursive functionality. Includes toggle method and tree node references.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/tree/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CdkTreeNodeToggle<T, K = T> {\n    constructor(...args: unknown[]);\n    static ngAcceptInputType_recursive: unknown;\n    recursive: boolean;\n    _toggle(): void;\n    protected _tree: CdkTree<T, K>;\n    protected _treeNode: CdkTreeNode<T, K>;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkTreeNodeToggle<any, any>, \"[cdkTreeNodeToggle]\", never, { \"recursive\": { \"alias\": \"cdkTreeNodeToggleRecursive\"; \"required\": false; }; }, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkTreeNodeToggle<any, any>, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Typography Level in SCSS\nDESCRIPTION: This SCSS snippet shows how to define a custom typography level using the m2-define-typography-level function from Angular Material. It specifies font family, weight, size, line height, and letter spacing.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_15\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\n$my-custom-level: mat.m2-define-typography-level(\n  $font-family: Roboto,\n  $font-weight: 400,\n  $font-size: 1rem,\n  $line-height: 1,\n  $letter-spacing: normal,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing RTL-Mirrored Icon in Angular Material\nDESCRIPTION: Example showing how to implement a mirrored icon for RTL (Right-to-Left) layouts using the mat-icon-rtl-mirror CSS class. This approach ensures proper icon display in bidirectional applications.\nSOURCE: https://github.com/angular/components/blob/main/src/material/icon/icon.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mat-icon class=\"mat-icon-rtl-mirror\" svgIcon=\"thumb-up\"></mat-icon>\n```\n\n----------------------------------------\n\nTITLE: GridListHarnessFilters Interface\nDESCRIPTION: Defines the interface `GridListHarnessFilters` for filtering `MatGridListHarness` instances. It extends `BaseHarnessFilters`, providing a base set of filter properties.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/grid-list/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n \"// @public\\nexport interface GridListHarnessFilters extends BaseHarnessFilters {\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining MatToolbarHarness Class in Angular Testing\nDESCRIPTION: The MatToolbarHarness class extends ContentContainerComponentHarness and provides methods such as getRowsAsText and hasMultipleRows for interacting with Angular Material toolbar rows. Dependencies include Angular CDK testing modules, and its main purpose is to facilitate testing by providing selectors and predicates.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/toolbar/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\\nimport { ContentContainerComponentHarness } from '@angular/cdk/testing';\\nimport { HarnessPredicate } from '@angular/cdk/testing';\\n\\n// @public\\nexport class MatToolbarHarness extends ContentContainerComponentHarness<MatToolbarSection> {\\n    getRowsAsText(): Promise<string[]>;\\n    hasMultipleRows(): Promise<boolean>;\\n    // (undocumented)\\n    static hostSelector: string;\\n    static with(options?: ToolbarHarnessFilters): HarnessPredicate<MatToolbarHarness>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MatRipple Directive\nDESCRIPTION: Directive class for Material Ripple effect with configuration and animation options.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/core/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n    constructor(...args: unknown[]);\n    animation: RippleAnimationConfig;\n    centered: boolean;\n    color: string;\n    disabled: boolean;\n    fadeOutAll(): void;\n    fadeOutAllNonPersistent(): void;\n    _isInitialized: boolean;\n    launch(config: RippleConfig): RippleRef;\n    launch(x: number, y: number, config?: RippleConfig): RippleRef;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    radius: number;\n    rippleConfig: RippleConfig;\n    rippleDisabled: boolean;\n    trigger: HTMLElement;\n    unbounded: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OverlayKeyboardDispatcher Class in TypeScript\nDESCRIPTION: This class handles keyboard events for overlays, extending the BaseOverlayDispatcher.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    add(overlayRef: OverlayRef): void;\n    protected detach(): void;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<OverlayKeyboardDispatcher, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<OverlayKeyboardDispatcher>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Themes with Media Queries in Angular Material\nDESCRIPTION: Demonstrates how to define and apply both dark and light themes in a single file using SCSS. Shows theme configuration with color palettes and conditional application based on user preferences using media queries.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\n// Define a dark theme\n$dark-theme: mat.m2-define-dark-theme((\n color: (\n   primary: mat.m2-define-palette(mat.$m2-pink-palette),\n   accent: mat.m2-define-palette(mat.$m2-blue-grey-palette),\n ),\n  // Only include `typography` and `density` in the default dark theme.\n  typography: mat.m2-define-typography-config(),\n  density: 0,\n));\n\n// Define a light theme\n$light-theme: mat.m2-define-light-theme((\n color: (\n   primary: mat.m2-define-palette(mat.$m2-indigo-palette),\n   accent: mat.m2-define-palette(mat.$m2-pink-palette),\n ),\n));\n\n// Apply the dark theme by default\n@include mat.core-theme($dark-theme);\n@include mat.button-theme($dark-theme);\n\n// Apply the light theme only when the user prefers light themes.\n@media (prefers-color-scheme: light) {\n // Use the `-color` mixins to only apply color styles without reapplying the same\n // typography and density styles.\n @include mat.core-color($light-theme);\n @include mat.button-color($light-theme);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Table Component with Material Design\nDESCRIPTION: Command to generate an Angular component with a Material Design data table. The table is pre-configured with a datasource for sorting and pagination.\nSOURCE: https://github.com/angular/components/blob/main/guides/schematics.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng generate @angular/material:table <component-name>\n```\n\n----------------------------------------\n\nTITLE: Basic Component Harness Implementation\nDESCRIPTION: Shows minimal implementation of a ComponentHarness subclass with required hostSelector property.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyPopupHarness extends ComponentHarness {\n  static hostSelector = 'my-popup';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatListItemSection Enum\nDESCRIPTION: This enum defines the possible sections within a MatListItem. Currently, it only defines CONTENT section which maps to the CSS class '.mdc-list-item__content'.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport enum MatListItemSection {\n    // (undocumented)\n    CONTENT = \\\".mdc-list-item__content\\\"\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing MatCalendarBody Component Class in TypeScript\nDESCRIPTION: The MatCalendarBody component class implementation that renders calendar cells and handles cell selection, range highlighting, and accessibility features for the calendar views.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatCalendarBody<D = any> implements OnChanges, OnDestroy, AfterViewChecked {\n    constructor(...args: unknown[]);\n    activeCell: number;\n    // (undocumented)\n    readonly activeDateChange: EventEmitter<MatCalendarUserEvent<number>>;\n    cellAspectRatio: number;\n    _cellClicked(cell: MatCalendarCell, event: MouseEvent): void;\n    _cellPadding: string;\n    _cellWidth: string;\n    // (undocumented)\n    comparisonDateAccessibleName: string;\n    comparisonEnd: number | null;\n    _comparisonEndDateLabelId: string;\n    comparisonStart: number | null;\n    _comparisonStartDateLabelId: string;\n    readonly dragEnded: EventEmitter<MatCalendarUserEvent<D | null>>;\n    readonly dragStarted: EventEmitter<MatCalendarUserEvent<D>>;\n    // (undocumented)\n    _emitActiveDateChange(cell: MatCalendarCell, event: FocusEvent): void;\n    endDateAccessibleName: string | null;\n    _endDateLabelId: string;\n    endValue: number;\n    _firstRowOffset: number;\n    _focusActiveCell(movePreview?: boolean): void;\n    _getDescribedby(value: number): string | null;\n    _isActiveCell(rowIndex: number, colIndex: number): boolean;\n    _isComparisonBridgeEnd(value: number, rowIndex: number, colIndex: number): boolean;\n    _isComparisonBridgeStart(value: number, rowIndex: number, colIndex: number): boolean;\n    _isComparisonEnd(value: number): boolean;\n    _isComparisonIdentical(value: number): boolean;\n    _isComparisonStart(value: number): boolean;\n    _isInComparisonRange(value: number): boolean;\n    _isInPreview(value: number): boolean;\n    _isInRange(value: number): boolean;\n    _isPreviewEnd(value: number): boolean;\n    _isPreviewStart(value: number): boolean;\n    isRange: boolean;\n    _isRangeEnd(value: number): boolean;\n    _isRangeStart(value: number): boolean;\n    _isSelected(value: number): boolean;\n    label: string;\n    labelMinRequiredCells: number;\n    // (undocumented)\n    ngAfterViewChecked(): void;\n    // (undocumented)\n    ngOnChanges(changes: SimpleChanges): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    numCols: number;\n\n```\n\n----------------------------------------\n\nTITLE: Injection Token for MatTabContent\nDESCRIPTION: This code defines an injection token for the `MatTabContent` directive, allowing it to be injected into other components or services that need to interact with it.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport const MAT_TAB_CONTENT: InjectionToken<MatTabContent>;\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Submenu Trigger with cdkMenuItem and cdkMenuTriggerFor\nDESCRIPTION: Example of implementing a submenu trigger that both acts as a menu item and opens another menu. This combines cdkMenuItem and cdkMenuTriggerFor directives.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/menu/menu.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button\n  class=\"example-menu-item\"\n  cdkMenuItem\n  [cdkMenuTriggerFor]=\"file\">\n  File\n  <span class=\"example-menu-item-submenu-trigger\"></span>\n</button>\n\n<ng-template #file>\n```\n\n----------------------------------------\n\nTITLE: Defining MapCircle Component in TypeScript\nDESCRIPTION: This snippet defines the MapCircle component, which represents a circle on the map with various properties, methods, and event observables.\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MapCircle implements OnInit, OnDestroy {\n    constructor(...args: unknown[]);\n    set center(center: google.maps.LatLng | google.maps.LatLngLiteral);\n    readonly centerChanged: Observable<void>;\n    circle?: google.maps.Circle;\n    readonly circleClick: Observable<google.maps.MapMouseEvent>;\n    readonly circleDblclick: Observable<google.maps.MapMouseEvent>;\n    readonly circleDrag: Observable<google.maps.MapMouseEvent>;\n    readonly circleDragend: Observable<google.maps.MapMouseEvent>;\n    readonly circleDragstart: Observable<google.maps.MapMouseEvent>;\n    readonly circleInitialized: EventEmitter<google.maps.Circle>;\n    readonly circleMousedown: Observable<google.maps.MapMouseEvent>;\n    readonly circleMousemove: Observable<google.maps.MapMouseEvent>;\n    readonly circleMouseout: Observable<google.maps.MapMouseEvent>;\n    readonly circleMouseover: Observable<google.maps.MapMouseEvent>;\n    readonly circleMouseup: Observable<google.maps.MapMouseEvent>;\n    readonly circleRightclick: Observable<google.maps.MapMouseEvent>;\n    getBounds(): google.maps.LatLngBounds | null;\n    getCenter(): google.maps.LatLng | null;\n    getDraggable(): boolean;\n    getEditable(): boolean;\n    getRadius(): number;\n    getVisible(): boolean;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    set options(options: google.maps.CircleOptions);\n    set radius(radius: number);\n    readonly radiusChanged: Observable<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatTooltipHarness Class in Angular Material Testing\nDESCRIPTION: The MatTooltipHarness class extends the ComponentHarness to provide methods for testing tooltip functionality in Angular applications. It includes methods for manipulating visibility, checking states (open/disabled), and obtaining tooltip text.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tooltip/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport class MatTooltipHarness extends ComponentHarness {\n    getTooltipText(): Promise<string>;\n    hide(): Promise<void>;\n    // (undocumented)\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isOpen(): Promise<boolean>;\n    show(): Promise<void>;\n    static with<T extends MatTooltipHarness>(this: ComponentHarnessConstructor<T>, options?: TooltipHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport interface TooltipHarnessFilters extends BaseHarnessFilters {\n}\n\n// (No @packageDocumentation comment for this package)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Table Harness Filters Interface\nDESCRIPTION: The TableHarnessFilters interface is used to define filter criteria specific to table harnesses in Angular CDK testing, derived from BaseHarnessFilters.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/table/testing/index.api.md#2025-04-21_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TableHarnessFilters extends BaseHarnessFilters {\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Angular CDK with Angular CLI\nDESCRIPTION: Command to install only the Component Dev Kit (CDK) in your project using the Angular CLI.\nSOURCE: https://github.com/angular/components/blob/main/guides/schematics.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng add @angular/cdk\n```\n\n----------------------------------------\n\nTITLE: Defining SelectionListHarnessFilters Interface\nDESCRIPTION: This interface extends BaseHarnessFilters and is used to define the filter options for SelectionListHarness. It allows filtering based on properties inherited from BaseHarnessFilters, enabling targeted selection of selection lists during testing.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport interface SelectionListHarnessFilters extends BaseHarnessFilters {\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining TemplatePortal Class\nDESCRIPTION: This snippet defines the TemplatePortal class, which is used to create portals from TemplateRefs.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/portal/index.api.md#2025-04-21_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class TemplatePortal<C = any> extends Portal<EmbeddedViewRef<C>> {\n    constructor(\n    templateRef: TemplateRef<C>,\n    viewContainerRef: ViewContainerRef,\n    context?: C | undefined,\n    injector?: Injector | undefined);\n    attach(host: PortalOutlet, context?: C | undefined): EmbeddedViewRef<C>;\n    context?: C | undefined;\n    detach(): void;\n    injector?: Injector | undefined;\n    get origin(): ElementRef;\n    templateRef: TemplateRef<C>;\n    viewContainerRef: ViewContainerRef;\n}\n```\n\n----------------------------------------\n\nTITLE: Global Configuration for Disabling Placeholder\nDESCRIPTION: Demonstrates how to globally disable the placeholder functionality for all YouTube Player instances in an Angular application using the YOUTUBE_PLAYER_CONFIG injection token.\nSOURCE: https://github.com/angular/components/blob/main/src/youtube-player/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {NgModule} from '@angular/core';\nimport {YouTubePlayer, YOUTUBE_PLAYER_CONFIG} from '@angular/youtube-player';\n\n@NgModule({\n  imports: [YouTubePlayer],\n  providers: [{\n    provide: YOUTUBE_PLAYER_CONFIG,\n    useValue: {\n      disablePlaceholder: true\n    }\n  }]\n})\nexport class YourApp {}\n```\n\n----------------------------------------\n\nTITLE: Sharing Data with Custom Snackbar Component in TypeScript\nDESCRIPTION: Shows how to pass data to a custom snackbar component and how to access that data within the component using the MAT_SNACK_BAR_DATA injection token.\nSOURCE: https://github.com/angular/components/blob/main/src/material/snack-bar/snack-bar.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsnackBar.openFromComponent(MessageArchivedComponent, {\n  data: 'some data'\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component, Inject} from '@angular/core';\nimport {MAT_SNACK_BAR_DATA} from '../snack-bar';\n\n@Component({\n  selector: 'your-snackbar',\n  template: 'passed in {{ data }}',\n})\nexport class MessageArchivedComponent {\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: string) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Row Harness Filters Interface\nDESCRIPTION: The RowHarnessFilters interface extends BaseHarnessFilters and serves as a filter criteria structure for row harnesses within Angular CDK testing setups.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/table/testing/index.api.md#2025-04-21_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface RowHarnessFilters extends BaseHarnessFilters {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Icon Registry Services\nDESCRIPTION: A set of deprecated provider definitions related to MatIconRegistry, utilizing Angular dependency injection. These include the ICON_REGISTRY_PROVIDER and its factory function. Dependencies include DomSanitizer, ErrorHandler, and HttpClient.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/icon/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const ICON_REGISTRY_PROVIDER: {\n    provide: typeof MatIconRegistry;\n    deps: (Optional[] | typeof DomSanitizer | typeof ErrorHandler)[];\n    useFactory: typeof ICON_REGISTRY_PROVIDER_FACTORY;\n};\n\nexport function ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry: MatIconRegistry, httpClient: HttpClient, sanitizer: DomSanitizer, errorHandler: ErrorHandler, document?: any): MatIconRegistry;\n```\n\n----------------------------------------\n\nTITLE: MatTimepickerOption Interface Definition\nDESCRIPTION: This snippet defines the MatTimepickerOption interface, which represents a single option in the MatTimepicker's list of selectable times. It has label and value properties.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/timepicker/index.api.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MatTimepickerOption<D = unknown> {\n    label: string;\n    value: D;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Input Module Static Metadata\nDESCRIPTION: Static module declaration for MatInputModule with module and dependency configurations\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/input/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic ɵmod: i0.ɵɵNgModuleDeclaration<MatInputModule, never, [typeof MatCommonModule, typeof MatFormFieldModule, typeof MatInput], [typeof MatInput, typeof MatFormFieldModule, typeof i4.TextFieldModule, typeof MatCommonModule]>;\n```\n\n----------------------------------------\n\nTITLE: Importing Angular Material Experimental Module\nDESCRIPTION: TypeScript code showing how to import and configure an experimental component module (checkbox example) in an Angular module.\nSOURCE: https://github.com/angular/components/blob/main/src/material-experimental/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {MatCheckboxModule} from '@angular/material/checkbox';\n\n@NgModule({\n  declarations: [MyComponent],\n  imports: [MatCheckboxModule],\n})\nexport class MyModule {}\n```\n\n----------------------------------------\n\nTITLE: Invalid Multiple Content Layout\nDESCRIPTION: Example of invalid sidenav layout with multiple content elements.\nSOURCE: https://github.com/angular/components/blob/main/src/material/sidenav/sidenav.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<mat-sidenav-container>\n  <mat-sidenav-content>Main</mat-sidenav-content>\n  <mat-sidenav-content>Main 2</mat-sidenav-content>\n</mat-sidenav-container>\n```\n\n----------------------------------------\n\nTITLE: Generating Material 3 Theme Colors\nDESCRIPTION: Command to generate a file with Material 3 palettes from specified colors that can be used in a theme file. Also generates high contrast color override mixins if specified.\nSOURCE: https://github.com/angular/components/blob/main/guides/schematics.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nng generate @angular/material:theme-color\n```\n\n----------------------------------------\n\nTITLE: Configuring YouTube Player with loadApi Option\nDESCRIPTION: Shows how to disable automatic loading of the YouTube iframe API using the loadApi input property. This allows for more control over when and how the API is loaded.\nSOURCE: https://github.com/angular/components/blob/main/src/youtube-player/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<youtube-player videoId=\"mVjYG9TSN88\" loadApi=\"false\"/>\n```\n\n----------------------------------------\n\nTITLE: Directive Declaration for HeaderRowOutlet\nDESCRIPTION: Defines the directive declaration for the HeaderRowOutlet directive. This directive marks the location in the template where header rows should be rendered. It includes the directive selector and factory declaration.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n    static ɵdir: i0.ɵɵDirectiveDeclaration<HeaderRowOutlet, \"[headerRowOutlet]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<HeaderRowOutlet, never>;\n```\n\n----------------------------------------\n\nTITLE: Defining TimepickerHarnessFilters Interface in Angular\nDESCRIPTION: This snippet defines the TimepickerHarnessFilters interface that extends BaseHarnessFilters, ensuring proper filter capabilities for tests involving MatTimepicker components.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/timepicker/testing/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TimepickerHarnessFilters extends BaseHarnessFilters {\n}\n```\n\n----------------------------------------\n\nTITLE: Input Value Handler Interface Methods\nDESCRIPTION: Interface methods for handling content editable values, input values, and text retrieval with optional filtering\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/testing/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsetContenteditableValue?(value: string): Promise<void>;\nsetInputValue(value: string): Promise<void>;\ntext(options?: TextOptions): Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: Checking Element Visibility in TypeScript\nDESCRIPTION: Method to check if an HTML element is visible. It considers states like 'display: none' and 'visibility: hidden', but not clipping by overflow or viewport positioning. Part of the InteractivityChecker class in Angular components.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/interactivity-checker/interactivity-checker.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nisVisible(element: HTMLElement): boolean\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionViewer Interface in TypeScript\nDESCRIPTION: This snippet defines the CollectionViewer interface, which includes a viewChange property of type Observable<ListRange>.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/collections/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CollectionViewer {\n    viewChange: Observable<ListRange>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Map Directions Renderer Service\nDESCRIPTION: An Angular service for rendering and managing map directions with support for configuration and event emission\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MapDirectionsRenderer implements OnInit, OnChanges, OnDestroy {\n  constructor(...args: unknown[]);\n  set directions(directions: google.maps.DirectionsResult);\n  readonly directionsChanged: Observable<void>;\n  directionsRenderer?: google.maps.DirectionsRenderer;\n  // Methods for handling directions rendering\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Mixins Implementation\nDESCRIPTION: Initial theme mixins for color and typography configurations.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_23\n\nLANGUAGE: scss\nCODE:\n```\n@mixin color($theme) {\n  .my-carousel-button {\n    color: blue;\n  }\n}\n\n@mixin typography($theme) {\n  .my-carousel {\n    font-family: serif;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Snackbar Configuration in TypeScript\nDESCRIPTION: Demonstrates how to override the default snackbar options globally using the MAT_SNACK_BAR_DEFAULT_OPTIONS injection token.\nSOURCE: https://github.com/angular/components/blob/main/src/material/snack-bar/snack-bar.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@NgModule({\n  providers: [\n    {provide: MAT_SNACK_BAR_DEFAULT_OPTIONS, useValue: {duration: 2500}}\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: TestKey Enum Definition\nDESCRIPTION: Comprehensive enum defining keyboard key codes for testing purposes, including function keys, navigation keys, and modifier keys\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/testing/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum TestKey {\n    ALT = 5,\n    BACKSPACE = 0,\n    COMMA = 30,\n    CONTROL = 4,\n    DELETE = 16,\n    DOWN_ARROW = 14,\n    END = 9,\n    ENTER = 2,\n    ESCAPE = 6,\n    F1 = 17,\n    F10 = 26,\n    F11 = 27,\n    F12 = 28,\n    F2 = 18,\n    F3 = 19,\n    F4 = 20,\n    F5 = 21,\n    F6 = 22,\n    F7 = 23,\n    F8 = 24,\n    F9 = 25,\n    HOME = 10,\n    INSERT = 15,\n    LEFT_ARROW = 11,\n    META = 29,\n    PAGE_DOWN = 8,\n    PAGE_UP = 7,\n    RIGHT_ARROW = 13,\n    SHIFT = 3,\n    TAB = 1,\n    UP_ARROW = 12\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatLabel Directive\nDESCRIPTION: Angular Material label directive with static factory and directive declarations\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/input/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic ɵdir: i0.ɵɵDirectiveDeclaration<MatLabel, \"mat-label\", never, {}, {}, never, never, true, never>;\nstatic ɵfac: i0.ɵɵFactoryDeclaration<MatLabel, never>;\n```\n\n----------------------------------------\n\nTITLE: Implementing MatPseudoCheckbox Component\nDESCRIPTION: Component class for Material Pseudo Checkbox with state management and animations.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/core/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatPseudoCheckbox {\n    constructor(...args: unknown[]);\n    _animationsDisabled: boolean;\n    appearance: 'minimal' | 'full';\n    disabled: boolean;\n    state: MatPseudoCheckboxState;\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatPseudoCheckbox, \"mat-pseudo-checkbox\", never, { \"state\": { \"alias\": \"state\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"appearance\": { \"alias\": \"appearance\"; \"required\": false; }; }, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatPseudoCheckbox, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: SCSS Nesting Example\nDESCRIPTION: This example demonstrates how to avoid SCSS nesting for better style override capabilities. Instead of nesting, each CSS rule is defined separately.\nSOURCE: https://github.com/angular/components/blob/main/CODING_STANDARDS.md#2025-04-21_snippet_12\n\nLANGUAGE: scss\nCODE:\n```\n\n.mat-calendar {\n  display: block;\n}\n\n.mat-calendar-month {\n  display: inline-block;\n}\n\n.mat-calendar-date.mat-selected {\n  font-weight: bold;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using high-contrast Mixin in SCSS\nDESCRIPTION: Demonstrates how to use the high-contrast mixin to define styles that only apply in high contrast mode.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/a11y.md#2025-04-21_snippet_10\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/cdk';\n\nbutton {\n  @include cdk.high-contrast {\n    outline: solid 1px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Custom Scroll Strategy for Angular Overlay\nDESCRIPTION: This snippet shows how to implement a custom scroll strategy by creating a class that implements the ScrollStrategy interface, and how to apply it to an overlay configuration.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/overlay/scroll/scroll-strategy.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Your custom scroll strategy.\nexport class CustomScrollStrategy implements ScrollStrategy {\n  // your implementation\n}\n\noverlayConfig.scrollStrategy = new CustomScrollStrategy();\nthis._overlay.create(overlayConfig).attach(yourPortal);\n```\n\n----------------------------------------\n\nTITLE: Installing Angular Material Experimental Package\nDESCRIPTION: NPM command to install the Angular Material experimental components package.\nSOURCE: https://github.com/angular/components/blob/main/src/material-experimental/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @angular/material-experimental\n```\n\n----------------------------------------\n\nTITLE: Checking Theme Dimensions in Angular Material (SCSS)\nDESCRIPTION: Shows how to check which dimensions (base, color, typography, density) are configured in an Angular Material theme using the theme-has function.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_13\n\nLANGUAGE: scss\nCODE:\n```\n$theme: mat.m2-define-dark-theme(...);\n\n$has-base: mat.theme-has($theme, base);\n$has-color: mat.theme-has($theme, color);\n$has-typography: mat.theme-has($theme, typography);\n$has-density: mat.theme-has($theme, density);\n```\n\n----------------------------------------\n\nTITLE: Defining MatIconHarness Class in Angular TypeScript\nDESCRIPTION: Defines the MatIconHarness class, extending the ComponentHarness for Angular Material icon components. It provides methods to retrieve icon name, namespace, type, and inline status. Supports filtering with IconHarnessFilters for targeted harness selection. It is a part of Angular CDK material testing utilities.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/icon/testing/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class MatIconHarness extends ComponentHarness {\n    getName(): Promise<string | null>;\n    getNamespace(): Promise<string | null>;\n    getType(): Promise<IconType>;\n    static hostSelector: string;\n    isInline(): Promise<boolean>;\n    static with(options?: IconHarnessFilters): HarnessPredicate<MatIconHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: Component Declaration for CdkRow\nDESCRIPTION: Defines the component declaration for the CdkRow component. This component represents a row in the table. It includes the component selector, type definition, and factory declaration.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n    static ɵcmp: i0.ɵɵComponentDeclaration<CdkRow, \"cdk-row, tr[cdk-row]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkRow, never>;\n```\n\n----------------------------------------\n\nTITLE: Defining BadgeHarnessFilters Interface and MatBadgeHarness Class in TypeScript\nDESCRIPTION: This code snippet defines the BadgeHarnessFilters interface for filtering badge harnesses and the MatBadgeHarness class for interacting with badge components in tests. It includes methods for retrieving badge properties and a static method for creating harness predicates.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/badge/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public (undocumented)\nexport interface BadgeHarnessFilters extends BaseHarnessFilters {\n    // (undocumented)\n    text?: string | RegExp;\n}\n\n// @public\nexport class MatBadgeHarness extends ComponentHarness {\n    getPosition(): Promise<MatBadgePosition>;\n    getSize(): Promise<MatBadgeSize>;\n    getText(): Promise<string>;\n    // (undocumented)\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isHidden(): Promise<boolean>;\n    isOverlapping(): Promise<boolean>;\n    static with(options?: BadgeHarnessFilters): HarnessPredicate<MatBadgeHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Class vs Tag/Attribute Styling\nDESCRIPTION: This example demonstrates the preferred approach of using CSS classes instead of tag names or attributes for styling Angular components. This helps prevent conflicts and ensures consistency.\nSOURCE: https://github.com/angular/components/blob/main/CODING_STANDARDS.md#2025-04-21_snippet_16\n\nLANGUAGE: scss\nCODE:\n```\n/** Do: */\n.mat-mdc-slider { ... }\n\n/** Don't: */\nmdc-slider { ... }\n\n/** Do: */\n.mat-mdc-slider-input { ... }\n\n/** Don't: */\ninput[type=\"button\"] { ... }\n\n```\n\n----------------------------------------\n\nTITLE: Defining MapDirectionsResponse Interface in TypeScript\nDESCRIPTION: This snippet defines the MapDirectionsResponse interface, which is used by the MapDirectionsService to return an Observable response. It includes the status and optional result from the Google Maps Directions API.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-directions-renderer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MapDirectionsResponse {\n  status: google.maps.DirectionsStatus;\n  result?: google.maps.DirectionsResult;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ScrollingVisibility Class in TypeScript\nDESCRIPTION: This class represents the visibility state of an overlay and its origin relative to the viewport and clipping.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ScrollingVisibility {\n    // (undocumented)\n    isOriginClipped: boolean;\n    // (undocumented)\n    isOriginOutsideView: boolean;\n    // (undocumented)\n    isOverlayClipped: boolean;\n    // (undocumented)\n    isOverlayOutsideView: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Menu Component Harness in TypeScript\nDESCRIPTION: Implementation of component test harnesses for menu and menu item components with sub-component harness support.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyMenuHarness extends ComponentHarness {\n  static hostSelector = 'my-menu';\n\n  protected getPopupHarness = this.locatorFor(MyPopupHarness);\n\n  /** Gets the currently shown menu items (empty list if menu is closed). */\n  getItems = this.locatorForAll(MyMenuItemHarness);\n\n  /** Toggles open state of the menu. */\n  async toggle() {\n    const popupHarness = await this.getPopupHarness();\n    return popupHarness.toggle();\n  }\n}\n\nclass MyMenuItemHarness extends ComponentHarness {\n  static hostSelector = 'my-menu-item';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TreeDataNodeFlattener Interface in TypeScript\nDESCRIPTION: This interface defines methods for flattening and expanding tree-like data structures.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/collections/index.api.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TreeDataNodeFlattener<T> {\n    expandFlattenedNodes(nodes: T[], expansionModel: SelectionModel<T>): T[];\n    flattenNodes(structuredData: any[]): T[];\n    nodeDescendents(node: T, nodes: T[], onlyExpandable: boolean): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UniqueSelectionDispatcher Class in TypeScript\nDESCRIPTION: This class manages unique selection dispatching, implementing OnDestroy for proper cleanup.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/collections/index.api.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UniqueSelectionDispatcher implements OnDestroy {\n    listen(listener: UniqueSelectionDispatcherListener): () => void;\n    ngOnDestroy(): void;\n    notify(id: string, name: string): void;\n    static ɵfac: i0.ɵɵFactoryDeclaration<UniqueSelectionDispatcher, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<UniqueSelectionDispatcher>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the MatToolbarRow Class\nDESCRIPTION: This code defines the `MatToolbarRow` directive, which is used to structure the content within a toolbar. It contains Angular metadata for directive declaration and factory.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/toolbar/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport class MatToolbarRow {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatToolbarRow, \"mat-toolbar-row\", [\"matToolbarRow\"], {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatToolbarRow, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Sort Implementation Example Reference\nDESCRIPTION: A reference to a sort overview example that demonstrates basic implementation of sorting functionality.\nSOURCE: https://github.com/angular/components/blob/main/src/material/sort/sort.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(sort-overview) -->\n```\n\n----------------------------------------\n\nTITLE: Declaring Injection Token\nDESCRIPTION: This snippet declares an InjectionToken named MAT_TIMEPICKER_SCROLL_STRATEGY, which provides a scroll strategy for the MatTimepicker. It allows customizing how the timepicker panel behaves when scrolling.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/timepicker/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const MAT_TIMEPICKER_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n```\n\n----------------------------------------\n\nTITLE: Implementing StickyPositioningListener Interface\nDESCRIPTION: Interface that defines methods for a service that listens to sticky positioning updates for different parts of a CDK table.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StickyPositioningListener {\n    stickyColumnsUpdated(update: StickyUpdate): void;\n    stickyEndColumnsUpdated(update: StickyUpdate): void;\n    stickyFooterRowsUpdated(update: StickyUpdate): void;\n    stickyHeaderRowsUpdated(update: StickyUpdate): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SortHarnessFilters Interface in Angular Testing\nDESCRIPTION: The SortHarnessFilters interface extends the BaseHarnessFilters interface and serves as a filter for sorting harnesses. It is designed to include additional properties specific to sorting harnesses, though it remains undocumented in this context.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sort/testing/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface SortHarnessFilters extends BaseHarnessFilters {\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Class Description Example\nDESCRIPTION: This example demonstrates how to add comments to CSS classes explaining their purpose. This enhances code readability and maintainability.\nSOURCE: https://github.com/angular/components/blob/main/CODING_STANDARDS.md#2025-04-21_snippet_15\n\nLANGUAGE: scss\nCODE:\n```\n// The calendar icon button used to open the calendar pane.\n.mat-datepicker-button { ... }\n\n// Floating pane that contains the calendar at the bottom of the input.\n.mat-datepicker-calendar-pane { ... }\n\n// Portion of the floating panel that sits, invisibly, on top of the input.\n.mat-datepicker-input-mask { }\n\n```\n\n----------------------------------------\n\nTITLE: Styling Toolbar Content in Angular Material\nDESCRIPTION: CSS styles to accompany the toolbar content positioning example. It uses flexbox to create space between the title and action buttons.\nSOURCE: https://github.com/angular/components/blob/main/src/material/toolbar/toolbar.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.example-spacer {\n  flex: 1 1 auto;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Filtered Harness Methods in TypeScript\nDESCRIPTION: Enhanced implementation of menu harnesses with filtering support using HarnessPredicate for specific menu and item selection.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyMenuHarnessFilters extends BaseHarnessFilters {\n  /** Filters based on the trigger text for the menu. */\n  triggerText?: string | RegExp;\n}\n\ninterface MyMenuItemHarnessFilters extends BaseHarnessFilters {\n  /** Filters based on the text of the menu item. */\n  text?: string | RegExp;\n}\n\nclass MyMenuHarness extends ComponentHarness {\n  static hostSelector = 'my-menu';\n\n  /** Creates a `HarnessPredicate` used to locate a particular `MyMenuHarness`. */\n  static with(options: MyMenuHarnessFilters): HarnessPredicate<MyMenuHarness> {\n    return new HarnessPredicate(MyMenuHarness, options)\n        .addOption('trigger text', options.triggerText,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getTriggerText(), text));\n  }\n\n  protected getPopupHarness = this.locatorFor(MyPopupHarness);\n\n  /** Gets the text of the menu trigger. */\n  async getTriggerText(): Promise<string> {\n    const popupHarness = await this.getPopupHarness();\n    return popupHarness.getTriggerText();\n  }\n\n  ...\n}\n\nclass MyMenuItemHarness extends ComponentHarness {\n  static hostSelector = 'my-menu-item';\n\n  /** Creates a `HarnessPredicate` used to locate a particular `MyMenuItemHarness`. */\n  static with(options: MyMenuItemHarnessFilters): HarnessPredicate<MyMenuItemHarness> {\n    return new HarnessPredicate(MyMenuItemHarness, options)\n        .addOption('text', options.text,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getText(), text));\n  }\n\n  /** Gets the text of the menu item. */\n  async getText(): Promise<string> {\n    const host = await this.host();\n    return host.text();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Command to build the Angular project, creating production-ready files in the 'dist/' directory.\nSOURCE: https://github.com/angular/components/blob/main/integration/yarn-pnp-compat/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Importing Angular CDK Portal Components and Interfaces\nDESCRIPTION: This snippet shows the imports used in the @angular/cdk_portal module, including core Angular dependencies and custom types.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/portal/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ApplicationRef } from '@angular/core';\nimport { ComponentRef } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EmbeddedViewRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { TemplateRef } from '@angular/core';\nimport { ViewContainerRef } from '@angular/core';\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Class in Angular Material Testing\nDESCRIPTION: This snippet defines an abstract class 'MatFormFieldControlHarness' that extends 'ComponentHarness', facilitating the testing of Angular Material form field controls. The class itself does not contain any implementation details since it is abstract and meant to be extended by concrete implementations. No external dependencies apart from Angular's CDK testing utilities are required.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/form-field/testing/control/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ComponentHarness } from '@angular/cdk/testing';\n\n// @public\nexport abstract class MatFormFieldControlHarness extends ComponentHarness {\n}\n\n// (No @packageDocumentation comment for this package)\n\n```\n\n----------------------------------------\n\nTITLE: Initializing MapTransitLayer Component in TypeScript\nDESCRIPTION: TypeScript component setup that demonstrates how to import and configure the GoogleMap and MapTransitLayer components. Defines a component with center coordinates and zoom level for the map display.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-transit-layer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// google-maps-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapTransitLayer} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap, MapTransitLayer],\n})\nexport class GoogleMapDemo {\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NoopScrollStrategy Class in TypeScript\nDESCRIPTION: This class implements a no-op scroll strategy that does nothing when attached or enabled/disabled.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class NoopScrollStrategy implements ScrollStrategy {\n    attach(): void;\n    disable(): void;\n    enable(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stepper Error Display in Angular\nDESCRIPTION: TypeScript configuration for enabling error display in stepper through global options in the application's root module.\nSOURCE: https://github.com/angular/components/blob/main/src/material/stepper/stepper.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@NgModule({\n  providers: [\n    {\n      provide: STEPPER_GLOBAL_OPTIONS,\n      useValue: { showError: true }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: MatTabBodyPositionState Type Alias (Deprecated)\nDESCRIPTION: This code defines a deprecated type alias `MatTabBodyPositionState` that represents the position of the tab body.  The allowed values are 'left', 'center', and 'right'.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public @deprecated\nexport type MatTabBodyPositionState = 'left' | 'center' | 'right';\"\n```\n\n----------------------------------------\n\nTITLE: Defining ListHarnessFilters Interface\nDESCRIPTION: This interface extends the BaseHarnessFilters and is used to define the filter options for ListHarness. It provides a way to filter lists based on properties inherited from BaseHarnessFilters, allowing for targeted selection of lists during testing.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport interface ListHarnessFilters extends BaseHarnessFilters {\n}\"\n```\n\n----------------------------------------\n\nTITLE: Import statements for Angular Material Toolbar\nDESCRIPTION: This snippet showcases the import statements required for the `@angular/material_toolbar` module. It imports necessary modules and components from `@angular/core` and `@angular/cdk/bidi` to define the toolbar's functionality.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/toolbar/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterViewInit } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport { QueryList } from '@angular/core';\n```\n\n----------------------------------------\n\nTITLE: Rendering MapPolyline in Angular Template\nDESCRIPTION: HTML template that renders a Google Map with a polyline. The template sets the map dimensions and binds the center, zoom, and polyline path properties to the component's variables.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-polyline/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- google-maps-demo.component.html -->\n<google-map height=\"400px\" width=\"750px\" [center]=\"center\" [zoom]=\"zoom\">\n  <map-polyline [path]=\"vertices\" />\n</google-map>\n```\n\n----------------------------------------\n\nTITLE: Defining OverlayConnectionPosition Interface in TypeScript\nDESCRIPTION: This interface defines the connection position for an overlay relative to its origin.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface OverlayConnectionPosition {\n    // (undocumented)\n    overlayX: HorizontalConnectionPos;\n    // (undocumented)\n    overlayY: VerticalConnectionPos;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Command to execute unit tests for the Angular project using Karma test runner.\nSOURCE: https://github.com/angular/components/blob/main/integration/harness-e2e-cli/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Implementing Filtered Item Retrieval in TypeScript\nDESCRIPTION: Implementation of a method to retrieve filtered menu items using HarnessPredicate.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyMenuHarness extends ComponentHarness {\n  static hostSelector = 'my-menu';\n\n  /** Gets a list of items in the menu, optionally filtered based on the given criteria. */\n  async getItems(filters: MyMenuItemHarnessFilters = {}): Promise<MyMenuItemHarness[]> {\n    const getFilteredItems = this.locatorForAll(MyMenuItemHarness.with(filters));\n    return getFilteredItems();\n  }\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Padding to Flat Tree Nodes in HTML\nDESCRIPTION: Demonstrates how to use the cdkTreeNodePadding directive to display level information for flat tree nodes. This padding helps visualize the hierarchy in flat tree structures.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/tree/tree.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<cdk-tree-node *cdkNodeDef=\"let node\" cdkTreeNodePadding>\n  {{node.value}}\n</cdk-tree-node>\n```\n\n----------------------------------------\n\nTITLE: Using Angular Material Experimental Component\nDESCRIPTION: HTML example showing how to use an experimental component (checkbox) in a template.\nSOURCE: https://github.com/angular/components/blob/main/src/material-experimental/README.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<mat-checkbox [checked]=\"isChecked\">Check me</mat-checkbox>\n```\n\n----------------------------------------\n\nTITLE: Removing HammerJS from package.json\nDESCRIPTION: Example of HammerJS dependency in package.json that needs to be removed during migration.\nSOURCE: https://github.com/angular/components/blob/main/guides/v9-hammerjs-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"hammerjs\": \"...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MatPrefix Directive\nDESCRIPTION: Angular Material prefix directive with text selection and selector configuration\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/input/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n_isText: boolean;\nset _isTextSelector(value: '');\nstatic ɵdir: i0.ɵɵDirectiveDeclaration<MatPrefix, \"[matPrefix], [matIconPrefix], [matTextPrefix]\", never, { \"_isTextSelector\": { \"alias\": \"matTextPrefix\"; \"required\": false; }; }, {}, never, never, true, never>;\nstatic ɵfac: i0.ɵɵFactoryDeclaration<MatPrefix, never>;\n```\n\n----------------------------------------\n\nTITLE: Component Declaration for CdkTextColumn\nDESCRIPTION: Defines the component declaration for the CdkTextColumn component, which simplifies creating text-based columns in a CDK table. It includes input properties like name, headerText, dataAccessor, and justify. The selector, input properties, and factory declaration are included.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n    static ɵcmp: i0.ɵɵComponentDeclaration<CdkTextColumn<any>, \"cdk-text-column\", never, { \"name\": { \"alias\": \"name\"; \"required\": false; }; \"headerText\": { \"alias\": \"headerText\"; \"required\": false; }; \"dataAccessor\": { \"alias\": \"dataAccessor\"; \"required\": false; }; \"justify\": { \"alias\": \"justify\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkTextColumn<any>, never>;\n```\n\n----------------------------------------\n\nTITLE: Defining ActionListHarnessFilters Interface\nDESCRIPTION: This interface extends the BaseHarnessFilters and is used to define the filter options for ActionListHarness. It allows filtering based on properties inherited from BaseHarnessFilters, enabling targeted selection of action lists during testing.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport interface ActionListHarnessFilters extends BaseHarnessFilters {\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining MatActionListHarness Class\nDESCRIPTION: This class extends MatListHarnessBase and represents a harness for testing Angular Material action lists. It provides methods for interacting with and querying action lists in tests, using MatActionListItemHarness for individual items and ActionListItemHarnessFilters for filtering.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport class MatActionListHarness extends MatListHarnessBase<typeof MatActionListItemHarness, MatActionListItemHarness, ActionListItemHarnessFilters> {\n    static hostSelector: string;\n    // (undocumented)\n    _itemHarness: typeof MatActionListItemHarness;\n    static with<T extends MatActionListHarness>(this: ComponentHarnessConstructor<T>, options?: ActionListHarnessFilters): HarnessPredicate<T>;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Mat Header Row Harness in Angular CDK Testing\nDESCRIPTION: The MatHeaderRowHarness class extends _MatRowHarnessBase to focus on header rows, including methods for filtering headers using specified filters. It defines a hostSelector and uses a _cellHarness for cell operations.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/table/testing/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatHeaderRowHarness extends _MatRowHarnessBase<typeof MatHeaderCellHarness, MatHeaderCellHarness> {\n    protected _cellHarness: typeof MatHeaderCellHarness;\n    static hostSelector: string;\n    static with<T extends MatHeaderRowHarness>(this: ComponentHarnessConstructor<T>, options?: RowHarnessFilters): HarnessPredicate<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MapRectangle in HTML Template\nDESCRIPTION: HTML template that renders a Google Map with a rectangular overlay. Uses the MapRectangle component to draw a rectangle based on the defined bounds.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-rectangle/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- google-maps-demo.component.html -->\n<google-map height=\"400px\" width=\"750px\" [center]=\"center\" [zoom]=\"zoom\">\n  <map-rectangle [bounds]=\"bounds\" />\n</google-map>\n```\n\n----------------------------------------\n\nTITLE: Defining Error Handling Functions for Icon Sanitization\nDESCRIPTION: Provides utility functions to report errors when sanitizing icon literals or URLs in Angular Material. No specific dependencies are required except the standard Angular package for types.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/icon/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error;\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error;\nexport function getMatIconNameNotFoundError(iconName: string): Error;\nexport function getMatIconNoHttpProviderError(): Error;\n```\n\n----------------------------------------\n\nTITLE: Implementing Tree Node Harness Methods\nDESCRIPTION: Defines testing harness methods for individual tree nodes, including expansion, collapse, and state querying\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tree/testing/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatTreeNodeHarness extends ContentContainerComponentHarness<string> {\n    collapse(): Promise<void>;\n    expand(): Promise<void>;\n    getLevel(): Promise<number>;\n    getText(): Promise<string>;\n    isDisabled(): Promise<boolean>;\n    isExpandable(): Promise<boolean>;\n    isExpanded(): Promise<boolean>;\n    toggle(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Directive Declaration for NoDataRowOutlet\nDESCRIPTION: Defines the directive declaration for the NoDataRowOutlet directive. This directive marks the location in the template where the \"no data\" row should be rendered when the table is empty. It includes the directive selector and factory declaration.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n    static ɵdir: i0.ɵɵDirectiveDeclaration<NoDataRowOutlet, \"[noDataRowOutlet]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n```\n\n----------------------------------------\n\nTITLE: Implementing MatChipAvatar directive for chip visual elements\nDESCRIPTION: A directive that provides an avatar or leading visual element to a chip. This is typically used for images or icons that appear at the start of a chip.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/chips/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatChipAvatar {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatChipAvatar, \"mat-chip-avatar, [matChipAvatar]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatChipAvatar, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Angular End-to-End Tests\nDESCRIPTION: Command to execute end-to-end tests for the Angular project. Requires a package that implements end-to-end testing capabilities.\nSOURCE: https://github.com/angular/components/blob/main/integration/harness-e2e-cli/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Lists with Meta Icons in Angular Material\nDESCRIPTION: Example showing how to add meta icons to list items using the matListItemMeta directive.\nSOURCE: https://github.com/angular/components/blob/main/src/material/list/list.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<mat-list>\n  @for (message of messages; track message) {\n    <mat-list-item>\n      <div matListItemMeta>\n        <mat-icon>folder</mat-icon>\n      </div>\n      <h3 matListItemTitle>{{message.from}}</h3>\n      <p matListItemLine>\n        <span>{{message.subject}}</span>\n        <span class=\"demo-2\"> -- {{message.content}}</span>\n      </p>\n    </mat-list-item>\n  }\n</mat-list>\n```\n\n----------------------------------------\n\nTITLE: Defining HorizontalConnectionPos Type in TypeScript\nDESCRIPTION: This type defines the possible horizontal connection positions for overlays.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n```\n\n----------------------------------------\n\nTITLE: Defining RowContext Interface in Angular CDK Tables\nDESCRIPTION: Composite interface that extends cell outlet contexts for both multi-row and single-row scenarios in CDK tables.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RowContext<T> extends CdkCellOutletMultiRowContext<T>, CdkCellOutletRowContext<T> {\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declarations for Angular Material Dialog Testing\nDESCRIPTION: Defines interfaces, classes and types for testing Angular Material dialogs. Includes dialog harness implementation, test opener utilities, and dialog section enumerations. Contains imports from Angular CDK testing and core modules.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/dialog/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as _angular_cdk_testing from '@angular/cdk/testing';\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { CdkDialogContainer } from '@angular/cdk/dialog';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ComponentRef } from '@angular/core';\nimport { ComponentType } from '@angular/cdk/overlay';\nimport { ContentContainerComponentHarness } from '@angular/cdk/testing';\nimport { Dialog } from '@angular/cdk/dialog';\nimport { DialogRef } from '@angular/cdk/dialog';\nimport { Direction } from '@angular/cdk/bidi';\nimport { EventEmitter } from '@angular/core';\nimport { HarnessPredicate } from '@angular/cdk/testing';\nimport * as i0 from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\nimport { Subject } from 'rxjs';\nimport { TemplateRef } from '@angular/core';\nimport { ViewContainerRef } from '@angular/core';\n\n// @public\nexport interface DialogHarnessFilters extends BaseHarnessFilters {\n}\n\n// @public\nexport class MatDialogHarness extends ContentContainerComponentHarness<MatDialogSection | string> {\n    // (undocumented)\n    protected _actions: _angular_cdk_testing.AsyncFactoryFn<_angular_cdk_testing.TestElement | null>;\n    close(): Promise<void>;\n    // (undocumented)\n    protected _content: _angular_cdk_testing.AsyncFactoryFn<_angular_cdk_testing.TestElement | null>;\n    getActionsText(): Promise<string>;\n    getAriaDescribedby(): Promise<string | null>;\n    getAriaLabel(): Promise<string | null>;\n    getAriaLabelledby(): Promise<string | null>;\n    getContentText(): Promise<string>;\n    getId(): Promise<string | null>;\n    getRole(): Promise<DialogRole | null>;\n    getText(): Promise<string>;\n    getTitleText(): Promise<string>;\n    static hostSelector: string;\n    // (undocumented)\n    protected _title: _angular_cdk_testing.AsyncFactoryFn<_angular_cdk_testing.TestElement | null>;\n    static with<T extends MatDialogHarness>(this: ComponentHarnessConstructor<T>, options?: DialogHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport enum MatDialogSection {\n    // (undocumented)\n    ACTIONS = \".mat-mdc-dialog-actions\",\n    // (undocumented)\n    CONTENT = \".mat-mdc-dialog-content\",\n    // (undocumented)\n    TITLE = \".mat-mdc-dialog-title\"\n}\n\n// @public\nexport class MatTestDialogOpener<T = unknown, R = unknown> implements OnDestroy {\n    constructor(...args: unknown[]);\n    closedResult: R | undefined;\n    protected static component: ComponentType<unknown> | undefined;\n    protected static config: MatDialogConfig | undefined;\n    // (undocumented)\n    dialog: MatDialog;\n    dialogRef: MatDialogRef<T, R>;\n    // (undocumented)\n    ngOnDestroy(): void;\n    static withComponent<T = unknown, R = unknown>(component: ComponentType<T>, config?: MatDialogConfig): ComponentType<MatTestDialogOpener<T, R>>;\n}\n\n// @public (undocumented)\nexport class MatTestDialogOpenerModule {\n}\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Defining StickySize Type for Dimension Calculations\nDESCRIPTION: Type that represents the size value for sticky elements, which can be a number, null, or undefined.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport type StickySize = number | null | undefined;\n```\n\n----------------------------------------\n\nTITLE: Setting Previous Item Active in ListKeyManager\nDESCRIPTION: This method sets the active item to a previous enabled item in the list.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/key-manager/list-key-manager.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsetPreviousItemActive(): void;\n```\n\n----------------------------------------\n\nTITLE: Material 2 to 3 Theme Version Check\nDESCRIPTION: Mixin implementation for handling both Material 2 and Material 3 theme versions.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_27\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\n@mixin my-comp-theme($theme) {\n  @if (mat.get-theme-version($theme) == 1) {\n    // Add your new M3 styles here.\n  } @else {\n    // Keep your old M2 styles here.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Map Transit Layer Component Definition\nDESCRIPTION: Angular component class for implementing a Google Maps transit layer overlay.\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MapTransitLayer implements OnInit, OnDestroy {\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    transitLayer?: google.maps.TransitLayer;\n    readonly transitLayerInitialized: EventEmitter<google.maps.TransitLayer>;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MapTransitLayer, \"map-transit-layer\", [\"mapTransitLayer\"], {}, { \"transitLayerInitialized\": \"transitLayerInitialized\"; }, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MapTransitLayer, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MapCircle Component in Angular TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the MapCircle component in an Angular TypeScript file. It sets up the necessary imports, defines the component, and initializes properties for the map center, zoom, circle center, and radius.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-circle/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// google-maps-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapCircle} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n    imports: [GoogleMap, MapCircle],\n})\nexport class GoogleMapDemo {\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n\n  circleCenter: google.maps.LatLngLiteral = {lat: 10, lng: 15};\n  radius = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Version Constant Declaration\nDESCRIPTION: Declares a constant named VERSION of type Version. This constant likely holds the version information for the Angular component or library.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/core/index.api.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport const VERSION: Version;\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete Theme in Angular Material 2\nDESCRIPTION: Demonstrates how to create a complete theme by combining color palettes with typography and density configurations using the m2-define-light-theme function. This creates a theme object that can be passed to component theme mixins.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\n$my-primary: mat.m2-define-palette(mat.$m2-indigo-palette, 500);\n$my-accent: mat.m2-define-palette(mat.$m2-pink-palette, A200, A100, A400);\n\n// The \"warn\" palette is optional and defaults to red if not specified.\n$my-warn: mat.m2-define-palette(mat.$m2-red-palette);\n\n$my-theme: mat.m2-define-light-theme((\n color: (\n   primary: $my-primary,\n   accent: $my-accent,\n   warn: $my-warn,\n ),\n typography: mat.m2-define-typography-config(),\n density: 0,\n));\n```\n\n----------------------------------------\n\nTITLE: Defining StickyDirection Type for Table Elements\nDESCRIPTION: Type definition that specifies the four possible directions for sticky positioning in tables.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport type StickyDirection = 'top' | 'bottom' | 'left' | 'right';\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for @angular/cdk_collections in TypeScript\nDESCRIPTION: This snippet shows the import statements for various dependencies used in the @angular/cdk_collections package. It includes imports from '@angular/core' and 'rxjs'.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/collections/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { IterableChangeRecord } from '@angular/core';\nimport { IterableChanges } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { TemplateRef } from '@angular/core';\nimport { ViewContainerRef } from '@angular/core';\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Command to build the Angular project. The built files will be stored in the 'dist/' directory.\nSOURCE: https://github.com/angular/components/blob/main/integration/harness-e2e-cli/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Defining a Tree Node Template in HTML\nDESCRIPTION: Illustrates how to define a tree node template using the cdkNodeDef directive. This template determines the appearance of each node and allows for data binding within the node.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/tree/tree.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cdk-tree-node *cdkNodeDef=\"let node\">\n  {{node.key}}: {{node.value}}\n</cdk-tree-node>\n```\n\n----------------------------------------\n\nTITLE: Declaring Angular Directive with TypeScript\nDESCRIPTION: This snippet declares an Angular directive using TypeScript and Angular's Ivy Compiler API. It defines a directive for selecting MatPrefix within Angular's component architecture, enabling specific label configurations according to associated properties. The declaration process involves using ɵɵDirectiveDeclaration from the Angular i0 package.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/select/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic ɵdir: i0.ɵɵDirectiveDeclaration<MatPrefix, \"[matPrefix], [matIconPrefix], [matTextPrefix]\", never, { \"_isTextSelector\": { \"alias\": \"matTextPrefix\"; \"required\": false; }; }, {}, never, never, true, never>;\n```\n\n----------------------------------------\n\nTITLE: Defining the MatIconRegistry Service\nDESCRIPTION: Implements the MatIconRegistry class for registering and managing SVG icons. Key methods include icon registration, default settings management, and dependency injection configuration.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/icon/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatIconRegistry implements OnDestroy {\n    constructor(_httpClient: HttpClient, _sanitizer: DomSanitizer, document: any, _errorHandler: ErrorHandler);\n    addSvgIcon(iconName: string, url: SafeResourceUrl, options?: IconOptions): this;\n    addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl, options?: IconOptions): this;\n    addSvgIconLiteral(iconName: string, literal: SafeHtml, options?: IconOptions): this;\n    addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml, options?: IconOptions): this;\n    addSvgIconResolver(resolver: IconResolver): this;\n    addSvgIconSet(url: SafeResourceUrl, options?: IconOptions): this;\n    addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl, options?: IconOptions): this;\n    addSvgIconSetLiteral(literal: SafeHtml, options?: IconOptions): this;\n    addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml, options?: IconOptions): this;\n    classNameForFontAlias(alias: string): string;\n    getDefaultFontSetClass(): string[];\n    getNamedSvgIcon(name: string, namespace?: string): Observable<SVGElement>;\n    getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement>;\n    ngOnDestroy(): void;\n    registerFontClassAlias(alias: string, classNames?: string): this;\n    setDefaultFontSetClass(...classNames: string[]): this;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatIconRegistry, [{ optional: true; }, null, { optional: true; }, null]>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<MatIconRegistry>;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Form Field Usage with Additional Features\nDESCRIPTION: Demonstrates usage of the custom form field control with additional features like prefix, hints, and validation.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-form-field-control.md#2025-04-21_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<mat-form-field>\n  <example-tel-input placeholder=\"Phone number\" required></example-tel-input>\n  <mat-icon matPrefix>phone</mat-icon>\n  <mat-hint>Include area code</mat-hint>\n</mat-form-field>\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Command to execute unit tests for the Angular project using the Karma test runner.\nSOURCE: https://github.com/angular/components/blob/main/integration/yarn-pnp-compat/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Defining FlexibleConnectedPositionStrategyOrigin Type in TypeScript\nDESCRIPTION: This type defines the origin for the FlexibleConnectedPositionStrategy, which can be an ElementRef, Element, or a Point with optional width and height.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type FlexibleConnectedPositionStrategyOrigin = ElementRef | Element | (Point & {\n    width?: number;\n    height?: number;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing CdkPortal and CdkPortalOutlet Classes\nDESCRIPTION: This snippet shows the implementation of CdkPortal and CdkPortalOutlet classes, which are used for creating and managing portals in Angular applications.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/portal/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class CdkPortal extends TemplatePortal {\n    constructor(...args: unknown[]);\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkPortal, \"[cdkPortal]\", [\"cdkPortal\"], {}, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkPortal, never>;\n}\n\nexport class CdkPortalOutlet extends BasePortalOutlet implements OnInit, OnDestroy {\n    constructor(...args: unknown[]);\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    attachDomPortal: (portal: DomPortal) => void;\n    readonly attached: EventEmitter<CdkPortalOutletAttachedRef>;\n    get attachedRef(): CdkPortalOutletAttachedRef;\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    get portal(): Portal<any> | null;\n    set portal(portal: Portal<any> | null | undefined | '');\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkPortalOutlet, \"[cdkPortalOutlet]\", [\"cdkPortalOutlet\"], { \"portal\": { \"alias\": \"cdkPortalOutlet\"; \"required\": false; }; }, { \"attached\": \"attached\"; }, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkPortalOutlet, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollDirection Type for Angular Material Tabs\nDESCRIPTION: This type definition specifies the possible scroll directions for tabs as either 'after' or 'before'. It's used to indicate the direction of tab scrolling.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ScrollDirection = 'after' | 'before';\n```\n\n----------------------------------------\n\nTITLE: Defining MatStepperHarness Class - TypeScript\nDESCRIPTION: The MatStepperHarness class extends ComponentHarness to facilitate the testing of Angular Material stepper components, providing methods to get the step orientation and retrieve step instances. Dependencies include the Angular CDK testing module.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/stepper/testing/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatStepperHarness extends ComponentHarness {\n    getOrientation(): Promise<StepperOrientation>;\n    getSteps(filter?: StepHarnessFilters): Promise<MatStepHarness[]>;\n    static hostSelector: string;\n    selectStep(filter?: StepHarnessFilters): Promise<void>;\n    static with(options?: StepperHarnessFilters): HarnessPredicate<MatStepperHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: Interface for Point Definition in TypeScript\nDESCRIPTION: Defines a Point interface with x and y properties, representing coordinates on a plane. Useful for graphical manipulations and operations requiring precise location data.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/drag-drop/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Point {\n    // (undocumented)\n    x: number;\n    // (undocumented)\n    y: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MapKmlLayer in Angular TypeScript Component\nDESCRIPTION: This snippet shows how to set up a component that uses the GoogleMap and MapKmlLayer from @angular/google-maps. It defines the center coordinates, zoom level, and KML URL for the map.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-kml-layer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// google-maps-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapKmlLayer} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap, MapKmlLayer],\n})\nexport class GoogleMapDemo {\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n\n  kmlUrl = 'https://developers.google.com/maps/documentation/javascript/examples/kml/westcampus.kml';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoSizeVirtualScrollStrategy in Angular CDK\nDESCRIPTION: This snippet demonstrates how to use the 'autosize' directive with cdk-virtual-scroll-viewport for handling items of different sizes. It includes the basic implementation without additional configuration.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk-experimental/scrolling/scrolling.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<cdk-virtual-scroll-viewport autosize>\n  ...\n</cdk-virtual-scroll-viewport>\n```\n\n----------------------------------------\n\nTITLE: Implementing MatSuffix Directive\nDESCRIPTION: Angular Material suffix directive with text selection and selector configuration\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/input/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n_isText: boolean;\nset _isTextSelector(value: '');\nstatic ɵdir: i0.ɵɵDirectiveDeclaration<MatSuffix, \"[matSuffix], [matIconSuffix], [matTextSuffix]\", never, { \"_isTextSelector\": { \"alias\": \"matTextSuffix\"; \"required\": false; }; }, {}, never, never, true, never>;\nstatic ɵfac: i0.ɵɵFactoryDeclaration<MatSuffix, never>;\n```\n\n----------------------------------------\n\nTITLE: Defining OverlaySizeConfig Interface in TypeScript\nDESCRIPTION: This interface defines the size configuration options for an overlay, including width, height, and their minimum and maximum values.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface OverlaySizeConfig {\n    // (undocumented)\n    height?: number | string;\n    // (undocumented)\n    maxHeight?: number | string;\n    // (undocumented)\n    maxWidth?: number | string;\n    // (undocumented)\n    minHeight?: number | string;\n    // (undocumented)\n    minWidth?: number | string;\n    // (undocumented)\n    width?: number | string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CDK Overlay Styles in SCSS\nDESCRIPTION: Shows how to import the prebuilt CDK overlay styles in a global stylesheet. This is necessary for the CDK dialogs to work correctly if not using Angular Material.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/dialog/dialog.md#2025-04-21_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@import '@angular/cdk/overlay-prebuilt.css';\n```\n\n----------------------------------------\n\nTITLE: Rendering Map Directions in Angular Template\nDESCRIPTION: This HTML template shows how to use the google-map component with the map-directions-renderer. It demonstrates the use of the async pipe to handle the Observable directionsResults.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-directions-renderer/README.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- google-maps-demo.component.html -->\n<google-map height=\"400px\" width=\"750px\" [center]=\"center\" [zoom]=\"zoom\">\n  @if (directionsResults$ | async; as directionsResults) {\n    <map-directions-renderer [directions]=\"directionsResults\" />\n  }\n</google-map>\n```\n\n----------------------------------------\n\nTITLE: Defining Core Testing Types in TypeScript\nDESCRIPTION: Defines core type definitions for async operations and predicates used in test harnesses\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AsyncFactoryFn<T> = () => Promise<T>;\n\nexport type AsyncOptionPredicate<T, O> = (item: T, option: O) => Promise<boolean>;\n\nexport type AsyncPredicate<T> = (item: T) => Promise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Components Dev Server with Bazel\nDESCRIPTION: Command to run the development server using Bazel build system. The server will be available at http://localhost:4200/.\nSOURCE: https://github.com/angular/components/blob/main/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm bazel run //docs:serve\n```\n\n----------------------------------------\n\nTITLE: Accessibility Implementation with MatFormField Integration\nDESCRIPTION: Implementation showing how to integrate with MatFormField for proper accessibility labeling.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-form-field-control.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyTelInput implements MatFormFieldControl<MyTel> {\n  ...\n\n  constructor(...\n              @Optional() public parentFormField: MatFormField) {\n```\n\nLANGUAGE: html\nCODE:\n```\n@Component({\n  selector: 'example-tel-input',\n  template: `\n    <div role=\"group\" [formGroup]=\"parts\"\n         [attr.aria-describedby]=\"describedBy\"\n         [attr.aria-labelledby]=\"parentFormField?.getLabelId()\">`\n```\n\n----------------------------------------\n\nTITLE: Basic SCSS Component Styling\nDESCRIPTION: Initial SCSS styling for a carousel component with basic structural and visual properties.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_21\n\nLANGUAGE: scss\nCODE:\n```\n.my-carousel {\n  display: flex;\n  font-family: serif;\n}\n\n.my-carousel-button {\n  border-radius: 50%;\n  color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Server-side Component Rendering\nDESCRIPTION: Bazel test command to verify that all components can successfully render on the server. This runs the prerender test to ensure components are compatible with server-side rendering.\nSOURCE: https://github.com/angular/components/blob/main/src/universal-app/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm bazel test src/universal-app:prerender_test\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Development Server\nDESCRIPTION: Command to run the Angular development server, which serves the application at http://localhost:4200/ and provides auto-reload functionality.\nSOURCE: https://github.com/angular/components/blob/main/integration/yarn-pnp-compat/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Defining StickyOffset Type for Position Calculation\nDESCRIPTION: Type that represents the offset value for sticky elements, which can be a number, null, or undefined.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport type StickyOffset = number | null | undefined;\n```\n\n----------------------------------------\n\nTITLE: Implementing MapBicyclingLayer Component in TypeScript\nDESCRIPTION: TypeScript component implementation that sets up a Google Map with bicycling layer support. Defines a component with map center coordinates and zoom level configuration.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-bicycling-layer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// google-maps-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapBicyclingLayer} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap, MapBicyclingLayer],\n})\nexport class GoogleMapDemo {\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular JSON for MDC Web Sass\nDESCRIPTION: Angular JSON configuration to include node_modules in Sass include paths for MDC Web Sass files access.\nSOURCE: https://github.com/angular/components/blob/main/src/material-experimental/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"styles\": [\n     \"src/styles.scss\"\n   ],\n   \"stylePreprocessorOptions\": {\n     \"includePaths\": [\n       \"node_modules/\"\n     ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Material Slide Toggle Module Declaration\nDESCRIPTION: Module configuration for registering and exporting the MatSlideToggle component within an Angular application\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/slide-toggle/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatSlideToggleModule {\n  static ɵfac: i0.ɵɵFactoryDeclaration<MatSlideToggleModule, never>;\n  static ɵinj: i0.ɵɵInjectorDeclaration<MatSlideToggleModule>;\n  static ɵmod: i0.ɵɵNgModuleDeclaration<MatSlideToggleModule, never, [...], [...]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Angular CDK Table Dependencies\nDESCRIPTION: This snippet shows the import statements for various Angular core and RxJS dependencies used in the CDK Table implementation.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterContentChecked } from '@angular/core';\nimport { AfterContentInit } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { DoCheck } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { IterableChangeRecord } from '@angular/core';\nimport { IterableChanges } from '@angular/core';\nimport { IterableDiffer } from '@angular/core';\nimport { IterableDiffers } from '@angular/core';\nimport { NgIterable } from '@angular/core';\nimport { NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { QueryList } from '@angular/core';\nimport { SimpleChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Subscription } from 'rxjs';\nimport { TemplateRef } from '@angular/core';\nimport { TrackByFunction } from '@angular/core';\nimport { ViewContainerRef } from '@angular/core';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Progress Spinner Usage in HTML\nDESCRIPTION: This snippet shows the basic usage of the mat-progress-spinner component in HTML. It's a placeholder for a more detailed example that would be expanded elsewhere in the documentation.\nSOURCE: https://github.com/angular/components/blob/main/src/material/progress-spinner/progress-spinner.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(progress-spinner-overview) -->\n```\n\n----------------------------------------\n\nTITLE: Toggling Angular Material Menu Programmatically with TypeScript\nDESCRIPTION: Example of how to programmatically control a mat-menu through TypeScript by getting a reference to the MatMenuTrigger using ViewChild and calling the openMenu() method.\nSOURCE: https://github.com/angular/components/blob/main/src/material/menu/menu.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyComponent {\n  @ViewChild(MatMenuTrigger) trigger: MatMenuTrigger;\n\n  someMethod() {\n    this.trigger.openMenu();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Map Rectangle Component Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for a map rectangle component with bound properties and event handlers.\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nstatic ɵdir: i0.ɵɵDirectiveDeclaration<MapRectangle, \"map-rectangle\", [\"mapRectangle\"], { \"options\": { \"alias\": \"options\"; \"required\": false; }; \"bounds\": { \"alias\": \"bounds\"; \"required\": false; }; }, { \"boundsChanged\": \"boundsChanged\"; \"rectangleClick\": \"rectangleClick\"; \"rectangleDblclick\": \"rectangleDblclick\"; \"rectangleDrag\": \"rectangleDrag\"; \"rectangleDragend\": \"rectangleDragend\"; \"rectangleDragstart\": \"rectangleDragstart\"; \"rectangleMousedown\": \"rectangleMousedown\"; \"rectangleMousemove\": \"rectangleMousemove\"; \"rectangleMouseout\": \"rectangleMouseout\"; \"rectangleMouseover\": \"rectangleMouseover\"; \"rectangleMouseup\": \"rectangleMouseup\"; \"rectangleRightclick\": \"rectangleRightclick\"; \"rectangleInitialized\": \"rectangleInitialized\"; }, never, never, true, never>;\n```\n\n----------------------------------------\n\nTITLE: Theme Value Extraction\nDESCRIPTION: Implementation of theme mixins with value extraction from the theme object.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_24\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:map';\n@use '@angular/material' as mat;\n\n@mixin color($theme) {\n  .my-carousel-button {\n    // Read the 500 hue from the primary color palette.\n    color: mat.get-theme-color($theme, primary, 500);\n  }\n}\n\n@mixin typography($theme) {\n  .my-carousel {\n    // Get the headline font from the theme.\n    font: mat.get-theme-typography($theme, headline-1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing HammerJS side-effect import\nDESCRIPTION: Example of a side-effect import for HammerJS that should be removed during migration.\nSOURCE: https://github.com/angular/components/blob/main/guides/v9-hammerjs-migration.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'hammerjs';\n```\n\n----------------------------------------\n\nTITLE: Defining SharedResizeObserver Class in TypeScript for Angular CDK\nDESCRIPTION: This code snippet defines a SharedResizeObserver class that implements OnDestroy interface. It provides methods for observing element resizing and handles cleanup on destruction. The class is decorated with Angular's dependency injection metadata.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/observers/private/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class SharedResizeObserver implements OnDestroy {\n    constructor();\n    // (undocumented)\n    ngOnDestroy(): void;\n    observe(target: Element, options?: ResizeObserverOptions): Observable<ResizeObserverEntry[]>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<SharedResizeObserver, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<SharedResizeObserver>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayDataSource Class in TypeScript\nDESCRIPTION: This snippet defines the ArrayDataSource class, which extends DataSource<T>. It implements methods for connecting and disconnecting data sources.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/collections/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ArrayDataSource<T> extends DataSource<T> {\n    constructor(_data: readonly T[] | Observable<readonly T[]>);\n    connect(): Observable<readonly T[]>;\n    disconnect(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Injection Tokens for Radio Options and Group\nDESCRIPTION: This snippet defines injection tokens used for MAT_RADIO_DEFAULT_OPTIONS and MAT_RADIO_GROUP in Angular. The former represents the default options for radio buttons, while the latter is used for grouping radio buttons together. No dependencies are needed beyond Angular core and CDK.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/radio/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport const MAT_RADIO_DEFAULT_OPTIONS: InjectionToken<MatRadioDefaultOptions>;\n\n// @public @deprecated\nexport function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions;\n\n// @public\nexport const MAT_RADIO_GROUP: InjectionToken<MatRadioGroup>;\n\n// @public\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any;\n```\n\n----------------------------------------\n\nTITLE: Component Declaration for Structural Styles Loader\nDESCRIPTION: Declares the component definition for the _StructuralStylesLoader. It specifies the component's selector, the template, and other metadata that Angular uses to render the component. The static ɵcmp property is part of the Angular Ivy rendering engine and provides the necessary information for creating instances of the component.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/core/index.api.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nstatic ɵcmp: i0.ɵɵComponentDeclaration<_StructuralStylesLoader, \"structural-styles\", never, {}, {}, never, never, true, never>;\n```\n\n----------------------------------------\n\nTITLE: MapGroundOverlay Template Implementation\nDESCRIPTION: HTML template that renders a Google Map with a ground overlay. Uses property binding to set the map dimensions, center coordinates, zoom level, and overlay parameters.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-ground-overlay/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- google-maps-demo.component.html -->\n<google-map height=\"400px\" width=\"750px\" [center]=\"center\" [zoom]=\"zoom\">\n  <map-ground-overlay [url]=\"imageUrl\" [bounds]=\"imageBounds\" />\n</google-map>\n```\n\n----------------------------------------\n\nTITLE: Setting Active Item by Index in ListKeyManager\nDESCRIPTION: This method sets the active item to the item at the specified index.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/key-manager/list-key-manager.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetActiveItem(index: number): void;\n```\n\n----------------------------------------\n\nTITLE: TextOptions Interface Definition\nDESCRIPTION: Interface defining options for text operations, including an optional exclude property for filtering\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/testing/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TextOptions {\n    exclude?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt for Angular Material Documentation\nDESCRIPTION: This snippet defines the robots.txt file for the Angular Material documentation site. It specifies the sitemap location and allows unrestricted access to all pages for web crawlers.\nSOURCE: https://github.com/angular/components/blob/main/docs/src/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSitemap: https://material.angular.io/sitemap.xml\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Declaration of Deprecated Animations in MatSort\nDESCRIPTION: This constant `matSortAnimations` provides various animation properties for sorting UI components, though marked as deprecated, suggesting future removal or replacement.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sort/index.api.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const matSortAnimations: {\n    readonly indicator: any;\n    readonly leftPointer: any;\n    readonly rightPointer: any;\n    readonly arrowOpacity: any;\n    readonly arrowPosition: any;\n    readonly allowChildren: any;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing MatDrawerContentHarness in Angular\nDESCRIPTION: The class MatDrawerContentHarness is defined to extend ContentContainerComponentHarness, allowing access to specific features of the drawer content for testing purposes. It also offers a static method for applying filters via HarnessPredicate.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sidenav/testing/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatDrawerContentHarness extends ContentContainerComponentHarness<string> {\n    static hostSelector: string;\n    static with(options?: DrawerContentHarnessFilters): HarnessPredicate<MatDrawerContentHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: MatGridTileSection Enum\nDESCRIPTION: Defines the `MatGridTileSection` enum, which represents the different sections within a grid tile (HEADER, FOOTER). These are used as selectors within the `MatGridTileHarness` to access content within specific sections of the tile.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/grid-list/testing/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n \"// @public\\nexport enum MatGridTileSection {\\n    // (undocumented)\\n    FOOTER = \\\".mat-grid-tile-footer\\\",\\n    // (undocumented)\\n    HEADER = \\\".mat-grid-tile-header\\\"\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Horizontal Orientation in Angular CDK Listbox\nDESCRIPTION: Shows how to set a horizontal orientation for keyboard navigation in a CDK listbox using the cdkListboxOrientation input.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/listbox/listbox.md#2025-04-21_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<ul cdkListbox cdkListboxOrientation=\"horizontal\">\n  <li cdkOption value=\"1\">Option 1</li>\n  <li cdkOption value=\"2\">Option 2</li>\n  <li cdkOption value=\"3\">Option 3</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining TimepickerInputHarnessFilters Interface in Angular\nDESCRIPTION: This snippet defines the TimepickerInputHarnessFilters interface that enhances filtering capabilities for timepicker input elements, allowing for custom placeholders and values to be specified during tests.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/timepicker/testing/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TimepickerInputHarnessFilters extends BaseHarnessFilters {\n    placeholder?: string | RegExp;\n    value?: string | RegExp;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Tree Component with Material Design\nDESCRIPTION: Command to generate an Angular component that uses the Material Design tree component to visualize a nested folder structure.\nSOURCE: https://github.com/angular/components/blob/main/guides/schematics.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nng generate @angular/material:tree <component-name>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Custom Theme Colors in Sass\nDESCRIPTION: Example of how to import and use the generated custom theme colors in a Sass theme file. The snippet shows how to apply the primary and tertiary palettes to an Angular Material theme.\nSOURCE: https://github.com/angular/components/blob/main/src/material/schematics/ng-generate/theme-color/README.md#2025-04-21_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n@use './path/to/_theme-colors' as my-theme; // location of generated file\n\nhtml {\n  @include mat.theme((\n    color: (\n      primary: my-theme.$primary-palette,\n      tertiary: my-theme.$tertiary-palette,\n    ),\n    typography: Roboto,\n    density: 0,\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition for PreviewContainer in TypeScript\nDESCRIPTION: Defines a type alias for various potential types of preview containers, including global or parent elements as well as ElementRef or HTMLElement types. This is crucial for scenarios where previews are dynamically assigned or need to fit into specific containers.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/drag-drop/index.api.md#2025-04-21_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type PreviewContainer = 'global' | 'parent' | ElementRef<HTMLElement> | HTMLElement;\n```\n\n----------------------------------------\n\nTITLE: Creating Git Branch for Angular Material Fix\nDESCRIPTION: Commands for creating and checking out a new git branch for implementing fixes in Angular Material\nSOURCE: https://github.com/angular/components/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b my-fix-branch main\n```\n\n----------------------------------------\n\nTITLE: Empty TypeScript Package Documentation\nDESCRIPTION: An empty TypeScript code block indicating no package documentation comment exists for this package.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Creating Injection Token for Sticky Positioning Listener\nDESCRIPTION: Defines an injection token for services that listen to sticky positioning updates in CDK tables.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport const STICKY_POSITIONING_LISTENER: InjectionToken<StickyPositioningListener>;\n```\n\n----------------------------------------\n\nTITLE: Directive Declaration for CdkRecycleRows\nDESCRIPTION: Defines the directive declaration for the CdkRecycleRows directive.  This directive allows rows to be recycled for performance optimization in large tables. It includes the directive selector, type definition, and factory declaration.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkRecycleRows, \"cdk-table[recycleRows], table[cdk-table][recycleRows]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkRecycleRows, never>;\n```\n\n----------------------------------------\n\nTITLE: Deprecated Ink Bar Positioner Factory\nDESCRIPTION: This code defines a deprecated factory function for the ink bar positioner. While functional, it is recommended to use alternative approaches for customizing the ink bar's positioning due to the deprecation.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public @deprecated\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Highlightable Interface in TypeScript\nDESCRIPTION: Extends ListKeyManagerOption interface to include methods for setting active and inactive styles, used with ActiveDescendantKeyManager.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/a11y.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Highlightable extends ListKeyManagerOption {\n  setActiveStyles(): void;\n  setInactiveStyles(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SortHeaderHarnessFilters Interface in Angular Testing\nDESCRIPTION: The SortHeaderHarnessFilters interface extends BaseHarnessFilters and adds properties that allow filtering of sort headers. This includes an optional label property for targeting specific headers and an optional sortDirection property for specifying the desired sort direction. This interface is also undocumented.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sort/testing/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface SortHeaderHarnessFilters extends BaseHarnessFilters {\n    // (undocumented)\n    label?: string | RegExp;\n    // (undocumented)\n    sortDirection?: SortDirection;\n}\n```\n\n----------------------------------------\n\nTITLE: MatSliderChange Class Declaration\nDESCRIPTION: This code defines the `MatSliderChange` class, which represents the event emitted when the value of the slider changes. It includes properties for the parent slider component, the source thumb that triggered the change, and the new value of the slider.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/slider/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// @public @deprecated\nexport class MatSliderChange {\n    parent: _MatSlider;\n    source: _MatSliderThumb;\n    value: number;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Injection Tokens for Icon Options\nDESCRIPTION: Defines injection tokens for default icon options and icon locations, including MAT_ICON_DEFAULT_OPTIONS and MAT_ICON_LOCATION. These provide customization points for developers.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/icon/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const MAT_ICON_DEFAULT_OPTIONS: InjectionToken<MatIconDefaultOptions>;\n\nexport const MAT_ICON_LOCATION: InjectionToken<MatIconLocation>;\n```\n\n----------------------------------------\n\nTITLE: Applying High Contrast Overrides in Sass\nDESCRIPTION: Example showing how to apply high contrast overrides for accessibility. This snippet demonstrates how to use the generated high-contrast mixin inside a media query.\nSOURCE: https://github.com/angular/components/blob/main/src/material/schematics/ng-generate/theme-color/README.md#2025-04-21_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@media (prefers-contrast: more) {\n  @include my-theme.high-contrast-overrides(light);\n}\n```\n\n----------------------------------------\n\nTITLE: ID Generator Service Implementation\nDESCRIPTION: Service class for generating unique IDs with prefixes. Includes Angular dependency injection decorators.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/a11y/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class _IdGenerator {\n    getId(prefix: string): string;\n    static ɵfac: i0.ɵɵFactoryDeclaration<_IdGenerator, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<_IdGenerator>;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MarkerClusterer Library in HTML\nDESCRIPTION: Script tag required to load the Google Maps MarkerClusterer library from CDN.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-marker-clusterer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@googlemaps/markerclusterer/dist/index.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Rebasing and Force Pushing Changes\nDESCRIPTION: Commands for rebasing branch against main and force pushing updates\nSOURCE: https://github.com/angular/components/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase upstream/main -i\ngit push -f\n```\n\n----------------------------------------\n\nTITLE: Directive Declaration for FooterRowOutlet\nDESCRIPTION: Defines the directive declaration for the FooterRowOutlet directive. This directive marks the location in the template where footer rows should be rendered. It includes the directive selector and factory declaration.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n    static ɵdir: i0.ɵɵDirectiveDeclaration<FooterRowOutlet, \"[footerRowOutlet]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<FooterRowOutlet, never>;\n```\n\n----------------------------------------\n\nTITLE: Declaration of Angular InjectionToken for MatSortDefaultOptions\nDESCRIPTION: This TypeScript snippet declares an injection token `MAT_SORT_DEFAULT_OPTIONS` utilized within Angular to provide default sorting options. It's a placeholder for dependency injection.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sort/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const MAT_SORT_DEFAULT_OPTIONS: InjectionToken<MatSortDefaultOptions>;\n```\n\n----------------------------------------\n\nTITLE: Implementing HighContrastMode Detection in Angular\nDESCRIPTION: Interface for detecting and managing high contrast mode in Angular applications. Provides methods to apply CSS classes and track high contrast mode state.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/a11y/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n_applyBodyHighContrastModeCssClasses(): void;\ngetHighContrastMode(): HighContrastMode;\nngOnDestroy(): void;\n```\n\n----------------------------------------\n\nTITLE: Importing Predefined Palettes in Angular Material 2\nDESCRIPTION: Demonstrates how to import and use predefined Material Design color palettes in a Sass file. This example shows importing the indigo palette from Angular Material.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\n$my-palette: mat.$m2-indigo-palette;\n```\n\n----------------------------------------\n\nTITLE: Running Angular Components Unit Tests\nDESCRIPTION: Command to execute unit tests using Karma test runner via Bazel build system.\nSOURCE: https://github.com/angular/components/blob/main/docs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm bazel test //docs/...\n```\n\n----------------------------------------\n\nTITLE: Pushing Branch to GitHub\nDESCRIPTION: Git command for pushing local branch to remote repository\nSOURCE: https://github.com/angular/components/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit push my-fork my-fix-branch\n```\n\n----------------------------------------\n\nTITLE: Implementing _Schedule Class for Task Management\nDESCRIPTION: Internal class used for scheduling and managing tasks in Angular CDK tables, containing arrays for normal and end-of-cycle tasks.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport class _Schedule {\n    // (undocumented)\n    endTasks: (() => unknown)[];\n    // (undocumented)\n    tasks: (() => unknown)[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatListItemHarness Class\nDESCRIPTION: This class extends MatListItemHarnessBase and represents a harness for testing Angular Material list items. It provides a filter for locating specific list items within a list.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport class MatListItemHarness extends MatListItemHarnessBase {\n    static hostSelector: string;\n    static with<T extends MatListItemHarness>(this: ComponentHarnessConstructor<T>, options?: ListItemHarnessFilters): HarnessPredicate<T>;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing MatSidenavContentHarness in Angular\nDESCRIPTION: This code snippet introduces MatSidenavContentHarness, a class that extends ContentContainerComponentHarness for interacting with sidenav content elements in tests, offering static methods for filter-based harness creation.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sidenav/testing/index.api.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatSidenavContentHarness extends ContentContainerComponentHarness<string> {\n    static hostSelector: string;\n    static with(options?: DrawerContentHarnessFilters): HarnessPredicate<MatSidenavContentHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: CdkTable with TrackBy Function\nDESCRIPTION: This example demonstrates how to use a trackBy function with CdkTable to improve performance by uniquely identifying rows.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/table/table.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<table cdk-table [dataSource]=\"dataSource\" [trackBy]=\"myTrackById\">\n```\n\n----------------------------------------\n\nTITLE: Post-Merge Branch Cleanup\nDESCRIPTION: Series of commands for cleaning up after pull request is merged\nSOURCE: https://github.com/angular/components/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit push my-fork --delete my-fix-branch\ngit checkout main -f\ngit branch -D my-fix-branch\ngit pull --ff upstream main\n```\n\n----------------------------------------\n\nTITLE: Defining MatChipsModule in Angular\nDESCRIPTION: Declaration of the MatChipsModule, including its factory, injector, and NgModule metadata with imports and exports of various chip-related components.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/chips/index.api.md#2025-04-21_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatChipsModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatChipsModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatChipsModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatChipsModule, never, [typeof MatCommonModule, typeof MatRippleModule, typeof MatChipAction, typeof MatChip, typeof MatChipAvatar, typeof MatChipEditInput, typeof MatChipGrid, typeof MatChipInput, typeof MatChipListbox, typeof MatChipOption, typeof MatChipRemove, typeof MatChipRow, typeof MatChipSet, typeof MatChipTrailingIcon], [typeof MatCommonModule, typeof MatChip, typeof MatChipAvatar, typeof MatChipEditInput, typeof MatChipGrid, typeof MatChipInput, typeof MatChipListbox, typeof MatChipOption, typeof MatChipRemove, typeof MatChipRow, typeof MatChipSet, typeof MatChipTrailingIcon]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatDatepickerActions Class in TypeScript\nDESCRIPTION: Implements a component for custom action buttons in the datepicker footer. It handles lifecycle events for initialization and cleanup, with content projection for action buttons.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatDatepickerActions implements AfterViewInit, OnDestroy {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    _template: TemplateRef<unknown>;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatDatepickerActions, \"mat-datepicker-actions, mat-date-range-picker-actions\", never, {}, {}, never, [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDatepickerActions, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring MatChipTrailingIcon Component in Angular\nDESCRIPTION: Declaration of the MatChipTrailingIcon component, extending MatChipAction with specific properties and Angular metadata.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/chips/index.api.md#2025-04-21_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatChipTrailingIcon extends MatChipAction {\n    isInteractive: boolean;\n    _isPrimary: boolean;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatChipTrailingIcon, \"mat-chip-trailing-icon, [matChipTrailingIcon]\", never, {}, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatChipTrailingIcon, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatIconTestingModule Class in Angular TypeScript\nDESCRIPTION: Declares the MatIconTestingModule class, representing an Angular module for testing configurations related to material icons. Uses Angular core utilities such as Factory, Injector, and NgModule declarations. Part of the Angular Material testing framework.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/icon/testing/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class MatIconTestingModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatIconTestingModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatIconTestingModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatIconTestingModule, never, never, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultMatCalendarRangeStrategy Class in TypeScript\nDESCRIPTION: Implementation of the DefaultMatCalendarRangeStrategy class which provides default range selection behavior for the calendar component. It handles range creation, drag operations, and preview generation.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class DefaultMatCalendarRangeStrategy<D> implements MatDateRangeSelectionStrategy<D> {\n    constructor(_dateAdapter: DateAdapter<D>);\n    // (undocumented)\n    createDrag(dragOrigin: D, originalRange: DateRange<D>, newDate: D): DateRange<D> | null;\n    // (undocumented)\n    createPreview(activeDate: D | null, currentRange: DateRange<D>): DateRange<D>;\n    // (undocumented)\n    selectionFinished(date: D, currentRange: DateRange<D>): DateRange<D>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<DefaultMatCalendarRangeStrategy<any>, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<DefaultMatCalendarRangeStrategy<any>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SubheaderHarnessFilters Interface\nDESCRIPTION: This interface extends BaseHarnessFilters and defines filter options specifically for MatSubheaderHarness. It includes a property for filtering based on the text content of the subheader, allowing for targeted selection of subheaders during testing.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public (undocumented)\nexport interface SubheaderHarnessFilters extends BaseHarnessFilters {\n    // (undocumented)\n    text?: string | RegExp;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Marker Clusterer Interface Definitions\nDESCRIPTION: TypeScript interfaces and enums defining options and event types for marker clustering functionality.\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum MarkerClustererEvents {\n    CLUSTER_CLICK = \"click\",\n    CLUSTERING_BEGIN = \"clusteringbegin\",\n    CLUSTERING_END = \"clusteringend\"\n}\n\nexport interface MarkerClustererOptions {\n    ariaLabelFn?: AriaLabelFn;\n    averageCenter?: boolean;\n    batchSize?: number;\n    batchSizeIE?: number;\n    calculator?: Calculator;\n    clusterClass?: string;\n    enableRetinaIcons?: boolean;\n    gridSize?: number;\n    ignoreHidden?: boolean;\n    imageExtension?: string;\n    imagePath?: string;\n    imageSizes?: number[];\n    maxZoom?: number;\n    minimumClusterSize?: number;\n    styles?: ClusterIconStyle[];\n    title?: string;\n    zIndex?: number;\n    zoomOnClick?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatListOptionHarness Class\nDESCRIPTION: This class extends MatListItemHarnessBase and represents a harness for testing Angular Material list options (e.g., items in a selection list). It provides methods for interacting with list options, such as selecting, deselecting, focusing, and blurring, along with methods to determine the checkbox/radio position and selected state.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/list/testing/index.api.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport class MatListOptionHarness extends MatListItemHarnessBase {\n    blur(): Promise<void>;\n    deselect(): Promise<void>;\n    focus(): Promise<void>;\n    getCheckboxPosition(): Promise<MatListOptionTogglePosition>;\n    getRadioPosition(): Promise<MatListOptionTogglePosition>;\n    static hostSelector: string;\n    isFocused(): Promise<boolean>;\n    isSelected(): Promise<boolean>;\n    select(): Promise<void>;\n    toggle(): Promise<void>;\n    static with<T extends MatListOptionHarness>(this: ComponentHarnessConstructor<T>, options?: ListOptionHarnessFilters): HarnessPredicate<T>;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Alternative CdkTable Template without Native Table Elements\nDESCRIPTION: This example demonstrates an alternative approach to creating a CdkTable without using native HTML table elements, providing more control over styling.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/table/table.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<cdk-table [dataSource]=\"dataSource\">\n  <!-- User name Definition -->\n  <ng-container cdkColumnDef=\"username\">\n    <cdk-header-cell *cdkHeaderCellDef> User name </cdk-header-cell>\n    <cdk-cell *cdkCellDef=\"let row\"> {{row.username}} </cdk-cell>\n  </ng-container>\n\n  <!-- Age Definition -->\n  <ng-container cdkColumnDef=\"age\">\n    <cdk-header-cell *cdkHeaderCellDef> Age </cdk-header-cell>\n    <cdk-cell *cdkCellDef=\"let row\"> {{row.age}} </cdk-cell>\n  </ng-container>\n\n  <!-- Title Definition -->\n  <ng-container cdkColumnDef=\"title\">\n    <cdk-header-cell *cdkHeaderCellDef> Title </cdk-header-cell>\n    <cdk-cell *cdkCellDef=\"let row\"> {{row.title}} </cdk-cell>\n  </ng-container>\n\n  <!-- Header and Row Declarations -->\n  <cdk-header-row *cdkHeaderRowDef=\"['username', 'age', 'title']\"></cdk-header-row>\n  <cdk-row *cdkRowDef=\"let row; columns: ['username', 'age', 'title']\"></cdk-row>\n</cdk-table>\n```\n\n----------------------------------------\n\nTITLE: Defining GoogleMapsModule in TypeScript\nDESCRIPTION: This snippet defines the GoogleMapsModule, which includes various map-related components and directives for use in Angular applications.\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class GoogleMapsModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<GoogleMapsModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<GoogleMapsModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<GoogleMapsModule, never, [typeof GoogleMap, typeof MapBaseLayer, typeof MapBicyclingLayer, typeof MapCircle, typeof MapDirectionsRenderer, typeof MapGroundOverlay, typeof MapHeatmapLayer, typeof MapInfoWindow, typeof MapKmlLayer, typeof MapMarker, typeof MapAdvancedMarker, typeof DeprecatedMapMarkerClusterer, typeof MapPolygon, typeof MapPolyline, typeof MapRectangle, typeof MapTrafficLayer, typeof MapTransitLayer, typeof MapMarkerClusterer], [typeof GoogleMap, typeof MapBaseLayer, typeof MapBicyclingLayer, typeof MapCircle, typeof MapDirectionsRenderer, typeof MapGroundOverlay, typeof MapHeatmapLayer, typeof MapInfoWindow, typeof MapKmlLayer, typeof MapMarker, typeof MapAdvancedMarker, typeof DeprecatedMapMarkerClusterer, typeof MapPolygon, typeof MapPolyline, typeof MapRectangle, typeof MapTrafficLayer, typeof MapTransitLayer, typeof MapMarkerClusterer]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Stepper Internationalization\nDESCRIPTION: Defines a provider for stepper internationalization, allowing for custom translations of stepper labels. It requires the MatStepperIntl for localization and is marked as deprecated.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/stepper/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @public @deprecated\nexport const MAT_STEPPER_INTL_PROVIDER: {\n    provide: typeof MatStepperIntl;\n    deps: Optional[][];\n    useFactory: typeof MAT_STEPPER_INTL_PROVIDER_FACTORY;\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @public @deprecated\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl): MatStepperIntl;\n```\n\n----------------------------------------\n\nTITLE: MatTabHeaderPosition Type Definition in TypeScript\nDESCRIPTION: Type definition for the possible positions of a tab header, either 'above' or 'below' the content.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MatTabHeaderPosition = 'above' | 'below';\n```\n\n----------------------------------------\n\nTITLE: Defining CdkListbox Class in TypeScript for Angular CDK\nDESCRIPTION: Implements a listbox component with various configuration options and methods for selection management. It handles keyboard navigation, focus management, and integrates with Angular's form controls.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/listbox/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class CdkListbox<T = unknown> implements AfterContentInit, OnDestroy, ControlValueAccessor {\n    constructor();\n    protected readonly changeDetectorRef: ChangeDetectorRef;\n    get compareWith(): undefined | ((o1: T, o2: T) => boolean);\n    set compareWith(fn: undefined | ((o1: T, o2: T) => boolean));\n    deselect(option: CdkOption<T>): void;\n    deselectValue(value: T): void;\n    protected readonly destroyed: Subject<void>;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    protected readonly element: HTMLElement;\n    get enabledTabIndex(): number | null | undefined;\n    set enabledTabIndex(value: number | null | undefined);\n    focus(): void;\n    // ... (other methods and properties)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for Sort\nDESCRIPTION: The `Sort` interface outlines the core structure for managing sorting data, including the active field and direction. This is critical for managing state in Material table sorting.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sort/index.api.md#2025-04-21_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Sort {\n    active: string;\n    direction: SortDirection;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollStrategy Interface in TypeScript\nDESCRIPTION: This interface defines the methods that a scroll strategy for overlays must implement.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ScrollStrategy {\n    attach: (overlayRef: OverlayRef) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Overlay Dimensions\nDESCRIPTION: Shows how to create an overlay with specific height and width configurations.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/overlay/overlay.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst overlayRef = overlay.create({\n  height: '400px',\n  width: '600px',\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Strong Focus Indicators in Angular Material (SCSS)\nDESCRIPTION: This example shows how to customize the appearance of strong focus indicators in Angular Material. It demonstrates setting custom border styles and using a specific color for the indicators.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_9\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\n@include mat.strong-focus-indicators((\n  border-style: dotted,\n  border-width: 4px,\n  border-radius: 2px,\n));\n\n$my-primary: mat.m2-define-palette(mat.$m2-indigo-palette, 500);\n$my-accent: mat.m2-define-palette(mat.$m2-pink-palette, A200, A100, A400);\n\n$my-theme: mat.m2-define-light-theme((\n color: (\n   primary: $my-primary,\n   accent: $my-accent,\n )\n));\n\n@include mat.all-component-themes($my-theme);\n@include mat.strong-focus-indicators-theme(purple);\n```\n\n----------------------------------------\n\nTITLE: Defining StepperOrientation Enum - TypeScript\nDESCRIPTION: The StepperOrientation enum defines two constants, HORIZONTAL and VERTICAL, representing the possible orientations for the Angular Material stepper. This enum is useful when filtering or asserting against stepper behavior.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/stepper/testing/index.api.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport enum StepperOrientation {\n    // (undocumented)\n    HORIZONTAL = 0,\n    // (undocumented)\n    VERTICAL = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Slide Toggle Default Options\nDESCRIPTION: Interface for defining global default configurations for slide toggle components, including color, interactivity, and icon visibility\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/slide-toggle/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MatSlideToggleDefaultOptions {\n  color?: ThemePalette;\n  disabledInteractive?: boolean;\n  disableToggleValue?: boolean;\n  hideIcon?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: MatTabContent Class Definition\nDESCRIPTION: This code defines the `MatTabContent` directive, which is used to wrap the content of a tab.  It is then rendered within the `MatTabBody`.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public\nexport class MatTabContent {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    template: TemplateRef<any>;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatTabContent, \\\"[matTabContent] \\\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTabContent, never>;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Migration Test Case Expected Output for Property Rename\nDESCRIPTION: Example expected output file for testing property rename migrations. This file shows how the code should look after the migration tool has processed the input file, with 'color' renamed to 'newColor'.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/schematics/ng-update/update-schematic.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Mock definitions. This test case does not have access to @angular/material.\n */\nclass MatRipple {\n  color: string;\n}\n\n/*\n * Actual test cases using the previously defined definitions.\n */\nclass A implements OnInit {\n  constructor(private a: MatRipple) {}\n\n  ngOnInit() {\n    this.a.newColor = 'primary';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatStepperNextHarness Class - TypeScript\nDESCRIPTION: The MatStepperNextHarness class extends StepperButtonHarness and aids in testing the next button of the Angular Material stepper. It includes the host selector and a static method for creating instances with specified options. Dependencies include the Angular CDK testing module.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/stepper/testing/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class MatStepperNextHarness extends StepperButtonHarness {\n    static hostSelector: string;\n    static with(options?: StepperButtonHarnessFilters): HarnessPredicate<MatStepperNextHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: Menu Focus Tracking Implementation in TypeScript\nDESCRIPTION: PointerFocusTracker class for managing focus states in menu components with mouse/pointer interactions.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/menu/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class PointerFocusTracker<T extends FocusableElement> {\n    constructor(_renderer: Renderer2, _items: QueryList<T>);\n    activeElement?: T;\n    destroy(): void;\n    readonly entered: Observable<T>;\n    readonly exited: Observable<T>;\n    previousElement?: T;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Parse Formats with Moment\nDESCRIPTION: Demonstrates how to configure multiple date parsing formats when using the Moment date adapter.\nSOURCE: https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nbootstrapApplication(MyApp, {\n  providers: [provideMomentDateAdapter({\n    parse: {\n      dateInput: ['l', 'LL'],\n    },\n    display: {\n      dateInput: 'L',\n      monthYearLabel: 'MMM YYYY',\n      dateA11yLabel: 'LL',\n      monthYearA11yLabel: 'MMMM YYYY',\n    },\n  })]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Adaptive High Contrast for Dark Theme in Sass\nDESCRIPTION: Example showing how to define a dark theme with high contrast mode support. The theme will automatically switch to high contrast dark theme based on user preferences.\nSOURCE: https://github.com/angular/components/blob/main/src/material/schematics/ng-generate/theme-color/README.md#2025-04-21_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material';\n@use './path/to/my-theme'; // location of generated file\n\nhtml {\n  // Apply the dark theme by default\n  @include material.theme((\n    color: (\n      primary: my-theme.$primary-palette,\n      tertiary: my-theme.$tertiary-palette,\n      theme-type: dark,\n    ),\n    typography: Roboto,\n    density: 0,\n  ));\n\n  // Use high contrast dark theme colors when users prefer contrast\n  @media (prefers-contrast: more) {\n    @include my-theme.high-contrast-overrides(dark);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migration Test Case Input for Property Rename\nDESCRIPTION: Example input file for testing property rename migrations. This file contains mock definitions and test code using the MatRipple class with the old 'color' property that should be migrated.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/schematics/ng-update/update-schematic.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Mock definitions. This test case does not have access to @angular/material.\n */\nclass MatRipple {\n  color: string;\n}\n\n/*\n * Actual test cases using the previously defined definitions.\n */\nclass A implements OnInit {\n  constructor(private a: MatRipple) {}\n\n  ngOnInit() {\n    this.a.color = 'primary';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing _RecycleViewRepeaterStrategy Class in TypeScript\nDESCRIPTION: This class implements the _ViewRepeater interface with methods for applying changes, detaching views, and managing view cache size.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/collections/index.api.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class _RecycleViewRepeaterStrategy<T, R, C extends _ViewRepeaterItemContext<T>> implements _ViewRepeater<T, R, C> {\n    applyChanges(changes: IterableChanges<R>, viewContainerRef: ViewContainerRef, itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>, itemValueResolver: _ViewRepeaterItemValueResolver<T, R>, itemViewChanged?: _ViewRepeaterItemChanged<R, C>): void;\n    detach(): void;\n    viewCacheSize: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mat Table Harness Columns Text Interface\nDESCRIPTION: The MatTableHarnessColumnsText interface specifies the structure for mapping column content, header, and footer texts in Material tables, facilitating text extraction and queries.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/table/testing/index.api.md#2025-04-21_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface MatTableHarnessColumnsText {\n    [columnName: string]: {\n        text: string[];\n        headerText: string[];\n        footerText: string[];\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OverlayModule Class in TypeScript\nDESCRIPTION: This class defines the Angular module for the Overlay component, including its dependencies and exports.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class OverlayModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<OverlayModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<OverlayModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<OverlayModule, never, [typeof BidiModule, typeof PortalModule, typeof ScrollingModule, typeof CdkConnectedOverlay, typeof CdkOverlayOrigin], [typeof CdkConnectedOverlay, typeof CdkOverlayOrigin, typeof ScrollingModule]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Property Rename Upgrade Data in TypeScript\nDESCRIPTION: Example of how to add upgrade data for a property rename in Angular Material. This code shows how to update the property-names.ts file to handle migrating MatRipple#color to MatRipple#newColor in version 7.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/schematics/ng-update/update-schematic.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const propertyNames: VersionChanges<MaterialPropertyNameData> = {\n  [TargetVersion.V7]: [\n    {\n      pr: '{PULL_REQUEST_LINK_FOR_BREAKING_CHANGE}',\n      changes: [\n        {\n          replace: 'color',\n          replaceWith: 'newColor',\n          limitedTo: {\n            classes: ['MatRipple']\n          }\n        }\n      ]\n    }\n  ],\n   ...\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Autofill Input Fields with Custom Colors\nDESCRIPTION: SCSS mixin usage for customizing the background and text color of autofilled input fields. Demonstrates setting transparent background and red text color for autofilled inputs.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/text-field/text-field.md#2025-04-21_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/cdk';\n\n// Set custom autofill inputs to have no background and red text.\ninput.custom-autofill {\n  @include cdk.text-field-autofill-color(transparent, red);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatSortHarness Class in Angular Testing\nDESCRIPTION: The MatSortHarness class provides methods to interact with sorting functionality in Angular Material tests. Key methods include getActiveHeader to retrieve the currently active sort header and getSortHeaders to get a list of sort headers based on filtering criteria. This class extends the ComponentHarness class.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/sort/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport class MatSortHarness extends ComponentHarness {\n    getActiveHeader(): Promise<MatSortHeaderHarness | null>;\n    getSortHeaders(filter?: SortHeaderHarnessFilters): Promise<MatSortHeaderHarness[]>;\n    // (undocumented)\n    static hostSelector: string;\n    static with(options?: SortHarnessFilters): HarnessPredicate<MatSortHarness>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AutocompleteHarnessFilters Interface in TypeScript\nDESCRIPTION: Defines an interface for autocomplete harness filters, extending BaseHarnessFilters with optional disabled and value properties.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/autocomplete/testing/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AutocompleteHarnessFilters extends BaseHarnessFilters {\n    disabled?: boolean;\n    value?: string | RegExp;\n}\n```\n\n----------------------------------------\n\nTITLE: JsDoc Documentation for Methods in TypeScript\nDESCRIPTION: Shows the recommended format for documenting methods with JsDoc, including a description of what the method does, parameter explanations, and return value information.\nSOURCE: https://github.com/angular/components/blob/main/CODING_STANDARDS.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Opens a modal dialog containing the given component.\n * @param component Type of the component to load into the dialog.\n * @param config Dialog configuration options.\n * @returns Reference to the newly-opened dialog.\n */\nopen<T>(component: ComponentType<T>, config?: MatDialogConfig): MatDialogRef<T> { ... }\n```\n\n----------------------------------------\n\nTITLE: Multi-line Message Lists in Angular Material\nDESCRIPTION: Examples of two and three line lists showing message-style content with titles and multiple lines of text.\nSOURCE: https://github.com/angular/components/blob/main/src/material/list/list.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- two line list -->\n<mat-list>\n  @for (message of messages; track message) {\n    <mat-list-item>\n      <h3 matListItemTitle>{{message.from}}</h3>\n      <p matListItemLine>\n        <span>{{message.subject}}</span>\n        <span class=\"demo-2\"> -- {{message.content}}</span>\n      </p>\n    </mat-list-item>\n  }\n</mat-list>\n\n<!-- three line list -->\n<mat-list>\n  @for (message of messages; track message) {\n    <mat-list-item>\n      <h3 matListItemTitle>{{message.from}}</h3>\n      <p matListItemLine>{{message.subject}}</p>\n      <p matListItemLine class=\"demo-2\">{{message.content}}</p>\n    </mat-list-item>\n  }\n</mat-list>\n```\n\n----------------------------------------\n\nTITLE: Defining OriginConnectionPosition Interface in TypeScript\nDESCRIPTION: This interface defines the connection position for the origin of an overlay.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/overlay/index.api.md#2025-04-21_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface OriginConnectionPosition {\n    // (undocumented)\n    originX: HorizontalConnectionPos;\n    // (undocumented)\n    originY: VerticalConnectionPos;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Focus Regions in HTML\nDESCRIPTION: Shows how to use cdkFocusRegionStart, cdkFocusRegionEnd, and cdkFocusInitial attributes to define focus regions and initial focus element.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/a11y.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a mat-list-item routerLink cdkFocusRegionStart>Focus region start</a>\n<a mat-list-item routerLink>Link</a>\n<a mat-list-item routerLink cdkFocusInitial>Initially focused</a>\n<a mat-list-item routerLink cdkFocusRegionEnd>Focus region end</a>\n```\n\n----------------------------------------\n\nTITLE: Property Getters and Setters Best Practices in TypeScript\nDESCRIPTION: Shows the recommended practice of using readonly properties instead of getters with no setters, which simplifies the code and maintains the same functionality.\nSOURCE: https://github.com/angular/components/blob/main/CODING_STANDARDS.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/** YES */\nreadonly active: boolean;\n\n/** NO */\nget active(): boolean {\n  // Using a getter solely to make the property read-only.\n  return this._active;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Listbox Structure in Angular CDK\nDESCRIPTION: Demonstrates the basic structure of a listbox using CDK directives. The cdkListbox directive is applied to the container, while cdkOption is used for each selectable option.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/listbox/listbox.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<ul cdkListbox>\n  <li cdkOption value=\"1\">Option 1</li>\n  <li cdkOption value=\"2\">Option 2</li>\n  <li cdkOption value=\"3\">Option 3</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Sidenav Scroll Event Handling\nDESCRIPTION: TypeScript implementation for handling scroll events in sidenav container.\nSOURCE: https://github.com/angular/components/blob/main/src/material/sidenav/sidenav.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass YourComponent implements AfterViewInit {\n  @ViewChild(MatSidenavContainer) sidenavContainer: MatSidenavContainer;\n\n  ngAfterViewInit() {\n    this.sidenavContainer.scrollable.elementScrolled().subscribe(() => /* react to scrolling */);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated matDatepickerAnimations in TypeScript\nDESCRIPTION: Defines animation constants for the datepicker component, including panel transformation and calendar fade-in effects. This is marked as deprecated, suggesting alternative approaches should be used.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport const matDatepickerAnimations: {\n    readonly transformPanel: any;\n    readonly fadeInCalendar: any;\n};\n```\n\n----------------------------------------\n\nTITLE: JsDoc Documentation for Properties in TypeScript\nDESCRIPTION: Demonstrates proper JsDoc documentation for properties, including a concise description of what the property does and its default value.\nSOURCE: https://github.com/angular/components/blob/main/CODING_STANDARDS.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/** The label position relative to the checkbox. Defaults to 'after' */\n@Input() labelPosition: 'before' | 'after' = 'after';\n```\n\n----------------------------------------\n\nTITLE: Google Maps API Key Configuration\nDESCRIPTION: Shell configuration example for setting up Google Maps API key as an environment variable for the dev-app. This allows developers to use their personal API keys without committing them to the repository.\nSOURCE: https://github.com/angular/components/blob/main/DEV_ENVIRONMENT.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_MAPS_KEY=<api-key>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using YouTube Player in Angular Component\nDESCRIPTION: Demonstrates how to import and use the YouTube Player component in an Angular application. It shows the basic setup for displaying a YouTube video using the provided component.\nSOURCE: https://github.com/angular/components/blob/main/src/youtube-player/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Component} from '@angular/core';\nimport {YouTubePlayer} from '@angular/youtube-player';\n\n@Component({\n  imports: [YouTubePlayer],\n  template: '<youtube-player videoId=\"mVjYG9TSN88\"/>',\n  selector: 'youtube-player-example',\n})\nexport class YoutubePlayerExample {}\n```\n\n----------------------------------------\n\nTITLE: Setting Last Item Active in ListKeyManager\nDESCRIPTION: This method sets the active item to the last enabled item in the list.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/key-manager/list-key-manager.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsetLastItemActive(): void;\n```\n\n----------------------------------------\n\nTITLE: MatTabLabelWrapper Class Definition in TypeScript\nDESCRIPTION: Wrapper class for tab labels that extends InkBarItem. It provides methods to handle focus state and get element dimensions needed for ink bar positioning.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatTabLabelWrapper extends InkBarItem {\n    disabled: boolean;\n    // (undocumented)\n    elementRef: ElementRef<any>;\n    focus(): void;\n    // (undocumented)\n    getOffsetLeft(): number;\n    // (undocumented)\n    getOffsetWidth(): number;\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatTabLabelWrapper, \"[matTabLabelWrapper]\", never, { \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTabLabelWrapper, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tree Node Outlet Context in TypeScript\nDESCRIPTION: Defines a context class for tree node outlets that contains data and metadata about tree nodes including level, index and count.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/tree/index.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CdkTreeNodeOutletContext<T> {\n    $implicit: T;\n    constructor(data: T);\n    count?: number;\n    index?: number;\n    level: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Useful Comments in TypeScript\nDESCRIPTION: Example of a less useful comment that merely restates what the code does without providing context or reasoning for why the code exists in its current form.\nSOURCE: https://github.com/angular/components/blob/main/CODING_STANDARDS.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Set default tabindex.\nif (!$attrs['tabindex']) {\n  $element.attr('tabindex', '-1');\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Services\nDESCRIPTION: Angular CLI command for scaffolding various application elements such as components, directives, pipes, services, classes, guards, interfaces, enums, and modules.\nSOURCE: https://github.com/angular/components/blob/main/integration/yarn-pnp-compat/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Setting Next Item Active in ListKeyManager\nDESCRIPTION: This method sets the active item to the next enabled item in the list.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/key-manager/list-key-manager.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetNextItemActive(): void;\n```\n\n----------------------------------------\n\nTITLE: Creating Mat Footer Row Harness in Angular CDK Testing\nDESCRIPTION: The MatFooterRowHarness class extends _MatRowHarnessBase to represent a footer row in an Angular Material table. It features a hostSelector and a with() method for filtering based on row harness filters.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/table/testing/index.api.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MatFooterRowHarness extends _MatRowHarnessBase<typeof MatFooterCellHarness, MatFooterCellHarness> {\n    protected _cellHarness: typeof MatFooterCellHarness;\n    static hostSelector: string;\n    static with<T extends MatFooterRowHarness>(this: ComponentHarnessConstructor<T>, options?: RowHarnessFilters): HarnessPredicate<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Angular CDK Scrolling Dependencies\nDESCRIPTION: Imports required for the scrolling functionality including core Angular dependencies and RxJS observables.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/scrolling/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterContentInit } from '@angular/core';\nimport { DoCheck } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { NgIterable } from '@angular/core';\nimport { NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Subscription } from 'rxjs';\nimport { TemplateRef } from '@angular/core';\nimport { TrackByFunction } from '@angular/core';\n```\n\n----------------------------------------\n\nTITLE: Disabling Datepicker Components in Angular\nDESCRIPTION: Demonstrates how to disable various parts of the datepicker, including the input, toggle, and calendar.\nSOURCE: https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<input [matDatepicker]=\"picker\" [disabled]=\"true\">\n<mat-datepicker-toggle [for]=\"picker\" [disabled]=\"true\"></mat-datepicker-toggle>\n<mat-datepicker #picker [disabled]=\"true\"></mat-datepicker>\n```\n\n----------------------------------------\n\nTITLE: Ambiguous HammerJS event binding example\nDESCRIPTION: Example of an ambiguous event binding that could be either a HammerJS event or a component @Output, which requires manual review during migration.\nSOURCE: https://github.com/angular/components/blob/main/guides/v9-hammerjs-migration.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<image-rotator (rotate)=\"onRotate()\"></image-rotator>\n```\n\n----------------------------------------\n\nTITLE: Typography Hierarchy Backwards Compatibility\nDESCRIPTION: Implementation of backwards compatibility for typography hierarchy with Material 3.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_29\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\n$theme: mat.define-theme();\n\n@include mat.typography-hierarchy($theme, $back-compat: true);\n```\n\n----------------------------------------\n\nTITLE: Marker Clusterer Class Implementation\nDESCRIPTION: Extended Google Maps OverlayView class that implements marker clustering functionality with customizable rendering and click handling.\nSOURCE: https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MarkerClusterer extends google.maps.OverlayView {\n    constructor({ map, markers, algorithmOptions, algorithm, renderer, onClusterClick, }: MarkerClustererOptions_2);\n    addMarker(marker: Marker, noDraw?: boolean): void;\n    addMarkers(markers: Marker[], noDraw?: boolean): void;\n    protected algorithm: Algorithm_2;\n    clearMarkers(noDraw?: boolean): void;\n    protected clusters: Cluster[];\n    protected idleListener: google.maps.MapsEventListener;\n    protected map: google.maps.Map | null;\n    protected markers: Marker[];\n    onAdd(): void;\n    onClusterClick: onClusterClickHandler;\n    onRemove(): void;\n    removeMarker(marker: Marker, noDraw?: boolean): boolean;\n    removeMarkers(markers: Marker[], noDraw?: boolean): boolean;\n    render(): void;\n    protected renderClusters(): void;\n    protected renderer: Renderer;\n    protected reset(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid External Sidenav\nDESCRIPTION: Example of invalid sidenav placement outside the container.\nSOURCE: https://github.com/angular/components/blob/main/src/material/sidenav/sidenav.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<mat-sidenav-container></mat-sidenav-container>\n<mat-sidenav></mat-sidenav>\n```\n\n----------------------------------------\n\nTITLE: Material Form Field Component Implementation\nDESCRIPTION: Angular Material form field component providing advanced form control rendering, layout, and validation features\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/select/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MatFormField implements FloatingLabelParent, AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy\n```\n\n----------------------------------------\n\nTITLE: Color Variants Backwards Compatibility\nDESCRIPTION: Implementation of backwards compatibility styles for color variants in Material 3.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_28\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/material' as mat;\n\n$theme: mat.define-theme();\n\nhtml {\n  @include mat.all-component-themes($theme);\n  @include mat.color-variants-backwards-compatibility($theme);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Overlay Styles with SCSS\nDESCRIPTION: Shows how to import the required structural styles for CDK overlays by adding the prebuilt CSS to your global stylesheet.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/overlay/overlay.md#2025-04-21_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@import '@angular/cdk/overlay-prebuilt.css';\n```\n\n----------------------------------------\n\nTITLE: Declaring Injection Token\nDESCRIPTION: This snippet declares an InjectionToken named MAT_TIMEPICKER_CONFIG, which is used to provide configuration options for the MatTimepicker component. It allows developers to customize the behavior of the timepicker.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/timepicker/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const MAT_TIMEPICKER_CONFIG: InjectionToken<MatTimepickerConfig>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Container Harness in TypeScript\nDESCRIPTION: Example of implementing a popup harness that extends ContentContainerComponentHarness for content projection support.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyPopupHarness extends ContentContainerComponentHarness<string> {\n  static hostSelector = 'my-popup';\n}\n```\n\n----------------------------------------\n\nTITLE: JsDoc Documentation for Boolean Properties in TypeScript\nDESCRIPTION: Shows the recommended way to document boolean properties, using \"Whether...\" format for clarity and consistency.\nSOURCE: https://github.com/angular/components/blob/main/CODING_STANDARDS.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/** Whether the button is disabled. */\ndisabled: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Importing Angular Material Datepicker Dependencies in TypeScript\nDESCRIPTION: A comprehensive list of imports used by the Angular Material Datepicker module, including dependencies from Angular core, forms, CDK modules, and RxJS.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbstractControl } from '@angular/forms';\nimport { AbstractControlDirective } from '@angular/forms';\nimport { AfterContentInit } from '@angular/core';\nimport { AfterViewChecked } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DoCheck } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { FactoryProvider } from '@angular/core';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport { FormGroupDirective } from '@angular/forms';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i1_2 from '@angular/cdk/a11y';\nimport * as i2 from '@angular/cdk/overlay';\nimport * as i3 from '@angular/cdk/portal';\nimport * as i5 from '@angular/cdk/scrolling';\nimport { InjectionToken } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { NgForm } from '@angular/forms';\nimport { NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { Portal } from '@angular/cdk/portal';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\nimport { SimpleChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { TemplateRef } from '@angular/core';\nimport { ValidationErrors } from '@angular/forms';\nimport { Validator } from '@angular/forms';\nimport { ValidatorFn } from '@angular/forms';\n```\n\n----------------------------------------\n\nTITLE: MatGridListHarness Class\nDESCRIPTION: Defines the `MatGridListHarness` class for interacting with Angular Material grid list components in tests. It provides methods to get the number of columns, retrieve specific tiles at given positions, and retrieve tiles based on filters. The `hostSelector` is defined, and a static `with` method is provided to create a `HarnessPredicate` for filtering harnesses.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/grid-list/testing/index.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n \"// @public\\nexport class MatGridListHarness extends ComponentHarness {\\n    getColumns(): Promise<number>;\\n    getTileAtPosition({ row, column, }: {\\n        row: number;\\n        column: number;\\n    }): Promise<MatGridTileHarness>;\\n    getTiles(filters?: GridTileHarnessFilters): Promise<MatGridTileHarness[]>;\\n    static hostSelector: string;\\n    static with(options?: GridListHarnessFilters): HarnessPredicate<MatGridListHarness>;\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Angular CLI Help\nDESCRIPTION: Command to get additional help and information about Angular CLI usage and features.\nSOURCE: https://github.com/angular/components/blob/main/integration/yarn-pnp-compat/README.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Building Angular Components Production Site\nDESCRIPTION: Command to create a production build of the documentation site using Bazel build system.\nSOURCE: https://github.com/angular/components/blob/main/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm bazel build //docs:build.production\n```\n\n----------------------------------------\n\nTITLE: Defining Angular CDK Private Components and Services\nDESCRIPTION: Defines two main classes: _CdkPrivateStyleLoader service for loading styles and _VisuallyHiddenLoader component for accessibility features. Includes Angular dependency injector declarations and component metadata.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/private/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as i0 from '@angular/core';\nimport { Type } from '@angular/core';\n\n// @public\nexport class _CdkPrivateStyleLoader {\n    load(loader: Type<unknown>): void;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<_CdkPrivateStyleLoader, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<_CdkPrivateStyleLoader>;\n}\n\n// @public\nexport class _VisuallyHiddenLoader {\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<_VisuallyHiddenLoader, \"ng-component\", [\"cdkVisuallyHidden\"], {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<_VisuallyHiddenLoader, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Global Configuration of YouTube Player in Angular Module\nDESCRIPTION: Demonstrates how to configure the YouTube Player globally using the YOUTUBE_PLAYER_CONFIG injection token. This example shows how to disable API loading for all instances of the player in the application.\nSOURCE: https://github.com/angular/components/blob/main/src/youtube-player/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {NgModule} from '@angular/core';\nimport {YouTubePlayer, YOUTUBE_PLAYER_CONFIG} from '@angular/youtube-player';\n\n@NgModule({\n  imports: [YouTubePlayer],\n  providers: [{\n    provide: YOUTUBE_PLAYER_CONFIG,\n    useValue: {\n      loadApi: false\n    }\n  }]\n})\nexport class YourApp {}\n```\n\n----------------------------------------\n\nTITLE: Accessing Active Item in ListKeyManager\nDESCRIPTION: These properties allow access to the currently active item in the list and its index.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/a11y/key-manager/list-key-manager.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nactiveItemIndex: number; // Index of the currently active item\nactiveItem: any; // The active item\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Angular Material\nDESCRIPTION: Git command for committing changes with automatic file tracking\nSOURCE: https://github.com/angular/components/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -a\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components\nDESCRIPTION: Command to generate new Angular components using the Angular CLI. This can also be used to generate other Angular artifacts like directives, pipes, services, etc.\nSOURCE: https://github.com/angular/components/blob/main/integration/harness-e2e-cli/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Animation Configuration Classes\nDESCRIPTION: Deprecated classes defining animation curves and durations for Material animations including acceleration, deceleration, and standard curves.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/core/index.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AnimationCurves {\n    static ACCELERATION_CURVE: string;\n    static DECELERATION_CURVE: string;\n    static SHARP_CURVE: string;\n    static STANDARD_CURVE: string;\n}\n\nexport class AnimationDurations {\n    static COMPLEX: string;\n    static ENTERING: string;\n    static EXITING: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Material 3 Custom Theme with Angular CLI\nDESCRIPTION: Command to generate a new Material 3 theme palette based on custom colors using the Angular CLI.\nSOURCE: https://github.com/angular/components/blob/main/src/material/schematics/ng-generate/theme-color/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nng generate @angular/material:theme-color\n```\n\n----------------------------------------\n\nTITLE: Basic ErrorState Implementation\nDESCRIPTION: Simple implementation of errorState getter that checks for invalid state and touched status.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-form-field-control.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nget errorState(): boolean {\n  return this.parts.invalid && this.touched;\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Git Hooks\nDESCRIPTION: Shell configuration examples for disabling Git hooks by setting the HUSKY environment variable. This can be added to .zshrc or .bashrc files to disable commit message validation and formatting hooks.\nSOURCE: https://github.com/angular/components/blob/main/DEV_ENVIRONMENT.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# .zshrc\nexport HUSKY=0\n\n# .bashrc\nexport HUSKY=0\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies Configuration for Angular Components PR Testing\nDESCRIPTION: JSON configuration showing how to point package.json dependencies to CI build artifacts for testing Pull Request changes. This allows developers to test specific PR builds by referencing the archived packages directly from CircleCI artifacts.\nSOURCE: https://github.com/angular/components/blob/main/DEV_ENVIRONMENT.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"@angular/cdk\": \"https://<...>.circle-artifacts.com<...>/cdk-pr12345-a1b2c3d.tgz\",\n  \"@angular/material\": \"https://<...>.circle-artifacts.com<...>/material-pr12345-a1b2c3d.tgz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing controlType for Form Field Integration\nDESCRIPTION: Sets the control type identifier for the custom form control to enable specific styling in mat-form-field.\nSOURCE: https://github.com/angular/components/blob/main/guides/creating-a-custom-form-field-control.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ncontrolType = 'example-tel-input';\n```\n\n----------------------------------------\n\nTITLE: Complete Theme Implementation\nDESCRIPTION: Full theme implementation with conditional color and typography application.\nSOURCE: https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-21_snippet_25\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:map';\n@use '@angular/material' as mat;\n\n@mixin color($theme) {\n  .my-carousel-button {\n    // Read the 500 hue from the primary color palette.\n    color: mat.get-theme-color($theme, primary, 500);\n  }\n}\n\n@mixin typography($theme) {\n  .my-carousel {\n    // Get the headline font from the theme.\n    font: mat.get-theme-typography($theme, headline-1);\n  }\n}\n\n@mixin theme($theme) {\n  @if mat.theme-has($theme, color) {\n    @include color($theme);\n  }\n\n  @if mat.theme-has($theme, typography) {\n    @include typography($theme);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MapTrafficLayer in Angular TypeScript Component\nDESCRIPTION: This TypeScript code demonstrates how to import and use the GoogleMap and MapTrafficLayer components from @angular/google-maps. It sets up a basic map configuration with center coordinates and zoom level.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-traffic-layer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// google-maps-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapTrafficLayer} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap, MapTrafficLayer],\n})\nexport class GoogleMapDemo {\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing HammerJS script import from HTML\nDESCRIPTION: Example of a HammerJS script tag in index.html that should be removed during migration.\nSOURCE: https://github.com/angular/components/blob/main/guides/v9-hammerjs-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://my-cdn.io/hammer.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Development Server\nDESCRIPTION: Command to start the Angular development server. The server will run on localhost:4200 and automatically reload on file changes.\nSOURCE: https://github.com/angular/components/blob/main/integration/harness-e2e-cli/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Executing End-to-End Tests for Angular\nDESCRIPTION: Command to run end-to-end tests for the Angular project. Requires a separate package for e2e testing capabilities.\nSOURCE: https://github.com/angular/components/blob/main/integration/yarn-pnp-compat/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Configuring MapRectangle Component in TypeScript\nDESCRIPTION: TypeScript component class that sets up the configuration for a Google Maps rectangle overlay. Defines the map's center coordinates, zoom level, and rectangle bounds using the google.maps.LatLngBoundsLiteral interface.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-rectangle/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// google-maps-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapRectangle} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap, MapRectangle],\n})\nexport class GoogleMapDemo {\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n\n  bounds: google.maps.LatLngBoundsLiteral = {\n    east: 10,\n    north: 10,\n    south: -10,\n    west: -10,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Dialog Component in TypeScript\nDESCRIPTION: Shows how to pass data to a dialog component when opening it using the data option in the configuration object.\nSOURCE: https://github.com/angular/components/blob/main/src/cdk/dialog/dialog.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst dialogRef = dialog.open(YourDialog, {\n  data: {name: 'frodo'},\n});\n```\n\n----------------------------------------\n\nTITLE: Using MapHeatmapLayer in Angular Template\nDESCRIPTION: This HTML template shows how to use the MapHeatmapLayer directive within a GoogleMap component. It includes setting the map's dimensions, center, zoom, and applying the heatmap data and options.\nSOURCE: https://github.com/angular/components/blob/main/src/google-maps/map-heatmap-layer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- google-map-demo.component.html -->\n<google-map height=\"400px\" width=\"750px\" [center]=\"center\" [zoom]=\"zoom\">\n  <map-heatmap-layer [data]=\"heatmapData\" [options]=\"heatmapOptions\" />\n</google-map>\n```\n\n----------------------------------------\n\nTITLE: Exporting VERSION Constant from Angular CDK\nDESCRIPTION: Defines and exports the VERSION constant of type Version from @angular/core. This provides version information for the Angular CDK package.\nSOURCE: https://github.com/angular/components/blob/main/goldens/cdk/index.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Version } from '@angular/core';\n\n// @public\nexport const VERSION: Version;\n\n// (No @packageDocumentation comment for this package)\n\n```\n\n----------------------------------------\n\nTITLE: MatTabBodyOriginState Type Alias (Deprecated)\nDESCRIPTION: This code defines a deprecated type alias `MatTabBodyOriginState` that represents the origin of the tab body, either 'left' or 'right'. It is used to determine the direction from which the tab body enters the view.\nSOURCE: https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n\"// @public @deprecated\nexport type MatTabBodyOriginState = 'left' | 'right';\"\n```"
  }
]