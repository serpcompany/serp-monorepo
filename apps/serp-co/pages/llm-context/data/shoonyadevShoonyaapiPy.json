[
  {
    "owner": "shoonya-dev",
    "repo": "shoonyaapi-py",
    "content": "TITLE: Login to Shoonya API with Credentials and 2FA Authentication\nDESCRIPTION: Authenticates a user with Shoonya API using userid, password, two-factor authentication, vendor code, API secret, and device IMEI. Returns authentication tokens and user details on successful login.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#credentials\nuser    = <uid>\npwd     = <password>\nfactor2 = <OTP/TOTP>\nvc      = <vendor code>\napp_key = <API key>\nimei    = <imei>\n\nret = api.login(userid=uid, password=pwd, twoFA=factor2, vendor_code=vc, api_secret=app_key, imei=imei)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Live Market Data in Shoonya API\nDESCRIPTION: Shows how to connect to WebSocket and subscribe to live market data feeds for single or multiple tokens. The example includes setting up event handlers and callbacks for market data updates.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfeed_opened = False\n\ndef event_handler_feed_update(tick_data):\n    print(f\"feed update {tick_data}\")\n\ndef open_callback():\n    global feed_opened\n    feed_opened = True\n\n\napi.start_websocket( order_update_callback=event_handler_order_update,\n                     subscribe_callback=event_handler_feed_update, \n                     socket_open_callback=open_callback)\n\nwhile(feed_opened==False):\n    pass\n\n# subscribe to a single token \napi.subscribe('NSE|13')\n\n#subscribe to multiple tokens\napi.subscribe(['NSE|22', 'BSE|522032'])\n```\n\n----------------------------------------\n\nTITLE: Place Order on Shoonya Trading Platform\nDESCRIPTION: Places a new order with specified parameters including buy/sell direction, product type, exchange, trading symbol, quantity, price type, and other order details. Returns order number on success.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nret = api.place_order(buy_or_sell='B', product_type='C',\n                        exchange='NSE', tradingsymbol='CANBK-EQ', \n                        quantity=1, discloseqty=0,price_type='SL-LMT', price=200.00, trigger_price=199.50,\n                        retention='DAY', remarks='my_order_001')\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Order Updates in Shoonya API\nDESCRIPTION: Shows how to subscribe to order update events using the WebSocket connection. This allows applications to receive real-time updates on order status changes without polling.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfeed_opened = False\n\ndef event_handler_order_update(order):\n    print(f\"order feed {order}\")\n\ndef open_callback():\n    global feed_opened\n    feed_opened = True\n\n\napi.start_websocket( order_update_callback=event_handler_order_update,\n                     subscribe_callback=event_handler_feed_update, \n                     socket_open_callback=open_callback)\n\nwhile(feed_opened==False):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Placing Different Order Types in Shoonya API\nDESCRIPTION: Demonstrates how to place various order types including limit orders, market orders, stop-loss orders, cover orders, and bracket orders. Each example shows the required parameters for the specific order type.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n# Place a Limit order\napi.place_order(buy_or_sell='B', product_type='C',\n                    exchange='NSE', tradingsymbol='INFY-EQ', \n                    quantity=1, discloseqty=0,price_type='LMT', price=1500, trigger_price=None,\n                    retention='DAY', remarks='my_order_001')\n\n# Place a Market Order\napi.place_order(buy_or_sell='B', product_type='C',\n                    exchange='NSE', tradingsymbol='INFY-EQ', \n                    quantity=1, discloseqty=0,price_type='MKT', price=0, trigger_price=None,\n                    retention='DAY', remarks='my_order_001')\n\n# Place a StopLoss Order\napi.place_order(buy_or_sell='B', product_type='C',\n                    exchange='NSE', tradingsymbol='INFY-EQ', \n                    quantity=1, discloseqty=0,price_type='SL-LMT', price=1500, trigger_price=1450,\n                    retention='DAY', remarks='my_order_001')\n\n# Place a Cover Order\napi.place_order(buy_or_sell='B', product_type='H',\n                    exchange='NSE', tradingsymbol='INFY-EQ', \n                    quantity=1, discloseqty=0,price_type='LMT', price=1500, trigger_price=None,\n                    retention='DAY', remarks='my_order_001', bookloss_price = 1490)\n\n# Place a Bracket Order\napi.place_order(buy_or_sell='B', product_type='B',\n                    exchange='NSE', tradingsymbol='INFY-EQ', \n                    quantity=1, discloseqty=0,price_type='LMT', price=1500, trigger_price=None,\n                    retention='DAY', remarks='my_order_001', bookloss_price = 1490, bookprofit_price = 1510)\n```\n\n----------------------------------------\n\nTITLE: Fetching Real-time Quotes in Python using Shoonya API\nDESCRIPTION: This code snippet shows how to use the get_quotes method to fetch real-time quotes for a security. It requires the exchange and token as parameters and returns comprehensive quote information including best bid/ask prices and quantities.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nexch  = 'NSE'\ntoken = '22'\nret = api.get_quotes(exchange=exch, token=token)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Book in Python using Shoonya API\nDESCRIPTION: This snippet shows how to retrieve the order book for an account using the Shoonya API. It returns a list of all orders placed for the account.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nret = api.get_order_book()\nprint(ret)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Trade Book with Shoonya API (Python)\nDESCRIPTION: Gets the list of trades executed for the account. The response includes transaction details like order numbers, quantities, prices, exchange information, and other trade-specific data.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nret = api.get_trade_book()\nprint(ret)\n```\n\n----------------------------------------\n\nTITLE: Fetching Holdings Information with Shoonya API (Python)\nDESCRIPTION: Retrieves the current holdings as a list for a specific product type. The response includes details like quantity held, collateral quantities, and various holding-related parameters for each scrip in the portfolio.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nret = api.get_holdings()\n```\n\n----------------------------------------\n\nTITLE: Modify Existing Order on Shoonya Trading Platform\nDESCRIPTION: Modifies an existing order by changing quantity, price type, price, or trigger price. Requires the original order number and exchange information.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\norderno = ret['norenordno'] #from placeorder return value\nret = api.modify_order(exchange='NSE', tradingsymbol='CANBK-EQ', orderno=orderno,\n                                   newquantity=2, newprice_type='MKT', newprice=0.00)\n```\n\n----------------------------------------\n\nTITLE: Modifying an Order in Python using Shoonya API\nDESCRIPTION: This snippet demonstrates how to modify an existing order using the Shoonya API. It includes parameters for exchange, trading symbol, order number, quantity, price type, price, and trigger price.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nret = api.modify_order(exchange='NSE', tradingsymbol='CANBK-EQ', orderno=orderno,\n                                   newquantity=2, newprice_type='SL-LMT', newprice=201.00, newtrigger_price=200.00)\n```\n\n----------------------------------------\n\nTITLE: Cancelling Orders in Shoonya API\nDESCRIPTION: Demonstrates how to cancel an existing order by providing the order number to the cancel_order method.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\napi.cancel_order(orderno=orderno)\n```\n\n----------------------------------------\n\nTITLE: Canceling an Order in Python using Shoonya API\nDESCRIPTION: This code snippet shows how to cancel an existing order using the Shoonya API. It requires the order number obtained from a previous place order operation.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\norderno = ret['norenordno'] #from placeorder return value\nret = api.cancel_order(orderno=orderno)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Time-Price Series Data in Python using Shoonya API\nDESCRIPTION: This example demonstrates how to use the get_time_price_series method to fetch historical price data for a security. It requires exchange, token, start time, and interval as parameters, and returns time series data including open, high, low, close prices, and volume.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nlastBusDay = datetime.datetime.today()\nlastBusDay = lastBusDay.replace(hour=0, minute=0, second=0, microsecond=0)\nret = api.get_time_price_series(exchange='NSE', token='22', starttime=lastBusDay.timestamp(), interval=5)\n```\n\n----------------------------------------\n\nTITLE: Fetching Daily Price Series in Python using Shoonya API\nDESCRIPTION: This snippet illustrates how to use the get_daily_price_series method to retrieve daily price data for a symbol. It requires the exchange, trading symbol, start date, and end date as parameters, and returns daily price information including open, high, low, close prices, and volume.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nret =api.get_daily_price_series(exchange=\"NSE\",tradingsymbol=\"PAYTM-EQ\",startdate=\"457401600\",enddate=\"480556800\")\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Market Data Example - Python\nDESCRIPTION: Example showing the format of market data subscription responses for touchline data. Demonstrates the initial full data message (tk) followed by field updates (tf).\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nquote event: 03-12-2021 11:54:44{'t': 'tk', 'e': 'NSE', 'tk': '11630', 'ts': 'NTPC-EQ', 'pp': '2', 'ls': '1', 'ti': '0.05', 'lp': '118.55', 'h': '118.65', 'l': '118.10', 'ap': '118.39', 'v': '162220', 'bp1': '118.45', 'sp1': '118.50', 'bq1': '26', 'sq1': '6325'}\nquote event: 03-12-2021 11:54:45{'t': 'tf', 'e': 'NSE', 'tk': '11630', 'lp': '118.45', 'ap': '118.40', 'v': '166637', 'sp1': '118.55', 'bq1': '3135', 'sq1': '30'}\nquote event: 03-12-2021 11:54:46{'t': 'tf', 'e': 'NSE', 'tk': '11630', 'lp': '118.60'}\n```\n\n----------------------------------------\n\nTITLE: Calculating Span Margin Requirements - Python\nDESCRIPTION: Calculates margin requirements for a list of trading positions including span and exposure margins. Takes account ID and position list as inputs.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nret = api.span_calculator(actid,positionlist)\n```\n\n----------------------------------------\n\nTITLE: Computing Option Greeks - Python\nDESCRIPTION: Calculates option Greek values including delta, theta, vega, and rho for given option parameters. Takes expiry date, strike price, spot price, interest rate, volatility and option type as inputs.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nret = api.option_greek(expiredate ='24-NOV-2022',StrikePrice='150',SpotPrice  = '200',InitRate  = '100',Volatility = '10',OptionType='CE')\n```\n\n----------------------------------------\n\nTITLE: Calculating Daily MTM from Positions Data using Python\nDESCRIPTION: Example showing how to retrieve positions and calculate the daily Mark-to-Market (MTM) value by summing unrealized MTM and realized PNL for all positions.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nret = api.get_positions()\nmtm = 0\npnl = 0\nfor i in ret:\n    mtm += float(i['urmtom'])\n    pnl += float(i['rpnl'])\n    day_m2m = mtm + pnl\nprint(f'{day_m2m} is your Daily MTM')\n```\n\n----------------------------------------\n\nTITLE: Converting Position Product in Python using Shoonya API\nDESCRIPTION: This example demonstrates how to convert the product type of an existing position using the Shoonya API. It first retrieves positions and then converts the first position to an intraday product.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nret = api.get_positions()\n#converts the first position from existing product to intraday\np = ret[0]\nret = api.position_product_conversion(p['exch'], p['tsym'], p['netqty'], 'I', p['prd'], 'B', 'DAY')\n```\n\n----------------------------------------\n\nTITLE: Modifying Orders in Shoonya API\nDESCRIPTION: Shows how to modify an existing order by providing the order number along with the parameters to be changed such as quantity, price type, and price.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\napi.modify_order(exchange='NSE', tradingsymbol='INFY-EQ', orderno=orderno,\n                               newquantity=2, newprice_type='LMT', newprice=1505)\n```\n\n----------------------------------------\n\nTITLE: Searching Scrips - Python Example 1\nDESCRIPTION: Searches for scrips/contracts using exchange and search criteria. Returns matching symbols with their token values. This example demonstrates searching for BANKNIFTY options.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nexch  = 'NFO'\nquery = 'BANKNIFTY 30DEC CE' # multiple criteria to narrow results \nret = api.searchscrip(exchange=exch, searchtext=query)\n\nif ret != None:\n    symbols = ret['values']\n    for symbol in symbols:\n        print('{0} token is {1}'.format(symbol['tsym'], symbol['token']))\n```\n\n----------------------------------------\n\nTITLE: Searching Scrips - Python Example 2\nDESCRIPTION: Demonstrates searching for scrips on NSE using a partial string 'REL'. Returns all matching symbols with their exchange and token information.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\napi.searchscrip(exchange='NSE', searchtext='REL')\n```\n\n----------------------------------------\n\nTITLE: Searching for Scrips in Shoonya API\nDESCRIPTION: Shows how to search for trading symbols using partial text matches. This API call returns matching scrips with their exchange code and token information.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\napi.searchscrip(exchange='NSE', searchtext='REL')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Security Information in Python using Shoonya API\nDESCRIPTION: This snippet demonstrates how to use the get_security_info method to retrieve detailed information about a security. It requires the exchange and token as parameters and returns various details about the security.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nexch  = 'NSE'\ntoken = '22'\nret = api.get_security_info(exchange=exch, token=token)\n```\n\n----------------------------------------\n\nTITLE: Getting Security Information in Shoonya API\nDESCRIPTION: Demonstrates how to fetch detailed security information including freeze quantity, margins and other properties for a specific scrip using its exchange and token.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\napi.get_security_info(exchange='NSE', token='22')\n```\n\n----------------------------------------\n\nTITLE: Querying Single Order History with Shoonya API (Python)\nDESCRIPTION: Retrieves the complete history of a specific order using its order number. The response includes all status changes and execution details for the order from placement to completion.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\norderno = ret['norenordno'] #from placeorder return value\nret = api.single_order_history(orderno=orderno)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Authenticating with Shoonya API in Python\nDESCRIPTION: This snippet demonstrates how to initialize the Shoonya API client and authenticate with user credentials. It includes setting up logging, creating the API object, and providing user credentials to login.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom api_helper import ShoonyaApiPy\nimport logging\n\n#enable dbug to see request and responses\nlogging.basicConfig(level=logging.DEBUG)\n\n#start of our program\napi = ShoonyaApiPy()\n\n#credentials\nuser        = '< user id>'\nu_pwd       = '< password >'\nfactor2     = 'OTP/TOTP'\nvc          = 'vendor code'\napp_key     = 'API key'\nimei        = 'uniq identifier'\n\n\nret = api.login(userid=user, password=pwd, twoFA=factor2, vendor_code=vc, api_secret=app_key, imei=imei)\nprint(ret)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Successful Margin Limits Response in JSON\nDESCRIPTION: Sample JSON response for a successful API call to get_limits method. Shows available cash, payin/payout amounts, margin used, and various MTM values.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request_time\":\"18:07:31 29-05-2020\",\n\"stat\":\"Ok\",\n\"cash\":\"1500000000000000.00\",\n\"payin\":\"0.00\",\n\"payout\":\"0.00\",\n\"brkcollamt\":\"0.00\",\n\"unclearedcash\":\"0.00\",\n\"daycash\":\"0.00\",\n\"turnoverlmt\":\"50000000000000.00\",\n\"pendordvallmt\":\"2000000000000000.00\",\n\"turnover\":\"3915000.00\",\n\"pendordval\":\"2871000.00\",\n\"marginused\":\"3945540.00\",\n\"mtomcurper\":\"0.00\",\n\"urmtom\":\"30540.00\",\n\"grexpo\":\"3915000.00\",\n\"uzpnl_e_i\":\"15270.00\",\n\"uzpnl_e_m\":\"61080.00\",\n\"uzpnl_e_c\":\"-45810.00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Success Response Format for Position Data\nDESCRIPTION: Sample JSON response showing the successful retrieval of position data with all available fields including quantities, prices, and PNL values.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n[\n     {\n\"stat\":\"Ok\",\n\"uid\":\"POORNA\",\n\"actid\":\"POORNA\",\n\"exch\":\"NSE\",\n\"tsym\":\"ACC-EQ\",\n\"prarr\":\"C\",\n\"pp\":\"2\",\n\"ls\":\"1\",\n\"ti\":\"5.00\",\n\"mult\":\"1\",\n\"prcftr\":\"1.000000\",\n\"daybuyqty\":\"2\",\n\"daysellqty\":\"2\",\n\"daybuyamt\":\"2610.00\",\n\"daybuyavgprc\":\"1305.00\",\n\"daysellamt\":\"2610.00\",\n\"daysellavgprc\":\"1305.00\",\n\"cfbuyqty\":\"0\",\n\"cfsellqty\":\"0\",\n\"cfbuyamt\":\"0.00\",\n\"cfbuyavgprc\":\"0.00\",\n\"cfsellamt\":\"0.00\",\n\"cfsellavgprc\":\"0.00\",\n\"openbuyqty\":\"0\",\n\"opensellqty\":\"23\",\n\"openbuyamt\":\"0.00\",\n\"openbuyavgprc\":\"0.00\",\n\"opensellamt\":\"30015.00\",\n\"opensellavgprc\":\"1305.00\",\n\"netqty\":\"0\",\n\"netavgprc\":\"0.00\",\n\"lp\":\"0.00\",\n\"urmtom\":\"0.00\",\n\"rpnl\":\"0.00\",\n\"cforgavgprc\":\"0.00\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Handling Error Response from get_limits Method in JSON\nDESCRIPTION: Sample JSON response when the get_limits API call fails. Shows the error format containing status and error message fields.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"stat\":\"Not_Ok\",\n   \"emsg\":\"Server Timeout :  \"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Format for Position Data\nDESCRIPTION: Sample JSON response showing the error format when position data retrieval fails.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"stat\":\"Not_Ok\",\n    \"request_time\":\"14:14:11 26-05-2020\",\n    \"emsg\":\"Error Occurred : 5 \\\"no data\\\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Logout from Shoonya API Session\nDESCRIPTION: Terminates the current session with Shoonya API. This should be called when finished with trading operations.\nSOURCE: https://github.com/shoonya-dev/shoonyaapi-py/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nret = api.logout()\n```"
  }
]