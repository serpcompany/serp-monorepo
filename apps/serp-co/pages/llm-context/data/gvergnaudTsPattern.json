[
  {
    "owner": "gvergnaud",
    "repo": "ts-pattern",
    "content": "TITLE: Basic Pattern Matching Example in TypeScript React\nDESCRIPTION: Demonstrates the core functionality of ts-pattern with TypeScript and React, showing how to match on different data structures and use pattern selection.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { match, P } from 'ts-pattern';\n\ntype Data =\n  | { type: 'text'; content: string }\n  | { type: 'img'; src: string };\n\ntype Result =\n  | { type: 'ok'; data: Data }\n  | { type: 'error'; error: Error };\n\nconst result: Result = ...;\n\nconst html = match(result)\n  .with({ type: 'error' }, () => <p>Oups! An error occured</p>)\n  .with({ type: 'ok', data: { type: 'text' } }, (res) => <p>{res.data.content}</p>)\n  .with({ type: 'ok', data: { type: 'img', src: P.select() } }, (src) => <img src={src} />)\n  .exhaustive();\n```\n\n----------------------------------------\n\nTITLE: State Reducer Implementation with Pattern Matching\nDESCRIPTION: Shows how to create a state reducer for a frontend application that fetches data, demonstrating complex pattern matching on both state and events.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { match, P } from 'ts-pattern';\n\nconst reducer = (state: State, event: Event) =>\n  match([state, event])\n    .returnType<State>()\n    .with(\n      [{ status: 'loading' }, { type: 'success' }],\n      ([_, event]) => ({ status: 'success', data: event.data })\n    )\n    .with(\n      [{ status: 'loading' }, { type: 'error', error: P.select() }],\n      (error) => ({ status: 'error', error })\n    )\n    .with(\n      [{ status: P.not('loading') }, { type: 'fetch' }],\n      () => ({ status: 'loading', startTime: Date.now() })\n    )\n    .with(\n      [\n        {\n          status: 'loading',\n          startTime: P.when((t) => t + 2000 < Date.now()),\n        },\n        { type: 'cancel' },\n      ],\n      () => ({ status: 'idle' })\n    )\n    .with(P._, () => state)\n    .exhaustive();\n```\n\n----------------------------------------\n\nTITLE: Basic Pattern Matching with .with()\nDESCRIPTION: Demonstrates basic pattern matching using the .with() clause to match state and event patterns. Shows type inference and handler function usage.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n  .with(\n    [{ status: 'loading' }, { type: 'success' }],\n    ([state, event]) => ({\n      // `state` is inferred as { status: 'loading' }\n      // `event` is inferred as { type: 'success', data: string }\n      status: 'success',\n      data: event.data,\n    })\n  )\n```\n\n----------------------------------------\n\nTITLE: Exhaustiveness Checking with Multiple Union Types in TypeScript\nDESCRIPTION: Demonstrates TS-Pattern's ability to perform exhaustiveness checking on multiple union types simultaneously. It shows how the library tracks handled and unhandled cases.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\ntype Permission = 'editor' | 'viewer';\ntype Plan = 'basic' | 'pro';\n\nconst fn = (org: Plan, user: Permission): string =>\n  match([org, user])\n    .with(['basic', 'viewer'], () => {})\n    .with(['basic', 'editor'], () => {})\n    .with(['pro', 'viewer'], () => {})\n    // Fails with `NonExhaustiveError<['pro', 'editor']>`\n    // because the `['pro', 'editor']` case isn't handled.\n    .exhaustive();\n```\n\n----------------------------------------\n\nTITLE: Using P.select() for Value Extraction\nDESCRIPTION: Shows how to use P.select() to extract and inject values from the input into the handler function. Includes examples of both anonymous and named selections.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n  .with(\n    [\n      { status: 'loading' },\n      { type: 'error', error: P.select() }\n    ],\n    (error) => ({ status: 'error', error })\n  )\n```\n\nLANGUAGE: typescript\nCODE:\n```\n  .with(\n    [\n      { status: 'loading' },\n      { type: 'error', error: P.select() }\n    ],\n    (error, stateAndEvent) => {\n      // error: Error\n      // stateAndEvent: [{ status: 'loading' }, { type: 'error', error: Error }]\n    }\n  )\n```\n\nLANGUAGE: typescript\nCODE:\n```\n.with(\n    [\n      { status: 'success', data: P.select('prevData') },\n      { type: 'error', error: P.select('err') }\n    ],\n    ({ prevData, err }) => {\n      // Do something with (prevData: string) and (err: Error).\n    }\n  )\n```\n\n----------------------------------------\n\nTITLE: Guard Functions with P.when()\nDESCRIPTION: Shows two ways to use guard functions: using P.when() in patterns and passing a guard function as second parameter to .with()\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n  .with(\n    [\n      {\n        status: 'loading',\n        startTime: P.when((t) => t + 2000 < Date.now()),\n      },\n      { type: 'cancel' },\n    ],\n    () => ({ status: 'idle' })\n  )\n```\n\nLANGUAGE: typescript\nCODE:\n```\n  .with(\n    [{ status: 'loading' }, { type: 'cancel' }],\n    ([state, event]) => state.startTime + 2000 < Date.now(),\n    () => ({ status: 'idle' })\n  )\n```\n\n----------------------------------------\n\nTITLE: Exhaustive Pattern Matching with Arrays in TypeScript\nDESCRIPTION: Demonstrates exhaustive pattern matching on tuples with ts-pattern, showing how the library enforces handling all possible combinations at compile time.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype Permission = 'editor' | 'viewer';\ntype Plan = 'basic' | 'pro';\n\nconst fn = (org: Plan, user: Permission) =>\n  match([org, user])\n    .with(['basic', 'viewer'], () => {})\n    .with(['basic', 'editor'], () => {})\n    .with(['pro', 'viewer'], () => {})\n    // Fails with `NonExhaustiveError<['pro', 'editor']>`\n    // because the `['pro', 'editor']` case isn't handled.\n    .exhaustive();\n\nconst fn2 = (org: Plan, user: Permission) =>\n  match([org, user])\n    .with(['basic', 'viewer'], () => {})\n    .with(['basic', 'editor'], () => {})\n    .with(['pro', 'viewer'], () => {})\n    .with(['pro', 'editor'], () => {})\n    .exhaustive(); // Works!\n```\n\n----------------------------------------\n\nTITLE: Type Narrowing and Exhaustiveness Checking in TypeScript\nDESCRIPTION: Demonstrates TS-Pattern's type narrowing capabilities and exhaustiveness checking. It shows how types are inferred in different matching scenarios and how exhaustiveness is enforced.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\ntype Text = { type: 'text'; data: string };\ntype Img = { type: 'img'; data: { src: string; alt: string } };\ntype Video = { type: 'video'; data: { src: string; format: 'mp4' | 'webm' } };\ntype Content = Text | Img | Video;\n\nconst formatContent = (content: Content): string =>\n  match(content)\n    .with({ type: 'text' }, (text /* : Text */) => '<p>...</p>')\n    .with({ type: 'img' }, (img /* : Img */) => '<img ... />')\n    .with({ type: 'video' }, (video /* : Video */) => '<video ... />')\n    .with(\n      { type: 'img' },\n      { type: 'video' },\n      (video /* : Img | Video */) => 'img or video'\n    )\n    .with(\n      { type: P.union('img', 'video') },\n      (video /* : Img | Video */) => 'img or video'\n    )\n    .exhaustive();\n```\n\n----------------------------------------\n\nTITLE: Using Type Guard Functions with P.when in TypeScript\nDESCRIPTION: Shows how to use type guard functions with P.when for more precise type narrowing. It demonstrates narrowing a union type based on custom type guards.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nconst isString = (x: unknown): x is string => typeof x === 'string';\n\nconst isNumber = (x: unknown): x is number => typeof x === 'number';\n\nconst fn = (input: { id: number | string }) =>\n  match(input)\n    .with({ id: P.when(isString) }, (narrowed /* : { id: string } */) => 'yes')\n    .with({ id: P.when(isNumber) }, (narrowed /* : { id: number } */) => 'yes')\n    .exhaustive();\n```\n\n----------------------------------------\n\nTITLE: Type Narrowing with P.narrow in TypeScript\nDESCRIPTION: Shows how to use P.narrow to narrow input types based on pattern types. It demonstrates narrowing a union type based on a specific pattern.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\ntype Input = ['a' | 'b' | 'c', 'a' | 'b' | 'c'];\nconst Pattern = ['a', P.union('a', 'b')] as const;\n\ntype Narrowed = P.narrow<Input, typeof Pattern>;\n//     ^? ['a', 'a' | 'b']\n```\n\n----------------------------------------\n\nTITLE: Matching Literal Values in TypeScript\nDESCRIPTION: Shows how to match against literal primitive values like numbers, strings, booleans, and special values like null, undefined, and NaN.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { match } from 'ts-pattern';\n\nconst input: unknown = 2;\n\nconst output = match(input)\n  .with(2, () => 'number: two')\n  .with(true, () => 'boolean: true')\n  .with('hello', () => 'string: hello')\n  .with(undefined, () => 'undefined')\n  .with(null, () => 'null')\n  .with(NaN, () => 'number: NaN')\n  .with(20n, () => 'bigint: 20n')\n  .otherwise(() => 'something else');\n\nconsole.log(output);\n// => 'number: two'\n```\n\n----------------------------------------\n\nTITLE: Matching Object Patterns in TypeScript\nDESCRIPTION: Demonstrates matching against object patterns, where a match occurs when the input object contains all properties in the pattern and each property matches the corresponding sub-pattern.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { match } from 'ts-pattern';\n\ntype Input =\n  | { type: 'user'; name: string }\n  | { type: 'image'; src: string }\n  | { type: 'video'; seconds: number };\n\nlet input: Input = { type: 'user', name: 'Gabriel' };\n\nconst output = match(input)\n  .with({ type: 'image' }, () => 'image')\n  .with({ type: 'video', seconds: 10 }, () => 'video of 10 seconds.')\n  .with({ type: 'user' }, ({ name }) => `user of name: ${name}`)\n  .otherwise(() => 'something else');\n\nconsole.log(output);\n// => 'user of name: Gabriel'\n```\n\n----------------------------------------\n\nTITLE: Using isMatching() as a Type Guard for Pattern Matching\nDESCRIPTION: Shows how to use the isMatching() function as a type guard to check if a value matches a pattern. This can be used both in curried form and with two arguments.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nif (isMatching(pattern, value))  {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Wildcard Pattern Matching with P._\nDESCRIPTION: Shows how to use P._ wildcard pattern to match any value at different levels of the pattern structure.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n  .with(P._, () => state)\n\n  // You could also use it inside another pattern:\n  .with([P._, P._], () => state)\n\n  // at any level:\n  .with([P._, { type: P._ }], () => state)\n```\n\n----------------------------------------\n\nTITLE: Using P.infer for Type Inference in TypeScript\nDESCRIPTION: Demonstrates how to use P.infer to infer types from patterns, particularly useful for validating API responses. It defines a post pattern and uses it to type-check fetched data.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nconst postPattern = {\n  title: P.string,\n  content: P.string,\n  stars: P.number.between(1, 5).optional(),\n  author: {\n    firstName: P.string,\n    lastName: P.string.optional(),\n    followerCount: P.number,\n  },\n} as const;\n\ntype Post = P.infer<typeof postPattern>;\n\n// posts: Post[]\nconst posts = await fetch(someUrl)\n  .then((res) => res.json())\n  .then((res: unknown): Post[] =>\n    isMatching({ data: P.array(postPattern) }, res) ? res.data : []\n  );\n```\n\n----------------------------------------\n\nTITLE: Using Variadic Tuple Patterns in TS-Pattern v5\nDESCRIPTION: This code demonstrates the new variadic tuple patterns feature in TS-Pattern v5, allowing for flexible array matching.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/docs/v4-to-v5-migration-guide.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst example = (value: unknown) =>\n  match(value)\n    .with(\n      // non-empty list of strings\n      [P.string, ...P.array(P.string)],\n      (value) => `value: [string, ...string[]]`\n    )\n    .otherwise(() => null);\n```\n\n----------------------------------------\n\nTITLE: Matching Tuple Patterns in TypeScript\nDESCRIPTION: Shows how to match against tuple patterns, where a match occurs when the input is an array of the same length and each item matches the corresponding sub-pattern.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { match, P } from 'ts-pattern';\n\ntype Input =\n  | [number, '+', number]\n  | [number, '-', number]\n  | [number, '*', number]\n  | ['-', number];\n\nconst input = [3, '*', 4] as Input;\n\nconst output = match(input)\n  .with([P._, '+', P._], ([x, , y]) => x + y)\n  .with([P._, '-', P._], ([x, , y]) => x - y)\n  .with([P._, '*', P._], ([x, , y]) => x * y)\n  .with(['-', P._], ([, x]) => -x)\n  .exhaustive();\n\nconsole.log(output);\n// => 12\n```\n\n----------------------------------------\n\nTITLE: Matching String with Regular Expression using P.string.regex in TypeScript\nDESCRIPTION: Demonstrates using P.string.regex to match strings against a regular expression. The function returns 'single word' for inputs matching /^[a-z]+$/, and 'other strings' otherwise.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn = (input: string) =>\n  match(input)\n    .with(P.string.regex(/^[a-z]+$/), () => 'single word')\n    .otherwise(() => 'other strings');\n\nconsole.log(fn('gabriel')); // logs 'single word'\n```\n\n----------------------------------------\n\nTITLE: Matching Numbers Between a Range with P.number.between in TypeScript\nDESCRIPTION: Shows how to use P.number.between to match numbers within a specified range. The function returns '✅' for numbers between 1 and 5 (inclusive), and '❌' otherwise.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn = (input: number) =>\n  match(input)\n    .with(P.number.between(1, 5), () => '✅')\n    .otherwise(() => '❌');\n\nconsole.log(fn(3), fn(1), fn(5), fn(7)); // logs '✅ ✅ ✅ ❌'\n```\n\n----------------------------------------\n\nTITLE: Defining Pattern Types with P.Pattern in TypeScript\nDESCRIPTION: Illustrates how to use P.Pattern to define types for patterns matching specific structures. It shows an example of creating a pattern for a User type.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\ntype User = { name: string; age: number };\n\nconst userPattern: Pattern<User> = {\n  name: 'Alice',\n};\n```\n\n----------------------------------------\n\nTITLE: Using .otherwise() for Default Handlers in Pattern Matching\nDESCRIPTION: Shows how to use the .otherwise() method to define a default handler when no pattern matches the input value. This functions similar to a default case in switch statements.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nmatch(...)\n  .with(...)\n  .otherwise(defaultHandler)\n```\n\n----------------------------------------\n\nTITLE: Importing Pattern Matchers in TypeScript\nDESCRIPTION: Demonstrates two ways to import pattern matchers from ts-pattern: as the Pattern object or as the shorthand P object.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { match, Pattern } from 'ts-pattern';\n\nconst toString = (value: unknown): string =>\n  match(value)\n    .with(Pattern.string, (str) => str)\n    .with(Pattern.number, (num) => num.toFixed(2))\n    .with(Pattern.boolean, (bool) => `${bool}`)\n    .otherwise(() => 'Unknown');\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { match, P } from 'ts-pattern';\n\nconst toString = (value: unknown): string =>\n  match(value)\n    .with(P.string, (str) => str)\n    .with(P.number, (num) => num.toFixed(2))\n    .with(P.boolean, (bool) => `${bool}`)\n    .otherwise(() => 'Unknown');\n```\n\n----------------------------------------\n\nTITLE: Using Chainable Methods with P.string in TS-Pattern v5\nDESCRIPTION: This example demonstrates the new chainable methods for P.string, enabling more sophisticated string matching patterns.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/docs/v4-to-v5-migration-guide.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst example = (query: string) =>\n  match(query)\n    .with(P.string.startsWith('SELECT'), (query) => `selection`)\n    .with(P.string.endsWith('FROM user'), (query) => `👯‍♂️`)\n    .with(P.string.includes('*'), () => 'contains a star')\n    // Methods can be chained:\n    .with(P.string.startsWith('SET').includes('*'), (query) => `🤯`)\n    .exhaustive();\n```\n\n----------------------------------------\n\nTITLE: Using Chainable Methods with P.number in TS-Pattern v5\nDESCRIPTION: This snippet showcases the new chainable methods for P.number, allowing for more precise number matching patterns.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/docs/v4-to-v5-migration-guide.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst example = (position: { x: number; y: number }) =>\n  match(position)\n    .with({ x: P.number.gte(100) }, (value) => '🎮')\n    .with({ x: P.number.between(0, 100) }, (value) => '🎮')\n    .with(\n      {\n        x: P.number.positive().int(),\n        y: P.number.positive().int(),\n      },\n      (value) => '🎮'\n    )\n    .otherwise(() => 'x or y is negative');\n```\n\n----------------------------------------\n\nTITLE: Multiple Pattern Matching\nDESCRIPTION: Demonstrates how to match multiple patterns with the same handler function, similar to switch statement case grouping.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst sanitize = (name: string) =>\n  match(name)\n    .with('text', 'span', 'p', () => 'text')\n    .with('btn', 'button', () => 'button')\n    .otherwise(() => name);\n\nsanitize('span'); // 'text'\nsanitize('p'); // 'text'\nsanitize('button'); // 'button'\n```\n\n----------------------------------------\n\nTITLE: Using P._ Wildcard for Any Value Matching\nDESCRIPTION: Demonstrates the use of P._ (or its alias P.any) to match any value regardless of type, which is useful as a fallback or when the actual value doesn't matter.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { match, P } from 'ts-pattern';\n\nconst input = 'hello';\n\nconst output = match(input)\n  .with(P._, () => 'It will always match')\n  // OR\n  .with(P.any, () => 'It will always match')\n  .otherwise(() => 'This string will never be used');\n\nconsole.log(output);\n// => 'It will always match'\n```\n\n----------------------------------------\n\nTITLE: Using P.nonNullable Wildcard for Non-Null/Undefined Matching\nDESCRIPTION: Shows how to use the P.nonNullable wildcard to match any value except null or undefined, useful for processing only defined values.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { match, P } from 'ts-pattern';\n\nconst input = null;\n\nconst output = match<number | null | undefined>(input)\n  .with(P.nonNullable, () => 'it is a number!')\n  .otherwise(() => 'it is either null or undefined!');\n\nconsole.log(output);\n// => 'it is either null or undefined!'\n```\n\n----------------------------------------\n\nTITLE: Using P.boolean Wildcard for Boolean Type Matching\nDESCRIPTION: Shows how to use the P.boolean wildcard to match any value of type boolean, allowing processing of boolean values in a pattern match.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { match, P } from 'ts-pattern';\n\nconst input = true;\n\nconst output = match<number | string | boolean>(input)\n  .with(P.string, () => 'it is a string!')\n  .with(P.number, () => 'it is a number!')\n  .with(P.boolean, () => 'it is a boolean!')\n  .exhaustive();\n\nconsole.log(output);\n// => 'it is a boolean!'\n```\n\n----------------------------------------\n\nTITLE: Pattern Negation with P.not()\nDESCRIPTION: Demonstrates how to match everything except a specific pattern using P.not().\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n  .with(\n    [{ status: P.not('loading') }, { type: 'fetch' }],\n    () => ({ status: 'loading' })\n  )\n```\n\n----------------------------------------\n\nTITLE: Using P.string Wildcard for String Type Matching\nDESCRIPTION: Shows how to use the P.string wildcard to match any value of type string, which is useful when you need to process any string value.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { match, P } from 'ts-pattern';\n\nconst input = 'hello';\n\nconst output = match(input)\n  .with('bonjour', () => 'Won't match')\n  .with(P.string, () => 'it is a string!')\n  .exhaustive();\n\nconsole.log(output);\n// => 'it is a string!'\n```\n\n----------------------------------------\n\nTITLE: Using isMatching() with Two Arguments\nDESCRIPTION: Shows how to use isMatching() with both pattern and value arguments to directly check if a value matches a specific pattern.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst blogPostPattern = {\n  type: 'blogpost',\n  title: P.string,\n  description: P.string,\n} as const;\n\nif (isMatching(blogPostPattern, value)) {\n  // value: { type: 'blogpost', title: string, description: string }\n}\n```\n\n----------------------------------------\n\nTITLE: Using P.number Wildcard for Number Type Matching\nDESCRIPTION: Demonstrates how to use the P.number wildcard to match any value of type number, allowing processing of numerical values in a pattern match.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { match, P } from 'ts-pattern';\n\nconst input = 2;\n\nconst output = match<number | string>(input)\n  .with(P.string, () => 'it is a string!')\n  .with(P.number, () => 'it is a number!')\n  .exhaustive();\n\nconsole.log(output);\n// => 'it is a number!'\n```\n\n----------------------------------------\n\nTITLE: Using isMatching() in Curried Form\nDESCRIPTION: Demonstrates how to use isMatching() with a single argument to create a reusable type guard function that checks if values match a specific pattern.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isMatching, P } from 'ts-pattern';\n\nconst isBlogPost = isMatching({\n  type: 'blogpost',\n  title: P.string,\n  description: P.string,\n});\n\nif (isBlogPost(value)) {\n  // value: { type: 'blogpost', title: string, description: string }\n}\n```\n\n----------------------------------------\n\nTITLE: Using P.nullish Wildcard for Null/Undefined Matching\nDESCRIPTION: Demonstrates the P.nullish wildcard which matches either null or undefined values, useful when handling nullable or optional types.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { match, P } from 'ts-pattern';\n\nconst input = null;\n\nconst output = match<number | null | undefined>(input)\n  .with(P.number, () => 'it is a number!')\n  .with(P.nullish, () => 'it is either null or undefined!')\n  .exhaustive();\n\nconsole.log(output);\n// => 'it is either null or undefined!'\n```\n\n----------------------------------------\n\nTITLE: Matching String Length with P.string.length in TypeScript\nDESCRIPTION: Demonstrates using P.string.length to match strings with exactly a specified number of characters. The function returns '🎉' for strings with 2 characters, and '❌' otherwise.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn = (input: string) =>\n  match(input)\n    .with(P.string.length(2), () => '🎉')\n    .otherwise(() => '❌');\n\nconsole.log(fn('ok')); // logs '🎉'\n```\n\n----------------------------------------\n\nTITLE: Matching Maximum String Length with P.string.maxLength in TypeScript\nDESCRIPTION: Shows how to use P.string.maxLength to match strings with at most a specified number of characters. The function returns '🎉' for strings with 5 or fewer characters, and 'too long' otherwise.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn = (input: string) =>\n  match(input)\n    .with(P.string.maxLength(5), () => '🎉')\n    .otherwise(() => 'too long');\n\nconsole.log(fn('is this too long?')); // logs 'too long'\n```\n\n----------------------------------------\n\nTITLE: Matching String Inclusion with P.string.includes in TypeScript\nDESCRIPTION: Illustrates using P.string.includes to match strings containing a specific substring. The function returns '✅' if the input contains '!', and '❌' otherwise.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn = (input: string) =>\n  match(input)\n    .with(P.string.includes('!'), () => '✅')\n    .otherwise(() => '❌');\n\nconsole.log(fn('Good job! 🎉')); // logs '✅'\n```\n\n----------------------------------------\n\nTITLE: Matching Numbers Less Than a Value with P.number.lt in TypeScript\nDESCRIPTION: Demonstrates using P.number.lt to match numbers smaller than a specified value. The function returns '✅' for numbers less than 7, and '❌' otherwise.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn = (input: number) =>\n  match(input)\n    .with(P.number.lt(7), () => '✅')\n    .otherwise(() => '❌');\n\nconsole.log(fn(2), fn(7)); // logs '✅ ❌'\n```\n\n----------------------------------------\n\nTITLE: Matching Numbers Less Than or Equal to a Value with P.number.lte in TypeScript\nDESCRIPTION: Shows how to use P.number.lte to match numbers less than or equal to a specified value. The function returns '✅' for numbers less than or equal to 7, and '❌' otherwise.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn = (input: number) =>\n  match(input)\n    .with(P.number.lte(7), () => '✅')\n    .otherwise(() => '❌');\n\nconsole.log(fn(7), fn(12)); // logs '✅ ❌'\n```\n\n----------------------------------------\n\nTITLE: Matching Numbers Greater Than a Value with P.number.gt in TypeScript\nDESCRIPTION: Illustrates using P.number.gt to match numbers greater than a specified value. The function returns '✅' for numbers greater than 7, and '❌' otherwise.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn = (input: number) =>\n  match(input)\n    .with(P.number.gt(7), () => '✅')\n    .otherwise(() => '❌');\n\nconsole.log(fn(12), fn(7)); // logs '✅ ❌'\n```\n\n----------------------------------------\n\nTITLE: Matching Numbers Greater Than or Equal to a Value with P.number.gte in TypeScript\nDESCRIPTION: Demonstrates using P.number.gte to match numbers greater than or equal to a specified value. The function returns '✅' for numbers greater than or equal to 7, and '❌' otherwise.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn = (input: number) =>\n  match(input)\n    .with(P.number.gte(7), () => '✅')\n    .otherwise(() => '❌');\n\nconsole.log(fn(7), fn(2)); // logs '✅ ❌'\n```\n\n----------------------------------------\n\nTITLE: Matching Integers with P.number.int in TypeScript\nDESCRIPTION: Illustrates using P.number.int to match integer numbers. The function returns '✅' for integers, and '❌' for non-integers.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn = (input: number) =>\n  match(input)\n    .with(P.number.int(), () => '✅')\n    .otherwise(() => '❌');\n\nconsole.log(fn(12), fn(-3.141592)); // logs '✅ ❌'\n```\n\n----------------------------------------\n\nTITLE: Matching Finite Numbers with P.number.finite in TypeScript\nDESCRIPTION: Shows how to use P.number.finite to match finite numbers. The function returns '✅' for all numbers except Infinity and -Infinity, and '❌' otherwise.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn = (input: number) =>\n  match(input)\n    .with(P.number.finite(), () => '✅')\n    .otherwise(() => '❌');\n\nconsole.log(fn(-3.141592), fn(Infinity)); // logs '✅ ❌'\n```\n\n----------------------------------------\n\nTITLE: Matching Positive Numbers with P.number.positive in TypeScript\nDESCRIPTION: Demonstrates using P.number.positive to match positive numbers. The function returns '✅' for positive numbers, and '❌' for non-positive numbers.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn = (input: number) =>\n  match(input)\n    .with(P.number.positive(), () => '✅')\n    .otherwise(() => '❌');\n\nconsole.log(fn(7), fn(-3.141592)); // logs '✅ ❌'\n```\n\n----------------------------------------\n\nTITLE: Matching Negative Numbers with P.number.negative in TypeScript\nDESCRIPTION: Illustrates using P.number.negative to match negative numbers. The function returns '✅' for negative numbers, and '❌' for non-negative numbers.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn = (input: number) =>\n  match(input)\n    .with(P.number.negative(), () => '✅')\n    .otherwise(() => '❌');\n\nconsole.log(fn(-3.141592), fn(7)); // logs '✅ ❌'\n```\n\n----------------------------------------\n\nTITLE: Function Signatures for isMatching()\nDESCRIPTION: Defines both function signatures for isMatching(): the curried version that returns a type guard function, and the direct version that takes both pattern and value.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport function isMatching<p extends Pattern<any>>(\n  pattern: p\n): (value: any) => value is InvertPattern<p>;\nexport function isMatching<p extends Pattern<any>>(\n  pattern: p,\n  value: any\n): value is InvertPattern<p>;\n```\n\n----------------------------------------\n\nTITLE: Function Signature for .otherwise() Method\nDESCRIPTION: Defines the function signature for the .otherwise() method, which takes a default handler function that processes the input value when no other patterns match.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfunction otherwise(defaultHandler: (value: TInput) => TOutput): TOutput;\n```\n\n----------------------------------------\n\nTITLE: Function Signature for .run() Method\nDESCRIPTION: Defines the function signature for the .run() method, which returns the result of pattern matching but can throw at runtime if no pattern matches.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nfunction run(): TOutput;\n```\n\n----------------------------------------\n\nTITLE: Using .run() for Unsafe Pattern Matching Execution\nDESCRIPTION: Demonstrates the .run() method which executes pattern matching and throws an error if no pattern matches. Unlike .exhaustive(), this method does not guarantee exhaustiveness at compile time.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nmatch(...)\n  .with(...)\n  .run()\n```\n\n----------------------------------------\n\nTITLE: Updating Map and Set Matching in TS-Pattern v5\nDESCRIPTION: This code demonstrates how to update Map and Set matching patterns from v4 to v5 using P.map and P.set.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/docs/v4-to-v5-migration-guide.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n- import { match } from 'ts-pattern';\n+ import { match, P } from 'ts-pattern';\n\n\nconst someFunction = (value: Set<number> | Map<string, number>) =>\n  match(value)\n-   .with(new Set([P.number]), (set) => `a set of numbers`)\n-   .with(new Map([['key', P.number]]), (map) => `map.get('key') is a number`)\n+   .with(P.set(P.number), (set) => `a set of numbers`)\n+   .with(P.map('key', P.number), (map) => `map.get('key') is a number`)\n    .otherwise(() => null);\n```\n\n----------------------------------------\n\nTITLE: Using P.bigint Wildcard for BigInt Type Matching\nDESCRIPTION: Demonstrates how to use the P.bigint wildcard to match any value of type bigint, allowing processing of large integer values.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { match, P } from 'ts-pattern';\n\nconst input = 20000000n;\n\nconst output = match<bigint | null>(input)\n  .with(P.bigint, () => 'it is a bigint!')\n  .otherwise(() => '?');\n\nconsole.log(output);\n// => 'it is a bigint!'\n```\n\n----------------------------------------\n\nTITLE: Using P.symbol Wildcard for Symbol Type Matching\nDESCRIPTION: Shows how to use the P.symbol wildcard to match any value of type symbol, allowing processing of symbol values in a pattern match.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { match, P } from 'ts-pattern';\n\nconst input = Symbol('some symbol');\n\nconst output = match<symbol | null>(input)\n  .with(P.symbol, () => 'it is a symbol!')\n  .otherwise(() => '?');\n\nconsole.log(output);\n// => 'it is a symbol!'\n```\n\n----------------------------------------\n\nTITLE: Using .returnType in TS-Pattern v5\nDESCRIPTION: This snippet illustrates the new .returnType method in TS-Pattern v5, which allows setting the return type explicitly without specifying the input type.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/docs/v4-to-v5-migration-guide.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nmatch({ isAdmin, plan })\n  .returnType<number>() // 👈 new\n  .with({ isAdmin: true }, () => 123)\n  .with({ plan: 'free' }, () => 'Oops!');\n//                              ~~~~~~ ❌ not a number.\n```\n\n----------------------------------------\n\nTITLE: Using Global Methods in TS-Pattern v5\nDESCRIPTION: This snippet shows the usage of global methods available for all primitive type patterns in TS-Pattern v5.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/docs/v4-to-v5-migration-guide.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst example = (value: unknown) =>\n  match(value)\n    .with(\n      {\n        username: P.string,\n        displayName: P.string.optional(),\n      },\n      () => `{ username:string, displayName?: string }`\n    )\n    .with(\n      {\n        title: P.string,\n        author: { username: P.string.select() },\n      },\n      (username) => `author.username is ${username}`\n    )\n    .with(\n      P.instanceOf(Error).and({ source: P.string }),\n      () => `Error & { source: string }`\n    )\n    .with(P.string.or(P.number), () => `string | number`)\n    .otherwise(() => null);\n```\n\n----------------------------------------\n\nTITLE: Migrating Pattern Functions in TypeScript\nDESCRIPTION: Demonstrates migration of pattern creation functions like select(), not(), and when() to the P module\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/docs/v3-to-v4-migration-guide.md#2025-04-19_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import { match, select, not, when } from 'ts-pattern';\n+ import { match, P } from 'ts-pattern';\n\n\nconst toString = (value: number) =>\n  match(value)\n-   .with({ prop: select() }, (v) => `${v}`)\n+   .with({ prop: P.select() }, (v) => `${v}`)\n\n-   .with({ prop: not(10) }, (v) => `${v}`)\n+   .with({ prop: P.not(10) }, (v) => `${v}`)\n\n-   .with({ prop: when((x) => x < 5) }, (v) => `${v}`)\n+   .with({ prop: P.when((x) => x < 5) }, (v) => `${v}`)\n    .exhaustive();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Eager Evaluation in TS-Pattern v5\nDESCRIPTION: This snippet illustrates how TS-Pattern v5 eagerly evaluates patterns, executing the matching handler as soon as it's found.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/docs/v4-to-v5-migration-guide.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// TS-Pattern v5\nsomeFunction({ type: 'ok', value: 42 }); // logs \"42\" to the console!\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lazy Evaluation in TS-Pattern v4\nDESCRIPTION: This snippet shows how TS-Pattern v4 lazily evaluates patterns, not executing any code until .exhaustive() or .otherwise() is called.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/docs/v4-to-v5-migration-guide.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// TS-Pattern v4\ntype Input = { type: 'ok'; value: number } | { type: 'error'; error: Error };\n\n// We don't call `.exhaustive`, so handlers don't run.\nfunction someFunction(input: Input) {\n  match(input)\n    .with({ type: 'ok' }, ({ value }) => {\n      console.log(value);\n    })\n    .with({ type: 'error' }, ({ error }) => {\n      throw error;\n    });\n}\n\nsomeFunction({ type: 'ok', value: 42 }); // nothing happens\n```\n\n----------------------------------------\n\nTITLE: Union and Intersection Patterns in TypeScript\nDESCRIPTION: Demonstrates use of P.union() and P.intersection() for combining multiple patterns\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/docs/v3-to-v4-migration-guide.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Input =\n  | { type: 'a'; value: string }\n  | { type: 'b'; value: number }\n  | {\n      type: 'c';\n      value:\n        | { type: 'd'; value: boolean }\n        | { type: 'e'; value: string[] }\n        | { type: 'f'; value: number[] };\n    };\n\nconst f = (input: Input) =>\n  match(input)\n    .with(\n      { type: P.union('a', 'b') },\n      (x) => 'branch 1'\n    )\n    .with(\n      {\n        type: 'c',\n        value: { value: P.union(P.boolean, P.array(P.string)) },\n      },\n      (x) => 'branch 2'\n    )\n    .with({ type: 'c', value: { type: 'f' } }, () => 'branch 3')\n    .exhaustive();\n```\n\n----------------------------------------\n\nTITLE: Array Pattern Matching in TypeScript\nDESCRIPTION: Shows usage of P.array() for matching arrays and new features for handling optional properties\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/docs/v3-to-v4-migration-guide.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { match, P } from 'ts-pattern';\n\nconst responsePattern = {\n  data: P.array({\n    id: P.string,\n    post: P.array({\n      title: P.string,\n      content: P.string,\n    }),\n  }),\n};\n\nfetchSomething().then((value: unknown) =>\n  match(value)\n    .with(responsePattern, (value) => {\n      // value: { data: { id: string, post: { title: string, content: string }[] }[] }\n      return value;\n    })\n    .otherwise(() => {\n      throw new Error('unexpected response');\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Migrating Pattern Imports in TypeScript\nDESCRIPTION: Shows how to update imports from __ to Pattern/P module for type-specific wildcard patterns\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/docs/v3-to-v4-migration-guide.md#2025-04-19_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { match, __ } from 'ts-pattern';\n+ import { match, Pattern } from 'ts-pattern';\n\n\nconst toString = (value: string | number) =>\n  match(value)\n-   .with(__.string, (v) => v)\n-   .with(__.number, (v) => `${v}`)\n+   .with(Pattern.string, (v) => v)\n+   .with(Pattern.number, (v) => `${v}`)\n    .exhaustive();\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Array Reversal Using Pattern Matching in TypeScript\nDESCRIPTION: A TypeScript example demonstrating how to use pattern matching to implement a recursive array reversal function. The code uses the P.array() pattern to handle variadic tuples in pattern matching.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/docs/roadmap.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst reverse = <T>(xs: T[]): T[] => {\n  return match<T[], T[]>(xs)\n    .with([P.any, ...P.array()], ([x, ...xs]) => [...reverse(xs), x])\n    .otherwise(() => []);\n};\n\nmatch(xs)\n  .with([P.any, ...P.array()], (xs: [unknown, ...unknown[]]) => [])\n  .with([42, ...P.array(P.number), '!'], (xs: [42, ...number[], '!']) => [])\n  .with(\n    [...P.array(P.number), ...P.array(P.string)],\n    (xs: [...number[], ...string[]]) => []\n  )\n  .otherwise(() => []);\n```\n\n----------------------------------------\n\nTITLE: NPM Installation Commands for TS-Pattern\nDESCRIPTION: Commands to install the ts-pattern library using various package managers including npm, pnpm, yarn, bun, and npx jsr.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install ts-pattern\n```\n\n----------------------------------------\n\nTITLE: Alternative Package Manager Installation Commands\nDESCRIPTION: Alternative installation commands for the ts-pattern library using different package managers like pnpm, yarn, bun, and npx jsr.\nSOURCE: https://github.com/gvergnaud/ts-pattern/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm add ts-pattern\n# OR\nyarn add ts-pattern\n# OR\nbun add ts-pattern\n# OR\nnpx jsr add @gabriel/ts-pattern\n```"
  }
]