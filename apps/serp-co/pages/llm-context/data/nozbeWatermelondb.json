[
  {
    "owner": "nozbe",
    "repo": "watermelondb",
    "content": "TITLE: Defining Models in WatermelonDB (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define data models in WatermelonDB using JavaScript decorators. It shows a Post model with name and body fields, and a relationship to Comment models via the @children decorator.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Post extends Model {\n  @field('name') name\n  @field('body') body\n  @children('comments') comments\n}\n\nclass Comment extends Model {\n  @field('body') body\n  @field('author') author\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reactive Components with withObservables in WatermelonDB\nDESCRIPTION: This example shows how to connect React components to WatermelonDB data using withObservables HOC. It demonstrates creating a Comment component and making it reactive to changes in the database.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Comment = ({ comment }) => (\n  <View style={styles.commentBox}>\n    <Text>{comment.body} — by {comment.author}</Text>\n  </View>\n)\n\n// This is how you make your app reactive! ✨\nconst enhance = withObservables(['comment'], ({ comment }) => ({\n  comment,\n}))\nconst EnhancedComment = enhance(Comment)\n```\n\n----------------------------------------\n\nTITLE: Configuring WatermelonDB with SQLiteAdapter for React Native\nDESCRIPTION: Sets up WatermelonDB with SQLiteAdapter for React Native and Node.js environments. This code initializes the database connection with schema, migrations, and optional configurations like JSI support for performance.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Setup.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Platform } from 'react-native'\nimport { Database } from '@nozbe/watermelondb'\nimport SQLiteAdapter from '@nozbe/watermelondb/adapters/sqlite'\n\nimport schema from './model/schema'\nimport migrations from './model/migrations'\n// import Post from './model/Post' // ⬅️ You'll import your Models here\n\n// First, create the adapter to the underlying database:\nconst adapter = new SQLiteAdapter({\n  schema,\n  // (You might want to comment it out for development purposes -- see Migrations documentation)\n  migrations,\n  // (optional database name or file system path)\n  // dbName: 'myapp',\n  // (recommended option, should work flawlessly out of the box on iOS. On Android,\n  // additional installation steps have to be taken - disable if you run into issues...)\n  jsi: true, /* Platform.OS === 'ios' */\n  // (optional, but you should implement this method)\n  onSetUpError: error => {\n    // Database failed to load -- offer the user to reload the app or log out\n  }\n})\n\n// Then, make a Watermelon database from it!\nconst database = new Database({\n  adapter,\n  modelClasses: [\n    // Post, // ⬅️ You'll add Models to Watermelon here\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Tables and Columns in WatermelonDB\nDESCRIPTION: A basic schema definition example that creates tables for 'posts' and 'comments' with their respective columns. This demonstrates how to set up table schemas with different column types and properties like isOptional and isIndexed.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Schema.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// model/schema.js\nimport { appSchema, tableSchema } from '@nozbe/watermelondb'\n\nexport const mySchema = appSchema({\n  version: 1,\n  tables: [\n    tableSchema({\n      name: 'posts',\n      columns: [\n        { name: 'title', type: 'string' },\n        { name: 'subtitle', type: 'string', isOptional: true },\n        { name: 'body', type: 'string' },\n        { name: 'is_pinned', type: 'boolean' },\n      ]\n    }),\n    tableSchema({\n      name: 'comments',\n      columns: [\n        { name: 'body', type: 'string' },\n        { name: 'post_id', type: 'string', isIndexed: true },\n      ]\n    }),\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Writer Method on a Model in WatermelonDB\nDESCRIPTION: Demonstrates how to define a writer method on a Model using the @writer decorator. This creates a method that can modify the database without requiring an explicit database.write() call.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CRUD.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { writer } from '@nozbe/watermelondb/decorators'\n\nclass Comment extends Model {\n  // (...)\n  @writer async markAsSpam() {\n    await this.update(comment => {\n      comment.isSpam = true\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reactive Post Component with Related Data in WatermelonDB\nDESCRIPTION: This snippet shows how to build a Post component that displays related Comment components. It uses withObservables to observe both the post and its related comments, making the entire component tree reactive to data changes.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Post = ({ post, comments }) => (\n  <View>\n    <Text>{post.name}</Text>\n    <Text>Comments:</Text>\n    {comments.map(comment =>\n      <EnhancedComment key={comment.id} comment={comment} />\n    )}\n  </View>\n)\n\nconst enhance = withObservables(['post'], ({ post }) => ({\n  post,\n  comments: post.comments\n}))\n```\n\n----------------------------------------\n\nTITLE: Getting a Collection in WatermelonDB\nDESCRIPTION: Demonstrates how to get a collection object from a database, which is used to find, query, and create new records of a specific type. The collection is obtained by passing the table name as an argument.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CRUD.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst postsCollection = database.get('posts')\n```\n\n----------------------------------------\n\nTITLE: Defining Database Models in WatermelonDB\nDESCRIPTION: Example of defining database models in WatermelonDB using decorators. This snippet shows how to create Post and Comment models with fields and relationships.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Post extends Model {\n  @field('name') name\n  @field('body') body\n  @children('comments') comments\n}\n\nclass Comment extends Model {\n  @field('body') body\n  @field('author') author\n}\n```\n\n----------------------------------------\n\nTITLE: Using Database Write Transaction in WatermelonDB\nDESCRIPTION: Shows how to wrap database modifications in a write transaction using database.write(). This example demonstrates updating a comment to mark it as spam within a transaction.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CRUD.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait database.write(async () => {\n  const someComment = await database.get('comments').find(commentId)\n  await someComment.update((comment) => {\n    comment.isSpam = true\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a New Record in WatermelonDB\nDESCRIPTION: Shows how to create a new record using a collection's create() method. The create method takes a builder function that receives a new model instance where you can set the field values.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CRUD.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst newPost = await database.get('posts').create(post => {\n  post.title = 'New post'\n  post.body = 'Lorem ipsum...'\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Records in WatermelonDB\nDESCRIPTION: Demonstrates how to query records using WatermelonDB's query API. Shows examples of fetching all records from a collection and counting records that match a specific condition using the Q.where query builder.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CRUD.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst allPosts = await database.get('posts').query().fetch()\nconst numberOfStarredPosts = await database.get('posts').query(\n  Q.where('is_starred', true)\n).fetchCount()\n```\n\n----------------------------------------\n\nTITLE: Defining Associations for Post and Comment Models in JavaScript\nDESCRIPTION: Illustrates how to set up associations between Post and Comment models, including has_many and belongs_to relationships.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Model.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Post extends Model {\n  static table = 'posts'\n  static associations = {\n    comments: { type: 'has_many', foreignKey: 'post_id' },\n  }\n}\n\nclass Comment extends Model {\n  static table = 'comments'\n  static associations = {\n    posts: { type: 'belongs_to', key: 'post_id' },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing a Component with withObservables for Reactivity\nDESCRIPTION: Demonstrates how to use withObservables to make a component reactively observe a Comment model. The component will re-render automatically when the comment data changes.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Components.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withObservables } from '@nozbe/watermelondb/react'\n\nconst enhance = withObservables(['comment'], ({ comment }) => ({\n  comment // shortcut syntax for `comment: comment.observe()`\n}))\nconst EnhancedComment = enhance(Comment)\nexport default EnhancedComment\n```\n\n----------------------------------------\n\nTITLE: Defining Writer Method in WatermelonDB Model (JavaScript)\nDESCRIPTION: Shows how to define a writer method on a Model subclass using the @writer decorator. This method adds a new comment to a post, demonstrating the recommended approach for organizing database-changing code.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Writers.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { writer } from '@nozbe/watermelondb/decorators'\n\nclass Post extends Model {\n  // ...\n\n  @writer async addComment(body, author) {\n    const newComment = await this.collections.get('comments').create(comment => {\n      comment.post.set(this)\n      comment.author.set(author)\n      comment.body = body\n    })\n    return newComment\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Relation Fields to Comment Model in JavaScript\nDESCRIPTION: Demonstrates how to add relation fields to the Comment model using @relation and @immutableRelation decorators.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Model.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { relation, immutableRelation } from '@nozbe/watermelondb/decorators'\n\nclass Comment extends Model {\n  // ...\n  @relation('posts', 'post_id') post\n  @immutableRelation('users', 'author_id') author\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Queries on Collections in WatermelonDB\nDESCRIPTION: Shows how to query any table directly from the database instance. This example fetches all users who made a comment on a specific post, demonstrating relationships across collections.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Q } from '@nozbe/watermelondb'\n\nconst users = await database.get('users').query(\n  // conditions that a user must match:\n  Q.on('comments', 'post_id', somePostId)\n).fetch()\n```\n\n----------------------------------------\n\nTITLE: Creating a Sorted Comment List with observeWithColumns\nDESCRIPTION: Shows how to observe a dynamically sorted list of comments to ensure the component re-renders when the sort order changes. Uses observeWithColumns to specify which columns affect the sorting.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Components.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// This is a function that sorts an array of comments according to its `likes` field\n// I'm using `ramda` functions for this example, but you can do sorting however you like\nconst sortComments = sortWith([\n  descend(prop('likes'))\n])\n\nconst CommentList = ({ comments }) => (\n  <div>\n    {sortComments(comments).map(comment =>\n      <EnhancedComment key={comment.id} comment={comment} />\n    )}\n  </div>\n)\n\nconst enhance = withObservables(['post'], ({ post }) => ({\n  comments: post.comments.observeWithColumns(['likes'])\n}))\n\nconst EnhancedCommentList = enhance(CommentList)\n```\n\n----------------------------------------\n\nTITLE: Configuring WatermelonDB with LokiJSAdapter for Web Applications\nDESCRIPTION: Sets up WatermelonDB with LokiJSAdapter for web browsers. This adapter uses LokiJS and optionally IndexedDB for persistence, with configurations for handling storage limits, synchronization, and error handling.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Setup.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport LokiJSAdapter from '@nozbe/watermelondb/adapters/lokijs'\n\nconst adapter = new LokiJSAdapter({\n  schema,\n  // (You might want to comment out migrations for development purposes -- see Migrations documentation)\n  migrations,\n  useWebWorker: false,\n  useIncrementalIndexedDB: true,\n  // dbName: 'myapp', // optional db name\n\n  // --- Optional, but recommended event handlers:\n\n  onQuotaExceededError: (error) => {\n    // Browser ran out of disk space -- offer the user to reload the app or log out\n  },\n  onSetUpError: (error) => {\n    // Database failed to load -- offer the user to reload the app or log out\n  },\n  extraIncrementalIDBOptions: {\n    onDidOverwrite: () => {\n      // Called when this adapter is forced to overwrite contents of IndexedDB.\n      // This happens if there's another open tab of the same app that's making changes.\n      // Try to synchronize the app now, and if user is offline, alert them that if they close this\n      // tab, some data may be lost\n    },\n    onversionchange: () => {\n      // database was deleted in another browser tab (user logged out), so we must make sure we delete\n      // it in this tab as well - usually best to just refresh the page\n      if (checkIfUserIsLoggedIn()) {\n        window.location.reload()\n      }\n    },\n  }\n})\n\n// The rest is the same!\n```\n\n----------------------------------------\n\nTITLE: Creating Reactive Components with withObservables in WatermelonDB\nDESCRIPTION: Example of connecting React components to WatermelonDB data using the withObservables higher-order component to make the UI reactive to data changes.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Comment = ({ comment }) => (\n  <View style={styles.commentBox}>\n    <Text>{comment.body} — by {comment.author}</Text>\n  </View>\n)\n\n// This is how you make your app reactive! ✨\nconst enhance = withObservables(['comment'], ({ comment }) => ({\n  comment,\n}))\nconst EnhancedComment = enhance(Comment)\n```\n\n----------------------------------------\n\nTITLE: Connecting Queries to React Components with withObservables\nDESCRIPTION: Shows how to connect WatermelonDB queries to React components using withObservables. This pattern enables reactive UI updates when database records change.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nwithObservables(['post'], ({ post }) => ({\n  post,\n  comments: post.comments,\n  verifiedCommentCount: post.verifiedComments.observeCount(),\n}))\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Writer in WatermelonDB (JavaScript)\nDESCRIPTION: Demonstrates how to use an inline writer to create a new post and associated comment in WatermelonDB. The writer is invoked using the database.write() method, which must be passed an asynchronous function.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Writers.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst newPost = await database.write(async => {\n  const post = await database.get('posts').create(post => {\n    post.title = 'New post'\n    post.body = 'Lorem ipsum...'\n  })\n  const comment = await database.get('comments').create(comment => {\n    comment.post.set(post)\n    comment.author.id = someUserId\n    comment.body = 'Great post!'\n  })\n\n  // Note: Value returned from the wrapped function will be returned to `database.write` caller\n  return post\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Migration Setup in WatermelonDB\nDESCRIPTION: Creates a basic migration file structure using schemaMigrations from WatermelonDB. Sets up the foundation for defining database schema migrations.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/Migrations.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// app/model/migrations.js\n\nimport { schemaMigrations } from '@nozbe/watermelondb/Schema/migrations'\n\nexport default schemaMigrations({\n  migrations: [\n    // We'll add migration definitions here later\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Updating a Record in WatermelonDB\nDESCRIPTION: Demonstrates how to update an existing record using the update() method. Like create(), update() takes a builder function where you can modify the record's fields.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CRUD.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait somePost.update(post => {\n  post.title = 'Updated title'\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Schema Structure for WatermelonDB in JavaScript\nDESCRIPTION: Creates a basic schema file structure for WatermelonDB with an empty tables array that will be populated later. The schema defines the version and database structure for the application.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Setup.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { appSchema, tableSchema } from '@nozbe/watermelondb'\n\nexport default appSchema({\n  version: 1,\n  tables: [\n    // We'll add tableSchemas here later\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Nested JOIN Queries with experimentalNestedJoin\nDESCRIPTION: Demonstrates how to query across multiple relationship levels using experimentalNestedJoin. This example queries tasks based on conditions in their grandparent records.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// this queries tasks that are inside projects that are inside teams where team.foo == 'bar'\ntasksCollection.query(\n  Q.experimentalNestedJoin('projects', 'teams'),\n  Q.on('projects', Q.on('teams', 'foo', 'bar')),\n)\n```\n\n----------------------------------------\n\nTITLE: Using the useDatabase React Hook with WatermelonDB\nDESCRIPTION: Shows how to use the useDatabase hook to access the Database Context in a functional component. This provides a clean way to access the database instance.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useDatabase } from '@nozbe/watermelondb/hooks'\nconst Component = () => {\n  const database = useDatabase()\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting and Pagination in WatermelonDB Queries\nDESCRIPTION: Demonstrates how to sort query results by multiple columns and implement pagination with skip and take modifiers. This is particularly useful for optimizing performance when working with large datasets by limiting the number of records loaded into memory.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ndatabase.get('comments').query(\n  // sorts by number of likes from the most likes to the fewest\n  Q.sortBy('likes', Q.desc),\n  // if two comments have the same number of likes, the one with fewest dislikes will be at the top\n  Q.sortBy('dislikes', Q.asc),\n  // limit number of comments to 100, skipping the first 50\n  Q.skip(50),\n  Q.take(100),\n)\n```\n\n----------------------------------------\n\nTITLE: Consuming Database with withDatabase HOC in WatermelonDB\nDESCRIPTION: Shows how to access the database instance in a component using the withDatabase Higher-Order Component. This pattern is useful for class components or complex query composition.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Components.md#2025-04-18_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withDatabase, compose } from '@nozbe/watermelondb/react'\n\n// ...\n\nexport default compose(\n  withDatabase,\n  withObservables([], ({ database }) => ({\n    blogs: database.get('blogs').query(),\n  })),\n)(BlogList)\n```\n\n----------------------------------------\n\nTITLE: Creating a Post Component with Reactive Comments List\nDESCRIPTION: A component that renders a Post with its associated comments, using withObservables to make both the post and its comments list reactive. The component will update when post data changes or comments are added/removed.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Components.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withObservables } from '@nozbe/watermelondb/react'\nimport EnhancedComment from 'components/Comment'\n\nconst Post = ({ post, comments }) => (\n  <article>\n    <h1>{post.name}</h1>\n    <p>{post.body}</p>\n    <h2>Comments</h2>\n    {comments.map(comment =>\n      <EnhancedComment key={comment.id} comment={comment} />\n    )}\n  </article>\n)\n\nconst enhance = withObservables(['post'], ({ post }) => ({\n  post,\n  comments: post.comments, // Shortcut syntax for `post.comments.observe()`\n}))\n\nconst EnhancedPost = enhance(Post)\nexport default EnhancedPost\n```\n\n----------------------------------------\n\nTITLE: Sanitizing User Input for LIKE Queries\nDESCRIPTION: Demonstrates the proper way to sanitize user input for LIKE and NOT LIKE queries to prevent SQL injection. Special characters are escaped using Q.sanitizeLikeString.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nQ.like(`%${Q.sanitizeLikeString(userInput)}%`)\nQ.notLike(`%${Q.sanitizeLikeString(userInput)}%`)\n```\n\n----------------------------------------\n\nTITLE: Using @writer and @reader Decorators\nDESCRIPTION: New decorators to replace the deprecated @action decorator for class methods that perform database operations.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n@writer\n@reader\n```\n\n----------------------------------------\n\nTITLE: Extending Queries with Conditions in WatermelonDB\nDESCRIPTION: Demonstrates how to narrow down queries by adding extra conditions using the .extend() method. The example shows creating filtered queries for verified comments and verified awesome comments, using @lazy for performance optimization.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Q } from '@nozbe/watermelondb'\nimport { children, lazy } from '@nozbe/watermelondb/decorators'\n\nclass Post extends Model {\n  // ...\n  @children('comments') comments\n\n  @lazy verifiedComments = this.comments.extend(\n    Q.where('is_verified', true)\n  )\n\n  @lazy verifiedAwesomeComments = this.verifiedComments.extend(\n    Q.where('is_awesome', true)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Database Write Operations in WatermelonDB\nDESCRIPTION: Example of using the new db.write() method to perform database write operations, which replaces the deprecated database.action() method.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.write(() => {})\n```\n\n----------------------------------------\n\nTITLE: Creating JOIN Queries with Q.on in WatermelonDB\nDESCRIPTION: Shows how to query records based on conditions in related tables using Q.on. This example finds comments belonging to posts written by a specific author.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Shortcut syntax:\ndatabase.get('comments').query(\n  Q.on('posts', 'author_id', john.id),\n)\n\n// Full syntax:\ndatabase.get('comments').query(\n  Q.on('posts', Q.where('author_id', Q.eq(john.id))),\n)\n```\n\n----------------------------------------\n\nTITLE: Assigning Relations in WatermelonDB\nDESCRIPTION: This snippet demonstrates how to assign a new record to a relation using set() in WatermelonDB.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Relation.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait database.get('comments').create(comment => {\n  comment.author.set(someUser)\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Nesting Writers in WatermelonDB (JavaScript)\nDESCRIPTION: Illustrates how to nest writers in WatermelonDB using the callWriter method. This is necessary when calling a writer method from within another writer.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Writers.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass Comment extends Model {\n  // ...\n\n  @writer async appendToPost() {\n    const post = await this.post.fetch()\n    // `appendToBody` is an `@writer` on `Post`, so we call callWriter to allow it\n    await this.callWriter(() => post.appendToBody(this.body))\n  }\n}\n\n// alternatively:\ndatabase.write(async writer => {\n  const post = await database.get('posts').find('abcdef')\n  await writer.callWriter(() => post.appendToBody('Lorem ipsum...')) // appendToBody is a @writer\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Model Associations with Flow Types\nDESCRIPTION: Shows how to properly type model associations in Flow. This example demonstrates both has_many and belongs_to relationships with properly typed table and column references.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/Flow.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { Model, associations } from '@nozbe/watermelondb'\nimport { Tables, Columns } from './schema.js'\n\nconst Column = Columns.posts\n\nclass Post extends Model {\n  static table = Tables.posts\n  static associations = associations(\n    [Tables.comments, { type: 'has_many', foreignKey: Columns.comments.postId }],\n    [Tables.users, { type: 'belongs_to', key: Column.authorId }],\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Observing 2nd Level Relations with switchMap in WatermelonDB\nDESCRIPTION: Uses RxJS switchMap operator to observe second-level relations between Post, Author, and Contact models. This approach creates a reactive connection that updates the component when any related entity changes.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Components.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { switchMap } from 'rxjs/operators'\n\nconst enhance = withObservables(['post'], ({post}) => ({\n  post: post,\n  author: post.author,\n  contact: post.author.observe().pipe(switchMap(author => author.contact.observe()))\n}))\n\nconst EnhancedPost = enhance(PostComponent)\n```\n\n----------------------------------------\n\nTITLE: Adding Model to Database Configuration in JavaScript\nDESCRIPTION: Shows how to add the newly created Post model to the Database configuration.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Model.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\nimport Post from 'model/Post'\n\nconst database = new Database({\n  // ...\n  modelClasses: [Post],\n})\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Query Conditions in WatermelonDB\nDESCRIPTION: Shows how to combine multiple conditions in a query. This example finds comments that are both verified and awesome, with conditions being combined with AND logic by default.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndatabase.get('comments').query(\n  Q.where('is_verified', true),\n  Q.where('is_awesome', true)\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing synchronize() function in WatermelonDB\nDESCRIPTION: Example implementation of the synchronize() function that handles both pulling changes from the server and pushing local changes. It demonstrates how to connect to backend endpoints and handle responses correctly according to the Watermelon Sync Protocol.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Sync/Frontend.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { synchronize } from '@nozbe/watermelondb/sync'\n\nasync function mySync() {\n  await synchronize({\n    database,\n    pullChanges: async ({ lastPulledAt, schemaVersion, migration }) => {\n      const urlParams = `last_pulled_at=${lastPulledAt}&schema_version=${schemaVersion}&migration=${encodeURIComponent(\n        JSON.stringify(migration),\n      )}`\n      const response = await fetch(`https://my.backend/sync?${urlParams}`)\n      if (!response.ok) {\n        throw new Error(await response.text())\n      }\n\n      const { changes, timestamp } = await response.json()\n      return { changes, timestamp }\n    },\n    pushChanges: async ({ changes, lastPulledAt }) => {\n      const response = await fetch(`https://my.backend/sync?last_pulled_at=${lastPulledAt}`, {\n        method: 'POST',\n        body: JSON.stringify(changes),\n      })\n      if (!response.ok) {\n        throw new Error(await response.text())\n      }\n    },\n    migrationsEnabledAtVersion: 1,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Related Data with Observables in WatermelonDB\nDESCRIPTION: Example of rendering a Post with its related Comments using WatermelonDB's withObservables to maintain reactivity between related records.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Post = ({ post, comments }) => (\n  <View>\n    <Text>{post.name}</Text>\n    <Text>Comments:</Text>\n    {comments.map(comment =>\n      <EnhancedComment key={comment.id} comment={comment} />\n    )}\n  </View>\n)\n\nconst enhance = withObservables(['post'], ({ post }) => ({\n  post,\n  comments: post.comments\n}))\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Type-Safe Table and Column Names\nDESCRIPTION: Example showing how to properly define table and column names as opaque types for Flow type checking. This approach creates centralized type-safe constants for table and column names.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/Flow.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// File: model/schema.js\n// @flow\n\nimport { tableName, columnName, type TableName, appSchema, tableSchema } from '@nozbe/watermelondb'\nimport type Comment from './Comment.js'\n\nexport const Tables = {\n  comments: (tableName('comments'): TableName<Comment>),\n  // ...\n}\n\nexport const Columns = {\n  comments: {\n    body: columnName('body'),\n    // ...\n  }\n}\n\nexport const appSchema = appSchema({\n  version: 1,\n  tables: [\n    tableSchema({\n      name: Tables.comments,\n      columns: [\n        { name: Columns.comments.body, type: 'string' },\n      ],\n    }),\n    // ...\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Derived Fields in Post Model with JavaScript\nDESCRIPTION: Illustrates how to create derived fields using ES6 getters in the Post model.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Model.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { field, text } from '@nozbe/watermelondb/decorators'\n\nclass Post extends Model {\n  static table = 'posts'\n\n  @date('archived_at') archivedAt\n\n  get isRecentlyArchived() {\n    // in the last 7 days\n    return this.archivedAt &&\n      this.archivedAt.getTime() > Date.now() - 7 * 24 * 3600 * 1000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Unsafe Raw Database Commands in WatermelonDB\nDESCRIPTION: Demonstrates the escape hatch for executing arbitrary commands at the database level. Shows examples for both SQLite and LokiJS adapters. This should only be used as a last resort.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CRUD.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait database.write(() => {\n  // sqlite:\n  await database.adapter.unsafeExecute({\n    sqls: [\n      // [sql_query, [placeholder arguments, ...]]\n      ['create table temporary_test (id, foo, bar)', []],\n      ['insert into temporary_test (id, foo, bar) values (?, ?, ?)', ['t1', true, 3.14]],\n    ]\n  })\n\n  // lokijs:\n  await database.adapter.unsafeExecute({\n    loki: loki => {\n      loki.addCollection('temporary_test', { unique: ['id'], indices: [], disableMeta: true })\n      loki.getCollection('temporary_test').insert({ id: 't1', foo: true, bar: 3.14 })\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Records in WatermelonDB\nDESCRIPTION: Shows the two ways to delete records in WatermelonDB: markAsDeleted() for syncable deletion (marking as deleted) and destroyPermanently() for permanent deletion.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CRUD.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait somePost.markAsDeleted() // syncable\nawait somePost.destroyPermanently() // permanent\n```\n\n----------------------------------------\n\nTITLE: Model Field Type Annotations with Flow\nDESCRIPTION: Demonstrates how to properly annotate model fields with Flow types, including handling of optional fields with nullable types. Shows correct typing for text and date fields.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/Flow.md#2025-04-18_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n@text(Column.body) body: string\n@date(Column.createdAt) createdAt: Date\n@date(Column.archivedAt) archivedAt: ?Date\n```\n\n----------------------------------------\n\nTITLE: Creating Complex JOIN Queries with Multiple Conditions\nDESCRIPTION: Demonstrates how to apply multiple conditions on related tables in a JOIN query. This example finds comments on posts that meet multiple criteria.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ndatabase.get('comments').query(\n  Q.on('posts', [\n    Q.where('author_id', john.id)\n    Q.or(\n      Q.where('published', true),\n      Q.where('blog_id', draftBlog.id),\n    )\n  ]),\n)\n```\n\n----------------------------------------\n\nTITLE: Observing Second-Level Relations with Composition\nDESCRIPTION: Demonstrates how to observe nested relations by composing multiple withObservables HOCs together. This pattern allows accessing deeper relations like post → author → contact.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Components.md#2025-04-18_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { compose } from '@nozbe/watermelondb/react'\n\nconst enhance = compose(\n  withObservables(['post'], ({ post }) => ({\n    post,\n    author: post.author,\n  })),\n  withObservables(['author'], ({ author }) => ({\n    contact: author.contact,\n  })),\n)\n\nconst EnhancedPost = enhance(PostComponent);\n```\n\n----------------------------------------\n\nTITLE: Creating Nested AND/OR Conditions in Queries\nDESCRIPTION: Demonstrates how to create complex nested conditions using Q.and and Q.or. This example shows a query with multiple levels of condition nesting.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndatabase.get('comments').query(\n  Q.where('archived_at', Q.notEq(null)),\n  Q.or(\n    Q.where('is_verified', true),\n    Q.and(\n      Q.where('likes', Q.gt(10)),\n      Q.where('dislikes', Q.lt(5))\n    )\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Overriding Record ID During Creation in WatermelonDB\nDESCRIPTION: Shows how to override the automatically generated record ID during creation by modifying the _raw.id property. This is useful for syncing with remote databases. The ID must be a string.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CRUD.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait database.get('posts').create(post => {\n  post._raw.id = serverId\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a PostExcerpt Component with Reactive Comment Count\nDESCRIPTION: A component that displays a summarized version of a post with its comment count, using observeCount() for better performance. The component will update if the post changes or if comments are added/removed.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Components.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst PostExcerpt = ({ post, commentCount }) => (\n  <div>\n    <h1>{post.name}</h1>\n    <p>{getExcerpt(post.body)}</p>\n    <span>{commentCount} comments</span>\n  </div>\n)\n\nconst enhance = withObservables(['post'], ({ post }) => ({\n  post,\n  commentCount: post.comments.observeCount()\n}))\n\nconst EnhancedPostExcerpt = enhance(PostExcerpt)\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relation for Post Model in WatermelonDB\nDESCRIPTION: This snippet shows how to define a many-to-many relation for the Post model using a pivot table in WatermelonDB.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Relation.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { lazy } from '@nozbe/watermelondb/decorators'\n\nclass Post extends Model {\n  static table = 'posts'\n  static associations = {\n    post_authors: { type: 'has_many', foreignKey: 'post_id' },\n  }\n\n  @lazy\n  authors = this.collections\n    .get('users')\n    .query(Q.on('post_authors', 'post_id', this.id));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sync Logging\nDESCRIPTION: Shows how to implement logging for sync operations using both SyncLogger and manual logging approaches.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Sync/Frontend.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport SyncLogger from '@nozbe/watermelondb/sync/SyncLogger'\nconst logger = new SyncLogger(10 /* limit of sync logs to keep in memory */ )\nawait synchronize({ database, log: logger.newLog(), ... })\n\n// OR using manual logging\nconst log = {}\nawait synchronize({ database, log, ... })\n```\n\n----------------------------------------\n\nTITLE: Using Batch Updates in WatermelonDB (JavaScript)\nDESCRIPTION: Illustrates how to use batch updates in WatermelonDB for more efficient database operations. This example modifies a Post model to create spam content using batched operations.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Writers.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Post extends Model {\n  // ...\n  @writer async createSpam() {\n    await this.batch(\n      this.prepareUpdate(post => {\n        post.title = `7 ways to lose weight`\n      }),\n      this.collections.get('comments').prepareCreate(comment => {\n        comment.post.set(this)\n        comment.body = \"Don't forget to comment, like, and subscribe!\"\n      })\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Create/Update Tracking in WatermelonDB Model\nDESCRIPTION: This code demonstrates how to add 'createdAt' and 'updatedAt' fields to a WatermelonDB Model definition. It uses the @readonly and @date decorators to define these fields, which correspond to the 'created_at' and 'updated_at' columns in the schema.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/CreateUpdateTracking.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date, readonly } from '@nozbe/watermelondb/decorators'\n\nclass Post extends Model {\n  // ...\n  @readonly @date('created_at') createdAt\n  @readonly @date('updated_at') updatedAt\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UUID Generation in WatermelonDB\nDESCRIPTION: Demonstrates how to use the uuid library to generate UUIDs for entity IDs in WatermelonDB. This example imports the v4 function from uuid and sets it as the generator.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/ProTips.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v4 as uuidv4 } from 'uuid';\n\nsetGenerator(() => uuidv4());\n```\n\n----------------------------------------\n\nTITLE: Complex Migration Example with Multiple Steps\nDESCRIPTION: Advanced example showing multiple migrations with various steps including creating new tables and adding columns to existing tables.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/Migrations.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nschemaMigrations({\n  migrations: [\n    {\n      toVersion: 3,\n      steps: [\n        createTable({\n          name: 'comments',\n          columns: [\n            { name: 'post_id', type: 'string', isIndexed: true },\n            { name: 'body', type: 'string' },\n          ],\n        }),\n        addColumns({\n          table: 'posts',\n          columns: [\n            { name: 'subtitle', type: 'string', isOptional: true },\n            { name: 'is_pinned', type: 'boolean' },\n          ],\n        }),\n      ],\n    },\n    {\n      toVersion: 2,\n      steps: [\n        // ...\n      ],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Fields to Post Model with Decorators in JavaScript\nDESCRIPTION: Demonstrates how to add fields to the Post model using decorators, including text and boolean fields.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Model.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { field, text } from '@nozbe/watermelondb/decorators'\n\nclass Post extends Model {\n  static table = 'posts'\n  static associations = {\n    comments: { type: 'has_many', foreignKey: 'post_id' },\n  }\n\n  @text('title') title\n  @text('body') body\n  @field('is_pinned') isPinned\n}\n```\n\n----------------------------------------\n\nTITLE: Using Experimental JSI Integration in SQLiteAdapter\nDESCRIPTION: Code snippet showing how to enable the experimental JSI (JavaScript Interface) SQLite adapter that provides up to 3x performance improvement. This is added to the SQLiteAdapter constructor.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexperimentalUseJSI: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Action with Cascading in WatermelonDB (JavaScript)\nDESCRIPTION: Shows how to implement a delete action that cascades to child records in WatermelonDB. This example overrides the markAsDeleted method to delete all associated comments when a post is deleted.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Writers.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass Post extends Model {\n  static table = 'posts'\n  static associations = {\n    comments: { type: 'has_many', foreignKey: 'post_id' },\n  }\n\n  @children('comments') comments\n\n  async markAsDeleted() {\n    await this.comments.destroyAllPermanently()\n    await super.markAsDeleted()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Writer Methods in Comment Model with JavaScript\nDESCRIPTION: Demonstrates how to create writer methods in the Comment model using the @writer decorator.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Model.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { writer } from '@nozbe/watermelondb/decorators'\n\nclass Comment extends Model {\n  static table = 'comments'\n\n  @field('is_spam') isSpam\n\n  @writer async markAsSpam() {\n    await this.update(comment => {\n      comment.isSpam = true\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Column Comparison Queries in WatermelonDB\nDESCRIPTION: Shows how to compare values between two columns in a query using Q.column. This example finds comments where the number of likes is greater than the number of dislikes.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ndatabase.get('comments').query(\n  Q.where('likes', Q.gt(Q.column('dislikes')))\n)\n```\n\n----------------------------------------\n\nTITLE: Batch Operations in a Writer Block\nDESCRIPTION: Shows how to call batch operations inside a db.write block using the writer interface passed to the callback.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.write(writer => { ... writer.batch() })\n```\n\n----------------------------------------\n\nTITLE: Implementing Updater Action on Comment Model (JavaScript)\nDESCRIPTION: Demonstrates an updater action on a Comment model using the @writer decorator. This method marks a comment as spam by updating its isSpam field.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Writers.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Comment extends Model {\n  // ...\n  @field('is_spam') isSpam\n\n  @writer async markAsSpam() {\n    await this.update(comment => {\n      comment.isSpam = true\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling NULL values in WatermelonDB Queries\nDESCRIPTION: Demonstrates how to properly handle NULL values in queries, including using oneOf and notIn operators. This example shows how to explicitly allow NULL values in a query that otherwise uses oneOf for specific status values.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\npostsCollection.query(\n  Q.or(\n    Q.where('status', Q.oneOf(['published', 'draft'])),\n    Q.where('status', null)\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom ID Generator for WatermelonDB\nDESCRIPTION: Demonstrates how to update the random ID generation schema by importing and calling the setGenerator function. This allows customization of IDs, such as using UUIDs.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setGenerator } from '@nozbe/watermelondb/utils/common/randomId'\nsetGenerator(newGenenerator)\n```\n\n----------------------------------------\n\nTITLE: Implementing New Table Migration in WatermelonDB\nDESCRIPTION: Shows how to create a migration that adds a new comments table to the database schema. Includes column definitions with types and indexing.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/Migrations.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// app/model/migrations.js\n\nimport { schemaMigrations, createTable } from '@nozbe/watermelondb/Schema/migrations'\n\nexport default schemaMigrations({\n  migrations: [\n    {\n      toVersion: 2,\n      steps: [\n        createTable({\n          name: 'comments',\n          columns: [\n            { name: 'post_id', type: 'string', isIndexed: true },\n            { name: 'body', type: 'string' },\n          ],\n        }),\n      ],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Children Relation to Post Model in JavaScript\nDESCRIPTION: Shows how to add a children relation to the Post model using the @children decorator.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Model.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { children } from '@nozbe/watermelondb/decorators'\n\nclass Post extends Model {\n  static table = 'posts'\n  static associations = {\n    comments: { type: 'has_many', foreignKey: 'post_id' },\n  }\n\n  @children('comments') comments\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Create/Update Tracking to Schema in WatermelonDB\nDESCRIPTION: This snippet shows how to add 'created_at' and 'updated_at' columns to a table schema in WatermelonDB. These columns are of type 'number' and will store timestamps as millisecond epochs.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/CreateUpdateTracking.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntableSchema({\n  name: 'posts',\n  columns: [\n    // other columns\n    { name: 'created_at', type: 'number' },\n    { name: 'updated_at', type: 'number' },\n  ]\n}),\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Post Model in JavaScript\nDESCRIPTION: Demonstrates how to create a basic Post model by extending the Model class from WatermelonDB and specifying the table name.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Model.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// model/Post.js\nimport { Model } from '@nozbe/watermelondb'\n\nexport default class Post extends Model {\n  static table = 'posts'\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding WatermelonDB Logger with Custom Logger\nDESCRIPTION: This example shows how to override the default WatermelonDB logger methods (log, warn, error) to route log messages to a custom logging system. In this case, it uses the Cabin logger instead of the default implementation.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/Logging.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Cabin from 'cabin';\nimport logger from '@nozbe/watermelondb/utils/common/logger';\n\nconst cabin = new Cabin();\nlogger.log = (...messages) => cabin.info(...messages);\nlogger.warn = (...messages) => cabin.error(...messages);\nlogger.error = (...messages) => cabin.error(...messages);\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relation for User Model in WatermelonDB\nDESCRIPTION: This snippet shows how to define a many-to-many relation for the User model using a pivot table in WatermelonDB.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Relation.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { lazy } from '@nozbe/watermelondb/decorators'\n\nclass User extends Model {\n  static table = 'users'\n  static associations = {\n    post_authors: { type: 'has_many', foreignKey: 'user_id' },\n  }\n\n  @lazy\n  posts = this.collections\n    .get('posts')\n    .query(Q.on('post_authors', 'user_id', this.id));\n}\n```\n\n----------------------------------------\n\nTITLE: Using immutableRelation Decorator in WatermelonDB\nDESCRIPTION: This snippet shows how to use the @immutableRelation decorator for relations that cannot change in WatermelonDB.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Relation.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { immutableRelation } from '@nozbe/watermelondb/decorators'\n\nclass Comment extends Model {\n  // ...\n  @immutableRelation('posts', 'post_id') post\n  @immutableRelation('users', 'author_id') author\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Column Schema in WatermelonDB\nDESCRIPTION: Schema definition for adding a JSON-serialized string column to store complex metadata.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/AdvancedFields.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntableSchema({\n  name: 'comments',\n  columns: [\n    { name: 'reactions', type: 'string' }, // You can add isOptional: true, if appropriate\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Queries on Models in WatermelonDB\nDESCRIPTION: Demonstrates how to define a custom query method on a Model class using @lazy. This example creates a 'commenters' query that finds all users who commented on the post.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Post extends Model {\n  // ...\n  @lazy commenters = this.collections.get('users').query(\n    Q.on('comments', 'post_id', this.id)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LokiJS Adapter with Improved Options\nDESCRIPTION: Shows how to configure the LokiJS adapter with recommended options for better performance and compatibility, including disabling web workers and enabling incremental IndexedDB.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nuseWebWorker: false, experimentalUseIncrementalIndexedDB: true\n```\n\n----------------------------------------\n\nTITLE: Using useDatabase Hook with WatermelonDB\nDESCRIPTION: Demonstrates how to access the database instance using React Hooks syntax. This is the recommended approach for functional components as it's more concise than the HOC pattern.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Components.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useDatabase } from '@nozbe/watermelondb/react'\n\nconst Component = () => {\n   const database = useDatabase()\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-table Column Comparisons in WatermelonDB\nDESCRIPTION: Shows how to query based on comparing columns across related tables using unsafe expressions. The example demonstrates finding comments posted more than 14 days after their related post was published, using both SQL and LokiJS approaches.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// SQL example:\ncommentsCollection.query(\n  Q.on('posts', 'published_at', Q.notEq(null)),\n  Q.unsafeSqlExpr(`comments.createad_at > posts.published_at + ${14 * 24 * 3600 * 1000}`)\n)\n\n// LokiJS example:\ncommentsCollection.query(\n  Q.on('posts', 'published_at', Q.notEq(null)),\n  Q.unsafeLokiTransform((rawRecords, loki) => {\n    return rawRecords.filter(rawRecord => {\n      const post = loki.getCollection('posts').by('id', rawRecord.post_id)\n      return post && rawRecord.created_at > post.published_at + 14 * 24 * 3600 * 1000\n    })\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Optional 2nd Level Relations with RxJS in WatermelonDB\nDESCRIPTION: Demonstrates how to safely handle optional relations using the 'of' operator from RxJS. This pattern ensures the component always receives an observable even when intermediate relations are null.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Components.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { of as of$ } from 'rxjs'\nimport { withObservables, compose } from '@nozbe/watermelondb/react'\n\nconst enhance = compose(\n  withObservables(['post'], ({ post }) => ({\n    post,\n    author: post.author,\n  })),\n  withObservables(['author'], ({ author }) => ({\n    contact: author ? author.contact.observe() : of$(null),\n  })),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Queries with @children Decorator in WatermelonDB\nDESCRIPTION: Creates a basic Query for retrieving all child records (comments) that belong to a parent model (Post). This is the simplest form of querying in WatermelonDB.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Post extends Model {\n  // ...\n  @children('comments') comments\n}\n```\n\n----------------------------------------\n\nTITLE: Using findAndObserve with Database and ID\nDESCRIPTION: Demonstrates how to fetch and observe a record by ID when you only have the ID available, such as from a router. This pattern is useful for connecting URL parameters to database records.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Components.md#2025-04-18_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nwithObservables(['postId'], ({ postId, database }) => ({\n  post: database.get('posts').findAndObserve(postId)\n}))\n```\n\n----------------------------------------\n\nTITLE: Using Q.includes Query in WatermelonDB\nDESCRIPTION: Example of using the new Q.includes() query for case-sensitive exact string includes comparison in WatermelonDB queries.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nQ.includes('foo')\n```\n\n----------------------------------------\n\nTITLE: Fetching Raw Data with unsafeFetchRaw in WatermelonDB\nDESCRIPTION: Shows how to fetch raw objects instead of Model instances using unsafeFetchRaw(). This can be used as an optimization or to create advanced queries that select specific columns or include computed columns. Warning: returned objects must not be mutated.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst rawData = await database.get('posts').query(\n  Q.unsafeSqlQuery(\n    'select posts.text1, count(tag_assignments.id) as tag_count, sum(tag_assignments.rank) as tag_rank from posts' +\n      ' left join tag_assignments on posts.id = tag_assignments.post_id' +\n      ' group by posts.id' +\n      ' order by posts.position desc',\n  )\n).unsafeFetchRaw()\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Relations with switchMap in WatermelonDB\nDESCRIPTION: Alternative approach for handling optional relations using switchMap, which simplifies the code by combining observation and null-checking in a single pipeline.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Components.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst enhance = withObservables(['post'], ({post}) => ({\n  post: post,\n  author: post.author,\n  contact: post.author.observe().pipe(\n    switchMap(author => author ? author.contact : of$(null))\n  )\n}))\n```\n\n----------------------------------------\n\nTITLE: Using Q.on within AND/OR Conditions using experimentalJoinTables\nDESCRIPTION: Shows how to use Q.on within Q.and and Q.or clauses by explicitly defining joined tables. This experimental API allows for more complex query combinations.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntasksCollection.query(\n  Q.experimentalJoinTables(['projects']),\n  Q.or(\n    Q.where('is_followed', true),\n    Q.on('projects', 'is_followed', true),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Schema Definition with New Table\nDESCRIPTION: Demonstrates how to update the schema file to match migration changes by adding the new comments table definition.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/Migrations.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// model/schema.js\n\nexport default appSchema({\n  version: 1,\n  tables: [\n    tableSchema({\n      name: 'comments',\n      columns: [\n        { name: 'post_id', type: 'string', isIndexed: true },\n        { name: 'body', type: 'string' },\n      ],\n    }),\n    // ...\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Database Provider in WatermelonDB React App\nDESCRIPTION: Demonstrates how to set up the DatabaseProvider to make the database instance available throughout the component tree. This eliminates the need for prop drilling when accessing the database.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Components.md#2025-04-18_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DatabaseProvider } from '@nozbe/watermelondb/react'\n\n// ...\n\nconst database = new Database({\n  adapter,\n  modelClasses: [Blog, Post, Comment],\n})\n\nrender(\n  <DatabaseProvider database={database}>\n    <Root />\n  </DatabaseProvider>, document.getElementById('application')\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Queries in Post Model with JavaScript\nDESCRIPTION: Illustrates how to define custom queries in the Post model using @lazy and Q.where.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Model.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { children } from '@nozbe/watermelondb/decorators'\nimport { Q } from '@nozbe/watermelondb'\n\nclass Post extends Model {\n  static table = 'posts'\n  static associations = {\n    comments: { type: 'has_many', foreignKey: 'post_id' },\n  }\n\n  @children('comments') comments\n  @lazy verifiedComments = this.comments.extend(\n    Q.where('is_verified', true)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Raw SQL Queries in WatermelonDB\nDESCRIPTION: Executing unsafe raw SQL queries with parameter binding for security. Can be used with fetch(), fetchCount(), and fetchIds().\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\ncollection.query(Q.unsafeSqlQuery(\"select * from tasks where foo = ?\", ['bar'])).fetch()\n```\n\n----------------------------------------\n\nTITLE: Finding a Record by ID in WatermelonDB\nDESCRIPTION: Shows how to find a specific record in a collection using its ID. The find() method returns a Promise that resolves to the record if found, or rejects if the record cannot be found.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CRUD.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst postId = 'abcdefgh'\nconst post = await database.get('posts').find(postId)\n```\n\n----------------------------------------\n\nTITLE: Observing SQL Queries with JOINs in WatermelonDB\nDESCRIPTION: Demonstrates how to observe queries with JOIN statements by explicitly specifying related tables using experimentalJoinTables and experimentalNestedJoin. This approach is required when observing queries that involve multiple tables.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst records = await database.get('comments').query(\n  Q.experimentalJoinTables(['posts']),\n  Q.experimentalNestedJoin('posts', 'blogs'),\n  Q.unsafeSqlQuery(\n    'select comments.* from comments ' +\n      'left join posts on comments.post_id is posts.id ' +\n      'left join blogs on posts.blog_id is blogs.id' +\n      'where ...',\n  ),\n).observe()\n```\n\n----------------------------------------\n\nTITLE: Using Unsafe SQL Queries in WatermelonDB\nDESCRIPTION: Shows how to execute raw SQL queries when the built-in query builders are insufficient. Includes examples of fetching records and counting results while demonstrating proper handling of placeholders for security. Note that this requires manually filtering out deleted records.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst records = await database.get('comments').query(\n  Q.unsafeSqlQuery(`select * from comments where foo is not ? and _status is not 'deleted'`, ['bar'])\n).fetch()\n\nconst recordCount = await database.get('comments').query(\n  Q.unsafeSqlQuery(`select count(*) as count from comments where foo is not ? and _status is not 'deleted'`, ['bar'])\n).fetchCount()\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Adapter with Migrations\nDESCRIPTION: Demonstrates how to connect migrations to the SQLite adapter configuration in WatermelonDB.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/Migrations.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\nimport migrations from 'model/migrations'\n\nconst adapter = new SQLiteAdapter({\n  schema: mySchema,\n  migrations,\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Record IDs in WatermelonDB\nDESCRIPTION: Optimized querying that returns only record IDs instead of full cached records.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait query.fetchIds()\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Field Decorator in Model\nDESCRIPTION: Model class definition showing how to use the @json decorator to handle JSON-serialized fields.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/AdvancedFields.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { json } from '@nozbe/watermelondb/decorators'\n\nclass Comment extends Model {\n  // ...\n  @json('reactions', sanitizeReactions) reactions\n}\n```\n\n----------------------------------------\n\nTITLE: Using Disposable Records in WatermelonDB\nDESCRIPTION: Creates read-only disposable records that exist only in memory and cannot be saved to the database. Useful for online-only features in offline-first apps.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ncollection.disposableFromDirtyRaw()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Query Conditions with Q.where\nDESCRIPTION: Shows how to create a basic query condition using Q.where, which filters records based on a column value. This example finds all verified comments.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Q } from '@nozbe/watermelondb'\n// ...\ndatabase.get('comments').query(\n  Q.where('is_verified', true)\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Custom Observable Field Implementation\nDESCRIPTION: Complex implementation of a custom observable field handling multiple conditions for post popularity.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/AdvancedFields.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { of as of$ } from 'rxjs/observable/of'\nimport { distinctUntilChanged, map as map$ } from 'rxjs/operators'\nimport { lazy } from '@nozbe/watermelondb/decorators'\n\nclass Post extends Model {\n  @lazy isPopular = this.observe().pipe(\n    distinctUntilKeyChanged('isStarred'),\n    switchMap(post =>\n      post.isStarred ?\n        of$(true) :\n        this.comments.observeCount().pipe(map$(comments => comments > 10))\n    ),\n    distinctUntilChanged(),\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating JSON Field Values\nDESCRIPTION: Example of updating a JSON field value within a model update operation.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/AdvancedFields.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncomment.update(() => {\n  comment.reactions = ['up', 'down', 'down']\n})\n```\n\n----------------------------------------\n\nTITLE: Custom SQL Schema in WatermelonDB\nDESCRIPTION: Advanced example demonstrating how to customize the SQL used to set up the database with unsafeSql parameter. This allows modifying the generated SQL for tables or the entire schema.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Schema.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nappSchema({\n  ...\n  tables: [\n    tableSchema({\n      name: 'tasks',\n      columns: [...],\n      unsafeSql: sql => sql.replace(/create table [^)]+\\)/, '$& without rowid'),\n    }),\n  ],\n  unsafeSql: (sql, kind) => {\n    // Note that this function is called not just when first setting up the database\n    // Additionally, when running very large batches, all database indices may be dropped and later\n    // recreated as an optimization. More kinds may be added in the future.\n    switch (kind) {\n      case 'setup':\n        return `create blabla;${sql}`\n      case 'create_indices':\n      case 'drop_indices':\n        return sql\n      default:\n        throw new Error('unexpected unsafeSql kind')\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using WatermelonDB LocalStorage API for Key-Value Storage in JavaScript\nDESCRIPTION: Demonstrates the basic operations of WatermelonDB's localStorage API. Shows how to set values, retrieve values, and remove values from the key-value store. This is a low-level API intended for simple data like user IDs or last viewed screens.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/LocalStorage.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// setting a value\nawait database.localStorage.set(\"user_id\", \"abcdef\")\n\n// retrieving a value\nconst userId = await database.localStorage.get(\"user_id\") // string or undefined if no value for this key\n\n// removing a value\nawait database.localStorage.remove(\"user_id\")\n```\n\n----------------------------------------\n\nTITLE: Defining PostAuthor Pivot Model for Many-to-Many Relation in WatermelonDB\nDESCRIPTION: This snippet demonstrates how to define a PostAuthor pivot model for a many-to-many relation between Post and User in WatermelonDB.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Relation.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { immutableRelation } from '@nozbe/watermelondb/decorators'\n\nclass PostAuthor extends Model {\n  static table = 'post_authors'\n  static associations = {\n    posts: { type: 'belongs_to', key: 'post_id' },\n    users: { type: 'belongs_to', key: 'user_id' },\n  }\n  @immutableRelation('posts', 'post_id') post\n  @immutableRelation('users', 'user_id') user\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relation Field on Model Class in WatermelonDB\nDESCRIPTION: This snippet demonstrates how to define a relation field on a Model class using the @relation decorator in WatermelonDB.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Relation.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { relation } from '@nozbe/watermelondb/decorators'\n\nclass Comment extends Model {\n  // ...\n  @relation('users', 'author_id') author\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Joined Query with Multiple Conditions\nDESCRIPTION: Example of using Q.on queries to join tables with multiple where conditions in WatermelonDB\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncollection.query(Q.on('projects', [Q.where('foo', 'bar'), Q.where('bar', 'baz')]))\n```\n\n----------------------------------------\n\nTITLE: Native Turbo Sync Implementation in JavaScript\nDESCRIPTION: Demonstrates implementation of enhanced Turbo sync using native networking code, showing the JavaScript side of the implementation.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Sync/Frontend.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait synchronize({\n  database,\n  pullChanges: async ({ lastPulledAt, schemaVersion, migration }) => {\n    const syncId = Math.floor(Math.random() * 1000000000)\n\n    await NativeModules.MyNetworkingPlugin.pullSyncChanges(\n      syncId,\n      lastPulledAt,\n      schemaVersion,\n      migration,\n    )\n\n    return { syncJsonId: syncId }\n  },\n  unsafeTurbo: true,\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Turbo Login Sync in JavaScript\nDESCRIPTION: Demonstrates how to implement the Turbo Login optimization for initial database sync. Shows handling of both turbo and non-turbo sync modes with proper response parsing.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Sync/Frontend.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst isFirstSync = ...\nconst useTurbo = isFirstSync\nawait synchronize({\n  database,\n  pullChanges: async ({ lastPulledAt, schemaVersion, migration }) => {\n    const response = await fetch(`https://my.backend/sync?${...}`)\n    if (!response.ok) {\n      throw new Error(await response.text())\n    }\n\n    if (useTurbo) {\n      // NOTE: DO NOT parse JSON, we want raw text\n      const json = await response.text()\n      return { syncJson: json }\n    } else {\n      const { changes, timestamp } = await response.json()\n      return { changes, timestamp }\n    }\n  },\n  unsafeTurbo: useTurbo,\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Sync Diagnostic Logs in WatermelonDB\nDESCRIPTION: Code showing how to capture diagnostic information during database synchronization by passing an empty log object to the synchronize function. The object will be populated with sync metrics and timestamps.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst log = {}\nawait synchronize({ database, log, ...})\nconsole.log(log.startedAt)\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Relations for Comment Author Display\nDESCRIPTION: Enhances the Comment component to reactively observe and display the author relation. This ensures the component updates if either the comment or its author information changes.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Components.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst Comment = ({ comment, author }) => (\n  <div>\n    <p>{comment.body} — by {author.name}</p>\n  </div>\n)\n\nconst enhance = withObservables(['comment'], ({ comment }) => ({\n  comment,\n  author: comment.author, // shortcut syntax for `comment.author.observe()`\n}))\nconst EnhancedComment = enhance(Comment)\n```\n\n----------------------------------------\n\nTITLE: Boolean Column Naming in WatermelonDB\nDESCRIPTION: Example of the naming convention for boolean columns in WatermelonDB. Boolean columns should have names starting with 'is_'.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Schema.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{ name: 'is_pinned', type: 'boolean' }\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple React Component for Comment Display\nDESCRIPTION: A basic React component that renders a Comment record without reactive capabilities. This component will not automatically update when the comment data changes.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Components.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Comment = ({ comment }) => (\n  <div>\n    <p>{comment.body}</p>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Native Swift Implementation for App Group Path\nDESCRIPTION: Swift implementation of the AppGroup module that provides the shared directory path to React Native. Reads the App Group identifier from Info.plist and exports the container path.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/SharingDatabaseAcrossTargets.md#2025-04-18_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\n\n@objc(AppGroup)\nclass AppGroup: NSObject {\n\n  @objc\n  func constantsToExport() -> [AnyHashable : Any]! {\n    var path = \"\"\n    if let suiteName = Bundle.main.object(forInfoDictionaryKey: \"AppGroup\") as? String {\n      if let directory = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: suiteName) {\n        path = directory.path\n      }\n    }\n\n    return [\"path\": \"\\(path)/\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Query Methods for Pagination and Sorting\nDESCRIPTION: Demonstrates the experimental query methods for sorting, limiting, and paginating results. These methods are only available with SQLiteAdapter.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nQ.experimentalSortBy(sortColumn, sortOrder)\n```\n\n----------------------------------------\n\nTITLE: Installing WatermelonDB Pod Dependencies\nDESCRIPTION: CocoaPods configuration for installing WatermelonDB and its dependencies in iOS projects. Shows how to include the main WatermelonDB pod and its simdjson dependency.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Uncomment this line if you're not using auto-linking\n# pod 'WatermelonDB', path: '../node_modules/@nozbe/watermelondb'\n# WatermelonDB dependency\npod 'simdjson', path: '../node_modules/@nozbe/simdjson', modular_headers: true\n```\n\n----------------------------------------\n\nTITLE: Fetching Query Results with fetch and fetchCount\nDESCRIPTION: Demonstrates how to execute queries to get current results without observing future changes. Shows both standard and shortcut syntax for fetching records and counting query results.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst comments = await post.comments.fetch()\nconst verifiedCommentCount = await post.verifiedComments.fetchCount()\n\n// Shortcut syntax:\nconst comments = await post.comments\nconst verifiedCommentCount = await post.verifiedComments.count\n```\n\n----------------------------------------\n\nTITLE: Query Condition Example using Q.on in JavaScript\nDESCRIPTION: Example showing how to use Q.on queries with multiple conditions on related records in WatermelonDB\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncollection.query(Q.on('projects', [Q.where('foo', 'bar'), Q.where('bar', 'baz')]))\n```\n\n----------------------------------------\n\nTITLE: Logging Sync Operations in WatermelonDB\nDESCRIPTION: Demonstrates how to use basic sync logging capability by passing an empty object to the synchronize function, which will be populated with diagnostic information.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst log = {}\nawait synchronize({ database, log, ...})\nconsole.log(log.startedAt)\n```\n\n----------------------------------------\n\nTITLE: Complete FMDB Usage Example in Swift\nDESCRIPTION: Provides a comprehensive example of using FMDB in Swift, including database creation, table creation, data insertion, and querying.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nlet fileURL = try! FileManager.default\n    .url(for: .applicationSupportDirectory, in: .userDomainMask, appropriateFor: nil, create: true)\n    .appendingPathComponent(\"test.sqlite\")\n\nlet database = FMDatabase(url: fileURL)\n\nguard database.open() else {\n    print(\"Unable to open database\")\n    return\n}\n\ndo {\n    try database.executeUpdate(\"create table test(x text, y text, z text)\", values: nil)\n    try database.executeUpdate(\"insert into test (x, y, z) values (?, ?, ?)\", values: [\"a\", \"b\", \"c\"])\n    try database.executeUpdate(\"insert into test (x, y, z) values (?, ?, ?)\", values: [\"e\", \"f\", \"g\"])\n\n    let rs = try database.executeQuery(\"select x, y, z from test\", values: nil)\n    while rs.next() {\n        if let x = rs.string(forColumn: \"x\"), let y = rs.string(forColumn: \"y\"), let z = rs.string(forColumn: \"z\") {\n            print(\"x = \\(x); y = \\(y); z = \\(z)\")\n        }\n    }\n} catch {\n    print(\"failed: \\(error.localizedDescription)\")\n}\n\ndatabase.close()\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Query to Fetch All Records\nDESCRIPTION: Demonstrates how to create a query without conditions to fetch all records from a collection. This should be used sparingly for efficiency reasons.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst allComments = await database.get('comments').query().fetch()\n```\n\n----------------------------------------\n\nTITLE: Relation Columns Definition in WatermelonDB\nDESCRIPTION: Example showing how to define relation columns that link to other tables. Relation columns should end with '_id' and be of 'string' type.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Schema.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{ name: 'post_id', type: 'string' },\n{ name: 'author_id', type: 'string' },\n```\n\n----------------------------------------\n\nTITLE: Defining Table Schema for Relations in WatermelonDB\nDESCRIPTION: This snippet shows how to define a table schema with a column for a related record's ID in WatermelonDB.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Relation.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntableSchema({\n  name: 'comments',\n  columns: [\n    // ...\n    { name: 'author_id', type: 'string' },\n  ]\n}),\n```\n\n----------------------------------------\n\nTITLE: Native Sync Implementation for iOS\nDESCRIPTION: Shows how to implement the native side of Turbo sync in iOS using Objective-C.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Sync/Frontend.md#2025-04-18_snippet_6\n\nLANGUAGE: objectivec\nCODE:\n```\n#import <WatermelonDB/WatermelonDB.h>\n\nwatermelondbProvideSyncJson(syncId, data, &error)\n```\n\n----------------------------------------\n\nTITLE: Using LIKE for Text Search with Sanitization\nDESCRIPTION: Shows how to perform text search queries using Q.like with proper sanitization of user input. This example finds usernames starting with a given prefix.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nusersCollection.query(\n  Q.where(\"username\", Q.like(`${Q.sanitizeLikeString(\"jas\")}%`)\n)\n```\n\n----------------------------------------\n\nTITLE: Pull Endpoint Response Structure for WatermelonDB Sync\nDESCRIPTION: Defines the expected response format from the pull synchronization endpoint. The response must include the changes object with all updates since lastPulledAt and a new timestamp.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Sync/Backend.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{ changes: Changes, timestamp: Timestamp }\n```\n\n----------------------------------------\n\nTITLE: Adding Date Field to Post Model in JavaScript\nDESCRIPTION: Shows how to add a date field to the Post model using the @date decorator.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Model.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from '@nozbe/watermelondb/decorators'\n\nclass Post extends Model {\n  // ...\n  @date('last_event_at') lastEventAt\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SQLite Adapter for New React Native Platforms\nDESCRIPTION: Code snippet showing the required steps to add support for new React Native platforms (like Windows or macOS) using the cross-platform JSI (C++) SQLite adapter. This involves compiling shared C++ files, linking with SQLite, implementing platform-specific functions, and installing the database in the JSI runtime.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Implementation/DatabaseAdapters.md#2025-04-18_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// 1. Compile `.cpp` files in `native/shared` folder\n// 2. Link library with `sqlite3`\n//   - Use system-provided sqlite3 if possible (we do that on iOS)\n//   - If not, we ship sqlite source code via NPM `@nozbe/sqlite` package. Just add `node_modules/@nozbe/sqlite/**` to search paths and compile `node_modules/@nozbe/sqlite/*/sqlite3.c`\n// 3. Provide implementation for `native/shared/DatabasePlatform.h`\n//   - Please note that most of these functions can remain unimplemented (empty) for basic operation - e.g. you can skip logging, memory, turbo json support\n// 4. Provide a React Native hook that calls `Database::install(jsi::Runtime *)`\n```\n\n----------------------------------------\n\nTITLE: Native Sync Implementation for Android\nDESCRIPTION: Shows how to implement the native side of Turbo sync in Android using Java.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Sync/Frontend.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport com.nozbe.watermelondb.jsi.WatermelonJSI;\n\nWatermelonJSI.provideSyncJson(/* id */ syncId, /* byte[] */ data);\n```\n\n----------------------------------------\n\nTITLE: Using Limit Query Method\nDESCRIPTION: Shows how to limit the number of results returned by a query using the experimental take method.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nQ.experimentalTake(count)\n```\n\n----------------------------------------\n\nTITLE: Observing Many-to-Many Relation in WatermelonDB Components\nDESCRIPTION: This snippet demonstrates how to observe a many-to-many relation in WatermelonDB components using withObservables.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Relation.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nwithObservables(['post'], ({ post }) => ({\n  authors: post.authors,\n}))\n```\n\n----------------------------------------\n\nTITLE: Debugging Sync Changes\nDESCRIPTION: Shows how to implement debug logging for sync changes. Warning: Should not be used in production.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Sync/Frontend.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('@nozbe/watermelondb/sync/debugPrintChanges').default(changes, isPush)\n```\n\n----------------------------------------\n\nTITLE: Unsafe Execute Method in WatermelonDB\nDESCRIPTION: Executes arbitrary SQL queries in SQLiteAdapter or accesses Loki object directly in LokiJSAdapter for advanced operations.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nadapter.unsafeExecute\n```\n\n----------------------------------------\n\nTITLE: Handling Additional Sync Data with onDidPullChanges\nDESCRIPTION: Shows how to process additional sync response data using the onDidPullChanges callback, compatible with both turbo and non-turbo modes.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Sync/Frontend.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait synchronize({\n  database,\n  pullChanges: async ({ lastPulledAt, schemaVersion, migration }) => {\n    // ...\n  },\n  unsafeTurbo: useTurbo,\n  onDidPullChanges: async ({ messages }) => {\n    if (messages) {\n      messages.forEach((message) => {\n        alert(message)\n      })\n    }\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Entity ID Generator in WatermelonDB\nDESCRIPTION: Shows how to define a custom ID generator function and set it using the setGenerator function in WatermelonDB. This allows creating specific random ID formats instead of using the default ID generator.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/ProTips.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Define a custom ID generator.\nfunction randomString(): string {\n  return 'RANDOM STRING';\n}\nsetGenerator(randomString);\n\n// or as anonymous function:\nsetGenerator(() => 'RANDOM STRING');\n```\n\n----------------------------------------\n\nTITLE: WatermelonDB Android Package Integration - Java\nDESCRIPTION: Instructions for updating Android MainApplication configuration by removing getJSIModulePackage() override and adding WatermelonDBJSIPackage to getPackages().\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Remove getJSIModulePackage() override\n// Add new WatermelonDBJSIPackage() to getPackages() override\n```\n\n----------------------------------------\n\nTITLE: Fetching Related Records in WatermelonDB\nDESCRIPTION: This snippet shows how to fetch related records using the fetch method in WatermelonDB.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Relation.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst author = await comment.author.fetch()\n\n// Shortcut syntax:\nconst author = await comment.author\n```\n\n----------------------------------------\n\nTITLE: Date Field Definition in WatermelonDB\nDESCRIPTION: Example showing how to define date fields in WatermelonDB. Dates are stored as Unix timestamps of 'number' type and should have names ending with '_at'.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Schema.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{ name: 'last_seen_at', type: 'number', isOptional: true }\n```\n\n----------------------------------------\n\nTITLE: Using FMDatabaseQueue for Transactions in Objective-C\nDESCRIPTION: Shows how to use FMDatabaseQueue to wrap database operations in a transaction in Objective-C, with rollback capability.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_17\n\nLANGUAGE: objc\nCODE:\n```\n[queue inTransaction:^(FMDatabase *db, BOOL *rollback) {\n    [db executeUpdate:@\"INSERT INTO myTable VALUES (?)\", @1];\n    [db executeUpdate:@\"INSERT INTO myTable VALUES (?)\", @2];\n    [db executeUpdate:@\"INSERT INTO myTable VALUES (?)\", @3];\n\n    if (whoopsSomethingWrongHappened) {\n        *rollback = YES;\n        return;\n    }\n\n    // etc ...\n}];\n```\n\n----------------------------------------\n\nTITLE: Adding Last Modified Column to Schema Definition in JavaScript\nDESCRIPTION: Code example showing how to manually add the 'last_modified' column to table definitions in a Schema. This is required after version 0.10.0 where the column is no longer automatically added.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n{ name: 'last_modified', type: 'number', isOptional: true }\n```\n\n----------------------------------------\n\nTITLE: Disabling WatermelonDB Logging\nDESCRIPTION: This code demonstrates how to completely disable all logging in WatermelonDB by calling the silence() method on the logger. This is typically done in your database.js file before your app starts.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/Logging.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport logger from '@nozbe/watermelondb/utils/common/logger';\nlogger.silence();\n```\n\n----------------------------------------\n\nTITLE: JSON Sanitizer Function Implementation\nDESCRIPTION: Example of a sanitizer function that ensures JSON data conforms to expected array format.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/AdvancedFields.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst sanitizeReactions = rawReactions => {\n  return Array.isArray(rawReactions) ? rawReactions.map(String) : []\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up WatermelonDB Development Environment\nDESCRIPTION: Commands to clone the repository and install dependencies for local development.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Nozbe/WatermelonDB.git\ncd WatermelonDB\nyarn\n```\n\n----------------------------------------\n\nTITLE: Creating FMDatabase Instance with Path in Objective-C\nDESCRIPTION: Demonstrates how to create an FMDatabase instance with a path to a SQLite database file. The path can be a file system path, an empty string for a temporary database, or NULL for an in-memory database.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_4\n\nLANGUAGE: objc\nCODE:\n```\nNSString *path = [NSTemporaryDirectory() stringByAppendingPathComponent:@\"tmp.db\"];\nFMDatabase *db = [FMDatabase databaseWithPath:path];\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Observable Field Implementation\nDESCRIPTION: Example of implementing a custom observable field for tracking post popularity based on comment count.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/AdvancedFields.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { distinctUntilChanged, map as map$ } from 'rxjs/operators'\nimport { lazy } from '@nozbe/watermelondb/decorators'\n\nclass Post extends Model {\n  @lazy isPopular = this.comments.observeCount().pipe(\n    map$(comments => comments > 10),\n    distinctUntilChanged()\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing better-sqlite3 Dependency for NodeJS\nDESCRIPTION: Command to install the better-sqlite3 peer dependency required for using WatermelonDB in NodeJS with SQLite. This dependency enables SQLite functionality in Node environments.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Installation.mdx#2025-04-18_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev better-sqlite3\n\n# (or with npm:)\nnpm install -D better-sqlite3\n```\n\n----------------------------------------\n\nTITLE: Example Changes Object Structure in WatermelonDB\nDESCRIPTION: Demonstrates the structure of changes object used for synchronization in WatermelonDB. It shows how created, updated, and deleted records are organized by table name with appropriate raw values.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Sync/Backend.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  projects: {\n    created: [\n      { id: 'aaaa', name: 'Foo', is_favorite: true },\n      { id: 'bbbb', name: 'Bar', is_favorite: false },\n    ],\n    updated: [\n      { id: 'ccc', name: 'Baz', is_favorite: true },\n    ],\n    deleted: ['ddd'],\n  },\n  tasks: {\n    created: [],\n    updated: [\n      { id: 'tttt', name: 'Buy eggs' },\n    ],\n    deleted: [],\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SQL with Placeholders in Objective-C\nDESCRIPTION: Shows how to execute an SQL insert statement with placeholders in Objective-C, properly handling different data types and NULL values.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_11\n\nLANGUAGE: objc\nCODE:\n```\nNSInteger identifier = 42;\nNSString *name = @\"Liam O'Flaherty (\\\"the famous Irish author\\\")\";\nNSDate *date = [NSDate date];\nNSString *comment = nil;\n\nBOOL success = [db executeUpdate:@\"INSERT INTO authors (identifier, name, date, comment) VALUES (?, ?, ?, ?)\", @(identifier), name, date, comment ?: [NSNull null]];\nif (!success) {\n    NSLog(@\"error = %@\", [db lastErrorMessage]);\n}\n```\n\n----------------------------------------\n\nTITLE: Opening FMDatabase Connection in Objective-C\nDESCRIPTION: Shows how to open an FMDatabase connection. Opening fails if there are insufficient resources or permissions. The code also demonstrates error handling.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_5\n\nLANGUAGE: objc\nCODE:\n```\nif (![db open]) {\n    // [db release];   // uncomment this line in manual referencing code; in ARC, this is not necessary/permitted\n    db = nil;\n    return;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WatermelonDB Pods Configuration - Ruby\nDESCRIPTION: CocoaPods configuration for installing WatermelonDB and its dependencies in iOS projects. Includes setup for simdjson dependency with modular headers.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Uncomment this line if you're not using auto-linking\n# pod 'WatermelonDB', path: '../node_modules/@nozbe/watermelondb'\n# WatermelonDB dependency\npod 'simdjson', path: '../node_modules/@nozbe/simdjson', modular_headers: true\n```\n\n----------------------------------------\n\nTITLE: Using Unsafe SQL/Loki Expressions in WatermelonDB\nDESCRIPTION: Demonstrates how to include smaller bits of SQL and Loki expressions within regular Watermelon queries. This allows using as much of the Watermelon query builder as possible while adding custom expressions for specific needs.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Query.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// SQL example:\npostsCollection.query(\n  Q.where('is_published', true),\n  Q.unsafeSqlExpr('tasks.num1 not between 1 and 5'),\n)\n\n// LokiJS example:\npostsCollection.query(\n  Q.where('is_published', true),\n  Q.unsafeLokiExpr({ text1: { $contains: 'hey' } })\n)\n```\n\n----------------------------------------\n\nTITLE: Executing SELECT Query with FMDatabase in Objective-C\nDESCRIPTION: Illustrates how to execute a SELECT query using FMDatabase and iterate through the results using an FMResultSet object. It demonstrates the use of the 'next' method to step through records.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_6\n\nLANGUAGE: objc\nCODE:\n```\nFMResultSet *s = [db executeQuery:@\"SELECT * FROM myTable\"];\nwhile ([s next]) {\n    //retrieve values for each record\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Parameters in SQL\nDESCRIPTION: Shows the syntax for using named parameters in SQL statements instead of placeholders.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO authors (identifier, name, date, comment) VALUES (:identifier, :name, :date, :comment)\n```\n\n----------------------------------------\n\nTITLE: Pull Endpoint Parameters for WatermelonDB Sync\nDESCRIPTION: Specifies the expected parameters for the pull synchronization endpoint. Includes lastPulledAt timestamp, schema version, and migration information for handling schema changes.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Sync/Backend.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  lastPulledAt: Timestamp,\n  schemaVersion: int,\n  migration: null | { from: int, tables: string[], columns: { table: string, columns: string[] }[] }\n}\n```\n\n----------------------------------------\n\nTITLE: Changes Object Type Definition in WatermelonDB\nDESCRIPTION: Formal type definition of the Changes object structure required for WatermelonDB synchronization. Defines the shape that changes objects must conform to with table names and their created, updated, and deleted records.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Sync/Backend.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nChanges = {\n  [table_name: string]: {\n    created: RawRecord[],\n    updated: RawRecord[],\n    deleted: string[],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: iOS CocoaPods Configuration\nDESCRIPTION: CocoaPods configuration for iOS setup including required dependencies.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Installation.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# Uncomment this line if you're not using auto-linking or if auto-linking causes trouble\n# pod 'WatermelonDB', path: '../node_modules/@nozbe/watermelondb'\n\n# WatermelonDB dependency, should not be needed on modern React Native\n# (please file an issue if this causes issues for you)\n# pod 'React-jsi', path: '../node_modules/react-native/ReactCommon/jsi', modular_headers: true\n\n# WatermelonDB dependency\npod 'simdjson', path: '../node_modules/@nozbe/simdjson', modular_headers: true\n```\n\n----------------------------------------\n\nTITLE: Closing FMDatabase Connection in Objective-C\nDESCRIPTION: Demonstrates how to close an FMDatabase connection, which is important for relinquishing resources acquired by SQLite during operation.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_8\n\nLANGUAGE: objc\nCODE:\n```\n[db close];\n```\n\n----------------------------------------\n\nTITLE: Using Type-Safe Schema in Flow-typed Model Class\nDESCRIPTION: Demonstrates how to correctly use the typed table and column names in a model class definition. This approach ensures type safety when referencing tables and columns.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/Flow.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// File: model/Comment.js\n// @flow\n\nimport { Model } from '@nozbe/watermelondb'\nimport { text } from '@nozbe/watermelondb/decorators'\n\nimport { Tables, Columns } from './schema.js'\n\nconst Column = Columns.comments\n\nexport default class Comment extends Model {\n  static table = Tables.comments\n\n  @text(Column.body) body: string\n}\n```\n\n----------------------------------------\n\nTITLE: Using FMDatabaseQueue for Database Operations in Objective-C\nDESCRIPTION: Demonstrates how to use FMDatabaseQueue to perform thread-safe database operations in Objective-C.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_16\n\nLANGUAGE: objc\nCODE:\n```\n[queue inDatabase:^(FMDatabase *db) {\n    [db executeUpdate:@\"INSERT INTO myTable VALUES (?)\", @1];\n    [db executeUpdate:@\"INSERT INTO myTable VALUES (?)\", @2];\n    [db executeUpdate:@\"INSERT INTO myTable VALUES (?)\", @3];\n\n    FMResultSet *rs = [db executeQuery:@\"select * from foo\"];\n    while ([rs next]) {\n        ...\n    }\n}];\n```\n\n----------------------------------------\n\nTITLE: Using Database Hook in React Components\nDESCRIPTION: Example of using the 'useDatabase' hook to access the Database context within a React functional component. This hook was introduced in version 0.12.0.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useDatabase } from '@nozbe/watermelondb/hooks'\nconst Component = () => {\n  const database = useDatabase()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Bundler to Use Terser in React Native\nDESCRIPTION: JavaScript configuration for metro.config.js to use Terser as the minifier instead of UglifyES. This change is necessary to resolve compilation problems with WatermelonDB Sync in React Native release mode.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Sync/Troubleshoot.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    // ...\n    transformer: {\n        // ...\n        minifierPath: 'metro-minify-terser',\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of string literals with Flow types\nDESCRIPTION: Example showing incorrect usage of string literals for table and column names with Flow, which will cause type errors. Flow expects opaque type identifiers, not string literals.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/Flow.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nclass Comment extends Model {\n  static table = 'comments'\n\n  @text('body') body\n}\n```\n\n----------------------------------------\n\nTITLE: Database Read Operations in WatermelonDB\nDESCRIPTION: Using db.read() for operations that need consistency but don't write changes to the database.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.read(() => {})\n```\n\n----------------------------------------\n\nTITLE: Migration Sync Decision Table in Markdown\nDESCRIPTION: A table illustrating the logic for determining whether to perform a migration sync based on various version parameters. It includes last pulled at (LPA), migrations enabled at version (MEA), last synced schema version (LS), and current schema version (CV).\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Implementation/SyncImpl.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nLPA     MEA     LS      CV      migration   set LS=CV?   comment\n\nnull    X       X       10      null        YES          first sync. regardless of whether the app\n                                                         is migration sync aware, we can note LS=CV\n                                                         to fetch all migrations once available\n\n100     null    X       X       null        NO           indicates app is not migration sync aware so\n                                                         we're not setting LS to allow future migration sync\n\n100     X       10      10      null        NO           up to date, no migration\n100     9       9       10      {9-10}      YES          correct migration sync\n100     9       null    10      {9-10}      YES          fallback migration. might not contain all\n                                                         necessary migrations, since we can't know for sure\n                                                         that user logged in at then-current-version==MEA\n\n100     9       11      10      ERROR       NO           LS > CV indicates programmer error\n100     11      X       10      ERROR       NO           MEA > CV indicates programmer error\n```\n\n----------------------------------------\n\nTITLE: Setting Custom ID Generator in WatermelonDB\nDESCRIPTION: Code example demonstrating how to update the random ID generation schema in WatermelonDB. This allows customization of ID formats, such as using UUIDs instead of the default ID format.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setGenerator } from '@nozbe/watermelondb/utils/common/randomId'\nsetGenerator(newGenenerator)\n```\n\n----------------------------------------\n\nTITLE: Adding Last Modified Column Schema in JavaScript\nDESCRIPTION: Example schema definition showing how to manually add a last_modified column to database tables. This is required if using this column for custom sync code after version 0.10.0.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{ name: 'last_modified', type: 'number', isOptional: true }\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for WatermelonDB JSI\nDESCRIPTION: Sets up the basic CMake project and version requirements for building WatermelonDB JSI components.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/android-jsi/src/main/cpp/CMakeLists.txt#2025-04-18_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nPROJECT(watermelondb-jsi C CXX)\ncmake_minimum_required(VERSION 3.4.1)\n\n# inspired by https://github.com/ericlewis/react-native-hostobject-demo/blob/6f16c01db80f928ccd294c8cc5d4668b0f8c15ec/android/app/CMakeLists.txt\n# execute_process (COMMAND ln \"-s\" \"src\" \"../../../../../node_modules/react-native/third-party/double-conversion-1.1.6/double-conversion\")\n\n# NOTE: This may need to be bumped sometimes to force CMake caches to clear\nset(WMELON_JSI_BUMP 4)\n```\n\n----------------------------------------\n\nTITLE: Fetching Raw Data in WatermelonDB\nDESCRIPTION: Retrieves unsanitized raw objects directly from the database for performance optimization.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait query.unsafeFetchRaw()\n```\n\n----------------------------------------\n\nTITLE: Compiling WatermelonDB Directly to App in Bash\nDESCRIPTION: This command compiles WatermelonDB directly to the app's node_modules directory, which is necessary for React Native (Metro) compatibility.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CONTRIBUTING.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nDEV_PATH=\"/path/to/your/app/node_modules/@nozbe/watermelondb\" yarn dev\n```\n\n----------------------------------------\n\nTITLE: Raw SQL Query Using Q.unsafeSqlQuery\nDESCRIPTION: Example of using the Q.unsafeSqlQuery feature to run custom SQL queries with placeholders. This is part of the new features added for raw SQL querying.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncollection.query(Q.unsafeSqlQuery(\"select * from tasks where foo = ?\", ['bar'])).fetch()\n```\n\n----------------------------------------\n\nTITLE: Executing Transactions in FMDB with Swift 3/4\nDESCRIPTION: This code demonstrates how to perform a transaction using FMDB in Swift 3 or 4. It shows the changes in syntax between FMDB 2.6 and 2.7 due to nullability audits, affecting how optionals are handled.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nqueue.inTransaction { db, rollback in\n    do {\n        try db.executeUpdate(\"INSERT INTO foo (bar) VALUES (?)\", values: [1])\n        try db.executeUpdate(\"INSERT INTO foo (bar) VALUES (?)\", values: [2])\n    } catch {\n        rollback.pointee = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SRWebSocketDelegate Protocol in Objective-C\nDESCRIPTION: This snippet defines the SRWebSocketDelegate protocol in Objective-C. It includes optional methods for handling various WebSocket events such as opening, receiving messages, and closing.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/iosTest/Pods/SocketRocket/README.md#2025-04-18_snippet_3\n\nLANGUAGE: Objective-C\nCODE:\n```\n@protocol SRWebSocketDelegate <NSObject>\n\n@optional\n\n- (void)webSocketDidOpen:(SRWebSocket *)webSocket;\n\n- (void)webSocket:(SRWebSocket *)webSocket didReceiveMessageWithString:(NSString *)string;\n- (void)webSocket:(SRWebSocket *)webSocket didReceiveMessageWithData:(NSData *)data;\n\n- (void)webSocket:(SRWebSocket *)webSocket didFailWithError:(NSError *)error;\n- (void)webSocket:(SRWebSocket *)webSocket didCloseWithCode:(NSInteger)code reason:(nullable NSString *)reason wasClean:(BOOL)wasClean;\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Implementing NoChange Decorator\nDESCRIPTION: Usage of @nochange decorator to prevent field modifications after creation.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/AdvancedFields.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { field, nochange } from '@nozbe/watermelondb/decorators'\n\nclass User extends Model {\n  // ...\n  @nochange @field('is_owner') isOwner\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental JSI SQLite Adapter\nDESCRIPTION: Code example showing how to enable the experimental JSI-based SQLite adapter by adding the experimentalUseJSI flag to the SQLiteAdapter constructor.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexperimentalUseJSI: true\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple SQL Statements with FMDatabase in Objective-C\nDESCRIPTION: Illustrates how to execute multiple SQL statements in a single string using FMDatabase's executeStatements:withResultBlock: method. It includes creating tables, inserting data, and querying results.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_9\n\nLANGUAGE: objc\nCODE:\n```\nNSString *sql = @\"create table bulktest1 (id integer primary key autoincrement, x text);\"\n                 \"create table bulktest2 (id integer primary key autoincrement, y text);\"\n                 \"create table bulktest3 (id integer primary key autoincrement, z text);\"\n                 \"insert into bulktest1 (x) values ('XXX');\"\n                 \"insert into bulktest2 (y) values ('YYY');\"\n                 \"insert into bulktest3 (z) values ('ZZZ');\"\n\nsuccess = [db executeStatements:sql];\n\nsql = @\"select count(*) as count from bulktest1;\"\n       \"select count(*) as count from bulktest2;\"\n       \"select count(*) as count from bulktest3;\";\n\nsuccess = [self.db executeStatements:sql withResultBlock:^int(NSDictionary *dictionary) {\n    NSInteger count = [dictionary[@\"count\"] integerValue];\n    XCTAssertEqual(count, 1, @\"expected one record for dictionary %@\", dictionary);\n    return 0;\n}];\n```\n\n----------------------------------------\n\nTITLE: Colored and styled text output with fmt in C++\nDESCRIPTION: Example of using fmt::color and fmt::emphasis to print text with colors and different text styles like bold, underline, and italic on terminal output.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/iosTest/Pods/fmt/README.rst#2025-04-18_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\n#include <fmt/color.h>\n\nint main() {\n  fmt::print(fg(fmt::color::crimson) | fmt::emphasis::bold,\n             \"Hello, {}!\\n\", \"world\");\n  fmt::print(fg(fmt::color::floral_white) | bg(fmt::color::slate_gray) |\n             fmt::emphasis::underline, \"Hello, {}!\\n\", \"мир\");\n  fmt::print(fg(fmt::color::steel_blue) | fmt::emphasis::italic,\n             \"Hello, {}!\\n\", \"世界\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using callReader and callWriter Methods\nDESCRIPTION: New methods to replace the deprecated subAction() method for consistent database operations.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n.callReader()\n.callWriter()\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up WatermelonDB Repository in Bash\nDESCRIPTION: These commands clone the WatermelonDB repository from GitHub, navigate into the project directory, and install the necessary dependencies using Yarn.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Nozbe/WatermelonDB.git\ncd WatermelonDB\nyarn\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Placeholders in SQL\nDESCRIPTION: Demonstrates the correct way to use placeholders in SQL statements for data insertion, avoiding manual sanitization.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO myTable VALUES (?, ?, ?, ?)\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration for React\nDESCRIPTION: Configuration for Vite with React support including necessary Babel plugins.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Installation.mdx#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\nexport default defineConfig({\n    plugins: [\n        react({\n            babel: {\n                plugins: [\n                    [\"@babel/plugin-proposal-decorators\", { \"legacy\": true }],\n                    [\"@babel/plugin-proposal-class-properties\", { \"loose\": true }],\n                    [\n                        \"@babel/plugin-transform-runtime\",\n                        {\n                            \"helpers\": true,\n                            \"regenerator\": true\n                        }\n                    ]\n                ],\n            }\n        }),\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Writing to a file with fmt in C++\nDESCRIPTION: Example of using fmt::output_file to write formatted text to a file. This demonstrates the file output capabilities of {fmt}, which can be faster than traditional fprintf.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/iosTest/Pods/fmt/README.rst#2025-04-18_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\n#include <fmt/os.h>\n\nint main() {\n  auto out = fmt::output_file(\"guide.txt\");\n  out.print(\"Don't {}\", \"Panic\");\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Adapter Type in WatermelonDB\nDESCRIPTION: Shows how to identify adapters by checking their static adapterType property.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nstatic adapterType\n```\n\n----------------------------------------\n\nTITLE: Using FMDatabaseQueue for Transactions in Swift\nDESCRIPTION: Demonstrates how to use FMDatabaseQueue to perform a transaction with error handling and rollback capability in Swift.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nqueue.inTransaction { db, rollback in\n    do {\n        try db.executeUpdate(\"INSERT INTO myTable VALUES (?)\", values: [1])\n        try db.executeUpdate(\"INSERT INTO myTable VALUES (?)\", values: [2])\n        try db.executeUpdate(\"INSERT INTO myTable VALUES (?)\", values: [3])\n\n        if whoopsSomethingWrongHappened {\n            rollback.pointee = true\n            return\n        }\n\n        // etc ...\n    } catch {\n        rollback.pointee = true\n        print(error)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Podfile Configuration for iOS Installation\nDESCRIPTION: Required line to add to Podfile for iOS installation in WatermelonDB 0.23 and later. This provides access to the simdjson dependency.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\npod 'simdjson', path: '../node_modules/@nozbe/simdjson'\n```\n\n----------------------------------------\n\nTITLE: Running WatermelonDB Integration Tests in Bash\nDESCRIPTION: These commands run the integration tests for WatermelonDB on iOS and Android platforms.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CONTRIBUTING.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:ios\nyarn test:android\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Decorator Plugin\nDESCRIPTION: Installation of the Babel plugin for decorator support in React Native.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Installation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @babel/plugin-proposal-decorators\n\n# (or with npm:)\nnpm install -D @babel/plugin-proposal-decorators\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files and Library Target\nDESCRIPTION: Collects source files from different locations, including Android-specific JSI files, shared source files, and vendor files (SQLite and simdjson). Creates the watermelondb-jsi shared library target with all necessary source files.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/android-jsi/src/main/cpp/CMakeLists.txt#2025-04-18_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# -------------------------------------------------\n# Source files\n\nfile(GLOB ANDROID_JSI_SRC_FILES ./*.cpp)\nfile(GLOB SHARED_SRC_FILES ../../../../shared/*.cpp)\n\nadd_library(watermelondb-jsi SHARED\n        # vendor files\n        ${NODE_MODULES_PATH_WM}/@nozbe/sqlite/${SQLITE_VERSION}/sqlite3.c\n        ${NODE_MODULES_PATH_WM}/@nozbe/simdjson/src/simdjson.cpp\n        # our sources\n        ${ANDROID_JSI_SRC_FILES}\n        ${SHARED_SRC_FILES}\n        # this seems necessary to use almost any JSI API - otherwise we get linker errors\n        # seems wrong to compile a file that's already getting compiled as part of the app, but ¯\\_(ツ)_/¯\n        ${NODE_MODULES_PATH_RN}/react-native/ReactCommon/jsi/jsi/jsi.cpp)\n```\n\n----------------------------------------\n\nTITLE: Executing SQL with Placeholders in Swift\nDESCRIPTION: Demonstrates how to execute an SQL insert statement with placeholders in Swift, using proper error handling and optional handling.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\ndo {\n    let identifier = 42\n    let name = \"Liam O'Flaherty (\\\"the famous Irish author\\\")\"\n    let date = Date()\n    let comment: String? = nil\n\n    try db.executeUpdate(\"INSERT INTO authors (identifier, name, date, comment) VALUES (?, ?, ?, ?)\", values: [identifier, name, date, comment ?? NSNull()])\n} catch {\n    print(\"error = \\(error)\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS SQLite Integration Path\nDESCRIPTION: Header search path configuration for iOS SQLite integration to fix 'jsi/jsi.h' file not found error.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(SRCROOT)/../../../../../ios/Pods/Headers/Public/React-jsi\n```\n\n----------------------------------------\n\nTITLE: Running WatermelonDB Test Suite in Bash\nDESCRIPTION: These commands run the various tests for WatermelonDB, including Jest, ESLint, and Flow.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CONTRIBUTING.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn ci:check\n\nyarn test\nyarn eslint\nyarn flow\n```\n\n----------------------------------------\n\nTITLE: React Native Babel Configuration\nDESCRIPTION: Babel configuration for React Native projects to enable decorator support.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Installation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"module:metro-react-native-babel-preset\"],\n  \"plugins\": [[\"@babel/plugin-proposal-decorators\", { \"legacy\": true }]]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WatermelonDB with RN Fetch Blob\nDESCRIPTION: Implementation using rn-fetch-blob to set up database sharing across iOS targets. This approach gets the App Group path using rn-fetch-blob and configures the SQLite adapter with the shared database path.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/SharingDatabaseAcrossTargets.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NativeModules, Platform } from 'react-native';\nimport { Database } from '@nozbe/watermelondb';\nimport SQLiteAdapter from '@nozbe/watermelondb/adapters/sqlite';\nimport schema from './schema';\nimport RNFetchBlob from 'rn-fetch-blob';\n\nconst getAppGroupPath = (): string => {\n  let path = '';\n\n  if (Platform.OS === 'ios') {\n    path = `${RNFetchBlob.fs.syncPathAppGroup('group.com.example.MyAwesomeApp')}/`;\n  }\n\n  return path;\n}\n\nconst adapter = new SQLiteAdapter({\n  dbName: `${getAppGroupPath()}default.db`,\n  schema,\n});\n\nconst database = new Database({\n  adapter,\n  modelClasses: [\n    ...\n  ],\n});\n\nexport default database;\n```\n\n----------------------------------------\n\nTITLE: Detecting node_modules Path for Different Project Structures\nDESCRIPTION: Logic to determine the node_modules path based on different project structures, including standard React Native projects, Nozbe's folder structure, and internal Watermelon tester. Uses conditional paths based on file existence checks.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/android-jsi/src/main/cpp/CMakeLists.txt#2025-04-18_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# -------------------------------------------------\n# Figure out where node_modules is\n# (surely there's a better way to do this)\n# This has to work with standard RN project, Nozbe's unusual folder structure and internal Watermelon tester\n\nget_filename_component(_nativeTesterPath \"../../../../../node_modules/@nozbe/sqlite/\" REALPATH)\nget_filename_component(_nozbePath \"../../../../../../../../../native/node_modules/react-native/ReactCommon/jsi/jsi/\" REALPATH)\n\nif(EXISTS \"${_nativeTesterPath}\")\n        # these paths work for WatermelonDB native tester\n        set(NODE_MODULES_PATH_WM ../../../../../node_modules/)\n        set(NODE_MODULES_PATH_RN ../../../../../node_modules/)\nelseif(EXISTS \"${_nozbePath}\")\n        # these paths work for Nozbe\n        set(NODE_MODULES_PATH_WM ../../../../../../../)\n        set(NODE_MODULES_PATH_RN ../../../../../../../../../native/node_modules/)\nelse()\n        # these paths should work for a standard RN project\n        set(NODE_MODULES_PATH_WM ../../../../../../../)\n        set(NODE_MODULES_PATH_RN ../../../../../../../)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Native Code Linting for WatermelonDB in Bash\nDESCRIPTION: This command runs the ktlint tool to ensure the native code conforms to WatermelonDB standards.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CONTRIBUTING.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn ktlint\n```\n\n----------------------------------------\n\nTITLE: Installing WatermelonDB Package\nDESCRIPTION: Commands to install WatermelonDB using yarn or npm package managers.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Installation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @nozbe/watermelondb\n\n# (or with npm:)\nnpm install @nozbe/watermelondb\n```\n\n----------------------------------------\n\nTITLE: Initializing CocoaPods for FMDB Integration in iOS\nDESCRIPTION: This snippet shows how to initialize a CocoaPods project and add FMDB as a dependency in the Podfile. It includes options for different FMDB configurations such as FTS and SQLCipher support.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Uncomment the next line to define a global platform for your project\n# platform :ios, '9.0'\n\ntarget 'MyApp' do\n    # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n    use_frameworks!\n\n    # Pods for MyApp2\n\n    pod 'FMDB'\n    # pod 'FMDB/FTS'   # FMDB with FTS\n    # pod 'FMDB/standalone'   # FMDB with latest SQLite amalgamation source\n    # pod 'FMDB/standalone/FTS'   # FMDB with latest SQLite amalgamation source and FTS\n    # pod 'FMDB/SQLCipher'   # FMDB with SQLCipher\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Build Configuration and Optimization Flags\nDESCRIPTION: Configures optimization flags for both debug and release builds. Uses -Os optimization level for simdjson performance even in debug builds, with a note about JSI debugging.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/android-jsi/src/main/cpp/CMakeLists.txt#2025-04-18_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# -------------------------------------------------\n# Build configuration\n\n#add_definitions(\n#        -DFOLLY_USE_LIBCPP=1\n#        -DFOLLY_NO_CONFIG=1\n#        -DFOLLY_HAVE_MEMRCHR=1\n#)\n\n# simdjson is slow without optimization\nset(CMAKE_CXX_FLAGS_DEBUG \"-Os\") # comment out for JSI debugging\nset(CMAKE_CXX_FLAGS_RELEASE \"-Os\")\n\n# TODO: Configure sqlite with compile-time options\n# https://www.sqlite.org/compile.html\n```\n\n----------------------------------------\n\nTITLE: Starting WatermelonDB Development Environment in Bash\nDESCRIPTION: This command starts the development environment for WatermelonDB, creating a dev folder and watching for changes in JavaScript source files.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Web Babel Configuration\nDESCRIPTION: Babel configuration for web projects using Webpack.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Installation.mdx#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-decorators\", { \"legacy\": true }],\n    [\"@babel/plugin-proposal-class-properties\", { \"loose\": true }],\n    [\n      \"@babel/plugin-transform-runtime\",\n      {\n        \"helpers\": true,\n        \"regenerator\": true\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom SQLite Functions with FMDB in Swift\nDESCRIPTION: This snippet illustrates how to create a custom SQLite function using FMDB in Swift. It demonstrates parameter type checking, string manipulation, and returning results using the new FMDB 2.7 API.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ndb.makeFunctionNamed(\"RemoveDiacritics\", arguments: 1) { context, argc, argv in\n    guard db.valueType(argv[0]) == .text || db.valueType(argv[0]) == .null else {\n        db.resultError(\"Expected string parameter\", context: context)\n        return\n    }\n\n    if let string = db.valueString(argv[0])?.folding(options: .diacriticInsensitive, locale: nil) {\n        db.resultString(string, context: context)\n    } else {\n        db.resultNull(context: context)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building WatermelonDB Distribution\nDESCRIPTION: Builds the distribution package that will be used for testing in a real application environment.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Implementation/Publishing.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Running Native Integration Tests\nDESCRIPTION: Commands to run integration tests for iOS and Android platforms.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CONTRIBUTING.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:ios\nyarn test:android\n```\n\n----------------------------------------\n\nTITLE: Formatting WatermelonDB Files\nDESCRIPTION: Command to format modified files using Prettier.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn prettier\n```\n\n----------------------------------------\n\nTITLE: Running Automated Tests for WatermelonDB in Bash\nDESCRIPTION: This command runs the continuous integration checks, including tests, for the WatermelonDB project.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn ci:check\n```\n\n----------------------------------------\n\nTITLE: WatermelonDB Configuration with Native Bridge\nDESCRIPTION: TypeScript implementation for configuring WatermelonDB using the native bridge module to get the App Group path. Sets up the SQLite adapter with the shared database path obtained from the native module.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/SharingDatabaseAcrossTargets.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NativeModules, Platform } from 'react-native';\nimport { Database } from '@nozbe/watermelondb';\nimport SQLiteAdapter from '@nozbe/watermelondb/adapters/sqlite';\nimport schema from './schema';\n\nconst getAppGroupPath = (): string => {\n  let path = '';\n\n  if (Platform.OS === 'ios') {\n    path = NativeModules.AppGroup.path;\n  }\n\n  return path;\n}\n\nconst adapter = new SQLiteAdapter({\n  dbName: `${getAppGroupPath()}default.db`,\n  schema,\n});\n\nconst database = new Database({\n  adapter,\n  modelClasses: [\n    ...\n  ],\n});\n\nexport default database;\n```\n\n----------------------------------------\n\nTITLE: SRWebSocket Interface in Objective-C\nDESCRIPTION: This code snippet shows the interface for the SRWebSocket class in Objective-C. It includes methods for initialization, opening and closing connections, and sending data or strings.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/iosTest/Pods/SocketRocket/README.md#2025-04-18_snippet_2\n\nLANGUAGE: Objective-C\nCODE:\n```\n@interface SRWebSocket : NSObject\n\n// Make it with this\n- (instancetype)initWithURLRequest:(NSURLRequest *)request;\n\n// Set this before opening\n@property (nonatomic, weak) id <SRWebSocketDelegate> delegate;\n\n// Open with this\n- (void)open;\n\n// Close it with this\n- (void)close;\n\n// Send a Data\n- (void)sendData:(nullable NSData *)data error:(NSError **)error;\n\n// Send a UTF8 String\n- (void)sendString:(NSString *)string error:(NSError **)error;\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Starting WatermelonDB Development Mode\nDESCRIPTION: Command to start development mode which watches and recompiles JavaScript files.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Running WatermelonDB Test Suites\nDESCRIPTION: Commands to run different test suites including Jest, ESLint, and Flow.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CONTRIBUTING.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\nyarn eslint\nyarn flow\n```\n\n----------------------------------------\n\nTITLE: Executing SQL with Named Parameters in Objective-C\nDESCRIPTION: Demonstrates how to execute an SQL statement with named parameters in Objective-C using a dictionary.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_14\n\nLANGUAGE: objc\nCODE:\n```\nNSDictionary *arguments = @{@\"identifier\": @(identifier), @\"name\": name, @\"date\": date, @\"comment\": comment ?: [NSNull null]};\nBOOL success = [db executeUpdate:@\"INSERT INTO authors (identifier, name, date, comment) VALUES (:identifier, :name, :date, :comment)\" withParameterDictionary:arguments];\nif (!success) {\n    NSLog(@\"error = %@\", [db lastErrorMessage]);\n}\n```\n\n----------------------------------------\n\nTITLE: Running CI Checks for WatermelonDB\nDESCRIPTION: Command to run automated tests and checks before submitting a pull request.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn ci:check\n```\n\n----------------------------------------\n\nTITLE: Installing Website Dependencies\nDESCRIPTION: Command to install all required dependencies for the documentation website using Yarn package manager.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Creating FMDatabaseQueue in Objective-C\nDESCRIPTION: Shows how to create an FMDatabaseQueue instance for thread-safe database operations in Objective-C.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_15\n\nLANGUAGE: objc\nCODE:\n```\nFMDatabaseQueue *queue = [FMDatabaseQueue databaseQueueWithPath:aPath];\n```\n\n----------------------------------------\n\nTITLE: Using Custom SQLite Functions in SQL Queries with FMDB\nDESCRIPTION: This SQL snippet shows how to use a custom SQLite function created with FMDB in an SQL query. It demonstrates using the 'RemoveDiacritics' function for case-insensitive and accent-insensitive matching.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM employees WHERE RemoveDiacritics(first_name) LIKE 'jose'\n```\n\n----------------------------------------\n\nTITLE: Native Bridge Module Implementation in Objective-C\nDESCRIPTION: Objective-C bridge module declaration for exposing App Group functionality to React Native.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/SharingDatabaseAcrossTargets.md#2025-04-18_snippet_1\n\nLANGUAGE: objectivec\nCODE:\n```\n#import \"React/RCTBridgeModule.h\"\n@interface RCT_EXTERN_MODULE(AppGroup, NSObject)\n@end\n```\n\n----------------------------------------\n\nTITLE: Linking External Libraries for WatermelonDB JSI\nDESCRIPTION: Links the watermelondb-jsi target with required system libraries including Android and logging libraries.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/android-jsi/src/main/cpp/CMakeLists.txt#2025-04-18_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(watermelondb-jsi\n                      # link with these libraries:\n                      android\n                      log)\n```\n\n----------------------------------------\n\nTITLE: Deploying Website Using GitHub Credentials\nDESCRIPTION: Command to deploy the website using GitHub username for authentication.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Value from SELECT Query with FMDatabase in Objective-C\nDESCRIPTION: Shows how to execute a SELECT query that returns a single value, such as a COUNT(*). It demonstrates the need to call 'next' before accessing the result, even for single-value queries.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/ios/WatermelonDB/FMDB/README.markdown#2025-04-18_snippet_7\n\nLANGUAGE: objc\nCODE:\n```\nFMResultSet *s = [db executeQuery:@\"SELECT COUNT(*) FROM myTable\"];\nif ([s next]) {\n    int totalCount = [s intForColumnIndex:0];\n}\n```\n\n----------------------------------------\n\nTITLE: Linking WatermelonDB to Local App\nDESCRIPTION: Commands to symlink the development version of WatermelonDB to a local application.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CONTRIBUTING.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd node_modules/@nozbe\nrm -fr watermelondb\nln -s path-to-watermelondb/dev watermelondb\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start the local development server that provides live preview of changes in a browser window.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Starting TestChat Server in Python\nDESCRIPTION: This Python command starts the TestChat server for the demo application. It runs a Python script that implements a WebSocket chatroom server.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/iosTest/Pods/SocketRocket/README.md#2025-04-18_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\npython TestChatServer/py/chatroom.py\n```\n\n----------------------------------------\n\nTITLE: Synchronization Function Call with Migration Support in JavaScript\nDESCRIPTION: Demonstrates how to call the synchronize function with migration support enabled at a specific schema version. This is used to handle schema versioning and migrations during the sync process.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Implementation/SyncImpl.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsynchronize({ migrationsEnabledAtVersion: XXX })\n```\n\n----------------------------------------\n\nTITLE: Formatting WatermelonDB Files with Prettier in Bash\nDESCRIPTION: This command runs Prettier to format the files that have been changed in the WatermelonDB project.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn prettier\n```\n\n----------------------------------------\n\nTITLE: Linking WatermelonDB Development Version in App in Bash\nDESCRIPTION: These commands remove the installed WatermelonDB package and create a symlink to the development version in the app's node_modules directory.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CONTRIBUTING.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd node_modules/@nozbe\nrm -fr watermelondb\nln -s path-to-watermelondb/dev watermelondb\n```\n\n----------------------------------------\n\nTITLE: Deploying Website Using SSH\nDESCRIPTION: Command to deploy the website using SSH authentication method.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Running Git Clone and CMake Commands\nDESCRIPTION: Instructions for cloning the format-benchmark repository and generating makefiles with CMake\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/iosTest/Pods/fmt/README.rst#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone --recursive https://github.com/fmtlib/format-benchmark.git\n$ cd format-benchmark\n$ cmake .\n```\n\n----------------------------------------\n\nTITLE: Setting up Flow with WatermelonDB in .flowconfig\nDESCRIPTION: Configuration snippet for .flowconfig to make Flow recognize WatermelonDB types. This configuration allows Flow to see Watermelon's type definitions and properly map imports.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/Flow.md#2025-04-18_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[declarations]\n<PROJECT_ROOT>/node_modules/@nozbe/watermelondb/.*\n\n[options]\n\nmodule.name_mapper='^@nozbe/watermelondb\\(.*\\)$' -> '<PROJECT_ROOT>/node_modules/@nozbe/watermelondb/src\\1'\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Paths for WatermelonDB Dependencies\nDESCRIPTION: Sets up include directories for all the required dependencies including SQLite, simdjson, and React Native header paths. Defines the specific SQLite version to use and includes paths to shared code.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/android-jsi/src/main/cpp/CMakeLists.txt#2025-04-18_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# -------------------------------------------------\n# Header search paths\n# FIXME: <simdjson/simdjson.h> should work…\n\nset(SQLITE_VERSION sqlite-amalgamation-3460000)\n\ninclude_directories(\n        ../../../../shared\n        ${NODE_MODULES_PATH_WM}/@nozbe/sqlite/${SQLITE_VERSION}/\n        ${NODE_MODULES_PATH_WM}/@nozbe/simdjson/src/\n        ${NODE_MODULES_PATH_RN}/react-native/React\n        ${NODE_MODULES_PATH_RN}/react-native/React/Base\n        ${NODE_MODULES_PATH_RN}/react-native/ReactCommon\n        ${NODE_MODULES_PATH_RN}/react-native/ReactCommon/jsi\n        # these seem necessary only if we import <jsi/JSIDynamic.h>\n        #  ../../../../../node_modules/react-native/third-party/folly-2018.10.22.00\n        #  ../../../../../node_modules/react-native/third-party/double-conversion-1.1.6\n        #  ../../../../../node_modules/react-native/third-party/boost_1_63_0\n        #  ../../../../../node_modules/react-native/third-party/glog-0.3.5/src\n)\n```\n\n----------------------------------------\n\nTITLE: Format string validation in C++\nDESCRIPTION: Example demonstrating fmt's compile-time format string validation, which catches errors in format strings during compilation rather than at runtime.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/iosTest/Pods/fmt/README.rst#2025-04-18_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nstd::string s = fmt::format(\"{:d}\", \"I am not a number\");\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Button with React in MDX\nDESCRIPTION: A simple JavaScript snippet that demonstrates how to create an interactive button using React within an MDX blog post. The button shows an alert message when clicked.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/blog/2021-08-01-mdx-blog-post.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<button onClick={() => alert('button clicked!')}>Click me!</button>\n```\n\n----------------------------------------\n\nTITLE: Providing Sync JSON Import for JSI and Swift\nDESCRIPTION: Code snippet showing the import needed for using watermelondbProvideSyncJson() API on iOS. This is mentioned as part of breaking changes related to JSI and Swift integration.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport WatermelonDB\n```\n\n----------------------------------------\n\nTITLE: Android Manual Linking Configuration\nDESCRIPTION: Configuration for manually linking WatermelonDB in Android projects.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Installation.mdx#2025-04-18_snippet_4\n\nLANGUAGE: gradle\nCODE:\n```\ninclude ':watermelondb'\nproject(':watermelondb').projectDir =\n    new File(rootProject.projectDir, '../node_modules/@nozbe/watermelondb/native/android')\n```\n\nLANGUAGE: gradle\nCODE:\n```\n// ...\ndependencies {\n    // ...\n    implementation project(':watermelondb')  // ⬅️ This!\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing WatermelonDB Release\nDESCRIPTION: Commands for publishing the package to NPM, with an option to skip checks for prereleases. Note that yarn publish should not be used due to NPM 2FA compatibility issues.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Implementation/Publishing.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run release\n\n# skips checks (only use on prerelease)\nnpm run release --skip-checks\n```\n\n----------------------------------------\n\nTITLE: Setting up TestChat Server Environment in Bash\nDESCRIPTION: This Bash script shows the steps to set up the environment for the TestChat demo application server. It includes activating a virtual environment and installing dependencies.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/iosTest/Pods/SocketRocket/README.md#2025-04-18_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nsource .env/bin/activate\npip install git+https://github.com/tornadoweb/tornado.git\n```\n\n----------------------------------------\n\nTITLE: Initializing Database with Actions Enabled in JavaScript\nDESCRIPTION: Code snippet showing how to properly initialize a WatermelonDB database with the required 'actionsEnabled' option. This option is mandatory as of version 0.13.0 and is recommended to be set to true.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst database = new Database({\n  adapter: ...,\n  modelClasses: [...],\n  actionsEnabled: true\n})\n```\n\n----------------------------------------\n\nTITLE: Running Native Code Linting\nDESCRIPTION: Command to lint native code using ktlint.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CONTRIBUTING.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn ktlint\n```\n\n----------------------------------------\n\nTITLE: Checking for unsynced changes in WatermelonDB\nDESCRIPTION: Example showing how to check whether there are any unsynced changes in the WatermelonDB database. This function is useful for determining if synchronization with the server is needed.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Sync/Frontend.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { hasUnsyncedChanges } from '@nozbe/watermelondb/sync'\n\nasync function checkUnsyncedChanges() {\n  const database = useDatabase()\n  await hasUnsyncedChanges({ database })\n}\n```\n\n----------------------------------------\n\nTITLE: Building Static Website Content\nDESCRIPTION: Command to generate static website content in the build directory for production deployment.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Printing container contents with fmt in C++\nDESCRIPTION: Example of printing a standard container (vector) using fmt::ranges. This demonstrates how {fmt} can automatically format containers like vectors without manual iteration.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/iosTest/Pods/fmt/README.rst#2025-04-18_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\n#include <vector>\n#include <fmt/ranges.h>\n\nint main() {\n  std::vector<int> v = {1, 2, 3};\n  fmt::print(\"{}\", v);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Metro Minify Terser for React Native\nDESCRIPTION: Command to install the metro-minify-terser package, which is required to fix compilation issues with WatermelonDB Sync in React Native release mode.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Sync/Troubleshoot.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add metro-minify-terser\n```\n\n----------------------------------------\n\nTITLE: Running SocketRocket Tests via Bash\nDESCRIPTION: These Bash commands demonstrate how to run the SocketRocket test suite. It includes commands for running short tests and all tests using the make utility.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/iosTest/Pods/SocketRocket/README.md#2025-04-18_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nmake test\nmake test_all\n```\n\n----------------------------------------\n\nTITLE: Using positional arguments with fmt::format in C++\nDESCRIPTION: Example of using positional arguments in fmt::format to control the order of argument insertion. This allows for reordering arguments in the formatted output.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/iosTest/Pods/fmt/README.rst#2025-04-18_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nstd::string s = fmt::format(\"I'd rather be {1} than {0}.\", \"right\", \"happy\");\n// s == \"I'd rather be happy than right.\"\n```\n\n----------------------------------------\n\nTITLE: Installing SocketRocket via CocoaPods in Ruby\nDESCRIPTION: This code snippet shows how to add SocketRocket to a project using CocoaPods. It requires adding a line to the Podfile and running pod install.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/iosTest/Pods/SocketRocket/README.md#2025-04-18_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\npod 'SocketRocket'\n```\n\n----------------------------------------\n\nTITLE: Printing to stdout with fmt in C++\nDESCRIPTION: Example of using fmt::print to output text to stdout. This demonstrates the basic usage of the {fmt} library to print a hello world message.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/iosTest/Pods/fmt/README.rst#2025-04-18_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#include <fmt/core.h>\n\nint main() {\n  fmt::print(\"Hello, world!\\n\");\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting chrono durations with fmt in C++\nDESCRIPTION: Example of formatting time durations using the fmt::chrono extension. This demonstrates how to print standard durations with default formatting or custom time formats.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/iosTest/Pods/fmt/README.rst#2025-04-18_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\n#include <fmt/chrono.h>\n\nint main() {\n  using namespace std::literals::chrono_literals;\n  fmt::print(\"Default format: {} {}\\n\", 42s, 100ms);\n  fmt::print(\"strftime-like format: {:%H:%M:%S}\\n\", 3h + 15min + 30s);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SocketRocket via Carthage\nDESCRIPTION: This snippet demonstrates how to add SocketRocket to a project using Carthage. It involves adding a line to the Cartfile and running carthage update.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/iosTest/Pods/SocketRocket/README.md#2025-04-18_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\ngithub \"facebook/SocketRocket\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Migrations for WatermelonDB in JavaScript\nDESCRIPTION: Creates a migrations file for WatermelonDB to handle schema changes over time. The migrations array will be populated with migration definitions as the application evolves.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Setup.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { schemaMigrations } from '@nozbe/watermelondb/Schema/migrations'\n\nexport default schemaMigrations({\n  migrations: [\n    // We'll add migration definitions here later\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Formatting a string with fmt in C++\nDESCRIPTION: Example of using fmt::format to create a formatted string with a simple placeholder. This demonstrates how to insert a value into a string template.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/iosTest/Pods/fmt/README.rst#2025-04-18_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nstd::string s = fmt::format(\"The answer is {}.\", 42);\n// s == \"The answer is 42.\"\n```\n\n----------------------------------------\n\nTITLE: Starting TestChat Server in Go\nDESCRIPTION: These Go commands demonstrate how to run the TestChat server implemented in Go. It changes to the server directory and runs the Go chatroom implementation.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/iosTest/Pods/SocketRocket/README.md#2025-04-18_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\ncd TestChatServer/go\ngo run chatroom.go\n```\n\n----------------------------------------\n\nTITLE: Comparing iostream vs printf Formatting\nDESCRIPTION: Example demonstrating the verbose syntax of iostream compared to printf for number formatting\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/native/iosTest/Pods/fmt/README.rst#2025-04-18_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nstd::cout << std::setprecision(2) << std::fixed << 1.23456 << \"\\n\";\n```\n\nLANGUAGE: C++\nCODE:\n```\nprintf(\"%.2f\\n\", 1.23456);\n```\n\n----------------------------------------\n\nTITLE: Compiling WatermelonDB to Specific Path\nDESCRIPTION: Command to compile WatermelonDB directly to a project's node_modules for React Native compatibility.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/CONTRIBUTING.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nDEV_PATH=\"/path/to/your/app/node_modules/@nozbe/watermelondb\" yarn dev\n```\n\n----------------------------------------\n\nTITLE: Using Reader in WatermelonDB for Consistent Data Export (JavaScript)\nDESCRIPTION: Demonstrates the use of a Reader in WatermelonDB to ensure consistent data retrieval for export purposes. This example shows both inline reader and reader method implementations.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Writers.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndatabase.read(async () => {\n  // no changes will happen to the database until this function exits\n})\n\n// alternatively:\nclass Blog extends Model {\n  // ...\n\n  @reader async exportBlog() {\n    const posts = await this.posts.fetch()\n    const comments = await this.allComments.fetch()\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Actions in Database Constructor for WatermelonDB\nDESCRIPTION: Shows how to enable the mandatory 'actionsEnabled' option in the Database constructor. This feature is recommended and will eventually be required in future versions.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst database = new Database({\n  adapter: ...,\n  modelClasses: [...],\n  actionsEnabled: true\n})\n```\n\n----------------------------------------\n\nTITLE: Running Automated Tests for WatermelonDB\nDESCRIPTION: Executes the complete test suite including CI checks, iOS tests, Android tests, and Kotlin linting.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Implementation/Publishing.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn ci:check && yarn test:ios && yarn test:android && yarn ktlint\n```\n\n----------------------------------------\n\nTITLE: Using Skip Query Method for Pagination\nDESCRIPTION: Shows how to skip a number of results for pagination purposes using the experimental skip method.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/CHANGELOG.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nQ.experimentalSkip(count)\n```\n\n----------------------------------------\n\nTITLE: Simple JSON Pass-through Sanitizer\nDESCRIPTION: Identity function implementation for cases where JSON sanitization is not needed.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Advanced/AdvancedFields.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst sanitizeReactions = json => json\n```\n\n----------------------------------------\n\nTITLE: Observing Relations in WatermelonDB Components\nDESCRIPTION: This snippet demonstrates how to observe relations in WatermelonDB components using withObservables.\nSOURCE: https://github.com/nozbe/watermelondb/blob/master/docs-website/docs/docs/Relation.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwithObservables(['comment'], ({ comment }) => ({\n  comment,\n  author: comment.author, // shortcut syntax for `author: comment.author.observe()`\n}))\n```"
  }
]