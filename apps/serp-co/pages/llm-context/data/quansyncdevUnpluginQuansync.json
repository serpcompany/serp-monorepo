[
  {
    "owner": "quansync-dev",
    "repo": "unplugin-quansync",
    "content": "TITLE: Using quansync macro to create sync/async functions\nDESCRIPTION: This snippet demonstrates how to use the `quansync` macro to create both synchronous and asynchronous versions of functions. It shows how to define a function with both `sync` and `async` implementations, and how to create a quansync function using an async function that internally awaits another quansync'd function.\nSOURCE: https://github.com/quansync-dev/unplugin-quansync/blob/main/README.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport fs from 'node:fs'\nimport { quansync } from 'quansync/macro'\n\n// Create a quansync function by providing `sync` and `async` implementations\nconst readFile = quansync({\n  sync: (path: string) => fs.readFileSync(path),\n  async: (path: string) => fs.promises.readFile(path),\n})\n\n// Create a quansync function by providing an **async** function\nconst myFunction = quansync(async (filename) => {\n  // Use `await` to call another quansync function\n  const code = await readFile(filename, 'utf8')\n\n  return `// some custom prefix\\n${code}`\n})\n\n// Use it as a sync function\nconst result = myFunction.sync('./some-file.js')\n\n// Use it as an async function\nconst asyncResult = await myFunction.async('./some-file.js')\n```\n\n----------------------------------------\n\nTITLE: Transformed async function using unplugin-quansync\nDESCRIPTION: This snippet illustrates how `unplugin-quansync` transforms an async function into a generator function wrapped by `quansync` from `quansync/macro`. It shows the transformation of `await` into `yield` for asynchronous operations, allowing synchronous execution as well.\nSOURCE: https://github.com/quansync-dev/unplugin-quansync/blob/main/README.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport fs from 'node:fs'\nimport { quansync } from 'quansync/macro'\n\n// No transformations needed for objects\nconst readFile = quansync({\n  sync: (path: string) => fs.readFileSync(path),\n  async: (path: string) => fs.promises.readFile(path),\n})\n\n// `async function` is transformed into a generator function\nconst myFunction = quansync(function* (filename) {\n  // `await` is transformed into `yield ...`\n  const code = yield readFile(filename, 'utf8')\n\n  return `// some custom prefix\\n${code}`\n})\n```\n\n----------------------------------------\n\nTITLE: Transforming Arrow functions with quansync macro\nDESCRIPTION: This snippet demonstrates how arrow functions are transformed when used with the `quansync` macro. It shows that arrow functions are converted into regular functions that return generator functions, retaining the `this` binding but omitting the `arguments` object.\nSOURCE: https://github.com/quansync-dev/unplugin-quansync/blob/main/README.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst fn = quansync(() => this)\n\n// Transforms to:\n\nconst fn = quansync((v) => {\n  return function* () {\n    return this\n  }.call(this)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring unplugin-quansync with Vite\nDESCRIPTION: This snippet shows how to configure unplugin-quansync with Vite by importing it and adding it to the plugins array in the Vite configuration file. It demonstrates the basic setup needed to integrate the plugin into a Vite project.\nSOURCE: https://github.com/quansync-dev/unplugin-quansync/blob/main/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// vite.config.ts\nimport Quansync from 'unplugin-quansync/vite'\n\nexport default defineConfig({\n  plugins: [Quansync()],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring unplugin-quansync with Webpack\nDESCRIPTION: This snippet shows how to configure unplugin-quansync with Webpack by importing it and adding it to the plugins array in the Webpack configuration file. It is assumed that the rest of the configuration is set up correctly in the file.\nSOURCE: https://github.com/quansync-dev/unplugin-quansync/blob/main/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// webpack.config.js\nimport Quansync from 'unplugin-quansync/webpack'\n\nexport default {\n  /* ... */\n  plugins: [Quansync()],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring unplugin-quansync with esbuild\nDESCRIPTION: This snippet shows how to configure unplugin-quansync with esbuild. It imports both `build` from esbuild and `Quansync` from unplugin-quansync/esbuild, then passes the plugin to the `plugins` array within the esbuild configuration. This integrates the plugin into the esbuild build process.\nSOURCE: https://github.com/quansync-dev/unplugin-quansync/blob/main/README.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { build } from 'esbuild'\nimport Quansync from 'unplugin-quansync/esbuild'\n\nbuild({\n  plugins: [Quansync()],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring unplugin-quansync with Rollup\nDESCRIPTION: This snippet shows how to configure unplugin-quansync with Rollup by importing it and adding it to the plugins array in the Rollup configuration file. It illustrates the basic setup for integrating the plugin into a Rollup project.\nSOURCE: https://github.com/quansync-dev/unplugin-quansync/blob/main/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// rollup.config.js\nimport Quansync from 'unplugin-quansync/rollup'\n\nexport default {\n  plugins: [Quansync()],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring unplugin-quansync with Rolldown\nDESCRIPTION: This snippet shows how to configure unplugin-quansync with Rolldown by importing it and adding it to the plugins array in the Rolldown configuration file. It illustrates the basic setup for integrating the plugin into a Rolldown project.\nSOURCE: https://github.com/quansync-dev/unplugin-quansync/blob/main/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// rolldown.config.js\nimport Quansync from 'unplugin-quansync/rolldown'\n\nexport default {\n  plugins: [Quansync()],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring unplugin-quansync with Rspack\nDESCRIPTION: This snippet shows how to configure unplugin-quansync with Rspack by importing it and adding it to the plugins array in the Rspack configuration file.  The `/* ... */` indicates that other necessary configurations are expected to be present.\nSOURCE: https://github.com/quansync-dev/unplugin-quansync/blob/main/README.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// rspack.config.js\nimport Quansync from 'unplugin-quansync/rspack'\n\nexport default {\n  /* ... */\n  plugins: [Quansync()],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing unplugin-quansync using npm\nDESCRIPTION: This command installs unplugin-quansync as a development dependency using npm. This is the standard installation method for projects using npm.\nSOURCE: https://github.com/quansync-dev/unplugin-quansync/blob/main/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm i -D unplugin-quansync\n```"
  }
]