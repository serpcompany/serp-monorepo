[
  {
    "owner": "base",
    "repo": "base-mcp",
    "content": "TITLE: Environment Configuration for Base MCP Server\nDESCRIPTION: Sample environment variable configuration showing required API keys, wallet credentials, and service IDs needed for the Base MCP server to function.\nSOURCE: https://github.com/base/base-mcp/blob/master/README.md#2025-04-10_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Coinbase API credentials\n# You can obtain these from the Coinbase Developer Portal: https://cdp.coinbase.com/\nCOINBASE_API_KEY_NAME=your_api_key_name\nCOINBASE_API_PRIVATE_KEY=your_private_key\n\n# Wallet seed phrase (12 or 24 words)\n# This is the mnemonic phrase for your wallet\nSEED_PHRASE=your seed phrase here\n\n# Coinbase Project ID (for onramp functionality)\n# You can obtain this from the Coinbase Developer Portal\nCOINBASE_PROJECT_ID=your_project_id\n\n# Alchemy API Key (required for NFT functionality)\n# You can obtain this from https://alchemy.com\nALCHEMY_API_KEY=your_alchemy_api_key\n\n# OpenRouter API Key (optional for buying OpenRouter credits)\n# You can obtain this from https://openrouter.ai/keys\nOPENROUTER_API_KEY=your_openrouter_api_key\n\n# Chain ID (optional for Base Sepolia testnet)\n# Use 84532 for Base Sepolia testnet\n# You do not have to include this if you want to use Base Mainnet\nCHAIN_ID=your_chain_id\n```\n\n----------------------------------------\n\nTITLE: Installing Base MCP Server from npm\nDESCRIPTION: Commands for installing the Base MCP server either globally or locally in a project using npm.\nSOURCE: https://github.com/base/base-mcp/blob/master/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install globally\nnpm install -g base-mcp\n\n# Or install locally in your project\nnpm install base-mcp\n```\n\n----------------------------------------\n\nTITLE: Installing Base MCP Server from Source\nDESCRIPTION: Step-by-step commands to clone the repository, install dependencies, build the project, and optionally link it globally for development.\nSOURCE: https://github.com/base/base-mcp/blob/master/README.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/base/base-mcp.git\ncd base-mcp\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm link\n```\n\n----------------------------------------\n\nTITLE: Using deploy-contract Tool for ERC20 Token Deployment\nDESCRIPTION: Example of Claude deploying an ERC20 token contract using the deploy-contract tool. This process requires contract parameters including token name, symbol, and initial supply along with the Solidity source code.\nSOURCE: https://github.com/base/base-mcp/blob/master/examples.md#2025-04-10_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n_Claude uses the `deploy-contract` tool with the following parameters:_\n\n- constructorArgs: [\"ExampleToken\", \"EXT\", \"1000000000000000000000000\"]\n- contractName: \"ERC20Token\"\n- solidityInputJson: _[JSON containing the ERC20 contract source code]_\n- solidityVersion: \"0.8.20\"\n```\n\n----------------------------------------\n\nTITLE: Using get-address Tool\nDESCRIPTION: Example of Claude retrieving a wallet address on Base blockchain using the get-address tool. This tool returns the current wallet address associated with the Claude session.\nSOURCE: https://github.com/base/base-mcp/blob/master/examples.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n_Claude uses the `get-address` tool_\n```\n\n----------------------------------------\n\nTITLE: Using transfer-funds Tool\nDESCRIPTION: Example of Claude transferring ETH to another address using the transfer-funds tool. This operation requires parameters including destination address, asset type, and amount to transfer.\nSOURCE: https://github.com/base/base-mcp/blob/master/examples.md#2025-04-10_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n_Claude uses the `transfer-funds` tool with the following parameters:_\n\n- destination: 0x9876543210abcdef9876543210abcdef98765432\n- assetId: ETH\n- amount: 0.01\n```\n\n----------------------------------------\n\nTITLE: Using erc20_transfer Tool\nDESCRIPTION: Example of Claude transferring ERC20 tokens using the erc20_transfer tool. This tool initiates a transfer of a specified amount of tokens (USDC in this example) to a destination address.\nSOURCE: https://github.com/base/base-mcp/blob/master/examples.md#2025-04-10_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n_Claude uses the `erc20_transfer` tool with the following parameters:_\n\n- contractAddress: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\" (USDC contract address)\n- toAddress: \"0x9876543210abcdef9876543210abcdef98765432\"\n- amount: \"10\"\n```\n\n----------------------------------------\n\nTITLE: Using list-balances Tool\nDESCRIPTION: Example of Claude checking wallet balances on Base blockchain using the list-balances tool. This tool returns the balance of various assets in the connected wallet.\nSOURCE: https://github.com/base/base-mcp/blob/master/examples.md#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n_Claude uses the `list-balances` tool_\n```\n\n----------------------------------------\n\nTITLE: Using erc20_balance Tool\nDESCRIPTION: Example of Claude checking an ERC20 token balance using the erc20_balance tool. This tool retrieves the balance of a specific ERC20 token (USDC in this example) for the connected wallet.\nSOURCE: https://github.com/base/base-mcp/blob/master/examples.md#2025-04-10_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n_Claude uses the `erc20_balance` tool with the following parameters:_\n\n- contractAddress: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\" (USDC contract address)\n```\n\n----------------------------------------\n\nTITLE: Using call_contract Tool\nDESCRIPTION: Example of Claude calling a contract function (balanceOf) on the Base blockchain using the call_contract tool. This requires contract address, function name, arguments, and contract ABI.\nSOURCE: https://github.com/base/base-mcp/blob/master/examples.md#2025-04-10_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n_Claude uses the `call_contract` tool with the following parameters:_\n\n- contractAddress: \"0x1234567890abcdef1234567890abcdef12345678\"\n- functionName: \"balanceOf\"\n- functionArgs: [\"0x9876543210abcdef9876543210abcdef98765432\"]\n- abi: _[JSON containing the contract ABI]_\n```\n\n----------------------------------------\n\nTITLE: Initializing Base MCP Configuration\nDESCRIPTION: Command to initialize the Base MCP configuration for client applications after installation.\nSOURCE: https://github.com/base/base-mcp/blob/master/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbase-mcp --init\n```\n\n----------------------------------------\n\nTITLE: Using onramp Tool\nDESCRIPTION: Example of Claude generating an onramp link to purchase ETH using the onramp tool. This tool creates a Coinbase onramp link with specified USD amount and desired asset.\nSOURCE: https://github.com/base/base-mcp/blob/master/examples.md#2025-04-10_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n_Claude uses the `onramp` tool with the following parameters:_\n\n- amountUsd: 100\n- assetId: \"eth\"\n```\n\n----------------------------------------\n\nTITLE: Using get_onramp_assets Tool\nDESCRIPTION: Example of Claude checking available assets for onramping in a specific location using the get_onramp_assets tool. This tool takes country and subdivision parameters to determine available assets for purchase.\nSOURCE: https://github.com/base/base-mcp/blob/master/examples.md#2025-04-10_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n_Claude uses the `get_onramp_assets` tool with the following parameters:_\n\n- country: \"US\"\n- subdivision: \"NY\"\n```\n\n----------------------------------------\n\nTITLE: Using get_morpho_vaults Tool\nDESCRIPTION: Example of Claude retrieving Morpho vaults information for a specific asset using the get_morpho_vaults tool. This tool returns details about available vaults including addresses, liquidity, and risk scores.\nSOURCE: https://github.com/base/base-mcp/blob/master/examples.md#2025-04-10_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n_Claude uses the `get_morpho_vaults` tool with the following parameters:_\n\n- assetSymbol: \"USDC\"\n```\n\n----------------------------------------\n\nTITLE: Using list_nfts Tool\nDESCRIPTION: Example of Claude listing NFTs owned by a specific address using the list_nfts tool. This tool retrieves information about NFTs including contract address and token IDs associated with the provided wallet address.\nSOURCE: https://github.com/base/base-mcp/blob/master/examples.md#2025-04-10_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n_Claude uses the `list_nfts` tool with the following parameters:_\n\n- ownerAddress: 0x89A93a48C6Ef8085B9d07e46AaA96DFDeC717040\n```\n\n----------------------------------------\n\nTITLE: Using transfer_nft Tool\nDESCRIPTION: Example of Claude transferring an NFT using the transfer_nft tool. This operation requires the NFT contract address, token ID, destination address, and the quantity to transfer.\nSOURCE: https://github.com/base/base-mcp/blob/master/examples.md#2025-04-10_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n_Claude uses the `transfer_nft` tool with the following parameters:_\n\n- contractAddress: 0x3F06FcF75f45F1bb61D56D68fA7b3F32763AA15c\n- tokenId: 56090175025510453004781233574040052668718235229192064098345825090519343038548\n- toAddress: 0x1234567890abcdef1234567890abcdef12345678\n- amount: 1\n```\n\n----------------------------------------\n\nTITLE: Using get-testnet-eth Tool\nDESCRIPTION: Example of Claude requesting testnet ETH on Base Sepolia using the get-testnet-eth tool. This tool interacts with a faucet to obtain test ETH for development purposes.\nSOURCE: https://github.com/base/base-mcp/blob/master/examples.md#2025-04-10_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n_Claude uses the `get-testnet-eth` tool_\n```\n\n----------------------------------------\n\nTITLE: Using buy_openrouter_credits Tool\nDESCRIPTION: Example of Claude purchasing OpenRouter credits using the buy_openrouter_credits tool. This tool facilitates buying credits for OpenRouter services using USDC from the connected wallet.\nSOURCE: https://github.com/base/base-mcp/blob/master/examples.md#2025-04-10_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n_Claude uses the `buy_openrouter_credits` tool with the following parameters:_\n\n- amountUsd: 20\n```\n\n----------------------------------------\n\nTITLE: Claude Desktop Integration Configuration\nDESCRIPTION: JSON configuration for integrating the Base MCP server with Claude Desktop, including environment variable setup and server configuration.\nSOURCE: https://github.com/base/base-mcp/blob/master/README.md#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"base-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"base-mcp@latest\"],\n      \"env\": {\n        \"COINBASE_API_KEY_NAME\": \"your_api_key_name\",\n        \"COINBASE_API_PRIVATE_KEY\": \"your_private_key\",\n        \"SEED_PHRASE\": \"your seed phrase here\",\n        \"COINBASE_PROJECT_ID\": \"your_project_id\",\n        \"ALCHEMY_API_KEY\": \"your_alchemy_api_key\",\n        \"PINATA_JWT\": \"your_pinata_jwt\",\n        \"OPENROUTER_API_KEY\": \"your_openrouter_api_key\",\n        \"CHAIN_ID\": \"optional_for_base_sepolia_testnet\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Base MCP Server Functionality\nDESCRIPTION: Command to run tests that verify the MCP server is working correctly by testing connections and available tools.\nSOURCE: https://github.com/base/base-mcp/blob/master/README.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Adding New Tools in Base MCP\nDESCRIPTION: Shows the directory structure for the Base MCP project, highlighting where new tools should be added. The structure includes the main src/tools directory with index.ts for exporting toolsets, tool-specific directories, and utility folders.\nSOURCE: https://github.com/base/base-mcp/blob/master/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/\n├── tools/\n│   ├── index.ts (exports toolsets)\n│   ├── [TOOL_NAME]/ <-------------------------- ADD DIR HERE\n│   │   ├── index.ts (defines and exports tools)\n│   │   ├── schemas.ts (defines input schema)\n│   │   └── handlers.ts (implements tool functionality)\n│   └── utils/ (shared tool utilities)\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Base MCP Project\nDESCRIPTION: Command to run tests for the Base MCP project using npm. This ensures all functionality works as expected before submitting a pull request.\nSOURCE: https://github.com/base/base-mcp/blob/master/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure for Base MCP Server\nDESCRIPTION: Shows the directory structure of the Base MCP server project, highlighting where to add new tools when extending the functionality.\nSOURCE: https://github.com/base/base-mcp/blob/master/README.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/\n├── tools/\n│   ├── index.ts (exports toolsets)\n│   ├── [TOOL_NAME]/ <-------------------------- ADD DIR HERE\n│   │   ├── index.ts (defines and exports tools)\n│   │   ├── schemas.ts (defines input schema)\n│   │   └── handlers.ts (implements tool functionality)\n│   └── utils/ (shared tool utilities)\n```\n\n----------------------------------------\n\nTITLE: Markdown Document Structure for Base MCP Use Cases\nDESCRIPTION: A structured markdown document outlining various implementation scenarios and use cases for Base MCP, including developer tools, end-user applications, and business solutions. The document also details a grants program for innovative projects.\nSOURCE: https://github.com/base/base-mcp/blob/master/ideas/MCP-use-cases.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Real-World Use Cases for Base MCP\n\n![Base MCP](../public/SendUSDC.gif)\n\n## Introduction\n\nBase MCP lets AI applications like Claude and Cursor interact with the Base Network and Coinbase API. Here are practical ways to use Base MCP for real applications.\n\n**We provide grants to the most innovative use cases!** See the [Grants Program](#grants-program) section below.\n```"
  }
]