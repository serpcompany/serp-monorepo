[
  {
    "owner": "kernc",
    "repo": "backtesting.py",
    "content": "TITLE: Implementing and Running a Simple Moving Average Crossover Strategy in Python\nDESCRIPTION: This code snippet demonstrates how to implement a simple moving average crossover strategy using Backtesting.py. It defines a SmaCross class that buys when a shorter-term moving average crosses above a longer-term moving average, and sells when the opposite occurs. The strategy is then backtested on Google stock data.\nSOURCE: https://github.com/kernc/backtesting.py/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom backtesting import Backtest, Strategy\nfrom backtesting.lib import crossover\n\nfrom backtesting.test import SMA, GOOG\n\n\nclass SmaCross(Strategy):\n    def init(self):\n        price = self.data.Close\n        self.ma1 = self.I(SMA, price, 10)\n        self.ma2 = self.I(SMA, price, 20)\n\n    def next(self):\n        if crossover(self.ma1, self.ma2):\n            self.buy()\n        elif crossover(self.ma2, self.ma1):\n            self.sell()\n\n\nbt = Backtest(GOOG, SmaCross, commission=.002,\n              exclusive_orders=True)\nstats = bt.run()\nbt.plot()\n```\n\n----------------------------------------\n\nTITLE: Implementing SmaCross Strategy Class\nDESCRIPTION: Defines a trading strategy class that combines SignalStrategy and TrailingStrategy. The strategy implements a moving average crossover system with trailing stop-loss using 95% of available liquidity for each trade. It uses two SMAs (10 and 25 periods) and sets a trailing stop-loss at 2x ATR.\nSOURCE: https://github.com/kernc/backtesting.py/blob/master/doc/examples/Strategies Library.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom backtesting.lib import SignalStrategy, TrailingStrategy\n\n\nclass SmaCross(SignalStrategy,\n               TrailingStrategy):\n    n1 = 10\n    n2 = 25\n    \n    def init(self):\n        # In init() and in next() it is important to call the\n        # super method to properly initialize the parent classes\n        super().init()\n        \n        # Precompute the two moving averages\n        sma1 = self.I(SMA, self.data.Close, self.n1)\n        sma2 = self.I(SMA, self.data.Close, self.n2)\n        \n        # Where sma1 crosses sma2 upwards. Diff gives us [-1,0, *1*]\n        signal = (pd.Series(sma1) > sma2).astype(int).diff().fillna(0)\n        signal = signal.replace(-1, 0)  # Upwards/long only\n        \n        # Use 95% of available liquidity (at the time) on each order.\n        # (Leaving a value of 1. would instead buy a single share.)\n        entry_size = signal * .95\n                \n        # Set order entry sizes using the method provided by \n        # `SignalStrategy`. See the docs.\n        self.set_signal(entry_size=entry_size)\n        \n        # Set trailing stop-loss to 2x ATR using\n        # the method provided by `TrailingStrategy`\n        self.set_trailing_sl(2)\n```\n\n----------------------------------------\n\nTITLE: Implementing Four Moving Average Crossover Strategy in Python\nDESCRIPTION: Defines a trading strategy class that uses four moving averages - two for trend determination and two for entry/exit signals. The strategy trades long when shorter MA is above longer MA and vice versa.\nSOURCE: https://github.com/kernc/backtesting.py/blob/master/doc/examples/Parameter Heatmap & Optimization.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom backtesting import Strategy\nfrom backtesting.lib import crossover\n\n\nclass Sma4Cross(Strategy):\n    n1 = 50\n    n2 = 100\n    n_enter = 20\n    n_exit = 10\n    \n    def init(self):\n        self.sma1 = self.I(SMA, self.data.Close, self.n1)\n        self.sma2 = self.I(SMA, self.data.Close, self.n2)\n        self.sma_enter = self.I(SMA, self.data.Close, self.n_enter)\n        self.sma_exit = self.I(SMA, self.data.Close, self.n_exit)\n        \n    def next(self):\n        \n        if not self.position:\n            \n            # On upwards trend, if price closes above\n            # \"entry\" MA, go long\n            \n            # Here, even though the operands are arrays, this\n            # works by implicitly comparing the two last values\n            if self.sma1 > self.sma2:\n                if crossover(self.data.Close, self.sma_enter):\n                    self.buy()\n                    \n            # On downwards trend, if price closes below\n            # \"entry\" MA, go short\n            \n            else:\n                if crossover(self.sma_enter, self.data.Close):\n                    self.sell()\n        \n        # But if we already hold a position and the price\n        # closes back below (above) \"exit\" MA, close the position\n        \n        else:\n            if (self.position.is_long and\n                crossover(self.sma_exit, self.data.Close)\n                or\n                self.position.is_short and\n                crossover(self.data.Close, self.sma_exit)):\n                \n                self.position.close()\n```\n\n----------------------------------------\n\nTITLE: Grid Search Optimization Setup for Trading Strategy in Python\nDESCRIPTION: Configures and executes a randomized grid search optimization for the Sma4Cross strategy using Google stock data. Sets parameter ranges and constraints for optimization.\nSOURCE: https://github.com/kernc/backtesting.py/blob/master/doc/examples/Parameter Heatmap & Optimization.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n%%time \n\nfrom backtesting import Backtest\nfrom backtesting.test import GOOG\n\n\nbacktest = Backtest(GOOG, Sma4Cross, commission=.002)\n\nstats, heatmap = backtest.optimize(\n    n1=range(10, 110, 10),\n    n2=range(20, 210, 20),\n    n_enter=range(15, 35, 5),\n    n_exit=range(10, 25, 5),\n    constraint=lambda p: p.n_exit < p.n_enter < p.n1 < p.n2,\n    maximize='Equity Final [$]',\n    max_tries=200,\n    random_state=0,\n    return_heatmap=True)\n```\n\n----------------------------------------\n\nTITLE: SAMBO Optimization Setup for Trading Strategy in Python\nDESCRIPTION: Implements model-based optimization using SAMBO package for more efficient parameter tuning. Uses decision trees to guide the optimization process with fewer evaluations.\nSOURCE: https://github.com/kernc/backtesting.py/blob/master/doc/examples/Parameter Heatmap & Optimization.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstats, heatmap, optimize_result = backtest.optimize(\n    n1=[10, 100],      # Note: For method=\"sambo\", we\n    n2=[20, 200],      # only need interval end-points\n    n_enter=[10, 40],\n    n_exit=[10, 30],\n    constraint=lambda p: p.n_exit < p.n_enter < p.n1 < p.n2,\n    maximize='Equity Final [$]',\n    method='sambo',\n    max_tries=40,\n    random_state=0,\n    return_heatmap=True,\n    return_optimization=True)\n```\n\n----------------------------------------\n\nTITLE: Running Backtest on Google Data\nDESCRIPTION: Executes the SmaCross strategy backtest on historical Google price data with a 0.2% commission rate and plots the results.\nSOURCE: https://github.com/kernc/backtesting.py/blob/master/doc/examples/Strategies Library.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom backtesting import Backtest\nfrom backtesting.test import GOOG\n\nbt = Backtest(GOOG, SmaCross, commission=.002)\n\nbt.run()\nbt.plot()\n```\n\n----------------------------------------\n\nTITLE: Installing Backtesting.py using pip\nDESCRIPTION: This command installs the Backtesting.py library using pip, the Python package installer.\nSOURCE: https://github.com/kernc/backtesting.py/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install backtesting\n```\n\n----------------------------------------\n\nTITLE: Importing SMA Function for Moving Average Calculations in Python\nDESCRIPTION: Imports the Simple Moving Average (SMA) helper function from backtesting.test module for use in strategy calculations.\nSOURCE: https://github.com/kernc/backtesting.py/blob/master/doc/examples/Parameter Heatmap & Optimization.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom backtesting.test import SMA\n```\n\n----------------------------------------\n\nTITLE: Importing SMA from backtesting.test\nDESCRIPTION: Import the Simple Moving Average (SMA) helper function from the backtesting test module.\nSOURCE: https://github.com/kernc/backtesting.py/blob/master/doc/examples/Strategies Library.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom backtesting.test import SMA\n```\n\n----------------------------------------\n\nTITLE: Installing Development Version of backtesting.py\nDESCRIPTION: Commands to clone and install a development version of the project with all optional dependencies for documentation, testing, and development.\nSOURCE: https://github.com/kernc/backtesting.py/blob/master/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:YOUR_USERNAME/backtesting.py\ncd backtesting.py\npip install -e '.[doc,test,dev]'\n```\n\n----------------------------------------\n\nTITLE: Installing Test Dependencies for backtesting.py\nDESCRIPTION: Specifies the installation configuration for test dependencies needed to run example notebooks in the backtesting.py project using pip's extras functionality.\nSOURCE: https://github.com/kernc/backtesting.py/blob/master/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n.[test]\n```\n\n----------------------------------------\n\nTITLE: Running Tests for backtesting.py\nDESCRIPTION: Command to execute the project's test suite before submitting a pull request.\nSOURCE: https://github.com/kernc/backtesting.py/blob/master/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m backtesting.test\n```\n\n----------------------------------------\n\nTITLE: Running Code Style Checks for backtesting.py\nDESCRIPTION: Commands to run flake8 and mypy to ensure code follows project style guidelines and type checking requirements.\nSOURCE: https://github.com/kernc/backtesting.py/blob/master/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflake8 backtesting\nmypy backtesting\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies for Backtesting.py\nDESCRIPTION: Command to install documentation and test dependencies using pip with extra requirements specified in the setup file.\nSOURCE: https://github.com/kernc/backtesting.py/blob/master/doc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install .[doc,test]\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation for Backtesting.py\nDESCRIPTION: Command to execute the build script that generates HTML documentation for the project.\nSOURCE: https://github.com/kernc/backtesting.py/blob/master/doc/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Example Markdown Code Block Structure for Issue Reporting\nDESCRIPTION: Shows how to properly format code examples in GitHub issues using markdown triple-backtick fenced code blocks for better readability and clarity.\nSOURCE: https://github.com/kernc/backtesting.py/blob/master/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```python\ndef foo():\n    ...\n```\n```\n\n----------------------------------------\n\nTITLE: GNU AGPL License Header Template for Source Files\nDESCRIPTION: A template for the license header that should be included at the start of each source file in a project licensed under the GNU Affero General Public License. It includes placeholders for program name, year, and author name.\nSOURCE: https://github.com/kernc/backtesting.py/blob/master/LICENSE.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n```"
  }
]