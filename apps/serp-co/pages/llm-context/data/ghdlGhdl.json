[
  {
    "owner": "ghdl",
    "repo": "ghdl",
    "content": "TITLE: Defining Wishbone Interface Data Structures in VHDL\nDESCRIPTION: This snippet declares VHDL types necessary for modeling digital logic and the Wishbone bus interface, including std_ulogic for logic signaling, std_ulogic_vector for logic value arrays, and a record type for Wishbone master output signals. It introduces subtypes for natural numbers and standard logic vectors for convenient usage, as well as port and instance declarations commonly found in testbenches. These constructs require standard VHDL packages like std_logic_1164 and are fundamental for simulation and hardware description tasks.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue668/golden_wb_demux_tb.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\ntype std_ulogic is ('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-');\ntype integer is range <>;\nsubtype natural is integer range 0 to 2147483647;\ntype std_ulogic_vector is array (natural range <>) of std_ulogic;\nsubtype std_logic_vector is std_ulogic_vector;\ntype t_wishbone_master_out is record\n  dat: std_logic_vector;\nend record;\nsubtype t_wishbone_slave_in is t_wishbone_master_out;\ndesign\n package standard: \n package textio: \n package std_logic_1164: \n package numeric_std: \n package wishbone_pkg: \n instance wb_demux_tb: \n  signal wbs_i: t_wishbone_master_out(dat (31 downto 0)): #1-#32\n  process stimulus: \n  instance dut: \n   port-in wbs_i: t_wishbone_master_out(dat (31 downto 0)): #1-#32\n```\n\n----------------------------------------\n\nTITLE: Defining std_ulogic and Logic Vector Types in VHDL\nDESCRIPTION: Defines the basic single-bit digital logic type std_ulogic with multiple resolved values such as 'U', 'X', '0', '1', 'Z', etc., and creates subtypes for std_logic and vectors thereof. This facilitates the modeling of multi-state digital signals within VHDL simulations and synthesis. Requires VHDL language support and appropriate resolution functions when used.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue332/golden_sim.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\ntype std_ulogic is ('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-');  -- WKT:3\nsubtype std_logic is std_ulogic range 'U' to '-';\ntype std_ulogic_vector is array (natural range <>) of std_ulogic;\nsubtype std_logic_vector is std_ulogic_vector;\n```\n\n----------------------------------------\n\nTITLE: Defining AXI-Lite Channel Record Types\nDESCRIPTION: Defines the record structures for the five AXI-Lite interface channels: write address, write data, write response, read address, and read data. Each channel contains the necessary signals for protocol communication.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue418/golden_repro.txt#_snippet_1\n\nLANGUAGE: VHDL\nCODE:\n```\ntype t_axilite_write_address_channel is record\n  awaddr: std_logic_vector;\n  awvalid: std_logic;\n  awprot: std_ulogic_vector (2 downto 0);\n  awready: std_logic;\nend record;\ntype t_axilite_write_data_channel is record\n  wdata: std_logic_vector;\n  wstrb: std_logic_vector;\n  wvalid: std_logic;\n  wready: std_logic;\nend record;\ntype t_axilite_write_response_channel is record\n  bready: std_logic;\n  bresp: std_ulogic_vector (1 downto 0);\n  bvalid: std_logic;\nend record;\ntype t_axilite_read_address_channel is record\n  araddr: std_logic_vector;\n  arvalid: std_logic;\n  arprot: std_ulogic_vector (2 downto 0);\n  arready: std_logic;\nend record;\ntype t_axilite_read_data_channel is record\n  rready: std_logic;\n  rdata: std_logic_vector;\n  rresp: std_ulogic_vector (1 downto 0);\n  rvalid: std_logic;\nend record;\n```\n\n----------------------------------------\n\nTITLE: Analyzing VHDL Design File with GHDL Shell\nDESCRIPTION: This command uses the GHDL command-line tool with the `-a` flag to analyze the VHDL source file 'adder.vhdl'. Analysis checks the VHDL code for syntax and semantic correctness, creating intermediate files necessary for subsequent compilation and simulation steps.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/quick_start/simulation/adder/index.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nghdl -a adder.vhdl\n```\n\n----------------------------------------\n\nTITLE: Defining a Signal Bus Record Type in VHDL\nDESCRIPTION: Defines a record type named 'bust' consisting of two fields: 'a' and 'f', both of type std_logic_vector. This structure models a grouped bus of signals for more organized and coherent signal handling within designs, facilitating bus-level operations and signal grouping.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1131/golden_dut.txt#_snippet_2\n\nLANGUAGE: VHDL\nCODE:\n```\ntype bust is record\n  a: std_logic_vector;\n  f: std_logic_vector;\nend record;\n```\n\n----------------------------------------\n\nTITLE: Converting VHDL to EDIF using Yosys and GHDL Plugin\nDESCRIPTION: This command utilizes Yosys and the GHDL plugin to synthesize a VHDL design (`filename.vhdl`, top unit `top_unit [arch]`) and outputs the netlist in the EDIF format to `filename.edif` using the `write_edif` Yosys command.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/Synthesis.rst#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nyosys -m ghdl -p 'ghdl filename.vhdl -e top_unit [arch]; write_edif filename.edif'\n```\n\n----------------------------------------\n\nTITLE: Defining Unresolved Unsigned and Vector Types in VHDL\nDESCRIPTION: Defines an unresolved_unsigned type as a dynamically ranged array of std_ulogic elements indexed by natural numbers, and creates unsigned and unresolved vector subtypes. These types facilitate multi-bit unsigned signal representation where resolution functions must handle conflicting signal drivers.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue332/golden_sim.txt#_snippet_2\n\nLANGUAGE: VHDL\nCODE:\n```\ntype unresolved_unsigned is array (natural range <>) of std_ulogic;\nsubtype unsigned is unresolved_unsigned;\n```\n\n----------------------------------------\n\nTITLE: Analyzing VHDL Testbench File with GHDL Shell\nDESCRIPTION: This command analyzes the VHDL file 'adder_tb.vhdl', which contains the testbench entity and architecture used to stimulate and verify the full adder design. Successful analysis of both the design and testbench files is required before elaboration and simulation can occur.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/quick_start/simulation/adder/index.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nghdl -a adder_tb.vhdl\n```\n\n----------------------------------------\n\nTITLE: Defining String and Bit Vector Types in VHDL\nDESCRIPTION: Defines the standard VHDL 'string' type as an unconstrained array of characters indexed by 'positive' integers, and 'bit_vector' as an unconstrained array of 'bit' indexed by 'natural' integers. Also defines initial subtypes 'cbv' (5 bits) and 'gbv' (3 bits) based on 'bit_vector'.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1323/golden_dump.txt#_snippet_1\n\nLANGUAGE: vhdl\nCODE:\n```\ntype string is array (positive range <>) of character;\ntype bit_vector is array (natural range <>) of bit;\nsubtype cbv is bit_vector (4 downto 0);\nsubtype gbv is bit_vector (2 downto 0);\n```\n\n----------------------------------------\n\nTITLE: Analyzing VHDL Files with GHDL -a (Shell)\nDESCRIPTION: Analyzes one or more VHDL source files (`file...`) using specified options (`[options...]`). It creates an object file for each source file in the current work library and stops if an error occurs. Options must precede filenames.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/InvokingGHDL.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nghdl -a <[options...] file...>\n```\n\n----------------------------------------\n\nTITLE: Elaborating VHDL Testbench with GHDL Shell\nDESCRIPTION: The GHDL `-e` command is used to elaborate the specified top-level entity, 'adder_tb'. Elaboration links together the analyzed design units (the testbench and the adder) into a complete simulation model, resolving references and preparing the model for execution. GHDL automatically handles dependencies.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/quick_start/simulation/adder/index.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nghdl -e adder_tb\n```\n\n----------------------------------------\n\nTITLE: Declaring Multi-dimensional Signal Arrays and Signals in VHDL\nDESCRIPTION: Defines a two-dimensional array type t_slv_array composed of std_logic_vector elements, used to represent arrays of multi-bit signals. Demonstrates declaration of a signal named 'test' of this composite type with an index range 0 to 2. This allows modeling grouped signals or buses in hierarchical designs. Requires prior declaration of std_logic_vector and std_ulogic types.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1067/golden_top.txt#_snippet_1\n\nLANGUAGE: VHDL\nCODE:\n```\ntype t_slv_array is array (natural range <>) of std_logic_vector;\nsignal test: t_slv_array (0 to 2);\n```\n\n----------------------------------------\n\nTITLE: Running VHDL Testbench Simulation with GHDL Shell\nDESCRIPTION: This command executes the elaborated testbench 'adder_tb' using the GHDL simulator. The simulation runs according to the testbench's behavior, applying inputs to the design under test and typically producing output messages or assertion results indicating test progress or completion.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/quick_start/simulation/adder/index.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nghdl -r adder_tb\n```\n\n----------------------------------------\n\nTITLE: Elaborating and Running a Design with GHDL --elab-run (Shell)\nDESCRIPTION: Combines the elaboration (`-e`) and run (`-r`) steps into a single command for the specified design hierarchy (`[library.]top_unit [arch]`). It accepts both elaboration options (`[options...]`) before the unit name and simulation options (`[simulation_options...]`) after it.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/InvokingGHDL.rst#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nghdl --elab-run <[options...] [library.]top_unit [arch] [simulation_options...]>\n```\n\n----------------------------------------\n\nTITLE: Configure Common Options for GHDL Compile Scripts (Bash)\nDESCRIPTION: These are standard command-line arguments applicable to most GHDL compilation scripts written in Bash. They control basic behaviors like help display, cleanup, warning suppression, skipping existing files, skipping large files, and halting on errors.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/getting.rst#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n--help, -h            Print the embedded help page(s).\n--clean, -c           Cleanup directory before analyzing.\n--no-warnings, -n     Don't show warnings. Report errors only.\n--skip-existing, -s   Skip already compiled files (an *.o file exists).\n--skip-largefiles, -S Don't compile large entities like DSP and PCIe primitives.\n--halt-on-error, -H   Stop compiling if an error occurred.\n```\n\n----------------------------------------\n\nTITLE: Specifying Vendor Libraries for GHDL Synthesis\nDESCRIPTION: Illustrates how to use the `--vendor-library=NAME` option during GHDL synthesis. This treats any entity from the specified library (`vendorlib` in this case) as a black box, suppressing warnings for unbound component instantiations from that library. Replace `[library.]top_unit [arch]` with the actual top-level unit.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/Synthesis.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ghdl --synth --std=08 --vendor-library=vendorlib [library.]top_unit [arch]\n```\n\n----------------------------------------\n\nTITLE: Writing a Clocked PSL Assertion in VHDL - VHDL\nDESCRIPTION: Shows the syntax to write a clocked PSL assertion as a process outside another process, using a clock expression with the '@' notation. This example requires GHDL's PSL support and VHDL-2008 compatibility. The assertion is evaluated on 'rising_edge(clk)', and checks that 'always a' leads eventually to 'next[3](b)'. Only a single clock is permitted per directive. Placement must be outside of VHDL processes, and only supported PSL functions can be used.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/ImplementationOfVHDL.rst#_snippet_1\n\nLANGUAGE: VHDL\nCODE:\n```\nassert (always a -> next[3](b)) @rising_edge(clk);\n```\n\n----------------------------------------\n\nTITLE: Combined Analysis and Elaboration with GHDL -c (Shell)\nDESCRIPTION: Parses specified VHDL files (`file...`), places their units into a temporary 'work' library (without reading/writing the persistent library), and performs elaboration-driven analysis for the `top_unit [arch]`. Requires specifying a subsequent action: `-e` for elaboration (GCC/LLVM) or `-r` for run (mcode). This experimental command avoids needing a specific analysis order but might be slower.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/InvokingGHDL.rst#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nghdl -c <[options...] file... -<e|r> top_unit [arch]>\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for GHDL Commands (Shell)\nDESCRIPTION: Shows examples of how to invoke the GHDL help command using either the long (`--help`) or short (`-h`) form. Help can be requested for the program generally or for a specific command.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/CommandReference.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nghdl --help\n```\n\nLANGUAGE: Shell\nCODE:\n```\nghdl -h\n```\n\nLANGUAGE: Shell\nCODE:\n```\nghdl -h command\n```\n\n----------------------------------------\n\nTITLE: Compiling, Elaborating, and Running the VHDL Design with GHDL\nDESCRIPTION: Sequence of shell commands using GHDL to process the `hello.vhdl` file. First, the VHDL code is analyzed (`-a`). Second, the design is elaborated (`-e`), linking necessary components and creating an executable for some backends (like GCC/LLVM). Finally, the simulation is run (`-r`), producing the output.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/quick_start/simulation/hello/index.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Analyze the VHDL file\nghdl -a hello.vhdl\n\n# Elaborate the design top-level 'hello_world'\nghdl -e hello_world\n\n# Run the simulation\nghdl -r hello_world\n```\n\n----------------------------------------\n\nTITLE: Setting Generic Value Example - GHDL\nDESCRIPTION: This code snippet demonstrates how to set a generic value using the `-g` option when running a GHDL simulation. It shows setting the `DEPTH` generic of the `my_unit` entity to 12.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/Simulation.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ghdl -r --std=08 my_unit -gDEPTH=12\n```\n\n----------------------------------------\n\nTITLE: Configuring GHDL for LLVM Backend using Bash\nDESCRIPTION: This snippet demonstrates the commands to configure the GHDL build system with LLVM support, including setting the installation prefix and specifying the location of 'llvm-config'. It prepares the build directory and runs configuration scripts.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/building/LLVM.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd <ghdl>\n$ mkdir build\n$ cd build\n$ ../configure --with-llvm-config --prefix=PREFIX\n$ make\n$ make install\n```\n\n----------------------------------------\n\nTITLE: Defining Integer and Logic Types in VHDL\nDESCRIPTION: This VHDL code defines a custom integer type with no specified range, a standard logic type (std_ulogic), and a subtype of integer with a specific range. It also defines an array type (unresolved_sfixed) based on std_ulogic, along with subtypes for natural numbers and arrays of sfixed.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue339/golden_w.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\ntype integer is range <>;\ntype std_ulogic is ('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-');  -- WKT:3\nsubtype integer is integer range -2147483648 to 2147483647;\ntype unresolved_sfixed is array (integer range <>) of std_ulogic;\nsubtype sfixed is unresolved_sfixed;\nsubtype natural is integer range 0 to 2147483647;\ntype t_sf_array is array (natural range <>) of sfixed;\nsubtype std_logic is std_ulogic range 'U' to '-';\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Using Standard IEEE Numeric_std Package in VHDL\nDESCRIPTION: This VHDL snippet implements the same 4-bit counter using ieee.numeric_std and the unsigned type for standard compliance. By relying solely on standard IEEE packages, operator overloading ambiguities are avoided. The process and inputs are the same, but the signal 'v' is now of type unsigned and output is cast to std_logic_vector. The design becomes portable and avoids GHDL-specific interpretation problems. Recommended for all new designs.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/InvokingGHDL.rst#_snippet_18\n\nLANGUAGE: VHDL\nCODE:\n```\nlibrary ieee;\nuse ieee.numeric_std.all;\n\narchitecture good of counter\nis\n  signal v : unsigned (3 downto 0);\nbegin\n  process (ck, rst)\n  begin\n    if rst = '1' then\n      v <= x\"0\";\n    elsif rising_edge (ck) then\n      if v = \"1010\" then\n        v <= x\"0\";\n      else\n        v <= v + 1;\n      end if;\n    end if;\n  end process;\n\n  val <= std_logic_vector (v);\nend good;\n```\n\n----------------------------------------\n\nTITLE: Defining Standard VHDL Types and Subtypes\nDESCRIPTION: This snippet defines fundamental VHDL types and subtypes. It includes the standard `std_ulogic` type for nine-valued logic, the generic `integer` type, the `natural` subtype constrained to non-negative integers, the `std_ulogic_vector` for arrays of logic values, and a custom subtype `my_vector` as an alias.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue668/golden_repro2.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\ntype std_ulogic is ('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-');  -- WKT:3\ntype integer is range <>;\nsubtype natural is integer range 0 to 2147483647;\ntype std_ulogic_vector is array (natural range <>) of std_ulogic;\nsubtype my_vector is std_ulogic_vector;\n```\n\n----------------------------------------\n\nTITLE: Defining Numeric Subtypes integer and natural in VHDL\nDESCRIPTION: Defines a general integer type without fixed range and a natural subtype with specified range from 0 to 2147483647. These types are used to represent numeric values and array indices within the VHDL design. The natural subtype enforces non-negative values, aiding in type safety.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue332/golden_sim.txt#_snippet_1\n\nLANGUAGE: VHDL\nCODE:\n```\ntype integer is range <>;\nsubtype natural is integer range 0 to 2147483647;\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Record Type in an Entity's Port\nDESCRIPTION: This code demonstrates how to use the `mytype` record within the port of a VHDL entity. The entity `myentity` has a port `x` of the defined `mytype`. This example showcases how to include custom-defined types (records) within entity designs and use them for port declarations. It depends on the `mypkg` package and `ieee.std_logic_1164` and illustrates the basic structure of an entity with a record-based port. \nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/internals/RTI.rst#_snippet_1\n\nLANGUAGE: vhdl\nCODE:\n```\n   library ieee ;\n   use ieee.std_logic_1164.all;\n   use work.mypkg.all;\n\n   entity myentity is\n     port(\n       x: in mytype\n       );\n   end myentity;\n\n   architecture arch of myentity is\n   begin\n   end arch;\n```\n\n----------------------------------------\n\nTITLE: Building a Design with GHDL Make -m (Shell)\nDESCRIPTION: Automatically analyzes files that are outdated relative to their dependencies and then elaborates the design specified by `[library.]top_unit [arch]`. Requires the top unit and its dependencies to be known, typically via prior `-i` or `-a` commands.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/InvokingGHDL.rst#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nghdl -m <[options...] [library.]top_unit [arch]>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types: Integer, Natural, Bit, and Bit_Vector in VHDL\nDESCRIPTION: This VHDL snippet defines several custom types: 'integer' with a range, 'natural' as a subtype of integer with a range from 0 to 2147483647, 'bit' as an enumerated type with values '0' and '1', and 'bit_vector' as an array of bits indexed by natural numbers. These type definitions are fundamental building blocks for describing hardware behavior.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue332/golden_rec.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\ntype integer is range <>;\nsubtype natural is integer range 0 to 2147483647;\ntype bit is ('0', '1');  -- WKT:2\ntype bit_vector is array (natural range <>) of bit;\n```\n\n----------------------------------------\n\nTITLE: Overriding Top-Level Generics during GHDL Synthesis\nDESCRIPTION: Demonstrates using the `-gNAME=VALUE` option with the `ghdl --synth` command to override a top-level generic named `DEPTH` with the value `12` during synthesis. The `--std=08` flag specifies the VHDL standard to use. Replace `[library.]top_unit [arch]` with the actual top-level unit.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/Synthesis.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ghdl --synth --std=08 -gDEPTH=12 [library.]top_unit [arch]\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity with a Generic and Vector Port\nDESCRIPTION: This VHDL code defines an entity `myentity` with a generic parameter `WIDTH` and a port `x`. The port `x` is a `std_logic_vector` with a range determined by the `WIDTH` generic. This highlights how generics can control the size and behavior of ports. The use of the generic to determine the size of the vector demonstrates the flexibility and customization offered by VHDL.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/internals/RTI.rst#_snippet_4\n\nLANGUAGE: vhdl\nCODE:\n```\n   library ieee ;\n   use ieee.std_logic_1164.all;\n\n   entity myentity is\n     generic (\n       WIDTH: natural := 2\n       );\n     port(\n       x: in std_logic_vector(WIDTH-1 downto 0)\n       );\n   end myentity;\n\n   architecture arch of myentity is\n   begin\n   end arch;\n```\n\n----------------------------------------\n\nTITLE: Converting VHDL to Verilog using Yosys and GHDL Plugin\nDESCRIPTION: This command uses Yosys with the GHDL plugin (`-m ghdl`) to synthesize a VHDL file (`filename.vhdl`) with the specified top unit (`top_unit [arch]`) and then writes the resulting netlist to a Verilog file (`filename.v`). The `-p` flag passes the synthesis and write commands to Yosys.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/Synthesis.rst#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nyosys -m ghdl -p 'ghdl filename.vhdl -e top_unit [arch]; write_verilog filename.v'\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Data Types in VHDL\nDESCRIPTION: This snippet defines fundamental data types such as 'bit', 'integer', and subtypes, including an array type 'bit_vector' and record types 'address_channel' and 't_if'. These serve as building blocks for hardware modeling, specifying signal formats and structured data for inter-module communication.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue418/golden_repro2.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\ntype bit is ('0', '1');  -- WKT:2\n\n```\n\nLANGUAGE: VHDL\nCODE:\n```\ntype integer is range <>;\nsubtype natural is integer range 0 to 2147483647;\ntype bit_vector is array (natural range <>) of bit;\n\n```\n\nLANGUAGE: VHDL\nCODE:\n```\ntype address_channel is record\n  awaddr: bit_vector;\n  awvalid: bit;\nend record;\n\n```\n\nLANGUAGE: VHDL\nCODE:\n```\ntype t_if is record\n  write_channel: address_channel;\nend record;\n\n```\n\n----------------------------------------\n\nTITLE: Viewing VHDL Simulation Waveforms with GtkWave\nDESCRIPTION: Command to open and view a generated waveform file using GtkWave. This allows visual inspection of the simulation results after the simulation has completed.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/quick_start/simulation/heartbeat/index.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngtkwave wave.ghw\n```\n\n----------------------------------------\n\nTITLE: Treating PSL Asserts as Assumes in GHDL Synthesis\nDESCRIPTION: Demonstrates using the `--assert-assumes` option with `ghdl --synth`. This instructs GHDL to treat all PSL `assert` directives as PSL `assume` directives during the synthesis process. Consequently, automatic `cover` directives are not generated for these, regardless of the `--no-assert-cover` option. Replace `[library.]top_unit [arch]` with the actual top-level unit.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/Synthesis.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ghdl --synth --std=08 --assert-assumes [library.]top_unit [arch]\n```\n\n----------------------------------------\n\nTITLE: Defining wishbone slave input record in VHDL\nDESCRIPTION: Defines a record type for wishbone slave interface input signals, containing a single data field as a std_logic_vector. This structure is used for modeling input data in connectivity between hardware modules.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue561/golden_w.txt#_snippet_2\n\nLANGUAGE: VHDL\nCODE:\n```\ntype t_wishbone_slave_in is record\n  dat: std_logic_vector;\nend record;\n```\n\n----------------------------------------\n\nTITLE: Converting VHDL to SMT using Yosys and GHDL Plugin\nDESCRIPTION: Synthesizes a VHDL design (`filename.vhdl`, top unit `top_unit [arch]`) using Yosys with the GHDL plugin and generates an SMT-LIB v2 format output file (`filename.smt2`) suitable for formal verification tools, using the `write_smt2` Yosys command.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/Synthesis.rst#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nyosys -m ghdl -p 'ghdl filename.vhdl -e top_unit [arch]; write_smt2 filename.smt2'\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Enumeration and Integer Types in VHDL\nDESCRIPTION: Defines standard VHDL enumeration types 'bit', 'enum', 'boolean', 'character', and the unconstrained 'integer' type along with its common 32-bit constrained subtype. Also defines constrained integer subtypes 'positive' and 'natural'. These form the basis for many other VHDL data structures.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1323/golden_dump.txt#_snippet_0\n\nLANGUAGE: vhdl\nCODE:\n```\ntype bit is ('0', '1');  -- WKT:2\ntype enum is (first, second, third);\ntype boolean is (false, true);  -- WKT:1\ntype integer is range <>;\nsubtype integer is integer range -2147483648 to 2147483647;\ntype character is (nul, soh, stx, etx, eot, enq, ack, bel, bs, ht, lf, vt, ff, cr, so, si, dle, dc1, dc2, dc3, dc4, nak, syn, etb, can, em, sub, esc, fsp, gsp, rsp, usp, ' ', '!', '\"', '#', '$', '%', '&', '\\'', '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\\\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', del, c128, c129, c130, c131, c132, c133, c134, c135, c136, c137, c138, c139, c140, c141, c142, c143, c144, c145, c146, c147, c148, c149, c150, c151, c152, c153, c154, c155, c156, c157, c158, c159, '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�');\nsubtype positive is integer range 1 to 2147483647;\nsubtype natural is integer range 0 to 2147483647;\n```\n\n----------------------------------------\n\nTITLE: Running GHDL Vendor Library Precompile Script in Bash\nDESCRIPTION: This snippet shows how to execute a GHDL precompilation script for the OSVVM library using Bash. It assumes GHDL and its vendor scripts are installed under `/usr/local/lib/ghdl/vendors`. The `compile-osvvm.sh` script is invoked with the `--all` flag to compile all components and the `--source` option to specify the path to the OSVVM VHDL source directory. This command prepares vendor libraries by compiling necessary files ready for simulation.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/scripts/vendors/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ /usr/local/lib/ghdl/vendors/compile-osvvm.sh --all --source ../path/to/osvvm\n```\n\n----------------------------------------\n\nTITLE: Running GHDL Commands for VHDL Heartbeat Simulation\nDESCRIPTION: A sequence of GHDL commands to analyze, elaborate, and run a VHDL heartbeat circuit. These commands process the heartbeat.vhdl file to perform simulation of the 100 MHz clock generator.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/quick_start/simulation/heartbeat/index.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghdl -a heartbeat.vhdl\nghdl -e heartbeat\nghdl -r heartbeat\n```\n\n----------------------------------------\n\nTITLE: Example: Analyzing with Debug Info using GHDL -a -g (Shell)\nDESCRIPTION: Example demonstrating the analysis command (`-a`) with the debug option (`-g`) to include debugging information (like line numbers) in the output object file for `my_design.vhdl`.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/InvokingGHDL.rst#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nghdl -a -g my_design.vhdl\n```\n\n----------------------------------------\n\nTITLE: Installing pyGHDL from Git Repository\nDESCRIPTION: This command installs pyGHDL from the git repository using pip. It uses the output of `ghdl version hash` to specify the correct commit hash, ensuring compatibility with the installed GHDL version. Installing from `master` is discouraged due to potential AST changes.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/quick_start/python/index.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/ghdl/ghdl.git@$(ghdl version hash)\n```\n\n----------------------------------------\n\nTITLE: Performing GHDL Elaboration Bind Stage Syntax (Command Line Syntax)\nDESCRIPTION: Syntax for using the `--bind` command, which performs only the first stage of the GHDL elaboration process. It creates the list of object files without building the final executable.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/CommandReference.rst#_snippet_13\n\nLANGUAGE: Command Line Syntax\nCODE:\n```\nghdl --bind <[options] [library.]top_unit [arch]>\n```\n\n----------------------------------------\n\nTITLE: Type and Subtype Definitions for Primitive and Composite Data Types in VHDL\nDESCRIPTION: Defines primitive types such as boolean, bit, character, and complex types like real, time, and their respective vector and array types. Subtypes specify ranges for various numeric types, ensuring data validity and constraints required for hardware modeling. These types serve as the foundation for signal definitions and data handling in VHDL simulations.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue418/golden_tc749.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\ntype boolean is (false, true);  -- WKT:1\n type integer is range <>;\n subtype natural is integer range 0 to 2147483647;\n type boolean_vector is array (natural range <>) of boolean;\n type severity_level is (note, warning, error, failure);\n type severity_level_vector is array (natural range <>) of severity_level;\n subtype integer is integer range -2147483648 to 2147483647;\n type integer_vector is array (natural range <>) of integer;\n type real is range <>;\n subtype real is real range -1.79769e+308 to 1.79769e+308;\n type real_vector is array (natural range <>) of real;\n type time is range <> units\n   fs = 1 fs;\n   ps = 1000 fs;\n   ns = 1000000 fs;\n   us = 1000000000 fs;\n   ms = 1000000000000 fs;\n   sec = 1000000000000000 fs;\n   min = 60000000000000000 fs;\n   hr = 3600000000000000000 fs;\n end units;\n subtype time is time range -9223372036854775808 to 9223372036854775807;\n type time_vector is array (natural range <>) of time;\n subtype positive is integer range 1 to 2147483647;\n type positive_vector is array (natural range <>) of positive;\n\n```\n\n----------------------------------------\n\nTITLE: Process Instantiation in VHDL\nDESCRIPTION: This VHDL code instantiates two processes, `P0` and `P1`. These processes can contain sequential statements that describe the behavior of the design. Processes are the fundamental building blocks for modeling sequential logic in VHDL.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue615/golden_repr.txt#_snippet_4\n\nLANGUAGE: VHDL\nCODE:\n```\nprocess P0:\nprocess P1:\n```\n\n----------------------------------------\n\nTITLE: Retrieving VHDL Analysis Order with GHDL --elab-order (Shell)\nDESCRIPTION: Prints the list of source files required to elaborate a specified unit (`[library.]top_unit [arch]`), ordered correctly to satisfy analysis dependencies. Often used after importing files with `-i`. Use `--libraries` to include library names alongside filenames.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/InvokingGHDL.rst#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nghdl --elab-order <[options...] [library.]top_unit [arch]>\n```\n\n----------------------------------------\n\nTITLE: Running/Simulating a VHDL Design with GHDL -r (Shell)\nDESCRIPTION: Runs or simulates an elaborated VHDL design hierarchy specified by `[library.]top_unit [arch]`. It accepts elaboration options (`[options...]`) before the top unit name and simulation-specific options (`[simulation_options...]`) after it. With GCC/LLVM, it executes a pre-built executable; with mcode, it elaborates and then simulates.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/InvokingGHDL.rst#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nghdl -r <[options...] [library.]top_unit [arch] [simulation_options...]>\n```\n\n----------------------------------------\n\nTITLE: Repeated Generate Loops for Multiple Instance Variations\nDESCRIPTION: This structure uses generate-for loops with different indices to instantiate multiple versions of 'instance_two' and 'instance_three', each with unique signal value ranges and parameters. It systematically replicates hardware components for diverse configurations within the hardware description hierarchy.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1323/golden_dump.txt#_snippet_10\n\nLANGUAGE: VHDL\nCODE:\n```\ngenerate-for genloop1: (1) \n  instance instance_two: \n    signal sig_bit: bit: #261\n    signal sig_enum: enum: #262\n    //... (other signals and parameter ranges)\n\n```\n\nLANGUAGE: VHDL\nCODE:\n```\ngenerate-for genloop1: (2) \n  instance instance_two: \n    signal sig_bit: bit: #370\n    signal sig_enum: enum: #371\n    //... (additional generate iterations with different signal ranges)\n\n```\n\nLANGUAGE: VHDL\nCODE:\n```\ngenerate-for genloop1: (3) \n  instance instance_two: \n    signal sig_bit: bit: #509\n    signal sig_enum: enum: #510\n    //... (additional variants in the generate block)\n\n```\n\nLANGUAGE: VHDL\nCODE:\n```\ngenerate-for genloop1: (4) \n  instance instance_two: \n    signal sig_bit: bit: #684\n    signal sig_enum: enum: #685\n    //... (additional variations in nested generate loops)\n\n```\n\n----------------------------------------\n\nTITLE: Signal and Instance Declaration for Interrupt Controller Testbench in VHDL\nDESCRIPTION: Declares signals of various logic and vector types to model an interrupt controller interface, and instantiates a testbench (tb_irqc) along with an irqc component with defined ports for clock, reset, control signals, and data buses. Includes process placeholders for read/write register operations and auxiliary logic implementation. These declarations set up the framework for simulation of the interrupt controller's behavior.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue332/golden_sim.txt#_snippet_5\n\nLANGUAGE: VHDL\nCODE:\n```\nsignal arst_sig: std_logic;\nsignal clk_sig: std_logic;\nsignal cs_sig: std_logic;\nsignal addr_sig: unresolved_unsigned (2 downto 0);\nsignal wr_sig: std_logic;\nsignal rd_sig: std_logic;\nsignal din_sig: std_ulogic_vector (7 downto 0);\nsignal dout_sig: std_ulogic_vector (7 downto 0);\nsignal p2c_sig: t_p2c;\nsignal c2p_sig: t_c2p;\nsignal run_sig: std_logic;\nsignal sbi_if: t_sbi_if(addr (2 downto 0), wdata (7 downto 0), rdata (7 downto 0));\n\ninstance irqc: \n port-in arst: std_logic;\n port-in clk: std_logic;\n port-in cs: std_logic;\n port-in addr: unresolved_unsigned (2 downto 0);\n port-in wr: std_logic;\n port-in rd: std_logic;\n port-in din: std_ulogic_vector (7 downto 0);\n port-out dout: std_ulogic_vector (7 downto 0);\n port-out p2c: t_p2c;\n port-in c2p: t_c2p;\n\nsignal p2c_i: t_p2c;\nsignal dout_i: std_ulogic_vector (7 downto 0);\n\nprocess P0: \nprocess p_read_reg: \nprocess P1: \nprocess p_write_reg: \nprocess p_aux: \n```\n\n----------------------------------------\n\nTITLE: Instantiating a Record Type with Vector Elements in an Entity's Port\nDESCRIPTION: This code demonstrates usage of the `mytype` record (which contains `std_logic_vector` elements) in the entity's port declaration. The entity `myentity` now has a port `x` of the defined `mytype`. This provides an example of an entity that utilizes a more complex data structure with the use of vectors. It builds on the previous snippets by showing how records with vector types are utilized.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/internals/RTI.rst#_snippet_3\n\nLANGUAGE: vhdl\nCODE:\n```\n   library ieee ;\n   use ieee.std_logic_1164.all;\n   use work.mypkg.all;\n\n   entity myentity is\n     port(\n       x: in mytype\n       );\n   end myentity;\n\n   architecture arch of myentity is\n   begin\n   end arch;\n```\n\n----------------------------------------\n\nTITLE: Providing stimulus process and monitoring in VHDL testbench\nDESCRIPTION: References a process 'stimulus' that applies input signals during simulation and an instance of the device under test (DUT), enabling controlled testing of the wishbone interface.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue561/golden_w.txt#_snippet_5\n\nLANGUAGE: VHDL\nCODE:\n```\nprocess stimulus:\n```\n\nLANGUAGE: VHDL\nCODE:\n```\ninstance dut: \n```\n\n----------------------------------------\n\nTITLE: Performing GHDL Elaboration Link Stage Syntax (Command Line Syntax)\nDESCRIPTION: Syntax for using the `--link` command, which performs only the second stage of the GHDL elaboration process. It builds the executable by linking the object files previously created by the bind stage.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/CommandReference.rst#_snippet_16\n\nLANGUAGE: Command Line Syntax\nCODE:\n```\nghdl --link <[options] [library.]top_unit [arch]>\n```\n\n----------------------------------------\n\nTITLE: Signal and Data Structure Definitions for Hierarchical Modeling\nDESCRIPTION: Declares multiple signal types based on the predefined complex types and arrays, facilitating hierarchical data management in simulation. These signals represent the current state of various data structures, allowing for organized signal processing across different abstraction levels, including nested records and vectors.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue418/golden_tc749.txt#_snippet_4\n\nLANGUAGE: VHDL\nCODE:\n```\nsignal v1: boolean_vector (0 to 15);\n signal v2: severity_level_vector (0 to 15);\n signal v3: integer_vector (0 to 15);\n signal v4: real_vector (0 to 15);\n signal v5: time_vector (0 to 15);\n signal v6: natural_vector (0 to 15);\n signal v7: positive_vector (0 to 15);\n signal v8: boolean_cons_vector;\n signal v9: severity_level_cons_vector;\n signal v10: integer_cons_vector;\n signal v11: real_cons_vector;\n signal v12: time_cons_vector;\n signal v13: natural_cons_vector;\n signal v14: positive_cons_vector;\n```\n\n----------------------------------------\n\nTITLE: Wave Option File Example\nDESCRIPTION: This demonstrates the structure of a wave option file to filter signals to be dumped. It includes path formats for signals in packages and entities, wildcard usage for signal names, and recursive/non-recursive sub-entity targeting. Each line represent how to specify a signal, package or entity.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/Simulation.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ version = 1.1  # Optional\n\n# Path format for signals in packages :\nmy_pkg.global_signal_a\n\n# Path format for signals in entities :\n/top/sub/clk\n\n# Dump every signal named reset in first level sub entities of top\n/top/*/reset\n\n# Dump every signal named reset in recursive sub entities of top\n/top/**/reset\n\n# Dump every signal of sub2 which could be anywhere in the design except\n# on the top level\n/**/sub2/*\n\n# Dump every signal of sub3 which must be a first level sub entity of the\n# top level\n/*/sub3/*\n\n# Dump every signal of the first level sub entities of sub3 (but not\n# those of sub3)\n/**/sub3/*/*\n```\n\n----------------------------------------\n\nTITLE: Declaring subtypes and vector types in VHDL\nDESCRIPTION: Creates subtypes for natural numbers within a specific range and defines a vector type as an array of std_ulogic, used for signal representation in hardware modules.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue561/golden_w.txt#_snippet_1\n\nLANGUAGE: VHDL\nCODE:\n```\nsubtype natural is integer range 0 to 2147483647;\n```\n\nLANGUAGE: VHDL\nCODE:\n```\ntype std_ulogic_vector is array (natural range <>) of std_ulogic;\n```\n\nLANGUAGE: VHDL\nCODE:\n```\nsubtype std_logic_vector is std_ulogic_vector;\n```\n\n----------------------------------------\n\nTITLE: Defining a Record Type in VHDL\nDESCRIPTION: This VHDL code snippet defines a simple record type named `mytype` within a package. The record contains two fields, `a` and `b`, both of type `std_logic`. This example demonstrates a basic record structure within a package, providing a reusable data structure for use in other VHDL designs. It relies on the `ieee.std_logic_1164` package which provides the `std_logic` type.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/internals/RTI.rst#_snippet_0\n\nLANGUAGE: vhdl\nCODE:\n```\n   library ieee ;\n   use ieee.std_logic_1164.all;\n\n   package mypkg is\n\n     type mytype is record\n       a: std_logic;\n       b: std_logic;\n     end record;\n\n   end package;\n```\n\n----------------------------------------\n\nTITLE: VHDL Process Blocks and Signal Initialization in Testbench\nDESCRIPTION: This snippet includes process definitions 'P0' and 'P1' within a VHDL architecture, used for simulation control. The signals are initialized to '0', and the simulation timeline presents signal states at various times, illustrating signal behavior during operation.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue418/golden_repro2.txt#_snippet_3\n\nLANGUAGE: VHDL\nCODE:\n```\nprocess P0: \nprocess P1: \n```\n\n----------------------------------------\n\nTITLE: Select UVVM VHDL Libraries for Compilation (PowerShell)\nDESCRIPTION: Parameters used with the `compile-uvvm.ps1` script to specify which UVVM verification libraries should be compiled. This includes parameters for compiling all libraries or specifically the UVVM libraries.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/getting.rst#_snippet_11\n\nLANGUAGE: none\nCODE:\n```\n-All                  Compile all.\n-UVVM                Compile the UVVM libraries.\n```\n\n----------------------------------------\n\nTITLE: Disabling Assertion and PSL Synthesis in GHDL\nDESCRIPTION: Shows the usage of the `--no-formal` option with `ghdl --synth`. This option prevents the synthesis of both VHDL `assert` statements and Property Specification Language (PSL) directives within the design. Replace `[library.]top_unit [arch]` with the actual top-level unit.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/Synthesis.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ghdl --synth --std=08 --no-formal [library.]top_unit [arch]\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Logic Types in VHDL\nDESCRIPTION: Defines the std_ulogic type as a set of possible logic values including unknown, high-impedance, and defined logic levels. Creates subtypes for std_logic and integer ranges alongside natural number constraints. These foundational types are essential for modeling digital signals with multi-valued logic states in VHDL designs.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1131/golden_dut.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\ntype std_ulogic is ('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-');  -- WKT:3\nsubtype std_logic is std_ulogic range 'U' to '-';\ntype integer is range <>;\nsubtype natural is integer range 0 to 2147483647;\n```\n\n----------------------------------------\n\nTITLE: Embedding PSL Directives in VHDL-2008 Source - VHDL\nDESCRIPTION: Demonstrates using native PSL integration in VHDL-2008 and later by writing a PSL assertion directly in the VHDL source. Requires GHDL support for VHDL-2008 (enable with '--std=08'), and the snippet must be placed at an appropriate scope in the architecture. The default clock is declared, and the PSL assertion is formalized as an assertion block for synthesis or simulation. Only a supported subset of PSL can be used.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/ImplementationOfVHDL.rst#_snippet_4\n\nLANGUAGE: VHDL\nCODE:\n```\ndefault clock is rising_edge (CLK);\nassert always\n  a -> eventually! b;\n```\n\n----------------------------------------\n\nTITLE: Defining Logic and Bus Types in VHDL\nDESCRIPTION: This code snippet defines standard logic and integer types for use in VHDL designs, including single-bit logic, bit vectors, custom record types representing a bus, and arrays of those records. Dependencies include built-in VHDL types and packages such as std_logic_1164. Key parameters include logic value sets ('U', 'X', '0', etc.), unconstrained array ranges, and record fields representing grouped logic vectors. This setup is foundational for creating structured, multi-signal bus objects used in digital circuit simulations and designs.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1131/golden_repro2.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\ntype std_ulogic is ('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-');\ntype integer is range <>;\nsubtype natural is integer range 0 to 2147483647;\ntype std_ulogic_vector is array (natural range <>) of std_ulogic;\nsubtype std_logic_vector is std_ulogic_vector;\ntype bust is record\n  a: std_logic_vector;\n  f: std_logic_vector;\nend record;\ntype bust_arr is array (natural range <>) of bust;\nsubtype my_bust_arr is bust_arr (0 to 1);\ntype bit is ('0', '1');\n```\n\n----------------------------------------\n\nTITLE: Embedding PSL Assertions Using Default Clock in VHDL - VHDL\nDESCRIPTION: Demonstrates how to declare a default clock and embed a PSL assertion in a VHDL source block using GHDL. No additional dependencies are required beyond support for the PSL subset in GHDL. The 'default clock' declaration is used to specify the clock signal for PSL directives, and the 'assert always' statement expresses a property to be checked. The key parameter is the clock (e.g., CLK). This snippet must be placed outside any process block. Output is design verification at compile time. Only simple PSL subsets are supported and functions like prev() and stable() are only available in synthesis.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/ImplementationOfVHDL.rst#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\ndefault clock is rising_edge (CLK);\nassert always\n  a -> eventually! b;\n```\n\n----------------------------------------\n\nTITLE: Defining std_ulogic and std_logic_vector Types in VHDL\nDESCRIPTION: Defines the std_ulogic enumeration type representing logic states used in digital circuits according to the IEEE std_logic_1164 standard. Also declares integer ranges, natural subtypes, and vector types for multi-bit signal representation. These types serve as foundational building blocks for hardware description and simulation. Dependencies include standard VHDL libraries supporting these data types.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1067/golden_top.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\ntype std_ulogic is ('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-');  -- WKT:3\ntype integer is range <>;\nsubtype natural is integer range 0 to 2147483647;\ntype std_ulogic_vector is array (natural range <>) of std_ulogic;\nsubtype std_logic_vector is std_ulogic_vector;\n```\n\n----------------------------------------\n\nTITLE: Checking VHDL Syntax with GHDL -s (Shell)\nDESCRIPTION: Analyzes specified VHDL files (`file...`) with options (`[options...]`) solely for syntax checking purposes. It does not generate any code or update the design library file.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/InvokingGHDL.rst#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nghdl -s <[options...] file...>\n```\n\n----------------------------------------\n\nTITLE: Defining Logic and Character Types in VHDL\nDESCRIPTION: This snippet declares enumerated VHDL types for std_ulogic (representing unresolved logic states), std_logic as a subtype covering all states of std_ulogic, and a comprehensive character type covering control and printable characters as well as extended codes. These type declarations are foundational for hardware modeling and require a VHDL simulator or synthesis tool supporting at least the IEEE 1164 standard. Inputs are not expected at runtime; outputs are new type identifiers for use in subsequent VHDL design. There are no inherent limitations beyond what the simulator supports for enumeration members.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue371/golden_sim.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\ntype std_ulogic is ('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-');\nsubtype std_logic is std_ulogic range 'U' to '-';\ntype character is (nul, soh, stx, etx, eot, enq, ack, bel, bs, ht, lf, vt, ff, cr, so, si, dle, dc1, dc2, dc3, dc4, nak, syn, etb, can, em, sub, esc, fsp, gsp, rsp, usp, ' ', '!', '\"', '#', '$', '%', '&', '\\'', '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\\\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', del, c128, c129, c130, c131, c132, c133, c134, c135, c136, c137, c138, c139, c140, c141, c142, c143, c144, c145, c146, c147, c148, c149, c150, c151, c152, c153, c154, c155, c156, c157, c158, c159, '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�');\n```\n\n----------------------------------------\n\nTITLE: Analyzing VHDL-2008 Files with Native PSL Directives - bash\nDESCRIPTION: Provides commands for analyzing and elaborating VHDL-2008 files containing native PSL directives using GHDL. The '--std=08' option must be specified to support VHDL-2008 features including native PSL blocks. Input files are VHDL sources with native PSL. Outputs are compiled and elaborated designs with PSL verification. The commands must be run in order.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/ImplementationOfVHDL.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nghdl -a --std=08 vhdl_design.vhdl\nghdl -e --std=08 vhdl_design\n```\n\n----------------------------------------\n\nTITLE: VHDL: Sensitivity List Warning for Extra Signal 'rst'\nDESCRIPTION: This snippet reveals a VHDL sensitivity list warning, flagging an extra signal 'rst'. The warning suggests that the 'rst' signal is present in the sensitivity list of the process but is not required. The 'rst' signal is included in process with the label 'comb'.  The process can potentially be optimized by removing the signal 'rst' if the signal doesn't need to trigger the process execution.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1425/expected.txt#_snippet_2\n\nLANGUAGE: VHDL\nCODE:\n```\n  comb: process (rst)\n                 ^\n```\n\n----------------------------------------\n\nTITLE: Declaring a Package in VHDL\nDESCRIPTION: This code snippet shows a simplified example of declaring a package and a constant inside it in VHDL.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/InvokingGHDL.rst#_snippet_14\n\nLANGUAGE: VHDL\nCODE:\n```\npackage pkg1 is\n  type state is (state1, state2, state3);\nend pkg1;\n\nuse work.pkg1.all;\npackage pkg2 is\n  constant state1 : state := state1;\nend pkg2;\n```\n\n----------------------------------------\n\nTITLE: Stopping Simulation After Time Example - GHDL\nDESCRIPTION: This code shows how to use the `--stop-time` option to stop a GHDL simulation after a specified amount of simulation time. The time value should be provided without any spaces. Two examples are given: stopping after 10 nanoseconds and stopping after 1 picosecond.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/Simulation.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./my_design --stop-time=10ns\n$ ./my_design --stop-time=ps\n```\n\n----------------------------------------\n\nTITLE: Design Entity Port Declaration and Signal Instantiation in VHDL\nDESCRIPTION: Describes the design entity with input ports 'clk' and 'reset' both typed as std_logic, with associated port identifiers. Also declares a signal instance 'businst' of the 'bust' record type with specified vector ranges for its fields. This snippet illustrates typical port and signal declarations within an entity instance for simulation or synthesis.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1131/golden_dut.txt#_snippet_3\n\nLANGUAGE: VHDL\nCODE:\n```\ndesign\n package standard: \n package textio: \n package std_logic_1164: \n instance dut: \n  port-in clk: std_logic: #1\n  port-in reset: std_logic: #2\n  signal businst: bust(a (63 downto 0), f (3 downto 0)): #3-#70\n```\n\n----------------------------------------\n\nTITLE: Fixing Overloaded Operator Ambiguity Using Selected Name in VHDL\nDESCRIPTION: This snippet demonstrates how to resolve the overloaded '=' operator issue by explicitly using a selected name from the ieee.std_logic_unsigned package. By calling 'ieee.std_logic_unsigned.\"=\"', the ambiguity is resolved and GHDL can compile the design. Requires the same entity and signal declarations as before, and still depends on non-standard Synopsys packages. Inputs and outputs remain as previously defined for the counter. Usage of selected names clarifies operator intent but still relies on non-standard packages.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/InvokingGHDL.rst#_snippet_17\n\nLANGUAGE: VHDL\nCODE:\n```\nlibrary ieee;\nuse ieee.std_logic_unsigned.all;\n\narchitecture fixed_bad of counter\nis\n  signal v : std_logic_vector (3 downto 0);\nbegin\n  process (ck, rst)\n  begin\n    if rst = '1' then\n      v <= x\"0\";\n    elsif rising_edge (ck) then\n      if ieee.std_logic_unsigned.\"=\" (v, \"1010\") then\n        v <= x\"0\";\n      else\n        v <= v + 1;\n      end if;\n    end if;\n  end process;\n\n  val <= v;\nend fixed_bad;\n```\n\n----------------------------------------\n\nTITLE: Configure VHDL Standard for Altera Compilation (Bash)\nDESCRIPTION: Options used with the `compile-altera.sh` script to specify the VHDL standard (VHDL-93 or VHDL-2008) to be used during the compilation process for the selected libraries.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/getting.rst#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n--vhdl93              Compile selected libraries with VHDL-93 (default).\n--vhdl2008            Compile selected libraries with VHDL-2008.\n```\n\n----------------------------------------\n\nTITLE: Analyzing Vunit Files Alongside VHDL Source with GHDL - bash\nDESCRIPTION: Shows how to analyze a PSL vunit file together with the corresponding VHDL design file using GHDL analysis commands. Requires GHDL with VHDL-2008 synthesis support; both files should be provided in the same command-line invocation. Outputs are design artifacts prepared for synthesis with embedded PSL. Input: VHDL and PSL vunit files.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/ImplementationOfVHDL.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nghdl -a --std=08 vhdl_design.vhdl vunit.psl\n```\n\n----------------------------------------\n\nTITLE: Embedding PSL Annotations in VHDL Comments - VHDL\nDESCRIPTION: Illustrates the correct way to add PSL assertions as annotations in VHDL source code comments, recognized by GHDL when the '-fpsl' option is used. Each PSL statement must begin with '-- psl' followed by a key PSL keyword, with statements continued by consecutive comment lines. Requires GHDL analyzer to be invoked with '-fpsl'. Expected inputs are VHDL files with embedded PSL comments; output is assertion checking as part of the design analysis process.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/ImplementationOfVHDL.rst#_snippet_2\n\nLANGUAGE: VHDL\nCODE:\n```\n-- psl default clock is rising_edge (CLK);\n-- psl assert always\n--   a -> eventually! b;\n```\n\n----------------------------------------\n\nTITLE: Specifying Bind Output Path in GHDL (Shell)\nDESCRIPTION: An example demonstrating how to use the `-o` option with the `--bind` command to specify an alternative output directory for the object files generated during the bind stage.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/CommandReference.rst#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\nghdl --bind -o path/top_unit [library.]top_unit [arch]\n```\n\n----------------------------------------\n\nTITLE: Declaring std_ulogic_vector Signals in VHDL\nDESCRIPTION: This VHDL code declares two signals, `vec1` and `vec2`, of type `std_ulogic_vector`. `vec1` is a 32-bit vector indexed from 31 down to 0, and `vec2` is also a 32-bit vector but indexed from 31 to 0. These signals can be used to represent data buses or register values.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue615/golden_repr.txt#_snippet_3\n\nLANGUAGE: VHDL\nCODE:\n```\nsignal vec1: std_ulogic_vector (31 downto 0): #1-#32\nsignal vec2: std_ulogic_vector (31 to 0):\n```\n\n----------------------------------------\n\nTITLE: Direct Execution (GCC/LLVM Backend)\nDESCRIPTION: Alternative method for running the simulation when using a GCC or LLVM backend for GHDL. After the elaboration step (`ghdl -e hello_world`), an executable file (named `hello_world` in this case) is generated, which can be run directly from the shell.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/quick_start/simulation/hello/index.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./hello_world\n```\n\n----------------------------------------\n\nTITLE: Creating Complete AXI-Lite Interface Record and 32-bit Subtype\nDESCRIPTION: Combines all channel records into a complete AXI-Lite interface structure and defines a specialized 32-bit AXI-Lite interface subtype with fixed vector widths for specific implementations.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue418/golden_repro.txt#_snippet_2\n\nLANGUAGE: VHDL\nCODE:\n```\ntype t_axilite_if is record\n  write_address_channel: t_axilite_write_address_channel;\n  write_data_channel: t_axilite_write_data_channel;\n  write_response_channel: t_axilite_write_response_channel;\n  read_address_channel: t_axilite_read_address_channel;\n  read_data_channel: t_axilite_read_data_channel;\nend record;\nsubtype st_axilite_32 is t_axilite_if(write_address_channel(awaddr (31 downto 0)), write_data_channel(wdata (31 downto 0), wstrb (3 downto 0)), read_address_channel(araddr (31 downto 0)), read_data_channel(rdata (31 downto 0)));\n```\n\n----------------------------------------\n\nTITLE: Generating Waveform Files with GHDL\nDESCRIPTION: Command for simulating the heartbeat design and generating a GHW waveform file for later visualization. This enables inspection of the circuit behavior using waveform viewers.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/quick_start/simulation/heartbeat/index.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nghdl -r heartbeat --wave=wave.ghw\n```\n\n----------------------------------------\n\nTITLE: Displaying GHDL Version (Shell)\nDESCRIPTION: Examples demonstrating how to display the installed version of the GHDL program. Both the long (`--version`) and short (`-v`) flags achieve the same result.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/CommandReference.rst#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nghdl --version\n```\n\nLANGUAGE: Shell\nCODE:\n```\nghdl -v\n```\n\n----------------------------------------\n\nTITLE: Top-Level Entity Declaration and Architecture (top.vhd)\nDESCRIPTION: Defines the main top-level hardware module with an associated architecture describing its internal structure and interconnections. This file orchestrates the integration of submodules for system-level simulation.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/vests/vhdl-ams/ashenden/compliant/attributes-and-groups/index-ams.txt#_snippet_2\n\nLANGUAGE: VHDL\nCODE:\n```\nentity top is\n  -- Top-level entity declaration\nend entity;\n\narchitecture top_arch of top is\n  -- Architecture describing system interconnections\nend architecture;\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Monitoring Bus Signals in VHDL Simulation\nDESCRIPTION: This snippet shows how to declare signals of previously defined types and monitor their values during VHDL simulation. It includes signals for bus records and arrays, individual bits, and the example assignment and reporting of signal values at various simulation times. The simulation outputs convey the state of each signal index, typical for test benches in VHDL. Dependencies are the earlier type definitions and the underlying simulation framework, and the expected output is a time-stamped trace of signal states. Limitations include abstracted process definitions and assumed simulation harness.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1131/golden_repro2.txt#_snippet_1\n\nLANGUAGE: VHDL\nCODE:\n```\ninstance repro2: \n  signal businst: bust(a (7 downto 0), f (3 downto 0))\n  signal barr1: my_bust_arr\n  signal barr2: bust_arr (1 downto 0)\n  signal s: bit\n  process P0:\n  process P1:\n  process P2:\n\n-- Simulation output (for illustration):\nTime is 0 fs\n#1: 'U' (0)\n#2: 'U' (0)\n... (rest omitted for brevity)\n\n```\n\n----------------------------------------\n\nTITLE: Displaying GHDL Analysis Options Help (Shell)\nDESCRIPTION: Demonstrates the command to display a short description of all analysis options available in GHDL. This output is printed to standard output.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/CommandReference.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nghdl --help-options\n```\n\n----------------------------------------\n\nTITLE: Defining VHDL Types for FIFO Interface\nDESCRIPTION: Defines standard VHDL types (`std_ulogic`, `integer`, `natural`, `std_ulogic_vector`) and custom types for a FIFO interface. `fifo_o_t` is a record containing `rx_ack`, `tx_cti`, and `tx_dat` signals. `fifo_array_o_t` is an array of `fifo_o_t` records. These types are likely used within the `repro1` design instance which utilizes standard packages like `std_logic_1164`.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue852/golden_repro1.txt#_snippet_0\n\nLANGUAGE: vhdl\nCODE:\n```\ntype std_ulogic is ('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-');  -- WKT:3\ntype integer is range <>;\nsubtype natural is integer range 0 to 2147483647;\ntype std_ulogic_vector is array (natural range <>) of std_ulogic;\ntype fifo_o_t is record\n  rx_ack: std_ulogic;\n  tx_cti: std_ulogic_vector (1 downto 0);\n  tx_dat: std_ulogic_vector;\nend record;\ntype fifo_array_o_t is array (natural range <>) of fifo_o_t;\n```\n\n----------------------------------------\n\nTITLE: Recording Final Simulation Snapshot and Signal States\nDESCRIPTION: This snippet records the final set of signal states at the end of simulation, capturing the last timestamp and corresponding states. It ensures all signal transitions are logged accurately, which is critical for post-simulation analysis. It depends on data structures initialized earlier for time and state tracking. The key pattern is to mark the completion of signal event recording at specified simulation time.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue852/golden_recordofrecord_tb.txt#_snippet_13\n\nLANGUAGE: VHDL\nCODE:\n```\n#204: Time is 45000000 fs\n```\n\n----------------------------------------\n\nTITLE: Displaying GHDL Configuration Syntax (Command Line Syntax)\nDESCRIPTION: Syntax for using the `--disp-config` command to display the program paths and options currently used by GHDL. This command is useful for diagnosing installation issues.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/CommandReference.rst#_snippet_3\n\nLANGUAGE: Command Line Syntax\nCODE:\n```\nghdl --disp-config <[options]>\n```\n\n----------------------------------------\n\nTITLE: VHDL Simulation Trace Output\nDESCRIPTION: Simulation trace output showing signal states at different time points. Each line shows a signal number, its logical value ('0', '1', or 'Z'), and a state indicator in parentheses. Time markers indicate progress in femtoseconds (fs).\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue332/golden_sim.txt#_snippet_6\n\nLANGUAGE: VHDL\nCODE:\n```\nTime is 445000000 fs\n#1: '0' (2)\n#2: '1' (3)\n#3: '1' (3)\n#4: '0' (2)\n#5: '0' (2)\n#6: '1' (3)\n#7: '0' (2)\n#8: '1' (3)\n#9: '0' (2)\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Bus Interface Record Type in VHDL\nDESCRIPTION: Defines a t_sbi_if record type representing a simple peripheral standard bus interface with signals for chip select, address, read and write controls, data write and read vectors, and ready status. This record is intended to be used to encapsulate bus transactions between processor and interrupts controller peripherals.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue332/golden_sim.txt#_snippet_4\n\nLANGUAGE: VHDL\nCODE:\n```\ntype t_sbi_if is record\n  cs: std_logic;\n  addr: unsigned;\n  rd: std_logic;\n  wr: std_logic;\n  wdata: std_logic_vector;\n  ready: std_logic;\n  rdata: std_logic_vector;\nend record;\n```\n\n----------------------------------------\n\nTITLE: Documenting Python Classes with Autoclass and Inherited Members using Jinja2 Template\nDESCRIPTION: Generates a 'Classes' section that documents all classes within the module. For each class, it uses the `.. autoclass::` directive with options to include members, private members, special members, and inherited members, excluding `__weakref__`. It also adds an inheritance diagram beneath each class to visualize class hierarchy. Requires `node.classes` to be a collection of class names and metadata. This approach ensures comprehensive class documentation with clear indication of inheritance.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/_templates/autoapi/module.rst#_snippet_5\n\nLANGUAGE: jinja2\nCODE:\n```\n{%- if node.classes %}\n\n---------------------\n\n**Classes**\n\n{% for item in node.classes %}\n.. autoclass:: {{ item }}\n   :members:\n   :private-members:\n   :special-members:\n   :inherited-members:\n   :exclude-members: __weakref__\n\n   .. rubric:: Inheritance\n   .. inheritance-diagram:: {{ item }}\n      :parts: 1\n{%- endfor -%}\n{%- endif -%}\n\n```\n\n----------------------------------------\n\nTITLE: Displaying GHDL Warnings Help (Shell)\nDESCRIPTION: Shows the command used to display a short description of all warnings supported by GHDL. The output also indicates which warnings are enabled by default.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/CommandReference.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nghdl --help-warnings\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Running VHDL Testbench Shell Output\nDESCRIPTION: This snippet shows an example of the output generated by the GHDL simulation when the testbench 'adder_tb' completes. The message originates from an assertion statement within the VHDL testbench code, typically indicating the successful conclusion of the test sequence as designed.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/quick_start/simulation/adder/index.rst#_snippet_4\n\nLANGUAGE: Shell Output\nCODE:\n```\nadder_tb.vhdl:52:7:(assertion note): end of test\n```\n\n----------------------------------------\n\nTITLE: Displaying GHDL std.standard Package Syntax (Command Line Syntax)\nDESCRIPTION: Syntax for using the `--disp-standard` command to display the contents of the built-in `std.standard` package provided by GHDL.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/CommandReference.rst#_snippet_4\n\nLANGUAGE: Command Line Syntax\nCODE:\n```\nghdl --disp-standard <[options]>\n```\n\n----------------------------------------\n\nTITLE: Defining Processor to Controller and Controller to Processor Record Types in VHDL\nDESCRIPTION: Declares composite record types t_p2c (processor to controller) and t_c2p (controller to processor) containing vectors and std_logic signals to represent interrupt control registers and flags. These records encapsulate sets of signals used for communication of interrupt statuses and enables between processor and peripheral interrupt controller.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue332/golden_sim.txt#_snippet_3\n\nLANGUAGE: VHDL\nCODE:\n```\ntype t_p2c is record\n  rw_ier: std_ulogic_vector (5 downto 0);\n  awt_itr: std_ulogic_vector (5 downto 0);\n  awt_icr: std_ulogic_vector (5 downto 0);\n  awt_irq2cpu_ena: std_logic;\n  awt_irq2cpu_disable: std_logic;\nend record;\ntype t_c2p is record\n  aro_irr: std_ulogic_vector (5 downto 0);\n  aro_ipr: std_ulogic_vector (5 downto 0);\n  aro_irq2cpu_allowed: std_logic;\nend record;\n```\n\n----------------------------------------\n\nTITLE: Declaring Signals and Test Bench Instance in VHDL\nDESCRIPTION: This snippet illustrates the instantiation of a testbench (test_string), declaration of a std_logic signal (clk), and a string signal (test) with a defined range. These declarations form the backbone of a test environment, enabling clock-driven simulation and composite data handling. VHDL-2008 or compatible tools are required, and the correct operation presumes prior type definitions for std_logic and string.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue371/golden_sim.txt#_snippet_2\n\nLANGUAGE: VHDL\nCODE:\n```\ninstance test_string: \n signal clk: std_logic: #1\n signal test: string (1 to 11): #2-#12\n```\n\n----------------------------------------\n\nTITLE: Defining std_ulogic Type in VHDL\nDESCRIPTION: This VHDL code defines the `std_ulogic` type, which is a fundamental type in VHDL for representing logic signals. It includes possible logic values such as 'U', 'X', '0', '1', 'Z', 'W', 'L', 'H', and '-'. This type is commonly used in digital circuit design.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue615/golden_repr.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\ntype std_ulogic is ('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-');  -- WKT:3\n```\n\n----------------------------------------\n\nTITLE: GHDL Simulation Output with Assert Level Stop\nDESCRIPTION: This snippet shows the console output when running a GHDL simulation with the `--assert-level=note` option. It first displays the same 'note' severity assertion message as the standard run. Following the assertion, GHDL prints an \"error: assertion failed\" message and automatically terminates the simulation because an assertion equal to or above the specified severity level (`note`) was encountered.\n\nDependencies: A GHDL simulation of `dlx_test_behaviour` must be run with the `--assert-level=note` option.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/quick_start/simulation/DLXModelSuite.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndlx-behaviour.vhdl:395:11:(assertion note): TRAP instruction\n encountered, execution halted\nerror: assertion failed\n```\n\n----------------------------------------\n\nTITLE: Defining FIFO output record type 'fifo_o_t' in VHDL\nDESCRIPTION: This code defines the `fifo_o_t` record type, representing the output interface of a FIFO. It includes signals for acknowledgement (`rx_ack`), stall (`rx_stall`), cycle (`tx_cyc`), strobe (`tx_stb`), tag address (`tx_tga`), cycle type information (`tx_cti`), and data (`tx_dat`), all related to the FIFO output.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue852/golden_recordofrecord_tb.txt#_snippet_2\n\nLANGUAGE: VHDL\nCODE:\n```\ntype fifo_o_t is record\n  rx_ack: std_ulogic;\n  rx_stall: std_ulogic;\n  tx_cyc: std_ulogic;\n  tx_stb: std_ulogic;\n  tx_tga: std_ulogic_vector;\n  tx_cti: std_ulogic_vector (1 downto 0);\n  tx_dat: std_ulogic_vector;\nend record;\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Subtype Natural in VHDL\nDESCRIPTION: This VHDL code defines the `natural` subtype of the `integer` type, restricting the range to non-negative integers from 0 to 2147483647. This is a commonly used subtype for representing sizes, indices, and other non-negative quantities.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue615/golden_repr.txt#_snippet_1\n\nLANGUAGE: VHDL\nCODE:\n```\nsubtype natural is integer range 0 to 2147483647;\n```\n\n----------------------------------------\n\nTITLE: Expected Simulation Output\nDESCRIPTION: The text output generated and displayed on the console when the 'hello_world' VHDL design is simulated using the `ghdl -r hello_world` command.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/quick_start/simulation/hello/index.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nHello world!\n```\n\n----------------------------------------\n\nTITLE: Defining register type 'reg_t' in VHDL\nDESCRIPTION: This code defines the `reg_t` record type, representing a register that contains an array of FIFO input interfaces (`arr_fifo_i`). This structure encapsulates the input FIFO array within a register.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue852/golden_recordofrecord_tb.txt#_snippet_6\n\nLANGUAGE: VHDL\nCODE:\n```\ntype reg_t is record\n  arr_fifo_i: fifo_array_i_t (0 to 1);\nend record;\n```\n\n----------------------------------------\n\nTITLE: Formatting VHDL Files Syntax (Command Line Syntax)\nDESCRIPTION: Syntax for using the `fmt` command to format a VHDL input file. The formatted output is directed to standard output.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/CommandReference.rst#_snippet_6\n\nLANGUAGE: Command Line Syntax\nCODE:\n```\nghdl fmt <file>\n```\n\n----------------------------------------\n\nTITLE: Declaring Signals 'r' and 'a' in VHDL\nDESCRIPTION: This VHDL snippet declares two signals: 'r' of type 'my_rec' with initial values for 'b' and 'c', and 'a' of type 'bit_vector' with range 0 to 1. The snippet also includes a process named 'P0', with a block named 'blk', and port-in signal `a1` with type `bit_vector` and range 0 to 1.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue332/golden_rec.txt#_snippet_2\n\nLANGUAGE: VHDL\nCODE:\n```\ndesign\n package standard: \n instance repro_rec: \n  signal r: my_rec(b (1 to 3), c (2 to 3)): #1-#6\n  signal a: bit_vector (0 to 1): #7-#8\n  process P0: \n  block blk: \n   port-in a1: bit_vector (0 to 1): #7-#8\n```\n\n----------------------------------------\n\nTITLE: pyGHDL Package Structure in Markdown\nDESCRIPTION: Lists the main packages provided by pyGHDL including CLI tools, DOM for VHDL, low-level bindings to libghdl, and LSP implementation for VHDL.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/pyGHDL/README.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `pyGHDL.cli` - Command line interface tools.\n* `pyGHDL.dom` - Document Object Model (DOM) for VHDL parsed by `libghdl`.\n* `pyGHDL.libghdl` - Low-level Python bindings to GHDL's `libghdl` shared library.  \n\tAuto generated API from Ada sources.\n* `pyGHDL.lsp` - Language Server Protocol (LSP) implementation for VHDL.\n```\n\n----------------------------------------\n\nTITLE: Defining array type 'fifo_array_o_t' in VHDL\nDESCRIPTION: This code defines the `fifo_array_o_t` array type as an array of `fifo_o_t` records, which represent FIFO output interfaces.  This array structure allows for managing multiple FIFO output interfaces as a single entity.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue852/golden_recordofrecord_tb.txt#_snippet_4\n\nLANGUAGE: VHDL\nCODE:\n```\ntype fifo_array_o_t is array (natural range <>) of fifo_o_t;\n```\n\n----------------------------------------\n\nTITLE: Declaring Integer and String Types in VHDL\nDESCRIPTION: This snippet specifies the definition of an unconstrained integer type, a positive subtype limiting integers to the range 1 to 2,147,483,647, and a string type defined as an array of characters indexed by positive values. These definitions support standard arithmetic and text operations in VHDL and are required for implementing variables or signals carrying numeric or string data. Inputs and outputs depend on subsequent usage in design; definitions themselves have no runtime effect.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue371/golden_sim.txt#_snippet_1\n\nLANGUAGE: VHDL\nCODE:\n```\ntype integer is range <>;\nsubtype positive is integer range 1 to 2147483647;\ntype string is array (positive range <>) of character;\n```\n\n----------------------------------------\n\nTITLE: Package Instance and Signal Declaration for Experimental Hardware Simulation\nDESCRIPTION: Establishes an instance of the 'standard' package providing all data types and signal declarations needed for hardware simulation. Signals represent various data vectors and nested records, facilitating comprehensive testing and verification within the simulation environment. The structure supports detailed monitoring and control of hardware signals during simulation runs.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue418/golden_tc749.txt#_snippet_5\n\nLANGUAGE: VHDL\nCODE:\n```\npackage standard: \n instance tc749: \n  signal v1: boolean_vector (0 to 15): #1-#16\n  signal v2: severity_level_vector (0 to 15): #17-#32\n  signal v3: integer_vector (0 to 15): #33-#48\n  signal v4: real_vector (0 to 15): #49-#64\n  signal v5: time_vector (0 to 15): #65-#80\n  signal v6: natural_vector (0 to 15): #81-#96\n  signal v7: positive_vector (0 to 15): #97-#112\n  signal v8: boolean_cons_vector: #113-#128\n  signal v9: severity_level_cons_vector: #129-#144\n  signal v10: integer_cons_vector: #145-#160\n  signal v11: real_cons_vector: #161-#176\n  signal v12: time_cons_vector: #177-#192\n  signal v13: natural_cons_vector: #193-#208\n  signal v14: positive_cons_vector: #209-#224\n  signal v15: boolean_cons_vectorofvector: #225-#480\n  signal v16: severity_level_cons_vectorofvector: #481-#736\n  signal v17: integer_cons_vectorofvector: #737-#992\n  signal v18: real_cons_vectorofvector: #993-#1248\n  signal v19: time_cons_vectorofvector: #1249-#1504\n  signal v20: natural_cons_vectorofvector: #1505-#1760\n  signal v21: positive_cons_vectorofvector: #1761-#2016\n  signal v22: record_std_package: #2017-#2036\n  signal v23: record_cons_array: #2037-#2148\n  signal v24: record_cons_arrayofarray: #2149-#3940\n  signal v25: boolean_vector_st: #3941-#3956\n  signal v26: severity_level_vector_st: #3957-#3972\n  signal v27: integer_vector_st: #3973-#3988\n  signal v28: real_vector_st: #3989-#4004\n  signal v29: time_vector_st: #4005-#4020\n  signal v30: natural_vector_st: #4021-#4036\n  signal v31: positive_vector_st: #4037-#4052\n  signal v32: record_array_st: #4053-#4164\n  signal v33: record_array_st: #4165-#4276\n  signal v34: record_array_new: #4277-#4388\n  signal v35: record_of_records: #4389-#6536\n  signal v49: array_rec_cons (0 to 7): #6537-#7432\n```\n\n----------------------------------------\n\nTITLE: Declaring Signals in VHDL Testbench\nDESCRIPTION: This VHDL code snippet declares several signals within a testbench environment. These signals include an integer counter, an unresolved fixed-point signal, an array of fixed-point signals, and standard logic signals for reset and clock. The signals are initialized with specific values or default states.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue339/golden_w.txt#_snippet_1\n\nLANGUAGE: VHDL\nCODE:\n```\n instance test_bench:\n  signal counter: integer range 0 to 1000: #1\n  signal my_signal: unresolved_sfixed (0 downto -15): #2-#17\n  signal my_array: t_sf_array (0 to 15): #18-#273\n  signal s_rst: std_logic: #274\n  signal s_clk: std_logic: #275\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Record Subtype in VHDL Package\nDESCRIPTION: This snippet creates a subtype 'st_if_32' based on 't_if' with a specific 'write_channel' width of 32 bits. It demonstrates structured data modeling for concise signal representations, facilitating efficient hardware description in package scope.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue418/golden_repro2.txt#_snippet_1\n\nLANGUAGE: VHDL\nCODE:\n```\nsubtype st_if_32 is t_if(write_channel(awaddr(31 downto 0)));\n```\n\n----------------------------------------\n\nTITLE: Composite Array and Record Type Definitions for Hardware Structures\nDESCRIPTION: Defines complex array types such as vectors of various data types and nested records combining multiple signals. These structures facilitate organized and hierarchical data representations, enabling efficient signal grouping, parameter passing, and modeling of hardware components with multiple attributes.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue418/golden_tc749.txt#_snippet_1\n\nLANGUAGE: VHDL\nCODE:\n```\ntype boolean_cons_vector is array (integer range <>) of boolean;\n subtype boolean_cons_vector is boolean_cons_vector (15 downto 0);\n type severity_level_cons_vector is array (integer range <>) of severity_level;\n subtype severity_level_cons_vector is severity_level_cons_vector (15 downto 0);\n type integer_cons_vector is array (integer range <>) of integer;\n subtype integer_cons_vector is integer_cons_vector (15 downto 0);\n type real_cons_vector is array (integer range <>) of real;\n subtype real_cons_vector is real_cons_vector (15 downto 0);\n type time_cons_vector is array (integer range <>) of time;\n subtype time_cons_vector is time_cons_vector (15 downto 0);\n type natural_cons_vector is array (integer range <>) of natural;\n subtype natural_cons_vector is natural_cons_vector (15 downto 0);\n type positive_cons_vector is array (integer range <>) of positive;\n subtype positive_cons_vector is positive_cons_vector (15 downto 0);\n type boolean_cons_vectorofvector is array (integer range <>) of boolean_cons_vector;\n subtype boolean_cons_vectorofvector is boolean_cons_vectorofvector (0 to 15);\n type severity_level_cons_vectorofvector is array (integer range <>) of severity_level_cons_vector;\n subtype severity_level_cons_vectorofvector is severity_level_cons_vectorofvector (0 to 15);\n type integer_cons_vectorofvector is array (integer range <>) of integer_cons_vector;\n subtype integer_cons_vectorofvector is integer_cons_vectorofvector (0 to 15);\n type real_cons_vectorofvector is array (integer range <>) of real_cons_vector;\n subtype real_cons_vectorofvector is real_cons_vectorofvector (0 to 15);\n type time_cons_vectorofvector is array (integer range <>) of time_cons_vector;\n subtype time_cons_vectorofvector is time_cons_vectorofvector (0 to 15);\n type natural_cons_vectorofvector is array (integer range <>) of natural_cons_vector;\n subtype natural_cons_vectorofvector is natural_cons_vectorofvector (0 to 15);\n type positive_cons_vectorofvector is array (integer range <>) of positive_cons_vector;\n subtype positive_cons_vectorofvector is positive_cons_vectorofvector (0 to 15);\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Signals within a Design Instance in VHDL\nDESCRIPTION: Declares various signals within a nested design structure (`design package standard -> instance myentity -> instance instance_one`). The signals utilize the previously defined types and subtypes, including 'bit', 'enum', 'boolean', 'integer', 'string' (constrained), 'cbv', 'gbv', 'ca_cbv', 'ga_gbv', and 'ga_cbv'. The comments (#1, #2, etc.) likely refer to specific test cases or value assignments.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1323/golden_dump.txt#_snippet_7\n\nLANGUAGE: vhdl\nCODE:\n```\ndesign\n package standard: \n instance myentity: \n  instance instance_one: \n   signal sig_bit: bit: #1\n   signal sig_enum: enum: #2\n   signal sig_bool: boolean: #3\n   signal sig_int: integer: #4\n   signal sig_cs: string (1 to 12): #5-#16\n   signal sig_gs: string (1 to 4): #17-#20\n   signal sig_cbv: cbv: #21-#25\n   signal sig_gbv: gbv: #26-#28\n   signal sig_ca_cbv: ca_cbv: #29-#48\n   signal sig_ca_gbv: ga_gbv: #49-#63\n   signal sig_ga_cbv: ga_cbv: #64-#88\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building GHDL with mcode - Bash\nDESCRIPTION: This code snippet provides the steps to configure and build GHDL using the mcode backend, which is the easiest to build.  It first configures the build with a prefix using the configure script, then compiles the code using make. Finally, it shows how to install GHDL. This is the traditional way to configure and make a project.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/building/index.rst#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ ./configure --prefix=/usr/local\n$ make\n```\n\nLANGUAGE: Bash\nCODE:\n```\n$ make install\n```\n\n----------------------------------------\n\nTITLE: Defining Array and Record Types (Set 1) in VHDL\nDESCRIPTION: Defines unconstrained array types 'array_of_cbv', 'array_of_gbv', and 'array_of_rcd'. Defines constrained subtypes 'ca_cbv', 'ga_gbv', 'ga_cbv', 'ca_rcd', 'ga_rcd' based on these array types with specific integer ranges. Also defines a record type 'rcd' containing fields of type 'cbv' and 'gbv'. This set uses `gbv` defined as `bit_vector (2 downto 0)`.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1323/golden_dump.txt#_snippet_2\n\nLANGUAGE: vhdl\nCODE:\n```\ntype array_of_cbv is array (integer range <>) of cbv;\nsubtype ca_cbv is array_of_cbv (3 downto 0);\ntype array_of_gbv is array (integer range <>) of gbv;\nsubtype ga_gbv is array_of_gbv (4 downto 0);\nsubtype ga_cbv is array_of_cbv (4 downto 0);\ntype rcd is record\n  cbv: cbv;\n  gbv: gbv;\nend record;\ntype array_of_rcd is array (integer range <>) of rcd;\nsubtype ca_rcd is array_of_rcd (3 downto 0);\nsubtype ga_rcd is array_of_rcd (3 downto 0);\n```\n\n----------------------------------------\n\nTITLE: Declaring signals of defined types in VHDL\nDESCRIPTION: This code declares signals of the previously defined types.  `dmn_i_s` is a signal of type `dmn_t`. `stop_s` is of type `std_logic`. `arr_fifo_o` is a signal representing an array of FIFO outputs and `a` and `r` are signals of `reg_t` type, holding FIFO input arrays.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue852/golden_recordofrecord_tb.txt#_snippet_7\n\nLANGUAGE: VHDL\nCODE:\n```\nsignal dmn_i_s: dmn_t: #1-#2\n  signal stop_s: std_logic: #3\n  signal arr_fifo_o: fifo_array_o_t (0 to 1): #4-#69\n  signal a: reg_t: #70-#135\n  signal r: reg_t: #136-#201\n```\n\n----------------------------------------\n\nTITLE: Displaying VHDL Files with Line Numbers Syntax (Command Line Syntax)\nDESCRIPTION: Syntax for using the `--lines` command to display the content of specified VHDL files. Each line is prefixed with its corresponding line number on the standard output.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/CommandReference.rst#_snippet_10\n\nLANGUAGE: Command Line Syntax\nCODE:\n```\nghdl --lines <files...>\n```\n\n----------------------------------------\n\nTITLE: Defining record type 'dmn_t' in VHDL\nDESCRIPTION: This code defines the `dmn_t` record type, representing a domain clock. It includes two fields: `clk` and `rst`, both of type `std_ulogic`, representing the clock and reset signals respectively. These signals are used for synchronizing logic within a clock domain.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue852/golden_recordofrecord_tb.txt#_snippet_1\n\nLANGUAGE: VHDL\nCODE:\n```\ntype dmn_t is record\n  clk: std_ulogic;\n  rst: std_ulogic;\nend record;\n```\n\n----------------------------------------\n\nTITLE: Displaying GHDL Configuration (Shell)\nDESCRIPTION: Displays the GHDL installation configuration, including the prefix path used to locate standard libraries (std, ieee). This path is determined by the --PREFIX option, GHDL_PREFIX environment variable, or a built-in default. Useful for debugging installation and library path issues.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/InvokingGHDL.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nghdl --disp-config\n```\n\n----------------------------------------\n\nTITLE: Redefining Array/Record Subtypes with Four-Bit gbv (3 downto 0) in VHDL\nDESCRIPTION: Redefines the 'gbv' subtype as a four-bit bit_vector (3 downto 0). Subsequently redefines 'array_of_gbv', the 'rcd' record type, and 'array_of_rcd'. Defines associated constrained array subtypes 'ga_gbv', 'ga_cbv', 'ca_rcd', and 'ga_rcd' reflecting the four-bit 'gbv'.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1323/golden_dump.txt#_snippet_6\n\nLANGUAGE: vhdl\nCODE:\n```\nsubtype gbv is bit_vector (3 downto 0);\ntype array_of_gbv is array (integer range <>) of gbv;\nsubtype ga_gbv is array_of_gbv (5 downto 0);\nsubtype ga_cbv is array_of_cbv (5 downto 0);\ntype rcd is record\n  cbv: cbv;\n  gbv: gbv;\nend record;\ntype array_of_rcd is array (integer range <>) of rcd;\nsubtype ca_rcd is array_of_rcd (3 downto 0);\nsubtype ga_rcd is array_of_rcd (4 downto 0);\n```\n\n----------------------------------------\n\nTITLE: Redefining Array/Record Subtypes with Single-Bit gbv (0 downto 0) in VHDL\nDESCRIPTION: Redefines the 'gbv' subtype as a single-bit bit_vector (0 downto 0). Subsequently redefines 'array_of_gbv', the 'rcd' record type, and 'array_of_rcd'. Defines associated constrained array subtypes 'ga_gbv', 'ga_cbv', 'ca_rcd', and 'ga_rcd' reflecting the single-bit 'gbv'.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1323/golden_dump.txt#_snippet_4\n\nLANGUAGE: vhdl\nCODE:\n```\nsubtype gbv is bit_vector (0 downto 0);\ntype array_of_gbv is array (integer range <>) of gbv;\nsubtype ga_gbv is array_of_gbv (2 downto 0);\nsubtype ga_cbv is array_of_cbv (2 downto 0);\ntype rcd is record\n  cbv: cbv;\n  gbv: gbv;\nend record;\ntype array_of_rcd is array (integer range <>) of rcd;\nsubtype ca_rcd is array_of_rcd (3 downto 0);\nsubtype ga_rcd is array_of_rcd (1 downto 0);\n```\n\n----------------------------------------\n\nTITLE: Defining FIFO input record type 'fifo_i_t' in VHDL\nDESCRIPTION: This code defines the `fifo_i_t` record type, representing the input interface of a FIFO. It includes signals for cycle (`rx_cyc`), strobe (`rx_stb`), tag address (`rx_tga`), cycle type information (`rx_cti`), data (`rx_dat`), acknowledgement (`tx_ack`), and stall (`tx_stall`), all related to the FIFO input.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue852/golden_recordofrecord_tb.txt#_snippet_3\n\nLANGUAGE: VHDL\nCODE:\n```\ntype fifo_i_t is record\n  rx_cyc: std_ulogic;\n  rx_stb: std_ulogic;\n  rx_tga: std_ulogic_vector;\n  rx_cti: std_ulogic_vector (1 downto 0);\n  rx_dat: std_ulogic_vector;\n  tx_ack: std_ulogic;\n  tx_stall: std_ulogic;\nend record;\n```\n\n----------------------------------------\n\nTITLE: Listing Module Variables with Autodata Directive in Jinja2 for Sphinx\nDESCRIPTION: Renders a 'Variables' documentation section for the module that iterates over variables available in the module (accessed via `node.variables`). For each variable, it uses the `.. autodata::` directive to include its type annotation and pretty-printed value representation. This provides detailed introspection of module-level data attributes. The snippet requires that `node.variables` is a dictionary mapping variable names to their metadata and values. It formats outputs in a code block for readability.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/_templates/autoapi/module.rst#_snippet_2\n\nLANGUAGE: jinja2\nCODE:\n```\n{%- if node.variables %}\n\n---------------------\n\n**Variables**\n\n{% for item, obj in node.variables.items() %}\n.. autodata:: {{ item }}\n   :annotation:\n\n   .. code-block:: text\n\n      {{ obj|pprint|indent(6) }}\n{%- endfor -%}\n{%- endif -%}\n\n```\n\n----------------------------------------\n\nTITLE: Select Altera VHDL Libraries for Compilation (Bash)\nDESCRIPTION: Options used with the `compile-altera.sh` script to specify which Altera-specific VHDL libraries should be compiled. This includes options for compiling all libraries, base Altera libraries, or device-specific libraries like Max, Arria, Cyclone, and Stratix.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/getting.rst#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n--all, -a             Compile all libraries, including common libraries, packages and device libraries.\n--altera              Compile base libraries like 'altera' and 'altera_mf'\n--max                 Compile device libraries for Max CPLDs\n--arria               Compile device libraries for Arria FPGAs\n--cyclone             Compile device libraries for Cyclone FPGAs\n--stratix             Compile device libraries for Stratix FPGAs\n```\n\n----------------------------------------\n\nTITLE: Configure VHDL Standard for Xilinx Compilation (Bash)\nDESCRIPTION: Options used with the `compile-xilinx-vivado.sh` script to specify the VHDL standard (VHDL-93 or VHDL-2008) to be used during the compilation process for the selected libraries.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/getting.rst#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n--vhdl93              Compile selected libraries with VHDL-93 (default).\n--vhdl2008            Compile selected libraries with VHDL-2008.\n```\n\n----------------------------------------\n\nTITLE: Package Definition for Memory Utilities (mem_pkg.vhd)\nDESCRIPTION: Provides a package containing type declarations, constants, and utility functions for memory components. Used to promote code reuse and modularity across multiple VHDL modules, with dependencies on standard VHDL library packages.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/vests/vhdl-ams/ashenden/compliant/attributes-and-groups/index-ams.txt#_snippet_1\n\nLANGUAGE: VHDL\nCODE:\n```\npackage mem_pkg is\n  -- Memory utility declarations\nend package;\n```\n\n----------------------------------------\n\nTITLE: Generating VHDL Syntax Tree XML Syntax (Command Line Syntax)\nDESCRIPTION: Syntax for using the `--file-to-xml` command to output an XML representation of the decorated syntax tree for an input VHDL file and its dependencies. This is intended for use by VHDL tooling.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/CommandReference.rst#_snippet_11\n\nLANGUAGE: Command Line Syntax\nCODE:\n```\nghdl --file-to-xml\n```\n\n----------------------------------------\n\nTITLE: Character and Bit Type Definitions for Text and Binary Data Handling\nDESCRIPTION: Defines bit and character types used for binary signals and textual data representations, respectively. The character type encompasses standard ASCII characters, extended characters, and control codes, enabling flexible data encoding for communication protocols and data processing in hardware models.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue418/golden_tc749.txt#_snippet_2\n\nLANGUAGE: VHDL\nCODE:\n```\ntype bit is ('0', '1');  -- WKT:2\n type character is (nul, soh, stx, etx, eot, enq, ack, bel, bs, ht, lf, vt, ff, cr, so, si, dle, dc1, dc2, dc3, dc4, nak, syn, etb, can, em, sub, esc, fsp, gsp, rsp, usp, ' ', '!', '\"', '#', '$', '%', '&', '\\'', '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', del, c128, c129, c130, c131, c132, c133, c134, c135, c136, c137, c138, c139, c140, c141, c142, c143, c144, c145, c146, c147, c148, c149, c150, c151, c152, c153, c154, c155, c156, c157, c158, c159, '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�', '�')\n```\n\n----------------------------------------\n\nTITLE: Defining array type 'fifo_array_i_t' in VHDL\nDESCRIPTION: This code defines the `fifo_array_i_t` array type as an array of `fifo_i_t` records, which represent FIFO input interfaces. This array structure allows for managing multiple FIFO input interfaces as a single entity.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue852/golden_recordofrecord_tb.txt#_snippet_5\n\nLANGUAGE: VHDL\nCODE:\n```\ntype fifo_array_i_t is array (natural range <>) of fifo_i_t;\n```\n\n----------------------------------------\n\nTITLE: Building GHDL with mcode Backend using GCC/GNAT\nDESCRIPTION: A sequence of shell commands for building GHDL with the mcode backend. This process involves creating a build directory, configuring GHDL with a specified installation prefix, compiling the source code, and installing the binary to the specified location. Super user privileges may be required on GNU/Linux systems.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/building/mcode.rst#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ cd <ghdl>\n$ mkdir build\n$ cd build\n$ ../configure --prefix=PREFIX\n$ make\n$ make install\n```\n\n----------------------------------------\n\nTITLE: Merging GHDL Simulation Coverage Results Syntax (Command Line Syntax)\nDESCRIPTION: Syntax for the `coverage` command used to merge and output the results from simulations previously run with the `--coverage` option. Different output formats are available.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/CommandReference.rst#_snippet_12\n\nLANGUAGE: Command Line Syntax\nCODE:\n```\nghdl coverage <[format] files>\n```\n\n----------------------------------------\n\nTITLE: Defining std_ulogic type in VHDL\nDESCRIPTION: This code defines the `std_ulogic` type, a fundamental type in VHDL for representing logic signals. It includes states like 'U', 'X', '0', '1', 'Z', 'W', 'L', 'H', and '-'.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue852/golden_recordofrecord_tb.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\ntype std_ulogic is ('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-');  -- WKT:3\n```\n\n----------------------------------------\n\nTITLE: Record Structures and Signal Declarations in VHDL\nDESCRIPTION: Defines record types combining multiple primitive types to organize signals with different attributes, including standard and constrained array types. These structures support complex data grouping, enabling modular and hierarchical hardware design, along with specific signal declarations used during simulation.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue418/golden_tc749.txt#_snippet_3\n\nLANGUAGE: VHDL\nCODE:\n```\ntype record_std_package is record\n   a: boolean;\n   b: bit;\n   c: character;\n   d: severity_level;\n   e: integer;\n   f: real;\n   g: time;\n   h: natural;\n   i: positive;\n   j: string (1 to 7);\n   k: bit_vector (0 to 3);\n end record;\n type record_cons_array is record\n   a: boolean_cons_vector;\n   b: severity_level_cons_vector;\n   c: integer_cons_vector;\n   d: real_cons_vector;\n   e: time_cons_vector;\n   f: natural_cons_vector;\n   g: positive_cons_vector;\n end record;\n type record_cons_arrayofarray is record\n   a: boolean_cons_vectorofvector;\n   b: severity_level_cons_vectorofvector;\n   c: integer_cons_vectorofvector;\n   d: real_cons_vectorofvector;\n   e: time_cons_vectorofvector;\n   f: natural_cons_vectorofvector;\n   g: positive_cons_vectorofvector;\n end record;\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Record Type with Vector Elements in VHDL\nDESCRIPTION: This VHDL code snippet defines a record type `mytype` where the record elements `a` and `b` are now `std_logic_vector` types with a range of `1 downto 0`. This shows how the use of vectors is applied in records and how to declare a vector inside a record. It builds on the previous example and provides additional complexity within the record structure by incorporating vectors to demonstrate more comprehensive data structures.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/internals/RTI.rst#_snippet_2\n\nLANGUAGE: vhdl\nCODE:\n```\n   library ieee ;\n   use ieee.std_logic_1164.all;\n\n   package mypkg is\n\n     type mytype is record\n       a: std_logic_vector(1 downto 0);\n       b: std_logic_vector(1 downto 0);\n     end record;\n\n   end package;\n```\n\n----------------------------------------\n\nTITLE: Declaring Ada Subprograms (Return on New Line)\nDESCRIPTION: Illustrates formatting for Ada function declarations where the signature is too long for one line; the return type is placed on the next line.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/CodingStyle.rst#_snippet_2\n\nLANGUAGE: Ada\nCODE:\n```\nfunction Translate_Static_String (Str_Type : Iir; Str_Ident : Name_Id)\n                                     return O_Cnode\n```\n\n----------------------------------------\n\nTITLE: Declaring Ada Subprograms (Parameters/Return on New Line)\nDESCRIPTION: Demonstrates formatting for Ada function declarations when the signature is long; parameters start on the same line as the name, and the return type is placed on the next line.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/CodingStyle.rst#_snippet_3\n\nLANGUAGE: Ada\nCODE:\n```\nfunction Create_String_Literal_Var_Inner\n  (Str : Iir; Element_Type : Iir; Str_Type : O_Tnode) return Var_Type\n```\n\n----------------------------------------\n\nTITLE: Complex Nested Instances with Multiple Generate Loops\nDESCRIPTION: This section features deeply nested generate loops and multiple instance declarations with varying signal sets, designed to scale hardware models. Signals are assigned specific ranges based on the generate index, allowing flexible and repetitive hardware component instantiation within a modular framework.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1323/golden_dump.txt#_snippet_11\n\nLANGUAGE: VHDL\nCODE:\n```\ngenerate-for genloop2: (0) \n  instance instance_three: \n    signal sig_bit: bit: #901\n    signal sig_enum: enum: #902\n    //... (additional signals)\n\n```\n\nLANGUAGE: VHDL\nCODE:\n```\ngenerate-for genloop2: (1) \n  instance instance_three: \n    signal sig_bit: bit: #1071\n    signal sig_enum: enum: #1072\n    //... (other instance variations)\n\n```\n\n----------------------------------------\n\nTITLE: Defining std_ulogic_vector Type in VHDL\nDESCRIPTION: This VHDL code defines the `std_ulogic_vector` type as an array of `std_ulogic` elements. The array's index is of type `natural` with an unconstrained range, allowing for vectors of varying sizes. This is used to represent multi-bit signals.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue615/golden_repr.txt#_snippet_2\n\nLANGUAGE: VHDL\nCODE:\n```\ntype std_ulogic_vector is array (natural range <>) of std_ulogic;\n```\n\n----------------------------------------\n\nTITLE: Overall File Structure and Signal Declarations in GHDL\nDESCRIPTION: This code defines signals, processes, and nested instances for a GHDL project, organizing hardware design components through hierarchical signal assignments and iterative generate loops. It employs nested generate-for constructs to replicate instance blocks with varying signal parameters, enabling scalable hardware modeling.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1323/golden_dump.txt#_snippet_8\n\nLANGUAGE: VHDL\nCODE:\n```\nsignal sig_ga_gbv: ga_gbv:\nsignal sig_rcd: rcd: #104-#111\nsignal sig_ca_rcd: ca_rcd: #112-#143\nsignal sig_ga_rcd: ga_rcd: #144-#175\n//... (additional signal declarations)\nprocess main_process: \n//... (process bodies)\ngenerate-for genloop1: (0) \ninstance instance_two: \n//... (nested signals and processes)\n// repeated generate loops with indexed signal instances...\n\n```\n\n----------------------------------------\n\nTITLE: Managing Simulation End Time and Signal State Transitions\nDESCRIPTION: This snippet finalizes simulation timing, setting the end time and ensuring signal states are properly recorded at the conclusion of the simulation. It involves updating data structures with final timestamped states, and may include cleanup or reporting functions. Dependencies encompass timing control mechanisms and data finalization routines. Its primary pattern is to close out the data recording phase with accurate final values.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue852/golden_recordofrecord_tb.txt#_snippet_11\n\nLANGUAGE: VHDL\nCODE:\n```\n#200: Time is 35000000 fs\n```\n\n----------------------------------------\n\nTITLE: Redefining Array/Record Subtypes with Null Range gbv (-1 downto 0) in VHDL\nDESCRIPTION: Redefines the 'gbv' subtype as a null-range bit_vector (-1 downto 0). Subsequently redefines 'array_of_gbv', the 'rcd' record type (using the new 'gbv'), and 'array_of_rcd'. Defines associated constrained array subtypes 'ga_gbv', 'ga_cbv', 'ca_rcd', and 'ga_rcd' based on these potentially null-ranged types. This pattern appears multiple times with varying ranges.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1323/golden_dump.txt#_snippet_3\n\nLANGUAGE: vhdl\nCODE:\n```\nsubtype gbv is bit_vector (-1 downto 0);\ntype array_of_gbv is array (integer range <>) of gbv;\nsubtype ga_gbv is array_of_gbv (1 downto 0);\nsubtype ga_cbv is array_of_cbv (1 downto 0);\ntype rcd is record\n  cbv: cbv;\n  gbv: gbv;\nend record;\ntype array_of_rcd is array (integer range <>) of rcd;\nsubtype ca_rcd is array_of_rcd (3 downto 0);\nsubtype ga_rcd is array_of_rcd (0 downto 0);\n```\n\n----------------------------------------\n\nTITLE: Viewing GHDL signal output at 560000000 fs\nDESCRIPTION: Output showing the state of 275 signals at the 560000000 fs simulation time point. Each line shows a signal number, its value, and a numeric representation in parentheses.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue339/golden_w.txt#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nTime is 560000000 fs\n#1: 0\n#2: 'U' (0)\n#3: 'U' (0)\n...\n#275: '0' (2)\n```\n\n----------------------------------------\n\nTITLE: Defining std_ulogic and integer types in VHDL\nDESCRIPTION: Defines custom enumerated types for uninitialized logic states and integer ranges in VHDL, including a subtype for natural numbers. These types are foundational for modeling hardware signals and numeric ranges in VHDL designs.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue561/golden_w.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\ntype std_ulogic is ('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-');  -- WKT:3\n```\n\nLANGUAGE: VHDL\nCODE:\n```\ntype integer is range <>;\n```\n\n----------------------------------------\n\nTITLE: Instantiation of wishbone testbench signals in VHDL\nDESCRIPTION: Creates a signal instance for wishbone slave input, with a 32-bit data field, used within a testbench module for simulation and stimulus application.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue561/golden_w.txt#_snippet_4\n\nLANGUAGE: VHDL\nCODE:\n```\ninstance wb_demux_tb: \n```\n\nLANGUAGE: VHDL\nCODE:\n```\n signal wbs_i: t_wishbone_slave_in(dat (31 downto 0)); #1-#32\n```\n\n----------------------------------------\n\nTITLE: Formatting Ada If-Then Statements (Multi-line Condition)\nDESCRIPTION: Shows formatting for multi-line 'if' conditions: 'then' is placed alone on a new line aligned with 'if'. Boolean operators like 'or else' and 'and then' should start subsequent lines of the condition.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/CodingStyle.rst#_snippet_12\n\nLANGUAGE: Ada\nCODE:\n```\nif Expr = Null_Iir\n  or else Get_Kind (Expr) = Iir_Kind_Overflow_Literal\nthen\n```\n\n----------------------------------------\n\nTITLE: Referencing standard and custom packages in VHDL design\nDESCRIPTION: Lists package declarations including standard packages and a custom wishbone package, providing access to common data types, I/O routines, and wishbone interface functions used in hardware design.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue561/golden_w.txt#_snippet_3\n\nLANGUAGE: VHDL\nCODE:\n```\npackage standard:\n```\n\nLANGUAGE: VHDL\nCODE:\n```\npackage textio:\n```\n\nLANGUAGE: VHDL\nCODE:\n```\npackage std_logic_1164:\n```\n\nLANGUAGE: VHDL\nCODE:\n```\npackage numeric_std:\n```\n\nLANGUAGE: VHDL\nCODE:\n```\npackage wishbone_pkg:\n```\n\n----------------------------------------\n\nTITLE: Simulating and Displaying Signal Values in VHDL Testbench\nDESCRIPTION: This snippet represents simulation output displaying the evolution of 'clk' and 'test' signal values at discrete time steps. Each '#' entry details the value of a signal at a given simulation time, including its ASCII character and decimal code, echoing what is typically printed in VHDL testbench reports. Dependencies include VHDL simulation infrastructure, and outputs are informative traces for debugging; the format presumes prior correct setup and initialization.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue371/golden_sim.txt#_snippet_3\n\nLANGUAGE: VHDL\nCODE:\n```\nTime is 0 fs\n#1: '1' (3)\n#2: 'H' (72)\n#3: 'e' (101)\n#4: 'l' (108)\n#5: 'l' (108)\n#6: 'o' (111)\n#7: ' ' (32)\n#8: 'W' (87)\n#9: 'o' (111)\n#10: 'r' (114)\n#11: 'l' (108)\n#12: 'd' (100)\nTime is 10000000 fs\n#1: '0' (2)\n#2: 'H' (72)\n#3: 'e' (101)\n#4: 'l' (108)\n#5: 'l' (108)\n#6: 'o' (111)\n#7: ' ' (32)\n#8: 'W' (87)\n#9: 'o' (111)\n#10: 'r' (114)\n#11: 'l' (108)\n#12: 'd' (100)\nTime is 20000000 fs\n#1: '1' (3)\n#2: 'H' (72)\n#3: 'e' (101)\n#4: 'l' (108)\n#5: 'l' (108)\n#6: 'o' (111)\n#7: ' ' (32)\n#8: 'W' (87)\n#9: 'o' (111)\n#10: 'r' (114)\n#11: 'l' (108)\n#12: 'd' (100)\n```\n\n----------------------------------------\n\nTITLE: Commenting Ada Subprograms\nDESCRIPTION: Demonstrates the required comment format for Ada subprograms. Comments must precede the declaration, describe the subprogram's purpose, and be preceded by a blank line unless it's the first declaration. The comment should not be repeated before the subprogram body.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/CodingStyle.rst#_snippet_0\n\nLANGUAGE: Ada\nCODE:\n```\n--  Analyze the concurrent statements of PARENT.\nprocedure Sem_Concurrent_Statement_Chain (Parent : Iir);\n```\n\n----------------------------------------\n\nTITLE: Simulated signal values over time in VHDL testbench\nDESCRIPTION: Provides signal value changes and timing information during simulation for each signal, representing different states of detection and data transmission at specified times in femtoseconds.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue561/golden_w.txt#_snippet_6\n\nLANGUAGE: VHDL\nCODE:\n```\nTime is 0 fs\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#1: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#2: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#3: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#4: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#5: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#6: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#7: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#8: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#9: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#10: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#11: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#12: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#13: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#14: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#15: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#16: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#17: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#18: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#19: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#20: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#21: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#22: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#23: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#24: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#25: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#26: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#27: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#28: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#29: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#30: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#31: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#32: 'U' (0)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\nTime is 0 fs\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#1: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#2: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#3: '0' (2)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#4: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#5: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#6: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#7: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#8: '0' (2)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#9: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#10: '0' (2)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#11: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#12: '0' (2)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#13: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#14: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#15: '0' (2)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#16: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#17: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#18: '0' (2)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#19: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#20: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#21: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#22: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#23: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#24: '0' (2)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#25: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#26: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#27: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#28: '0' (2)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#29: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#30: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#31: '1' (3)\n```\n\nLANGUAGE: VHDL\nCODE:\n```\n#32: '1' (3)\n```\n\n----------------------------------------\n\nTITLE: Running VHDL Simulation with GHDL and GTKwave using Make\nDESCRIPTION: The Makefile command 'make gsim' compiles the VHDL files (demo.vhd and tb_demo.vhd), links them, and creates an executable program (tb_demo). It then runs the simulation with a 300-second time limit and outputs signals to tb_demo.ghw before launching GTKwave to display the waveforms.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue382/ghdl_howto.txt#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake gsim\n```\n\n----------------------------------------\n\nTITLE: Defining Custom VHDL Types\nDESCRIPTION: Defines standard VHDL types like `bit` and `integer`, subtypes `natural` and `mytype_t` (a 2-bit `bit_vector`), and a record type `pass_through_t` containing a `texture_id` field of type `mytype_t`. These types are fundamental building blocks for describing hardware signals and data structures in VHDL.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1404/golden_tb.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\ntype bit is ('0', '1');  -- WKT:2\ntype integer is range <>;\nsubtype natural is integer range 0 to 2147483647;\ntype bit_vector is array (natural range <>) of bit;\nsubtype mytype_t is bit_vector (1 downto 0);\ntype pass_through_t is record\n  texture_id: mytype_t;\nend record;\n```\n\n----------------------------------------\n\nTITLE: Instance Block with Parameterized Signals in Generate Loops\nDESCRIPTION: This snippet defines a nested instance 'instance_two' with multiple signals of various data types, allocated across multiple generate iterations with different signal value ranges. It structures the hierarchy for scalable hardware simulation, emphasizing reusability with parameters that vary per loop index.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1323/golden_dump.txt#_snippet_9\n\nLANGUAGE: VHDL\nCODE:\n```\ninstance instance_two: \n  signal sig_bit: bit: #176\n  signal sig_enum: enum: #177\n  signal sig_bool: boolean: #178\n  signal sig_int: integer: #179\n  signal sig_cs: string (1 to 12): #180-#191\n  signal sig_gs: string (1 to 4): #192-#195\n  signal sig_cbv: cbv: #196-#200\n  signal sig_gbv: gbv:\n  signal sig_ca_cbv: ca_cbv: #201-#220\n  signal sig_ca_gbv: ga_gbv:\n  signal sig_ga_cbv: ga_cbv: #221-#230\n  signal sig_ga_gbv: ga_gbv:\n  signal sig_rcd: rcd: #231-#235\n  signal sig_ca_rcd: ca_rcd: #236-#255\n  signal sig_ga_rcd: ga_rcd: #256-#260\n//... (additional signals)\n\n```\n\n----------------------------------------\n\nTITLE: Including a VHDL 'Hello World' Program File\nDESCRIPTION: Directive to include the content of the 'hello.vhdl' file, which contains a simple VHDL program designed to print 'Hello world!'. This file serves as the input for the GHDL compilation and simulation steps demonstrated later. The VHDL code defines an entity and architecture to produce the output.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/quick_start/simulation/hello/index.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. literalinclude:: hello.vhdl\n   :language: vhdl\n```\n\n----------------------------------------\n\nTITLE: VHDL: Sensitivity List Warning for Missing Signal 'cont'\nDESCRIPTION: This VHDL code segment shows a warning related to a missing signal 'cont' in the sensitivity list.  The warning indicates that signal 'cont' is used in the assignment but not included in the sensitivity list.  This can lead to incorrect results since the process might not trigger when the 'cont' signal is altered. The code snippet shows how the signal 'cont' changes.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1425/expected.txt#_snippet_1\n\nLANGUAGE: VHDL\nCODE:\n```\n      n_cont <= cont + 1;\n                ^\n```\n\n----------------------------------------\n\nTITLE: General GHDL Command Invocation Syntax (Shell)\nDESCRIPTION: Basic structure for invoking any GHDL command. It requires a command name followed by optional options. No options are allowed before the command name. Options are generally not allowed after filenames or unit names, except for the run command.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/InvokingGHDL.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghdl command [options...]\n```\n\n----------------------------------------\n\nTITLE: Running GHDL Vendor Library Precompile Script in PowerShell\nDESCRIPTION: This snippet demonstrates how to run the OSVVM vendor precompile script written in PowerShell. The script `compile-osvvm.ps1` is executed with the `-All` flag to compile all components and the `-Source` parameter specifying the path to the OSVVM source files. This script compiles and sets up the vendor libraries in the current PowerShell working directory, preparing them for simulation.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/scripts/vendors/README.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> <GHDL>\\lib\\ghdl\\vendors\\compile-osvvm.ps1 -All -Source ..\\path\\to\\osvvm\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Alias Bug in VHDL\nDESCRIPTION: This VHDL code snippet defines a signal `processor_address` and an alias `address_ms` referencing a portion of that signal. An attribute `keep` is then applied to `processor_address`. The GHDL compiler throws an error because the alias doesn't denote the entire object, indicating a bug in the compiler when attributes are declared before aliases. No external dependencies are required to run this snippet. The main functionality is to demonstrate the GHDL compilation error.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/bug18280/alias_bug.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\n   signal processor_address : std_logic_vector(15 downto 0);\n\n   alias  address_ms       : std_logic_vector(3 downto 0)   is   processor_address(15 downto 12);\n\n   attribute keep : boolean;\n   attribute keep of processor_address: signal is TRUE;\n```\n\n----------------------------------------\n\nTITLE: Redefining Array/Record Subtypes with Two-Bit gbv (1 downto 0) in VHDL\nDESCRIPTION: Redefines the 'gbv' subtype as a two-bit bit_vector (1 downto 0). Subsequently redefines 'array_of_gbv', the 'rcd' record type, and 'array_of_rcd'. Defines associated constrained array subtypes 'ga_gbv', 'ga_cbv', 'ca_rcd', and 'ga_rcd' reflecting the two-bit 'gbv'.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1323/golden_dump.txt#_snippet_5\n\nLANGUAGE: vhdl\nCODE:\n```\nsubtype gbv is bit_vector (1 downto 0);\ntype array_of_gbv is array (integer range <>) of gbv;\nsubtype ga_gbv is array_of_gbv (3 downto 0);\nsubtype ga_cbv is array_of_cbv (3 downto 0);\ntype rcd is record\n  cbv: cbv;\n  gbv: gbv;\nend record;\ntype array_of_rcd is array (integer range <>) of rcd;\nsubtype ca_rcd is array_of_rcd (3 downto 0);\nsubtype ga_rcd is array_of_rcd (2 downto 0);\n```\n\n----------------------------------------\n\nTITLE: Select UVVM VHDL Libraries for Compilation (Bash)\nDESCRIPTION: Options used with the `compile-uvvm.sh` script to specify which UVVM verification libraries should be compiled. This includes options for compiling all libraries or specifically the UVVM libraries.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/getting.rst#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n--all, -a             Compile all.\n--uvvm                Compile the UVVM libraries.\n```\n\n----------------------------------------\n\nTITLE: Defining VHDL Integer Type and Design Hierarchy with Generate Statements\nDESCRIPTION: This VHDL code snippet defines an integer type and creates a design hierarchy using generate-for and generate-if statements with nested blocks. It also displays simulation time information at 0 femtoseconds.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue158/golden_repro.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\ntype integer is range <>;\ndesign\n package standard: \n instance repro: \n  generate-for genf: (1)\n   block blk: \n  generate-for genf: (2)\n   block blk: \n  generate-if geni: \n   block blk: \nTime is 0 fs\nTime is 0 fs\n```\n\n----------------------------------------\n\nTITLE: Simulation Timeline and Signal State Changes\nDESCRIPTION: This excerpt logs signal states at different simulation times, showing the status of signals '#1' to '#33' over multiple timestamps. It helps in debugging and analyzing signal transitions during the simulation cycles.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue418/golden_repro2.txt#_snippet_4\n\nLANGUAGE: VHDL\nCODE:\n```\nTime is 0 fs\n#1: '0' (0)\n#2: '0' (0)\n...\n```\n\n----------------------------------------\n\nTITLE: Analyzing VHDL File with GHDL and Interpreting Overload Error (Shell)\nDESCRIPTION: This shell snippet shows the execution of the GHDL analyzer command on the problematic VHDL file, and displays the resulting error messages related to the overloaded '=' operator. It is used to illustrate GHDL's error reporting for ambiguous operator overloading when multiple versions of '=' are visible. Requires a VHDL source file 'bad_counter.vhdl'. The output provides precise locations for ambiguities and highlights the issue for debugging purposes.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/InvokingGHDL.rst#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nghdl -a --ieee=synopsys bad_counter.vhdl\nbad_counter.vhdl:13:14: operator \"=\" is overloaded\nbad_counter.vhdl:13:14: possible interpretations are:\n../../libraries/ieee/std_logic_1164.v93:69:5: implicit function \"=\"\n    [std_logic_vector, std_logic_vector return boolean]\n../../libraries/synopsys/std_logic_unsigned.vhdl:64:5: function \"=\"\n    [std_logic_vector, std_logic_vector return boolean]\n../translate/ghdldrv/ghdl: compilation error\n```\n\n----------------------------------------\n\nTITLE: GHDL Simulation Output at Multiple Timesteps\nDESCRIPTION: Output from a VHDL simulation showing signal values at timestamps 290000000 fs and 300000000 fs. The simulation tracks 275 signals, displaying their logic values ('U', '0', '1') and internal numeric representations (0, 2, 3).\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue339/golden_w.txt#_snippet_2\n\nLANGUAGE: VHDL\nCODE:\n```\nTime is 290000000 fs\n#1: 0\n#2: 'U' (0)\n#3: 'U' (0)\n...\n#275: '1' (3)\n\nTime is 300000000 fs\n#1: 0\n#2: 'U' (0)\n#3: 'U' (0)\n...\n#275: '0' (2)\n```\n\n----------------------------------------\n\nTITLE: Select Xilinx VHDL Libraries for Compilation (Bash)\nDESCRIPTION: Options used with the `compile-xilinx-vivado.sh` script to specify which Xilinx-specific VHDL libraries should be compiled. This includes options for compiling all libraries or specific primitive/macro libraries like unisim, unimacro, and secureip.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/getting.rst#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n--all, -a             Compile all libraries, including common libraries, packages and device libraries.\n--unisim              Compile the unisim primitives\n--unimacro            Compile the unimacro macros\n--secureip            Compile the secureip primitives\n```\n\n----------------------------------------\n\nTITLE: Viewing GHDL Simulation Output with Signal Values and Timesteps\nDESCRIPTION: Simulation output from GHDL showing signal values at two distinct timesteps (580000000 fs and 590000000 fs). Each signal is numbered and shows its value ('0', '1', or 'U') along with a numerical representation of the signal state in parentheses.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue339/golden_w.txt#_snippet_6\n\nLANGUAGE: VHDL\nCODE:\n```\nTime is 580000000 fs\n#1: 0\n#2: 'U' (0)\n#3: 'U' (0)\n...\n#275: '0' (2)\nTime is 590000000 fs\n#1: 0\n#2: 'U' (0)\n#3: 'U' (0)\n...\n#275: '1' (3)\n```\n\n----------------------------------------\n\nTITLE: Viewing GHDL VHDL Simulation Signal States\nDESCRIPTION: A simulation trace showing the values of signals over time in a VHDL design. The output shows numbered signals (#1-#109) with their values ('0', '1', or 'Z') and internal representation (2, 3, or 4) at regular time intervals (10ns) from 670ns to 730ns.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue332/golden_sim.txt#_snippet_7\n\nLANGUAGE: VHDL\nCODE:\n```\nTime is 670000000 fs\n#1: '0' (2)\n#2: '0' (2)\n#3: '0' (2)\n...\n#73: 'Z' (4)\n#74: 'Z' (4)\n...\n#109: '0' (2)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project Directory with GHDL Shell\nDESCRIPTION: This snippet shows shell commands to change the current directory to the project root (`dlx`) and create a new subdirectory named `work`. The `work` directory is recommended for storing GHDL-generated files (like compiled units and object files) to keep source directories clean. This setup is a prerequisite for subsequent GHDL commands that use the `--workdir=work` option.\n\nDependencies: A directory named `dlx` containing the VHDL sources must exist.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/quick_start/simulation/DLXModelSuite.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ cd dlx\n$ mkdir work\n```\n\n----------------------------------------\n\nTITLE: Defining VHDL Standard Logic Types\nDESCRIPTION: Basic VHDL type definitions for standard logic and integer types. These form the foundation for more complex data structures used in hardware designs.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue418/golden_repro.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\ntype std_ulogic is ('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-');  -- WKT:3\ntype integer is range <>;\nsubtype natural is integer range 0 to 2147483647;\ntype std_ulogic_vector is array (natural range <>) of std_ulogic;\nsubtype std_logic_vector is std_ulogic_vector;\nsubtype std_logic is std_ulogic range 'U' to '-';\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoint to Catch Runtime Errors in GDB\nDESCRIPTION: Shows how to set a breakpoint in GDB to catch runtime errors in GHDL. By setting a breakpoint at the __ghdl_fatal procedure, which is called by all error checking subprograms, you can intercept any runtime error. After the breakpoint is hit, using 'where' or 'bt' commands will display the stack frames.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/Debugging.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n(gdb) break __ghdl_fatal\n```\n\n----------------------------------------\n\nTITLE: Documenting Python Submodules with Sphinx Toctree using Jinja2\nDESCRIPTION: This snippet generates a bold 'Submodules' section and a Sphinx toctree directive listing all submodules of the current module. It requires that the `subnodes` variable is a list of submodule nodes with a `name` attribute. For each submodule, its name is inserted into the toctree block to enable Sphinx to generate submodule documentation pages. This helps organize submodules hierarchically and simplifies navigation through the documentation.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/_templates/autoapi/module.rst#_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\n{%- if subnodes %}\n\n**Submodules**\n\n\n.. toctree::\n{% for item in subnodes %}\n   {{ item.name }}\n{%- endfor %}\n{%- endif -%}\n\n```\n\n----------------------------------------\n\nTITLE: GHDL Compilation Commands\nDESCRIPTION: These commands compile VHDL files using the GHDL compiler with specific flags. The flags include `-a` for analyze, `-fexplicit` for explicit types, `-frelaxed-rules` for relaxed rules, `--warn-binding` to warn on binding issues, `--no-vital-checks`, `--mb-comments` to enable multi-line comments, `--syn-binding` for synthesis binding, `-fpsl` for PSL support, `-v` for verbose output, `-Pxilinx` to use the Xilinx library, `--ieee=standard` for IEEE standard, `--std=08` for VHDL-2008, and `--work=poc` to specify the work library. Requires GHDL and Xilinx libraries to be installed.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/bug037/bugreport.txt#_snippet_1\n\nLANGUAGE: GHDL\nCODE:\n```\nghdl.exe -a -fexplicit -frelaxed-rules --warn-binding --no-vital-checks --mb-comments --syn-binding -fpsl -v -Pxilinx --ieee=standard --std=08 --work=poc ./my_config_ML505.vhdl\nghdl.exe -a -fexplicit -frelaxed-rules --warn-binding --no-vital-checks --mb-comments --syn-binding -fpsl -v -Pxilinx --ieee=standard --std=08 --work=poc ./my_project.vhdl\nghdl.exe -a -fexplicit -frelaxed-rules --warn-binding --no-vital-checks --mb-comments --syn-binding -fpsl -v -Pxilinx --ieee=standard --std=08 --work=poc ./utils.vhdl\nghdl.exe -a -fexplicit -frelaxed-rules --warn-binding --no-vital-checks --mb-comments --syn-binding -fpsl -v -Pxilinx --ieee=standard --std=08 --work=poc ./config.vhdl\nghdl.exe -a -fexplicit -frelaxed-rules --warn-binding --no-vital-checks --mb-comments --syn-binding -fpsl -v -Pxilinx --ieee=standard --std=08 --work=poc ./strings.vhdl\nghdl.exe -a -fexplicit -frelaxed-rules --warn-binding --no-vital-checks --mb-comments --syn-binding -fpsl -v -Pxilinx --ieee=standard --std=08 --work=poc ./vectors.vhdl\nghdl.exe -a -fexplicit -frelaxed-rules --warn-binding --no-vital-checks --mb-comments --syn-binding -fpsl -v -Pxilinx --ieee=standard --std=08 --work=poc ./physical.vhdl\nghdl.exe -a -fexplicit -frelaxed-rules --warn-binding --no-vital-checks --mb-comments --syn-binding -fpsl -v -Pxilinx --ieee=standard --std=08 --work=poc ./sim_types.vhdl\nghdl.exe -a -fexplicit -frelaxed-rules --warn-binding --no-vital-checks --mb-comments --syn-binding -fpsl -v -Pxilinx --ieee=standard --std=08 --work=poc ./sim_protected.v08.vhdl\nghdl.exe -a -fexplicit -frelaxed-rules --warn-binding --no-vital-checks --mb-comments --syn-binding -fpsl -v -Pxilinx --ieee=standard --std=08 --work=poc ./sim_global.v08.vhdl\nghdl.exe -a -fexplicit -frelaxed-rules --warn-binding --no-vital-checks --mb-comments --syn-binding -fpsl -v -Pxilinx --ieee=standard --std=08 --work=poc ./sim_simulation.v08.vhdl\nghdl.exe -a -fexplicit -frelaxed-rules --warn-binding --no-vital-checks --mb-comments --syn-binding -fpsl -v -Pxilinx --ieee=standard --std=08 --work=poc ./arith.pkg.vhdl\nghdl.exe -a -fexplicit -frelaxed-rules --warn-binding --no-vital-checks --mb-comments --syn-binding -fpsl -v -Pxilinx --ieee=standard --std=08 --work=poc ./arith_addw.vhdl\nghdl.exe -a -fexplicit -frelaxed-rules --warn-binding --no-vital-checks --mb-comments --syn-binding -fpsl -v -Pxilinx --ieee=standard --std=08 --work=test ./arith_addw_tb.vhdl\n```\n\n----------------------------------------\n\nTITLE: GHDL Simulation Trace Example\nDESCRIPTION: Shows a sample output from a GHDL simulation, displaying the state of signals at specific time intervals. Signal #1 (likely 'clk') toggles, while signals #2 and #3 (likely parts of 'input_pass_through.texture_id') remain '0'. The format includes the signal identifier, its value, and possibly driving strength or level (indicated by the parenthesized value).\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1404/golden_tb.txt#_snippet_1\n\nLANGUAGE: Log\nCODE:\n```\ndesign\n package standard: \n package mylib_pkg: \n package types_pkg: \n instance design_tb: \n  signal clk: bit: #1\n  signal input_pass_through: pass_through_t: #2-#3\n  process P0: \nTime is 0 fs\n#1: '1' (1)\n#2: '0' (0)\n#3: '0' (0)\nTime is 0 fs\n#1: '1' (1)\n#2: '0' (0)\n#3: '0' (0)\nTime is 1000000 fs\n#1: '0' (0)\n#2: '0' (0)\n#3: '0' (0)\nTime is 2000000 fs\n#1: '1' (1)\n#2: '0' (0)\n#3: '0' (0)\n```\n\n----------------------------------------\n\nTITLE: Viewing GHDL signal output at 550000000 fs\nDESCRIPTION: Output showing the state of 275 signals at the 550000000 fs simulation time point. Each line shows a signal number, its value, and a numeric representation in parentheses.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue339/golden_w.txt#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nTime is 550000000 fs\n#1: 0\n#2: 'U' (0)\n#3: 'U' (0)\n...\n#275: '1' (3)\n```\n\n----------------------------------------\n\nTITLE: Documentation for 'tb_CS5_HCL.vhd' - VHDL Entity Declarations\nDESCRIPTION: This snippet details multiple VHDL entity declarations in the 'tb_CS5_HCL.vhd' file, representing hardware components such as gain, limiter, servo, motor, control, and signal modules. These components support the modeling of power control, signal processing, and behavioral control systems in VHDL.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/vests/vhdl-ams/ashenden/compliant/AMS_CS5_RC_Airplane/index-ams.txt#_snippet_1\n\nLANGUAGE: VHDL\nCODE:\n```\n--                                              entity sum2_e                           simple\n--                                              entity gain_e                           simple\n--                                              entity limiter_2_e                      simple\n--                                              entity lead_lag_e                       simple\n--                                              entity rudder_servo                     rudder_servo\n--                                              entity gear_rv_r                        ideal\n--                                              entity rot2v                            bhv\n--                                              entity horn_r2t                         bhv\n--                                              entity horn_t2r                         bhv\n--                                              entity DC_Motor                         basic\n--                                              entity stop_r                           ideal\n--                                              entity tran_linkage                     a1\n--                                              entity rudder                           bhv\n--                                              entity v_constant                       ideal\n--                                              entity stick                            ideal\n--                                              entity RF_xmtr_rcvr                     behavioral\n--                                              entity switch_dig_2in                   ideal\n--                                              entity clock                            ideal\n--                                              entity clock_duty                       ideal\n--                                              entity rc_clk                           rc_clk\n--                                              entity bit_cnt                          behavioral\n--                                              entity state_mach1                      state_diagram\n--                                              entity sm_cnt                           sm_cnt\n--                                              entity a2d_nbit                         sar\n--                                              entity shift_reg                        behavioral\n--                                              entity frame_gen                        simple\n--                                              entity xor2                             ideal\n--                                              entity level_set_tri                    ideal\n--                                              entity buffer_tri                       ideal\n--                                              entity d2a_bit                          ideal\n--                                              entity parity_gen                       parity_gen\n--                                              entity tdm_encoder                      tdm_encoder\n--                                              entity menc_rsc                         bhv\n--                                              entity Digitize_Encode_Man              Digitize_Encode_Man\n```\n\n----------------------------------------\n\nTITLE: GHDL Simulation Execution\nDESCRIPTION: This command executes the GHDL simulator with the mcode backend. It specifies the testbench 'tb' for simulation, enables signal tracing, and requests a report of all activity during the simulation. This output is used to analyze the signal behavior of the VHDL design.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/bug20549/info.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nghdl_mcode -r tb --trace-signals --activity=all\n```\n\n----------------------------------------\n\nTITLE: Standard GHDL Simulation Output (Assertion Note)\nDESCRIPTION: This snippet represents typical console output from running a GHDL simulation of the DLX test bench without specific assertion level termination. It shows an assertion message originating from `dlx-behaviour.vhdl` at line 395, indicating a \"TRAP instruction encountered\" and that \"execution halted\" within the VHDL code. This message signals the intended end of the simulated DLX program, but the simulator process may require manual interruption (e.g., Ctrl-C) to stop.\n\nDependencies: A GHDL simulation of `dlx_test_behaviour` must be run.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/quick_start/simulation/DLXModelSuite.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndlx-behaviour.vhdl:395:11:(assertion note): TRAP instruction\n encountered, execution halted\n```\n\n----------------------------------------\n\nTITLE: Defining a Record Type 'my_rec' in VHDL\nDESCRIPTION: This VHDL snippet defines a record type named 'my_rec' containing three fields: 's' of type natural, 'b' of type bit_vector, and 'c' also of type bit_vector. Record types are used to group related data elements together, allowing for more complex data structures.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue332/golden_rec.txt#_snippet_1\n\nLANGUAGE: VHDL\nCODE:\n```\ntype my_rec is record\n  s: natural;\n  b: bit_vector;\n  c: bit_vector;\nend record;\n```\n\n----------------------------------------\n\nTITLE: Running Unconstrained Index Test with GHDL-gcc (Shell)\nDESCRIPTION: Shows the execution of the `index_range_test_A` VHDL simulation using `ghdl -r` with GHDL-gcc 0.27. Accessing an unconstrained `bit_vector` port out of bounds correctly triggers a 'bound check failure' error, reporting the specific source file and line number (19). This contrasts with the behavior of the mcode backend.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/ticket9/readme.txt#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ ghdl -r index_range_test_A\n./index_range_test_a:error: bound check failure at index_range_test_A.vhd:19\nghdl: compilation error\n```\n\n----------------------------------------\n\nTITLE: Simulation Outputs of std_ulogic Signals at Time 0 in VHDL\nDESCRIPTION: Shows simulation output of the 'test' signal at simulation time 0 femtoseconds, where each std_ulogic element is in the undefined state 'U'. The output lists the state of 24 individual signal elements, all initialized to 'U', reflecting an uninitialized or inactive logic state in digital simulation. This demonstrates the initial condition of signals before any driving or interaction within the testbench.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1067/golden_top.txt#_snippet_2\n\nLANGUAGE: VHDL\nCODE:\n```\nTime is 0 fs\n#1: 'U' (0)\n#2: 'U' (0)\n#3: 'U' (0)\n#4: 'U' (0)\n#5: 'U' (0)\n#6: 'U' (0)\n#7: 'U' (0)\n#8: 'U' (0)\n#9: 'U' (0)\n#10: 'U' (0)\n#11: 'U' (0)\n#12: 'U' (0)\n#13: 'U' (0)\n#14: 'U' (0)\n#15: 'U' (0)\n#16: 'U' (0)\n#17: 'U' (0)\n#18: 'U' (0)\n#19: 'U' (0)\n#20: 'U' (0)\n#21: 'U' (0)\n#22: 'U' (0)\n#23: 'U' (0)\n#24: 'U' (0)\n```\n\n----------------------------------------\n\nTITLE: VHDL Package and Architecture with Signal Declaration\nDESCRIPTION: This code defines a package 'standard' and an instance 'repro2' with a signal 's' of subtype 'st_if_32'. It sets up a structured hardware description environment with internal signal connections, essential for modular design and simulation setup.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue418/golden_repro2.txt#_snippet_2\n\nLANGUAGE: VHDL\nCODE:\n```\npackage standard: \n instance repro2: \n  signal s: st_if_32: #1-#33\n```\n\n----------------------------------------\n\nTITLE: Defining Vector Types Based on Standard Logic in VHDL\nDESCRIPTION: Declares vector types using arrays of std_ulogic to represent collections of logic signals. The std_ulogic_vector type is defined as an unconstrained array indexed by natural numbers, with std_logic_vector as a subtype aliasing it. These types enable multi-bit signal grouping used widely in digital hardware descriptions.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1131/golden_dut.txt#_snippet_1\n\nLANGUAGE: VHDL\nCODE:\n```\ntype std_ulogic_vector is array (natural range <>) of std_ulogic;\nsubtype std_logic_vector is std_ulogic_vector;\n```\n\n----------------------------------------\n\nTITLE: Configure Common Parameters for GHDL Compile Scripts (PowerShell)\nDESCRIPTION: These are standard command-line parameters applicable to most GHDL compilation scripts written in PowerShell. They control basic behaviors like help display, cleanup, and warning suppression.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/getting.rst#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n-Help                 Print the embedded help page(s).\n-Clean                Cleanup directory before analyzing.\n-SuppressWarnings     Don't show warnings. Report errors only.\n```\n\n----------------------------------------\n\nTITLE: VPI Library Registration Example - C\nDESCRIPTION: This C code snippet illustrates how to register a VPI handle in a VPI library using the `vlog_startup_routines` array.  This array is used by GHDL to find registration functions when the library is loaded using the `--vpi` option. The last element of the array should be 0 to mark the end.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/Simulation.rst#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nvoid (*vlog_startup_routines[]) () = {\n  my_handle_register,\n  0\n};\n```\n\n----------------------------------------\n\nTITLE: Navigating Simulation Working Directory in PowerShell\nDESCRIPTION: This snippet shows how to change the current directory in a PowerShell environment to the simulation directory before running vendor precompile scripts. It uses PowerShell syntax for the `cd` command, serving the same purpose as the Bash version but suited for Windows users.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/scripts/vendors/README.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> cd <MySimulationFolder>\n```\n\n----------------------------------------\n\nTITLE: File Copying using PowerShell\nDESCRIPTION: This PowerShell script copies VHDL files from a source directory to a temporary directory for creating a bug report. It uses `mkdir` to create the directory and `cp` to copy the files. The commands facilitate the isolation of necessary files for a minimal reproducible example.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/bug037/bugreport.txt#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nmkdir H:\\Austausch\\PoC\\temp\\bugreport | cd\ncp H:\\Austausch\\PoC\\tb\\common\\my_config_ML505.vhdl .\ncp H:\\Austausch\\PoC\\tb\\common\\my_project.vhdl .\ncp H:\\Austausch\\PoC\\src\\common\\utils.vhdl .\ncp H:\\Austausch\\PoC\\src\\common\\config.vhdl .\ncp H:\\Austausch\\PoC\\src\\common\\strings.vhdl .\ncp H:\\Austausch\\PoC\\src\\common\\vectors.vhdl .\ncp H:\\Austausch\\PoC\\src\\common\\physical.vhdl .\ncp H:\\Austausch\\PoC\\src\\sim\\sim_types.vhdl .\ncp H:\\Austausch\\PoC\\src\\sim\\sim_protected.v08.vhdl .\ncp H:\\Austausch\\PoC\\src\\sim\\sim_global.v08.vhdl .\ncp H:\\Austausch\\PoC\\src\\sim\\sim_simulation.v08.vhdl .\ncp H:\\Austausch\\PoC\\src\\arith\\arith.pkg.vhdl .\ncp H:\\Austausch\\PoC\\src\\arith\\arith_addw.vhdl .\ncp H:\\Austausch\\PoC\\tb\\arith\\arith_addw_tb.vhdl .\n```\n\n----------------------------------------\n\nTITLE: Updating and Monitoring Signal States Over Time\nDESCRIPTION: This complex snippet manages the updating of signal states at various simulation timestamps. It tracks the status of multiple signals, identified by numeric labels, recording 'U', '0', and '1' states along with their associated timestamps. The purpose is to maintain an accurate log of signal transitions during the simulation run, enabling later analysis of signal behavior. Dependencies include timestamped signal data structures and state transition functions.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue852/golden_recordofrecord_tb.txt#_snippet_10\n\nLANGUAGE: VHDL\nCODE:\n```\n#1: '0' (2)\n#2: '1' (3)\n#3: '0' (2)\n#4: 'U' (0)\n#5: 'U' (0)\n#6: '0' (2)\n#7: 'U' (0)\n... (additional lines omitted for brevity)\n```\n\n----------------------------------------\n\nTITLE: Extending Signal Timing Data for Continued Simulation\nDESCRIPTION: This snippet appears to handle the continuation of signal timing data, possibly preparing for further simulation cycles or validation checks. It updates data structures with new timestamped states and manages the states of signals across multiple simulation stages. Dependencies include timestamp management routines and signal state update functions. The pattern emphasizes maintaining consistent and comprehensive signal data over extended simulation durations.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue852/golden_recordofrecord_tb.txt#_snippet_12\n\nLANGUAGE: VHDL\nCODE:\n```\n#201: 'U' (0)\n```\n\n----------------------------------------\n\nTITLE: Specifying :samp: Role for Italic Text in reStructuredText\nDESCRIPTION: Demonstrates how to use the explicit ':samp:' role in reStructuredText when needing to format parts of the code string, such as variables enclosed in curly braces, in italics.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/CodingStyle.rst#_snippet_16\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:samp:`print 1+{variable}`\n```\n\n----------------------------------------\n\nTITLE: Converting VHDL to BTOR2 using Yosys and GHDL Plugin\nDESCRIPTION: Uses Yosys integrated with the GHDL plugin to process a VHDL file (`filename.vhdl`, top unit `top_unit [arch]`) and outputs the synthesized netlist in the BTOR2 format (`filename.btor`), commonly used by model checkers, via the `write_btor` Yosys command.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/Synthesis.rst#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nyosys -m ghdl -p 'ghdl filename.vhdl -e top_unit [arch]; write_btor filename.btor'\n```\n\n----------------------------------------\n\nTITLE: GHDL Simulation Execution\nDESCRIPTION: This command executes a GHDL simulation of the `arith_addw_tb` testbench.  The flags include `-r` to run, `--syn-binding` for synthesis binding, `-fpsl` for PSL support, `-v` for verbose output, `-Pxilinx` to use the Xilinx library, `--std=08` for VHDL-2008, `--work=test` to specify the work library, `--ieee-asserts=disable-at-0` to disable asserts at time 0, and `--wave` to generate a waveform file. Requires GHDL to be installed.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/bug037/bugreport.txt#_snippet_2\n\nLANGUAGE: GHDL\nCODE:\n```\nghdl.exe -r --syn-binding -fpsl -v -Pxilinx --std=08 --work=test arith_addw_tb --ieee-asserts=disable-at-0 --wave=H:\\Austausch\\PoC\\temp\\ghdl\\arith_addw_tb.ghw\n```\n\n----------------------------------------\n\nTITLE: Defining Hidden Table of Contents Entries in reStructuredText\nDESCRIPTION: Shows how to use the `toctree` directive with the `:hidden:` option in reStructuredText. This creates navigation links for 'file1' (aliased as 'ToC entry') and 'file2' without listing them visually in the document where the directive is placed.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/CodingStyle.rst#_snippet_17\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :hidden:\n\n   ToC entry <file1>\n   file2\n```\n\n----------------------------------------\n\nTITLE: Converting VHDL to FIRRTL using Yosys and GHDL Plugin\nDESCRIPTION: Demonstrates synthesizing a VHDL design (`filename.vhdl`, top unit `top_unit [arch]`) with Yosys and the GHDL plugin, then generating a FIRRTL (Flexible Intermediate Representation for RTL) output file (`filename.firrtl`) using the `write_firrtl` Yosys command.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/Synthesis.rst#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nyosys -m ghdl -p 'ghdl filename.vhdl -e top_unit [arch]; write_firrtl filename.firrtl'\n```\n\n----------------------------------------\n\nTITLE: Viewing GHDL signal output at 570000000 fs\nDESCRIPTION: Output showing the state of 275 signals at the 570000000 fs simulation time point. Each line shows a signal number, its value, and a numeric representation in parentheses.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue339/golden_w.txt#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nTime is 570000000 fs\n#1: 0\n#2: 'U' (0)\n#3: 'U' (0)\n...\n#85: '1' (3)\n```\n\n----------------------------------------\n\nTITLE: Formatting Ada Generic Instantiation\nDESCRIPTION: Shows the preferred style for Ada generic instantiation, placing the generic actual part (parameters like 'Action_List, Action_List_Acc') on a new line, indented.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/CodingStyle.rst#_snippet_10\n\nLANGUAGE: Ada\nCODE:\n```\nprocedure Free is new Ada.Unchecked_Deallocation\n  (Action_List, Action_List_Acc);\n```\n\n----------------------------------------\n\nTITLE: Listing Compiled Vendor Directories in PowerShell\nDESCRIPTION: This snippet illustrates listing directory contents after running the GHDL vendor precompile scripts in PowerShell. It outputs the directories created by the compilation process, showing folders like `osvvm`, `osvvm_common`, and others, which contain compiled vendor VHDL files ready for use.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/scripts/vendors/README.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> dir\n    Directory: D:\\temp\\ghdl\n\nMode           LastWriteTime       Length Name\n----           -------------       ------ ----\nd----    20.11.2019    19:38        <DIR> osvvm\nd----    20.11.2019    19:45        <DIR> osvvm_common\nd----    20.11.2019    19:06        <DIR> osvvm_axi4\nd----    20.11.2019    19:40        <DIR> osvvm_uart\n```\n\n----------------------------------------\n\nTITLE: Defining Python Test and Coverage Dependencies for GHDL\nDESCRIPTION: Specifies Python packages required for testing and code coverage analysis in the GHDL project using pip requirements syntax. It includes 'pytest' for test execution, 'pytest-cov' for coverage integration with pytest, and 'Coverage' for coverage measurement. It also references an external requirements file ('../pyGHDL/requirements.txt') using the '-r' flag. Versions are constrained using '~=' for compatible releases.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/requirements.txt#_snippet_0\n\nLANGUAGE: pip requirements file\nCODE:\n```\n-r ../pyGHDL/requirements.txt\n\n# Test Runner\npytest ~= 8.3\npytest-cov ~= 6.0\n\n# Coverage collection\nCoverage ~= 7.8\n```\n\n----------------------------------------\n\nTITLE: Listing Compiled Vendor Directories in Bash\nDESCRIPTION: This snippet demonstrates listing the contents of the current directory after running the vendor precompile scripts in Bash. It shows typical directory entries including OSVVM components, indicating successful compilation and setup of the vendor libraries in separate directories.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/scripts/vendors/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ ls -ahl\n...\ndrwxr-xr-x  2 <user> <group>  56K Nov 30 17:48 osvvm\ndrwxr-xr-x  2 <user> <group>  56K Nov 30 17:58 osvvm_common\ndrwxr-xr-x  2 <user> <group>  56K Nov 30 17:58 osvvm_axi4\ndrwxr-xr-x  2 <user> <group>  56K Nov 30 17:48 osvvm_uart\n```\n\n----------------------------------------\n\nTITLE: Binary Data Pattern Representation with ASCII Codes\nDESCRIPTION: Structured representation of binary data with character ASCII codes, position numbers, and binary values. The data shows a repeating pattern starting with 'staticlengthfish' followed by binary sequences and terminates with 'second', 'false', and a numeric value (45).\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1323/golden_dump.txt#_snippet_12\n\nLANGUAGE: data\nCODE:\n```\n#513: 's' (115)\n#514: 't' (116)\n#515: 'a' (97)\n#516: 't' (116)\n#517: 'i' (105)\n#518: 'c' (99)\n#519: 'l' (108)\n#520: 'e' (101)\n#521: 'n' (110)\n#522: 'g' (103)\n#523: 't' (116)\n#524: 'h' (104)\n#525: 'f' (102)\n#526: 'i' (105)\n#527: 's' (115)\n#528: 'h' (104)\n#529: '0' (0)\n#530: '1' (1)\n...\n#685: second (1)\n#686: false (0)\n#687: 45\n```\n\n----------------------------------------\n\nTITLE: VHDL: Sensitivity List Warning for Missing Signal 'ena'\nDESCRIPTION: This snippet presents a VHDL code segment where a sensitivity list warning is issued due to the missing signal 'ena'. The warning indicates that the signal 'ena' is used within the 'if' condition but is not part of the process's sensitivity list. This can lead to the incorrect behavior since the process will not be re-evaluated when 'ena' changes. The 'ena' signal is used to check the value.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue1425/expected.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\n    if ena = '1' then\n       ^\n```\n\n----------------------------------------\n\nTITLE: Navigating Simulation Working Directory in Bash\nDESCRIPTION: This snippet demonstrates changing the working directory in a Bash shell environment to the simulation folder where the user intends to compile the vendor or verification libraries. The command uses the Bash shell syntax to navigate into a specified directory. This is a prerequisite step before running the GHDL precompile scripts.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/scripts/vendors/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ cd <MySimulationFolder>\n```\n\n----------------------------------------\n\nTITLE: Elaborating a VHDL Design with GHDL -e (Shell)\nDESCRIPTION: Elaborates a VHDL design hierarchy starting from the specified top unit (`[library.]top_unit [arch]`) using given options (`[options...]`). It re-analyzes necessary units, handles configurations/bindings, links object files, and potentially creates an executable (GCC/LLVM backend) or prepares for simulation (mcode backend). The work library can be specified implicitly or explicitly using `--work=library`.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/InvokingGHDL.rst#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nghdl -e <[options...] [library.]top_unit [arch]>\n# Alternative with explicit work library:\nghdl -e <[options...] --work=library top_unit [arch]>\n```\n\n----------------------------------------\n\nTITLE: Listing Linker Arguments After GHDL Bind (Shell)\nDESCRIPTION: A basic example showing how to use the `--list-link` command, which is intended to be run after a `--bind` command to display the files and arguments needed to link the executable.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/CommandReference.rst#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\nghdl --list-link\n```\n\n----------------------------------------\n\nTITLE: Declaring VHDL Variables with Shared Type and Initial Value\nDESCRIPTION: This VHDL code snippet demonstrates the declaration of multiple variables (`v1`, `v2`) using a single statement. Both variables share the same subtype indication (`std_logic_vector (1 downto 0)`) and the same default value (`\"00\"`). This example, discussed in the context of the GHDL AST, highlights how the AST manages shared information while maintaining a tree structure through ownership rules, distinguishing between owned elements (like the subtype indication on the first variable) and referenced elements (like the type or default value on subsequent variables).\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/internals/AST.rst#_snippet_0\n\nLANGUAGE: vhdl\nCODE:\n```\nvariable v1, v2 : std_logic_vector (1 downto 0) := \"00\";\n```\n\n----------------------------------------\n\nTITLE: Importing VHDL Files for Make with GHDL -i (Shell)\nDESCRIPTION: Scans and parses specified VHDL files (`file...`) to identify design units and their locations, adding them to the work library index without full analysis or code generation. This prepares the environment for the make (`-m`) command to determine dependencies.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/InvokingGHDL.rst#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nghdl -i <[options...] file...>\n```\n\n----------------------------------------\n\nTITLE: Processing GHDL Simulation Signal States and Timing Events\nDESCRIPTION: This snippet likely contains functions or procedures to record and process the state of signals at specific simulation timestamps. It handles various signal states, such as 'U' (unknown) and '0' or '1' (logic levels), updating data structures for later analysis or reporting. Dependencies may include GHDL-specific data types and simulation timing functions. The pattern involves timestamped signal state tracking throughout the simulation process.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue852/golden_recordofrecord_tb.txt#_snippet_8\n\nLANGUAGE: VHDL\nCODE:\n```\n#171: 'U' (0)\n#172: 'U' (0)\n#173: 'U' (0)\n#174: 'U' (0)\n#175: 'U' (0)\n#176: 'U' (0)\n#177: 'U' (0)\n#178: 'U' (0)\n#179: 'U' (0)\n#180: 'U' (0)\n```\n\n----------------------------------------\n\nTITLE: Running Static Index Test with GHDL-mcode (Windows Shell)\nDESCRIPTION: Illustrates running the `index_range_test_B` VHDL simulation via `ghdl -r` using GHDL 0.31-mcode on Windows. Indexing a static-width `bit_vector` signal out of bounds causes a generic 'overflow detected' error and simulation failure, lacking precise location information.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/ticket9/readme.txt#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nC:\\brian\\jobs\\ghdl_test\\test_exceptions>ghdl -r index_range_test_B\nc:\\ghdl\\ghdl-0.31\\bin\\ghdl.exe:error: overflow detected\nc:\\ghdl\\ghdl-0.31\\bin\\ghdl.exe:error: simulation failed\n```\n\n----------------------------------------\n\nTITLE: Documentation for 'Decode_PW_Man' Entity in VHDL Files\nDESCRIPTION: The entities 'Decode_PW_Man' appear in both files, indicating a module for digital decoding or processing within power management systems. They are likely behavioral or structural models used for decoding signals in power or control schemes.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/vests/vhdl-ams/ashenden/compliant/AMS_CS5_RC_Airplane/index-ams.txt#_snippet_2\n\nLANGUAGE: VHDL\nCODE:\n```\n--                                              entity Decode_PW_Man                    Decode_PW_Man\n```\n\n----------------------------------------\n\nTITLE: Attaching GNU GPL License Header to Source Files (Text)\nDESCRIPTION: Explains how to apply the GPL to a new program by adding this notice to each source file. It includes copyright information, the license version (GPL v2 or later), a statement about freedom to redistribute and modify, and a explicit warranty disclaimer. It also directs users to the full license text and provides contact information for the Free Software Foundation.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/COPYING.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\none line to give the program's name and an idea of what it does.\nCopyright (C) yyyy  name of author\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\nas published by the Free Software Foundation; either version 2\nof the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n```\n\n----------------------------------------\n\nTITLE: Enabling PSL Annotation Parsing with GHDL Analyzer - bash\nDESCRIPTION: Commands to analyze and elaborate VHDL files containing PSL annotations with GHDL, using the '-fpsl' option. Requires GHDL toolchain, and input files must be VHDL files with PSL-in-comment annotation. Outputs are intermediate analysis files and an elaborated design. Both steps must be performed to enable PSL assertion checking.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/ImplementationOfVHDL.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nghdl -a -fpsl vhdl_design.vhdl\nghdl -e vhdl_design\n```\n\n----------------------------------------\n\nTITLE: Running Unconstrained Index Test with GHDL-mcode (Windows Shell)\nDESCRIPTION: Demonstrates running the `index_range_test_A` VHDL simulation using `ghdl -r` with GHDL 0.31-mcode on Windows. The test accesses an unconstrained `bit_vector` port out of bounds, resulting in an abnormal program termination without specific error details. This highlights a potential issue in GHDL-mcode's runtime error handling.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/ticket9/readme.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nC:\\brian\\jobs\\ghdl_test\\test_exceptions>ghdl -r index_range_test_A\n\nThis application has requested the Runtime to terminate it in an unusual way.\nPlease contact the application's support team for more information.\n```\n\n----------------------------------------\n\nTITLE: Initializing Simulation Timing and Signal State Recording\nDESCRIPTION: This snippet appears to establish initial simulation parameters, such as total simulation time and initial signal states. It possibly sets up data structures for timestamped signal changes and prepares the environment for simulation stepping. Prerequisites include internal data buffers for timing events and signal states. The pattern suggests a setup phase ensuring proper data tracking during simulation execution.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue852/golden_recordofrecord_tb.txt#_snippet_9\n\nLANGUAGE: VHDL\nCODE:\n```\n#180: Time is 30000000 fs\n```\n\n----------------------------------------\n\nTITLE: Entity and Architecture Declaration for Flip-Flop (flipflop.vhd)\nDESCRIPTION: Defines the flip-flop hardware component as an entity with its behavior specified in an architecture. It serves as a fundamental storage element in digital designs, with dependencies on VHDL language constructs and timing specifications.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/vests/vhdl-ams/ashenden/compliant/attributes-and-groups/index-ams.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\nentity flipflop is\n  -- Entity declaration for a flip-flop component\nend entity;\n```\n\n----------------------------------------\n\nTITLE: Formatting Ada If-Then Statements (Single Line)\nDESCRIPTION: Demonstrates placing the 'then' keyword on the same line as the 'if' condition when the condition is short and fits on one line.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/CodingStyle.rst#_snippet_11\n\nLANGUAGE: Ada\nCODE:\n```\nif Get_Expr_Staticness (Decl) = Locally then\n```\n\n----------------------------------------\n\nTITLE: Declaring Ada Subprograms (Complex Multi-line)\nDESCRIPTION: Shows formatting for complex Ada function declarations where parameters are listed one per line after the function name, and the return type follows on a subsequent line.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/CodingStyle.rst#_snippet_6\n\nLANGUAGE: Ada\nCODE:\n```\nfunction Translate_Predefined_TF_Array_Element\n  (Op : Predefined_Boolean_Logical;\n   Left, Right : Iir;\n   Res_Type : Iir;\n   Loc : Iir)\n  return O_Enode\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter with Non-Standard IEEE Packages in VHDL\nDESCRIPTION: This VHDL snippet defines a 4-bit counter entity using the \"std_logic_unsigned\" package from the non-standard Synopsys extension to the IEEE library. The example demonstrates a compilation issue due to ambiguous operator overloading of the '=' operator from multiple visible packages. Key parameters include clk and rst inputs, and a 4-bit std_logic_vector output. The output may result in GHDL emitting errors about overloaded operators when analyzed. Dependencies include ieee.std_logic_1164 and ieee.std_logic_unsigned; this approach is discouraged due to non-standard semantics.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/InvokingGHDL.rst#_snippet_15\n\nLANGUAGE: VHDL\nCODE:\n```\nlibrary ieee;\nuse ieee.std_logic_1164.all;\n\n--  A counter from 0 to 10.\nentity counter is\n  port (val : out std_logic_vector (3 downto 0);\n        ck : std_logic;\n        rst : std_logic);\nend counter;\n\nlibrary ieee;\nuse ieee.std_logic_unsigned.all;\n\narchitecture bad of counter\nis\n  signal v : std_logic_vector (3 downto 0);\nbegin\n  process (ck, rst)\n  begin\n    if rst = '1' then\n      v <= x\"0\";\n    elsif rising_edge (ck) then\n      if v = \"1010\" then -- Error\n        v <= x\"0\";\n      else\n        v <= v + 1;\n      end if;\n    end if;\n  end process;\n\n  val <= v;\nend bad;\n```\n\n----------------------------------------\n\nTITLE: Entity Declaration for Memory Read Module (mem_read.vhd)\nDESCRIPTION: Specifies a memory read hardware component, typically for simulation or test purposes. Depends on VHDL timing and behavior modeling, with inputs for address and control signals to produce data outputs.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/vests/vhdl-ams/ashenden/compliant/attributes-and-groups/index-ams.txt#_snippet_3\n\nLANGUAGE: VHDL\nCODE:\n```\nentity mem_read is\n  -- Memory read interface\nend entity;\n```\n\n----------------------------------------\n\nTITLE: Performing Full VHDL Elaboration without Simulation (Shell)\nDESCRIPTION: Uses the `--elab-run` command combined with `--no-run` to perform a complete VHDL elaboration according to the standard, without actually starting the simulation. This is necessary because the `-e` command performs only partial elaboration, deferring the rest to runtime.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/InvokingGHDL.rst#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nghdl --elab-run --no-run\n```\n\n----------------------------------------\n\nTITLE: Running Static Index Test with GHDL-gcc (Shell)\nDESCRIPTION: Demonstrates executing the `index_range_test_B` VHDL simulation using `ghdl -r` with GHDL-gcc 0.27. An out-of-bounds access to a static-width `bit_vector` signal correctly results in a 'bound check failure' error, identifying the source file and line number (22).\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/ticket9/readme.txt#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ ghdl -r index_range_test_B\n./index_range_test_b:error: bound check failure at index_range_test_B.vhd:22\n./index_range_test_b:error: simulation failed\nghdl: compilation error\n```\n\n----------------------------------------\n\nTITLE: Declaring Ada Subprograms (Return After Multi-line Parameters)\nDESCRIPTION: Shows formatting for Ada function declarations where parameters are listed on subsequent lines, followed by the return type on its own line.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/CodingStyle.rst#_snippet_4\n\nLANGUAGE: Ada\nCODE:\n```\nfunction Translate_Shortcut_Operator\n  (Imp : Iir_Implicit_Function_Declaration; Left, Right : Iir)\n  return O_Enode\n```\n\n----------------------------------------\n\nTITLE: Testbench for Flip-Flop (tb_flipflop.vhd)\nDESCRIPTION: Implements a test environment to verify the flip-flop entity functionality through stimulus signals and observation points. Uses the flip-flop entity as the device under test, facilitating simulation-based validation.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/vests/vhdl-ams/ashenden/compliant/attributes-and-groups/index-ams.txt#_snippet_4\n\nLANGUAGE: VHDL\nCODE:\n```\nentity tb_flipflop is\n  -- Testbench entity declaration\nend entity;\n\narchitecture behavior of tb_flipflop is\n  -- Testbench architecture\nbegin\n  -- Stimulus and monitor processes\nend architecture;\n```\n\n----------------------------------------\n\nTITLE: Positioning 'is' Keyword in Ada (With Declarations)\nDESCRIPTION: Demonstrates placing the 'is' keyword on a new line when the Ada subprogram has a non-empty declarative part (local variables or constants).\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/CodingStyle.rst#_snippet_7\n\nLANGUAGE: Ada\nCODE:\n```\nprocedure Translate_Assign (Target : Mnode; Expr : Iir; Target_Type : Iir)\nis\n  Val : O_Enode;\nbegin\n```\n\n----------------------------------------\n\nTITLE: Positioning 'is' Keyword in Ada (Long Signature)\nDESCRIPTION: Illustrates placing the 'is' keyword on a separate line if the parameter list makes the signature line too long, even if the declarative part is empty.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/CodingStyle.rst#_snippet_9\n\nLANGUAGE: Ada\nCODE:\n```\nprocedure Predeclare_Scope_Type\n  (Scope : in out Var_Scope_Type; Name : O_Ident) is\n```\n\n----------------------------------------\n\nTITLE: Listing Python Requirements Files\nDESCRIPTION: This snippet lists the paths to several requirements files. These files are used by pip to install the necessary Python packages to run the specified component of the GHDL project.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/pyGHDL/requirements.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n-r libghdl/requirements.txt\n-r dom/requirements.txt\n-r lsp/requirements.txt\n-r cli/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Synthesizing VHDL Design with PSL Vunit Using GHDL --synth - bash\nDESCRIPTION: Provides the full synthesis command with GHDL to handle both a VHDL design and PSL vunit file, including elaboration. Requires GHDL, VHDL-2008 or later support, and correct filenames for the design and vunit. Input: design and PSL files; output: elaborated VHDL design ready for synthesis with PSL property checking integrated.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/ImplementationOfVHDL.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nghdl --synth --std=08 vhdl_design.vhdl vunit.psl -e vhdl_design\n```\n\n----------------------------------------\n\nTITLE: Declaring Ada Subprograms (Single Line)\nDESCRIPTION: Shows the preferred style for declaring Ada functions on a single line when the entire signature fits comfortably.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/CodingStyle.rst#_snippet_1\n\nLANGUAGE: Ada\nCODE:\n```\nfunction Translate_Static_Aggregate (Aggr : Iir) return O_Cnode\n```\n\n----------------------------------------\n\nTITLE: Summary of Signal Activity and Timing Data Structures\nDESCRIPTION: This snippet likely summarizes or finalizes the data collection related to signal activities throughout the simulation. It consolidates timestamped signals and their states, preparing the data for reporting or visualization. It may also handle storage or cleanup routines. Dependencies involve comprehensive data structures holding timing and signal state data, ensuring completeness for later use.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue852/golden_recordofrecord_tb.txt#_snippet_14\n\nLANGUAGE: VHDL\nCODE:\n```\n#205: 'U' (0)\n```\n\n----------------------------------------\n\nTITLE: Listing VHDL Testbench Files\nDESCRIPTION: This snippet lists VHDL testbench files, their corresponding entity names, and related files. It outlines the structure of testbenches within the project, including their file names and associated components. It is used for organizing and maintaining VHDL testbenches. No code is provided as it's directory-listing information.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/vests/vhdl-ams/ashenden/compliant/analog-modeling/index-ams.txt#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Writing a PSL Vunit File for Synthesis in VHDL-2008 - plain text\nDESCRIPTION: Shows the structure of a PSL vunit (Verification Unit) file as supported by GHDL synthesis, bound to a VHDL entity/architecture. The snippet contains both PSL and VHDL code blocks within the vunit enclosure. Only supported with GHDL's synthesis mode and VHDL-2008 or later. Key parameters are entity and architecture names, default clock, and the PSL assertion. The vunit shares the scope with the VHDL design for direct access to ports and signals.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/ImplementationOfVHDL.rst#_snippet_6\n\nLANGUAGE: plain text\nCODE:\n```\nvunit vunit_name (entity_name(architecture_name))\n{\n  default clock is rising_edge(clk);\n  assert always cnt /= 5 abort rst;\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Design Units in VHDL Files Syntax (Command Line Syntax)\nDESCRIPTION: Syntax for using the `-f` command to scan and parse VHDL files and display the names of the design units found within them. Candidates for the top of a design hierarchy are marked.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/CommandReference.rst#_snippet_8\n\nLANGUAGE: Command Line Syntax\nCODE:\n```\nghdl -f <file...>\n```\n\n----------------------------------------\n\nTITLE: Defining Wishbone Interface Types in VHDL\nDESCRIPTION: This snippet defines VHDL types used for a Wishbone interface. It includes a record type `t_wishbone_master_out` which contains a data vector `dat`, and a subtype `t_wishbone_slave_in` defined as an alias for `t_wishbone_master_out`, indicating a symmetrical interface structure.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/gna/issue668/golden_repro2.txt#_snippet_1\n\nLANGUAGE: VHDL\nCODE:\n```\ntype t_wishbone_master_out is record\n  dat: my_vector;\nend record;\nsubtype t_wishbone_slave_in is t_wishbone_master_out;\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Automodule Documentation using Jinja2 Template\nDESCRIPTION: Provides a Jinja2 templated snippet that dynamically generates the Sphinx `.. automodule::` directive based on the module name (`node.name`). This snippet automatically inserts headers and the automodule directive to document the entire Python module. It depends on having a Jinja2 rendering context with `node.name` defined as the module's name. Expected input is a string for the module name and the output is reStructuredText content used by Sphinx to create module-level documentation. The snippet customizes the formatting to remove automodule from the top and adjusts section levels to avoid excessive Table of Contents entries.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/_templates/autoapi/module.rst#_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n.. # Template modified  by Patrick Lehmann\n     * removed automodule on top, because private members are activated for autodoc (no doubled documentation).  \n     * Made sections like 'submodules' bold text, but no headlines to reduce number of ToC levels.\n\n=={{ '=' * node.name|length }}==\n``{{ node.name }}``\n=={{ '=' * node.name|length }}==\n\n.. automodule:: {{ node.name }}\n\n```\n\n----------------------------------------\n\nTITLE: VHPI Library Registration Example - C\nDESCRIPTION: This C code snippet shows how to register foreign applications and functions within a VHPI library using the `vhpi_startup_routines` array. GHDL utilizes this array to locate registration functions when the library is loaded with the `--vhpi` option. The end of array must be marked with 0.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/Simulation.rst#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid (*vhpi_startup_routines[])() = {\n  register_foreign_app,\n  register_foreign_func,\n  0\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting Python Functions with Autofunction Directive in Jinja2\nDESCRIPTION: Generates a 'Functions' section that lists all functions of the module using the `.. autofunction::` directive provided by Sphinx autodoc. It loops over `node.functions` (assumed to be a list of function names) to include each function's documentation automatically. This facilitates inline function documentation generation and inclusion within the module's API reference. The snippet depends on the presence of function metadata in the module context to operate correctly.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/_templates/autoapi/module.rst#_snippet_3\n\nLANGUAGE: jinja2\nCODE:\n```\n{%- if node.functions %}\n\n---------------------\n\n**Functions**\n\n{% for item in node.functions %}\n.. autofunction:: {{ item }}\n{%- endfor -%}\n{%- endif -%}\n\n```\n\n----------------------------------------\n\nTITLE: Including Python Exceptions with Autoexception and Inheritance Diagrams in Sphinx\nDESCRIPTION: Creates an 'Exceptions' section listing all exceptions defined in the module. For each exception, it uses the `.. autoexception::` directive to include detailed exception documentation. Additionally, it renders an inheritance diagram for each exception using `.. inheritance-diagram::`. This snippet requires `node.exceptions` to be a collection of exception names and metadata and relies on Sphinx extensions for inheritance diagrams. It enhances readability of exception hierarchies within documentation.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/_templates/autoapi/module.rst#_snippet_4\n\nLANGUAGE: jinja2\nCODE:\n```\n{%- if node.exceptions %}\n\n---------------------\n\n**Exceptions**\n\n{% for item in node.exceptions %}\n.. autoexception:: {{ item }}\n\n   .. rubric:: Inheritance\n   .. inheritance-diagram:: {{ item }}\n      :parts: 1\n{%- endfor -%}\n{%- endif -%}\n\n```\n\n----------------------------------------\n\nTITLE: Listing GHDL Linker Files and Arguments Syntax (Command Line Syntax)\nDESCRIPTION: Syntax for using the `--list-link` command to display all the files and additional arguments that GHDL intends to pass to the linker. This command is typically used after `--bind`.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/CommandReference.rst#_snippet_17\n\nLANGUAGE: Command Line Syntax\nCODE:\n```\nghdl --list-link <[library.]top_unit [arch]>\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for GHDL Project\nDESCRIPTION: This requirements file lists dependencies needed for GHDL Python components. It references an external requirements file and specifies a version-constrained dependency on pyTooling.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/pyGHDL/cli/requirements.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n-r ../dom/requirements.txt\n\npyTooling[terminal] ~= 8.3\n```\n\n----------------------------------------\n\nTITLE: Using Response Files with GHDL (Shell)\nDESCRIPTION: Illustrates how to use a response file to overcome command line length limits. An argument starting with '@' specifies a file whose contents (arguments separated by whitespace or newlines) are substituted onto the command line.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/InvokingGHDL.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Example usage:\nghdl command @response_file_containing_options_and_args\n```\n\n----------------------------------------\n\nTITLE: Treating PSL Assumes as Asserts in GHDL Synthesis\nDESCRIPTION: Shows how to use the `--assume-asserts` option with `ghdl --synth`. This option causes GHDL to treat all PSL `assume` directives as PSL `assert` directives during synthesis. Automatic `cover` directives will be generated for the resulting asserts unless `--no-assert-cover` is also specified. Replace `[library.]top_unit [arch]` with the actual top-level unit.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/Synthesis.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ghdl --synth --std=08 --assume-asserts [library.]top_unit [arch]\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Cover Assertion Generation in GHDL\nDESCRIPTION: Example of using the `--no-assert-cover` option during GHDL synthesis. By default, GHDL generates PSL `cover` directives for each `assert`. This option disables that automatic generation. Replace `[library.]top_unit [arch]` with the actual top-level unit.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/Synthesis.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ghdl --synth --std=08 --no-assert-cover [library.]top_unit [arch]\n```\n\n----------------------------------------\n\nTITLE: Splitting VHDL Files by Design Unit Syntax (Command Line Syntax)\nDESCRIPTION: Syntax for using the `--chop` command to split a VHDL input file into separate files for each design unit. This command requires the input file to be syntactically correct.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/CommandReference.rst#_snippet_9\n\nLANGUAGE: Command Line Syntax\nCODE:\n```\nghdl --chop <files...>\n```\n\n----------------------------------------\n\nTITLE: Configure VHDL Standard for Altera Compilation (PowerShell)\nDESCRIPTION: Parameters used with the `compile-altera.ps1` script to specify the VHDL standard (VHDL93 or VHDL2008) to be used during the compilation process for the selected libraries.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/getting.rst#_snippet_8\n\nLANGUAGE: none\nCODE:\n```\n-VHDL93               Compile selected libraries with VHDL-93 (default).\n-VHDL2008            Compile selected libraries with VHDL-2008.\n```\n\n----------------------------------------\n\nTITLE: Select Altera VHDL Libraries for Compilation (PowerShell)\nDESCRIPTION: Parameters used with the `compile-altera.ps1` script to specify which Altera-specific VHDL libraries should be compiled. This includes parameters for compiling all libraries, base Altera libraries, or device-specific libraries like Max, Arria, Cyclone, and Stratix.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/getting.rst#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\n-All                  Compile all libraries, including common libraries, packages and device libraries.\n-Altera               Compile base libraries like 'altera' and 'altera_mf'\n-Max                  Compile device libraries for Max CPLDs\n-Arria                Compile device libraries for Arria FPGAs\n-Cyclone              Compile device libraries for Cyclone FPGAs\n-Stratix             Compile device libraries for Stratix FPGAs\n```\n\n----------------------------------------\n\nTITLE: Configure VHDL Standard for Xilinx Compilation (PowerShell)\nDESCRIPTION: Parameters used with the `compile-xilinx-vivado.ps1` script to specify the VHDL standard (VHDL93 or VHDL2008) to be used during the compilation process for the selected libraries.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/getting.rst#_snippet_10\n\nLANGUAGE: none\nCODE:\n```\n-VHDL93               Compile selected libraries with VHDL-93 (default).\n-VHDL2008            Compile selected libraries with VHDL-2008.\n```\n\n----------------------------------------\n\nTITLE: Select Xilinx VHDL Libraries for Compilation (PowerShell)\nDESCRIPTION: Parameters used with the `compile-xilinx-vivado.ps1` script to specify which Xilinx-specific VHDL libraries should be compiled. This includes parameters for compiling all libraries or specific primitive/macro libraries like Unisim, Unimacro, and Secureip.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/getting.rst#_snippet_9\n\nLANGUAGE: none\nCODE:\n```\n-All                  Compile all libraries, including common libraries, packages and device libraries.\n-Unisim               Compile the unisim primitives\n-Unimacro            Compile the unimacro macros\n-Secureip            Compile the secureip primitives\n```\n\n----------------------------------------\n\nTITLE: Displaying GNU GPL Interactive Startup Notice (Text)\nDESCRIPTION: Provides a template for the output displayed by interactive programs under the GPL. It states the program name, version, copyright, explicit lack of warranty, and mentions that it's free software that can be redistributed under certain conditions. It suggests hypothetical commands (`show w`, `show c`) to provide more details about the warranty and conditions, respectively.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/COPYING.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nGnomovision version 69, Copyright (C) year name of author\nGnomovision comes with ABSOLUTELY NO WARRANTY; for details\ntype `show w'.  This is free software, and you are welcome\nto redistribute it under certain conditions; type `show c' \nfor details.\n```\n\n----------------------------------------\n\nTITLE: Pretty Printing VHDL to HTML Syntax (Command Line Syntax)\nDESCRIPTION: Syntax for using the `--pp-html` command to generate an HTML file with syntax highlighting from one or more VHDL source files. The files are only scanned, allowing this to work even with erroneous VHDL.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/using/CommandReference.rst#_snippet_7\n\nLANGUAGE: Command Line Syntax\nCODE:\n```\nghdl --pp-html <[options] file...>\n```\n\n----------------------------------------\n\nTITLE: Documentation for 'tb_CS5_Rudder_Power.vhd' - VHDL Entity Declarations\nDESCRIPTION: This snippet lists various VHDL entity declarations within the 'tb_CS5_Rudder_Power.vhd' file. Entities include components such as gain, limiter, ramp, servo, motor, and various control and signal processing modules, used to model hardware behavior for power and rudder control systems.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/testsuite/vests/vhdl-ams/ashenden/compliant/AMS_CS5_RC_Airplane/index-ams.txt#_snippet_0\n\nLANGUAGE: VHDL\nCODE:\n```\n--                                              entity Decode_PW_Man                    Decode_PW_Man\n--                                              entity tb_CS5_CC_Rudder                 TB_CS5_CC_Rudder\n--                                              entity sum2_e                           simple\n--                                              entity gain_e                           simple\n--                                              entity limiter_2_e                      simple\n--                                              entity lead_lag_e                       simple\n--                                              entity rudder_servo                     rudder_servo\n--                                              entity gear_rv_r                        ideal\n--                                              entity rot2v                            bhv\n--                                              entity horn_r2t                         bhv\n--                                              entity horn_t2r                         bhv\n--                                              entity DC_Motor                         basic\n--                                              entity stop_r                           ideal\n--                                              entity tran_linkage                     a1\n--                                              entity rudder                           bhv\n--                                              entity switch_dig_log                   linear\n--                                              entity switch_dig_log                   log\n--                                              entity buff                             ideal\n--                                              entity inverter                         ideal\n--                                              entity opamp                            basic\n--                                              entity resistor                         ideal\n--                                              entity v_constant                       ideal\n--                                              entity comparator_d                     behavioral\n--                                              entity v_pulse                          ideal\n--                                              entity pwm_mac                          pwm_mac\n--                                              entity diode_pwl                        simple\n--                                              entity pwm_H_bridge                     pwm_H_bridge\n--                                              entity stick                            ideal\n--                                              entity inductor                         ideal\n--                                              entity capacitor                        ideal\n--                                              entity capacitor                        ESR\n--                                              entity buck_sw                          average\n--                                              entity sw_LoopCtrl                      ideal\n--                                              entity comp_2p2z                        ltf\n--                                              entity ex_buck                          ex_buck\n--                                              entity tb_CS5_Rudder_Power              TB_CS5_Rudder_Power\n```\n\n----------------------------------------\n\nTITLE: Cloning GHDL Repository with HTTPS Protocol in Bash\nDESCRIPTION: This snippet demonstrates how to clone the GHDL repository from GitHub using the HTTPS protocol. It includes changing the directory to the Git root, cloning the repository, navigating into the cloned directory, and renaming the remote origin. This method is suitable for users without a GitHub account or those who prefer using login credentials.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/building/Sources.rst#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncd GitRoot\ngit clone \"https://github.com/ghdl/ghdl.git\" ghdl\ncd ghdl\ngit remote rename origin github\n```\n\n----------------------------------------\n\nTITLE: Cloning GHDL Repository with SSH Protocol in Bash\nDESCRIPTION: This snippet demonstrates how to clone the GHDL repository from GitHub using the SSH protocol. It includes changing the directory to the Git root, cloning the repository, navigating into the cloned directory, and renaming the remote origin. This method is suitable for users who have a GitHub account and have configured an OpenSSH public key.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/building/Sources.rst#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncd GitRoot\ngit clone \"ssh://git@github.com:ghdl/ghdl.git\" ghdl\ncd ghdl\ngit remote rename origin github\n```\n\n----------------------------------------\n\nTITLE: Declaring Local Ada Variables and Constants\nDESCRIPTION: Illustrates the required order and initialization practice for local declarations in Ada. Constants must be declared before variables. Variables should generally not be initialized at declaration unless the initialization expression has side effects (like allocation), in which case a constant should not be used.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/CodingStyle.rst#_snippet_13\n\nLANGUAGE: Ada\nCODE:\n```\nis\n  N_Info : constant Iir := Get_Sub_Aggregate_Info (Info);\n  Assoc  : Iir;\n  Sub    : Iir;\nbegin\n```\n\n----------------------------------------\n\nTITLE: Declaring Ada Subprograms (One Parameter Per Line)\nDESCRIPTION: Illustrates formatting for Ada procedure declarations with multiple parameters, placing each parameter on a new line indented after the subprogram name.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/CodingStyle.rst#_snippet_5\n\nLANGUAGE: Ada\nCODE:\n```\nprocedure Translate_Static_Aggregate_1 (List : in out O_Array_Aggr_List;\n                                            Aggr : Iir;\n                                            Info : Iir;\n                                            El_Type : Iir)\n```\n\n----------------------------------------\n\nTITLE: Positioning 'is' Keyword in Ada (No Declarations)\nDESCRIPTION: Shows placing the 'is' keyword on the same line as the subprogram signature when the declarative part is empty.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/CodingStyle.rst#_snippet_8\n\nLANGUAGE: Ada\nCODE:\n```\nfunction Translate_Static_Range_Dir (Expr : Iir) return O_Cnode is\nbegin\n```\n\n----------------------------------------\n\nTITLE: Defining Headline Levels in reStructuredText\nDESCRIPTION: Shows the character sequences used to define different headline levels in reStructuredText documentation, following the Python pattern. Higher levels use '#', followed by '*', '=', '-', and '`'.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/CodingStyle.rst#_snippet_14\n\nLANGUAGE: reStructuredText\nCODE:\n```\n############\n************ (sometimes skipped in small documents)\n============\n-------------------\n‘’’’’’’’’’’’’’’’’’’’’’’’\n```\n\n----------------------------------------\n\nTITLE: Using the Default Code Role in reStructuredText\nDESCRIPTION: Explains and shows that using double backticks (``code``) in reStructuredText defaults to the 'samp' role, rendering text as code. Explicit ':samp:' is generally not needed.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/development/CodingStyle.rst#_snippet_15\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:samp:`code`\n```\n\nLANGUAGE: reStructuredText\nCODE:\n```\n``code``\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies\nDESCRIPTION: This snippet specifies the dependencies for the pyGHDL project. It includes Sphinx for documentation, python-dateutil for date and time handling, autoapi and myst-parser for Sphinx extensions, the Furo theme, and BuildTheDocs extensions.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/doc/requirements.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsphinx ~= 8.2\npython-dateutil ~= 2.9\n\n# Sphinx Extenstions\nautoapi ~= 2.0\nmyst-parser ~= 4.0\nsphinx_autodoc_typehints ~= 3.1\n\n# Theme\nfuro\n\n# BuildTheDocs Extensions (mostly patched Sphinx extensions)\n#btd.sphinx.autoprogram>=0.1.7.post1\n```\n\n----------------------------------------\n\nTITLE: Sample GNU GPL Copyright Disclaimer by Employer (Text)\nDESCRIPTION: Presents a template for a formal document where an entity (like an employer) disclaims copyright interest in a specific program written by an individual. This is used to clarify that the individual author holds the copyright and can license the program under terms like the GPL. It includes placeholders for the entity name, program name, author name, and signatory details.\nSOURCE: https://github.com/ghdl/ghdl/blob/master/COPYING.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright\ninterest in the program `Gnomovision'\n(which makes passes at compilers) written \nby James Hacker.\n\nsignature of Ty Coon, 1 April 1989\nTy Coon, President of Vice\n```"
  }
]