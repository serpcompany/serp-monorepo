[
  {
    "owner": "polygon-io",
    "repo": "client-python",
    "content": "TITLE: Fetching Market Data with Polygon RESTClient\nDESCRIPTION: Demonstrates retrieving various types of market data using the Polygon RESTClient including aggregates (bars), last trades, historical trades, quotes, and historical quotes for a specific ticker.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nticker = \"AAPL\"\n\n# List Aggregates (Bars)\naggs = []\nfor a in client.list_aggs(ticker=ticker, multiplier=1, timespan=\"minute\", from_=\"2023-01-01\", to=\"2023-06-13\", limit=50000):\n    aggs.append(a)\n\nprint(aggs)\n\n# Get Last Trade\ntrade = client.get_last_trade(ticker=ticker)\nprint(trade)\n\n# List Trades\ntrades = client.list_trades(ticker=ticker, timestamp=\"2022-01-04\")\nfor trade in trades:\n    print(trade)\n\n# Get Last Quote\nquote = client.get_last_quote(ticker=ticker)\nprint(quote)\n\n# List Quotes\nquotes = client.list_quotes(ticker=ticker, timestamp=\"2022-01-04\")\nfor quote in quotes:\n    print(quote)\n```\n\n----------------------------------------\n\nTITLE: Creating a RESTClient with API Key\nDESCRIPTION: Initializes a new RESTClient instance with a Polygon API key for authentication.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = RESTClient(api_key=\"<API_KEY>\")\n```\n\n----------------------------------------\n\nTITLE: Using Filter Parameters with Polygon RESTClient\nDESCRIPTION: Example showing how to use filter parameters with comparison operators to refine API queries when retrieving options chain data. Demonstrates the usage of gte (greater than or equal to) and lte (less than or equal to) operators.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\noptions_chain = []\nfor o in client.list_snapshot_options_chain(\n    \"HCP\",\n    params={\n        \"expiration_date.gte\": \"2024-03-16\",\n        \"strike_price.gte\": 29,\n        \"strike_price.lte\": 30,\n    },\n):\n    options_chain.append(o)\n\nprint(options_chain)\nprint(len(options_chain))\n```\n\n----------------------------------------\n\nTITLE: Initializing REST Client with API Key\nDESCRIPTION: Shows how to initialize the Polygon.io REST client using either an environment variable or by directly passing an API key.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Getting-Started.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom polygon import RESTClient\n\nclient = RESTClient() # POLYGON_API_KEY is used\nclient = RESTClient(\"api_key\") # api_key is used\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Messages with Polygon Client\nDESCRIPTION: Demonstrates how to create a message handler function for the WebSocketClient and run the WebSocket connection. The handler receives a list of WebSocketMessage objects and processes them.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/README.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef handle_msg(msg: List[WebSocketMessage]):\n    for m in msg:\n        print(m)\n\nws.run(handle_msg=handle_msg)\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Client with Subscriptions\nDESCRIPTION: Initializes a WebSocketClient with an API key and subscription preferences. The example shows how to subscribe to a specific ticker (AAPL). Comments explain how to subscribe to multiple tickers or all tickers.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Note: Multiple subscriptions can be added to the array \n# For example, if you want to subscribe to AAPL and META,\n# you can do so by adding \"T.META\" to the subscriptions array. [\"T.AAPL\", \"T.META\"]\n# If you want to subscribe to all tickers, place an asterisk in place of the symbol. [\"T.*\"]\nws = WebSocketClient(api_key=<API_KEY>, subscriptions=[\"T.AAPL\"])\n```\n\n----------------------------------------\n\nTITLE: Connecting WebSocketClient in Python for Polygon.io\nDESCRIPTION: Establishes a connection to the Polygon.io WebSocket API. This method is called to initiate the WebSocket connection.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/WebSocket.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npolygon.WebSocketClient.connect\n```\n\n----------------------------------------\n\nTITLE: Subscribing to WebSocket Channels in Python for Polygon.io\nDESCRIPTION: Subscribes to specific channels or topics on the Polygon.io WebSocket API. This method is used to specify which data streams the client wants to receive.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/WebSocket.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\npolygon.WebSocketClient.subscribe\n```\n\n----------------------------------------\n\nTITLE: Using Enums for Endpoint Parameters\nDESCRIPTION: Demonstrates how to use provided enums for specifying parameters in API calls.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Getting-Started.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom polygon.rest.models import Sort\n\nclient.list_trades(..., sort=Sort.ASC)\n```\n\n----------------------------------------\n\nTITLE: Running WebSocketClient in Python for Polygon.io\nDESCRIPTION: Starts the WebSocket client and begins processing messages. This method typically enters a loop to handle incoming WebSocket data.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/WebSocket.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npolygon.WebSocketClient.run\n```\n\n----------------------------------------\n\nTITLE: Listing Ticker News with Polygon.io Python Client\nDESCRIPTION: This method retrieves news articles related to specific tickers for stocks and options using the Polygon.io API. It allows filtering by date range, tickers, and other parameters to get relevant news items.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Reference.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\npolygon.RESTClient.list_ticker_news\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode with RESTClient\nDESCRIPTION: Demonstrates how to initialize a RESTClient with debug tracing enabled. When trace is set to True, the client will print detailed request and response information for debugging purposes.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclient = RESTClient(trace=True)\n```\n\n----------------------------------------\n\nTITLE: Getting Last Stock Quote using Polygon.io Python Client\nDESCRIPTION: Method for retrieving the last quote for stocks. Refers to the RESTClient.get_last_quote method.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Quotes.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npolygon.RESTClient.get_last_quote\n```\n\n----------------------------------------\n\nTITLE: Listing Tickers with Polygon.io Python Client\nDESCRIPTION: This method retrieves a list of tickers for stocks, options, forex, and crypto markets using the Polygon.io API. It allows filtering and pagination of results to get specific sets of tickers.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Reference.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npolygon.RESTClient.list_tickers\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from WebSocket Channels in Python for Polygon.io\nDESCRIPTION: Unsubscribes from specific channels or topics on the Polygon.io WebSocket API. This method is used to stop receiving data from certain streams.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/WebSocket.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\npolygon.WebSocketClient.unsubscribe\n```\n\n----------------------------------------\n\nTITLE: Listing Aggregates Documentation\nDESCRIPTION: Documentation structure for the list_aggs method that retrieves aggregated data across stocks, options, forex and crypto assets.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Aggs.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automethod:: polygon.RESTClient.list_aggs\n```\n\n----------------------------------------\n\nTITLE: Accessing vX Methods via RESTClient in Polygon.io Python Client\nDESCRIPTION: Demonstrates how to use the vX class member on RESTClient to access vX-specific methods. This example shows how to retrieve stock financials data through the vX module.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/vX.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfinancials = RESTClient().vx.list_stock_financials()\n```\n\n----------------------------------------\n\nTITLE: Checking Market Status with Polygon.io Python Client\nDESCRIPTION: This method checks the current market status for stocks, options, forex, and crypto markets using the Polygon.io API. It provides real-time information about whether markets are open, closed, or in pre/post-market hours.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Reference.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npolygon.RESTClient.get_market_status\n```\n\n----------------------------------------\n\nTITLE: Getting Aggregates Documentation\nDESCRIPTION: Documentation structure for the get_aggs method that retrieves specific aggregated data for stocks, options, forex and crypto assets.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Aggs.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automethod:: polygon.RESTClient.get_aggs\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ticker Details with Polygon.io Python Client\nDESCRIPTION: This method fetches detailed information about a specific ticker for stocks and options using the Polygon.io API. It provides comprehensive data about the security, including company information, trading details, and more.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Reference.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\npolygon.RESTClient.get_ticker_details\n```\n\n----------------------------------------\n\nTITLE: Listing Stock Splits with Polygon.io Python Client\nDESCRIPTION: This method retrieves information about stock splits using the Polygon.io API. It provides details about historical and upcoming splits, including split ratios and execution dates.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Reference.rst#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\npolygon.RESTClient.list_splits\n```\n\n----------------------------------------\n\nTITLE: Listing Quotes using Polygon.io Python Client\nDESCRIPTION: Method for listing quotes for stocks, options, and forex. Refers to the RESTClient.list_quotes method.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Quotes.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npolygon.RESTClient.list_quotes\n```\n\n----------------------------------------\n\nTITLE: Getting Last Forex Quote using Polygon.io Python Client\nDESCRIPTION: Method for retrieving the last forex quote for a currency pair. Refers to the RESTClient.get_last_forex_quote method.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Quotes.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npolygon.RESTClient.get_last_forex_quote\n```\n\n----------------------------------------\n\nTITLE: Getting Daily Open/Close Aggregates Documentation\nDESCRIPTION: Documentation structure for the get_daily_open_close_agg method that retrieves daily open and close data for stocks, options and crypto assets.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Aggs.rst#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. automethod:: polygon.RESTClient.get_daily_open_close_agg\n```\n\n----------------------------------------\n\nTITLE: Importing Classes for WebSocket Client\nDESCRIPTION: Imports the necessary classes and types for working with the Polygon WebSocket API, including WebSocketClient for connection management, WebSocketMessage for handling message data, and List from typing module.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom polygon import WebSocketClient\nfrom polygon.websocket.models import WebSocketMessage\nfrom typing import List\n```\n\n----------------------------------------\n\nTITLE: Getting Grouped Daily Aggregates Documentation\nDESCRIPTION: Documentation structure for the get_grouped_daily_aggs method that retrieves grouped daily aggregated data for stocks, forex and crypto assets.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Aggs.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. automethod:: polygon.RESTClient.get_grouped_daily_aggs\n```\n\n----------------------------------------\n\nTITLE: Getting Previous Close Aggregates Documentation\nDESCRIPTION: Documentation structure for the get_previous_close_agg method that retrieves previous day's closing data for stocks, options, forex and crypto assets.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Aggs.rst#2025-04-21_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. automethod:: polygon.RESTClient.get_previous_close_agg\n```\n\n----------------------------------------\n\nTITLE: Closing WebSocketClient in Python for Polygon.io\nDESCRIPTION: Closes the WebSocket connection with Polygon.io. This method should be called to properly terminate the WebSocket session.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/WebSocket.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\npolygon.WebSocketClient.close\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ticker Types with Polygon.io Python Client\nDESCRIPTION: This method fetches the available ticker types for stocks and options using the Polygon.io API. It provides a list of different security types that can be used for filtering in other API calls.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Reference.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\npolygon.RESTClient.get_ticker_types\n```\n\n----------------------------------------\n\nTITLE: Installing Polygon.io Python Client\nDESCRIPTION: Command to install the Polygon.io Python API client using pip.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Getting-Started.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install polygon-api-client\n```\n\n----------------------------------------\n\nTITLE: Listing Stock Dividends with Polygon.io Python Client\nDESCRIPTION: This method fetches information about stock dividends using the Polygon.io API. It provides details about historical and upcoming dividend payments, including ex-dividend dates and payment amounts.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Reference.rst#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\npolygon.RESTClient.list_dividends\n```\n\n----------------------------------------\n\nTITLE: Adding Optional User Agent for Polygon Launchpad in Python\nDESCRIPTION: This example shows how to add the optional edge_user parameter when configuring Polygon Launchpad headers. It builds upon the basic setup by calling update_edge_header() to set the optional User Agent value describing the Edge User's origination request.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/examples/launchpad/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# import RESTClient\nfrom polygon import RESTClient\nfrom polygon.rest.models.request import RequestOptionBuilder\n\n# create client\nc = RESTClient(api_key=\"API_KEY\")\n\n# create request options\noptions = RequestOptionBuilder().edge_headers(\n    edge_id=\"YOUR_EDGE_ID\",  # required\n    edge_ip_address=\"IP_ADDRESS\"  # required\n).update_edge_header(\n    edge_user=\"EDGE_USER\" # optional\n                     )\n\n# get response\nres = c.get_aggs(\"AAPL\", 1, \"day\", \"2022-04-04\", \"2022-04-04\", options=options)\n\n# do something with response\n```\n\n----------------------------------------\n\nTITLE: Retrieving Market Holidays with Polygon.io Python Client\nDESCRIPTION: This method retrieves market holidays for stocks, options, forex, and crypto markets using the Polygon.io API. It provides information about upcoming market closures and special trading hours.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Reference.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npolygon.RESTClient.get_market_holidays\n```\n\n----------------------------------------\n\nTITLE: Listing Market Conditions with Polygon.io Python Client\nDESCRIPTION: This method retrieves market conditions for stocks, options, forex, and crypto markets using the Polygon.io API. It provides information about various trading conditions and their meanings.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Reference.rst#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\npolygon.RESTClient.list_conditions\n```\n\n----------------------------------------\n\nTITLE: Retrieving Exchanges with Polygon.io Python Client\nDESCRIPTION: This method fetches information about exchanges for stocks, options, forex, and crypto markets using the Polygon.io API. It provides details about various trading venues and their characteristics.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Reference.rst#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\npolygon.RESTClient.get_exchanges\n```\n\n----------------------------------------\n\nTITLE: Real-time Currency Conversion using Polygon.io Python Client\nDESCRIPTION: Method for performing real-time currency conversion for forex. Refers to the RESTClient.get_real_time_currency_conversion method.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Quotes.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npolygon.RESTClient.get_real_time_currency_conversion\n```\n\n----------------------------------------\n\nTITLE: Setting Required Headers for Polygon Launchpad in Python\nDESCRIPTION: This snippet demonstrates how to configure the required headers for Polygon Launchpad API requests. It shows creating a RESTClient instance and using RequestOptionBuilder to set the mandatory edge_id and edge_ip_address headers needed for Launchpad authentication.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/examples/launchpad/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# import RESTClient\nfrom polygon import RESTClient\nfrom polygon.rest.models.request import RequestOptionBuilder\n\n# create client\nc = RESTClient(api_key=\"API_KEY\")\n\n# create request options\noptions = RequestOptionBuilder().edge_headers(\n    edge_id=\"YOUR_EDGE_ID\",  # required\n    edge_ip_address=\"IP_ADDRESS\",  # required\n)\n# get response\nres = c.get_aggs(\"AAPL\", 1, \"day\", \"2022-04-04\", \"2022-04-04\", options=options)\n\n# do something with response\n```\n\n----------------------------------------\n\nTITLE: Setting Polygon API Key as Environment Variable\nDESCRIPTION: Command to set the Polygon.io API key as an environment variable for secure access to the API.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/examples/tools/treemap/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport POLYGON_API_KEY=YOUR_API_KEY_HERE\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Documentation for Options Contracts API\nDESCRIPTION: Documentation structure for Polygon.io Python client's options contracts endpoints. Contains method references for get_options_contract and list_options_contracts along with links to the API documentation.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Contracts.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _contracts_header:\n\nContracts\n=================================\n\n=================================\nGet option contract\n=================================\n\n- `Options Contract`_\n\n.. automethod:: polygon.RESTClient.get_options_contract\n\n=================================\nList Options Contracts\n=================================\n\n- `Options Contracts`_\n\n.. automethod:: polygon.RESTClient.list_options_contracts\n\n\n.. _Options Contract: https://polygon.io/docs/options/get_v3_reference_options_contracts__options_ticker\n.. _Options Contracts: https://polygon.io/docs/options/get_v3_reference_options_contracts\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container with Polygon API Key\nDESCRIPTION: Command to run the polygon-client-app Docker container with an environment variable for the Polygon API key. This allows the containerized Python application to authenticate with Polygon.io services.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/examples/tools/docker/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --env POLYGON_API_KEY=\"<your_api_key>\" polygon-client-app\n```\n\n----------------------------------------\n\nTITLE: Initializing WebSocketClient in Python for Polygon.io\nDESCRIPTION: Creates a new instance of the WebSocketClient class. This method is used to set up the WebSocket connection with Polygon.io.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/WebSocket.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npolygon.WebSocketClient.__init__\n```\n\n----------------------------------------\n\nTITLE: Displaying Top 10 Most Traded Stocks in Python\nDESCRIPTION: This code snippet shows the output of the top-10-tickers.py script, which identifies the top 10 most traded stocks and calculates their respective percentages of the total trades.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/examples/tools/flatfiles-stock-trades/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTSLA: 1,549,605 trades, 2.20% of total trades\nNVDA: 788,331 trades, 1.12% of total trades\nSPY: 669,762 trades, 0.95% of total trades\nAMD: 587,140 trades, 0.83% of total trades\nMDIA: 561,698 trades, 0.80% of total trades\nAAPL: 540,870 trades, 0.77% of total trades\nSOXL: 533,511 trades, 0.76% of total trades\nQQQ: 508,822 trades, 0.72% of total trades\nCADL: 466,604 trades, 0.66% of total trades\nAMZN: 465,526 trades, 0.66% of total trades\n```\n\n----------------------------------------\n\nTITLE: Polygon.io Python Client Model Imports\nDESCRIPTION: Collection of Python class imports representing various financial data models from the Polygon.io REST API. These models handle data structures for market data, reference data, and financial instruments.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Models.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npolygon.rest.models.UniversalSnapshot\npolygon.rest.models.UniversalSnapshotSession\npolygon.rest.models.UniversalSnapshotLastQuote\npolygon.rest.models.UniversalSnapshotLastTrade\npolygon.rest.models.UniversalSnapshotDetails\npolygon.rest.models.UniversalSnapshotUnderlyingAsset\npolygon.rest.models.Agg\npolygon.rest.models.GroupedDailyAgg\npolygon.rest.models.DailyOpenCloseAgg\npolygon.rest.models.PreviousCloseAgg\npolygon.rest.models.Trade\npolygon.rest.models.LastTrade\npolygon.rest.models.CryptoTrade\npolygon.rest.models.Quote\npolygon.rest.models.LastQuote\npolygon.rest.models.MinuteSnapshot\npolygon.rest.models.TickerSnapshot\npolygon.rest.models.DayOptionContractSnapshot\npolygon.rest.models.OptionDetails\npolygon.rest.models.Greeks\npolygon.rest.models.UnderlyingAsset\npolygon.rest.models.OptionContractSnapshot\npolygon.rest.models.OrderBookQuote\npolygon.rest.models.SnapshotTickerFullBook\npolygon.rest.models.Ticker\npolygon.rest.models.CompanyAddress\npolygon.rest.models.Branding\npolygon.rest.models.Publisher\npolygon.rest.models.TickerDetails\npolygon.rest.models.TickerNews\npolygon.rest.models.TickerTypes\npolygon.rest.models.MarketHoliday\npolygon.rest.models.MarketCurrencies\npolygon.rest.models.MarketExchanges\npolygon.rest.models.MarketStatus\npolygon.rest.models.Split\npolygon.rest.models.Dividend\npolygon.rest.models.SipMapping\npolygon.rest.models.Consolidated\npolygon.rest.models.MarketCenter\npolygon.rest.models.UpdateRules\npolygon.rest.models.Condition\npolygon.rest.models.Exchange\n```\n\n----------------------------------------\n\nTITLE: Installing Polygon API Client Package\nDESCRIPTION: Command to install the required Python package for interacting with the Polygon.io API.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/examples/tools/treemap/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -U polygon-api-client\n```\n\n----------------------------------------\n\nTITLE: Importing RESTClient for Polygon API\nDESCRIPTION: Imports the RESTClient class from the polygon module to access REST API functionality.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom polygon import RESTClient\n```\n\n----------------------------------------\n\nTITLE: Installing Polygon Python Client with pip\nDESCRIPTION: Command to install or update to the latest stable version of the Polygon Python client using pip. Requires Python 3.8 or higher as a prerequisite.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install -U polygon-api-client\n```\n\n----------------------------------------\n\nTITLE: Documenting ExchangeType Enum in Polygon.io Python Client\nDESCRIPTION: Autoclass documentation for the ExchangeType enum in the polygon.rest.models module. This enum probably defines different types of financial exchanges.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Enums.rst#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: polygon.rest.models.ExchangeType\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Order Enum in Polygon.io Python Client\nDESCRIPTION: Autoclass documentation for the Order enum in the polygon.rest.models module. This enum probably defines order types or directions for financial transactions.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Enums.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: polygon.rest.models.Order\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Market Enum in Polygon.io Python Client\nDESCRIPTION: Autoclass documentation for the Market enum in the polygon.rest.models module. This enum probably defines different financial markets or exchanges.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Enums.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: polygon.rest.models.Market\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Frequency Enum in Polygon.io Python Client\nDESCRIPTION: Autoclass documentation for the Frequency enum in the polygon.rest.models module. This enum likely defines time frequencies for data retrieval or analysis.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Enums.rst#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: polygon.rest.models.Frequency\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Locale Enum in Polygon.io Python Client\nDESCRIPTION: Autoclass documentation for the Locale enum in the polygon.rest.models module. This enum likely defines geographical or language locales for data retrieval.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Enums.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: polygon.rest.models.Locale\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SIP Enum in Polygon.io Python Client\nDESCRIPTION: Autoclass documentation for the SIP enum in the polygon.rest.models module. This enum likely defines options related to the Securities Information Processor.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Enums.rst#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: polygon.rest.models.SIP\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting AssetClass Enum in Polygon.io Python Client\nDESCRIPTION: Autoclass documentation for the AssetClass enum in the polygon.rest.models module. This enum likely defines different types of financial assets or securities.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Enums.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: polygon.rest.models.AssetClass\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Feed Enum Class Documentation\nDESCRIPTION: Sphinx autodoc directive for documenting the Feed enumeration class from polygon.websocket.models\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/WebSocket-Enums.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: polygon.websocket.models.Feed\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SnapshotMarketType Enum in Polygon.io Python Client\nDESCRIPTION: Autoclass documentation for the SnapshotMarketType enum in the polygon.rest.models module. This enum probably defines different market types for snapshot data.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Enums.rst#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: polygon.rest.models.SnapshotMarketType\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: EventType Enum Class Documentation\nDESCRIPTION: Sphinx autodoc directive for documenting the EventType enumeration class from polygon.websocket.models\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/WebSocket-Enums.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: polygon.websocket.models.EventType\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Timeframe Enum in Polygon.io Python Client\nDESCRIPTION: Autoclass documentation for the Timeframe enum in the polygon.rest.models module. This enum likely defines different time periods for data analysis or retrieval.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Enums.rst#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: polygon.rest.models.Timeframe\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting DividendType Enum in Polygon.io Python Client\nDESCRIPTION: Autoclass documentation for the DividendType enum in the polygon.rest.models module. This enum probably defines different types of dividends paid by companies.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Enums.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: polygon.rest.models.DividendType\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting DataType Enum in Polygon.io Python Client\nDESCRIPTION: Autoclass documentation for the DataType enum in the polygon.rest.models module. This enum probably defines different types of financial data available through the API.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Enums.rst#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: polygon.rest.models.DataType\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Direction Enum in Polygon.io Python Client\nDESCRIPTION: Autoclass documentation for the Direction enum in the polygon.rest.models module. This enum likely defines directional options for financial trends or movements.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Enums.rst#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: polygon.rest.models.Direction\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Precision Enum in Polygon.io Python Client\nDESCRIPTION: Autoclass documentation for the Precision enum in the polygon.rest.models module. This enum probably defines different levels of precision for numerical data.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Enums.rst#2025-04-21_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: polygon.rest.models.Precision\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Sort Enum in Polygon.io Python Client\nDESCRIPTION: Autoclass documentation for the Sort enum in the polygon.rest.models module. This enum likely defines sorting options for API requests.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/Enums.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: polygon.rest.models.Sort\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Market Enum Class Documentation\nDESCRIPTION: Sphinx autodoc directive for documenting the Market enumeration class from polygon.websocket.models\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/WebSocket-Enums.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: polygon.websocket.models.Market\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Using Poetry for Development Setup\nDESCRIPTION: Commands for using Poetry to set up a development environment for contributing to the Polygon Python client. This includes installing dependencies and running make commands within the Poetry shell.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/README.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npoetry shell # start shell\npoetry install # install deps\n\nmake test # run your make commands\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Data Analysis\nDESCRIPTION: This command installs the necessary Python libraries (pandas, matplotlib, seaborn, and pytz) for running the analysis scripts.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/examples/tools/flatfiles-stock-trades/readme.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install pandas matplotlib seaborn pytz\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies with Version Constraints\nDESCRIPTION: Lists required Python packages with their version constraints using the tilde (~) operator for flexible versioning. The file specifies sphinx-autodoc-typehints version 1.19.2 or higher within the same minor version, and websockets version 10.3 or higher within the same minor version.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsphinx-autodoc-typehints~=1.19.2\nwebsockets~=10.3\n```\n\n----------------------------------------\n\nTITLE: Running the Async WebSocket and REST Handler Example in Python\nDESCRIPTION: Command to execute the Python script that demonstrates the non-blocking pattern for WebSocket streams and REST API calls. This script requires Python 3.x and a Polygon.io account with an Options API key.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/examples/tools/async_websocket_rest_handler/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 async_websocket_rest_handler.py\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image for Polygon API Client Python Application\nDESCRIPTION: Command to build a Docker image named 'polygon-client-app' from a Dockerfile in the current directory. This encapsulates the Python environment and polygon-api-client library for financial data processing.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/examples/tools/docker/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t polygon-client-app .\n```\n\n----------------------------------------\n\nTITLE: Running the Python Script for Related Companies Demo\nDESCRIPTION: Command to execute the Python script that fetches and processes data from the Related Companies API. The script generates a data.json file containing nodes and edges for the network graph visualization.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/examples/tools/related-companies/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython related-companies-demo.py\n```\n\n----------------------------------------\n\nTITLE: Querying Anomalies for Specific Date with Python Script\nDESCRIPTION: Command to run the Python script that queries the lookup table for anomalies on a specific date. The date '2024-10-18' is used as an example and can be replaced.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/examples/tools/hunting-anomalies/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython query-lookup-table.py 2024-10-18\n```\n\n----------------------------------------\n\nTITLE: Running the Treemap Server\nDESCRIPTION: Commands to navigate to the treemap example directory and start the server that hosts the treemap visualization.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/examples/tools/treemap/readme.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/tools/treemap\npython3 treemap_server.py\n```\n\n----------------------------------------\n\nTITLE: Running GUI for Visual Exploration of Anomalies with Python\nDESCRIPTION: Command to start the Python-based web interface for visually exploring the detected anomalies. The interface is accessible at http://localhost:8888.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/examples/tools/hunting-anomalies/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython gui-lookup-table.py\n```\n\n----------------------------------------\n\nTITLE: Running Polygon.io Analysis Scripts in Bash\nDESCRIPTION: These commands demonstrate how to run each of the four analysis scripts independently. Each script performs a different type of analysis on the stock trade data.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/examples/tools/flatfiles-stock-trades/readme.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython exchange-heatmap.py\npython exchanges-seen.py\npython top-10-tickers.py\npython trades-histogram.py\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository for Polygon.io Client Python\nDESCRIPTION: Command to clone the repository containing the treemap example code from GitHub.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/examples/tools/treemap/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/polygon-io/client-python.git\n```\n\n----------------------------------------\n\nTITLE: Downloading Historical Stock Data with MinIO Client in Bash\nDESCRIPTION: Commands to download and extract historical stock market data using the MinIO client. This process fetches data for specific months and unzips the files.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/examples/tools/hunting-anomalies/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmc alias set s3polygon https://files.polygon.io YOUR_ACCESS_KEY YOUR_SECRET_KEY\nmc cp --recursive s3polygon/flatfiles/us_stocks_sip/day_aggs_v1/2024/08/ ./aggregates_day/\nmc cp --recursive s3polygon/flatfiles/us_stocks_sip/day_aggs_v1/2024/09/ ./aggregates_day/\nmc cp --recursive s3polygon/flatfiles/us_stocks_sip/day_aggs_v1/2024/10/ ./aggregates_day/\ngunzip ./aggregates_day/*.gz\n```\n\n----------------------------------------\n\nTITLE: Extracting Compressed Trade Data in Bash\nDESCRIPTION: This command extracts the compressed gzip file containing trade data for analysis. It assumes the file is named '2024-04-05.csv.gz' in the current directory.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/examples/tools/flatfiles-stock-trades/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngunzip 2024-04-05.csv.gz\n```\n\n----------------------------------------\n\nTITLE: Building Lookup Table with Python Script\nDESCRIPTION: Command to run the Python script that builds a lookup table from the downloaded historical data. The table is saved as 'lookup_table.pkl'.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/examples/tools/hunting-anomalies/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython build-lookup-table.py\n```\n\n----------------------------------------\n\nTITLE: Displaying Exchange Trade Distribution in Python\nDESCRIPTION: This code snippet shows the output of the exchanges-seen.py script, which analyzes the distribution of trades across different exchanges and calculates their respective percentages of total trades.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/examples/tools/flatfiles-stock-trades/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nExchange 4: 25,570,324 trades, 36.32% of total trades\nExchange 12: 15,147,689 trades, 21.52% of total trades\nExchange 11: 6,877,306 trades, 9.77% of total trades\nExchange 19: 5,098,852 trades, 7.24% of total trades\nExchange 10: 4,006,611 trades, 5.69% of total trades\nExchange 8: 3,686,168 trades, 5.24% of total trades\nExchange 15: 2,446,340 trades, 3.47% of total trades\nExchange 21: 2,173,744 trades, 3.09% of total trades\nExchange 7: 1,509,083 trades, 2.14% of total trades\nExchange 20: 1,296,811 trades, 1.84% of total trades\nExchange 18: 674,553 trades, 0.96% of total trades\nExchange 13: 527,767 trades, 0.75% of total trades\nExchange 2: 417,295 trades, 0.59% of total trades\nExchange 3: 393,919 trades, 0.56% of total trades\nExchange 17: 230,210 trades, 0.33% of total trades\nExchange 1: 183,010 trades, 0.26% of total trades\nExchange 9: 159,020 trades, 0.23% of total trades\nExchange 14: 1,211 trades, 0.00% of total trades\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText\nDESCRIPTION: This snippet defines the table of contents for the documentation using reStructuredText syntax. It includes links to various sections of the API documentation.\nSOURCE: https://github.com/polygon-io/client-python/blob/master/docs/source/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :maxdepth: 1\n  :caption: Contents:\n\n  Getting-Started\n  Aggs\n  WebSocket\n  Snapshot\n  Quotes\n  Reference\n  Trades\n  vX\n  Models\n  Enums\n  WebSocket-Enums\n  Exceptions\n  Contracts\n```"
  }
]