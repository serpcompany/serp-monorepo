[
  {
    "owner": "shopify",
    "repo": "shopify-api-js",
    "content": "TITLE: Initializing Shopify API Client in TypeScript\nDESCRIPTION: Example of creating a new Shopify API client instance with complete configuration including API keys, scopes, hosting settings, billing configuration, and custom logging. Shows how to import required dependencies and set up essential parameters.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/shopifyApi.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {shopifyApi, ApiVersion, BillingInterval} from '@shopify/shopify-api';\nimport {restResources} from '@shopify/shopify-api/rest/admin/2022-07';\n\nconst shopify = shopifyApi({\n  apiKey: 'APIKeyFromPartnersDashboard',\n  apiSecretKey: 'APISecretFromPartnersDashboard',\n  scopes: ['read_products'],\n  hostName: 'localhost:4321',\n  hostScheme: 'http',\n  apiVersion: ApiVersion.July22,\n  isEmbeddedApp: true,\n  isCustomStoreApp: false,\n  userAgentPrefix: 'Custom prefix',\n  privateAppStorefrontAccessToken: 'PrivateAccessToken',\n  customShopDomains: ['*.my-custom-domain.io'],\n  billing: {\n    'My plan': {\n      amount: 5.0,\n      currencyCode: 'USD',\n      interval: BillingInterval.OneTime,\n    },\n  },\n  logger: {\n    log: (severity, message) => {\n      myAppsLogFunction(severity, message);\n    },\n  },\n  restResources,\n  future: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Webhook Handler Configuration Updates\nDESCRIPTION: Updates webhook handler registration to use new async API pattern and DeliveryMethod specification for APP_UNINSTALLED webhook.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-17_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n-Shopify.Webhooks.Registry.addHandler(\"APP_UNINSTALLED\", {\n-  path: \"/api/webhooks\",\n-  webhookHandler: async (_topic, shop, _body) => {\n-    await AppInstallations.delete(shop);\n+await shopify.webhooks.addHandlers({\n+  APP_UNINSTALLED: {\n+    deliveryMethod: DeliveryMethod.Http,\n+    callbackUrl: \"/api/webhooks\",\n+    callback: async (_topic, shop, _body) => {\n+      await AppInstallations.delete(shop);\n+    },\n   },\n });\n```\n\n----------------------------------------\n\nTITLE: Updating Auth Redirect Handler for Shopify API v6\nDESCRIPTION: Modifications to the auth redirect helper to use new shopify instance methods and handle redirections differently in API v6.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-17_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n-import { Shopify } from \"@shopify/shopify-api\";\n+import shopify from \"../shopify.js\";\n[...remaining diff code...]\n```\n\n----------------------------------------\n\nTITLE: Initializing Shopify API with Express\nDESCRIPTION: Sets up the Shopify API library with configuration parameters and initializes an Express application. The example includes essential configuration like API keys, scopes, and hostname.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/README.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@shopify/shopify-api/adapters/node';\nimport {shopifyApi, LATEST_API_VERSION} from '@shopify/shopify-api';\nimport express from 'express';\n\nconst shopify = shopifyApi({\n  // The next 4 values are typically read from environment variables for added security\n  apiKey: 'APIKeyFromPartnersDashboard',\n  apiSecretKey: 'APISecretFromPartnersDashboard',\n  scopes: ['read_products'],\n  hostName: 'ngrok-tunnel-address',\n  ...\n});\n\nconst app = express();\n```\n\n----------------------------------------\n\nTITLE: Initializing Shopify REST Client in TypeScript\nDESCRIPTION: Creates a new REST client instance for making API calls to Shopify. This example demonstrates how to initialize the client within an Express route handler using the current session and specifying the API version.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/clients/Rest.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Requests to /my-endpoint must be made with authenticatedFetch for embedded apps\napp.get('/my-endpoint', async (req, res) => {\n  const sessionId = await shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // getSessionFromStorage() must be provided by application\n  const session = await getSessionFromStorage(sessionId);\n\n  const client = new shopify.clients.Rest({\n    session,\n    apiVersion: ApiVersion.January23,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Paginated Requests with REST Resources in TypeScript\nDESCRIPTION: Demonstrates how to handle cursor-based pagination when fetching multiple sets of products using the all method of REST resources.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/rest-resources.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlet pageInfo;\ndo {\n  const response = await shopify.rest.Product.all({\n    ...pageInfo?.nextPage?.query,\n    session,\n    limit: 10,\n  });\n\n  const pageProducts = response.data;\n  // ... use pageProducts\n\n  pageInfo = response.pageInfo;\n} while (pageInfo?.nextPage);\n```\n\n----------------------------------------\n\nTITLE: Initializing Storefront API Client in TypeScript\nDESCRIPTION: Example of how to construct a Storefront API client using a Session object. The client is initialized within an Express route handler, getting the current session ID and retrieving the session from storage.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/clients/Storefront.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/my-endpoint', async (req, res) => {\n  const sessionId = await shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // getSessionFromStorage() must be provided by the application\n  const session = await getSessionFromStorage(sessionId);\n\n  const client = new shopify.clients.Storefront({\n    session,\n    apiVersion: ApiVersion.January23,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Localized Cart with Shopify Storefront API in TypeScript\nDESCRIPTION: This snippet illustrates how to create a localized cart using the Shopify Storefront API. It includes a GraphQL mutation with country and language context variables for localization.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/storefront-api-client/README.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst cartCreateMutation = `\n  mutation ($input: CartInput!, $country: CountryCode, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    cartCreate(input: $input) {\n      userErrors {\n        message\n        code\n        field\n      }\n      cart {\n        id\n        checkoutUrl\n      }\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(cartCreateMutation, {\n  variables: {\n    input: {},\n    country: 'JP',\n    language: 'JA',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Shopify OAuth Authentication in Cloudflare Workers\nDESCRIPTION: Example of implementing the OAuth authentication flow in a Cloudflare Workers environment. The code demonstrates handling authentication requests and returning the appropriate Response object.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/auth/begin.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function handleFetch(request: Request): Promise<Response> {\n  const {searchParams} = new URL(request.url);\n\n  // The library will return a Response object\n  return shopify.auth.begin({\n    shop: shopify.utils.sanitizeShop(searchParams.get('shop'), true),\n    callbackPath: '/auth/callback',\n    isOnline: false,\n    rawRequest: request,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Shopify API for a Custom Store App\nDESCRIPTION: Configures the Shopify API client for a store-specific custom app. Sets the API secret key, access token, and other required parameters to enable direct API access without OAuth flow.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/custom-store-app.md#2025-04-17_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport \"@shopify/shopify-api/adapters/node\";\nimport { shopifyApi, ApiVersion, Session } from \"@shopify/shopify-api\";\nimport { restResources } from \"@shopify/shopify-api/rest/admin/2023-04\";\n\nconst shopify = shopifyApi({\n  apiSecretKey: \"App_API_secret_key\",            // Note: this is the API Secret Key, NOT the API access token\n  apiVersion: ApiVersion.April23,\n  isCustomStoreApp: true,                        // this MUST be set to true (default is false)\n  adminApiAccessToken: \"Admin_API_Access_Token\", // Note: this is the API access token, NOT the API Secret Key\n  isEmbeddedApp: false,\n  hostName: \"my-shop.myshopify.com\",\n  // Mount REST resources.\n  restResources,\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Products with GraphQL\nDESCRIPTION: Demonstrates how to query product data using GraphQL operations with the Admin API client\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/admin-api-client/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst operation = `\n  query ProductQuery($id: ID!) {\n    product(id: $id) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(operation, {\n  variables: {\n    id: 'gid://shopify/Product/7608002183224',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Storefront API Client in TypeScript (After v8)\nDESCRIPTION: Updated example of creating a Storefront API client using the new 'session' parameter instead of 'domain' and 'storefrontAccessToken'.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v8.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/my-endpoint', async (req, res) => {\n  const sessionId = await shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // getSessionFromStorage() must be provided by the application\n  const session = await getSessionFromStorage(sessionId);\n\n  const client = new shopify.clients.Storefront({\n    session,\n    apiVersion: ApiVersion.January23,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing REST API Client in TypeScript\nDESCRIPTION: Shows how to initialize the Shopify Admin REST API client with the necessary configuration, including store domain, API version, and access token.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/admin-api-client/README.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createAdminRestApiClient} from '@shopify/admin-api-client';\n\nconst client = createAdminRestApiClient({\n  storeDomain: 'your-shop-name.myshopify.com',\n  apiVersion: '2023-04',\n  accessToken: 'your-admin-api-access-token',\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Product using REST Resources in TypeScript\nDESCRIPTION: Shows how to update a product using REST resources, which simplifies the process by abstracting the HTTP requests and response handling.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/rest-resources.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionId = await shopify.session.getCurrentId({\n  rawRequest: req,\n  rawResponse: res,\n});\n\n// use sessionId to retrieve session from app's session storage\n// getSessionFromStorage() must be provided by application\nconst session = await getSessionFromStorage(sessionId);\n\n// get a single product via its product id\nconst product = await shopify.rest.Product.find({session, id: '7504536535062'});\n\nproduct.title = 'A new title';\n\n// After promise resolves, the product will be updated with the returned data\nawait product.save({\n  update: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Shopify Auth Callback in Node.js\nDESCRIPTION: Example of handling Shopify's OAuth callback in a Node.js environment. The code processes the callback request, creates a new session, and redirects to the app's entry page.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/auth/callback.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/auth/callback', async (req, res) => {\n  // The library will automatically set the appropriate HTTP headers\n  const callback = await shopify.auth.callback({\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // You can now use callback.session to make API requests\n\n  res.redirect('/my-apps-entry-page');\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Shopify GraphQL Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a new instance of the Shopify GraphQL client within an Express.js route handler. It shows the process of retrieving a session ID, fetching the session from storage, and initializing the client with the session and API version.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/clients/Graphql.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/my-endpoint', async () => {\n  const sessionId = await shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // getSessionFromStorage() must be provided by application\n  const session = await getSessionFromStorage(sessionId);\n\n  const client = new shopify.clients.Graphql({\n    session,\n    apiVersion: ApiVersion.January23,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Subscription Plan with a Single LineItem in Shopify API\nDESCRIPTION: Sets up a Shopify app subscription plan with a single recurring line item. The plan has a 7-day trial period and charges $30 USD every 30 days, with a $10 discount for the first three billing cycles.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/billing.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  shopifyApi,\n  BillingInterval,\n  BillingReplacementBehavior,\n} from '@shopify/shopify-api';\n\nconst shopify = shopifyApi({\n  // ...\n  billing: {\n    {\n    \"Single LineItem Plan\": {\n      replacementBehavior: BillingReplacementBehavior.ApplyImmediately,\n      trialDays: 7,\n      lineItems: [\n        {\n          interval: BillingInterval.Every30Days,\n          amount: 30,\n          currencyCode: \"USD\",\n          discount: {\n            durationLimitInIntervals: 3,\n            value: {\n              amount: 10,\n            },\n          },\n        }\n      ],\n    },\n  },\n}\nfuture: {\n  v10_lineItemBilling: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Product using REST Resources in TypeScript\nDESCRIPTION: Demonstrates how to create a new product using REST resources, setting various properties and saving it to Shopify.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/rest-resources.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst product = new shopify.rest.Product({session: session});\nproduct.title = 'Burton Custom Freestyle 151';\nproduct.body_html = '<strong>Good snowboard!</strong>';\nproduct.vendor = 'Burton';\nproduct.product_type = 'Snowboard';\nproduct.status = 'draft';\n\n// After promise resolves, product will be updated with the returned data\nawait product.save({\n  update: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Generic for GraphQL Response Typing\nDESCRIPTION: This example shows how to use TypeScript generics to type the response body of a GraphQL query. It defines an interface for the expected response structure and passes it as a type argument to the request method.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/clients/Graphql.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// If using TypeScript, you can type the response body\ninterface MyResponseBodyType {\n  data: {\n    //...\n  };\n}\n\nconst response = await client.request<MyResponseBodyType>(/* ... */);\n\n// response.body will be of type MyResponseBodyType\nconsole.log(response.body.data);\n```\n\n----------------------------------------\n\nTITLE: Configuring a Subscription Plan with Multiple LineItems in Shopify API\nDESCRIPTION: Creates a Shopify app subscription plan with both recurring and usage-based line items. The plan includes a 7-day trial, a $30 monthly recurring charge with a $10 discount for three cycles, and a usage-based charge for emails.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/billing.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  shopifyApi,\n  BillingInterval,\n  BillingReplacementBehavior,\n} from '@shopify/shopify-api';\n\nconst shopify = shopifyApi({\n  // ...\n  billing: {\n    {\n    \"Multiple LineItems Plan\": {\n      replacementBehavior: BillingReplacementBehavior.ApplyImmediately,\n      trialDays: 7,\n      lineItems: [\n        {\n          interval: BillingInterval.Every30Days,\n          amount: 30,\n          currencyCode: \"USD\",\n          discount: {\n            durationLimitInIntervals: 3,\n            value: {\n              amount: 10,\n            },\n          },\n        },\n        {\n          interval: BillingInterval.Usage,\n          amount: 30,\n          currencyCode: \"USD\",\n          terms: \"per 1000 emails\",\n        },\n      ],\n    },\n  },\n},\nfuture: {\n  v10_lineItemBilling: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Using client.fetch() to Get Shopify API Data\nDESCRIPTION: This snippet shows how to use the client.fetch() method to retrieve data from the Shopify API. It demonstrates making a simple query for shop information and handling the response.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/graphql-client/README.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopQuery = `\n  query shop {\n    shop {\n      name\n      id\n    }\n  }\n`;\n\nconst response = await client.fetch(shopQuery);\n\nif (response.ok) {\n  const {errors, data, extensions} = await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing REST Resources in Shopify API v6 (TypeScript)\nDESCRIPTION: Demonstrates how to import and use REST resources in v6, which are now accessed via the Shopify API instance instead of direct imports from the dist folder.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport {shopifyApi, ApiVersion} from '@shopify/shopify-api';\nconst apiVersion = ApiVersion.October22;\nlet {restResources} = await import(\n  `@shopify/shopify-api/rest/admin/${apiVersion}`\n);\n\nconst shopify = shopifyApi({\n  // ...\n  apiVersion,\n  restResources,\n});\n\n// ...\n\napp.get('/api/products/count', async (req, res) => {\n  const sessionId = await shopify.session.getCurrentId({\n    isOnline: false,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // getSessionFromStorage() must be provided by application\n  const session = await getSessionFromStorage(sessionId);\n\n  const countData = await shopify.rest.Product.count({session});\n  res.status(200).send(countData);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Shopify API and Registering Webhooks after OAuth in Node.js\nDESCRIPTION: This snippet demonstrates how to initialize the Shopify API client and register webhooks after the OAuth flow completes in an Express.js application. It handles the OAuth callback, registers webhooks with Shopify using the session, and redirects the user.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/webhooks.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApi({\n  /* ... */\n});\n\n// Call shopify.webhooks.addHandlers here (see examples below)\n\n## Node.js\n\nconst app = express();\n\n// Register webhooks after OAuth completes\napp.get('/auth/callback', async (req, res) => {\n  try {\n    const callbackResponse = await shopify.auth.callback({\n      rawRequest: req,\n      rawResponse: res,\n    });\n\n    const response = await shopify.webhooks.register({\n      session: callbackResponse.session,\n    });\n\n    if (!response['PRODUCTS_CREATE'][0].success) {\n      console.log(\n        `Failed to register PRODUCTS_CREATE webhook: ${response['PRODUCTS_CREATE'][0].result}`,\n      );\n    }\n  } catch (error) {\n    console.error(error); // in practice these should be handled more gracefully\n  }\n\n  return res.redirect('/'); // or wherever you want your user to end up after OAuth completes\n});\n```\n\n----------------------------------------\n\nTITLE: Canceling a Shopify App Subscription in TypeScript\nDESCRIPTION: Example of how to cancel a Shopify app subscription using the shopify.billing.cancel method. It demonstrates handling the subscription ID, optional prorating, and error handling with BillingError.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/billing/cancel.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscriptionId = \"gid://shopify/AppSubscription/1234567890\"; // this can be obtained from a call to shopify.billing.subscriptions()\ntry {\n  const canceledSubscription = await shopify.billing.cancel({\n    session,\n    subscriptionId,\n    prorate: true,  // Whether to issue prorated credits for the unused portion of the app subscription. Defaults to true.\n  })\n} catch (error) {\n  if (error typeof BillingError) {\n    console.log(`Unable to cancel subscription ${subscriptionId}: ${JSON.stringify(error.errorData, null, 2)}`);\n    // handle error appropriately\n  }\n}\n// canceledSubscription will have the following shape:\n// {\n//   id: string;\n//   name: string;\n//   test: boolean;\n// }\n```\n\n----------------------------------------\n\nTITLE: Processing Webhooks with Process Method and Callback in Express\nDESCRIPTION: This example demonstrates using the shopify.webhooks.process method with a callback function to handle webhook events. The handler function is defined separately and referenced in the webhook configuration, allowing for custom processing of specific events.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/webhooks.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst handleWebhookRequest = async (\n  topic: string,\n  shop: string,\n  webhookRequestBody: string,\n  webhookId: string,\n  apiVersion: string,\n  context?: any,\n) => {\n  const sessionId = shopify.session.getOfflineId(shop);\n\n  // Run your webhook-processing code here!\n};\n\n// Add handlers for the events you want to subscribe to. You **MUST** set a callback function when calling `process`\nshopify.webhooks.addHandlers({\n  PRODUCTS_CREATE: [\n    {\n      deliveryMethod: DeliveryMethod.Http,\n      callbackUrl: '/webhooks',\n      callback: handleWebhookRequest,\n    },\n  ],\n});\n\n// Process webhooks\napp.post('/webhooks', express.text({type: '*/*'}), async (req, res) => {\n  try {\n    // Note: the express.text() given above is an Express middleware that will read\n    // in the body as a string, and make it available at req.body, for this path only.\n    await shopify.webhooks.process({\n      rawBody: req.body, // is a string\n      rawRequest: req,\n      rawResponse: res,\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Runtime Adapter Functions in TypeScript\nDESCRIPTION: Example showing implementation of custom runtime adapter functions for the Shopify API. Demonstrates setting up runtime string and header conversion functions with proper type definitions and abstract function implementations.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/runtimes.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  setAbstractConvertHeadersFunc,\n  setAbstractRuntimeString,\n  AbstractRuntimeStringFunc,\n  AbstractConvertHeadersFunc,\n  Headers,\n  AdapterArgs,\n} from '@shopify/shopify-api/runtime';\n\ntype MyRequestType = any;\ntype MyResponseType = any;\n\ninterface MyRuntimeAdapterArgs extends AdapterArgs {\n  rawRequest: MyRequestType;\n  rawResponse?: MyResponseType;\n}\n\nconst myRuntimeStringFunc: AbstractRuntimeStringFunc = () => {\n  return `My runtime adapter ${myAdapterVersion}`;\n};\nsetAbstractRuntimeString(myRuntimeStringFunc);\n\nconst myRuntimeHeaderFunc: AbstractConvertHeadersFunc = async (\n  headers: Headers,\n  adapterArgs: MyRuntimeAdapterArgs,\n) => {\n  return magicHeaderConversion(headers);\n};\nsetAbstractConvertHeadersFunc(myRuntimeHeaderFunc);\n```\n\n----------------------------------------\n\nTITLE: Querying Shop Information with Shopify Storefront API in TypeScript\nDESCRIPTION: This example demonstrates a simple query to retrieve basic shop information using the Shopify Storefront API client.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/storefront-api-client/README.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopQuery = `\n  query shop {\n    shop {\n      name\n      id\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(shopQuery);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger in Shopify API (TypeScript)\nDESCRIPTION: Example configuration of the logger property in the shopifyApi initialization. Shows how to set log severity level, enable timestamps and HTTP request logging, and provide a custom log function.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/logger.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {shopifyApi, LogSeverity} from '@shopify/shopify-api';\n\nconst shopify = shopifyApi({\n  // other configuration settings\n  logger: {\n    level: LogSeverity.Debug,\n    timestamps: true,\n    httpRequests: true,\n    log: async (severity, message) => {},\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query with Variables in TypeScript\nDESCRIPTION: This snippet demonstrates how to send a GraphQL query to the Shopify Admin API using variables. It shows how to define a query with a variable and pass the variable value in the request options.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/clients/Graphql.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.request(\n  `query GetProducts($first: Int!) {\n    products (first: $first) {\n      edges {\n        node {\n          id\n          title\n          descriptionHtml\n        }\n      }\n    }\n  }`,\n  {\n    variables: {\n      first: 10,\n    },\n  },\n);\nconsole.log(response.data, response.extensions);\n```\n\n----------------------------------------\n\nTITLE: Making API Requests with a Custom App Session\nDESCRIPTION: Demonstrates how to create a custom session for API requests in a store-specific app. Creates a session object using the customAppSession utility method and uses it to make REST API calls to retrieve store data.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/custom-store-app.md#2025-04-17_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst session = shopify.session.customAppSession(\"my-shop.myshopify.com\");\n\n// Use REST resources to make calls.\nconst { count: productCount } = await shopify.rest.Product.count({ session });\nconst { count: customerCount } = await shopify.rest.Customer.count({ session });\nconst { count: orderCount } = await shopify.rest.Order.count({ session });\n\nconsole.log(\n  `There are ${productCount} products, ${customerCount} customers, and ${orderCount} orders in the ${session.shop} store.`\n);\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Queries with Type Safety in TypeScript\nDESCRIPTION: Demonstrates how to execute GraphQL queries using client.request() and client.requestStream() with TypeScript type safety. Shows usage of auto-generated types and query printing.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/storefront-api-client/README.md#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {print} from 'graphql/language';\n\n// GQL operation types are usually auto generated during the application build\nimport {CollectionQuery, CollectionDeferredQuery} from 'types/appTypes';\nimport collectionQuery from './collectionQuery.graphql';\nimport collectionDeferredQuery from './collectionDeferredQuery.graphql';\n\nconst {data, errors, extensions} = await client.request<CollectionQuery>(\n  print(collectionQuery),\n  {\n    variables: {\n      handle: 'sample-collection',\n    },\n  }\n);\n\nconst responseStream = await client.requestStream<CollectionDeferredQuery>(\n  print(collectionDeferredQuery),\n  {\n    variables: {handle: 'sample-collection'},\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying for a Product using Shopify API JavaScript Client\nDESCRIPTION: This snippet demonstrates how to use the Shopify API JavaScript client to query for a product. It includes a GraphQL query for fetching product details and shows how to make the request with variables.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/graphql-client/README.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    handle: 'sample-product',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Values Using safeCompare in TypeScript\nDESCRIPTION: Demonstrates various usage examples of the safeCompare method, including comparing string arrays, different array contents, and handling type mismatches. Shows successful comparisons and error scenarios.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/auth/safeCompare.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst stringArray1 = ['alice', 'bob', 'charlie'];\nconst stringArray2 = ['alice', 'bob', 'charlie'];\n\nconst stringArrayResult = shopify.auth.safeCompare(stringArray1, stringArray2); // true\n\nconst array1 = ['one fish', 'two fish'];\nconst array2 = ['red fish', 'blue fish'];\nconst arrayResult = shopify.auth.safeCompare(array1, array2); // false\n\nconst arg1 = 'hello';\nconst arg2 = ['world'];\n\nconst argResult = shopify.auth.safeCompare(arg1, arg2); // throws SafeCompareError due to argument type mismatch\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Plan Billing Charges Based on User Selection\nDESCRIPTION: Example of a multi-plan billing setup where the plan is selected by the user on the frontend. The session is retrieved from storage using the session ID.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/billing/request.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/api/select-plan', async (req, res) => {\n  const sessionId = shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // In this example, getSessionFromStorage() must be provided by app\n  const session = await getSessionFromStorage(sessionId);\n\n  const confirmationUrl = await shopify.billing.request({\n    session,\n    // Receive the selected plan from the frontend\n    plan: req.body.selectedPlan,\n    isTest: true,\n  });\n\n  res.redirect(confirmationUrl);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Product using REST Client in TypeScript\nDESCRIPTION: Demonstrates how to update a product using a plain REST client, including fetching the product, modifying its title, and sending a PUT request to update it.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/rest-resources.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// App must provide response types\ninterface ProductResponse {\n  product: {\n    id: number;\n    title: string;\n    // ...\n  };\n}\n\nconst sessionId = await shopify.session.getCurrentId({\n  rawRequest: req,\n  rawResponse: res,\n});\n\n// use sessionId to retrieve session from app's session storage\n// getSessionFromStorage() must be provided by application\nconst session = await getSessionFromStorage(sessionId);\n\nconst client = new shopify.clients.Rest({session});\n\n// The following line sends a HTTP GET request to this constructed URL:\n// https://${session.shop}/admin/api/${shopify.config.api_version}/products/7504536535062.json\nconst response = await client.get<ProductResponse>({\n  path: 'products/7504536535062',\n});\n\n// Apps needs to dig into the response body to find the object\nresponse.body.product.title = 'A new title';\n\n// The following sends a HTTP PUT request to this constructed URL...\n// https://${session.shop}/admin/api/${shopify.config.api_version}/products/${response.body.product.id}.json\n// ... with this body\n// {\"product\":{\"id\":response.body.product.id,\"title\":\"A new title\"}}\nawait client.put({\n  path: `products/${response.body.product.id}`,\n  data: response.body.product,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Shopify OAuth Authentication in Node.js\nDESCRIPTION: Example of implementing the OAuth authentication flow in a Node.js application. The code shows how to handle the initial authentication request and redirect users to Shopify's authentication screen.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/auth/begin.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/auth', async (req, res) => {\n  // The library will automatically redirect the user\n  await shopify.auth.begin({\n    shop: shopify.utils.sanitizeShop(req.query.shop, true),\n    callbackPath: '/auth/callback',\n    isOnline: false,\n    rawRequest: req,\n    rawResponse: res,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to Shopify API Request\nDESCRIPTION: This snippet demonstrates how to add custom headers to a Shopify API request. It shows the process of including a 'Shopify-Storefront-Id' header when querying for a product.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/graphql-client/README.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    handle: 'sample-product',\n  },\n  headers: {\n    'Shopify-Storefront-Id': 'shop-id',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Item Billing in TypeScript\nDESCRIPTION: Example configuration for multiple line item billing with trial period and discounts. Demonstrates usage of the unstable_lineItemBilling future flag to specify both recurring and usage based app billing in a single request.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApp({\n  billing: {\n    MultipleLineItems: {\n      replacementBehavior: BillingReplacementBehavior.ApplyImmediately,\n      trialDays: 7,\n      lineItems: [\n        {\n          interval: BillingInterval.Usage,\n          amount: 30,\n          currencyCode: \"USD\",\n          terms: \"per 1000 emails\",\n        },\n        {\n          interval: BillingInterval.Every30Days,\n          amount: 30,\n          currencyCode: \"USD\",\n          discount: {\n            durationLimitInIntervals: 3,\n            value: {\n              amount: 10,\n            },\n          },\n        },\n      ],\n    },\n  },\n  futures: {\n    unstable_lineItemBilling: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Processing Webhooks with Validate Method in Express\nDESCRIPTION: This snippet shows how to add webhook handlers and process incoming webhooks using the shopify.webhooks.validate method in an Express application. It validates the webhook request and performs custom processing based on the topic and domain.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/webhooks.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Add handlers for the events you want to subscribe to. You don't need a callback if you're just using `validate`\nshopify.webhooks.addHandlers({\n  PRODUCTS_CREATE: [\n    {deliveryMethod: DeliveryMethod.Http, callbackUrl: '/webhooks'},\n  ],\n});\n\n// Handle webhooks\napp.post('/webhooks', express.text({type: '*/*'}), async (req, res) => {\n  const {valid, topic, domain} = await shopify.webhooks.validate({\n    rawBody: req.body, // is a string\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  if (!valid) {\n    console.error('Invalid webhook call, not handling it');\n    res.send(400); // Bad Request\n  }\n\n  console.log(`Received webhook for ${topic} for shop ${domain}`);\n\n  const sessionId = shopify.session.getOfflineId(domain);\n\n  // Run your webhook-processing code here!\n});\n```\n\n----------------------------------------\n\nTITLE: Processing Webhooks with Express in Node.js\nDESCRIPTION: Example showing how to handle Shopify webhooks in an Express app using the shopify.webhooks.process method. This implementation uses express.text() middleware to read the raw body as a string and passes it to the process method.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/webhooks/process.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/webhooks', express.text({type: '*/*'}), async (req, res) => {\n  try {\n    // Note: the express.text() given above is an Express middleware that will read\n    // in the body as a string, and make it available at req.body, for this path only.\n    await shopify.webhooks.process({\n      rawBody: req.body, // is a string\n      rawRequest: req,\n      rawResponse: res,\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Product Data with GraphQL in TypeScript\nDESCRIPTION: Demonstrates how to use the GraphQL client to query for a product's data, including ID, title, and handle. It also shows how to handle variables in the query.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/admin-api-client/README.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($id: ID!) {\n    product(id: $id) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    id: 'gid://shopify/Product/7608002183224',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Product Data with Shopify Admin REST API\nDESCRIPTION: Shows how to update a product's handle using the PUT method. Demonstrates proper data structure for update operations.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/admin-api-client/README.md#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.put(\"products/1234567890\",\n  {\n    data: {\n      product: {\n        handle: \"my-new-handle\",\n      }\n    }\n  }\n);\n\nif (response.ok) {\n  const body = await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shopify Type with Rest Resources in TypeScript (After v8)\nDESCRIPTION: Updated example of explicitly using the Shopify type with rest resources after v8, including the ConfigParams type.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v8.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  restResources,\n  ConfigParams,\n} from '@shopify/shopify-api/rest/admin/2023-10';\n\nconst myVariable: Shopify<ConfigParams, typeof restResources>;\n```\n\n----------------------------------------\n\nTITLE: Querying Product Data with Shopify Storefront API in TypeScript\nDESCRIPTION: This snippet demonstrates how to query for a product using the Shopify Storefront API client. It includes a GraphQL query for product details and shows how to make a request with variables.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/storefront-api-client/README.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    handle: 'sample-product',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Server-Enabled GraphQL Client\nDESCRIPTION: Initializing a client with custom fetch API for server-side usage using node-fetch\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/graphql-client/README.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createGraphQLClient} from '@shopify/graphql-client';\nimport {fetch as nodeFetch} from 'node-fetch';\n\nconst client = createGraphQLClient({\n  url: 'http://your-shop-name.myshopify.com/api/2023-10/graphql.json',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-Shopify-Storefront-Access-Token': 'public-token',\n  },\n  customFetchApi: nodeFetch\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Product Creator for Shopify API v6\nDESCRIPTION: Updates to the product creator helper to use the new shopify instance and error handling mechanisms from API v6.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-17_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n-import { Shopify } from \"@shopify/shopify-api\";\n+import { GraphqlQueryError } from \"@shopify/shopify-api\";\n+import shopify from \"../shopify.js\";\n[...remaining diff code...]\n```\n\n----------------------------------------\n\nTITLE: Registering Webhook Handlers in Shopify API JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Shopify API client, define a webhook handler function, and register multiple handlers for the PRODUCTS_CREATE topic using the HTTP delivery method.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/webhooks/addHandlers.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApi({\n  /* ... */\n});\n\nconst handleWebhookRequest = async (\n  topic: string,\n  shop: string,\n  webhookRequestBody: string,\n  webhookId: string,\n  apiVersion: string,\n) => {\n  const sessionId = shopify.session.getOfflineId(shop);\n\n  // Fetch the session from storage and process the webhook event\n};\n\nshopify.webhooks.addHandlers({\n  PRODUCTS_CREATE: [\n    {\n      deliveryMethod: DeliveryMethod.Http,\n      callbackUrl: '/webhooks',\n      callback: handleWebhookRequest,\n    },\n    {\n      deliveryMethod: DeliveryMethod.Http,\n      callbackUrl: '/webhooks',\n      callback: handleWebhookRequestPart2,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Webhooks in Shopify API v6 (TypeScript)\nDESCRIPTION: Shows how to register webhooks using the new register method, which now only requires the session object. The response structure has changed to include an array of results for each topic.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await shopify.webhooks.register({session: session});\n\n// Response will be a list indexed by topic:\nconsole.log(response[topic][0].success, response[topic][0].result);\n```\n\n----------------------------------------\n\nTITLE: Querying Product Info with @defer Directive in Shopify API\nDESCRIPTION: This example shows how to use the @defer directive in a GraphQL query to fetch product information. It demonstrates the use of client.requestStream for handling deferred fields and processing the response as an async iterator.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/graphql-client/README.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      handle\n      ... @defer(label: \"deferredFields\") {\n        title\n        description\n      }\n    }\n  }\n`;\n\nconst responseStream = await client.requestStream(productQuery, {\n  variables: {handle: 'sample-product'},\n});\n\n// await available data from the async iterator\nfor await (const response of responseStream) {\n  const {data, errors, extensions, hasNext} = response;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Proxy Route in a Shopify App\nDESCRIPTION: Example of creating an Express route that forwards GraphQL requests to Shopify Admin API. This demonstrates retrieving the current session ID, fetching the session from storage, and using the graphqlProxy client to forward the request.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/clients/graphqlProxy.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/graphql/proxy', async (req, res) => {\n  const sessionId = await shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // getSessionFromStorage() must be provided by application\n  const session = await getSessionFromStorage(sessionId);\n\n  const response = await shopify.clients.graphqlProxy({\n    session,\n    rawBody: req.rawBody, // From my app\n  });\n\n  res.send(response.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Billing Helper for Shopify API v6\nDESCRIPTION: New implementation of billing helper using Shopify API v6's built-in billing support. Handles checking and requesting payments for app usage.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport shopify from '../shopify.js';\n\nexport default async function ensureBilling(\n  session,\n  isProdOverride = process.env.NODE_ENV === 'production',\n) {\n[...remaining code...]\n```\n\n----------------------------------------\n\nTITLE: Saving a Session to Storage in Shopify API JS\nDESCRIPTION: This snippet demonstrates how to save a session to storage after completing OAuth using shopify.auth.callback. It shows how to convert the Session object to a plain JavaScript object for storage.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/session-storage.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst callbackResponse = shopify.auth.callback({\n  rawRequest: req,\n  rawResponse: res,\n});\n\n// app stores Session in its own storage mechanism\nawait addSessionToStorage(callbackResponse.session.toObject());\n```\n\n----------------------------------------\n\nTITLE: Initializing Server-Side Client with Private Access Token\nDESCRIPTION: TypeScript code showing how to create a server-enabled client using a private access token and a custom Fetch API implementation for server-to-server communication.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/storefront-api-client/README.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createStorefrontApiClient, CustomFetchApi} from '@shopify/storefront-api-client';\nimport {fetch as nodeFetch} from 'node-fetch';\n\nconst client = createStorefrontApiClient({\n  storeDomain: 'http://your-shop-name.myshopify.com',\n  apiVersion: '2023-10',\n  privateAccessToken: 'your-storefront-private-access-token',\n  customFetchApi: nodeFetch,\n});\n```\n\n----------------------------------------\n\nTITLE: Making Typed GET Request with TypeScript Generics\nDESCRIPTION: Demonstrates how to use TypeScript generics to cast the response body to a specific type. This pattern allows for better type safety when working with the API response data.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/clients/Rest.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyResponseBodyType {\n  products: {\n    /* ... */\n  };\n}\n\nconst response = await client.get<MyResponseBodyType>({\n  path: 'products',\n});\n\n// response.body will be of type MyResponseBodyType\nconsole.log(response.body.products);\n```\n\n----------------------------------------\n\nTITLE: Processing Webhooks in Cloudflare Workers Environment\nDESCRIPTION: This snippet demonstrates how to process Shopify webhooks in a Cloudflare Workers serverless environment. It extracts the request body and passes it to the webhooks.process method along with context information specific to Cloudflare Workers.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/webhooks.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function handleFetch(\n  request: Request,\n  env: unknown,\n  context: any,\n): Promise<Response> {\n  try {\n    await shopify.webhooks.process({\n      context: {env, ...context}, // is object or undefined\n      rawBody: await request.text(), // is a string\n      rawRequest: request,\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Session to Property Array with User Data in Shopify API JS\nDESCRIPTION: This snippet demonstrates the use of the toPropertyArray method to convert a Session object into an array of key-value pairs, including associated user data. It shows the structure of the resulting array when returnUserData is set to true.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/session-storage.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst {session, headers} = shopify.auth.callback({\n  rawRequest: req,\n  rawResponse: res,\n});\n/*\n  If session has the following data content...\n  {\n    id: 'online_session_id',\n    shop: 'online-session-shop',\n    state: 'online-session-state',\n    isOnline: true,\n    scope: 'online-session-scope',\n    accessToken: 'online-session-token',\n    expires: 2022-01-01T05:00:00.000Z,  // Date object\n    onlineAccessInfo: {\n      expires_in: 1,\n      associated_user_scope: 'online-session-user-scope',\n      associated_user: {\n        id: 1,\n        first_name: 'online-session-first-name',\n        last_name: 'online-session-last-name',\n        email: 'online-session-email',\n        locale: 'online-session-locale',\n        email_verified: true,\n        account_owner: true,\n        collaborator: false,\n      },\n    }\n  }\n */\n\nconst sessionProperties = session.toPropertyArray(true);\n/*\n  ... then sessionProperties will have the following data...\n   [\n    ['id', 'online_session_id'],\n    ['shop', 'online-session-shop'],\n    ['state', 'online-session-state'],\n    ['isOnline', true],\n    ['scope', 'online-session-scope'],\n    ['accessToken', 'online-session-token'],\n    ['expires', 1641013200000],  // example = January 1, 2022, as number of milliseconds since Jan 1, 1970\n    ['userId', 1],\n    ['first_name', 'online-session-first-name'],\n    ['last_name', 'online-session-last-name'],\n    ['email', 'online-session-email'],\n    ['locale', 'online-session-locale'],\n    ['email_verified', false]\n    ['account_owner', true,]\n    ['collaborator', false],\n    ],\n */\n```\n\n----------------------------------------\n\nTITLE: Making a GraphQL Request to Storefront API in TypeScript\nDESCRIPTION: Example of how to make a GraphQL query to the Storefront API using the client's request method. This query fetches the first 10 products with their id, title, and descriptionHtml fields.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/clients/Storefront.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst products = await storefrontClient.request(\n  `{\n    products (first: 10) {\n      edges {\n        node {\n          id\n          title\n          descriptionHtml\n        }\n      }\n    }\n  }`,\n);\n\n// do something with the returned data\n```\n\n----------------------------------------\n\nTITLE: Creating Custom App Session in TypeScript\nDESCRIPTION: Demonstrates how to create a new Session instance for a store-specific custom Shopify app. The session is initialized with an empty id and state, the sanitized shop URL, and isOnline set to false. The shop parameter is validated before use.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/session/customAppSession.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst session = new Session({\n  id: '',\n  shop: `${sanitizeShop(config)(shop, true)}`,\n  state: '',\n  isOnline: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Fulfillment Service Requests with Shopify API in TypeScript\nDESCRIPTION: Example of using shopify.fulfillmentService.validate to check the authenticity of incoming fulfillment requests. The method takes the raw request body, request object, and response object as parameters and returns validation results including validity status and error reason if invalid.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/fulfillment-service/validate.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/fulfillment_order_notification', express.text({type: '*/*'}), async (req, res) => {\n  const result = await shopify.fulfillmentService.validate({\n    rawBody: req.body, // is a string\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  if (!result.valid) {\n    console.log(`Received invalid fulfillment service request: ${result.reason}`);\n    res.send(400);\n  }\n\n  res.send(200);\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting Shopify Session ID from Request\nDESCRIPTION: Example showing how to extract a Shopify session ID from an HTTP request and use it to retrieve the full session from storage. The method accepts parameters including isOnline flag, rawRequest, and rawResponse objects.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/session/getCurrentId.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/fetch-some-data', async (req, res) => {\n  const sessionId = await shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // getSessionFromStorage() must be provided by application\n  const session = await getSessionFromStorage(sessionId);\n\n  // Build a client and make requests with session.accessToken\n  // See the REST, GraphQL, or Storefront API documentation for more information\n});\n```\n\n----------------------------------------\n\nTITLE: Building Embedded App URL in Express.js with Shopify API (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the shopify.auth.buildEmbeddedAppUrl function in an Express.js route handler. It constructs a redirection URL using the host query parameter and redirects the user to the resulting Shopify address.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/auth/buildEmbeddedAppUrl.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/redirect/endpoint', (req, res) => {\n  const redirectURL = shopify.auth.buildEmbeddedAppUrl(req.query.host);\n\n  res.redirect(redirectURL);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Billing Charges After OAuth Completion in Shopify\nDESCRIPTION: Example of creating a billing charge immediately after OAuth completes. The method redirects the merchant to a confirmation URL where they can approve the charge.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/billing/request.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/auth/callback', async () => {\n  const callback = await shopify.auth.callback({\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // Check if we require payment, using shopify.billing.check()\n\n  const confirmationUrl = await shopify.billing.request({\n    session: callback.session,\n    plan: 'My billing plan',\n    isTest: true,\n  });\n\n  res.redirect(confirmationUrl);\n});\n```\n\n----------------------------------------\n\nTITLE: Using getOfflineId in a Webhook Handler in TypeScript\nDESCRIPTION: Example of retrieving an offline session ID for a shop in a webhook handler. This allows for authenticated API calls in background tasks. The method requires a shop parameter and returns a session ID string that can be used to load a stored session.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/session/getOfflineId.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function myWebhookHandler(topic, shop) {\n  const offlineSessionId = await shopify.session.getOfflineId(shop);\n\n  // use sessionId to retrieve session from app's session storage\n  // getSessionFromStorage() must be provided by application\n  const session = await getSessionFromStorage(offlineSessionId);\n\n  // Perform webhook actions\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Billing Middleware with Object Return in Shopify API\nDESCRIPTION: Example implementation using the returnObject parameter to get detailed payment information. This approach provides access to additional data like one-time purchases and app subscriptions, along with their properties.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/billing/check.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// This can happen at any point after the merchant goes through the OAuth process, as long as there is a session object\n// The session can be retrieved from storage using the session id returned from shopify.session.getCurrentId\nasync function billingMiddleware(req, res, next) {\n  const sessionId = shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // In this example, getSessionFromStorage() must be provided by app\n  const session = await getSessionFromStorage(sessionId);\n\n  const payments = await shopify.billing.check({\n    session,\n    plans: ['My billing plan'],\n    isTest: true,\n    returnObject: true,\n  });\n\n  // With `returnObject` set to `true, `payments` now has the following shape:\n  // {\n  //   hasActivePayment: boolean;\n  //   oneTimePurchases: OneTimePurchase[];\n  //   appSubscriptions: AppSubscription[];\n  // }\n  //\n  // OneTimePurchase has the following properties:\n  // {\n  //   id: string;\n  //   name: string;\n  //   test: boolean;\n  //   status: string;\n  // }\n\n  // AppSubscription has the properties...\n  // {\n  //   id: string;\n  //   name: string;\n  //   test: boolean;\n  // }\n\n  if (payments.hasActivePayment) {\n    next();\n  } else {\n    // Either request payment now (if single plan) or redirect to plan selection page (if multiple plans available), e.g.\n    const billingResponse = await shopify.billing.request({\n      session,\n      plan: 'My billing plan',\n      isTest: true,\n      returnObject: true,\n    });\n\n    res.redirect(billingResponse.confirmationUrl);\n  }\n}\n\napp.use('/requires-payment/*', billingMiddleware);\n```\n\n----------------------------------------\n\nTITLE: Making GET Request to Shopify Admin API\nDESCRIPTION: Sends a GET request to fetch products from the Shopify Admin API. This example shows a simple GET request to the products endpoint and how to access the response headers and body.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/clients/Rest.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst getResponse = await client.get({\n  path: 'products',\n});\nconsole.log(getResponse.headers, getResponse.body);\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Host Values in Shopify API\nDESCRIPTION: Demonstrates how to use the sanitizeHost utility method to validate and clean host values from request query parameters. The method accepts a host string and an optional boolean flag to throw errors on invalid hosts.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/utils/sanitizeHost.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst host = shopify.utils.sanitizeHost(req.query.host, true);\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Embedded App URL in Shopify using TypeScript\nDESCRIPTION: Example showing how to use shopify.auth.getEmbeddedAppUrl to properly redirect a request to an embedded Shopify app. This method ensures the embedded app URL is constructed correctly based on the host parameter that comes from Shopify.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/auth/getEmbeddedAppUrl.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/redirect/endpoint', async (req, res) => {\n  const redirectURL = await shopify.auth.getEmbeddedAppUrl({\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  res.redirect(redirectURL);\n});\n```\n\n----------------------------------------\n\nTITLE: Validating a Shopify Shop Domain with sanitizeShop in TypeScript\nDESCRIPTION: Example of using the sanitizeShop utility method to validate a shop domain from a request query parameter. When throwOnInvalid is set to true, it will throw an error if the shop domain is invalid.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/utils/sanitizeShop.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst shop = shopify.utils.sanitizeShop(req.query.shop, true);\n```\n\n----------------------------------------\n\nTITLE: Creating Online Session ID from JWT in TypeScript\nDESCRIPTION: This function extracts a JWT token from an authorization header, decodes it, and uses shopify.session.getJwtSessionId to generate a session ID for online token access. It demonstrates how to extract the shop and user ID from the JWT token.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/session/getJwtSessionId.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getOnlineSessionId(request: Request) {\n  const token = request.headers.get('authorization').replace('Bearer ', '');\n  const jwt = await api.session.decodeSessionToken(token);\n  const dest = new URL(jwt.dest);\n  const shop = dest.hostname;\n  const userId = jwt.sub;\n  const sessionId = api.session.getJwtSessionId(shop, userId);\n\n  return sessionId;\n}\n```\n\n----------------------------------------\n\nTITLE: Making POST Request to Shopify Admin API\nDESCRIPTION: Sends a POST request to create a new product in the Shopify Admin API. This example demonstrates how to include data in the request body to specify the product details.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/clients/Rest.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst postResponse = await client.post({\n  path: 'products',\n  data: {\n    title: 'My product title',\n  },\n});\nconsole.log(postResponse.headers, postResponse.body);\n```\n\n----------------------------------------\n\nTITLE: Validating Shopify Flow Extension Requests with Express.js\nDESCRIPTION: Example of how to integrate Shopify Flow validation in an Express.js endpoint. The code validates an incoming Flow extension request, checks if it's valid, and handles the response accordingly.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/flow/validate.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/flow', express.text({type: '*/*'}), async (req, res) => {\n  const result = await shopify.flow.validate({\n    rawBody: req.body, // is a string\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  if (!result.valid) {\n    console.log(`Received invalid Flow extension request: ${result.reason}`);\n    res.send(400);\n  }\n\n  res.send(200);\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing JWT Session Token in Express Route Handler (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the shopify.session.decodeSessionToken method in an Express route handler to parse a JWT session token from the Authorization header. The parsed payload can then be used for further processing.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/session/decodeSessionToken.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/fetch-some-data', async (req, res) => {\n  const authorizationHeader = req.header('Authorization');\n  const token = authorizationHeader.replace('Bearer ', '');\n  const payload = await shopify.session.decodeSessionToken(token);\n\n  // Use the payload data\n});\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Client with Request Method in Version 9\nDESCRIPTION: Example of using the new request method with the GraphQL client in version 9, showing the updated parameter structure and response handling.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v9.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new shopify.clients.Graphql({session});\nconst response = await client.request(QUERY, {\n  variables: {first: 1},\n  headers: {myHeader: '1'},\n  retries: 2,\n});\nconsole.log(response.data, response.extensions);\n```\n\n----------------------------------------\n\nTITLE: Overriding Billing Plan Configuration at Request Time\nDESCRIPTION: Example showing how to override specific billing configuration fields when making a billing request, such as trial days and amount, regardless of what was set in the plan configuration.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/billing/request.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst billingResponse = await shopify.billing.request({\n  session: callback.session,\n  plan: 'My billing plan',\n  returnObject: true,\n  isTest: true,\n  trialDays: 4, // Overrides the trial days set in 'My billing plan'\n  amount: 13, // Overrides the amount set in 'My billing plan'\n});\n\nres.redirect(billingResponse.confirmationUrl);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to API Requests\nDESCRIPTION: Demonstrates how to add custom headers to API requests using the headers option in the request configuration.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/admin-api-client/README.md#2025-04-17_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.get(\"products/1234567890\",\n  {\n    headers: {\n      'X-My-Custom-Header': \"1\",\n    },\n  }\n);\n\nif (response.ok) {\n  const body = await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Offline Session Loading in TypeScript\nDESCRIPTION: Shows the migration of offline session loading to a simplified function that returns session ID.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst session = await Shopify.Utils.loadOfflineSession(\n  'my-shop.myshopify.com',\n  true,\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionId = await shopify.session.getOfflineId(\n  'my-shop.myshopify.com'\n);\n```\n\n----------------------------------------\n\nTITLE: Validating Shopify Webhooks in Express.js with TypeScript\nDESCRIPTION: This snippet demonstrates how to use the shopify.webhooks.validate method in an Express.js application to validate incoming Shopify webhook requests. It shows how to handle the request, check its validity, and process it accordingly.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/webhooks/validate.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/webhooks', express.text({type: '*/*'}), async (req, res) => {\n  const {valid, topic, domain} = await shopify.webhooks.validate({\n    rawBody: req.body, // is a string\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  if (!valid) {\n    // This is not a valid request!\n    res.send(400); // Bad Request\n  }\n\n  // Run my webhook-processing code here\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Abstract Fetch Function in Version 9\nDESCRIPTION: Example showing how to create a custom fetch function implementation in version 9 when a standard fetch implementation isn't available.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v9.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AbstractFetchFunc,\n  setAbstractFetchFunc,\n} from '@shopify/shopify-api/runtime';\n\nconst convertFetch: AbstractFetchFunc = (url, init) => {\n  // Make the actual request\n\n  return new Response(/* ... */);\n};\n\nsetAbstractFetchFunc(convertFetch);\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Products using REST Resources in TypeScript\nDESCRIPTION: Demonstrates how to fetch all products using the REST resources' all method, including handling of pagination information and response headers.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/rest-resources.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Session is built by the OAuth process\n\nconst products = await shopify.rest.Product.all({\n  session: session,\n});\n\n// The list of products\nconsole.log(products.data);\n\n// The pagination information\nconsole.log(products.pageInfo);\n\n// The response headers\nconsole.log(products.headers);\n```\n\n----------------------------------------\n\nTITLE: API Client Initialization - TypeScript\nDESCRIPTION: Shows the updated initialization pattern for REST, GraphQL, and Storefront API clients using object parameters instead of positional arguments.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst restClient = new shopify.clients.Rest({session});\nconst graphqlClient = new shopify.clients.Graphql({session});\nconst storefrontClient = new shopify.clients.Storefront({\n  domain: session.shop,\n  storefrontAccessToken,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Admin API Version Dynamically in GraphQL Query\nDESCRIPTION: Shows how to dynamically set the Admin API version for a specific data fetch using the GraphQL client. This allows for version-specific queries.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/admin-api-client/README.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($id: ID!) {\n    product(id: $id) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    id: 'gid://shopify/Product/7608002183224',\n  },\n  apiVersion: '2023-01',\n});\n```\n\n----------------------------------------\n\nTITLE: Validating OAuth Request HMAC in TypeScript\nDESCRIPTION: Demonstrates how to validate the HMAC signature for OAuth requests using the shopify.utils.validateHmac method. Takes query parameters as input and returns a boolean indicating validity.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/utils/validateHmac.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst isValid = await shopify.utils.validateHmac(req.query);\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Proxy Implementation with Express\nDESCRIPTION: Example showing the breaking change in GraphQL Proxy function implementation where developers now need to handle the response themselves when using Express. Shows before and after code examples.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Before:\napp.post(\"/graphql\", async (req, res) => {\n  await Shopify.Utils.graphqlProxy(req, res);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After:\napp.post(\"/graphql\", async (req, res) => {\n  const response = await Shopify.Utils.graphqlProxy(req, res);\n  res.status(200).send(response.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Active Subscriptions for Current Shop in Shopify API (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the shopify.billing.subscriptions function to retrieve a list of active subscriptions for the current shop. It includes session handling and shows the expected structure of the returned data.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/billing/subscriptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/api/list-subscriptions', async (req, res) => {\n  const sessionId = shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // In this example, getSessionFromStorage() must be provided by app\n  const session = await getSessionFromStorage(sessionId);\n\n  // return the list of currently active subscriptions for the shop\n  // referenced in the current session\n  const activeSubscriptions = await shopify.billing.subscriptions({\n    session,\n  });\n\n  // activeSubscriptions will be an array of subscription details, e.g.,\n  // [\n  //   {\n  //     \"name\": \"My Active Subscription Charge\",\n  //     \"id\": \"gid://shopify/AppSubscription/1234567890\",\n  //     \"test\": false\n  //   },\n  //   {\n  //     \"name\": \"My Test Subscription Charge\",\n  //     \"id\": \"gid://shopify/AppSubscription/1234567890\",\n  //     \"test\": true\n  //   },\n  // ],\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Product Data with Shopify Admin REST API\nDESCRIPTION: Demonstrates how to fetch a product by ID using the Admin REST API client's GET method. Includes response handling and JSON parsing.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/admin-api-client/README.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.get(\"products/1234567890\");\n\nif (response.ok) {\n  const body = await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic API Version in Shopify Storefront API Request\nDESCRIPTION: This snippet shows how to dynamically set the Storefront API version for a specific request using the apiVersion option in the request method.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/storefront-api-client/README.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    handle: 'sample-product',\n  },\n  apiVersion: '2023-07',\n});\n```\n\n----------------------------------------\n\nTITLE: Processing Webhooks in CloudFlare Workers Environment\nDESCRIPTION: Example demonstrating webhook processing in a worker environment like CloudFlare Workers. In this environment, the process method returns a Response object that can be used to reply to Shopify, and error handling captures the response from errors.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/webhooks/process.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet response: Response;\n\ntry {\n  response = await shopify.webhooks.process({\n    rawBody: req.body,\n    rawRequest: req,\n    rawResponse: res,\n  });\n} catch (error) {\n  console.log(error.message);\n  response = error.response;\n}\nreturn response;\n```\n\n----------------------------------------\n\nTITLE: Generating Authentication Nonce with Shopify API\nDESCRIPTION: Demonstrates how to generate a cryptographically random 15-character nonce string using the Shopify Auth API. This nonce is typically used for securing authentication flows and validating request/response pairs in cookies.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/auth/nonce.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = shopify.auth.nonce();\n```\n\n----------------------------------------\n\nTITLE: Configuring a One-Time Charge in Shopify API\nDESCRIPTION: Sets up a one-time billing charge of $30 USD for a Shopify app. This configuration is used when the app needs to charge merchants once rather than on a recurring basis.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/billing.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  shopifyApi,\n  BillingInterval,\n  BillingReplacementBehavior,\n} from '@shopify/shopify-api';\n\nconst shopify = shopifyApi({\n  // ...\n  billing: {\n    {\n    \"One Time Charge\": {\n      interval: BillingInterval.OneTime,\n      amount: 30,\n      currencyCode: \"USD\",\n    },\n  },\n}\nfuture: {\n  v10_lineItemBilling: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Canceling a Subscription in Shopify API (JavaScript)\nDESCRIPTION: This code snippet shows how to cancel a subscription using the Shopify API. It requires a session object and the subscription ID. The cancel method returns an AppSubscription object with details of the canceled subscription.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/billing.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// using the example activeSubscriptions response above...\nconst subscriptionId = activeSubscriptions[0].id; // \"gid://shopify/AppSubscription/1234567890\"\nconst canceledSubscription = await shopify.billing.cancel({\n  session,\n  subscriptionId,\n  prorate: true, // Whether to issue prorated credits for the unused portion of the app subscription. Defaults to true.\n});\n\n// canceledSubscription will have the following shape:\n// {\n//   id: string;\n//   name: string;\n//   test: boolean;\n// }\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Retry Count in Shopify Storefront API Request\nDESCRIPTION: This snippet illustrates how to dynamically set the number of retries for a specific Shopify Storefront API request using the retries option in the request method.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/storefront-api-client/README.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    handle: 'sample-product',\n  },\n  retries: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Current Session from Storage in TypeScript\nDESCRIPTION: Demonstrates how to retrieve a session ID from the current request and load the corresponding session from storage for use with Shopify API clients.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/session-storage.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionId = await shopify.session.getCurrentId({\n  isOnline: true,\n  rawRequest: req,\n  rawResponse: res,\n});\n\n// use sessionId to retrieve session from app's session storage\n// getSessionFromStorage() must be provided by application\nconst session = await getSessionFromStorage(sessionId);\n\nconst restClient = new shopify.clients.Rest({session});\n\n// do something with restClient...\n```\n\n----------------------------------------\n\nTITLE: Streaming Product Data with @defer Directive in Shopify Storefront API\nDESCRIPTION: This example shows how to use the @defer directive in a GraphQL query to stream product information. It demonstrates the usage of the requestStream method and how to handle the async iterator response.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/storefront-api-client/README.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      handle\n      ... @defer(label: \"deferredFields\") {\n        title\n        description\n      }\n    }\n  }\n`;\n\nconst responseStream = await client.requestStream(productQuery, {\n  variables: {handle: 'sample-product'},\n});\n\n// await available data from the async iterator\nfor await (const response of responseStream) {\n  const {data, errors, extensions, hasNext} = response;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking API Version Compatibility in Shopify API (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the versionCompatible method to check if a specific API version is compatible with the configured version. It initializes a shopifyApi object with a specific version and then performs a compatibility check.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/utils/versionCompatible.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApi({\n  apiVersion: ApiVersion.July22,\n});\n\nif (shopify.utils.versionCompatible(ApiVersion.January22)) {\n  // true in this example, as ApiVersion.July22 is newer than ApiVersion.January22\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing with Public Access Token in TypeScript\nDESCRIPTION: TypeScript code demonstrating how to initialize the Storefront API Client using a public access token for client-side applications.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/storefront-api-client/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createStorefrontApiClient} from '@shopify/storefront-api-client';\n\nconst client = createStorefrontApiClient({\n  storeDomain: 'http://your-shop-name.myshopify.com',\n  apiVersion: '2023-10',\n  publicAccessToken: 'your-storefront-public-access-token',\n});\n```\n\n----------------------------------------\n\nTITLE: Session Creation and Cloning - TypeScript\nDESCRIPTION: Shows the changes in Session object creation and cloning functionality. The new implementation uses an object parameter approach instead of positional arguments.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Session} from '@shopify/shopify-api';\nconst session = new Session({\n  id: 'session-id',\n  shop: 'shop.myshopify.com',\n  state: 'state1234',\n  isOnline: true,\n  accessToken: 'token',\n});\nconst clone = new Session({...session, id: 'newId'});\n```\n\n----------------------------------------\n\nTITLE: Implementing Shopify Auth Callback in Cloudflare Workers\nDESCRIPTION: Example of handling Shopify's OAuth callback in a Cloudflare Workers environment. Shows how to process the callback request, handle headers, and implement redirection.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/auth/callback.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function handleFetch(request: Request): Promise<Response> {\n  const callback = await shopify.auth.callback<Headers>({\n    rawRequest: request,\n  });\n\n  // You can now use callback.session to make API requests\n\n  // The callback returns some HTTP headers, but you can redirect to any route here\n  return new Response('', {\n    status: 302,\n    // Headers are of type [string, string][]\n    headers: [...callback.headers, ['Location', '/my-apps-entry-page']],\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating validateHmac Function in TypeScript\nDESCRIPTION: Shows the migration from synchronous to asynchronous validation of HMAC using the Shopify API.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst isValid = Shopify.Utils.validateHmac(req.query);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst isValid = await shopify.utils.validateHmac(req.query);\n```\n\n----------------------------------------\n\nTITLE: Using versionPriorTo Method in Shopify API TypeScript\nDESCRIPTION: Demonstrates how to use the versionPriorTo utility method to compare API versions. The example shows initialization of the Shopify API client and two comparison scenarios - comparing against the same version and a newer version.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/utils/versionPriorTo.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApi({\n  apiVersion: ApiVersion.July23,\n});\n\nif (shopify.utils.versionPriorTo(ApiVersion.July23)) {\n  // false in this example, as both versions are July23\n}\nif (shopify.utils.versionPriorTo(ApiVersion.October23)) {\n  // true in this example, as ApiVersion.October23 is newer than ApiVersion.July23, i.e. the configured version is older\n  // than the reference one\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Billing Middleware with Boolean Return in Shopify API\nDESCRIPTION: Example implementation of a middleware function that checks if a merchant has an active payment for a specified plan. If payment exists, the request proceeds; otherwise, it redirects to a payment request flow.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/billing/check.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// This can happen at any point after the merchant goes through the OAuth process, as long as there is a session object\n// The session can be retrieved from storage using the session id returned from shopify.session.getCurrentId\nasync function billingMiddleware(req, res, next) {\n  const sessionId = shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // In this example, getSessionFromStorage() must be provided by app\n  const session = await getSessionFromStorage(sessionId);\n\n  const hasPayment = await shopify.billing.check({\n    session,\n    plans: ['My billing plan'],\n    isTest: true,\n  });\n\n  if (hasPayment) {\n    next();\n  } else {\n    // Either request payment now (if single plan) or redirect to plan selection page (if multiple plans available), e.g.\n    const confirmationUrl = await shopify.billing.request({\n      session,\n      plan: 'My billing plan',\n      isTest: true,\n    });\n\n    res.redirect(confirmationUrl);\n  }\n}\n\napp.use('/requires-payment/*', billingMiddleware);\n```\n\n----------------------------------------\n\nTITLE: Validating App Proxy Request Signature in TypeScript\nDESCRIPTION: Shows how to validate the signature for App Proxy requests using shopify.utils.validateHmac with the appProxy signator option. Takes query parameters and configuration options as input.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/utils/validateHmac.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst isValid = await shopify.utils.validateHmac(req.query, {\n  signator: 'appProxy',\n});\n```\n\n----------------------------------------\n\nTITLE: Making DELETE Request to Shopify Admin API\nDESCRIPTION: Sends a DELETE request to remove a specific product from the Shopify Admin API. This example shows how to delete a product by specifying its ID in the path parameter.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/clients/Rest.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst deleteResponse = await client.delete({\n  path: 'products/123456',\n});\nconsole.log(deleteResponse.headers, deleteResponse.body);\n```\n\n----------------------------------------\n\nTITLE: Error Handling Updates - TypeScript\nDESCRIPTION: Demonstrates the enhanced error handling with additional error information available in the response object.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ncatch (err) {\n  if (err instanceof HttpResponseError) {\n    console.log(err.response.code, err.response.statusText, err.response);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Session Activity Check - TypeScript\nDESCRIPTION: Demonstrates the updated session activity verification process which now requires passing scopes parameter and handling session storage independently.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionId = await shopify.session.getCurrentId({\n  isOnline: true,\n  rawRequest: req,\n  rawResponse: res,\n});\n\n// use sessionId to retrieve session from app's session storage\n// getSessionFromStorage() must be provided by application\nconst session = await getSessionFromStorage(sessionId);\n\nif (!session.isActive(shopify.config.scopes)) {\n  // current session is not active - either expired or scopes have changed\n}\n```\n\n----------------------------------------\n\nTITLE: Shopify API Configuration Setup\nDESCRIPTION: New shopify.js file configuration with API initialization, billing setup, and runtime adapter configuration.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@shopify/shopify-api/adapters/node';\nimport {\n  shopifyApi,\n  BillingInterval,\n  LATEST_API_VERSION,\n  LogSeverity,\n} from '@shopify/shopify-api';\nlet {restResources} = await import(\n  `@shopify/shopify-api/rest/admin/${LATEST_API_VERSION}`\n);\n\nconst billingConfig = {\n  'My Shopify One-Time Charge': {\n    amount: 5.0,\n    currencyCode: 'USD',\n    interval: BillingInterval.OneTime,\n  },\n};\n\nconst apiConfig = {\n  apiKey: process.env.SHOPIFY_API_KEY,\n  apiSecretKey: process.env.SHOPIFY_API_SECRET,\n  scopes: process.env.SCOPES.split(','),\n  hostName: process.env.HOST.replace(/https?:\\/\\//, ''),\n  hostScheme: process.env.HOST.split('://')[0],\n  apiVersion: LATEST_API_VERSION,\n  isEmbeddedApp: true,\n  ...(process.env.SHOP_CUSTOM_DOMAIN && {\n    customShopDomains: [process.env.SHOP_CUSTOM_DOMAIN],\n  }),\n  billing: undefined,\n  restResources,\n};\n\nconst shopify = shopifyApi(apiConfig);\nexport default shopify;\n```\n\n----------------------------------------\n\nTITLE: GDPR Webhooks Update\nDESCRIPTION: Updates to the GDPR webhooks configuration using the new v6 webhook handler structure.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-17_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-import { Shopify } from \"@shopify/shopify-api\";\n+import { DeliveryMethod } from \"@shopify/shopify-api\"\n+import shopify from \"./shopify.js\";\n\n-export function setupGDPRWebHooks(path) {\n-  Shopify.Webhooks.Registry.addHandler(\"CUSTOMERS_DATA_REQUEST\", {\n-    path,\n-    webhookHandler: async (topic, shop, body) => {\n-      const payload = JSON.parse(body);\n+export async function setupGDPRWebHooks(path) {\n+  await shopify.webhooks.addHandlers({\n+    CUSTOMERS_DATA_REQUEST: {\n+      deliveryMethod: DeliveryMethod.Http,\n+      callbackUrl: path,\n+      callback: async (topic, shop, body) => {\n+        const payload = JSON.parse(body);\n      },\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting Retry Count for GraphQL API Requests\nDESCRIPTION: Demonstrates how to dynamically set the number of retries for a specific GraphQL API request, which can be useful for handling temporary network issues or rate limiting.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/admin-api-client/README.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    handle: 'sample-product',\n  },\n  retries: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Webhooks - After\nDESCRIPTION: New approach to webhook error handling with direct error imports\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {InvalidWebhookError} from '@shopify/shopify-api';\n\napp.post('/webhooks', async (req, res) => {\n  try {\n    await shopify.webhooks.process({\n      rawBody: (req as any).rawBody,\n      rawRequest: req,\n      rawResponse: res,\n    });\n  } catch (error) {\n    if (error instanceof InvalidWebhookError) {\n      console.log(`Webhook processing error:\\n\\tmessage = ${error.message}\\n\\tresponse = ${error.response}`);\n    } else {\n      console.log('Other error:\\n\\t', error);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Billing Configuration and Checking - TypeScript\nDESCRIPTION: Shows the new billing configuration format and separated check/request methods for handling subscription plans.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApi({\n  // ...\n  billing: {\n    'My plan': {\n      amount: 5.0,\n      currencyCode: 'USD',\n      interval: BillingInterval.Every30Days,\n    },\n  },\n});\n\nconst hasPayment = await shopify.billing.check({\n  session,\n  plans: 'My plan',\n  isTest: true,\n});\n\nif (!hasPayment) {\n  const confirmationUrl = await shopify.billing.request({\n    session,\n    plan: 'My plan',\n    isTest: true,\n  });\n  return redirect(confirmationUrl);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking OAuth Scope Changes in TypeScript\nDESCRIPTION: Code snippet demonstrating how to verify if an app's OAuth scopes have changed, which would require re-authentication. This check compares the current session scope with configured scopes.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/oauth.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst session: Session; // Loaded from one of the methods above\n\nif (!shopify.config.scopes.equals(session.scope)) {\n  // Scopes have changed, the app should redirect the merchant to OAuth\n}\n```\n\n----------------------------------------\n\nTITLE: Using Typed Requests with Shopify API Client\nDESCRIPTION: This example demonstrates how to use typed requests with the Shopify API client. It shows importing GraphQL operation types, using the graphql/language print function, and making typed requests using client.request and client.requestStream.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/graphql-client/README.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {print} from 'graphql/language';\n\n// GQL operation types are usually auto generated during the application build\nimport {CollectionQuery, CollectionDeferredQuery} from 'types/appTypes';\nimport collectionQuery from './collectionQuery.graphql';\nimport collectionDeferredQuery from './collectionDeferredQuery.graphql';\n\nconst {data, errors, extensions} = await client.request<CollectionQuery>(\n  print(collectionQuery),\n  {\n    variables: {\n      handle: 'sample-collection',\n    },\n  }\n);\n\nconst responseStream = await client.requestStream<CollectionDeferredQuery>(\n  print(collectionDeferredQuery),\n  {\n    variables: {handle: 'sample-collection'},\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Mounting REST Resources in Shopify API JS Configuration\nDESCRIPTION: Shows how to import and mount REST resources for a specific API version when initializing the Shopify API object.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/rest-resources.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {shopifyApi} from '@shopify/shopify-api';\nimport {restResources} from '@shopify/shopify-api/rest/admin/2022-10';\n\nconst shopify = shopifyApi({\n  ...,\n  apiVersion: ApiVersion.October22,\n  restResources,\n});\n```\n\n----------------------------------------\n\nTITLE: SQLite Session Storage Configuration\nDESCRIPTION: Configuration for SQLite session storage implementation.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {SQLiteSessionStorage} from '@shopify/shopify-app-session-storage-sqlite';\n\nconst dbPath = `${process.cwd()}/database.sqlite`;\n\nexport const sqliteSessionStorage = new SQLiteSessionStorage(dbPath);\n```\n\n----------------------------------------\n\nTITLE: Updating REST Resource Pagination in Shopify API JS v7\nDESCRIPTION: Example showing how to migrate REST resource pagination code from v6 to v7. In v7, the library returns pagination info as part of .all() requests instead of using static thread-unsafe attributes, making pagination thread-safe.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v7.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await shopify.rest.Product.all({\n  // ...\n});\n\n// BEFORE, e.g., v6\nconst products: Product[] = response;\nconst nextPageInfo = shopify.rest.Product.NEXT_PAGE_INFO;\n\n// AFTER, e.g., v7\nconst products: Product[] = response.data;\nconst nextPageInfo = response.pageInfo?.nextPage;\nconst responseHeaders = response.headers;\n```\n\n----------------------------------------\n\nTITLE: Adding Webhook Handlers in Shopify API v6 (TypeScript)\nDESCRIPTION: Demonstrates how to add multiple webhook handlers for different topics using the new addHandlers method. This method now requires async/await and uses delivery method-specific fields.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nawait shopify.webhooks.addHandlers({\n  PRODUCTS_CREATE: {\n    deliveryMethod: DeliveryMethod.Http,\n    callbackUrl: '/webhooks',\n    callback: handleWebhookRequest,\n  },\n  TOPIC_1: [handler, handler2],\n  TOPIC_2: handler3,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Webhook Handler Registration in Shopify API JS v7\nDESCRIPTION: Example showing how to migrate webhook handler registration from v6 to v7. In v7, the addHandlers method is no longer asynchronous, so you no longer need to await the call.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v7.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// BEFORE\nawait shopify.webhooks.addHandlers({\n  // ...\n});\n\n// AFTER\nshopify.webhooks.addHandlers({\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Item Billing in TypeScript\nDESCRIPTION: Demonstrates how to enable the line item billing feature in the Shopify API configuration using the v10_lineItemBilling future flag.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApi({\n  // ...\nfuture: {\n  v10_lineItemBilling: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Abstract Fetch Function in Previous Version\nDESCRIPTION: Example showing how to set up a custom runtime adapter using setAbstractFetchFunc in previous versions, which used a normalized request and response pattern.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v9.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {setAbstractFetchFunc} from '@shopify/shopify-api/runtime';\n\nexport async function nodeFetch({\n  url,\n  method,\n  headers = {},\n  body,\n}: NormalizedRequest): Promise<NormalizedResponse> {\n  const resp = await fetch(url, {method, headers: flatHeaders(headers), body});\n  const respBody = await resp.text();\n  return {\n    statusCode: resp.status,\n    statusText: resp.statusText,\n    body: respBody,\n    headers: canonicalizeHeaders(Object.fromEntries(resp.headers.entries())),\n  };\n}\n\nsetAbstractFetchFunc(nodeFetch);\n```\n\n----------------------------------------\n\nTITLE: Express Server Initialization and Import Updates\nDESCRIPTION: Updates imports and removes legacy Shopify API initialization in favor of new module-based approach. Removes billing settings and updates session storage configuration.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-17_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\nimport { join } from \"path\";\nimport { readFileSync } from \"fs\";\nimport express from \"express\";\nimport cookieParser from \"cookie-parser\";\n-import { Shopify, LATEST_API_VERSION } from \"@shopify/shopify-api\";\n+import { DeliveryMethod } from \"@shopify/shopify-api\";\n\n+import shopify from \"./shopify.js\";\nimport applyAuthMiddleware from \"./middleware/auth.js\";\nimport verifyRequest from \"./middleware/verify-request.js\";\nimport { setupGDPRWebHooks } from \"./gdpr.js\";\nimport productCreator from \"./helpers/product-creator.js\";\nimport redirectToAuth from \"./helpers/redirect-to-auth.js\";\n-import { BillingInterval } from \"./helpers/ensure-billing.js\";\nimport { AppInstallations } from \"./app_installations.js\";\n+import { sqliteSessionStorage } from \"./sqlite-session-storage.js\";\n\nconst USE_ONLINE_TOKENS = false;\n```\n\n----------------------------------------\n\nTITLE: Creating Billing Charges with Return Objects After OAuth\nDESCRIPTION: Example of creating a billing charge after OAuth completes using the returnObject parameter, which returns a more detailed object with the confirmation URL and purchase details.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/billing/request.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/auth/callback', async () => {\n  const callback = await shopify.auth.callback({\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // Check if we require payment, using shopify.billing.check()\n\n  const billingResponse = await shopify.billing.request({\n    session: callback.session,\n    plan: 'My billing plan',\n    isTest: true,\n    returnObject: true,\n  });\n\n  res.redirect(billingResponse.confirmationUrl);\n});\n```\n\n----------------------------------------\n\nTITLE: Using client.fetch() for GraphQL API Data Retrieval\nDESCRIPTION: Shows an alternative method to fetch data from the GraphQL API using the client.fetch() method, which returns a raw response object for manual parsing.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/admin-api-client/README.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopQuery = `\n  query shop {\n    shop {\n      name\n    }\n  }\n`;\n\nconst response = await client.fetch(shopQuery);\n\nif (response.ok) {\n  const {errors, data, extensions} = await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating API Version in TypeScript\nDESCRIPTION: Example of updating the API version when calling the shopifyApi function to use the latest supported version.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v8.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ApiVersion, shopifyApi} from '@shopify/shopify-api';\n\nconst shopify = shopifyApi({\n  // ...\n  apiVersion: ApiVersion.October23,\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Storefront API Client via CDN\nDESCRIPTION: HTML snippet showing how to load the Storefront API Client from the unpkg CDN and initialize a client instance.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/storefront-api-client/README.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n// The minified `0.2.3` version of the Storefront API Client\n<script src=\"https://unpkg.com/@shopify/storefront-api-client@0.2.3/dist/umd/storefront-api-client.min.js\"></script>\n\n\n<script>\nconst client = ShopifyStorefrontAPIClient.createStorefrontApiClient({...});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Processing Webhooks in Shopify API v6 (TypeScript)\nDESCRIPTION: Illustrates how to process incoming webhooks using the new process method, which now requires the raw body to be passed as an argument instead of parsing it from the request.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/webhooks', async (req, res) => {\n  try {\n    // Note: this example assumes that the raw content of the body of the request\n    // has been read and is available at req.rawBody; this will likely differ\n    // depending on which body parser is used.\n    await shopify.webhooks.process({\n      rawBody: (req as any).rawBody, // as a string\n      rawRequest: req,\n      rawResponse: res,\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Traditional Billing in Shopify API\nDESCRIPTION: Sets up a traditional billing plan without line items for a Shopify app. This configuration charges $30 USD every 30 days with a $10 discount for the first three billing cycles and applies changes immediately.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/billing.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  shopifyApi,\n  BillingInterval,\n  BillingReplacementBehavior,\n} from '@shopify/shopify-api';\n\nconst shopify = shopifyApi({\n  // ...\n  billing: {\n    'My billing plan': {\n      interval: BillingInterval.Every30Days,\n      amount: 30,\n      currencyCode: 'USD',\n      replacementBehavior: BillingReplacementBehavior.ApplyImmediately,\n      discount: {\n        durationLimitInIntervals: 3,\n        value: {\n          amount: 10,\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Updated API URL in Shopify API Request\nDESCRIPTION: This example shows how to use an updated API URL when making a request to the Shopify API. It demonstrates specifying a custom URL for the GraphQL endpoint when querying for a product.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/graphql-client/README.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    handle: 'sample-product',\n  },\n  url: 'http://your-shop-name.myshopify.com/api/unstable/graphql.json',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Node.js Adapter for Shopify API\nDESCRIPTION: Imports the Node.js adapter for the Shopify API library to set up the appropriate runtime environment for a Node.js application.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/README.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@shopify/shopify-api/adapters/node';\n```\n\n----------------------------------------\n\nTITLE: Package Installation Commands\nDESCRIPTION: Shell commands for installing the updated library using different package managers\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n# or\nnpm install\n# or\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Migrating Current Session Loading in TypeScript\nDESCRIPTION: Demonstrates the migration from loading full session details to retrieving session ID with mandatory online/offline parameter.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst session = await Shopify.Utils.loadCurrentSession(req, res);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionId = await shopify.session.getCurrentId({\n  isOnline: true,\n  rawRequest: req,\n  rawResponse: res,\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Shopify Webhooks after OAuth Completion in TypeScript\nDESCRIPTION: This code snippet demonstrates how to register webhooks using shopify.webhooks.register after OAuth completes. It handles the OAuth callback, registers the webhooks, and logs any failures in registration.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/webhooks/register.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Register webhooks after OAuth completes\napp.get('/auth/callback', async (req, res) => {\n  try {\n    const callbackResponse = await shopify.auth.callback({\n      rawRequest: req,\n      rawResponse: res,\n    });\n\n    const response = await shopify.webhooks.register({\n      session: callbackResponse.session,\n    });\n\n    if (!response['PRODUCTS_CREATE'][0].success) {\n      console.log(\n        `Failed to register PRODUCTS_CREATE webhook: ${response['PRODUCTS_CREATE'][0].result}`,\n      );\n    }\n  } catch (error) {\n    console.error(error); // in practice these should be handled more gracefully\n  }\n  return res.redirect('/'); // or wherever you want your user to end up after OAuth completes\n});\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Client with Query Method in Previous Version\nDESCRIPTION: Example of using the deprecated query method with the GraphQL client in previous versions, including options for variables, headers, and retry attempts.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v9.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new shopify.clients.Graphql({session});\nconst response = await client.query({\n  data: {\n    query: QUERY,\n    variables: {first: 1},\n  },\n  extraHeaders: {myHeader: '1'},\n  tries: 1,\n});\nconsole.log(response.body.data, response.body.extensions);\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Retries\nDESCRIPTION: Shows how to set custom retry attempts for individual requests using the retries option.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/admin-api-client/README.md#2025-04-17_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.get(\"products/1234567890\",\n  {\n    retries: 2,\n  }\n);\n\nif (response.ok) {\n  const body = await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Storefront API Client with Package Managers\nDESCRIPTION: Commands to install the Storefront API Client using different package managers including yarn, npm, and pnpm.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/storefront-api-client/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @shopify/storefront-api-client\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @shopify/storefront-api-client --s\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @shopify/storefront-api-client\n```\n\n----------------------------------------\n\nTITLE: Migrating Session Token Decoding in TypeScript\nDESCRIPTION: Shows the migration of session token decoding from synchronous to asynchronous operation.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst payload = Shopify.Utils.decodeSessionToken(token);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst payload = await shopify.session.decodeSessionToken(token);\n```\n\n----------------------------------------\n\nTITLE: Updating verify-request Middleware for Shopify API v6\nDESCRIPTION: Changes to the verify-request middleware to use the new session handling and shopify instance methods. Updates include using getCurrentId instead of loadCurrentSession and adding scope validation.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-17_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-import { Shopify } from \"@shopify/shopify-api\";\n+import { BillingError, HttpResponseError } from \"@shopify/shopify-api\";\n+import shopify from \"../shopify.js\";\n[...remaining diff code...]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to Shopify Storefront API Request\nDESCRIPTION: This example demonstrates how to add custom headers to a Shopify Storefront API request using the headers option in the request method.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/storefront-api-client/README.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    handle: 'sample-product',\n  },\n  headers: {\n    'Shopify-Storefront-Id': 'shop-id',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Pagination Data in TypeScript\nDESCRIPTION: Demonstrates how to access pagination data from REST API responses after a breaking change. The new approach retrieves pagination info from the response object instead of static variables.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await shopify.rest.Product.all({\n  /* ... */\n});\n\n// BEFORE\nconst products: Product[] = response;\nconst nextPageInfo = shopify.rest.Product.NEXT_PAGE_INFO;\n\n// AFTER\nconst products: Product[] = response.data;\nconst nextPageInfo = response.pageInfo?.nextPage;\nconst responseHeaders = response.headers;\n```\n\n----------------------------------------\n\nTITLE: Importing Privacy Topics in Version 9\nDESCRIPTION: Example showing how to import privacyTopics in version 9, which replaces the previous gdprTopics export.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v9.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {privacyTopics} from '@shopify/shopify-api';\n```\n\n----------------------------------------\n\nTITLE: Embedded App URL Generation Updates\nDESCRIPTION: Updates embedded app URL generation to use new async auth API pattern.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-17_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n-    if (Shopify.Context.IS_EMBEDDED_APP && req.query.embedded !== \"1\") {\n-      const embeddedUrl = Shopify.Utils.getEmbeddedAppUrl(req);\n+    if (shopify.config.isEmbeddedApp && req.query.embedded !== \"1\") {\n+      const embeddedUrl = await shopify.auth.getEmbeddedAppUrl({\n+        rawRequest: req,\n+        rawResponse: res,\n+      });\n```\n\n----------------------------------------\n\nTITLE: Updating Embedded App URL Retrieval for Shopify API v6 in JavaScript\nDESCRIPTION: This snippet demonstrates the changes needed to update the getEmbeddedAppUrl method call for Shopify API v6, including making it asynchronous and adjusting the method signature.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-17_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n-      const host = Shopify.Utils.sanitizeHost(req.query.host);\n-      const redirectUrl = Shopify.Context.IS_EMBEDDED_APP\n-        ? Shopify.Utils.getEmbeddedAppUrl(req)\n-        : `/?shop=${session.shop}&host=${encodeURIComponent(host)}`;\n+      const host = shopify.utils.sanitizeHost(req.query.host);\n+      const redirectUrl = shopify.config.isEmbeddedApp\n+        ? await shopify.auth.getEmbeddedAppUrl({\n+            rawRequest: req,\n+            rawResponse: res,\n+          })\n+        : `/?shop=${callbackResponse.session.shop}&host=${encodeURIComponent(host)}`;\n\n       res.redirect(redirectUrl);\n     } catch (e) {\n       console.warn(e);\n       switch (true) {\n-        case e instanceof Shopify.Errors.InvalidOAuthError:\n+        case e instanceof InvalidOAuthError:\n           res.status(400);\n           res.send(e.message);\n           break;\n-        case e instanceof Shopify.Errors.CookieNotFound:\n-        case e instanceof Shopify.Errors.SessionNotFound:\n+        case e instanceof CookieNotFound:\n           // This is likely because the OAuth session cookie expired before the merchant approved the request\n           return redirectToAuth(req, res, app);\n           break;\n         default:\n           res.status(500);\n           res.send(e.message);\n           break;\n       }\n     }\n   });\n }\n```\n\n----------------------------------------\n\nTITLE: Making PUT Request to Shopify Admin API\nDESCRIPTION: Sends a PUT request to update an existing product in the Shopify Admin API. This example shows how to update a product by specifying its ID in the path and providing the updated data.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/clients/Rest.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst putResponse = await client.put({\n  path: 'products/123456',\n  data: {\n    title: 'My product title',\n  },\n});\nconsole.log(putResponse.headers, putResponse.body);\n```\n\n----------------------------------------\n\nTITLE: Session Property Array Conversion with User Data\nDESCRIPTION: Shows how to convert session data to and from a property array format including user data. The example demonstrates the structure of the property array and resulting session object when returnUserData is true.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/session-storage.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionProperties = session.toPropertyArray(true);\n/*\n  if sessionProperties has the following data...\n  [\n    ['id', 'online_session_id'],\n    ['shop', 'online-session-shop'],\n    ['state', 'online-session-state'],\n    ['isOnline', true],\n    ['scope', 'online-session-scope'],\n    ['accessToken', 'online-session-token'],\n    ['expires', 1641013200000],  // example = January 1, 2022, as number of milliseconds since Jan 1, 1970\n    ['userId', 1],\n    ['first_name', 'online-session-first-name'],\n    ['last_name', 'online-session-last-name'],\n    ['email', 'online-session-email'],\n    ['locale', 'online-session-locale'],\n    ['email_verified', false]\n    ['account_owner', true,]\n    ['collaborator', false],\n    ],\n */\n\nconst session = Session.fromPropertyArray(sessionProperties, true);\n/*\n  ... then session will have the following data...\n  {\n    id: 'online_session_id',\n    shop: 'online-session-shop',\n    state: 'online-session-state',\n    isOnline: true,\n    scope: 'online-session-scope',\n    accessToken: 'online-session-token',\n    expires: 2022-01-01T05:00:00.000Z,  // Date object\n    onlineAccessInfo: {\n      associated_user: {\n        id: 1,\n        first_name: 'online-session-first-name'\n        last_name: 'online-session-last-name',\n        email: 'online-session-email',\n        locale: 'online-session-locale',\n        email_verified: false,\n        account_owner: true,\n        collaborator: false,\n      },\n    }\n  }\n */\n```\n\n----------------------------------------\n\nTITLE: Installing Shopify API Codegen Preset\nDESCRIPTION: Command to install the Shopify API codegen preset package as a development dependency\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/storefront-api-client/README.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @shopify/api-codegen-preset\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Product using REST Resources in TypeScript\nDESCRIPTION: Shows how to fetch a single product by its ID using the REST resources' find method.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/rest-resources.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Session is built by the OAuth process\n\nconst product = await shopify.rest.Product.find({\n  session: session,\n  id: 632910392,\n});\n\nconsole.log(product);\n```\n\n----------------------------------------\n\nTITLE: Querying Product Data with REST API in TypeScript\nDESCRIPTION: Demonstrates how to use the REST API client to query for a product's data using its ID. It also shows how to check for a successful response and parse the JSON body.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/admin-api-client/README.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.get(\"products/1234567890\");\n\nif (response.ok) {\n  const body = await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Logging Function Example (TypeScript)\nDESCRIPTION: Demonstrates how to create a custom logging function that writes logs to files, with errors saved to a separate error log file.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/logger.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {shopifyApi} from '@shopify/shopify-api';\nimport {writeFileSync} from 'fs';\n\nconst errorLogFile = './error.log';\nconst appLogFile = './application.log';\n\nconst myLoggingFunction = (severity, message) => {\n  writeFileSync(appLogFile, `${message}\\n`, {flag: 'a'});\n  if (severity == LogSeverity.Error) {\n    writeFileSync(errorLogFile, `${message}\\n`, {flag: 'a'});\n  }\n};\n\nconst shopify = shopifyApi({\n  // other config values\n  logger: {\n    log: myLoggingFunction,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Session Property Array Conversion without User Data\nDESCRIPTION: Shows how to convert session data to and from a property array format without including user data. The example demonstrates the structure of the property array and resulting session object when returnUserData is false.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/session-storage.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionProperties = session.toPropertyArray();\n/*\n  if sessionProperties has the following data, without the user data\n  [\n    ['id', 'online_session_id'],\n    ['shop', 'online-session-shop'],\n    ['state', 'online-session-state'],\n    ['isOnline', true],\n    ['scope', 'online-session-scope'],\n    ['accessToken', 'online-session-token'],\n    ['expires', 1641013200000],  // example = January 1, 2022, as number of milliseconds since Jan 1, 1970\n    ['onlineAccessInfo', 1],\n    ],\n */\n\nconst session = Session.fromPropertyArray(sessionProperties);\n/*\n  ... then session will have the following data...\n  {\n    id: 'online_session_id',\n    shop: 'online-session-shop',\n    state: 'online-session-state',\n    isOnline: true,\n    scope: 'online-session-scope',\n    accessToken: 'online-session-token',\n    expires: 2022-01-01T05:00:00.000Z,  // Date object\n    onlineAccessInfo: {\n      associated_user: {\n        id: 1,\n      },\n    }\n  }\n */\n```\n\n----------------------------------------\n\nTITLE: Importing Node.js Runtime Adapter\nDESCRIPTION: Shows how to import the Node.js adapter before using the Shopify API library functions\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@shopify/shopify-api/adapters/node';\nimport { ... } from '@shopify/shopify-api';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Online Session Using Session ID in TypeScript\nDESCRIPTION: This example shows how to load a session from storage using the session ID generated with getJwtSessionId. It demonstrates using a PrismaSessionStorage adapter to retrieve the full session object.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/session/getJwtSessionId.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getOnlineSession(request: Request) {\n  const sessionStorage = new PrismaSessionStorage(prisma)\n  const sessionId = getOnlineSessionId(request)\n  const session = await sessionStorage.loadSession(sessionId);\n\n  return session\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Copy of a Session in Shopify API JS\nDESCRIPTION: This code shows how to create an identical copy of a Session instance using the toObject method and the Session constructor. This is useful for manipulating session data without modifying the original.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/session-storage.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst callbackResponse = shopify.auth.callback({\n  rawRequest: req,\n  rawResponse: res,\n});\n\nconst sessionCopy = new Session(callbackResponse.session.toObject());\n// sessionCopy is an identical copy of the callbackResponse.session instance\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Logging in TypeScript\nDESCRIPTION: Shows how to update custom logging implementations after a change to synchronous logging. Async logging functions now need to be handled as promises.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// BEFORE\nconst myLogFunction = async (severity, message) => {\n  try {\n    await MyService.log(severity, message);\n    // After external call\n  } catch {\n    // Handle error\n  }\n};\n\n// AFTER\nconst myLogFunction = (severity, message) => {\n  MyService.log(severity, message)\n    .then(() => {\n      // After external call\n    })\n    .catch(() => {\n      // Handle error\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Auth Middleware for Shopify API v6 in JavaScript\nDESCRIPTION: This snippet shows the changes required to update the auth middleware for Shopify API v6. It includes modifications to imports, session handling, webhook registration, and error handling.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-17_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n-import { Shopify } from \"@shopify/shopify-api\";\n-import { gdprTopics } from \"@shopify/shopify-api/dist/webhooks/registry.js\";\n+import shopify from \"../shopify.js\";\n+import {\n+  gdprTopics,\n+  InvalidOAuthError,\n+  CookieNotFound,\n+} from \"@shopify/shopify-api\";\n+import { sqliteSessionStorage } from \"../sqlite-session-storage.js\";\n\n import ensureBilling from \"../helpers/ensure-billing.js\";\n import redirectToAuth from \"../helpers/redirect-to-auth.js\";\n\n-export default function applyAuthMiddleware(\n-  app,\n-  { billing = { required: false } } = { billing: { required: false } }\n-) {\n+export default function applyAuthMiddleware(app) {\n   app.get(\"/api/auth\", async (req, res) => {\n-    return redirectToAuth(req, res, app)\n+    return redirectToAuth(req, res, app);\n   });\n\n   app.get(\"/api/auth/callback\", async (req, res) => {\n     try {\n-      const session = await Shopify.Auth.validateAuthCallback(\n-        req,\n-        res,\n-        req.query\n-      );\n+      const callbackResponse = await shopify.auth.callback({\n+        rawRequest: req,\n+        rawResponse: res,\n+      });\n\n+      // save the session\n+      if ((await sqliteSessionStorage.storeSession(callbackResponse.session)) == false) {\n+        console.log(`Failed to store session ${callbackResponse.session.id}`);\n+      }\n+\n-      const responses = await Shopify.Webhooks.Registry.registerAll({\n-        shop: session.shop,\n-        accessToken: session.accessToken,\n+      const responses = await shopify.webhooks.register({\n+        session: callbackResponse.session,\n       });\n\n-      Object.entries(responses).map(([topic, response]) => {\n-        // The response from registerAll will include errors for the GDPR topics.  These can be safely ignored.\n+      Object.entries(responses).map(([topic, responsesForTopic]) => {\n+        // The response from register will include the GDPR topics - these can be safely ignored.\n         // To register the GDPR topics, please set the appropriate webhook endpoint in the\n         // 'GDPR mandatory webhooks' section of 'App setup' in the Partners Dashboard.\n-        if (!response.success && !gdprTopics.includes(topic)) {\n-          if (response.result.errors) {\n-            console.log(\n-              `Failed to register ${topic} webhook: ${response.result.errors[0].message}`\n-            );\n-          } else {\n-            console.log(\n-              `Failed to register ${topic} webhook: ${\n-                JSON.stringify(response.result.data, undefined, 2)\n-              }`\n-            );\n-          }\n+\n+        // If there are no entries in the response array, there was no change in webhook\n+        // registrations for that topic.\n+        if (!gdprTopics.includes(topic) && responsesForTopic.length > 0) {\n+          // Check the result of each response for errors\n+          responsesForTopic.map((response) => {\n+            if (!response.success) {\n+              if (response.result.errors) {\n+                console.log(\n+                  `Failed to register ${topic} webhook: ${response.result.errors[0].message}`\n+                );\n+              } else {\n+                console.log(\n+                  `Failed to register ${topic} webhook: ${JSON.stringify(\n+                    response.result.data,\n+                    undefined,\n+                    2\n+                  )}`\n+                );\n+              }\n+            }\n+          });\n         }\n       });\n\n       // If billing is required, check if the store needs to be charged right away to minimize the number of redirects.\n-      if (billing.required) {\n-        const [hasPayment, confirmationUrl] = await ensureBilling(\n-          session,\n-          billing\n-        );\n+      const [hasPayment, confirmationUrl] = await ensureBilling(\n+        callbackResponse.session\n+      );\n\n-        if (!hasPayment) {\n-          return res.redirect(confirmationUrl);\n-        }\n+      if (!hasPayment) {\n+        return res.redirect(confirmationUrl);\n       }\n\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query with String in TypeScript\nDESCRIPTION: This example shows how to send a GraphQL query to the Shopify Admin API using a query string. It retrieves the first 10 products with their id, title, and descriptionHtml fields.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/clients/Graphql.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.request(\n  `{\n    products (first: 10) {\n      edges {\n        node {\n          id\n          title\n          descriptionHtml\n        }\n      }\n    }\n  }`,\n);\nconsole.log(response.data, response.extensions);\n```\n\n----------------------------------------\n\nTITLE: Converting Session to Property Array without User Data in Shopify API JS\nDESCRIPTION: This code demonstrates the use of the toPropertyArray method to convert a Session object into an array of key-value pairs, excluding associated user data. It shows the structure of the resulting array when returnUserData is set to false.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/session-storage.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst {session, headers} = shopify.auth.callback({\n  rawRequest: req,\n  rawResponse: res,\n});\n/*\n   If session has the following data content...\n  {\n    id: 'online_session_id',\n    shop: 'online-session-shop',\n    state: 'online-session-state',\n    isOnline: true,\n    scope: 'online-session-scope',\n    accessToken: 'online-session-token',\n    expires: 2022-01-01T05:00:00.000Z,  // Date object\n    onlineAccessInfo: {\n      expires_in: 1,\n      associated_user_scope: 'online-session-user-scope',\n      associated_user: {\n        id: 1,\n        first_name: 'online-session-first-name',\n        last_name: 'online-session-last-name',\n        email: 'online-session-email',\n        locale: 'online-session-locale',\n        email_verified: true,\n        account_owner: true,\n        collaborator: false,\n      },\n    }\n  }\n */\n\nconst sessionProperties = session.toPropertyArray(false);\n/*\n  ... then sessionProperties will have the following data...\n   [\n    ['id', 'online_session_id'],\n    ['shop', 'online-session-shop'],\n    ['state', 'online-session-state'],\n    ['isOnline', true],\n    ['scope', 'online-session-scope'],\n    ['accessToken', 'online-session-token'],\n    ['expires', 1641013200000],  // example = January 1, 2022, as number of milliseconds since Jan 1, 1970\n    ['onlineAccessInfo', 1], // The userID is returned under onlineAccessInfo\n    ],\n */\n```\n\n----------------------------------------\n\nTITLE: Migrating Logging Configuration in TypeScript\nDESCRIPTION: Demonstrates the migration from file-based logging to a configurable logging implementation.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nShopify.Context.initialize({LOG_FILE: 'path/to/file.log'});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = new shopifyApi({\n  logger: {\n    log: async (_severity: string, message: string) => {\n      fs.appendFile('path/to/file.log', message);\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Shopify API Package\nDESCRIPTION: Command to install the @shopify/shopify-api package using Yarn package manager. This is the first step to integrate Shopify API functionality into a project.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# You can use your preferred Node package manager\nyarn add @shopify/shopify-api\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to GraphQL API Request\nDESCRIPTION: Demonstrates how to add custom headers to a GraphQL API request, which can be useful for including additional metadata or configuration for the request.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/admin-api-client/README.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($id: ID!) {\n    product(id: $id) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    id: 'gid://shopify/Product/7608002183224',\n  },\n  headers: {\n    'X-GraphQL-Cost-Include-Fields': true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Webhook Handlers in Shopify API JS\nDESCRIPTION: Demonstrates how to fetch configured webhook handlers for a specific topic using the shopify.webhooks.getHandlers method. The example shows how to access the first handler's delivery method from the returned array.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/webhooks/getHandlers.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst handlers = shopify.webhooks.getHandlers('PRODUCTS_CREATE');\n// e.g. handlers[0].deliveryMethod\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Codegen script to package.json\nDESCRIPTION: JSON configuration for adding the graphql-codegen script to package.json, which allows running the code generation tool via the package manager's run command.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/graphql-types.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    // ...\n    \"graphql-codegen\": \"graphql-codegen\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Return Type Structure for BillingRequestResponseObject\nDESCRIPTION: TypeScript interface definition for the BillingRequestResponseObject returned when returnObject is set to true. It includes confirmation URL and optional purchase/subscription details.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/billing/request.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  confirmationUrl: string; // The URL to confirm the charge with the merchant, see note below\n  oneTimePurchase?: OneTimePurchase; // will be populated if a one time purchase is requested\n  appSubscription?: AppSubscription; // will be populated if a subscription is requested\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching API Data using client.fetch()\nDESCRIPTION: Shows how to use the client.fetch() method to execute GraphQL queries and handle responses using the Fetch API pattern\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/storefront-api-client/README.md#2025-04-17_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopQuery = `\n  query shop {\n    shop {\n      name\n      id\n    }\n  }\n`;\n\nconst response = await client.fetch(shopQuery);\n\nif (response.ok) {\n  const {errors, data, extensions} = await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Retries in Shopify API Request\nDESCRIPTION: This snippet illustrates how to set a custom number of retries for a Shopify API request. It shows configuring the client to retry the HTTP request 2 times if the server responds with a 429 or 503 error.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/graphql-client/README.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopQuery = `\n  query ShopQuery {\n    shop {\n      name\n      id\n    }\n  }\n`;\n\n// Will retry the HTTP request to the server 2 times if the requests were abandoned or the server responded with a 429 or 503 error\nconst {data, errors, extensions} = await client.request(shopQuery, {\n  retries: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Timestamps in Logs (TypeScript)\nDESCRIPTION: Configures the Shopify API logger to include timestamps in log messages, which adds the current time to the beginning of each log entry.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/logger.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApi({\n  // other config values\n  logger: {\n    timestamps: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Return Type Structure for AppSubscription\nDESCRIPTION: TypeScript interface definition for the AppSubscription object returned as part of BillingRequestResponseObject for subscription purchases, containing details about the subscription.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/billing/request.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: string; // unique string identifier for this purchase\n  name: string; // name of the plan\n  test: boolean; // `true` if the plan a test plan, `false` otherwise\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Logger Implementation in Shopify API JS v7\nDESCRIPTION: Example demonstrating how to update logger implementation from v6 to v7. In v7, logger functions no longer return Promises, requiring custom loggers to handle promises internally instead of making the logger calls asynchronous.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v7.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// BEFORE\nconst shopify = shopifyApi({\n  // ...\n  logger: {\n    log: async (severity, message) => {\n      try {\n        await MyService.log();\n\n        // After external call\n      } catch {\n        // Handle error\n      }\n    },\n  },\n});\nawait shopify.logger.info('My message');\n\n// AFTER\nconst shopify = shopifyApi({\n  // ...\n  logger: {\n    log: (severity, message) => {\n      MyService.log()\n        .then(() => {\n          // After external call\n        })\n        .catch(() => {\n          // Handle error\n        });\n    },\n  },\n});\nshopify.logger.info('My message');\n```\n\n----------------------------------------\n\nTITLE: Creating Storefront API Client in TypeScript (Before v8)\nDESCRIPTION: Example of creating a Storefront API client using the deprecated 'domain' and 'storefrontAccessToken' fields in the client parameters.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v8.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/my-endpoint', async (req, res) => {\n  const sessionId = await shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // getSessionFromStorage() must be provided by application\n  const session = await getSessionFromStorage(sessionId);\n\n  const adminApiClient = new shopify.clients.Rest({session});\n  const storefrontTokenResponse = await adminApiClient.post({\n    path: 'storefront_access_tokens',\n    data: {\n      storefront_access_token: {\n        title: 'This is my test access token',\n      },\n    },\n  });\n\n  const storefrontAccessToken =\n    storefrontTokenResponse.body.storefront_access_token.access_token;\n\n  // For simplicity, this example creates a token every time it's called, but that is not ideal.\n  // You can fetch existing Storefront access tokens using the Admin API client.\n  const storefrontClient = new shopify.clients.Storefront({\n    domain: session.shop,\n    storefrontAccessToken,\n    apiVersion: ApiVersion.January23,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: AppSubscription Interface Structure in Shopify Billing API\nDESCRIPTION: TypeScript interface definition for the AppSubscription object returned when using returnObject:true. Describes the structure containing id, name, and test flag properties.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/billing/check.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: string; // unique string identifier for this purchase\n  name: string; // name of the plan\n  test: boolean; // `true` if the plan a test plan, `false` otherwise\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Active Subscriptions in Shopify API (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to retrieve active subscriptions using the Shopify API. It uses the shopify.api.billing.subscriptions method and requires a session object.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/billing.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst activeSubscriptions = await shopify.api.billing.subscriptions({\n  session: res.locals.shopify.session,\n});\n\n// activeSubscriptions will be an array of subscription details, e.g.,\n// [\n//   {\n//     \"name\": \"My Shopify Subscription Charge\",\n//     \"id\": \"gid://shopify/AppSubscription/1234567890\",\n//     \"test\": true\n//   },\n// ],\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Codegen in watch mode with NPM\nDESCRIPTION: Command to execute GraphQL Codegen in watch mode using NPM, which continuously monitors for changes and regenerates types automatically.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/graphql-types.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm run graphql-codegen -- --watch\n```\n\n----------------------------------------\n\nTITLE: API Configuration - After Migration\nDESCRIPTION: Shows the new method of initializing the Shopify API using shopifyApi function\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {shopifyApi} from '@shopify/shopify-api';\nconst shopify = shopifyApi({ apiKey: '...', ... });\n```\n\n----------------------------------------\n\nTITLE: Installing Package Dependencies\nDESCRIPTION: Commands for installing @shopify/api-codegen-preset using different package managers\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/api-codegen-preset/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @shopify/api-codegen-preset\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm add --save-dev @shopify/api-codegen-preset\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add -D @shopify/api-codegen-preset\n```\n\n----------------------------------------\n\nTITLE: Setting API Version for Specific Requests\nDESCRIPTION: Example of how to specify a different API version for individual requests using the apiVersion option.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/admin-api-client/README.md#2025-04-17_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.get(\"products/1234567890\",\n  {\n    apiVersion: '2023-01',\n  }\n);\n\nif (response.ok) {\n  const body = await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Log Level (TypeScript)\nDESCRIPTION: Configures the Shopify API to use Debug level logging, which provides the most detailed logs including internal processing information.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/logger.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApi({\n  // other config values\n  logger: {\n    level: LogSeverity.Debug,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: LogSeverity Enum Definition (TypeScript)\nDESCRIPTION: Defines the LogSeverity enum that specifies the four available logging levels: Error, Warning, Info, and Debug.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/logger.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum LogSeverity {\n  Error, // errors that prevent app from functioning properly, e.g., oauth errors\n  Warning, // notices that don't prevent app from functioning propertly, e.g., deprecation notices\n  Info, // information useful for monitoring library processing (default)\n  Debug, // information useful for debugging library processing\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Script Configuration\nDESCRIPTION: Adding graphql-codegen script to package.json\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/api-codegen-preset/README.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"graphql-codegen\": \"graphql-codegen\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Session Property Array Conversion in TypeScript\nDESCRIPTION: Shows how to convert a Session object to and from a property array, including handling of user data fields. Demonstrates usage of new optional returnUserData parameter.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionProperties = session.toPropertyArray(true);\n/*\n  if sessionProperties has the following data...\n  [\n    ['id', 'online_session_id'],\n    ['shop', 'online-session-shop'],\n    ['state', 'online-session-state'],\n    ['isOnline', true],\n    ['scope', 'online-session-scope'],\n    ['accessToken', 'online-session-token'],\n    ['expires', 1641013200000],  // example = January 1, 2022, as number of milliseconds since Jan 1, 1970\n    ['userId', 1],\n    ['first_name', 'online-session-first-name'],\n    ['last_name', 'online-session-last-name'],\n    ['email', 'online-session-email'],\n    ['locale', 'online-session-locale'],\n    ['email_verified', false]\n    ['account_owner', true,]\n    ['collaborator', false],\n    ],\n */\n\nconst session = Session.fromPropertyArray(sessionProperties, true);\n/*\n  ... then session will have the following data...\n  {\n    id: 'online_session_id',\n    shop: 'online-session-shop',\n    state: 'online-session-state',\n    isOnline: true,\n    scope: 'online-session-scope',\n    accessToken: 'online-session-token',\n    expires: 2022-01-01T05:00:00.000Z,  // Date object\n    onlineAccessInfo: {\n      associated_user: {\n        id: 1,\n        first_name: 'online-session-first-name'\n        last_name: 'online-session-last-name',\n        email: 'online-session-email',\n        locale: 'online-session-locale',\n        email_verified: false,\n        account_owner: true,\n        collaborator: false,\n      },\n    }\n  }\n */\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { session, headers } = shopify.auth.callback({\n  rawRequest: req,\n  rawResponse: res,\n});\n\n/*\n  If session has the following data content...\n  {\n    id: 'online_session_id',\n    shop: 'online-session-shop',\n    state: 'online-session-state',\n    isOnline: true,\n    scope: 'online-session-scope',\n    accessToken: 'online-session-token',\n    expires: 2022-01-01T05:00:00.000Z,  // Date object\n    onlineAccessInfo: {\n      expires_in: 1,\n      associated_user_scope: 'online-session-user-scope',\n      associated_user: {\n        id: 1,\n        first_name: 'online-session-first-name',\n        last_name: 'online-session-last-name',\n        email: 'online-session-email',\n        locale: 'online-session-locale',\n        email_verified: true,\n        account_owner: true,\n        collaborator: false,\n      },\n    }\n  }\n */\n\nconst sessionProperties = session.toPropertyArray();\n/*\n  ... then sessionProperties will have the following data...\n   [\n    ['id', 'online_session_id'],\n    ['shop', 'online-session-shop'],\n    ['state', 'online-session-state'],\n    ['isOnline', true],\n    ['scope', 'online-session-scope'],\n    ['accessToken', 'online-session-token'],\n    ['expires', 1641013200000],  // example = January 1, 2022, as number of milliseconds since Jan 1, 1970\n    ['userId', 1], // New returns the user id under the userId key instead of onlineAccessInfo\n    ['first_name', 'online-session-first-name'],\n    ['last_name', 'online-session-last-name'],\n    ['email', 'online-session-email'],\n    ['locale', 'online-session-locale'],\n    ['email_verified', false]\n    ['account_owner', true,]\n    ['collaborator', false],\n    ],\n */\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Request Debugging (TypeScript)\nDESCRIPTION: Configures the Shopify API logger to display detailed HTTP request and response information, requiring Debug log level to be set.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/logger.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApi({\n  // other config values\n  logger: {\n    level: LogSeverity.Debug,\n    httpRequests: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Return Value Structure for Shopify Billing Subscriptions (TypeScript)\nDESCRIPTION: This code snippet illustrates the structure of the return value from the shopify.billing.subscriptions function. It shows the shape of the ActiveSubscriptions object, which contains an array of subscription details including id, name, and test status.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/billing/subscriptions.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  activeSubscriptions: [\n    {\n      id: string;\n      name: string;\n      test: boolean;\n    },\n    {\n      id: string;\n      name: string;\n      test: boolean;\n    },\n    // ...\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Codegen with Yarn\nDESCRIPTION: Command to execute the GraphQL Codegen process using Yarn to generate type definitions for GraphQL operations.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/graphql-types.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn graphql-codegen\n```\n\n----------------------------------------\n\nTITLE: App Installations Update\nDESCRIPTION: Updates to the app installations file to use the new session storage implementation.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-17_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-import { Shopify } from \"@shopify/shopify-api\";\n+import { sqliteSessionStorage } from \"./sqlite-session-storage.js\";\n\n export const AppInstallations = {\n   includes: async function (shopDomain) {\n-    const shopSessions = await Shopify.Context.SESSION_STORAGE.findSessionsByShop(shopDomain);\n+    const shopSessions = await sqliteSessionStorage.findSessionsByShop(shopDomain);\n```\n\n----------------------------------------\n\nTITLE: OneTimePurchase Interface Structure in Shopify Billing API\nDESCRIPTION: TypeScript interface definition for the OneTimePurchase object returned when using returnObject:true. Describes the structure containing id, name, test flag, and status properties.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/billing/check.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: string; // unique string identifier for this purchase\n  name: string; // name of the plan\n  test: boolean; // `true` if the plan a test plan, `false` otherwise\n  status: string; // status = `ACTIVE`\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GraphQL Client\nDESCRIPTION: Basic client initialization with URL, headers, and retry configuration\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/graphql-client/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createGraphQLClient} from '@shopify/graphql-client';\n\nconst client = createGraphQLClient({\n  url: 'http://your-shop-name.myshopify.com/api/2023-10/graphql.json',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-Shopify-Storefront-Access-Token': 'public-token',\n  },\n  retries: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Shopify GraphQL Client via CDN\nDESCRIPTION: Example of loading the GraphQL client via CDN using UMD build and initializing a client instance\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/graphql-client/README.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n// The minified `v0.9.3` version of the GraphQL API Client\n<script src=\"https://unpkg.com/@shopify/graphql-client@0.9.3/dist/umd/graphql-client.min.js\"></script>\n\n<script>\nconst client = ShopifyGraphQLClient.createGraphQLClient({...});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Web API Adapter for Shopify API\nDESCRIPTION: Imports the Web API adapter for the Shopify API library to set up the appropriate runtime environment for applications that implement the Web API.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@shopify/shopify-api/adapters/web-api';\n```\n\n----------------------------------------\n\nTITLE: Setting up development environment for Shopify API JS\nDESCRIPTION: Commands to set up a local development environment for the Shopify API library. This includes cloning the repository, installing dependencies, and building the library.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:Shopify/shopify-api-js.git # get the code\ncd shopify-node-api                                 # change into the source directory\nyarn install                                        # install dependencies\nyarn build                                          # build library\n```\n\n----------------------------------------\n\nTITLE: Initializing Shopify Admin API Client\nDESCRIPTION: Creates an Admin API client instance with store domain, API version, and access token configuration\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/admin-api-client/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createAdminApiClient} from '@shopify/admin-api-client';\n\nconst client = createAdminApiClient({\n  storeDomain: 'your-shop-name.myshopify.com',\n  apiVersion: '2023-04',\n  accessToken: 'your-admin-api-access-token',\n});\n```\n\n----------------------------------------\n\nTITLE: Webhook Processing Endpoint Updates\nDESCRIPTION: Updates webhook processing endpoint to use plain text body parser and new webhook processing API.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-17_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n-  app.post(\"/api/webhooks\", async (req, res) => {\n+  app.post(\"/api/webhooks\", express.text({ type: \"*/*\" }), async (req, res) => {\n     try {\n-      await Shopify.Webhooks.Registry.process(req, res);\n+      await shopify.webhooks.process({\n+        rawBody: req.body,\n+        rawRequest: req,\n+        rawResponse: res,\n+      });\n       console.log(`Webhook processed, returned status code 200`);\n     } catch (e) {\n       console.log(`Failed to process webhook: ${e.message}`);\n       if (!res.headersSent) {\n         res.status(500).send(e.message);\n       }\n     }\n   });\n```\n\n----------------------------------------\n\nTITLE: Using shopifyApiProject Configuration\nDESCRIPTION: Example configuration using shopifyApiProject helper function for complete project setup\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/api-codegen-preset/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { shopifyApiProject, ApiType } from \"@shopify/api-codegen-preset\";\n\nexport default {\n  schema: \"https://shopify.dev/admin-graphql-direct-proxy/2023-10\",\n  documents: [\"./app/**/*.{js,ts,jsx,tsx}\"],\n  projects: {\n    default: shopifyApiProject({\n      apiType: ApiType.Admin,\n      apiVersion: \"2023-10\",\n      documents: [\"./app/**/*.{js,ts,jsx,tsx}\"],\n      outputDir: \"./app/types\",\n    }),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running quality assurance commands for Shopify API JS\nDESCRIPTION: Helpful commands for ensuring code quality when contributing to the Shopify API library, including linting and running tests.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint # will run linting to make sure your code is of high standard\nyarn test # will run testing to ensure your code is covered by test cases\n```\n\n----------------------------------------\n\nTITLE: Parameter Types for safeCompare Function\nDESCRIPTION: Defines the accepted parameter types for the safeCompare function, which includes strings, string-keyed objects, and arrays of strings or numbers.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/auth/safeCompare.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n{[key: string]: string}\nstring[]\nnumber[]\n```\n\n----------------------------------------\n\nTITLE: API Configuration - Before Migration\nDESCRIPTION: Shows the old method of initializing the Shopify API context\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Shopify} from '@shopify/shopify-api';\nShopify.Context.initialize({ API_KEY: '...', ... });\n```\n\n----------------------------------------\n\nTITLE: Defining Shopify Type with Rest Resources in TypeScript (Before v8)\nDESCRIPTION: Example of explicitly using the Shopify type with rest resources before v8.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v8.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {restResources} from '@shopify/shopify-api/rest/admin/2023-10';\n\nconst myVariable: Shopify<typeof restResources>;\n```\n\n----------------------------------------\n\nTITLE: Installing Codegen and API clients with Yarn\nDESCRIPTION: Command to install the required packages for GraphQL Codegen using Yarn package manager. This includes the codegen preset as a dev dependency and API clients as regular dependencies.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/graphql-types.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @shopify/api-codegen-preset\nyarn add @shopify/admin-api-client @shopify/storefront-api-client\n```\n\n----------------------------------------\n\nTITLE: Return Type Structure for OneTimePurchase\nDESCRIPTION: TypeScript interface definition for the OneTimePurchase object returned as part of BillingRequestResponseObject for one-time purchases, containing identifying details about the purchase.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/billing/request.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: string; // unique string identifier for this purchase\n  name: string; // name of the plan\n  test: boolean; // `true` if the plan a test plan, `false` otherwise\n  status: string; // status = `ACTIVE`\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Session Management in TypeScript\nDESCRIPTION: Demonstrates the migration from withSession utility to manual session management with client initialization.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst {client, session} = await Shopify.Utils.withSession({\n  clientType: 'rest',\n  isOnline: true,\n  req,\n  res,\n  shop: 'my-shop.myshopify.com',\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionId = await shopify.session.getCurrentId({\n  isOnline: true,\n  rawRequest: req,\n  rawResponse: res,\n});\n\n// use sessionId to retrieve session from app's session storage\n// getSessionFromStorage() must be provided by application\nconst session = await getSessionFromStorage(sessionId);\n\nconst gqlClient = await shopify.clients.Graphql({session});\n// or\nconst restClient = await shopify.clients.Rest({session});\n// or\nconst storefrontClient = await shopify.clients.Storefront({\n  session,\n  storefrontAccessToken,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Codegen\nDESCRIPTION: TypeScript configuration for setting up GraphQL code generation with the Shopify API preset\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/storefront-api-client/README.md#2025-04-17_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiType, shopifyApiProject } from \"@shopify/api-codegen-preset\";\n\nexport default {\n  schema: \"https://shopify.dev/storefront-graphql-direct-proxy\",\n  documents: [\"*.ts\", \"!node_modules\"],\n  projects: {\n    default: shopifyApiProject({\n      apiType: ApiType.Storefront,\n      apiVersion: \"2023-10\",\n      outputDir: \"./types\",\n    }),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Codegen and API clients with NPM\nDESCRIPTION: Command to install the required packages for GraphQL Codegen using NPM package manager. This includes the codegen preset as a dev dependency and API clients as regular dependencies.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/graphql-types.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm add --save-dev @shopify/api-codegen-preset\nnpm add @shopify/admin-api-client @shopify/storefront-api-client\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Type Generation Example\nDESCRIPTION: Example of using generated types with a GraphQL query\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/api-codegen-preset/README.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"../types/admin.generated.d.ts\";\n\nconst response = await myGraphqlClient.graphql(\n  `#graphql\n  query getProducts($first: Int!) {\n    products(first: $first) {\n      edges {\n        node {\n          id\n          handle\n        }\n      }\n    }\n  }`,\n  {\n    variables: {\n      first: 1,\n    } as GetProductsQueryVariables,\n  }\n);\n\nconst data: GetProductsQuery = response.data;\n```\n\n----------------------------------------\n\nTITLE: Migrating GraphQL Proxy in TypeScript\nDESCRIPTION: Shows the migration of GraphQL proxy implementation to use explicit session and body parameters.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await Shopify.Utils.graphqlProxy(req, res);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionId = await shopify.session.getCurrentId({\n  isOnline: true,\n  rawRequest: req,\n  rawResponse: res,\n});\n\n// use sessionId to retrieve session from app's session storage\n// getSessionFromStorage() must be provided by application\nconst session = await getSessionFromStorage(sessionId);\n\nconst response = await shopify.clients.graphqlProxy({\n  session,\n  rawBody: req.rawBody, // From my app\n});\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Codegen with NPM\nDESCRIPTION: Command to execute the GraphQL Codegen process using NPM to generate type definitions for GraphQL operations.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/graphql-types.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run graphql-codegen\n```\n\n----------------------------------------\n\nTITLE: Installing Codegen and API clients with PNPM\nDESCRIPTION: Command to install the required packages for GraphQL Codegen using PNPM package manager. This includes the codegen preset as a dev dependency and API clients as regular dependencies.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/graphql-types.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add --save-dev @shopify/api-codegen-preset\npnpm add @shopify/admin-api-client @shopify/storefront-api-client\n```\n\n----------------------------------------\n\nTITLE: Configuring Preset in GraphQL Config\nDESCRIPTION: Example configuration using the preset option in .graphqlrc.ts file for custom setup\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/api-codegen-preset/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiType, pluckConfig, preset } from \"@shopify/api-codegen-preset\";\n\nexport default {\n  schema: \"https://shopify.dev/admin-graphql-direct-proxy\",\n  documents: [\"./**/*.{js,ts,jsx,tsx}\"],\n  projects: {\n    default: {\n      schema: \"https://shopify.dev/admin-graphql-direct-proxy\",\n      documents: [\"./**/*.{js,ts,jsx,tsx}\"],\n      extensions: {\n        codegen: {\n          pluckConfig,\n          generates: {\n            \"./types/admin.schema.json\": {\n              plugins: [\"introspection\"],\n              config: { minify: true },\n            },\n            \"./types/admin.types.d.ts\": {\n              plugins: [\"typescript\"],\n            },\n            \"./types/admin.generated.d.ts\": {\n              preset,\n              presetConfig: {\n                apiType: ApiType.Admin,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using the Previous GraphQL Client Query Format\nDESCRIPTION: Example of the deprecated GraphQL client query format in v8, which uses the query method with a data object containing the query and variables.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v9.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new shopify.clients.Graphql({session});\nconst response: Response = await client.request(\n  `query { ... }`,\n  { variables: { ... } }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json Dependencies\nDESCRIPTION: Demonstrates the required changes to package.json to upgrade to v6\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n   \"dependencies\": {\n-    \"@shopify/shopify-api\": \"^5.0.0\",\n+    \"@shopify/shopify-api\": \"^6.0.0\",\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Webhooks - Before\nDESCRIPTION: Previous approach to webhook error handling using Shopify.Errors namespace\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/webhooks', async (req, res) => {\n  try {\n    await Shopify.Webhooks.Registry.process(req, res);\n  } catch (error) {\n    if (error instanceof Shopify.Errors.InvalidWebhookError) {\n      console.log(`Webhook processing error:\\n\\tmessage = ${error.message}`);\n    } else {\n      console.log('Other error:\\n\\t', error);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Log Format with Timestamps Example (Text)\nDESCRIPTION: Shows the format of log messages with timestamps enabled, adding an ISO date at the beginning of each log entry.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/logger.md#2025-04-17_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n[2022-11-10T22:15:51Z] [shopify-api/INFO] Completing OAuth | {shop: my-test-shop.myshopify.com, isOnline: false}\n```\n\n----------------------------------------\n\nTITLE: Importing GDPR Topics in Previous Version\nDESCRIPTION: Example showing how to import gdprTopics in previous versions before the renaming to privacyTopics.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v9.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {gdprTopics} from '@shopify/shopify-api';\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Plan Billing Charges with Return Objects\nDESCRIPTION: Example of a multi-plan billing setup with user selection, using the returnObject parameter to get additional details about the created subscription or purchase.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/billing/request.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/api/select-plan', async (req, res) => {\n  const sessionId = shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // In this example, getSessionFromStorage() must be provided by app\n  const session = await getSessionFromStorage(sessionId);\n\n  const billingResponse = await shopify.billing.request({\n    session,\n    // Receive the selected plan from the frontend\n    plan: req.body.selectedPlan,\n    isTest: true,\n    returnObject: true,\n  });\n\n  res.redirect(billingResponse.confirmationUrl);\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Authentication Utility Functions in TypeScript\nDESCRIPTION: Demonstrates the migration of authentication-related utilities including nonce generation, safe comparison, and embedded app URL generation.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v6.md#2025-04-17_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst nonce = Shopify.Utils.nonce();\nconst match = Shopify.Utils.safeCompare(strA, strB);\nconst redirectUrl = Shopify.Utils.getEmbeddedAppUrl(req, res);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst nonce = shopify.auth.nonce();\nconst match = shopify.auth.safeCompare(strA, strB);\nconst redirectUrl = await shopify.auth.getEmbeddedAppUrl({\n  rawRequest: req,\n  rawResponse: res,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Shopify Admin API Client\nDESCRIPTION: NPM installation command for the Shopify Admin API client library\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/admin-api-client/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @shopify/admin-api-client -s\n```\n\n----------------------------------------\n\nTITLE: Session Storage Package Installation\nDESCRIPTION: Commands to install the SQLite session storage adapter package.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @shopify/shopify-app-session-storage-sqlite\n# or\nnpm install @shopify/shopify-app-session-storage-sqlite\n# or\npnpm install @shopify/shopify-app-session-storage-sqlite\n```\n\n----------------------------------------\n\nTITLE: Package Installation Commands\nDESCRIPTION: Commands for updating dependencies using different package managers (yarn, npm, pnpm).\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n# or\nnpm install\n# or\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Using shopifyApiTypes Configuration\nDESCRIPTION: Example configuration using shopifyApiTypes helper function in .graphqlrc.ts\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/api-codegen-preset/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  ApiType,\n  pluckConfig,\n  shopifyApiTypes,\n} from \"@shopify/api-codegen-preset\";\n\nexport default {\n  schema: \"https://shopify.dev/admin-graphql-direct-proxy/2023-10\",\n  documents: [\"./app/**/*.{js,ts,jsx,tsx}\"],\n  projects: {\n    schema: \"https://shopify.dev/admin-graphql-direct-proxy/2023-10\",\n    documents: [\"./app/**/*.{js,ts,jsx,tsx}\"],\n    extensions: {\n      codegen: {\n        pluckConfig,\n        generates: shopifyApiTypes({\n          apiType: ApiType.Admin,\n          apiVersion: \"2023-10\",\n          documents: [\"./app/**/*.{js,ts,jsx,tsx}\"],\n          outputDir: \"./app/types\",\n        }),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.3.3\nDESCRIPTION: Documents dependency update to @shopify/graphql-client version 0.10.3\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/storefront-api-client/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.3\n\n### Patch Changes\n\n- Updated dependencies [e9652b7]\n  - @shopify/graphql-client@0.10.3\n```\n\n----------------------------------------\n\nTITLE: Standard Log Format Example (Text)\nDESCRIPTION: Shows the standard format of log messages without timestamps, including severity level and contextual information.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/logger.md#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n[shopify-api/INFO] Completing OAuth | {shop: my-test-shop.myshopify.com, isOnline: false}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Log Examples (Text)\nDESCRIPTION: Examples of log messages produced when HTTP request debugging is enabled, showing request details and response status.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/logger.md#2025-04-17_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n[shopify-api/DEBUG] Making HTTP request  -  GET https://my-test-shop.myshopify.com/admin/api/2022-10/products/count.json  -  Headers: {\"X-Shopify-Access-Token\":[\"a-really-fake-example-access-token\"],\"User-Agent\":[\"Shopify API Library v6.0.0 | Node v18.7.0\"]}\n[shopify-api/DEBUG] Completed HTTP request, received 200 OK\n```\n\n----------------------------------------\n\nTITLE: Using Tagged GraphQL Queries with Type Generation\nDESCRIPTION: Example of using template literal tags with GraphQL queries to enable automatic type generation\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/storefront-api-client/README.md#2025-04-17_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst {data, errors, extensions} = await client.request(\n  `#graphql\n  query Shop {\n    shop {\n      name\n    }\n  }`\n);\nconsole.log(data?.shop.name);\n```\n\n----------------------------------------\n\nTITLE: Defining Shopify Session Functions in Markdown\nDESCRIPTION: A markdown table describing various functions available in the shopify.session object. It includes functions for creating custom app sessions, getting session IDs, and handling JWT tokens.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/session/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property                                      | Description                                                                                                                                    |\n| --------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| [customAppSession](./customAppSession.md)     | Creates a Session object suitable for use with `shopify.clients` and REST resources in a [custom store app](../../guides/custom-store-app.md). |\n| [getCurrentId](./getCurrentId.md)             | Extracts a Shopify session id for the current request when there is user interaction with the app.                                             |\n| [getOfflineId](./getOfflineId.md)             | Builds the session id for the given shop, for background tasks that don't involve user interaction.                                            |\n| [decodeSessionToken](./decodeSessionToken.md) | Extracts and validates the session token JWT from App Bridge requests.                                                                         |\n| [getJwtSessionId](./getJwtSessionId.md)       | Builds the session ID for the given shop and user. Use for getting online tokens.                                                              |\n```\n\n----------------------------------------\n\nTITLE: Installing Shopify GraphQL Client\nDESCRIPTION: Package installation commands using different package managers (yarn, npm, pnpm)\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/graphql-client/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @shopify/graphql-client\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @shopify/graphql-client --s\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @shopify/graphql-client\n```\n\n----------------------------------------\n\nTITLE: Documenting Shopify API Library Structure in Markdown\nDESCRIPTION: This markdown table outlines the main components of the Shopify API JavaScript library, including config, auth, clients, session, webhooks, billing, utils, and rest. Each component is briefly described and linked to its respective documentation.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property                            | Description                                                                                                                                             |\n| ----------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| config                              | The options used to set up the object, containing the parameters of this function.                                                                      |\n| [auth](./auth/README.md)            | Object containing functions to authenticate with Shopify APIs.                                                                                          |\n| [clients](./clients/README.md)      | Object containing clients to access Shopify APIs.                                                                                                       |\n| [session](./session/README.md)      | Object containing functions to manage Shopify sessions.                                                                                                 |\n| [webhooks](./webhooks/README.md)    | Object containing functions to configure and handle Shopify webhooks.                                                                                   |\n| [billing](./billing/README.md)      | Object containing functions to enable apps to bill merchants.                                                                                           |\n| [utils](./utils/README.md)          | Object containing general functions to help build apps.                                                                                                 |\n| [rest](../guides/rest-resources.md) | Object containing OO representations of the Admin REST API. See the [API reference documentation](https://shopify.dev/docs/api/admin-rest) for details. |\n```\n\n----------------------------------------\n\nTITLE: Handling GraphQL Query Errors in TypeScript\nDESCRIPTION: This snippet demonstrates error handling for GraphQL queries. It shows how to catch and process GraphqlQueryError, which includes details from the API response such as GraphQL errors and response headers.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/clients/Graphql.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {GraphqlQueryError} from '@shopify/shopify-api';\n\ntry {\n  const products = await client.request(/* ... */);\n\n  // No errors, proceed with logic\n} catch (error) {\n  if (error instanceof GraphqlQueryError) {\n    // look at the GraphQL errors returned from the API response\n    error.body?.errors.graphQLErrors\n    // Also, error.headers contains the headers of the response received from Shopify\n  } else {\n    // handle other errors\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Method Documentation Structure\nDESCRIPTION: Documentation showing the structure of available authentication methods and utilities in the Shopify API, including token exchange, OAuth flow, and utility functions.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/auth/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# shopify.auth\\n\\nThis object contains functions used to authenticate apps, and redirect users to Shopify.\\n\\n## Token Exchange\\n\\nLearn more about [token exchange](../../guides/oauth.md#token-exchange).\\n\\n| Property                                        | Description                                                                                       |\\n| ----------------------------------------------- | ------------------------------------------------------------------------------------------------- |\\n| [tokenExchange](./tokenExchange.md)             | Performs token exchange to get access token from session token                                    |\\n\\n## Authorization Code Grant Flow\\n\\nLearn more about [authorization code grant flow](../../guides/oauth.md#authorization-code-grant-flow).\\n\\n| Property                                        | Description                                                                                       |\\n| ----------------------------------------------- | ------------------------------------------------------------------------------------------------- |\\n| [begin](./begin.md)                             | Redirect the user to Shopify to request authorization for the app.                                |\\n| [callback](./callback.md)                       | Receive Shopify's callback after the user approves the app installation.                          |\\n| [nonce](./nonce.md)                             | Generates a random string of characters to be used as the state value for OAuth.                  |\\n\\n## Utility Functions\\n\\n| Property                                        | Description                                                                                       |\\n| ----------------------------------------------- | ------------------------------------------------------------------------------------------------- |\\n| [safeCompare](./safeCompare.md)                 | Compares two strings or arrays in a way that's safe against timing attacks.                       |\\n| [getEmbeddedAppUrl](./getEmbeddedAppUrl.md)     | Builds a URL to redirect the user back to the right Shopify surface based on the current request. |\\n| [buildEmbeddedAppUrl](./buildEmbeddedAppUrl.md) | Constructs the appropriate Shopify URL to redirect to.                                            |\n```\n\n----------------------------------------\n\nTITLE: Directory Navigation Command\nDESCRIPTION: Command to change into the web directory where most changes will occur.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd web\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry in Markdown\nDESCRIPTION: The changelog is written in markdown format documenting package versions, changes and dependency updates for @shopify/admin-api-client package.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/admin-api-client/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @shopify/admin-api-client\n\n## 0.2.8\n\n### Patch Changes\n\n- Updated dependencies [e9652b7]\n  - @shopify/graphql-client@0.10.3\n\n## 0.2.7\n\n### Patch Changes\n\n- Updated dependencies [2f862e3]\n- Updated dependencies [b2f29ae]\n  - @shopify/graphql-client@0.10.2\n\n## 0.2.6\n\n### Patch Changes\n\n- Updated dependencies [56d2fcd]\n  - @shopify/graphql-client@0.10.1\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.3.0\nDESCRIPTION: Documents addition of requestStream() function for Storefront API streamed responses\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/storefront-api-client/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.0\n\n### Minor Changes\n\n- 9df4bacf: Add new `requestStream()` function to support streamed responses from Storefront API\n\n### Patch Changes\n\n- Updated dependencies [9df4bacf]\n  - @shopify/graphql-client@0.10.0\n```\n\n----------------------------------------\n\nTITLE: Fetching Added Webhook Topics with Shopify API TypeScript\nDESCRIPTION: Demonstrates how to retrieve a list of webhook topics that were previously added to the Shopify webhook registry. Returns an array of topic strings like 'PRODUCTS_CREATE' and 'PRODUCTS_DELETE'.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/webhooks/getTopicsAdded.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst topics = shopify.webhooks.getTopicsAdded();\n// topics = ['PRODUCTS_CREATE', 'PRODUCTS_DELETE']\n```\n\n----------------------------------------\n\nTITLE: AppSubscription Return Type Structure in TypeScript\nDESCRIPTION: Defines the structure of the AppSubscription object returned from a successful call to shopify.billing.cancel. Contains the ID, name, and test flag properties.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/reference/billing/cancel.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: string;\n  name: string;\n  test: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Abstract Fetch Function with Node-fetch in Version 9\nDESCRIPTION: Example showing how to set up a runtime adapter in version 9 using the standard fetch API with node-fetch.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/migrating-to-v9.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport fetch from 'node-fetch';\nimport {setAbstractFetchFunc} from '@shopify/shopify-api/runtime';\n\nsetAbstractFetchFunc(fetch);\n```\n\n----------------------------------------\n\nTITLE: Package.json Dependency Update\nDESCRIPTION: Diff showing the update of @shopify/shopify-api package version from 5.0.0 to 6.0.0.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-17_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n   \"dependencies\": {\n-    \"@shopify/shopify-api\": \"^5.0.0\",\n+    \"@shopify/shopify-api\": \"^6.0.0\",\n```\n\n----------------------------------------\n\nTITLE: Importing CloudFlare Worker Adapter for Shopify API\nDESCRIPTION: Imports the CloudFlare Worker adapter for the Shopify API library to set up the appropriate runtime environment for a CloudFlare Worker application.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@shopify/shopify-api/adapters/cf-worker';\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Codegen with PNPM\nDESCRIPTION: Command to execute the GraphQL Codegen process using PNPM to generate type definitions for GraphQL operations.\nSOURCE: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/graphql-types.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npnpm run graphql-codegen\n```"
  }
]