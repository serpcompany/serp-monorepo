[
  {
    "owner": "pallets",
    "repo": "jinja",
    "content": "TITLE: Basic Jinja Template Structure in HTML\nDESCRIPTION: Demonstrates a minimal Jinja template with variables, loops, and comments embedded in HTML. Shows the default Jinja delimiters and basic template logic.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_0\n\nLANGUAGE: html+jinja\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>My Webpage</title>\n</head>\n<body>\n    <ul id=\"navigation\">\n    {% for item in navigation %}\n        <li><a href=\"{{ item.href }}\">{{ item.caption }}</a></li>\n    {% endfor %}\n    </ul>\n\n    <h1>My Webpage</h1>\n    {{ a_variable }}\n\n    {# a comment #}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Basic Jinja Template Example\nDESCRIPTION: Demonstrates core Jinja templating features including template inheritance, block definitions, looping, and variable output. This example shows how to create a member list using Jinja syntax.\nSOURCE: https://github.com/pallets/jinja/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jinja\nCODE:\n```\n{% extends \"base.html\" %}\n{% block title %}Members{% endblock %}\n{% block content %}\n  <ul>\n  {% for user in users %}\n    <li><a href=\"{{ user.url }}\">{{ user.username }}</a></li>\n  {% endfor %}\n  </ul>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Variable Assignments in Jinja\nDESCRIPTION: Examples of assigning values to variables in Jinja templates, including assigning a list of navigation links and unpacking values from a function call.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_37\n\nLANGUAGE: jinja\nCODE:\n```\n{% set navigation = [('index.html', 'Index'), ('about.html', 'About')] %}\n{% set key, value = call_something() %}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Jinja Environment with PackageLoader\nDESCRIPTION: Creates a Jinja Environment that loads templates from the 'templates' folder in the 'yourapp' package. This configuration also enables autoescaping for HTML files using select_autoescape().\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/api.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom jinja2 import Environment, PackageLoader, select_autoescape\nenv = Environment(\n    loader=PackageLoader(\"yourapp\"),\n    autoescape=select_autoescape()\n)\n```\n\n----------------------------------------\n\nTITLE: Child Template Extending Base Template\nDESCRIPTION: Shows how a child template extends and overrides blocks from a parent template. This example demonstrates using the extends tag, overriding specific blocks, and using the super() function to include parent content.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_11\n\nLANGUAGE: jinja\nCODE:\n```\n{% extends \"base.html\" %}\n{% block title %}Index{% endblock %}\n{% block head %}\n    {{ super() }}\n    <style type=\"text/css\">\n        .important { color: #336699; }\n    </style>\n{% endblock %}\n{% block content %}\n    <h1>Index</h1>\n    <p class=\"important\">\n      Welcome to my awesome homepage.\n    </p>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Base Template Structure with Block Definitions\nDESCRIPTION: Defines a base HTML skeleton template with blocks that child templates can override. Demonstrates the fundamental structure for template inheritance in Jinja with head, title, content, and footer blocks.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_10\n\nLANGUAGE: jinja\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    {% block head %}\n    <link rel=\"stylesheet\" href=\"style.css\" />\n    <title>{% block title %}{% endblock %} - My Webpage</title>\n    {% endblock %}\n</head>\n<body>\n    <div id=\"content\">{% block content %}{% endblock %}</div>\n    <div id=\"footer\">\n        {% block footer %}\n        &copy; Copyright 2008 by <a href=\"http://domain.invalid/\">you</a>.\n        {% endblock %}\n    </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Including Templates in Jinja\nDESCRIPTION: Shows how to include other templates within the current template, demonstrating basic inclusion of header and footer templates.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_41\n\nLANGUAGE: jinja\nCODE:\n```\n{% include 'header.html' %}\nBody goes here.\n{% include 'footer.html' %}\n```\n\n----------------------------------------\n\nTITLE: Multi-level Template Inheritance with super References\nDESCRIPTION: Demonstrates multi-level template inheritance where super references can be chained (as in super.super()) to skip levels in the inheritance tree. Shows parent, child, and grandchild template relationships.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_14\n\nLANGUAGE: jinja\nCODE:\n```\n# parent.tmpl\nbody: {% block body %}Hi from parent.{% endblock %}\n\n# child.tmpl\n{% extends \"parent.tmpl\" %}\n{% block body %}Hi from child. {{ super() }}{% endblock %}\n\n# grandchild1.tmpl\n{% extends \"child.tmpl\" %}\n{% block body %}Hi from grandchild1.{% endblock %}\n\n# grandchild2.tmpl\n{% extends \"child.tmpl\" %}\n{% block body %}Hi from grandchild2. {{ super.super() }} {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Controlling Autoescaping in Jinja Templates\nDESCRIPTION: Demonstrates how to activate and deactivate autoescaping from within Jinja templates using the autoescape tag. This allows fine-grained control over escaping behavior in different parts of the template.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_70\n\nLANGUAGE: jinja\nCODE:\n```\n{% autoescape true %}\n    Autoescaping is active within this block\n{% endautoescape %}\n\n{% autoescape false %}\n    Autoescaping is inactive within this block\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Defining a Form Input Macro in Jinja\nDESCRIPTION: A macro that renders an HTML form input element with customizable attributes including name, value, type, and size. The macro demonstrates how to create reusable template components.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_27\n\nLANGUAGE: jinja\nCODE:\n```\n{% macro input(name, value='', type='text', size=20) -%}\n    <input type=\"{{ type }}\" name=\"{{ name }}\" value=\"{{\n        value|e }}\" size=\"{{ size }}\">\n{%- endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Jinja Variable Access Examples\nDESCRIPTION: Illustrates different ways to access variables in Jinja templates, including dot notation and subscript syntax for attributes and elements.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_1\n\nLANGUAGE: jinja\nCODE:\n```\n{{ foo.bar }}\n{{ foo['bar'] }}\n```\n\n----------------------------------------\n\nTITLE: Using Python Methods in Jinja Templates\nDESCRIPTION: Demonstrates calling Python methods on variables in Jinja templates. This allows for more complex operations like string manipulation directly in the template.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_50\n\nLANGUAGE: jinja\nCODE:\n```\n{{ page.title.capitalize() }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dialog Rendering Macro with Caller Support\nDESCRIPTION: A Jinja macro that creates a dialog box and uses the 'caller()' special variable to allow for custom content to be injected into the dialog box.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_31\n\nLANGUAGE: jinja\nCODE:\n```\n{% macro render_dialog(title, class='dialog') -%}\n    <div class=\"{{ class }}\">\n        <h2>{{ title }}</h2>\n        <div class=\"contents\">\n            {{ caller() }}\n        </div>\n    </div>\n{%- endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Using Namespace Objects for Cross-Scope Communication in Jinja\nDESCRIPTION: Demonstrates how to use namespace objects to modify and access variables across different scopes in Jinja, solving the problem of variable scope isolation in loops.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_38\n\nLANGUAGE: jinja\nCODE:\n```\n{% set ns = namespace(found=false) %}\n{% for item in items %}\n    {% if item.check_something() %}\n        {% set ns.found = true %}\n    {% endif %}\n    * {{ item.title }}\n{% endfor %}\nFound item having something: {{ ns.found }}\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic in Jinja\nDESCRIPTION: Shows if-elif-else conditional structure usage in templates for complex branching logic.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_26\n\nLANGUAGE: jinja\nCODE:\n```\n{% if kenny.sick %}\n    Kenny is sick.\n{% elif kenny.dead %}\n    You killed Kenny!  You bastard!!!\n{% else %}\n    Kenny looks okay --- so far\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Jinja Filter Usage Example\nDESCRIPTION: Shows how to apply multiple filters to a variable in a Jinja template, demonstrating filter chaining and argument passing.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_2\n\nLANGUAGE: jinja\nCODE:\n```\n{{ name|striptags|title }}\n{{ listx|join(', ') }}\n```\n\n----------------------------------------\n\nTITLE: Loading a Template from the Jinja Environment\nDESCRIPTION: Demonstrates how to load a template from a configured Jinja Environment using the get_template method, which returns a Template object.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/api.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntemplate = env.get_template(\"mytemplate.html\")\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Lists with Jinja\nDESCRIPTION: Demonstrates how to create a list of links using Jinja's list syntax within a for loop. This technique allows for generating HTML elements from structured data.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_48\n\nLANGUAGE: jinja\nCODE:\n```\n<ul>\n{% for href, caption in [('index.html', 'Index'), ('about.html', 'About'),\n                         ('downloads.html', 'Downloads')] %}\n    <li><a href=\"{{ href }}\">{{ caption }}</a></li>\n{% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Dictionary Iteration in Jinja\nDESCRIPTION: Demonstrates iterating over dictionary key-value pairs using items() method.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_21\n\nLANGUAGE: jinja\nCODE:\n```\n<dl>\n{% for key, value in my_dict.items() %}\n    <dt>{{ key|e }}</dt>\n    <dd>{{ value|e }}</dd>\n{% endfor %}\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Manual HTML Escaping in Jinja\nDESCRIPTION: Demonstrates how to manually escape variables using the |e filter to prevent XSS vulnerabilities.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_19\n\nLANGUAGE: jinja\nCODE:\n```\n{{ user.username|e }}\n```\n\n----------------------------------------\n\nTITLE: Basic For Loop in Jinja Templates\nDESCRIPTION: Shows how to iterate over a list of users and display their usernames in an HTML unordered list.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_20\n\nLANGUAGE: jinja\nCODE:\n```\n<h1>Members</h1>\n<ul>\n{% for user in users %}\n  <li>{{ user.username|e }}</li>\n{% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Filtered Loop with Else Block\nDESCRIPTION: Shows how to filter items during iteration and provide a default case using else block.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_24\n\nLANGUAGE: jinja\nCODE:\n```\n<ul>\n{% for user in users %}\n    <li>{{ user.username|e }}</li>\n{% else %}\n    <li><em>no users found</em></li>\n{% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Jinja Template Inheritance Pattern - Parent Layout\nDESCRIPTION: Demonstrates a parent template (layout.txt) that defines a macro and a block that can be overridden by child templates. Shows how macro scoping works in template inheritance.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_29\n\nLANGUAGE: jinja\nCODE:\n```\n{% macro foo() %}LAYOUT{% endmacro %}\n{% block body %}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoescaping with select_autoescape\nDESCRIPTION: Sets up a Jinja Environment with autoescaping enabled for HTML, HTM, and XML files using the select_autoescape function, which provides a sensible default for autoescaping based on file extensions.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/api.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom jinja2 import Environment, PackageLoader, select_autoescape\nenv = Environment(autoescape=select_autoescape(['html', 'htm', 'xml']),\n                  loader=PackageLoader('mypackage'))\n```\n\n----------------------------------------\n\nTITLE: Jinja Template Inheritance Pattern - Child Template\nDESCRIPTION: Shows a child template (child.txt) that extends a parent layout and defines its own version of a macro. Demonstrates that the parent's macro takes precedence over the child's version.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_30\n\nLANGUAGE: jinja\nCODE:\n```\n{% extends 'layout.txt' %}\n{% macro foo() %}CHILD{% endmacro %}\n{% block body %}{{ foo() }}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using a Jinja Macro for Form Elements\nDESCRIPTION: Example showing how to call a previously defined input macro with different parameters to create username and password form fields.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_28\n\nLANGUAGE: jinja\nCODE:\n```\n<p>{{ input('username') }}</p>\n<p>{{ input('password', type='password') }}</p>\n```\n\n----------------------------------------\n\nTITLE: Sorted Dictionary Iteration with dictsort Filter\nDESCRIPTION: Shows how to iterate over dictionary items in sorted order using the dictsort filter.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_22\n\nLANGUAGE: jinja\nCODE:\n```\n<dl>\n{% for key, value in my_dict | dictsort %}\n    <dt>{{ key|e }}</dt>\n    <dd>{{ value|e }}</dd>\n{% endfor %}\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Using super() to Access Parent Block Content\nDESCRIPTION: Shows how to render the contents of a parent block within a child block using the super() function. This technique allows extending parent block content rather than completely replacing it.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_13\n\nLANGUAGE: jinja\nCODE:\n```\n{% block sidebar %}\n    <h3>Table Of Contents</h3>\n    ...\n    {{ super() }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Macros from External Templates in Jinja\nDESCRIPTION: Demonstrates how to import an entire template as a module and access its macros as attributes. This approach provides maximum flexibility.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_45\n\nLANGUAGE: jinja\nCODE:\n```\n{% import 'forms.html' as forms %}\n<dl>\n    <dt>Username</dt>\n    <dd>{{ forms.input('username') }}</dd>\n```\n\n----------------------------------------\n\nTITLE: Using Template Objects with extends in Jinja\nDESCRIPTION: Demonstrates how to use template objects with extends, include, and import in Jinja. This advanced technique allows loading templates with Python code and passing them to the template engine.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nif debug_mode:\n    layout = env.get_template(\"debug_layout.html\")\nelse:\n    layout = env.get_template(\"layout.html\")\n\nuser_detail = env.get_template(\"user/detail.html\")\nreturn user_detail.render(layout=layout)\n```\n\nLANGUAGE: jinja\nCODE:\n```\n{% extends layout %}\n```\n\n----------------------------------------\n\nTITLE: Creating Form Macros in a Separate Template\nDESCRIPTION: Defines a forms.html template with input and textarea macros that can be imported and used by other templates.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_44\n\nLANGUAGE: jinja\nCODE:\n```\n{% macro input(name, value='', type='text') -%}\n    <input type=\"{{ type }}\" value=\"{{ value|e }}\" name=\"{{ name }}\">\n{%- endmacro %}\n\n{%- macro textarea(name, value='', rows=10, cols=40) -%}\n    <textarea name=\"{{ name }}\" rows=\"{{ rows }}\" cols=\"{{ cols\n        }}\">{{ value|e }}</textarea>\n{%- endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Recursive Sitemap Generation\nDESCRIPTION: Demonstrates recursive loop usage for generating nested HTML structures like sitemaps.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_25\n\nLANGUAGE: jinja\nCODE:\n```\n<ul class=\"sitemap\">\n{%- for item in sitemap recursive %}\n    <li><a href=\"{{ item.href|e }}\">{{ item.title }}</a>\n    {%- if item.children -%}\n        <ul class=\"submenu\">{{ loop(item.children) }}</ul>\n    {%- endif %}</li>\n{%- endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Template Inclusion with Context Options in Jinja\nDESCRIPTION: Demonstrates different ways to include templates with options for context sharing and handling missing templates.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_42\n\nLANGUAGE: jinja\nCODE:\n```\n{% include \"sidebar.html\" without context %}\n{% include \"sidebar.html\" ignore missing %}\n{% include \"sidebar.html\" ignore missing with context %}\n{% include \"sidebar.html\" ignore missing without context %}\n```\n\n----------------------------------------\n\nTITLE: Loop Cycling in Jinja\nDESCRIPTION: Demonstrates how to alternate between values in a loop using loop.cycle.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_23\n\nLANGUAGE: jinja\nCODE:\n```\n{% for row in rows %}\n    <li class=\"{{ loop.cycle('odd', 'even') }}\">{{ row }}</li>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Controlling Context in Jinja Imports\nDESCRIPTION: Shows how to explicitly control context behavior when importing or including templates. Adding 'with context' passes the current context to imported templates, while 'without context' prevents context passing.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_47\n\nLANGUAGE: jinja\nCODE:\n```\n{% from 'forms.html' import input with context %}\n{% include 'header.html' without context %}\n```\n\n----------------------------------------\n\nTITLE: Importing Names from Templates in Jinja\nDESCRIPTION: Demonstrates how to import specific macros from another template into the current namespace using the 'from' statement. This allows reuse of macros across different templates.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_46\n\nLANGUAGE: jinja\nCODE:\n```\n{% from 'forms.html' import input as input_field, textarea %}\n<dl>\n    <dt>Username</dt>\n    <dd>{{ input_field('username') }}</dd>\n    <dt>Password</dt>\n    <dd>{{ input_field('password', type='password') }}</dd>\n</dl>\n<p>{{ textarea('comment') }}</p>\n```\n\n----------------------------------------\n\nTITLE: Block Assignments in Jinja\nDESCRIPTION: Shows how to use block assignments to create multi-line strings in Jinja templates, capturing content between set and endset tags into a variable.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_39\n\nLANGUAGE: jinja\nCODE:\n```\n{% set navigation %}\n    <li><a href=\"/\">Index</a>\n    <li><a href=\"/downloads\">Downloads</a>\n{% endset %}\n```\n\n----------------------------------------\n\nTITLE: Invoking User-Defined Methods in Jinja\nDESCRIPTION: Shows how to call methods on user-defined types in Jinja templates. This enables more complex object manipulation within templates.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_51\n\nLANGUAGE: jinja\nCODE:\n```\n{{ f.bar(value) }}\n```\n\n----------------------------------------\n\nTITLE: Including Templates from a List in Jinja\nDESCRIPTION: Shows how to provide a list of templates for inclusion, where Jinja will use the first one that exists. This provides fallback options for template inclusion.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_43\n\nLANGUAGE: jinja\nCODE:\n```\n{% include ['page_detailed.html', 'page.html'] %}\n{% include ['special_sidebar.html', 'sidebar.html'] ignore missing %}\n```\n\n----------------------------------------\n\nTITLE: Basic Translation with i18n Extension in Jinja2\nDESCRIPTION: Shows how to mark text as translatable using the trans block from the i18n extension. Variables within the block must be simple names.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_58\n\nLANGUAGE: jinja\nCODE:\n```\n{% trans %}Hello, {{ user }}!{% endtrans %}\n```\n\n----------------------------------------\n\nTITLE: Jinja Whitespace Control Examples\nDESCRIPTION: Illustrates various techniques for controlling whitespace in Jinja templates, including trim_blocks, lstrip_blocks, and manual control using plus and minus signs.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_5\n\nLANGUAGE: jinja\nCODE:\n```\n<div>\n    {% if True %}\n        yay\n    {% endif %}\n</div>\n\n<div>\n        {%+ if something %}yay{% endif %}\n</div>\n\n<div>\n    {% if something +%}\n        yay\n    {% endif %}\n</div>\n\n{% for item in seq -%}\n    {{ item }}\n{%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: Block Scoping in Jinja Templates\nDESCRIPTION: Demonstrates block scoping in Jinja templates. By default, blocks cannot access variables from outside scopes, but adding the 'scoped' modifier allows blocks to access outer variables.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_16\n\nLANGUAGE: jinja\nCODE:\n```\n{% for item in seq %}\n    <li>{% block loop_item %}{{ item }}{% endblock %}</li>\n{% endfor %}\n```\n\nLANGUAGE: jinja\nCODE:\n```\n{% for item in seq %}\n    <li>{% block loop_item scoped %}{{ item }}{% endblock %}</li>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Loop Controls in Jinja2 Templates\nDESCRIPTION: Demonstrates the break and continue controls from the loopcontrols extension, allowing for more complex loop behavior such as skipping iterations.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_65\n\nLANGUAGE: jinja\nCODE:\n```\n{% for user in users %}\n    {%- if loop.index is even %}{% continue %}{% endif %}\n    ...\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Datetime Filter in Python for Jinja2\nDESCRIPTION: A custom filter that formats datetime objects according to a specified format string. The filter takes a datetime value and optional format string parameter, returning the formatted date string.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/api.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef datetime_format(value, format=\"%H:%M %d-%m-%y\"):\n    return value.strftime(format)\n\nenvironment.filters[\"datetime_format\"] = datetime_format\n```\n\n----------------------------------------\n\nTITLE: Using With Statement for Scoping in Jinja\nDESCRIPTION: Illustrates the use of the with statement to create a new inner scope in Jinja templates. Variables set within this scope are not visible outside. Two equivalent examples are shown for setting variables at the beginning of the scope.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_69\n\nLANGUAGE: jinja\nCODE:\n```\n{% with %}\n    {% set foo = 42 %}\n    {{ foo }}           foo is 42 here\n{% endwith %}\nfoo is not visible here any longer\n```\n\nLANGUAGE: jinja\nCODE:\n```\n{% with foo = 42 %}\n    {{ foo }}\n{% endwith %}\n```\n\nLANGUAGE: jinja\nCODE:\n```\n{% with %}\n    {% set foo = 42 %}\n    {{ foo }}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Using String Formatting with Optional Values in Jinja\nDESCRIPTION: Demonstrates conditional string formatting with inline if expressions. This allows for graceful handling of potentially undefined variables in templates.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_52\n\nLANGUAGE: jinja\nCODE:\n```\n{{ \"[{}]\".format(page.title) if page.title }}\n```\n\n----------------------------------------\n\nTITLE: Using the Call Block with a Jinja Macro\nDESCRIPTION: Demonstrates how to use the call block to pass content to a macro that uses the caller() function to render that content within its structure.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_32\n\nLANGUAGE: jinja\nCODE:\n```\n{% call render_dialog('Hello World') %}\n    This is a simple dialog rendered by using a macro and\n    a call block.\n{% endcall %}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Template with Variables\nDESCRIPTION: Shows how to render a template with variables by calling the render method on a Template object, passing the variables as keyword arguments.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/api.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(template.render(the=\"variables\", go=\"here\"))\n```\n\n----------------------------------------\n\nTITLE: Using Filter Sections in Jinja\nDESCRIPTION: Demonstrates how to apply filters to blocks of content using the filter section syntax. This example converts text to uppercase.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_35\n\nLANGUAGE: jinja\nCODE:\n```\n{% filter upper %}\n    This text becomes uppercase\n{% endfilter %}\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment in Jinja Template\nDESCRIPTION: Example of assigning the result of a function call to a variable within a Jinja template using the set statement.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/api.rst#2025-04-21_snippet_6\n\nLANGUAGE: jinja\nCODE:\n```\n{% set comments = get_latest_comments() %}\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Interpolation in Jinja2\nDESCRIPTION: Shows how to interpolate variables in Jinja2 templates using both printf-style formatting and the more modern format method.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_53\n\nLANGUAGE: jinja\nCODE:\n```\n{{ \"Hello, %s!\" % name }}\n```\n\nLANGUAGE: jinja\nCODE:\n```\n{{ \"Hello, {}!\".format(name) }}\n```\n\n----------------------------------------\n\nTITLE: Using Filters with Arguments in Jinja\nDESCRIPTION: Shows how to apply a filter with arguments to a block of content. This example centers text with a width of 100 characters.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_36\n\nLANGUAGE: jinja\nCODE:\n```\n{% filter center(100) %}Center this{% endfilter %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Prime Number Test in Python for Jinja2\nDESCRIPTION: A custom test function that checks if a given number is prime. Returns True for prime numbers and False otherwise. Can be used in template conditionals.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/api.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport math\n\ndef is_prime(n):\n    if n == 2:\n        return True\n\n    for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\nenvironment.tests[\"prime\"] = is_prime\n```\n\n----------------------------------------\n\nTITLE: Range Function Usage in Jinja2 Templates\nDESCRIPTION: Demonstrates how to use the range function to create a list of integers, particularly useful for filling templates with placeholder items.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_54\n\nLANGUAGE: html+jinja\nCODE:\n```\n<ul>\n{% for user in users %}\n    <li>{{ user.username }}</li>\n{% endfor %}\n{% for number in range(10 - users|count) %}\n    <li class=\"empty\"><span>...</span></li>\n{% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Installing Gettext Translations in Jinja Environment\nDESCRIPTION: Shows how to install gettext translations globally for a Jinja environment. This is useful for multilingual applications where all users receive the same language.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/extensions.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntranslations = get_gettext_translations()\nenv = Environment(extensions=[\"jinja2.ext.i18n\"])\nenv.install_gettext_translations(translations)\n```\n\n----------------------------------------\n\nTITLE: Namespace Usage for Variable Scoping in Jinja2\nDESCRIPTION: Shows how to use namespace to create a container for variables, particularly useful for carrying values from within a loop to an outer scope.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_57\n\nLANGUAGE: jinja\nCODE:\n```\n{% set ns = namespace(found=false) %}\n{% for item in items %}\n    {% if item.check_something() %}\n        {% set ns.found = true %}\n    {% endif %}\n    * {{ item.title }}\n{% endfor %}\nFound item having something: {{ ns.found }}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Line Break Filter in Python for Jinja2\nDESCRIPTION: A custom filter that converts line breaks into HTML br and p tags. Uses evaluation context to handle autoescaping and properly marks output as safe HTML when needed.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/api.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport re\nfrom jinja2 import pass_eval_context\nfrom markupsafe import Markup, escape\n\n@pass_eval_context\ndef nl2br(eval_ctx, value):\n    br = \"<br>\\n\"\n\n    if eval_ctx.autoescape:\n        value = escape(value)\n        br = Markup(br)\n\n    result = \"\\n\\n\".join(\n        f\"<p>{br.join(p.splitlines())}</p>\"\n        for p in re.split(r\"(?:\\r\\n|\\r(?!\\n)|\\n){2,}\", value)\n    )\n    return Markup(result) if eval_ctx.autoescape else result\n```\n\n----------------------------------------\n\nTITLE: Using New Style Gettext Calls in Jinja Templates\nDESCRIPTION: Shows how to use new style gettext calls in Jinja templates, which simplify internationalization by combining translation and formatting in a single step.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/extensions.rst#2025-04-21_snippet_4\n\nLANGUAGE: jinja\nCODE:\n```\n{{ gettext(\"Hello, World!\") }}\n{{ gettext(\"Hello, %(name)s!\", name=name) }}\n{{ ngettext(\"%(num)d apple\", \"%(num)d apples\", apples|count) }}\n{{ pgettext(\"greeting\", \"Hello, World!\") }}\n{{ npgettext(\"fruit\", \"%(num)d apple\", \"%(num)d apples\", apples|count) }}\n```\n\n----------------------------------------\n\nTITLE: Using Joiner Helper in Jinja2\nDESCRIPTION: Demonstrates the joiner helper which returns a specified string on each call except the first, useful for conditionally joining multiple sections with a separator.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_56\n\nLANGUAGE: jinja\nCODE:\n```\n{% set pipe = joiner(\"|\") %}\n{% if categories %} {{ pipe() }}\n    Categories: {{ categories|join(\", \") }}\n{% endif %}\n{% if author %} {{ pipe() }}\n    Author: {{ author() }}\n{% endif %}\n{% if can_edit %} {{ pipe() }}\n    <a href=\"?action=edit\">Edit</a>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Integer Output from Jinja2 NativeEnvironment\nDESCRIPTION: This snippet shows how to create a NativeEnvironment instance and render a template that produces an integer result instead of a string representation of a number.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/nativetypes.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nenv = NativeEnvironment()\nt = env.from_string('{{ x + y }}')\nresult = t.render(x=4, y=2)\nprint(result)\nprint(type(result))\n```\n\n----------------------------------------\n\nTITLE: Limiting Loop Iterations in Jinja\nDESCRIPTION: Demonstrates how to use a conditional break statement to stop processing a loop after the 10th iteration. The loop.index variable is used to track the current iteration, starting from 1.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_66\n\nLANGUAGE: jinja\nCODE:\n```\n{% for user in users %}\n    {%- if loop.index >= 10 %}{% break %}{% endif %}\n{%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: Translation Functions in Jinja2 Expressions\nDESCRIPTION: Shows how to use translation functions directly in expressions, allowing for inline translations and formatting.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_63\n\nLANGUAGE: jinja\nCODE:\n```\n{{ _(\"Hello, World!\") }}\n```\n\nLANGUAGE: jinja\nCODE:\n```\n{{ _(\"Hello, %(user)s!\")|format(user=user.username) }}\n```\n\nLANGUAGE: jinja\nCODE:\n```\n{{ gettext('Hello World!') }}\n{{ gettext('Hello %(name)s!', name='World') }}\n{{ ngettext('%(num)d apple', '%(num)d apples', apples|count) }}\n```\n\n----------------------------------------\n\nTITLE: String Fallback in Jinja2 NativeEnvironment\nDESCRIPTION: Demonstrates that templates that don't match Python literal syntax will still be rendered as strings in the NativeEnvironment.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/nativetypes.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nt = env.from_string('{{ x }} * {{ y }}')\nresult = t.render(x=4, y=2)\nprint(result)\nprint(type(result))\n```\n\n----------------------------------------\n\nTITLE: Pluralization in Jinja2 Translations\nDESCRIPTION: Shows how to specify both singular and plural forms for translation using the pluralize tag, with automatic selection based on a count variable.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_60\n\nLANGUAGE: jinja\nCODE:\n```\n{% trans count=list|length %}\nThere is {{ count }} {{ name }} object.\n{% pluralize %}\nThere are {{ count }} {{ name }} objects.\n{% endtrans %}\n```\n\nLANGUAGE: jinja\nCODE:\n```\n{% trans ..., user_count=users|length %}...\n{% pluralize user_count %}...{% endtrans %}\n```\n\n----------------------------------------\n\nTITLE: Object Preservation in Jinja2 NativeEnvironment\nDESCRIPTION: Shows how the NativeEnvironment preserves Python objects when they are the only node in a template, allowing for object passing through templates.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/nativetypes.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Foo:\n    def __init__(self, value):\n        self.value = value\n\nresult = env.from_string('{{ x }}').render(x=Foo(15))\nprint(type(result).__name__)\nprint(result.value)\n```\n\n----------------------------------------\n\nTITLE: Loops in Jinja Templates\nDESCRIPTION: Example of Jinja template syntax for loops, using 'loop' for loop context and 'else' block for handling empty collections.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/switching.rst#2025-04-21_snippet_6\n\nLANGUAGE: jinja\nCODE:\n```\n{% for item in items %}\n    {{ loop.index }}. {{ item }}\n{% else %}\n    No items!\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Using a Call Block with Arguments in Jinja\nDESCRIPTION: Demonstrates how to use a call block with the dump_users macro, receiving a user object as an argument and rendering additional user details in a definition list.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_34\n\nLANGUAGE: jinja\nCODE:\n```\n{% call(user) dump_users(list_of_user) %}\n    <dl>\n        <dt>Realname</dt>\n        <dd>{{ user.realname|e }}</dd>\n        <dt>Description</dt>\n        <dd>{{ user.description }}</dd>\n    </dl>\n{% endcall %}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using SandboxedEnvironment in Python\nDESCRIPTION: Demonstrates how to create a SandboxedEnvironment, define a function, and render a template with restricted access to function attributes.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/sandbox.rst#2025-04-21_snippet_0\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from jinja2.sandbox import SandboxedEnvironment\n>>> env = SandboxedEnvironment()\n>>> func = lambda: \"Hello, Sandbox!\"\n>>> env.from_string(\"{{ func() }}\").render(func=func)\n'Hello, Sandbox!'\n>>> env.from_string(\"{{ func.__code__.co_code }}\").render(func=func)\nTraceback (most recent call last):\n  ...\nSecurityError: access to attribute '__code__' of 'function' object is unsafe.\n```\n\n----------------------------------------\n\nTITLE: Configuring Jinja Environment in Pylons\nDESCRIPTION: Sets up the Jinja environment in a Pylons application's config/environment.py file. Creates an Environment instance with a PackageLoader for template loading.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/integration.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom jinja2 import Environment, PackageLoader\nconfig['pylons.app_globals'].jinja_env = Environment(\n    loader=PackageLoader('yourapplication', 'templates')\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Navigation Bar with Active Item Highlighting\nDESCRIPTION: Shows how to implement a navigation bar with active item highlighting using a list of tuples and conditional CSS classes.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/tricks.rst#2025-04-21_snippet_3\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% set navigation_bar = [\n    ('/', 'index', 'Index'),\n    ('/downloads/', 'downloads', 'Downloads'),\n    ('/about/', 'about', 'About')\n] -%}\n{% set active_page = active_page|default('index') -%}\n...\n<ul id=\"navigation\">\n{% for href, id, caption in navigation_bar %}\n  <li{% if id == active_page %} class=\"active\"{% endif %}>\n  <a href=\"{{ href|e }}\">{{ caption|e }}</a></li>\n{% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Advanced Call Block with Arguments in Jinja\nDESCRIPTION: Shows how to create a macro that passes arguments back to the call block, allowing for complex interactions. This example renders a user list with customizable details for each user.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_33\n\nLANGUAGE: jinja\nCODE:\n```\n{% macro dump_users(users) -%}\n    <ul>\n    {%- for user in users %}\n        <li><p>{{ user.username|e }}</p>{{ caller(user) }}</li>\n    {%- endfor %}\n    </ul>\n{%- endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Expression Statement in Jinja2 with do Tag\nDESCRIPTION: Shows how to use the do tag from the expression-statement extension to evaluate expressions without printing results, useful for modifying lists.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_64\n\nLANGUAGE: jinja\nCODE:\n```\n{% do navigation.append('a string') %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Loops in Nested Jinja Iterations\nDESCRIPTION: Demonstrates how to access outer loop variables in nested loop structures using loop aliasing.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/tricks.rst#2025-04-21_snippet_4\n\nLANGUAGE: html+jinja\nCODE:\n```\n<table>\n{% for row in table %}\n  <tr>\n  {% set rowloop = loop %}\n  {% for cell in row %}\n    <td id=\"cell-{{ rowloop.index }}-{{ loop.index }}\">{{ cell }}</td>\n  {% endfor %}\n  </tr>\n{% endfor %}\n</table>\n```\n\n----------------------------------------\n\nTITLE: Referencing a Block Multiple Times with self Variable\nDESCRIPTION: Demonstrates how to print a block multiple times in a template using the special self variable. This allows referencing a block's content in different locations within the template.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_12\n\nLANGUAGE: jinja\nCODE:\n```\n<title>{% block title %}{% endblock %}</title>\n<h1>{{ self.title() }}</h1>\n{% block body %}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Jinja Comment Syntax Example\nDESCRIPTION: Shows how to use Jinja's comment syntax to comment out parts of a template.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_4\n\nLANGUAGE: jinja\nCODE:\n```\n{# note: commented-out template because we no longer use this\n    {% for user in users %}\n        ...\n    {% endfor %}\n#}\n```\n\n----------------------------------------\n\nTITLE: Using Cycler for Alternating Classes in Jinja2\nDESCRIPTION: Shows how to use the cycler function to alternate between values across multiple loops, useful for creating alternating CSS classes in lists.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_55\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% set row_class = cycler(\"odd\", \"even\") %}\n<ul class=\"browser\">\n{% for folder in folders %}\n  <li class=\"folder {{ row_class.next() }}\">{{ folder }}\n{% endfor %}\n{% for file in files %}\n  <li class=\"file {{ row_class.next() }}\">{{ file }}\n{% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Standard Gettext Calls in Jinja Templates\nDESCRIPTION: Demonstrates how to use standard gettext calls in Jinja templates for internationalization. Includes examples of gettext, ngettext, pgettext, and npgettext functions.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/extensions.rst#2025-04-21_snippet_3\n\nLANGUAGE: jinja\nCODE:\n```\n{{ gettext(\"Hello, World!\") }}\n{{ gettext(\"Hello, %(name)s!\")|format(name=name) }}\n{{ ngettext(\n       \"%(num)d apple\", \"%(num)d apples\", apples|count\n   )|format(num=apples|count) }}\n{{ pgettext(\"greeting\", \"Hello, World!\") }}\n{{ npgettext(\n       \"fruit\", \"%(num)d apple\", \"%(num)d apples\", apples|count\n   )|format(num=apples|count) }}\n```\n\n----------------------------------------\n\nTITLE: Multi-line Statement Examples in Jinja\nDESCRIPTION: Shows how line statements can span multiple lines when there are open parentheses, braces, or brackets. This example demonstrates creating a list of links with href and caption pairs.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_8\n\nLANGUAGE: jinja\nCODE:\n```\n<ul>\n# for href, caption in [('index.html', 'Index'),\n                            ('about.html', 'About')]:\n    <li><a href=\"{{ href }}\">{{ caption }}</a></li>\n# endfor\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Adding Jinja Extensions at Environment Creation\nDESCRIPTION: Shows how to add extensions when creating a Jinja environment. This example adds the i18n extension for internationalization support.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/extensions.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\njinja_env = Environment(extensions=['jinja2.ext.i18n'])\n```\n\n----------------------------------------\n\nTITLE: Required Blocks in Template Inheritance\nDESCRIPTION: Shows how to use required blocks in template inheritance. Required blocks must be overridden at some point in the inheritance chain, though not necessarily by the direct child template.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_17\n\nLANGUAGE: jinja\nCODE:\n```\n{% block body required %}{% endblock %}\n```\n\nLANGUAGE: jinja\nCODE:\n```\n{% extends \"page.txt\" %}\n```\n\nLANGUAGE: jinja\nCODE:\n```\n{% extends \"issue.txt\" %}\n{% block body %}Provide steps to demonstrate the bug.{% endblock %}\n```\n\nLANGUAGE: jinja\nCODE:\n```\n{% block body scoped %}{% endblock %}\n{% block body required %}{% endblock %}\n{% block body scoped required %}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Jinja Test Usage Examples\nDESCRIPTION: Demonstrates how to use tests in Jinja templates, including examples with and without arguments.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_3\n\nLANGUAGE: jinja\nCODE:\n```\n{% if loop.index is divisibleby 3 %}\n{% if loop.index is divisibleby(3) %}\n```\n\n----------------------------------------\n\nTITLE: Adding Jinja Extensions After Environment Creation\nDESCRIPTION: Demonstrates how to add extensions to an existing Jinja environment using the add_extension method. This example adds the debug extension.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/extensions.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\njinja_env.add_extension('jinja2.ext.debug')\n```\n\n----------------------------------------\n\nTITLE: Block Assignment with Filters in Jinja\nDESCRIPTION: Demonstrates applying a filter (wordwrap) to a block assignment, which will process the entire captured content with the filter.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_40\n\nLANGUAGE: jinja\nCODE:\n```\n{% set reply | wordwrap %}\n    You wrote:\n    {{ message }}\n{% endset %}\n```\n\n----------------------------------------\n\nTITLE: Named Block End-Tags for Better Readability\nDESCRIPTION: Shows how to use named block end-tags to improve template readability. The name after the endblock word must match the block name, making nested blocks easier to follow.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_15\n\nLANGUAGE: jinja\nCODE:\n```\n{% block sidebar %}\n    {% block inner_sidebar %}\n        ...\n    {% endblock inner_sidebar %}\n{% endblock sidebar %}\n```\n\n----------------------------------------\n\nTITLE: Using Inline If Expressions in Jinja Templates\nDESCRIPTION: Shows how to use inline if expressions for conditional template extension. This is useful for dynamically choosing a template based on certain conditions.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_49\n\nLANGUAGE: jinja\nCODE:\n```\n{% extends layout_template if layout_template is defined else 'default.html' %}\n```\n\n----------------------------------------\n\nTITLE: Jinja Escaping and Raw Block Usage\nDESCRIPTION: Demonstrates how to escape Jinja syntax and use raw blocks to include literal Jinja-like syntax in templates.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_6\n\nLANGUAGE: jinja\nCODE:\n```\n{{ '{{' }}\n\n{% raw %}\n    <ul>\n    {% for item in seq %}\n        <li>{{ item }}</li>\n    {% endfor %}\n    </ul>\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Using Cache Extension in Jinja Templates\nDESCRIPTION: Demonstrates how to use the custom cache extension in a Jinja template to cache a sidebar for 300 seconds.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/extensions.rst#2025-04-21_snippet_6\n\nLANGUAGE: jinja\nCODE:\n```\n{% cache 'sidebar', 300 %}\n<div class=\"sidebar\">\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Trimmed Translation Blocks in Jinja2\nDESCRIPTION: Shows how to use the trimmed modifier to clean up whitespace in translation blocks, making translation strings more readable and less error-prone.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_61\n\nLANGUAGE: jinja\nCODE:\n```\n{% trans trimmed book_title=book.title %}\n    This is {{ book_title }}.\n    You should read it!\n{% endtrans %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sandboxed Native Environment in Jinja2\nDESCRIPTION: Shows how to combine SandboxedEnvironment and NativeEnvironment to create an environment that has both sandboxing security and native type output capabilities.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/nativetypes.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass SandboxedNativeEnvironment(SandboxedEnvironment, NativeEnvironment):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Context-Specific Translations in Jinja2\nDESCRIPTION: Demonstrates how to specify a context for translations when the meaning depends on the context, using pgettext functionality.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_62\n\nLANGUAGE: jinja\nCODE:\n```\n{% trans \"fruit\" %}apple{% endtrans %}\n{% trans \"fruit\" trimmed count -%}\n    1 apple\n{%- pluralize -%}\n    {{ count }} apples\n{%- endtrans %}\n```\n\n----------------------------------------\n\nTITLE: Using Line Statements in Jinja Templates\nDESCRIPTION: Demonstrates how line statements can be used as an alternative to traditional block syntax in Jinja. This example shows how to use the # prefix to mark lines as statements for looping through a sequence.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_7\n\nLANGUAGE: jinja\nCODE:\n```\n<ul>\n# for item in seq\n    <li>{{ item }}</li>\n# endfor\n</ul>\n\n<ul>\n{% for item in seq %}\n    <li>{{ item }}</li>\n{% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Creating Alternating Row Styles with Jinja Loop Cycle\nDESCRIPTION: Shows how to use the loop.cycle() method to alternate between CSS classes for table or list rows.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/tricks.rst#2025-04-21_snippet_1\n\nLANGUAGE: html+jinja\nCODE:\n```\n<ul>\n{% for row in rows %}\n  <li class=\"{{ loop.cycle('odd', 'even') }}\">{{ row }}</li>\n{% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Basic Template Caching Example in Jinja2 HTML\nDESCRIPTION: Example showing the end of a cached template block using Jinja's caching functionality.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/extensions.rst#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n    </div>\\n    {% endcache %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Extraction for Jinja Templates\nDESCRIPTION: Sets up Babel extraction configuration for Jinja templates in a mapping file. Specifies encoding and optional syntax settings like line_statement_prefix.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/integration.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[jinja2: **/templates/**.html]\nencoding = utf-8\nline_statement_prefix = %\n```\n\n----------------------------------------\n\nTITLE: Equivalent Jinja Template with Mako-like Configuration\nDESCRIPTION: The equivalent Jinja template with Mako-like configuration, showing how to achieve similar functionality with Jinja's template inheritance and block structure.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/switching.rst#2025-04-21_snippet_11\n\nLANGUAGE: jinja\nCODE:\n```\n<% extends \"layout.html\" %>\n<% block title %>Page Title<% endblock %>\n<% block body %>\n<ul>\n% for item in list:\n    <li>${item}</li>\n% endfor\n</ul>\n<% endblock %>\n```\n\n----------------------------------------\n\nTITLE: Rendering a List with Jinja2 NativeEnvironment\nDESCRIPTION: Example showing how to render a template that creates a Python list using the NativeEnvironment, demonstrating list comprehension-like syntax in Jinja.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/nativetypes.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nt = env.from_string('[{% for item in data %}{{ item + 1 }},{% endfor %}]')\nresult = t.render(data=range(5))\nprint(result)\nprint(type(result))\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Undefined Type in Python\nDESCRIPTION: Example of creating a custom NullUndefined class that extends the base Undefined class to handle int and float conversions by returning 0 instead of raising errors.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/api.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass NullUndefined(Undefined):\n    def __int__(self):\n        return 0\n\n    def __float__(self):\n        return 0.0\n```\n\n----------------------------------------\n\nTITLE: Loops in Django Templates\nDESCRIPTION: Example of Django template syntax for loops, using 'forloop' for loop context and 'empty' block for handling empty collections.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/switching.rst#2025-04-21_snippet_5\n\nLANGUAGE: django\nCODE:\n```\n{% for item in items %}\n    {{ forloop.counter }}. {{ item }}\n{% empty %}\n    No items!\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Iterable Undefined Type in Python\nDESCRIPTION: Example showing how to create a NonIterableUndefined class that fails on iteration attempts by raising an undefined error.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/api.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass NonIterableUndefined(Undefined):\n    def __iter__(self):\n        self._fail_with_undefined_error()\n```\n\n----------------------------------------\n\nTITLE: Jinja String Concatenation Example\nDESCRIPTION: Demonstration of implicit string literal concatenation in Jinja templates introduced in version 2.0.\nSOURCE: https://github.com/pallets/jinja/blob/main/CHANGES.rst#2025-04-21_snippet_6\n\nLANGUAGE: jinja\nCODE:\n```\n{{ \"foo\" \"bar\" }}\n```\n\n----------------------------------------\n\nTITLE: Setting Active Menu Items in Jinja Templates\nDESCRIPTION: Demonstrates how to mark active navigation items using global variable assignment and template inheritance.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/tricks.rst#2025-04-21_snippet_2\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% extends \"layout.html\" %}\n{% set active_page = \"index\" %}\n```\n\n----------------------------------------\n\nTITLE: Conditional Expression in Templates\nDESCRIPTION: Example of conditional expression with comparison operators in Jinja templates.\nSOURCE: https://github.com/pallets/jinja/blob/main/CHANGES.rst#2025-04-21_snippet_3\n\nLANGUAGE: Jinja\nCODE:\n```\n{{ 2 * (3 < 5) }}\n```\n\n----------------------------------------\n\nTITLE: Template Key Access Example\nDESCRIPTION: Example showing key access after attribute lookup in Jinja templates.\nSOURCE: https://github.com/pallets/jinja/blob/main/CHANGES.rst#2025-04-21_snippet_4\n\nLANGUAGE: Jinja\nCODE:\n```\n{{ data.items[1:] }}\n```\n\n----------------------------------------\n\nTITLE: Debug Tag Usage in Templates\nDESCRIPTION: Usage of the debug extension tag to dump current context and available filters/tests.\nSOURCE: https://github.com/pallets/jinja/blob/main/CHANGES.rst#2025-04-21_snippet_2\n\nLANGUAGE: Jinja\nCODE:\n```\n{% debug %}\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation in Jinja Templates\nDESCRIPTION: Example of float literal written in scientific notation within Jinja templates.\nSOURCE: https://github.com/pallets/jinja/blob/main/CHANGES.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n2.56e-3\n```\n\n----------------------------------------\n\nTITLE: Implementing Null-Default Fallback in Jinja Templates\nDESCRIPTION: Demonstrates conditional template inheritance using a standalone flag to either extend from a base template or provide a basic HTML structure.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/tricks.rst#2025-04-21_snippet_0\n\nLANGUAGE: html+jinja\nCODE:\n```\n{% if not standalone %}{% extends 'default.html' %}{% endif -%}\n<!DOCTYPE html>\n<title>{% block title %}The Page Title{% endblock %}</title>\n<link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\">\n{% block body %}\n  <p>This is the page body.</p>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using Jinja Template Variable Syntax\nDESCRIPTION: Example of Jinja template variable syntax showing attribute access patterns mentioned in version 2.0 release notes.\nSOURCE: https://github.com/pallets/jinja/blob/main/CHANGES.rst#2025-04-21_snippet_5\n\nLANGUAGE: jinja\nCODE:\n```\n{{ foo.0.0 }}\n```\n\n----------------------------------------\n\nTITLE: Enabling Async Support in Jinja Environment\nDESCRIPTION: Example showing how to enable async support in Jinja Environment. This configuration is required for async template rendering.\nSOURCE: https://github.com/pallets/jinja/blob/main/CHANGES.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nEnvironment(enable_async=True)\n```\n\n----------------------------------------\n\nTITLE: Jinja Translation Method Access\nDESCRIPTION: Example of translation method lookup pattern for i18n extension, checking foo.ugettext followed by foo.gettext.\nSOURCE: https://github.com/pallets/jinja/blob/main/CHANGES.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfoo.ugettext\nfoo.gettext\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Mode for Pylons 'c' Object\nDESCRIPTION: Configures the Pylons 'c' object to use strict mode, which returns undefined objects for missing attributes instead of empty strings.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/integration.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconfig['pylons.strict_c'] = True\n```\n\n----------------------------------------\n\nTITLE: Debugging Jinja Context with Debug Tag\nDESCRIPTION: Shows how to use the {% debug %} tag to dump the current context, available filters, and tests when the debug extension is enabled. This is useful for inspecting the template environment without setting up a debugger.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_67\n\nLANGUAGE: html\nCODE:\n```\n<pre>{% debug %}</pre>\n```\n\n----------------------------------------\n\nTITLE: Installing Jinja2 using pip\nDESCRIPTION: Command to install the latest version of Jinja2 using pip. This should be run in a virtual environment to isolate project dependencies.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/intro.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ pip install Jinja2\n```\n\n----------------------------------------\n\nTITLE: Including License Text in Documentation using reStructuredText\nDESCRIPTION: Directive that includes the content of the LICENSE.txt file into the documentation with text language highlighting. This allows the license text to be displayed directly in the documentation without duplicating it.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/license.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredText\nCODE:\n```\n.. literalinclude:: ../LICENSE.txt\n    :language: text\n```\n\n----------------------------------------\n\nTITLE: Example Debug Output in Jinja\nDESCRIPTION: Provides an example of the output generated by the {% debug %} tag, showing the structure of the context, filters, and tests available in the Jinja environment.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_68\n\nLANGUAGE: text\nCODE:\n```\n{'context': {'cycler': <class 'jinja2.utils.Cycler'>,\n             ...,\n             'namespace': <class 'jinja2.utils.Namespace'>},\n 'filters': ['abs', 'attr', 'batch', 'capitalize', 'center', 'count', 'd',\n             ..., 'urlencode', 'urlize', 'wordcount', 'wordwrap', 'xmlattr'],\n 'tests': ['!=', '<', '<=', '==', '>', '>=', 'callable', 'defined',\n           ..., 'odd', 'sameas', 'sequence', 'string', 'undefined', 'upper']}\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure Setup\nDESCRIPTION: Sets up the main RST documentation structure with a hidden header, logo image, and table of contents tree for the Jinja templating engine documentation.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. rst-class:: hide-header\n\nJinja\n=====\n\n.. image:: _static/jinja-logo.png\n    :align: center\n    :target: https://palletsprojects.com/p/jinja/\n\n.. toctree::\n    :maxdepth: 2\n    :caption: Contents:\n\n    intro\n    api\n    sandbox\n    nativetypes\n    templates\n    extensions\n    integration\n    switching\n    tricks\n    faq\n    license\n    changes\n```\n\n----------------------------------------\n\nTITLE: Cycle in Django Templates\nDESCRIPTION: Example of Django template syntax for cycling between values in a loop using the 'cycle' tag.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/switching.rst#2025-04-21_snippet_7\n\nLANGUAGE: django\nCODE:\n```\n{% for user in users %}\n    <li class=\"{% cycle 'odd' 'even' %}\">{{ user }}</li>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Generating Pip-compiled Requirements for Jinja Build\nDESCRIPTION: This snippet shows the command used to generate the pip-compiled requirements file for the Jinja project's build process. It uses pip-compile with Python 3.13 to process the build.in file.\nSOURCE: https://github.com/pallets/jinja/blob/main/requirements/build.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#    pip-compile build.in\n```\n\n----------------------------------------\n\nTITLE: Translation with Expressions in Jinja2\nDESCRIPTION: Demonstrates how to bind expressions to names in the trans tag for use in translatable blocks, allowing for more complex variable usage.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_59\n\nLANGUAGE: jinja\nCODE:\n```\n{% trans user=user.username %}Hello, {{ user }}!{% endtrans %}\n```\n\nLANGUAGE: jinja\nCODE:\n```\n{% trans book_title=book.title, author=author.name %}\nThis is {{ book_title }} by {{ author }}\n{% endtrans %}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cache Extension for Jinja\nDESCRIPTION: Example of a custom Jinja extension that implements a cache tag using the cachelib library. This extension allows caching of template fragments.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/extensions.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom jinja2 import Environment\nfrom cachelib import SimpleCache\n\nenv = Environment(extensions=[FragmentCacheExtension])\nenv.fragment_cache = SimpleCache()\n```\n\n----------------------------------------\n\nTITLE: Including CHANGES.rst in reStructuredText Documentation\nDESCRIPTION: This snippet uses the reStructuredText 'include' directive to incorporate the content of the CHANGES.rst file from the parent directory into the current document.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/changes.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../CHANGES.rst\n```\n\n----------------------------------------\n\nTITLE: Inline Gettext HTML Example in Jinja2\nDESCRIPTION: Demonstrates inline translation markup using the gettext _() function without explicit Jinja blocks.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/extensions.rst#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n        <h1>_(Welcome)</h1>\\n        <p>_(This is a paragraph)</p>\n```\n\n----------------------------------------\n\nTITLE: Line-based Comments in Jinja Templates\nDESCRIPTION: Demonstrates how to use line-based comments in Jinja templates. When configured with ## as the comment prefix, everything from ## to the end of the line is ignored.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/templates.rst#2025-04-21_snippet_9\n\nLANGUAGE: jinja\nCODE:\n```\n# for item in seq:\n    <li>{{ item }}</li>     ## this comment is ignored\n# endfor\n```\n\n----------------------------------------\n\nTITLE: Method Calls in Jinja Templates\nDESCRIPTION: Example of Jinja template syntax for explicit method calls with parentheses, which allows passing variables to methods.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/switching.rst#2025-04-21_snippet_1\n\nLANGUAGE: jinja\nCODE:\n```\n{% for page in user.get_created_pages() %}\n    ...\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Cycle in Jinja Templates\nDESCRIPTION: Example of Jinja template syntax for cycling between values in a loop using the 'loop.cycle' method.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/switching.rst#2025-04-21_snippet_8\n\nLANGUAGE: jinja\nCODE:\n```\n{% for user in users %}\n    <li class=\"{{ loop.cycle('odd', 'even') }}\">{{ user }}</li>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jinja to Use Mako-like Syntax\nDESCRIPTION: Python code to configure Jinja's environment to use syntax similar to Mako, making it easier to migrate from Mako to Jinja.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/switching.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nenv = Environment(\n    block_start_string=\"<%\",\n    block_end_string=\"%>\",\n    variable_start_string=\"${\",\n    variable_end_string=\"}\",\n    comment_start_string=\"<%doc>\",\n    commend_end_string=\"</%doc>\",\n    line_statement_prefix=\"%\",\n    line_comment_prefix=\"##\",\n)\n```\n\n----------------------------------------\n\nTITLE: Test Operators in Jinja Templates\nDESCRIPTION: Example of Jinja's 'is' operator for tests, which is distinct from Python's 'is' operator and allows for specialized condition checking.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/switching.rst#2025-04-21_snippet_4\n\nLANGUAGE: jinja\nCODE:\n```\n{% if user.user_id is odd %}\n    {{ user.username|e }} is odd\n{% else %}\n    hmm. {{ user.username|e }} looks pretty normal\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Filter Arguments in Jinja Templates\nDESCRIPTION: Example of Jinja template syntax for passing multiple arguments to filters using function-like call syntax with parentheses.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/switching.rst#2025-04-21_snippet_3\n\nLANGUAGE: jinja\nCODE:\n```\n{{ items|join(\", \") }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Operator Interception in SandboxedEnvironment\nDESCRIPTION: Shows how to create a custom SandboxedEnvironment subclass that intercepts and disables the power (**) operator.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/sandbox.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom jinja2.sandbox import SandboxedEnvironment\n\nclass MyEnvironment(SandboxedEnvironment):\n    intercepted_binops = frozenset([\"**\"])\n\n    def call_binop(self, context, operator, left, right):\n        if operator == \"**\":\n            return self.undefined(\"The power (**) operator is unavailable.\")\n\n        return super().call_binop(self, context, operator, left, right)\n```\n\n----------------------------------------\n\nTITLE: Pip Compile Command for Jinja Documentation Requirements\nDESCRIPTION: The command used to generate this requirements file from a docs.in input file using pip-compile with Python 3.13.\nSOURCE: https://github.com/pallets/jinja/blob/main/requirements/docs.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#    pip-compile docs.in\n```\n\n----------------------------------------\n\nTITLE: Mako Template Example\nDESCRIPTION: An example of Mako template syntax showing inheritance, def blocks, and loop syntax.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/switching.rst#2025-04-21_snippet_10\n\nLANGUAGE: mako\nCODE:\n```\n<%inherit file=\"layout.html\" />\n<%def name=\"title()\">Page Title</%def>\n<ul>\n% for item in list:\n    <li>${item}</li>\n% endfor\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Method Calls in Django Templates\nDESCRIPTION: Example of Django template syntax for implicit method calls without parentheses.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/switching.rst#2025-04-21_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% for page in user.get_created_pages %}\n    ...\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Generating Jinja Project Dependencies with pip-compile\nDESCRIPTION: This command was used to generate the requirements file using pip-compile. It processes the 'dev.in' file to produce a comprehensive list of dependencies with pinned versions.\nSOURCE: https://github.com/pallets/jinja/blob/main/requirements/dev.txt#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n#    pip-compile dev.in\n```\n\n----------------------------------------\n\nTITLE: Filter Arguments in Django Templates\nDESCRIPTION: Example of Django template syntax for passing a single literal value to a filter using a colon.\nSOURCE: https://github.com/pallets/jinja/blob/main/docs/switching.rst#2025-04-21_snippet_2\n\nLANGUAGE: django\nCODE:\n```\n{{ items|join:\", \" }}\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Jinja Typing\nDESCRIPTION: This snippet lists the required Python packages and their versions for typing support in the Jinja project. It includes mypy for static type checking, mypy-extensions for additional mypy functionality, and typing-extensions for backports of typing features.\nSOURCE: https://github.com/pallets/jinja/blob/main/requirements/typing.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n#\n# This file is autogenerated by pip-compile with Python 3.13\n# by the following command:\n#\n#    pip-compile typing.in\n#\nmypy==1.14.0\n    # via -r typing.in\nmypy-extensions==1.0.0\n    # via mypy\ntyping-extensions==4.12.2\n    # via mypy\n```\n\n----------------------------------------\n\nTITLE: Pip Compile Command for Jinja Project Test Dependencies\nDESCRIPTION: The command used to generate this requirements file using pip-compile with Python 3.13, which processes a tests.in input file to produce pinned dependency versions.\nSOURCE: https://github.com/pallets/jinja/blob/main/requirements/tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip-compile tests.in\n```\n\n----------------------------------------\n\nTITLE: Specifying Build Package Requirements for Jinja\nDESCRIPTION: This section lists the required packages and their versions for building the Jinja project. It includes build, packaging, and pyproject-hooks with their specific versions and dependencies.\nSOURCE: https://github.com/pallets/jinja/blob/main/requirements/build.txt#2025-04-21_snippet_1\n\nLANGUAGE: pip\nCODE:\n```\nbuild==1.2.2.post1\n    # via -r build.in\npackaging==24.2\n    # via build\npyproject-hooks==1.2.0\n    # via build\n```"
  }
]