[
  {
    "owner": "una-ui",
    "repo": "una-ui",
    "content": "TITLE: Customizing Una UI Theme in App Config\nDESCRIPTION: Defines Una UI theme settings in app.config.ts including primary color, gray color, border radius, and font size customization.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/2.api/1.configuration/2.nuxt-config.md#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineAppConfig({\n  una: {\n    primary: 'yellow',\n    gray: 'stone',\n    radius: 0.5,\n    fontSize: 16\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Commands to install project dependencies using different package managers.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/1.getting-started/2.installation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: FormGroup Vue Component Implementation\nDESCRIPTION: Core Vue component implementation of FormGroup, handling form input wrapping with support for labels, descriptions, hints, messages, and status indicators.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/form-group.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div :class=\"styles.base\">\n    <div v-if=\"$slots.top\">\n      <slot name=\"top\" />\n    </div>\n    <Label\n      v-if=\"label || $slots.label\"\n      :required=\"required\"\n      :for=\"htmlFor\"\n    >\n      <slot name=\"label\">\n        {{ label }}\n      </slot>\n    </Label>\n    <div\n      v-if=\"description || $slots.description\"\n      :class=\"styles.description\"\n    >\n      <slot name=\"description\">\n        {{ description }}\n      </slot>\n    </div>\n    <slot />\n    <div\n      v-if=\"hint || $slots.hint\"\n      :class=\"styles.hint\"\n    >\n      <slot name=\"hint\">\n        {{ hint }}\n      </slot>\n    </div>\n    <div\n      v-if=\"message || $slots.message\"\n      :class=\"[styles.message, statusClasses]\"\n    >\n      <slot name=\"message\">\n        {{ message }}\n      </slot>\n    </div>\n    <div\n      v-if=\"counter || $slots.counter\"\n      :class=\"styles.counter\"\n    >\n      <slot name=\"counter\">\n        {{ counter?.value }} / {{ counter?.max }}\n      </slot>\n    </div>\n    <div v-if=\"$slots.bottom\">\n      <slot name=\"bottom\" />\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Main Dialog Component Implementation\nDESCRIPTION: Core Vue component implementation for the Dialog functionality.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/dialog.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/dialog/Dialog.vue\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Commands to start the development server with different package managers.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/1.getting-started/2.installation.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev -- -o\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev -o\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun run dev -o\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev --open\n```\n\n----------------------------------------\n\nTITLE: Badge Component Implementation - Vue\nDESCRIPTION: Main Badge component implementation with TypeScript props, events handling, and rendering logic. Supports various styling options like variants, colors, sizes and closable functionality.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/badge.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/Badge.vue\n```\n\n----------------------------------------\n\nTITLE: Configuring Una UI with UnoCSS in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a custom uno.config.ts file to extend and override Una UI's default configuration. It shows the structure for adding UnoCSS configuration options and defining both static and dynamic shortcuts for component styling and utility combinations.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/2.api/1.configuration/1.una-config.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultConfig } from '@una-ui/nuxt/una.config'\n\nexport default defaultConfig({\n  /**\n   * UnoCSS Configuration Options\n   *\n   * You can extend the default UnoCSS configuration here by adding rules,\n   * themes, variants, and other options.\n   *\n   * @see https://unocss.dev/guide/config-file\n   * @see https://unocss.dev/config/\n   */\n\n  /**\n   * Una UI Shortcuts Customization\n   *\n   * Shortcuts allow you to create reusable utility combinations or override\n   * the default Una UI components styling.\n   *\n   * Two types of shortcuts:\n   * 1. Static: Simple string mappings (object format)\n   * 2. Dynamic: RegExp patterns with functions that return styles\n   *\n   * @see https://github.com/una-ui/una-ui/tree/main/packages/preset/src/_shortcuts\n   * @see https://unocss.dev/config/shortcuts\n   */\n  shortcuts: [\n    /**\n     * Static Shortcuts\n     *\n     * Use these to create new utility combinations or override existing ones.\n     *\n     * @example\n     * 'btn-custom': 'py-2 px-4 bg-blue-500 text-white rounded hover:bg-blue-600',\n     * 'card': 'p-4 border rounded-lg shadow bg-white dark:bg-gray-800'\n     */\n    {\n      // add here ...\n    },\n\n    /**\n     * Dynamic Shortcuts\n     *\n     * Create pattern-based utilities with variants using RegExp.\n     *\n     * @example\n     * [/^gradient-(\\w+)$/, ([, color]) => `bg-gradient-to-r from-${color}-500 to-${color}-700`],\n     * [/^shadow-(\\w+)$/, ([, size]) => size === 'sm' ? 'shadow-sm' : size === 'lg' ? 'shadow-lg' : 'shadow']\n     */\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Sheet Component in Vue\nDESCRIPTION: This snippet shows the implementation of the Sheet component in Vue. It includes the template structure, script setup with props and emits, and the component logic for handling open state and key events.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/sheet.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Dialog\n    v-bind=\"$attrs\"\n    :defaultOpen=\"defaultOpen\"\n    :modal=\"modal\"\n    :preventClose=\"preventClose\"\n    :open=\"open\"\n    @update:open=\"$emit('update:open', $event)\"\n  >\n    <slot name=\"trigger\" :open=\"dialogOpen\">\n      <DialogTrigger v-bind=\"_sheetTrigger\">\n        <slot name=\"trigger-icon\">\n          <UnoIcon name=\"i-heroicons-bars-3\" />\n        </slot>\n      </DialogTrigger>\n    </slot>\n    <DialogPortal v-bind=\"_sheetPortal\">\n      <DialogOverlay v-if=\"overlay\" v-bind=\"_sheetOverlay\" />\n      <DialogContent\n        v-bind=\"{\n          ..._sheetContent,\n          class: [_class, _sheetContent?.class],\n        }\"\n      >\n        <slot name=\"content\">\n          <slot name=\"header\">\n            <SheetHeader v-if=\"title || description\" v-bind=\"_sheetHeader\">\n              <slot name=\"title\">\n                <SheetTitle v-if=\"title\" v-bind=\"_sheetTitle\">\n                  {{ title }}\n                </SheetTitle>\n              </slot>\n              <slot name=\"description\">\n                <SheetDescription v-if=\"description\" v-bind=\"_sheetDescription\">\n                  {{ description }}\n                </SheetDescription>\n              </slot>\n            </SheetHeader>\n          </slot>\n          <slot />\n          <slot name=\"footer\">\n            <SheetFooter v-if=\"$slots.footer\" v-bind=\"_sheetFooter\">\n              <slot name=\"footer\" />\n            </SheetFooter>\n          </slot>\n        </slot>\n        <SheetClose v-if=\"showClose\" v-bind=\"_sheetClose\">\n          <slot name=\"close-icon\">\n            <UnoIcon name=\"i-heroicons-x-mark-20-solid\" />\n          </slot>\n        </SheetClose>\n      </DialogContent>\n    </DialogPortal>\n  </Dialog>\n</template>\n\n<script lang=\"ts\" setup>\nimport type { SheetProps } from '../../types'\nimport { computed, useAttrs } from 'vue'\nimport { useVModel } from '@vueuse/core'\nimport { Dialog, DialogContent, DialogOverlay, DialogPortal, DialogTrigger } from '@headlessui/vue'\nimport { useShortcuts } from '../../composables/useShortcuts'\n\nconst props = withDefaults(defineProps<SheetProps>(), {\n  showClose: true,\n  defaultOpen: false,\n  modal: true,\n  overlay: true,\n  sheet: 'right',\n})\n\nconst emit = defineEmits<{\n  (e: 'update:open', value: boolean): void\n}>()\n\nconst attrs = useAttrs()\n\nconst dialogOpen = useVModel(props, 'open', emit)\n\nconst { getShortcut } = useShortcuts()\n\nconst _class = computed(() => {\n  return [\n    getShortcut('sheet'),\n    getShortcut(`sheet-${props.sheet}`),\n    attrs.class,\n  ]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Una UI Preset Mode\nDESCRIPTION: Commands to install @una-ui/preset and its dependencies using different package managers.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/1.getting-started/2.installation.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install unocss @una-ui/preset @una-ui/extractor-vue-script\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add unocss @una-ui/preset @una-ui/extractor-vue-script\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add unocss @una-ui/preset @una-ui/extractor-vue-script\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add unocss @una-ui/preset @una-ui/extractor-vue-script\n```\n\n----------------------------------------\n\nTITLE: Vue Switch Component Props Type Definition\nDESCRIPTION: Defines the TypeScript interface for the props of the switch component, including modelValue, defaultValue, value, disabled, and various styling options.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/switch.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PropType } from 'vue'\nimport type { RouteLocationRaw } from 'vue-router'\nimport type { USize } from '../types'\n\nexport interface SwitchProps {\n  /**\n   * The controlled state of the switch.\n   */\n  modelValue?: boolean\n  /**\n   * The default state of the switch.\n   */\n  defaultValue?: boolean\n  /**\n   * The value of the switch.\n   */\n  value?: string\n  /**\n   * The name of the switch.\n   */\n  name?: string\n  /**\n   * Whether the switch is disabled.\n   */\n  disabled?: boolean\n  /**\n   * The size of the switch.\n   */\n  size?: USize\n  /**\n   * The color of the switch when checked.\n   */\n  switchChecked?: string\n  /**\n   * The color of the switch when unchecked.\n   */\n  switchUnchecked?: string\n  /**\n   * The icon of the switch.\n   */\n  icon?: string\n  /**\n   * The icon of the switch when checked.\n   */\n  checkedIcon?: string\n  /**\n   * The icon of the switch when unchecked.\n   */\n  uncheckedIcon?: string\n  /**\n   * Whether the switch is loading.\n   */\n  loading?: boolean\n  /**\n   * The color of the loading icon.\n   */\n  loadingIcon?: string\n  /**\n   * Custom class for the track.\n   */\n  trackClass?: string\n  /**\n   * Custom class for the thumb.\n   */\n  thumbClass?: string\n  /**\n   * Custom class for the icon.\n   */\n  iconClass?: string\n  /**\n   * Custom class for the loading icon.\n   */\n  loadingIconClass?: string\n}\n\nexport const switchProps = {\n  modelValue: {\n    type: Boolean as PropType<SwitchProps['modelValue']>,\n    default: undefined\n  },\n  defaultValue: {\n    type: Boolean as PropType<SwitchProps['defaultValue']>,\n    default: undefined\n  },\n  value: {\n    type: String as PropType<SwitchProps['value']>,\n    default: 'on'\n  },\n  name: {\n    type: String as PropType<SwitchProps['name']>,\n    default: undefined\n  },\n  disabled: {\n    type: Boolean as PropType<SwitchProps['disabled']>,\n    default: false\n  },\n  size: {\n    type: String as PropType<SwitchProps['size']>,\n    default: 'md'\n  },\n  switchChecked: {\n    type: String as PropType<SwitchProps['switchChecked']>,\n    default: 'primary'\n  },\n  switchUnchecked: {\n    type: String as PropType<SwitchProps['switchUnchecked']>,\n    default: 'gray'\n  },\n  icon: {\n    type: String as PropType<SwitchProps['icon']>,\n    default: undefined\n  },\n  checkedIcon: {\n    type: String as PropType<SwitchProps['checkedIcon']>,\n    default: undefined\n  },\n  uncheckedIcon: {\n    type: String as PropType<SwitchProps['uncheckedIcon']>,\n    default: undefined\n  },\n  loading: {\n    type: Boolean as PropType<SwitchProps['loading']>,\n    default: false\n  },\n  loadingIcon: {\n    type: String as PropType<SwitchProps['loadingIcon']>,\n    default: undefined\n  },\n  trackClass: {\n    type: String as PropType<SwitchProps['trackClass']>,\n    default: undefined\n  },\n  thumbClass: {\n    type: String as PropType<SwitchProps['thumbClass']>,\n    default: undefined\n  },\n  iconClass: {\n    type: String as PropType<SwitchProps['iconClass']>,\n    default: undefined\n  },\n  loadingIconClass: {\n    type: String as PropType<SwitchProps['loadingIconClass']>,\n    default: undefined\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Input Types and Props Interface Definition\nDESCRIPTION: TypeScript interface definitions for input component props, including type validation and default values.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/input.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/types/input.ts\n```\n\n----------------------------------------\n\nTITLE: Navigation Menu Component Implementation\nDESCRIPTION: Main navigation menu component that provides the core functionality including state management and event handling. Supports customization through props like delayDuration, triggers, and orientation.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/navigation-menu.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/navigation-menu/NavigationMenu.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Toaster Component in Vue\nDESCRIPTION: The Toaster component implementation, responsible for managing and displaying multiple toasts.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toast.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/overlays/Toaster.vue\n```\n\n----------------------------------------\n\nTITLE: Defining Textarea Props in TypeScript\nDESCRIPTION: TypeScript definitions for the textarea component props, including various configuration options like autoresize, resize behavior, and input attributes.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/textarea.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InputProps {\n  /**\n   * The type of the input element.\n   * @default 'text'\n   */\n  type?: 'text' | 'email' | 'url' | 'tel' | 'search' | 'password' | 'textarea' | 'number'\n  /**\n   * The model value of the input.\n   */\n  modelValue?: string | number\n  /**\n   * Enables textarea autoresizing.\n   * When true, adjusts height to fit content.\n   * When a number, sets maximum height to fit content.\n   */\n  autoresize?: boolean | number\n  /**\n   * Sets the resize behavior of the textarea.\n   * @default 'none'\n   */\n  resize?: 'none' | 'y' | 'x' | null\n  /**\n   * The name attribute of the input.\n   */\n  name?: string\n  /**\n   * The placeholder text for the input.\n   */\n  placeholder?: string\n  /**\n   * Whether the input is required.\n   */\n  required?: boolean\n  /**\n   * Whether the input is disabled.\n   */\n  disabled?: boolean\n  /**\n   * Whether the input is readonly.\n   */\n  readonly?: boolean\n  /**\n   * Sets the autocomplete attribute of the input.\n   */\n  autocomplete?: string\n  /**\n   * Sets the autocapitalize attribute of the input.\n   */\n  autocapitalize?: string\n  /**\n   * Sets the autocorrect attribute of the input.\n   */\n  autocorrect?: string\n  /**\n   * Sets the autofocus attribute of the input.\n   */\n  autofocus?: boolean\n  /**\n   * Sets the min attribute of the input.\n   */\n  min?: string | number\n  /**\n   * Sets the max attribute of the input.\n   */\n  max?: string | number\n  /**\n   * Sets the step attribute of the input.\n   */\n  step?: string | number\n  /**\n   * Sets the maxlength attribute of the input.\n   */\n  maxlength?: string | number\n  /**\n   * Sets the minlength attribute of the input.\n   */\n  minlength?: string | number\n  /**\n   * Sets the pattern attribute of the input.\n   */\n  pattern?: string\n  /**\n   * Sets the inputmode attribute of the input.\n   */\n  inputmode?: 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'\n  /**\n   * Sets the multiple attribute of the input.\n   */\n  multiple?: boolean\n  /**\n   * Sets the rows attribute of the textarea.\n   */\n  rows?: string | number\n  /**\n   * Sets the cols attribute of the textarea.\n   */\n  cols?: string | number\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Una UI Preset\nDESCRIPTION: UnoCSS configuration file setup with Una UI preset and required transformers.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/1.getting-started/2.installation.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport extratorUna from '@una-ui/extractor-vue-script'\n\nimport presetUna from '@una-ui/preset'\nimport prefixes from '@una-ui/preset/prefixes'\nimport {\n  presetAttributify,\n  presetIcons,\n  presetUno,\n  transformerDirectives,\n  transformerVariantGroup,\n} from 'unocss'\n\nexport default {\n  presets: [\n    presetUno(),\n    presetAttributify(),\n    presetIcons({\n      scale: 1.2,\n      extraProperties: {\n        'display': 'inline-block',\n        'vertical-align': 'middle',\n      },\n    }),\n    presetUna(),\n  ],\n  extractors: [\n    extratorUna({\n      prefixes,\n    }),\n  ],\n  transformers: [\n    transformerDirectives(),\n    transformerVariantGroup(),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Component in Vue\nDESCRIPTION: The main implementation of the Alert component in Vue, including template, script, and style sections.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/alert.md#2025-04-16_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { AlertProps } from '../../types'\n\nconst props = withDefaults(defineProps<AlertProps>(), {\n  alert: 'outline-primary',\n  size: 'md',\n  closable: false,\n  shadow: false,\n  width: 'full',\n})\n\nconst emit = defineEmits<{\n  (e: 'close'): void\n}>()\n\nconst isOpen = ref(true)\n\nconst onClose = () => {\n  isOpen.value = false\n  emit('close')\n}\n\nconst variant = computed(() => {\n  return props.alert.split('-')[0] as 'solid' | 'outline' | 'soft'\n})\n\nconst color = computed(() => {\n  return props.alert.split('-')[1] as 'primary' | 'secondary' | 'success' | 'warning' | 'danger' | 'neutral'\n})\n\nconst iconColor = computed(() => {\n  if (props.icon === 'info')\n    return 'primary'\n  if (props.icon === 'success')\n    return 'success'\n  if (props.icon === 'warning')\n    return 'warning'\n  if (props.icon === 'error')\n    return 'danger'\n  return color.value\n})\n\nconst iconName = computed(() => {\n  if (props.icon === 'info')\n    return 'i-heroicons-information-circle'\n  if (props.icon === 'success')\n    return 'i-heroicons-check-circle'\n  if (props.icon === 'warning')\n    return 'i-heroicons-exclamation-triangle'\n  if (props.icon === 'error')\n    return 'i-heroicons-x-circle'\n  return props.icon\n})\n</script>\n\n<template>\n  <div\n    v-if=\"isOpen\"\n    :class=\"[\n      ui.alert.base,\n      ui.alert.width[width],\n      ui.alert.variant[variant],\n      ui.alert.color[color][variant],\n      shadow && ui.alert.shadow,\n    ]\"\n  >\n    <div :class=\"ui.alert.wrapper\">\n      <slot name=\"icon\">\n        <UIcon\n          v-if=\"icon\"\n          :name=\"iconName\"\n          :class=\"[\n            ui.alert.icon,\n            `text-${iconColor}-500 dark:text-${iconColor}-400`,\n          ]\"\n        />\n      </slot>\n      <div class=\"w-full\">\n        <slot>\n          <slot name=\"title\">\n            <span\n              v-if=\"title\"\n              :class=\"ui.alert.title\"\n            >\n              {{ title }}\n            </span>\n          </slot>\n          <slot name=\"description\">\n            <p\n              v-if=\"description\"\n              :class=\"ui.alert.description\"\n            >\n              {{ description }}\n            </p>\n          </slot>\n        </slot>\n      </div>\n    </div>\n    <slot name=\"closeIcon\">\n      <button\n        v-if=\"closable\"\n        type=\"button\"\n        :class=\"ui.alert.close\"\n        @click=\"onClose\"\n      >\n        <span class=\"sr-only\">Dismiss</span>\n        <UIcon\n          name=\"i-heroicons-x-mark\"\n          class=\"h-5 w-5\"\n        />\n      </button>\n    </slot>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Switch Component Implementation\nDESCRIPTION: The full implementation of the Switch component in Vue.js, including template structure, script setup with props and emits, and computed properties for dynamic classes and styles.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/switch.md#2025-04-16_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UComponentWrapper :component-name=\"__name\" :component-data=\"switchProps\" :component-shortcut=\"shortcut\" :component-props=\"props\" :component-slots=\"$slots\">\n    <label\n      :for=\"uuid\"\n      class=\"una-switch\"\n      :class=\"[\n        `una-switch--${size}`,\n        {\n          'una-switch--checked': checked,\n          'una-switch--disabled': disabled,\n          'una-switch--loading': loading\n        }\n      ]\"\n    >\n      <input\n        :id=\"uuid\"\n        ref=\"inputRef\"\n        v-model=\"localChecked\"\n        v-bind=\"$attrs\"\n        type=\"checkbox\"\n        :value=\"value\"\n        :name=\"name\"\n        :disabled=\"disabled || loading\"\n        class=\"sr-only\"\n        @change=\"handleChange\"\n      >\n\n      <span\n        class=\"una-switch__track\"\n        :class=\"trackClass\"\n      />\n\n      <span\n        class=\"una-switch__thumb\"\n        :class=\"thumbClass\"\n      />\n\n      <span\n        v-if=\"!loading && (icon || checkedIcon || uncheckedIcon)\"\n        class=\"una-switch__icon\"\n        :class=\"iconClass\"\n      >\n        <slot\n          name=\"icon\"\n          :checked=\"checked\"\n        >\n          <UIcon\n            v-if=\"icon || (checked ? checkedIcon : uncheckedIcon)\"\n            :name=\"icon || (checked ? checkedIcon : uncheckedIcon)\"\n          />\n        </slot>\n      </span>\n\n      <span\n        v-if=\"loading\"\n        class=\"una-switch__loading-icon\"\n        :class=\"loadingIconClass\"\n      >\n        <slot name=\"loading-icon\">\n          <UIcon\n            :name=\"loadingIcon || 'i-ph-circle-notch'\"\n            class=\"animate-spin\"\n          />\n        </slot>\n      </span>\n    </label>\n  </UComponentWrapper>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, ref, useSlots } from 'vue'\nimport { useVModel } from '@vueuse/core'\nimport { useUna } from '../../composables/useUna'\nimport { switchProps } from '../../types/switch'\nimport { useComponentProps } from '../../composables/useComponentProps'\n\nconst props = defineProps(switchProps)\nconst emit = defineEmits(['update:modelValue', 'change'])\n\nconst { shortcut } = useUna('switch')\nconst { componentProps, componentClass } = useComponentProps(props, shortcut)\n\nconst inputRef = ref<HTMLInputElement | null>(null)\nconst uuid = computed(() => `switch-${Math.random().toString(36).substring(2, 9)}`)\n\nconst localChecked = useVModel(props, 'modelValue', emit, {\n  passive: true,\n  defaultValue: props.defaultValue\n})\n\nconst checked = computed(() => localChecked.value)\n\nconst trackClass = computed(() => [\n  componentClass('track'),\n  componentProps.value.trackClass,\n  { [componentClass('track.checked')]: checked.value },\n  { [componentClass('track.unchecked')]: !checked.value }\n])\n\nconst thumbClass = computed(() => [\n  componentClass('thumb'),\n  componentProps.value.thumbClass,\n  { [componentClass('thumb.checked')]: checked.value },\n  { [componentClass('thumb.unchecked')]: !checked.value }\n])\n\nconst iconClass = computed(() => [\n  componentClass('icon'),\n  componentProps.value.iconClass\n])\n\nconst loadingIconClass = computed(() => [\n  componentClass('loadingIcon'),\n  componentProps.value.loadingIconClass\n])\n\nfunction handleChange (event: Event) {\n  emit('change', event)\n}\n</script>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Textarea Component in Vue\nDESCRIPTION: The main implementation of the textarea component in Vue, including template structure, props definition, and component logic for features like autoresizing.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/textarea.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { InputEmits, InputProps } from '../../types'\nimport { computed, nextTick, ref, toRef, watch } from 'vue'\nimport { useVModel } from '@vueuse/core'\nimport { inputPresets } from '../../presets'\n\nconst props = withDefaults(defineProps<InputProps>(), {\n  type: 'text',\n})\n\nconst emit = defineEmits<InputEmits>()\n\nconst input = ref<HTMLInputElement | HTMLTextAreaElement>()\nconst model = useVModel(props, 'modelValue', emit)\nconst isTextarea = computed(() => props.type === 'textarea')\nconst inputType = computed(() => isTextarea.value ? undefined : props.type)\n\nconst attrs = useAttrs()\nconst preset = computed(() => inputPresets[props.type] || {})\n\nconst classes = computed(() => {\n  return [\n    'u-input',\n    { 'u-textarea': isTextarea.value },\n  ]\n})\n\nconst styles = computed(() => {\n  return {\n    ...(!isTextarea.value && { 'max-height': 'none' }),\n    ...(isTextarea.value && props.resize && { resize: props.resize }),\n  }\n})\n\nconst resize = () => {\n  if (!input.value || !isTextarea.value || !props.autoresize)\n    return\n\n  const textarea = input.value as HTMLTextAreaElement\n  const maxRows = typeof props.autoresize === 'number' ? props.autoresize : Infinity\n\n  textarea.style.height = 'auto'\n  const contentHeight = textarea.scrollHeight\n  const maxHeight = parseFloat(getComputedStyle(textarea).lineHeight) * maxRows\n  textarea.style.height = `${Math.min(contentHeight, maxHeight)}px`\n  textarea.style.overflowY = contentHeight > maxHeight ? 'auto' : 'hidden'\n}\n\nwatch(toRef(props, 'modelValue'), () => nextTick(resize))\n\nconst updateInput = (event: Event) => {\n  const target = event.target as HTMLInputElement\n  model.value = props.type === 'number' ? target.valueAsNumber : target.value\n  nextTick(resize)\n}\n\ndefineExpose({\n  input,\n  focus: () => input.value?.focus(),\n  blur: () => input.value?.blur(),\n  updateInput,\n})\n</script>\n\n<template>\n  <component\n    :is=\"isTextarea ? 'textarea' : 'input'\"\n    ref=\"input\"\n    v-bind=\"{\n      ...preset,\n      ...attrs,\n      id: attrs.id,\n      type: inputType,\n      name: props.name,\n      placeholder: props.placeholder,\n      required: props.required,\n      disabled: props.disabled,\n      readonly: props.readonly,\n      autocomplete: props.autocomplete,\n      autocapitalize: props.autocapitalize,\n      autocorrect: props.autocorrect,\n      autofocus: props.autofocus,\n      min: props.min,\n      max: props.max,\n      step: props.step,\n      maxlength: props.maxlength,\n      minlength: props.minlength,\n      pattern: props.pattern,\n      inputmode: props.inputmode,\n      multiple: props.multiple,\n      rows: isTextarea ? props.rows : undefined,\n      cols: isTextarea ? props.cols : undefined,\n    }\"\n    :class=\"classes\"\n    :style=\"styles\"\n    :value=\"model\"\n    @input=\"updateInput\"\n    @blur=\"emit('blur', $event)\"\n    @focus=\"emit('focus', $event)\"\n  />\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Sidebar Types in TypeScript\nDESCRIPTION: Provides type definitions for various sidebar-related props and configurations used throughout the component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/sidebar.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PropType } from 'vue'\n\nexport interface SidebarProps {\n  modelValue?: boolean\n  sheet?: 'left' | 'right'\n  sidebar?: 'sidebar' | 'floating' | 'inset'\n  collapsible?: 'offcanvas' | 'icon' | 'none'\n  rail?: boolean\n  _sidebarContent?: NSidebarContentProps\n  _sidebarHeader?: NSidebarHeaderProps\n  _sidebarFooter?: NSidebarFooterProps\n  _sidebarRail?: NSidebarRailProps\n  una?: NSidebarUnaProps\n}\n\n// ... (other type definitions)\n```\n\n----------------------------------------\n\nTITLE: Avatar Group Vue Component Implementation\nDESCRIPTION: Main Vue component implementation for Avatar Group with props configuration and slot handling\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/avatar-group.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { AvatarGroupProps } from '../types'\n\ndefineOptions({\n  name: 'AvatarGroup',\n})\n\nconst props = withDefaults(\n  defineProps<AvatarGroupProps>(),\n  {\n    size: 'md',\n  },\n)\n\nconst avatarGroupRef = ref<HTMLElement>()\nconst { una } = useUna(avatarGroupRef, props)\n\nconst hideOverflow = computed(() => props.max && props.max > 0)\n\nconst overflowCount = computed(() => {\n  if (!hideOverflow.value)\n    return 0\n\n  const defaultSlot = useSlots().default?.()\n  if (!defaultSlot)\n    return 0\n\n  const count = defaultSlot.length - props.max!\n  return count > 0 ? count : 0\n})\n\nconst overflowText = computed(() => {\n  if (props.overflowLabel)\n    return props.overflowLabel\n\n  return `+${overflowCount.value}`\n})\n</script>\n\n<template>\n  <div\n    ref=\"avatarGroupRef\"\n    :class=\"[\n      una.base(),\n      props.reverse && una.reverse(),\n      props.wrap && una.wrap(),\n    ]\"\n  >\n    <template v-if=\"$slots.default\">\n      <slot />\n      <Avatar\n        v-if=\"hideOverflow && overflowCount > 0\"\n        v-bind=\"{ ...props, fallback: overflowText }\"\n      />\n    </template>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Autoresize Textarea in Vue\nDESCRIPTION: Demonstrates the autoresize feature of the textarea component. It shows how to create textareas that automatically adjust their height based on content, with optional maximum height limits.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/textarea.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UFormGroup label=\"Autoresize\">\n    <UTextarea\n      v-model=\"message\"\n      placeholder=\"Type something...\"\n      autoresize\n    />\n  </UFormGroup>\n\n  <UFormGroup label=\"Autoresize (max 5 rows)\">\n    <UTextarea\n      v-model=\"limitedMessage\"\n      placeholder=\"Type something...\"\n      :autoresize=\"5\"\n    />\n  </UFormGroup>\n</template>\n\n<script setup lang=\"ts\">\nconst message = ref('')\nconst limitedMessage = ref('')\n</script>\n\n```\n\n----------------------------------------\n\nTITLE: Vue Input Component Implementation\nDESCRIPTION: Main Vue component implementation file containing the input component logic and template structure.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/input.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/forms/Input.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing FormControl Component in Vue\nDESCRIPTION: Vue component for form controls that handles the actual form input elements. It provides proper accessibility attributes and integration with form validation.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/form.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { useFormField } from '../../../composables/forms/useFormField'\n\ndefineOptions({\n  inheritAttrs: false,\n})\n\ninterface Props {\n  /**\n   * Add a name to the form control.\n   */\n  name?: string\n  /**\n   * Add an id to the form control.\n   */\n  id?: string\n}\n\nconst props = defineProps<Props>()\nconst field = useFormField(props.name)\n</script>\n\n<template>\n  <div class=\"form-control\">\n    <slot\n      :field=\"field\"\n      v-bind=\"{\n        ...$attrs,\n        id: props.id || field.id,\n        name: props.name || field.name,\n        'onUpdate:modelValue': field.handleChange,\n        onBlur: field.handleBlur,\n        disabled: field.isDisabled,\n        'aria-invalid': !field.isValid,\n        'aria-describedby': `${field.id}-description`,\n      }\"\n    />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Avatar TypeScript Types Definition\nDESCRIPTION: Defines the TypeScript interface for Avatar component props, including src, alt, label, size, square, rounded, icon, and avatar variant properties.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/avatar.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PropType } from 'vue'\n\nexport const avatarProps = {\n  /**\n   * The source of the avatar image\n   */\n  src: {\n    type: String,\n    default: undefined\n  },\n  /**\n   * The alt text for the avatar image\n   */\n  alt: {\n    type: String,\n    default: undefined\n  },\n  /**\n   * The size of the avatar\n   * @default 'md'\n   */\n  size: {\n    type: String,\n    default: 'md'\n  },\n  /**\n   * Force the avatar to be a square and override the dimensions.\n   */\n  square: {\n    type: String,\n    default: undefined\n  },\n  /**\n   * The rounded of the avatar\n   * @default 'full'\n   */\n  rounded: {\n    type: String,\n    default: 'full'\n  },\n  /**\n   * The label of the avatar. If not provided, it will use the first letter of the alt text.\n   */\n  label: {\n    type: String,\n    default: undefined\n  },\n  /**\n   * If true, the label will be wrapped in an Icon component\n   */\n  icon: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * The variant of the avatar\n   * @default '{variant}-gray'\n   */\n  avatar: {\n    type: [String, Object] as PropType<string | Record<string, string>>,\n    default: undefined\n  }\n}\n\nexport const avatarImageProps = {\n  /**\n   * The source of the avatar image\n   */\n  src: {\n    type: String,\n    default: undefined\n  },\n  /**\n   * The alt text for the avatar image\n   */\n  alt: {\n    type: String,\n    default: undefined\n  }\n}\n\nexport const avatarFallbackProps = {\n  /**\n   * The label of the avatar. If not provided, it will use the first letter of the alt text.\n   */\n  label: {\n    type: String,\n    default: undefined\n  },\n  /**\n   * If true, the label will be wrapped in an Icon component\n   */\n  icon: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * The alt text for the avatar image. Only used for extracting the first letter.\n   */\n  alt: {\n    type: String,\n    default: undefined\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Radio Group Vue Component Implementation\nDESCRIPTION: Main Vue component implementation for the radio group functionality\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/radio-group.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/forms/radio-group/RadioGroup.vue\n```\n\n----------------------------------------\n\nTITLE: Vue Slider Component Implementation\nDESCRIPTION: Main Vue component file containing the slider implementation with all features and functionality\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/slider.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/forms/Slider.vue\n```\n\n----------------------------------------\n\nTITLE: Main Toggle Component Implementation - Vue\nDESCRIPTION: Core implementation of the Toggle component including all functionality and styling options.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toggle.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/elements/Toggle.vue\n```\n\n----------------------------------------\n\nTITLE: Vue Button Component Implementation\nDESCRIPTION: Main Vue component implementation for the button, including template structure and component logic.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/button.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <component\n    :is=\"to ? NuxtLink : 'button'\"\n    :to=\"to\"\n    :class=\"[classes]\"\n    :disabled=\"disabled || loading\"\n  >\n    <slot v-if=\"$slots.default\">\n      <slot name=\"leading\" v-if=\"$slots.leading\" />\n      <slot name=\"default\" />\n      <slot name=\"trailing\" v-if=\"$slots.trailing\" />\n    </slot>\n    <template v-else>\n      <UIcon\n        v-if=\"loading && loadingPlacement === 'leading'\"\n        name=\"i-heroicons-arrow-path-20-solid\"\n        class=\"animate-spin\"\n      />\n      <slot name=\"leading\">\n        <UIcon v-if=\"leading\" :name=\"leading\" />\n      </slot>\n      <span v-if=\"label && !icon\">\n        <UIcon\n          v-if=\"loading && loadingPlacement === 'label'\"\n          name=\"i-heroicons-arrow-path-20-solid\"\n          class=\"animate-spin\"\n        />\n        <span v-else>{{ label }}</span>\n      </span>\n      <UIcon v-else-if=\"label && icon\" :name=\"label\" />\n      <slot name=\"trailing\">\n        <UIcon v-if=\"trailing\" :name=\"trailing\" />\n      </slot>\n      <UIcon\n        v-if=\"loading && loadingPlacement === 'trailing'\"\n        name=\"i-heroicons-arrow-path-20-solid\"\n        class=\"animate-spin\"\n      />\n    </template>\n  </component>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Breadcrumb Shortcuts in TypeScript\nDESCRIPTION: This code snippet defines the shortcuts for the Breadcrumb component, including its various parts like root, list, item, link, separator, and ellipsis.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/breadcrumb.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  breadcrumb: {\n    root: 'flex items-center gap-1 font-medium',\n    list: 'flex items-center gap-1',\n    item: 'flex items-center gap-1',\n    link: 'transition-colors hover:text-primary',\n    separator: 'text-muted',\n    ellipsis: 'text-muted'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checkbox Types Definition\nDESCRIPTION: TypeScript type definitions for the checkbox component props and options.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/checkbox.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/nuxt/src/runtime/types/checkbox.ts\n```\n\n----------------------------------------\n\nTITLE: Accordion Component Implementation in Vue\nDESCRIPTION: The core implementation of the Accordion component, including its template, script, and style definitions.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/accordion.md#2025-04-16_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/elements/Accordion.vue\n```\n\n----------------------------------------\n\nTITLE: Basic Table Implementation in Vue with Tanstack\nDESCRIPTION: Basic table setup showing core functionality with columns and data props. Demonstrates the fundamental structure for creating a data table.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/table.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n| Prop      | Default | Type    | Description    |\n| --------- | ------- | ------- | -------------- |\n| `columns` | `[]`    | `array` | Table columns. |\n| `data`    | `[]`    | `array` | Table data.    |\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Checkbox Component Implementation\nDESCRIPTION: Core checkbox component implementation with basic features including v-model binding, disabled state, and label support.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/checkbox.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/checkbox/ExampleVueCheckboxBasic.vue\n```\n\n----------------------------------------\n\nTITLE: Skeleton Component Type Definitions\nDESCRIPTION: TypeScript types and interfaces for the Skeleton component props and configuration.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/skeleton.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/nuxt/src/runtime/types/skeleton.ts\n```\n\n----------------------------------------\n\nTITLE: Basic Accordion Usage in Vue\nDESCRIPTION: Demonstrates the basic implementation of the Accordion component with a simple items array.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/accordion.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/accordion/ExampleVueAccordionBasic.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing FormMessage Component in Vue\nDESCRIPTION: Vue component for displaying form validation messages. It shows error, warning, success, or info messages with appropriate styling based on the status.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/form.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { useFormField } from '../../../composables/forms/useFormField'\nimport type { FormFieldStatus } from '../../../types'\ninterface Props {\n  /**\n   * Add a name to the form message.\n   */\n  name?: string\n\n  /**\n   * Set the status of the form message.\n   */\n  status?: FormFieldStatus\n}\n\nconst props = defineProps<Props>()\nconst field = useFormField(props.name)\nconst statusClass = computed(() => {\n  if (!props.status)\n    return ''\n\n  return `form-message-${props.status}`\n})\n</script>\n\n<template>\n  <p\n    v-if=\"$slots.default\"\n    :id=\"`${field.id}-message`\"\n    class=\"form-message\"\n    :class=\"statusClass\"\n    aria-live=\"polite\"\n  >\n    <slot />\n  </p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Popover Component Implementation\nDESCRIPTION: Main Vue component implementation for the popover functionality.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/popover.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/popover/Popover.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing FormItem Component in Vue\nDESCRIPTION: Vue component for form items, serving as a container for form elements with proper structure and styling.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/form.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"form-item\">\n    <slot />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting up Toaster Component in Vue\nDESCRIPTION: Demonstrates how to add the Toaster component to the app.vue file for basic Toast functionality.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toast.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <NuxtPage />\n\n    <NToaster />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Tooltip Shortcuts Definition in TypeScript\nDESCRIPTION: Defines the shortcuts for the tooltip component, including various styling options.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/tooltip.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  tooltip: {\n    base: 'relative inline-block',\n    content: {\n      base: 'z-50 rounded-md bg-gray-900 px-2 py-1 text-xs font-medium text-white dark:bg-white dark:text-gray-900',\n      shadow: 'shadow-sm',\n      rounded: 'rounded-md',\n      size: {\n        xs: 'px-1 py-0.5 text-[10px]',\n        sm: 'px-1.5 py-1 text-[11px]',\n        md: 'px-2 py-1 text-xs',\n        lg: 'px-3 py-2 text-sm',\n      },\n      color: {\n        white: 'bg-white text-gray-900 dark:bg-gray-900 dark:text-white',\n        gray: 'bg-gray-100 text-gray-500 dark:bg-gray-500 dark:text-gray-100',\n        black: 'bg-gray-900 text-white dark:bg-white dark:text-gray-900',\n        'primary-500': 'bg-primary-500 text-white dark:bg-primary-400 dark:text-primary-950',\n        'secondary-500': 'bg-secondary-500 text-white dark:bg-secondary-400 dark:text-secondary-950',\n        'accent-500': 'bg-accent-500 text-white dark:bg-accent-400 dark:text-accent-950',\n        'red-500': 'bg-red-500 text-white dark:bg-red-400 dark:text-red-950',\n        'orange-500': 'bg-orange-500 text-white dark:bg-orange-400 dark:text-orange-950',\n        'amber-500': 'bg-amber-500 text-white dark:bg-amber-400 dark:text-amber-950',\n        'yellow-500': 'bg-yellow-500 text-white dark:bg-yellow-400 dark:text-yellow-950',\n        'lime-500': 'bg-lime-500 text-white dark:bg-lime-400 dark:text-lime-950',\n        'green-500': 'bg-green-500 text-white dark:bg-green-400 dark:text-green-950',\n        'emerald-500': 'bg-emerald-500 text-white dark:bg-emerald-400 dark:text-emerald-950',\n        'teal-500': 'bg-teal-500 text-white dark:bg-teal-400 dark:text-teal-950',\n        'cyan-500': 'bg-cyan-500 text-white dark:bg-cyan-400 dark:text-cyan-950',\n        'sky-500': 'bg-sky-500 text-white dark:bg-sky-400 dark:text-sky-950',\n        'blue-500': 'bg-blue-500 text-white dark:bg-blue-400 dark:text-blue-950',\n        'indigo-500': 'bg-indigo-500 text-white dark:bg-indigo-400 dark:text-indigo-950',\n        'violet-500': 'bg-violet-500 text-white dark:bg-violet-400 dark:text-violet-950',\n        'purple-500': 'bg-purple-500 text-white dark:bg-purple-400 dark:text-purple-950',\n        'fuchsia-500': 'bg-fuchsia-500 text-white dark:bg-fuchsia-400 dark:text-fuchsia-950',\n        'pink-500': 'bg-pink-500 text-white dark:bg-pink-400 dark:text-pink-950',\n        'rose-500': 'bg-rose-500 text-white dark:bg-rose-400 dark:text-rose-950',\n      },\n    },\n  },\n} as const\n```\n\n----------------------------------------\n\nTITLE: Accordion Types Definition in TypeScript\nDESCRIPTION: Defines the TypeScript types and interfaces for the Accordion component, including props and item configurations.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/accordion.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/types/accordion.ts [types/accordion.ts]\n```\n\n----------------------------------------\n\nTITLE: Implementing FormDescription Component in Vue\nDESCRIPTION: Vue component for rendering form field descriptions. It provides contextual information about the form field and proper accessibility attributes.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/form.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { useFormField } from '../../../composables/forms/useFormField'\n\ninterface Props {\n  /**\n   * Add a name to the form description.\n   */\n  name?: string\n}\n\nconst props = defineProps<Props>()\nconst field = useFormField(props.name)\n</script>\n\n<template>\n  <p\n    :id=\"`${field.id}-description`\"\n    class=\"form-description\"\n  >\n    <slot />\n  </p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing useToast Composable in TypeScript\nDESCRIPTION: Contains the implementation of the useToast composable, which provides functionality for creating and managing toasts.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toast.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/composables/useToast.ts [useToast.ts]\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Textarea in Vue\nDESCRIPTION: Demonstrates the basic usage of the textarea component in Vue. This example shows how to create a simple textarea with a label and placeholder.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/textarea.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UFormGroup label=\"Message\">\n    <UTextarea\n      v-model=\"message\"\n      placeholder=\"Enter your message\"\n    />\n  </UFormGroup>\n</template>\n\n<script setup lang=\"ts\">\nconst message = ref('')\n</script>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing FormField Component in Vue\nDESCRIPTION: Vue component for form fields, providing a wrapper for form controls with label, description, hint, and validation messages. Utilizes VeeValidate for form validation integration.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/form.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport type { FormFieldStatus } from '../../types'\nimport { useFormField } from '../../composables/forms/useFormField'\nimport { useStatusClasses } from '../../composables/forms/form/useStatusClasses'\n\ninterface Props {\n  /**\n   * Add a label to the form field.\n   */\n  label?: string\n  /**\n   * Add a name to the form field.\n   */\n  name?: string\n  /**\n   * Add a for to the label.\n   */\n  for?: string\n  /**\n   * Mark the field as required and add a * to the label.\n   * @default false\n   */\n  required?: boolean\n  /**\n   * Add a description to the form field.\n   */\n  description?: string\n  /**\n   * Add a hint to the form field.\n   */\n  hint?: string\n  /**\n   * Add a message to the form field.\n   */\n  message?: string\n  /**\n   * Set the status of the form field.\n   */\n  status?: FormFieldStatus\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  required: false,\n})\n\nconst field = useFormField(props.name)\nconst {\n  message,\n  status,\n  updateMessage,\n  updateStatus,\n} = useStatusClasses(props.status, props.message)\n\n// Watch for changes in field.errorMessage\nwhenever(field.errorMessage, (value) => {\n  if (value) {\n    updateStatus('error')\n    updateMessage(value)\n  }\n  else {\n    if (!props.status && !props.message) {\n      updateStatus(undefined)\n      updateMessage('')\n    }\n  }\n})\n\n// Watch for changes in status or message props\nwatchEffect(() => {\n  updateStatus(props.status)\n  updateMessage(props.message || '')\n})\n</script>\n\n<template>\n  <div class=\"form-field\">\n    <slot name=\"top\" />\n\n    <div class=\"form-item\">\n      <FormLabel\n        v-if=\"props.label\"\n        :for=\"props.for || (props.name && field.id)\"\n        :required=\"props.required\"\n      >\n        <slot name=\"label\">\n          {{ props.label }}\n        </slot>\n      </FormLabel>\n\n      <slot />\n\n      <FormDescription v-if=\"props.description\">\n        <slot name=\"description\">\n          {{ props.description }}\n        </slot>\n      </FormDescription>\n    </div>\n\n    <div v-if=\"props.hint || props.message || status || $slots.message || $slots.hint\" class=\"form-item\">\n      <FormHint\n        v-if=\"props.hint\"\n      >\n        <slot name=\"hint\">\n          {{ props.hint }}\n        </slot>\n      </FormHint>\n\n      <FormMessage\n        v-if=\"message || $slots.message\"\n        :status=\"status\"\n      >\n        <slot name=\"message\">\n          {{ message }}\n        </slot>\n      </FormMessage>\n    </div>\n\n    <slot name=\"bottom\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Alert Shortcuts in TypeScript\nDESCRIPTION: Defines the shortcuts for different alert variants and colors using TypeScript.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/alert.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  alert: {\n    base: 'w-full rounded-lg p-4 [&:has(p)]:gap-0 [&>p]:mt-2.5',\n    wrapper: 'flex',\n    icon: 'shrink-0',\n    close: 'absolute right-2 top-2 p-0.5 rounded-md text-gray-500 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-gray-50',\n    title: 'block font-medium',\n    description: 'text-gray-500 dark:text-gray-400 mt-1',\n    shadow: 'shadow-md',\n    width: {\n      full: 'w-full',\n      auto: 'w-auto',\n    },\n    variant: {\n      solid: 'border-transparent',\n      outline: 'border bg-transparent',\n      soft: 'border-transparent',\n    },\n    color: {\n      primary: {\n        solid: 'bg-primary-500 text-white dark:bg-primary-400 dark:text-primary-950',\n        outline: 'border-primary-500 text-primary-500',\n        soft: 'bg-primary-50 text-primary-500 dark:bg-primary-400 dark:bg-opacity-10 dark:text-primary-300',\n      },\n      // ... other color variants\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Button Shortcuts Configuration in TypeScript\nDESCRIPTION: TypeScript configuration file defining button shortcuts and styles for the Una UI framework.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/button.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  btn: {\n    solid: {\n      base: \"relative inline-flex items-center justify-center gap-x-2 text-center font-medium whitespace-nowrap transition duration-100 cursor-pointer select-none\",\n      variant: {\n        solid: \"[&:not(:disabled):not(.disabled)]:hover:bg-opacity-80 disabled:opacity-75\",\n        outline: \"[&:not(:disabled):not(.disabled)]:hover:bg-opacity-10 disabled:opacity-75\",\n        soft: \"[&:not(:disabled):not(.disabled)]:hover:bg-opacity-75 disabled:opacity-75\",\n        ghost: \"[&:not(:disabled):not(.disabled)]:hover:bg-opacity-10 disabled:opacity-75\",\n        link: \"[&:not(:disabled):not(.disabled)]:hover:underline disabled:opacity-75\",\n        text: \"[&:not(:disabled):not(.disabled)]:hover:underline disabled:opacity-75\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Menu Types Definition\nDESCRIPTION: TypeScript type definitions for the navigation menu components, defining the available props and their types.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/navigation-menu.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/nuxt/src/runtime/types/navigation-menu.ts\n```\n\n----------------------------------------\n\nTITLE: Skeleton Component Implementation\nDESCRIPTION: Core Vue component implementation for the Skeleton loading placeholder.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/skeleton.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/Skeleton.vue\n```\n\n----------------------------------------\n\nTITLE: Link Component Implementation in Vue\nDESCRIPTION: Implements the Link component in Vue, handling various link types and styles. It includes logic for external links, active states, and applies appropriate classes based on the link type.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/link.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { LinkProps } from '../../types'\nimport { computed, useAttrs, useSlots } from 'vue'\nimport { useLink } from '#app'\n\nconst props = withDefaults(defineProps<LinkProps>(), {\n  styled: true,\n  external: false,\n  noRel: false,\n  target: undefined,\n})\n\nconst attrs = useAttrs()\nconst slots = useSlots()\n\nconst { href, isActive, isExactActive, navigate } = useLink(props)\n\nconst isExternal = computed(() => typeof props.external === 'boolean'\n  ? props.external\n  : props.target === '_blank'\n  || href.value?.toString().startsWith('http')\n  || href.value?.toString().startsWith('mailto:'),\n)\n\nconst rel = computed(() => !props.noRel && isExternal.value ? 'noopener noreferrer' : undefined)\n\nconst tag = computed(() => isExternal.value ? 'a' : 'nuxt-link')\n\nconst classes = computed(() => {\n  if (!props.styled)\n    return []\n\n  return [\n    'u-link',\n    'u-link-base',\n    {\n      'u-link-active':\n        attrs.class?.toString().includes('u-link-active')\n        || isExactActive.value\n        || isActive.value,\n    },\n  ]\n})\n</script>\n\n<template>\n  <component\n    :is=\"tag\"\n    v-bind=\"{\n      ...attrs,\n      class: [classes, attrs.class],\n      href: isExternal ? href : undefined,\n      rel,\n      target: props.target,\n      ...(isExternal ? {} : props),\n    }\"\n    @click=\"isExternal ? undefined : navigate\"\n  >\n    <slot v-if=\"slots.default\" />\n    <span v-else v-text=\"href\" />\n  </component>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Alert in Vue\nDESCRIPTION: Demonstrates the basic usage of the Alert component with title and description props.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/alert.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UAlert\n    title=\"Alert title\"\n    description=\"Alert description\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Breadcrumb Component in Vue\nDESCRIPTION: This Vue component implements the main Breadcrumb functionality, handling the rendering of breadcrumb items, separators, and ellipsis.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/breadcrumb.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { BreadcrumbItem, BreadcrumbProps } from '../../types'\n\nconst props = withDefaults(defineProps<BreadcrumbProps>(), {\n  items: () => [],\n  separator: 'i-radix-icons-chevron-right',\n  ellipsis: 'i-radix-icons-dots-horizontal',\n  breadcrumbActive: 'text-primary',\n  breadcrumbInactive: 'text-muted'\n})\n\nconst slots = useSlots()\n\nconst { items } = toRefs(props)\n\nconst _items = computed(() => {\n  return items.value.map((item, index) => ({\n    ...item,\n    isActive: index === items.value.length - 1\n  }))\n})\n</script>\n\n<template>\n  <BreadcrumbRoot v-bind=\"$attrs\">\n    <slot name=\"root\" :items=\"_items\">\n      <BreadcrumbList>\n        <slot name=\"list\" :items=\"_items\">\n          <template v-for=\"(item, index) in _items\" :key=\"index\">\n            <BreadcrumbItem>\n              <slot\n                :item=\"item\"\n                :index=\"index\"\n                :is-active=\"item.isActive\"\n              >\n                <BreadcrumbLink\n                  v-bind=\"{\n                    ...$props._breadcrumbLink,\n                    ...item,\n                    variant: item.isActive\n                      ? breadcrumbActive\n                      : breadcrumbInactive\n                  }\"\n                >\n                  {{ item.label }}\n                </BreadcrumbLink>\n              </slot>\n            </BreadcrumbItem>\n\n            <BreadcrumbSeparator\n              v-if=\"index < _items.length - 1\"\n              v-bind=\"$props._breadcrumbSeparator\"\n            >\n              <slot name=\"separator\" :item=\"item\">\n                <UIcon :name=\"separator\" />\n              </slot>\n            </BreadcrumbSeparator>\n          </template>\n        </slot>\n      </BreadcrumbList>\n    </slot>\n  </BreadcrumbRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Implementation in Vue\nDESCRIPTION: Demonstrates the basic usage of the tooltip component with default settings.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/tooltip.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UTooltip content=\"This is a tooltip\">\n    <UButton>Hover me</UButton>\n  </UTooltip>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Collapsible Content Component Implementation in Vue\nDESCRIPTION: Implements the content panel that expands or collapses based on the state. It uses Vue's transition system to animate the height change when the collapsible state changes.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/collapsible.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst collapsible = inject('collapsible', null)\nconst open = collapsible?.open as Ref<boolean> | undefined\n\nconst contentRef = ref<HTMLElement | null>(null)\nconst contentHeight = ref<number | undefined>()\n\nfunction beforeEnter(el: Element) {\n  const contentEl = el as HTMLElement\n  contentEl.style.height = '0'\n}\n\nfunction enter(el: Element) {\n  const contentEl = el as HTMLElement\n  contentHeight.value = contentEl.scrollHeight\n  contentEl.style.height = `${contentHeight.value}px`\n}\n\nfunction afterEnter(el: Element) {\n  const contentEl = el as HTMLElement\n  contentEl.style.height = ''\n}\n\nfunction beforeLeave(el: Element) {\n  const contentEl = el as HTMLElement\n  contentEl.style.height = `${contentEl.offsetHeight}px`\n}\n\nfunction leave(el: Element) {\n  const contentEl = el as HTMLElement\n  // trigger a reflow\n  // eslint-disable-next-line no-unused-expressions\n  contentEl.scrollHeight\n  contentEl.style.height = '0'\n}\n</script>\n\n<template>\n  <Transition\n    :css=\"false\"\n    @before-enter=\"beforeEnter\"\n    @enter=\"enter\"\n    @after-enter=\"afterEnter\"\n    @before-leave=\"beforeLeave\"\n    @leave=\"leave\"\n  >\n    <div\n      v-if=\"open\"\n      ref=\"contentRef\"\n      class=\"collapsible-content\"\n    >\n      <slot />\n    </div>\n  </Transition>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Sidebar Structure with Vue Components\nDESCRIPTION: Shows how to structure a sidebar using various subcomponents like SidebarHeader, SidebarContent, and SidebarFooter.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/sidebar.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Sidebar>\n    <SidebarHeader>\n      <!-- Header content -->\n    </SidebarHeader>\n    <SidebarContent>\n      <!-- Main content -->\n    </SidebarContent>\n    <SidebarFooter>\n      <!-- Footer content -->\n    </SidebarFooter>\n  </Sidebar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Button Component Type Definitions\nDESCRIPTION: TypeScript type definitions for the button component props including variants, sizes, colors and other customization options.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/button.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ButtonProps {\n  label?: string\n  to?: string\n  size?: string\n  rounded?: string\n  square?: boolean | string\n  block?: boolean\n  icon?: boolean\n  disabled?: boolean\n  loading?: boolean\n  loadingPlacement?: 'leading' | 'trailing' | 'label'\n  btn?: string\n  leading?: string\n  trailing?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Toast Component in Vue\nDESCRIPTION: The main Toast component implementation, handling rendering and behavior of individual toasts.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toast.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/overlays/toast/Toast.vue\n```\n\n----------------------------------------\n\nTITLE: Vue Switch Component Presets Definition\nDESCRIPTION: Defines the presets for the switch component, including base styles, track styles, and thumb styles for different states and sizes.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/switch.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  switch: {\n    base: 'relative inline-flex shrink-0 cursor-pointer rounded-full transition-colors duration-200 ease-in-out focus:outline-none focus-visible:ring-2 focus-visible:ring-primary-950/20 disabled:cursor-not-allowed disabled:opacity-50 rtl:space-x-reverse',\n    track: {\n      base: 'pointer-events-none inline-block h-full w-full rounded-full shadow transition-colors duration-200 ease-in-out',\n      checked: 'bg-{switchChecked}',\n      unchecked: 'bg-{switchUnchecked}'\n    },\n    thumb: {\n      base: 'pointer-events-none absolute inline-block aspect-square rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out',\n      checked: 'translate-x-full rtl:-translate-x-full',\n      unchecked: 'translate-x-0'\n    },\n    icon: 'absolute inset-0 h-full w-full flex items-center justify-center text-gray-400 transition-opacity duration-200 ease-in-out',\n    loadingIcon: 'absolute inset-0 h-full w-full flex items-center justify-center transition-opacity duration-200 ease-in-out',\n    size: {\n      '2xs': 'h-3 w-5',\n      xs: 'h-3.5 w-6',\n      sm: 'h-4 w-7',\n      md: 'h-5 w-9',\n      lg: 'h-6 w-11',\n      xl: 'h-7 w-[3.25rem]',\n      '2xl': 'h-8 w-[3.75rem]'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Form Component Types in TypeScript\nDESCRIPTION: TypeScript interface definitions for form components, including FormFieldProps which defines properties for form field components such as label, name, required status, description, hint, and message.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/form.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FormFieldProps {\n  /**\n   * Add a label to the form field.\n   */\n  label?: string\n  /**\n   * Add a name to the form field.\n   */\n  name?: string\n  /**\n   * Add a for to the label.\n   */\n  for?: string\n  /**\n   * Mark the field as required and add a * to the label.\n   * @default false\n   */\n  required?: boolean\n  /**\n   * Add a description to the form field.\n   */\n  description?: string\n  /**\n   * Add a hint to the form field.\n   */\n  hint?: string\n  /**\n   * Add a message to the form field.\n   */\n  message?: string\n  /**\n   * Set the status of the form field.\n   */\n  status?: FormFieldStatus\n}\n\nexport type FormFieldStatus = 'info' | 'success' | 'warning' | 'error' | undefined\n```\n\n----------------------------------------\n\nTITLE: Input Status Examples\nDESCRIPTION: Examples showing different status states (info, success, warning, error) of the input.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/input.md#2025-04-16_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/input/ExampleVueInputStatus.vue\n```\n\n----------------------------------------\n\nTITLE: Basic Toggle Component Implementation - Vue\nDESCRIPTION: Basic toggle component example showing core functionality with v-model binding and customizable states.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toggle.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/toggle/ExampleVueToggleBasic.vue\n```\n\n----------------------------------------\n\nTITLE: Badge TypeScript Types Definition\nDESCRIPTION: TypeScript type definitions for Badge component props including variant, color, size, and other configuration options.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/badge.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/nuxt/src/runtime/types/badge.ts\n```\n\n----------------------------------------\n\nTITLE: Vue Switch Component with Label\nDESCRIPTION: Shows how to use the switch component inside a form group or with a label component, demonstrating the automatic toggling when clicking on the label.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/switch.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"flex flex-col gap-4\">\n    <UFormGroup label=\"Agree to terms\" help=\"Please read our terms and conditions.\">\n      <USwitch v-model=\"checked\" />\n    </UFormGroup>\n    <ULabel>\n      <USwitch v-model=\"checked2\" />\n      <span>Agree to terms</span>\n    </ULabel>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst checked = ref(false)\nconst checked2 = ref(false)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Navigation Menu Shortcuts Configuration\nDESCRIPTION: Preset configurations for styling and behavior of the navigation menu components.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/navigation-menu.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/preset/src/_shortcuts/navigation-menu.ts\n```\n\n----------------------------------------\n\nTITLE: Card Component Structure in Vue\nDESCRIPTION: The main Card component that provides the container structure with slots for header, content and footer. Handles variant and color styling props.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/card.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/elements/card/Card.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Kbd Component in Vue\nDESCRIPTION: Vue component implementation for keyboard input display, including props, computed properties and template rendering.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/kbd.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { KbdProps } from '../../types'\n\ndefineOptions({\n  name: 'NKbd',\n  inheritAttrs: false,\n})\n\nconst props = withDefaults(defineProps<KbdProps>(), {\n  variant: 'solid',\n  size: 'md',\n})\n\nconst attrs = useAttrs()\nconst shortcuts = useShortcuts()\n\nconst classes = computed(() => {\n  return shortcuts.value.kbd?.[`${props.variant}-${props.color || 'gray'}`]\n    || shortcuts.value.kbd?.[props.variant]\n    || ''\n})\n\nconst sizeClasses = computed(() => {\n  return shortcuts.value.kbd?.size?.[props.size]\n    || ''\n})\n</script>\n\n<template>\n  <kbd\n    v-bind=\"attrs\"\n    :class=\"[\n      shortcuts?.kbd?.base,\n      classes,\n      sizeClasses,\n    ]\"\n  >\n    <slot />\n  </kbd>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Navigation Menu Trigger Component\nDESCRIPTION: Component that handles the triggering mechanism for opening/closing the navigation menu, with support for both click and hover interactions.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/navigation-menu.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/navigation-menu/NavigationMenuTrigger.vue\n```\n\n----------------------------------------\n\nTITLE: Vue Tabs Trigger Component\nDESCRIPTION: Component for individual tab triggers\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/tabs.md#2025-04-16_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/tabs/TabsTrigger.vue\n```\n\n----------------------------------------\n\nTITLE: Main Checkbox Component Implementation\nDESCRIPTION: Core Vue component implementation for the checkbox functionality.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/checkbox.md#2025-04-16_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/forms/Checkbox.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing ToastTitle Component in Vue\nDESCRIPTION: The ToastTitle component implementation, rendering the title of a toast.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toast.md#2025-04-16_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/overlays/toast/ToastTitle.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Sidebar Usage in Vue\nDESCRIPTION: Demonstrates how to use the Sidebar component in a Vue application, including the SidebarProvider and Sidebar components.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/sidebar.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\n\nconst isOpen = ref(false)\n</script>\n\n<template>\n  <SidebarProvider>\n    <Sidebar v-model=\"isOpen\">\n      <!-- Sidebar content -->\n    </Sidebar>\n    <main>\n      <button @click=\"isOpen = !isOpen\">\n        Toggle Sidebar\n      </button>\n      <!-- Main content -->\n    </main>\n  </SidebarProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Resizable Checkbox Implementation\nDESCRIPTION: Checkbox component with size customization support using breakpoints and states.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/checkbox.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/checkbox/ExampleVueCheckboxSize.vue\n```\n\n----------------------------------------\n\nTITLE: Icon Component Implementation\nDESCRIPTION: Vue component implementation for rendering icons with support for different icon libraries\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/icon.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/Icon.vue\n```\n\n----------------------------------------\n\nTITLE: Radio Group Item Vue Component Implementation\nDESCRIPTION: Vue component implementation for individual radio group items\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/radio-group.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/forms/radio-group/RadioGroupItem.vue\n```\n\n----------------------------------------\n\nTITLE: Input with Icons Example\nDESCRIPTION: Example showing input with leading and trailing icons.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/input.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/input/ExampleVueInputIcon.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Separator Component in Vue\nDESCRIPTION: Vue component implementation for the Separator, including template structure and script setup with props and computed properties.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/separator.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport { separatorProps } from '../../types/separator'\nimport { useShortcuts } from '../../composables/useShortcuts'\n\nconst props = defineProps(separatorProps)\n\nconst shortcuts = useShortcuts('separator')\n\nconst isVertical = computed(() => props.orientation === 'vertical')\n\nconst classes = computed(() => [\n  shortcuts.value.base,\n  isVertical.value ? shortcuts.value.vertical : shortcuts.value.horizontal,\n  props.size && `text-${props.size}`,\n])\n\nconst contentClasses = computed(() => [\n  shortcuts.value.content.base,\n  isVertical.value\n    ? shortcuts.value.content.vertical\n    : shortcuts.value.content.horizontal,\n])\n\nconst lineClasses = computed(() => [\n  shortcuts.value.line.base,\n  isVertical.value\n    ? shortcuts.value.line.vertical\n    : shortcuts.value.line.horizontal,\n  shortcuts.value[props.separator.split('-')[0]][props.separator.split('-')[1]],\n])\n</script>\n\n<template>\n  <div :class=\"classes\">\n    <div\n      v-if=\"separatorPosition === 'left' || separatorPosition === 'top'\"\n      :class=\"contentClasses\"\n    >\n      <slot>{{ label }}</slot>\n    </div>\n    <div :class=\"lineClasses\" />\n    <div\n      v-if=\"\n        separatorPosition === 'center' ||\n        separatorPosition === 'right' ||\n        separatorPosition === 'bottom'\n      \"\n      :class=\"contentClasses\"\n    >\n      <slot>{{ label }}</slot>\n    </div>\n    <div\n      v-if=\"separatorPosition === 'center' || separatorPosition === 'right'\"\n      :class=\"lineClasses\"\n    />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Popover Basic Example\nDESCRIPTION: Example implementation showing basic usage of the popover component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/popover.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/popover/ExampleVuePopoverBasic.vue\n```\n\n----------------------------------------\n\nTITLE: Indicator Component Implementation\nDESCRIPTION: Vue component implementation for the Indicator element with various customization options.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/indicator.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/elements/Indicator.vue\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Switch Component Usage\nDESCRIPTION: Demonstrates the basic implementation of the switch component in Vue.js, showing how to bind the v-model and set various props like defaultValue, value, and disabled.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/switch.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"flex flex-col gap-4\">\n    <USwitch v-model=\"checked\" />\n    <USwitch :default-value=\"true\" />\n    <USwitch value=\"custom\" />\n    <USwitch disabled />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst checked = ref(false)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Row Selection Implementation in Vue Table\nDESCRIPTION: Configuration for enabling row selection functionality with support for single/multi-row selection and sub-row selection. Includes event handling for selection actions.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/table.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n| Prop                      | Default | Type          | Description                                       |\n| ------------------------- | ------- | ------------- | ------------------------------------------------- |\n| `rowSelection`            | -       | `object`      | Selected row state, can be binded with `v-model`. |\n| `enableRowSelection`      | `false` | `boolean`     | Enable row selection.                             |\n| `enableMultiRowSelection` | `true`  | `boolean`     | Enable multiple row selection.                    |\n| `rowId`                   | `id`    | `string`      | Row id to uniquely identify each row.             |\n| `enableSubRowSelection`   | `false` | `boolean`     | Enable sub row selection.                         |\n| `@select`                 | -       | `event, row`  | Emitted when a row is selected.                   |\n| `@select-all`             | -       | `event, rows` | Emitted when all rows are selected.               |\n| `@row`                    | -       | `event, row`  | Emitted when a row is clicked.                    |\n```\n\n----------------------------------------\n\nTITLE: Accordion with Custom Slots Example 1\nDESCRIPTION: Illustrates the use of custom slots to customize the label and content of accordion items, providing greater flexibility.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/accordion.md#2025-04-16_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/accordion/ExampleVueAccordionSlot1.vue\n```\n\n----------------------------------------\n\nTITLE: Customizing Vue Switch Component Colors\nDESCRIPTION: Illustrates how to customize the colors of the switch component for both checked and unchecked states using the switch-checked and switch-unchecked props.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/switch.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"flex flex-wrap gap-4\">\n    <USwitch v-model=\"checked\" switch-checked=\"primary\" switch-unchecked=\"gray\" />\n    <USwitch v-model=\"checked\" switch-checked=\"secondary\" switch-unchecked=\"gray\" />\n    <USwitch v-model=\"checked\" switch-checked=\"accent\" switch-unchecked=\"gray\" />\n    <USwitch v-model=\"checked\" switch-checked=\"success\" switch-unchecked=\"gray\" />\n    <USwitch v-model=\"checked\" switch-checked=\"warning\" switch-unchecked=\"gray\" />\n    <USwitch v-model=\"checked\" switch-checked=\"error\" switch-unchecked=\"gray\" />\n    <USwitch v-model=\"checked\" switch-checked=\"[#8b5cf6]\" switch-unchecked=\"gray\" />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst checked = ref(true)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Closable Alerts in Vue\nDESCRIPTION: Shows how to create closable Alert components with a close button and handle close events.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/alert.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UAlert\n    closable\n    title=\"Closable alert\"\n    description=\"This is a closable alert.\"\n    @close=\"onClose\"\n  />\n</template>\n\n<script setup lang=\"ts\">\nconst onClose = () => {\n  console.log('Alert closed')\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Label Component Implementation\nDESCRIPTION: Main Vue component implementation file for the Label component\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/label.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/Label.vue\n```\n\n----------------------------------------\n\nTITLE: Vue Tabs Main Component\nDESCRIPTION: Main tabs component implementation\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/tabs.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/tabs/Tabs.vue\n```\n\n----------------------------------------\n\nTITLE: Vue Tabs List Component\nDESCRIPTION: Component for rendering the list of tab triggers\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/tabs.md#2025-04-16_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/tabs/TabsList.vue\n```\n\n----------------------------------------\n\nTITLE: Configuring Textarea Resize Behavior in Vue\nDESCRIPTION: Shows how to control the resize behavior of textareas using the 'resize' prop. This example demonstrates different resize options including none, vertical, horizontal, and both directions.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/textarea.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UFormGroup label=\"No resize\">\n    <UTextarea\n      v-model=\"message1\"\n      placeholder=\"Can't resize\"\n      resize=\"none\"\n    />\n  </UFormGroup>\n\n  <UFormGroup label=\"Vertical resize\">\n    <UTextarea\n      v-model=\"message2\"\n      placeholder=\"Can resize vertically\"\n      resize=\"y\"\n    />\n  </UFormGroup>\n\n  <UFormGroup label=\"Horizontal resize\">\n    <UTextarea\n      v-model=\"message3\"\n      placeholder=\"Can resize horizontally\"\n      resize=\"x\"\n    />\n  </UFormGroup>\n\n  <UFormGroup label=\"Both directions resize\">\n    <UTextarea\n      v-model=\"message4\"\n      placeholder=\"Can resize in both directions\"\n      :resize=\"null\"\n    />\n  </UFormGroup>\n</template>\n\n<script setup lang=\"ts\">\nconst message1 = ref('')\nconst message2 = ref('')\nconst message3 = ref('')\nconst message4 = ref('')\n</script>\n\n```\n\n----------------------------------------\n\nTITLE: Vue Tabs Basic Example\nDESCRIPTION: Basic implementation of the tabs component showing content organization with tabs\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/tabs.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/tabs/ExampleVueTabsBasic.vue\n```\n\n----------------------------------------\n\nTITLE: Customizing Alert Variants in Vue\nDESCRIPTION: Shows how to use different variants of the Alert component, including outline, soft, and base styles.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/alert.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UStack>\n    <UAlert\n      title=\"Outline alert\"\n      description=\"This is an outline alert.\"\n    />\n    <UAlert\n      alert=\"soft\"\n      title=\"Soft alert\"\n      description=\"This is a soft alert.\"\n    />\n    <UAlert\n      alert=\"~\"\n      title=\"Base alert\"\n      description=\"This is a base alert.\"\n    />\n  </UStack>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Popover Content Component\nDESCRIPTION: Vue component handling the content display and positioning of the popover.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/popover.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/popover/PopoverContent.vue\n```\n\n----------------------------------------\n\nTITLE: Basic Skeleton Component Example in Vue\nDESCRIPTION: Demonstrates the basic implementation of the Skeleton component for showing loading states.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/skeleton.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/skeleton/ExampleVueSkeletonBasic.vue\n```\n\n----------------------------------------\n\nTITLE: Dialog Title Component\nDESCRIPTION: Vue component for rendering the dialog title section.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/dialog.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/dialog/DialogTitle.vue\n```\n\n----------------------------------------\n\nTITLE: Custom Slider Styling Example\nDESCRIPTION: Example showing advanced customization options using the una prop and utility classes\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/slider.md#2025-04-16_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/slider/ExampleVueSliderCustom.vue\n```\n\n----------------------------------------\n\nTITLE: Slider Size Configuration Example\nDESCRIPTION: Example demonstrating different slider size configurations and responsive behaviors\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/slider.md#2025-04-16_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/slider/ExampleVueSliderSize.vue\n```\n\n----------------------------------------\n\nTITLE: Form Group Checkbox Integration\nDESCRIPTION: Example showing checkbox usage within a form group component with label integration.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/checkbox.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/checkbox/ExampleVueCheckboxFormGroup.vue\n```\n\n----------------------------------------\n\nTITLE: Applying Color Variations to Alerts in Vue\nDESCRIPTION: Demonstrates how to apply different color variations to the Alert component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/alert.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UStack>\n    <UAlert\n      alert=\"outline-primary\"\n      title=\"Primary alert\"\n      description=\"This is a primary alert.\"\n    />\n    <UAlert\n      alert=\"soft-success\"\n      title=\"Success alert\"\n      description=\"This is a success alert.\"\n    />\n    <UAlert\n      alert=\"outline-warning\"\n      title=\"Warning alert\"\n      description=\"This is a warning alert.\"\n    />\n    <UAlert\n      alert=\"soft-danger\"\n      title=\"Danger alert\"\n      description=\"This is a danger alert.\"\n    />\n  </UStack>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing ToastViewport Component in Vue\nDESCRIPTION: The ToastViewport component implementation, defining the area where toasts are displayed.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toast.md#2025-04-16_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/overlays/toast/ToastViewport.vue\n```\n\n----------------------------------------\n\nTITLE: Dialog Footer Component\nDESCRIPTION: Vue component for rendering the dialog footer section.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/dialog.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/dialog/DialogFooter.vue\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Vue Switch Component\nDESCRIPTION: Shows how to add icons to the switch component using the icon, checkedIcon, and uncheckedIcon props for different states.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/switch.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"flex flex-wrap gap-4\">\n    <USwitch v-model=\"checked\" icon=\"i-ph-moon-stars-duotone\" />\n    <USwitch v-model=\"checked\" checked-icon=\"i-ph-sun-dim-duotone\" unchecked-icon=\"i-ph-moon-stars-duotone\" />\n    <USwitch v-model=\"checked\" checked-icon=\"i-ph-check-circle-duotone\" unchecked-icon=\"i-ph-x-circle-duotone\" />\n    <USwitch v-model=\"checked\" checked-icon=\"i-ph-heart-duotone\" unchecked-icon=\"i-ph-heart-break-duotone\" />\n    <USwitch v-model=\"checked\" checked-icon=\"i-ph-thumbs-up-duotone\" unchecked-icon=\"i-ph-thumbs-down-duotone\" />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst checked = ref(true)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adjusting Vue Switch Component Size\nDESCRIPTION: Demonstrates how to adjust the size of the switch component using the size prop, including responsive and state-based sizing options.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/switch.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"flex flex-wrap items-center gap-4\">\n    <USwitch v-model=\"checked\" size=\"xs\" />\n    <USwitch v-model=\"checked\" size=\"sm\" />\n    <USwitch v-model=\"checked\" size=\"md\" />\n    <USwitch v-model=\"checked\" size=\"lg\" />\n    <USwitch v-model=\"checked\" size=\"xl\" />\n    <USwitch v-model=\"checked\" size=\"2xl\" />\n    <USwitch v-model=\"checked\" size=\"sm:sm md:md lg:lg\" />\n    <USwitch v-model=\"checked\" size=\"hover:lg focus:2xl\" />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst checked = ref(true)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Slider Orientation Example\nDESCRIPTION: Example showing how to configure vertical and horizontal slider orientations\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/slider.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/slider/ExampleVueSliderOrientation.vue\n```\n\n----------------------------------------\n\nTITLE: Adjusting Alert Sizes in Vue\nDESCRIPTION: Demonstrates how to change the size of Alert components using the size prop and custom utility classes.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/alert.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UStack>\n    <UAlert\n      size=\"xs\"\n      title=\"Extra small alert\"\n      description=\"This is an extra small alert.\"\n    />\n    <UAlert\n      size=\"sm\"\n      title=\"Small alert\"\n      description=\"This is a small alert.\"\n    />\n    <UAlert\n      size=\"md\"\n      title=\"Medium alert\"\n      description=\"This is a medium alert.\"\n    />\n    <UAlert\n      size=\"lg\"\n      title=\"Large alert\"\n      description=\"This is a large alert.\"\n    />\n    <UAlert\n      size=\"xl\"\n      title=\"Extra large alert\"\n      description=\"This is an extra large alert.\"\n    />\n  </UStack>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accordion with Custom Icons in Vue\nDESCRIPTION: Illustrates how to add custom leading and trailing icons to accordion items using various icon-related props.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/accordion.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/accordion/ExampleVueAccordionIcon.vue\n```\n\n----------------------------------------\n\nTITLE: Dialog Close Component\nDESCRIPTION: Vue component for handling dialog close functionality.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/dialog.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/dialog/DialogClose.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing FormLabel Component in Vue\nDESCRIPTION: Vue component for form labels that provides proper accessibility attributes and styling. It includes support for required field indicators.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/form.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { useFormField } from '../../../composables/forms/useFormField'\n\ninterface Props {\n  /**\n   * Add a name to the form label.\n   */\n  name?: string\n  /**\n   * Add a for to the label.\n   */\n  for?: string\n  /**\n   * Mark the field as required and add a * to the label.\n   */\n  required?: boolean\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  required: false,\n})\nconst field = useFormField(props.name)\n</script>\n\n<template>\n  <label\n    :for=\"props.for || field.id\"\n    class=\"form-label\"\n  >\n    <slot />\n    <span\n      v-if=\"props.required\"\n      class=\"form-required\"\n      aria-hidden=\"true\"\n    >\n      *\n    </span>\n  </label>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Default Open Accordion Items in Vue\nDESCRIPTION: Demonstrates how to set certain accordion items to be open by default using the 'defaultOpen' prop.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/accordion.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/accordion/ExampleVueAccordionDefaultOpen.vue\n```\n\n----------------------------------------\n\nTITLE: Input Events Example\nDESCRIPTION: Example showing event handling for leading and trailing icon clicks.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/input.md#2025-04-16_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/input/ExampleVueInputEvents.vue\n```\n\n----------------------------------------\n\nTITLE: Customizing Alert Slots in Vue - Example 2\nDESCRIPTION: Shows how to use separate slots for title, description, and icon in the Alert component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/alert.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UAlert>\n    <template #icon>\n      <UIcon name=\"i-heroicons-information-circle\" />\n    </template>\n    <template #title>\n      Custom Title\n    </template>\n    <template #description>\n      This is a custom description for the alert.\n    </template>\n  </UAlert>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Alerts in Vue\nDESCRIPTION: Shows how to add icons to Alert components and use predefined icon types for automatic color matching.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/alert.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UStack>\n    <UAlert\n      icon=\"i-heroicons-information-circle\"\n      title=\"Information\"\n      description=\"This is an information message.\"\n    />\n    <UAlert\n      icon=\"success\"\n      title=\"Success\"\n      description=\"This is a success message.\"\n    />\n    <UAlert\n      icon=\"warning\"\n      title=\"Warning\"\n      description=\"This is a warning message.\"\n    />\n    <UAlert\n      icon=\"error\"\n      title=\"Error\"\n      description=\"This is an error message.\"\n    />\n  </UStack>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing ToastDescription Component in Vue\nDESCRIPTION: The ToastDescription component implementation, rendering the description of a toast.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toast.md#2025-04-16_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/overlays/toast/ToastDescription.vue\n```\n\n----------------------------------------\n\nTITLE: Fully Customized Checkbox Implementation\nDESCRIPTION: Complete example of checkbox with full customization options.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/checkbox.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/checkbox/ExampleVueCheckboxCustom.vue\n```\n\n----------------------------------------\n\nTITLE: Unstyled Accordion Example in Vue\nDESCRIPTION: Shows how to create an accordion without default styling using the 'unstyle' prop, allowing for complete customization.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/accordion.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/accordion/ExampleVueAccordionUnstyle.vue\n```\n\n----------------------------------------\n\nTITLE: Collapsible Root Component Implementation in Vue\nDESCRIPTION: Implements the main Collapsible component with event handling, state management, and slot rendering. This component serves as the container for trigger and content elements, managing their states and interactions.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/collapsible.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { CollapsibleEmits, CollapsibleProps } from '../../types'\n\nconst props = withDefaults(defineProps<CollapsibleProps>(), {\n  defaultOpen: false,\n})\n\nconst emit = defineEmits<CollapsibleEmits>()\n\nconst _open = ref(props.defaultOpen)\nconst open = computed({\n  get: () => props.open !== undefined ? props.open : _open.value,\n  set: (value) => {\n    if (props.open === undefined)\n      _open.value = value\n    emit('update:open', value)\n  },\n})\n\nprovide('collapsible', {\n  open,\n  disabled: toRef(props, 'disabled'),\n})\n</script>\n\n<template>\n  <div class=\"collapsible\">\n    <slot :open=\"open\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Advanced Customization of Vue Switch Component\nDESCRIPTION: Illustrates advanced customization of the switch component using the una prop and utility classes for unique styling.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/switch.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"flex flex-wrap gap-4\">\n    <USwitch v-model=\"checked\" :una=\"{\n      base: 'h-7 w-14',\n      track: {\n        base: 'h-7 w-14',\n        checked: 'bg-[#2563eb]',\n        unchecked: 'bg-[#e2e8f0]'\n      },\n      thumb: {\n        base: 'h-6 w-6 bg-white',\n        checked: 'translate-x-7',\n        unchecked: 'translate-x-1'\n      }\n    }\" />\n    <USwitch v-model=\"checked\" class=\"h-10 w-20 rounded-none\">\n      <template #icon=\"{ checked }\">\n        <span v-if=\"checked\" class=\"text-sm font-bold text-white\">ON</span>\n        <span v-else class=\"text-sm font-bold text-gray-500\">OFF</span>\n      </template>\n    </USwitch>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst checked = ref(true)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Slider Props Type Definition\nDESCRIPTION: TypeScript interface defining the core properties available for the slider component\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/slider.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/nuxt/src/runtime/types/slider.ts\n```\n\n----------------------------------------\n\nTITLE: Defining Toast Types in TypeScript\nDESCRIPTION: Provides TypeScript type definitions for Toast component props and related interfaces.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toast.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/types/toast.ts [types/toast.ts]\n```\n\n----------------------------------------\n\nTITLE: Implementing Aspect Ratio Component in Vue\nDESCRIPTION: This Vue component implements the Aspect Ratio functionality, handling props, computed styles, and rendering the content within the desired ratio.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/aspect-ratio.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport { aspectRatioProps } from '../../types/aspect-ratio'\nimport { useShortcuts } from '../../composables/useShortcuts'\n\nconst props = defineProps(aspectRatioProps)\n\nconst aspectRatioClass = computed(() => {\n  let className = 'aspect-ratio'\n  if (props.variant !== '~')\n    className += ` aspect-ratio-${props.variant}-${props.color}`\n  if (props.rounded)\n    className += ` rounded-${props.rounded}`\n  return className\n})\n\nconst aspectRatioStyle = computed(() => {\n  return {\n    aspectRatio: props.ratio,\n  }\n})\n\nconst { shortcuts } = useShortcuts()\n</script>\n\n<template>\n  <div :class=\"aspectRatioClass\" :style=\"aspectRatioStyle\">\n    <div :class=\"shortcuts['aspect-ratio-content']\">\n      <slot :aspect=\"props.ratio\" />\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Tabs Size Variants Example\nDESCRIPTION: Demonstrates different size variants for tabs component\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/tabs.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/tabs/ExampleVueTabsSize.vue\n```\n\n----------------------------------------\n\nTITLE: Badge Sizes Example\nDESCRIPTION: Example showing different size options for badges including responsive sizes.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/badge.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/badge/ExampleVueBadgeSize.vue\n```\n\n----------------------------------------\n\nTITLE: Defining Indicator Component Types\nDESCRIPTION: TypeScript type definitions for the Indicator component props and configurations.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/indicator.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/types/indicator.ts\n```\n\n----------------------------------------\n\nTITLE: Reversed Icon Positioning in Accordion\nDESCRIPTION: Demonstrates the use of the 'reverse' prop to switch the position of leading and trailing icons in accordion items.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/accordion.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/accordion/ExampleVueAccordionReverse.vue\n```\n\n----------------------------------------\n\nTITLE: Card Title Component in Vue\nDESCRIPTION: Component for rendering the card title with appropriate styling and structure.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/card.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/elements/card/CardTitle.vue\n```\n\n----------------------------------------\n\nTITLE: Slider Steps Configuration Example\nDESCRIPTION: Example demonstrating how to implement stepped increments in the slider\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/slider.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/slider/ExampleVueSliderSteps.vue\n```\n\n----------------------------------------\n\nTITLE: Custom Styled Accordion Example 1\nDESCRIPTION: Demonstrates custom styling of the accordion using the 'una' prop and utility classes for a unique appearance.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/accordion.md#2025-04-16_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/accordion/ExampleVueAccordionCustom1.vue\n```\n\n----------------------------------------\n\nTITLE: Basic Badge Example\nDESCRIPTION: Example demonstrating basic badge usage with label prop.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/badge.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/badge/ExampleVueBadgeBasic.vue\n```\n\n----------------------------------------\n\nTITLE: Colored Checkbox Component Example\nDESCRIPTION: Implementation of checkbox with color customization support using the color prop.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/checkbox.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/checkbox/ExampleVueCheckboxColor.vue\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltip Content Position in Vue\nDESCRIPTION: Shows how to adjust the position of the tooltip content using the '_tooltipContent' prop.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/tooltip.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UTooltip\n    content=\"This is a tooltip\"\n    :_tooltipContent=\"{\n      side: 'right',\n      align: 'start',\n      alignOffset: -5,\n      sideOffset: 5,\n    }\"\n  >\n    <UButton>Hover me</UButton>\n  </UTooltip>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Example\nDESCRIPTION: Example implementation showing basic slider usage with default configuration\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/slider.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/slider/ExampleVueSliderBasic.vue\n```\n\n----------------------------------------\n\nTITLE: Collapsible Trigger Component Implementation in Vue\nDESCRIPTION: Implements the trigger button component that toggles the collapsible state. It handles user interactions and provides visual feedback based on the current state of the collapsible component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/collapsible.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst collapsible = inject('collapsible', null)\nconst open = collapsible?.open as Ref<boolean> | undefined\nconst disabled = collapsible?.disabled as Ref<boolean | undefined> | undefined\n\nfunction onToggle() {\n  if (disabled?.value || !open)\n    return\n  open.value = !open.value\n}\n</script>\n\n<template>\n  <button\n    type=\"button\"\n    :aria-expanded=\"open\"\n    :disabled=\"disabled\"\n    class=\"collapsible-trigger\"\n    @click=\"onToggle\"\n  >\n    <slot :open=\"open\" />\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Badge Colors Example\nDESCRIPTION: Example demonstrating different color options for badges.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/badge.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/badge/ExampleVueBadgeColor.vue\n```\n\n----------------------------------------\n\nTITLE: Main Avatar Vue Component Implementation\nDESCRIPTION: Implements the Avatar component with support for images and fallback content. Handles props for sizing, styling, and appearance variants.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/avatar.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { computed, useSlots } from 'vue'\nimport { avatarProps } from '../../../types/avatar'\nimport { useElementSize } from '../../../composables/useElementSize'\n\ndefineOptions({\n  name: 'UAvatar',\n  inheritAttrs: false\n})\n\nconst props = defineProps(avatarProps)\nconst slots = useSlots()\n\nconst size = useElementSize(props.size)\n\nconst avatarImg = computed(() => {\n  return slots.default || props.src\n})\n\nconst avatarFallback = computed(() => {\n  return slots.fallback || !slots.default\n})\n\nconst dimensions = computed(() => {\n  if (props.square)\n    return { width: props.square, height: props.square }\n\n  return undefined\n})\n</script>\n\n<template>\n  <div\n    :class=\"[\n      'avatar',\n      props.avatar,\n      dimensions ? '' : size.class,\n      `rounded-${props.rounded}`,\n    ]\"\n    :style=\"dimensions\"\n    v-bind=\"$attrs\"\n  >\n    <AvatarImage\n      v-if=\"avatarImg\"\n      :src=\"props.src\"\n      :alt=\"props.alt\"\n    >\n      <slot />\n    </AvatarImage>\n\n    <AvatarFallback\n      v-if=\"avatarFallback\"\n      :alt=\"props.alt\"\n      :label=\"props.label\"\n      :icon=\"props.icon\"\n    >\n      <slot name=\"fallback\" />\n    </AvatarFallback>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Dialog Header Component\nDESCRIPTION: Vue component for rendering the dialog header section.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/dialog.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/dialog/DialogHeader.vue\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltip Size in Vue\nDESCRIPTION: Illustrates how to adjust the size of the tooltip using the 'size' prop.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/tooltip.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UTooltip\n    v-for=\"size in sizes\"\n    :key=\"size\"\n    :content=\"capitalize(size)\"\n    :size=\"size\"\n  >\n    <UButton>\n      {{ capitalize(size) }}\n    </UButton>\n  </UTooltip>\n</template>\n\n<script setup lang=\"ts\">\nconst sizes = ['xs', 'sm', 'md', 'lg']\n\nconst capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Input Expose Methods Example\nDESCRIPTION: Example demonstrating exposed methods (focus, blur, select) of the input component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/input.md#2025-04-16_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/input/ExampleVueInputExpose.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing ToastProvider Component in Vue\nDESCRIPTION: The ToastProvider component implementation, managing the context and settings for all toasts.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toast.md#2025-04-16_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/overlays/toast/ToastProvider.vue\n```\n\n----------------------------------------\n\nTITLE: Badge with Icons Example\nDESCRIPTION: Example showing badge usage with icons from Heroicons and Tabler icons.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/badge.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/badge/ExampleVueBadgeIcon.vue\n```\n\n----------------------------------------\n\nTITLE: Dialog Content Component\nDESCRIPTION: Vue component for rendering the main dialog content area.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/dialog.md#2025-04-16_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/dialog/DialogContent.vue\n```\n\n----------------------------------------\n\nTITLE: Dialog Description Component\nDESCRIPTION: Vue component for rendering the dialog description section.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/dialog.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/dialog/DialogDescription.vue\n```\n\n----------------------------------------\n\nTITLE: Configuring Separator Variant and Color in Vue\nDESCRIPTION: Shows how to set different variants (solid, dashed, dotted) and colors for the Separator component using the `separator` prop.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/separator.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"space-y-4\">\n    <USeparator separator=\"solid-gray\" label=\"Solid gray\" />\n    <USeparator separator=\"dashed-primary\" label=\"Dashed primary\" />\n    <USeparator separator=\"dotted-destructive\" label=\"Dotted destructive\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Checkbox Example 1\nDESCRIPTION: Checkbox implementation with customizable icons for different states.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/checkbox.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/checkbox/ExampleVueCheckboxCustomIcon1.vue\n```\n\n----------------------------------------\n\nTITLE: Badge Variants Example\nDESCRIPTION: Example showing different badge variants including soft, solid, outline and base.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/badge.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/badge/ExampleVueBadgeVariant.vue\n```\n\n----------------------------------------\n\nTITLE: Customizing Alert Slots in Vue - Example 3\nDESCRIPTION: Demonstrates how to use custom content and styling in various slots of the Alert component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/alert.md#2025-04-16_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UAlert closable>\n    <template #icon>\n      <UIcon\n        name=\"i-heroicons-exclamation-triangle\"\n        class=\"text-2xl text-warning-500\"\n      />\n    </template>\n    <template #title>\n      <span class=\"font-bold text-lg text-warning-700\">\n        Warning Alert\n      </span>\n    </template>\n    <template #description>\n      <p class=\"text-warning-600\">\n        This is a custom styled warning alert with rich content.\n      </p>\n      <UButton\n        size=\"xs\"\n        class=\"mt-2\"\n      >\n        Learn More\n      </UButton>\n    </template>\n  </UAlert>\n</template>\n```\n\n----------------------------------------\n\nTITLE: ScrollArea with Custom Size in Vue\nDESCRIPTION: Shows how to adjust the size of the ScrollArea component. This example demonstrates different size options for the scroll area.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/scroll-area.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"flex flex-wrap gap-4\">\n    <ScrollArea\n      v-for=\"size in ['xs', 'sm', 'md', 'lg']\"\n      :key=\"size\"\n      :size=\"size\"\n      class=\"h-[200px] w-[200px] rounded-md border border-gray-200 p-4\"\n    >\n      <div class=\"text-sm\">\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Quod quibusdam\n        nulla illum, adipisci omnis facilis et veritatis sunt quidem. Commodi\n        nam quas sapiente enim eaque consectetur totam repellat quisquam\n        reiciendis?\n      </div>\n    </ScrollArea>\n  </div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Input Color Examples\nDESCRIPTION: Examples demonstrating different color variants of the input component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/input.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/input/ExampleVueInputColor.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Next Page Button Vue Component\nDESCRIPTION: Vue component for the next page navigation button in pagination.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/pagination.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n// No code visible in the snippet labeled as PaginationNext.vue\n```\n\n----------------------------------------\n\nTITLE: Vue Tabs Color Variants Example\nDESCRIPTION: Demonstrates different color variants and styling options for tabs\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/tabs.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/tabs/ExampleVueTabsColor.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Previous Page Button Vue Component\nDESCRIPTION: Vue component for the previous page navigation button in pagination.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/pagination.md#2025-04-16_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n// No code visible in the snippet labeled as PaginationPrev.vue\n```\n\n----------------------------------------\n\nTITLE: Vue Switch Component with Loading State\nDESCRIPTION: Demonstrates how to set the switch component to a loading state using the loading prop.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/switch.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"flex flex-wrap gap-4\">\n    <USwitch v-model=\"checked\" loading />\n    <USwitch v-model=\"checked\" loading size=\"lg\" />\n    <USwitch v-model=\"checked\" loading icon=\"i-ph-moon-stars-duotone\" />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst checked = ref(true)\n</script>\n```\n\n----------------------------------------\n\nTITLE: ScrollArea with Custom Orientation in Vue\nDESCRIPTION: Shows how to use the ScrollArea component with a custom orientation. This example demonstrates setting the orientation to horizontal.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/scroll-area.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ScrollArea\n    orientation=\"horizontal\"\n    class=\"h-[100px] w-[350px] rounded-md border border-gray-200\"\n  >\n    <div class=\"flex h-full items-center gap-4 px-1\">\n      <div\n        v-for=\"i in 50\"\n        :key=\"i\"\n        class=\"flex h-16 w-16 shrink-0 items-center justify-center rounded-md bg-gray-100\"\n      >\n        {{ i }}\n      </div>\n    </div>\n  </ScrollArea>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Card Footer Component in Vue\nDESCRIPTION: Component for rendering the card footer section with actions or additional information.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/card.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/elements/card/CardFooter.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination List Item Vue Component\nDESCRIPTION: Vue component for individual pagination page numbers, handling selection state and interactions.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/pagination.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n// No code visible in the snippet labeled as PaginationListItem.vue\n```\n\n----------------------------------------\n\nTITLE: Using Tooltip Slots in Vue\nDESCRIPTION: Demonstrates how to use the default and content slots of the tooltip component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/tooltip.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UTooltip>\n    <UButton>Hover me</UButton>\n\n    <template #content>\n      <div class=\"px-2 py-1\">\n        <p class=\"font-bold\">Custom tooltip content</p>\n        <p class=\"text-xs\">You can put anything here</p>\n      </div>\n    </template>\n  </UTooltip>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Reversible Checkbox Layout\nDESCRIPTION: Implementation of checkbox with reversible label position support.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/checkbox.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/checkbox/ExampleVueCheckboxReverse.vue\n```\n\n----------------------------------------\n\nTITLE: Custom Styled Accordion Example 3\nDESCRIPTION: A third custom styling example for the accordion, demonstrating further customization options and creative designs.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/accordion.md#2025-04-16_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/accordion/ExampleVueAccordionCustom3.vue\n```\n\n----------------------------------------\n\nTITLE: ScrollArea with Custom Rounded Corners in Vue\nDESCRIPTION: Demonstrates how to customize the rounded corners of the ScrollArea component. This example shows different rounding options for the scroll area.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/scroll-area.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"flex flex-wrap gap-4\">\n    <ScrollArea\n      v-for=\"rounded in ['none', 'sm', 'md', 'lg', 'full']\"\n      :key=\"rounded\"\n      :rounded=\"rounded\"\n      class=\"h-[200px] w-[200px] border border-gray-200 p-4\"\n    >\n      <div class=\"text-sm\">\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Quod quibusdam\n        nulla illum, adipisci omnis facilis et veritatis sunt quidem. Commodi\n        nam quas sapiente enim eaque consectetur totam repellat quisquam\n        reiciendis?\n      </div>\n    </ScrollArea>\n  </div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Card Header Component in Vue\nDESCRIPTION: Component for rendering the card header section containing title and description.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/card.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/elements/card/CardHeader.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Ellipsis Vue Component\nDESCRIPTION: Vue component for rendering ellipsis in pagination when there are too many pages to display.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/pagination.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n// No code visible in the snippet labeled as PaginationEllipsis.vue\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltip Color in Vue\nDESCRIPTION: Shows how to change the color of the tooltip using the 'tooltip' prop.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/tooltip.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UTooltip\n    v-for=\"color in colors\"\n    :key=\"color\"\n    :content=\"capitalize(color)\"\n    :tooltip=\"color\"\n  >\n    <UButton :color=\"color\">\n      {{ capitalize(color) }}\n    </UButton>\n  </UTooltip>\n</template>\n\n<script setup lang=\"ts\">\nconst colors = [\n  'white',\n  'gray',\n  'black',\n  'red',\n  'orange',\n  'amber',\n  'yellow',\n  'lime',\n  'green',\n  'emerald',\n  'teal',\n  'cyan',\n  'sky',\n  'blue',\n  'indigo',\n  'violet',\n  'purple',\n  'fuchsia',\n  'pink',\n  'rose',\n]\n\nconst capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Avatar Image Component Implementation\nDESCRIPTION: Implements the image component for the Avatar that handles loading the actual image. Supports alt text for accessibility.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/avatar.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { avatarImageProps } from '../../../types/avatar'\n\ndefineOptions({\n  name: 'UAvatarImage',\n  inheritAttrs: false\n})\n\nconst props = defineProps(avatarImageProps)\n</script>\n\n<template>\n  <img\n    v-if=\"props.src\"\n    :src=\"props.src\"\n    :alt=\"props.alt\"\n    class=\"h-full w-full object-cover\"\n    v-bind=\"$attrs\"\n  >\n  <slot v-else />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Customized ScrollArea in Vue\nDESCRIPTION: Shows advanced customization of the ScrollArea component using the 'una' prop. This example demonstrates how to apply custom utility classes to the scroll area.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/scroll-area.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ScrollArea\n    :una=\"{\n      root: 'h-[200px] w-[350px] rounded-md border border-gray-200 p-4',\n      viewport: 'pb-[20px]',\n      scrollbar: '!w-2',\n      thumb: '!bg-violet-700 hover:!bg-violet-900',\n    }\"\n  >\n    <div class=\"text-sm\">\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Quod quibusdam\n      nulla illum, adipisci omnis facilis et veritatis sunt quidem. Commodi nam\n      quas sapiente enim eaque consectetur totam repellat quisquam reiciendis?\n    </div>\n  </ScrollArea>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Separator in Vue\nDESCRIPTION: Demonstrates the basic usage of the Separator component with a label. The `label` prop is used to set the content of the separator.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/separator.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"space-y-4\">\n    <USeparator />\n    <USeparator label=\"OR\" />\n    <USeparator>\n      <span>Custom content</span>\n    </USeparator>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Card Content Component in Vue\nDESCRIPTION: Component for rendering the main content area of the card. Provides proper padding and layout structure.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/card.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/elements/card/CardContent.vue\n```\n\n----------------------------------------\n\nTITLE: Basic Label Component Example\nDESCRIPTION: Vue component example showing basic Label implementation\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/label.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/label/ExampleVueLabelBasic.vue\n```\n\n----------------------------------------\n\nTITLE: Input Variant Examples\nDESCRIPTION: Examples showing different input variants including outline, solid, and base styles.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/input.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/input/ExampleVueInputVariant.vue\n```\n\n----------------------------------------\n\nTITLE: FormGroup Types Definition in TypeScript\nDESCRIPTION: TypeScript interface definitions for FormGroup component props including status types, counter object structure, and component options.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/form-group.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FormGroupProps {\n  status?: Status\n  label?: string\n  required?: boolean\n  description?: string\n  hint?: string\n  message?: string\n  counter?: {\n    value: string\n    max: number\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Colored Button Implementation in Typical UI Framework vs Una UI\nDESCRIPTION: This snippet shows how to create a colored solid button in a typical UI framework compared to Una UI. Una UI combines the variant and color into a single attribute, utilizing all TailwindCSS colors with automatic dark mode support.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/1.getting-started/1.Introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<XButton variant=\"solid\" color=\"orange\">\n  Solid Button\n</XButton>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<NButton btn=\"solid-orange\">\n  Solid Button\n</NButton>\n```\n\n----------------------------------------\n\nTITLE: Setting Separator Orientation in Vue\nDESCRIPTION: Demonstrates how to change the orientation of the Separator component between horizontal and vertical using the `orientation` prop.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/separator.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"flex items-center gap-4\">\n    <USeparator orientation=\"vertical\" class=\"h-8\" />\n    <span>Vertical</span>\n    <USeparator orientation=\"vertical\" class=\"h-8\" />\n    <span>Separator</span>\n    <USeparator orientation=\"vertical\" class=\"h-8\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Icon Configuration Types Definition\nDESCRIPTION: TypeScript type definitions for the Icon component props and configuration options\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/icon.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/nuxt/src/runtime/types/icon.ts\n```\n\n----------------------------------------\n\nTITLE: Input Leading Slot Example\nDESCRIPTION: Example demonstrating usage of the leading slot in the input component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/input.md#2025-04-16_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/input/ExampleVueInputLeadingSlot.vue\n```\n\n----------------------------------------\n\nTITLE: Input Loading State Example\nDESCRIPTION: Example demonstrating the loading state of the input component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/input.md#2025-04-16_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/input/ExampleVueInputLoading.vue\n```\n\n----------------------------------------\n\nTITLE: Configuring Toast Provider in Vue\nDESCRIPTION: Shows how to configure the Toast provider using the _toastProvider prop, including options for duration, label, swipe direction, and swipe threshold.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toast.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/toast/ExampleVueToastProvider.vue\n```\n\n----------------------------------------\n\nTITLE: Rendering Una UI Documentation Landing Sections Component\nDESCRIPTION: This code snippet renders a custom Vue component called 'docs-landing-sections', which likely displays the main content sections of the documentation landing page.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/index.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n:docs-landing-sections\n```\n\n----------------------------------------\n\nTITLE: Radio Group Types Definition\nDESCRIPTION: TypeScript interface and type definitions for the radio group component\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/radio-group.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/nuxt/src/runtime/types/radio-group.ts\n```\n\n----------------------------------------\n\nTITLE: Vue Popover Type Definitions\nDESCRIPTION: TypeScript type definitions for the popover component props and configurations.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/popover.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/nuxt/src/runtime/types/popover.ts\n```\n\n----------------------------------------\n\nTITLE: Color Customization Example\nDESCRIPTION: Example showing how to customize the slider's color appearance\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/slider.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/slider/ExampleVueSliderColor.vue\n```\n\n----------------------------------------\n\nTITLE: Input Trailing Slot Example\nDESCRIPTION: Example showing usage of the trailing slot in the input component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/input.md#2025-04-16_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/input/ExampleVueInputTrailingSlot.vue\n```\n\n----------------------------------------\n\nTITLE: Closable Badge Example\nDESCRIPTION: Example demonstrating closable badge functionality with close event handling.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/badge.md#2025-04-16_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/badge/ExampleVueBadgeClosable.vue\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry List in Markdown\nDESCRIPTION: A structured list of commit messages describing performance improvements and optimizations made to the Una UI component library, including commit hashes and issue references.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Performance Improvements\n\n* **avatar:** optimized the usage of preset ([7cc4eed](https://github.com/una-ui/una-ui/commit/7cc4eede3c15170b5de609f16ee4ca90cbb0cb55))\n* **NAccordion:** optimize classes value ([2ebff78](https://github.com/una-ui/una-ui/commit/2ebff78f64c97cd386f5778ea179d82e57147574))\n* **NAlert:** optimize shortcuts ([c838e32](https://github.com/una-ui/una-ui/commit/c838e32f4756aef5e9609f7889ed1b6c09577fc3))\n* **NBadge:** optimize in defining shortcuts ([23c208f](https://github.com/una-ui/una-ui/commit/23c208f359a37cb0024a5a0436d56ff66a21e05b))\n* **NButton:** optimize preset and component ([819b70b](https://github.com/una-ui/una-ui/commit/819b70b64e0846dbac4a1b3c0558d299afff9682))\n* **NInput:** optimize preset and component ([7222e7c](https://github.com/una-ui/una-ui/commit/7222e7cc76d553b909935ab885b53c209ca3e636))\n* optimize imports in props ([555271e](https://github.com/una-ui/una-ui/commit/555271e8d074698ee3cf6205a73880294b8e26ec))\n* remove playground ([981abeb](https://github.com/una-ui/una-ui/commit/981abeb6e1dda4b20411582d3fdee9370dea1162))\n* remove undefined options to classes [#24](https://github.com/una-ui/una-ui/issues/24) ([7d3d294](https://github.com/una-ui/una-ui/commit/7d3d294cc97f82dc83b307f4627901ca02674e9c))\n* safelist is complete remove, closes [#26](https://github.com/una-ui/una-ui/issues/26) ([09c6156](https://github.com/una-ui/una-ui/commit/09c615621a6a9e683f62e1b8f929e643adfebfc2))\n* set button reuse template inside the component ([da18848](https://github.com/una-ui/una-ui/commit/da18848250f14d78bac47feadd2dd6f6de1122df))\n```\n\n----------------------------------------\n\nTITLE: ScrollArea Props Definition in TypeScript\nDESCRIPTION: Defines the props for the ScrollArea component, including options for direction, scroll hide delay, type, orientation, color, size, and rounded corners.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/scroll-area.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ScrollAreaProps {\n  /**\n   * The reading direction of the combobox when applicable.\n   * If omitted, inherits globally from `ConfigProvider` or assumes LTR (left-to-right) reading mode.\n   */\n  dir?: 'ltr' | 'rtl'\n  /**\n   * Determines the length of time, in milliseconds, before the scrollbars are hidden\n   * @default 600\n   */\n  scrollHideDelay?: number\n  /**\n   * Describes the nature of scrollbar visibility, similar to how the scrollbar preferences in MacOS control visibility of native scrollbars.\n   * @default 'hover'\n   */\n  type?: 'scroll' | 'always' | 'auto' | 'hover'\n  /**\n   * The orientation of the scrollbar\n   * @default 'vertical'\n   */\n  orientation?: 'vertical' | 'horizontal'\n  /**\n   * The color of the scroll area.\n   * @default 'gray'\n   */\n  scrollArea?: string\n  /**\n   * The size of the scroll area.\n   * @default 'md'\n   */\n  size?: string\n  /**\n   * The roundedness of the scroll area.\n   * @default 'full'\n   */\n  rounded?: string\n}\n\n```\n\n----------------------------------------\n\nTITLE: Avatar Group Type Definitions\nDESCRIPTION: TypeScript interface definitions for Avatar Group component props including size, max display count, and overflow label options\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/avatar-group.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AvatarGroupProps extends AvatarProps {\n  /**\n   * The maximum number of avatars to display\n   */\n  max?: number\n  /**\n   * Override the default overflow label\n   * @default +${N}\n   */\n  overflowLabel?: string\n  /**\n   * Layout the avatar group in reverse order\n   */\n  reverse?: boolean\n  /**\n   * Wrap the avatar group\n   */\n  wrap?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Tabs Content Component\nDESCRIPTION: Component for tab panel content\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/tabs.md#2025-04-16_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/tabs/TabsContent.vue\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltip Provider in Vue\nDESCRIPTION: Demonstrates how to configure the tooltip provider using the '_tooltipProvider' prop.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/tooltip.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UTooltip\n    content=\"This is a tooltip\"\n    :_tooltipProvider=\"{\n      delayDuration: 100,\n      skipDelayDuration: 100,\n    }\"\n  >\n    <UButton>Hover me</UButton>\n  </UTooltip>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Dialog Props Type Definition\nDESCRIPTION: TypeScript interface defining the available props for the Dialog component including title, description, modal settings, and state controls.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/dialog.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/nuxt/src/runtime/types/dialog.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing ToastRoot Component in Vue\nDESCRIPTION: The ToastRoot component implementation, serving as the base container for individual toasts.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toast.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/overlays/toast/ToastRoot.vue\n```\n\n----------------------------------------\n\nTITLE: Mounted Accordion Example in Vue\nDESCRIPTION: Shows how to use the 'mounted' prop to render accordion content on page load, even when closed.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/accordion.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/accordion/ExampleVueAccordionMounted.vue\n```\n\n----------------------------------------\n\nTITLE: Vue Tabs Root Component\nDESCRIPTION: Root component for tabs implementation\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/tabs.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/tabs/TabsRoot.vue\n```\n\n----------------------------------------\n\nTITLE: Vue Tabs Disabled State Example\nDESCRIPTION: Shows implementation of disabled state for tabs\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/tabs.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/tabs/ExampleVueTabsDisabled.vue\n```\n\n----------------------------------------\n\nTITLE: Tabs TypeScript Types Definition\nDESCRIPTION: TypeScript type definitions for tabs component props and configuration\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/tabs.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/nuxt/src/runtime/types/tabs.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing ToastAction Component in Vue\nDESCRIPTION: The ToastAction component implementation, providing action buttons for a toast.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toast.md#2025-04-16_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/overlays/toast/ToastAction.vue\n```\n\n----------------------------------------\n\nTITLE: Link Component Types Definition in TypeScript\nDESCRIPTION: Defines the TypeScript types for the Link component props. It includes various properties such as active class, exact matching, and external link handling.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/link.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LinkProps {\n  /**\n   * Applies the link style\n   */\n  styled?: boolean\n  /**\n   * The class to apply when the link is active\n   */\n  activeClass?: string\n  /**\n   * The class to apply when the link is inactive\n   */\n  inactiveClass?: string\n  /**\n   * Whether the link should have an exact active match\n   */\n  exact?: boolean\n  /**\n   * Apply active class when the current route matches the link destination exactly (ignoring trailing slashes).\n   */\n  exactQuery?: boolean\n  /**\n   * Apply active class when the current route hash matches the link destination hash exactly.\n   */\n  exactHash?: boolean\n  /**\n   * Whether the link is external\n   */\n  external?: boolean\n  /**\n   * Whether to add `rel=\"noopener noreferrer\"` to external links\n   */\n  noRel?: boolean\n  /**\n   * The target attribute for the link\n   */\n  target?: string\n  /**\n   * Whether to preserve the page's scroll position when navigating\n   */\n  preserveScroll?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Styled Accordion Example 2\nDESCRIPTION: Another example of custom accordion styling, showcasing different design possibilities using Una UI classes.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/accordion.md#2025-04-16_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/accordion/ExampleVueAccordionCustom2.vue\n```\n\n----------------------------------------\n\nTITLE: Colored Accordion Labels in Vue\nDESCRIPTION: Shows how to customize the color of accordion labels using the 'btn' prop inherited from the Button component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/accordion.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/accordion/ExampleVueAccordionColor.vue\n```\n\n----------------------------------------\n\nTITLE: Toggle Component Type Definitions - TypeScript\nDESCRIPTION: TypeScript type definitions for the toggle component props and configuration options.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toggle.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/types/toggle.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing ToastClose Component in Vue\nDESCRIPTION: The ToastClose component implementation, rendering the close button for a toast.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toast.md#2025-04-16_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/overlays/toast/ToastClose.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination First Page Button Vue Component\nDESCRIPTION: Vue component for the first page navigation button in pagination.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/pagination.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n// No code visible in the snippet labeled as PaginationFirst.vue\n```\n\n----------------------------------------\n\nTITLE: Avatar Shortcuts Implementation in TypeScript\nDESCRIPTION: Defines the avatar component shortcuts with different variants including soft, solid, outline, and base. Includes styling for size, color, spacing, and text properties.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/avatar.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  'avatar-base': 'relative flex shrink-0 select-none items-center justify-center overflow-hidden',\n  'avatar-fallback': 'absolute inset-0 flex items-center justify-center bg-current',\n\n  // Variants\n  'avatar-solid': 'bg-solid text-on-solid ring-1 ring-inset ring-on-solid/10',\n  'avatar-outline': 'bg-transparent ring-1 ring-inset text-on',\n  'avatar-soft': 'bg-soft text-on-soft',\n\n  avatar: 'avatar-base avatar-soft rounded-full'\n}\n```\n\n----------------------------------------\n\nTITLE: Accordion with Custom Slots Example 2\nDESCRIPTION: Demonstrates how to customize specific accordion items using index-based slot customization for more granular control.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/accordion.md#2025-04-16_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/accordion/ExampleVueAccordionSlot2.vue\n```\n\n----------------------------------------\n\nTITLE: Card Types Definition\nDESCRIPTION: TypeScript type definitions for the card component props and options.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/card.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/types/card.ts\n```\n\n----------------------------------------\n\nTITLE: Defining Sheet Component Props in TypeScript\nDESCRIPTION: This snippet defines the props for the Sheet component, including title, description, showClose, defaultOpen, modal, open, and overlay. It also includes types for customization sub-components and una preset props.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/sheet.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SheetProps extends DialogProps {\n  /**\n   * The title of the sheet.\n   */\n  title?: string\n  /**\n   * The description of the sheet.\n   */\n  description?: string\n  /**\n   * Show the close button.\n   * @default true\n   */\n  showClose?: boolean\n  /**\n   * The open state of the sheet when it is initially rendered.\n   * Use when you do not need to control its open state.\n   * @default false\n   */\n  defaultOpen?: boolean\n  /**\n   * The modality of the sheet.\n   * When set to true, interaction with outside elements will be disabled and only sheet content will be visible to screen readers.\n   * @default true\n   */\n  modal?: boolean\n  /**\n   * The controlled open state of the sheet.\n   * Must be used in conjunction with `onOpenChange`.\n   */\n  open?: boolean\n  /**\n   * Show the overlay.\n   * @default true\n   */\n  overlay?: boolean\n\n  /**\n   * The side from which the sheet will appear, the predefined presets are `top`, `right`, `bottom`, `left`,\n   * You can also pass a custom value to use a custom variant.\n   * @default right\n   */\n  sheet?: string\n\n  /**\n   * If true, the sheet will not close on overlay click or escape key press.\n   */\n  preventClose?: boolean\n\n  /**\n   * The trigger button props.\n   */\n  _sheetTrigger?: object\n  /**\n   * The content props.\n   */\n  _sheetContent?: object\n  /**\n   * The header props.\n   */\n  _sheetHeader?: object\n  /**\n   * The footer props.\n   */\n  _sheetFooter?: object\n  /**\n   * The title props.\n   */\n  _sheetTitle?: object\n  /**\n   * The description props.\n   */\n  _sheetDescription?: object\n  /**\n   * The close button props.\n   */\n  _sheetClose?: object\n  /**\n   * The overlay props.\n   */\n  _sheetOverlay?: object\n  /**\n   * The portal props.\n   */\n  _sheetPortal?: object\n  /**\n   * The una preset props.\n   */\n  una?: object\n}\n```\n\n----------------------------------------\n\nTITLE: Form Group Integration Example\nDESCRIPTION: Example showing how to integrate the slider within a form group with labels\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/slider.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/slider/ExampleVueSliderLabel.vue\n```\n\n----------------------------------------\n\nTITLE: Color Variant Toggle Implementation - Vue\nDESCRIPTION: Toggle component implementation demonstrating color and variant customization options.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toggle.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/toggle/ExampleVueToggleColor.vue\n```\n\n----------------------------------------\n\nTITLE: Skeleton Shape Variations Example in Vue\nDESCRIPTION: Shows how to customize the shape of the Skeleton component using the rounded prop.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/skeleton.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/skeleton/ExampleVueSkeletonShape.vue\n```\n\n----------------------------------------\n\nTITLE: Defining Pagination TypeScript Types\nDESCRIPTION: TypeScript type definitions for pagination component props, ensuring type safety when using the pagination component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/pagination.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// No code visible in the snippet labeled as types/pagination.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a Sidebar Structure Using Slots in Vue\nDESCRIPTION: Illustrates how to use slots to define the structure of a sidebar, providing more flexibility in content placement.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/sidebar.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Sidebar>\n    <template #header>\n      <!-- Header content -->\n    </template>\n    <template #default>\n      <!-- Main content -->\n    </template>\n    <template #footer>\n      <!-- Footer content -->\n    </template>\n  </Sidebar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic NuxtLink Component Example in Vue\nDESCRIPTION: Demonstrates the basic usage of the custom NuxtLink component in a Vue template. It shows various link types including internal, external, and mail links with different styles.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/link.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"space-y-4\">\n    <ULink to=\"/\">Home</ULink>\n    <ULink to=\"/about\">About</ULink>\n    <ULink to=\"https://nuxt.com\" target=\"_blank\">Nuxt</ULink>\n    <ULink to=\"mailto:hi@example.com\">Email</ULink>\n    <ULink to=\"/\" class=\"u-link-primary\">Primary</ULink>\n    <ULink to=\"/\" class=\"u-link-secondary\">Secondary</ULink>\n    <ULink to=\"/\" class=\"u-link-info\">Info</ULink>\n    <ULink to=\"/\" class=\"u-link-success\">Success</ULink>\n    <ULink to=\"/\" class=\"u-link-warning\">Warning</ULink>\n    <ULink to=\"/\" class=\"u-link-danger\">Danger</ULink>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accordion Shortcuts Definition in TypeScript\nDESCRIPTION: Defines the shortcuts used for the Accordion component, specifying default styles and configurations.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/accordion.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@@@ ../packages/preset/src/_shortcuts/accordion.ts [shortcuts/accordion.ts]\n```\n\n----------------------------------------\n\nTITLE: Customizing Alert Slots in Vue - Example 1\nDESCRIPTION: Demonstrates how to use custom content in the default slot of the Alert component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/alert.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UAlert>\n    <p>This is a custom alert content.</p>\n    <p>You can add any HTML content here.</p>\n  </UAlert>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Toast Shortcuts in TypeScript\nDESCRIPTION: Contains the TypeScript code for defining Toast shortcuts, including various styling and layout options.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toast.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@@@ ../packages/preset/src/_shortcuts/toast.ts [shortcuts/toast.ts]\n```\n\n----------------------------------------\n\nTITLE: Defining useSidebar Composable in TypeScript\nDESCRIPTION: Shows the implementation of the useSidebar composable, which provides reactive access to the sidebar's state.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/sidebar.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { computed, inject, ref } from 'vue'\nimport type { Ref } from 'vue'\n\nexport interface UseSidebarReturn {\n  isMobile: Ref<boolean>\n  state: Ref<'open' | 'closed' | 'collapsed'>\n  openMobile: Ref<boolean>\n  setOpenMobile: (value: boolean) => void\n}\n\nexport function useSidebar(): UseSidebarReturn {\n  const isMobile = inject('isMobile', ref(false))\n  const state = inject('sidebarState', ref('open'))\n  const openMobile = inject('openMobile', ref(false))\n  const setOpenMobile = inject('setOpenMobile', (value: boolean) => {})\n\n  return {\n    isMobile: computed(() => isMobile.value),\n    state: computed(() => state.value as 'open' | 'closed' | 'collapsed'),\n    openMobile: computed(() => openMobile.value),\n    setOpenMobile,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Shortcuts in TypeScript\nDESCRIPTION: TypeScript code defining shortcuts for pagination components, which helps with styling and configuration of pagination elements.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/pagination.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// No code visible in the snippet labeled as shortcuts/pagination.ts\n```\n\n----------------------------------------\n\nTITLE: Vue Popover Shortcuts Configuration\nDESCRIPTION: TypeScript configuration file defining shortcut classes for the popover component styling.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/popover.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/preset/src/_shortcuts/popover.ts\n```\n\n----------------------------------------\n\nTITLE: Defining Alert Props Interface in TypeScript\nDESCRIPTION: Defines the interface for Alert component props using TypeScript.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/alert.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AlertProps {\n  /**\n   * The style of the alert.\n   * @default 'outline'\n   */\n  alert?: 'solid' | 'outline' | 'soft' | `${AlertVariant}-${AlertColor}`\n  /**\n   * The size of the alert.\n   * @default 'md'\n   */\n  size?: string\n  /**\n   * The title of the alert.\n   */\n  title?: string\n  /**\n   * The description of the alert.\n   */\n  description?: string\n  /**\n   * The icon of the alert.\n   */\n  icon?: string | 'info' | 'success' | 'warning' | 'error'\n  /**\n   * Whether the alert is closable.\n   * @default false\n   */\n  closable?: boolean\n  /**\n   * Whether the alert has a shadow.\n   * @default false\n   */\n  shadow?: boolean\n  /**\n   * The width of the alert.\n   * @default 'full'\n   */\n  width?: 'full' | 'auto'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Breadcrumb Types in TypeScript\nDESCRIPTION: This code snippet defines the types for the Breadcrumb component, including its props like items, separator, ellipsis, and various style-related properties.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/breadcrumb.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BreadcrumbProps extends ButtonGroupProps {\n  /**\n   * The items to display in the breadcrumb.\n   */\n  items?: BreadcrumbItem[]\n  /**\n   * The separator to use between breadcrumb items.\n   * @default i-radix-icons-chevron-right\n   */\n  separator?: string\n  /**\n   * The ellipsis to use when there are too many items.\n   * @default i-radix-icons-dots-horizontal\n   */\n  ellipsis?: string\n  /**\n   * The active breadcrumb variant and color.\n   * @default text-primary\n   */\n  breadcrumbActive?: VariantColorProps\n  /**\n   * The inactive breadcrumb variant and color.\n   * @default text-muted\n   */\n  breadcrumbInactive?: VariantColorProps\n  /**\n   * Custom props for the breadcrumb link.\n   */\n  _breadcrumbLink?: ButtonProps\n  /**\n   * Custom props for the breadcrumb separator.\n   */\n  _breadcrumbSeparator?: ButtonProps\n}\n\nexport interface BreadcrumbItem extends ButtonProps {\n  children?: BreadcrumbItem[]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Vue Component\nDESCRIPTION: Main Vue component for pagination that handles page navigation and rendering of pagination elements.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/pagination.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n// No code visible in the snippet labeled as Pagination.vue\n```\n\n----------------------------------------\n\nTITLE: Basic Input Usage Example\nDESCRIPTION: Example demonstrating basic usage of the input component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/input.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/input/ExampleVueInputUsage.vue\n```\n\n----------------------------------------\n\nTITLE: Radio Group Shortcuts TypeScript Definition\nDESCRIPTION: TypeScript definition file defining shortcuts for radio group styling and behavior\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/radio-group.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/preset/src/_shortcuts/radio-group.ts\n```\n\n----------------------------------------\n\nTITLE: Label Component Type Definitions\nDESCRIPTION: TypeScript type definitions for the Label component props and configuration\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/label.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/nuxt/src/runtime/types/label.ts\n```\n\n----------------------------------------\n\nTITLE: Collapsible TypeScript Type Definitions\nDESCRIPTION: Defines TypeScript interfaces for the Collapsible component's props, including open state control, disabled state, and default open settings. These type definitions ensure type safety when using the component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/collapsible.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CollapsibleProps {\n  /**\n   * The open state of the collapsible when it is initially rendered.\n   * Use when you do not need to control its open state.\n   */\n  defaultOpen?: boolean\n  /**\n   * When true, prevents the user from interacting with the collapsible.\n   */\n  disabled?: boolean\n  /**\n   * The controlled open state of the collapsible.\n   * Can be binded with `v-model`.\n   */\n  open?: boolean\n}\n\nexport interface CollapsibleEmits {\n  (e: 'update:open', value: boolean): void\n}\n```\n\n----------------------------------------\n\nTITLE: Toggle Component Shortcuts Configuration - TypeScript\nDESCRIPTION: TypeScript configuration file defining shortcuts and preset styles for the toggle component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toggle.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@@@ ../packages/preset/src/_shortcuts/toggle.ts\n```\n\n----------------------------------------\n\nTITLE: Input Component Shortcuts Configuration\nDESCRIPTION: Configuration file defining CSS shortcuts and styles for the input component variants.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/input.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@@@ ../packages/preset/src/_shortcuts/input.ts\n```\n\n----------------------------------------\n\nTITLE: Indicator Shortcuts Configuration\nDESCRIPTION: Preset shortcuts configuration for the Indicator component styling.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/indicator.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@@@ ../packages/preset/src/_shortcuts/indicator.ts\n```\n\n----------------------------------------\n\nTITLE: Defining Separator Props Types in TypeScript\nDESCRIPTION: TypeScript code defining the prop types for the Separator component, including orientation, position, and style options.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/separator.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PropType } from 'vue'\n\nexport interface SeparatorProps {\n  /**\n   * The orientation of the separator.\n   * @default 'horizontal'\n   */\n  orientation?: 'horizontal' | 'vertical'\n  /**\n   * The position of the separator content.\n   * @default 'center'\n   */\n  separatorPosition?: 'center' | 'left' | 'right' | 'top' | 'bottom'\n  /**\n   * The style of the separator.\n   * @default 'solid-gray'\n   */\n  separator?: `${'solid' | 'dashed' | 'dotted'}-${'gray' | 'primary' | 'secondary' | 'info' | 'warning' | 'success' | 'destructive'}`\n  /**\n   * The size of the separator.\n   */\n  size?: string\n  /**\n   * The label of the separator.\n   */\n  label?: string\n}\n\nexport const separatorProps = {\n  orientation: {\n    type: String as PropType<SeparatorProps['orientation']>,\n    default: 'horizontal',\n  },\n  separatorPosition: {\n    type: String as PropType<SeparatorProps['separatorPosition']>,\n    default: 'center',\n  },\n  separator: {\n    type: String as PropType<SeparatorProps['separator']>,\n    default: 'solid-gray',\n  },\n  size: {\n    type: String as PropType<SeparatorProps['size']>,\n    default: undefined,\n  },\n  label: {\n    type: String as PropType<SeparatorProps['label']>,\n    default: undefined,\n  },\n} as const\n```\n\n----------------------------------------\n\nTITLE: Badge Shortcuts Configuration\nDESCRIPTION: Preset shortcuts configuration for Badge component styling and variants.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/badge.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/preset/src/_shortcuts/badge.ts\n```\n\n----------------------------------------\n\nTITLE: Slotted Toggle Component - Vue\nDESCRIPTION: Example showing how to use slots within the toggle component for custom content.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toggle.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/toggle/ExampleVueToggleSlot.vue\n```\n\n----------------------------------------\n\nTITLE: Defining Kbd Component Types in TypeScript\nDESCRIPTION: Type definitions for the Kbd component props including variant, color, and size options.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/kbd.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface KbdProps {\n  /**\n   * The variant of the kbd\n   * @default solid\n   */\n  variant?: 'solid' | 'outline' | '~'\n  /**\n   * The size of the kbd\n   * @default md\n   */\n  size?: 'sm' | 'md' | 'lg' | string\n  /**\n   * The color of the kbd\n   * @default gray\n   */\n  color?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useSidebar Composable in Vue\nDESCRIPTION: Demonstrates the usage of the useSidebar composable to access and manipulate the sidebar's state in a Vue component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/sidebar.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst {\n  isMobile,\n  state,\n  openMobile,\n  setOpenMobile\n} = useSidebar()\n</script>\n\n<template>\n  <div>\n    <button @click=\"setOpenMobile(true)\">\n      Open Mobile\n    </button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Table Component Types\nDESCRIPTION: TypeScript type definitions for table component props and configurations\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/table.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TableProps {\n  una?: Record<string, any>\n  loading?: boolean\n  data: any[]\n  columns: any[]\n  columnResizing?: boolean\n  columnPinning?: { left?: string[], right?: string[] }\n  expanded?: string[]\n  grouping?: string[]\n  manualGrouping?: boolean\n  caption?: string\n  captionSide?: 'top' | 'bottom'\n}\n```\n\n----------------------------------------\n\nTITLE: Card Shortcuts Configuration\nDESCRIPTION: Configuration file defining the card component shortcuts and styling presets.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/card.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@@@ ../packages/preset/src/_shortcuts/card.ts\n```\n\n----------------------------------------\n\nTITLE: Avatar Fallback Component Implementation\nDESCRIPTION: Implements the fallback component for the Avatar that displays when the image fails to load. Supports showing initials or icons based on props.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/avatar.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport { avatarFallbackProps } from '../../../types/avatar'\n\ndefineOptions({\n  name: 'UAvatarFallback',\n  inheritAttrs: false\n})\n\nconst props = defineProps(avatarFallbackProps)\n\nconst getInitials = (name = '') => {\n  return name\n    .split(' ')\n    .map(part => part.charAt(0))\n    .join('')\n    .toUpperCase()\n}\n\nconst fallbackValue = computed(() => {\n  if (props.label)\n    return props.label\n\n  if (props.alt)\n    return getInitials(props.alt)\n\n  return ''\n})\n</script>\n\n<template>\n  <div\n    class=\"avatar-fallback\"\n    v-bind=\"$attrs\"\n  >\n    <slot>\n      <UIcon\n        v-if=\"props.icon\"\n        :name=\"fallbackValue\"\n      />\n      <span v-else>{{ fallbackValue }}</span>\n    </slot>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic ScrollArea Usage in Vue\nDESCRIPTION: Demonstrates the basic usage of the ScrollArea component in Vue. This example shows how to implement a simple scroll area with default settings.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/scroll-area.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ScrollArea class=\"h-[200px] w-[350px] rounded-md border border-gray-200 p-4\">\n    <div class=\"text-sm\">\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Quod quibusdam\n      nulla illum, adipisci omnis facilis et veritatis sunt quidem. Commodi\n      nam quas sapiente enim eaque consectetur totam repellat quisquam\n      reiciendis?\n    </div>\n  </ScrollArea>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Tabs Shortcuts Configuration\nDESCRIPTION: Defines preset shortcuts for tabs styling\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/tabs.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/preset/src/_shortcuts/tabs.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Shortcuts in TypeScript\nDESCRIPTION: Defines table component shortcuts and utility classes\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/table.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const table = {\n  root: 'relative w-full table-fixed border-collapse border-0',\n  caption: 'mb-2',\n  'caption-top': 'caption-top',\n  'caption-bottom': 'caption-bottom',\n  header: 'bg-muted/40',\n  head: 'text-start',\n  body: 'divide-y',\n  footer: 'bg-muted/40',\n  cell: 'whitespace-nowrap overflow-hidden text-ellipsis p-2',\n  row: 'relative',\n  'row-selected': 'bg-muted/40',\n  'row-expanded': 'bg-muted/40',\n  loading: 'relative min-h-[100px]',\n  empty: 'relative min-h-[100px]'\n}\n```\n\n----------------------------------------\n\nTITLE: Dialog Shortcuts Configuration\nDESCRIPTION: Preset shortcuts configuration for dialog styling and behavior.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/dialog.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/preset/src/_shortcuts/dialog.ts\n```\n\n----------------------------------------\n\nTITLE: Avatar Group Shortcuts Definition\nDESCRIPTION: Defines the default styling and layout shortcuts for the Avatar Group component\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/avatar-group.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const avatarGroup = {\n  'avatar-group': 'flex items-center -space-x-4 isolate',\n  'avatar-group-reverse': 'space-x-reverse',\n  'avatar-group-wrap': 'flex-wrap space-x-0 gap-2'\n}\n```\n\n----------------------------------------\n\nTITLE: ScrollArea with Custom Color in Vue\nDESCRIPTION: Demonstrates how to customize the color of the ScrollArea component. This example shows different color options for the scroll area.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/scroll-area.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"flex flex-wrap gap-4\">\n    <ScrollArea\n      v-for=\"color in ['gray', 'red', 'green', 'blue']\"\n      :key=\"color\"\n      :scrollArea=\"color\"\n      class=\"h-[200px] w-[200px] rounded-md border border-gray-200 p-4\"\n    >\n      <div class=\"text-sm\">\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Quod quibusdam\n        nulla illum, adipisci omnis facilis et veritatis sunt quidem. Commodi\n        nam quas sapiente enim eaque consectetur totam repellat quisquam\n        reiciendis?\n      </div>\n    </ScrollArea>\n  </div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Checkbox Shortcuts Configuration\nDESCRIPTION: TypeScript configuration file defining checkbox shortcuts and presets.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/checkbox.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/preset/src/_shortcuts/checkbox.ts\n```\n\n----------------------------------------\n\nTITLE: FormGroup Shortcuts/Presets Configuration\nDESCRIPTION: Configuration file defining the default styling and layout shortcuts for the FormGroup component using Tailwind CSS classes.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/form-group.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  'form-group': {\n    base: 'flex flex-col gap-1.5',\n    label: 'text-sm font-medium text-gray-700 dark:text-gray-200',\n    description: 'text-sm text-gray-500 dark:text-gray-400',\n    hint: 'text-sm text-gray-500 dark:text-gray-400',\n    message: 'text-sm text-gray-500 dark:text-gray-400',\n    counter: 'text-sm text-gray-500 dark:text-gray-400'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Slider Component Shortcuts Configuration\nDESCRIPTION: TypeScript configuration file defining the default shortcuts and styling presets for the slider component\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/slider.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/preset/src/_shortcuts/slider.ts\n```\n\n----------------------------------------\n\nTITLE: Badge Default Slot Example\nDESCRIPTION: Example showing usage of default slot for badge content.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/badge.md#2025-04-16_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/badge/ExampleVueBadgeDefaultSlot.vue\n```\n\n----------------------------------------\n\nTITLE: Vue Popover Content Example\nDESCRIPTION: Example showing advanced content configuration of the popover component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/popover.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/popover/ExampleVuePopoverContent.vue\n```\n\n----------------------------------------\n\nTITLE: Label Component Shortcuts Definition\nDESCRIPTION: TypeScript file defining shortcuts/preset styles for the Label component\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/label.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/preset/src/_shortcuts/label.ts\n```\n\n----------------------------------------\n\nTITLE: Defining Aspect Ratio Shortcuts in TypeScript\nDESCRIPTION: This code snippet defines shortcuts for the aspect ratio component, including various preset ratios and styling options.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/aspect-ratio.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  'aspect-ratio': 'relative overflow-hidden',\n  'aspect-ratio-content': 'absolute left-0 top-0 h-full w-full',\n  'aspect-ratio-1/1': 'aspect-square',\n  'aspect-ratio-2/1': 'aspect-[2/1]',\n  'aspect-ratio-3/2': 'aspect-[3/2]',\n  'aspect-ratio-4/3': 'aspect-[4/3]',\n  'aspect-ratio-5/4': 'aspect-[5/4]',\n  'aspect-ratio-16/9': 'aspect-video',\n  'aspect-ratio-21/9': 'aspect-[21/9]',\n}\n```\n\n----------------------------------------\n\nTITLE: Input Size Examples\nDESCRIPTION: Examples showing different size variations of the input component.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/input.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/input/ExampleVueInputSize.vue\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Checkbox Example 2\nDESCRIPTION: Alternative implementation of checkbox with custom icons.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/checkbox.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/checkbox/ExampleVueCheckboxCustomIcon2.vue\n```\n\n----------------------------------------\n\nTITLE: Installing Una UI Nuxt Module\nDESCRIPTION: Commands to install @una-ui/nuxt module using different package managers.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/1.getting-started/2.installation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @una-ui/nuxt\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @una-ui/nuxt\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @una-ui/nuxt\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @una-ui/nuxt\n```\n\n----------------------------------------\n\nTITLE: Defining Kbd Component Shortcuts/Presets\nDESCRIPTION: Configuration for Kbd component styling presets including base styles and variants.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/kbd.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  kbd: {\n    base: 'inline-flex font-mono font-medium items-center justify-center rounded-md text-center border-b-2 active:border-b active:translate-y-[1px]',\n    size: {\n      sm: 'min-h-5 min-w-5 text-xs px-1',\n      md: 'min-h-6 min-w-6 text-sm px-1.5',\n      lg: 'min-h-7 min-w-7 text-base px-2',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Collapsible Shortcuts Definition in TypeScript\nDESCRIPTION: Defines UI shortcuts for the collapsible component, including styles for the root, trigger, and content elements. This establishes the default styling configuration for the collapsible component across the application.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/collapsible.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  shortcuts: {\n    // Collapsible elements\n    'collapsible': 'w-full',\n    'collapsible-trigger': 'flex w-full items-center justify-between p-4 text-left',\n    'collapsible-content': 'p-4 pt-0',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Card Description Component in Vue\nDESCRIPTION: Component for rendering the card description text below the title.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/card.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/elements/card/CardDescription.vue\n```\n\n----------------------------------------\n\nTITLE: Dialog Scroll Content Component\nDESCRIPTION: Vue component for handling scrollable dialog content.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/dialog.md#2025-04-16_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/dialog/DialogScrollContent.vue\n```\n\n----------------------------------------\n\nTITLE: Link Component Shortcuts Definition in TypeScript\nDESCRIPTION: Defines the shortcuts for the Link component, including various style classes for different link types and states.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/link.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  link: [\n    'transition',\n    'duration-200',\n    'ease-in-out',\n    'cursor-pointer',\n    'focus:outline-none',\n    'focus-visible:outline-none',\n    'focus-visible:ring-2',\n    'focus-visible:ring-primary-600 dark:focus-visible:ring-primary-400',\n    'focus-visible:ring-offset-2',\n    'focus-visible:ring-offset-white dark:focus-visible:ring-offset-gray-900',\n  ],\n  'link-base': [\n    'text-gray-500 dark:text-gray-400',\n    'hover:text-gray-700 dark:hover:text-gray-200',\n    'disabled:text-gray-300 dark:disabled:text-gray-600',\n  ],\n  'link-primary': [\n    'font-semibold',\n    'text-primary-500 dark:text-primary-400',\n    'hover:text-primary-600 dark:hover:text-primary-500',\n    'disabled:text-primary-300 dark:disabled:text-primary-700',\n  ],\n  'link-secondary': [\n    'font-semibold',\n    'text-secondary-500 dark:text-secondary-400',\n    'hover:text-secondary-600 dark:hover:text-secondary-500',\n    'disabled:text-secondary-300 dark:disabled:text-secondary-700',\n  ],\n  'link-info': [\n    'font-semibold',\n    'text-info-500 dark:text-info-400',\n    'hover:text-info-600 dark:hover:text-info-500',\n    'disabled:text-info-300 dark:disabled:text-info-700',\n  ],\n  'link-success': [\n    'font-semibold',\n    'text-success-500 dark:text-success-400',\n    'hover:text-success-600 dark:hover:text-success-500',\n    'disabled:text-success-300 dark:disabled:text-success-700',\n  ],\n  'link-warning': [\n    'font-semibold',\n    'text-warning-500 dark:text-warning-400',\n    'hover:text-warning-600 dark:hover:text-warning-500',\n    'disabled:text-warning-300 dark:disabled:text-warning-700',\n  ],\n  'link-danger': [\n    'font-semibold',\n    'text-danger-500 dark:text-danger-400',\n    'hover:text-danger-600 dark:hover:text-danger-500',\n    'disabled:text-danger-300 dark:disabled:text-danger-700',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Skeleton Component Shortcuts Definition\nDESCRIPTION: TypeScript definition file for Skeleton component shortcuts and preset configurations.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/skeleton.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/preset/src/_shortcuts/skeleton.ts\n```\n\n----------------------------------------\n\nTITLE: Comparing Button Implementation in Typical UI Framework vs Una UI\nDESCRIPTION: This snippet demonstrates how to create a solid button in a typical UI framework compared to Una UI. Una UI uses UNOCSS shortcuts and attributify features to make components more customizable while generating CSS only for what's used.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/1.getting-started/1.Introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<XButton variant=\"solid\">\n  Solid Button\n</XButton>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<NButton btn=\"solid\">\n  Solid Button\n</NButton>\n```\n\n----------------------------------------\n\nTITLE: Implementing ToastInfo Component in Vue\nDESCRIPTION: The ToastInfo component implementation, displaying additional information for a toast.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/toast.md#2025-04-16_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ../packages/nuxt/src/runtime/components/overlays/toast/ToastInfo.vue\n```\n\n----------------------------------------\n\nTITLE: Dialog Overlay Component\nDESCRIPTION: Vue component for rendering the dialog overlay/backdrop.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/dialog.md#2025-04-16_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n../packages/nuxt/src/runtime/components/elements/dialog/DialogOverlay.vue\n```\n\n----------------------------------------\n\nTITLE: Icon Shortcuts Configuration\nDESCRIPTION: Default icon shortcuts configuration used globally across components\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/icon.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/preset/src/_shortcuts/config/icons.ts\n```\n\nLANGUAGE: typescript\nCODE:\n```\n../packages/preset/src/_shortcuts/icon.ts\n```\n\n----------------------------------------\n\nTITLE: Defining Separator Shortcuts in TypeScript\nDESCRIPTION: TypeScript code defining the shortcuts for the Separator component, including various style configurations.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/separator.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  separator: {\n    base: 'flex shrink-0 items-center',\n    horizontal: 'w-full',\n    vertical: 'h-full',\n    content: {\n      base: 'text-xs text-gray-500 dark:text-gray-400',\n      horizontal: 'mx-3',\n      vertical: 'my-3',\n    },\n    line: {\n      base: 'flex-1 flex-shrink-0 border-t dark:border-gray-800',\n      horizontal: 'border-t',\n      vertical: 'h-full border-s',\n    },\n    solid: {\n      gray: 'border-gray-200 dark:border-gray-800',\n      primary: 'border-primary-200 dark:border-primary-800',\n      // ... other color variants\n    },\n    dashed: {\n      gray: 'border-dashed border-gray-200 dark:border-gray-800',\n      primary: 'border-dashed border-primary-200 dark:border-primary-800',\n      // ... other color variants\n    },\n    dotted: {\n      gray: 'border-dotted border-gray-200 dark:border-gray-800',\n      primary: 'border-dotted border-primary-200 dark:border-primary-800',\n      // ... other color variants\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTML Form with Una UI Presets\nDESCRIPTION: Example showing usage of Una UI presets in plain HTML for input, button, and form-field components.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/1.getting-started/2.installation.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<form class=\"flex flex-col gap-y-4\">\n  <div class=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n    <div form-group>\n      <label for=\"firstname\" form-group=\"label\">Firstname </label>\n      <input id=\"firstname\" input=\"~ outline\" placeholder=\"Firstname\" />\n    </div>\n\n    <div form-group>\n      <label for=\"lastname\" form-group=\"label\">Lastname </label>\n      <input id=\"lastname\" input=\"~ outline\" placeholder=\"Lastname\" />\n    </div>\n  </div>\n\n  <div class=\"flex flex-col flex-col-reverse gap-4 sm:flex-row sm:justify-end\">\n    <button type=\"button\" btn=\"~ solid-gray\">Cancel</button>\n    <button type=\"button\" btn=\"~ solid\">Submit</button>\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Avatar Group Default Slot Component\nDESCRIPTION: TypeScript implementation of the default slot functionality for the Avatar Group component\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/avatar-group.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Component } from 'vue'\n\nexport default {\n  name: 'AvatarGroupDefault',\n  inheritAttrs: false,\n} as Component\n```\n\n----------------------------------------\n\nTITLE: Adjusting Separator Label Position in Vue\nDESCRIPTION: Shows how to adjust the position of the label content in the Separator component using the `separator-position` prop.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/separator.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"space-y-4\">\n    <USeparator label=\"Center\" />\n    <USeparator label=\"Left\" separator-position=\"left\" />\n    <USeparator label=\"Right\" separator-position=\"right\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Shortcuts for Form Components\nDESCRIPTION: UnoCSS shortcuts configuration for form components, defining CSS classes for FormField, FormControl, FormLabel, FormDescription, FormMessage, and other form-related elements.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/form.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  'form-field': 'grid gap-2',\n  'form-item': 'grid gap-1',\n  'form-control': 'relative',\n  'form-label': 'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',\n  'form-description': 'text-sm text-muted-foreground',\n  'form-message': 'text-sm font-medium',\n  'form-message-warning': 'text-warning',\n  'form-message-success': 'text-success',\n  'form-message-error': 'text-destructive',\n  'form-message-info': 'text-info',\n  'form-required': 'ml-1 text-sm text-destructive',\n  'form-hint': 'text-xs text-muted-foreground',\n}\n```\n\n----------------------------------------\n\nTITLE: ScrollArea Shortcuts Definition in TypeScript\nDESCRIPTION: Defines the shortcuts for the ScrollArea component. This includes styles for the root, viewport, scrollbar, and thumb elements.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/scroll-area.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const scrollArea = {\n  root: 'relative overflow-hidden',\n  viewport: 'h-full w-full rounded-[inherit]',\n  scrollbar: {\n    base: 'flex touch-none select-none transition-colors',\n    size: {\n      '': 'p-0.5',\n      sm: 'p-px',\n      md: 'p-0.5',\n      lg: 'p-1',\n    },\n    state: {\n      hover: 'bg-{color}-100 dark:bg-{color}-800',\n      dragging: 'bg-{color}-200 dark:bg-{color}-700',\n    },\n    orientation: {\n      vertical: 'w-2.5 h-full',\n      horizontal: 'flex-col h-2.5 w-full',\n    },\n  },\n  thumb: {\n    base: 'relative flex-1 rounded-full bg-{color}-300 dark:bg-{color}-600',\n    orientation: {\n      vertical: 'w-full',\n      horizontal: 'h-full',\n    },\n  },\n  corner: 'bg-{color}-100 dark:bg-{color}-800',\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Shortcut Constants in TypeScript for Una UI\nDESCRIPTION: This code defines keyboard shortcut related constants for the Una UI project. It includes a 'KbdPrefix' type, a static object for predefined shortcuts, an array for dynamic shortcuts that use regular expressions, and combines them into a final export.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/packages/preset/src/_shortcuts/template.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype KbdPrefix = 'kbd'\n\nexport const staticKbd: Record<`${KbdPrefix}-${string}` | KbdPrefix, string> = {\n// base\n'kbd': '',\n\n// wrappers\n'kbd-wrapper': '',\n}\n\nexport const dynamicKbd: [RegExp, (params: RegExpExecArray) => string][] = [\n// dynamic preset\n]\n\nexport const kbd = [\n...dynamicKbd,\nstaticKbd,\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Last Page Button Vue Component\nDESCRIPTION: Vue component for the last page navigation button in pagination.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/pagination.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n// No code visible in the snippet labeled as PaginationLast.vue\n```\n\n----------------------------------------\n\nTITLE: Customizing Separator Size in Vue\nDESCRIPTION: Illustrates how to set custom sizes for the Separator component using the `size` prop and Tailwind CSS classes.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/separator.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"space-y-4\">\n    <USeparator size=\"xs\" label=\"Extra small\" />\n    <USeparator size=\"sm\" label=\"Small\" />\n    <USeparator size=\"md\" label=\"Medium\" />\n    <USeparator size=\"lg\" label=\"Large\" />\n    <USeparator size=\"xl\" label=\"Extra large\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Una UI in Nuxt Config File\nDESCRIPTION: Sets up Una UI module in nuxt.config.js with customization options including prefix, themeable flag, and global component registration settings.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/2.api/1.configuration/2.nuxt-config.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  modules: [\n    '@una-ui/nuxt',\n  ],\n\n  una: {\n    prefix: 'N',\n    themeable: true,\n    global: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Version References in Markdown\nDESCRIPTION: Version comparison links formatted in markdown style, used to show changes between different beta releases.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[0.1.1-beta.1](https://github.com/una-ui/una-ui/compare/v0.1.1-beta.0...v0.1.1-beta.1)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[0.1.0-beta.0](https://github.com/una-ui/una-ui/compare/v0.0.2-beta.3...v0.1.0-beta.0)\n```\n\n----------------------------------------\n\nTITLE: Displaying Work in Progress Alert in Markdown\nDESCRIPTION: Alert notification syntax using frontmatter and custom alert component to indicate a component is still under development.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/_file.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndescription: 'Work in progress - this component is not yet ready for use.'\n---\n\n::alert{type=\"warning\"}\nWork in progress - this component is not yet ready for use.\n::\n```\n\n----------------------------------------\n\nTITLE: Configuring Textarea Rows and Columns in Vue\nDESCRIPTION: Shows how to set specific rows and columns for a textarea using the 'rows' and 'cols' props. This example creates two textareas with different dimensions.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/textarea.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UFormGroup label=\"Message\">\n    <UTextarea\n      v-model=\"message\"\n      placeholder=\"Enter your message\"\n      :rows=\"3\"\n      :cols=\"20\"\n    />\n  </UFormGroup>\n\n  <UFormGroup label=\"Large Message\">\n    <UTextarea\n      v-model=\"largeMessage\"\n      placeholder=\"Enter your message\"\n      :rows=\"5\"\n      :cols=\"40\"\n    />\n  </UFormGroup>\n</template>\n\n<script setup lang=\"ts\">\nconst message = ref('')\nconst largeMessage = ref('')\n</script>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Aspect Ratio Component Props in TypeScript\nDESCRIPTION: This code defines the props for the Aspect Ratio component, including ratio, variant, color, and rounded properties.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/aspect-ratio.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PropType } from 'vue'\nimport type { UnaColorName } from '../colors'\n\nexport interface AspectRatioProps {\n  /**\n   * The aspect ratio of the component.\n   * @default 1\n   */\n  ratio?: number\n  /**\n   * The variant of the component.\n   * @default 'soft'\n   */\n  variant?: 'soft' | 'outline' | '~'\n  /**\n   * The color of the component.\n   * @default 'gray'\n   */\n  color?: UnaColorName\n  /**\n   * The border radius of the component.\n   * @default 'md'\n   */\n  rounded?: string\n}\n\nexport const aspectRatioProps = {\n  ratio: {\n    type: Number as PropType<AspectRatioProps['ratio']>,\n    default: 1,\n  },\n  variant: {\n    type: String as PropType<AspectRatioProps['variant']>,\n    default: 'soft',\n  },\n  color: {\n    type: String as PropType<AspectRatioProps['color']>,\n    default: 'gray',\n  },\n  rounded: {\n    type: String as PropType<AspectRatioProps['rounded']>,\n    default: 'md',\n  },\n} as const\n```\n\n----------------------------------------\n\nTITLE: Configuring Una UI Documentation Landing Page with YAML Front Matter\nDESCRIPTION: This snippet shows the YAML front matter configuration for the Una UI documentation landing page. It sets the navigation property to false, which likely disables the standard navigation for this page.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnavigation: false\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Release Status Table in Markdown\nDESCRIPTION: A markdown table showing the release status of different branches of the Una UI project, including version badges, status checks, and download statistics.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/packages/extractor-vue-script/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Branch      | Version                                             | Status                                                                    | Downloads                                                                |\n| ----------- | --------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------ |\n| Main (Edge) | [![npm-edge][npm-edge-src]][npm-edge-href]          | [![github-status][github-status-src-main]][github-status-href-main]       | [![npm-edge-downloads][npm-edge-downloads-src]][npm-edge-downloads-href] |\n| Release     | [![npm-version][npm-version-src]][npm-version-href] | [![github-status][github-status-src-release]][github-status-href-release] | [![npm-downloads][npm-downloads-src]][npm-downloads-href]                |\n```\n\n----------------------------------------\n\nTITLE: Multiple Accordion Items Example in Vue\nDESCRIPTION: Illustrates the use of the 'multiple' prop to allow multiple accordion items to be expanded simultaneously.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/accordion.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n@@@ ./components/content/examples/vue/accordion/ExampleVueAccordionMultiple.vue\n```\n\n----------------------------------------\n\nTITLE: Tooltip Component Props Definition in TypeScript\nDESCRIPTION: Defines the props interface for the tooltip component, including various configuration options.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/tooltip.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TooltipContentProps, TooltipProps as RadixTooltipProps, TooltipProviderProps } from 'radix-vue'\nimport type { ExtractPublicPropTypes } from 'vue'\n\nexport interface TooltipProps extends RadixTooltipProps {\n  /**\n   * @default 'md'\n   */\n  size?: 'xs' | 'sm' | 'md' | 'lg'\n  /**\n   * @default 'black'\n   */\n  tooltip?: 'white' | 'gray' | 'black' | 'primary' | 'secondary' | 'accent' | 'info' | 'success' | 'warning' | 'danger' | string\n  modelValue?: boolean\n  /**\n   * @default false\n   */\n  persistent?: boolean\n  content?: string\n  _tooltipProvider?: Partial<TooltipProviderProps>\n  _tooltipContent?: Partial<TooltipContentProps>\n}\n\nexport type TooltipEmits = {\n  'update:modelValue': [value: boolean]\n}\n\nexport type TooltipSlots = {\n  default: (props: { open: boolean }) => any\n  content: (props: { open: boolean }) => any\n}\n\nexport type TooltipPublicProps = ExtractPublicPropTypes<TooltipProps>\n```\n\n----------------------------------------\n\nTITLE: Rendering Una UI Documentation Hero Component\nDESCRIPTION: This code snippet renders a custom Vue component called 'docs-hero', which likely displays the hero section of the documentation landing page.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/index.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:docs-hero\n```\n\n----------------------------------------\n\nTITLE: Skeleton Color Customization Example in Vue\nDESCRIPTION: Demonstrates color customization of the Skeleton component using the skeleton prop.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/skeleton.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n./components/content/examples/vue/skeleton/ExampleVueSkeletonColor.vue\n```\n\n----------------------------------------\n\nTITLE: Edge Channel Package Configuration\nDESCRIPTION: JSON configuration for installing Una UI from the edge channel in package.json.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/1.getting-started/2.installation.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@una-ui/nuxt\": \"npm:@una-ui/nuxt-edge@latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Icon Collections with Package Managers\nDESCRIPTION: Commands for installing additional Iconify icon collections using different package managers (pnpm, yarn, npm)\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/icon.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @iconify-icons/[collection-name]\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @iconify-icons/[collection-name]\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @iconify-icons/[collection-name]\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version Update\nDESCRIPTION: A Git commit-style changelog entry documenting version changes, bug fixes, and new features for the Una UI framework.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* **AvatarGroup:** update props configuration and inheret size properly ([09a0942](https://github.com/una-ui/una-ui/commit/09a0942c0c8e417a976245fe10997d3ee98157ea))\n* **Checkbox:** add checkbox prop to root component ([7b9434f](https://github.com/una-ui/una-ui/commit/7b9434f0345fc7847a6ab6dcbd0f73530a1a580e))\n\n\n### Features\n\n* **RadioGroup:** introduce new component and presets ([#306](https://github.com/una-ui/una-ui/issues/306)) ([d04a63f](https://github.com/una-ui/una-ui/commit/d04a63f17a2b7e4e8301fd702bda4b0546b0c776))\n```\n\n----------------------------------------\n\nTITLE: Defining Badge Variables in Markdown\nDESCRIPTION: A section of markdown defining variables for various badges used in the README, including npm version, download statistics, and GitHub status checks for different branches.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/packages/extractor-vue-script/README.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[npm-version-src]: https://img.shields.io/npm/v/@una-ui/extractor-vue-script?style=flat&colorA=18181B&colorB=CA8A04\n[npm-version-href]: https://npmjs.com/package/@una-ui/extractor-vue-script\n[npm-edge-src]: https://img.shields.io/npm/v/@una-ui/extractor-vue-script-edge?style=flat&colorA=18181B&colorB=CA8A04\n[npm-edge-href]: https://npmjs.com/package/@una-ui/extractor-vue-script-edge\n[npm-downloads-src]: https://img.shields.io/npm/dm/@una-ui/extractor-vue-script?style=flat&colorA=18181B&colorB=CA8A04\n[npm-downloads-href]: https://npmjs.com/package/@una-ui/extractor-vue-script\n[npm-edge-downloads-src]: https://img.shields.io/npm/dm/@una-ui/extractor-vue-script-edge?style=flat&colorA=18181B&colorB=CA8A04\n[npm-edge-downloads-href]: https://npmjs.com/package/@una-ui/extractor-vue-script-edge\n[github-status-src-main]: https://img.shields.io/github/checks-status/una-ui/una-ui/main?style=flat&colorA=18181B&colorB=CA8A04\n[github-status-src-release]: https://img.shields.io/github/checks-status/una-ui/una-ui/release?style=flat&colorA=18181B&colorB=CA8A04\n[github-status-href-main]: https://github.com/una-ui/una-ui/actions/workflows/ci.yml\n[github-status-href-release]: https://github.com/una-ui/una-ui/actions/workflows/release.yml\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Alert in Markdown\nDESCRIPTION: This code snippet uses a custom alert component to display a warning message. The alert is of type 'warning' and informs users that the component is still a work in progress and not ready for use.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/docs/content/3.components/_datepicker.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::alert{type=\"warning\"}\nWork in progress - this component is not yet ready for use.\n::\n```\n\n----------------------------------------\n\nTITLE: Git Commit References in Markdown\nDESCRIPTION: Reference links to git commits and issue numbers formatted in markdown style, used to track changes and link to specific code updates.\nSOURCE: https://github.com/una-ui/una-ui/blob/main/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[319ae3e](https://github.com/una-ui/una-ui/commit/319ae3e3a439598c8b3c2d66b1c5f94c9793b918)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[#43](https://github.com/una-ui/una-ui/issues/43)\n```"
  }
]