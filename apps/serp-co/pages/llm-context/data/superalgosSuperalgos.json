[
  {
    "owner": "superalgos",
    "repo": "superalgos",
    "content": "TITLE: Initial Setup and Running Superalgos with Docker Compose\nDESCRIPTION: Commands to create necessary directories for data persistence, set appropriate permissions through environment variables, and run the Superalgos container in the background using docker-compose.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Docker/README.md#2025-04-15_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# some preliminary configuration to set up the persistent data directories\nmkdir -p My-Data-Storage My-Log-Files My-Workspaces\nexport UID=$(id -u)\nexport GID=$(id -g)\n\n# run the container in the background\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Converting Time Series to Supervised Learning Format in Python\nDESCRIPTION: This function transforms a time series dataset into a supervised learning problem by shifting data to create input-output pairs. It accepts parameters for controlling the number of lag observations (inputs) and forecast steps (outputs).\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# convert series to supervised learning\ndef series_to_supervised(data, n_in=1, n_out=1, dropnan=True):\n\tn_vars = 1 if type(data) is list else data.shape[1]\n\tdf = DataFrame(data)\n\tcols, names = list(), list()\n\t# input sequence (t-n, ... t-1)\n\tfor i in range(n_in, 0, -1):\n\t\tcols.append(df.shift(i))\n\t\tnames += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]\n\t# forecast sequence (t, t+1, ... t+n)\n\tfor i in range(0, n_out):\n\t\tcols.append(df.shift(-i))\n\t\tif i == 0:\n\t\t\tnames += [('var%d(t)' % (j+1)) for j in range(n_vars)]\n\t\telse:\n\t\t\tnames += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]\n\t# put it all together\n\tagg = concat(cols, axis=1)\n\tagg.columns = names\n\t# drop rows with NaN values\n\tif dropnan:\n\t\tagg.dropna(inplace=True)\n\treturn agg\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for LSTM Time Series Forecasting in Python\nDESCRIPTION: Imports necessary libraries for implementing a multivariate time series forecasting model using LSTM neural networks in Keras, including math, numpy, pandas, scikit-learn and visualization tools.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom math import sqrt\nfrom numpy import concatenate\nfrom matplotlib import pyplot\nfrom pandas import read_csv\nfrom pandas import DataFrame\nfrom pandas import concat\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import mean_squared_error\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\n```\n\n----------------------------------------\n\nTITLE: Defining a Trading Environment Class for Reinforcement Learning in Python\nDESCRIPTION: This code implements a complete gym-compatible trading environment for reinforcement learning. The environment processes financial data, manages trading actions (buy/sell/hold), calculates rewards based on net worth changes, and provides methods for visualization. It includes sophisticated observation space handling with historical data and various trading metrics.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass SimpleTradingEnv(gym.Env):\n    \n    metadata = {'render.modes': ['live', 'human', 'none']}\n    visualization = None\n\n    def __init__(self, config=None):\n        \n        self.df_scaled = config.get(\"df_scaled\").reset_index(drop=True)\n        self.df_normal = config.get(\"df_normal\").reset_index(drop=True)\n        self.window_size = OBSERVATION_WINDOW_SIZE\n        self.prices, self.features = self._process_data(self.df_scaled)\n        # The shape of the observation is (window_size * features + environment_features) the environment_features are: quote_asset, base_asset, net_worth. The entire observation is flattened in a 1D np array. \n        # NOT USED ANYMORE, KEPT FOR REFERENCE\n        # self.obs_shape = ((OBSERVATION_WINDOW_SIZE * self.features.shape[1] + 3),) \n\n        # The shape of the observation is number of candles to look back, and the number of features (candle_features) + 3 (quote_asset, base_asset, net_worth)\n        self.obs_shape = (OBSERVATION_WINDOW_SIZE, self.features.shape[1] + 3)\n\n        # Action space\n        #self.action_space = spaces.Box(low=np.array([0, 0]), high=np.array([3.0, 1.0]), dtype=np.float32)\n        self.action_space = spaces.MultiDiscrete([3, 100])\n        # Observation space\n        self.observation_space = spaces.Box(low=-1, high=1, shape=self.obs_shape, dtype=np.float32)\n\n        # Initialize the episode environment\n\n        self._start_candle = OBSERVATION_WINDOW_SIZE # We assume that the first observation is not the first row of the dataframe, in order to avoid the case where there are no calculated indicators.\n        self._end_candle = len(self.features) - 1\n        self._trading_fee = config.get(\"trading_fee\")\n\n        self._quote_asset = None\n        self._base_asset = None\n        self._done = None\n        self._current_candle = None\n        self._net_worth = None\n        self._previous_net_worth = None\n\n        # Array that will contain observation history needed for appending it to the observation space\n        # It will contain observations consisting of the net_worth, base_asset and quote_asset as list of floats\n        # Other features (OHLC + Indicators) will be appended to the current observation in the _get_observation method that takes the data directly from the available dataframe\n        self._obs_env_history = None\n\n        # Render and analysis data\n        self._total_reward_accumulated = None\n        self.trade_history = None\n        self._first_rendering = None\n        \n\n    def reset(self):\n        self._done = False\n        self._current_candle = self._start_candle\n        self._quote_asset = INITIAL_QUOTE_ASSET\n        self._base_asset = INITIAL_BASE_ASSET \n        self._net_worth = INITIAL_QUOTE_ASSET # at the begining our net worth is the initial quote asset\n        self._previous_net_worth = INITIAL_QUOTE_ASSET # at the begining our previous net worth is the initial quote asset\n        self._total_reward_accumulated = 0.\n        self._first_rendering = True\n        self.trade_history = []\n        self._obs_env_history = []\n        \n        self._initial_obs_data()\n\n        return self._get_observation()\n\n    def _take_action(self, action):\n        self._done = False\n        current_price = random.uniform(\n            self.df_normal.loc[self._current_candle, \"low\"], self.df_normal.loc[self._current_candle, \"high\"])\n\n\n        action_type = action[0]\n        amount = action[1] / 100\n        \n        if action_type == 0: # Buy\n            # Buy % assets\n            # Determine the maximum amount of quote asset that can be bought\n            available_amount_to_buy_with = self._quote_asset / current_price\n            # Buy only the amount that agent chose\n            assets_bought = available_amount_to_buy_with * amount\n            # Update the quote asset balance\n            self._quote_asset -= assets_bought * current_price\n            # Update the base asset\n            self._base_asset += assets_bought\n            # substract trading fee from base asset based on the amount bought\n            self._base_asset -= self._trading_fee * assets_bought\n\n            # Add to trade history the amount bought if greater than 0\n            if assets_bought > 0:\n                self.trade_history.append({'step': self._current_candle, 'type': 'Buy', 'amount': assets_bought, 'price': current_price, 'total' : assets_bought * current_price, 'percent_amount': action[1]})\n        \n\n        elif action_type == 1: # Sell\n            # Sell % assets\n            # Determine the amount of base asset that can be sold\n            amount_to_sell = self._base_asset * amount\n            received_quote_asset = amount_to_sell * current_price\n            # Update the quote asset\n            self._quote_asset += received_quote_asset\n            # Update the base asset\n            self._base_asset -= amount_to_sell\n            \n            # substract trading fee from quote asset based on the amount sold\n            self._quote_asset -= self._trading_fee * received_quote_asset\n\n            # Add to trade history the amount sold if greater than 0\n            if amount_to_sell > 0:\n                self.trade_history.append({'step': self._current_candle, 'type': 'Sell', 'amount': amount_to_sell, 'price': current_price, 'total' : received_quote_asset, 'percent_amount': action[1]})\n\n        else:\n            # Hold\n            self.trade_history.append({'step': self._current_candle, 'type': 'Hold', 'amount': '0', 'price': current_price, 'total' : 0, 'percent_amount': action[1]})\n\n\n        # Update the current net worth\n        self._net_worth = self._base_asset * current_price + self._quote_asset\n\n\n    def step(self, action):\n        \"\"\"\n        Returns the next observation, reward, done and info.\n        \"\"\"\n        \n        self._take_action(action)\n\n        # Calculate reward comparing the current net worth with the previous net worth\n        reward = self._net_worth - self._previous_net_worth\n\n        self._total_reward_accumulated += reward\n\n        # Update the previous net worth to be the current net worth after the reward has been applied\n        self._previous_net_worth = self._net_worth\n\n        obs = self._get_observation()\n        # Update the info and add it to history data\n        info = dict (\n            total_reward_accumulated = self._total_reward_accumulated,\n            net_worth = self._net_worth,\n            last_action_type = self.trade_history[-1]['type'] if len(self.trade_history) > 0 else None,\n            last_action_amount = self.trade_history[-1]['amount'] if len(self.trade_history) > 0 else None,\n            current_step = self._current_candle\n        )\n\n        self._current_candle += 1\n\n        # Update observation history\n        self._obs_env_history.append([self._net_worth, self._base_asset, self._quote_asset])\n\n        self._done = self._net_worth <= 0 or self._current_candle >= (len(\n            self.df_normal.loc[:, 'open'].values) - 30)# We assume that the last observation is not the last row of the dataframe, in order to avoid the case where there are no calculated indicators.\n\n        if self._done:\n            print('I have finished the episode')\n        \n        return obs, reward, self._done, info\n\n\n    def _get_observation(self):\n        \"\"\"\n        Returns the current observation.\n        \"\"\"\n        data_frame = self.features[(self._current_candle - self.window_size):self._current_candle]\n\n        obs_env_history = np.array(self._obs_env_history).astype(np.float32)\n\n        #TODO We definetely need to scale the observation history in a better way, this might influence training results\n        # Doing it ad-hoc might change the scale of the min and max, thus changing the results\n        obs_env_history = preprocessing.minmax_scale(obs_env_history, (-0.9,0.9)) \n\n        obs = np.hstack((data_frame, obs_env_history[(self._current_candle - self.window_size):self._current_candle]))\n\n        return obs\n\n\n    def render(self, mode='human', **kwargs):\n        \"\"\"\n        Renders a plot with trades made by the agent.\n        \"\"\"\n        \n        if mode == 'human':\n            print(f'Accumulated Reward: {self._total_reward_accumulated} ---- Current Net Worth: {self._net_worth}')\n            print(f'Current Quote asset: {self._quote_asset} ---- Current Base asset: {self._base_asset}')\n            print(f'Number of trades: {len(self.trade_history)}')\n        \n            if(len(self.trade_history) > 0):\n                print(f'Last Action: {self.trade_history[-1][\"type\"]} {self.trade_history[-1][\"amount\"]} assets ({self.trade_history[-1][\"percent_amount\"]} %) at price {self.trade_history[-1][\"price\"]}, total: {self.trade_history[-1][\"total\"]}')\n            print(f'--------------------------------------------------------------------------------------')\n        elif mode == 'live':\n            pass\n            # if self.visualization == None:\n            #     self.visualization = LiveTradingGraph(self.df_normal, kwargs.get('title', None))\n\n            # if self._current_candle > OBSERVATION_WINDOW_SIZE:\n            #     self.visualization.render(self._current_candle, self._net_worth, self.trade_history, window_size=OBSERVATION_WINDOW_SIZE)\n\n    def close(self):\n        if self.visualization != None:\n            self.visualization.close()\n            self.visualization = None\n         \n\n    def _process_data(self, df_scaled):\n        \"\"\"\n        Processes the dataframe into features.\n        \"\"\"\n        \n        prices = self.df_scaled.loc[:, 'close'].to_numpy(dtype=np.float32)\n\n        data_frame = df_scaled.iloc[:, 1:] # drop first column which is date TODO: Should be probably fixed outside of this class\n        # Convert df to numpy array\n        return prices, data_frame.to_numpy(dtype=np.float32)\n\n    def _initial_obs_data(self):\n        for i in range(self.window_size - len(self._obs_env_history)):\n            self._obs_env_history.append([self._net_worth, self._base_asset, self._quote_asset])\n\n```\n\n----------------------------------------\n\nTITLE: Evaluating Trained Trading Model and Recording Results\nDESCRIPTION: Loads a trained PPO model from a checkpoint and evaluates its performance in a trading environment. Collects metrics like net worth, quote asset, and base asset values throughout the evaluation episodes and saves results to a JSON file for Superalgos integration.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# best_trial = analysis.get_best_trial(metric=\"episode_reward_mean\", mode=\"max\", scope=\"all\") \n# best_checkpoint = analysis.get_best_checkpoint(best_trial, metric=\"episode_reward_mean\")\n\n\nagent = ppo.PPOTrainer(config=ppo_trainer_config)\nagent.restore(\"/tf/notebooks/ray_results/Trading_Signal_Predictor_RL_V01/PPO_BTCAccumulationEnv-training-V01_c7147_00000_0_2022-05-19_15-10-11/checkpoint_000020/checkpoint-20\")\n\njson_dict = {}\nnet_worths = []\nq_assets = []\nb_assets = []\nnet_worths_at_end = []\nq_assets_at_end = []\nb_assets_at_end = []\nepisodes_to_run = 1\n\nfor i in range(episodes_to_run):\n    episode_reward = 0\n    done = False\n    obs = eval_env.reset() # we are using the evaluation environment for evaluation\n    last_info = None\n    while not done:\n        action = agent.compute_single_action(obs, explore=True) # stochastic evaluation\n        obs, reward, done, info = eval_env.step(action)\n        net_worths.append(info['net_worth']) # Add all historical net worths to a list to print statistics at the end of the episode\n        q_assets.append(info['quote_asset']) # Add all historical quote assets to a list to print statistics at the end of the episode\n        b_assets.append(info['base_asset']) # Add all historical base assets to a list to print statistics at the end of the episode\n        episode_reward += reward\n        last_info = info\n\n    net_worths_at_end.append(last_info['net_worth']) # Add all historical net worths to a list to print statistics at the end of the episode\n    q_assets_at_end.append(last_info['quote_asset']) # Add all historical quote assets to a list to print statistics at the end of the episode\n    b_assets_at_end.append(last_info['base_asset']) # Add all historical base assets to a list to print statistics at the end of the episode\n\njson_dict['meanNetWorth'] = np.mean(net_worths)\njson_dict['stdNetWorth'] = np.std(net_worths)\njson_dict['minNetWorth'] = np.min(net_worths)\njson_dict['maxNetWorth'] = np.max(net_worths)\njson_dict['stdQuoteAsset'] = np.std(q_assets)\njson_dict['minQuoteAsset'] = np.min(q_assets)\njson_dict['maxQuoteAsset'] = np.max(q_assets)\njson_dict['stdBaseAsset'] = np.std(b_assets)\njson_dict['minBaseAsset'] = np.min(b_assets)\njson_dict['maxBaseAsset'] = np.max(b_assets)\njson_dict['meanNetWorthAtEnd'] = np.mean(net_worths_at_end)\njson_dict['stdNetWorthAtEnd'] = np.std(net_worths_at_end)\njson_dict['minNetWorthAtEnd'] = np.min(net_worths_at_end)\njson_dict['maxNetWorthAtEnd'] = np.max(net_worths_at_end)\n\n\n# Write the results to JSON file\nwith open(\"evaluation_results.json\", \"w+\") as f:\n    json.dump(json_dict, f)\n```\n\n----------------------------------------\n\nTITLE: Building LSTM Neural Network Architecture in Keras\nDESCRIPTION: Creates a sequential LSTM neural network model using Keras. The architecture consists of an LSTM layer followed by a Dense output layer, compiled with mean absolute error loss function and Adam optimizer.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# design network\nmodel = Sequential()\nmodel.add(LSTM(NUMBER_OF_LSTM_NEURONS, input_shape=(train_X.shape[1], train_X.shape[2])))\nmodel.add(Dense(NUMBER_OF_LABELS))\nmodel.compile(loss='mae', optimizer='adam')\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Reinforcement Learning in Python\nDESCRIPTION: This code snippet imports essential Python libraries for building a reinforcement learning environment. It includes gym for creating custom environments, sklearn for preprocessing, pandas and numpy for data manipulation, and matplotlib for visualization.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport random\nimport gym\nfrom gym import spaces\nfrom sklearn import preprocessing\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n```\n\n----------------------------------------\n\nTITLE: Implementing Environment Step Method for Trading Simulation in Python\nDESCRIPTION: Advances the trading environment by one step after executing an action. It calculates rewards based on asset accumulation, updates the observation state, and checks if the episode has ended. This is the main method called during training.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n    def step(self, action):\n        \"\"\"\n        Returns the next observation, reward, done and info.\n        \"\"\"\n        \n        self._take_action(action)\n\n        # Calculate reward comparing the current base asset with the previous base asset\n        reward = self._base_asset - self._previous_base_asset\n\n        self._total_reward_accumulated += reward\n\n        # Update the previous net worth to be the current net worth after the reward has been applied\n        self._previous_net_worth = self._net_worth\n        self._previous_base_asset = self._base_asset\n        self._previous_quote_asset = self._quote_asset\n\n        obs = self._get_observation()\n        # Update the info and add it to history data\n        info = dict (\n            total_reward_accumulated = self._total_reward_accumulated,\n            net_worth = self._net_worth,\n            last_action_type = self.trade_history[-1]['type'] if len(self.trade_history) > 0 else None,\n            last_action_amount = self.trade_history[-1]['amount'] if len(self.trade_history) > 0 else None,\n            quote_asset = self._quote_asset,\n            base_asset = self._base_asset,\n            current_step = self._current_candle\n        )\n\n        self._current_candle += 1\n\n        # Update observation history\n        self._obs_env_history.append([self._net_worth, self._base_asset, self._quote_asset])\n\n        self._done = self._net_worth <= 0 or self._current_candle >= (len(\n            self.df_normal.loc[:, 'open'].values) - 30)# We assume that the last observation is not the last row of the dataframe, in order to avoid the case where there are no calculated indicators.\n\n        if self._done:\n            print('The episode has finished')\n        \n        return obs, reward, self._done, info\n```\n\n----------------------------------------\n\nTITLE: Training LSTM Model with Validation in Python\nDESCRIPTION: Trains the LSTM model on the prepared training data with validation on test data. The training process runs for a specified number of epochs with a batch size of 72, and outputs training statistics in JSON format.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nprint('{')\nprint('\"trainingOutput\": \"')\n```\n\nLANGUAGE: python\nCODE:\n```\n# fit network\nhistory = model.fit(\n    train_X, \n    train_y, \n    epochs=NUMBER_OF_EPOCHS, \n    batch_size=72, \n    validation_data=(test_X, test_y), \n    verbose=2, \n    shuffle=False\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nprint('\"')\n```\n\n----------------------------------------\n\nTITLE: Making Predictions with Trained LSTM Model in Python\nDESCRIPTION: Uses the trained LSTM model to generate predictions for all test records. The test data is reshaped before prediction to match the expected input format of the model.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# make a prediction\nyhat = model.predict(test_X)\ntest_X = test_X.reshape((test_X.shape[0], NUMBER_OF_LAG_TIMESTEPS*NUMBER_OF_FEATURES))\n```\n\nLANGUAGE: python\nCODE:\n```\nyhat\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for LSTM Implementation\nDESCRIPTION: Imports necessary Python libraries for data processing, machine learning, and visualization including numpy, pandas, keras, and sklearn.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Forecast-Client/notebooks/Bitcoin_Factory_LSTM_Forecasting.ipynb#2025-04-15_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom json import JSONEncoder\nfrom math import sqrt\n\nimport numpy\nfrom numpy import concatenate\nfrom matplotlib import pyplot\nfrom pandas import read_csv\nfrom pandas import DataFrame\nfrom pandas import concat\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.models import load_model\nimport json\n```\n\n----------------------------------------\n\nTITLE: Separating Features and Labels for LSTM Model in Python\nDESCRIPTION: Separates the training and testing datasets into features (input) and labels (output). The features include all historical data, while labels are the first few fields from each set of indicator properties, representing predicted candle values.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# split into input and outputs\nn_obs = NUMBER_OF_LAG_TIMESTEPS * NUMBER_OF_FEATURES\n\ntrain_X = train[:, :n_obs]\ntrain_y = train[:, -NUMBER_OF_FEATURES:-(NUMBER_OF_FEATURES-NUMBER_OF_LABELS)]\n\ntest_X = test[:, :n_obs]\ntest_y = test[:, -NUMBER_OF_FEATURES:-(NUMBER_OF_FEATURES-NUMBER_OF_LABELS)]\n```\n\nLANGUAGE: python\nCODE:\n```\ntrain_X\n```\n\nLANGUAGE: python\nCODE:\n```\ntrain_y\n```\n\n----------------------------------------\n\nTITLE: LSTM Model Architecture Definition\nDESCRIPTION: Defines and compiles an LSTM neural network model for time series prediction with configurable neurons and layers\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Forecast-Client/notebooks/Bitcoin_Factory_LSTM_Forecasting.ipynb#2025-04-15_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif ACTION_TO_TAKE == \"LOAD_MODEL_AND_PREDICT\":\n    model = load_model('/tf/notebooks/models/' + MODEL_FILE_NAME)\n\nif ACTION_TO_TAKE == \"BUILD_AND_SAVE_MODEL\":\n    # design the network\n    model = Sequential()\n    model.add(LSTM(NUMBER_OF_LSTM_NEURONS, input_shape=(train_X.shape[1], train_X.shape[2])))\n    model.add(Dense(NUMBER_OF_LABELS))\n    model.compile(loss='mae', optimizer='adam')\n```\n\n----------------------------------------\n\nTITLE: Making Predictions with LSTM Model in Python\nDESCRIPTION: This code makes predictions using a pre-trained model and reshapes the test data to match the expected input format with the specified lag timesteps and features.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Forecast-Client/notebooks/Bitcoin_Factory_LSTM_Forecasting.ipynb#2025-04-15_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# make a prediction\nyhat = model.predict(test_X)\ntest_X = test_X.reshape((test_X.shape[0], NUMBER_OF_LAG_TIMESTEPS*NUMBER_OF_FEATURES))\n```\n\n----------------------------------------\n\nTITLE: Running Ray Tune Experiment for Trading Model Training\nDESCRIPTION: Configures and runs a Ray Tune experiment to train a PPO reinforcement learning model for trading. Sets up hyperparameter optimization with specified stopping conditions, checkpointing frequency, and result storage location.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nanalysis = tune.run(\n    run_or_experiment=ALGORITHM,\n    name=EXPERIMENT_NAME,\n    metric='episode_reward_mean',\n    mode='max',\n    stop={\n        # An iteration is equal with one SGD round which in our case is equal to train_batch_size. If after X iterations we still don't have a good result, we stop the trial\n        \"timesteps_total\": TIMESTEPS_TO_TRAIN      \n    },\n    config=ppo_trainer_config,\n    num_samples=1,  # Have one sample for each hyperparameter combination. You can have more to average out randomness.\n    keep_checkpoints_num=30,  # Keep the last X checkpoints\n    checkpoint_freq=5,  # Checkpoint every X iterations (save the model)\n    local_dir=\"/tf/notebooks/ray_results/\",  # Local directory to store checkpoints and results, we are using tmp folder until we move the notebook to a docker instance and we can use the same directory across all instances, no matter the underlying OS\n    progress_reporter=custom_reporter,\n    fail_fast=\"raise\",\n    resume=False # Resume training from the last checkpoint if any exists\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Testserver Parameters for Reinforcement Learning in Superalgos\nDESCRIPTION: This is a configuration object for the Superalgos testserver that defines the Python script to run and sets the parameter ranges for the Reinforcement Learning model. It includes settings for assets, timeframes, neural network architecture, training parameters, and RL algorithm settings.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/ReadMeReinforcementLearning.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    ...\n    \"pythonScriptName\": \"Bitcoin_Factory_RL.py\",\n    ...\n    \"parametersRanges\": {\n        \"LIST_OF_ASSETS\": [\n            [\n                \"BTC\"\n            ]\n        ],\n        \"LIST_OF_TIMEFRAMES\": [\n            [\n                \"01-hs\"\n            ],\n            [\n                \"02-hs\"\n            ]\n        ],\n        \"NUMBER_OF_LAG_TIMESTEPS\": [\n            10\n        ],\n        \"PERCENTAGE_OF_DATASET_FOR_TRAINING\": [\n            80\n        ],\n        \"NUMBER_OF_EPOCHS\": [\n            750\n        ],\n        \"NUMBER_OF_LSTM_NEURONS\": [\n            50\n        ],\n        \"TIMESTEPS_TO_TRAIN\": [\n            1e7\n        ],\n        \"OBSERVATION_WINDOW_SIZE\": [\n            24,\n            48\n        ],\n        \"INITIAL_QUOTE_ASSET\": [\n            1000\n        ],\n        \"INITIAL_BASE_ASSET\": [\n            0\n        ],\n        \"TRADING_FEE\": [\n            0.01\n        ],\n        \"ENV_NAME\": [\n            \"SimpleTrading\"\n        ],\n        \"ENV_VERSION\": [\n            1\n        ],\n        \"REWARD_FUNCTION\": [\n            \"unused\"\n        ],\n        \"EXPLORE_ON_EVAL\": [\n            \"unused\"\n        ],\n        \"ALGORITHM\": [\n            \"PPO\"\n        ],\n        \"ROLLOUT_FRAGMENT_LENGTH\": [\n            200\n        ],\n        \"TRAIN_BATCH_SIZE\": [\n            2048\n        ],\n        \"SGD_MINIBATCH_SIZE\": [\n            64\n        ],\n        \"BATCH_MODE\": [\n            \"complete_episodes\"\n        ],\n        \"FC_SIZE\": [\n            256\n        ],\n        \"LEARNING_RATE\": [\n            0.00001\n        ],\n        \"GAMMA\": [\n            0.95\n        ]        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Superalgos Docker Container with Persistent Storage\nDESCRIPTION: Advanced Docker run command for Superalgos, including port mapping, volume mounts for data persistence, and running in detached mode.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Docker/README.md#2025-04-15_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p My-Data-Storage My-Log-Files My-Workspaces My-Network-Nodes-Data My-Social-Trading-Data\n\ndocker run \\\n  -d \\\n  --rm \\\n  --name superalgos \\\n  --user $(id -u):$(id -g) \\\n  -p 18041:18041 \\\n  -p 34248:34248 \\\n  -v $(pwd)/My-Data-Storage:/app/Platform/My-Data-Storage \\\n  -v $(pwd)/My-Log-Files:/app/Platform/My-Log-Files \\\n  -v $(pwd)/My-Workspaces:/app/Platform/My-Workspaces \\\n  -v $(pwd)/My-Network-Nodes-Data:/app/Platform/My-Network-Nodes-Data \\\n  -v $(pwd)/My-Social-Trading-Data:/app/Platform/My-Social-Trading-Data \\\n  ghcr.io/superalgos/superalgos:latest\n```\n\n----------------------------------------\n\nTITLE: Reshaping Input Data for LSTM Network in Python\nDESCRIPTION: Reshapes the input features into a 3D array format required by LSTM networks, with dimensions representing samples, timesteps, and features. This structure allows the model to process sequential data properly.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# reshape input to be 3D [samples, timesteps, features]\ntrain_X = train_X.reshape((train_X.shape[0], NUMBER_OF_LAG_TIMESTEPS, NUMBER_OF_FEATURES))\ntest_X = test_X.reshape((test_X.shape[0], NUMBER_OF_LAG_TIMESTEPS, NUMBER_OF_FEATURES))\n```\n\n----------------------------------------\n\nTITLE: Inverting Normalization for Predictions in Python\nDESCRIPTION: Reverses the normalization applied to the data to convert predictions back to their original scale. This involves concatenating predictions with relevant features and applying the inverse transform of the scaler.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# invert scaling for forecast\ninv_yhat = concatenate((yhat, test_X[:, -(NUMBER_OF_FEATURES - NUMBER_OF_LABELS):]), axis=1)\ninv_yhat = scaler.inverse_transform(inv_yhat)\ninv_yhat = inv_yhat[:,:NUMBER_OF_LABELS]\ninv_yhat\n```\n\nLANGUAGE: python\nCODE:\n```\n# invert scaling for actual\ninv_y = concatenate((test_y, test_X[:, -(NUMBER_OF_FEATURES - NUMBER_OF_LABELS):]), axis=1)\ninv_y = scaler.inverse_transform(inv_y)\ninv_y = inv_y[:,:NUMBER_OF_LABELS]\ninv_y\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for AI/ML Environment\nDESCRIPTION: A requirements.txt file listing specific versions of Python packages required for machine learning and data science. Includes libraries for neural networks (PyTorch, TensorFlow), reinforcement learning (Gym, Ray), data processing (Pandas, NumPy), and visualization (Matplotlib, TensorBoard).\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/DockerBuild/requirements.txt#2025-04-15_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngym==0.12.1\nmatplotlib==3.5.2\nnbformat>=5.1\npandas==1.5.1\nray[all]==1.12.1\nscikit-learn==1.1.2\ntorch==1.12.0\ntorchvision==0.13.0\ntabulate\ntensorboard==2.10.1\ntensorflow==2.10.0\ntensorflow-probability==0.18.0\nnumpy==1.23.3\n```\n\n----------------------------------------\n\nTITLE: Reframing Time Series as Supervised Learning Problem in Python\nDESCRIPTION: Transforms the normalized time series data into a supervised learning format using the series_to_supervised function, which creates input-output pairs with specified lag timesteps for LSTM model training.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# frame as supervised learning\nreframed = series_to_supervised(scaled, NUMBER_OF_LAG_TIMESTEPS, 1)\n```\n\nLANGUAGE: python\nCODE:\n```\nreframed\n```\n\n----------------------------------------\n\nTITLE: Calculating Percentage Errors for Predictions in Python\nDESCRIPTION: Computes percentage errors between predicted and actual values, expressed as percentages with two decimal places. The calculation uses the formula (predicted - actual) / actual * 100.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# my way to calculating Errors\nerrors = (inv_yhat - inv_y) / inv_y * 10000\nerrors = errors.astype('int') / 100\nerrors\n```\n\n----------------------------------------\n\nTITLE: Implementing Observation Generation for Trading Environment in Python\nDESCRIPTION: Creates the current observation state by combining market data features with environment state variables. It applies min-max scaling to normalize the observation data for the agent.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n    def _get_observation(self):\n        \"\"\"\n        Returns the current observation.\n        \"\"\"\n        data_frame = self.features[(self._current_candle - self.window_size):self._current_candle]\n\n        obs_env_history = np.array(self._obs_env_history).astype(np.float32)\n\n        #TODO We definetely need to scale the observation history in a better way, this might influence training results\n        # Doing it ad-hoc might change the scale of the min and max, thus changing the results\n        obs_env_history = preprocessing.minmax_scale(obs_env_history, (-0.9,0.9)) \n\n        obs = np.hstack((data_frame, obs_env_history[(self._current_candle - self.window_size):self._current_candle]))\n\n        return obs\n```\n\n----------------------------------------\n\nTITLE: Normalizing Time Series Data with MinMaxScaler in Python\nDESCRIPTION: Normalizes the time series data to a 0-1 range using scikit-learn's MinMaxScaler, which is a standard preprocessing step for machine learning workflows to improve model performance.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# normalize features\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaled = scaler.fit_transform(values)\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for RL Trading Environment\nDESCRIPTION: Imports required Python libraries for machine learning, data processing, visualization and reinforcement learning using Ray and Gym frameworks.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport random\nimport gym\nfrom gym import spaces\nfrom sklearn import preprocessing\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time\nimport ray\nimport os\nimport sys\nimport math\nimport json\nfrom ray import tune\nfrom ray.rllib.agents import ppo\nfrom ray.tune import CLIReporter\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tabulate import tabulate\n```\n\n----------------------------------------\n\nTITLE: Calculating RMSE Error Metric in Python\nDESCRIPTION: This code calculates the Root Mean Squared Error (RMSE) between the actual and predicted values, which is the main evaluation metric for model performance.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Forecast-Client/notebooks/Bitcoin_Factory_LSTM_Forecasting.ipynb#2025-04-15_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# calculate RMSE\nrmse = sqrt(mean_squared_error(inv_y, inv_yhat))\n```\n\n----------------------------------------\n\nTITLE: Data Preprocessing for Training Environment\nDESCRIPTION: Processes and scales input dataframe to prepare features for the training environment. Extracts price data and converts to numpy arrays.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nprices = self.df_scaled.loc[:, 'close'].to_numpy(dtype=np.float32)\n\ndata_frame = df_scaled.iloc[:, 1:] # drop first column which is date TODO: Should be probably fixed outside of this class\n# Convert df to numpy array\nreturn prices, data_frame.to_numpy(dtype=np.float32)\n```\n\n----------------------------------------\n\nTITLE: Implementing BTCAccumulationEnv Class for Reinforcement Learning in Python\nDESCRIPTION: Defines a Gym environment for BTC accumulation trading strategies, including initialization, action space, observation space, and environment features. This class establishes the foundation for training RL agents to trade cryptocurrency.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass BTCAccumulationEnv(gym.Env):\n    \n    metadata = {'render.modes': ['live', 'human', 'none']}\n    visualization = None\n\n    def __init__(self, config=None):\n        \n        self.df_scaled = config.get(\"df_scaled\").reset_index(drop=True)\n        self.df_normal = config.get(\"df_normal\").reset_index(drop=True)\n        self.window_size = OBSERVATION_WINDOW_SIZE\n        self.prices, self.features = self._process_data(self.df_scaled)\n        # The shape of the observation is (window_size * features + environment_features) the environment_features are: quote_asset, base_asset, net_worth. The entire observation is flattened in a 1D np array. \n        # NOT USED ANYMORE, KEPT FOR REFERENCE\n        # self.obs_shape = ((OBSERVATION_WINDOW_SIZE * self.features.shape[1] + 3),) \n\n        # The shape of the observation is number of candles to look back, and the number of features (candle_features) + 3 (quote_asset, base_asset, net_worth)\n        self.obs_shape = (OBSERVATION_WINDOW_SIZE, self.features.shape[1] + 3)\n\n        # Action space\n        #self.action_space = spaces.Box(low=np.array([0, 0]), high=np.array([3.0, 1.0]), dtype=np.float32)\n        self.action_space = spaces.MultiDiscrete([3, 100])\n        # Observation space\n        self.observation_space = spaces.Box(low=-1, high=1, shape=self.obs_shape, dtype=np.float32)\n\n        # Initialize the episode environment\n\n        self._start_candle = OBSERVATION_WINDOW_SIZE # We assume that the first observation is not the first row of the dataframe, in order to avoid the case where there are no calculated indicators.\n        self._end_candle = len(self.features) - 1\n        self._trading_fee = config.get(\"trading_fee\")\n\n        self._quote_asset = None\n        self._base_asset = None\n        self._done = None\n        self._current_candle = None\n        self._net_worth = None\n        self._previous_net_worth = None\n        self._previous_base_asset = None\n        self._previous_quote_asset = None\n\n        # Array that will contain observation history needed for appending it to the observation space\n        # It will contain observations consisting of the net_worth, base_asset and quote_asset as list of floats\n        # Other features (OHLC + Indicators) will be appended to the current observation in the _get_observation method that takes the data directly from the available dataframe\n        self._obs_env_history = None\n\n        # Render and analysis data\n        self._total_reward_accumulated = None\n        self.trade_history = None\n        self._first_rendering = None\n```\n\n----------------------------------------\n\nTITLE: Calculating Percentage Errors in Python\nDESCRIPTION: This code calculates the percentage error for each prediction, multiplies by 100 for readability, and converts to integers with two decimal precision.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Forecast-Client/notebooks/Bitcoin_Factory_LSTM_Forecasting.ipynb#2025-04-15_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# my way to calculating Errors\nerrors = (inv_yhat - inv_y) / inv_y * 10000\nerrors = errors.astype('int') / 100\nerrors\n```\n\n----------------------------------------\n\nTITLE: Plotting Loss History for LSTM Model in Python\nDESCRIPTION: Visualizes the training and validation loss over epochs to monitor model convergence and potential overfitting. The plot shows both training and test loss curves for comparison.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# plot history\npyplot.plot(history.history['loss'], label='train')\npyplot.plot(history.history['val_loss'], label='test')\npyplot.legend()\npyplot.show()\n```\n\n----------------------------------------\n\nTITLE: Plotting Prediction Errors in Python\nDESCRIPTION: This code creates a plot of the percentage errors for each predicted value, providing a visual representation of prediction accuracy across the test dataset.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Forecast-Client/notebooks/Bitcoin_Factory_LSTM_Forecasting.ipynb#2025-04-15_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# plot errors\npyplot.plot(errors)\npyplot.show()\n```\n\n----------------------------------------\n\nTITLE: Cloning Superalgos Repository\nDESCRIPTION: Commands to clone your forked Superalgos repository from GitHub. Requires GitHub username and personal access token.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone <URL of your Superalgos fork>\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/John/Superalgos\n```\n\n----------------------------------------\n\nTITLE: Inverting Normalization for Actual Values in Python\nDESCRIPTION: This code denormalizes the actual test values (test_y) using the same approach as for predictions, concatenating with test features and applying the inverse transform of the scaler.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Forecast-Client/notebooks/Bitcoin_Factory_LSTM_Forecasting.ipynb#2025-04-15_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# invert scaling for actual\ninv_y = concatenate((test_y, test_X[:, -(NUMBER_OF_FEATURES - NUMBER_OF_LABELS):]), axis=1)\ninv_y = scaler.inverse_transform(inv_y)\ninv_y = inv_y[:,:NUMBER_OF_LABELS]\ninv_y\n```\n\n----------------------------------------\n\nTITLE: Time Series to Supervised Learning Conversion\nDESCRIPTION: Function to transform time series data into a supervised learning format with specified input and output sequences\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Forecast-Client/notebooks/Bitcoin_Factory_LSTM_Forecasting.ipynb#2025-04-15_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef series_to_supervised(data, n_in=1, n_out=1, dropnan=True):\n\tn_vars = 1 if type(data) is list else data.shape[1]\n\tdf = DataFrame(data)\n\tcols, names = list(), list()\n\t# input sequence (t-n, ... t-1)\n\tfor i in range(n_in, 0, -1):\n\t\tcols.append(df.shift(i))\n\t\tnames += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]\n\t# forecast sequence (t, t+1, ... t+n)\n\tfor i in range(0, n_out):\n\t\tcols.append(df.shift(-i))\n\t\tif i == 0:\n\t\t\tnames += [('var%d(t)' % (j+1)) for j in range(n_vars)]\n\t\telse:\n\t\t\tnames += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]\n\t# put it all together\n\tagg = concat(cols, axis=1)\n\tagg.columns = names\n\t# drop rows with NaN values\n\tif dropnan:\n\t\tagg.dropna(inplace=True)\n\treturn agg\n```\n\n----------------------------------------\n\nTITLE: Loading and Setting Training Parameters\nDESCRIPTION: Loads training parameters from CSV file and sets up environment configuration variables including batch sizes, learning rates, and asset parameters.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nparameters = pd.read_csv(\n    '/tf/notebooks/parameters.csv', \n    sep=' ', \n)\n\nEXPERIMENT_NAME = \"Trading_Signal_Predictor_RL_V01\"\nPERCENTAGE_OF_DATASET_FOR_TRAINING = 80\nTIMESTEPS_TO_TRAIN = parameters['TIMESTEPS_TO_TRAIN'][0]\nOBSERVATION_WINDOW_SIZE = parameters['OBSERVATION_WINDOW_SIZE'][0]\nINITIAL_QUOTE_ASSET = parameters['INITIAL_QUOTE_ASSET'][0]\nINITIAL_BASE_ASSET = parameters['INITIAL_BASE_ASSET'][0]\nTRADING_FEE = parameters['TRADING_FEE'][0]\nENV_VERSION = parameters['ENV_VERSION'][0]\nENV_NAME =  parameters['ENV_NAME'][0]\nEXPLORE_ON_EVAL = parameters['EXPLORE_ON_EVAL'][0]\n\nALGORITHM = parameters['ALGORITHM'][0]\nROLLOUT_FRAGMENT_LENGTH = parameters['ROLLOUT_FRAGMENT_LENGTH'][0]\nTRAIN_BATCH_SIZE = parameters['TRAIN_BATCH_SIZE'][0]\nSGD_MINIBATCH_SIZE = parameters['SGD_MINIBATCH_SIZE'][0]\nBATCH_MODE = parameters['BATCH_MODE'][0]\nFC_SIZE = [parameters['FC_SIZE'][0]]\nLEARNING_RATE = parameters['LEARNING_RATE'][0]\nGAMMA = parameters['GAMMA'][0]\n```\n\n----------------------------------------\n\nTITLE: Inverting Normalization for Predictions in Python\nDESCRIPTION: This code denormalizes the predicted values by concatenating them with the test features and applying the inverse transform of the scaler. It isolates only the label columns from the inverse-transformed data.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Forecast-Client/notebooks/Bitcoin_Factory_LSTM_Forecasting.ipynb#2025-04-15_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# invert scaling for forecast\ninv_yhat = concatenate((yhat, test_X[:, -(NUMBER_OF_FEATURES - NUMBER_OF_LABELS):]), axis=1)\ninv_yhat = scaler.inverse_transform(inv_yhat)\ninv_yhat = inv_yhat[:,:NUMBER_OF_LABELS]\ninv_yhat\n```\n\n----------------------------------------\n\nTITLE: Plotting Percentage Errors in Time Series Predictions using Matplotlib\nDESCRIPTION: Visualizes the percentage errors of predicted values over time using a line plot. This helps identify patterns or trends in the prediction errors.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# plot errors\npyplot.plot(errors)\npyplot.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating RMSE for Time Series Predictions in Python\nDESCRIPTION: Calculates the Root Mean Squared Error (RMSE) between the inverse-transformed actual values (inv_y) and predicted values (inv_yhat). RMSE is used as the primary error metric to evaluate model performance.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nrmse = sqrt(mean_squared_error(inv_y, inv_yhat))\n```\n\n----------------------------------------\n\nTITLE: Configuring Technical Indicators and ML Parameters in Superalgos\nDESCRIPTION: This configuration defines technical indicators from Zeus and Quantum data mines with their respective properties set to \"OFF\". It also includes machine learning parameters for model training such as assets (BTC), timeframes (1 hour), LSTM neuron count, epochs, and dataset allocation.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"propertyName\": \"minusDI\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Zeus\",\n    \"indicator\": \"DMI\",\n    \"product\": \"DMI\",\n    \"objectName\": \"DMI\",\n    \"propertyName\": \"plusDI\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"quantum\",\n    \"indicator\": \"HARSI\",\n    \"product\": \"HARSI\",\n    \"objectName\": \"harsi\",\n    \"propertyName\": \"StochD\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"quantum\",\n    \"indicator\": \"HARSI\",\n    \"product\": \"HARSI\",\n    \"objectName\": \"harsi\",\n    \"propertyName\": \"StochK\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"quantum\",\n    \"indicator\": \"HARSI\",\n    \"product\": \"HARSI\",\n    \"objectName\": \"harsi\",\n    \"propertyName\": \"HaMin\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"quantum\",\n    \"indicator\": \"HARSI\",\n    \"product\": \"HARSI\",\n    \"objectName\": \"harsi\",\n    \"propertyName\": \"HaMax\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"quantum\",\n    \"indicator\": \"HARSI\",\n    \"product\": \"HARSI\",\n    \"objectName\": \"harsi\",\n    \"propertyName\": \"HaClose\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"quantum\",\n    \"indicator\": \"HARSI\",\n    \"product\": \"HARSI\",\n    \"objectName\": \"harsi\",\n    \"propertyName\": \"HaOpen\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"quantum\",\n    \"indicator\": \"HARSI\",\n    \"product\": \"HARSI\",\n    \"objectName\": \"harsi\",\n    \"propertyName\": \"rsi\",\n    \"range\": [\n        \"OFF\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting Data into Training and Testing Sets in Python\nDESCRIPTION: Divides the reframed dataset into training and testing sets based on the specified percentage for training. The training set will be used to train the model, while the testing set will evaluate its performance.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# get values from reframed dataset\nvalues = reframed.values\nrecord_count = len(values)\nrecords_for_training = int(record_count * PERCENTAGE_OF_DATASET_FOR_TRAINING / 100)\nrecords_for_training\n```\n\nLANGUAGE: python\nCODE:\n```\n# split into train and test sets\ntrain = values[:records_for_training, :]\ntest = values[records_for_training:, :]\n```\n\nLANGUAGE: python\nCODE:\n```\ntrain.shape\n```\n\nLANGUAGE: python\nCODE:\n```\ntest.shape\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Encoder for NumPy Arrays\nDESCRIPTION: Implements a custom JSON encoder class to handle NumPy array serialization\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Forecast-Client/notebooks/Bitcoin_Factory_LSTM_Forecasting.ipynb#2025-04-15_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass NumpyArrayEncoder(JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, numpy.ndarray):\n            return obj.tolist()\n        return JSONEncoder.default(self, obj)\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Execution for Trading Agent in Python\nDESCRIPTION: Executes buy, sell, or hold actions based on the agent's decision. It updates asset balances, applies trading fees, and records trade history. The method simulates realistic trading by selecting a random price within the candle's range.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n    def _take_action(self, action):\n        self._done = False\n        current_price = random.uniform(\n            self.df_normal.loc[self._current_candle, \"low\"], self.df_normal.loc[self._current_candle, \"high\"])\n\n\n        action_type = action[0]\n        amount = action[1] / 100\n        \n        if action_type == 0: # Buy\n            # Buy % assets\n            # Determine the maximum amount of quote asset that can be bought\n            available_amount_to_buy_with = self._quote_asset / current_price\n            # Buy only the amount that agent chose\n            assets_bought = available_amount_to_buy_with * amount\n            # Update the quote asset balance\n            self._quote_asset -= assets_bought * current_price\n            # Update the base asset\n            self._base_asset += assets_bought\n            # substract trading fee from base asset based on the amount bought\n            self._base_asset -= self._trading_fee * assets_bought\n\n            # Add to trade history the amount bought if greater than 0\n            if assets_bought > 0:\n                self.trade_history.append({'step': self._current_candle, 'type': 'Buy', 'amount': assets_bought, 'price': current_price, 'total' : assets_bought * current_price, 'percent_amount': action[1]})\n        \n\n        elif action_type == 1: # Sell\n            # Sell % assets\n            # Determine the amount of base asset that can be sold\n            amount_to_sell = self._base_asset * amount\n            received_quote_asset = amount_to_sell * current_price\n            # Update the quote asset\n            self._quote_asset += received_quote_asset\n            # Update the base asset\n            self._base_asset -= amount_to_sell\n            \n            # substract trading fee from quote asset based on the amount sold\n            self._quote_asset -= self._trading_fee * received_quote_asset\n\n            # Add to trade history the amount sold if greater than 0\n            if amount_to_sell > 0:\n                self.trade_history.append({'step': self._current_candle, 'type': 'Sell', 'amount': amount_to_sell, 'price': current_price, 'total' : received_quote_asset, 'percent_amount': action[1]})\n\n        else:\n            # Hold\n            self.trade_history.append({'step': self._current_candle, 'type': 'Hold', 'amount': '0', 'price': current_price, 'total' : 0, 'percent_amount': action[1]})\n\n\n        # Update the current net worth\n        self._net_worth = self._base_asset * current_price + self._quote_asset\n```\n\n----------------------------------------\n\nTITLE: Dataset Splitting Function\nDESCRIPTION: Splits the dataset into training, testing, and validation sets using a 67-33 split ratio without shuffling to maintain time series order.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef split_data(data):\n    X_train_test, X_valid = \\\n        train_test_split(data, train_size=0.67, test_size=0.33, shuffle=False)\n    \n    X_train, X_test = \\\n        train_test_split(X_train_test, train_size=0.50, test_size=0.50, shuffle=False)\n\n    return X_train, X_test, X_valid\n\nX_train, X_test, X_valid = \\\n    split_data(data)\n```\n\n----------------------------------------\n\nTITLE: Implementing Environment Reset Method for Trading Simulation in Python\nDESCRIPTION: Resets the trading environment to its initial state, including resetting asset balances, net worth, and observation history. This prepares the environment for a new training episode.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n    def reset(self):\n        self._done = False\n        self._current_candle = self._start_candle\n        self._quote_asset = INITIAL_QUOTE_ASSET\n        self._base_asset = INITIAL_BASE_ASSET \n        self._net_worth = INITIAL_QUOTE_ASSET # at the begining our net worth is the initial quote asset\n        self._previous_net_worth = INITIAL_QUOTE_ASSET # at the begining our previous net worth is the initial quote asset\n        self._previous_base_asset = INITIAL_BASE_ASSET\n        self._previous_quote_asset = INITIAL_QUOTE_ASSET\n        self._total_reward_accumulated = 0\n        self._first_rendering = True\n        self.trade_history = []\n        self._obs_env_history = []\n        \n        self._initial_obs_data()\n\n        return self._get_observation()\n```\n\n----------------------------------------\n\nTITLE: Displaying ML Test Parameters Example\nDESCRIPTION: A tabular representation of the parameters used for machine learning models in the Bitcoin Factory Test Client. These parameters control aspects like the assets and timeframes to analyze, neural network configuration, and which technical indicators to include in the model.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/README.md#2025-04-15_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌─────────────────────────────────────────────────────────────────────────┬─────────┬────────┐\n│                                 (index)                                 │    0    │ Values │\n├─────────────────────────────────────────────────────────────────────────┼─────────┼────────┤\n│                             LIST_OF_ASSETS                              │  'BTC'  │        │\n│                           LIST_OF_TIMEFRAMES                            │ '01-hs' │        │\n│                     NUMBER_OF_INDICATORS_PROPERTIES                     │         │   7    │\n│                         NUMBER_OF_LAG_TIMESTEPS                         │         │   5    │\n│                            NUMBER_OF_ASSETS                             │         │   1    │\n│                            NUMBER_OF_LABELS                             │         │   3    │\n│                   PERCENTAGE_OF_DATASET_FOR_TRAINING                    │         │   80   │\n│                           NUMBER_OF_FEATURES                            │         │   7    │\n│                            NUMBER_OF_EPOCHS                             │         │  100   │\n│                         NUMBER_OF_LSTM_NEURONS                          │         │   50   │\n│               CANDLES_CANDLES-VOLUMES_CANDLES_CANDLE_MAX                │         │  'ON'  │\n│               CANDLES_CANDLES-VOLUMES_CANDLES_CANDLE_MIN                │         │  'ON'  │\n│              CANDLES_CANDLES-VOLUMES_CANDLES_CANDLE_CLOSE               │         │  'ON'  │\n│                               HOUR_OF_DAY                               │         │ 'OFF'  │\n│                              DAY_OF_MONTH                               │         │ 'OFF'  │\n│                               DAY_OF_WEEK                               │         │ 'OFF'  │\n│                              WEEK_OF_YEAR                               │         │ 'OFF'  │\n│                              MONTH_OF_YEAR                              │         │ 'OFF'  │\n│                                  YEAR                                   │         │ 'OFF'  │\n│               CANDLES_CANDLES-VOLUMES_CANDLES_CANDLE_OPEN               │         │  'ON'  │\n│               CANDLES_CANDLES-VOLUMES_VOLUMES_VOLUME_BUY                │         │  'ON'  │\n│ MASTERS_RESISTANCES-AND-SUPPORTS_RESISTANCES_RESISTANCE_RESISTANCE1RATE │         │  'ON'  │\n│ MASTERS_RESISTANCES-AND-SUPPORTS_RESISTANCES_RESISTANCE_RESISTANCE2RATE │         │ 'OFF'  │\n│ MASTERS_RESISTANCES-AND-SUPPORTS_RESISTANCES_RESISTANCE_RESISTANCE3RATE │         │ 'OFF'  │\n│ MASTERS_RESISTANCES-AND-SUPPORTS_RESISTANCES_RESISTANCE_RESISTANCE4RATE │         │ 'OFF'  │\n│ MASTERS_RESISTANCES-AND-SUPPORTS_RESISTANCES_RESISTANCE_RESISTANCE5RATE │         │ 'OFF'  │\n│     MASTERS_RESISTANCES-AND-SUPPORTS_SUPPORTS_SUPPORT_SUPPORT1RATE      │         │  'ON'  │\n│     MASTERS_RESISTANCES-AND-SUPPORTS_SUPPORTS_SUPPORT_SUPPORT2RATE      │         │ 'OFF'  │\n│     MASTERS_RESISTANCES-AND-SUPPORTS_SUPPORTS_SUPPORT_SUPPORT3RATE      │         │ 'OFF'  │\n│     MASTERS_RESISTANCES-AND-SUPPORTS_SUPPORTS_SUPPORT_SUPPORT4RATE      │         │ 'OFF'  │\n│     MASTERS_RESISTANCES-AND-SUPPORTS_SUPPORTS_SUPPORT_SUPPORT5RATE      │         │ 'OFF'  │\n└─────────────────────────────────────────────────────────────────────────┴─────────┴────────┘\n```\n\n----------------------------------------\n\nTITLE: Data Loading and Preprocessing\nDESCRIPTION: Loads time series data from CSV and prepares it by renaming columns, converting data types and formatting dates.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv(\n    '/tf/notebooks/time-series.csv', \n    header=0, \n    index_col=None,\n    sep=' ', \n    skipinitialspace=True\n)\n\ndef prepare_data(df):\n    df.rename(columns={df.columns[0]: \"date\"}, inplace=True)\n    df.rename(columns={df.columns[1]: \"high\"}, inplace=True)\n    df.rename(columns={df.columns[2]: \"low\"}, inplace=True)\n    df.rename(columns={df.columns[3]: \"close\"}, inplace=True)\n    df.rename(columns={df.columns[4]: \"open\"}, inplace=True)\n    df.rename(columns={df.columns[5]: \"volume\"}, inplace=True)\n    \n    df['volume'] = np.int64(df['volume'])\n    df['date'] = pd.to_datetime(df['date'],  unit='ms')\n    df.sort_values(by='date', ascending=True, inplace=True)\n    df.reset_index(drop=True, inplace=True)\n    df['date'] = df['date'].dt.strftime('%Y-%m-%d %I:%M %p')\n\n    return df\n\ndata = prepare_data(df)\n```\n\n----------------------------------------\n\nTITLE: Example Dataset Format for ML Test Client\nDESCRIPTION: A sample of the time-series data format used by the Bitcoin Factory Test Client. The dataset contains timestamp and various Bitcoin price and volume data points used as inputs for the machine learning models.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/README.md#2025-04-15_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n* Timestamp   BTC-candle.max-24-hs-1   BTC-candle.min-24-hs-1   BTC-candle.open-24-hs-1   BTC-candle.close-24-hs-1   BTC-volume.total-24-hs-1\n* 1503014400000   4371.52   3938.77   4285.08   4108.37   1199.8882639999993\n* 1503100800000   4184.69   3850   4108.37   4139.98   381.3097630000001\n* 1503187200000   4211.08   4032.62   4139.98   4086.29   467.0830220000002\n* 1503273600000   4119.62   3911.79   4069.13   4016   691.7430599999999\n* 1503360000000   4104.82   3400   4016   4040   966.6848579999996\n* 1503446400000   4265.8   4013.89   4040   4114.01   1001.136565\n* 1503532800000   4371.68   4085.01   4147   4316.01   787.4187530000003\n* 1503619200000   4453.91   4247.48   4316.01   4280.68   573.6127399999996\n* 1503705600000   4367   4212.41   4280.68   4337.44   228.10806799999992\n* 1503792000000   4400   4285.54   4332.51   4310.01   350.6925850000002\n* 1503878400000   4399.82   4124.54   4310.01   4386.69   603.8416160000002\n```\n\n----------------------------------------\n\nTITLE: Custom Training Progress Reporter\nDESCRIPTION: Implements a custom progress reporter for Ray Tune that formats and outputs training metrics for Superalgos integration.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclass CustomReporter(ProgressReporter):\n\n    def __init__(\n        self,\n        max_report_frequency: int = 10,\n        location: str = \"/tf/notebooks/\",\n    ):\n        self._max_report_freqency = max_report_frequency\n        self._last_report_time = 0\n        self._location = location\n\n    def should_report(self, trials, done=False):\n        if time.time() - self._last_report_time > self._max_report_freqency:\n            self._last_report_time = time.time()\n            return True\n        return done\n\n    def report(self, trials, *sys_info):\n        trial_status_dict = {}\n        for trial in trials:\n            trial_status_dict['status'] = trial.status\n            trial_status_dict['name'] = trial.trial_id\n            trial_status_dict['episodeRewardMax'] = int(trial.last_result['episode_reward_max']) if trial.last_result.get(\"episode_reward_max\") else 0\n            trial_status_dict['episodeRewardMean'] = int(trial.last_result['episode_reward_mean']) if trial.last_result.get(\"episode_reward_mean\") else 0\n            trial_status_dict['episodeRewardMin'] = int(trial.last_result['episode_reward_min']) if trial.last_result.get(\"episode_reward_min\") else 0\n            trial_status_dict['timestepsExecuted'] = int(trial.last_result['timesteps_total']) if trial.last_result.get(\"timesteps_total\") else 0\n            trial_status_dict['timestepsTotal'] = int(TIMESTEPS_TO_TRAIN)\n\n        sys.stdout.write(json.dumps(trial_status_dict))\n        sys.stdout.write('\\n')\n\n        with open(self._location + \"training_results.json\", \"w+\") as f:\n            json.dump(trial_status_dict, f)\n            f.close()\n    \n    def set_start_time(self, timestamp: Optional[float] = None):\n        if timestamp is not None:\n            self._start_time = time.time()\n        else:\n            self._start_time = timestamp\n```\n\n----------------------------------------\n\nTITLE: Extracting Model Parameters in Python\nDESCRIPTION: Extracts model parameters from the loaded parameters dataset, handling both positional and named access to accommodate different CSV formats. Parameters include neural network configuration, dataset properties, and training settings.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# supporting both positional access and by name\n\nif set(['PARAMETER']).issubset(parameters_dataset.columns):\n        # number of indicator properties that are at the raw dataset. Each set of indicators properties might be at many assets or timeframes.\n    NUMBER_OF_INDICATORS_PROPERTIES = int(parameters_dataset.values[2][1])\n\n    # number of timesteps in the secuence that we are going to use to feed the model.\n    NUMBER_OF_LAG_TIMESTEPS = int(parameters_dataset.values[3][1])\n\n    # number of assets included at the raw dataset.\n    NUMBER_OF_ASSETS = int(parameters_dataset.values[4][1])\n\n    # number of things we are going to predict.\n    NUMBER_OF_LABELS = int(parameters_dataset.values[5][1])\n\n    # definition of how the raw dataset is going to be divided between a Traing Dataset and a Test Dataset.\n    PERCENTAGE_OF_DATASET_FOR_TRAINING = int(parameters_dataset.values[6][1])\n\n    NUMBER_OF_FEATURES = int(parameters_dataset.values[7][1])\n\n    # hyper-parameters\n    NUMBER_OF_EPOCHS = int(parameters_dataset.values[8][1])\n    NUMBER_OF_LSTM_NEURONS = int(parameters_dataset.values[9][1])\n\nelse:\n    \n    NUMBER_OF_INDICATORS_PROPERTIES = int(parameters_dataset['NUMBER_OF_INDICATORS_PROPERTIES'][0])\n    # number of timesteps in the secuence that we are going to use to feed the model.\n    NUMBER_OF_LAG_TIMESTEPS = int(parameters_dataset['NUMBER_OF_LAG_TIMESTEPS'][0])\n\n    # number of assets included at the raw dataset.\n    NUMBER_OF_ASSETS = int(parameters_dataset['NUMBER_OF_ASSETS'][0])\n\n    # number of things we are going to predict.\n    NUMBER_OF_LABELS = int(parameters_dataset['NUMBER_OF_LABELS'][0])\n\n    # definition of how the raw dataset is going to be divided between a Traing Dataset and a Test Dataset.\n    PERCENTAGE_OF_DATASET_FOR_TRAINING = int(parameters_dataset['PERCENTAGE_OF_DATASET_FOR_TRAINING'][0])\n\n    NUMBER_OF_FEATURES = int(parameters_dataset['NUMBER_OF_FEATURES'][0])\n\n    # hyper-parameters\n    NUMBER_OF_EPOCHS = int(parameters_dataset['NUMBER_OF_EPOCHS'][0])\n    NUMBER_OF_LSTM_NEURONS = int(parameters_dataset['NUMBER_OF_LSTM_NEURONS'][0])\n```\n\n----------------------------------------\n\nTITLE: Calculating Dollar Difference Between Predictions and Actual Values in Python\nDESCRIPTION: This code calculates the absolute difference between predicted and actual values, providing a concrete measure of prediction error in the original units.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Forecast-Client/notebooks/Bitcoin_Factory_LSTM_Forecasting.ipynb#2025-04-15_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndiff = (inv_yhat - inv_y)\ndiff = diff.astype('float32')\ndiff\n```\n\n----------------------------------------\n\nTITLE: Plotting Raw Time Series Data in Python\nDESCRIPTION: Plots selected columns from the raw time series data to visualize and verify the data before processing. It creates subplots for different selected data groups for visual inspection.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# specify columns to plot\ngroups = [0, 2]\ni = 1\n# plot each column\npyplot.figure()\nfor group in groups:\n\tpyplot.subplot(len(groups), 1, i)\n\tpyplot.plot(values[:, group])\n\tpyplot.title(timeseries_dataset.columns[group], y=0.5, loc='right')\n\ti += 1\npyplot.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Container for TensorBoard Visualization\nDESCRIPTION: This command modifies a Docker container to run TensorBoard for visualizing training results. It starts TensorBoard to monitor the logs directory and also launches a Jupyter notebook server.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/ReadMeReinforcementLearning.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash -c source /etc/bash.bashrc && tensorboard --logdir=/tf/ --host=0.0.0.0 &> log_tensorboard & jupyter notebook --notebook-dir=/tf --ip 0.0.0.0 --no-browser --allow-root\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitcoin Factory LSTM Model Parameters in JSON\nDESCRIPTION: This configuration defines network settings, target host information, and time series data features for a Bitcoin Factory LSTM model. It specifies which candlestick data and technical indicators to use as inputs, with configurable ON/OFF toggles for each parameter.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"networkCodeName\": \"Testnet\",\n    \"targetSuperalgosHost\": \"192.168.1.156\",\n    \"targetSuperalgosHttpPort\": 34248,\n    \"pythonScriptName\": \"Bitcoin_Factory_LSTM.py\",\n    \"timeSeriesFile\": {\n        \"labels\": [\n            {\n                \"dataMine\": \"Candles\",\n                \"indicator\": \"Candles-Volumes\",\n                \"product\": \"Candles\",\n                \"objectName\": \"candle\",\n                \"propertyName\": \"max\",\n                \"range\": [\n                    \"ON\"\n                ]\n            },\n            {\n                \"dataMine\": \"Candles\",\n                \"indicator\": \"Candles-Volumes\",\n                \"product\": \"Candles\",\n                \"objectName\": \"candle\",\n                \"propertyName\": \"min\",\n                \"range\": [\n                    \"ON\"\n                ]\n            },\n            {\n                \"dataMine\": \"Candles\",\n                \"indicator\": \"Candles-Volumes\",\n                \"product\": \"Candles\",\n                \"objectName\": \"candle\",\n                \"propertyName\": \"close\",\n                \"range\": [\n                    \"ON\"\n                ]\n            }\n        ],\n        \"features\": [\n            {\n                \"parameter\": \"HOUR_OF_DAY\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"parameter\": \"DAY_OF_MONTH\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"parameter\": \"DAY_OF_WEEK\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"parameter\": \"WEEK_OF_YEAR\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"parameter\": \"MONTH_OF_YEAR\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"parameter\": \"YEAR\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Candles\",\n                \"indicator\": \"Candles-Volumes\",\n                \"product\": \"Candles\",\n                \"objectName\": \"candle\",\n                \"propertyName\": \"open\",\n                \"range\": [\n                    \"ON\"\n                ]\n            },\n            {\n                \"dataMine\": \"Candles\",\n                \"indicator\": \"Candles-Volumes\",\n                \"product\": \"Volumes\",\n                \"objectName\": \"volume\",\n                \"propertyName\": \"buy\",\n                \"range\": [\n                    \"ON\"\n                ]\n            },\n            {\n                \"dataMine\": \"Masters\",\n                \"indicator\": \"Resistances-And-Supports\",\n                \"product\": \"Resistances\",\n                \"objectName\": \"resistance\",\n                \"propertyName\": \"resistance1Rate\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Masters\",\n                \"indicator\": \"Resistances-And-Supports\",\n                \"product\": \"Resistances\",\n                \"objectName\": \"resistance\",\n                \"propertyName\": \"resistance2Rate\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Masters\",\n                \"indicator\": \"Resistances-And-Supports\",\n                \"product\": \"Resistances\",\n                \"objectName\": \"resistance\",\n                \"propertyName\": \"resistance3Rate\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Masters\",\n                \"indicator\": \"Resistances-And-Supports\",\n                \"product\": \"Resistances\",\n                \"objectName\": \"resistance\",\n                \"propertyName\": \"resistance4Rate\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Masters\",\n                \"indicator\": \"Resistances-And-Supports\",\n                \"product\": \"Resistances\",\n                \"objectName\": \"resistance\",\n                \"propertyName\": \"resistance5Rate\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Masters\",\n                \"indicator\": \"Resistances-And-Supports\",\n                \"product\": \"Supports\",\n                \"objectName\": \"support\",\n                \"propertyName\": \"support1Rate\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Masters\",\n                \"indicator\": \"Resistances-And-Supports\",\n                \"product\": \"Supports\",\n                \"objectName\": \"support\",\n                \"propertyName\": \"support2Rate\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Masters\",\n                \"indicator\": \"Resistances-And-Supports\",\n                \"product\": \"Supports\",\n                \"objectName\": \"support\",\n                \"propertyName\": \"support3Rate\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Masters\",\n                \"indicator\": \"Resistances-And-Supports\",\n                \"product\": \"Supports\",\n                \"objectName\": \"support\",\n                \"propertyName\": \"support4Rate\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Masters\",\n                \"indicator\": \"Resistances-And-Supports\",\n                \"product\": \"Supports\",\n                \"objectName\": \"support\",\n                \"propertyName\": \"support5Rate\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Bollinger\",\n                \"indicator\": \"Bollinger-Bands\",\n                \"product\": \"Bollinger-Bands\",\n                \"objectName\": \"bollingerBand\",\n                \"propertyName\": \"movingAverage\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Bollinger\",\n                \"indicator\": \"Bollinger-Bands\",\n                \"product\": \"Bollinger-Bands\",\n                \"objectName\": \"bollingerBand\",\n                \"propertyName\": \"deviation\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Bollinger\",\n                \"indicator\": \"Bollinger-Bands\",\n                \"product\": \"Percentage-Bandwidth\",\n                \"objectName\": \"percentageBandwidth\",\n                \"propertyName\": \"movingAverage\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Bollinger\",\n                \"indicator\": \"Bollinger-Bands\",\n                \"product\": \"Percentage-Bandwidth\",\n                \"objectName\": \"percentageBandwidth\",\n                \"propertyName\": \"bandwidth\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Alligator\",\n                \"indicator\": \"Alligator\",\n                \"product\": \"Alligator\",\n                \"objectName\": \"Alligator\",\n                \"propertyName\": \"last13\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Alligator\",\n                \"indicator\": \"Alligator\",\n                \"product\": \"Alligator\",\n                \"objectName\": \"Alligator\",\n                \"propertyName\": \"previousEMA5\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Alligator\",\n                \"indicator\": \"Alligator\",\n                \"product\": \"Alligator\",\n                \"objectName\": \"Alligator\",\n                \"propertyName\": \"jaw\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Alligator\",\n                \"indicator\": \"Alligator\",\n                \"product\": \"Alligator\",\n                \"objectName\": \"Alligator\",\n                \"propertyName\": \"teeth\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Alligator\",\n                \"indicator\": \"Alligator\",\n                \"product\": \"Alligator\",\n                \"objectName\": \"Alligator\",\n                \"propertyName\": \"lips\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Alpha\",\n                \"indicator\": \"ATR\",\n                \"product\": \"ATR-RMA\",\n                \"objectName\": \"atrRMA\",\n                \"propertyName\": \"atr14\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Alpha\",\n                \"indicator\": \"ATR\",\n                \"product\": \"ATR-RMA\",\n                \"objectName\": \"atrRMA\",\n                \"propertyName\": \"atr3\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Alpha\",\n                \"indicator\": \"ATR\",\n                \"product\": \"ATR-RMA\",\n                \"objectName\": \"atrRMA\",\n                \"propertyName\": \"atr2\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Alpha\",\n                \"indicator\": \"ATR\"\n```\n\n----------------------------------------\n\nTITLE: Data Normalization Implementation\nDESCRIPTION: Implements data normalization using MinMaxScaler with separate scalers for different data splits to prevent data leakage.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nscaler_type = MinMaxScaler\n\ndef get_feature_scalers(X, scaler_type=scaler_type):\n    scalers = []\n    for name in list(X.columns[X.columns != 'date']):\n        scalers.append(scaler_type().fit(X[name].values.reshape(-1, 1)))\n    return scalers\n\ndef get_scaler_transforms(X, scalers):\n    X_scaled = []\n    for name, scaler in zip(list(X.columns[X.columns != 'date']), scalers):\n        X_scaled.append(scaler.transform(X[name].values.reshape(-1, 1)))\n    X_scaled = pd.concat([pd.DataFrame(column, columns=[name]) for name, column in \\\n                          zip(list(X.columns[X.columns != 'date']), X_scaled)], axis='columns')\n    return X_scaled\n\ndef scale_numpy_array(np_arr, scaler_type = scaler_type):\n    return scaler_type().fit_transform(np_arr, (-1,1))\n\ndef normalize_data(X_train, X_test, X_valid):\n    X_train_test = pd.concat([X_train, X_test], axis='index')\n    X_train_test_valid = pd.concat([X_train_test, X_valid], axis='index')\n\n    X_train_test_dates = X_train_test[['date']]\n    X_train_test_valid_dates = X_train_test_valid[['date']]\n\n    X_train_test = X_train_test.drop(columns=['date'])\n    X_train_test_valid = X_train_test_valid.drop(columns=['date'])\n\n    train_test_scalers = \\\n        get_feature_scalers(X_train_test, \n                            scaler_type=scaler_type)\n    train_test_valid_scalers = \\\n        get_feature_scalers(X_train_test_valid, \n                            scaler_type=scaler_type)\n\n    X_train_test_scaled = \\\n        get_scaler_transforms(X_train_test, \n                              train_test_scalers)\n    X_train_test_valid_scaled = \\\n        get_scaler_transforms(X_train_test_valid, \n                              train_test_scalers)\n    X_train_test_valid_scaled_leaking = \\\n        get_scaler_transforms(X_train_test_valid, \n                              train_test_valid_scalers)\n\n    X_train_test_scaled = \\\n        pd.concat([X_train_test_dates, \n                   X_train_test_scaled], \n                  axis='columns')\n    X_train_test_valid_scaled = \\\n        pd.concat([X_train_test_valid_dates, \n                   X_train_test_valid_scaled], \n                  axis='columns')\n    X_train_test_valid_scaled_leaking = \\\n        pd.concat([X_train_test_valid_dates, \n                   X_train_test_valid_scaled_leaking], \n                  axis='columns')\n\n    X_train_scaled = X_train_test_scaled.iloc[:X_train.shape[0]]\n    X_test_scaled = X_train_test_scaled.iloc[X_train.shape[0]:]\n    X_valid_scaled = X_train_test_valid_scaled.iloc[X_train_test.shape[0]:]\n    X_valid_scaled_leaking = X_train_test_valid_scaled_leaking.iloc[X_train_test.shape[0]:]\n\n    return (train_test_scalers, \n            train_test_valid_scalers, \n            X_train_scaled, \n            X_test_scaled, \n            X_valid_scaled, \n            X_valid_scaled_leaking)\n\ntrain_test_scalers, train_test_valid_scalers, X_train_scaled, X_test_scaled, X_valid_scaled, X_valid_scaled_leaking = \\\n    normalize_data(X_train, X_test, X_valid)\n```\n\n----------------------------------------\n\nTITLE: Displaying Prediction Results in Python\nDESCRIPTION: This snippet displays the raw prediction values (yhat) returned by the model before any denormalization is applied.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Forecast-Client/notebooks/Bitcoin_Factory_LSTM_Forecasting.ipynb#2025-04-15_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nyhat\n```\n\n----------------------------------------\n\nTITLE: Calculating Dollar Differences Between Predicted and Actual Values in Python\nDESCRIPTION: Computes the absolute dollar difference between predicted values (inv_yhat) and actual values (inv_y) in the test dataset, converting the result to float32 for precision.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndiff = (inv_yhat - inv_y) \ndiff = diff.astype('float32')\ndiff\n```\n\n----------------------------------------\n\nTITLE: Returning Predictions to Caller Program in Python\nDESCRIPTION: This code outputs the predictions for the latest closed candle (last row of predictions) in JSON format to be consumed by the caller program.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Forecast-Client/notebooks/Bitcoin_Factory_LSTM_Forecasting.ipynb#2025-04-15_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nprint('\"predictions\": ', json.dumps(inv_yhat[-1], cls=NumpyArrayEncoder) )\n```\n\n----------------------------------------\n\nTITLE: Configuring P2P Network Node in Superalgos\nDESCRIPTION: This code snippet shows the default configuration for a P2P Network Node that needs to be modified with the correct host IP address. The codeName can be left as default, but the host needs to be changed from 'localhost' to the actual IP address of the machine running the Network Node.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Network/README.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n{\n    \"codeName\": \"\",\n    \"host\": \"localhost\"\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Parameters Dataset for ML Model in Python\nDESCRIPTION: Loads a CSV file containing model parameters for the LSTM neural network. The parameters include indicators properties, timesteps, number of assets, labels, and other configuration values.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nparameters_dataset = read_csv(\n    '/tf/notebooks/parameters.csv', \n    sep=' ',\n    skipinitialspace=True,\n    error_bad_lines=False,\n    warn_bad_lines=True\n)\n\nparameters_dataset\n```\n\n----------------------------------------\n\nTITLE: Returning Error Metrics and Closing JSON Output in Python\nDESCRIPTION: This code outputs the RMSE error metric and closes the JSON response structure being returned to the caller program.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Forecast-Client/notebooks/Bitcoin_Factory_LSTM_Forecasting.ipynb#2025-04-15_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nprint(',\"errorRMSE\": %.3f' % rmse)\nprint('}')\n```\n\n----------------------------------------\n\nTITLE: Starting Data Processing Method for Trading Environment in Python\nDESCRIPTION: Begins the implementation of a method to process input data for the trading environment. This method would prepare and transform market data for use in the reinforcement learning environment.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n    def _process_data(self, df_scaled):\n        \"\"\"\n```\n\n----------------------------------------\n\nTITLE: One-liner for Updating Superalgos Docker Container\nDESCRIPTION: Single command that combines pulling the latest image, stopping the current container, and starting a new container with the updated image, useful for keeping Superalgos up to date.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Docker/README.md#2025-04-15_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose pull && docker-compose down && docker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Ray Training Configuration Setup\nDESCRIPTION: Initializes Ray, registers training environments and configures PPO trainer with optimized parameters for trading simulation.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport time\nimport ray\nimport os\nfrom ray import tune\nfrom ray.rllib.env.vector_env import VectorEnv\nfrom ray.tune.registry import register_env\n\n# Initialize Ray\nray.shutdown()\nos.environ['RAY_record_ref_creation_sites'] = '1'\nray.init()\n\ntry:\n    available_gpu_in_cluster = ray.available_resources()['GPU']\nexcept KeyError as e:\n    available_gpu_in_cluster = 0\n\navailable_cpu_in_cluster = ray.available_resources()['CPU'] if ray.available_resources()['CPU']  else 0\n\nparallel_config = find_optimal_resource_allocation(available_cpu_in_cluster, 0)\n\n# Configuration and environment setup code...\n```\n\n----------------------------------------\n\nTITLE: Loading Time Series Dataset in Python\nDESCRIPTION: Loads a time series CSV file containing the main data for model training and testing. The first column is a timestamp used as an index, and the data is separated by spaces.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntimeseries_dataset = read_csv(\n    '/tf/notebooks/time-series.csv', \n    header=0, \n    index_col=0,    #The first colum is a timestamp that will be used to index all the data.\n    sep=' ', \n    skipinitialspace=True\n)\n\ntimeseries_dataset\n```\n\n----------------------------------------\n\nTITLE: Downloading and Editing Docker Compose Configuration for Superalgos\nDESCRIPTION: Commands to download the sample docker-compose.yml file from the Superalgos repository and open it for editing. This is the first step in configuring a Docker-based Superalgos deployment.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Docker/README.md#2025-04-15_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nwget https://raw.githubusercontent.com/Superalgos/Superalgos/master/Docker/docker-compose.yml\nvim docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Resource Allocation for Ray Training\nDESCRIPTION: Determines optimal CPU and GPU resource allocation for training agents based on available cluster resources. Handles both GPU and CPU-only scenarios.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef find_optimal_resource_allocation(available_cpu, available_gpu):\n    \"\"\"\n    Finds the optimal resource allocation for the agent based on the available resources in the cluster\n    \"\"\"\n    # If we have GPU available, we allocate it all for the training, while creating as much workers as CPU cores we have minus one for the driver which holds the trainer\n    if available_gpu > 0:\n        return {\n            'num_workers': available_cpu - 1,\n            'num_cpus_per_worker': 1,\n            'num_envs_per_worker': 1,\n            'num_gpus_per_worker': 0,\n            'num_cpus_for_driver': 1,\n            'num_gpus' : available_gpu\n        }\n    # If we don't have GPU available, we allocate enough CPU cores for stepping the env (workers) while having enough for training maintaing a ratio of around 3 workers with 1 CPU to 1 driver CPU\n    else:\n        # according to the benchmark, we should allocate more workers, each with 1 cpu, letting the rest for the driver\n        num_workers = int(math.floor((available_cpu  * 75) / 100))\n        num_cpu_for_driver = available_cpu - num_workers\n        return {\n            'num_workers': num_workers,\n            'num_cpus_per_worker': 1, # this should be enough for stepping an env at once\n            'num_envs_per_worker': 1, # it doesn't seem to add any benefits to have more than one env per worker\n            'num_gpus_per_worker': 0, # the inference is done pretty fast, so there is no need to use GPU, at least not when we run one trial at once\n            'num_cpus_for_driver': num_cpu_for_driver,\n            'num_gpus' : 0\n        }\n```\n\n----------------------------------------\n\nTITLE: Duplicate Last Record in Time Series Data with Python\nDESCRIPTION: Duplicates the last record in the dataset to ensure the last prediction includes the most recent data point, as the reframing process shifts records and would otherwise ignore the last record in the final prediction.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nvalues = timeseries_dataset.values\n```\n\nLANGUAGE: python\nCODE:\n```\nlast_record = values[-1:,:]\nlast_record\n```\n\nLANGUAGE: python\nCODE:\n```\nall_records = concatenate((values, last_record), axis=0)\nall_records\n```\n\nLANGUAGE: python\nCODE:\n```\n# ensure all data is float\nvalues = all_records.astype('float32')\n```\n\n----------------------------------------\n\nTITLE: Installing Community Plugins\nDESCRIPTION: Commands to install community plugins using GitHub credentials. Forks and clones all community plugin repositories.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode setupPlugins <Your-Github-Username> <Your-Github-Personal-Access-Token>\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode setupPlugins John ghz_2pBD4Sas0iYtwQGPjTq1Xlm3Ot4KpH3RLcr5\n```\n\n----------------------------------------\n\nTITLE: Implementing Rendering Method for Trading Environment in Python\nDESCRIPTION: Provides visualization of the trading environment state, including current asset balances, accumulated rewards, and trade history. It supports both terminal output ('human' mode) and potential graphical display ('live' mode).\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n    def render(self, mode='human', **kwargs):\n        \"\"\"\n        Renders a plot with trades made by the agent.\n        \"\"\"\n        \n        if mode == 'human':\n            print(f'Accumulated Reward: {self._total_reward_accumulated} ---- Current Net Worth: {self._net_worth}')\n            print(f'Current Quote asset: {self._quote_asset} ---- Current Base asset: {self._base_asset}')\n            print(f'Number of trades: {len(self.trade_history)}')\n        \n            if(len(self.trade_history) > 0):\n                print(f'Last Action: {self.trade_history[-1][\"type\"]} {self.trade_history[-1][\"amount\"]} assets ({self.trade_history[-1][\"percent_amount\"]} %) at price {self.trade_history[-1][\"price\"]}, total: {self.trade_history[-1][\"total\"]}')\n            print(f'--------------------------------------------------------------------------------------')\n        elif mode == 'live':\n            pass\n            # if self.visualization == None:\n            #     self.visualization = LiveTradingGraph(self.df_normal, kwargs.get('title', None))\n\n            # if self._current_candle > OBSERVATION_WINDOW_SIZE:\n            #     self.visualization.render(self._current_candle, self._net_worth, self.trade_history, window_size=OBSERVATION_WINDOW_SIZE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Technical Indicators in Superalgos\nDESCRIPTION: This JSON structure defines the configuration for multiple technical indicators used in the Superalgos project. Each object represents a specific indicator property, including its data mine source, indicator name, product, object name, property name, and available range settings.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n[\n    {\n        \"dataMine\": \"Enhanced_Bollinger_Stochastic\",\n        \"indicator\": \"Enhanced_Bollinger\",\n        \"product\": \"EBollinger\",\n        \"objectName\": \"ebollinger\",\n        \"propertyName\": \"lower\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    {\n        \"dataMine\": \"Enhanced_Bollinger_Stochastic\",\n        \"indicator\": \"Enhanced_Bollinger\",\n        \"product\": \"EBollinger\",\n        \"objectName\": \"ebollinger\",\n        \"propertyName\": \"upper\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    ...\n    {\n        \"dataMine\": \"Heikin\",\n        \"indicator\": \"Heikin-Ashi\",\n        \"product\": \"Heikin-Candle\",\n        \"objectName\": \"heikincandle\",\n        \"propertyName\": \"HeikinDirection\",\n        \"range\": [\n            \"OFF\"\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Outputting the Latest Prediction as JSON in Python\nDESCRIPTION: Prints the most recent prediction value from the model as a JSON property. Only the last row is returned as it represents the prediction for the latest closed candle.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nprint(',\"predictions\": \"', inv_yhat[-1], '\"' )\n```\n\n----------------------------------------\n\nTITLE: Running Standalone Dashboards App\nDESCRIPTION: Command to run the Dashboards app standalone without launching the entire Superalgos platform. Useful when focusing only on dashboard functionality.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Dashboards/README.md#2025-04-15_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode dashboards\n```\n\n----------------------------------------\n\nTITLE: Tensorboard Setup\nDESCRIPTION: Configuration for Tensorboard visualization tool to monitor training progress and metrics.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# %load_ext tensorboard\n# %tensorboard --logdir \"/tf/notebooks/ray_results/\" --host 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Smart Money Indicators in JSON\nDESCRIPTION: This JSON configuration defines settings for various Smart Money indicators in the Superalgos project. It includes configurations for Fair Value Gap (FVG), Break of Structure Block (BOS), HL-Pivot-Points, and Rejection Block (RJB) indicators. Each object specifies the data mine, indicator, product, object name, property name, and range settings.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_17\n\nLANGUAGE: JSON\nCODE:\n```\n[\n    {\n        \"dataMine\": \"Smart_Money\",\n        \"indicator\": \"fairValueGap\",\n        \"product\": \"FVG\",\n        \"objectName\": \"FVG\",\n        \"propertyName\": \"bullBoxOneTop\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    {\n        \"dataMine\": \"Smart_Money\",\n        \"indicator\": \"BreakOfStructureBlock\",\n        \"product\": \"BOS\",\n        \"objectName\": \"BOS\",\n        \"propertyName\": \"bearBoxFourBottom\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    {\n        \"dataMine\": \"Smart_Money\",\n        \"indicator\": \"HL-Pivot-Points\",\n        \"product\": \"HL-Pivot-Points\",\n        \"objectName\": \"HLpivot\",\n        \"propertyName\": \"candleLoPrevLoc\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    {\n        \"dataMine\": \"Smart_Money\",\n        \"indicator\": \"rejectionBlock\",\n        \"product\": \"RJB\",\n        \"objectName\": \"RJB\",\n        \"propertyName\": \"bearBoxFourBottom\",\n        \"range\": [\n            \"OFF\"\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Sending Data to Dashboards App via Websocket\nDESCRIPTION: Example code showing the syntax for sending data to the Dashboards app via websocket. The message format includes timestamp, origin, type, dataset name, and JSON data objects separated by '|*|' delimiters.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Dashboards/README.md#2025-04-15_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nlet messageToSend = (new Date()).toISOString() + '|*|Platform|*|Data|*|Globals|*|' + jsonDataObj1 + '|*|' + jsonDataObj2\nsocketClient.send(messageToSend)\n```\n\n----------------------------------------\n\nTITLE: Installing Node Version Manager (nvm) using curl\nDESCRIPTION: This command installs the Node Version Manager (nvm) using curl. It's useful for installing and managing multiple Node.js versions on Linux systems.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target in CMake for OrderFetcherFromSA\nDESCRIPTION: Creates an executable target named OrderFetcherFromSA with two source files. It also conditionally sets the C++ standard to C++20 if the CMake version is greater than 3.12.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Reports/RnD/OrderFetcherFromSA/OrderFetcherFromSA/CMakeLists.txt#2025-04-15_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable (OrderFetcherFromSA \"OrderFetcherFromSA.cpp\" \"OrderFetcherFromSA.h\")\n\nif (CMAKE_VERSION VERSION_GREATER 3.12)\n  set_property(TARGET OrderFetcherFromSA PROPERTY CXX_STANDARD 20)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for BTC Accumulation Environment in Python\nDESCRIPTION: Defines maximum values for net worth and asset amounts, as well as initial conditions and observation window size for the trading environment.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# infinite number in python\nMAX_NET_WORTH = 2147483647\nMAX_NUM_QUOTE_OR_BASE_ASSET = 2147483647\n\nINITIAL_QUOTE_ASSET = 0\nINITIAL_BASE_ASSET = 1\nOBSERVATION_WINDOW_SIZE = 24 # Probably we should put it as param ?\n```\n\n----------------------------------------\n\nTITLE: Data Processing Computed Property\nDESCRIPTION: Example of a computed property function for processing incoming dashboard data\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Dashboards/README.md#2025-04-15_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n        computed: {\n            getGlobals () {\n                this.globalsObj = []\n                // If we find the right key, proceed to call for expected data objects\n                if (this.dataKey in this.incomingData) {\n                // Grab data Objects from the array assocated with the data Key\n                // For example: Plaform-Globals key holds an array of globals objects\n                    for(let dataObject of this.incomingData[this.dataKey]) {\n                        this.globalsObj.push(dataObject)\n                    }\n                }\n                // Return all received data objects\n                return this.globalsObj\n            },\n        }\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites with Homebrew on macOS\nDESCRIPTION: This command installs Git, Node.js, npm, and Python 3.9 using Homebrew on macOS. It's a quick way to set up the required dependencies for Superalgos.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nbrew install git node npm python@3.9\n```\n\n----------------------------------------\n\nTITLE: Outputting RMSE Error as JSON and Closing JSON Object in Python\nDESCRIPTION: Prints the RMSE (Root Mean Squared Error) value as a JSON property with 3 decimal precision, and closes the JSON object. This completes the JSON response to the caller program.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_LSTM.ipynb#2025-04-15_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nprint(',\"errorRMSE\": %.3f' % rmse)\nprint('}')\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Tasks in Mining Workspace\nDESCRIPTION: Configuration for the data tasks node inside BTC/USDT/Candles/Candles/Exchange Raw Data/Exchange Raw Data Sensor Bot, specifying the start date for data collection.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Server/README.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"startDate\": \"2017-06-01\"\n}\n```\n\n----------------------------------------\n\nTITLE: Binance Credentials JSON Structure for API Access\nDESCRIPTION: JSON format for storing Binance API credentials in a key file. The file needs to be stored in the My-Secrets folder of the Superalgos directory to prevent accidental exposure of API keys.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Reports/TradeFetcher/README.md#2025-04-15_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"apiKey\": \"VALUE\",\n    \"secret\": \"VALUE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Machine Learning Parameters in Superalgos\nDESCRIPTION: This snippet defines the machine learning parameters used for training models in Superalgos. It specifies BTC as the asset, 1-hour timeframe, 10 lag timesteps, 80% training dataset allocation, 750 epochs, and 50 LSTM neurons.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n\"librariesIndicators\": [],\n\"parametersRanges\": {\n    \"LIST_OF_ASSETS\": [\n        [\n            \"BTC\"\n        ]\n    ],\n    \"LIST_OF_TIMEFRAMES\": [\n        [\n            \"01-hs\"\n        ]\n    ],\n    \"NUMBER_OF_LAG_TIMESTEPS\": [\n        10\n    ],\n    \"PERCENTAGE_OF_DATASET_FOR_TRAINING\": [\n        80\n    ],\n    \"NUMBER_OF_EPOCHS\": [\n        750\n    ],\n    \"NUMBER_OF_LSTM_NEURONS\": [\n        50\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Prediction Results in Terminal Output\nDESCRIPTION: Shows an example of the terminal output after a test case completes, displaying prediction results, error metrics, and comparative performance against other forecasts in the system.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/README.md#2025-04-15_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nDocker Python Script exited with code 0\nPrediction RMSE Error: 368.83\nPredictions [candle.max, candle.min, candle.close]: 43278.008,42785.055,43028.305\nEnlapsed Time (HH:MM:SS): 14:29\n\nBest Crowd-Sourced Predictions:\n┌─────────┬────┬───────────┬───────────────┬─────────────────────┬─────────────────────────────────────┬─────────────────┐\n│ (index) │ id │ mainAsset │ mainTimeFrame │ percentageErrorRMSE │             predictions             │ forcastedCandle │\n├─────────┼────┼───────────┼───────────────┼─────────────────────┼─────────────────────────────────────┼─────────────────┤\n│    0    │ 14 │   'BTC'   │    '01-hs'    │       '0.59'        │  [ 43316.723, 42906.44, 43185.24 ]  │    [Object]     │\n│    1    │ 31 │   'BTC'   │    '02-hs'    │       '0.85'        │ [ 43278.008, 42785.055, 43028.305 ] │    [Object]     │\n└─────────┴────┴───────────┴───────────────┴─────────────────────┴─────────────────────────────────────┴─────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Running Superalgos Network Nodes\nDESCRIPTION: Command line instructions for running Superalgos network nodes. The first command runs the default network node, while the second allows running a specific node by number from your user profile.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README_Signals.md#2025-04-15_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnode network\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnode network-node-2\n```\n\n----------------------------------------\n\nTITLE: Test-Client Sensor Bot Configuration\nDESCRIPTION: Configuration settings for the Test-Client Sensor Bot Instance including network settings and client instance name\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/README.md#2025-04-15_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"networkCodeName\": \"Testnet\",\n    \"targetSuperalgosHost\": \"localhost\",\n    \"targetSuperalgosHttpPort\": 34248,\n    \"logTrainingOutput\": false,\n    \"clientInstanceName\": \"Laptop-Lenovo-01\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container on Ubuntu/Linux\nDESCRIPTION: Command to run the Bitcoin Factory Machine Learning Docker container on Ubuntu/Linux, with proper path configuration for the notebooks directory.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/README.md#2025-04-15_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --gpus all -it --rm --shm-size=4.37gb --name Bitcoin-Factory-ML -v /Users/Your-User-Name/Superalgos/Bitcoin-Factory/Test-Client/notebooks:/tf/notebooks -p 8888:8888 bitcoin-factory-machine-learning\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Storage Container for Social Trading\nDESCRIPTION: JSON configuration for setting up a GitHub Storage Container that will store user profiles, bots, and posts. This must be created in the Superalgos Governance workspace.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Social-Trading/ReadMe.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"storageProvider\": \"Your-GitHub-UserName\",\n  \"storageContainer\": \"The-Name-of-Your-Repo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cleanup Operations for Ray Tune Trading Environment\nDESCRIPTION: Performs cleanup operations after model training and evaluation, including removing temporary result files and shutting down the Ray framework. Signals the end of the RL scenario execution to the parent system.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# Cleanup\nos.remove('/tf/notebooks/training_results.json')\nos.remove('/tf/notebooks/evaluation_results.json')\nray.shutdown()\nsys.stdout.write('RL_SCENARIO_END')\nsys.stdout.write('\\n')\n```\n\n----------------------------------------\n\nTITLE: Upgrading Superalgos Docker Container\nDESCRIPTION: Commands to pull the latest Superalgos Docker image, stop the running container, and start a new one with the updated image.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Docker/README.md#2025-04-15_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull ghcr.io/superalgos/superalgos:latest\ndocker stop superalgos\ndocker run \\\n  -d \\\n  --rm \\\n  --name superalgos \\\n  --user $(id -u):$(id -g) \\\n  -p 18041:18041 \\\n  -p 34248:34248 \\\n  -v $(pwd)/My-Data-Storage:/app/Platform/My-Data-Storage \\\n  -v $(pwd)/My-Log-Files:/app/Platform/My-Log-Files \\\n  -v $(pwd)/My-Workspaces:/app/Platform/My-Workspaces \\\n  -v $(pwd)/My-Network-Nodes-Data:/app/Platform/My-Network-Nodes-Data \\\n  -v $(pwd)/My-Social-Trading-Data:/app/Platform/My-Social-Trading-Data \\\n  ghcr.io/superalgos/superalgos:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring SocialTradingDesktopApp Node\nDESCRIPTION: JSON configuration for a socialTradingDesktopApp node that needs to be added to the user profile. This connects the app to the user's profile and GitHub storage.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Social-Trading/ReadMe.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"userProfile\": {\n    \"id\": \"Superalgos Generated\",\n    \"codeName\": \"GitHub UserName\"\n  },\n  \"storageProvider\": {\n    \"name\": \"Github\",\n    \"userName\": \"GitHub UserName\",\n    \"token\": \"GitHub-Token\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Node Version Manager (nvm) using wget\nDESCRIPTION: This command installs the Node Version Manager (nvm) using wget. It's an alternative to the curl method for systems that have wget available.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Running Superalgos Docker Container\nDESCRIPTION: Basic command to run the Superalgos Docker container, removing it after exit.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Docker/README.md#2025-04-15_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm ghcr.io/superalgos/superalgos:latest\n```\n\n----------------------------------------\n\nTITLE: Dashboard Routes Configuration\nDESCRIPTION: Example of existing routes configuration in the index file\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Dashboards/README.md#2025-04-15_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/',\n    name: 'Home',\n    component: HomeView\n  },\n  {\n    path: '/Developers',\n    name: 'Developers',\n    component: DevelopersView\n  }\n  \n]\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Bash command to install all required Node.js dependencies for the project using npm.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Social-Trading/ReadMe.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js v20 using nvm\nDESCRIPTION: This command uses nvm to install Node.js version 20. It's useful for getting a newer version of Node.js on systems with outdated package repositories.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nnvm install 20\n```\n\n----------------------------------------\n\nTITLE: Testing the Docker Container Setup\nDESCRIPTION: Command to execute a test model within the running Docker container to verify the correct configuration and path setup.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/README.md#2025-04-15_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it Bitcoin-Factory-ML python /tf/notebooks/Bitcoin_Factory_LSTM.py\n```\n\n----------------------------------------\n\nTITLE: Adding New Dashboard Route\nDESCRIPTION: Complete routes configuration including the new dashboard route\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Dashboards/README.md#2025-04-15_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/',\n    name: 'Home',\n    component: HomeView\n  },\n  {\n    path: '/Developers',\n    name: 'Developers',\n    component: DevelopersView\n  },\n    {\n    path: '/myNewDashboard',\n    name: 'myNewDashboard',\n    component: MyNewDashboardView\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Executing Superalgos Ubuntu Installer Script\nDESCRIPTION: Command to run the Ubuntu Superalgos installer script. This launches the installation process that will set up Superalgos and its dependencies.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Launch-Script/Ubuntu+/README.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./Ubuntu_SA_Installer.sh\n```\n\n----------------------------------------\n\nTITLE: Running the Superalgos Platform\nDESCRIPTION: Commands to launch the Superalgos platform with various options including minimal memory mode and specific workspace loading.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnode platform\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode platform <options> <project> <workspace>\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode platform Foundations Blank-Template\n```\n\n----------------------------------------\n\nTITLE: Starting a Superalgos Network Node\nDESCRIPTION: This command starts the Superalgos Network Node. It should be run from the main Superalgos folder after completing all the configuration steps outlined in the guide.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Network/README.md#2025-04-15_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode network\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Server App JSON\nDESCRIPTION: JSON configuration for the Task Server App node that needs to be added to the user profile\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/README.md#2025-04-15_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"codeName\": \"Task-Server-App-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Terminal Output for the Test Client Task\nDESCRIPTION: Shows an example of the terminal output when running the Bitcoin Factory Test Client Task, displaying the test case parameters and configurations for the machine learning model.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/README.md#2025-04-15_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n-------------------------------------------------------- Test Case # 1 / 3192 --------------------------------------------------------\n\nStarting at this GMT Datetime:  2022-03-24T10:00:55.115Z\n\nParameters Received for this Test:\n┌────────────────────────────────────┬─────────┬────────┐\n│              (index)               │    0    │ Values │\n├────────────────────────────────────┼─────────┼────────┤\n│           LIST_OF_ASSETS           │  'BTC'  │        │\n│         LIST_OF_TIMEFRAMES         │ '03-hs' │        │\n│  NUMBER_OF_INDICATORS_PROPERTIES   │         │   5    │\n│      NUMBER_OF_LAG_TIMESTEPS       │         │   8    │\n│          NUMBER_OF_ASSETS          │         │   1    │\n│          NUMBER_OF_LABELS          │         │   3    │\n│ PERCENTAGE_OF_DATASET_FOR_TRAINING │         │   80   │\n│         NUMBER_OF_FEATURES         │         │   5    │\n│          NUMBER_OF_EPOCHS          │         │  300   │\n│       NUMBER_OF_LSTM_NEURONS       │         │   50   │\n└────────────────────────────────────┴─────────┴────────┘\n```\n\n----------------------------------------\n\nTITLE: Technical Indicators Configuration\nDESCRIPTION: A comprehensive JSON structure defining technical indicators with their data sources, properties and settings. Each indicator entry specifies the data mine source, indicator name, product identifier, object name, property to track and range settings.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dataMine\": \"Pluvtech\",\n    \"indicator\": \"McGinley\",\n    \"product\": \"MD\",\n    \"objectName\": \"MD\",\n    \"propertyName\": \"closePrice\",\n    \"range\": [\n        \"OFF\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DeepL Translator in Java\nDESCRIPTION: This code snippet shows how to initialize the DeepL translator with an authorization key. The code creates a Translator instance that will be used to perform translations in the Superalgos project.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Translator/README.md#2025-04-15_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nTranslator translator = new Translator(\"e6ec7277-1288-6ac3-3451-db77c52900b0:fx\");\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js and npm Versions in Bash\nDESCRIPTION: Commands to check the installed versions of Node.js and npm in a command prompt or terminal. Used for verifying if the system meets the minimum version requirements for Superalgos.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\nnpm -v\n```\n\n----------------------------------------\n\nTITLE: Configuring Technical Indicators in Superalgos Platform (JSON)\nDESCRIPTION: JSON configuration for various technical indicators in the Superalgos trading platform. Each object defines a specific indicator property with its data source (dataMine), indicator type, product identifier, object reference name, property name, and display range setting (most are set to \"OFF\").\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n                \"product\": \"ATR-SMA\",\n                \"objectName\": \"atrSMA\",\n                \"propertyName\": \"atr14\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Alpha\",\n                \"indicator\": \"ATR\",\n                \"product\": \"ATR-SMA\",\n                \"objectName\": \"atrSMA\",\n                \"propertyName\": \"atr3\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Alpha\",\n                \"indicator\": \"ATR\",\n                \"product\": \"ATR-SMA\",\n                \"objectName\": \"atrSMA\",\n                \"propertyName\": \"atr2\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Alpha\",\n                \"indicator\": \"ROC\",\n                \"product\": \"ROC-76\",\n                \"objectName\": \"roc76\",\n                \"propertyName\": \"value\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Alpha\",\n                \"indicator\": \"ROC\",\n                \"product\": \"ROC-32\",\n                \"objectName\": \"roc32\",\n                \"propertyName\": \"value\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Alpha\",\n                \"indicator\": \"ROC\",\n                \"product\": \"ROC-9\",\n                \"objectName\": \"roc9\",\n                \"propertyName\": \"value\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Alpha\",\n                \"indicator\": \"Stochastic\",\n                \"product\": \"Stoch-14-3-3\",\n                \"objectName\": \"stoch1433\",\n                \"propertyName\": \"slowLine\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Alpha\",\n                \"indicator\": \"Stochastic\",\n                \"product\": \"Stoch-14-3-3\",\n                \"objectName\": \"stoch1433\",\n                \"propertyName\": \"fastLine\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Anchored_VWAP\",\n                \"indicator\": \"anchoredVWAP\",\n                \"product\": \"anchoredVWAP\",\n                \"objectName\": \"anchoredVWAP\",\n                \"propertyName\": \"high\",\n                \"range\": [\n                    \n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Anchored_VWAP\",\n                \"indicator\": \"anchoredVWAP\",\n                \"product\": \"anchoredVWAP\",\n                \"objectName\": \"anchoredVWAP\",\n                \"propertyName\": \"low\",\n                \"range\": [\n                    \n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Anchored_VWAP\",\n                \"indicator\": \"anchoredVWAP\",\n                \"product\": \"anchoredVWAP\",\n                \"objectName\": \"anchoredVWAP\",\n                \"propertyName\": \"botLow\",\n                \"range\": [\n                    \n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Anchored_VWAP\",\n                \"indicator\": \"anchoredVWAP\",\n                \"product\": \"anchoredVWAP\",\n                \"objectName\": \"anchoredVWAP\",\n                \"propertyName\": \"botMid\",\n                \"range\": [\n                    \n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Anchored_VWAP\",\n                \"indicator\": \"anchoredVWAP\",\n                \"product\": \"anchoredVWAP\",\n                \"objectName\": \"anchoredVWAP\",\n                \"propertyName\": \"topHigh\",\n                \"range\": [\n                    \n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Anchored_VWAP\",\n                \"indicator\": \"anchoredVWAP\",\n                \"product\": \"anchoredVWAP\",\n                \"objectName\": \"anchoredVWAP\",\n                \"propertyName\": \"topMid\",\n                \"range\": [\n                    \n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Barcelona\",\n                \"indicator\": \"Koncorde\",\n                \"product\": \"Koncorde\",\n                \"objectName\": \"koncorde\",\n                \"propertyName\": \"histogram\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Barcelona\",\n                \"indicator\": \"Koncorde\",\n                \"product\": \"Koncorde\",\n                \"objectName\": \"koncorde\",\n                \"propertyName\": \"signal\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Barcelona\",\n                \"indicator\": \"Koncorde\",\n                \"product\": \"Koncorde\",\n                \"objectName\": \"koncorde\",\n                \"propertyName\": \"green\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Barcelona\",\n                \"indicator\": \"Koncorde\",\n                \"product\": \"Koncorde\",\n                \"objectName\": \"koncorde\",\n                \"propertyName\": \"brown\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Barcelona\",\n                \"indicator\": \"Koncorde\",\n                \"product\": \"Koncorde\",\n                \"objectName\": \"koncorde\",\n                \"propertyName\": \"blue\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Barcelona\",\n                \"indicator\": \"Koncorde\",\n                \"product\": \"koncorde_pattern\",\n                \"objectName\": \"koncorde_pattern\",\n                \"propertyName\": \"pattern\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Barcelona\",\n                \"indicator\": \"Koncorde\",\n                \"product\": \"koncorde_pattern\",\n                \"objectName\": \"koncorde_pattern\",\n                \"propertyName\": \"trend\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Chande\",\n                \"indicator\": \"ChandeForecastOscillator\",\n                \"product\": \"CFO\",\n                \"objectName\": \"CFO\",\n                \"propertyName\": \"CFO\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Chande\",\n                \"indicator\": \"ChandeMomentumOscillator\",\n                \"product\": \"CMO\",\n                \"objectName\": \"CMO\",\n                \"propertyName\": \"CMO\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Chande\",\n                \"indicator\": \"ChandeKrollStop\",\n                \"product\": \"CKS\",\n                \"objectName\": \"CKS\",\n                \"propertyName\": \"shortStop\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Chande\",\n                \"indicator\": \"ChandeKrollStop\",\n                \"product\": \"CKS\",\n                \"objectName\": \"CKS\",\n                \"propertyName\": \"longStop\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Coppock\",\n                \"indicator\": \"CoppockCurve\",\n                \"product\": \"cCurve\",\n                \"objectName\": \"cCurve\",\n                \"propertyName\": \"cCurve\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Delta\",\n                \"indicator\": \"RSI-W\",\n                \"product\": \"RSI-W14\",\n                \"objectName\": \"rsiw14\",\n                \"propertyName\": \"overbought\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Delta\",\n                \"indicator\": \"RSI-W\",\n                \"product\": \"RSI-W14\",\n                \"objectName\": \"rsiw14\",\n                \"propertyName\": \"oversold\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Delta\",\n                \"indicator\": \"RSI-W\",\n                \"product\": \"RSI-W14\",\n                \"objectName\": \"rsiw14\",\n                \"propertyName\": \"value\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Delta\",\n                \"indicator\": \"MFI\",\n                \"product\": \"MFI\",\n                \"objectName\": \"mfi\",\n                \"propertyName\": \"oversold\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Delta\",\n                \"indicator\": \"MFI\",\n                \"product\": \"MFI\",\n                \"objectName\": \"mfi\",\n                \"propertyName\": \"overbought\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Delta\",\n                \"indicator\": \"MFI\",\n                \"product\": \"MFI\",\n                \"objectName\": \"mfi\",\n                \"propertyName\": \"value\",\n                \"range\": [\n                    \"OFF\"\n                ]\n            },\n            {\n                \"dataMine\": \"Enhanced_Bollinger_Stochastic\",\n                \"indicator\": \"Enhanced_Bollinger\",\n                \"product\": \"EBollinger\",\n                \"objectName\": \"ebollinger\",\n```\n\n----------------------------------------\n\nTITLE: Implementing Environment Close Method in Python\nDESCRIPTION: Closes any open visualization resources when the environment is no longer needed. This helps clean up resources properly.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/notebooks/Bitcoin_Factory_RL.ipynb#2025-04-15_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n    def close(self):\n        if self.visualization != None:\n            self.visualization.close()\n            self.visualization = None\n```\n\n----------------------------------------\n\nTITLE: Configuring Technical Indicators in Superalgos JSON Format\nDESCRIPTION: This JSON structure defines configuration settings for various technical indicators in the Superalgos platform. Each entry specifies a technical indicator with its data mine source, indicator type, product, object name, property name, and display range settings (primarily set to 'OFF').\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"propertyName\": \"min\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Heikin\",\n    \"indicator\": \"Heikin-Ashi\",\n    \"product\": \"Heikin-Candle\",\n    \"objectName\": \"heikincandle\",\n    \"propertyName\": \"max\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Heikin\",\n    \"indicator\": \"Heikin-Ashi\",\n    \"product\": \"Heikin-Candle\",\n    \"objectName\": \"heikincandle\",\n    \"propertyName\": \"close\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Heikin\",\n    \"indicator\": \"Heikin-Ashi\",\n    \"product\": \"Heikin-Candle\",\n    \"objectName\": \"heikincandle\",\n    \"propertyName\": \"open\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Keltner_Bollinger_Strategy\",\n    \"indicator\": \"Super-Trend143\",\n    \"product\": \"Super-Trend143\",\n    \"objectName\": \"superTrend143\",\n    \"propertyName\": \"trend\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Keltner_Bollinger_Strategy\",\n    \"indicator\": \"Super-Trend143\",\n    \"product\": \"Super-Trend143\",\n    \"objectName\": \"superTrend143\",\n    \"propertyName\": \"downtrend\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Keltner_Bollinger_Strategy\",\n    \"indicator\": \"Super-Trend143\",\n    \"product\": \"Super-Trend143\",\n    \"objectName\": \"superTrend143\",\n    \"propertyName\": \"uptrend\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Keltner_Bollinger_Strategy\",\n    \"indicator\": \"Super-Trend143\",\n    \"product\": \"Super-Trend143\",\n    \"objectName\": \"superTrend143\",\n    \"propertyName\": \"atrNPeriod\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Keltner_Bollinger_Strategy\",\n    \"indicator\": \"Super-Trend143\",\n    \"product\": \"Super-Trend143\",\n    \"objectName\": \"superTrend143\",\n    \"propertyName\": \"trueRange\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Keltner_Bollinger_Strategy\",\n    \"indicator\": \"Keltner\",\n    \"product\": \"MAMA\",\n    \"objectName\": \"MAMA\",\n    \"propertyName\": \"closePrice\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Keltner_Bollinger_Strategy\",\n    \"indicator\": \"Keltner\",\n    \"product\": \"MAMA\",\n    \"objectName\": \"MAMA\",\n    \"propertyName\": \"fama\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Keltner_Bollinger_Strategy\",\n    \"indicator\": \"Keltner\",\n    \"product\": \"MAMA\",\n    \"objectName\": \"MAMA\",\n    \"propertyName\": \"mama\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Keltner_Bollinger_Strategy\",\n    \"indicator\": \"Keltner\",\n    \"product\": \"Keltner\",\n    \"objectName\": \"keltner\",\n    \"propertyName\": \"lower\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Keltner_Bollinger_Strategy\",\n    \"indicator\": \"Keltner\",\n    \"product\": \"Keltner\",\n    \"objectName\": \"keltner\",\n    \"propertyName\": \"upper\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Keltner_Bollinger_Strategy\",\n    \"indicator\": \"Keltner\",\n    \"product\": \"Keltner\",\n    \"objectName\": \"keltner\",\n    \"propertyName\": \"MAMA\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Keltner_Bollinger_Strategy\",\n    \"indicator\": \"Keltner\",\n    \"product\": \"KeltnerEMA\",\n    \"objectName\": \"keltnerema\",\n    \"propertyName\": \"lower\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Keltner_Bollinger_Strategy\",\n    \"indicator\": \"Keltner\",\n    \"product\": \"KeltnerEMA\",\n    \"objectName\": \"keltnerema\",\n    \"propertyName\": \"upper\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Keltner_Bollinger_Strategy\",\n    \"indicator\": \"Keltner\",\n    \"product\": \"KeltnerEMA\",\n    \"objectName\": \"keltnerema\",\n    \"propertyName\": \"ema\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Keltner_Bollinger_Strategy\",\n    \"indicator\": \"Enhanced_Bollinger\",\n    \"product\": \"EBollinger\",\n    \"objectName\": \"ebollinger\",\n    \"propertyName\": \"lower\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Keltner_Bollinger_Strategy\",\n    \"indicator\": \"Enhanced_Bollinger\",\n    \"product\": \"EBollinger\",\n    \"objectName\": \"ebollinger\",\n    \"propertyName\": \"upper\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Keltner_Bollinger_Strategy\",\n    \"indicator\": \"Enhanced_Bollinger\",\n    \"product\": \"EBollinger\",\n    \"objectName\": \"ebollinger\",\n    \"propertyName\": \"ema\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Keltner_Bollinger_Strategy\",\n    \"indicator\": \"ATR\",\n    \"product\": \"ATR\",\n    \"objectName\": \"ATR\",\n    \"propertyName\": \"atr\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Madi_System_Mine\",\n    \"indicator\": \"RSI\",\n    \"product\": \"RSI\",\n    \"objectName\": \"rsi\",\n    \"propertyName\": \"valueD\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Madi_System_Mine\",\n    \"indicator\": \"RSI\",\n    \"product\": \"RSI\",\n    \"objectName\": \"rsi\",\n    \"propertyName\": \"valueK\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Madi_System_Mine\",\n    \"indicator\": \"RSI\",\n    \"product\": \"RSI\",\n    \"objectName\": \"rsi\",\n    \"propertyName\": \"stochRSI\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Madi_System_Mine\",\n    \"indicator\": \"RSI\",\n    \"product\": \"RSI\",\n    \"objectName\": \"rsi\",\n    \"propertyName\": \"rsi\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Madi_System_Mine\",\n    \"indicator\": \"MADI\",\n    \"product\": \"MADI\",\n    \"objectName\": \"MADI\",\n    \"propertyName\": \"d\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Madi_System_Mine\",\n    \"indicator\": \"MADI\",\n    \"product\": \"MADI\",\n    \"objectName\": \"MADI\",\n    \"propertyName\": \"lower\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Madi_System_Mine\",\n    \"indicator\": \"MADI\",\n    \"product\": \"MADI\",\n    \"objectName\": \"MADI\",\n    \"propertyName\": \"upper\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Madi_System_Mine\",\n    \"indicator\": \"MADI\",\n    \"product\": \"MADI\",\n    \"objectName\": \"MADI\",\n    \"propertyName\": \"madi\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Mayer_Multiple\",\n    \"indicator\": \"MayerMultiple\",\n    \"product\": \"MayerMultiple\",\n    \"objectName\": \"MayerMultiple\",\n    \"propertyName\": \"MayerMultiple\",\n    \"range\": [\n        \n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Mayer_Multiple\",\n    \"indicator\": \"MayerMultipleEMA\",\n    \"product\": \"MayerMultipleEMA\",\n    \"objectName\": \"MayerMultipleEMA\",\n    \"propertyName\": \"MayerMultiple\",\n    \"range\": [\n        \n        \"OFF\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: OrderFetcherFromSA Usage Examples\nDESCRIPTION: Example commands showing how to fetch order data for Binance exchange and output to screen or save to CSV file.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Reports/RnD/OrderFetcherFromSA/README.md#2025-04-15_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nOrderFetcherFromSA -e binance -m 10\n\nOrderFetcherFromSA -e binance -m 10 > FetchedOrderData.csv\n```\n\n----------------------------------------\n\nTITLE: Configuring Technical Indicators in Superalgos Platform\nDESCRIPTION: JSON configuration for various technical indicators including Normalized Stochastic, RSI, and Fixed Percentage Grid systems. Each entry defines a data mine, indicator, product, object name, property name, and range setting which is currently set to 'OFF' for all indicators.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n[\n    {\n        \"dataMine\": \"Normalized_Momentum\",\n        \"indicator\": \"Normalized_Stochastic\",\n        \"product\": \"Normalized_Stochastic\",\n        \"objectName\": \"Normalized_Stochastic\",\n        \"propertyName\": \"maz\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    {\n        \"dataMine\": \"Normalized_Momentum\",\n        \"indicator\": \"Normalized_Stochastic\",\n        \"product\": \"Normalized_Stochastic\",\n        \"objectName\": \"Normalized_Stochastic\",\n        \"propertyName\": \"lower\",\n        \"range\": [\n            \"OFF\"\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Raspbian Linux\nDESCRIPTION: Series of commands to install Docker and its dependencies on Raspbian Linux, including adding GPG keys and configuring the official repository.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Docker/README.md#2025-04-15_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get update\nsudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n\ncurl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\necho \\\n  \"deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose\n```\n\n----------------------------------------\n\nTITLE: Configuring Indicator Visualization Settings in JSON\nDESCRIPTION: This code snippet defines configuration objects for various technical indicators in the Superalgos platform. Each object specifies a data structure that includes the dataMine source, indicator name, product type, object name, property name, and display range settings. Most indicators are set to 'OFF' for visualization.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Denmark\",\n    \"product\": \"Pivot-Points-Denmark\",\n    \"objectName\": \"PivotDenmark\",\n    \"propertyName\": \"s1\",\n    \"range\": [\n        \"OFF\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Example in Platform App\nDESCRIPTION: Demonstrates how to use the logger in the Platform app with the SA.logger.info method. This approach automatically adds date stamps and method labels to log entries.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README_Logging.md#2025-04-15_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nSA.logger.info('Superalgos Platform App is Running!')\n```\n\n----------------------------------------\n\nTITLE: Configuring Omega-Grids periodBasedGrid and bbGrid Properties in JSON\nDESCRIPTION: Configuration for various grid properties of the Omega-Grids data mine indicators. Each object specifies a dataMine, indicator, product, objectName, propertyName, and range setting. All grid properties are currently disabled with an 'OFF' setting.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"dataMine\": \"Omega-Grids\",\n    \"indicator\": \"periodBasedGrid\",\n    \"product\": \"periodBasedGrid\",\n    \"objectName\": \"periodBasedGrid\",\n    \"propertyName\": \"gridRange\",\n    \"range\": [\n        \"OFF\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Container Terminal Output\nDESCRIPTION: Example output when the Docker container is running successfully, showing Jupyter notebook server details\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/README.md#2025-04-15_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n[I 12:58:36.546 NotebookApp] Writing notebook server cookie secret to /home/ubuntu/.local/share/jupyter/runtime/notebook_cookie_secret\n[I 12:58:37.532 NotebookApp] Serving notebooks from local directory: /tf/notebooks\n[I 12:58:37.532 NotebookApp] Jupyter Notebook 6.4.10 is running at:\n[I 12:58:37.533 NotebookApp] http://aa1b305587bd:8888/?token=49c135d693e0b4d07d8c0164410ee6fc4593ac5e0578a34a\n[I 12:58:37.533 NotebookApp]  or http://127.0.0.1:8888/?token=49c135d693e0b4d07d8c0164410ee6fc4593ac5e0578a34a\n[I 12:58:37.533 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).\n[C 12:58:37.544 NotebookApp]\n\n    To access the notebook, open this file in a browser:\n        file:///home/ubuntu/.local/share/jupyter/runtime/nbserver-1-open.html\n    Or copy and paste one of these URLs:\n        http://aa1b305587bd:8888/?token=49c135d693e0b4d07d8c0164410ee6fc4593ac5e0578a34a\n     or http://127.0.0.1:8888/?token=49c135d693e0b4d07d8c0164410ee6fc4593ac5e0578a34a\n```\n\n----------------------------------------\n\nTITLE: Configuring Technical Indicator Properties in Superalgos\nDESCRIPTION: JSON configuration objects for various trading indicators including MACD, RSI, KAMA, Turtle, and custom indicators from different data mines. Each configuration object defines the indicator source, name, product variant, object reference name, specific property to access, and display range setting (set to 'OFF' for all indicators).\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"product\": \"MACD-122609\",\n    \"objectName\": \"macd122609\",\n    \"propertyName\": \"histogram\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Sparta\",\n    \"indicator\": \"MACD\",\n    \"product\": \"MACD-031016\",\n    \"objectName\": \"macd031016\",\n    \"propertyName\": \"histogram\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Sparta\",\n    \"indicator\": \"MACD\",\n    \"product\": \"MACD-081709\",\n    \"objectName\": \"macd081709\",\n    \"propertyName\": \"histogram\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Sparta\",\n    \"indicator\": \"MACD\",\n    \"product\": \"MACD-245209\",\n    \"objectName\": \"macd245209\",\n    \"propertyName\": \"histogram\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Sparta\",\n    \"indicator\": \"RSI\",\n    \"product\": \"RSI-14\",\n    \"objectName\": \"rsi14\",\n    \"propertyName\": \"value\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Trends\",\n    \"indicator\": \"KAMA\",\n    \"product\": \"KAMA-ind\",\n    \"objectName\": \"KAMA\",\n    \"propertyName\": \"value\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Turtles\",\n    \"indicator\": \"Turtle\",\n    \"product\": \"Turtle-S1\",\n    \"objectName\": \"turtleS1\",\n    \"propertyName\": \"direction\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Turtles\",\n    \"indicator\": \"Turtle\",\n    \"product\": \"Turtle-S1\",\n    \"objectName\": \"turtleS1\",\n    \"propertyName\": \"exit\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Turtles\",\n    \"indicator\": \"Turtle\",\n    \"product\": \"Turtle-S1\",\n    \"objectName\": \"turtleS1\",\n    \"propertyName\": \"trend\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Turtles\",\n    \"indicator\": \"Turtle\",\n    \"product\": \"Turtle-S1\",\n    \"objectName\": \"turtleS1\",\n    \"propertyName\": \"exitLow\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Turtles\",\n    \"indicator\": \"Turtle\",\n    \"product\": \"Turtle-S1\",\n    \"objectName\": \"turtleS1\",\n    \"propertyName\": \"exitHighi\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Turtles\",\n    \"indicator\": \"Turtle\",\n    \"product\": \"Turtle-S1\",\n    \"objectName\": \"turtleS1\",\n    \"propertyName\": \"entryLow\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Turtles\",\n    \"indicator\": \"Turtle\",\n    \"product\": \"Turtle-S1\",\n    \"objectName\": \"turtleS1\",\n    \"propertyName\": \"entryHigh\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Weighted_EMA_cross_strategy\",\n    \"indicator\": \"MeanBreakout\",\n    \"product\": \"EMA\",\n    \"objectName\": \"EMA\",\n    \"propertyName\": \"ema5\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Weighted_EMA_cross_strategy\",\n    \"indicator\": \"MeanBreakout\",\n    \"product\": \"EMA\",\n    \"objectName\": \"EMA\",\n    \"propertyName\": \"ema4\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Weighted_EMA_cross_strategy\",\n    \"indicator\": \"MeanBreakout\",\n    \"product\": \"EMA\",\n    \"objectName\": \"EMA\",\n    \"propertyName\": \"ema3\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Weighted_EMA_cross_strategy\",\n    \"indicator\": \"MeanBreakout\",\n    \"product\": \"EMA\",\n    \"objectName\": \"EMA\",\n    \"propertyName\": \"ema2\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Weighted_EMA_cross_strategy\",\n    \"indicator\": \"MeanBreakout\",\n    \"product\": \"EMA\",\n    \"objectName\": \"EMA\",\n    \"propertyName\": \"ema1\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Weighted_EMA_cross_strategy\",\n    \"indicator\": \"MeanBreakout\",\n    \"product\": \"MBO\",\n    \"objectName\": \"MBO\",\n    \"propertyName\": \"MBO5\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Weighted_EMA_cross_strategy\",\n    \"indicator\": \"MeanBreakout\",\n    \"product\": \"MBO\",\n    \"objectName\": \"MBO\",\n    \"propertyName\": \"MBO4\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Weighted_EMA_cross_strategy\",\n    \"indicator\": \"MeanBreakout\",\n    \"product\": \"MBO\",\n    \"objectName\": \"MBO\",\n    \"propertyName\": \"MBO3\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Weighted_EMA_cross_strategy\",\n    \"indicator\": \"MeanBreakout\",\n    \"product\": \"MBO\",\n    \"objectName\": \"MBO\",\n    \"propertyName\": \"MBO2\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Weighted_EMA_cross_strategy\",\n    \"indicator\": \"MeanBreakout\",\n    \"product\": \"MBO\",\n    \"objectName\": \"MBO\",\n    \"propertyName\": \"MBO1\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Weighted_EMA_cross_strategy\",\n    \"indicator\": \"T2I\",\n    \"product\": \"T2I\",\n    \"objectName\": \"T2I\",\n    \"propertyName\": \"t2i2\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Weighted_EMA_cross_strategy\",\n    \"indicator\": \"T2I\",\n    \"product\": \"T2I\",\n    \"objectName\": \"T2I\",\n    \"propertyName\": \"t2i1\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Weighted_EMA_cross_strategy\",\n    \"indicator\": \"BetterSineWave\",\n    \"product\": \"BSV6\",\n    \"objectName\": \"BSV6\",\n    \"propertyName\": \"bsv6\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Weighted_EMA_cross_strategy\",\n    \"indicator\": \"BetterSineWave\",\n    \"product\": \"BSV36\",\n    \"objectName\": \"BSV36\",\n    \"propertyName\": \"bsv36\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Weighted_EMA_cross_strategy\",\n    \"indicator\": \"Ratio_Momentum\",\n    \"product\": \"RMO\",\n    \"objectName\": \"RMO\",\n    \"propertyName\": \"ratio\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Weighted_EMA_cross_strategy\",\n    \"indicator\": \"WEMA_signal\",\n    \"product\": \"WEMAsignal\",\n    \"objectName\": \"WEMAsignal\",\n    \"propertyName\": \"color\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Weighted_EMA_cross_strategy\",\n    \"indicator\": \"WEMA_signal\",\n    \"product\": \"WEMAsignal\",\n    \"objectName\": \"WEMAsignal\",\n    \"propertyName\": \"filtered\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Weighted_EMA_cross_strategy\",\n    \"indicator\": \"WEMA_signal\",\n    \"product\": \"WEMAsignal\",\n    \"objectName\": \"WEMAsignal\",\n    \"propertyName\": \"signal\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Zeus\",\n    \"indicator\": \"DMI\",\n    \"product\": \"DMI\",\n    \"objectName\": \"DMI\",\n    \"propertyName\": \"adx\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Zeus\",\n    \"indicator\": \"DMI\",\n    \"product\": \"DMI\",\n    \"objectName\": \"DMI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SocialTradingDesktopApp Node in JSON\nDESCRIPTION: JSON configuration for setting up the socialTradingDesktopApp node in the user profile, including user profile ID, code name, and GitHub storage provider details.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Social-Trading/README2.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"userProfile\": {\n    \"id\": \"Superalgos Generated\",\n    \"codeName\": \"GitHub UserName\"\n  },\n  \"storageProvider\": {\n    \"name\": \"Github\",\n    \"userName\": \"GitHub UserName\",\n    \"token\": \"GitHub-Token\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Superalgos Service Logs in Bash\nDESCRIPTION: Commands to view and follow the output logs of the Superalgos systemd service using journalctl. This is useful for monitoring the Superalgos daemon's activity and troubleshooting issues.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\njournalctl -u superalgos\njournalctl -u superalgos -f\n```\n\n----------------------------------------\n\nTITLE: Configuring Trading Indicators in Superalgos (JSON)\nDESCRIPTION: This code snippet defines configuration objects for various trading indicators in the Superalgos project. It includes settings for indicators like Anchored VWAP Channel, VAR OTT, Laguerre OTT, Butterworth OTT, and Over Sampled Indicators. Each object specifies properties such as data mine, indicator name, product, object name, property name, and range settings.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n[\n    {\n        \"dataMine\": \"Omega-One\",\n        \"indicator\": \"anchoredVwapChannel\",\n        \"product\": \"anchoredVwapChannel\",\n        \"objectName\": \"anchoredVwapChannel\",\n        \"propertyName\": \"devLo1\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    {\n        \"dataMine\": \"Omega-One\",\n        \"indicator\": \"anchoredVwapChannel\",\n        \"product\": \"anchoredVwapChannel\",\n        \"objectName\": \"anchoredVwapChannel\",\n        \"propertyName\": \"devHi2\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    // ... (more similar objects) ...\n    {\n        \"dataMine\": \"Over_Sampled_Indicators\",\n        \"indicator\": \"OverSampled_Bollinger_Bands\",\n        \"product\": \"OverSampled_Bollinger_Bands\",\n        \"objectName\": \"OverSampled_Bollinger_Bands\",\n        \"propertyName\": \"upper\",\n        \"range\": [\n            \"OFF\"\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker Without Sudo on Ubuntu\nDESCRIPTION: Commands to add the current user to the Docker group in Ubuntu, allowing Docker to be run without sudo privileges, which is important for compatibility with Superalgos.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/README.md#2025-04-15_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsudo gpasswd -a $USER docker\n```\n\nLANGUAGE: shell\nCODE:\n```\nsh\nnewgrp docker\n```\n\n----------------------------------------\n\nTITLE: Configuring Sparta EMA Indicators in JSON\nDESCRIPTION: JSON configuration for various Exponential Moving Average (EMA) indicators from the Sparta dataMine. Each entry defines a specific EMA period with its product group, object name, and property name, along with a range setting that is currently disabled ('OFF').\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"dataMine\": \"Sparta\",\n        \"indicator\": \"EMA\",\n        \"product\": \"Popular-EMAs\",\n        \"objectName\": \"popularEMA\",\n        \"propertyName\": \"ema200\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    {\n        \"dataMine\": \"Sparta\",\n        \"indicator\": \"EMA\",\n        \"product\": \"Popular-EMAs\",\n        \"objectName\": \"popularEMA\",\n        \"propertyName\": \"ema100\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    {\n        \"dataMine\": \"Sparta\",\n        \"indicator\": \"EMA\",\n        \"product\": \"Popular-EMAs\",\n        \"objectName\": \"popularEMA\",\n        \"propertyName\": \"ema50\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    {\n        \"dataMine\": \"Sparta\",\n        \"indicator\": \"EMA\",\n        \"product\": \"Popular-EMAs\",\n        \"objectName\": \"popularEMA\",\n        \"propertyName\": \"ema20\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    {\n        \"dataMine\": \"Sparta\",\n        \"indicator\": \"EMA\",\n        \"product\": \"Base5-EMAs\",\n        \"objectName\": \"base5EMA\",\n        \"propertyName\": \"ema1000\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    {\n        \"dataMine\": \"Sparta\",\n        \"indicator\": \"EMA\",\n        \"product\": \"Base5-EMAs\",\n        \"objectName\": \"base5EMA\",\n        \"propertyName\": \"ema500\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    {\n        \"dataMine\": \"Sparta\",\n        \"indicator\": \"EMA\",\n        \"product\": \"Base5-EMAs\",\n        \"objectName\": \"base5EMA\",\n        \"propertyName\": \"ema250\",\n        \"range\": [\n            \"OFF\"\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for cxxopts Target in CMake\nDESCRIPTION: Configures include directories for the cxxopts target using generator expressions to handle both build and install scenarios. Sets up the current source directory for build-time includes and the 'include' directory for installed usage.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Reports/RnD/TradeAnalysis/TradeAnalysis/cxxopts/include/CMakeLists.txt#2025-04-15_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(cxxopts INTERFACE\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\n    $<INSTALL_INTERFACE:include>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Indicator Properties in JSON\nDESCRIPTION: JSON structure that defines indicator configurations including data mine sources, indicator names, products, object names, and property settings. Each entry contains metadata about specific indicator properties and their range settings which are currently set to 'OFF'.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dataMine\": \"Over_Sampled_Indicators\",\n    \"indicator\": \"OverSampled_Bollinger_Bands\",\n    \"product\": \"OverSampled_Bollinger_Bands\",\n    \"objectName\": \"OverSampled_Bollinger_Bands\",\n    \"propertyName\": \"MA\",\n    \"range\": [\n        \"OFF\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Build Commands for ARM\nDESCRIPTION: Shell commands for building the Bitcoin Factory Docker image on ARM processors\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/README.md#2025-04-15_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd ArmDockerBuild\ndocker build -t bitcoin-factory-machine-learning .\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Configuring SMA Indicators in Superalgos Trading Platform\nDESCRIPTION: JSON configuration for Simple Moving Average (SMA) indicators from the Sparta dataMine. The configuration includes multiple SMA settings across different base periods (5, 6, 7, 11) with various timeframes, all currently disabled with 'OFF' range setting.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dataMine\": \"Sparta\",\n    \"indicator\": \"SMA\",\n    \"product\": \"Base7-SMAs\",\n    \"objectName\": \"base7SMA\",\n    \"propertyName\": \"sma35\",\n    \"range\": [\n        \"OFF\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Top-Level CMake Project for OrderFetcherFromSA\nDESCRIPTION: Sets up the CMake project configuration with a minimum required version of 3.8, defines the project name as 'OrderFetcherFromSA', and includes the subdirectory with the same name as a subproject.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Reports/RnD/OrderFetcherFromSA/CMakeLists.txt#2025-04-15_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required (VERSION 3.8)\n\nproject (\"OrderFetcherFromSA\")\n\n# Include sub-projects.\nadd_subdirectory (\"OrderFetcherFromSA\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up PM2 Process Manager for Superalgos on Raspberry Pi\nDESCRIPTION: This code defines a PM2 ecosystem configuration file to manage Superalgos as a persistent process. It specifies the process name, script path, command line arguments for minimal memory usage, and the working directory where Superalgos is installed.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README_RaspberryPi.md#2025-04-15_snippet_1\n\nLANGUAGE: Javascript\nCODE:\n```\nmodule.exports = {\n  apps : [{\n    name   : \"sa\", //A process name of your choice\n    script : \"platform.js\", //The start script\n    args: \"minMemo noBrowser\", //Process arguments needed for optimal pi ioperation\n    cwd: \"/home/pi/trading/Superalgos/\" //Directory to execute the process in -- this is where the node_modules folder needs to be\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Superalgos Network Node Dashboard\nDESCRIPTION: This command launches the Superalgos Network Node Dashboard. After running this, you can access the dashboard in your browser where data will be automatically refreshed every 5 seconds.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Dashboard/README.md#2025-04-15_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Superalgos Network Node Dashboard\nDESCRIPTION: This command installs all required dependencies for the Superalgos Network Node Dashboard using npm. It should be run in the \"Superalgos-Network-Node-Dashboard\" folder after cloning the repository.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Dashboard/README.md#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for cxxopts Library in CMake\nDESCRIPTION: This CMake command sets the include directories for the cxxopts target. It specifies both build-time and install-time include paths using generator expressions.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Reports/RnD/OrderFetcherFromSA/OrderFetcherFromSA/cxxopts/include/CMakeLists.txt#2025-04-15_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(cxxopts INTERFACE\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\n    $<INSTALL_INTERFACE:include>\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Documentation Export in Superalgos\nDESCRIPTION: Command to run the documentation export process. This command triggers the conversion of schemas into HTML pages and transfers all necessary assets to the specified directory.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README_Documentation_Export.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode export-docs\n```\n\n----------------------------------------\n\nTITLE: Running Dashboards Frontend in Development Mode\nDESCRIPTION: Command for developers to run only the frontend portion of the Dashboards app in development mode, which enables hot-reloading and other development features.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Dashboards/README.md#2025-04-15_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode dashboards devFrontend\n```\n\n----------------------------------------\n\nTITLE: Test Client Instance Configuration JSON\nDESCRIPTION: JSON configuration for the Test Client Instance node requiring a unique name matching between title and codeName\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/README.md#2025-04-15_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"codeName\": \"Assign-A-Name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pivot Point Indicators in Superalgos\nDESCRIPTION: JSON configuration for various pivot point indicators in the Superalgos trading platform. The configuration controls visibility of different support and resistance levels (s1-s4, r1-r4, pivot) for Daily, Fibonacci, Woodie, and Camarilla pivot point calculations. All levels are set to \"OFF\" in this configuration.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Daily-Pivot-Points\",\n    \"product\": \"Daily-Pivot-Points\",\n    \"objectName\": \"Daypivot\",\n    \"propertyName\": \"s1\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Daily-Pivot-Points\",\n    \"product\": \"Daily-Pivot-Points\",\n    \"objectName\": \"Daypivot\",\n    \"propertyName\": \"r4\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Daily-Pivot-Points\",\n    \"product\": \"Daily-Pivot-Points\",\n    \"objectName\": \"Daypivot\",\n    \"propertyName\": \"r3\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Daily-Pivot-Points\",\n    \"product\": \"Daily-Pivot-Points\",\n    \"objectName\": \"Daypivot\",\n    \"propertyName\": \"r2\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Daily-Pivot-Points\",\n    \"product\": \"Daily-Pivot-Points\",\n    \"objectName\": \"Daypivot\",\n    \"propertyName\": \"r1\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Daily-Pivot-Points\",\n    \"product\": \"Daily-Pivot-Points\",\n    \"objectName\": \"Daypivot\",\n    \"propertyName\": \"pivot\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Fib\",\n    \"product\": \"Pivot-Points-Fib\",\n    \"objectName\": \"PivotFib\",\n    \"propertyName\": \"s3\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Fib\",\n    \"product\": \"Pivot-Points-Fib\",\n    \"objectName\": \"PivotFib\",\n    \"propertyName\": \"s2\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Fib\",\n    \"product\": \"Pivot-Points-Fib\",\n    \"objectName\": \"PivotFib\",\n    \"propertyName\": \"s1\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Fib\",\n    \"product\": \"Pivot-Points-Fib\",\n    \"objectName\": \"PivotFib\",\n    \"propertyName\": \"r3\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Fib\",\n    \"product\": \"Pivot-Points-Fib\",\n    \"objectName\": \"PivotFib\",\n    \"propertyName\": \"r2\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Fib\",\n    \"product\": \"Pivot-Points-Fib\",\n    \"objectName\": \"PivotFib\",\n    \"propertyName\": \"r1\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Fib\",\n    \"product\": \"Pivot-Points-Fib\",\n    \"objectName\": \"PivotFib\",\n    \"propertyName\": \"pivot\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Woodie\",\n    \"product\": \"Pivot-Points-Woodie\",\n    \"objectName\": \"PivotWoodie\",\n    \"propertyName\": \"s4\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Woodie\",\n    \"product\": \"Pivot-Points-Woodie\",\n    \"objectName\": \"PivotWoodie\",\n    \"propertyName\": \"s3\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Woodie\",\n    \"product\": \"Pivot-Points-Woodie\",\n    \"objectName\": \"PivotWoodie\",\n    \"propertyName\": \"s2\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Woodie\",\n    \"product\": \"Pivot-Points-Woodie\",\n    \"objectName\": \"PivotWoodie\",\n    \"propertyName\": \"s1\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Woodie\",\n    \"product\": \"Pivot-Points-Woodie\",\n    \"objectName\": \"PivotWoodie\",\n    \"propertyName\": \"r4\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Woodie\",\n    \"product\": \"Pivot-Points-Woodie\",\n    \"objectName\": \"PivotWoodie\",\n    \"propertyName\": \"r3\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Woodie\",\n    \"product\": \"Pivot-Points-Woodie\",\n    \"objectName\": \"PivotWoodie\",\n    \"propertyName\": \"r2\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Woodie\",\n    \"product\": \"Pivot-Points-Woodie\",\n    \"objectName\": \"PivotWoodie\",\n    \"propertyName\": \"r1\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Woodie\",\n    \"product\": \"Pivot-Points-Woodie\",\n    \"objectName\": \"PivotWoodie\",\n    \"propertyName\": \"pivot\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Camarilla\",\n    \"product\": \"Pivot-Points-Camarilla\",\n    \"objectName\": \"PivotCamarilla\",\n    \"propertyName\": \"s4\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Camarilla\",\n    \"product\": \"Pivot-Points-Camarilla\",\n    \"objectName\": \"PivotCamarilla\",\n    \"propertyName\": \"s3\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Camarilla\",\n    \"product\": \"Pivot-Points-Camarilla\",\n    \"objectName\": \"PivotCamarilla\",\n    \"propertyName\": \"s2\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Camarilla\",\n    \"product\": \"Pivot-Points-Camarilla\",\n    \"objectName\": \"PivotCamarilla\",\n    \"propertyName\": \"s1\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Camarilla\",\n    \"product\": \"Pivot-Points-Camarilla\",\n    \"objectName\": \"PivotCamarilla\",\n    \"propertyName\": \"r4\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Camarilla\",\n    \"product\": \"Pivot-Points-Camarilla\",\n    \"objectName\": \"PivotCamarilla\",\n    \"propertyName\": \"r3\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Camarilla\",\n    \"product\": \"Pivot-Points-Camarilla\",\n    \"objectName\": \"PivotCamarilla\",\n    \"propertyName\": \"r2\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Camarilla\",\n    \"product\": \"Pivot-Points-Camarilla\",\n    \"objectName\": \"PivotCamarilla\",\n    \"propertyName\": \"r1\",\n    \"range\": [\n        \"OFF\"\n    ]\n},\n{\n    \"dataMine\": \"Pivots\",\n    \"indicator\": \"Pivot-Points-Camarilla\",\n    \"product\": \"Pivot-Points-Camarilla\",\n    \"objectName\": \"PivotCamarilla\",\n    \"propertyName\": \"pivot\",\n    \"range\": [\n        \"OFF\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for TradeAnalysis Project\nDESCRIPTION: This CMake configuration sets up the TradeAnalysis project with a minimum CMake version of 3.8. It defines the project name and includes the TradeAnalysis subdirectory where the actual project code resides.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Reports/RnD/TradeAnalysis/CMakeLists.txt#2025-04-15_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required (VERSION 3.8)\n\nproject (\"TradeAnalysis\")\n\n# Include sub-projects.\nadd_subdirectory (\"TradeAnalysis\")\n```\n\n----------------------------------------\n\nTITLE: Component Registration\nDESCRIPTION: Example of registering components in a dashboard\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Dashboards/README.md#2025-04-15_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n        props: [\"incomingData\"],\n        components: { Tabs, ExpandableTree },\n        ...\n```\n\n----------------------------------------\n\nTITLE: Test Server Console Output\nDESCRIPTION: Example console output showing successful Test Server startup with network connection details and parameter ranges.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Server/README.md#2025-04-15_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nSuperalgos TaskServer is Running!\n\nWebsockets Client will try to Connect to Network Node via Web Sockets ........ Trying to Connect to devosonder -> P2P Network Node #1 -> 99.81.83.180:18042\nWebsockets Client Connected to Network Node via Web Sockets .................. Connected to devosonder -> P2P Network Node #1 -> 99.81.83.180:18042\n2022-06-15T10:23:12.605Z Working with these Parameter Ranges:\n┌────────────────────────────────────┬─────────────┐\n│              (index)               │      0      │\n├────────────────────────────────────┼─────────────┤\n│           LIST_OF_ASSETS           │  [ 'BTC' ]  │\n│         LIST_OF_TIMEFRAMES         │ [ '01-hs' ] │\n│      NUMBER_OF_LAG_TIMESTEPS       │     10      │\n│ PERCENTAGE_OF_DATASET_FOR_TRAINING │     80      │\n│          NUMBER_OF_EPOCHS          │     750     │\n│       NUMBER_OF_LSTM_NEURONS       │     50      │\n└────────────────────────────────────┴─────────────┘\n```\n\n----------------------------------------\n\nTITLE: Configuring Order Block (OB) Indicator Settings in JSON\nDESCRIPTION: This snippet defines configuration settings for the Order Block (OB) indicator in the Smart Money data mine. It specifies multiple properties for different box levels (bear and bull) with their ranges set to 'OFF'.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n[\n    {\n        \"dataMine\": \"Smart_Money\",\n        \"indicator\": \"orderBlock\",\n        \"product\": \"OB\",\n        \"objectName\": \"OB\",\n        \"propertyName\": \"bearBoxFourBottom\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    {\n        \"dataMine\": \"Smart_Money\",\n        \"indicator\": \"orderBlock\",\n        \"product\": \"OB\",\n        \"objectName\": \"OB\",\n        \"propertyName\": \"bearBoxFourTop\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    // ... (similar entries for other box levels)\n    {\n        \"dataMine\": \"Smart_Money\",\n        \"indicator\": \"orderBlock\",\n        \"product\": \"OB\",\n        \"objectName\": \"OB\",\n        \"propertyName\": \"bullBoxOneTop\",\n        \"range\": [\n            \"OFF\"\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Node Dependencies\nDESCRIPTION: Commands to navigate to Superalgos directory and install required node dependencies. Includes optional parameters for desktop shortcuts and TensorFlow support.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd Superalgos\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode setup\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode setup <options>\n```\n\n----------------------------------------\n\nTITLE: Drawer Component Usage\nDESCRIPTION: Example of implementing the Drawer component\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Dashboards/README.md#2025-04-15_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n<Drawer class=\"drawer-theme\" :direction=\"'right'\" :exist=\"true\" ref=\"RightDrawer\">Settings Coming Soon!</Drawer>\n```\n\n----------------------------------------\n\nTITLE: Creating Systemd Service File for Superalgos Daemon\nDESCRIPTION: Configuration file for creating a systemd service to run Superalgos as a daemon on a headless Linux server. This allows Superalgos to run independently of user login sessions.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=Superalgos Platform Client\n\n[Service]\nType=simple\nUser=<user>\nWorkingDirectory=/path/to/Superalgos\nExecStart=/usr/bin/node platform minMemo noBrowser\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Configuring Omega-Grids and Omega-One Trading Indicators in Superalgos\nDESCRIPTION: JSON configuration for various trading indicators from the Omega-Grids and Omega-One dataMines. Each object specifies the indicator name, product, object name, property name, and display range setting (set to \"OFF\").\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dataMine\": \"Omega-Grids\",\n    \"indicator\": \"smoothedAtrGrid\",\n    \"product\": \"smoothedAtrGrid\",\n    \"objectName\": \"smoothedAtrGrid\",\n    \"propertyName\": \"grid2\",\n    \"range\": [\n        \"OFF\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting npm and Running Node Setup in Bash\nDESCRIPTION: Commands to reset npm and run the Superalgos node setup. This is useful when encountering unexpected errors during the setup process.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnpm ci --omit=optional\nnode setup\n```\n\n----------------------------------------\n\nTITLE: Expandable Tree Component Usage\nDESCRIPTION: Example of implementing the ExpandableTree component for data visualization\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Dashboards/README.md#2025-04-15_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n<ExpandableTree v-for=\"(value, name) in objs\" :value=\"value\" :name=\"name\" :key=\"name\" :depth=\"0\"></ExpandableTree>\n```\n\n----------------------------------------\n\nTITLE: Docker Build Commands for x86\nDESCRIPTION: Shell commands for building the Bitcoin Factory Docker image on x86 processors\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/README.md#2025-04-15_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd DockerBuild\ndocker build -t bitcoin-factory-machine-learning .\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Configuring Smart Money and Sparta Indicators in Superalgos\nDESCRIPTION: This code defines configuration settings for various trading indicators available in the Superalgos platform. Each JSON object specifies a dataMine, indicator, product, object name, property name, and the range setting (currently 'OFF'). The indicators include rejectionBlock (RJB), PPDD, highVolumeBar (HVB), and various types of SMAs (Simple Moving Averages).\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n                \"dataMine\": \"Smart_Money\",\n                \"indicator\": \"rejectionBlock\",\n                \"product\": \"RJB\",\n                \"objectName\": \"RJB\",\n                \"propertyName\": \"bullBoxFourBottom\",\n                \"range\": [\n                    \n                    \"OFF\"\n                ]\n            }\n```\n\n----------------------------------------\n\nTITLE: Configuring Omega-Grids bbGrid and smoothedAtrGrid Indicators in JSON\nDESCRIPTION: This JSON configuration defines settings for bbGrid and smoothedAtrGrid indicators in the Omega-Grids data mine. Each entry specifies a grid level with properties such as dataMine, indicator, product, objectName, propertyName, and range. All grid levels are currently set to 'OFF'.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"dataMine\": \"Omega-Grids\",\n        \"indicator\": \"bbGrid\",\n        \"product\": \"bbGrid\",\n        \"objectName\": \"bbGrid\",\n        \"propertyName\": \"grid12\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    {\n        \"dataMine\": \"Omega-Grids\",\n        \"indicator\": \"bbGrid\",\n        \"product\": \"bbGrid\",\n        \"objectName\": \"bbGrid\",\n        \"propertyName\": \"grid11\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    ...\n    {\n        \"dataMine\": \"Omega-Grids\",\n        \"indicator\": \"smoothedAtrGrid\",\n        \"product\": \"smoothedAtrGrid\",\n        \"objectName\": \"smoothedAtrGrid\",\n        \"propertyName\": \"grid3\",\n        \"range\": [\n            \"OFF\"\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites using Brewfile on macOS\nDESCRIPTION: This command uses the Brewfile included in the Superalgos repository to install all required dependencies on macOS. It should be run in the same directory as the Brewfile.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nbrew bundle\n```\n\n----------------------------------------\n\nTITLE: Configuring Fair Value Gap (FVG) Indicator Settings in JSON\nDESCRIPTION: This snippet defines configuration settings for the Fair Value Gap (FVG) indicator in the Smart Money data mine. It specifies multiple properties for different box levels (bear and bull) with their ranges set to 'OFF'.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n[\n    {\n        \"dataMine\": \"Smart_Money\",\n        \"indicator\": \"fairValueGap\",\n        \"product\": \"FVG\",\n        \"objectName\": \"FVG\",\n        \"propertyName\": \"bearBoxFourBottom\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    {\n        \"dataMine\": \"Smart_Money\",\n        \"indicator\": \"fairValueGap\",\n        \"product\": \"FVG\",\n        \"objectName\": \"FVG\",\n        \"propertyName\": \"bearBoxFourTop\",\n        \"range\": [\n            \"OFF\"\n        ]\n    },\n    // ... (similar entries for other box levels)\n    {\n        \"dataMine\": \"Smart_Money\",\n        \"indicator\": \"fairValueGap\",\n        \"product\": \"FVG\",\n        \"objectName\": \"FVG\",\n        \"propertyName\": \"bullBoxOneBottom\",\n        \"range\": [\n            \"OFF\"\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring ATR Based Grid in Omega-Grids for Superalgos\nDESCRIPTION: This snippet defines the configuration for the atrBasedGrid indicator in the Omega-Grids data mine. It sets various grid levels (grid0 to grid20) and gridRange to 'OFF'.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"dataMine\": \"Omega-Grids\",\n    \"indicator\": \"atrBasedGrid\",\n    \"product\": \"atrBasedGrid\",\n    \"objectName\": \"atrBasedGrid\",\n    \"propertyName\": \"gridRange\",\n    \"range\": [\n        \"OFF\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Node Setup with Sudo in Bash\nDESCRIPTION: Command to run the Superalgos node setup with sudo privileges on Linux and Mac systems. This is necessary when installing Superalgos in an administratively protected directory.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsudo node setup\n```\n\n----------------------------------------\n\nTITLE: Configuring TradeAnalysis Executable with CMake\nDESCRIPTION: This CMake snippet defines the TradeAnalysis executable target and its source files. It also sets the C++ standard to C++20 if the CMake version is greater than 3.12.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Reports/RnD/TradeAnalysis/TradeAnalysis/CMakeLists.txt#2025-04-15_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable (TradeAnalysis \"TradeAnalysis.cpp\" \"TradeAnalysis.h\" \"SummaryLine.h\"  \"SummaryLine.cpp\"   \"Line.h\" \"Line.cpp\")\n\nif (CMAKE_VERSION VERSION_GREATER 3.12)\n  set_property(TARGET TradeAnalysis PROPERTY CXX_STANDARD 20)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed Percentage Grid in Omega-Grids for Superalgos\nDESCRIPTION: This snippet defines the configuration for the fixedPercentageGrid indicator in the Omega-Grids data mine. It sets various grid levels (grid0 to grid8) to 'OFF'.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Round-5.md#2025-04-15_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"dataMine\": \"Omega-Grids\",\n    \"indicator\": \"fixedPercentageGrid\",\n    \"product\": \"fixedPercentageGrid\",\n    \"objectName\": \"fixedPercentageGrid\",\n    \"propertyName\": \"grid8\",\n    \"range\": [\n        \"OFF\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Installed Versions\nDESCRIPTION: These commands check the installed versions of Node.js, npm, and Git. They should be run after installation to ensure all prerequisites are correctly installed.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnode -v\nnpm -v\ngit --version\n```\n\n----------------------------------------\n\nTITLE: Platform App Log CLI Output Format\nDESCRIPTION: Shows the command line output format for logs from the Platform app, which includes timestamp, log level, app identifier (SA), and the message.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README_Logging.md#2025-04-15_snippet_2\n\nLANGUAGE: log\nCODE:\n```\n2023-01-31T16:44:06.513Z | info | SA | Superalgos Platform App is Running!\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Windows using Chocolatey\nDESCRIPTION: Command to install Docker Desktop on Windows using the Chocolatey package manager.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Docker/README.md#2025-04-15_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchoco install docker-desktop\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for TradeAnalysis on Linux\nDESCRIPTION: Commands to install the cmake build system prerequisite for TradeAnalysis on Linux/Raspberry Pi systems.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Reports/RnD/TradeAnalysis/README.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install cmake\n```\n\n----------------------------------------\n\nTITLE: Running Dashboards App with Platform\nDESCRIPTION: Command to run the Dashboards app together with the Superalgos platform. This is the standard way to launch the app for most users.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Dashboards/README.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode platform dashboards\n```\n\n----------------------------------------\n\nTITLE: Installing Build Tools on RHEL-based Linux for Non-x86 Chipsets\nDESCRIPTION: This command installs essential build tools (make, gcc, g++) on RHEL-based Linux distributions running on non-x86 chipsets like ARM.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ndnf install make gcc gcc-c++\n```\n\n----------------------------------------\n\nTITLE: Running Trader Fetcher Script with Various Options in Node.js\nDESCRIPTION: Examples of running the Trader Fetcher script with different combinations of parameters to fetch trade or order history from Binance. Shows options for displaying results on command line or writing to output files, for both current and previous month data.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Reports/TradeFetcher/README.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# generated data for current month trades with results output to the command line\nnode index --exchange binance --key-file <PATH_TO_EXCHANGE_KEY_FILE> --trades\n# generated data for current month orders with results output to the command line\nnode index --exchange binance --key-file <PATH_TO_EXCHANGE_KEY_FILE> --orders\n\n# generated data for current month traders with output writen to the provided outfile -> this file will be created or overwritten\nnode index --exchange binance --key-file <PATH_TO_EXCHANGE_KEY_FILE> --out-file <PATH_TO_OUTPUT_FILE> --trades\n# generated data for current month orders with output writen to the provided outfile -> this file will be created or overwritten\nnode index --exchange binance --key-file <PATH_TO_EXCHANGE_KEY_FILE> --out-file <PATH_TO_OUTPUT_FILE> --orders\n\n# generated data for the previous month traders with results output to the command line\nnode index --exchange binance --key-file <PATH_TO_EXCHANGE_KEY_FILE> --last-month --trades\n# generated data for the previous month orders with results output to the command line\nnode index --exchange binance --key-file <PATH_TO_EXCHANGE_KEY_FILE> --last-month --orders\n\n# generated data for the previous month trades with output writen to the provided outfile -> this file will be created or overwritten\nnode index --exchange binance --key-file <PATH_TO_EXCHANGE_KEY_FILE> --out-file <PATH_TO_OUTPUT_FILE> --last-month --trades\n# generated data for the previous month orders with output writen to the provided outfile -> this file will be created or overwritten\nnode index --exchange binance --key-file <PATH_TO_EXCHANGE_KEY_FILE> --out-file <PATH_TO_OUTPUT_FILE> --last-month --orders\n```\n\n----------------------------------------\n\nTITLE: Running the Superalgos Social Trading App\nDESCRIPTION: Bash command to start the development server for the Superalgos Social Trading App.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Social-Trading/README2.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode socialTradingVueDev\n```\n\n----------------------------------------\n\nTITLE: Conditional Signal Verification for Trading Events\nDESCRIPTION: JavaScript condition code for checking if signals are present. This is used in trading system events to verify if incoming signals exist before executing a trading action.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README_Signals.md#2025-04-15_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (signals !== undefined && signals.length > 0) {\n    true\n} else {\n    false\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server\nDESCRIPTION: Bash command to start the Vue.js development server for the Social Trading App using the socialTradingVueDev Node.js script.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Social-Trading/ReadMe.md#2025-04-15_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode socialTradingVueDev\n```\n\n----------------------------------------\n\nTITLE: Installing Build Tools on Debian-based Linux for Non-x86 Chipsets\nDESCRIPTION: This command installs essential build tools (make, gcc, g++) on Debian-based Linux distributions running on non-x86 chipsets like ARM.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\napt-get install build-essential\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with NPM\nDESCRIPTION: Bash commands for navigating to the project directory and installing dependencies using npm.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Social-Trading/README2.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ../Superalgo/Social-Trading/Vue-UI\nnpm install\ncd ../../\n```\n\n----------------------------------------\n\nTITLE: Creating New Dashboard File\nDESCRIPTION: Filename convention for creating a new Vue dashboard component\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Dashboards/README.md#2025-04-15_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nMyNewDashboardView.vue\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Docker Container Conflicts\nDESCRIPTION: Command to remove all stopped containers to resolve naming conflicts when trying to start a container with a name that's already in use.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/README.md#2025-04-15_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ndocker container prune\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Storage Container in JSON\nDESCRIPTION: JSON configuration for setting up a GitHub storage container to store user profile, bots, and posts.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Social-Trading/README2.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"storageProvider\": \"Your-GitHub-UserName\",\n  \"storageContainer\": \"The-Name-of-Your-Repo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites on RHEL-based Linux\nDESCRIPTION: This command installs Node.js and Git on RHEL-based Linux distributions like Fedora, CentOS, Rocky Linux, and AlmaLinux. It requires root privileges.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndnf install nodejs git\n```\n\n----------------------------------------\n\nTITLE: Returning to Main Directory\nDESCRIPTION: Bash command to navigate back to the main project directory after installing dependencies.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Social-Trading/ReadMe.md#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ../../\n```\n\n----------------------------------------\n\nTITLE: Building OrderFetcherFromSA Application\nDESCRIPTION: Commands to build the OrderFetcherFromSA application using CMake build system.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Reports/RnD/OrderFetcherFromSA/README.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/Superalgos/Reports/RnD/OrderFetcherFromSA/OrderFetcherFromSA\ncmake .\nmake\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js on Raspbian\nDESCRIPTION: Commands to install Node.js version 17.x on Raspberry Pi OS (64-bit) by adding the Node.js repository and installing the package.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/README.md#2025-04-15_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL https://deb.nodesource.com/setup_17.x | sudo -E bash -\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install -y nodejs\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites on Debian-based Linux\nDESCRIPTION: This command installs Node.js, npm, and Git on Debian-based Linux distributions like Ubuntu. It requires root privileges.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\napt-get install nodejs npm git\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on macOS using Homebrew\nDESCRIPTION: Commands to install Docker and docker-compose on macOS using the Homebrew package manager.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Docker/README.md#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew cask install docker\nbrew install docker-compose\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: Default robots.txt configuration that allows unrestricted access to all web crawlers. Uses standard robots.txt syntax with User-agent and Disallow directives.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Social-Trading/React-UI/frontend/public/robots.txt#2025-04-15_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Monthly Trade Reports\nDESCRIPTION: Command to create a new directory to store trade reports for a specific month, using the format YYYY-MM.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Reports/RnD/TradeAnalysis/README.md#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~/Superalgos/Reports/RnD/TradeAnalysis/My-Trade-Reports/2023-01\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Superalgos Deployment\nDESCRIPTION: Sample docker-compose.yml configuration for Superalgos deployment. It maps necessary ports and volumes, sets the user permissions, defines restart policy, and configures command line parameters.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Docker/README.md#2025-04-15_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  superalgos:\n    image: ghcr.io/superalgos/superalgos:latest\n    command: [\"minMemo\"]\n    user: \"$UID:$GID\"\n    ports:\n      - '34248:34248'\n      - '18041:18041'\n    volumes:\n      - ./My-Data-Storage:/app/Platform/My-Data-Storage\n      - ./My-Log-Files:/app/Platform/My-Log-Files\n      - ./My-Workspaces:/app/Platform/My-Workspaces\n      - ./My-Network-Nodes-Data:/app/Platform/My-Network-Nodes-Data\n      - ./My-Social-Trading-Data:/app/Platform/My-Social-Trading-Data\n    restart: on-failure\n```\n\n----------------------------------------\n\nTITLE: Configuring Indicator Settings\nDESCRIPTION: Example configuration for activating indicators in the Test Server, showing MFI indicator setup with range setting.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Server/README.md#2025-04-15_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n            {\n                \"dataMine\": \"Delta\",\n                \"indicator\": \"MFI\",\n                \"product\": \"MFI\",\n                \"objectName\": \"mfi\",\n                \"propertyName\": \"value\",\n                \"range\": [\n                    \"ON\"\n                ]\n            },\n```\n\n----------------------------------------\n\nTITLE: macOS Terminal Command for Security Settings\nDESCRIPTION: Terminal command to bypass security restrictions for the Superalgos application on macOS systems. This command removes the quarantine attribute that macOS applies to downloaded applications.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README_Packaged.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nxattr -rd com.apple.quarantine Superalgos.app\n```\n\n----------------------------------------\n\nTITLE: Building TradeAnalysis from Source on Linux\nDESCRIPTION: Commands to build the TradeAnalysis program from source code using cmake and make on Linux/Raspberry Pi systems.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Reports/RnD/TradeAnalysis/README.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/Superalgos/Reports/RnD/TradeAnalysis/TradeAnalysis\ncmake .\nmake\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Superalgos\nDESCRIPTION: Command to remove Superalgos shortcut files before manual deletion of the main directory.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnode uninstall\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Dashboard Template\nDESCRIPTION: Template structure for creating a new dashboard component with basic layout, data management, and styling\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Dashboards/README.md#2025-04-15_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <div class=\"dashboard-window\">\n    <img class=\"image\" :src=\"dashboardIcon\">\n    <h2><strong>This is my new Dashboard!</strong></h2>\n    <br/>\n    <span>The purpose of this app is to help make visualizing and accessing data from Superalgos a breeze.</span>\n  </div>\n</template>\n\n<script>\n  import dashboardIcon from \"../assets/dashboard.png\"\n  export default {\n    // Receive incoming data from parent app \n    props: [\"incomingData\"],\n    components: {\n    },\n    data () {\n      return {\n        dataKey: '',\n        dataObject: [],\n        dashboardIcon: dashboardIcon,\n      }\n    },\n    computed: {\n    },\n    methods: {\n    },  \n  };\n</script>\n\n<style scoped>\n  .dashboard-window {\n    font-size: bold;\n  }\n  \n  .image {\n    margin-top: 10px;\n    height: 100px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX Reverse Proxy for Superalgos on Raspberry Pi\nDESCRIPTION: This snippet shows how to configure NGINX to create a reverse proxy for Superalgos. It adds a location block to the default server configuration that forwards requests from /superalgos/ to the Superalgos application running on port 34248.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README_RaspberryPi.md#2025-04-15_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\nserver {\n    ...\n    location /superalgos/ {\n        proxy_pass http://localhost:34248/;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Shell Script Executable for TradeAnalysis\nDESCRIPTION: Command to set executable permissions for the DoReport.sh shell script that automates the report generation process.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Reports/RnD/TradeAnalysis/README.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x ~/Superalgos/Reports/RnD/TradeAnalysis/My-Trade-Reports/DoReport.sh\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Superalgos Logging\nDESCRIPTION: Shows the folder structure for log files across different Superalgos applications. Each app has its own logging directory with error and combined logs organized by date.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README_Logging.md#2025-04-15_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\n./Platform/My-Log-Files\n  |-- Dashboards\n  |   |-- error/%DATE%.log\n  |   |-- combined/%DATE%.log\n  |-- Network\n  |   |-- error/%DATE%.log\n  |   |-- combined/%DATE%.log\n  |-- Platform\n  |   |-- error/%DATE%.log\n  |   |-- combined/%DATE%.log\n  |-- Tasks\n  |   |-- <TASK_ID>\n  |       |-- error/%DATE%.log\n  |       |-- combined/%DATE%.log\n  |-- SocialTrading\n      |-- error/%DATE%.log\n      |-- combined/%DATE%.log\n```\n\n----------------------------------------\n\nTITLE: Importing Dashboard Component\nDESCRIPTION: Code for importing a new dashboard component into the index file\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Dashboards/README.md#2025-04-15_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport MyNewDashboardView from '../views/MyNewDashboardView.vue'\n```\n\n----------------------------------------\n\nTITLE: Running the Trade Analysis Report Generator\nDESCRIPTION: Commands to change to the monthly report directory and execute the DoReport.sh script to fetch trade data and generate analysis reports.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Reports/RnD/TradeAnalysis/README.md#2025-04-15_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/Superalgos/Reports/RnD/TradeAnalysis/My-Trade-Reports/2023-01\n../DoReport.sh\n```\n\n----------------------------------------\n\nTITLE: Platform App Log File Output Format\nDESCRIPTION: Shows the file output format for logs from the Platform app, which includes timestamp, log level, and the message without the app identifier.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README_Logging.md#2025-04-15_snippet_3\n\nLANGUAGE: log\nCODE:\n```\n2023-01-31T16:44:06.513Z | info | Superalgos Platform App is Running!\n```\n\n----------------------------------------\n\nTITLE: Data Display Template\nDESCRIPTION: Vue template syntax for displaying processed data objects\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Dashboards/README.md#2025-04-15_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n<div v-for=\"(objs) in getGlobals\">{{objs}}</div>\n```\n\n----------------------------------------\n\nTITLE: TradeAnalysis Command Usage Example\nDESCRIPTION: Example output showing the usage syntax for the TradeAnalysis program, including command-line arguments for input file, cryptocurrency balances, and display options.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Reports/RnD/TradeAnalysis/README.md#2025-04-15_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nTradeAnalysis\n\nTrade Analysis Ver. 0.8.1\nUsage:\n  TradeAnalysis filename.csv BTC_Ballance USDT_Ballance -s\n\n  -s To print summary only\n```\n\n----------------------------------------\n\nTITLE: Task Server Log CLI Output Format\nDESCRIPTION: Shows the command line output format for logs from the Task Server, which includes timestamp, log level, app identifier (TS), and the message.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README_Logging.md#2025-04-15_snippet_5\n\nLANGUAGE: log\nCODE:\n```\n2023-01-31T16:45:33.371Z | info | TS | Superalgos Task Server is Running!\n```\n\n----------------------------------------\n\nTITLE: Component Import Example\nDESCRIPTION: Example of importing a component into a dashboard\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Dashboards/README.md#2025-04-15_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport ExpandableTree from \"../components/expandableTree.vue\"\n```\n\n----------------------------------------\n\nTITLE: Task Server Log File Output Format\nDESCRIPTION: Shows the file output format for logs from the Task Server, which includes timestamp, log level, and the message without the app identifier.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README_Logging.md#2025-04-15_snippet_6\n\nLANGUAGE: log\nCODE:\n```\n2023-01-31T16:45:33.371Z | info | Superalgos Task Server is Running!\n```\n\n----------------------------------------\n\nTITLE: Tabs Component Implementation\nDESCRIPTION: Example of implementing the Tabs component in a template\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Dashboards/README.md#2025-04-15_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n<Tabs :tabList=\"tabList\">\n        <template v-slot:tabPanel-1>   \n            <!-- Content that goes in tab 1 goes here -->\n        </template>\n        <template v-slot:tabPanel-2>\n            <!-- Content that goes in tab 2 goes here -->\n        </template>\n    </Tabs>\n```\n\n----------------------------------------\n\nTITLE: OrderFetcherFromSA Command Line Options\nDESCRIPTION: Available command line options for OrderFetcherFromSA program including exchange selection, month filtering, help, and debug options.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Reports/RnD/OrderFetcherFromSA/README.md#2025-04-15_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n  OrderFetcherFromSA [OPTION...]\n\n  -e, --exchange arg  i.e. binance. * This is a mandatory argument *\n  -m, --month arg     Orders for specific month. i.e. 1 = Jan, 2 = Feb etc.\n  -h, --help          Basic usage help\n  -d, --debug         Print long debug information\n```\n\n----------------------------------------\n\nTITLE: Installing CMake Dependencies on Linux\nDESCRIPTION: Commands to install CMake package manager on Linux/Raspberry Pi systems using apt package manager.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Reports/RnD/OrderFetcherFromSA/README.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install cmake\n```\n\n----------------------------------------\n\nTITLE: Setting Up Trade Fetcher Configuration\nDESCRIPTION: Command to copy and rename the example configuration file for API credentials to the secrets directory for integration with Trade Fetcher.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Reports/RnD/TradeAnalysis/README.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp  ~/Superalgos/Reports/TradeFetcher/tradeFetcherSecretExample.json ~/Superalgos/My-Secrets/tradeFetcherSecret.json\n```\n\n----------------------------------------\n\nTITLE: Docker Container Output Example\nDESCRIPTION: Example output shown when the Jupyter notebook server starts successfully within the Docker container.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Forecast-Client/README.md#2025-04-15_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[I 12:58:36.546 NotebookApp] Writing notebook server cookie secret to /home/ubuntu/.local/share/jupyter/runtime/notebook_cookie_secret\n[I 12:58:37.532 NotebookApp] Serving notebooks from local directory: /tf/notebooks\n[I 12:58:37.532 NotebookApp] Jupyter Notebook 6.4.10 is running at:\n[I 12:58:37.533 NotebookApp] http://aa1b305587bd:8888/?token=49c135d693e0b4d07d8c0164410ee6fc4593ac5e0578a34a\n[I 12:58:37.533 NotebookApp]  or http://127.0.0.1:8888/?token=49c135d693e0b4d07d8c0164410ee6fc4593ac5e0578a34a\n[I 12:58:37.533 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).\n[C 12:58:37.544 NotebookApp]\n\n    To access the notebook, open this file in a browser:\n        file:///home/ubuntu/.local/share/jupyter/runtime/nbserver-1-open.html\n    Or copy and paste one of these URLs:\n        http://aa1b305587bd:8888/?token=49c135d693e0b4d07d8c0164410ee6fc4593ac5e0578a34a\n     or http://127.0.0.1:8888/?token=49c135d693e0b4d07d8c0164410ee6fc4593ac5e0578a34a\n```\n\n----------------------------------------\n\nTITLE: Running Dashboards Backend in Development Mode\nDESCRIPTION: Command for developers to run only the backend portion of the Dashboards app in development mode, which allows for testing the websocket server independently.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Dashboards/README.md#2025-04-15_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnode dashboards devBackend\n```\n\n----------------------------------------\n\nTITLE: Tabs Data Configuration\nDESCRIPTION: Example of configuring tab data in a dashboard component\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Dashboards/README.md#2025-04-15_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ndata() {\n            return {\n                tabList: [\"Globals\", \"Raw Data\"],\n            ...\n```\n\n----------------------------------------\n\nTITLE: Setting Script Permissions for Superalgos Ubuntu Installer\nDESCRIPTION: Command to grant execution permissions to the Ubuntu Superalgos installer script using chmod. This enables the script to be run as an executable file.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Launch-Script/Ubuntu+/README.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo chmod 775 Ubuntu_SA_Installer.sh\n```\n\n----------------------------------------\n\nTITLE: Logging Example in Task Server\nDESCRIPTION: Demonstrates how to use the logger in the Task Server with the SA.logger.info method. Similar to the Platform app, but with a different app context.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README_Logging.md#2025-04-15_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nSA.logger.info('Superalgos Task Server is Running!')\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub API Secrets for Superalgos Signal Storage\nDESCRIPTION: JSON configuration for storing GitHub API tokens used by Superalgos to save trading signals. This file must be created at Superalgos/My-Secrets/ApisSecrets.json and contains the GitHub API tokens linked to specific storage container code names.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README_Signals.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\t\"secrets\": [\n\t\t{\n\t\t\t\"nodeCodeName\": \"codeName-that-you-have-chosen-in-github-storage-container\",\n\t\t\t\"apiToken\": \"your-api-token-from-github\"\n\t\t},\n\t\t{\n\t\t\t\"nodeCodeName\": \"codeName-that-you-have-chosen-in-github-storage-container-number2\",\n\t\t\t\"apiToken\": \"your-api-token-from-github\"\n\t\t}\n\t\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Superalgos Plugin via Git Commands\nDESCRIPTION: A sequence of git commands demonstrating how to update a plugin (specifically the Governance plugin), commit changes to both the plugin submodule and main repository, and prepare for pull requests. This example shows updating a user profile in the Governance plugin.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Plugins/README.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# change to the plugin repo / directory\ncd Plugins/Governance\n# add and commit your changed files\ngit add User-Profiles/isysd-mirror.json  \ngit commit -m \"change user profile isysd-mirror\"  \n# push your commits to your fork\ngit push origin develop\n# at this point, you can create a PR from your Governance-Plugins fork  \n# go back to the main Superalgos repo  \ncd ../../  \n# update reference for the Governance plugin to the commit you made above  \ngit add Plugins/Governance  \n# commit and push your changes to Superalgos  \ngit commit -m \"update Governance plugin reference\"  \ngit push origin develop  \n# at this point, you can create a PR from your Superalgos fork\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Bash command to navigate to the Vue-UI directory within the Superalgos Social Trading project.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Social-Trading/ReadMe.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ../Superalgo/Social-Trading/Vue-UI\n```\n\n----------------------------------------\n\nTITLE: Configuring Superalgos P2P Network Environment\nDESCRIPTION: Environment configuration for Superalgos P2P networking. This code must be added to the Environment.js file to specify which P2P network to connect to for social trading and task server functions.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README_Signals.md#2025-04-15_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSOCIALTRADING_TARGET_NETWORK_TYPE: 'Permissioned P2P Network',\nSOCIALTRADING_TARGET_NETWORK_CODENAME: 'BlaaSignals',\nTASK_SERVER_TARGET_NETWORK_TYPE: 'Permissioned P2P Network',\nTASK_SERVER_TARGET_NETWORK_CODENAME: 'BlaaSignals',\n```\n\n----------------------------------------\n\nTITLE: Managing Superalgos Systemd Service in Bash\nDESCRIPTION: Commands for moving, enabling, starting, checking status, stopping, and disabling the Superalgos systemd service on a Linux system. These commands are used to control the Superalgos daemon.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/README.md#2025-04-15_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nsudo mv superalgos.service /etc/systemd/system\nsudo systemctl daemon-reload\nsudo systemctl enable superalgos\nsudo systemctl start superalgos\nsudo systemctl status superalgos\nsudo systemctl stop superalgos\nsudo systemctl disable superalgos\n```\n\n----------------------------------------\n\nTITLE: Configuring Test-Server Sensor Bot Instance\nDESCRIPTION: Configuration for the Test-Server Sensor Bot Instance including network settings and time series setup. Requires replacing YOUR-SERVER-NAME with actual server name.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Server/README.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"networkCodeName\": \"Testnet\",\n    \"targetSuperalgosHost\": \"localhost\",\n    \"targetSuperalgosHttpPort\": 34248,\n    \"serverInstanceName\": \"YOUR-SERVER-NAME\",\n    \"timeSeriesFile\": {\n        \"labels\": [\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container on Windows\nDESCRIPTION: Command to run the Bitcoin Factory Machine Learning Docker container on Windows, specifying GPU support, shared memory, volume mounting, and port exposure.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/README.md#2025-04-15_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --gpus all -it --rm --shm-size=4.37gb --name Bitcoin-Factory-ML -v C:/Superalgos/Bitcoin-Factory/Test-Client/notebooks:/tf/notebooks -p 8888:8888 bitcoin-factory-machine-learning\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container on macOS\nDESCRIPTION: Command to run the Bitcoin Factory Machine Learning Docker container on macOS, with path configuration adjusted for the Mac file system structure.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Test-Client/README.md#2025-04-15_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --gpus all -it --rm --name Bitcoin-Factory-ML --shm-size=4.37gb -v /Users/Your-User-Name/Superalgos/Bitcoin-Factory/Test-Client/notebooks:/tf/notebooks -p 8888:8888 bitcoin-factory-machine-learning\n```\n\n----------------------------------------\n\nTITLE: Forecast Client Sensor Bot Configuration\nDESCRIPTION: Configuration settings for the Forecast Client Sensor Bot Instance, including network code name and client instance identifiers.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Forecast-Client/README.md#2025-04-15_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"startDate\": \"2021-01-01\",\n   \"networkCodeName\": \"Testnet\",\n   \"clientInstanceForecaster\": \"devosonder-01\",\n   \"clientInstanceBuilder\": \"devosonder-01\"\n}\n```\n\n----------------------------------------\n\nTITLE: Task Server App Configuration\nDESCRIPTION: JSON configuration required for the Task Server App node in the user profile setup.\nSOURCE: https://github.com/Superalgos/Superalgos/blob/master/Bitcoin-Factory/Forecast-Client/README.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"codeName\": \"Task-Server-App-1\"\n}\n```"
  }
]