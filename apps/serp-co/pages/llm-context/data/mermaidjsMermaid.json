[
  {
    "owner": "mermaid-js",
    "repo": "mermaid",
    "content": "TITLE: Interactive Links Example - HTML/Mermaid/JS\nDESCRIPTION: This full HTML example demonstrates interactive links in a Mermaid flowchart.  It includes the Mermaid chart definition, a JavaScript callback function, and the necessary Mermaid initialization code.  It requires setting `securityLevel='loose'`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_101\n\nLANGUAGE: HTML\nCODE:\n```\n<body>\n  <pre class=\"mermaid\">\n    flowchart LR\n        A-->B\n        B-->C\n        C-->D\n        click A callback \"Tooltip\"\n        click B \"https://www.github.com\" \"This is a link\"\n        click C call callback() \"Tooltip\"\n        click D href \"https://www.github.com\" \"This is a link\"\n  </pre>\n\n  <script>\n    window.callback = function () {\n      alert('A callback was triggered');\n    };\n    const config = {\n      startOnLoad: true,\n      flowchart: { useMaxWidth: true, htmlLabels: true, curve: 'cardinal' },\n      securityLevel: 'loose',\n    };\n    mermaid.initialize(config);\n  </script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Complete Example with Interactive Links in HTML\nDESCRIPTION: This is a full, working example of a Mermaid class diagram embedded in an HTML page with interactive links and a JavaScript callback. The example includes Mermaid.js initialization and demonstrates the integration of the diagram with JavaScript.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <pre class=\"mermaid\">\n    classDiagram\n    Animal <|-- Duck\n    Animal <|-- Fish\n    Animal <|-- Zebra\n    Animal : +int age\n    Animal : +String gender\n    Animal: +isMammal()\n    Animal: +mate()\n    class Duck{\n      +String beakColor\n      +swim()\n      +quack()\n      }\n    class Fish{\n      -int sizeInFeet\n      -canEat()\n      }\n    class Zebra{\n      +bool is_wild\n      +run()\n      }\n\n      callback Duck \"callback\" \"Tooltip\"\n      link Zebra \"https://www.github.com\" \"This is a link\"\n  </pre>\n\n  <script>\n    const callback = function () {\n      alert('A callback was triggered');\n    };\n    const config = {\n      startOnLoad: true,\n      securityLevel: 'loose',\n    };\n    mermaid.initialize(config);\n  </script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Configuring Mermaid Flowchart Renderer and Width - JavaScript\nDESCRIPTION: This snippet describes configuration options for Mermaid flowcharts, including choosing an experimental 'elk' renderer (better for complex and large diagrams) by updating the configuration object, and adjusting the rendered flowchart width via the `mermaid.flowchartConfig` setting. Configuring the renderer requires Mermaid version 9.4 or newer and appropriate site setup for lazy-loading. The width setting accepts values like '100%' to scale the diagram accordingly.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_61\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n  flowchart:\n    defaultRenderer: \"elk\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid.flowchartConfig = {\n    width: 100%\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Flowchart with Subgraphs in Mermaid\nDESCRIPTION: Presents a more complex flowchart (`graph TB` for Top-to-Bottom orientation) including subgraphs (`subgraph A ... end`), various node shapes (square `sq[]`, circle `ci(())`, odd `od>]`, diamond `di{}`, rounded `ro()`), different edge types (`-->`, `-.->`, `==>`) with labels, multiline text in nodes using `<br>`, comments (`%%`), and applying custom CSS styles using `classDef` to define classes (e.g., `green`, `orange`) and `class` to assign them to specific nodes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/examples.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n    sq[Square shape] --> ci((Circle shape))\n\n    subgraph A\n        od>Odd shape]-- Two line<br/>edge comment --> ro\n        di{Diamond with <br/> line break} -.-> ro(Rounded<br>square<br>shape)\n        di==>ro2(Rounded square shape)\n    end\n\n    %% Notice that no text in shape are added here instead that is appended further down\n    e --> od3>Really long text with linebreak<br>in an Odd shape]\n\n    %% Comments after double percent signs\n    e((Inner / circle<br>and some odd <br>special characters)) --> f(,.?!+-*ز)\n\n    cyr[Cyrillic]-->cyr2((Circle shape Начало));\n\n     classDef green fill:#9f6,stroke:#333,stroke-width:2px;\n     classDef orange fill:#f96,stroke:#333,stroke-width:4px;\n     class sq,e green\n     class di orange\n```\n\n----------------------------------------\n\nTITLE: Basic Sequence Diagram Example Mermaid\nDESCRIPTION: Illustrates a basic sequence diagram with two participants, Alice and John, exchanging messages.  The diagram shows a simple greeting and response. No specific dependencies required, this is the fundamental syntax. Expected output: a sequence diagram visually representing the interactions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n    Alice-)John: See you later!\n```\n\n----------------------------------------\n\nTITLE: Simple State Diagram\nDESCRIPTION: This snippet demonstrates a basic state diagram with transitions between states. It showcases the syntax for defining states and the transitions between them using arrows.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_0\n\nLANGUAGE: mermaid-example\nCODE:\n```\n--- \ntitle: Simple sample\n---\nstateDiagram-v2\n    [*] --> Still\n    Still --> [*]\n\n    Still --> Moving\n    Moving --> Still\n    Moving --> Crash\n    Crash --> [*]\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Rectangle\nDESCRIPTION: This snippet uses the new shape definition syntax in Mermaid to create a rectangular node. It utilizes the `@{ shape: rect }` syntax after the node ID to explicitly define the shape.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_20\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: rect, label: \"This is a process\" }\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Sequence Diagram in Mermaid\nDESCRIPTION: This snippet shows how to create a basic sequence diagram in Mermaid. It defines participants (Alice, Bob, John) and their interactions, including synchronous and asynchronous messages. It uses `Note` to add additional information. No dependencies required, Mermaid library needs to be integrated.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/examples.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice ->> Bob: Hello Bob, how are you?\n    Bob-->>John: How about you John?\n    Bob--x Alice: I am good thanks!\n    Bob-x John: I am good thanks!\n    Note right of John: Bob thinks a long<br/>long time, so long<br/>that the text does<br/>not fit on a row.\n\n    Bob-->Alice: Checking with John...\n    Alice->John: Yes... John, how are you?\n```\n\n----------------------------------------\n\nTITLE: Rendering a Mermaid Diagram using API\nDESCRIPTION: This JavaScript code demonstrates how to render a Mermaid diagram using the API. It imports the mermaid library, initializes it with `startOnLoad: false`, defines a graph definition, and then uses `mermaid.render` to generate the SVG code.  The SVG code is then inserted into the DOM. Requires mermaid library to be imported.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import mermaid from './mermaid.esm.mjs';\n  mermaid.initialize({ startOnLoad: false });\n\n  // Example of using the render function\n  const drawDiagram = async function () {\n    element = document.querySelector('#graphDiv');\n    const graphDefinition = 'graph TB\\na-->b';\n    const { svg } = await mermaid.render('graphDiv', graphDefinition);\n    element.innerHTML = svg;\n  };\n\n  await drawDiagram();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Example with Mermaid Diagram\nDESCRIPTION: This is a complete HTML example which includes the Mermaid diagram definition wrapped in a `<pre>` tag with the class `mermaid`, and the necessary `<script>` tag to import and initialize Mermaid. It will render the diagram within the browser.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <body>\n    <pre class=\"mermaid\">\n  graph LR\n      A --- B\n      B-->C[fa:fa-ban forbidden]\n      B-->D(fa:fa-spinner);\n    </pre>\n    <script type=\"module\">\n      import mermaid from '<CDN_URL>/mermaid@<MERMAID_VERSION>/dist/mermaid.esm.min.mjs';\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Mermaid API using CDN in HTML\nDESCRIPTION: This HTML snippet demonstrates how to import the Mermaid JavaScript library using a script tag with type='module' from a CDN URL. It then calls `mermaid.initialize()` with `startOnLoad: true` to automatically scan the document for '.mermaid' elements and render diagrams when the page loads.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/getting-started.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<body>\n  <script type=\"module\">\n    import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';\n    mermaid.initialize({ startOnLoad: true });\n  </script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Modeling Service Communication with Mermaid Sequence Diagrams\nDESCRIPTION: Provides a complex sequence diagram modeling interactions between multiple services (Web Browser, Blog Service, Account Service, etc.) in a blogging application. It demonstrates participant aliasing (`participant web as Web Browser`), activation/deactivation markers (`+` to indicate start of activation, `-` to indicate end), notes spanning multiple participants (`Note over web,db`), alternative logic (`alt Credentials not found ... else Credentials found ... end`), and parallel actions (`par Notifications ... and Response ... end`).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/examples.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant web as Web Browser\n    participant blog as Blog Service\n    participant account as Account Service\n    participant mail as Mail Service\n    participant db as Storage\n\n    Note over web,db: The user must be logged in to submit blog posts\n    web->>+account: Logs in using credentials\n    account->>db: Query stored accounts\n    db->>account: Respond with query result\n\n    alt Credentials not found\n        account->>web: Invalid credentials\n    else Credentials found\n        account->>-web: Successfully logged in\n\n        Note over web,db: When the user is authenticated, they can now submit new posts\n        web->>+blog: Submit new post\n        blog->>db: Store post data\n\n        par Notifications\n            blog--)mail: Send mail to blog subscribers\n            blog--)db: Store in-site notifications\n        and Response\n            blog-->>-web: Successfully posted\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Embedding and Initializing Multiple Diagrams via CDN in HTML\nDESCRIPTION: This complete HTML example shows how to embed multiple Mermaid diagram definitions within '<pre class=\"mermaid\">' tags and then initialize the Mermaid library imported from a CDN. The `mermaid.initialize({ startOnLoad: true })` call processes all found definitions and renders them.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/getting-started.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <body>\n    Here is one mermaid diagram:\n    <pre class=\"mermaid\">\n            graph TD\n            A[Client] --> B[Load Balancer]\n            B --> C[Server1]\n            B --> D[Server2]\n    </pre>\n\n    And here is another:\n    <pre class=\"mermaid\">\n            graph TD\n            A[Client] -->|tcp_123| B\n            B(Load Balancer)\n            B -->|tcp_456| C[Server1]\n            B -->|tcp_456| D[Server2]\n    </pre>\n\n    <script type=\"module\">\n      import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';\n      mermaid.initialize({ startOnLoad: true });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a Larger Flowchart with Styling in Mermaid\nDESCRIPTION: This snippet demonstrates a larger flowchart with styling in Mermaid. It defines nodes with different shapes, subgraphs, and styling using `classDef`. It also shows how to add line breaks in node text and edge comments. Comments are also included for better understanding. No dependencies required, Mermaid library needs to be integrated.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/examples.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n    sq[Square shape] --> ci((Circle shape))\n\n    subgraph A\n        od>Odd shape]-- Two line<br/>edge comment --> ro\n        di{Diamond with <br/> line break} -.-> ro(Rounded<br>square<br>shape)\n        di==>ro2(Rounded square shape)\n    end\n\n    %% Notice that no text in shape are added here instead that is appended further down\n    e --> od3>Really long text with linebreak<br>in an Odd shape]\n\n    %% Comments after double percent signs\n    e((Inner / circle<br>and some odd <br>special characters)) --> f(,.?!+-*ز)\n\n    cyr[Cyrillic]-->cyr2((Circle shape Начало));\n\n     classDef green fill:#9f6,stroke:#333,stroke-width:2px;\n     classDef orange fill:#f96,stroke:#333,stroke-width:4px;\n     class sq,e green\n     class di orange\n```\n\n----------------------------------------\n\nTITLE: Alternative Identifying Relationship Syntax with Descriptive Cardinality Aliases in Mermaid ER Diagram\nDESCRIPTION: Utilizes alias keywords (e.g., '1 to zero or more') to express cardinalities and relationship types in Mermaid ER diagrams. This snippet clarifies equivalent relationship definitions using text aliases instead of symbolic notation, improving readability and understanding of the model's cardinalities and identification.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    CAR 1 to zero or more NAMED-DRIVER : allows\n    PERSON many(0) optionally to 0+ NAMED-DRIVER : is\n```\n\n----------------------------------------\n\nTITLE: Initializing Mermaid JavaScript API with CDN\nDESCRIPTION: Shows how to initialize the Mermaid JavaScript API by importing it from a CDN and configuring it to automatically render diagrams on page load.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/getting-started.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script type=\"module\">\n    import mermaid from '<CDN_URL>/mermaid@<MERMAID_VERSION>/dist/mermaid.esm.min.mjs';\n    mermaid.initialize({ startOnLoad: true });\n  </script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Full Example of Interactive Mermaid.js Diagram in HTML\nDESCRIPTION: Shows a complete HTML example embedding a Mermaid diagram with interactive links and callbacks, initializing Mermaid with customized configuration and security settings.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_53\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <pre class=\"mermaid\">\n    flowchart LR\n        A-->B\n        B-->C\n        C-->D\n        click A callback\n        click B \"https://www.github.com\" \"This is a link\"\n        click C call callback()\n        click D href \"https://www.github.com\" \"This is a link\"\n  </pre>\n\n  <script>\n    window.callback = function () {\n      alert('A callback was triggered');\n    };\n    const config = {\n      startOnLoad: true,\n      flowchart: { useMaxWidth: true, htmlLabels: true, curve: 'cardinal' },\n      securityLevel: 'loose',\n    };\n    mermaid.initialize(config);\n  </script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Flowchart in Mermaid\nDESCRIPTION: A basic example of a Mermaid flowchart diagram showing a decision-making process with nodes for entering chart definition, previewing, deciding, and saving.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/getting-started.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Enter Chart Definition] --> B(Preview)\n    B --> C{decide}\n    C --> D[Keep]\n    C --> E[Edit Definition]\n    E --> B\n    D --> F[Save Image and Code]\n    F --> B\n```\n\n----------------------------------------\n\nTITLE: Embedding Mermaid Diagram Definition in HTML\nDESCRIPTION: This HTML snippet shows how to embed a Mermaid diagram definition directly within an HTML document using a `<pre>` tag with the class 'mermaid'. This tag serves as a container for the Mermaid code that will be rendered by the Mermaid JavaScript library.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/getting-started.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<body>\n  Here is a mermaid diagram:\n  <pre class=\"mermaid\">\n        graph TD\n        A[Client] --> B[Load Balancer]\n        B --> C[Server01]\n        B --> D[Server02]\n  </pre>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Modeling Business Process Flow with Mermaid Block Diagrams\nDESCRIPTION: Represents a business process flow with decision points and multiple stages using Mermaid block diagrams. Uses different node shapes, labeled arrows, and styled endpoints to visualize a complete workflow with decision paths.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nblock-beta\n  columns 3\n  Start((\"Start\")) space:2\n  down<[\" \"]>(down) space:2\n  Decision{{\"Make Decision\"}} right<[\"Yes\"]>(right) Process1[\"Process A\"]\n  downAgain<[\"No\"]>(down) space r3<[\"Done\"]>(down)\n  Process2[\"Process B\"] r2<[\"Done\"]>(right) End((\"End\"))\n\n  style Start fill:#969;\n  style End fill:#696;\n```\n\n----------------------------------------\n\nTITLE: Setting Flowchart Direction Left to Right (LR) in Mermaid\nDESCRIPTION: This snippet demonstrates how to set the direction of a Mermaid flowchart to left-to-right using the `LR` keyword. It creates a simple flowchart with two nodes connected by an edge.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_5\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    Start --> Stop\n```\n\n----------------------------------------\n\nTITLE: Current Syntax State Diagram\nDESCRIPTION: Defines the current standard syntax for Mermaid state diagrams with the 'stateDiagram' directive. It is functionally equivalent to previous examples and showcases current best practices.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram\n    [*] --> Still\n    Still --> [*]\n\n    Still --> Moving\n    Moving --> Still\n    Moving --> Crash\n    Crash --> [*]\n```\n\n----------------------------------------\n\nTITLE: Styling Quadrant Chart with Mermaid\nDESCRIPTION: This Mermaid code defines a quadrant chart with custom styling for campaigns. It uses `classDef` to define reusable styles and applies them to specific campaigns using `:::`. Styling attributes like `color`, `radius`, `stroke-color`, and `stroke-width` are used to customize the appearance of the chart elements. The code illustrates how to classify data into the four quadrants and provides visual cues for distinguishing between different campaign strategies.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/quadrantChart.md#_snippet_3\n\nLANGUAGE: Mermaid\nCODE:\n```\nquadrantChart\n  title Reach and engagement of campaigns\n  x-axis Low Reach --> High Reach\n  y-axis Low Engagement --> High Engagement\n  quadrant-1 We should expand\n  quadrant-2 Need to promote\n  quadrant-3 Re-evaluate\n  quadrant-4 May be improved\n  Campaign A: [0.9, 0.0] radius: 12\n  Campaign B:::class1: [0.8, 0.1] color: #ff3300, radius: 10\n  Campaign C: [0.7, 0.2] radius: 25, color: #00ff33, stroke-color: #10f0f0\n  Campaign D: [0.6, 0.3] radius: 15, stroke-color: #00ff0f, stroke-width: 5px ,color: #ff33f0\n  Campaign E:::class2: [0.5, 0.4]\n  Campaign F:::class3: [0.4, 0.5] color: #0000ff\n  classDef class1 color: #109060\n  classDef class2 color: #908342, radius : 10, stroke-color: #310085, stroke-width: 10px\n  classDef class3 color: #f00fff, radius : 10\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram: Blogging App Communication - Mermaid\nDESCRIPTION: This snippet creates a sequence diagram illustrating the communication flow in a blogging application. It shows interactions between a web browser, blog service, account service, mail service, and storage. Includes alternative flows (login failure) and parallel actions (notifications). No dependencies required, Mermaid library needs to be integrated.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/examples.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant web as Web Browser\n    participant blog as Blog Service\n    participant account as Account Service\n    participant mail as Mail Service\n    participant db as Storage\n\n    Note over web,db: The user must be logged in to submit blog posts\n    web->>+account: Logs in using credentials\n    account->>db: Query stored accounts\n    db->>account: Respond with query result\n\n    alt Credentials not found\n        account->>web: Invalid credentials\n    else Credentials found\n        account->>-web: Successfully logged in\n\n        Note over web,db: When the user is authenticated, they can now submit new posts\n        web->>+blog: Submit new post\n        blog->>db: Store post data\n\n        par Notifications\n            blog--)mail: Send mail to blog subscribers\n            blog--)db: Store in-site notifications\n        and Response\n            blog-->>-web: Successfully posted\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Binding Events to Rendered Mermaid Diagram\nDESCRIPTION: This JavaScript code demonstrates how to bind events to a rendered Mermaid diagram after it has been inserted into the DOM. It imports the mermaid library, defines a graph definition, renders the diagram using `mermaid.render`, inserts the SVG code into the DOM, and then calls the `bindFunctions` function returned by `mermaid.render` to bind the events. Requires mermaid library to be imported.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of using the bindFunctions\nconst drawDiagram = async function () {\n  element = document.querySelector('#graphDiv');\n  const graphDefinition = 'graph TB\\na-->b';\n  const { svg, bindFunctions } = await mermaid.render('graphDiv', graphDefinition);\n  element.innerHTML = svg;\n  // This can also be written as `bindFunctions?.(element);` using the `?` shorthand.\n  if (bindFunctions) {\n    bindFunctions(element);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using mermaid.run for Custom Rendering\nDESCRIPTION: JavaScript code examples showing how to use mermaid.run method to render diagrams with different configurations and element selectors.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid.initialize({ startOnLoad: false });\nawait mermaid.run({\n  querySelector: '.someOtherClass',\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid.initialize({ startOnLoad: false });\nawait mermaid.run({\n  nodes: [document.getElementById('someId'), document.getElementById('anotherId')],\n});\nawait mermaid.run({\n  nodes: document.querySelectorAll('.yetAnotherClass'),\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid.initialize({ startOnLoad: false });\nawait mermaid.run({\n  suppressErrors: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Example with Mermaid Implementation\nDESCRIPTION: A full HTML document example showing how to implement a Mermaid diagram with the required script import.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <body>\n    <pre class=\"mermaid\">\n  graph LR\n      A --- B\n      B-->C[fa:fa-ban forbidden]\n      B-->D(fa:fa-spinner);\n    </pre>\n    <script type=\"module\">\n      import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a Link with Arrow Head\nDESCRIPTION: This snippet demonstrates how to create a link between two nodes (A and B) with an arrow head, indicating the direction of flow.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_67\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    A-->B\n```\n\n----------------------------------------\n\nTITLE: HTML with Local Mermaid File Reference\nDESCRIPTION: An HTML example showing how to reference a local Mermaid JavaScript file instead of using a CDN, and using it to render multiple diagrams with different styles.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/getting-started.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n  </head>\n  <body>\n    <pre class=\"mermaid\">\n            graph LR\n            A --- B\n            B-->C[fa:fa-ban forbidden]\n            B-->D(fa:fa-spinner);\n    </pre>\n    <pre class=\"mermaid\">\n            graph TD\n            A[Client] --> B[Load Balancer]\n            B --> C[Server1]\n            B --> D[Server2]\n    </pre>\n    <script type=\"module\">\n      import mermaid from 'The/Path/In/Your/Package/mermaid.esm.mjs';\n      mermaid.initialize({ startOnLoad: true });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Class Diagram with Accessible Title and Description in Mermaid\nDESCRIPTION: This Mermaid code snippet demonstrates how to add accessible title and description to a class diagram. It utilizes the `accTitle` and `accDescr` keywords to provide a title and description for screen readers and other assistive technologies.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n      accTitle: My Class Diagram\n      accDescr: My Class Diagram Description\n\n      Vehicle <|-- Car\n```\n\n----------------------------------------\n\nTITLE: Dagre Layout with Classic Look\nDESCRIPTION: This snippet shows how to use the Dagre layout algorithm for a flowchart. The `layout: dagre` setting in the frontmatter directs Mermaid to use the Dagre layout. The `look: classic` setting uses the classic look.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/syntax-reference.md#_snippet_4\n\nLANGUAGE: mermaid-example\nCODE:\n```\n--- \nconfig:\n  layout: dagre\n  look: classic\n  theme: default\n---\n\nflowchart LR\nA[Start] --> B{Choose Path}\nB -->|Option 1| C[Path 1]\nB -->|Option 2| D[Path 2]\n```\n\n----------------------------------------\n\nTITLE: Embedding and Initializing Multiple Diagrams via Local Path in HTML\nDESCRIPTION: This HTML example is similar to the CDN example but shows how to import the Mermaid library from a local file path within a package. It includes two diagram definitions within '<pre class=\"mermaid\">' tags and initializes Mermaid using `mermaid.initialize({ startOnLoad: true })` after the library is loaded.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/getting-started.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n  </head>\n  <body>\n    <pre class=\"mermaid\">\n            graph LR\n            A --- B\n            B-->C[fa:fa-ban forbidden]\n            B-->D(fa:fa-spinner);\n    </pre>\n    <pre class=\"mermaid\">\n            graph TD\n            A[Client] --> B[Load Balancer]\n            B --> C[Server1]\n            B --> D[Server2]\n    </pre>\n    <script type=\"module\">\n      import mermaid from 'The/Path/In/Your/Package/mermaid.esm.mjs';\n      mermaid.initialize({ startOnLoad: true });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: ER Diagram with Accessible Title and Description in Mermaid\nDESCRIPTION: This Mermaid code snippet demonstrates adding accessibility features to an Entity Relationship Diagram (ERD). The snippet includes the `accTitle` and `accDescr` keywords to provide a title and description, making the diagram more accessible to users with screen readers or other assistive technologies.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n      accTitle: My Entity Relationship Diagram\n      accDescr: My Entity Relationship Diagram Description\n\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ LINE-ITEM : contains\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Lined Rectangle\nDESCRIPTION: This snippet creates a rectangle with a line inside it, using the shape keyword.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_36\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: lin-rect, label: \"Lined process\" }\n```\n\n----------------------------------------\n\nTITLE: Initializing Mermaid with Configuration and Selector\nDESCRIPTION: This JavaScript code shows how to initialize Mermaid with a configuration object and a CSS selector.  It initializes Mermaid with a `noteMargin` and targets elements with the class `.someOtherClass`. Requires mermaid library to be imported.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid.init({ noteMargin: 10 }, '.someOtherClass');\n```\n\n----------------------------------------\n\nTITLE: Defining Sequence Diagrams with Mermaid Syntax in mermaid\nDESCRIPTION: This snippet illustrates how to define a sequence diagram in Mermaid notation. It includes participants (Alice, Bob, John), messages exchanged between them, loops, and notes. The syntax supports directed message arrows, loops named 'HealthCheck', and annotations attached to participants. The input is the Mermaid sequenceDiagram syntax string, which outputs a rendered sequence diagram representing interactions over time. Dependencies require Mermaid's sequence diagram rendering module. This example highlights messaging flows and synchronous/asynchronous communication.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>John: Hello John, how are you?\n    loop HealthCheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts <br/>prevail!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n```\n\n----------------------------------------\n\nTITLE: Defining Gantt Diagram Syntax and Task Dependencies with Mermaid in Markdown\nDESCRIPTION: This example illustrates the comprehensive syntax options for defining Gantt diagrams with Mermaid in Markdown, including sections, task states (active, done, critical, milestone), dependencies (using the 'after' and 'until' keywords), date formatting, and exclusions for weekends. It demonstrates task identifiers, start and end dates, relative durations, and complex dependencies, providing a template for advanced Gantt chart scenarios. The snippet requires Markdown support for Mermaid as well as familiarity with date and duration formats.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n    dateFormat  YYYY-MM-DD\n    title       Adding GANTT diagram functionality to mermaid\n    excludes    weekends\n    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".)\n\n    section A section\n    Completed task            :done,    des1, 2014-01-06,2014-01-08\n    Active task               :active,  des2, 2014-01-09, 3d\n    Future task               :         des3, after des2, 5d\n    Future task2              :         des4, after des3, 5d\n\n    section Critical tasks\n    Completed task in the critical line :crit, done, 2014-01-06,24h\n    Implement parser and jison          :crit, done, after des1, 2d\n    Create tests for parser             :crit, active, 3d\n    Future task in critical line        :crit, 5d\n    Create tests for renderer           :2d\n    Add to mermaid                      :until isadded\n    Functionality added                 :milestone, isadded, 2014-01-25, 0d\n\n    section Documentation\n    Describe gantt syntax               :active, a1, after des1, 3d\n    Add gantt diagram to demo page      :after a1  , 20h\n    Add another diagram to demo page    :doc1, after a1  , 48h\n\n    section Last section\n    Describe gantt syntax               :after doc1, 3d\n    Add gantt diagram to demo page      :20h\n    Add another diagram to demo page    :48h\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter Configuration in Mermaid Diagrams Using YAML\nDESCRIPTION: This snippet demonstrates how diagram authors can override Mermaid's default configuration on a per-diagram basis by including a YAML frontmatter block at the top of the diagram definition. Key properties like theme and themeVariables are specified to customize the appearance of the diagram. Dependencies include Mermaid version 10.5.0 or newer, which supports frontmatter. The input is a Mermaid diagram preceded by a YAML block; the output is a rendered diagram that respects the specified configuration overrides.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/configuration.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Hello Title\nconfig:\n  theme: base\n  themeVariables:\n    primaryColor: \"#00ff00\"\n---\nflowchart\n\tHello --> World\n```\n\n----------------------------------------\n\nTITLE: Flowchart with accessible title and description (multi-line) in Mermaid\nDESCRIPTION: This Mermaid snippet demonstrates how to add an accessible title and a multi-line description to a flowchart using the `accTitle` and `accDescr` keywords.  The curly braces encapsulate the multi-line description, allowing for longer, more descriptive accessibility metadata.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n      accTitle: Bob's Burger's Making Big Decisions\n      accDescr {\n        The official Bob's Burgers corporate processes that are used\n        for making very, very big decisions.\n        This is actually a very simple flow: identify the big decision and then make the big decision.\n         }\n      A[Identify Big Decision] --> B{Make Big Decision}\n      B --> D[Be done]\n```\n\n----------------------------------------\n\nTITLE: Mermaid Configuration Initialization via API\nDESCRIPTION: This snippet demonstrates how to set Mermaid configuration options using the 'mermaid.initialize' method, the preferred approach. It imports Mermaid, defines configuration settings (like startOnLoad and flowchart HTML labels), and initializes Mermaid with these options. It requires the Mermaid JavaScript module and the Mermaid API documentation for options.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_17\n\nLANGUAGE: HTML/JavaScript\nCODE:\n```\n<script type=\"module\">\n  import mermaid from './mermaid.esm.mjs';\n  let config = { startOnLoad: true, flowchart: { useMaxWidth: false, htmlLabels: true } };\n  mermaid.initialize(config);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Integrating Mermaid Mindmap (Post 9.4.0)\nDESCRIPTION: Shows the simplified method for including Mermaid with integrated Mindmap support (lazy-loaded) in a web page using HTML script tags and module imports for versions 9.4.0 and later.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"module\">\n  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Diagram Implementation\nDESCRIPTION: Example of how to add a Mermaid diagram to an HTML page using a pre tag with class=\"mermaid\" containing the graph definition.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<pre class=\"mermaid\">\n    graph LR\n    A --- B\n    B-->C[fa:fa-ban forbidden]\n    B-->D(fa:fa-spinner);\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Class Diagram Example in Mermaid\nDESCRIPTION: Illustrates class structures and relationships, including inheritance, composition, aggregation, association, and methods. Uses Mermaid class diagram syntax for object-oriented modeling.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/examples.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nClass01 <|-- AveryLongClass : Cool\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Pie Chart with Mermaid - Mermaid\nDESCRIPTION: This snippet demonstrates how to create a simple pie chart using Mermaid. The diagram visualizes three categories (\"Dogs\", \"Cats\", and \"Rats\") with their respective numerical values. No custom configuration or special directives are used, making it an ideal starting point for basic pie chart visualizations in Markdown environments supporting Mermaid. The 'pie' keyword starts the diagram, an optional title is specified, and each data category is provided with a label and value.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/pie.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\npie title Pets adopted by volunteers\n    \"Dogs\" : 386\n    \"Cats\" : 85\n    \"Rats\" : 15\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Critical Regions in Mermaid Sequence Diagrams\nDESCRIPTION: Illustrates the use of the `critical` and `end` keywords in Mermaid to denote an atomic action that must be completed without any specified alternative paths or options. This example shows a critical database connection attempt without defined failure options.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_18\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    critical Establish a connection to the DB\n        Service-->DB: connect\n    end\n```\n\n----------------------------------------\n\nTITLE: Defining Horizontal Edge Direction in Mermaid Architecture Diagrams\nDESCRIPTION: Demonstrates specifying the connection points for an edge between two services using colons and direction indicators (`L`, `R`, `T`, `B`). This example creates a horizontal edge originating from the right (`:R`) of the `db` service and connecting to the left (`:L`) of the `server` service.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\ndb:R -- L:server\n```\n\n----------------------------------------\n\nTITLE: Creating a Flowchart with Mermaid JavaScript\nDESCRIPTION: This snippet demonstrates how to define a simple flowchart using Mermaid syntax. No external dependencies are required besides Mermaid itself; the flow goes from a 'Hard' node to 'Round', branching via a decision node to two results. Inputs are node and edge definitions, and the output is a rendered flowchart. This basic structure can be expanded for more complex workflows and is subject to Mermaid's flowchart syntax constraints.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nA[Hard] -->|Text| B(Round)\nB --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Node in Mermaid Flowchart\nDESCRIPTION: This snippet demonstrates how to create a basic node with a default shape in a Mermaid flowchart. The `id` is used as both the identifier and the displayed text within the node.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    id\n```\n\n----------------------------------------\n\nTITLE: Defining Diagram Direction in ERD\nDESCRIPTION: This code shows how to set the direction of the ERD diagram using the `direction` statement.  The example sets the direction to `TB` (top to bottom), and `LR` (left to right).  The direction influences how the entities and relationships are visually laid out within the diagram.  This is core ERD syntax, and no specific prerequisites are necessary.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    direction TB\n    CUSTOMER ||--o{ ORDER : places\n    CUSTOMER {\n        string name\n        string custNumber\n        string sector\n    }\n    ORDER ||--|{ LINE-ITEM : contains\n    ORDER {\n        int orderNumber\n        string deliveryAddress\n    }\n    LINE-ITEM {\n        string productCode\n        int quantity\n        float pricePerUnit\n    }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    direction LR\n    CUSTOMER ||--o{ ORDER : places\n    CUSTOMER {\n        string name\n        string custNumber\n        string sector\n    }\n    ORDER ||--|{ LINE-ITEM : contains\n    ORDER {\n        int orderNumber\n        string deliveryAddress\n    }\n    LINE-ITEM {\n        string productCode\n        int quantity\n        float pricePerUnit\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Formatting in Mermaid Requirement Diagrams\nDESCRIPTION: This example shows how to apply Markdown formatting within requirement names and text fields. The requirement name '__test_req__' uses underscores (often interpreted as bold/italic in Markdown contexts, though Mermaid might render it literally depending on configuration) and the text field uses explicit '*' for italics and '**' for bold.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/requirementDiagram.md#_snippet_1\n\nLANGUAGE: Mermaid\nCODE:\n```\nrequirementDiagram\n\nrequirement \"__test_req__\" {\n    id: 1\n    text: \"*italicized text* **bold text**\"\n    risk: high\n    verifymethod: test\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Flowcharts with Mermaid Syntax in mermaid\nDESCRIPTION: This snippet demonstrates how to create a basic flowchart using Mermaid's graph syntax. It defines nodes and directed edges representing transitions between nodes. There are no external dependencies beyond Mermaid itself. The diagram starts from node A branching to B and C, which both lead to D. Input is the Mermaid graph syntax string and output is a rendered flowchart visualization. This example illustrates simple node linkage for flow visualization.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n```\n\n----------------------------------------\n\nTITLE: Constructing Gantt Charts with Mermaid Syntax in mermaid\nDESCRIPTION: This snippet shows how to define a Gantt chart using Mermaid's syntax. It sets a date format, chart title, excluded days, and multiple task sections with different statuses including completed, active, and future tasks with dependencies. The input format accepts date definitions and relative scheduling. Outputs include visually structured task timelines indicating progress and planned tasks. Dependencies require Mermaid's Gantt rendering capabilities. This snippet is valuable for project scheduling and timeline visualization.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n    dateFormat  YYYY-MM-DD\n    title Adding GANTT diagram to mermaid\n    excludes weekdays 2014-01-10\n\n    section A section\n    Completed task            :done,    des1, 2014-01-06,2014-01-08\n    Active task               :active,  des2, 2014-01-09, 3d\n    Future task               :         des3, after des2, 5d\n    Future task2               :         des4, after des3, 5d\n```\n\n----------------------------------------\n\nTITLE: Defining Labelled Class Relationships in Mermaid - Mermaid\nDESCRIPTION: Shows how to add descriptive labels to various class relationships (e.g., 'Inheritance', 'Composition') within a Mermaid class diagram. This aids in clarifying semantics of each relationship visually. The snippet assumes Mermaid is available, and labels are supplied as part of the arrow syntax, resulting in annotated connections between classes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclassA --|> classB : Inheritance\nclassC --* classD : Composition\nclassE --o classF : Aggregation\nclassG --> classH : Association\nclassI -- classJ : Link(Solid)\nclassK ..> classL : Dependency\nclassM ..|> classN : Realization\nclassO .. classP : Link(Dashed)\n\n```\n\n----------------------------------------\n\nTITLE: Container Diagram Example - C4Container\nDESCRIPTION: This Mermaid code defines a Container diagram for an Internet Banking System using the C4Container notation. It includes elements like Person, System, Container, and Container_Ext, and defines their relationships, communication protocols, and technologies. The example also demonstrates styling the elements and relationships.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/c4.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nC4Container\n    title Container diagram for Internet Banking System\n\n    System_Ext(email_system, \"E-Mail System\", \"The internal Microsoft Exchange system\", $tags=\"v1.0\")\n    Person(customer, Customer, \"A customer of the bank, with personal bank accounts\", $tags=\"v1.0\")\n\n    Container_Boundary(c1, \"Internet Banking\") {\n        Container(spa, \"Single-Page App\", \"JavaScript, Angular\", \"Provides all the Internet banking functionality to customers via their web browser\")\n        Container_Ext(mobile_app, \"Mobile App\", \"C#, Xamarin\", \"Provides a limited subset of the Internet banking functionality to customers via their mobile device\")\n        Container(web_app, \"Web Application\", \"Java, Spring MVC\", \"Delivers the static content and the Internet banking SPA\")\n        ContainerDb(database, \"Database\", \"SQL Database\", \"Stores user registration information, hashed auth credentials, access logs, etc.\")\n        ContainerDb_Ext(backend_api, \"API Application\", \"Java, Docker Container\", \"Provides Internet banking functionality via API\")\n\n    }\n\n    System_Ext(banking_system, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n    Rel(customer, web_app, \"Uses\", \"HTTPS\")\n    UpdateRelStyle(customer, web_app, $offsetY=\"60\", $offsetX=\"90\")\n    Rel(customer, spa, \"Uses\", \"HTTPS\")\n    UpdateRelStyle(customer, spa, $offsetY=\"-40\")\n    Rel(customer, mobile_app, \"Uses\")\n    UpdateRelStyle(customer, mobile_app, $offsetY=\"-30\")\n\n    Rel(web_app, spa, \"Delivers\")\n    UpdateRelStyle(web_app, spa, $offsetX=\"130\")\n    Rel(spa, backend_api, \"Uses\", \"async, JSON/HTTPS\")\n    Rel(mobile_app, backend_api, \"Uses\", \"async, JSON/HTTPS\")\n    Rel_Back(database, backend_api, \"Reads from and writes to\", \"sync, JDBC\")\n\n    Rel(email_system, customer, \"Sends e-mails to\")\n    UpdateRelStyle(email_system, customer, $offsetX=\"-45\")\n    Rel(backend_api, email_system, \"Sends e-mails using\", \"sync, SMTP\")\n    UpdateRelStyle(backend_api, email_system, $offsetY=\"-60\")\n    Rel(backend_api, banking_system, \"Uses\", \"sync/async, XML/HTTPS\")\n    UpdateRelStyle(backend_api, banking_system, $offsetY=\"-50\", $offsetX=\"-140\")\n```\n\n----------------------------------------\n\nTITLE: Creating a System Context C4 Diagram in Mermaid\nDESCRIPTION: Demonstrates defining a System Context diagram (`C4Context`) using Mermaid's C4 syntax. It shows how to declare elements like Person, System, SystemDb, and Boundary, nest boundaries (Enterprise_Boundary, System_Boundary), establish relationships (Rel, BiRel), apply custom styles to elements and relationships (`UpdateElementStyle`, `UpdateRelStyle`), and configure layout (`UpdateLayoutConfig`). This example showcases basic structure and styling capabilities.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/c4.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n    C4Context\n      title System Context diagram for Internet Banking System\n      Enterprise_Boundary(b0, \"BankBoundary0\") {\n        Person(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\n        Person(customerB, \"Banking Customer B\")\n        Person_Ext(customerC, \"Banking Customer C\", \"desc\")\n\n        Person(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\n\n        System(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\n\n        Enterprise_Boundary(b1, \"BankBoundary\") {\n\n          SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n          System_Boundary(b2, \"BankBoundary2\") {\n            System(SystemA, \"Banking System A\")\n            System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts. next line.\")\n          }\n\n          System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\n          SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\n\n          Boundary(b3, \"BankBoundary3\", \"boundary\") {\n            SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank.\")\n            SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\n          }\n        }\n      }\n\n      BiRel(customerA, SystemAA, \"Uses\")\n      BiRel(SystemAA, SystemE, \"Uses\")\n      Rel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\n      Rel(SystemC, customerA, \"Sends e-mails to\")\n\n      UpdateElementStyle(customerA, $fontColor=\"red\", $bgColor=\"grey\", $borderColor=\"red\")\n      UpdateRelStyle(customerA, SystemAA, $textColor=\"blue\", $lineColor=\"blue\", $offsetX=\"5\")\n      UpdateRelStyle(SystemAA, SystemE, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-10\")\n      UpdateRelStyle(SystemAA, SystemC, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-40\", $offsetX=\"-50\")\n      UpdateRelStyle(SystemC, customerA, $textColor=\"red\", $lineColor=\"red\", $offsetX=\"-50\", $offsetY=\"20\")\n\n      UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\")\n```\n\n----------------------------------------\n\nTITLE: Alt (Alternative) Flows in Sequence Diagram Mermaid\nDESCRIPTION: Demonstrates how to express alternative paths in a sequence diagram, using alt and else. No dependencies. Expected output: A sequence diagram where Bob's response varies depending on his health.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->>Bob: Hello Bob, how are you?\n    alt is sick\n        Bob->>Alice: Not so good :(\n    else is well\n        Bob->>Alice: Feeling fresh like a daisy\n    end\n    opt Extra response\n        Bob->>Alice: Thanks for asking\n    end\n```\n\n----------------------------------------\n\nTITLE: Creating Requirement Diagrams with Mermaid.js\nDESCRIPTION: This Mermaid.js snippet defines a requirement diagram. It defines a requirement identified as 'test_req' with properties like ID, text, risk, and verification method.  An element 'test_entity' of type 'simulation' is also defined. Styling is applied using 'classDef' to assign bold font-weight to 'important' class and then applying it to 'test_entity' via 'class'. It further styles the 'test_entity' element, setting fill and stroke colors. The expected output is a rendered diagram visually representing the requirements and elements.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/requirementDiagram.md#_snippet_6\n\nLANGUAGE: Mermaid\nCODE:\n```\nrequirementDiagram\n\nrequirement test_req:::important {\n    id: 1\n    text: \"class styling example\"\n    risk: low\n    verifymethod: test\n}\n\nelement test_entity {\n    type: simulation\n}\n\nclassDef important font-weight:bold\n\nclass test_entity important\nstyle test_entity fill:#f9f,stroke:#333\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Sankey Diagram with Example Data\nDESCRIPTION: This snippet demonstrates a basic Sankey diagram definition. It includes configuration options to control the diagram's rendering (in this case, hiding the data values).  The core functionality involves defining nodes and links with corresponding values using the `sankey-beta` keyword followed by CSV formatted data.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid-example\n---\nconfig:\n  sankey:\n    showValues: false\n---\nsankey-beta\n\nAgricultural 'waste',Bio-conversion,124.729\nBio-conversion,Liquid,0.597\nBio-conversion,Losses,26.862\nBio-conversion,Solid,280.322\nBio-conversion,Gas,81.144\nBiofuel imports,Liquid,35\nBiomass imports,Solid,35\nCoal imports,Coal,11.606\nCoal reserves,Coal,63.965\nCoal,Solid,75.571\nDistrict heating,Industry,10.639\nDistrict heating,Heating and cooling - commercial,22.505\nDistrict heating,Heating and cooling - homes,46.184\nElectricity grid,Over generation / exports,104.453\nElectricity grid,Heating and cooling - homes,113.726\nElectricity grid,H2 conversion,27.14\nElectricity grid,Industry,342.165\nElectricity grid,Road transport,37.797\nElectricity grid,Agriculture,4.412\nElectricity grid,Heating and cooling - commercial,40.858\nElectricity grid,Losses,56.691\nElectricity grid,Rail transport,7.863\nElectricity grid,Lighting & appliances - commercial,90.008\nElectricity grid,Lighting & appliances - homes,93.494\nGas imports,Ngas,40.719\nGas reserves,Ngas,82.233\nGas,Heating and cooling - commercial,0.129\nGas,Losses,1.401\nGas,Thermal generation,151.891\nGas,Agriculture,2.096\nGas,Industry,48.58\nGeothermal,Electricity grid,7.013\nH2 conversion,H2,20.897\nH2 conversion,Losses,6.242\nH2,Road transport,20.897\nHydro,Electricity grid,6.995\nLiquid,Industry,121.066\nLiquid,International shipping,128.69\nLiquid,Road transport,135.835\nLiquid,Domestic aviation,14.458\nLiquid,International aviation,206.267\nLiquid,Agriculture,3.64\nLiquid,National navigation,33.218\nLiquid,Rail transport,4.413\nMarine algae,Bio-conversion,4.375\nNgas,Gas,122.952\nNuclear,Thermal generation,839.978\nOil imports,Oil,504.287\nOil reserves,Oil,107.703\nOil,Liquid,611.99\nOther waste,Solid,56.587\nOther waste,Bio-conversion,77.81\nPumped heat,Heating and cooling - homes,193.026\nPumped heat,Heating and cooling - commercial,70.672\nSolar PV,Electricity grid,59.901\nSolar Thermal,Heating and cooling - homes,19.263\nSolar,Solar Thermal,19.263\nSolar,Solar PV,59.901\nSolid,Agriculture,0.882\nSolid,Thermal generation,400.12\nSolid,Industry,46.477\nThermal generation,Electricity grid,525.531\nThermal generation,Losses,787.129\nThermal generation,District heating,79.329\nTidal,Electricity grid,9.452\nUK land based bioenergy,Bio-conversion,182.01\nWave,Electricity grid,19.013\nWind,Electricity grid,289.366\n```\n```\n\n----------------------------------------\n\nTITLE: Basic HTML with Embedded Mermaid Diagram\nDESCRIPTION: A simple HTML example showing how to embed a Mermaid diagram definition within a pre tag with the mermaid class, which will be rendered as a diagram when the page loads.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/getting-started.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  Here is a mermaid diagram:\n  <pre class=\"mermaid\">\n        graph TD\n        A[Client] --> B[Load Balancer]\n        B --> C[Server01]\n        B --> D[Server02]\n  </pre>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Configuring GitGraph: Hiding Branch Lines/Names in Mermaid\nDESCRIPTION: Demonstrates how to configure a Mermaid GitGraph diagram to hide branch names and lines using directives. The `showBranches: false` setting is applied within a `--- config: ... gitGraph: ... ---` block at the beginning of the diagram definition. This affects the visual representation by removing the explicit branch lines and labels.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n  gitGraph:\n    showBranches: false\n---\n      gitGraph\n        commit\n        branch hotfix\n        checkout hotfix\n        commit\n        branch develop\n        checkout develop\n        commit id:\"ash\" tag:\"abc\"\n        branch featureB\n        checkout featureB\n        commit type:HIGHLIGHT\n        checkout main\n        checkout hotfix\n        commit type:NORMAL\n        checkout develop\n        commit type:REVERSE\n        checkout featureB\n        commit\n        checkout main\n        merge hotfix\n        checkout featureB\n        commit\n        checkout develop\n        branch featureA\n        commit\n        checkout develop\n        merge hotfix\n        checkout featureA\n        commit\n        checkout featureB\n        commit\n        checkout develop\n        merge featureA\n        branch release\n        checkout release\n        commit\n        checkout main\n        commit\n        checkout release\n        merge main\n        checkout develop\n        merge release\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Graph Diagram in Mermaid\nDESCRIPTION: This snippet demonstrates how to create a Git graph diagram using Mermaid syntax. It defines commits, branches, checkouts, merges, and tags to visualize the commit history and branching structure of a Git repository. It shows how to define commit messages and various commands. No dependencies required, Mermaid library needs to be integrated.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/examples.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph:\n    commit \"Ashish\"\n    branch newbranch\n    checkout newbranch\n    commit id:\"1111\"\n    commit tag:\"test\"\n    checkout main\n    commit type: HIGHLIGHT\n    commit\n    merge newbranch\n    commit\n    branch b2\n    commit\n```\n\n----------------------------------------\n\nTITLE: Setting Flowchart Direction Top to Bottom (TD) in Mermaid\nDESCRIPTION: This snippet demonstrates how to set the direction of a Mermaid flowchart to top-to-bottom using the `TD` or `TB` keyword. It creates a simple flowchart with two nodes connected by an edge.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_4\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    Start --> Stop\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Mermaid Mindmap with Icons\nDESCRIPTION: Demonstrates the fundamental syntax for a Mermaid mindmap, showing a root node, nested nodes using indentation, and the inclusion of icons (`::icon(...)`) for specific nodes using classes like Font Awesome (`fa`) and Material Design Icons (`mdi`).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n  root((mindmap))\n    Origins\n      Long history\n      ::icon(fa fa-book)\n      Popularisation\n        British popular psychology author Tony Buzan\n    Research\n      On effectiveness<br/>and features\n      On Automatic creation\n        Uses\n            Creative techniques\n            Strategic planning\n            Argument mapping\n    Tools\n      Pen and paper\n      Mermaid\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n  root((mindmap))\n    Origins\n      Long history\n      ::icon(fa fa-book)\n      Popularisation\n        British popular psychology author Tony Buzan\n    Research\n      On effectiveness<br/>and features\n      On Automatic creation\n        Uses\n            Creative techniques\n            Strategic planning\n            Argument mapping\n    Tools\n      Pen and paper\n      Mermaid\n```\n\n----------------------------------------\n\nTITLE: Enabling and Configuring Sequence Numbering in Mermaid with HTML and Mermaid Syntax\nDESCRIPTION: This snippet demonstrates how to enable automatic numbering of message arrows in sequence diagrams. It can be configured globally by initializing Mermaid via JavaScript with `mermaid.initialize` and setting `sequence.showSequenceNumbers` to true. Alternatively, it can be enabled within the Mermaid diagram code using the `autonumber` directive. This requires Mermaid version supporting sequence numbering. Inputs include diagram code optionally containing `autonumber`, the output is diagrams with each arrow automatically labeled with a sequence number.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  mermaid.initialize({ sequence: { showSequenceNumbers: true } });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Migrating mermaid.render from Callback to Async/Await (JavaScript)\nDESCRIPTION: Illustrates the transition in Mermaid's 'render' API from callback-based (pre-v10) to Promise-based (v10+), supporting both async/await and .then() Promise chaining. Requires the 'mermaid' global and a valid render target element. Inputs include graph definition strings and element to bind rendering output; outputs SVG markup and an optional post-render binding function. Applies only in browsers or environments supporting ES modules and Promises.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CHANGELOG.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// < v10\nmermaid.render('id', 'graph TD;\\nA-->B', (svg, bindFunctions) => {\n  element.innerHTML = svg;\n  if (bindFunctions) {\n    bindFunctions(element);\n  }\n});\n\n// Shorter syntax\nif (bindFunctions) {\n  bindFunctions(element);\n}\n// can be replaced with the `?.` shorthand\nbindFunctions?.(element);\n\n// >= v10 with async/await\nconst { svg, bindFunctions } = await mermaid.render('id', 'graph TD;\\nA-->B');\nelement.innerHTML = svg;\nbindFunctions?.(element);\n\n// >= v10 with promise.then\nmermaid.render('id', 'graph TD;A-->B').then(({ svg, bindFunctions }) => {\n  element.innerHTML = svg;\n  bindFunctions?.(element);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Attaching Style Classes in Mermaid Flowcharts - mermaid\nDESCRIPTION: This snippet demonstrates how to define style classes with specific CSS rules and attach these classes to nodes in Mermaid flowcharts using multiple syntaxes. It covers single and multiple class definitions, attaching classes to individual nodes and multiple nodes, and a shorter syntax using the \":::\" operator. These features allow for consistent styling of flowchart elements and improved readability.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_56\n\nLANGUAGE: mermaid\nCODE:\n```\n    classDef className fill:#f9f,stroke:#333,stroke-width:4px;\n```\n\nLANGUAGE: mermaid\nCODE:\n```\n    classDef firstClassName,secondClassName font-size:12pt;\n```\n\nLANGUAGE: mermaid\nCODE:\n```\n    class nodeId1 className;\n```\n\nLANGUAGE: mermaid\nCODE:\n```\n    class nodeId1,nodeId2 className;\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A:::someclass --> B\n    classDef someclass fill:#f96\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A:::foo & B:::bar --> C:::foobar\n    classDef foo stroke:#f00\n    classDef bar stroke:#0f0\n    classDef foobar stroke:#00f\n```\n\nLANGUAGE: mermaid\nCODE:\n```\n    classDef default fill:#f9f,stroke:#333,stroke-width:4px;\n```\n\n----------------------------------------\n\nTITLE: Specifying Cardinality (Multiplicity) in Class Relationships - Mermaid\nDESCRIPTION: Illustrates the placement of cardinality or multiplicity notations near association arrows in a Mermaid class diagram, using quoted values like \"1\", \"*\", or \"1..*\" to denote possible class instance connections. Only Mermaid is required; the snippet expects class names, relationship arrows, and multiplicity as input, producing diagrams that clarify how objects relate quantitatively.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    Customer \"1\" --> \"*\" Ticket\n    Student \"1\" --> \"1..*\" Course\n    Galaxy --> \"many\" Star : Contains\n\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram Example in Mermaid\nDESCRIPTION: Shows a sequence diagram depicting interactions between participants Alice, John, and Bob, including message passing, looping, and notes. Utilizes Mermaid sequence syntax for communication flows.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/examples.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>John: Hello John, how are you?\n    loop HealthCheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts <br/>prevail!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n```\n\n----------------------------------------\n\nTITLE: Using Loops, Alternatives, and Optional Blocks in Mermaid Sequence Diagrams\nDESCRIPTION: Demonstrates advanced sequence diagram features within `sequenceDiagram`: `loop` for repeating sequences (e.g., `Daily query`), `alt` for modeling alternative flows based on conditions (e.g., `is sick` vs `is well`), and `opt` for representing optional sequences (e.g., `Extra response`). These blocks structure the diagram to show conditional or repetitive interactions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/examples.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    loop Daily query\n        Alice->>Bob: Hello Bob, how are you?\n        alt is sick\n            Bob->>Alice: Not so good :(\n        else is well\n            Bob->>Alice: Feeling fresh like a daisy\n        end\n\n        opt Extra response\n            Bob->>Alice: Thanks for asking\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Frontmatter for Diagram Code\nDESCRIPTION: This snippet demonstrates the usage of Frontmatter within a Mermaid diagram. Frontmatter allows configuring diagram settings before rendering.  The example sets a title, display mode, and theme using YAML syntax. Improper syntax could break the diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/syntax-reference.md#_snippet_1\n\nLANGUAGE: mermaid-example\nCODE:\n```\n---\ntitle: Frontmatter Example\ndisplayMode: compact\nconfig:\n  theme: forest\ngantt:\n    useWidth: 400\n    compact: true\n---\ngantt\n    section Waffle\n        Iron  : 1982, 3y\n        House : 1986, 3y\n```\n\n----------------------------------------\n\nTITLE: Site-wide Theme Configuration with Initialize Method in JavaScript\nDESCRIPTION: Example of setting a site-wide theme by calling the initialize method on the mermaid object, configuring security level and selecting the base theme.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/theming.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid.initialize({\n  securityLevel: 'loose',\n  theme: 'base',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Mermaid Diagrams with YAML Frontmatter (mermaid)\nDESCRIPTION: This example illustrates how to use YAML frontmatter for configuring Mermaid diagrams. The snippet includes settings such as title, displayMode, theme, and specific diagram parameters within the frontmatter section, delineated by triple-dash lines (---). Inputs are configuration options and a Gantt chart definition; outputs include a customized diagram appearance and behavior. Consistent indentation and correct YAML syntax are required to avoid diagram errors. No external dependencies other than Mermaid syntax support are necessary.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/syntax-reference.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Frontmatter Example\ndisplayMode: compact\nconfig:\n  theme: forest\ngantt:\n    useWidth: 400\n    compact: true\n---\ngantt\n    section Waffle\n        Iron  : 1982, 3y\n        House : 1986, 3y\n```\n\n----------------------------------------\n\nTITLE: Creating a C4 Container Diagram using Mermaid\nDESCRIPTION: This snippet illustrates the `C4Container` diagram type. It defines elements like `System_Ext`, `Person`, `Container`, `Container_Ext`, `ContainerDb`, and uses `Container_Boundary`. Relationships (`Rel`, `Rel_Back`) connect these elements, and `UpdateRelStyle` is used to adjust relationship appearance. Elements can also have tags (`$tags`).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/c4.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\n    C4Container\n    title Container diagram for Internet Banking System\n\n    System_Ext(email_system, \"E-Mail System\", \"The internal Microsoft Exchange system\", $tags=\"v1.0\")\n    Person(customer, Customer, \"A customer of the bank, with personal bank accounts\", $tags=\"v1.0\")\n\n    Container_Boundary(c1, \"Internet Banking\") {\n        Container(spa, \"Single-Page App\", \"JavaScript, Angular\", \"Provides all the Internet banking functionality to customers via their web browser\")\n        Container_Ext(mobile_app, \"Mobile App\", \"C#, Xamarin\", \"Provides a limited subset of the Internet banking functionality to customers via their mobile device\")\n        Container(web_app, \"Web Application\", \"Java, Spring MVC\", \"Delivers the static content and the Internet banking SPA\")\n        ContainerDb(database, \"Database\", \"SQL Database\", \"Stores user registration information, hashed auth credentials, access logs, etc.\")\n        ContainerDb_Ext(backend_api, \"API Application\", \"Java, Docker Container\", \"Provides Internet banking functionality via API\")\n\n    }\n\n    System_Ext(banking_system, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n    Rel(customer, web_app, \"Uses\", \"HTTPS\")\n    UpdateRelStyle(customer, web_app, $offsetY=\"60\", $offsetX=\"90\")\n    Rel(customer, spa, \"Uses\", \"HTTPS\")\n    UpdateRelStyle(customer, spa, $offsetY=\"-40\")\n    Rel(customer, mobile_app, \"Uses\")\n    UpdateRelStyle(customer, mobile_app, $offsetY=\"-30\")\n\n    Rel(web_app, spa, \"Delivers\")\n    UpdateRelStyle(web_app, spa, $offsetX=\"130\")\n    Rel(spa, backend_api, \"Uses\", \"async, JSON/HTTPS\")\n    Rel(mobile_app, backend_api, \"Uses\", \"async, JSON/HTTPS\")\n    Rel_Back(database, backend_api, \"Reads from and writes to\", \"sync, JDBC\")\n\n    Rel(email_system, customer, \"Sends e-mails to\")\n    UpdateRelStyle(email_system, customer, $offsetX=\"-45\")\n    Rel(backend_api, email_system, \"Sends e-mails using\", \"sync, SMTP\")\n    UpdateRelStyle(backend_api, email_system, $offsetY=\"-60\")\n    Rel(backend_api, banking_system, \"Uses\", \"sync/async, XML/HTTPS\")\n    UpdateRelStyle(backend_api, banking_system, $offsetY=\"-50\", $offsetX=\"-140\")\n```\n\n----------------------------------------\n\nTITLE: Rendering a Class Diagram\nDESCRIPTION: This snippet demonstrates a basic class diagram using Mermaid syntax. It illustrates classes, relationships (inheritance, association), attributes, and methods.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n--- \ntitle: Animal example\n---\nclassDiagram\n    note \"From Duck till Zebra\"\n    Animal <|-- Duck\n    note for Duck \"can fly\\ncan swim\\ncan dive\\ncan help in debugging\"\n    Animal <|-- Fish\n    Animal <|-- Zebra\n    Animal : +int age\n    Animal : +String gender\n    Animal: +isMammal()\n    Animal: +mate()\n    class Duck{\n        +String beakColor\n        +swim()\n        +quack()\n    }\n    class Fish{\n        -int sizeInFeet\n        -canEat()\n    }\n    class Zebra{\n        +bool is_wild\n        +run()\n    }\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram with Loops, Alt, and Opt in Mermaid\nDESCRIPTION: This snippet demonstrates a sequence diagram with advanced features such as loops, alt (alternative paths), and opt (optional sections) in Mermaid. It showcases how to represent conditional logic and repeating actions in a sequence diagram. No dependencies required, Mermaid library needs to be integrated.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/examples.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    loop Daily query\n        Alice->>Bob: Hello Bob, how are you?\n        alt is sick\n            Bob->>Alice: Not so good :(\n        else is well\n            Bob->>Alice: Feeling fresh like a daisy\n        end\n\n        opt Extra response\n            Bob->>Alice: Thanks for asking\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Defining Image Shape Nodes in Mermaid Flowchart DSL\nDESCRIPTION: This snippet shows how to embed an image node in a Mermaid flowchart using the 'img' shape attribute. The example defines an image node referencing a remote image URL with a label ('Image Label'), label position on top ('t'), width and height both set to 60, and constraint disabled ('off'). This allows embedding of custom images directly in flowcharts for enhanced visual communication. Inputs are image URL and display parameters; output is a flowchart node showing the image with label and styling.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_20\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ img: \"https://example.com/image.png\", label: \"Image Label\", pos: \"t\", w: 60, h: 60, constraint: \"off\" }\n```\n\n----------------------------------------\n\nTITLE: Defining an Image Node Shape\nDESCRIPTION: This snippet defines a node with an image from a URL. It includes a label positioned at the top of the image, and sets the width and height of the image.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_66\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ img: \"https://example.com/image.png\", label: \"Image Label\", pos: \"t\", w: 60, h: 60, constraint: \"off\" }\n```\n\n----------------------------------------\n\nTITLE: Creating a Node with Round Edges in Mermaid Flowchart\nDESCRIPTION: This snippet demonstrates how to create a node with round edges in a Mermaid flowchart. The text is enclosed in parentheses `()`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_6\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    id1(This is the text in the box)\n```\n\n----------------------------------------\n\nTITLE: Rendering a Pie Chart with Mermaid\nDESCRIPTION: This snippet demonstrates a basic pie chart. It defines the chart type as \"pie\" and then provides the data for the chart. The labels for the pie slices are enclosed in quotes, followed by a colon and the numerical value.  This example requires no dependencies beyond the Mermaid-js library.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/pie.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\npie title Pets adopted by volunteers\n    \"Dogs\" : 386\n    \"Cats\" : 85\n    \"Rats\" : 15\n```\n\n----------------------------------------\n\nTITLE: Migrating mermaid.parse to Async API (JavaScript)\nDESCRIPTION: Shows how the API for parsing Mermaid diagrams has changed from synchronous with callback error handling to an asynchronous Promise-based approach. Requires the 'mermaid' object and an error-handling callback. Input is the diagram source string; errors are managed via .catch or try/catch. Make sure your environment supports async/await and Promises.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CHANGELOG.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// < v10\nmermaid.parse(text, parseError);\n\n//>= v10\nawait mermaid.parse(text).catch(parseError);\n// or\ntry {\n  await mermaid.parse(text);\n} catch (err) {\n  parseError(err);\n}\n```\n\n----------------------------------------\n\nTITLE: Git Graph Example in Mermaid\nDESCRIPTION: Represents a Git commit history with branching and checkout operations, demonstrating version control flow visually within Mermaid syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/examples.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n   commit\n   commit\n   branch develop\n   commit\n   commit\n   commit\n   checkout main\n   commit\n   commit\n```\n\n----------------------------------------\n\nTITLE: Parsing Diagram Text in TypeScript\nDESCRIPTION: The `parse` function parses mermaid diagram text to validate its syntax. It takes the mermaid diagram definition as text, along with a `parseOptions` object. It returns a Promise that resolves to a `ParseResult` object if the diagram is valid, or `false` if parseOptions.suppressErrors is `true`.  Errors are thrown if the diagram is invalid and `suppressErrors` is not set. This function is central to validating and understanding the diagram's structure.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/Mermaid.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nparse: (`text`, `parseOptions`) => `Promise`<`false` | [`ParseResult`](ParseResult.md)>(`text`, `parseOptions`?) => `Promise`<[`ParseResult`](ParseResult.md)>\n```\n\n----------------------------------------\n\nTITLE: Defining States with ID and Colon Description\nDESCRIPTION: Displays defining a state with an ID followed by a colon and description, enabling concise state labeling within state diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    s2 : This is a state description\n```\n\n----------------------------------------\n\nTITLE: Defining URL Links in Mermaid Class Diagrams\nDESCRIPTION: This snippet demonstrates linking to a URL using the `link` and `click href` syntax. It sets up a link associated with a shape that, when clicked, will open in a new browser tab. Includes a tooltip.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_21\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclass Shape\nlink Shape \"https://www.github.com\" \"This is a tooltip for a link\"\nclass Shape2\nclick Shape2 href \"https://www.github.com\" \"This is a tooltip for a link\"\n```\n\n----------------------------------------\n\nTITLE: Styling Mermaid Sequence Diagrams Using CSS Classes\nDESCRIPTION: This snippet provides a sample stylesheet that defines the appearance of various elements in Mermaid sequence diagrams. It assigns colors, fonts, strokes, and fills for actors, messages, notes, loops, labels, and arrows using specific CSS classes outlined in the document. This requires applying CSS styling during diagram rendering, either embedded or linked. Input is CSS rules targeting Mermaid's SVG or HTML elements, output is visually styled and customized sequence diagrams consistent with the defined theme.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_27\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  background: white;\n}\n\n.actor {\n  stroke: #ccccff;\n  fill: #ececff;\n}\ntext.actor {\n  fill: black;\n  stroke: none;\n  font-family: Helvetica;\n}\n\n.actor-line {\n  stroke: grey;\n}\n\n.messageLine0 {\n  stroke-width: 1.5;\n  stroke-dasharray: '2 2';\n  marker-end: 'url(#arrowhead)';\n  stroke: black;\n}\n\n.messageLine1 {\n  stroke-width: 1.5;\n  stroke-dasharray: '2 2';\n  stroke: black;\n}\n\n#arrowhead {\n  fill: black;\n}\n\n.messageText {\n  fill: black;\n  stroke: none;\n  font-family: 'trebuchet ms', verdana, arial;\n  font-size: 14px;\n}\n\n.labelBox {\n  stroke: #ccccff;\n  fill: #ececff;\n}\n\n.labelText {\n  fill: black;\n  stroke: none;\n  font-family: 'trebuchet ms', verdana, arial;\n}\n\n.loopText {\n  fill: black;\n  stroke: none;\n  font-family: 'trebuchet ms', verdana, arial;\n}\n\n.loopLine {\n  stroke-width: 2;\n  stroke-dasharray: '2 2';\n  marker-end: 'url(#arrowhead)';\n  stroke: #ccccff;\n}\n\n.note {\n  stroke: #decc93;\n  fill: #fff5ad;\n}\n\n.noteText {\n  fill: black;\n  stroke: none;\n  font-family: 'trebuchet ms', verdana, arial;\n  font-size: 14px;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Various UML Relationships in Mermaid - Mermaid\nDESCRIPTION: Demonstrates how to represent eight major UML class relationships—inheritance, composition, aggregation, association, solid link, dependency, realization, and dashed link—using Mermaid's classDiagram syntax. No external dependencies are required beyond Mermaid itself; code is intended for embedding within Markdown or supported documentation tools. This snippet expects class names as input, with diagram output visualizing the structure.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclassA <|-- classB\nclassC *-- classD\nclassE o-- classF\nclassG <-- classH\nclassI -- classJ\nclassK <.. classL\nclassM <|.. classN\nclassO .. classP\n\n```\n\n----------------------------------------\n\nTITLE: Annotating Classes with Markers (e.g., Interface) - Mermaid\nDESCRIPTION: Demonstrates how classes can be given additional markers or stereotypes, such as <<interface>>, within Mermaid diagrams by placing annotation lines after class definitions. Only Mermaid syntax is needed, and the output diagram visually distinguishes interfaces, abstract classes, enumerations, and services via explicit annotations.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_16\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclass Shape\n<<interface>> Shape\nShape : noOfVertices\nShape : draw()\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Subroutine-Shaped Node in Mermaid Flowchart\nDESCRIPTION: This snippet demonstrates how to create a subroutine-shaped node in a Mermaid flowchart. The text is enclosed in double square brackets `[[]]`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_8\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    id1[[This is the text in the box]]\n```\n\n----------------------------------------\n\nTITLE: Deprecation and Replacement of mermaid.init and mermaid.initThrowsErrors (JavaScript)\nDESCRIPTION: Demonstrates migration from the deprecated 'init' and 'initThrowsErrors' methods to their recommended replacements: 'initialize' and 'run'. The configuration object is now properly used. Required: a 'config' object, CSS selector, and an optional callback. Outputs are controlled rendering and initialization of Mermaid diagrams; error suppression can be toggled via the 'suppressErrors' parameter.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CHANGELOG.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// < v10\nmermaid.init(config, selector, cb);\n\n//>= v10\nmermaid.initialize(config);\nmermaid.run({\n  querySelector: selector,\n  postRenderCallback: cb,\n  suppressErrors: true,\n});\n```\n\nLANGUAGE: js\nCODE:\n```\n// < v10\nmermaid.initThrowsErrors(config, selector, cb);\n\n//>= v10\nmermaid.initialize(config);\nmermaid.run({\n  querySelector: selector,\n  postRenderCallback: cb,\n  suppressErrors: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Git Graph Orientation to Bottom-to-Top (BT)\nDESCRIPTION: This snippet illustrates setting the Mermaid Git Graph orientation to Bottom-to-Top using the `BT:` directive (available from v11.0.0+). Commits flow upwards, and branches are arranged side-by-side.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_18\n\nLANGUAGE: mermaid\nCODE:\n```\n    gitGraph BT:\n       commit\n       commit\n       branch develop\n       commit\n       commit\n       checkout main\n       commit\n       commit\n       merge develop\n       commit\n       commit\n```\n\n----------------------------------------\n\nTITLE: Defining a Class - Mermaid\nDESCRIPTION: This snippet demonstrates how to define a class of styles in a Mermaid flowchart using the `classDef` directive.  Classes can then be applied to nodes for consistent styling.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_107\n\nLANGUAGE: Mermaid\nCODE:\n```\nclassDef className fill:#f9f,stroke:#333,stroke-width:4px;\n```\n\n----------------------------------------\n\nTITLE: Defining Critical Regions with Options in Mermaid Sequence Diagrams\nDESCRIPTION: Explains how to use the `critical`, `option`, and `end` keywords in Mermaid to model atomic actions with conditional paths based on different circumstances. This example shows establishing a DB connection, with options for handling network timeouts or rejected credentials.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_17\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    critical Establish a connection to the DB\n        Service-->DB: connect\n    option Network timeout\n        Service-->Service: Log error\n    option Credentials rejected\n        Service-->Service: Log different error\n    end\n```\n\n----------------------------------------\n\nTITLE: Binding Functions After Mermaid SVG Rendering in JavaScript\nDESCRIPTION: Demonstrates usage of the optional bindFunctions method from the RenderResult interface to attach event listeners to SVG elements after rendering a Mermaid diagram. The snippet shows extracting the SVG string and binding functions from the render call, inserting the SVG into a container element in the DOM, and conditionally invoking bindFunctions if it exists. This ensures interactive behaviors can be attached after SVG insertion.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/RenderResult.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { svg, bindFunctions } = await mermaid.render('id1', 'graph TD;A-->B');\ndiv.innerHTML = svg;\nbindFunctions?.(div); // To call bindFunctions only if it's present.\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Entity Relationship Diagram Using Mermaid Syntax\nDESCRIPTION: Defines a simple ER diagram example with three entities (CUSTOMER, ORDER, DELIVERY-ADDRESS) and the relationships between them using Mermaid's erDiagram syntax. It depicts how entities relate, illustrating placement and cardinality labels with crow's foot notation. This snippet requires Mermaid support with ER diagram capability to visualize relationships meaningfully.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Order example\n---\nerDiagram\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ LINE-ITEM : contains\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n```\n\n----------------------------------------\n\nTITLE: Combined Styling with Classes and Direct Styles in Mermaid\nDESCRIPTION: Shows how to combine different styling methods: defining a class with `classDef`, applying a class using the `:::` shorthand during node definition, applying a class using the `class` keyword after definition, and applying direct styles with `style`. This demonstrates the flexibility in applying styles.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/requirementDiagram.md#_snippet_6\n\nLANGUAGE: Mermaid\nCODE:\n```\nrequirementDiagram\n\nrequirement test_req:::important {\n    id: 1\n    text: \"class styling example\"\n    risk: low\n    verifymethod: test\n}\n\nelement test_entity {\n    type: simulation\n}\n\nclassDef important font-weight:bold\n\nclass test_entity important\nstyle test_entity fill:#f9f,stroke:#333\n```\n\n----------------------------------------\n\nTITLE: Applying Frontmatter Configuration to Mermaid Diagrams in YAML\nDESCRIPTION: This snippet demonstrates how Mermaid diagram authors can override the default rendering configuration by specifying a YAML frontmatter block at the top of a diagram. The frontmatter includes a title and a 'config' section where themes and theme variables like primaryColor can be customized. It requires Mermaid's frontmatter functionality enabled since v10.5.0, and adjusts how diagrams appear without changing global site configuration.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/configuration.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Hello Title\nconfig:\n  theme: base\n  themeVariables:\n    primaryColor: \"#00ff00\"\n---\nflowchart\n\tHello --> World\n```\n\n----------------------------------------\n\nTITLE: Creating Architecture Diagram - Beta Syntax\nDESCRIPTION: This snippet demonstrates the basic syntax for creating an architecture diagram using the `architecture-beta` keyword. It defines a group, services within the group, and edges connecting the services. The diagram visually represents relationships between services. It requires the mermaid-js library to render the diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\narchitecture-beta\n    group api(cloud)[API]\n\n    service db(database)[Database] in api\n    service disk1(disk)[Storage] in api\n    service disk2(disk)[Storage] in api\n    service server(server)[Server] in api\n\n    db:L -- R:server\n    disk1:T -- B:server\n    disk2:T -- B:db\n```\n\n----------------------------------------\n\nTITLE: Adding Tasks to Columns - Mermaid\nDESCRIPTION: This snippet demonstrates how to add tasks to columns in a Mermaid Kanban diagram using the `taskId[Task Description]` syntax. Tasks are indented under their respective columns, and the task ID is a unique identifier.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/kanban.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ntaskId[Task Description]\n```\n\n----------------------------------------\n\nTITLE: Entity Relationship Diagram (ER) in Mermaid\nDESCRIPTION: Displays customer, order, line-item, and delivery address entities with their relationships, illustrating how entities are related via one-to-many and one-to-one associations. Dependencies include Mermaid's ER diagram syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n CUSTOMER ||--o{ ORDER : places\n ORDER ||--|{ LINE-ITEM : contains\n CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Styling to Mermaid Flowcharts via CSS Classes - HTML and mermaid\nDESCRIPTION: This snippet shows how to predefine CSS classes in HTML style tags and apply these classes to Mermaid flowchart nodes. By leveraging external CSS, users can customize the appearance of node elements (e.g., rect elements) beyond Mermaid's built-in style options. This method requires the CSS to be included in the webpage embedding the Mermaid graph, enabling advanced styling via standard CSS selectors.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_57\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  .cssClass > rect {\n    fill: #ff0000;\n    stroke: #ffff00;\n    stroke-width: 4px;\n  }\n</style>\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A-->B[AAA<span>BBB</span>]\n    B-->D\n    class A cssClass\n```\n\n----------------------------------------\n\nTITLE: Define Participants in Sequence Diagram Mermaid\nDESCRIPTION: Demonstrates how to explicitly define participants in a sequence diagram.  This allows controlling the order in which participants appear. No specific dependencies. Expected output: A sequence diagram with Alice and Bob in the specified order.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Bob->>Alice: Hi Alice\n    Alice->>Bob: Hi Bob\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Strings for Node Labels\nDESCRIPTION: Demonstrates the use of Markdown strings (`\"```\"`) for node labels, enabling text formatting (bold, italics) using `**` and `*` respectively, and automatic text wrapping, including support for newline characters.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_12\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    id1[\"`**Root** with\na second line\nUnicode works too: 🥺`\"]\n      id2[\"`The dog in **the** hog... a *very long text* that wraps to a new line`\"]\n      id3[Regular labels still works]\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    id1[\"`**Root** with\na second line\nUnicode works too: 🥺`\"]\n      id2[\"`The dog in **the** hog... a *very long text* that wraps to a new line`\"]\n      id3[Regular labels still works]\n```\n\n----------------------------------------\n\nTITLE: Defining Callbacks in Mermaid Class Diagrams\nDESCRIPTION: This snippet demonstrates setting up JavaScript callbacks in Mermaid class diagrams. Uses the `callback` and `click call` syntax to trigger a function when a node is clicked. Includes a tooltip.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_22\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclass Shape\ncallback Shape \"callbackFunction\" \"This is a tooltip for a callback\"\nclass Shape2\nclick Shape2 call callbackFunction() \"This is a tooltip for a callback\"\n```\n\n----------------------------------------\n\nTITLE: Defining Various UML Relationships in Mermaid - Mermaid-Example\nDESCRIPTION: Provides a Mermaid class diagram example illustrating eight UML association types including visual relationship arrows for inheritance, composition, aggregation, association, link (solid/dashed), dependency, and realization. The snippet only requires Mermaid for rendering and is meant to serve as a documentation sample for users to observe various relationship notations and their effects on diagram structure.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclassA <|-- classB\nclassC *-- classD\nclassE o-- classF\nclassG <-- classH\nclassI -- classJ\nclassK <.. classL\nclassM <|.. classN\nclassO .. classP\n\n```\n\n----------------------------------------\n\nTITLE: Sankey Diagram Syntax and CSV Data Format\nDESCRIPTION: Details the syntax rules for creating Sankey diagrams using Mermaid.js, emphasizing the requirement for CSV data with exactly three columns representing source, target, and value. Explains how to handle empty lines, commas within data, and double quotes for special characters. This ensures correct parsing and rendering of flow data.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sankey.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nsankey-beta\n\n%% source,target,value\nElectricity grid,Over generation / exports,104.453\nElectricity grid,Heating and cooling - homes,113.726\nElectricity grid,H2 conversion,27.14\n\n```\n\nLANGUAGE: markdown\nCODE:\n```\nBio-conversion,Losses,26.862\n\nBio-conversion,Solid,280.322\n\nBio-conversion,Gas,81.144\n```\n\nLANGUAGE: markdown\nCODE:\n```\nPumped heat,\"Heating and cooling, homes\",193.026\nPumped heat,\"Heating and cooling, commercial\",70.672\n```\n\nLANGUAGE: markdown\nCODE:\n```\nPumped heat,\"Heating and cooling, \"\"homes\"\"\",193.026\nPumped heat,\"Heating and cooling, \"\"commercial\"\"\",70.672\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Node with Rounded Shape in Mermaid (mermaid-example)\nDESCRIPTION: This Mermaid-example code draws a top-down flowchart containing a single event node, explicitly rendered as a 'rounded' rectangle and labeled 'This is an event'. The example demonstrates using the shape property to visually differentiate event-driven nodes. Mermaid version with support for the 'rounded' shape definition is required. Takes node definitions as input; outputs a flowchart emphasizing event representation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_4\n\nLANGUAGE: mermaid-example\nCODE:\n```\nflowchart TD\n    A@{ shape: rounded, label: \"This is an event\" }\n```\n\n----------------------------------------\n\nTITLE: Defining a Single Property classDef in Mermaid State Diagrams - Plain Text\nDESCRIPTION: This text snippet shows how to define a classDef with a single property-value pair using Mermaid's style system. The example 'classDef movement font-style:italic;' creates a style named 'movement' that sets italic font style. This must be placed inside a Mermaid diagram block. No parameters are required except the style name and properties; outputs depend on subsequent application to diagram states.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_20\n\nLANGUAGE: txt\nCODE:\n```\nclassDef movement font-style:italic;\n```\n\n----------------------------------------\n\nTITLE: Rendering Mermaid Diagrams in Python using mermaid.ink\nDESCRIPTION: This Python script defines a function `mm` that takes a Mermaid diagram definition string as input. It encodes the definition, sends it to the `mermaid.ink` service to generate an image, retrieves the image, displays it using `matplotlib.pyplot` and `IPython.display` (suitable for Jupyter notebooks), and saves it as 'image.png' with high resolution. Dependencies include `base64`, `io`, `requests`, `IPython.display`, `PIL`, and `matplotlib.pyplot`. The example usage demonstrates rendering a simple graph.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/ecosystem/tutorials.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport base64\nimport io, requests\nfrom IPython.display import Image, display\nfrom PIL import Image as im\nimport matplotlib.pyplot as plt\n\ndef mm(graph):\n    graphbytes = graph.encode(\"utf8\")\n    base64_bytes = base64.urlsafe_b64encode(graphbytes)\n    base64_string = base64_bytes.decode(\"ascii\")\n    img = im.open(io.BytesIO(requests.get('https://mermaid.ink/img/' + base64_string).content))\n    plt.imshow(img)\n    plt.axis('off') # allow to hide axis\n    plt.savefig('image.png', dpi=1200)\n\nmm(\"\"\"\ngraph LR;\n    A--> B & C & D\n    B--> A & E\n    C--> A & E\n    D--> A & E\n    E--> B & C & D\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Using Generic Types in Class Definition\nDESCRIPTION: This snippet shows how to represent generic types within class definitions, member attributes, and return types. Nested types are also supported. This allows for type specification within the class diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclass Square~Shape~{\n    int id\n    List~int~ position\n    setPoints(List~int~ points)\n    getPoints() List~int~\n}\n\nSquare : -List~string~ messages\nSquare : +setMessages(List~string~ messages)\nSquare : +getMessages() List~string~\nSquare : +getDistanceMatrix() List~List~int~~\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Targets for External Links\nDESCRIPTION: Shows how to specify link target attributes ('_blank', '_self', etc.) in 'click' statements to control whether links open in the same or new window/tab.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_52\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A-->B\n    B-->C\n    C-->D\n    D-->E\n    click A \"https://www.github.com\" _blank\n    click B \"https://www.github.com\" \"Open in new tab\" _blank\n```\n\n----------------------------------------\n\nTITLE: Adding Loops - Mermaid\nDESCRIPTION: Shows how to represent repetitive sequences of actions using the `loop` block. The block starts with `loop [Loop text]` and ends with `end`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_13\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    loop Every minute\n        John-->Alice: Great!\n    end\n```\n\n----------------------------------------\n\nTITLE: Line Breaks in Actor Names in Mermaid\nDESCRIPTION: Illustrates how to include line breaks in Actor names via aliases. No dependencies. Expected output: A sequence diagram with a line break in Alice's name using an alias\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Alice as Alice<br/>Johnson\n    Alice->John: Hello John,<br/>how are you?\n    Note over Alice,John: A typical interaction<br/>But now in two lines\n```\n\n----------------------------------------\n\nTITLE: Defining Entities with Attributes and Relationships Using Mermaid ER Diagram Syntax\nDESCRIPTION: Defines detailed entity attribute blocks for CAR and PERSON entities along with their relationship to NAMED-DRIVER. The snippet shows how to declare typed attributes inside curly braces, with attributes like registrationNumber, make, model for CAR, and firstName, lastName, age for PERSON. This enhances diagram clarity by embedding entity details alongside relationship declarations.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    CAR ||--o{ NAMED-DRIVER : allows\n    CAR {\n        string registrationNumber\n        string make\n        string model\n    }\n    PERSON ||--o{ NAMED-DRIVER : is\n    PERSON {\n        string firstName\n        string lastName\n        int age\n    }\n```\n\n----------------------------------------\n\nTITLE: Enabling Compact Mode in Mermaid Gantt Charts\nDESCRIPTION: This code snippet demonstrates how to enable compact mode for a Gantt chart using YAML settings. Compact mode displays multiple tasks on the same row, optimizing space and improving readability for dense schedules.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ndisplayMode: compact\n---\ngantt\n    title A Gantt Diagram\n    dateFormat  YYYY-MM-DD\n\n    section Section\n    A task           :a1, 2014-01-01, 30d\n    Another task     :a2, 2014-01-20, 25d\n    Another one      :a3, 2014-02-10, 20d\n```\n\n----------------------------------------\n\nTITLE: Full Kanban Diagram Example with Configuration and Metadata in Mermaid\nDESCRIPTION: Presents a complete Kanban diagram example including a YAML configuration block for ticketBaseUrl, multiple columns with unique identifiers and titles, tasks under each column, and task metadata annotations such as assigned, ticket, and priority. This snippet showcases practical usage and indentation rules to build a comprehensive Kanban workflow visualization.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/kanban.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  kanban:\n    ticketBaseUrl: 'https://mermaidchart.atlassian.net/browse/#TICKET#'\n---\nkanban\n  Todo\n    [Create Documentation]\n    docs[Create Blog about the new diagram]\n  [In progress]\n    id6[Create renderer so that it works in all cases. We also add some extra text here for testing purposes. And some more just for the extra flare.]\n  id9[Ready for deploy]\n    id8[Design grammar]@{ assigned: 'knsv' }\n  id10[Ready for test]\n    id4[Create parsing tests]@{ ticket: MC-2038, assigned: 'K.Sveidqvist', priority: 'High' }\n    id66[last item]@{ priority: 'Very Low', assigned: 'knsv' }\n  id11[Done]\n    id5[define getData]\n    id2[Title of diagram is more than 100 chars when user duplicates diagram with 100 char]@{ ticket: MC-2036, priority: 'Very High'}\n    id3[Update DB function]@{ ticket: MC-2037, assigned: knsv, priority: 'High' }\n\n  id12[Can't reproduce]\n    id3[Weird flickering in Firefox]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Block Diagram with Blocks and Arrows in Mermaid\nDESCRIPTION: Demonstrates a comprehensive block diagram with database representation, custom arrows, nested blocks, spacing, connections between blocks, and custom styling. This example showcases the major capabilities of the block-beta syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nblock-beta\ncolumns 1\n  db((\"DB\"))\n  blockArrowId6<[\"&nbsp;&nbsp;&nbsp;\"]>(down)\n  block:ID\n    A\n    B[\"A wide one in the middle\"]\n    C\n  end\n  space\n  D\n  ID --> D\n  C --> D\n  style B fill:#969,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------\n\nTITLE: Defining a Default Shape Node in Mermaid Mindmap\nDESCRIPTION: Shows that a node defined only by its text uses the default shape, which is typically a rounded rectangle, without requiring explicit shape syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_8\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    I am the default shape\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    I am the default shape\n```\n\n----------------------------------------\n\nTITLE: Activating and Deactivating Participants - Mermaid\nDESCRIPTION: Demonstrates how to explicitly show participant activation and deactivation using the `activate` and `deactivate` keywords. This indicates when a participant is actively performing an action.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n```\n\n----------------------------------------\n\nTITLE: Activating/Deactivating Actors in Mermaid\nDESCRIPTION: Demonstrates how to activate and deactivate actors, visually indicating their active state. Shows both explicit activate/deactivate commands and the +/- shortcut notation. No dependencies. Expected output: A sequence diagram showing John as activated and then deactivated during message exchange.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n```\n\n----------------------------------------\n\nTITLE: ER Diagram with Identifying and Non-Identifying Relationships in Mermaid\nDESCRIPTION: An example showing both identifying relationships (solid lines) and non-identifying relationships (dashed lines) between entities.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    CAR ||--o{ NAMED-DRIVER : allows\n    PERSON }o..o{ NAMED-DRIVER : is\n```\n\n----------------------------------------\n\nTITLE: Pie Chart with Title and Description\nDESCRIPTION: This mermaid.js snippet demonstrates a pie chart with an accessible title and description, using the `accTitle` and `accDescr` keywords to define the title and description for improved accessibility.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid-example\n   pie\n      accTitle: My Pie Chart Accessibility Title\n      accDescr: My Pie Chart Accessibility Description\n\n    title Key elements in Product X\n    \"Calcium\" : 42.96\n    \"Potassium\" : 50.05\n    \"Magnesium\" : 10.01\n    \"Iron\" :  5\n\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Entities with Attributes in Mermaid ER Diagram Syntax\nDESCRIPTION: Illustrates how to define entities along with their attributes inside a Mermaid ER diagram. Each entity block specifies multiple typed attributes (e.g., string, int, float), shaping a richer ER model. This snippet showcases the addition of attributes to entities CUSTOMER, ORDER, and LINE-ITEM using Mermaid's attribute block syntax, enhancing clarity and detail of the model.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    CUSTOMER ||--o{ ORDER : places\n    CUSTOMER {\n        string name\n        string custNumber\n        string sector\n    }\n    ORDER ||--|{ LINE-ITEM : contains\n    ORDER {\n        int orderNumber\n        string deliveryAddress\n    }\n    LINE-ITEM {\n        string productCode\n        int quantity\n        float pricePerUnit\n    }\n```\n\n----------------------------------------\n\nTITLE: Applying Configuration and Theme to XY Chart (Mermaid)\nDESCRIPTION: Provides a comprehensive example demonstrating how to apply both general chart configurations (like width, height, showing data labels) and theme variables (like title color) using embedded YAML within the Mermaid definition. The configuration is specified within `---config ... ---` tags.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/xyChart.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n    xyChart:\n        width: 900\n        height: 600\n        showDataLabel: true\n    themeVariables:\n        xyChart:\n            titleColor: \"#ff0000\"\n---\nxychart-beta\n    title \"Sales Revenue\"\n    x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]\n    y-axis \"Revenue (in $)\" 4000 --> 11000\n    bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\n    line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\n```\n\n----------------------------------------\n\nTITLE: Defining Mermaid Configuration Directives (Multi-line)\nDESCRIPTION: Illustrates the multi-line structure for defining Mermaid directives using nested key-value pairs within `%%{ init: { ... } }%%`. This allows setting both general configurations (like theme, fontFamily, logLevel) and diagram-specific configurations (like flowchart or sequence settings).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{\n  init: {\n    \"theme\": \"dark\",\n    \"fontFamily\": \"monospace\",\n    \"logLevel\": \"info\",\n    \"flowchart\": {\n      \"htmlLabels\": true,\n      \"curve\": \"linear\"\n    },\n    \"sequence\": {\n      \"mirrorActors\": true\n    }\n  }\n}%%\n```\n\n----------------------------------------\n\nTITLE: Example Architecture Diagram with Junctions\nDESCRIPTION: This snippet provides an example of an architecture diagram that utilizes junctions. It defines services, junctions, and edges connecting them. This demonstrates the practical use of junctions for splitting or merging connections between services. The diagram showcases the visual representation of complex network layouts and interconnections, a key functionality of architecture diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_11\n\nLANGUAGE: Mermaid\nCODE:\n```\narchitecture-beta\n    service left_disk(disk)[Disk]\n    service top_disk(disk)[Disk]\n    service bottom_disk(disk)[Disk]\n    service top_gateway(internet)[Gateway]\n    service bottom_gateway(internet)[Gateway]\n    junction junctionCenter\n    junction junctionRight\n\n    left_disk:R -- L:junctionCenter\n    top_disk:B -- T:junctionCenter\n    bottom_disk:T -- B:junctionCenter\n    junctionCenter:R -- L:junctionRight\n    top_gateway:B -- T:junctionRight\n    bottom_gateway:T -- B:junctionRight\n```\n\n----------------------------------------\n\nTITLE: Creating a Combined Bar and Line XY Chart (Mermaid)\nDESCRIPTION: Demonstrates the basic syntax for creating an XY chart in Mermaid, plotting both bar and line data series. It includes defining a title, setting categorical x-axis labels, specifying a numerical y-axis range and title, and providing data arrays for both chart types.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/xyChart.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nxychart-beta\n    title \"Sales Revenue\"\n    x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]\n    y-axis \"Revenue (in $)\" 4000 --> 11000\n    bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\n    line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\n```\n\n----------------------------------------\n\nTITLE: Applying External CSS Classes in Mermaid Class Diagrams\nDESCRIPTION: This code demonstrates applying CSS classes defined in external CSS styles to Mermaid class diagram nodes.  The style is applied via a class name to the node using the `:::` operator.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_29\n\nLANGUAGE: mermaid\nCODE:\n```\n<style>\n  .styleClass > * > g {\n    fill: #ff0000;\n    stroke: #ffff00;\n    stroke-width: 4px;\n  }\n</style>\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class Animal:::styleClass\n```\n\n----------------------------------------\n\nTITLE: Detecting Diagram Type using Mermaid API\nDESCRIPTION: This JavaScript code demonstrates how to use the `mermaid.detectType` function to determine the diagram type of a given text. It imports the mermaid library and then uses the function on a sequence diagram definition.  The detected type is then logged to the console. Requires mermaid library to be imported.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import mermaid from './mermaid.esm.mjs';\n  const graphDefinition = `sequenceDiagram\n    Pumbaa->>Timon:I ate like a pig.\n    Timon->>Pumbaa:Pumbaa, you ARE a pig.`;\n  try {\n    const type = mermaid.detectType(graphDefinition);\n    console.log(type); // 'sequence'\n  } catch (error) {\n    // UnknownDiagramError\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting up the Mermaid.js Development Environment (Bash)\nDESCRIPTION: Clones the Mermaid.js repository from GitHub, changes the current directory to the cloned repository, installs project dependencies using pnpm (via npx initially due to a Volta limitation), and finally runs the project's test suite to ensure the setup is correct. Requires Git, Volta, Node.js, and pnpm to be installed.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:mermaid-js/mermaid.git\ncd mermaid\n# npx is required for first install as volta support for pnpm is not added yet.\nnpx pnpm install\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Modeling Decisions with Choices (<<choice>>)\nDESCRIPTION: Demonstrates modeling decision points with the '<<choice>>' stereotype, allowing multiple transition paths based on conditions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_13\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    state if_state <<choice>>\n    [*] --> IsPositive\n    IsPositive --> if_state\n    if_state --> False: if n < 0\n    if_state --> True : if n >= 0\n```\n\n----------------------------------------\n\nTITLE: Displaying Unicode Text in a Mermaid Node\nDESCRIPTION: This snippet demonstrates how to include Unicode characters in the text of a Mermaid node. The Unicode text is enclosed in double quotes `\"\"`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_2\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    id[\"This ❤ Unicode\"]\n```\n\n----------------------------------------\n\nTITLE: Merging Branches in Mermaid GitGraph\nDESCRIPTION: Demonstrates merging one branch into another using the `merge <branch_name>` command in a Mermaid GitGraph diagram. The example shows creating a 'develop' branch, adding commits to both 'main' and 'develop', checking out 'main', and then merging 'develop' into 'main'. This results in a merge commit visually represented by a filled double circle.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\n    gitGraph\n       commit\n       commit\n       branch develop\n       commit\n       commit\n       commit\n       checkout main\n       commit\n       commit\n       merge develop\n       commit\n       commit\n```\n\n----------------------------------------\n\nTITLE: Checking Out a Branch in GitGraph - Mermaid\nDESCRIPTION: This snippet illustrates switching between existing branches using the 'checkout' keyword. The gitGraph creates the scenario where commits are made on different branches, simulating a typical workflow where work alternates between a main and a development branch. Correct branch naming and prior creation are prerequisites for successful checkout.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n   commit\n   commit\n   branch develop\n   commit\n   commit\n   commit\n   checkout main\n   commit\n   commit\n```\n\n----------------------------------------\n\nTITLE: Cherry-picking Commits in GitGraph Using mermaid-example Language\nDESCRIPTION: Demonstrates how to perform a cherry-pick operation from another branch onto the current branch within Mermaid's gitGraph syntax. The example specifies commit IDs, branches, checkouts, merges, and a cherry-pick with a required parent commit ID parameter when cherry-picking merge commits. It illustrates the constraints such as ensuring the cherry-picked commit exists, belongs to a different branch, and current branch having prior commits. The snippet visually highlights cherry-picked commits using a cherry icon and tag.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_8\n\nLANGUAGE: mermaid-example\nCODE:\n```\n    gitGraph\n        commit id: \"ZERO\"\n        branch develop\n        branch release\n        commit id:\"A\"\n        checkout main\n        commit id:\"ONE\"\n        checkout develop\n        commit id:\"B\"\n        checkout main\n        merge develop id:\"MERGE\"\n        commit id:\"TWO\"\n        checkout release\n        cherry-pick id:\"MERGE\" parent:\"B\"\n        commit id:\"THREE\"\n        checkout develop\n        commit id:\"C\"\n```\n\n----------------------------------------\n\nTITLE: Setting Diagram Direction\nDESCRIPTION: This snippet shows how to set the direction (e.g., left-to-right) of the state diagram using the `direction` keyword.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_15\n\nLANGUAGE: mermaid-example\nCODE:\n```\nstateDiagram\n    direction LR\n    [*] --> A\n    A --> B\n    B --> C\n    state B {\n      direction LR\n      a --> b\n    }\n    B --> D\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Lean Right\nDESCRIPTION: This snippet demonstrates using the shape keyword to create a node shaped like a parallelogram leaning to the right, often used for data input/output, in a Mermaid flowchart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_29\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: lean-r, label: \"Input/Output\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Lean Left\nDESCRIPTION: This snippet shows how to create a node shaped like a parallelogram leaning to the left, using the `lean-l` shape, for data input/output.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_30\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: lean-l, label: \"Output/Input\" }\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Mermaid Architecture Diagram\nDESCRIPTION: Demonstrates a simple architecture diagram using Mermaid's `architecture-beta` type. It defines a group named 'api' with a cloud icon and 'API' label, containing services like 'db' (database), 'disk1'/'disk2' (storage), and 'server'. Edges connect these services, specifying connection points (e.g., `:L`, `:R`, `:T`, `:B`) for layout.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\narchitecture-beta\n    group api(cloud)[API]\n\n    service db(database)[Database] in api\n    service disk1(disk)[Storage] in api\n    service disk2(disk)[Storage] in api\n    service server(server)[Server] in api\n\n    db:L -- R:server\n    disk1:T -- B:server\n    disk2:T -- B:db\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Commits in GitGraph - Mermaid\nDESCRIPTION: This snippet extends commit declarations by attaching tags with the 'tag' attribute, optionally combining ID, type, and tag fields. Tags serve as visual markers for releases, versions, or milestones. The code highlights how attributes can be mixed to provide detailed commit annotations in diagrams for clear communication of release points or special events.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n   commit\n   commit id: \"Normal\" tag: \"v1.0.0\"\n   commit\n   commit id: \"Reverse\" type: REVERSE tag: \"RC_1\"\n   commit\n   commit id: \"Highlight\" type: HIGHLIGHT tag: \"8.8.4\"\n   commit\n```\n\n----------------------------------------\n\nTITLE: Configuring Mermaid Using the Initialize Method\nDESCRIPTION: The recommended approach for configuring Mermaid.js using the initialize method. This example shows how to set up configuration options for startOnLoad and flowchart settings using ES modules.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import mermaid from './mermaid.esm.mjs';\n  let config = { startOnLoad: true, flowchart: { useMaxWidth: false, htmlLabels: true } };\n  mermaid.initialize(config);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Generating a C4 Deployment Diagram for an Internet Banking System\nDESCRIPTION: This Mermaid code defines a C4 Deployment diagram for a sample Internet Banking System. It uses `C4Deployment` to initiate the diagram, `Deployment_Node` to define deployment environments (like mobile devices, servers), `Container` for applications, `ContainerDb` for databases, and `Rel` to show relationships between these components. `UpdateRelStyle` is used to adjust the visual layout of relationship lines.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/c4.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nC4Deployment\n    title Deployment Diagram for Internet Banking System - Live\n\n    Deployment_Node(mob, \"Customer's mobile device\", \"Apple IOS or Android\"){\n        Container(mobile, \"Mobile App\", \"Xamarin\", \"Provides a limited subset of the Internet Banking functionality to customers via their mobile device.\")\n    }\n\n    Deployment_Node(comp, \"Customer's computer\", \"Microsoft Windows or Apple macOS\"){\n        Deployment_Node(browser, \"Web Browser\", \"Google Chrome, Mozilla Firefox,<br/> Apple Safari or Microsoft Edge\"){\n            Container(spa, \"Single Page Application\", \"JavaScript and Angular\", \"Provides all of the Internet Banking functionality to customers via their web browser.\")\n        }\n    }\n\n    Deployment_Node(plc, \"Big Bank plc\", \"Big Bank plc data center\"){\n        Deployment_Node(dn, \"bigbank-api*** x8\", \"Ubuntu 16.04 LTS\"){\n            Deployment_Node(apache, \"Apache Tomcat\", \"Apache Tomcat 8.x\"){\n                Container(api, \"API Application\", \"Java and Spring MVC\", \"Provides Internet Banking functionality via a JSON/HTTPS API.\")\n            }\n        }\n        Deployment_Node(bb2, \"bigbank-web*** x4\", \"Ubuntu 16.04 LTS\"){\n            Deployment_Node(apache2, \"Apache Tomcat\", \"Apache Tomcat 8.x\"){\n                Container(web, \"Web Application\", \"Java and Spring MVC\", \"Delivers the static content and the Internet Banking single page application.\")\n            }\n        }\n        Deployment_Node(bigbankdb01, \"bigbank-db01\", \"Ubuntu 16.04 LTS\"){\n            Deployment_Node(oracle, \"Oracle - Primary\", \"Oracle 12c\"){\n                ContainerDb(db, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n            }\n        }\n        Deployment_Node(bigbankdb02, \"bigbank-db02\", \"Ubuntu 16.04 LTS\") {\n            Deployment_Node(oracle2, \"Oracle - Secondary\", \"Oracle 12c\") {\n                ContainerDb(db2, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n            }\n        }\n    }\n\n    Rel(mobile, api, \"Makes API calls to\", \"json/HTTPS\")\n    Rel(spa, api, \"Makes API calls to\", \"json/HTTPS\")\n    Rel_U(web, spa, \"Delivers to the customer's web browser\")\n    Rel(api, db, \"Reads from and writes to\", \"JDBC\")\n    Rel(api, db2, \"Reads from and writes to\", \"JDBC\")\n    Rel_R(db, db2, \"Replicates data to\")\n\n    UpdateRelStyle(spa, api, $offsetY=\"-40\")\n    UpdateRelStyle(web, spa, $offsetY=\"-40\")\n    UpdateRelStyle(api, db, $offsetY=\"-20\", $offsetX=\"5\")\n    UpdateRelStyle(api, db2, $offsetX=\"-40\", $offsetY=\"-20\")\n    UpdateRelStyle(db, db2, $offsetY=\"-10\")\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Delay\nDESCRIPTION: This snippet creates a half-rounded rectangle node using the shape keyword.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_46\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: delay, label: \"Delay\" }\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Gantt Chart with Task Status, Dependencies, and Exclusions\nDESCRIPTION: This example illustrates a more complex Gantt chart demonstrating various task states (done, active, crit, milestone), dependencies using the 'after' keyword, date exclusions for weekends, and different methods for specifying task timing (start/end dates, duration, relative positioning).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_1\n\nLANGUAGE: Mermaid\nCODE:\n```\ngantt\n    dateFormat  YYYY-MM-DD\n    title       Adding GANTT diagram functionality to mermaid\n    excludes    weekends\n    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".)\n\n    section A section\n    Completed task            :done,    des1, 2014-01-06,2014-01-08\n    Active task               :active,  des2, 2014-01-09, 3d\n    Future task               :         des3, after des2, 5d\n    Future task2              :         des4, after des3, 5d\n\n    section Critical tasks\n    Completed task in the critical line :crit, done, 2014-01-06,24h\n    Implement parser and jison          :crit, done, after des1, 2d\n    Create tests for parser             :crit, active, 3d\n    Future task in critical line        :crit, 5d\n    Create tests for renderer           :2d\n    Add to mermaid                      :until isadded\n    Functionality added                 :milestone, isadded, 2014-01-25, 0d\n\n    section Documentation\n    Describe gantt syntax               :active, a1, after des1, 3d\n    Add gantt diagram to demo page      :after a1  , 20h\n    Add another diagram to demo page    :doc1, after a1  , 48h\n\n    section Last section\n    Describe gantt syntax               :after doc1, 3d\n    Add gantt diagram to demo page      :20h\n    Add another diagram to demo page    :48h\n```\n\n----------------------------------------\n\nTITLE: Defining a Service in Architecture Diagram\nDESCRIPTION: This snippet illustrates the syntax for declaring a service within an architecture diagram. It uses the `service` keyword, followed by a unique identifier, an icon name in parentheses, and a title within brackets. This establishes individual components within the architecture. The output depicts a visual representation of the specified service.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_4\n\nLANGUAGE: Mermaid\nCODE:\n```\nservice database1(database)[My Database]\n```\n\n----------------------------------------\n\nTITLE: Using Font Awesome Icons in Mermaid Flowcharts\nDESCRIPTION: Demonstrates the Mermaid syntax for incorporating standard Font Awesome icons (using the `fa:` prefix) and custom Font Awesome icons (using the `fak:` prefix) within flowchart nodes. Requires Font Awesome CSS to be loaded and potentially a custom kit for `fak:` icons.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_117\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    B[fa:fa-twitter] %% standard icon\n    B-->E(fak:fa-custom-icon-name) %% custom icon\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram Example in Mermaid\nDESCRIPTION: Illustrates a sequence diagram with interactions between Alice, John, and Bob, including a health check loop and notes. This demonstrates Mermaid's ability to visualize communication and process flows in sequence.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nsequenceDiagram\nAlice->>John: Hello John, how are you?\nloop HealthCheck\n    John->>John: Fight against hypochondria\nend\nNote right of John: Rational thoughts!\nJohn-->>Alice: Great!\nJohn->>Bob: How about you?\nBob-->>John: Jolly good!\n```\n\nLANGUAGE: Markdown\nCODE:\n```\nsequenceDiagram\nAlice->>John: Hello John, how are you?\nloop HealthCheck\n    John->>John: Fight against hypochondria\nend\nNote right of John: Rational thoughts!\nJohn-->>Alice: Great!\nJohn->>Bob: How about you?\nBob-->>John: Jolly good!\n```\n\n----------------------------------------\n\nTITLE: Grouping Actors/Participants with Boxes in Mermaid\nDESCRIPTION: Illustrates how to group actors or participants within boxes. It shows how to define boxes with labels and optional colors, creating visual groupings. No specific dependencies. Expected output: A sequence diagram with Alice and John grouped in one box, and Bob and Charley in another.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    box Purple Alice & John\n    participant A\n    participant J\n    end\n    box Another Group\n    participant B\n    participant C\n    end\n    A->>J: Hello John, how are you?\n    J->>A: Great!\n    A->>B: Hello Bob, how is Charley?\n    B->>C: Hello Charley, how are you?\n```\n\n----------------------------------------\n\nTITLE: Visualizing Git Commit History with Mermaid Git Graphs\nDESCRIPTION: Demonstrates how to create a Git graph visualization using `gitGraph`. It shows basic Git operations like `commit` (optionally with specific author, id, tag, or type like HIGHLIGHT), creating and switching branches (`branch newbranch`, `checkout newbranch`), and merging branches (`merge newbranch`). This visualizes the commit history and branching structure.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/examples.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph:\n    commit \"Ashish\"\n    branch newbranch\n    checkout newbranch\n    commit id:\"1111\"\n    commit tag:\"test\"\n    checkout main\n    commit type: HIGHLIGHT\n    commit\n    merge newbranch\n    commit\n    branch b2\n    commit\n```\n\n----------------------------------------\n\nTITLE: Interactivity with Click Events in Mermaid.js\nDESCRIPTION: Describes how to bind JavaScript callbacks or URLs to flowchart nodes via 'click' statements, enabling interactive diagrams. Includes handling of tooltips, callback functions, and external links, respecting security levels.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_50\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A-->B\n    B-->C\n    C-->D\n    click A callback\n    click B \"https://www.github.com\" \"This is a tooltip for a link\"\n    click C call callback()\n    click D href \"https://www.github.com\" \"This is a tooltip for a link\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Node with Custom Text in Mermaid\nDESCRIPTION: This snippet demonstrates how to create a node with text that differs from its ID in a Mermaid flowchart. The text is enclosed in square brackets `[]` following the node ID.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_1\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    id1[This is the text in the box]\n```\n\n----------------------------------------\n\nTITLE: Defining Timeline Diagrams Using Mermaid DSL\nDESCRIPTION: Demonstrates the fundamental syntax to create a timeline diagram using Mermaid's domain-specific language (DSL). The snippet starts with the 'timeline' keyword, optionally followed by a title line specifying the timeline's caption. Then it lists time periods followed by one or more events separated by colons. Events can be on the same line or subsequent indented lines. This snippet serves as a basic example illustrating chronological event sequencing. No external dependencies are required beyond Mermaid supporting timeline diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ntimeline\n    title History of Social Media Platform\n    2002 : LinkedIn\n    2004 : Facebook\n         : Google\n    2005 : YouTube\n    2006 : Twitter\n```\n\n----------------------------------------\n\nTITLE: Running Mermaid Rendering in TypeScript\nDESCRIPTION: The `run` function goes through the HTML document, finds chart definitions, and renders them. The function avoids processing elements that have been processed before by checking for the `data-processed` attribute. This is useful for triggering the rendering process multiple times. The function accepts an optional `RunOptions` object to customize the behavior.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/Mermaid.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nrun: (`options`) => `Promise`<`void`>\n```\n\n----------------------------------------\n\nTITLE: Defining Milestones in Mermaid Gantt Charts\nDESCRIPTION: This code snippet demonstrates how to define milestones within a Mermaid Gantt chart. Milestones represent specific points in time and are defined using the `milestone` keyword, followed by an ID, a label, a date, and a duration. The milestone's location is calculated based on the initial date and half the duration.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n    dateFormat HH:mm\n    axisFormat %H:%M\n    Initial milestone : milestone, m1, 17:49, 2m\n    Task A : 10m\n    Task B : 5m\n    Final milestone : milestone, m2, 18:08, 4m\n```\n\n----------------------------------------\n\nTITLE: Flowchart Diagram Example in Mermaid\nDESCRIPTION: Sample Mermaid code demonstrating how to create a flowchart with nodes and directional edges, illustrating decision points and process flow. Dependencies include Mermaid syntax reference and a Mermaid live editor for visualization.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nflowchart LR\nA[Hard] -->|Text| B(Round)\nB --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]\n```\n\nLANGUAGE: Markdown\nCODE:\n```\nflowchart LR\nA[Hard] -->|Text| B(Round)\nB --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Graded Scores with Radar Diagram - Mermaid\nDESCRIPTION: Presents the same educational performance data as a raw Mermaid code block, suitable for direct embedding into Mermaid-aware rendering environments. Two student entities are compared across six subjects, configured with explicit min/max scaling. Requires Mermaid's radar-beta feature. Output is a radar chart comparing the input datasets by axis.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: \"Grades\"\n---\nradar-beta\n  axis m[\"Math\"], s[\"Science\"], e[\"English\"]\n  axis h[\"History\"], g[\"Geography\"], a[\"Art\"]\n  curve a[\"Alice\"]{85, 90, 80, 70, 75, 90}\n  curve b[\"Bob\"]{70, 75, 85, 80, 90, 85}\n\n  max 100\n  min 0\n```\n\n----------------------------------------\n\nTITLE: Customizing Mermaid.run with querySelector\nDESCRIPTION: This JavaScript code demonstrates how to customize `mermaid.run` to render only elements with a specific CSS selector.  It first disables automatic rendering on load and then calls `mermaid.run` with a `querySelector` option to target elements with the class `.someOtherClass`. Requires mermaid library to be imported.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nmermaid.initialize({ startOnLoad: false });\nawait mermaid.run({\n  querySelector: '.someOtherClass',\n});\n```\n\n----------------------------------------\n\nTITLE: Flowchart with accessible title and description (single line) in Mermaid\nDESCRIPTION: This Mermaid snippet demonstrates how to add an accessible title and a single-line description to a flowchart using the `accTitle` and `accDescr` keywords. These keywords allow for adding metadata to the diagram for improved accessibility for users utilizing screen readers.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n      accTitle: Big Decisions\n      accDescr: Bob's Burgers process for making big decisions\n      A[Identify Big Decision] --> B{Make Big Decision}\n      B --> D[Be done]\n```\n\n----------------------------------------\n\nTITLE: Setting Date and Axis Formats in Mermaid Gantt Charts\nDESCRIPTION: These snippets specify how to customize input and output date formats for Gantt chart elements and axes, employing format strings detailed for each purpose. Dependencies include Mermaid's support for 'dateFormat' and 'axisFormat' configurations with various formatting patterns and options for locale settings and time intervals.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\ndateFormat YYYY-MM-DD\n```\n\nLANGUAGE: mermaid\nCODE:\n```\naxisFormat %Y-%m-%d\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ntickInterval 1day\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n  tickInterval 1week\n  weekday monday\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Fork\nDESCRIPTION: This snippet shows the use of the shape keyword to define a 'fork' shape.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_39\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: fork, label: \"Fork or Join\" }\n```\n\n----------------------------------------\n\nTITLE: Using Annotators for Participants in ZenUML\nDESCRIPTION: This snippet demonstrates the use of annotators to define participant types, such as `@Actor` for Alice and `@Database` for Bob. This allows using different shapes to represent participants.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nzenuml\n    title Annotators\n    @Actor Alice\n    @Database Bob\n    Alice->Bob: Hi Bob\n    Bob->Alice: Hi Alice\n```\n\n----------------------------------------\n\nTITLE: Defining Prepare Conditional Node Shape (Hexagon) in Mermaid Flowchart DSL\nDESCRIPTION: This snippet shows how to create a hexagonal node labeled 'Prepare conditional' in Mermaid flowcharts, which can symbolize preparation or conditional steps. The 'hex' shape property generates the hexagon form. Requires Mermaid supporting custom shapes. Input is Mermaid syntax; output is a hexagon node labeled accordingly.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_13\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: hex, label: \"Prepare conditional\" }\n```\n\n----------------------------------------\n\nTITLE: Placing a Service within a Group in Mermaid Architecture Diagrams\nDESCRIPTION: Shows how to place a service inside a group using the `in` keyword in Mermaid architecture diagrams. This example defines the `database1` service (database icon, 'My Database' label) and places it within the `private_api` group, indicating association.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nservice database1(database)[My Database] in private_api\n```\n\n----------------------------------------\n\nTITLE: Specifying Cardinality (Multiplicity) in Class Relationships - Mermaid-Example\nDESCRIPTION: Features a concrete Mermaid example showing multiplicity annotations ('1', '*', '1..*', 'many') on class diagram relationships, to visually represent allowed numbers of associated entities per UML standards. This snippet needs only Mermaid, and outputs clear, quantified association lines between classes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_15\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    Customer \"1\" --> \"*\" Ticket\n    Student \"1\" --> \"1..*\" Course\n    Galaxy --> \"many\" Star : Contains\n\n```\n\n----------------------------------------\n\nTITLE: Defining Alternatives (if/else) in ZenUML\nDESCRIPTION: This snippet shows how to express alternative paths in a ZenUML diagram using `if/else if/else` notation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\nzenuml\n    Alice->Bob: Hello Bob, how are you?\n    if(is_sick) {\n      Bob->Alice: Not so good :(\n    } else {\n      Bob->Alice: Feeling fresh like a daisy\n    }\n```\n\n----------------------------------------\n\nTITLE: Register Icon Pack with Lazy Loading\nDESCRIPTION: Registers an icon pack in Mermaid with lazy loading. The `loader` function uses dynamic `import()` to load the icon pack only when it is needed. This improves initial load time and reduces the overall bundle size. The `name` property specifies the icon pack name, and the `mermaid.registerIconPacks` function registers the icon pack.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/icons.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport mermaid from 'mermaid';\n\nmermaid.registerIconPacks([\n  {\n    name: 'logos',\n    loader: () => import('@iconify-json/logos').then((module) => module.icons),\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Placing Service within a Group\nDESCRIPTION: This snippet details the syntax for positioning a service within a group inside an architecture diagram. It uses the `service` keyword with the optional `in` keyword, specifying the parent group. This organizes services within their corresponding groups. The output is a visual representation of the grouped service.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_5\n\nLANGUAGE: Mermaid\nCODE:\n```\nservice database1(database)[My Database] in private_api\n```\n\n----------------------------------------\n\nTITLE: Changing Diagram Direction in Mermaid Requirement Diagrams\nDESCRIPTION: Illustrates how to change the rendering direction of the Requirement diagram from the default Top-to-Bottom (TB) to Left-to-Right (LR) using the 'direction LR' statement at the beginning of the diagram definition.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/requirementDiagram.md#_snippet_3\n\nLANGUAGE: Mermaid\nCODE:\n```\nrequirementDiagram\n\ndirection LR\n\nrequirement test_req {\n    id: 1\n    text: the test text.\n    risk: high\n    verifymethod: test\n}\n\nelement test_entity {\n    type: simulation\n}\n\ntest_entity - satisfies -> test_req\n```\n\n----------------------------------------\n\nTITLE: GitGraph with Custom Commit IDs in Mermaid\nDESCRIPTION: Illustrates how to assign custom identifiers to commits in a Git Graph using the id attribute, making commits more descriptive and recognizable.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n   commit id: \"Alpha\"\n   commit id: \"Beta\"\n   commit id: \"Gamma\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Junction in Architecture Diagram\nDESCRIPTION: This snippet explains the syntax for declaring a junction within an architecture diagram. Junctions act as connection points, allowing multiple edges to meet. They are used for simplifying complex connections. The output is a visual representation of the junction and its connections to other services. The junctions allow for complex edge relationships.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_10\n\nLANGUAGE: Mermaid\nCODE:\n```\njunction junctionCenter\n```\n\n----------------------------------------\n\nTITLE: Creating a State Diagram with Accessibility Metadata in Mermaid-js\nDESCRIPTION: This snippet creates a state diagram with an accessibility title and description, depicting a transition from state s1 to s2. Useful for illustrating state transitions with accessibility support in Mermaid.js.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_16\n\nLANGUAGE: mermaid\nCODE:\n```\n   stateDiagram\n      accTitle: My State Diagram\n      accDescr: My State Diagram Description\n\n       s1 --> s2\n```\n\n----------------------------------------\n\nTITLE: Shorthand Activation/Deactivation in Mermaid\nDESCRIPTION: Demonstrates the shorthand notation (+/- suffix) for activating and deactivating actors. This provides a more concise way to represent actor activations. No dependencies. Expected output: A sequence diagram with Alice and John activation/deactivation indicated via +/- notation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Mindmap\nDESCRIPTION: This code snippet demonstrates the basic syntax for creating a mindmap diagram. It shows how to define the root node and its children using indentation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nmindmap\n  root((mindmap))\n    Origins\n      Long history\n      ::icon(fa fa-book)\n      Popularisation\n        British popular psychology author Tony Buzan\n    Research\n      On effectiveness<br/>and features\n      On Automatic creation\n        Uses\n            Creative techniques\n            Strategic planning\n            Argument mapping\n```\n\n----------------------------------------\n\nTITLE: Customizing Diagram Look and Theme via Configuration Metadata (mermaid)\nDESCRIPTION: This snippet shows how to choose custom visual styles for Mermaid diagrams using configuration metadata in YAML frontmatter. The parameters set here include the 'look' (handDrawn) and 'theme' (neutral), affecting the flowchart's rendering style. After the configuration block, a simple left-to-right flowchart is defined. Users must use a Mermaid environment that supports the specified look and theme. Input is a mix of frontmatter configuration and flowchart definitions; output is a diagram rendered with the selected appearance.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/syntax-reference.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  look: handDrawn\n  theme: neutral\n---\nflowchart LR\n  A[Start] --> B{Decision}\n  B -->|Yes| C[Continue]\n  B -->|No| D[Stop]\n```\n\n----------------------------------------\n\nTITLE: Adding Sections and Milestones in Mermaid Gantt Charts\nDESCRIPTION: This snippet shows how to divide the Gantt chart into sections using 'section' keywords to organize different project phases and include milestones representing specific date points. Milestones are added with the 'milestone' keyword, with precise placement based on start date and duration. Dependencies involve Mermaid's syntax for sections, tasks, and milestones.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n    dateFormat HH:mm\n    axisFormat %H:%M\n    Initial milestone : milestone, m1, 17:49, 2m\n    Task A : 10m\n    Task B : 5m\n    Final milestone : milestone, m2, 18:08, 4m\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n    dateFormat HH:mm\n    axisFormat %H:%M\n    Initial milestone : milestone, m1, 17:49, 2m\n    Task A : 10m\n    Task B : 5m\n    Final milestone : milestone, m2, 18:08, 4m\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram: Message to self in loop - Mermaid\nDESCRIPTION: This snippet demonstrates a sequence diagram in Mermaid where a participant sends a message to itself within a loop. It showcases how to represent self-interaction and internal processes within a sequence diagram. Includes notes to provide context. No dependencies required, Mermaid library needs to be integrated.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/examples.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>John: Hello John, how are you?\n    loop HealthCheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts<br/>prevail...\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n```\n\n----------------------------------------\n\nTITLE: Initializing Mermaid with secure parameters (Example)\nDESCRIPTION: This example demonstrates how site owners can add to the secure array using the mermaidAPI.initialize function.  It sets the startOnLoad option to true and adds 'parameter1' and 'parameter2' to the secure array, preventing implementors from modifying these parameters.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/8.6.0_docs.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmermaidAPI.initialize( { startOnLoad: true, secure: ['parameter1', 'parameter2'] } );\n```\n\n----------------------------------------\n\nTITLE: Click Event Binding and Tooltips - Mermaid\nDESCRIPTION: This Mermaid snippet demonstrates how to bind click events to nodes in a flowchart, linking them to either JavaScript callbacks or URLs.  It also showcases the usage of tooltips to provide additional information when hovering over the nodes.  Requires setting `securityLevel='loose'`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_99\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    A-->B\n    B-->C\n    C-->D\n    click A callback \"Tooltip for a callback\"\n    click B \"https://www.github.com\" \"This is a tooltip for a link\"\n    click C call callback() \"Tooltip for a callback\"\n    click D href \"https://www.github.com\" \"This is a tooltip for a link\"\n```\n\n----------------------------------------\n\nTITLE: Applying Theme Directive to a Graph\nDESCRIPTION: Example showing a Mermaid graph definition preceded by a directive that sets the theme to 'forest'.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { \"theme\": \"forest\" } }%%\ngraph TD\nA(Forest) --> B[/Another/]\nA --> C[End]\n  subgraph section\n  B\n  C\n  end\n```\n\n----------------------------------------\n\nTITLE: GitGraph with Title and Description\nDESCRIPTION: This mermaid.js snippet shows a GitGraph diagram incorporating an accessible title and description using the `accTitle` and `accDescr` keywords to improve accessibility.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid-example\n  gitGraph\n      accTitle: My GitGraph Accessibility Title\n      accDescr: My GitGraph Accessibility Description\n\n     commit\n     commit\n     branch develop\n     checkout develop\n     commit\n     commit\n     checkout main\n     merge develop\n     commit\n     commit\n\n```\n```\n\n----------------------------------------\n\nTITLE: Using Style Classes in Mermaid Class Diagrams\nDESCRIPTION: Demonstrates defining and applying style classes to nodes using the 'classDef' keyword and ':::' notation. This approach allows reusing styles across multiple elements in the diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_30\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class Animal:::someclass\n    classDef someclass fill:#f96\n```\n\n----------------------------------------\n\nTITLE: Binding Events to Mermaid SVG Diagrams\nDESCRIPTION: JavaScript example showing how to bind interactive events to Mermaid diagrams after rendering them with the API.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of using the bindFunctions\nconst drawDiagram = async function () {\n  element = document.querySelector('#graphDiv');\n  const graphDefinition = 'graph TB\\na-->b';\n  const { svg, bindFunctions } = await mermaid.render('graphDiv', graphDefinition);\n  element.innerHTML = svg;\n  // This can also be written as `bindFunctions?.(element);` using the `?` shorthand.\n  if (bindFunctions) {\n    bindFunctions(element);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Simple GitGraph with Three Commits in Mermaid\nDESCRIPTION: Shows a basic Git Graph with three commits on the default main branch, demonstrating the minimal syntax required for a git diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n   commit\n   commit\n   commit\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Labels to Relationships - Mermaid-Example\nDESCRIPTION: Provides labeled Mermaid example code for class relationships with annotations explaining their semantics in UML ('implements', 'composition', 'aggregation'). Intended for documentation and visual communication, it requires only Mermaid support and outputs a labelled class diagram for educational or design purposes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclassA <|-- classB : implements\nclassC *-- classD : composition\nclassE o-- classF : aggregation\n\n```\n\n----------------------------------------\n\nTITLE: Representing Alternative Paths with if-else in ZenUML Using zenuml\nDESCRIPTION: Example showing the use of if-else-if-else blocks to model decision branches in sequence diagrams. Each condition leads to different message flow between participants, allowing visual representation of alternative scenarios.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_12\n\nLANGUAGE: zenuml\nCODE:\n```\nAlice->Bob: Hello Bob, how are you?\nif(is_sick) {\n  Bob->Alice: Not so good :(\n} else {\n  Bob->Alice: Feeling fresh like a daisy\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Relationship Diagram with Title and Description\nDESCRIPTION: This mermaid.js snippet demonstrates an entity relationship diagram with an accessible title and description.  It uses the `accTitle` and `accDescr` keywords to specify the title and description respectively.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid-example\n   erDiagram\n      accTitle: My Entity Relationship Diagram\n      accDescr: My Entity Relationship Diagram Description\n\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ LINE-ITEM : contains\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Radar Diagram Axes - Markdown\nDESCRIPTION: Provides syntax for specifying axes in a radar diagram within a Markdown code block. Each axis is assigned an ID and optional label, and multiple axes may be defined in one line. This template enables customization of radar chart dimensions. No additional dependencies. Output is a labeled radar chart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_8\n\nLANGUAGE: md\nCODE:\n```\nradar-beta\n  axis id1[\"Label1\"]\n  axis id2[\"Label2\"], id3[\"Label3\"]\n  ...\n```\n\n----------------------------------------\n\nTITLE: Declaring Directives with Initialization\nDESCRIPTION: This code snippet demonstrates how to declare directives to set global and diagram-specific configurations in Mermaid. It uses the 'init' directive to define configurations such as theme, fontFamily, logLevel, flowchart settings (htmlLabels, curve), and sequence diagram settings (mirrorActors).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n%%{\n  init: {\n    \"theme\": \"dark\",\n    \"fontFamily\": \"monospace\",\n    \"logLevel\": \"info\",\n    \"flowchart\": {\n      \"htmlLabels\": true,\n      \"curve\": \"linear\"\n    },\n    \"sequence\": {\n      \"mirrorActors\": true\n    }\n  }\n}%%\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Sequence Diagram in Mermaid\nDESCRIPTION: Illustrates the syntax for a basic sequence diagram using `sequenceDiagram`. It shows implicit participant declaration, different arrow types for messages (`->>`, `-->>`, `--x`, `-x` representing solid/dotted lines and open/cross arrowheads for synchronous/asynchronous messages), and adding notes positioned relative to participants (`Note right of John`).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/examples.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice ->> Bob: Hello Bob, how are you?\n    Bob-->>John: How about you John?\n    Bob--x Alice: I am good thanks!\n    Bob-x John: I am good thanks!\n    Note right of John: Bob thinks a long<br/>long time, so long<br/>that the text does<br/>not fit on a row.\n\n    Bob-->Alice: Checking with John...\n    Alice->John: Yes... John, how are you?\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic XY Chart with Bar and Line in Mermaid\nDESCRIPTION: An example showing how to create an XY chart with both bar and line representations of the same data series. The chart includes a title, labeled x-axis with months, and a y-axis with a specified revenue range.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/xyChart.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nxychart-beta\n    title \"Sales Revenue\"\n    x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]\n    y-axis \"Revenue (in $)\" 4000 --> 11000\n    bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\n    line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\n```\n\n----------------------------------------\n\nTITLE: Adding Text on Links\nDESCRIPTION: This snippet demonstrates adding text to a link between two nodes.  Two different syntaxes are shown for achieving the same result.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_69\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    A-- This is the text! ---B\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    A---|This is the text|B\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Junction\nDESCRIPTION: This snippet shows how to create Junction node.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_53\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: f-circ, label: \"Junction\" }\n```\n\n----------------------------------------\n\nTITLE: Basic Transitions Between States\nDESCRIPTION: Illustrates creating simple directed transitions between states, where states are implicitly defined if not previously declared.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    s1 --> s2\n```\n\n----------------------------------------\n\nTITLE: Grouping Classes Using Namespaces - Mermaid\nDESCRIPTION: Demonstrates how to group related classes using the namespace block in a Mermaid class diagram. Supports encapsulating classes and their attributes within named modules or packages. Dependencies are limited to Mermaid; input includes a namespace name and enclosed class definitions, with output being a visual grouping in the diagram for clarity and hierarchy.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nnamespace BaseShapes {\n    class Triangle\n    class Rectangle {\n      double width\n      double height\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Cypress E2E Rendering Test (JavaScript)\nDESCRIPTION: Demonstrates how to write an End-to-End rendering test using the `imgSnapshotTest` function within a Cypress test suite. The function takes the diagram text and optional Mermaid configuration, rendering the diagram for visual comparison.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nit('should render forks and joins', () => {\n  imgSnapshotTest(\n    `\n    stateDiagram\n    state fork_state &lt;&lt;fork&gt;&gt;\n      [*] --> fork_state\n      fork_state --> State2\n      fork_state --> State3\n\n      state join_state &lt;&lt;join&gt;&gt;\n      State2 --> join_state\n      State3 --> join_state\n      join_state --> State4\n      State4 --> [*]\n    `,\n    { logLevel: 0 }\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Escaping Characters with Entity Codes\nDESCRIPTION: This snippet demonstrates how to escape characters using entity codes, allowing the rendering of characters that would otherwise break the syntax. Base 10 numbers and HTML character names are supported.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_90\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n        A[\"A double quote:#quot;\"] --> B[\"A dec char:#9829;\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Stop Node Shapes (Double Circle and Framed Circle) in Mermaid Flowchart DSL\nDESCRIPTION: These snippets show how to define stop nodes in Mermaid flowcharts with double circle and framed circle shapes labeled 'Stop'. These shapes commonly denote process terminations or stopping points. The 'dbl-circ' and 'framed-circle' shape attributes yield visually distinct stop nodes. Requires Mermaid with support for these node shape types. Inputs are Mermaid code blocks; outputs are specially styled stop nodes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_16\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: dbl-circ, label: \"Stop\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: framed-circle, label: \"Stop\" }\n```\n\n----------------------------------------\n\nTITLE: Applying Directives to a Simple Graph\nDESCRIPTION: Demonstrates applying `logLevel` and `theme` directives directly within a Mermaid graph definition. The directives modify the rendering parameters for the subsequent graph.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { 'logLevel': 'debug', 'theme': 'dark' } }%%\ngraph LR\nA-->B\n```\n\n----------------------------------------\n\nTITLE: Defining Classes and Relationships\nDESCRIPTION: This snippet demonstrates two ways of defining a class using the 'class' keyword and using a relationship definition. It also showcases the definition of a relationship (inheritance) between two classes, showing basic class definitions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class Animal\n    Vehicle <|-- Car\n```\n\n----------------------------------------\n\nTITLE: Adding Text on a Link\nDESCRIPTION: This snippet shows how to add text to a link in a flowchart. It supports two equivalent syntaxes: `A-- This is the text! ---B` and `A---|This is the text|B`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_23\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A-- This is the text! ---B\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A---|This is the text|B\n```\n\n----------------------------------------\n\nTITLE: Click Event Binding - JavaScript\nDESCRIPTION: This JavaScript snippet defines a callback function that can be triggered when a node in a Mermaid flowchart is clicked.  The callback function receives the node ID as a parameter and displays an alert message. This requires setting `securityLevel='loose'`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_98\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\n  window.callback = function () {\n    alert('A callback was triggered');\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Example Mermaid Flowchart with Font Awesome Icons\nDESCRIPTION: Provides a renderable example (`mermaid-example`) of a flowchart utilizing Font Awesome icons within node text. It shows both standard (`fa:`) and potentially another type (`fab:`) icon prefixes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_118\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    B[\"fa:fa-twitter for peace\"]\n    B-->C[\"fab:fa-truck-bold a custom icon\"]\n```\n\n----------------------------------------\n\nTITLE: Defining a Default Class - Mermaid\nDESCRIPTION: This snippet shows how to define a default class in a Mermaid flowchart using the `classDef default` directive.  This class will be applied to all nodes without specific class definitions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_114\n\nLANGUAGE: Mermaid\nCODE:\n```\nclassDef default fill:#f9f,stroke:#333,stroke-width:4px;\n```\n\n----------------------------------------\n\nTITLE: Rendering a Configured Pie Chart with Mermaid - Mermaid\nDESCRIPTION: This snippet shows how to create an advanced pie chart using Mermaid, complete with custom configuration. The YAML front matter configures the label text position and the outer stroke width via 'themeVariables', and the 'showData' flag ensures that actual data values are displayed next to legend entries. The chart visualizes four elements (\"Calcium\", \"Potassium\", \"Magnesium\", and \"Iron\") with both integer and floating-point values, illustrating support for precise data rendering. Configuration settings such as 'textPosition' and 'pieOuterStrokeWidth' allow further customization of the chart's appearance.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/pie.md#_snippet_1\n\nLANGUAGE: Mermaid\nCODE:\n```\n---\nconfig:\n  pie:\n    textPosition: 0.5\n  themeVariables:\n    pieOuterStrokeWidth: \"5px\"\n---\npie showData\n    title Key elements in Product X\n    \"Calcium\" : 42.96\n    \"Potassium\" : 50.05\n    \"Magnesium\" : 10.01\n    \"Iron\" :  5\n```\n\n----------------------------------------\n\nTITLE: Creating a State Diagram with Mermaid JavaScript\nDESCRIPTION: This snippet illustrates state transitions using the stateDiagram-v2 syntax in Mermaid, showing movement through states such as 'Still', 'Moving', and 'Crash'. The only requirement is Mermaid; states and transitions are textually defined. Users specify state names and transitions; the output is a state machine diagram, subject to Mermaid's state diagram syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n[*] --> Still\nStill --> [*]\nStill --> Moving\nMoving --> Still\nMoving --> Crash\nCrash --> [*]\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Fragments (opt) in ZenUML\nDESCRIPTION: This snippet demonstrates how to render an `opt` fragment in a ZenUML diagram, indicating an optional section of the sequence.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\nzenuml\n    Alice->Bob: Hello Bob, how are you?\n    Bob->Alice: Not so good :(\n    opt {\n      Bob->Alice: Thanks for asking\n    }\n```\n\n----------------------------------------\n\nTITLE: Grouping Timeline Periods into Sections in Mermaid\nDESCRIPTION: Demonstrates how to group time periods and their associated events into distinct 'sections' using the `section` keyword in a Mermaid timeline diagram. Sections help organize the timeline chronologically or thematically.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/timeline.md#_snippet_3\n\nLANGUAGE: mermaid-example\nCODE:\n```\ntimeline\n    title Timeline of Industrial Revolution\n    section 17th-20th century\n        Industry 1.0 : Machinery, Water power, Steam <br>power\n        Industry 2.0 : Electricity, Internal combustion engine, Mass production\n        Industry 3.0 : Electronics, Computers, Automation\n    section 21st century\n        Industry 4.0 : Internet, Robotics, Internet of Things\n        Industry 5.0 : Artificial intelligence, Big data, 3D printing\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ntimeline\n    title Timeline of Industrial Revolution\n    section 17th-20th century\n        Industry 1.0 : Machinery, Water power, Steam <br>power\n        Industry 2.0 : Electricity, Internal combustion engine, Mass production\n        Industry 3.0 : Electronics, Computers, Automation\n    section 21st century\n        Industry 4.0 : Internet, Robotics, Internet of Things\n        Industry 5.0 : Artificial intelligence, Big data, 3D printing\n```\n\n----------------------------------------\n\nTITLE: Interactive Gantt Diagram Example with Click Handlers in Mermaid and HTML/JS\nDESCRIPTION: Showcases integration of Mermaid Gantt task click events with JavaScript functions and hyperlinks in an HTML environment. The snippet includes an HTML document segment with Mermaid diagram, JavaScript callback implementations, configuration for relaxed security, and Mermaid initialization. Dependencies: Mermaid.js must be included. Inputs: user clicks on Gantt chart tasks. Outputs: alert dialog triggered by callbacks, or navigation for hyperlink tasks. Limitation: Interactive clicks require Mermaid in 'loose' security mode; strict mode disables interactivity.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <pre class=\"mermaid\">\n    gantt\n      dateFormat  YYYY-MM-DD\n\n      section Clickable\n      Visit mermaidjs         :active, cl1, 2014-01-07, 3d\n      Print arguments         :cl2, after cl1, 3d\n      Print task              :cl3, after cl2, 3d\n\n      click cl1 href \"https://mermaidjs.github.io/\"\n      click cl2 call printArguments(\"test1\", \"test2\", test3)\n      click cl3 call printTask()\n  </pre>\n\n  <script>\n    const printArguments = function (arg1, arg2, arg3) {\n      alert('printArguments called with arguments: ' + arg1 + ', ' + arg2 + ', ' + arg3);\n    };\n    const printTask = function (taskId) {\n      alert('taskId: ' + taskId);\n    };\n    const config = {\n      startOnLoad: true,\n      securityLevel: 'loose',\n    };\n    mermaid.initialize(config);\n  </script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Alternative and Optional Paths (alt/opt) - Mermaid\nDESCRIPTION: Illustrates how to show alternative execution paths using the `alt` block (with optional `else`) and optional paths using the `opt` block. These blocks represent conditional logic in the sequence.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->>Bob: Hello Bob, how are you?\n    alt is sick\n        Bob->>Alice: Not so good :(\n    else is well\n        Bob->>Alice: Feeling fresh like a daisy\n    end\n    opt Extra response\n        Bob->>Alice: Thanks for asking\n    end\n```\n\n----------------------------------------\n\nTITLE: Defining a C4 Deployment Diagram for an Internet Banking System in Mermaid\nDESCRIPTION: This Mermaid code defines a C4 Deployment diagram illustrating the infrastructure and deployment environment for an Internet Banking System. It includes customer devices (mobile, computer), a data center with application servers (API, Web) and databases (primary, secondary), showing containers, relationships, and communication protocols like HTTPS and JDBC. Relationship styles are adjusted for better readability.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/c4.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\n    C4Deployment\n    title Deployment Diagram for Internet Banking System - Live\n\n    Deployment_Node(mob, \"Customer's mobile device\", \"Apple IOS or Android\"){\n        Container(mobile, \"Mobile App\", \"Xamarin\", \"Provides a limited subset of the Internet Banking functionality to customers via their mobile device.\")\n    }\n\n    Deployment_Node(comp, \"Customer's computer\", \"Microsoft Windows or Apple macOS\"){\n        Deployment_Node(browser, \"Web Browser\", \"Google Chrome, Mozilla Firefox,<br/> Apple Safari or Microsoft Edge\"){\n            Container(spa, \"Single Page Application\", \"JavaScript and Angular\", \"Provides all of the Internet Banking functionality to customers via their web browser.\")\n        }\n    }\n\n    Deployment_Node(plc, \"Big Bank plc\", \"Big Bank plc data center\"){\n        Deployment_Node(dn, \"bigbank-api*** x8\", \"Ubuntu 16.04 LTS\"){\n            Deployment_Node(apache, \"Apache Tomcat\", \"Apache Tomcat 8.x\"){\n                Container(api, \"API Application\", \"Java and Spring MVC\", \"Provides Internet Banking functionality via a JSON/HTTPS API.\")\n            }\n        }\n        Deployment_Node(bb2, \"bigbank-web*** x4\", \"Ubuntu 16.04 LTS\"){\n            Deployment_Node(apache2, \"Apache Tomcat\", \"Apache Tomcat 8.x\"){\n                Container(web, \"Web Application\", \"Java and Spring MVC\", \"Delivers the static content and the Internet Banking single page application.\")\n            }\n        }\n        Deployment_Node(bigbankdb01, \"bigbank-db01\", \"Ubuntu 16.04 LTS\"){\n            Deployment_Node(oracle, \"Oracle - Primary\", \"Oracle 12c\"){\n                ContainerDb(db, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n            }\n        }\n        Deployment_Node(bigbankdb02, \"bigbank-db02\", \"Ubuntu 16.04 LTS\") {\n            Deployment_Node(oracle2, \"Oracle - Secondary\", \"Oracle 12c\") {\n                ContainerDb(db2, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n            }\n        }\n    }\n\n    Rel(mobile, api, \"Makes API calls to\", \"json/HTTPS\")\n    Rel(spa, api, \"Makes API calls to\", \"json/HTTPS\")\n    Rel_U(web, spa, \"Delivers to the customer's web browser\")\n    Rel(api, db, \"Reads from and writes to\", \"JDBC\")\n    Rel(api, db2, \"Reads from and writes to\", \"JDBC\")\n    Rel_R(db, db2, \"Replicates data to\")\n\n    UpdateRelStyle(spa, api, $offsetY=\"-40\")\n    UpdateRelStyle(web, spa, $offsetY=\"-40\")\n    UpdateRelStyle(api, db, $offsetY=\"-20\", $offsetX=\"5\")\n    UpdateRelStyle(api, db2, $offsetX=\"-40\", $offsetY=\"-20\")\n    UpdateRelStyle(db, db2, $offsetY=\"-10\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Mermaid.js Gantt Chart Appearance (JavaScript)\nDESCRIPTION: JavaScript object defining configuration options for Mermaid.js Gantt charts. It allows customization of margins, bar height/gap, padding, font sizes, axis format, tick interval, display mode, and weekday start. This object should be assigned to `mermaid.ganttConfig`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid.ganttConfig = {\n  titleTopMargin: 25, // Margin top for the text over the diagram\n  barHeight: 20, // The height of the bars in the graph\n  barGap: 4, // The margin between the different activities in the gantt diagram\n  topPadding: 75, // Margin between title and gantt diagram and between axis and gantt diagram.\n  rightPadding: 75, // The space allocated for the section name to the right of the activities\n  leftPadding: 75, // The space allocated for the section name to the left of the activities\n  gridLineStartPadding: 10, // Vertical starting position of the grid lines\n  fontSize: 12, // Font size\n  sectionFontSize: 24, // Font size for sections\n  numberSectionStyles: 1, // The number of alternating section styles\n  axisFormat: '%d/%m', // Date/time format of the axis\n  tickInterval: '1week', // Axis ticks\n  topAxis: true, // When this flag is set, date labels will be added to the top of the chart\n  displayMode: 'compact', // Turns compact mode on\n  weekday: 'sunday', // On which day a week-based interval should start\n};\n```\n\n----------------------------------------\n\nTITLE: JavaScript Callback Function Example\nDESCRIPTION: This is a standalone JavaScript function that can be used as a callback in a Mermaid class diagram.  When a node is clicked and the callback is triggered, this function will execute, in this case, displaying an alert.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst callbackFunction = function () {\n  alert('A callback was triggered');\n};\n```\n\n----------------------------------------\n\nTITLE: Switching CDN Source to Continue Using Mermaid v9 (Diff Format)\nDESCRIPTION: Shows how to update the CDN link in HTML to continue loading Mermaid v9 after the switch to ESM in v10. The '-' line should be replaced with the '+' line in application HTML. No dependencies required other than CDN access.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CHANGELOG.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- <script src=\"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.js\"></script>\n+ <script src=\"https://cdn.jsdelivr.net/npm/mermaid@9/dist/mermaid.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kanban Diagram Ticket Base URL with YAML\nDESCRIPTION: Shows how to specify the base URL for ticket links in a Kanban diagram configuration block at the beginning of a Mermaid markdown file. The ticketBaseUrl replaces the placeholder '#TICKET#' with the actual ticket number from task metadata to create clickable links to external issue trackers.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/kanban.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nconfig:\n  kanban:\n    ticketBaseUrl: 'https://yourproject.atlassian.net/browse/#TICKET#'\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Commits (Enabled)\nDESCRIPTION: Shows how to enable parallel commit rendering in Mermaid Git Graphs by setting `parallelCommits: true` (available from v10.8.0+) within a configuration block. This disables the default temporal rendering, aligning commits equidistant from their parent.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_20\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  gitGraph:\n    parallelCommits: true\n---\ngitGraph:\n  commit\n  branch develop\n  commit\n  commit\n  checkout main\n  commit\n  commit\n```\n\n----------------------------------------\n\nTITLE: Expressive Dependency Declaration\nDESCRIPTION: This snippet demonstrates an expressive way to declare dependencies between multiple nodes using a compact syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_78\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TB\n    A & B--> C & D\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Lined Document\nDESCRIPTION: This snippet uses shape to create a node of Lined Document shape.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_54\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: lin-doc, label: \"Lined document\" }\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Labels to Relationships - Mermaid\nDESCRIPTION: Illustrates the syntax for adding text labels, such as 'implements', 'composition', or 'aggregation', to edges between classes in a Mermaid class diagram. No dependencies other than Mermaid are needed. Labels clarify the relation's intent, making diagrams more readable when presenting or documenting software models.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclassA <|-- classB : implements\nclassC *-- classD : composition\nclassE o-- classF : aggregation\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Mermaid Configuration with getConfig()\nDESCRIPTION: The `getConfig()` function retrieves the active configuration object (`MermaidConfig`) used by Mermaid.js. It takes no arguments and returns the current configuration. It's recommended to call this function once and store the result in a variable rather than calling it repeatedly for performance reasons.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/config/functions/getConfig.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetConfig(): MermaidConfig\n```\n\n----------------------------------------\n\nTITLE: Rendering Mermaid Diagrams with Python and mermaid.ink\nDESCRIPTION: This Python code snippet demonstrates how to render Mermaid diagrams within a Jupyter notebook using the mermaid.ink service. It encodes the Mermaid graph definition, sends it to mermaid.ink, retrieves the image, and displays it in the notebook, saving the output as a high-resolution PNG image. Dependencies include base64, io, requests, IPython, PIL, and matplotlib.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/ecosystem/tutorials.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport base64\nimport io, requests\nfrom IPython.display import Image, display\nfrom PIL import Image as im\nimport matplotlib.pyplot as plt\n\ndef mm(graph):\n    graphbytes = graph.encode(\"utf8\")\n    base64_bytes = base64.urlsafe_b64encode(graphbytes)\n    base64_string = base64_bytes.decode(\"ascii\")\n    img = im.open(io.BytesIO(requests.get('https://mermaid.ink/img/' + base64_string).content))\n    plt.imshow(img)\n    plt.axis('off') # allow to hide axis\n    plt.savefig('image.png', dpi=1200)\n\nmm(\"\"\"\ngraph LR;\n    A--> B & C & D\n    B--> A & E\n    C--> A & E\n    D--> A & E\n    E--> B & C & D\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Integrating Mindmaps in HTML\nDESCRIPTION: This shows the code to include Mermaid.js and the mindmap diagram type in an HTML page. It describes both the pre-9.4.0 and the post-9.4.0 methods.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import mermaid from '<CDN_URL>/mermaid@9.3.0/dist/mermaid.esm.min.mjs';\n  import mindmap from '<CDN_URL>/@mermaid-js/mermaid-mindmap@9.3.0/dist/mermaid-mindmap.esm.min.mjs';\n  await mermaid.registerExternalDiagrams([mindmap]);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Mermaid Timeline Diagram Color Styling and Multicolor Option in JavaScript\nDESCRIPTION: Shows how to disable the default multicolor styling of individual time periods and their events by setting 'disableMulticolor' in the Mermaid configuration. This snippet uses JavaScript to initialize Mermaid with timeline-specific options including disabling multicolor styling, forcing all periods/events to share the same color scheme. It requires including Mermaid's JS library and configuring it before rendering. This config option affects visual coherence especially when no sections are defined.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid.initialize({\n        theme: 'base',\n        startOnLoad: true,\n        logLevel: 0,\n        timeline: {\n          disableMulticolor: false\n        }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Flowchart with Subgraphs - Mermaid\nDESCRIPTION: This snippet demonstrates how to define a flowchart with subgraphs using Mermaid syntax. It shows how to create subgraphs, define nodes within them, and connect nodes both within and between subgraphs.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_94\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end\n    one --> two\n    three --> two\n    two --> c2\n```\n\n----------------------------------------\n\nTITLE: Including Mermaid Script via ESM Import\nDESCRIPTION: Example of how to include the Mermaid JavaScript library in an HTML page using a script tag with ESM import.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Directives with Mermaid Graph\nDESCRIPTION: This example demonstrates how to apply directives to a Mermaid graph to change the theme and log level.  It sets the `logLevel` to `debug` and the `theme` to `dark` for a rendered mermaid diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_2\n\nLANGUAGE: Mermaid\nCODE:\n```\n%%{init: { 'logLevel': 'debug', 'theme': 'dark' } }%%\ngraph LR\nA-->B\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\n%%{init: { 'logLevel': 'debug', 'theme': 'dark' } }%%\ngraph LR\nA-->B\n```\n\n----------------------------------------\n\nTITLE: Modeling a Git Graph with Mermaid JavaScript\nDESCRIPTION: This snippet demonstrates a simple Git branching model using Mermaid's gitGraph syntax, including commits, branches, checkouts, and merges. The only dependency is Mermaid. Commands are text-based (e.g., 'commit', 'branch'); the diagram visualizes commit and branch structure, as supported by Mermaid's experimental gitGraph feature.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n  commit\n  commit\n  branch develop\n  checkout develop\n  commit\n  commit\n  checkout main\n  merge develop\n  commit\n  commit\n```\n\n----------------------------------------\n\nTITLE: Modeling Two-way Class Relationships - Mermaid\nDESCRIPTION: Demonstrates how to represent a bidirectional relationship in a Mermaid class diagram using the <|--|> syntax. Only Mermaid is required for rendering; input entities are class names, and output is a diagram with a two-way inheritance or association arrow. This technique is used to model N:M class relationships visually.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    Animal <|--|> Zebra\n\n```\n\n----------------------------------------\n\nTITLE: Integrating ZenUML with a Website\nDESCRIPTION: This snippet demonstrates how to integrate Mermaid, including ZenUML diagram support, into a web page using JavaScript modules and CDN links. It shows how to register ZenUML as an external diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';\n  import zenuml from 'https://cdn.jsdelivr.net/npm/@mermaid-js/mermaid-zenuml@0.1.0/dist/mermaid-zenuml.esm.min.mjs';\n  await mermaid.registerExternalDiagrams([zenuml]);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding JSON-Based Actor Link Menus in Mermaid Sequence Diagrams\nDESCRIPTION: Demonstrates the advanced `links <actor>: <json>` syntax in Mermaid for defining multiple actor links using a JSON object structure ({ \"label\": \"url\", ... }). This offers a more structured way to define links compared to the simple syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_26\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Alice\n    participant John\n    links Alice: {\"Dashboard\": \"https://dashboard.contoso.com/alice\", \"Wiki\": \"https://wiki.contoso.com/alice\"}\n    links John: {\"Dashboard\": \"https://dashboard.contoso.com/john\", \"Wiki\": \"https://wiki.contoso.com/john\"}\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n    Alice-)John: See you later!\n```\n\n----------------------------------------\n\nTITLE: Changing Flowchart Config in Mermaid Graph\nDESCRIPTION: This example applies specific flowchart configurations to a Mermaid graph using a directive.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_12\n\nLANGUAGE: Mermaid\nCODE:\n```\n%%{init: { \"flowchart\": { \"htmlLabels\": true, \"curve\": \"linear\" } } }%%\ngraph TD\nA(Forest) --> B[/Another/]\nA --> C[End]\n  subgraph section\n  B\n  C\n  end\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\n%%{init: { \"flowchart\": { \"htmlLabels\": true, \"curve\": \"linear\" } } }%%\ngraph TD\nA(Forest) --> B[/Another/]\nA --> C[End]\n  subgraph section\n  B\n  C\n  end\n```\n\n----------------------------------------\n\nTITLE: Applying Direct Styles to Nodes in Mermaid ER Diagrams\nDESCRIPTION: Demonstrates applying specific CSS-like styles directly to individual nodes (`id1`, `id2`) in a Mermaid ER diagram. The `style` keyword is used, followed by the node ID and style properties like `fill`, `stroke`, `stroke-width`, `color`, and `stroke-dasharray`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_11\n\nLANGUAGE: mermaid-example\nCODE:\n```\nerDiagram\n    id1||--||id2 : label\n    style id1 fill:#f9f,stroke:#333,stroke-width:4px\n    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n```\n\n----------------------------------------\n\nTITLE: Defining a Process Node with Custom Shape in Mermaid (mermaid)\nDESCRIPTION: This Mermaid code snippet defines a top-down flowchart with a single node using the 'rect' shape, labeled as 'This is a process'. It illustrates the assignment of a standard process box shape to a node, useful for representing process steps in Mermaid diagrams with explicit shape control. Inputs are simple Mermaid node assignments; output is a diagram with a rectangular process node. Requires support for custom shape syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: rect, label: \"This is a process\" }\n```\n\n----------------------------------------\n\nTITLE: Choice Pseudo-State\nDESCRIPTION: This snippet demonstrates the use of the choice pseudo-state represented with <<choice>> to model conditional branching.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_11\n\nLANGUAGE: mermaid-example\nCODE:\n```\nstateDiagram-v2\n    state if_state <<choice>>\n    [*] --> IsPositive\n    IsPositive --> if_state\n    if_state --> False: if n < 0\n    if_state --> True : if n >= 0\n```\n\n----------------------------------------\n\nTITLE: Adding Notes to States and Nodes\nDESCRIPTION: Shows how to add explanatory notes to states and transitions using 'note right of' or 'note left of', enhancing diagram readability.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_15\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    State1: The state with a note\n    note right of State1\n        Important information! You can write\n        notes.\n    end note\n    State1 --> State2\n    note left of State2 : This is the note to the left.\n```\n\n----------------------------------------\n\nTITLE: Styling a Node - Mermaid\nDESCRIPTION: This snippet demonstrates how to apply specific styles to a node in a Mermaid flowchart using the `style` directive. You can set properties like fill color, stroke color, and stroke width.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_106\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    id1(Start)-->id2(Stop)\n    style id1 fill:#f9f,stroke:#333,stroke-width:4px\n    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n```\n\n----------------------------------------\n\nTITLE: Configuring a Pie Chart with Mermaid\nDESCRIPTION: This code block shows a more complex pie chart configuration, including custom configuration options via the `config` block.  It uses `showData` to display the values, a title, and configures the label position, and outer stroke width. Dependencies are Mermaid-js and a compatible configuration setup. The input consists of key-value pairs to populate the pie chart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/pie.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n--- \nconfig:\n  pie:\n    textPosition: 0.5\n  themeVariables:\n    pieOuterStrokeWidth: \"5px\"\n---\npie showData\n    title Key elements in Product X\n    \"Calcium\" : 42.96\n    \"Potassium\" : 50.05\n    \"Magnesium\" : 10.01\n    \"Iron\" :  5\n```\n\n----------------------------------------\n\nTITLE: Creating a C4 System Context Diagram using Mermaid\nDESCRIPTION: This snippet demonstrates the `C4Context` diagram type in Mermaid. It defines elements like `Person`, `System`, `SystemDb_Ext`, `System_Ext`, `SystemQueue`, and boundaries using `Enterprise_Boundary` and `System_Boundary`. Relationships are established using `BiRel` and `Rel`. Styling is customized with `UpdateElementStyle`, `UpdateRelStyle`, and layout with `UpdateLayoutConfig`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/c4.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n    C4Context\n      title System Context diagram for Internet Banking System\n      Enterprise_Boundary(b0, \"BankBoundary0\") {\n        Person(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\n        Person(customerB, \"Banking Customer B\")\n        Person_Ext(customerC, \"Banking Customer C\", \"desc\")\n\n        Person(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\n\n        System(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\n\n        Enterprise_Boundary(b1, \"BankBoundary\") {\n\n          SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n          System_Boundary(b2, \"BankBoundary2\") {\n            System(SystemA, \"Banking System A\")\n            System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts. next line.\")\n          }\n\n          System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\n          SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\n\n          Boundary(b3, \"BankBoundary3\", \"boundary\") {\n            SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank.\")\n            SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\n          }\n        }\n      }\n\n      BiRel(customerA, SystemAA, \"Uses\")\n      BiRel(SystemAA, SystemE, \"Uses\")\n      Rel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\n      Rel(SystemC, customerA, \"Sends e-mails to\")\n\n      UpdateElementStyle(customerA, $fontColor=\"red\", $bgColor=\"grey\", $borderColor=\"red\")\n      UpdateRelStyle(customerA, SystemAA, $textColor=\"blue\", $lineColor=\"blue\", $offsetX=\"5\")\n      UpdateRelStyle(SystemAA, SystemE, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-10\")\n      UpdateRelStyle(SystemAA, SystemC, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-40\", $offsetX=\"-50\")\n      UpdateRelStyle(SystemC, customerA, $textColor=\"red\", $lineColor=\"red\", $offsetX=\"-50\", $offsetY=\"20\")\n\n      UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\")\n```\n\n----------------------------------------\n\nTITLE: Styling Gantt Chart Elements with Custom CSS (CSS Language)\nDESCRIPTION: Provides CSS rules that customize the appearance of various Gantt chart components when rendered by Mermaid. Styles grid lines, paths, task texts, and a floating tag. To use, include the CSS in the hosting page’s stylesheet, or supply via Mermaid’s configuration if supported. The key selectors (.grid .tick, .taskText, etc.) are matched to SVG or HTML elements output by Mermaid. Inputs are not required; outputs are stylized chart elements. Limitations: changes are only visible when applied in a suitable environment with chart rendering.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.grid .tick {\n  stroke: lightgrey;\n  opacity: 0.3;\n  shape-rendering: crispEdges;\n}\n.grid path {\n  stroke-width: 0;\n}\n\n#tag {\n  color: white;\n  background: #fa283d;\n  width: 150px;\n  position: absolute;\n  display: none;\n  padding: 3px 6px;\n  margin-left: -80px;\n  font-size: 11px;\n}\n\n#tag:before {\n  border: solid transparent;\n  content: ' ';\n  height: 0;\n  left: 50%;\n  margin-left: -5px;\n  position: absolute;\n  width: 0;\n  border-width: 10px;\n  border-bottom-color: #fa283d;\n  top: -20px;\n}\n.taskText {\n  fill: white;\n  text-anchor: middle;\n}\n.taskTextOutsideRight {\n  fill: black;\n  text-anchor: start;\n}\n.taskTextOutsideLeft {\n  fill: black;\n  text-anchor: end;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Multiple Classes to Lollipop Interfaces - Mermaid-Example\nDESCRIPTION: Gives a Mermaid diagram example where several classes are connected to a single interface (lollipop), using --() and ()-- notations for implementing and providing interfaces. Requires only Mermaid, and output illustrates class-interface relationships suitable for UML and API design documentation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n  class Class01 {\n    int amount\n    draw()\n  }\n  Class01 --() bar\n  Class02 --() bar\n\n  foo ()-- Class01\n\n```\n\n----------------------------------------\n\nTITLE: Fork and Join Pseudo-States\nDESCRIPTION: This snippet showcases the use of fork and join pseudo-states represented with <<fork>> and <<join>>.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_12\n\nLANGUAGE: mermaid-example\nCODE:\n```\n   stateDiagram-v2\n    state fork_state <<fork>>\n      [*] --> fork_state\n      fork_state --> State2\n      fork_state --> State3\n\n      state join_state <<join>>\n      State2 --> join_state\n      State3 --> join_state\n      join_state --> State4\n      State4 --> [*]\n```\n\n----------------------------------------\n\nTITLE: Integrating Mermaid with ZenUML Diagrams in a Web Page Using HTML\nDESCRIPTION: This snippet demonstrates how to include Mermaid and register ZenUML as an external diagram plugin with lazy loading and async rendering features in a web page. It uses JavaScript ES module imports from CDN and awaits registration of ZenUML for rendering ZenUML sequence diagrams alongside Mermaid.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';\n  import zenuml from 'https://cdn.jsdelivr.net/npm/@mermaid-js/mermaid-zenuml@0.1.0/dist/mermaid-zenuml.esm.min.mjs';\n  await mermaid.registerExternalDiagrams([zenuml]);\n</script>\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: arrowMarkerAbsolute\nDESCRIPTION: This configuration option controls whether arrow markers in the generated HTML code use absolute paths or anchors. It's particularly relevant when using a base tag for the HTML document. The input is a boolean.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\narrowMarkerAbsolute?: `boolean`\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icons (Iconify) in Mermaid Architecture Diagrams\nDESCRIPTION: Demonstrates how to use custom icons from registered icon packs (like Iconify) within a Mermaid architecture diagram. Icons are specified using the format `packName:iconName` within the parentheses `()`. This example uses various AWS service icons (`logos:aws-lambda`, `logos:aws-aurora`, etc.) for the group and services, requiring the 'logos' pack to be registered beforehand.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\narchitecture-beta\n    group api(logos:aws-lambda)[API]\n\n    service db(logos:aws-aurora)[Database] in api\n    service disk1(logos:aws-glacier)[Storage] in api\n    service disk2(logos:aws-s3)[Storage] in api\n    service server(logos:aws-ec2)[Server] in api\n\n    db:L -- R:server\n    disk1:T -- B:server\n    disk2:T -- B:db\n```\n\n----------------------------------------\n\nTITLE: Defining Aliases for Participants in ZenUML\nDESCRIPTION: This snippet illustrates how to define aliases for participants (A for Alice, J for John) in a ZenUML diagram. Aliases provide a shorter, more convenient way to refer to participants in messages.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nzenuml\n    title Aliases\n    A as Alice\n    J as John\n    A->J: Hello John, how are you?\n    J->A: Great!\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Variables with Frontmatter in Mermaid\nDESCRIPTION: Example of customizing theme colors by modifying themeVariables in the base theme through frontmatter config. Demonstrates setting primary colors, border colors, and other visual properties for a Christmas-themed flowchart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/theming.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  theme: 'base'\n  themeVariables:\n    primaryColor: '#BB2528'\n    primaryTextColor: '#fff'\n    primaryBorderColor: '#7C0000'\n    lineColor: '#F8B229'\n    secondaryColor: '#006100'\n    tertiaryColor: '#fff'\n---\n        graph TD\n          A[Christmas] -->|Get money| B(Go shopping)\n          B --> C{Let me think}\n          B --> G[/Another/]\n          C ==>|One| D[Laptop]\n          C -->|Two| E[iPhone]\n          C -->|Three| F[fa:fa-car Car]\n          subgraph section\n            C\n            D\n            E\n            F\n            G\n          end\n```\n\n----------------------------------------\n\nTITLE: Complete Styling Application Example in Mermaid State Diagrams - Mermaid-Example\nDESCRIPTION: This snippet comprises a complete state diagram with multiple classDefs and uses 'class' statements to apply different styles to states. Features include accessible diagram titles/descriptions, several styles (e.g., notMoving, movement, badBadEvent), state transitions, and multiple assignments of styles to the same state. Requires Mermaid with classDef support; inputs include multiple state and style statements; output is a fully styled, accessible diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_23\n\nLANGUAGE: mermaid-example\nCODE:\n```\n   stateDiagram\n   direction TB\n\n   accTitle: This is the accessible title\n   accDescr: This is an accessible description\n\n   classDef notMoving fill:white\n   classDef movement font-style:italic\n   classDef badBadEvent fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n\n   [*]--> Still\n   Still --> [*]\n   Still --> Moving\n   Moving --> Still\n   Moving --> Crash\n   Crash --> [*]\n\n   class Still notMoving\n   class Moving, Crash movement\n   class Crash badBadEvent\n   class end badBadEvent\n```\n\n----------------------------------------\n\nTITLE: Defining Labelled Class Relationships in Mermaid - Mermaid-Example\nDESCRIPTION: Presents a practical Mermaid code example for labelling class diagram relationships (e.g., 'Inheritance', 'Composition'), enhancing understanding of relationship types in UML. This snippet does not require prerequisites beyond Mermaid and outputs diagrams with explicit relationship names for documentation and teaching purposes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclassA --|> classB : Inheritance\nclassC --* classD : Composition\nclassE --o classF : Aggregation\nclassG --> classH : Association\nclassI -- classJ : Link(Solid)\nclassK ..> classL : Dependency\nclassM ..|> classN : Realization\nclassO .. classP : Link(Dashed)\n\n```\n\n----------------------------------------\n\nTITLE: Cherry-Picking Commits in Mermaid GitGraph\nDESCRIPTION: Shows how to cherry-pick a specific commit from one branch onto the current branch using the `cherry-pick id:\"<commit_id>\"` command in Mermaid GitGraph. The example demonstrates creating 'develop' and 'release' branches, merging 'develop' into 'main', and then cherry-picking the merge commit (identified by `id:\"MERGE\"`) onto the 'release' branch, specifying its parent (`parent:\"B\"`). The cherry-picked commit is visually distinct.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\n    gitGraph\n        commit id: \"ZERO\"\n        branch develop\n        branch release\n        commit id:\"A\"\n        checkout main\n        commit id:\"ONE\"\n        checkout develop\n        commit id:\"B\"\n        checkout main\n        merge develop id:\"MERGE\"\n        commit id:\"TWO\"\n        checkout release\n        cherry-pick id:\"MERGE\" parent:\"B\"\n        commit id:\"THREE\"\n        checkout develop\n        commit id:\"C\"\n```\n\n----------------------------------------\n\nTITLE: Scoped CSS for Badges and Dark Mode Images\nDESCRIPTION: Applies scoped CSS rules. It styles elements with the class 'badges' to display contained paragraphs using flexbox and adds horizontal margins to links within those paragraphs. Additionally, it applies an invert, hue-rotate, and contrast filter to images within a specific structure when the dark mode theme is active.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/index.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.badges > p {\n    display: flex;\n  }\n\n  .badges > p > a {\n    margin: 0 0.5rem;\n  }\n\n  .dark #VPContent > div > div > div.content > div > main > div > div > img {\n    filter: invert(1) hue-rotate(217deg)  contrast(0.72);\n  }\n```\n\n----------------------------------------\n\nTITLE: Notes Spanning Multiple Participants in Mermaid\nDESCRIPTION: Shows how to create notes that span multiple participants.  This is useful for annotating interactions between participants. No dependencies. Expected output: A sequence diagram with a note spanning Alice and John.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    Note over Alice,John: A typical interaction\n```\n\n----------------------------------------\n\nTITLE: Link with Arrow Head and Text\nDESCRIPTION: This snippet shows how to create a link with both an arrow head and text, indicating direction and providing a description of the link. Two syntaxes are provided.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_70\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    A-->|text|B\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    A-- text -->B\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Display\nDESCRIPTION: This snippet shows how to create Display shape.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_49\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: curv-trap, label: \"Display\" }\n```\n\n----------------------------------------\n\nTITLE: GitGraph with Neutral Theme Configuration\nDESCRIPTION: This snippet demonstrates how to configure a GitGraph diagram with the neutral theme.  It sets the logLevel to 'debug' and the theme to 'neutral' within the config section. The GitGraph then defines a series of commits, branches, checkouts, and merges to simulate a basic git workflow.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_25\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'neutral'\n---\n      gitGraph\n        commit\n        branch hotfix\n        checkout hotfix\n        commit\n        branch develop\n        checkout develop\n        commit id:\"ash\" tag:\"abc\"\n        branch featureB\n        checkout featureB\n        commit type:HIGHLIGHT\n        checkout main\n        checkout hotfix\n        commit type:NORMAL\n        checkout develop\n        commit type:REVERSE\n        checkout featureB\n        commit\n        checkout main\n        merge hotfix\n        checkout featureB\n        commit\n        checkout develop\n        branch featureA\n        commit\n        checkout develop\n        merge hotfix\n        checkout featureA\n        commit\n        checkout featureB\n        commit\n        checkout develop\n        merge featureA\n        branch release\n        checkout release\n        commit\n        checkout main\n        commit\n        checkout release\n        merge main\n        checkout develop\n        merge release\n```\n\n----------------------------------------\n\nTITLE: Applying Direct Styling to Nodes in Mermaid\nDESCRIPTION: Demonstrates the use of the `style` keyword to apply custom CSS properties directly to specific requirement and element nodes. This allows for fine-grained control over the appearance of individual nodes in the diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/requirementDiagram.md#_snippet_4\n\nLANGUAGE: Mermaid\nCODE:\n```\nrequirementDiagram\n\nrequirement test_req {\n    id: 1\n    text: styling example\n    risk: low\n    verifymethod: test\n}\n\nelement test_entity {\n    type: simulation\n}\n\nstyle test_req fill:#ffa,stroke:#000, color: green\nstyle test_entity fill:#f9f,stroke:#333, color: blue\n```\n\n----------------------------------------\n\nTITLE: Mermaid Timeline Basic Syntax Structure\nDESCRIPTION: Illustrates the general text structure for defining time periods and events within a Mermaid timeline diagram using colon separators. Events can be on the same line or subsequent indented lines.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/timeline.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{time period} : {event}\n\n```\n\nLANGUAGE: json\nCODE:\n```\n{time period} : {event} : {event}\n\n```\n\nLANGUAGE: json\nCODE:\n```\n{time period} : {event}\n              : {event}\n              : {event}\n```\n\n----------------------------------------\n\nTITLE: GitGraph with Default Theme Configuration\nDESCRIPTION: This snippet demonstrates a GitGraph diagram using the default theme and includes commits, branches, checkouts, and merges to represent a typical git workflow.  The config section sets logLevel to 'debug' and the theme to 'default'.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_26\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n---\n       gitGraph\n       commit\n       branch develop\n       commit tag:\"v1.0.0\"\n       commit\n       checkout main\n       commit type: HIGHLIGHT\n       commit\n       merge develop\n       commit\n       branch featureA\n       commit\n```\n\n----------------------------------------\n\nTITLE: Showing Self-Messages within Loops in Mermaid Sequence Diagrams\nDESCRIPTION: Illustrates how a participant (`John`) can send a message to itself within a `loop` block (`HealthCheck`) using the syntax `John->>John: Message`. This example also uses explicit participant declaration (`participant Alice`) and includes a note (`Note right of John`).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/examples.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>John: Hello John, how are you?\n    loop HealthCheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts<br/>prevail...\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Node with Rounded Shape in Mermaid (mermaid)\nDESCRIPTION: This Mermaid snippet produces a top-down flowchart with a node styled as a rounded rectangle, labeled 'This is an event'. It showcases defining event-specific shapes for flowchart nodes in Mermaid, utilizing the 'rounded' shape attribute. Requires Mermaid configuration supporting custom node shapes. Input is a single node definition; output is a diagram with a rounded event node.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: rounded, label: \"This is an event\" }\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram Type Configuration Options in TypeScript\nDESCRIPTION: Type definitions for various diagram type configurations in Mermaid.js, including sequence, state, pie, timeline, and other diagram types. Each diagram type has its specific configuration interface.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\nsequence?: SequenceDiagramConfig\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstate?: StateDiagramConfig\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npie?: PieDiagramConfig\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntimeline?: TimelineDiagramConfig\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nrequirement?: RequirementDiagramConfig\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nquadrantChart?: QuadrantChartConfig\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nxyChart?: XYChartConfig\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nsankey?: SankeyDiagramConfig\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nradar?: RadarDiagramConfig\n```\n\n----------------------------------------\n\nTITLE: Defining Mermaid Gantt Chart Timeline and Tasks in Mermaid DSL\nDESCRIPTION: This Mermaid diagram snippet defines a Gantt chart timeline titled 'Timeline - Gantt Sampler' with a yearly date format and axis format abbreviated by year. It specifies multiple sections representing issues, each containing task bars or milestones with start and end dates, durations, and labels. The snippet includes examples of milestones and tasks with custom styling references. Dependencies include Mermaid.js support for Gantt diagrams. The input expects Mermaid syntax to render a timeline visualization, and limitations include ignoring unsupported tick intervals silently.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_14\n\nLANGUAGE: Mermaid\nCODE:\n```\ngantt\n    title Timeline - Gantt Sampler\n    dateFormat YYYY\n    axisFormat %y\n    %% this next line doesn't recognise 'decade' or 'year', but will silently ignore\n    tickInterval 1decade\n\n    section Issue19062\n    71   :            item71, 1900, 1930\n    section Issue19401\n    36   :            item36, 1913, 1935\n    section Issue1300\n    94   :            item94, 1910, 1915\n    5    :            item5,  1920, 1925\n    0    : milestone, item0,  1918, 1s\n    9    : vert,              1906, 1s   %% not yet official\n    64   : workaround,        1923, 1s   %% custom CSS object https://github.com/mermaid-js/mermaid/issues/3250\n```\n\n----------------------------------------\n\nTITLE: Configuring Actor Menus with Links in Mermaid Sequence Diagrams Using Mermaid Syntax\nDESCRIPTION: This snippet details how to add clickable popup menus containing links to external URLs for actors in Mermaid sequence diagrams. The simpler syntax uses lines of format `link <actor>: <link-label> @ <link-url>` to define individual labeled links per actor. This enables enriching diagrams where actors represent services or entities with accessible dashboards or documentation. Input is Mermaid diagram code with `link` lines, output is sequence diagrams with interactive menus attached to actors. Dependencies include compatible Mermaid rendering environment.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_25\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Alice\n    participant John\n    link Alice: Dashboard @ https://dashboard.contoso.com/alice\n    link Alice: Wiki @ https://wiki.contoso.com/alice\n    link John: Dashboard @ https://dashboard.contoso.com/john\n    link John: Wiki @ https://wiki.contoso.com/john\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n    Alice-)John: See you later!\n```\n\n----------------------------------------\n\nTITLE: Defining Clickable Task Interactions in Mermaid Gantt Syntax\nDESCRIPTION: Syntax examples for defining click interactions on tasks within a Mermaid Gantt chart. Tasks can be linked to either execute a JavaScript callback function or navigate to a specified URL.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_15\n\nLANGUAGE: mermaid\nCODE:\n```\nclick taskId call callback(arguments)\nclick taskId href URL\n```\n\n----------------------------------------\n\nTITLE: Styling Mermaid Sequence Diagrams Using CSS\nDESCRIPTION: This CSS snippet customizes the appearance of Mermaid sequence diagrams by defining styles for elements such as actors, messages, notes, labels, and loops. It sets colors, fonts, stroke widths, and marker properties for diagram components using relevant class selectors (e.g., .actor, .messageLine0, .noteText). No external dependencies are required, but these styles must be applied in a context where Mermaid diagrams are rendered (such as an HTML page with Mermaid.js included). The snippet expects elements to use the specified CSS classes, and overriding these styles can affect default Mermaid visuals.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_27\n\nLANGUAGE: CSS\nCODE:\n```\nbody {\n  background: white;\n}\n\n.actor {\n  stroke: #ccccff;\n  fill: #ececff;\n}\ntext.actor {\n  fill: black;\n  stroke: none;\n  font-family: Helvetica;\n}\n\n.actor-line {\n  stroke: grey;\n}\n\n.messageLine0 {\n  stroke-width: 1.5;\n  stroke-dasharray: '2 2';\n  marker-end: 'url(#arrowhead)';\n  stroke: black;\n}\n\n.messageLine1 {\n  stroke-width: 1.5;\n  stroke-dasharray: '2 2';\n  stroke: black;\n}\n\n#arrowhead {\n  fill: black;\n}\n\n.messageText {\n  fill: black;\n  stroke: none;\n  font-family: 'trebuchet ms', verdana, arial;\n  font-size: 14px;\n}\n\n.labelBox {\n  stroke: #ccccff;\n  fill: #ececff;\n}\n\n.labelText {\n  fill: black;\n  stroke: none;\n  font-family: 'trebuchet ms', verdana, arial;\n}\n\n.loopText {\n  fill: black;\n  stroke: none;\n  font-family: 'trebuchet ms', verdana, arial;\n}\n\n.loopLine {\n  stroke-width: 2;\n  stroke-dasharray: '2 2';\n  marker-end: 'url(#arrowhead)';\n  stroke: #ccccff;\n}\n\n.note {\n  stroke: #decc93;\n  fill: #fff5ad;\n}\n\n.noteText {\n  fill: black;\n  stroke: none;\n  font-family: 'trebuchet ms', verdana, arial;\n  font-size: 14px;\n}\n```\n\n----------------------------------------\n\nTITLE: Loops in Sequence Diagram Mermaid\nDESCRIPTION: Shows how to express loops in a sequence diagram.  This is done using the loop keyword. No dependencies. Expected output: A sequence diagram with a loop labeled \"Every minute\".\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_13\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    loop Every minute\n        John-->Alice: Great!\n    end\n```\n\n----------------------------------------\n\nTITLE: Customizing XY Chart with Configuration and Theme Variables\nDESCRIPTION: Advanced example showing how to customize an XY chart using both configuration options (width, height, data labels) and theme variables (title color) for better visual presentation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/xyChart.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n    xyChart:\n        width: 900\n        height: 600\n        showDataLabel: true\n    themeVariables:\n        xyChart:\n            titleColor: \"#ff0000\"\n---\nxychart-beta\n    title \"Sales Revenue\"\n    x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]\n    y-axis \"Revenue (in $)\" 4000 --> 11000\n    bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\n    line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\n```\n\n----------------------------------------\n\nTITLE: Concurrency\nDESCRIPTION: This snippet provides an example of using concurrency within a state diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_14\n\nLANGUAGE: mermaid-example\nCODE:\n```\nstateDiagram-v2\n    [*] --> Active\n\n    state Active {\n        [*] --> NumLockOff\n        NumLockOff --> NumLockOn : EvNumLockPressed\n        NumLockOn --> NumLockOff : EvNumLockPressed\n        --\n        [*] --> CapsLockOff\n        CapsLockOff --> CapsLockOn : EvCapsLockPressed\n        CapsLockOn --> CapsLockOff : EvCapsLockPressed\n        --\n        [*] --> ScrollLockOff\n        ScrollLockOff --> ScrollLockOn : EvScrollLockPressed\n        ScrollLockOn --> ScrollLockOff : EvScrollLockPressed\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Mermaid Sequence Diagram Margins via JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to globally configure the rendering margins and layout of Mermaid sequence diagrams by assigning a configuration object to the mermaid.sequenceConfig variable. It allows setting parameters such as diagramMarginX, diagramMarginY, boxTextMargin, noteMargin, messageMargin, and mirrorActors. Dependencies include Mermaid.js loaded in the environment, and this config should be set before any diagrams are rendered. Inputs are numeric and boolean values in the config object; outputs affect the layout, specifically spacing and mirror actor display, with limitations indicated in documented parameter options.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nmermaid.sequenceConfig = {\n  diagramMarginX: 50,\n  diagramMarginY: 10,\n  boxTextMargin: 5,\n  noteMargin: 10,\n  messageMargin: 35,\n  mirrorActors: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Running Dev Server in Docker - Bash\nDESCRIPTION: This Bash command sequence starts the Mermaid development server inside a Docker container using PNPM. Dependencies include Docker installed and the `run` helper script present in the project. The input is the command string; output is the dev server running in an isolated environment, typically used for consistent environments or CI pipelines.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_23\n\nLANGUAGE: Bash\nCODE:\n```\n./run pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests for Flowchart Shapes\nDESCRIPTION: Provides the command to open the Cypress test runner, specifically targeting flowchart shape tests (like those in `newShapes.spec.ts`). The `--env updateSnapshots=true` flag suggests that the test run may update visual regression snapshots if differences are found.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/adding-new-shape.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncypress open --env updateSnapshots=true\n```\n\n----------------------------------------\n\nTITLE: Styling Nodes in ERD\nDESCRIPTION: This snippet demonstrates how to apply custom styles to nodes in an ERD using the `style` statement. It allows for setting properties like `fill`, `stroke`, `stroke-width`, `color`, and `stroke-dasharray`. Example: `style id1 fill:#f9f,stroke:#333,stroke-width:4px`.  Node identifiers (e.g., `id1`) need to be defined within the diagram. This requires no external dependencies beyond Mermaid.js itself.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    id1||--||id2 : label\n    style id1 fill:#f9f,stroke:#333,stroke-width:4px\n    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n```\n\n----------------------------------------\n\nTITLE: CSS Class Example - HTML/Mermaid\nDESCRIPTION: This example demonstrates how to predefine CSS classes and apply them to nodes in a Mermaid flowchart. The CSS styles will override the default Mermaid styles.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_113\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n  .cssClass > rect {\n    fill: #ff0000;\n    stroke: #ffff00;\n    stroke-width: 4px;\n  }\n</style>\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    A-->B[AAA<span>BBB</span>]\n    B-->D\n    class A cssClass\n```\n\n----------------------------------------\n\nTITLE: Specifying Weekday Start for Tick Intervals\nDESCRIPTION: This code snippet shows how to configure the starting weekday when using a weekly `tickInterval`. The `weekday` option allows specifying the day of the week on which the interval begins, allowing customization of the Gantt chart's time axis.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n  tickInterval 1week\n  weekday monday\n```\n\n----------------------------------------\n\nTITLE: Creating a C4 Dynamic Diagram using Mermaid\nDESCRIPTION: This snippet demonstrates the `C4Dynamic` diagram type. It defines `ContainerDb`, `Container`, and `Component` elements within a `Container_Boundary`. Sequential interactions are shown using `Rel`, indicating the flow of calls between elements. `UpdateRelStyle` is used to customize the appearance and positioning of relationship labels and lines.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/c4.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\n    C4Dynamic\n    title Dynamic diagram for Internet Banking System - API Application\n\n    ContainerDb(c4, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n    Container(c1, \"Single-Page Application\", \"JavaScript and Angular\", \"Provides all of the Internet banking functionality to customers via their web browser.\")\n    Container_Boundary(b, \"API Application\") {\n      Component(c3, \"Security Component\", \"Spring Bean\", \"Provides functionality Related to signing in, changing passwords, etc.\")\n      Component(c2, \"Sign In Controller\", \"Spring MVC Rest Controller\", \"Allows users to sign in to the Internet Banking System.\")\n    }\n    Rel(c1, c2, \"Submits credentials to\", \"JSON/HTTPS\")\n    Rel(c2, c3, \"Calls isAuthenticated() on\")\n    Rel(c3, c4, \"select * from users where username = ?\", \"JDBC\")\n\n    UpdateRelStyle(c1, c2, $textColor=\"red\", $offsetY=\"-40\")\n    UpdateRelStyle(c2, c3, $textColor=\"red\", $offsetX=\"-40\", $offsetY=\"60\")\n    UpdateRelStyle(c3, c4, $textColor=\"red\", $offsetY=\"-40\", $offsetX=\"10\")\n```\n\n----------------------------------------\n\nTITLE: Creating C4 Component Diagram for API Application with Mermaid\nDESCRIPTION: This snippet demonstrates how to create a C4 Component diagram for an Internet Banking System API Application. It visualizes containers, components, and their relationships, highlighting the internal structure of the API application.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/c4.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nC4Component\ntitle Component diagram for Internet Banking System - API Application\n\nContainer(spa, \"Single Page Application\", \"javascript and angular\", \"Provides all the internet banking functionality to customers via their web browser.\")\nContainer(ma, \"Mobile App\", \"Xamarin\", \"Provides a limited subset to the internet banking functionality to customers via their mobile device.\")\nContainerDb(db, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\nSystem_Ext(mbs, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\nContainer_Boundary(api, \"API Application\") {\n    Component(sign, \"Sign In Controller\", \"MVC Rest Controller\", \"Allows users to sign in to the internet banking system\")\n    Component(accounts, \"Accounts Summary Controller\", \"MVC Rest Controller\", \"Provides customers with a summary of their bank accounts\")\n    Component(security, \"Security Component\", \"Spring Bean\", \"Provides functionality related to singing in, changing passwords, etc.\")\n    Component(mbsfacade, \"Mainframe Banking System Facade\", \"Spring Bean\", \"A facade onto the mainframe banking system.\")\n\n    Rel(sign, security, \"Uses\")\n    Rel(accounts, mbsfacade, \"Uses\")\n    Rel(security, db, \"Read & write to\", \"JDBC\")\n    Rel(mbsfacade, mbs, \"Uses\", \"XML/HTTPS\")\n}\n\nRel_Back(spa, sign, \"Uses\", \"JSON/HTTPS\")\nRel(spa, accounts, \"Uses\", \"JSON/HTTPS\")\n\nRel(ma, sign, \"Uses\", \"JSON/HTTPS\")\nRel(ma, accounts, \"Uses\", \"JSON/HTTPS\")\n\nUpdateRelStyle(spa, sign, $offsetY=\"-40\")\nUpdateRelStyle(spa, accounts, $offsetX=\"40\", $offsetY=\"40\")\n\nUpdateRelStyle(ma, sign, $offsetX=\"-90\", $offsetY=\"40\")\nUpdateRelStyle(ma, accounts, $offsetY=\"-40\")\n\n    UpdateRelStyle(sign, security, $offsetX=\"-160\", $offsetY=\"10\")\n    UpdateRelStyle(accounts, mbsfacade, $offsetX=\"140\", $offsetY=\"10\")\n    UpdateRelStyle(security, db, $offsetY=\"-40\")\n    UpdateRelStyle(mbsfacade, mbs, $offsetY=\"-40\")\n```\n\n----------------------------------------\n\nTITLE: Using a Default Style Class in Mermaid ER Diagrams\nDESCRIPTION: Demonstrates defining a `default` class using `classDef`. Styles defined in the `default` class (`fill`, `stroke-width`) are automatically applied to all nodes unless overridden by specific node styles or other explicitly applied classes (`foo`, `bar`). This allows setting a base style for the entire diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_14\n\nLANGUAGE: mermaid-example\nCODE:\n```\nerDiagram\n    CAR {\n        string registrationNumber\n        string make\n        string model\n    }\n    PERSON {\n        string firstName\n        string lastName\n        int age\n    }\n    PERSON:::foo ||--|| CAR : owns\n    PERSON o{--|| HOUSE:::bar : has\n\n    classDef default fill:#f9f,stroke-width:4px\n    classDef foo stroke:#f00\n    classDef bar stroke:#0f0\n    classDef foobar stroke:#00f\n```\n\n----------------------------------------\n\nTITLE: Configuring Excluded Weekends and Custom Weekend Start Days in Mermaid Gantt (Markdown)\nDESCRIPTION: This example presents Mermaid Gantt syntax for excluding weekends and customizing the start day for excluded weekends. It demonstrates how to set task schedules that automatically skip Fridays and Saturdays by specifying 'excludes weekends' and 'weekend friday'. This feature is available in Mermaid v11.0.0+, and requires setting the weekend parameter as shown when different weekend configurations are needed.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n    title A Gantt Diagram Excluding Fri - Sat weekends\n    dateFormat YYYY-MM-DD\n    excludes weekends\n    weekend friday\n    section Section\n        A task          :a1, 2024-01-01, 30d\n        Another task    :after a1, 20d\n```\n\n----------------------------------------\n\nTITLE: Integrating Mermaid Timeline Diagram with Lazy Loading in Webpage Using ES Modules\nDESCRIPTION: Demonstrates how to asynchronously import the Mermaid library, including support for timeline diagrams, into a web page using ES module syntax. This approach enables lazy loading and async rendering, which are experimental features important for extending diagram support. It requires a modern browser environment supporting ES modules and a valid CDN URL for the Mermaid package.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import mermaid from '<CDN_URL>/mermaid@<MERMAID_VERSION>/dist/mermaid.esm.min.mjs';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Kanban Tasks Using Mermaid Syntax\nDESCRIPTION: Demonstrates how to add metadata to a task within a Kanban diagram using the @{ ... } syntax. Metadata includes key-value pairs like ticket identifiers, assigned persons, and priority levels, which enhance task description and enable integration with external systems.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/kanban.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nkanban\ntodo[Todo]\n  id3[Update Database Function]@{ ticket: MC-2037, assigned: 'knsv', priority: 'High' }\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Rectangle\nDESCRIPTION: This snippet uses the new shape definition syntax in Mermaid to create a rectangular node. It utilizes the `@{ shape: rect }` syntax after the node ID to explicitly define the shape.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_19\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart RL\n    A@{ shape: manual-file, label: \"File Handling\"}\n    B@{ shape: manual-input, label: \"User Input\"}\n    C@{ shape: docs, label: \"Multiple Documents\"}\n    D@{ shape: procs, label: \"Process Automation\"}\n    E@{ shape: paper-tape, label: \"Paper Records\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kanban Ticket Base URL - YAML\nDESCRIPTION: This snippet demonstrates how to configure the `ticketBaseUrl` in a Mermaid Kanban diagram using a YAML configuration block. This allows linking ticket numbers to an external system.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/kanban.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\nconfig:\n  kanban:\n    ticketBaseUrl: 'https://yourproject.atlassian.net/browse/#TICKET#'\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Pie Chart with Mermaid\nDESCRIPTION: This snippet demonstrates a basic pie chart. It defines the chart type as \"pie\" and then provides the data for the chart. The labels for the pie slices are enclosed in quotes, followed by a colon and the numerical value.  This example requires no dependencies beyond the Mermaid-js library.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/pie.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\npie title Pets adopted by volunteers\n    \"Dogs\" : 386\n    \"Cats\" : 85\n    \"Rats\" : 15\n```\n\n----------------------------------------\n\nTITLE: Defining a Pie Chart with Accessibility Metadata in Mermaid-js\nDESCRIPTION: This snippet defines a pie chart with accessibility title and description. It includes labels for chart elements and their respective values, which can be used to generate a visual pie chart with accessible labels for screen readers. Dependencies include Mermaid.js supporting pie chart syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\n   pie\n      accTitle: My Pie Chart Accessibility Title\n      accDescr: My Pie Chart Accessibility Description\n\n    title Key elements in Product X\n    \"Calcium\" : 42.96\n    \"Potassium\" : 50.05\n    \"Magnesium\" : 10.01\n    \"Iron\" :  5\n```\n\n----------------------------------------\n\nTITLE: Merging Branches and Adding Merge Attributes in GitGraph - Mermaid\nDESCRIPTION: This advanced example demonstrates multiple branches, checkouts, merges, and the use of merge attributes such as custom ID, tag, and type. The 'merge' keyword joins two branch histories, creating a visually distinct merge commit that can be annotated. This snippet highlights Mermaid's support for detailed, annotated merge flows, aiding in complex workflow visualization and planning.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n   commit id: \"1\"\n   commit id: \"2\"\n   branch nice_feature\n   checkout nice_feature\n   commit id: \"3\"\n   checkout main\n   commit id: \"4\"\n   checkout nice_feature\n   branch very_nice_feature\n   checkout very_nice_feature\n   commit id: \"5\"\n   checkout main\n   commit id: \"6\"\n   checkout nice_feature\n   commit id: \"7\"\n   checkout main\n   merge nice_feature id: \"customID\" tag: \"customTag\" type: REVERSE\n   checkout very_nice_feature\n   commit id: \"8\"\n   checkout main\n   commit id: \"9\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ELK Layout for Mermaid Diagrams using YAML\nDESCRIPTION: Shows how to configure the layout engine for Mermaid diagrams to use ELK (Eclipse Layout Kernel) instead of the default (dagre). This is done by setting the `layout: elk` property within a `config` block in YAML frontmatter. ELK layout is often preferred for larger or more complex diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n---\nconfig:\n  layout: elk\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Thick Link\nDESCRIPTION: This snippet creates a thick link between two nodes in a flowchart using the `==>` syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_27\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n   A ==> B\n```\n\n----------------------------------------\n\nTITLE: Mermaid Theming Configuration Options in TypeScript\nDESCRIPTION: Type definitions for theme-related configuration options in Mermaid.js, including theme selection, CSS customization, and theme variables. Themes can be set to default, base, dark, forest, neutral, or null.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\ntheme?: \"default\" | \"base\" | \"dark\" | \"forest\" | \"neutral\" | \"null\"\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nthemeCSS?: string\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nthemeVariables?: any\n```\n\n----------------------------------------\n\nTITLE: Creating a Dotted Link\nDESCRIPTION: This snippet creates a dotted link between two nodes in a flowchart using the `-.->` syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_25\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n   A-.->B;\n```\n\n----------------------------------------\n\nTITLE: Defining Class Styles in Mermaid Class Diagrams\nDESCRIPTION: This code snippet shows how to define reusable style classes for Mermaid class diagrams using the `classDef` keyword. It defines a class with specific styling properties. This style can then be applied to nodes using the `cssClass` command.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_26\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class Animal:::someclass\n    classDef someclass fill:#f96\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Circle\nDESCRIPTION: This snippet demonstrates how to define a circle-shaped node in Mermaid using the shape keyword.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_25\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: circle, label: \"Start\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Interaction in Mermaid Class Diagrams\nDESCRIPTION: This snippet shows how to define interactions (links and callbacks) in Mermaid class diagrams. Interaction actions are defined after class declarations, and involve defining the node, reference, and tooltip. The example demonstrates both linking to a URL and calling a JavaScript callback function.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_19\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class Class01\n    class Class02\n    callback Class01 \"callbackFunction\" \"Callback tooltip\"\n    link Class02 \"https://www.github.com\" \"This is a link\"\n    class Class03\n    class Class04\n    click Class03 call callbackFunction() \"Callback tooltip\"\n    click Class04 href \"https://www.github.com\" \"This is a link\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Advanced Task Dependencies Using 'after' and 'until' in Mermaid Gantt (Markdown)\nDESCRIPTION: This example showcases the use of advanced dependency syntax in Mermaid Gantt charts, where tasks reference multiple predecessors via 'after' and define end constraints using 'until'. The snippet clarifies how start and end dates are computed based on referenced task IDs. It is applicable for modeling complex scheduling in project plans using Mermaid in Markdown environments with v10.9.0+ for 'until' support.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n    apple :a, 2017-07-20, 1w\n    banana :crit, b, 2017-07-23, 1d\n    cherry :active, c, after b a, 1d\n    kiwi   :d, 2017-07-20, until b c\n```\n\n----------------------------------------\n\nTITLE: Start and End States\nDESCRIPTION: This snippet defines the start and end states of the diagram using the [*] syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_7\n\nLANGUAGE: mermaid-example\nCODE:\n```\nstateDiagram-v2\n    [*] --> s1\n    s1 --> [*]\n```\n\n----------------------------------------\n\nTITLE: Adding Comments in Mermaid Sequence Diagrams Using Mermaid Syntax\nDESCRIPTION: This snippet shows how to insert comments inside a Mermaid sequence diagram using lines that start with `%%`. These comments are ignored by the parser and do not affect diagram rendering. Comments must be on their own lines and can contain any text including diagram syntax. This requires Mermaid parser support for comment lines in diagrams. It is useful for embedding notes or explanations that do not appear visually.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_21\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    %% this is a comment\n    John-->>Alice: Great!\n```\n\n----------------------------------------\n\nTITLE: Defining Lollipop Interface Relationships - Mermaid\nDESCRIPTION: Explains and demonstrates the use of lollipop interface notation in Mermaid class diagrams, using the ()-- syntax to depict an interface connected to a class. Requires only Mermaid and correct syntax. The diagram visually distinguishes interface roles, which are unique per instance and not shared across multiple associations.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n  bar ()-- foo\n\n```\n\n----------------------------------------\n\nTITLE: Integrating Mindmaps in HTML (Simplified)\nDESCRIPTION: This code illustrates the simplified method for including Mermaid.js and its mindmap support, using the lazy loading features.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import mermaid from '<CDN_URL>/mermaid@<MERMAID_VERSION>/dist/mermaid.esm.min.mjs';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Single-Line Directive Declaration\nDESCRIPTION: This example demonstrates how to declare directives in a single line for concise configuration. It sets the `mirrorActors` property to `false` within the `sequence` diagram configuration.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n%%{init: { \"sequence\": { \"mirrorActors\":false }}}%%\n```\n\n----------------------------------------\n\nTITLE: Creating a C4 Component Diagram using Mermaid\nDESCRIPTION: This example shows the `C4Component` diagram type. It defines `Container`, `ContainerDb`, `System_Ext`, and `Component` elements within a `Container_Boundary`. Relationships (`Rel`, `Rel_Back`) are defined between components, containers, and external systems. `UpdateRelStyle` modifies the layout and appearance of relationships.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/c4.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\n    C4Component\n    title Component diagram for Internet Banking System - API Application\n\n    Container(spa, \"Single Page Application\", \"javascript and angular\", \"Provides all the internet banking functionality to customers via their web browser.\")\n    Container(ma, \"Mobile App\", \"Xamarin\", \"Provides a limited subset to the internet banking functionality to customers via their mobile device.\")\n    ContainerDb(db, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n    System_Ext(mbs, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n    Container_Boundary(api, \"API Application\") {\n        Component(sign, \"Sign In Controller\", \"MVC Rest Controller\", \"Allows users to sign in to the internet banking system\")\n        Component(accounts, \"Accounts Summary Controller\", \"MVC Rest Controller\", \"Provides customers with a summary of their bank accounts\")\n        Component(security, \"Security Component\", \"Spring Bean\", \"Provides functionality related to singing in, changing passwords, etc.\")\n        Component(mbsfacade, \"Mainframe Banking System Facade\", \"Spring Bean\", \"A facade onto the mainframe banking system.\")\n\n        Rel(sign, security, \"Uses\")\n        Rel(accounts, mbsfacade, \"Uses\")\n        Rel(security, db, \"Read & write to\", \"JDBC\")\n        Rel(mbsfacade, mbs, \"Uses\", \"XML/HTTPS\")\n    }\n\n    Rel_Back(spa, sign, \"Uses\", \"JSON/HTTPS\")\n    Rel(spa, accounts, \"Uses\", \"JSON/HTTPS\")\n\n    Rel(ma, sign, \"Uses\", \"JSON/HTTPS\")\n    Rel(ma, accounts, \"Uses\", \"JSON/HTTPS\")\n\n    UpdateRelStyle(spa, sign, $offsetY=\"-40\")\n    UpdateRelStyle(spa, accounts, $offsetX=\"40\", $offsetY=\"40\")\n\n    UpdateRelStyle(ma, sign, $offsetX=\"-90\", $offsetY=\"40\")\n    UpdateRelStyle(ma, accounts, $offsetY=\"-40\")\n\n        UpdateRelStyle(sign, security, $offsetX=\"-160\", $offsetY=\"10\")\n        UpdateRelStyle(accounts, mbsfacade, $offsetX=\"140\", $offsetY=\"10\")\n        UpdateRelStyle(security, db, $offsetY=\"-40\")\n        UpdateRelStyle(mbsfacade, mbs, $offsetY=\"-40\")\n```\n\n----------------------------------------\n\nTITLE: Setting aria-roledescription in HTML\nDESCRIPTION: This HTML snippet shows how the `aria-roledescription` attribute is automatically added to the SVG element. The value of this attribute is set to the diagram type key. This snippet demonstrates the expected output after the mermaid.js library processes the diagram information.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<svg\n  aria-roledescription=\"stateDiagram\"\n  class=\"statediagram\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"100%\"\n  id=\"mermaid-1668720491568\"\n></svg>\n```\n\n----------------------------------------\n\nTITLE: Defining a Service in Mermaid Architecture Diagrams\nDESCRIPTION: Illustrates the basic syntax for defining a service node in a Mermaid architecture diagram. This example creates a service identified as `database1`, using the `database` icon and displaying the label 'My Database'. Services represent individual components.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nservice database1(database)[My Database]\n```\n\n----------------------------------------\n\nTITLE: JavaScript Theme Object Example\nDESCRIPTION: This JavaScript code shows how to add a new diagram's styling function (xyzDiagram) to the main themes object in `src/styles.js`. This step ensures that the new diagram can be styled using Mermaid's theming engine. The function name must match the diagram type's name.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram-jison.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst themes = {\n  flowchart,\n  'flowchart-v2': flowchart,\n  sequence,\n  xyzDiagram,\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Compact Mode in Mermaid Gantt Charts\nDESCRIPTION: This snippet illustrates how to enable compact display mode for Gantt diagrams, allowing multiple tasks to be shown within the same row, reducing vertical space and improving readability for densely packed schedules. The display mode is activated through YAML front-matter with the 'displayMode: compact' setting, influencing subsequent diagram rendering.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ndisplayMode: compact\n---\ngantt\n    title A Gantt Diagram\n    dateFormat  YYYY-MM-DD\n\n    section Section\n    A task           :a1, 2014-01-01, 30d\n    Another task     :a2, 2014-01-20, 25d\n    Another one      :a3, 2014-02-10, 20d\n```\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ndisplayMode: compact\n---\ngantt\n    title A Gantt Diagram\n    dateFormat  YYYY-MM-DD\n\n    section Section\n    A task           :a1, 2014-01-01, 30d\n    Another task     :a2, 2014-01-20, 25d\n    Another one      :a3, 2014-02-10, 20d\n```\n\n----------------------------------------\n\nTITLE: JavaScript Parser Setup\nDESCRIPTION: This JavaScript code shows how to set up a parser as a separate module. It imports the graph database and parser, and then assigns the graph database to the parser's `yy` object. This setup is required before parsing any input text.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram-jison.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst graph = require('./graphDb');\nconst flow = require('./parser/flow');\nflow.parser.yy = graph;\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Formatting in Mermaid Requirements\nDESCRIPTION: Demonstrates how to apply Markdown formatting, such as bold (`**`) and italics (`*`), within the `text` field of a requirement node definition by enclosing the entire text string in double quotes. It also shows quoting the requirement name.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/requirementDiagram.md#_snippet_1\n\nLANGUAGE: Mermaid\nCODE:\n```\nrequirementDiagram\n\nrequirement \"__test_req__\" {\n    id: 1\n    text: \"*italicized text* **bold text**\"\n    risk: high\n    verifymethod: test\n}\n```\n\n----------------------------------------\n\nTITLE: Stacked Activations in Mermaid\nDESCRIPTION: Shows how activations can be stacked for the same actor.  This is useful for representing nested or concurrent activities. No dependencies. Expected output: A sequence diagram showing John with stacked activations when receiving multiple messages from Alice.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    John-->>-Alice: I feel great!\n```\n\n----------------------------------------\n\nTITLE: Nesting Parallel Blocks (par) - Mermaid\nDESCRIPTION: Shows that `par` blocks can be nested within each other, allowing for complex representations of concurrent activities and sub-activities.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_16\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    par Alice to Bob\n        Alice->>Bob: Go help John\n    and Alice to John\n        Alice->>John: I want this done today\n        par John to Charlie\n            John->>Charlie: Can we do this today?\n        and John to Diana\n            John->>Diana: Can you help us today?\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Changing Sequence Diagram Configuration via Directive\nDESCRIPTION: A directive example specifically targeting sequence diagram configurations, setting `wrap` to true to enable automatic text wrapping for long messages.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_15\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { \"sequence\": { \"wrap\": true} } }%%\n```\n\n----------------------------------------\n\nTITLE: Styling Individual Nodes in Mermaid Class Diagrams\nDESCRIPTION: Shows how to apply custom styles to individual nodes in a class diagram using the 'style' keyword. Demonstrates customizing fill color, stroke color, stroke width, and other CSS properties.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_29\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n  class Animal\n  class Mineral\n  style Animal fill:#f9f,stroke:#333,stroke-width:4px\n  style Mineral fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n```\n\n----------------------------------------\n\nTITLE: Gantt Chart with Accessible Title and Description in Mermaid\nDESCRIPTION: This Mermaid code snippet demonstrates how to incorporate accessibility features into a Gantt chart. The `accTitle` and `accDescr` keywords provide a title and description for screen readers, enhancing accessibility for users with disabilities.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n      accTitle: My Gantt Chart Accessibility Title\n      accDescr: My Gantt Chart Accessibility Description\n\n    title A Gantt Diagram\n    dateFormat  YYYY-MM-DD\n    section Section\n    A task           :a1, 2014-01-01, 30d\n    Another task     :after a1  , 20d\n    section Another\n    Task in sec      :2014-01-12  , 12d\n    another task      : 24d\n```\n\n----------------------------------------\n\nTITLE: State Diagram with Spaces in State Names\nDESCRIPTION: Demonstrates how to include spaces in state names by defining the state with an ID first and then referencing that ID in transitions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_23\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram\n    classDef yourState font-style:italic,font-weight:bold,fill:white\n\n    yswsii: Your state with spaces in it\n    [*] --> yswsii:::yourState\n    [*] --> SomeOtherState\n    SomeOtherState --> YetAnotherState\n    yswsii --> YetAnotherState\n    YetAnotherState --> [*]\n```\n\n----------------------------------------\n\nTITLE: Creating a Circle Edge\nDESCRIPTION: Demonstrates the creation of an edge with a circle head by using `--o`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_37\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A --o B\n```\n\n----------------------------------------\n\nTITLE: Composite States Declaration\nDESCRIPTION: This snippet introduces composite states, which can contain internal states. It uses the `state` keyword and curly braces to define a composite state.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_8\n\nLANGUAGE: mermaid-example\nCODE:\n```\nstateDiagram-v2\n    [*] --> First\n    state First {\n        [*] --> second\n        second --> [*]\n    }\n\n    [*] --> NamedComposite\n    NamedComposite: Another Composite\n    state NamedComposite {\n        [*] --> namedSimple\n        namedSimple --> [*]\n        namedSimple: Another simple\n    }\n```\n\n----------------------------------------\n\nTITLE: Annotating Classes with Markers in Nested Form - Mermaid\nDESCRIPTION: Shows how to embed special markers (e.g., <<interface>>, <<enumeration>>) within nested class declarations in Mermaid. Only Mermaid syntax is needed, and classes can list constants or members under an annotation. The diagram visually segments enumerated types and interfaces with internal markers.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_18\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclass Shape{\n    <<interface>>\n    noOfVertices\n    draw()\n}\nclass Color{\n    <<enumeration>>\n    RED\n    BLUE\n    GREEN\n    WHITE\n    BLACK\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating a C4 Context Diagram for Internet Banking System in Mermaid.js\nDESCRIPTION: This Mermaid.js code defines a C4 system context diagram illustrating a banking system and its interactions with customers, external systems, and internal subsystems within various boundaries. It uses diagram syntax to model relationships, system boundaries, and elements such as persons, systems, and data stores. Dependencies include Mermaid syntax understanding and familiarity with C4 modeling conventions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nC4Context\ntitle System Context diagram for Internet Banking System\n\nPerson(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\nPerson(customerB, \"Banking Customer B\")\nPerson_Ext(customerC, \"Banking Customer C\")\nSystem(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\n\nPerson(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\n\nEnterprise_Boundary(b1, \"BankBoundary\") {\n\n  SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n  System_Boundary(b2, \"BankBoundary2\") {\n    System(SystemA, \"Banking System A\")\n    System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts.\")\n  }\n\n  System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\n  SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\n\n  Boundary(b3, \"BankBoundary3\", \"boundary\") {\n    SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank, with personal bank accounts.\")\n    SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\n  }\n}\n\nBiRel(customerA, SystemAA, \"Uses\")\nBiRel(SystemAA, SystemE, \"Uses\")\nRel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\nRel(SystemC, customerA, \"Sends e-mails to\")\n```\n\n----------------------------------------\n\nTITLE: Setting Git Graph Orientation to Left-to-Right (LR)\nDESCRIPTION: This snippet demonstrates how to explicitly set the Mermaid Git Graph orientation to Left-to-Right using the `LR:` directive after `gitGraph`. This is the default orientation if none is specified.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_16\n\nLANGUAGE: mermaid\nCODE:\n```\n    gitGraph LR:\n       commit\n       commit\n       branch develop\n       commit\n       commit\n       checkout main\n       commit\n       commit\n       merge develop\n       commit\n       commit\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Actor Link Menus in Mermaid Sequence Diagrams\nDESCRIPTION: Explains the `link <actor>: <label> @ <url>` syntax in Mermaid to associate clickable links with specific actors in a sequence diagram. Multiple links can be added per actor, creating a popup menu.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_25\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Alice\n    participant John\n    link Alice: Dashboard @ https://dashboard.contoso.com/alice\n    link Alice: Wiki @ https://wiki.contoso.com/alice\n    link John: Dashboard @ https://dashboard.contoso.com/john\n    link John: Wiki @ https://wiki.contoso.com/john\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n    Alice-)John: See you later!\n```\n\n----------------------------------------\n\nTITLE: Shortcut Activation/Deactivation - Mermaid\nDESCRIPTION: Illustrates a shortcut notation for activation and deactivation by appending `+` (activate) or `-` (deactivate) suffixes to the message arrow. This is a more concise way to show activation/deactivation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!\n```\n\n----------------------------------------\n\nTITLE: Creating System Architecture Diagrams with Mermaid Blocks\nDESCRIPTION: Illustrates a software system architecture with styled components using Mermaid block diagrams. Demonstrates column layout, directional arrows, and class-based styling to create a visually organized representation of system components.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nblock-beta\n  columns 3\n  Frontend blockArrowId6<[\" \"]>(right) Backend\n  space:2 down<[\" \"]>(down)\n  Disk left<[\" \"]>(left) Database[(\"Database\")]\n\n  classDef front fill:#696,stroke:#333;\n  classDef back fill:#969,stroke:#333;\n  class Frontend front\n  class Backend,Database back\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Divided Process\nDESCRIPTION: This snippet creates a divided rectangle to represent a divided process.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_50\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: div-rect, label: \"Divided process\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Kanban Diagram Columns - Mermaid\nDESCRIPTION: This snippet demonstrates how to define columns in a Mermaid Kanban diagram using the `columnId[Column Title]` syntax. The `columnId` is a unique identifier, and `[Column Title]` is the displayed column header.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/kanban.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ncolumnId[Column Title]\n```\n\n----------------------------------------\n\nTITLE: Example: Styling Quadrant Chart Points (Mermaid Example Block)\nDESCRIPTION: Provides a complete, renderable example within a `mermaid-example` block demonstrating how to style points in a quadrant chart using a mix of direct inline styles and predefined classes. It includes chart setup (title, axes, quadrants), point definitions with coordinates and styles, and class definitions (`classDef`). Note that direct styles (like on Campaign B, C, D, F) override corresponding class styles.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/quadrantChart.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nquadrantChart\n  title Reach and engagement of campaigns\n  x-axis Low Reach --> High Reach\n  y-axis Low Engagement --> High Engagement\n  quadrant-1 We should expand\n  quadrant-2 Need to promote\n  quadrant-3 Re-evaluate\n  quadrant-4 May be improved\n  Campaign A: [0.9, 0.0] radius: 12\n  Campaign B:::class1: [0.8, 0.1] color: #ff3300, radius: 10\n  Campaign C: [0.7, 0.2] radius: 25, color: #00ff33, stroke-color: #10f0f0\n  Campaign D: [0.6, 0.3] radius: 15, stroke-color: #00ff0f, stroke-width: 5px ,color: #ff33f0\n  Campaign E:::class2: [0.5, 0.4]\n  Campaign F:::class3: [0.4, 0.5] color: #0000ff\n  classDef class1 color: #109060\n  classDef class2 color: #908342, radius : 10, stroke-color: #310085, stroke-width: 10px\n  classDef class3 color: #f00fff, radius : 10\n```\n\n----------------------------------------\n\nTITLE: Applying Direct Styling in Mermaid Requirement Diagrams\nDESCRIPTION: Demonstrates how to apply direct CSS styling to specific requirements and elements using the 'style' keyword followed by the node name and CSS properties (e.g., fill, stroke, color).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/requirementDiagram.md#_snippet_4\n\nLANGUAGE: Mermaid\nCODE:\n```\nrequirementDiagram\n\nrequirement test_req {\n    id: 1\n    text: styling example\n    risk: low\n    verifymethod: test\n}\n\nelement test_entity {\n    type: simulation\n}\n\nstyle test_req fill:#ffa,stroke:#000, color: green\nstyle test_entity fill:#f9f,stroke:#333, color: blue\n```\n\n----------------------------------------\n\nTITLE: Indicating Sequence Break (break) - Mermaid\nDESCRIPTION: Demonstrates how to use the `break` block to indicate a point where the sequence execution stops prematurely, typically used to model exceptions or error conditions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_19\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Consumer-->API: Book something\n    API-->BookingService: Start booking process\n    break when the booking process fails\n        API-->Consumer: show failure\n    end\n    API-->BillingService: Start billing process\n```\n\n----------------------------------------\n\nTITLE: Specifying Identifying and Non-Identifying Relationships with Cardinalities in Mermaid ER Diagrams\nDESCRIPTION: Demonstrates how to declare relationships with different cardinalities and identification types using Mermaid syntax. The snippet includes identifying (solid line via '--') and non-identifying (dashed line via '..') relationships connecting CAR, PERSON, and NAMED-DRIVER entities, illustrating various cardinality notations such as '||--o{' and ' }o..o{'. This requires understanding of ER semantics for proper interpretation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    CAR ||--o{ NAMED-DRIVER : allows\n    PERSON }o..o{ NAMED-DRIVER : is\n```\n\n----------------------------------------\n\nTITLE: Styling Mermaid Diagrams with CSS\nDESCRIPTION: This CSS snippet provides an example of how to style Mermaid diagrams by specifying a font-family for the `pre.mermaid` selector.  This ensures that the diagrams render with the correct font, even if the default fonts are not available.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\npre.mermaid {\n  font-family: 'trebuchet ms', verdana, arial;\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Mermaid Requirement Diagram Example\nDESCRIPTION: This snippet showcases a larger Requirement diagram incorporating multiple requirement types (requirement, functionalRequirement, performanceRequirement, interfaceRequirement, physicalRequirement, designConstraint), elements with types and document references ('docRef'), and various relationship types (satisfies, traces, contains, derives, refines, verifies, copies).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/requirementDiagram.md#_snippet_2\n\nLANGUAGE: Mermaid\nCODE:\n```\n    requirementDiagram\n\n    requirement test_req {\n    id: 1\n    text: the test text.\n    risk: high\n    verifymethod: test\n    }\n\n    functionalRequirement test_req2 {\n    id: 1.1\n    text: the second test text.\n    risk: low\n    verifymethod: inspection\n    }\n\n    performanceRequirement test_req3 {\n    id: 1.2\n    text: the third test text.\n    risk: medium\n    verifymethod: demonstration\n    }\n\n    interfaceRequirement test_req4 {\n    id: 1.2.1\n    text: the fourth test text.\n    risk: medium\n    verifymethod: analysis\n    }\n\n    physicalRequirement test_req5 {\n    id: 1.2.2\n    text: the fifth test text.\n    risk: medium\n    verifymethod: analysis\n    }\n\n    designConstraint test_req6 {\n    id: 1.2.3\n    text: the sixth test text.\n    risk: medium\n    verifymethod: analysis\n    }\n\n    element test_entity {\n    type: simulation\n    }\n\n    element test_entity2 {\n    type: word doc\n    docRef: reqs/test_entity\n    }\n\n    element test_entity3 {\n    type: \"test suite\"\n    docRef: github.com/all_the_tests\n    }\n\n\n    test_entity - satisfies -> test_req2\n    test_req - traces -> test_req2\n    test_req - contains -> test_req3\n    test_req3 - contains -> test_req4\n    test_req4 - derives -> test_req5\n    test_req5 - refines -> test_req6\n    test_entity3 - verifies -> test_req5\n    test_req <- copies - test_entity2\n```\n\n----------------------------------------\n\nTITLE: Using @return Annotator for Reply Messages in ZenUML Nested Calls Using zenuml\nDESCRIPTION: This example demonstrates how to use the @return annotator inside nested method calls and conditions to indicate returning to an upper call level. It depicts conditional early returns and message flow between client, intermediate, and nested calls.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_8\n\nLANGUAGE: zenuml\nCODE:\n```\ntitle Reply message\nClient->A.method() {\n  B.method() {\n    if(condition) {\n      return x1\n      // return early\n      @return\n      A->Client: x11\n    }\n  }\n  return x2\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Parsing Execution\nDESCRIPTION: This JavaScript code snippet demonstrates how to execute the parsing process using the `parse` method of the parser. The `text` variable contains the diagram definition that needs to be parsed. After parsing, data can be extracted from the data store.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram-jison.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nflow.parser.parse(text);\n```\n\n----------------------------------------\n\nTITLE: Example of site-wide theme initialization in JavaScript\nDESCRIPTION: Demonstrates how to set a global theme for all Mermaid diagrams using the initialize method, with parameters such as security level and theme name. This enables consistent theming across diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/theming.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmermaid.initialize({\n  securityLevel: 'loose',\n  theme: 'base',\n});\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: deterministicIDSeed\nDESCRIPTION: This option provides an optional seed for generating deterministic IDs. If `deterministicIds` is set to `true` and this seed isn't provided, a simple number iterator is used.  A string can be used as a static seed.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndeterministicIDSeed?: `string`\n```\n\n----------------------------------------\n\nTITLE: Cardinality Definition in Mermaid Class Diagram\nDESCRIPTION: This code snippet demonstrates the use of cardinality notation in Mermaid class diagrams to indicate the number of instances of one class linked to another. It uses the syntax `[classA] \"cardinality1\" [Arrow] \"cardinality2\" [ClassB]:LabelText` within a `classDiagram` block.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_15\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    Customer \"1\" --> \"*\" Ticket\n    Student \"1\" --> \"1..*\" Course\n    Galaxy --> \"many\" Star : Contains\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram Showing Mermaid Initialization Process in Mermaid Language\nDESCRIPTION: This sequence diagram illustrates the flow of the Mermaid initialization process. It depicts the site first calling the \"initialize\" method on Mermaid followed by a notification of content loading. Subsequently, Mermaid calls the init method on mermaidAPI to apply configuration settings site-wide. This flow is essential to ensure that site-level configuration overrides are applied only once before rendering diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/configuration.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\tSite->>mermaid: initialize\n\tSite->>mermaid: content loaded\n\tmermaid->>mermaidAPI: init\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: deterministicIds\nDESCRIPTION: This option controls how node IDs in the generated SVG are created. When set to `true`, the IDs are based on a seed, making them deterministic, which is ideal for version control.  The input is a boolean.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndeterministicIds?: `boolean`\n```\n\n----------------------------------------\n\nTITLE: Using Autonumber Directive for Sequence Numbers in Mermaid Sequence Diagrams\nDESCRIPTION: This snippet shows enabling automatic numbering of sequence diagram arrows within the Mermaid diagram code itself by adding the `autonumber` keyword at the start of a `sequenceDiagram`. This is an alternative to global JavaScript configuration and causes Mermaid to attach incremental numbers to each message arrow rendered. It requires Mermaid support for the `autonumber` syntax. Input is Mermaid code with `autonumber`, output is sequence diagram with labeled arrows.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_24\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    Alice->>John: Hello John, how are you?\n    loop HealthCheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n```\n\n----------------------------------------\n\nTITLE: Expressing Loops in ZenUML Sequence Diagrams Using zenuml\nDESCRIPTION: Demonstrates a while loop structure in ZenUML showing repeated interactions between participants. It supports control flow expressions for loops using 'while', 'for', 'forEach', and 'loop' keywords.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_11\n\nLANGUAGE: zenuml\nCODE:\n```\nwhile(condition) {\n    ...statements...\n}\n\n\nAlice->John: Hello John, how are you?\nwhile(true) {\n  John->Alice: Great!\n}\n```\n\n----------------------------------------\n\nTITLE: Flowchart Diagram Example in Mermaid\nDESCRIPTION: Defines a simple flowchart illustrating directional relationships between nodes A, B, C, and D using Mermaid syntax. Demonstrates basic node linkage with arrow notation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/examples.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n```\n\n----------------------------------------\n\nTITLE: User Journey Diagram Example in Mermaid\nDESCRIPTION: Displays a user journey with steps such as 'Make tea' and 'Go upstairs' with duration and actor annotations, modeling user experience workflows.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md#_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\njourney\n  title My working day\n  section Go to work\n    Make tea: 5: Me\n    Go upstairs: 3: Me\n    Do work: 1: Me, Cat\n  section Go home\n    Go downstairs: 5: Me\n    Sit down: 3: Me\n```\n\nLANGUAGE: Markdown\nCODE:\n```\njourney\n  title My working day\n  section Go to work\n    Make tea: 5: Me\n    Go upstairs: 3: Me\n    Do work: 1: Me, Cat\n  section Go home\n    Go downstairs: 5: Me\n    Sit down: 3: Me\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Mindmap Structure with Indentation\nDESCRIPTION: Illustrates the core principle of Mermaid mindmap syntax where indentation defines the hierarchical relationship between nodes. Shows a root node ('Root') with a child ('A'), which in turn has two children ('B' and 'C').\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_1\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    Root\n        A\n            B\n            C\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\nRoot\n    A\n      B\n      C\n```\n\n----------------------------------------\n\nTITLE: Modeling Try/Catch/Finally Blocks for Exception Flow in ZenUML Using zenuml\nDESCRIPTION: Shows how to define try-catch-finally style blocks to represent exception handling in sequence diagrams. These blocks indicate normal processing, error handling, and cleanup activities, useful for depicting robust flows.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_15\n\nLANGUAGE: zenuml\nCODE:\n```\ntry {\n  Consumer->API: Book something\n  API->BookingService: Start booking process\n} catch {\n  API->Consumer: show failure\n} finally {\n  API->BookingService: rollback status\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Edges Originating from Groups in Mermaid Architecture Diagrams\nDESCRIPTION: Demonstrates how to draw edges that appear to originate from or terminate at the boundary of a group, adjacent to a specific service within that group, using the `{group}` modifier. This example connects `groupOne` (near `server`) to `groupTwo` (near `subnet`) with a directed arrow. Note that group IDs cannot be used directly in edge definitions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nservice server[Server] in groupOne\nservice subnet[Subnet] in groupTwo\n\nserver{group}:B --> T:subnet{group}\n```\n\n----------------------------------------\n\nTITLE: Defining Participants Explicitly - Mermaid\nDESCRIPTION: Shows how to explicitly define participants using the `participant` keyword. This allows controlling the order in which participants appear in the diagram, regardless of their first message.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Bob->>Alice: Hi Alice\n    Alice->>Bob: Hi Bob\n```\n\n----------------------------------------\n\nTITLE: Defining Visibility in Class Members\nDESCRIPTION: This snippet explains and demonstrates the use of visibility modifiers (public, private, protected, and package-level) to define the access level of class members.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Gantt Chart Title and Excludes (Weekend Exclusion) in Mermaid\nDESCRIPTION: These snippets demonstrate how to set up a Gantt chart with a custom title, exclude specific weekends (Saturday/Sunday or Friday/Saturday), and define the weekend start day. The configuration allows highlighting certain dates and avoiding task durations over excluded days. Dependencies include Mermaid syntax support for 'gantt' diagrams and optional weekend configuration.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n    title A Gantt Diagram Excluding Fri - Sat weekends\n    dateFormat YYYY-MM-DD\n    excludes weekends\n    weekend friday\n    section Section\n        A task          :a1, 2024-01-01, 30d\n        Another task    :after a1, 20d\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n    title A Gantt Diagram Excluding Fri - Sat weekends\n    dateFormat YYYY-MM-DD\n    excludes weekends\n    weekend friday\n    section Section\n        A task          :a1, 2024-01-01, 30d\n        Another task    :after a1, 20d\n```\n\n----------------------------------------\n\nTITLE: Defining Radar Diagram Curves - Markdown\nDESCRIPTION: Shows the syntax for declaring curves (datasets) in a radar diagram within Markdown. Curves may be given IDs, labels, and either ordered values or axis-value pairs. Multiple curves can be declared in a single statement. Useful for plotting multiple comparative entities. Requires axes defined beforehand.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_9\n\nLANGUAGE: md\nCODE:\n```\nradar-beta\n  axis axis1, axis2, axis3\n  curve id1[\"Label1\"]{1, 2, 3}\n  curve id2[\"Label2\"]{4, 5, 6}, id3{7, 8, 9}\n  curve id4{ axis3: 30, axis1: 20, axis2: 10 }\n  ...\n```\n\n----------------------------------------\n\nTITLE: Changing Sequence Config via Directive\nDESCRIPTION: This code snippet demonstrates changing sequence diagram configurations using a directive. The `wrap` is set to `true`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n%%{init: { \"sequence\": { \"wrap\": true} } }%%\n```\n\n----------------------------------------\n\nTITLE: Creating and Destroying Actors - Mermaid\nDESCRIPTION: Demonstrates how to dynamically create and destroy participants or actors during the sequence using the `create` and `destroy` directives before a message. Only recipients can be created, and both senders and recipients can be destroyed.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->>Bob: Hello Bob, how are you ?\n    Bob->>Alice: Fine, thank you. And you?\n    create participant Carl\n    Alice->>Carl: Hi Carl!\n    create actor D as Donald\n    Carl->>D: Hi!\n    destroy Carl\n    Alice-xCarl: We are too many\n    destroy Bob\n    Bob->>Alice: I agree\n```\n\n----------------------------------------\n\nTITLE: Standard State Diagram (mermaid syntax)\nDESCRIPTION: Represents the same simple state diagram as above using the mermaid syntax without the 'example' suffix. It demonstrates creating states and transitions with a more straightforward syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Simple sample\n---\nstateDiagram-v2\n    [*] --> Still\n    Still --> [*]\n\n    Still --> Moving\n    Moving --> Still\n    Moving --> Crash\n    Crash --> [*]\n```\n\n----------------------------------------\n\nTITLE: Setting Subgraph Directions in Mermaid.js\nDESCRIPTION: Shows how to control subgraph directions within flowcharts by using the 'direction' statement, including nested directions. Highlights behavior when subgraph nodes connect externally, where direction inheritance applies.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_46\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  subgraph TOP\n    direction TB\n    subgraph B1\n        direction RL\n        i1 -->f1\n    end\n    subgraph B2\n        direction BT\n        i2 -->f2\n    end\n  end\n  A --> TOP --> B\n  B1 --> B2\n```\n\n----------------------------------------\n\nTITLE: Markdown Strings in Mindmap\nDESCRIPTION: This code snippet demonstrates the 'Markdown Strings' feature, which allows text formatting like bold and italics, along with automatic text wrapping.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\nmindmap\n    id1[\"`**Root** with\na second line\nUnicode works too: 🤓`\"]\n      id2[\"`The dog in **the** hog... a *very long text* that wraps to a new line`\"]\n      id3[Regular labels still works]\n```\n\n----------------------------------------\n\nTITLE: Mindmap Syntax Example\nDESCRIPTION: This snippet provides a simple example of mindmap syntax, showcasing the hierarchical structure using indentation to represent parent-child relationships.  It shows how the diagram structure is derived from a text outline.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nmindmap\n    Root\n        A\n            B\n            C\n```\n\n----------------------------------------\n\nTITLE: Cloning Forked Mermaid Repository using Git\nDESCRIPTION: Clones the user's forked Mermaid repository from GitHub to their local machine using the `git clone` command. This is the first step in obtaining the source code.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com/your-fork/mermaid\n```\n\n----------------------------------------\n\nTITLE: GitGraph with Commit Tags in Mermaid\nDESCRIPTION: Shows how to add tags to commits in a Git Graph, similar to release tags in Git, combining various attributes like custom IDs and types.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n   commit\n   commit id: \"Normal\" tag: \"v1.0.0\"\n   commit\n   commit id: \"Reverse\" type: REVERSE tag: \"RC_1\"\n   commit\n   commit id: \"Highlight\" type: HIGHLIGHT tag: \"8.8.4\"\n   commit\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters with Quotes\nDESCRIPTION: This snippet demonstrates how to use quotes to render text containing special characters within a node.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_89\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    id1[\"This is the (text) in the box\"]\n```\n\n----------------------------------------\n\nTITLE: Rendering Timeline Diagram with Neutral Theme in Mermaid\nDESCRIPTION: Defines a timeline diagram using Mermaid syntax with the 'neutral' theme and debug-level logging enabled. The timeline content is identical to the default theme example, illustrating social media platform milestones between 2002 and 2010. This snippet requires Mermaid.js for rendering with the specified configuration settings.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_8\n\nLANGUAGE: mermaid-example\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'neutral'\n---\n    timeline\n        title History of Social Media Platform\n          2002 : LinkedIn\n          2004 : Facebook : Google\n          2005 : YouTube\n          2006 : Twitter\n          2007 : Tumblr\n          2008 : Instagram\n          2010 : Pinterest\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Column Block Diagram in Mermaid\nDESCRIPTION: Illustrates how to organize blocks into multiple columns using the 'columns' directive. This example creates a diagram with three columns containing four blocks, where the fourth block appears in a second row.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nblock-beta\n  columns 3\n  a b c d\n```\n\n----------------------------------------\n\nTITLE: Customizing Mermaid.run with nodes array\nDESCRIPTION: This JavaScript code shows how to customize `mermaid.run` to render specific DOM elements.  It disables automatic rendering and calls `mermaid.run` with an array of node elements and node lists. Requires mermaid library to be imported.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nmermaid.initialize({ startOnLoad: false });\nawait mermaid.run({\n  nodes: [document.getElementById('someId'), document.getElementById('anotherId')],\n});\nawait mermaid.run({\n  nodes: document.querySelectorAll('.yetAnotherClass'),\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Main Branch Name in Mermaid gitGraph (mermaid)\nDESCRIPTION: This snippet customizes the default name of the main branch in a Mermaid gitGraph diagram using the 'mainBranchName' configuration directive. By setting 'mainBranchName: \"MetroLine1\"', the primary branch is renamed accordingly. The setup requires only a Mermaid interpreter that recognizes 'mainBranchName'. Inputs include commits and merges across branches. The output is a git branch diagram with the main branch labeled as specified. Renaming is often used to represent creative workflows, such as mapping version control to subway lines or thematic branch naming.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n  gitGraph:\n    showBranches: true\n    showCommitLabel: true\n    mainBranchName: 'MetroLine1'\n---\n      gitGraph\n        commit id:\"NewYork\"\n        commit id:\"Dallas\"\n        branch MetroLine2\n        commit id:\"LosAngeles\"\n        commit id:\"Chicago\"\n        commit id:\"Houston\"\n        branch MetroLine3\n        commit id:\"Phoenix\"\n        commit type: HIGHLIGHT id:\"Denver\"\n        commit id:\"Boston\"\n        checkout MetroLine1\n        commit id:\"Atlanta\"\n        merge MetroLine3\n        commit id:\"Miami\"\n        commit id:\"Washington\"\n        merge MetroLine2 tag:\"MY JUNCTION\"\n        commit id:\"Boston\"\n        commit id:\"Detroit\"\n        commit type:REVERSE id:\"SanFrancisco\"\n```\n\n----------------------------------------\n\nTITLE: Defining Style Classes in Mermaid Requirement Diagrams\nDESCRIPTION: Shows how to define reusable style classes using the 'classDef' keyword. This allows defining named sets of CSS properties (e.g., 'important', 'test') that can be applied to multiple nodes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/requirementDiagram.md#_snippet_5\n\nLANGUAGE: Mermaid\nCODE:\n```\nrequirementDiagram\n\nrequirement test_req {\n    id: 1\n    text: \"class styling example\"\n    risk: low\n    verifymethod: test\n}\n\nelement test_entity {\n    type: simulation\n}\n\nclassDef important fill:#f96,stroke:#333,stroke-width:4px\nclassDef test fill:#ffa,stroke:#000\n```\n\n----------------------------------------\n\nTITLE: Defining States with Descriptions Using 'state' Keyword\nDESCRIPTION: Shows how to define a state with a descriptive label using the 'state' keyword and aliasing. Useful for adding descriptive text to states for clarity.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    state \"This is a state description\" as s2\n```\n\n----------------------------------------\n\nTITLE: Defining States by ID\nDESCRIPTION: Demonstrates defining simple states solely with their identifiers inside a state diagram. These are basic states without descriptions or further properties.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    stateId\n```\n\n----------------------------------------\n\nTITLE: Modifying Commit Types in GitGraph - Mermaid\nDESCRIPTION: This snippet demonstrates the use of the 'type' attribute to alter the visual representation of commits, supporting NORMAL (default), REVERSE, and HIGHLIGHT types. Commits may also include custom IDs. The diagram visually distinguishes reversed and highlighted commits for emphasis or annotation, illustrating mixed attribute usage within a gitGraph.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n   commit id: \"Normal\"\n   commit\n   commit id: \"Reverse\" type: REVERSE\n   commit\n   commit id: \"Highlight\" type: HIGHLIGHT\n   commit\n```\n\n----------------------------------------\n\nTITLE: Defining a Group in Architecture Diagram\nDESCRIPTION: This snippet demonstrates the syntax for defining a group within an architecture diagram. It uses the `group` keyword followed by an identifier, an icon name enclosed in parentheses, and a title enclosed in brackets. Groups are used to organize related services. The optional `in` keyword allows nesting groups. The output is a visual representation of the specified group.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_2\n\nLANGUAGE: Mermaid\nCODE:\n```\ngroup public_api(cloud)[Public API]\n```\n\n----------------------------------------\n\nTITLE: Complete Styling Application Example in Mermaid State Diagrams - Mermaid\nDESCRIPTION: This full Mermaid snippet illustrates diagram construction with complex styling: multiple classDefs, accessible metadata, transitions, and diverse state styling (including double assignments). It uses both 'classDef' and 'class' statements, and is suitable for demonstration or documentation purposes. Inputs are states, classes, and metadata; outputs are accessible, multi-styled diagrams. Requires Mermaid interpreter that supports state diagrams with classDefs.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_24\n\nLANGUAGE: mermaid\nCODE:\n```\n   stateDiagram\n   direction TB\n\n   accTitle: This is the accessible title\n   accDescr: This is an accessible description\n\n   classDef notMoving fill:white\n   classDef movement font-style:italic\n   classDef badBadEvent fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n\n   [*]--> Still\n   Still --> [*]\n   Still --> Moving\n   Moving --> Still\n   Moving --> Crash\n   Crash --> [*]\n\n   class Still notMoving\n   class Moving, Crash movement\n   class Crash badBadEvent\n   class end badBadEvent\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icons in Architecture Diagrams\nDESCRIPTION: This snippet illustrates the utilization of custom icons within an architecture diagram using the format 'name:icon-name' in mermaid.  It uses logos from iconify.design.  This showcases how users can incorporate custom images into architecture diagrams.  The output will display the user-specified icons within the architecture, based on the icon pack and name provided. Requires iconify setup.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_13\n\nLANGUAGE: Mermaid\nCODE:\n```\narchitecture-beta\n    group api(logos:aws-lambda)[API]\n\n    service db(logos:aws-aurora)[Database] in api\n    service disk1(logos:aws-glacier)[Storage] in api\n    service disk2(logos:aws-s3)[Storage] in api\n    service server(logos:aws-ec2)[Server] in api\n\n    db:L -- R:server\n    disk1:T -- B:server\n    disk2:T -- B:db\n```\n\n----------------------------------------\n\nTITLE: Defining Method Classifiers\nDESCRIPTION: This snippet demonstrates the use of method classifiers such as abstract (`*`) and static (`$`) for method and field definition.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Creating Objects Using Creation Messages in ZenUML Using zenuml\nDESCRIPTION: Demonstrates the use of the 'new' keyword to depict object instantiation within the sequence diagram. Objects can be created with or without parameters, representing constructor calls or initialization.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_6\n\nLANGUAGE: zenuml\nCODE:\n```\nnew A1\nnew A2(with, parameters)\n```\n\n----------------------------------------\n\nTITLE: Nested Composite States\nDESCRIPTION: This snippet demonstrates multiple layers of nested composite states.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_9\n\nLANGUAGE: mermaid-example\nCODE:\n```\nstateDiagram-v2\n    [*] --> First\n\n    state First {\n        [*] --> Second\n\n        state Second {\n            [*] --> second\n            second --> Third\n\n            state Third {\n                [*] --> third\n                third --> [*]\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Simple Critical Region - Mermaid\nDESCRIPTION: Shows a basic `critical` region without any accompanying `option` blocks, representing a section that must execute as a unit.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_18\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    critical Establish a connection to the DB\n        Service-->DB: connect\n    end\n```\n\n----------------------------------------\n\nTITLE: Configuring XY Chart Theme Variables (YAML/Mermaid)\nDESCRIPTION: Explains how to customize the visual appearance of an XY chart using theme variables. Configuration is provided in YAML format within a `config` block, nested under `themeVariables` and `xyChart`, embedded directly in the Mermaid definition. This example changes the title color.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/xyChart.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\nconfig:\n  themeVariables:\n    xyChart:\n      titleColor: '#ff0000'\n---\n```\n\n----------------------------------------\n\nTITLE: Registering Layout Loaders in TypeScript\nDESCRIPTION: The function `registerLayoutLoaders` allows for custom layout definitions to be injected into mermaid. It accepts a list of `LayoutLoaderDefinition` objects.  This function is used to extend and customize the layout options available for diagrams.  It doesn't return a value.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/Mermaid.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nregisterLayoutLoaders: (`loaders`) => `void`\n```\n\n----------------------------------------\n\nTITLE: Customizing Commit Colors in GitGraph (Mermaid)\nDESCRIPTION: This Mermaid code snippet demonstrates customizing the commit label and background colors within a GitGraph diagram. It utilizes the `commitLabelColor` and `commitLabelBackground` theme variables to override the default values.  The `gitGraph` directive defines the diagram's structure.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_29\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid-example\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n    commitLabelColor: '#ff0000'\n    commitLabelBackground: '#00ff00'\n---\n       gitGraph\n       commit\n       branch develop\n       commit tag:\"v1.0.0\"\n       commit\n       checkout main\n       commit type: HIGHLIGHT\n       commit\n       merge develop\n       commit\n       branch featureA\n       commit\n\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Small Circle\nDESCRIPTION: This snippet uses the `sm-circ` shape to create a small circle node.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_37\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: sm-circ, label: \"Small start\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Name Aliases in ERD\nDESCRIPTION: This snippet shows how to add aliases to entities. The alias is specified within square brackets after the entity's name.  The example defines `p[Person]` and `a[\"Customer Account\"]`, showcasing aliasing for the \"Person\" and \"Customer Account\" entities, respectively. It's part of the fundamental ERD structure in Mermaid.js; no external dependencies are needed.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    p[Person] {\n        string firstName\n        string lastName\n    }\n    a[\"Customer Account\"] {\n        string email\n    }\n    p ||--o| a : has\n```\n\n----------------------------------------\n\nTITLE: Combined URL and Callback Examples in Mermaid\nDESCRIPTION: Shows multiple classes with different interactive features (callbacks and links) in a single diagram. Demonstrates how to mix both types of interactivity in one class diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_27\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class Class01\n    class Class02\n    callback Class01 \"callbackFunction\" \"Callback tooltip\"\n    link Class02 \"https://www.github.com\" \"This is a link\"\n    class Class03\n    class Class04\n    click Class03 call callbackFunction() \"Callback tooltip\"\n    click Class04 href \"https://www.github.com\" \"This is a link\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Tag Label Colors in a Mermaid Git Diagram\nDESCRIPTION: Shows how to customize the appearance of tag labels by setting the text color ('tagLabelColor'), background color ('tagLabelBackground'), and border color ('tagLabelBorder') using theme variables.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_32\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n    tagLabelColor: '#ff0000'\n    tagLabelBackground: '#00ff00'\n    tagLabelBorder: '#0000ff'\n---\n       gitGraph\n       commit\n       branch develop\n       commit tag:\"v1.0.0\"\n       commit\n       checkout main\n       commit type: HIGHLIGHT\n       commit\n       merge develop\n       commit\n       branch featureA\n       commit\n```\n\n----------------------------------------\n\nTITLE: Changing Flowchart Config via Directive\nDESCRIPTION: This code snippet demonstrates changing flowchart configurations using a directive. The `htmlLabels` is set to `true` and `curve` is set to `linear`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n%%{init: { \"flowchart\": { \"htmlLabels\": true, \"curve\": \"linear\" } } }%%\n```\n\n----------------------------------------\n\nTITLE: Adding Accessible Title and Description HTML\nDESCRIPTION: This HTML snippet demonstrates the generated HTML structure when accessible titles and descriptions are provided for a diagram.  It illustrates the use of `aria-labelledby` and `aria-describedby` attributes in the `<svg>` tag and shows how title and description are included.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<svg\n  aria-labelledby=\"chart-title-mermaid-1668725057758\"\n  aria-describedby=\"chart-desc-mermaid-1668725057758\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"100%\"\n  id=\"mermaid-1668725057758\"\n>\n  <title id=\"chart-title-mermaid-1668725057758\">This is the accessible title</title>\n  <desc id=\"chart-desc-mermaid-1668725057758\">This is an accessible description</desc>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Flowchart Diagrams with ELK Layout in Mermaid Syntax\nDESCRIPTION: This snippet demonstrates how to define a basic flowchart diagram in Mermaid syntax while specifying the ELK layout engine. The diagram shows node connections, and using the 'flowchart-elk' prefix or YAML configuration declares ELK as the layout engine for rendering diagrams. It shows usage of different ELK layout styles by specifying layout keys like 'elk' and 'elk.stress'.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid-layout-elk/README.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart-elk TD\n  A --> B\n  A --> C\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\n---\nconfig:\n  layout: elk\n---\n\nflowchart TD\n  A --> B\n  A --> C\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\n---\nconfig:\n  layout: elk.stress\n---\n\nflowchart TD\n  A --> B\n  A --> C\n```\n\n----------------------------------------\n\nTITLE: Styling Multiple Links - Mermaid\nDESCRIPTION: This snippet demonstrates how to style multiple links in a Mermaid flowchart in a single statement using the `linkStyle` directive.  Separate the link numbers with commas.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_104\n\nLANGUAGE: Mermaid\nCODE:\n```\nlinkStyle 1,2,7 color:blue;\n```\n\n----------------------------------------\n\nTITLE: Customizing Radar Diagram Appearance - Mermaid Example\nDESCRIPTION: Demonstrates advanced Mermaid-example usage with configuration and theming for radar diagrams. Modifies radar-specific settings like axisScaleFactor and curveTension, sets color scale variables, and adjusts curve opacity. Axes and curves are defined for five dimensions and three curves. Requires Mermaid with support for theme configuration and radar-beta. Outputs a highly customized radar diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_5\n\nLANGUAGE: mermaid-example\nCODE:\n```\n---\nconfig:\n  radar:\n    axisScaleFactor: 0.25\n    curveTension: 0.1\n  theme: base\n  themeVariables:\n    cScale0: \"#FF0000\"\n    cScale1: \"#00FF00\"\n    cScale2: \"#0000FF\"\n    radar:\n      curveOpacity: 0\n---\nradar-beta\n  axis A, B, C, D, E\n  curve c1{1,2,3,4,5}\n  curve c2{5,4,3,2,1}\n  curve c3{3,3,3,3,3}\n```\n\n----------------------------------------\n\nTITLE: Building Mermaid (Docker)\nDESCRIPTION: This command builds the Mermaid library and documentation site within the Docker environment. The `./run` script is a wrapper for executing commands inside the Docker container.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n./run build\n```\n\n----------------------------------------\n\nTITLE: Defining Parallel Actions in Mermaid Sequence Diagrams\nDESCRIPTION: Demonstrates how to use the `par`, `and`, and `end` keywords in Mermaid to represent actions occurring concurrently between different participants in a sequence diagram. This example shows Alice sending messages to Bob and John simultaneously.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_15\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    par Alice to Bob\n        Alice->>Bob: Hello guys!\n    and Alice to John\n        Alice->>John: Hello guys!\n    end\n    Bob-->>Alice: Hi Alice!\n    John-->>Alice: Hi Alice!\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Multiple Custom Shapes in Mermaid Flowchart (mermaid-example)\nDESCRIPTION: This Mermaid-example snippet creates a right-to-left flowchart featuring nodes with new custom shapes: manual-file, manual-input, docs, procs, and paper-tape. Intended for demonstration purposes, it uses Mermaid's extended node definition syntax with shape and label properties. It requires Mermaid version supporting custom shape syntax and assumes correct rendering configuration for custom node types. Inputs are node assignments with shape and label parameters; output is a diagram with visually distinct nodes for each shape.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_0\n\nLANGUAGE: mermaid-example\nCODE:\n```\nflowchart RL\n    A@{ shape: manual-file, label: \"File Handling\"}\n    B@{ shape: manual-input, label: \"User Input\"}\n    C@{ shape: docs, label: \"Multiple Documents\"}\n    D@{ shape: procs, label: \"Process Automation\"}\n    E@{ shape: paper-tape, label: \"Paper Records\"}\n```\n\n----------------------------------------\n\nTITLE: Defining User Journey Diagram - Mermaid Example\nDESCRIPTION: Demonstrates the basic syntax for creating a user journey diagram in Mermaid using the `mermaid-example` block type. This example defines a title, sections, and tasks, including task names, scores (a value indicating feeling), and participating actors. It illustrates the structure for a simple 'My working day' journey.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/userJourney.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\njourney\n    title My working day\n    section Go to work\n      Make tea: 5: Me\n      Go upstairs: 3: Me\n      Do work: 1: Me, Cat\n    section Go home\n      Go downstairs: 5: Me\n      Sit down: 5: Me\n```\n\n----------------------------------------\n\nTITLE: Transitions between Composite States\nDESCRIPTION: This snippet defines transitions between composite states.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_10\n\nLANGUAGE: mermaid-example\nCODE:\n```\nstateDiagram-v2\n    [*] --> First\n    First --> Second\n    First --> Third\n\n    state First {\n        [*] --> fir\n        fir --> [*]\n    }\n    state Second {\n        [*] --> sec\n        sec --> [*]\n    }\n    state Third {\n        [*] --> thi\n        thi --> [*]\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Critical Regions - Mermaid\nDESCRIPTION: Illustrates how to define a `critical` region for actions that must be performed automatically, potentially followed by `option` blocks to handle specific circumstances or outcomes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_17\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    critical Establish a connection to the DB\n        Service-->DB: connect\n    option Network timeout\n        Service-->Service: Log error\n    option Credentials rejected\n        Service-->Service: Log different error\n    end\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Callbacks to Classes in Mermaid\nDESCRIPTION: Demonstrates how to add interactive JavaScript callbacks to classes using 'callback' and 'click call' syntax. This allows triggering JavaScript functions when clicking on diagram elements.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_26\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclass Shape\ncallback Shape \"callbackFunction\" \"This is a tooltip for a callback\"\nclass Shape2\nclick Shape2 call callbackFunction() \"This is a tooltip for a callback\"\n```\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const callbackFunction = function () {\n    alert('A callback was triggered');\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using opt Fragment for Optional Behavior in ZenUML Using zenuml\nDESCRIPTION: Demonstrates an 'opt' fragment that encapsulates optional messages within a sequence diagram. Actions inside the opt block represent behavior executed only under certain conditions, enhancing clarity of optional flows.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_13\n\nLANGUAGE: zenuml\nCODE:\n```\nAlice->Bob: Hello Bob, how are you?\nBob->Alice: Not so good :(\nopt {\n  Bob->Alice: Thanks for asking\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Rhombus Node in Mermaid Flowchart\nDESCRIPTION: This snippet demonstrates how to create a rhombus-shaped node (diamond) in a Mermaid flowchart. The text is enclosed in curly braces `{}`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_12\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    id1{This is the text in the box}\n```\n\n----------------------------------------\n\nTITLE: Customizing Mermaid Timeline Color Scheme Using Theme Variables\nDESCRIPTION: Shows how to override default Mermaid theme colors for timeline diagrams by defining custom theme variables such as 'cScale0', 'cScale1', 'cScale2' for background colors and 'cScaleLabel0', 'cScaleLabel2' for foreground label colors. The snippet uses a YAML config frontmatter to specify 'themeVariables' within Mermaid, enabling up to 12 unique section colors. If sections exceed 12, colors will repeat. This customization requires Mermaid configuration supporting themeVariable overrides. The example uses red, green, and blue for timeline sections to illustrate visual changes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n    cScale0: '#ff0000'\n    cScaleLabel0: '#ffffff'\n    cScale1: '#00ff00'\n    cScale2: '#0000ff'\n    cScaleLabel2: '#ffffff'\n---\n       timeline\n        title History of Social Media Platform\n          2002 : LinkedIn\n          2004 : Facebook : Google\n          2005 : YouTube\n          2006 : Twitter\n          2007 : Tumblr\n          2008 : Instagram\n          2010 : Pinterest\n```\n\n----------------------------------------\n\nTITLE: Multi Directional Arrows\nDESCRIPTION: This snippet demonstrates the use of multidirectional arrows, connecting nodes with different types of arrowheads at both ends.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_86\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    A o--o B\n    B <--> C\n    C x--x D\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Flowchart with Multi-line Description\nDESCRIPTION: This HTML snippet shows the generated HTML for the Flowchart defined in previous snippet after the mermaid.js library processes it. The resulting HTML includes the title and description.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<svg\n  aria-labelledby=\"chart-title-mermaid_382ee221\"\n  aria-describedby=\"chart-desc-mermaid_382ee221\"\n  aria-roledescription=\"flowchart-v2\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"100%\"\n  id=\"mermaid_382ee221\"\n>\n  <title id=\"chart-title-mermaid_382ee221\">Big decisions</title>\n  <desc id=\"chart-desc-mermaid_382ee221\">\n    The official Bob's Burgers corporate processes that are used for making very, very big\n    decisions. This is actually a very simple flow: identify the big decision and then make the big\n    decision.\n  </desc>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Two-way Relations\nDESCRIPTION: This snippet describes and shows syntax for two-way relations which represent an N:M association between classes. Illustrates two-way relationships.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    Animal <|--|> Zebra\n```\n\n----------------------------------------\n\nTITLE: Loading and Registering ELK Layout in Mermaid via CDN in HTML Module Script\nDESCRIPTION: This HTML example uses ES module imports inside a `<script type=\"module\">` tag to load Mermaid and the ELK layout package directly from CDN URLs. It subsequently registers ELK layouts with Mermaid. This approach enables usage of ELK layouts in browsers without a bundler or build step.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid-layout-elk/README.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"module\">\n  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';\n  import elkLayouts from 'https://cdn.jsdelivr.net/npm/@mermaid-js/layout-elk@0/dist/mermaid-layout-elk.esm.min.mjs';\n\n  mermaid.registerLayoutLoaders(elkLayouts);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Mermaid Diagrams in TypeScript\nDESCRIPTION: The `render` function is used to render a Mermaid diagram. It takes an `id`, the mermaid diagram text, and an optional `svgContainingElement` as input. The function returns a Promise that resolves with a `RenderResult` object. This method is designed for direct rendering of diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/Mermaid.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nrender: (`id`, `text`, `svgContainingElement`?) => `Promise`<[`RenderResult`](RenderResult.md)>\n```\n\n----------------------------------------\n\nTITLE: Setting Security Level in Mermaid\nDESCRIPTION: JavaScript code showing how to initialize Mermaid with a specific security level to enable click events and tags in nodes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid.initialize({\n  securityLevel: 'loose',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Braces\nDESCRIPTION: This snippet demonstrates using the shape keyword to create a comment with braces on both sides.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_43\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: braces, label: \"Comment\" }\n```\n\n----------------------------------------\n\nTITLE: Escaping Characters in Mermaid Sequence Diagram Messages Using Entity Codes\nDESCRIPTION: This snippet explains how to embed special characters in Mermaid sequence diagram message texts by using entity codes like `#9829;` for a heart symbol or `#59;` for a semicolon. Both numeric (base 10) codes and HTML character names are supported. This allows including characters that would otherwise be parsed as Mermaid syntax, enabling richer and more precise message contents. Input is message text containing escape sequences, output is properly rendered characters in diagram messages.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_22\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    A->>B: I #9829; you!\n    B->>A: I #9829; you #infin; times more!\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Orientation in XY Chart\nDESCRIPTION: Example showing how to change the chart orientation to horizontal instead of the default vertical orientation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/xyChart.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nxychart-beta horizontal\n...\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Block Diagram in Mermaid\nDESCRIPTION: Shows the most basic form of a block diagram with three blocks labeled 'a', 'b', and 'c' arranged horizontally. This example demonstrates the minimal syntax required to create a block diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nblock-beta\n  a b c\n```\n\n----------------------------------------\n\nTITLE: Generating a Mermaid Mindmap Diagram\nDESCRIPTION: This Mermaid diagram illustrates the structure of contributing to the Mermaid.js project, including development, testing, and management tasks within a mindmap. It uses the Mermaid syntax to visualize different areas of contributor activities.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/intro.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nmindmap\n  root)Contributing(\n    Development\n      Solving issues\n      Adding new diagrams\n      Handling pull requests\n      Updating tooling\n    Testing\n      Verification of fixed issues\n      Regression testing in connection with releases\n      Testing pull requests\n    Management\n      Coordinating the work\n      Classification and monitoring of incoming issues\n```\n\n----------------------------------------\n\nTITLE: Showing Parallel Actions (par) - Mermaid\nDESCRIPTION: Demonstrates how to represent actions happening concurrently using the `par` block. Different parallel branches are separated by the `and` keyword.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_15\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    par Alice to Bob\n        Alice->>Bob: Hello guys!\n    and Alice to John\n        Alice->>John: Hello guys!\n    end\n    Bob-->>Alice: Hi Alice!\n    John-->>Alice: Hi Alice!\n```\n\n----------------------------------------\n\nTITLE: Using Actors in Sequence Diagram Mermaid\nDESCRIPTION: Illustrates how to define actors in a sequence diagram to use the actor symbol. Demonstrates how to use the actor keyword to specify actors. No dependencies. Expected output: A sequence diagram using actor symbols for Alice and Bob.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    actor Alice\n    actor Bob\n    Alice->>Bob: Hi Bob\n    Bob->>Alice: Hi Alice\n```\n\n----------------------------------------\n\nTITLE: Creating a C4 System Context Diagram in Mermaid\nDESCRIPTION: This example demonstrates how to create a C4 System Context diagram for an Internet Banking System. It shows the relationships between customers, banking systems, and external systems with custom styling applied to elements and relationships.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/c4.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nC4Context\n  title System Context diagram for Internet Banking System\n  Enterprise_Boundary(b0, \"BankBoundary0\") {\n    Person(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\n    Person(customerB, \"Banking Customer B\")\n    Person_Ext(customerC, \"Banking Customer C\", \"desc\")\n\n    Person(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\n\n    System(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\n\n    Enterprise_Boundary(b1, \"BankBoundary\") {\n\n      SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n      System_Boundary(b2, \"BankBoundary2\") {\n        System(SystemA, \"Banking System A\")\n        System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts. next line.\")\n      }\n\n      System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\n      SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\n\n      Boundary(b3, \"BankBoundary3\", \"boundary\") {\n        SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank.\")\n        SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\n      }\n    }\n  }\n\n  BiRel(customerA, SystemAA, \"Uses\")\n  BiRel(SystemAA, SystemE, \"Uses\")\n  Rel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\n  Rel(SystemC, customerA, \"Sends e-mails to\")\n\n  UpdateElementStyle(customerA, $fontColor=\"red\", $bgColor=\"grey\", $borderColor=\"red\")\n  UpdateRelStyle(customerA, SystemAA, $textColor=\"blue\", $lineColor=\"blue\", $offsetX=\"5\")\n  UpdateRelStyle(SystemAA, SystemE, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-10\")\n  UpdateRelStyle(SystemAA, SystemC, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-40\", $offsetX=\"-50\")\n  UpdateRelStyle(SystemC, customerA, $textColor=\"red\", $lineColor=\"red\", $offsetX=\"-50\", $offsetY=\"20\")\n\n  UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\")\n```\n\n----------------------------------------\n\nTITLE: System Context Diagram Example - C4Context\nDESCRIPTION: This Mermaid code defines a System Context diagram for an Internet Banking System using the C4Context notation. It includes elements like Person, System, and System_Ext, and defines their relationships. The example also demonstrates styling the elements and relationships.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/c4.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nC4Context\n      title System Context diagram for Internet Banking System\n      Enterprise_Boundary(b0, \"BankBoundary0\") {\n        Person(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\n        Person(customerB, \"Banking Customer B\")\n        Person_Ext(customerC, \"Banking Customer C\", \"desc\")\n\n        Person(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\n\n        System(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\n\n        Enterprise_Boundary(b1, \"BankBoundary\") {\n\n          SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n          System_Boundary(b2, \"BankBoundary2\") {\n            System(SystemA, \"Banking System A\")\n            System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts. next line.\")\n          }\n\n          System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\n          SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\n\n          Boundary(b3, \"BankBoundary3\", \"boundary\") {\n            SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank.\")\n            SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\n          }\n        }\n      }\n\n      BiRel(customerA, SystemAA, \"Uses\")\n      BiRel(SystemAA, SystemE, \"Uses\")\n      Rel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\n      Rel(SystemC, customerA, \"Sends e-mails to\")\n\n      UpdateElementStyle(customerA, $fontColor=\"red\", $bgColor=\"grey\", $borderColor=\"red\")\n      UpdateRelStyle(customerA, SystemAA, $textColor=\"blue\", $lineColor=\"blue\", $offsetX=\"5\")\n      UpdateRelStyle(SystemAA, SystemE, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-10\")\n      UpdateRelStyle(SystemAA, SystemC, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-40\", $offsetX=\"-50\")\n      UpdateRelStyle(SystemC, customerA, $textColor=\"red\", $lineColor=\"red\", $offsetX=\"-50\", $offsetY=\"20\")\n\n      UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\")\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nC4Context\n    title Container diagram for Internet Banking System\n\n    System_Ext(email_system, \"E-Mail System\", \"The internal Microsoft Exchange system\", $tags=\"v1.0\")\n    Person(customer, Customer, \"A customer of the bank, with personal bank accounts\", $tags=\"v1.0\")\n\n    Container_Boundary(c1, \"Internet Banking\") {\n        Container(spa, \"Single-Page App\", \"JavaScript, Angular\", \"Provides all the Internet banking functionality to customers via their web browser\")\n        Container_Ext(mobile_app, \"Mobile App\", \"C#, Xamarin\", \"Provides a limited subset of the Internet banking functionality to customers via their mobile device\")\n        Container(web_app, \"Web Application\", \"Java, Spring MVC\", \"Delivers the static content and the Internet banking SPA\")\n        ContainerDb(database, \"Database\", \"SQL Database\", \"Stores user registration information, hashed auth credentials, access logs, etc.\")\n        ContainerDb_Ext(backend_api, \"API Application\", \"Java, Docker Container\", \"Provides Internet banking functionality via API\")\n\n    }\n\n    System_Ext(banking_system, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n    Rel(customer, web_app, \"Uses\", \"HTTPS\")\n    UpdateRelStyle(customer, web_app, $offsetY=\"60\", $offsetX=\"90\")\n    Rel(customer, spa, \"Uses\", \"HTTPS\")\n    UpdateRelStyle(customer, spa, $offsetY=\"-40\")\n    Rel(customer, mobile_app, \"Uses\")\n    UpdateRelStyle(customer, mobile_app, $offsetY=\"-30\")\n\n    Rel(web_app, spa, \"Delivers\")\n    UpdateRelStyle(web_app, spa, $offsetX=\"130\")\n    Rel(spa, backend_api, \"Uses\", \"async, JSON/HTTPS\")\n    Rel(mobile_app, backend_api, \"Uses\", \"async, JSON/HTTPS\")\n    Rel_Back(database, backend_api, \"Reads from and writes to\", \"sync, JDBC\")\n\n    Rel(email_system, customer, \"Sends e-mails to\")\n    UpdateRelStyle(email_system, customer, $offsetX=\"-45\")\n    Rel(backend_api, email_system, \"Sends e-mails using\", \"sync, SMTP\")\n    UpdateRelStyle(backend_api, email_system, $offsetY=\"-60\")\n    Rel(backend_api, banking_system, \"Uses\", \"sync/async, XML/HTTPS\")\n    UpdateRelStyle(backend_api, banking_system, $offsetY=\"-50\", $offsetX=\"-140\")\n```\n\n----------------------------------------\n\nTITLE: Using Comments in Mermaid Class Diagrams - Mermaid\nDESCRIPTION: Exhibits the use of comments (lines beginning with %% ) within Mermaid class diagrams. Such lines are ignored by the renderer, allowing annotations and explanations inside code blocks. Only Mermaid is needed; comments precede or accompany class definitions, with no effect on diagram rendering.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_20\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n%% This whole line is a comment classDiagram class Shape <<interface>>\nclass Shape{\n    <<interface>>\n    noOfVertices\n    draw()\n}\n\n```\n\n----------------------------------------\n\nTITLE: State Diagram with ::: Operator Styling\nDESCRIPTION: A complete Mermaid state diagram example using the ::: operator to apply styles directly to states within the diagram statements.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_22\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram\n   direction TB\n\n   accTitle: This is the accessible title\n   accDescr: This is an accessible description\n\n   classDef notMoving fill:white\n   classDef movement font-style:italic;\n   classDef badBadEvent fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n\n   [*] --> Still:::notMoving\n   Still --> [*]\n   Still --> Moving:::movement\n   Moving --> Still\n   Moving --> Crash:::movement\n   Crash:::badBadEvent --> [*]\n```\n\n----------------------------------------\n\nTITLE: Complete State Diagram with Multiple Styles\nDESCRIPTION: A complete Mermaid state diagram example showing classDef definitions and class statements for applying different styles to states like Still, Moving, and Crash.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_20\n\nLANGUAGE: mermaid\nCODE:\n```\n   stateDiagram\n   direction TB\n\n   accTitle: This is the accessible title\n   accDescr: This is an accessible description\n\n   classDef notMoving fill:white\n   classDef movement font-style:italic\n   classDef badBadEvent fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n\n   [*]--> Still\n   Still --> [*]\n   Still --> Moving\n   Moving --> Still\n   Moving --> Crash\n   Crash --> [*]\n\n   class Still notMoving\n   class Moving, Crash movement\n   class Crash badBadEvent\n   class end badBadEvent\n```\n\n----------------------------------------\n\nTITLE: Shorthand Class Attachment - Mermaid\nDESCRIPTION: This snippet demonstrates the shorthand method for attaching a class to a node in a Mermaid flowchart using the `:::` operator.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_111\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    A:::someclass --> B\n    classDef someclass fill:#f96\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships with Labels\nDESCRIPTION: This snippet adds labels to describe the relationships between classes. It describes different relations and their nature using labels, clarifying the purpose of each relationship.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclassA <|-- classB : implements\nclassC *-- classD : composition\nclassE o-- classF : aggregation\n```\n\n----------------------------------------\n\nTITLE: Line Breaks in Notes and Messages in Mermaid\nDESCRIPTION: Demonstrates how to add line breaks within notes and messages using <br/>. This improves readability of long notes/messages. No dependencies. Expected output: A sequence diagram with line breaks within Alice's message and the note.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->John: Hello John,<br/>how are you?\n    Note over Alice,John: A typical interaction<br/>But now in two lines\n```\n\n----------------------------------------\n\nTITLE: Transitions Between Composite States\nDESCRIPTION: Shows how to define transitions between different composite states, linking their internal states or entry points, with the caveat that internal states cannot transition directly across different composites.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> First\n    First --> Second\n    First --> Third\n\n    state First {\n        [*] --> fir\n        fir --> [*]\n    }\n    state Second {\n        [*] --> sec\n        sec --> [*]\n    }\n    state Third {\n        [*] --> thi\n        thi --> [*]\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining a Nested Group in Mermaid Architecture Diagrams\nDESCRIPTION: Shows how to nest groups within other groups using the `in` keyword in Mermaid architecture diagrams. This example defines a `private_api` group (cloud icon, 'Private API' label) located inside the previously defined `public_api` group.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngroup private_api(cloud)[Private API] in public_api\n```\n\n----------------------------------------\n\nTITLE: Transitions: with Text Description\nDESCRIPTION: This snippet adds text to a transition to describe it.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_6\n\nLANGUAGE: mermaid-example\nCODE:\n```\nstateDiagram-v2\n    s1 --> s2: A transition\n```\n\n----------------------------------------\n\nTITLE: Applying the 'base' Theme to a Git Graph\nDESCRIPTION: Illustrates applying the 'base' theme to a complex Mermaid Git Graph using a configuration block. The `theme: 'base'` directive sets the visual style. The example also sets `logLevel: 'debug'`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_21\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n---\n      gitGraph\n        commit\n        branch hotfix\n        checkout hotfix\n        commit\n        branch develop\n        checkout develop\n        commit id:\"ash\" tag:\"abc\"\n        branch featureB\n        checkout featureB\n        commit type:HIGHLIGHT\n        checkout main\n        checkout hotfix\n        commit type:NORMAL\n        checkout develop\n        commit type:REVERSE\n        checkout featureB\n        commit\n        checkout main\n        merge hotfix\n        checkout featureB\n        commit\n        checkout develop\n        branch featureA\n        commit\n        checkout develop\n        merge hotfix\n        checkout featureA\n        commit\n        checkout featureB\n        commit\n        checkout develop\n        merge featureA\n        branch release\n        checkout release\n        commit\n        checkout main\n        commit\n        checkout release\n        merge main\n        checkout develop\n        merge release\n```\n\n----------------------------------------\n\nTITLE: Using Junctions in Mermaid Architecture Diagrams\nDESCRIPTION: Illustrates the use of `junction` nodes to act as connection points or splitters for multiple edges in a Mermaid architecture diagram. This example defines two junctions (`junctionCenter`, `junctionRight`) and connects various services (disks, gateways) through them, allowing for more complex routing than direct service-to-service edges.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\narchitecture-beta\n    service left_disk(disk)[Disk]\n    service top_disk(disk)[Disk]\n    service bottom_disk(disk)[Disk]\n    service top_gateway(internet)[Gateway]\n    service bottom_gateway(internet)[Gateway]\n    junction junctionCenter\n    junction junctionRight\n\n    left_disk:R -- L:junctionCenter\n    top_disk:B -- T:junctionCenter\n    bottom_disk:T -- B:junctionCenter\n    junctionCenter:R -- L:junctionRight\n    top_gateway:B -- T:junctionRight\n    bottom_gateway:T -- B:junctionRight\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy MathML Rendering Mode with KaTeX Stylesheet in HTML\nDESCRIPTION: Describes an HTML example demonstrating how to enable Mermaid's legacy MathML fallback mode by setting the configuration flag `legacyMathML` to true. This is useful for unsupported browsers lacking full MathML support. The snippet imports Mermaid as an ES module and initializes it with legacyMathML enabled. It also includes a link to KaTeX's CSS stylesheet, required to manually provide styling since Mermaid doesn't bundle it. Inputs involve loading Mermaid and KaTeX stylesheets in a compliant HTML5 environment; outputs are Mermaid diagrams with CSS-rendered math fallback.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/math.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<!-- KaTeX requires the use of the HTML5 doctype. Without it, KaTeX may not render properly -->\n<html lang=\"en\">\n  <head>\n    <!-- Please ensure the stylesheet's version matches with the KaTeX version in your package-lock -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/npm/katex@{version_number}/dist/katex.min.css\"\n      integrity=\"sha384-{hash}\"\n      crossorigin=\"anonymous\"\n    />\n  </head>\n\n  <body>\n    <script type=\"module\">\n      import mermaid from './mermaid.esm.mjs';\n      mermaid.initialize({\n        legacyMathML: true,\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Mermaid Timeline Diagram\nDESCRIPTION: Demonstrates the fundamental syntax for a Mermaid timeline diagram, including the `timeline` keyword, adding a `title`, and defining time periods with single or multiple events using the colon separator.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/timeline.md#_snippet_0\n\nLANGUAGE: mermaid-example\nCODE:\n```\ntimeline\n    title History of Social Media Platform\n    2002 : LinkedIn\n    2004 : Facebook\n         : Google\n    2005 : YouTube\n    2006 : Twitter\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ntimeline\n    title History of Social Media Platform\n    2002 : LinkedIn\n    2004 : Facebook\n         : Google\n    2005 : YouTube\n    2006 : Twitter\n```\n\n----------------------------------------\n\nTITLE: Escaping Double Quotes in Node Labels\nDESCRIPTION: This code snippet shows how to escape double quotes when defining a node label within a Sankey diagram in Mermaid. It uses `sankey-beta` for diagram definition. The correct escaping of the double quotes is essential in preventing parsing errors and correctly displaying node labels containing double quotes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_9\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid\nsankey-beta\n\nPumped heat,\"Heating and cooling, \"\"homes\"\"\",193.026\nPumped heat,\"Heating and cooling, \"\"commercial\"\"\",70.672\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Axis Output Date Format in Mermaid Gantt Charts\nDESCRIPTION: This code snippet illustrates how to customize the date format displayed on the Gantt chart axis using the `axisFormat` keyword. This allows you to control how dates are represented in the rendered chart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\naxisFormat %Y-%m-%d\n```\n\n----------------------------------------\n\nTITLE: Example State Diagram (mermaid-example syntax)\nDESCRIPTION: Illustrates a simple state diagram with states 'Still', 'Moving', and 'Crash', including transitions between them. Uses the mermaid-example syntax which includes a front matter section for title and the stateDiagram-v2 directive.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Simple sample\n---\nstateDiagram-v2\n    [*] --> Still\n    Still --> [*]\n\n    Still --> Moving\n    Moving --> Still\n    Moving --> Crash\n    Crash --> [*]\n```\n\n----------------------------------------\n\nTITLE: Setting Site Configuration in Mermaid (TypeScript)\nDESCRIPTION: The `setSiteConfig` function sets the site-level configuration within the Mermaid library. It takes a `MermaidConfig` object as input, which serves as the new site configuration. The function updates the `siteConfig` with the provided values.  This configuration is protected for repeated usage, and calling reset() resets the currentConfig to the siteConfig. Calling reset(configApi.defaultConfig) resets both siteConfig and currentConfig to the defaultConfig. This is crucial for managing and applying specific site-related customizations.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/config/functions/setSiteConfig.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Defining a Flowchart in Mermaid Syntax\nDESCRIPTION: This snippet demonstrates the basic syntax for defining a simple flowchart using the Mermaid language. It shows nodes with different shapes (rectangle, cylinder, decision) and directional arrows between them, illustrating the flow of a diagram editing process.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/getting-started.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\ngraph TD\n    A[Enter Chart Definition] --> B(Preview)\n    B --> C{decide}\n    C --> D[Keep]\n    C --> E[Edit Definition]\n    E --> B\n    D --> F[Save Image and Code]\n    F --> B\n```\n\n----------------------------------------\n\nTITLE: Defining Async Messages in ZenUML\nDESCRIPTION: This snippet illustrates the syntax for defining asynchronous messages in ZenUML. Async messages are indicated with the `->` notation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nzenuml\n    title Async message\n    Alice->Bob: How are you?\n```\n\n----------------------------------------\n\nTITLE: SVG with aria-roledescription in Mermaid\nDESCRIPTION: This HTML snippet demonstrates the use of `aria-roledescription` attribute within an SVG element generated by Mermaid. The `aria-roledescription` is automatically set to the diagram type key, aiding accessibility by providing a description of the element's role for assistive technologies.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<svg\n  aria-roledescription=\"stateDiagram\"\n  class=\"statediagram\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"100%\"\n  id=\"mermaid-1668720491568\"\n></svg>\n```\n\n----------------------------------------\n\nTITLE: Class Diagram Example in Mermaid\nDESCRIPTION: Sample class diagram illustrating class hierarchy and relationships, including inheritance, interfaces, and object presence. Useful for visualizing object-oriented design structure.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\nclassDiagram\nClass01 <|-- AveryLongClass : Cool\n<<Interface>> Class01\nClass09 --> C2 : Where am I?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nclass Class10 {\n  <<service>>\n  int id\n  size()\n}\n```\n\nLANGUAGE: Markdown\nCODE:\n```\nclassDiagram\nClass01 <|-- AveryLongClass : Cool\n<<Interface>> Class01\nClass09 --> C2 : Where am I?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nclass Class10 {\n  <<service>>\n  int id\n  size()\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Markdown Text in Mermaid Node\nDESCRIPTION: This snippet demonstrates how to format text within a Mermaid node using Markdown syntax. The Markdown text must be enclosed in backticks `` ` `` within double quotes `\"\"`.  The `htmlLabels` config is set to `false` to render Markdown.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_3\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    markdown[\"`This **is** _Markdown_`\"]\n    newLines[\"`Line1\n    Line 2\n    Line 3`\"]\n    markdown --> newLines\n```\n\n----------------------------------------\n\nTITLE: Setting Default Classes in ERD\nDESCRIPTION: This code shows how to define a default class using `classDef default`. The default class applies to all nodes that don't have a specific class assigned to them. The example provides a basic fill and stroke-width for the `default` class. Note: custom styles take precedence. Requires Mermaid.js.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    CAR {\n        string registrationNumber\n        string make\n        string model\n    }\n    PERSON {\n        string firstName\n        string lastName\n        int age\n    }\n    PERSON:::foo ||--|| CAR : owns\n    PERSON o{--|| HOUSE:::bar : has\n\n    classDef default fill:#f9f,stroke-width:4px\n    classDef foo stroke:#f00\n    classDef bar stroke:#0f0\n    classDef foobar stroke:#00f\n```\n\n----------------------------------------\n\nTITLE: Changing FontFamily in Mermaid Graph\nDESCRIPTION: This example applies the 'Trebuchet MS, Verdana, Arial, Sans-Serif' font family to a Mermaid graph using a directive.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_8\n\nLANGUAGE: Mermaid\nCODE:\n```\n%%{init: { \"fontFamily\": \"Trebuchet MS, Verdana, Arial, Sans-Serif\" } }%%\ngraph TD\nA(Forest) --> B[/Another/]\nA --> C[End]\n  subgraph section\n  B\n  C\n  end\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\n%%{init: { \"fontFamily\": \"Trebuchet MS, Verdana, Arial, Sans-Serif\" } }%%\ngraph TD\nA(Forest) --> B[/Another/]\nA --> C[End]\n  subgraph section\n  B\n  C\n  end\n```\n\n----------------------------------------\n\nTITLE: Chaining Links and Multiple Node Links\nDESCRIPTION: This snippet demonstrates chaining multiple links in the same line and linking multiple nodes in the same line. Uses `A -- text --> B -- text2 --> C` and `a --> b & c--> d` syntaxes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_30\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n   A -- text --> B -- text2 --> C\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n   a --> b & c--> d\n```\n\n----------------------------------------\n\nTITLE: Customizing Branch Colors in a Mermaid Git Diagram\nDESCRIPTION: Shows how to override the default branch colors using the 'themeVariables' configuration. Specific hex color codes are assigned to the first few branches using 'git0', 'git1', etc., demonstrating direct control over branch appearance.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_27\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n      'git0': '#ff0000'\n      'git1': '#00ff00'\n      'git2': '#0000ff'\n      'git3': '#ff00ff'\n      'git4': '#00ffff'\n      'git5': '#ffff00'\n      'git6': '#ff00ff'\n      'git7': '#00ffff'\n---\n       gitGraph\n       commit\n       branch develop\n       commit tag:\"v1.0.0\"\n       commit\n       checkout main\n       commit type: HIGHLIGHT\n       commit\n       merge develop\n       commit\n       branch featureA\n       commit\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Pie Charts in Mermaid\nDESCRIPTION: Demonstrates how to create simple pie charts using the `pie` keyword, a `title`, and key-value pairs representing chart segments and their corresponding values. Includes two distinct examples illustrating the basic syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/examples.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\npie title NETFLIX\n         \"Time spent looking for movie\" : 90\n         \"Time spent watching it\" : 10\n```\n\nLANGUAGE: mermaid\nCODE:\n```\npie title What Voldemort doesn't have?\n         \"FRIENDS\" : 2\n         \"FAMILY\" : 3\n         \"NOSE\" : 45\n```\n\n----------------------------------------\n\nTITLE: State Declaration: id: Description\nDESCRIPTION: This snippet shows another way to define a state with a description, using a colon to separate the id and description.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_4\n\nLANGUAGE: mermaid-example\nCODE:\n```\nstateDiagram-v2\n    s2 : This is a state description\n```\n\n----------------------------------------\n\nTITLE: Hiding Commit Labels in Mermaid gitGraph (mermaid)\nDESCRIPTION: This snippet demonstrates disabling the display of commit labels in a Mermaid gitGraph by setting 'showCommitLabel: false' within the configuration directive. Optionally, branch rendering can also be suppressed with 'showBranches: false'. No external libraries are required. Inputs consist of standard gitGraph commands for commits, branching, merging, and checkouts. Output is a branch diagram without commit labels, which clarifies the visualization when commit metadata is unnecessary or distracting.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_13\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n  gitGraph:\n    showBranches: false\n    showCommitLabel: false\n---\n      gitGraph\n        commit\n        branch hotfix\n        checkout hotfix\n        commit\n        branch develop\n        checkout develop\n        commit id:\"ash\"\n        branch featureB\n        checkout featureB\n        commit type:HIGHLIGHT\n        checkout main\n        checkout hotfix\n        commit type:NORMAL\n        checkout develop\n        commit type:REVERSE\n        checkout featureB\n        commit\n        checkout main\n        merge hotfix\n        checkout featureB\n        commit\n        checkout develop\n        branch featureA\n        commit\n        checkout develop\n        merge hotfix\n        checkout featureA\n        commit\n        checkout featureB\n        commit\n        checkout develop\n        merge featureA\n        branch release\n        checkout release\n        commit\n        checkout main\n        commit\n        checkout release\n        merge main\n        checkout develop\n        merge release\n```\n\n----------------------------------------\n\nTITLE: Creating another Basic Pie Chart in Mermaid\nDESCRIPTION: This snippet demonstrates how to create a basic pie chart using Mermaid syntax. It defines the chart's title and specifies the labels and values for each slice of the pie. No dependencies required, Mermaid library needs to be integrated.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/examples.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\npie title What Voldemort doesn't have?\n         \"FRIENDS\" : 2\n         \"FAMILY\" : 3\n         \"NOSE\" : 45\n```\n\n----------------------------------------\n\nTITLE: Creating a Sankey Diagram - Basic Syntax Example\nDESCRIPTION: This is a demonstration of basic Sankey diagram syntax. The example uses the keyword `sankey-beta` and expects comma-separated values representing source, target, and value. It's a simplified illustration to showcase the core data format required by Mermaid for creating a sankey diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_2\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid-example\nsankey-beta\n\n%% source,target,value\nElectricity grid,Over generation / exports,104.453\nElectricity grid,Heating and cooling - homes,113.726\nElectricity grid,H2 conversion,27.14\n```\n```\n\n----------------------------------------\n\nTITLE: Structuring User Journey Diagram - Mermaid\nDESCRIPTION: Illustrates the fundamental structure of a Mermaid user journey diagram using the core `journey` keyword. It shows how to organize the diagram into distinct sections using the `section` keyword and define individual tasks within those sections. Each task includes a name, a score (representing the user's feeling), and a comma-separated list of actors involved.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/userJourney.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\njourney\n    title My working day\n    section Go to work\n      Make tea: 5: Me\n      Go upstairs: 3: Me\n      Do work: 1: Me, Cat\n    section Go home\n      Go downstairs: 5: Me\n      Sit down: 5: Me\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Stadium\nDESCRIPTION: This snippet demonstrates how to create a stadium-shaped node using the shape definition syntax in Mermaid.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_22\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: stadium, label: \"Terminal point\" }\n```\n\n----------------------------------------\n\nTITLE: Creating a Timeline with Frontmatter Configuration in Mermaid.js Gantt\nDESCRIPTION: Illustrates building a timeline using Mermaid Gantt syntax, incorporating YAML frontmatter for configuration. The frontmatter sets global options like `displayMode`, theme CSS (`themeCSS` including multiline definitions and custom styling), and Gantt-specific settings (`gantt` block with `useWidth`, `rightPadding`, etc.). The chart itself defines sections and tasks representing timeline items with specific start/end years, milestones, and demonstrates custom CSS workarounds.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_18\n\nLANGUAGE: mermaid\nCODE:\n```\n---\n    # Frontmatter config, YAML comments\n    title: Ignored if specified in chart\n    displayMode: compact     #gantt specific setting but works at this level too\n    config:\n#        theme: forest\n#        themeCSS: \" #item36 { fill: CadetBlue } \"\n        themeCSS: \" // YAML supports multiline strings using a newline markers: \\n\n            #item36 { fill: CadetBlue }       \\n\n            // Custom marker workaround CSS from forum (below)    \\n\n            rect[id^=workaround] { height: calc(100% - 50px) ; transform: translate(9px, 25px); y: 0; width: 1.5px; stroke: none; fill: red; }   \\n\n            text[id^=workaround] { fill: red; y: 100%; font-size: 15px;}\n        \"\n        gantt:\n            useWidth: 400\n            rightPadding: 0\n            topAxis: true  #false\n            numberSectionStyles: 2\n---\ngantt\n    title Timeline - Gantt Sampler\n    dateFormat YYYY\n    axisFormat %y\n    %% this next line doesn't recognise 'decade' or 'year', but will silently ignore\n    tickInterval 1decade\n\n    section Issue19062\n    71   :            item71, 1900, 1930\n    section Issue19401\n    36   :            item36, 1913, 1935\n    section Issue1300\n    94   :            item94, 1910, 1915\n    5    :            item5,  1920, 1925\n    0    : milestone, item0,  1918, 1s\n    9    : vert,              1906, 1s   %% not yet official\n    64   : workaround,        1923, 1s   %% custom CSS object https://github.com/mermaid-js/mermaid/issues/3250\n```\n\n----------------------------------------\n\nTITLE: Checking for X11 server\nDESCRIPTION: Checks if an X11 server is running by echoing the value of the `$DISPLAY` environment variable. This is relevant for running GUI applications like Cypress within a Docker environment.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho $DISPLAY\n```\n\n----------------------------------------\n\nTITLE: Flowchart with Markdown Strings - Mermaid\nDESCRIPTION: This snippet demonstrates the use of markdown strings in Mermaid flowcharts for enhanced text formatting.  It showcases how to use bold and italic text within node, edge, and subgraph labels, and how text automatically wraps within labels.  The `htmlLabels` configuration needs to be set to `false` for markdown to work.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_96\n\nLANGUAGE: Mermaid\nCODE:\n```\nconfig:\n  flowchart:\n    htmlLabels: false\n---\nflowchart LR\nsubgraph \"One\"\n  a(\"`The **cat**\n  in the hat`\") -- \"edge label\" --> b{{\"`The **dog** in the hog`\"}}\nend\nsubgraph \"`**Two**`\"\n  c(\"`The **cat**\n  in the hat`\") -- \"`Bold **edge label**`\" --> d(\"The dog in the hog\")\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Mermaid Gantt Chart Theme with Custom CSS in YAML\nDESCRIPTION: This YAML snippet configures a custom CSS theme for Mermaid.js Gantt charts to style specific elements like items and markers. It demonstrates embedding multiline CSS strings using newline escape sequences and comments to control the appearance of chart components. Key settings include defining fill colors, custom marker styles via CSS selectors, and layout properties for rectangles and text elements. Dependencies include a Mermaid.js environment that supports YAML-based configuration loading.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\nthemeCSS: \" // YAML supports multiline strings using a newline markers: \\n            #item36 { fill: CadetBlue }       \\n\\n            // Custom marker workaround CSS from forum (below)    \\n            rect[id^=workaround] { height: calc(100% - 50px) ; transform: translate(9px, 25px); y: 0; width: 1.5px; stroke: none; fill: red; }   \\n            text[id^=workaround] { fill: red; y: 100%; font-size: 15px;}\\n        \"\ngantt:\n    useWidth: 400\n    rightPadding: 0\n    topAxis: true  #false\n    numberSectionStyles: 2\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Relationship Diagrams with Mermaid Syntax (mermaid)\nDESCRIPTION: This snippet demonstrates how to declare and define an Entity Relationship Diagram using Mermaid notation, starting with the 'erDiagram' keyword. Each line establishes relationships between entities such as CUSTOMER, ORDER, INVOICE, and PRODUCT, using notations like '}|..|{', '||--o{', and descriptive labels (e.g., 'has', 'places'). No external dependencies are needed; paste directly into a Mermaid-compatible Markdown or the Live Editor. Inputs are plain text entity relationships; the output is a rendered ER diagram visualization.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/syntax-reference.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n          CUSTOMER }|..|{ DELIVERY-ADDRESS : has\n          CUSTOMER ||--o{ ORDER : places\n          CUSTOMER ||--o{ INVOICE : \"liable for\"\n          DELIVERY-ADDRESS ||--o{ ORDER : receives\n          INVOICE ||--|{ ORDER : covers\n          ORDER ||--|{ ORDER-ITEM : includes\n          PRODUCT-CATEGORY ||--|{ PRODUCT : contains\n          PRODUCT ||--o{ ORDER-ITEM : \"ordered in\"\n```\n\n----------------------------------------\n\nTITLE: UDP Packet Diagram Example in Mermaid\nDESCRIPTION: An example showing how to represent a UDP packet structure using Mermaid's packet diagram syntax. Demonstrates the simpler header structure of UDP compared to TCP.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/packet.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\npacket-beta\ntitle UDP Packet\n0-15: \"Source Port\"\n16-31: \"Destination Port\"\n32-47: \"Length\"\n48-63: \"Checksum\"\n64-95: \"Data (variable length)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Blocks with Custom Widths in Mermaid\nDESCRIPTION: Demonstrates how to create blocks that span multiple columns using width specifications. Blocks can be given custom labels and specific column spans to represent components of varying significance or size.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nblock-beta\n  columns 3\n  a[\"A label\"] b:2 c:2 d\n```\n\n----------------------------------------\n\nTITLE: Applying the 'forest' Theme to a Mermaid GitGraph\nDESCRIPTION: Example of applying the 'forest' theme to a complex gitGraph diagram using configuration directives. The `theme: 'forest'` setting changes the diagram's color scheme and styling according to the 'forest' theme definition.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_22\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'forest'\n---\n      gitGraph\n        commit\n        branch hotfix\n        checkout hotfix\n        commit\n        branch develop\n        checkout develop\n        commit id:\"ash\" tag:\"abc\"\n        branch featureB\n        checkout featureB\n        commit type:HIGHLIGHT\n        checkout main\n        checkout hotfix\n        commit type:NORMAL\n        checkout develop\n        commit type:REVERSE\n        checkout featureB\n        commit\n        checkout main\n        merge hotfix\n        checkout featureB\n        commit\n        checkout develop\n        branch featureA\n        commit\n        checkout develop\n        merge hotfix\n        checkout featureA\n        commit\n        checkout featureB\n        commit\n        checkout develop\n        merge featureA\n        branch release\n        checkout release\n        commit\n        checkout main\n        commit\n        checkout release\n        merge main\n        checkout develop\n        merge release\n```\n\n----------------------------------------\n\nTITLE: Basic Kanban Diagram Structure in Mermaid\nDESCRIPTION: Defines a simple Kanban board with two columns, 'New' and 'In progress', using Mermaid syntax. It shows the basic structure for creating columns and adding tasks within them.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/diagrams/kanban/samples.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nkanban\n  New\n    Sometimes wrong Shape type is highlighted\n  In progress\n```\n\n----------------------------------------\n\nTITLE: API Usage for Rendering Mermaid Diagrams\nDESCRIPTION: HTML and JavaScript example showing how to use Mermaid's API to render a diagram from a string definition and insert it into the DOM.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import mermaid from './mermaid.esm.mjs';\n  mermaid.initialize({ startOnLoad: false });\n\n  // Example of using the render function\n  const drawDiagram = async function () {\n    element = document.querySelector('#graphDiv');\n    const graphDefinition = 'graph TB\\na-->b';\n    const { svg } = await mermaid.render('graphDiv', graphDefinition);\n    element.innerHTML = svg;\n  };\n\n  await drawDiagram();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Detailed Task Metadata in Mermaid Kanban\nDESCRIPTION: Illustrates adding structured metadata (assignee, icon, priority, description) to a specific task (`id2`) using the `@{...}` syntax following the task ID. Also includes section styling applied to element `n1`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/diagrams/kanban/samples.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nkanban\n  id1[Todo]\n    id2[Create JISON]\n    id3[Update DB function]\n    id4[Create parsing tests]\n    id5[define getData]\n    id6[Create renderer]\n  id7[In progress]\n    id8[Design grammar]\n\n  id2@{\n    assigned: knsv\n    icon: heart\n    priority: high\n    descr: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n  }\n  style n1 stroke:#AA00FF,fill:#E1BEE7\n```\n\n----------------------------------------\n\nTITLE: Defining Default Mermaid Configuration in TypeScript\nDESCRIPTION: This TypeScript snippet defines the `default` constant, which represents the default configuration for Mermaid. It's of type `RequiredDeep<MermaidConfig>`, meaning it ensures all properties in `MermaidConfig` are required and deeply typed. The code serves as a source of truth for the application's base settings, especially functions and undefined values. Understanding these options is crucial for customising Mermaid's behavior within the application and making use of the config.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/defaultConfig/variables/default.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst default: RequiredDeep<MermaidConfig>;\n```\n\n----------------------------------------\n\nTITLE: Using Class Labels\nDESCRIPTION: This snippet illustrates the use of labels for classes, allowing for custom display names. It also demonstrates the use of backticks to escape special characters within class labels. This is useful for special characters in class names or labels.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class Animal[\"Animal with a label\"]\n    class Car[\"Car with *! symbols\"]\n    Animal --> Car\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class `Animal Class!`\n    class `Car Class`\n    `Animal Class!` --> `Car Class`\n```\n\n----------------------------------------\n\nTITLE: Configuring Kanban Diagram Display in Mermaid\nDESCRIPTION: Shows how to use a `config` block (YAML format within `---`) at the beginning of the Mermaid definition to customize the Kanban diagram's appearance. This example configures it to show element IDs (`showIds: true`) and define which metadata fields to display per task (`fields`).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/diagrams/kanban/samples.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  kanban:\n    showIds: true\n    fields: [[title],[description][id, assigned]]\n---\nkanban\n  id1[Todo]\n    id2[Create JISON]\n    id3[Update DB function]\n    id4[Create parsing tests]\n    id5[define getData]\n    id6[Create renderer]\n  id7[In progress]\n    id8[Design grammar]\n\n  id2@{\n    assigned: knsv\n    icon: heart\n    priority: high\n    descr: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n  }\n  style n1 stroke:#AA00FF,fill:#E1BEE7\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in Mermaid Sequence Diagrams\nDESCRIPTION: Demonstrates using HTML entity codes (e.g., `#9829;` for ♡, `#infin;` for ∞, `#35;` for #, `#59;` for ;) to include special characters within message text in Mermaid sequence diagrams. Both numeric and named entities are supported.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_22\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    A->>B: I #9829; you!\n    B->>A: I #9829; you #infin; times more!\n```\n\n----------------------------------------\n\nTITLE: Setting Direction in Subgraphs - Mermaid\nDESCRIPTION: This snippet illustrates how to set the rendering direction of subgraphs within a Mermaid flowchart. The `direction` statement is used to specify the desired layout direction (TB, RL, BT) for each subgraph.  Note that if any of a subgraph's nodes are linked to the outside, subgraph direction will be ignored.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_95\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n  subgraph TOP\n    direction TB\n    subgraph B1\n        direction RL\n        i1 -->f1\n    end\n    subgraph B2\n        direction BT\n        i2 -->f2\n    end\n  end\n  A --> TOP --> B\n  B1 --> B2\n```\n\n----------------------------------------\n\nTITLE: Quadrant Chart Example in Mermaid\nDESCRIPTION: Displays a 2D quadrant chart with campaign data, axes labels, and quadrant labels, useful for visualizing campaign reach and engagement metrics.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/examples.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nquadrantChart\n    title Reach and engagement of campaigns\n    x-axis Low Reach --> High Reach\n    y-axis Low Engagement --> High Engagement\n    quadrant-1 We should expand\n    quadrant-2 Need to promote\n    quadrant-3 Re-evaluate\n    quadrant-4 May be improved\n    Campaign A: [0.3, 0.6]\n    Campaign B: [0.45, 0.23]\n    Campaign C: [0.57, 0.69]\n    Campaign D: [0.78, 0.34]\n    Campaign E: [0.40, 0.34]\n    Campaign F: [0.35, 0.78]\n```\n\n----------------------------------------\n\nTITLE: Full Kanban Diagram Example - Mermaid\nDESCRIPTION: This snippet provides a full example of a Mermaid Kanban diagram, including column definitions, task assignments, metadata, and a configuration block with `ticketBaseUrl`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/kanban.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  kanban:\n    ticketBaseUrl: 'https://mermaidchart.atlassian.net/browse/#TICKET#'\n---\nkanban\n  Todo\n    [Create Documentation]\n    docs[Create Blog about the new diagram]\n  [In progress]\n    id6[Create renderer so that it works in all cases. We also add some extra text here for testing purposes. And some more just for the extra flare.]\n  id9[Ready for deploy]\n    id8[Design grammar]@{ assigned: 'knsv' }\n  id10[Ready for test]\n    id4[Create parsing tests]@{ ticket: MC-2038, assigned: 'K.Sveidqvist', priority: 'High' }\n    id66[last item]@{ priority: 'Very Low', assigned: 'knsv' }\n  id11[Done]\n    id5[define getData]\n    id2[Title of diagram is more than 100 chars when user duplicates diagram with 100 char]@{ ticket: MC-2036, priority: 'Very High'}\n    id3[Update DB function]@{ ticket: MC-2037, assigned: knsv, priority: 'High' }\n\n  id12[Can't reproduce]\n    id3[Weird flickering in Firefox]\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Styles with Classes in Mermaid\nDESCRIPTION: Illustrates how to use the `classDef` keyword to define reusable style classes (e.g., 'important', 'test') using CSS properties. These classes can then be applied to multiple nodes to maintain consistent styling across the diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/requirementDiagram.md#_snippet_5\n\nLANGUAGE: Mermaid\nCODE:\n```\nrequirementDiagram\n\nrequirement test_req {\n    id: 1\n    text: \"class styling example\"\n    risk: low\n    verifymethod: test\n}\n\nelement test_entity {\n    type: simulation\n}\n\nclassDef important fill:#f96,stroke:#333,stroke-width:4px\nclassDef test fill:#ffa,stroke:#000\n```\n\n----------------------------------------\n\nTITLE: Init Directive Usage in a Graph\nDESCRIPTION: This example shows how the init directive is used to set the theme and log level for a Mermaid graph. The init directive is placed before the graph definition. It sets the theme to \"default\" and logLevel to 1.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/8.6.0_docs.md#_snippet_2\n\nLANGUAGE: Mermaid\nCODE:\n```\n%%{init: {\"theme\": \"default\", \"logLevel\": 1 }}%%\n graph LR\n  a-->b\n  b-->c\n  c-->d\n  d-->e\n  e-->f\n  f-->g\n  g-->\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\n%%{init: {\"theme\": \"default\", \"logLevel\": 1 }}%%\n graph LR\n  a-->b\n  b-->c\n  c-->d\n  d-->e\n  e-->f\n  f-->g\n  g-->\n```\n\n----------------------------------------\n\nTITLE: Grouping Time Periods into Sections in Mermaid Timeline Diagrams\nDESCRIPTION: Shows how to group time periods under named sections (or ages) within a timeline diagram. Sections are declared using the 'section' keyword followed by the section name, and subsequent time periods listed belong to that section until a new section is defined. This grouping affects rendering order and colors of periods and events for visual clarity. It requires Mermaid timeline support and uses standard Mermaid syntax for timeline diagrams. This example illustrates organizing the Industrial Revolution timeline into two sections, with multiple time periods and events under each.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ntimeline\n    title Timeline of Industrial Revolution\n    section 17th-20th century\n        Industry 1.0 : Machinery, Water power, Steam <br>power\n        Industry 2.0 : Electricity, Internal combustion engine, Mass production\n        Industry 3.0 : Electronics, Computers, Automation\n    section 21st century\n        Industry 4.0 : Internet, Robotics, Internet of Things\n        Industry 5.0 : Artificial intelligence, Big data, 3D printing\n```\n\n----------------------------------------\n\nTITLE: Rendering Math in Flowchart Nodes and Edges (Mermaid)\nDESCRIPTION: This snippet demonstrates how to embed mathematical expressions within a Mermaid flowchart using the KaTeX syntax surrounded by `$$...$$` delimiters. Math can be included in node labels and edge labels.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/math.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n graph LR\n      A[\"$$x^2$$\"] -->|\"$$\\sqrt{x+3}$$\"| B(\"$$\\frac{1}{2}$$\")\n      A -->|\"$$\\overbrace{a+b+c}^{\\text{note}}$$\"| C(\"$$\\pi r^2$$\")\n      B --> D(\"$$x = \\begin{cases} a \\&\\text{if } b \\\\ c \\&\\text{if } d \\end{cases}$$\")\n      C --> E(\"$$x(t)=c_1\\begin{bmatrix}-\\cos{t}+\\sin{t}\\\\ 2\\cos{t} \\end{bmatrix}e^{2t}$$\")\n```\n\n----------------------------------------\n\nTITLE: Adding URL Links to Classes in Mermaid\nDESCRIPTION: Shows how to create clickable URL links for classes in two different ways using 'link' and 'click href' syntax. Each link can include a tooltip that appears on hover.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_25\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclass Shape\nlink Shape \"https://www.github.com\" \"This is a tooltip for a link\"\nclass Shape2\nclick Shape2 href \"https://www.github.com\" \"This is a tooltip for a link\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Pie Chart in Mermaid\nDESCRIPTION: This snippet demonstrates how to create a basic pie chart using Mermaid syntax. It defines the chart's title and specifies the labels and values for each slice of the pie.  No dependencies required, Mermaid library needs to be integrated.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/examples.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\npie title NETFLIX\n         \"Time spent looking for movie\" : 90\n         \"Time spent watching it\" : 10\n```\n\n----------------------------------------\n\nTITLE: Creating a Circular Node in Mermaid Flowchart\nDESCRIPTION: This snippet demonstrates how to create a circular node in a Mermaid flowchart. The text is enclosed in double parentheses `(())`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_10\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    id1((This is the text in the circle))\n```\n\n----------------------------------------\n\nTITLE: Customizing Radar Diagram Appearance - Mermaid\nDESCRIPTION: Provides a Mermaid code block that configures diagram and theme variables, adjusting axis scale, curve tension, color scales, and curve opacity. It defines a radar chart with five axes and three curves, illustrating how to fine-tune rendering and appearance within Mermaid's radar-beta environment. Expected input is configuration and data; output is a styled radar chart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  radar:\n    axisScaleFactor: 0.25\n    curveTension: 0.1\n  theme: base\n  themeVariables:\n    cScale0: \"#FF0000\"\n    cScale1: \"#00FF00\"\n    cScale2: \"#0000FF\"\n    radar:\n      curveOpacity: 0\n---\nradar-beta\n  axis A, B, C, D, E\n  curve c1{1,2,3,4,5}\n  curve c2{5,4,3,2,1}\n  curve c3{3,3,3,3,3}\n```\n\n----------------------------------------\n\nTITLE: Creating a Parallelogram Node in Mermaid Flowchart\nDESCRIPTION: This snippet demonstrates how to create a parallelogram-shaped node in a Mermaid flowchart. The text is enclosed in forward slashes `//`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_14\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    id1[/This is the text in the box/]\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart with Styles and Theme Variables\nDESCRIPTION: This example configures the quadrant chart using chart-specific settings and theme variables. Configuration options include chart dimensions, text sizes, padding, and color schemes. Theme variables allow customizing the visual appearance of the chart. Required configuration includes chartWidth, chartHeight, and the settings for theme variables like quadrant text fill.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/quadrantChart.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  quadrantChart:\n    chartWidth: 400\n    chartHeight: 400\n  themeVariables:\n    quadrant1TextFill: \"ff0000\"\n---\nquadrantChart\n  x-axis Urgent --> Not Urgent\n  y-axis Not Important --> \"Important ❤\"\n  quadrant-1 Plan\n  quadrant-2 Do\n  quadrant-3 Delegate\n  quadrant-4 Delete\n```\n\n----------------------------------------\n\nTITLE: Hiding Branch Names and Lines in GitGraph Using mermaid-example Language\nDESCRIPTION: Shows configuration and usage of the 'showBranches' boolean option in Mermaid's gitGraph to control the visibility of branches and their lines in the rendered diagram. Setting 'showBranches' to false hides branch names and lines, cleaning up the diagram when branch details are not needed. The snippet includes multiple branch declarations, checkouts, commits, merges, and customization of commit types.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_9\n\nLANGUAGE: mermaid-example\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n  gitGraph:\n    showBranches: false\n---\n      gitGraph\n        commit\n        branch hotfix\n        checkout hotfix\n        commit\n        branch develop\n        checkout develop\n        commit id:\"ash\" tag:\"abc\"\n        branch featureB\n        checkout featureB\n        commit type:HIGHLIGHT\n        checkout main\n        checkout hotfix\n        commit type:NORMAL\n        checkout develop\n        commit type:REVERSE\n        checkout featureB\n        commit\n        checkout main\n        merge hotfix\n        checkout featureB\n        commit\n        checkout develop\n        branch featureA\n        commit\n        checkout develop\n        merge hotfix\n        checkout featureA\n        commit\n        checkout featureB\n        commit\n        checkout develop\n        merge featureA\n        branch release\n        checkout release\n        commit\n        checkout main\n        commit\n        checkout release\n        merge main\n        checkout develop\n        merge release\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart using Mermaid.js Gantt Syntax\nDESCRIPTION: Demonstrates using the Mermaid Gantt chart syntax to create a simple bar chart visualization representing Git issue update times. It utilizes `dateFormat X` and `axisFormat %s` for numerical representation on the axis and defines sections and tasks to represent bars and their corresponding values (days since last update).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_17\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n    title Git Issues - days since last update\n    dateFormat X\n    axisFormat %s\n    section Issue19062\n    71   : 0, 71\n    section Issue19401\n    36   : 0, 36\n    section Issue193\n    34   : 0, 34\n    section Issue7441\n    9    : 0, 9\n    section Issue1300\n    5    : 0, 5\n```\n\n----------------------------------------\n\nTITLE: Registering Icon Packs without Lazy Loading in JavaScript\nDESCRIPTION: This approach imports and registers an icon pack directly without lazy loading. It uses the prefix defined in the icon pack itself rather than specifying a custom name, which maintains consistency with the original icon pack naming.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/icons.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport mermaid from 'mermaid';\nimport { icons } from '@iconify-json/logos';\nmermaid.registerIconPacks([\n  {\n    name: icons.prefix, // To use the prefix defined in the icon pack\n    icons,\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Git Graph Diagram in Mermaid\nDESCRIPTION: Visualizes a git workflow with commits, branches, and checkouts. It helps depict version control history and branching strategies within Mermaid diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n   commit\n   commit\n   branch develop\n   commit\n   commit\n   commit\n   checkout main\n   commit\n   commit\n```\n\n----------------------------------------\n\nTITLE: Creating a Sequence Diagram with Mermaid JavaScript\nDESCRIPTION: This snippet provides Mermaid syntax for a sequence diagram, modeling interactions between 'Alice', 'John', and 'Bob'. It uses features like message arrows, loops, and notes. The only prerequisite is Mermaid; all elements are self-contained. The input is a series of participant-interaction definitions, delivering an ordered communication diagram as output.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\nAlice->>John: Hello John, how are you?\nloop HealthCheck\n    John->>John: Fight against hypochondria\nend\nNote right of John: Rational thoughts!\nJohn-->>Alice: Great!\nJohn->>Bob: How about you?\nBob-->>John: Jolly good!\n```\n\n----------------------------------------\n\nTITLE: Using Classes for Styling Nodes in Mermaid ER Diagrams\nDESCRIPTION: Shows how to define a style class (`someclass`) using `classDef` with specific style properties (e.g., `fill`). The class is then applied to multiple entities (CAR, PERSON, HOUSE) using the `:::` operator appended to the entity name during definition, allowing for consistent styling.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_12\n\nLANGUAGE: mermaid-example\nCODE:\n```\nerDiagram\n    direction TB\n    CAR:::someclass {\n        string registrationNumber\n        string make\n        string model\n    }\n    PERSON:::someclass {\n        string firstName\n        string lastName\n        int age\n    }\n    HOUSE:::someclass\n\n    classDef someclass fill:#f96\n```\n\n----------------------------------------\n\nTITLE: Hiding Commit Labels in GitGraph Using mermaid-example Language\nDESCRIPTION: Demonstrates the 'showCommitLabel' configuration option which allows hiding all commit labels in Mermaid's gitGraph diagrams when set to false. This is useful for simplified diagrams where commit labels may clutter the visualization. The example includes branch and commit operations with the commit labels suppressed and branch lines hidden for a clean display.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_12\n\nLANGUAGE: mermaid-example\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n  gitGraph:\n    showBranches: false\n    showCommitLabel: false\n---\n      gitGraph\n        commit\n        branch hotfix\n        checkout hotfix\n        commit\n        branch develop\n        checkout develop\n        commit id:\"ash\"\n        branch featureB\n        checkout featureB\n        commit type:HIGHLIGHT\n        checkout main\n        checkout hotfix\n        commit type:NORMAL\n        checkout develop\n        commit type:REVERSE\n        checkout featureB\n        commit\n        checkout main\n        merge hotfix\n        checkout featureB\n        commit\n        checkout develop\n        branch featureA\n        commit\n        checkout develop\n        merge hotfix\n        checkout featureA\n        commit\n        checkout featureB\n        commit\n        checkout develop\n        merge featureA\n        branch release\n        checkout release\n        commit\n        checkout main\n        commit\n        checkout release\n        merge main\n        checkout develop\n        merge release\n```\n\n----------------------------------------\n\nTITLE: Subgraph with Explicit ID\nDESCRIPTION: This snippet shows how to set an explicit ID for a subgraph, which can be useful for styling or referencing the subgraph in other parts of the diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_93\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TB\n    c1-->a2\n    subgraph ide1 [one]\n    a1-->a2\n    end\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Double Circle\nDESCRIPTION: This snippet demonstrates how to create a double circle node using the shape keyword in a Mermaid flowchart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_33\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: dbl-circ, label: \"Stop\" }\n```\n\n----------------------------------------\n\nTITLE: Selecting Layout Algorithms with Configuration Metadata in Mermaid (mermaid)\nDESCRIPTION: This snippet demonstrates how to specify advanced layout algorithms and styles for Mermaid diagrams using YAML frontmatter. Parameters include 'layout' (elk), 'look' (handDrawn), and 'theme' (dark), instructing Mermaid to use the ELK layout engine for optimal node arrangement. The diagram section uses a top-to-bottom flowchart for illustrating decision logic. The ELK layout dependency must be available in the Mermaid environment to function correctly. Inputs are the frontmatter configuration and diagram code; output is a diagram with enhanced layout and style based on provided configuration.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/syntax-reference.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  layout: elk\n  look: handDrawn\n  theme: dark\n---\nflowchart TB\n  A[Start] --> B{Decision}\n  B -->|Yes| C[Continue]\n  B -->|No| D[Stop]\n```\n\n----------------------------------------\n\nTITLE: Using Special Characters in a Box\nDESCRIPTION: Demonstrates the use of quotes to handle special characters within node text, for example \"This is the (text) in the box\".\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_40\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    id1[\"This is the (text) in the box\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Cylindrical Node in Mermaid Flowchart\nDESCRIPTION: This snippet demonstrates how to create a cylindrical node in a Mermaid flowchart, commonly used to represent databases. The text is enclosed in parentheses `()`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_9\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    id1[(Database)]\n```\n\n----------------------------------------\n\nTITLE: Implementing Clickable Tasks in Mermaid.js Gantt Chart (HTML/JavaScript)\nDESCRIPTION: Complete HTML example demonstrating how to make tasks in a Mermaid.js Gantt chart interactive. It shows defining a Gantt chart within HTML `<pre class=\"mermaid\">` tags, using `click` directives to link tasks (identified by IDs like `cl1`, `cl2`, `cl3`) to a URL or JavaScript functions (`printArguments`, `printTask`), and initializing Mermaid with `securityLevel: 'loose'` to enable interactions. The JavaScript functions demonstrate how to handle callbacks with or without arguments.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <pre class=\"mermaid\">\n    gantt\n      dateFormat  YYYY-MM-DD\n\n      section Clickable\n      Visit mermaidjs         :active, cl1, 2014-01-07, 3d\n      Print arguments         :cl2, after cl1, 3d\n      Print task              :cl3, after cl2, 3d\n\n      click cl1 href \"https://mermaidjs.github.io/\"\n      click cl2 call printArguments(\"test1\", \"test2\", test3)\n      click cl3 call printTask()\n  </pre>\n\n  <script>\n    const printArguments = function (arg1, arg2, arg3) {\n      alert('printArguments called with arguments: ' + arg1 + ', ' + arg2 + ', ' + arg3);\n    };\n    const printTask = function (taskId) {\n      alert('taskId: ' + taskId);\n    };\n    const config = {\n      startOnLoad: true,\n      securityLevel: 'loose',\n    };\n    mermaid.initialize(config);\n  </script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Representing Reply Messages in Various Ways in ZenUML Using zenuml\nDESCRIPTION: Illustrates three approaches to depict reply messages: assigning return values to variables, using a return statement inside a synchronous message block, and employing the @return annotator on asynchronous messages. This covers common styles of modeling method returns or responses.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_7\n\nLANGUAGE: zenuml\nCODE:\n```\n// 1. assign a variable from a sync message.\na = A.SyncMessage()\n\n// 1.1. optionally give the variable a type\nSomeType a = A.SyncMessage()\n\n// 2. use return keyword\nA.SyncMessage() {\nreturn result\n}\n\n// 3. use @return or @reply annotator on an async message\n@return\nA->B: result\n```\n\n----------------------------------------\n\nTITLE: Creating a Thick Link\nDESCRIPTION: This snippet creates a thick link between two nodes, which can visually emphasize the importance of the connection.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_73\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n   A ==> B\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Framed Circle\nDESCRIPTION: This snippet demonstrates creating a framed circle node using the shape keyword, often used for representing 'stop' states.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_38\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: framed-circle, label: \"Stop\" }\n```\n\n----------------------------------------\n\nTITLE: Actor Creation and Destruction in Mermaid\nDESCRIPTION: Demonstrates how to create and destroy actors or participants using create and destroy directives. This example shows the creation of Carl and Donald, and destruction of Carl and Bob. Requires Mermaid version 10.3.0 or later.  Expected output: A sequence diagram with dynamic actor/participant lifecycle.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->>Bob: Hello Bob, how are you ?\n    Bob->>Alice: Fine, thank you. And you?\n    create participant Carl\n    Alice->>Carl: Hi Carl!\n    create actor D as Donald\n    Carl->>D: Hi!\n    destroy Carl\n    Alice-xCarl: We are too many\n    destroy Bob\n    Bob->>Alice: I agree\n```\n\n----------------------------------------\n\nTITLE: Git Graph (Experimental Feature) in Mermaid\nDESCRIPTION: Illustrates a simplified Git commit history graph, used for representing branching and merge operations, marked as an experimental feature. Dependencies include Mermaid's syntax for Git graphs.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\ngitGraph::\n  options{\n    \"nodeSpacing\": 150,\n    \"nodeRadius\": 10\n  }\nend\ncommit\nbranch newbranch\ncheckout newbranch\ncommit\ncommit\ncheckout master\ncommit\ncommit\nmerge newbranch\n```\n\n----------------------------------------\n\nTITLE: Modeling Two-way Class Relationships - Mermaid-Example\nDESCRIPTION: Gives a Mermaid class diagram example of a two-way (bidirectional) relationship, useful for N:M UML associations. It leverages special Mermaid syntax, assuming the renderer supports bidirectional arrows, with output aimed at visually reinforcing relational complexity in documentation or design flows.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    Animal <|--|> Zebra\n\n```\n\n----------------------------------------\n\nTITLE: Validating Mermaid Syntax Without Rendering\nDESCRIPTION: Example of how to use the mermaid.parse() function to validate diagram definitions without rendering. This example shows how to handle parsing errors and update the UI based on validation results.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid.parseError = function (err, hash) {\n  displayErrorInGui(err);\n};\n\nconst textFieldUpdated = async function () {\n  const textStr = getTextFromFormField('code');\n\n  if (await mermaid.parse(textStr)) {\n    reRender(textStr);\n  }\n};\n\nbindEventHandler('change', 'code', textFieldUpdated);\n```\n\n----------------------------------------\n\nTITLE: Defining Lollipop Interface Relationships - Mermaid-Example\nDESCRIPTION: Provides a visual example of a Mermaid class diagram with a lollipop interface using ()-- syntax, intended to clarify the unique, non-shared interface relationship between entities. No other dependencies are needed, and the output is a conceptual representation of UML lollipop interfaces.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n  bar ()-- foo\n\n```\n\n----------------------------------------\n\nTITLE: Correcting Common Syntax Errors in Mermaid Block Diagrams\nDESCRIPTION: Demonstrates proper syntax for linking blocks in Mermaid block diagrams. Shows how to correctly add spaces between blocks and use proper arrow notation to establish connections between elements.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nblock-beta\n  A space B\n  A --> B\n```\n\n----------------------------------------\n\nTITLE: Setting Parse Error Handler in TypeScript\nDESCRIPTION: The `setParseErrorHandler` function provides an alternative way to set the `parseError` callback function for handling errors during diagram parsing. This is particularly useful for environments where you can't directly set a member on the `mermaid` object. The callback will receive the error and a hash. The function returns void.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/Mermaid.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetParseErrorHandler: (`parseErrorHandler`) => `void`\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Hexagon\nDESCRIPTION: This snippet uses the shape keyword to define a hexagon-shaped node in a Mermaid flowchart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_28\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: hex, label: \"Prepare conditional\" }\n```\n\n----------------------------------------\n\nTITLE: XY Chart in Mermaid\nDESCRIPTION: Creates a bar and line chart illustrating monthly sales revenue, with axes labeled for months and revenue in dollars. It demonstrates plotting multiple series in Mermaid.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_13\n\nLANGUAGE: mermaid\nCODE:\n```\nxychart-beta\n  title \"Sales Revenue\"\n  x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]\n  y-axis \"Revenue (in $)\" 4000 --> 11000\n  bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\n  line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\n```\n\n----------------------------------------\n\nTITLE: Horizontal Commit Labels Layout in GitGraph Using mermaid-example Language\nDESCRIPTION: Shows how to configure Mermaid's gitGraph commit labels to be horizontally aligned below commit nodes by setting 'rotateCommitLabel' to false. This layout centers commit labels horizontally without rotation, which is more suitable for short labels. The snippet includes multiple commits and branches to illustrate the horizontal label arrangement over various parts of the graph.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_11\n\nLANGUAGE: mermaid-example\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n  gitGraph:\n    rotateCommitLabel: false\n---\ngitGraph\n  commit id: \"feat(api): ...\"\n  commit id: \"a\"\n  commit id: \"b\"\n  commit id: \"fix(client): .extra long label..\"\n  branch c2\n  commit id: \"feat(modules): ...\"\n  commit id: \"test(client): ...\"\n  checkout main\n  commit id: \"fix(api): ...\"\n  commit id: \"ci: ...\"\n  branch b1\n  commit\n  branch b2\n  commit\n```\n\n----------------------------------------\n\nTITLE: Comparing Multiple Entities Across Dimensions - Mermaid Example\nDESCRIPTION: Provides an example radar diagram for restaurant comparison using Mermaid-example. The snippet defines axes for qualitative aspects (e.g., Food Quality, Service, Price, Ambiance) and plots curves for several restaurants. Additional diagram options such as graticule polygon and max value are used. Intended for comparative analysis of categorical ratings. Requires Mermaid runtime with radar-beta support.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_3\n\nLANGUAGE: mermaid-example\nCODE:\n```\nradar-beta\n  title Restaurant Comparison\n  axis food[\"Food Quality\"], service[\"Service\"], price[\"Price\"]\n  axis ambiance[\"Ambiance\"],\n\n  curve a[\"Restaurant A\"]{4, 3, 2, 4}\n  curve b[\"Restaurant B\"]{3, 4, 3, 3}\n  curve c[\"Restaurant C\"]{2, 3, 4, 2}\n  curve d[\"Restaurant D\"]{2, 2, 4, 3}\n\n  graticule polygon\n  max 5\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Branch Ordering in Mermaid gitGraph (mermaid)\nDESCRIPTION: This snippet configures explicit display ordering of branches in Mermaid gitGraph diagrams using the 'order' attribute after each branch definition and, optionally, 'mainBranchOrder' in the configuration. Branches with the 'order' attribute are shown according to their specified value; those without it are displayed in their definition order. Inputs are gitGraph commands for branch creation and the order parameters. Outputs vary depending on branch order values set, allowing precision in diagram layout visual hierarchy. Proper ordering assists in representing complex branching models or aligning diagram flow to project conventions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_15\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n  gitGraph:\n    showBranches: true\n    showCommitLabel: true\n---\n      gitGraph\n      commit\n      branch test1 order: 3\n      branch test2 order: 2\n      branch test3 order: 1\n\n```\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n  gitGraph:\n    showBranches: true\n    showCommitLabel: true\n    mainBranchOrder: 2\n---\n      gitGraph\n      commit\n      branch test1 order: 3\n      branch test2\n      branch test3\n      branch test4 order: 1\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Main Branch Name in GitGraph Using mermaid-example Language\nDESCRIPTION: Shows how to customize the default main/root branch name in Mermaid's gitGraph using the 'mainBranchName' configuration option. By setting it to a custom string, such as 'MetroLine1', the main branch name used throughout the diagram changes accordingly. The example includes commits, branches, merges, and commit types to illustrate the impact of changing the main branch's identifier within a visual railroad map metaphor.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_13\n\nLANGUAGE: mermaid-example\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n  gitGraph:\n    showBranches: true\n    showCommitLabel: true\n    mainBranchName: 'MetroLine1'\n---\n      gitGraph\n        commit id:\"NewYork\"\n        commit id:\"Dallas\"\n        branch MetroLine2\n        commit id:\"LosAngeles\"\n        commit id:\"Chicago\"\n        commit id:\"Houston\"\n        branch MetroLine3\n        commit id:\"Phoenix\"\n        commit type: HIGHLIGHT id:\"Denver\"\n        commit id:\"Boston\"\n        checkout MetroLine1\n        commit id:\"Atlanta\"\n        merge MetroLine3\n        commit id:\"Miami\"\n        commit id:\"Washington\"\n        merge MetroLine2 tag:\"MY JUNCTION\"\n        commit id:\"Boston\"\n        commit id:\"Detroit\"\n        commit type:REVERSE id:\"SanFrancisco\"\n```\n\n----------------------------------------\n\nTITLE: Repeated Class Diagram Example in Mermaid\nDESCRIPTION: Replicates the same class diagram illustrating class relationships, inheritance, composition, and properties, useful for demonstrating diagram syntax and structure consistency in Mermaid.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nClass01 <|-- AveryLongClass : Cool\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label\n```\n\n----------------------------------------\n\nTITLE: Importing Common Accessibility Functions in Mermaid.js\nDESCRIPTION: Imports utility functions (`setAccTitle`, `getAccTitle`, `getAccDescription`, `setAccDescription`, `clear`) from the '../../commonDb' module. These functions are used within a diagram's database logic (like flowDb.js) to manage accessible titles and descriptions, which are later inserted into the rendered SVG.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  setAccTitle,\n  getAccTitle,\n  getAccDescription,\n  setAccDescription,\n  clear as commonClear,\n} from '../../commonDb';\n```\n\n----------------------------------------\n\nTITLE: Basic ER Diagram with Title in Mermaid\nDESCRIPTION: A simple entity relationship diagram showing the relationships between CUSTOMER, ORDER, and LINE-ITEM entities, with a title defined using frontmatter.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Order example\n---\nerDiagram\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ LINE-ITEM : contains\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n```\n\n----------------------------------------\n\nTITLE: Edges out of Groups in Diagrams\nDESCRIPTION: This snippet describes how to define edges from a group to another group or service within another group. It uses the `{group}` modifier after the `serviceId` on both sides of the edge to specify group context. This enables complex and flexible diagrams showing interactions. The output will show the edge emanating from or terminating at the specified group.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_9\n\nLANGUAGE: Mermaid\nCODE:\n```\nservice server[Server] in groupOne\nservice subnet[Subnet] in groupTwo\n\nserver{group}:B --> T:subnet{group}\n```\n\n----------------------------------------\n\nTITLE: Creating an Open Link\nDESCRIPTION: This snippet creates an open link (no arrow head) between two nodes, indicating a simple connection without direction.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_68\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    A --- B\n```\n\n----------------------------------------\n\nTITLE: TCP Packet Diagram Example in Mermaid\nDESCRIPTION: A comprehensive example of a TCP packet structure represented as a Mermaid packet diagram. Shows bit positions for various TCP header fields including ports, sequence numbers, flags, and data.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/packet.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: \"TCP Packet\"\n---\npacket-beta\n0-15: \"Source Port\"\n16-31: \"Destination Port\"\n32-63: \"Sequence Number\"\n64-95: \"Acknowledgment Number\"\n96-99: \"Data Offset\"\n100-105: \"Reserved\"\n106: \"URG\"\n107: \"ACK\"\n108: \"PSH\"\n109: \"RST\"\n110: \"SYN\"\n111: \"FIN\"\n112-127: \"Window\"\n128-143: \"Checksum\"\n144-159: \"Urgent Pointer\"\n160-191: \"(Options and Padding)\"\n192-255: \"Data (variable length)\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Multicolor Option with Mermaid Directive and Timeline Diagram Sample\nDESCRIPTION: Demonstrates disabling the multiColor option for Mermaid timeline diagrams using a config block directive in Mermaid markdown syntax. The frontmatter YAML sets theme variables including 'disableMulticolor: true' so that timeline colors are uniform across all time periods and events. This snippet also includes a timeline diagram following the configuration directive. It assumes Merlin rendering that supports directives and timeline diagrams. It highlights how directives can be used to control visual styling aspects declaratively.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n  timeline:\n    disableMulticolor: true\n---\n    timeline\n        title History of Social Media Platform\n          2002 : LinkedIn\n          2004 : Facebook : Google\n          2005 : YouTube\n          2006 : Twitter\n```\n\n----------------------------------------\n\nTITLE: Setting Radar Diagram Options - Markdown\nDESCRIPTION: Demonstrates how to configure optional display properties for a radar diagram, like legend visibility, scaling, graticule type, and number of ticks. These options affect the diagram's appearance and data scaling, allowing for fine tuning of the render. Input is options and data; output is a customized radar diagram. Requires radar-beta compatibility.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_10\n\nLANGUAGE: md\nCODE:\n```\nradar-beta\n  ...\n  showLegend true\n  max 100\n  min 0\n  graticule circle\n  ticks 5\n  ...\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: logLevel\nDESCRIPTION: This option sets the verbosity of Mermaid's logging output. It determines the level of detail shown in the logs, ranging from no logging to verbose tracing. The input can be a number or a string representing log level.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nlogLevel?: `0` | `2` | `1` | `\"trace\"` | `\"debug\"` | `\"info\"` | `\"warn\"` | `\"error\"` | `\"fatal\"` | `3` | `4` | `5`\n```\n\n----------------------------------------\n\nTITLE: Adding Comments in ZenUML\nDESCRIPTION: This snippet shows how to add comments to a ZenUML diagram using `// comment` syntax. Comments are rendered above messages or fragments and support Markdown formatting.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nzenuml\n    // a comment on a participant will not be rendered\n    BookService\n    // a comment on a message.\n    // **Markdown** is supported.\n    BookService.getBook()\n```\n\n----------------------------------------\n\nTITLE: Applying classDef with class Statement\nDESCRIPTION: Demonstrates how to use the class statement to apply named styles to one or more states. Shows both single state styling and multiple state styling.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_19\n\nLANGUAGE: txt\nCODE:\n```\nclass [one or more state names, separated by commas] [name of a style defined with classDef]\n```\n\nLANGUAGE: txt\nCODE:\n```\nclass Crash badBadEvent\n```\n\nLANGUAGE: txt\nCODE:\n```\nclass Moving, Crash movement\n```\n\n----------------------------------------\n\nTITLE: Registering ELK Layout Loaders in Mermaid with TypeScript\nDESCRIPTION: This TypeScript snippet shows how to import the core Mermaid library and the ELK layout package, then register the ELK layout loaders within Mermaid to enable ELK layout rendering capabilities. This registration is necessary for Mermaid to recognize and use ELK layout types when rendering diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid-layout-elk/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport mermaid from 'mermaid';\nimport elkLayouts from '@mermaid-js/layout-elk';\n\nmermaid.registerLayoutLoaders(elkLayouts);\n```\n\n----------------------------------------\n\nTITLE: GitGraph with Branch Creation in Mermaid\nDESCRIPTION: Demonstrates creating a new branch in a Git Graph, showing how commits are automatically applied to the current branch after creation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n   commit\n   commit\n   branch develop\n   commit\n   commit\n   commit\n```\n\n----------------------------------------\n\nTITLE: Customizing Tag Colors (Mermaid)\nDESCRIPTION: This Mermaid code changes tag colors in a GitGraph diagram using `tagLabelColor`, `tagLabelBackground` and `tagLabelBorder` variables.  The snippet overrides default tag colors for visual customization. The diagram uses `gitGraph` syntax to define the layout.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_36\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n    tagLabelColor: '#ff0000'\n    tagLabelBackground: '#00ff00'\n    tagLabelBorder: '#0000ff'\n---\n       gitGraph\n       commit\n       branch develop\n       commit tag:\"v1.0.0\"\n       commit\n       checkout main\n       commit type: HIGHLIGHT\n       commit\n       merge develop\n       commit\n       branch featureA\n       commit\n\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Notes to Sequence Diagram Mermaid\nDESCRIPTION: Illustrates how to add notes to a sequence diagram, positioned relative to participants. Shows how to add notes to the right of a participant. No dependencies. Expected output: A sequence diagram with a note positioned to the right of John.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant John\n    Note right of John: Text in note\n```\n\n----------------------------------------\n\nTITLE: Multi-Node Linking in a Line\nDESCRIPTION: This snippet demonstrates the ability to concisely express dependencies by linking multiple nodes to multiple others on a single line, using `A & B--> C & D` syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_31\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    A & B--> C & D\n```\n\n----------------------------------------\n\nTITLE: Flowchart with Multiline Accessible Description\nDESCRIPTION: This markdown snippet shows how to define an accessible title and multi-line description in a mermaid.js flowchart. A multi-line description starts with `accDescr {` and ends with `}` without a colon after the `accDescr` keyword.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid-example\n  graph LR\n      accTitle: Bob's Burger's Making Big Decisions\n      accDescr {\n        The official Bob's Burgers corporate processes that are used\n        for making very, very big decisions.\n        This is actually a very simple flow: identify the big decision and then make the big decision.\n         }\n      A[Identify Big Decision] --> B{Make Big Decision}\n      B --> D[Be done]\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Orientation for XY Chart (Mermaid)\nDESCRIPTION: Illustrates how to change the orientation of an XY chart from the default vertical layout to horizontal by adding the `horizontal` keyword after the `xychart-beta` declaration.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/xyChart.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nxychart-beta horizontal\n...\n```\n\n----------------------------------------\n\nTITLE: Applying the 'dark' Theme to a Mermaid GitGraph\nDESCRIPTION: Demonstrates applying the 'dark' theme suitable for dark backgrounds to a complex gitGraph diagram using configuration directives. The `theme: 'dark'` setting applies a specific color palette and style set optimized for dark interfaces.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_24\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'dark'\n---\n      gitGraph\n        commit\n        branch hotfix\n        checkout hotfix\n        commit\n        branch develop\n        checkout develop\n        commit id:\"ash\" tag:\"abc\"\n        branch featureB\n        checkout featureB\n        commit type:HIGHLIGHT\n        checkout main\n        checkout hotfix\n        commit type:NORMAL\n        checkout develop\n        commit type:REVERSE\n        checkout featureB\n        commit\n        checkout main\n        merge hotfix\n        checkout featureB\n        commit\n        checkout develop\n        branch featureA\n        commit\n        checkout develop\n        merge hotfix\n        checkout featureA\n        commit\n        checkout featureB\n        commit\n        checkout develop\n        merge featureA\n        branch release\n        checkout release\n        commit\n        checkout main\n        commit\n        checkout release\n        merge main\n        checkout develop\n        merge release\n```\n\n----------------------------------------\n\nTITLE: Example: Styling Quadrant Chart Points (Standard Mermaid Block)\nDESCRIPTION: Presents the standard Mermaid code for styling points in a quadrant chart, combining direct inline styles and predefined classes. This code is identical to the `mermaid-example` version and defines chart elements (title, axes, quadrants), points with coordinates and styles (some direct, some class-based), and class definitions (`classDef`). It illustrates the practical application and precedence of both styling methods.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/quadrantChart.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nquadrantChart\n  title Reach and engagement of campaigns\n  x-axis Low Reach --> High Reach\n  y-axis Low Engagement --> High Engagement\n  quadrant-1 We should expand\n  quadrant-2 Need to promote\n  quadrant-3 Re-evaluate\n  quadrant-4 May be improved\n  Campaign A: [0.9, 0.0] radius: 12\n  Campaign B:::class1: [0.8, 0.1] color: #ff3300, radius: 10\n  Campaign C: [0.7, 0.2] radius: 25, color: #00ff33, stroke-color: #10f0f0\n  Campaign D: [0.6, 0.3] radius: 15, stroke-color: #00ff0f, stroke-width: 5px ,color: #ff33f0\n  Campaign E:::class2: [0.5, 0.4]\n  Campaign F:::class3: [0.4, 0.5] color: #0000ff\n  classDef class1 color: #109060\n  classDef class2 color: #908342, radius : 10, stroke-color: #310085, stroke-width: 10px\n  classDef class3 color: #f00fff, radius : 10\n```\n\n----------------------------------------\n\nTITLE: Embedding Math Expressions in Mermaid Sequence Diagrams\nDESCRIPTION: Illustrates embedding LaTeX math expressions inside Mermaid sequence diagrams with interaction messages and participant names containing math notation. Mathematical expressions are wrapped in double dollar signs ($$) for KaTeX rendering. Requires Mermaid's sequenceDiagram rendering module with KaTeX enabled. Inputs are standard Mermaid sequence diagram commands enriched with math delimiters; outputs are sequence diagrams displaying formatted math expressions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/math.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant 1 as $$\\alpha$$\n    participant 2 as $$\\beta$$\n    1->>2: Solve: $$\\sqrt{2+2}$$\n    2-->>1: Answer: $$2$$\n    Note right of 2: $$\\sqrt{2+2}=\\sqrt{4}=2$$\n```\n\n----------------------------------------\n\nTITLE: Customizing Tag Colors (Mermaid)\nDESCRIPTION: This Mermaid code changes tag colors in a GitGraph diagram using `tagLabelColor`, `tagLabelBackground` and `tagLabelBorder` variables.  The snippet overrides default tag colors for visual customization. The diagram uses `gitGraph` syntax to define the layout.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_35\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid-example\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n    tagLabelColor: '#ff0000'\n    tagLabelBackground: '#00ff00'\n    tagLabelBorder: '#0000ff'\n---\n       gitGraph\n       commit\n       branch develop\n       commit tag:\"v1.0.0\"\n       commit\n       checkout main\n       commit type: HIGHLIGHT\n       commit\n       merge develop\n       commit\n       branch featureA\n       commit\n\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Timeline Gantt Diagram with Custom Config and Comments in Mermaid\nDESCRIPTION: Demonstrates the use of YAML frontmatter for advanced Mermaid Gantt chart configuration, including variables for display mode, top axis, custom CSS, and section styling. The Mermaid source includes comments, tick interval, milestones, and vertical markers, plus references to custom objects. Inputs: frontmatter config and diagram definition within a Markdown-like environment that supports frontmatter. Outputs: timeline Gantt diagram with sections and milestones. Limitations: Frontmatter config is only parsed by certain Mermaid integrations or compatible markdown processors.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\n---\n    # Frontmatter config, YAML comments\n    title: Ignored if specified in chart\n    displayMode: compact     #gantt specific setting but works at this level too\n    config:\n#        theme: forest\n#        themeCSS: \" #item36 { fill: CadetBlue } \"\n        themeCSS: \" // YAML supports multiline strings using a newline markers: \\n\n            #item36 { fill: CadetBlue }       \\n\n            // Custom marker workaround CSS from forum (below)    \\n\n            rect[id^=workaround] { height: calc(100% - 50px) ; transform: translate(9px, 25px); y: 0; width: 1.5px; stroke: none; fill: red; }   \\n\n            text[id^=workaround] { fill: red; y: 100%; font-size: 15px;}\n        \"\n        gantt:\n            useWidth: 400\n            rightPadding: 0\n            topAxis: true  #false\n            numberSectionStyles: 2\n---\ngantt\n    title Timeline - Gantt Sampler\n    dateFormat YYYY\n    axisFormat %y\n    %% this next line doesn't recognise 'decade' or 'year', but will silently ignore\n    tickInterval 1decade\n\n    section Issue19062\n    71   :            item71, 1900, 1930\n    section Issue19401\n    36   :            item36, 1913, 1935\n    section Issue1300\n    94   :            item94, 1910, 1915\n    5    :            item5,  1920, 1925\n    0    : milestone, item0,  1918, 1s\n    9    : vert,              1906, 1s   %% not yet official\n    64   : workaround,        1923, 1s   %% custom CSS object https://github.com/mermaid-js/mermaid/issues/3250\n```\n\n----------------------------------------\n\nTITLE: JISON Grammar Example - Accessibility Title/Description\nDESCRIPTION: This JISON grammar defines the syntax for accessibility title and description using keywords like `accTitle` and `accDescr`. It also shows how these values are associated with setter functions (e.g., `setTitle`, `setAccDescription`) in the `yy` object, enabling the storage and utilization of accessibility information.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram-jison.md#_snippet_6\n\nLANGUAGE: jison\nCODE:\n```\n\n* lexical grammar */\n%lex\n%x acc_title\n%x acc_descr\n%x acc_descr_multiline\n\n%%\naccTitle\\s*\":\"\\s*                                { this.begin(\"acc_title\");return 'acc_title'; }\n<acc_title>(?!\\n|;|#)*[^\\n]*                     { this.popState(); return \"acc_title_value\"; }\naccDescr\\s*\":\"\\s*                                { this.begin(\"acc_descr\");return 'acc_descr'; }\n<acc_descr>(?!\\n|;|#)*[^\\n]*                     { this.popState(); return \"acc_descr_value\"; }\naccDescr\\s*\"{\"\\s*                                { this.begin(\"acc_descr_multiline\");}\n<acc_descr_multiline>[\\}]                        { this.popState(); }\n<acc_descr_multiline>[^\\}]*                      return \"acc_descr_multiline_value\";\n\nstatement\n    : acc_title acc_title_value  { $$=$2.trim();yy.setTitle($$); }\n    | acc_descr acc_descr_value  { $$=$2.trim();yy.setAccDescription($$); }\n    | acc_descr_multiline_value { $$=$1.trim();yy.setAccDescription($$); }\n\n```\n\n----------------------------------------\n\nTITLE: Square Shape in Mindmap\nDESCRIPTION: This code snippet demonstrates the usage of a square shape for a node in a mindmap diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nmindmap\n    id[I am a square]\n```\n\n----------------------------------------\n\nTITLE: Registering a New Shape in Mermaid.js\nDESCRIPTION: Shows how to register a new shape in the main shapes module, providing semantic name, handler function, and aliases to make it available in diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/adding-new-shape.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { myNewShape } from './shapes/myNewShape';\n\nconst shapes = {\n  ...,\n  {\n    semanticName: 'My Shape',\n    name: 'Shape Name',\n    shortName: '<short-name>',\n    description: '<Description for the shape>',\n    aliases: ['<alias-one>', '<al-on>', '<alias-two>', '<al-two>'],\n    handler: myNewShape,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Stacked Participant Activations - Mermaid\nDESCRIPTION: Shows how multiple activations can be stacked on a participant's lifeline. This is useful for illustrating nested calls or concurrent activities within a single participant.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    John-->>-Alice: I feel great!\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporal Commits (Default Behavior)\nDESCRIPTION: Demonstrates the default temporal commit rendering in Mermaid Git Graphs by explicitly setting `parallelCommits: false` within a configuration block. Commits made earlier appear closer to their parent.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_19\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  gitGraph:\n    parallelCommits: false\n---\ngitGraph:\n  commit\n  branch develop\n  commit\n  commit\n  checkout main\n  commit\n  commit\n```\n\n----------------------------------------\n\nTITLE: JavaScript Parser Initialization\nDESCRIPTION: This JavaScript code demonstrates how to initialize the `yy` object within a parser with a data object (`db`). This allows the parser to store the data encountered during parsing within the `db` object, which is then used by the renderer. The `yy` object provides a communication channel between the parser and the data storage mechanism.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram-jison.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst parser = exampleParser.parser;\nparser.yy = db;\n```\n\n----------------------------------------\n\nTITLE: GitGraph with Branch Checkout in Mermaid\nDESCRIPTION: Illustrates how to switch between branches in a Git Graph using the checkout command, showing commits being applied to different branches.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n   commit\n   commit\n   branch develop\n   commit\n   commit\n   commit\n   checkout main\n   commit\n   commit\n```\n\n----------------------------------------\n\nTITLE: Configuring Packet Diagram Appearance in Mermaid\nDESCRIPTION: Demonstrates configuring a Mermaid Packet Diagram using YAML frontmatter. This example sets `showBits` to true under the `packet` configuration key and attempts to set a theme variable `startByteColor` (though theme variables are noted as potentially buggy in the surrounding text). The diagram itself shows a simplified packet structure.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/packet.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  packet:\n    showBits: true\n  themeVariables:\n    packet:\n      startByteColor: red\n---\npacket-beta\n0-15: \"Source Port\"\n16-31: \"Destination Port\"\n32-63: \"Sequence Number\"\n```\n\n----------------------------------------\n\nTITLE: Defining 90-degree Edge in Architecture Diagram\nDESCRIPTION: This snippet demonstrates how to define a 90-degree edge between services. It uses the syntax of `serviceId:T|B|L|R -- L|R|T|B:serviceId`, indicating the start and end directions of the connection. The output visualizes a connection coming from the top of `db` and going into the left side of `server`. This configuration demonstrates edge directional customization.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_7\n\nLANGUAGE: Mermaid\nCODE:\n```\ndb:T -- L:server\n```\n\n----------------------------------------\n\nTITLE: Registering a New Custom Shape in TypeScript\nDESCRIPTION: Illustrates how to register a newly created custom shape (`myNewShape`) within the Mermaid.js system. This involves importing the shape function and adding an entry to the `shapes` configuration object with properties like `semanticName`, `name`, `shortName`, `description`, `aliases`, and the `handler` function.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/adding-new-shape.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { myNewShape } from './shapes/myNewShape';\n\nconst shapes = {\n  ...,\n  {\n    semanticName: 'My Shape',\n    name: 'Shape Name',\n    shortName: '<short-name>',\n    description: '<Description for the shape>',\n    aliases: ['<alias-one>', '<al-on>', '<alias-two>', '<al-two>'],\n    handler: myNewShape,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ER Diagram with Entity Attributes in Mermaid\nDESCRIPTION: An extended entity relationship diagram that includes attribute definitions for each entity, showing their data types and names.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    CUSTOMER ||--o{ ORDER : places\n    CUSTOMER {\n        string name\n        string custNumber\n        string sector\n    }\n    ORDER ||--|{ LINE-ITEM : contains\n    ORDER {\n        int orderNumber\n        string deliveryAddress\n    }\n    LINE-ITEM {\n        string productCode\n        int quantity\n        float pricePerUnit\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Cylinder\nDESCRIPTION: This snippet demonstrates creating a cylindrical node, typically representing a database, using the `@{ shape: cyl }` syntax in Mermaid.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_24\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: cyl, label: \"Database\" }\n```\n\n----------------------------------------\n\nTITLE: Rendering Math Expressions in Mermaid Flowcharts Using Mermaid Syntax\nDESCRIPTION: Demonstrates embedding LaTeX math expressions within a Mermaid flowchart diagram using the Mermaid diagram syntax. Mathematical expressions are delimited by double dollar signs ($$) to be rendered by KaTeX. This snippet shows node labels and edge labels containing various math formulas. Requires Mermaid configured with KaTeX enabled for rendering; no additional dependencies besides Mermaid. Input consists of Mermaid flowchart diagram code including math delimiters; output is a flowchart with rendered mathematical expressions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/math.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n graph LR\n      A[\"$$x^2$$\"] -->|\"$$\\sqrt{x+3}$$\"| B(\"$$\\frac{1}{2}$$\")\n      A -->|\"$$\\overbrace{a+b+c}^{\\text{note}}$$\"| C(\"$$\\pi r^2$$\")\n      B --> D(\"$$x = \\begin{cases} a &\\text{if } b \\\\ c &\\text{if } d \\end{cases}$$\")\n      C --> E(\"$$x(t)=c_1\\begin{bmatrix}-\\cos{t}+\\sin{t}\\\\ 2\\cos{t} \\end{bmatrix}e^{2t}$$\")\n```\n\n----------------------------------------\n\nTITLE: classDef with Multiple Styles\nDESCRIPTION: Demonstrates how to apply multiple styles to classDef.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_18\n\nLANGUAGE: txt\nCODE:\n```\nclassDef badBadEvent fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n```\n\n----------------------------------------\n\nTITLE: Aliases for Actors/Participants in Mermaid\nDESCRIPTION: Shows how to define aliases for actors or participants.  This allows using shorter identifiers in the diagram while displaying more descriptive labels. No dependencies. Expected output: A sequence diagram with Alice and John identified by 'A' and 'J' respectively.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant A as Alice\n    participant J as John\n    A->>J: Hello John, how are you?\n    J->>A: Great!\n```\n\n----------------------------------------\n\nTITLE: Applying the 'base' Theme to a Mermaid GitGraph\nDESCRIPTION: Example of applying the 'base' theme to a complex gitGraph diagram using configuration directives. The `theme: 'base'` setting modifies the visual appearance (colors, styles) of the graph.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_21\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n---\n      gitGraph\n        commit\n        branch hotfix\n        checkout hotfix\n        commit\n        branch develop\n        checkout develop\n        commit id:\"ash\" tag:\"abc\"\n        branch featureB\n        checkout featureB\n        commit type:HIGHLIGHT\n        checkout main\n        checkout hotfix\n        commit type:NORMAL\n        checkout develop\n        commit type:REVERSE\n        checkout featureB\n        commit\n        checkout main\n        merge hotfix\n        checkout featureB\n        commit\n        checkout develop\n        branch featureA\n        commit\n        checkout develop\n        merge hotfix\n        checkout featureA\n        commit\n        checkout featureB\n        commit\n        checkout develop\n        merge featureA\n        branch release\n        checkout release\n        commit\n        checkout main\n        commit\n        checkout release\n        merge main\n        checkout develop\n        merge release\n```\n\n----------------------------------------\n\nTITLE: Creating a Terminal Point (Stadium Shape) in Mermaid Flowchart (mermaid)\nDESCRIPTION: This Mermaid code defines a flowchart node as a 'stadium' (pill) shape, labeled 'Terminal point', in a top-down configuration. It highlights representing terminal or endpoint semantics in flowcharts via the stadium node type. Input is a node using shape and label; output is a customized Mermaid diagram. Mermaid must be enabled for custom shapes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: stadium, label: \"Terminal point\" }\n```\n\n----------------------------------------\n\nTITLE: Creating an Alternate Parallelogram Node in Mermaid\nDESCRIPTION: This snippet demonstrates how to create an alternative parallelogram shape.  The text is enclosed in backslashes `\\`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_15\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    id1[\\This is the text in the box\\]\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Manual Input\nDESCRIPTION: This snippet creates shape for Manual Input node.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_57\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: sl-rect, label: \"Manual input\" }\n```\n\n----------------------------------------\n\nTITLE: User Journey Diagram in Mermaid\nDESCRIPTION: Depicts a simple user journey titled 'My working day' with sections for going to work and returning home. Activities are labeled with duration and participants, assisting in process mapping.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\njourney\n  title My working day\n  section Go to work\n    Make tea: 5: Me\n    Go upstairs: 3: Me\n    Do work: 1: Me, Cat\n  section Go home\n    Go downstairs: 5: Me\n    Sit down: 5: Me\n```\n\n----------------------------------------\n\nTITLE: Creating a Sequence Diagram with Accessibility Metadata in Mermaid-js\nDESCRIPTION: This snippet defines a sequence diagram illustrating interactions between Alice and John, with an accessibility title and description. It uses Mermaid.js sequence syntax to depict message exchanges, suitable for illustrating process flows with accessible annotations.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\n   sequenceDiagram\n      accTitle: My Sequence Diagram\n      accDescr: My Sequence Diagram Description\n\n      Alice->>John: Hello John, how are you?\n      John-->>Alice: Great!\n      Alice-)John: See you later!\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Class Styles in Mermaid Class Diagrams\nDESCRIPTION: This code snippet demonstrates how to define multiple classes with the same style properties or defining a class and applying the styles to the specified nodes. It also demonstrates styling nodes with the same properties.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_27\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class Animal:::someclass {\n        -int sizeInFeet\n        -canEat()\n    }\n    classDef someclass fill:#f96\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Column Diagram with Blocks\nDESCRIPTION: This snippet demonstrates the syntax for creating a block diagram with multiple columns, using the `columns` directive and arranging blocks accordingly. It shows how blocks wrap to the next row when there are more blocks than the number of columns.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/block.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n```mermaid-example\nblock-beta\n  columns 3\n  a b c d\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Long Text and Forced Line Breaks in Mermaid Timeline Events\nDESCRIPTION: Illustrates Mermaid timeline syntax usage when time periods or events contain long descriptive text. Text wrapping is automatic to prevent overflow, but forced line breaks can be inserted using the HTML '<br>' tag within text strings. The snippet includes multiple time periods and events with embedded '<br>' for formatting multiline text in events. This example demonstrates flexibility in textual detail and uses standard Mermaid DSL with no extra dependencies.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ntimeline\n        title England's History Timeline\n        section Stone Age\n          7600 BC : Britain's oldest known house was built in Orkney, Scotland\n          6000 BC : Sea levels rise and Britain becomes an island.<br> The people who live here are hunter-gatherers.\n        section Bronze Age\n          2300 BC : People arrive from Europe and settle in Britain. <br>They bring farming and metalworking.\n                  : New styles of pottery and ways of burying the dead appear.\n          2200 BC : The last major building works are completed at Stonehenge.<br> People now bury their dead in stone circles.\n                  : The first metal objects are made in Britain.Some other nice things happen. it is a good time to be alive.\n```\n\n----------------------------------------\n\nTITLE: Including Font Awesome CSS via CDN in HTML\nDESCRIPTION: Adds support for Font Awesome icons in Mermaid diagrams by linking the required CSS file from a CDN within the HTML document's `<head>` section. This example uses version 6.5.1.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_116\n\nLANGUAGE: html\nCODE:\n```\n<link\n  href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css\"\n  rel=\"stylesheet\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Example of Cookie Callback Function\nDESCRIPTION: Provides JavaScript code snippet for defining a callback function triggered by node clicks, demonstrating how to integrate custom behavior with Mermaid diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_51\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  window.callback = function () {\n    alert('A callback was triggered');\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequence Numbers in Mermaid via JavaScript\nDESCRIPTION: Shows how to enable automatic sequence numbering for arrows in Mermaid diagrams globally by setting the `showSequenceNumbers` option to `true` within the `mermaid.initialize` configuration object in HTML/JavaScript.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  mermaid.initialize({ sequence: { showSequenceNumbers: true } });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Subgraphs with Explicit IDs\nDESCRIPTION: Demonstrates creating subgraphs and assigning explicit ids using the following syntax:\n`subgraph ide1 [one]\n    a1-->a2\nend`\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_43\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    c1-->a2\n    subgraph ide1 [one]\n    a1-->a2\n    end\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Mermaid Mindmap Nodes\nDESCRIPTION: Demonstrates how to attach icons to mindmap nodes using the `::icon(...)` syntax. The classes for the icon font (e.g., `fa fa-book` for Font Awesome, `mdi mdi-skull-outline` for Material Design Icons) are placed within the parentheses. Requires the icon font resources to be available.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_9\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    Root\n        A\n        ::icon(fa fa-book)\n        B(B)\n        ::icon(mdi mdi-skull-outline)\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    Root\n        A\n        ::icon(fa fa-book)\n        B(B)\n        ::icon(mdi mdi-skull-outline)\n```\n\n----------------------------------------\n\nTITLE: Generating a Sankey Diagram\nDESCRIPTION: This code block provides the definition of a Sankey diagram using Mermaid.js syntax. It utilizes the `sankey-beta` keyword followed by a block of CSV data.  The data is parsed by the Mermaid.js library to generate a visual representation of a flow diagram. The configuration options in the YAML header are used to configure rendering behavior.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_1\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid\n---\nconfig:\n  sankey:\n    showValues: false\n---\nsankey-beta\n\nAgricultural 'waste',Bio-conversion,124.729\nBio-conversion,Liquid,0.597\nBio-conversion,Losses,26.862\nBio-conversion,Solid,280.322\nBio-conversion,Gas,81.144\nBiofuel imports,Liquid,35\nBiomass imports,Solid,35\nCoal imports,Coal,11.606\nCoal reserves,Coal,63.965\nCoal,Solid,75.571\nDistrict heating,Industry,10.639\nDistrict heating,Heating and cooling - commercial,22.505\nDistrict heating,Heating and cooling - homes,46.184\nElectricity grid,Over generation / exports,104.453\nElectricity grid,Heating and cooling - homes,113.726\nElectricity grid,H2 conversion,27.14\nElectricity grid,Industry,342.165\nElectricity grid,Road transport,37.797\nElectricity grid,Agriculture,4.412\nElectricity grid,Heating and cooling - commercial,40.858\nElectricity grid,Losses,56.691\nElectricity grid,Rail transport,7.863\nElectricity grid,Lighting & appliances - commercial,90.008\nElectricity grid,Lighting & appliances - homes,93.494\nGas imports,Ngas,40.719\nGas reserves,Ngas,82.233\nGas,Heating and cooling - commercial,0.129\nGas,Losses,1.401\nGas,Thermal generation,151.891\nGas,Agriculture,2.096\nGas,Industry,48.58\nGeothermal,Electricity grid,7.013\nH2 conversion,H2,20.897\nH2 conversion,Losses,6.242\nH2,Road transport,20.897\nHydro,Electricity grid,6.995\nLiquid,Industry,121.066\nLiquid,International shipping,128.69\nLiquid,Road transport,135.835\nLiquid,Domestic aviation,14.458\nLiquid,International aviation,206.267\nLiquid,Agriculture,3.64\nLiquid,National navigation,33.218\nLiquid,Rail transport,4.413\nMarine algae,Bio-conversion,4.375\nNgas,Gas,122.952\nNuclear,Thermal generation,839.978\nOil imports,Oil,504.287\nOil reserves,Oil,107.703\nOil,Liquid,611.99\nOther waste,Solid,56.587\nOther waste,Bio-conversion,77.81\nPumped heat,Heating and cooling - homes,193.026\nPumped heat,Heating and cooling - commercial,70.672\nSolar PV,Electricity grid,59.901\nSolar Thermal,Heating and cooling - homes,19.263\nSolar,Solar Thermal,19.263\nSolar,Solar PV,59.901\nSolid,Agriculture,0.882\nSolid,Thermal generation,400.12\nSolid,Industry,46.477\nThermal generation,Electricity grid,525.531\nThermal generation,Losses,787.129\nThermal generation,District heating,79.329\nTidal,Electricity grid,9.452\nUK land based bioenergy,Bio-conversion,182.01\nWave,Electricity grid,19.013\nWind,Electricity grid,289.366\n```\n```\n\n----------------------------------------\n\nTITLE: Mermaid Initialization Sequence Using Mermaid Syntax\nDESCRIPTION: This snippet illustrates the high-level initialization sequence of Mermaid using a sequence diagram in Mermaid syntax. It shows the site invoking the initialize method on Mermaid, followed by content loading, which triggers Mermaid's internal API initialization (mermaidAPI.init). This clarifies the order and responsibilities during the setup phase and indicates that the 'initialize' method is called only once by the site integrator to set up site-level configuration overrides.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/configuration.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\tSite->>mermaid: initialize\n\tSite->>mermaid: content loaded\n\tmermaid->>mermaidAPI: init\n```\n\n----------------------------------------\n\nTITLE: Creating a TCP Packet Diagram in Mermaid\nDESCRIPTION: Example demonstrating the creation of a TCP packet structure visualization using Mermaid's `packet-beta` syntax. Each line defines a field with its corresponding bit range (e.g., `0-15`) and a descriptive label (e.g., \"Source Port\"). A title for the diagram is provided via YAML frontmatter.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/packet.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: \"TCP Packet\"\n---\npacket-beta\n0-15: \"Source Port\"\n16-31: \"Destination Port\"\n32-63: \"Sequence Number\"\n64-95: \"Acknowledgment Number\"\n96-99: \"Data Offset\"\n100-105: \"Reserved\"\n106: \"URG\"\n107: \"ACK\"\n108: \"PSH\"\n109: \"RST\"\n110: \"SYN\"\n111: \"FIN\"\n112-127: \"Window\"\n128-143: \"Checksum\"\n144-159: \"Urgent Pointer\"\n160-191: \"(Options and Padding)\"\n192-255: \"Data (variable length)\"\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple `init`/`initialize` Directives\nDESCRIPTION: Illustrates how multiple `init` or `initialize` directives within the same Mermaid definition are parsed and merged. Later directives override values set by earlier ones for the same key.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { 'logLevel': 'debug', 'theme': 'forest' } }%%\n%%{initialize: { 'logLevel': 'fatal', \"theme\":'dark', 'startOnLoad': true } }%%\n...\n```\n\n----------------------------------------\n\nTITLE: Changing Diagram Direction in Mermaid\nDESCRIPTION: Shows how to use the `direction` statement at the beginning of the diagram definition to change the rendering orientation. This example uses `LR` to render the diagram from Left to Right, overriding the default Top to Bottom direction.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/requirementDiagram.md#_snippet_3\n\nLANGUAGE: Mermaid\nCODE:\n```\nrequirementDiagram\n\ndirection LR\n\nrequirement test_req {\n    id: 1\n    text: the test text.\n    risk: high\n    verifymethod: test\n}\n\nelement test_entity {\n    type: simulation\n}\n\ntest_entity - satisfies -> test_req\n```\n\n----------------------------------------\n\nTITLE: Rendering Mermaid Timeline Diagrams Using Different Pre-defined Themes\nDESCRIPTION: Presents example snippets demonstrating how a timeline diagram appears under various pre-defined Mermaid themes including 'base', 'forest', and 'dark'. Each snippet includes a config directive that sets the desired theme and a timeline diagram depicting the same social media history data. This highlights the impact of theme selection on timeline color and style. These snippets require Mermaid setup supporting frontmatter configs and the predefined theme packages.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n---\n    timeline\n        title History of Social Media Platform\n          2002 : LinkedIn\n          2004 : Facebook : Google\n          2005 : YouTube\n          2006 : Twitter\n          2007 : Tumblr\n          2008 : Instagram\n          2010 : Pinterest\n```\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'forest'\n---\n    timeline\n        title History of Social Media Platform\n          2002 : LinkedIn\n          2004 : Facebook : Google\n          2005 : YouTube\n          2006 : Twitter\n          2007 : Tumblr\n          2008 : Instagram\n          2010 : Pinterest\n```\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'dark'\n---\n    timeline\n        title History of Social Media Platform\n          2002 : LinkedIn\n          2004 : Facebook : Google\n          2005 : YouTube\n          2006 : Twitter\n          2007 : Tumblr\n          2008 : Instagram\n          2010 : Pinterest\n```\n\n----------------------------------------\n\nTITLE: Defining ER Diagram Entities with Attributes, Keys, and Comments in Mermaid\nDESCRIPTION: Demonstrates defining entities (CAR, PERSON, NAMED-DRIVER, MANUFACTURER) in a Mermaid ER diagram. It shows how to specify attributes with data types, assign Primary Keys (PK), Foreign Keys (FK), Unique Keys (UK) using specific keywords, and add comments in double quotes at the end of an attribute line. It also illustrates defining relationships between entities.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_8\n\nLANGUAGE: mermaid-example\nCODE:\n```\nerDiagram\n    CAR ||--o{ NAMED-DRIVER : allows\n    CAR {\n        string registrationNumber PK\n        string make\n        string model\n        string[] parts\n    }\n    PERSON ||--o{ NAMED-DRIVER : is\n    PERSON {\n        string driversLicense PK \"The license #\"\n        string(99) firstName \"Only 99 characters are allowed\"\n        string lastName\n        string phone UK\n        int age\n    }\n    NAMED-DRIVER {\n        string carRegistrationNumber PK, FK\n        string driverLicence PK, FK\n    }\n    MANUFACTURER only one to zero or more CAR : makes\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Wrapping of Markdown Labels\nDESCRIPTION: Explains how to disable automatic line wrapping in markdown labels by setting 'markdownAutoWrap: false' in Mermaid configuration, providing control over label text flow.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_49\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  markdownAutoWrap: false\n---\ngraph LR\n```\n\n----------------------------------------\n\nTITLE: Mermaid ER Diagram Example with ELK Layout Configuration\nDESCRIPTION: Provides an example of a Mermaid ER diagram definition that includes YAML frontmatter. The frontmatter specifies a diagram `title` and configures the layout engine to use ELK via `config: { layout: elk }`. Using ELK layout requires Mermaid version 9.4+ and enabling the feature in lazy-loading configuration.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_16\n\nLANGUAGE: mermaid-example\nCODE:\n```\n---\ntitle: Order example\nconfig:\n    layout: elk\n---\nerDiagram\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ LINE-ITEM : contains\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Internal Storage\nDESCRIPTION: This snippet creates shape for Internal Storage.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_52\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: win-pane, label: \"Internal storage\" }\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using PNPM\nDESCRIPTION: Shows the command `pnpm install` used to install all necessary project dependencies defined in the package manager configuration (likely `package.json` and `pnpm-lock.yaml`). This step is typically required before running tests or building the project.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/adding-new-shape.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Making the run script executable\nDESCRIPTION: Modifies the permissions of the `./run` script to make it executable. This is necessary to run the script directly, which provides aliases for Docker Compose commands.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x run\n```\n\n----------------------------------------\n\nTITLE: Applying Background Highlighting in Mermaid Sequence Diagrams\nDESCRIPTION: Shows how to use the `rect rgb(...)` or `rect rgba(...)` syntax in Mermaid to highlight specific sections of a sequence diagram with a colored background rectangle. Nested rectangles are also possible for layered highlighting.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_20\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Alice\n    participant John\n\n    rect rgb(191, 223, 255)\n    note right of Alice: Alice calls John.\n    Alice->>+John: Hello John, how are you?\n    rect rgb(200, 150, 255)\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    end\n    John-->>-Alice: I feel great!\n    end\n    Alice ->>+ John: Did you want to go to the game tonight?\n    John -->>- Alice: Yeah! See you there.\n```\n\n----------------------------------------\n\nTITLE: Modeling a User Journey Diagram with Mermaid JavaScript\nDESCRIPTION: This snippet demonstrates the Mermaid journey syntax for visualizing user journeys or workflows, divided into sections with rated steps and participants. Dependencies are limited to Mermaid. It takes a series of labeled actions with ratings and assigned actors as input, generating a process visualization. Limitations include fixed rating markers and display constraints of Mermaid's journey diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\n  journey\n    title My working day\n    section Go to work\n      Make tea: 5: Me\n      Go upstairs: 3: Me\n      Do work: 1: Me, Cat\n    section Go home\n      Go downstairs: 5: Me\n      Sit down: 3: Me\n```\n\n----------------------------------------\n\nTITLE: Escaping Characters with Entity Codes\nDESCRIPTION: Shows how to escape characters using entity codes. Uses `#quot;` for double quotes and `#9829;` for a decimal character.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_41\n\nLANGUAGE: mermaid\nCODE:\n```\n    flowchart LR\n        A[\"A double quote:#quot;\"] --> B[\"A dec char:#9829;\"]\n```\n\n----------------------------------------\n\nTITLE: Checking for X11 Server\nDESCRIPTION: This command checks if an X11 server is running. It's required for running GUI applications like Cypress within a Docker environment. The output is the value of the `$DISPLAY` environment variable. An empty value indicates that no X11 server is running.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho $DISPLAY\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Kanban Diagram in Mermaid Syntax\nDESCRIPTION: Illustrates the minimal Mermaid syntax required to define a Kanban diagram with one column and one task. The example includes the 'kanban' keyword followed by a column definition using a unique identifier and title, and a task indented under the column with its own identifier and description.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/kanban.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nkanban\n  column1[Column Title]\n    task1[Task Description]\n```\n\n----------------------------------------\n\nTITLE: Depicting Parallel Execution in ZenUML Sequence Diagrams Using zenuml\nDESCRIPTION: Illustrates how to represent parallel actions within a sequence diagram using the 'par' block. Multiple messages within the par block represent concurrent interactions executed simultaneously.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_14\n\nLANGUAGE: zenuml\nCODE:\n```\npar {\n    Alice->Bob: Hello guys!\n    Alice->John: Hello guys!\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Comments to Mermaid Gantt Charts\nDESCRIPTION: This code snippet illustrates how to add comments within a Mermaid Gantt chart. Comments are ignored by the parser and are denoted by `%%` at the beginning of a line. This allows for adding annotations and explanations directly within the chart definition.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n    title A Gantt Diagram\n    %% This is a comment\n    dateFormat YYYY-MM-DD\n    section Section\n        A task          :a1, 2014-01-01, 30d\n        Another task    :after a1, 20d\n    section Another\n        Task in Another :2014-01-12, 12d\n        another task    :24d\n```\n\n----------------------------------------\n\nTITLE: ER Diagram with Relationship Aliases in Mermaid\nDESCRIPTION: An example of using relationship aliases like 'to' and 'many(0)' instead of crow's foot notation to define cardinality.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    CAR 1 to zero or more NAMED-DRIVER : allows\n    PERSON many(0) optionally to 0+ NAMED-DRIVER : is\n```\n\n----------------------------------------\n\nTITLE: Styling Nodes in Mermaid Class Diagrams\nDESCRIPTION: This snippet shows how to style individual nodes in a Mermaid class diagram using the `style` keyword.  The snippet applies specific fill, stroke, stroke-width, color and stroke-dasharray to nodes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_25\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n  class Animal\n  class Mineral\n  style Animal fill:#f9f,stroke:#333,stroke-width:4px\n  style Mineral fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Multiple Custom Shapes in Mermaid Flowchart (mermaid)\nDESCRIPTION: This Mermaid snippet visualizes a right-to-left flowchart with five nodes, each utilizing a newly specified shape attribute: manual-file, manual-input, docs, procs, and paper-tape. The snippet uses the enhanced node definition syntax with shape and label parameters, showcasing real-world usage of custom node types. Compatible with Mermaid flows supporting custom shapes. Input consists of node assignments with shape and label; output is a diagram with corresponding custom-shaped nodes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart RL\n    A@{ shape: manual-file, label: \"File Handling\"}\n    B@{ shape: manual-input, label: \"User Input\"}\n    C@{ shape: docs, label: \"Multiple Documents\"}\n    D@{ shape: procs, label: \"Process Automation\"}\n    E@{ shape: paper-tape, label: \"Paper Records\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gantt Chart Rendering Options via JavaScript\nDESCRIPTION: Shows how to adjust advanced rendering parameters for Mermaid Gantt diagrams by setting the mermaid.ganttConfig object in JavaScript. Key configuration options include margins, bar height, section font size, axis format, tick intervals, and display mode. Place this snippet in a JavaScript context before initializing Mermaid. Inputs: configuration object properties (see individual keys in code). Outputs: affects all subsequently rendered Gantt charts. Dependency: Mermaid.js must be loaded in the environment.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid.ganttConfig = {\n  titleTopMargin: 25, // Margin top for the text over the diagram\n  barHeight: 20, // The height of the bars in the graph\n  barGap: 4, // The margin between the different activities in the gantt diagram\n  topPadding: 75, // Margin between title and gantt diagram and between axis and gantt diagram.\n  rightPadding: 75, // The space allocated for the section name to the right of the activities\n  leftPadding: 75, // The space allocated for the section name to the left of the activities\n  gridLineStartPadding: 10, // Vertical starting position of the grid lines\n  fontSize: 12, // Font size\n  sectionFontSize: 24, // Font size for sections\n  numberSectionStyles: 1, // The number of alternating section styles\n  axisFormat: '%d/%m', // Date/time format of the axis\n  tickInterval: '1week', // Axis ticks\n  topAxis: true, // When this flag is set, date labels will be added to the top of the chart\n  displayMode: 'compact', // Turns compact mode on\n  weekday: 'sunday', // On which day a week-based interval should start\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Class Members with Brackets Syntax\nDESCRIPTION: This snippet shows an alternative way to define class members using curly brackets (`{}`) to group multiple members at once.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclass BankAccount{\n    +String owner\n    +BigDecimal balance\n    +deposit(amount)\n    +withdrawal(amount)\n}\n```\n\n----------------------------------------\n\nTITLE: Init Directive Example\nDESCRIPTION: This example shows how to use the init directive to modify Mermaid configurations.  It sets the theme to \"default\" and the logLevel to 1. The directive is enclosed in `%%{ }%%` and the JSON object passed as the argument must be valid and properly quoted to be parsed correctly.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/8.6.0_docs.md#_snippet_1\n\nLANGUAGE: Mermaid\nCODE:\n```\n%%{init: {\"theme\": \"default\", \"logLevel\": 1 }}%%\n```\n\n----------------------------------------\n\nTITLE: Example of Using SVG Shape Utilities in TypeScript\nDESCRIPTION: Demonstrates basic usage of the shape utilities to insert a polygon shape and add a label inside a SVG container.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/adding-new-shape.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { labelHelper, insertPolygonShape } from './utils.ts';\n\nconst svgContainer = document.getElementById('svgContainer');\n\n// Insert a polygon shape\ninsertPolygonShape(svgContainer /* shape-specific parameters */);\n\n// Create and insert a label inside the shape\nlabelHelper(svgContainer /* label-specific parameters */);\n```\n\n----------------------------------------\n\nTITLE: Modeling Concurrency with Parallel States (-- Symbol)\nDESCRIPTION: Depicts concurrent regions within a state diagram by using '--' to split parallel paths, such as toggling different locks simultaneously.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_16\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> Active\n\n    state Active {\n        [*] --> NumLockOff\n        NumLockOff --> NumLockOn : EvNumLockPressed\n        NumLockOn --> NumLockOff : EvNumLockPressed\n        --\n        [*] --> CapsLockOff\n        CapsLockOff --> CapsLockOn : EvCapsLockPressed\n        CapsLockOn --> CapsLockOff : EvCapsLockPressed\n        --\n        [*] --> ScrollLockOff\n        ScrollLockOff --> ScrollLockOn : EvScrollLockPressed\n        ScrollLockOn --> ScrollLockOff : EvScrollLockPressed\n    }\n```\n\n----------------------------------------\n\nTITLE: Styling Relationship Example - UpdateRelStyle\nDESCRIPTION: This code demonstrates how to style relationships in a Mermaid C4 diagram using the UpdateRelStyle function. It updates the text color, line color, and offset of the relationship between elements.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/c4.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nUpdateRelStyle(customerA, bankA, \"red\", \"blue\", \"-40\", \"60\")\nUpdateRelStyle(customerA, bankA, $offsetX=\"-40\", $offsetY=\"60\", $lineColor=\"blue\", $textColor=\"red\")\nUpdateRelStyle(customerA, bankA, $offsetY=\"60\")\n```\n\n----------------------------------------\n\nTITLE: Changing Sequence Config in Mermaid Diagram\nDESCRIPTION: This example applies a sequence diagram configuration (`wrap: true`) using a directive.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_14\n\nLANGUAGE: Mermaid\nCODE:\n```\n%%{init: { \"sequence\": { \"wrap\": true, \"width\":300 } } }%%\nsequenceDiagram\nAlice->Bob: Hello Bob, how are you?\nBob->Alice: Fine, how did your mother like the book I suggested? And did you catch the new book about alien invasion?\nAlice->Bob: Good.\nBob->Alice: Cool\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\n%%{init: { \"sequence\": { \"wrap\": true, \"width\":300 } } }%%\nsequenceDiagram\nAlice->Bob: Hello Bob, how are you?\nBob->Alice: Fine, how did your mother like the book I suggested? And did you catch the new book about alien invasion?\nAlice->Bob: Good.\nBob->Alice: Cool\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Example with Multiple Mermaid Diagrams\nDESCRIPTION: A full HTML example showing how to include multiple Mermaid diagrams in a single page and initialize the Mermaid API to render them all at once.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/getting-started.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    Here is one mermaid diagram:\n    <pre class=\"mermaid\">\n            graph TD\n            A[Client] --> B[Load Balancer]\n            B --> C[Server1]\n            B --> D[Server2]\n    </pre>\n\n    And here is another:\n    <pre class=\"mermaid\">\n            graph TD\n            A[Client] -->|tcp_123| B\n            B(Load Balancer)\n            B -->|tcp_456| C[Server1]\n            B -->|tcp_456| D[Server2]\n    </pre>\n\n    <script type=\"module\">\n      import mermaid from '<CDN_URL>/mermaid@<MERMAID_VERSION>/dist/mermaid.esm.min.mjs';\n      mermaid.initialize({ startOnLoad: true });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Basic Git Workflow - Mermaid\nDESCRIPTION: This snippet demonstrates a simple GitGraph diagram showing basic git operations: sequential commits, branching, checking out a branch, further commits, merging a branch back into main, and additional commits. No dependencies are required since this uses standard Mermaid syntax. Input consists of inline gitGraph commands following the described commit and branch patterns. The rendered output visualizes branching and merging flows commonly found in development workflows.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Example Git diagram\n---\ngitGraph\n   commit\n   commit\n   branch develop\n   checkout develop\n   commit\n   commit\n   checkout main\n   merge develop\n   commit\n   commit\n```\n\n----------------------------------------\n\nTITLE: Using FontAwesome Icons in Mermaid Flowcharts - mermaid\nDESCRIPTION: This snippet illustrates how to integrate FontAwesome icons into Mermaid flowcharts using icon syntax (`fa:` prefix) embedded within node labels. It supports icon packs registrations for versions 7+ with various prefixes (`fa`, `fab`, `fas`, etc.) and fallback to CSS-based FontAwesome. The snippet also shows usage of custom icons with the `fak` prefix requiring relevant FontAwesome kit imports. Nodes can display icons inline or standalone with text descriptions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_58\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    B[\"fa:fa-twitter for peace\"]\n    B-->C[fa:fa-ban forbidden]\n    B-->D(fa:fa-spinner)\n    B-->E(A fa:fa-camera-retro perhaps?)\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    B[fa:fa-twitter] %% standard icon\n    B-->E(fak:fa-custom-icon-name) %% custom icon\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    B[\"fa:fa-twitter for peace\"]\n    B-->C[\"fab:fa-truck-bold a custom icon\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Properties for classDef in Mermaid State Diagrams - Plain Text\nDESCRIPTION: This snippet demonstrates a classDef definition with multiple property-value pairs for advanced state styling. Using syntactic form 'classDef [name] [property:value,...]' (no trailing semicolon), the example sets fill, color, font-weight, stroke-width, and stroke color for the style 'badBadEvent'. It must appear inside a Mermaid diagram, and parameters include the style name and valid CSS properties. This affects subsequent state appearances to which the style is applied.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_21\n\nLANGUAGE: txt\nCODE:\n```\nclassDef badBadEvent fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n```\n\n----------------------------------------\n\nTITLE: Illustrating Namespace Handling Fix in Mermaid Class Diagram - Mermaid Syntax\nDESCRIPTION: This Mermaid code snippet demonstrates a class diagram using a namespace with dots in its name. It serves as an example related to a fix for a crash issue when a dot character is included within the namespace. The snippet defines a generic class with methods using type parameters inside a nested namespace structure. Dependencies include support for Mermaid’s classDiagram directive and generic syntax usage. The input is the diagram code written in Mermaid syntax, and the output should render a class diagram without crashing.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/CHANGELOG.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n  namespace Company.Project.Module {\n    class GenericClass~T~ {\n      +addItem(item: T)\n      +getItem() T\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Decision Node Shape (Diamond) in Mermaid Flowchart DSL\nDESCRIPTION: This snippet defines a decision node shaped as a diamond with the label 'Decision' within Mermaid flowcharts. Diamond shapes commonly represent decision points or branching logic in flowcharts. Requires Mermaid's capability for custom node shapes and labels. Input is a Mermaid flowchart string; output is a diamond-shaped node labeled 'Decision'.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: diamond, label: \"Decision\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Data Input/Output Node Shapes (Lean Right and Lean Left) in Mermaid Flowchart DSL\nDESCRIPTION: These paired snippets illustrate defining nodes with lean-right and lean-left shapes labeled for input/output operations in Mermaid flowcharts. The 'lean-r' and 'lean-l' shapes visually represent directional data flow. Supports enhanced flowchart semantics. Requires Mermaid version with extended shape options. Input is Mermaid code defining nodes; outputs are directionally styled nodes with specified labels.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: lean-r, label: \"Input/Output\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: lean-l, label: \"Output/Input\" }\n```\n\n----------------------------------------\n\nTITLE: Styling with classDefs\nDESCRIPTION: This section provides an example of creating and applying styles using `classDef` for state diagrams, using CSS-like styling.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_17\n\nLANGUAGE: txt\nCODE:\n```\nclassDef movement font-style:italic;\n```\n\n----------------------------------------\n\nTITLE: Creating a Dotted Link with Text\nDESCRIPTION: This snippet creates a dotted link with associated text between two nodes, providing more context to the weaker relationship.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_72\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n   A-. text .-> B\n```\n\n----------------------------------------\n\nTITLE: Branch Naming Convention\nDESCRIPTION: This text defines the naming convention for branches: `[feature | bug | chore | docs]/[issue number]_[short-description]`. It specifies the type of change, the issue number, and a short description separated by slashes and underscores.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_11\n\nLANGUAGE: txt\nCODE:\n```\n[feature | bug | chore | docs]/[issue number]_[short-description]\n```\n\n----------------------------------------\n\nTITLE: Adding Notes in Mermaid Class Diagrams\nDESCRIPTION: This snippet demonstrates how to add notes to a Mermaid class diagram using the `note` keyword.  General notes are added with `note \"line1\\nline2\"`.  Notes for specific classes are added using `note for <CLASS NAME> \"line1\\nline2\"`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_20\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    note \"This is a general note\"\n    note for MyClass \"This is a note for a class\"\n    class MyClass{\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Formatting Inside Entity Names in Mermaid ER Diagram\nDESCRIPTION: Exhibits the ability to include Markdown formatting (e.g., bold, italic) inside entity names in Mermaid ER diagrams. This snippet renders the entity label \"This **is** _Markdown_\" applying Markdown styles to the text, supporting richer labels in diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    \"This **is** _Markdown_\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Timeline Diagram with Default Theme in Mermaid\nDESCRIPTION: Defines a timeline diagram using Mermaid syntax with the 'default' theme and debug-level logging enabled. The timeline shows key social media platform milestones from 2002 to 2010. It requires Mermaid.js to interpret the timeline syntax and apply the specified configuration, including theme and logging options.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/timeline.md#_snippet_7\n\nLANGUAGE: mermaid-example\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n---\n    timeline\n        title History of Social Media Platform\n          2002 : LinkedIn\n          2004 : Facebook : Google\n          2005 : YouTube\n          2006 : Twitter\n          2007 : Tumblr\n          2008 : Instagram\n          2010 : Pinterest\n```\n\n----------------------------------------\n\nTITLE: Applying classDef Styles to States with class Statement - Plain Text\nDESCRIPTION: This snippet shows how to use the 'class' statement to assign a previously defined style to one or more Mermaid states. The statement 'class [state names] [classDef name]' is placed after state definitions. Parameters are a list of states and a classDef name; the output is the visual style change for those states within the rendered diagram. No special dependencies are required.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_22\n\nLANGUAGE: txt\nCODE:\n```\nclass Crash badBadEvent\n```\n\nLANGUAGE: txt\nCODE:\n```\nclass Moving, Crash movement\n```\n\n----------------------------------------\n\nTITLE: Quadrant Chart in Mermaid\nDESCRIPTION: Defines a four-quadrant chart evaluating campaigns based on reach and engagement. Campaigns are plotted with their respective coordinates, and quadrants are labeled to suggest strategic actions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\nquadrantChart\n  title Reach and engagement of campaigns\n  x-axis Low Reach --> High Reach\n  y-axis Low Engagement --> High Engagement\n  quadrant-1 We should expand\n  quadrant-2 Need to promote\n  quadrant-3 Re-evaluate\n  quadrant-4 May be improved\n  Campaign A: [0.3, 0.6]\n  Campaign B: [0.45, 0.23]\n  Campaign C: [0.57, 0.69]\n  Campaign D: [0.78, 0.34]\n  Campaign E: [0.40, 0.34]\n  Campaign F: [0.35, 0.78]\n```\n\n----------------------------------------\n\nTITLE: Configuring Flowchart Looks\nDESCRIPTION: This snippet demonstrates setting the look (handDrawn) and theme for a flowchart using Frontmatter configuration.  The `config` section within the Frontmatter is used to customize the visual appearance.  The handDrawn look provides a sketch-like quality, and the theme can be set to customize the color.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/syntax-reference.md#_snippet_2\n\nLANGUAGE: mermaid-example\nCODE:\n```\n--- \nconfig:\n  look: handDrawn\n  theme: neutral\n---\nflowchart LR\n  A[Start] --> B{Decision}\n  B -->|Yes| C[Continue]\n  B -->|No| D[Stop]\n```\n\n----------------------------------------\n\nTITLE: Customizing Branch Label Colors and Demonstrating Cyclic Repetition\nDESCRIPTION: Illustrates customizing branch label colors using 'gitBranchLabel0' through 'gitBranchLabel9' theme variables. It highlights that after the first 8 branches (indices 0-7), the theme variables are reused cyclically, so branch8 uses the style of branch0 and branch9 uses the style of branch1.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_28\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n    'gitBranchLabel0': '#ffffff'\n    'gitBranchLabel1': '#ffffff'\n    'gitBranchLabel2': '#ffffff'\n    'gitBranchLabel3': '#ffffff'\n    'gitBranchLabel4': '#ffffff'\n    'gitBranchLabel5': '#ffffff'\n    'gitBranchLabel6': '#ffffff'\n    'gitBranchLabel7': '#ffffff'\n    'gitBranchLabel8': '#ffffff'\n    'gitBranchLabel9': '#ffffff'\n---\n  gitGraph\n    checkout main\n    branch branch1\n    branch branch2\n    branch branch3\n    branch branch4\n    branch branch5\n    branch branch6\n    branch branch7\n    branch branch8\n    branch branch9\n    checkout branch1\n    commit\n```\n\n----------------------------------------\n\nTITLE: Defining Attributes in ERD\nDESCRIPTION: This snippet demonstrates how to define attributes for entities in an ERD diagram. Attributes are defined within curly braces after the entity name and are of the form `type name`.  The provided example shows how to define attributes like `string registrationNumber`, `string make`, and `string model` for the `CAR` entity.  There are no dependencies required to use this feature; it's core ERD syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    CAR ||--o{ NAMED-DRIVER : allows\n    CAR {\n        string registrationNumber\n        string make\n        string model\n    }\n    PERSON ||--o{ NAMED-DRIVER : is\n    PERSON {\n        string firstName\n        string lastName\n        int age\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining configKeys Variable in TypeScript\nDESCRIPTION: This snippet defines a constant variable named `configKeys` in TypeScript. This variable is a Set of strings, likely representing valid configuration keys within the Mermaid project.  It is defined within the `defaultConfig.ts` file. The code is auto-generated and should not be edited directly.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/defaultConfig/variables/configKeys.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst configKeys: Set<string>\n```\n\n----------------------------------------\n\nTITLE: Rotated Commit Labels Layout in GitGraph Using mermaid-example Language\nDESCRIPTION: Illustrates the default behavior of commit labels layout in Mermaid's gitGraph using the 'rotateCommitLabel' configuration set to true. Commit labels are rotated 45 degrees below the commit nodes, improving readability especially for long labels. The example includes commit and branch declarations with various commit IDs and checkouts to demonstrate label orientation across a branch topology.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_10\n\nLANGUAGE: mermaid-example\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n  gitGraph:\n    rotateCommitLabel: true\n---\ngitGraph\n  commit id: \"feat(api): ...\"\n  commit id: \"a\"\n  commit id: \"b\"\n  commit id: \"fix(client): .extra long label..\"\n  branch c2\n  commit id: \"feat(modules): ...\"\n  commit id: \"test(client): ...\"\n  checkout main\n  commit id: \"fix(api): ...\"\n  commit id: \"ci: ...\"\n  branch b1\n  commit\n  branch b2\n  commit\n```\n\n----------------------------------------\n\nTITLE: Turning on Animation for an Edge\nDESCRIPTION: This snippet demonstrates how to turn on animation for a specific edge using its ID, enabling visual effects for the edge transition.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_81\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n  A e1@==> B\n  e1@{ animate: true }\n```\n\n----------------------------------------\n\nTITLE: Adding Comments in Mermaid State Diagrams - Mermaid-Example\nDESCRIPTION: This snippet demonstrates how to add comments within Mermaid state diagram charts using '%%'. Lines beginning with '%%' are ignored by the parser, allowing for explanatory notes within diagrams without affecting rendering. Comments can be placed on their own line or after other syntax, with all subsequent text on that line treated as a comment. There are no dependencies beyond Mermaid itself. Input is diagram syntax with in-line or separate comment lines; no output is generated for comments.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_18\n\nLANGUAGE: mermaid-example\nCODE:\n```\nstateDiagram-v2\n    [*] --> Still\n    Still --> [*]\n%% this is a comment\n    Still --> Moving\n    Moving --> Still %% another comment\n    Moving --> Crash\n    Crash --> [*]\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Strings in Mermaid.js\nDESCRIPTION: Demonstrates the use of Markdown syntax within node and edge labels for rich text formatting like bold and italics. Supports automatic text wrapping and multi-line labels without needing HTML tags, enhancing label presentation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_48\n\nLANGUAGE: mermaid\nCODE:\n```\nconfig:\n  flowchart:\n    htmlLabels: false\n---\nflowchart LR\nsubgraph \"One\"\n  a(\"`The **cat**\n  in the hat`\") -- \"edge label\" --> b{{\"`The **dog** in the hog`\"}}\nend\nsubgraph \"`**Two**`\"\n  c(\"`The **cat**\n  in the hat`\") -- \"`Bold **edge label**`\" --> d(\"The dog in the hog\")\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Direct Access Storage\nDESCRIPTION: This snippet shows how to create Direct Access Storage (DAS) using shape keyword. It's a horizontal cylinder\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_47\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: das, label: \"Direct access storage\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Trapezoid Base Top\nDESCRIPTION: This snippet creates a trapezoid node with the base at the top, commonly used to depict manual operations, using the shape keyword in a Mermaid flowchart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_32\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: trap-t, label: \"Manual operation\" }\n```\n\n----------------------------------------\n\nTITLE: Resulting Merged Directive Configuration (JSON)\nDESCRIPTION: Shows the final JSON configuration object that results from merging the multiple directives in the preceding example. Note how `logLevel` and `theme` take their last specified values.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"logLevel\": \"fatal\",\n  \"theme\": \"dark\",\n  \"startOnLoad\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Repeating User Journey Diagram with Accessibility Metadata in Mermaid-js\nDESCRIPTION: This snippet repeats the user journey diagram with identical accessibility labels, illustrating consistent representation of user activity flows with accessible annotations.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_19\n\nLANGUAGE: mermaid\nCODE:\n```\n  journey\n      accTitle: My User Journey Diagram\n      accDescr: My User Journey Diagram Description\n\n      title My working day\n      section Go to work\n        Make tea: 5: Me\n        Go upstairs: 3: Me\n        Do work: 1: Me, Cat\n      section Go home\n        Go downstairs: 5: Me\n        Sit down: 5: Me\n```\n\n----------------------------------------\n\nTITLE: Example Mermaid Flowchart with Updated Syntax\nDESCRIPTION: Illustrates the newer Mermaid syntax for defining flowcharts, introduced after release 0.2.16. This syntax makes semicolons optional at the end of statements and allows a single space between vertices and links for improved readability. The older syntax remains valid.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_119\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit Branch Order in Mermaid GitGraph\nDESCRIPTION: Demonstrates using the `order` keyword to specify the rendering order of branches in a Mermaid gitGraph. Branches are assigned positive integer values, and Mermaid displays them according to these values after the main branch (default order 0) and any branches without an explicit order.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n  gitGraph:\n    showBranches: true\n    showCommitLabel: true\n---\n      gitGraph\n      commit\n      branch test1 order: 3\n      branch test2 order: 2\n      branch test3 order: 1\n```\n\n----------------------------------------\n\nTITLE: Defining Icon Shape Nodes in Mermaid Flowchart DSL\nDESCRIPTION: This snippet describes how to include an icon node in Mermaid flowcharts using the 'icon' shape attribute. The example uses an icon from a registered icon pack ('fa:user') with additional parameters to set the form (background shape as square), label ('User Icon'), label position ('t' for top), and height (60). It requires prior registration of icon packs in Mermaid configuration to display icons correctly. Inputs include icon name and styling options; output is a flowchart node rendering the specified icon with label and customized appearance.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_19\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ icon: \"fa:user\", form: \"square\", label: \"User Icon\", pos: \"t\", h: 60 }\n```\n\n----------------------------------------\n\nTITLE: Styling C4 Diagram Relationships with UpdateRelStyle in Mermaid\nDESCRIPTION: Illustrates different ways to use the `UpdateRelStyle` function to customize the appearance of relationships between specific elements in Mermaid C4 diagrams. It shows both positional parameter assignment (specifying values in order) and named parameter assignment (using `$parameterName=\"value\"`) to set properties like text color (`textColor`), line color (`lineColor`), and text label offset (`offsetX`, `offsetY`). Partial updates using only named parameters are also demonstrated.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/c4.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nUpdateRelStyle(customerA, bankA, \"red\", \"blue\", \"-40\", \"60\")\nUpdateRelStyle(customerA, bankA, $offsetX=\"-40\", $offsetY=\"60\", $lineColor=\"blue\", $textColor=\"red\")\nUpdateRelStyle(customerA, bankA, $offsetY=\"60\")\n```\n\n----------------------------------------\n\nTITLE: Rendering a Gantt Bar Chart for Git Issue Age Data in Mermaid\nDESCRIPTION: Illustrates the representation of Git issue ages as bar segments in a Gantt chart using Mermaid. The chart groups each issue by a section, showing the days since last update. Inputs: static hypothetical issue duration data. Outputs: visual bar chart with labeled sections. Requirements: Mermaid-enabled environment. Constraints: data encoding relies on Gantt chart/task notation; not suitable for advanced charting beyond Gantt/stylized bars.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n    title Git Issues - days since last update\n    dateFormat X\n    axisFormat %s\n    section Issue19062\n    71   : 0, 71\n    section Issue19401\n    36   : 0, 36\n    section Issue193\n    34   : 0, 34\n    section Issue7441\n    9    : 0, 9\n    section Issue1300\n    5    : 0, 5\n```\n\n----------------------------------------\n\nTITLE: Rendering User Journey Diagram with Mermaid - Mermaid\nDESCRIPTION: This snippet demonstrates how to write a user journey diagram using Mermaid syntax. It includes sections for different phases (e.g., \"Go to work\", \"Go home\"), each with tasks, numeric scores, and lists of actors involved. To use this, save the code block within Markdown files and render with tools that support Mermaid (such as GitHub, VS Code extensions, or the Mermaid Live Editor). Key parameters are the journey title, section headers, tasks (with scores and actors), and the overall indentation. No external dependencies are required beyond a Mermaid-compatible renderer.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/userJourney.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\njourney\n    title My working day\n    section Go to work\n      Make tea: 5: Me\n      Go upstairs: 3: Me\n      Do work: 1: Me, Cat\n    section Go home\n      Go downstairs: 5: Me\n      Sit down: 5: Me\n```\n\n----------------------------------------\n\nTITLE: Using Aliases for Entity Names with Attributes in Mermaid ER Diagrams\nDESCRIPTION: Illustrates renaming entities with aliases enclosed in square brackets or double quotes for display purposes, combined with attribute blocks. For example, the entity 'p' is aliased as 'Person' and 'a' as 'Customer Account'. The snippet also shows relationships using aliases, enhancing diagram readability by using user-friendly names.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    p[Person] {\n        string firstName\n        string lastName\n    }\n    a[\"Customer Account\"] {\n        string email\n    }\n    p ||--o| a : has\n```\n\n----------------------------------------\n\nTITLE: Initializing Mermaid Diagrams in TypeScript\nDESCRIPTION: The `initialize` function is used to set configurations for mermaid rendering.  It takes a MermaidConfig object as input, which specifies various settings. This method should be called before the `run` function.  The configurations affect how the diagrams will be rendered. It returns void.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/Mermaid.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitialize: (`config`) => `void`\n```\n\n----------------------------------------\n\nTITLE: Applying the 'forest' Theme to a Git Graph\nDESCRIPTION: Illustrates applying the 'forest' theme to a complex Mermaid Git Graph using a configuration block. The `theme: 'forest'` directive sets the visual style. The example also sets `logLevel: 'debug'`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_22\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'forest'\n---\n      gitGraph\n        commit\n        branch hotfix\n        checkout hotfix\n        commit\n        branch develop\n        checkout develop\n        commit id:\"ash\" tag:\"abc\"\n        branch featureB\n        checkout featureB\n        commit type:HIGHLIGHT\n        checkout main\n        checkout hotfix\n        commit type:NORMAL\n        checkout develop\n        commit type:REVERSE\n        checkout featureB\n        commit\n        checkout main\n        merge hotfix\n        checkout featureB\n        commit\n        checkout develop\n        branch featureA\n        commit\n        checkout develop\n        merge hotfix\n        checkout featureA\n        commit\n        checkout featureB\n        commit\n        checkout develop\n        merge featureA\n        branch release\n        checkout release\n        commit\n        checkout main\n        commit\n        checkout release\n        merge main\n        checkout develop\n        merge release\n```\n\n----------------------------------------\n\nTITLE: Shorthand Class Attachment with Multiple Links - Mermaid\nDESCRIPTION: This snippet demonstrates shorthand class attachment in a Mermaid flowchart when declaring multiple links between nodes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_112\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    A:::foo & B:::bar --> C:::foobar\n    classDef foo stroke:#f00\n    classDef bar stroke:#0f0\n    classDef foobar stroke:#00f\n```\n\n----------------------------------------\n\nTITLE: Visualizing Contribution Areas with Mermaid Mindmap\nDESCRIPTION: This Mermaid syntax snippet defines a simple mindmap diagram. It outlines the main areas of contribution to the project: Development, Testing, and Management, with sub-points for each. This visual representation helps new contributors quickly understand the different roles available.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/intro.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n  root)Contributing(\n    Development\n      Solving issues\n      Adding new diagrams\n      Handling pull requests\n      Updating tooling\n    Testing\n      Verification of fixed issues\n      Regression testing in connection with releases\n      Testing pull requests\n    Management\n      Coordinating the work\n      Classification and monitoring of incoming issues\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: darkMode\nDESCRIPTION: Defines the darkMode configuration option. It controls the dark mode setting for diagrams.  The input is a boolean value.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndarkMode?: `boolean`\n```\n\n----------------------------------------\n\nTITLE: Escaping Commas in Sankey Diagram Nodes\nDESCRIPTION: The snippet demonstrates handling commas within node labels using double quotes. The diagram uses `sankey-beta` and data formatted as source, target, and value. By wrapping a node in double quotes, commas are interpreted as part of the node's name rather than separators.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_7\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid\nsankey-beta\n\nPumped heat,\"Heating and cooling, homes\",193.026\nPumped heat,\"Heating and cooling, commercial\",70.672\n```\n```\n\n----------------------------------------\n\nTITLE: ER Diagram with Markdown Formatting in Mermaid\nDESCRIPTION: An example showing how Markdown formatting can be used within Mermaid ER diagrams for text styling.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    \"This **is** _Markdown_\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Class Diagram with Mermaid JavaScript\nDESCRIPTION: This code defines a class diagram with inheritance, interfaces, member variables, and methods using Mermaid's classDiagram syntax. No extra dependencies are needed; classes and relationships are textual. Key parameters include class names, relationships (inheritance, aggregation), and member specifications. The output is a structured class diagram visual, limited to features supported by Mermaid's class diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nClass01 <|-- AveryLongClass : Cool\n<<Interface>> Class01\nClass09 --> C2 : Where am I?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nclass Class10 {\n  <<service>>\n  int id\n  size()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Linking Pull Request to Issue (Markdown)\nDESCRIPTION: Provides the Markdown syntax used in GitHub pull request descriptions to automatically link the PR to a specific issue. Using `Resolves #<issue ID here>` helps track work and can automatically close the issue upon merging.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\nResolves #<your issue ID here>\n```\n\n----------------------------------------\n\nTITLE: Running Tests (Docker)\nDESCRIPTION: This command executes the test suite for the Mermaid project using pnpm within the Docker environment. The `./run` script is used to execute the command inside the Docker container.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./run pnpm test\n```\n\n----------------------------------------\n\nTITLE: Setting Diagram Direction in Mermaid\nDESCRIPTION: This code demonstrates setting the rendering direction for a Mermaid class diagram using the `direction` statement. The `direction` can be set to `RL` for right-to-left, or other valid options.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_18\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n  direction RL\n  class Student {\n    -idCard : IdCard\n  }\n  class IdCard{\n    -id : int\n    -name : string\n  }\n  class Bike{\n    -id : int\n    -name : string\n  }\n  Student \"1\" --o \"1\" IdCard : carries\n  Student \"1\" --o \"1\" Bike : rides\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: dompurifyConfig\nDESCRIPTION: Defines the dompurifyConfig configuration option.  This sets the configuration for DOMPurify. It can be used to configure how DOMPurify sanitizes the content of the diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndompurifyConfig?: `Config`\n```\n\n----------------------------------------\n\nTITLE: Creating ER Diagram\nDESCRIPTION: This snippet demonstrates the syntax for defining an Entity Relationship Diagram (ERD) in Mermaid. The `erDiagram` declaration specifies the diagram type, followed by definitions of entities and their relationships. The diagram visually represents entities, their attributes, and the relationships between them.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/syntax-reference.md#_snippet_0\n\nLANGUAGE: mermaid-example\nCODE:\n```\nerDiagram\n          CUSTOMER }|..|{ DELIVERY-ADDRESS : has\n          CUSTOMER ||--o{ ORDER : places\n          CUSTOMER ||--o{ INVOICE : \"liable for\"\n          DELIVERY-ADDRESS ||--o{ ORDER : receives\n          INVOICE ||--|{ ORDER : covers\n          ORDER ||--|{ ORDER-ITEM : includes\n          PRODUCT-CATEGORY ||--|{ PRODUCT : contains\n          PRODUCT ||--o{ ORDER-ITEM : \"ordered in\"\n```\n\n----------------------------------------\n\nTITLE: Applying the init Directive to a Graph Definition (Mermaid)\nDESCRIPTION: Illustrates how to use the `init` directive (`%%{init: ...}%%`) immediately before a Mermaid graph definition (`graph LR ...`) to apply specific configurations only to that diagram. The directive accepts a valid JSON object argument to override parameters like `theme` and `logLevel`, provided they are not restricted by the `secure` array. Requires Mermaid.js v8.6.0+.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/8.6.0_docs.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: {\"theme\": \"default\", \"logLevel\": 1 }}%%\n graph LR\n  a-->b\n  b-->c\n  c-->d\n  d-->e\n  e-->f\n  f-->g\n  g-->h\n```\n\n----------------------------------------\n\nTITLE: Defining an ER Diagram with ELK Layout in Mermaid Syntax\nDESCRIPTION: This snippet shows a Mermaid ER diagram example that uses the ELK layout as configured in the YAML frontmatter. It defines entity relationships such as CUSTOMER placing ORDER, ORDER containing LINE-ITEM, and CUSTOMER using DELIVERY-ADDRESS with specific cardinalities. The frontmatter includes metadata like title and layout configuration, which controls the diagram's rendering engine. This example requires Mermaid 9.4+ and appropriate lazy-loading setup to visualize ELK layouts correctly.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_14\n\nLANGUAGE: Mermaid\nCODE:\n```\n---\ntitle: Order example\nconfig:\n    layout: elk\n---\nerDiagram\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ LINE-ITEM : contains\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n```\n\n----------------------------------------\n\nTITLE: Styling and Customizing Links, Lines, and Nodes\nDESCRIPTION: Details how to style diagram elements using 'linkStyle', 'style', and curve parameters. Demonstrates customization of link appearance, line curves, and node border/background styling for improved diagram clarity and aesthetics.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_55\n\nLANGUAGE: mermaid\nCODE:\n```\nlinkStyle 3 stroke:#ff3,stroke-width:4px,color:red;\nlinkStyle 1,2,7 color:blue;\n\n%% Styling line curves\n%%{ init: { 'flowchart': { 'curve': 'stepBefore' } } }%%\ngraph LR\n\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    id1(Start)-->id2(Stop)\n    style id1 fill:#f9f,stroke:#333,stroke-width:4px\n    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests for Shape Rendering\nDESCRIPTION: Commands for installing dependencies and running Cypress tests to validate shape rendering in different scenarios, with option to update test snapshots.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/adding-new-shape.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\ncypress open --env updateSnapshots=true\n```\n\n----------------------------------------\n\nTITLE: Applying the 'default' Theme to a Git Graph\nDESCRIPTION: Illustrates applying the 'default' theme to a complex Mermaid Git Graph using a configuration block. The `theme: 'default'` directive sets the visual style. The example also sets `logLevel: 'debug'` and uses various commit types (HIGHLIGHT, NORMAL, REVERSE).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_23\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n---\n      gitGraph\n        commit type:HIGHLIGHT\n        branch hotfix\n        checkout hotfix\n        commit\n        branch develop\n        checkout develop\n        commit id:\"ash\" tag:\"abc\"\n        branch featureB\n        checkout featureB\n        commit type:HIGHLIGHT\n        checkout main\n        checkout hotfix\n        commit type:NORMAL\n        checkout develop\n        commit type:REVERSE\n        checkout featureB\n        commit\n        checkout main\n        merge hotfix\n        checkout featureB\n        commit\n        checkout develop\n        branch featureA\n        commit\n        checkout develop\n        merge hotfix\n        checkout featureA\n        commit\n        checkout featureB\n        commit\n        checkout develop\n        merge featureA\n        branch release\n        checkout release\n        commit\n        checkout main\n        commit\n        checkout release\n        merge main\n        checkout develop\n        merge release\n```\n\n----------------------------------------\n\nTITLE: Attaching IDs to Edges\nDESCRIPTION: Assigns an ID to an edge using the syntax `A e1@--> B`. This is the first step towards customizing edges.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_33\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  A e1@--> B\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal Commit Labels in Mermaid gitGraph (mermaid)\nDESCRIPTION: This snippet sets up a Mermaid gitGraph with horizontal commit labels, centering them beneath commit circles without rotation, which is more suitable for shorter commit messages. The directive 'rotateCommitLabel: false' is specified in the configuration. No special dependencies are required apart from support for Mermaid diagrams. Inputs include commit and branch commands. Output is a git branch diagram with all commit labels displayed horizontally. Horizontal labels can enhance aesthetic appeal and compactness in cases with concise, non-overlapping labels.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n  gitGraph:\n    rotateCommitLabel: false\n---\ngitGraph\n  commit id: \"feat(api): ...\"\n  commit id: \"a\"\n  commit id: \"b\"\n  commit id: \"fix(client): .extra long label..\"\n  branch c2\n  commit id: \"feat(modules): ...\"\n  commit id: \"test(client): ...\"\n  checkout main\n  commit id: \"fix(api): ...\"\n  commit id: \"ci: ...\"\n  branch b1\n  commit\n  branch b2\n  commit\n```\n\n----------------------------------------\n\nTITLE: Start and End States with Special Syntax\nDESCRIPTION: Defines initial and terminal states using the [*] syntax, with transitions indicating start/end points in the diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> s1\n    s1 --> [*]\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: mindmap\nDESCRIPTION: Defines the mindmap configuration option. This property configures settings specific to mindmap diagrams within Mermaid. It utilizes the MindmapDiagramConfig object to define configuration settings.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nmindmap?: `MindmapDiagramConfig`\n```\n\n----------------------------------------\n\nTITLE: Creating a Quadrant Chart\nDESCRIPTION: This snippet demonstrates the basic structure of a quadrant chart, including the title, axis labels, quadrant text, and data points. It's a fundamental example of how to create a basic quadrant chart in Mermaid.js. The chart plots data on an x-y axis and divides it into four quadrants, used for identifying patterns and trends.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/quadrantChart.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nquadrantChart\n    title Reach and engagement of campaigns\n    x-axis Low Reach --> High Reach\n    y-axis Low Engagement --> High Engagement\n    quadrant-1 We should expand\n    quadrant-2 Need to promote\n    quadrant-3 Re-evaluate\n    quadrant-4 May be improved\n    Campaign A: [0.3, 0.6]\n    Campaign B: [0.45, 0.23]\n    Campaign C: [0.57, 0.69]\n    Campaign D: [0.78, 0.34]\n    Campaign E: [0.40, 0.34]\n    Campaign F: [0.35, 0.78]\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Requirement Diagram Example in Mermaid\nDESCRIPTION: Illustrates the definition of multiple requirements of various types (functionalRequirement, performanceRequirement, interfaceRequirement, etc.), multiple elements with different attributes (type, docRef), and various relationship types (satisfies, traces, contains, derives, refines, verifies, copies) connecting requirements and elements to form a complex diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/requirementDiagram.md#_snippet_2\n\nLANGUAGE: Mermaid\nCODE:\n```\nrequirementDiagram\n\n    requirement test_req {\n    id: 1\n    text: the test text.\n    risk: high\n    verifymethod: test\n    }\n\n    functionalRequirement test_req2 {\n    id: 1.1\n    text: the second test text.\n    risk: low\n    verifymethod: inspection\n    }\n\n    performanceRequirement test_req3 {\n    id: 1.2\n    text: the third test text.\n    risk: medium\n    verifymethod: demonstration\n    }\n\n    interfaceRequirement test_req4 {\n    id: 1.2.1\n    text: the fourth test text.\n    risk: medium\n    verifymethod: analysis\n    }\n\n    physicalRequirement test_req5 {\n    id: 1.2.2\n    text: the fifth test text.\n    risk: medium\n    verifymethod: analysis\n    }\n\n    designConstraint test_req6 {\n    id: 1.2.3\n    text: the sixth test text.\n    risk: medium\n    verifymethod: analysis\n    }\n\n    element test_entity {\n    type: simulation\n    }\n\n    element test_entity2 {\n    type: word doc\n    docRef: reqs/test_entity\n    }\n\n    element test_entity3 {\n    type: \"test suite\"\n    docRef: github.com/all_the_tests\n    }\n\n\n    test_entity - satisfies -> test_req2\n    test_req - traces -> test_req2\n    test_req - contains -> test_req3\n    test_req3 - contains -> test_req4\n    test_req4 - derives -> test_req5\n    test_req5 - refines -> test_req6\n    test_entity3 - verifies -> test_req5\n    test_req <- copies - test_entity2\n```\n\n----------------------------------------\n\nTITLE: Registering Icon Packs with Lazy Loading in JavaScript\nDESCRIPTION: This example shows how to register an icon pack with lazy loading using dynamic imports. The icon pack is only loaded when it's actually needed in a diagram, which can improve initial loading performance.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/icons.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport mermaid from 'mermaid';\n\nmermaid.registerIconPacks([\n  {\n    name: 'logos',\n    loader: () => import('@iconify-json/logos').then((module) => module.icons),\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Mermaid Timeline via JavaScript Initialize\nDESCRIPTION: Provides an example of how to configure the Mermaid timeline renderer globally using the `mermaid.initialize` function in JavaScript. It shows how to set options like theme, startOnLoad, logLevel, and specific timeline options such as `disableMulticolor`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/timeline.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid.initialize({\n        theme: 'base',\n        startOnLoad: true,\n        logLevel: 0,\n        timeline: {\n          disableMulticolor: false,\n        },\n        ...\n        ...\n```\n\n----------------------------------------\n\nTITLE: Lollipop Interfaces\nDESCRIPTION: This snippet illustrates the definition of lollipop interfaces in Mermaid class diagrams. It shows how to connect a class to an interface using the lollipop syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_13\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n  bar ()-- foo\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n  class Class01 {\n    int amount\n    draw()\n  }\n  Class01 --() bar\n  Class02 --() bar\n\n  foo ()-- Class01\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Actor Menus with JSON-Formatted Links in Mermaid Sequence Diagrams\nDESCRIPTION: This snippet explains an advanced syntax for defining actor popup menus with multiple links serialized as JSON objects. The directive format is `links <actor>: <json>`, where `<json>` encodes link label-URL pairs. This enables bulk or structured menu definitions for actors in Mermaid sequence diagrams and requires Mermaid support for interpreting JSON links. Input is Mermaid code containing actor participants and `links` directives with JSON, output is interactive actor menus with multiple entries.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_26\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Alice\n    participant John\n    links Alice: {\"Dashboard\": \"https://dashboard.contoso.com/alice\", \"Wiki\": \"https://wiki.contoso.com/alice\"}\n    links John: {\"Dashboard\": \"https://dashboard.contoso.com/john\", \"Wiki\": \"https://wiki.contoso.com/john\"}\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n    Alice-)John: See you later!\n```\n\n----------------------------------------\n\nTITLE: Defining a Requirement Diagram with Accessibility Metadata in Mermaid-js\nDESCRIPTION: This snippet creates a requirement diagram with accessibility title and description, detailing a requirement with attributes including id, text, risk, and verification method, along with an element that satisfies the requirement. Suitable for illustrating requirement relationships with accessible metadata.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\n  requirementDiagram\n      accTitle: My Requirement Diagram\n      accDescr: My Requirement Diagram Description\n\n       requirement test_req {\n  id: 1\n  text: the test text.\n  risk: high\n  verifymethod: test\n  }\n\n  element test_entity {\n  type: simulation\n  }\n\n  test_entity - satisfies -> test_req\n```\n\n----------------------------------------\n\nTITLE: Correcting Incorrect Linking in Mermaid Diagrams\nDESCRIPTION: This snippet demonstrates the correct linking syntax using arrows (--> or ---) to specify the direction and type of connection between blocks in a Mermaid diagram. It corrects an example of incorrect linking where a space was used between blocks instead of arrows. This is essential for defining relationships and displaying the diagram correctly. No dependencies are required, as it's a Mermaid syntax example. The input is the Mermaid syntax, and the output is a correctly rendered diagram showing the link between A and B.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/block.md#_snippet_7\n\nLANGUAGE: Mermaid\nCODE:\n```\nblock-beta\n  A space B\n  A --> B\n```\n\n----------------------------------------\n\nTITLE: Adding Comments in Mermaid State Diagrams - Mermaid\nDESCRIPTION: This snippet illustrates comment integration within a state diagram using standard Mermaid syntax. The '%%' prefix on a line causes the parser to ignore the remainder of that line, making it useful for documentation or in-line explanations. This requires Mermaid support in the rendering environment and accepts any state diagram definition with embedded comment lines. Comments themselves are not part of the diagram's output.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_19\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> Still\n    Still --> [*]\n%% this is a comment\n    Still --> Moving\n    Moving --> Still %% another comment\n    Moving --> Crash\n    Crash --> [*]\n```\n\n----------------------------------------\n\nTITLE: Declaring Graph Edges with Flexible Spacing and Optional Semicolons - mermaid\nDESCRIPTION: This snippet highlights parser enhancements allowing graph edges to be declared with optional semicolon statement terminators and spaces between vertices and links. This improves the readability of Mermaid graph definitions without breaking backward compatibility with earlier syntax. It supports edge labels using this more flexible syntax and is valid starting from Mermaid version 0.2.16.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_60\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]\n```\n\n----------------------------------------\n\nTITLE: Default Multi-Color Styling for Timeline Periods in Mermaid\nDESCRIPTION: Shows the default styling behavior in Mermaid timeline diagrams when no sections are defined. Each time period and its associated events are assigned a unique color scheme.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/timeline.md#_snippet_6\n\nLANGUAGE: mermaid-example\nCODE:\n```\n    timeline\n        title History of Social Media Platform\n          2002 : LinkedIn\n          2004 : Facebook : Google\n          2005 : YouTube\n          2006 : Twitter\n\n\n```\n\nLANGUAGE: mermaid\nCODE:\n```\n    timeline\n        title History of Social Media Platform\n          2002 : LinkedIn\n          2004 : Facebook : Google\n          2005 : YouTube\n          2006 : Twitter\n\n\n```\n\n----------------------------------------\n\nTITLE: Using Comments in Mermaid Class Diagrams - Mermaid-Example\nDESCRIPTION: Provides a sample Mermaid class diagram code with commented lines included, serving as documentation or explanation for future editors without affecting diagram output. Only Mermaid syntax is required, and comments are prefixed with %% for parser exclusion.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_21\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n%% This whole line is a comment classDiagram class Shape <<interface>>\nclass Shape{\n    <<interface>>\n    noOfVertices\n    draw()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Checking for Running X11 Server (Docker Setup)\nDESCRIPTION: Checks if an X11 server is running by echoing the `$DISPLAY` environment variable. This is an optional step for Docker setup, required only if running GUI applications like Cypress within Docker.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho $DISPLAY\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Gantt Chart with Mermaid in Markdown\nDESCRIPTION: This snippet demonstrates the fundamental syntax for creating a Gantt chart using Mermaid diagrams in Markdown. It covers setting the chart title, date format, and basic section/task layout. Dependencies between tasks are expressed using task IDs and the 'after' keyword. The example assumes that Mermaid rendering support is available in the documentation tool or environment.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n    title A Gantt Diagram\n    dateFormat YYYY-MM-DD\n    section Section\n        A task          :a1, 2014-01-01, 30d\n        Another task    :after a1, 20d\n    section Another\n        Task in Another :2014-01-12, 12d\n        another task    :24d\n```\n\n----------------------------------------\n\nTITLE: Comparing Multiple Entities Across Dimensions - Mermaid\nDESCRIPTION: Shows how to implement a restaurant comparison radar chart in Mermaid, defining axes and curves per entity. Uses graticule polygon for scale lines and restricts values to a maximum of 5. Useful for multi-criteria comparison tasks. Depends on radar-beta diagram support in Mermaid.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nradar-beta\n  title Restaurant Comparison\n  axis food[\"Food Quality\"], service[\"Service\"], price[\"Price\"]\n  axis ambiance[\"Ambiance\"],\n\n  curve a[\"Restaurant A\"]{4, 3, 2, 4}\n  curve b[\"Restaurant B\"]{3, 4, 3, 3}\n  curve c[\"Restaurant C\"]{2, 3, 4, 2}\n  curve d[\"Restaurant D\"]{2, 2, 4, 3}\n\n  graticule polygon\n  max 5\n\n```\n\n----------------------------------------\n\nTITLE: Applying Style Classes During Relationship Definition in Mermaid\nDESCRIPTION: Illustrates applying predefined style classes (`foo`, `bar`) to nodes directly within the relationship definition line using the `:::` operator (e.g., `PERSON:::foo`, `HOUSE:::bar`). This example defines multiple classes (`foo`, `bar`, `foobar`) using `classDef` for different visual styles (e.g., different stroke colors).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_13\n\nLANGUAGE: mermaid-example\nCODE:\n```\nerDiagram\n    CAR {\n        string registrationNumber\n        string make\n        string model\n    }\n    PERSON {\n        string firstName\n        string lastName\n        int age\n    }\n    PERSON:::foo ||--|| CAR : owns\n    PERSON o{--|| HOUSE:::bar : has\n\n    classDef foo stroke:#f00\n    classDef bar stroke:#0f0\n    classDef foobar stroke:#00f\n```\n\n----------------------------------------\n\nTITLE: SVG with accessible title and description in Mermaid\nDESCRIPTION: This HTML snippet shows how to include accessible titles and descriptions within an SVG element in Mermaid. It uses the `aria-labelledby` and `aria-describedby` attributes to link the SVG to the `<title>` and `<desc>` elements, which contain the accessible title and description respectively. This helps users with assistive technologies understand the diagram's purpose and content.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<svg\n  aria-labelledby=\"chart-title-mermaid-1668725057758\"\n  aria-describedby=\"chart-desc-mermaid-1668725057758\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"100%\"\n  id=\"mermaid-1668725057758\"\n>\n  <title id=\"chart-title-mermaid-1668725057758\">This is the accessible title</title>\n  <desc id=\"chart-desc-mermaid-1668725057758\">This is an accessible description</desc>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Pie Chart with Mermaid\nDESCRIPTION: This code block shows a more complex pie chart configuration, including custom configuration options via the `config` block.  It uses `showData` to display the values, a title, and configures the label position, and outer stroke width. Dependencies are Mermaid-js and a compatible configuration setup. The input consists of key-value pairs to populate the pie chart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/pie.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\n--- \nconfig:\n  pie:\n    textPosition: 0.5\n  themeVariables:\n    pieOuterStrokeWidth: \"5px\"\n---\npie showData\n    title Key elements in Product X\n    \"Calcium\" : 42.96\n    \"Potassium\" : 50.05\n    \"Magnesium\" : 10.01\n    \"Iron\" :  5\n```\n\n----------------------------------------\n\nTITLE: Defining Classes for Styling Nodes in ERD\nDESCRIPTION: This snippet introduces class definitions to apply styles more efficiently, using the `classDef` statement.  It provides an example of how to define a class and then attach it to specific nodes or a list of nodes.  The example defines the class `someclass` and uses it for multiple nodes using the ::: operator. This technique promotes code reusability.  Requires Mermaid.js.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    direction TB\n    CAR:::someclass {\n        string registrationNumber\n        string make\n        string model\n    }\n    PERSON:::someclass {\n        string firstName\n        string lastName\n        int age\n    }\n    HOUSE:::someclass\n\n    classDef someclass fill:#f96\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    CAR {\n        string registrationNumber\n        string make\n        string model\n    }\n    PERSON {\n        string firstName\n        string lastName\n        int age\n    }\n    PERSON:::foo ||--|| CAR : owns\n    PERSON o{--|| HOUSE:::bar : has\n\n    classDef foo stroke:#f00\n    classDef bar stroke:#0f0\n    classDef foobar stroke:#00f\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Flowchart in Mermaid\nDESCRIPTION: Shows how to create a simple flowchart using `graph LR` which specifies a Left-to-Right orientation. It demonstrates defining nodes with different shapes (default rectangle `A`, square brackets `A[Square Rect]`, double parentheses `B((Circle))`, parentheses `C(Round Rect)`, braces `D{Rhombus}`) and connecting them with labeled (`-- Link text -->`) or unlabeled (`-->`) links.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/examples.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A[Square Rect] -- Link text --> B((Circle))\n    A --> C(Round Rect)\n    B --> D{Rhombus}\n    C --> D\n```\n\n----------------------------------------\n\nTITLE: Unclear Indentation Mindmap Output\nDESCRIPTION: This is the rendered output of the previous 'Unclear Indentation Handling' snippet showing how the diagram will appear.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_13\n\nLANGUAGE: mermaid\nCODE:\n```\nmindmap\nRoot\n    A\n        B\n      C\n```\n\n----------------------------------------\n\nTITLE: Creating a Terminal Point (Stadium Shape) in Mermaid Flowchart (mermaid-example)\nDESCRIPTION: This Mermaid-example snippet creates a top-down flowchart illustrating the use of the 'stadium' node shape to represent a terminal or endpoint. The node is labeled 'Terminal point', showcasing the mapping of terminal semantics to specific visual forms using shape attributes. Input requires a node with shape and label; output yields a stadium-shaped node in the flowchart. Prerequisite: Mermaid setup supporting shape extensions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_6\n\nLANGUAGE: mermaid-example\nCODE:\n```\nflowchart TD\n    A@{ shape: stadium, label: \"Terminal point\" }\n```\n\n----------------------------------------\n\nTITLE: Installing Mermaid via Package Managers\nDESCRIPTION: Instructions for installing the Mermaid package using npm, Yarn, or PNPM. Requires Node.js version 16 or higher.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\nnpm install mermaid\n# Yarn\nyarn add mermaid\n# PNPM\npnpm add mermaid\n```\n\n----------------------------------------\n\nTITLE: Enabling X11 Connections Locally Before Docker Test - Bash\nDESCRIPTION: This shell command enables local X11 server connections for Dockerized E2E test setup. Useful when running GUI applications (like Cypress) via Docker containers. Requires X11 server available and permissions for local connections. Input is the xhost command; output enables GUI forwarding for containers.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_22\n\nLANGUAGE: Bash\nCODE:\n```\nxhost +local:\n```\n\n----------------------------------------\n\nTITLE: State Declaration: with Description\nDESCRIPTION: This snippet demonstrates declaring a state with a description using the `state` keyword.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_3\n\nLANGUAGE: mermaid-example\nCODE:\n```\nstateDiagram-v2\n    state \"This is a state description\" as s2\n```\n\n----------------------------------------\n\nTITLE: Defining Subprocess Node Shape in Mermaid Flowchart DSL\nDESCRIPTION: This snippet demonstrates how to define a flowchart node with a subprocess shape using Mermaid syntax. The node is labeled 'This is a subprocess' and uses the 'subproc' shape type to visually represent a subprocess in a flowchart. The snippet can be used to create subprocess nodes within Mermaid diagrams and requires Mermaid version capable of parsing custom node properties in this syntax. The input is a Mermaid flowchart definition; the output is a visual node with specified shape and label.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: subproc, label: \"This is a subprocess\" }\n```\n\n----------------------------------------\n\nTITLE: Registering Icon Packs using CDN in JavaScript\nDESCRIPTION: This code demonstrates how to register an icon pack in Mermaid by fetching it directly from a CDN. It uses the fetch API to load the Logos icon pack JSON file from unpkg and registers it with a custom name.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/icons.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport mermaid from 'CDN/mermaid.esm.mjs';\nmermaid.registerIconPacks([\n  {\n    name: 'logos',\n    loader: () =>\n      fetch('https://unpkg.com/@iconify-json/logos@1/icons.json').then((res) => res.json()),\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Applying Class-Based Styling in Mermaid Block Diagrams\nDESCRIPTION: Shows how to define and apply class-based styles in block diagrams. Uses classDef to create reusable styles that can be applied to multiple blocks, while still allowing individual styling for other elements.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nblock-beta\n  A space B\n  A-->B\n  classDef blue fill:#6e6ce6,stroke:#333,stroke-width:4px;\n  class A blue\n  style B fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n```\n\n----------------------------------------\n\nTITLE: Full Mermaid.js Flowchart Clone Example\nDESCRIPTION: Replicates the basic flowchart as a standalone example, affirming syntax correctness and visual representation consistency for diagrams created with Mermaid.js.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_45\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end\n    one --> two\n    three --> two\n    two --> c2\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Mermaid Diagrams\nDESCRIPTION: CSS code to specify font family for Mermaid diagrams to avoid font inconsistencies that can cause layout issues.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\npre.mermaid {\n  font-family: 'trebuchet ms', verdana, arial;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Arrows to Edges in Architecture Diagrams\nDESCRIPTION: This snippet shows how to add arrows to edges, specifying the direction of the connection. The `<` and `>` symbols are placed before and after the direction on each side of the edge, indicating arrowheads. This enhances the representation of data flow between services. The output will include arrows on the edges according to the defined notation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_8\n\nLANGUAGE: Mermaid\nCODE:\n```\nsubnet:R --> L:gateway\n```\n\n----------------------------------------\n\nTITLE: Using Class-Based Styling for Points in Mermaid (Markdown Syntax)\nDESCRIPTION: Shows the Markdown syntax for defining and applying reusable style classes to points in a Mermaid quadrant chart. Points are assigned to classes using the `:::className` syntax following the point name. Class styles are defined using `classDef` statements, specifying properties like `color`, `radius`, `stroke-color`, and `stroke-width`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/quadrantChart.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nPoint A:::class1: [0.9, 0.0]\nPoint B:::class2: [0.8, 0.1]\nPoint C:::class3: [0.7, 0.2]\nPoint D:::class3: [0.7, 0.2]\nclassDef class1 color: #109060\nclassDef class2 color: #908342, radius : 10, stroke-color: #310085, stroke-width: 10px\nclassDef class3 color: #f00fff, radius : 10\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Block Diagram\nDESCRIPTION: This snippet shows the most basic structure of a block diagram with three horizontal blocks labeled 'a', 'b', and 'c'. The `block-beta` directive specifies the diagram type.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/block.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n```mermaid-example\nblock-beta\n  a b c\n```\n```\n\n----------------------------------------\n\nTITLE: Icon Integration Example\nDESCRIPTION: This example shows how to add icons to mindmap nodes using the `::icon()` syntax.  It requires the appropriate icon font integration.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nmindmap\n    Root\n        A\n        ::icon(fa fa-book)\n        B(B)\n        ::icon(mdi mdi-skull-outline)\n```\n\n----------------------------------------\n\nTITLE: Setting Top-to-Bottom Diagram Orientation in Mermaid ER Diagrams\nDESCRIPTION: Shows how to set the orientation of a Mermaid ER diagram from top to bottom using the `direction TB` statement. This arranges the entities vertically. The example includes CUSTOMER, ORDER, and LINE-ITEM entities with their relationships.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_9\n\nLANGUAGE: mermaid-example\nCODE:\n```\nerDiagram\n    direction TB\n    CUSTOMER ||--o{ ORDER : places\n    CUSTOMER {\n        string name\n        string custNumber\n        string sector\n    }\n    ORDER ||--|{ LINE-ITEM : contains\n    ORDER {\n        int orderNumber\n        string deliveryAddress\n    }\n    LINE-ITEM {\n        string productCode\n        int quantity\n        float pricePerUnit\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Block Diagram with Blocks and Connectors\nDESCRIPTION: This snippet demonstrates the basic syntax for creating a block diagram in mermaid.js using the `block-beta` directive, defining blocks, and using arrows to represent connections between blocks.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/block.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n```mermaid-example\nblock-beta\ncolumns 1\n  db((\"DB\"))\n  blockArrowId6<[\\\"\\u00a0\\u00a0\\u00a0\\\"]>(down)\n  block:ID\n    A\n    B[\\\"A wide one in the middle\\\"]\n    C\n  end\n  space\n  D\n  ID --> D\n  C --> D\n  style B fill:#969,stroke:#333,stroke-width:4px\n```\n```\n\n----------------------------------------\n\nTITLE: Attaching a Class to Multiple Nodes - Mermaid\nDESCRIPTION: This snippet shows how to attach a class to multiple nodes in a Mermaid flowchart using the `class` directive in one statement.  Separate the node IDs with commas.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_110\n\nLANGUAGE: Mermaid\nCODE:\n```\nclass nodeId1,nodeId2 className;\n```\n\n----------------------------------------\n\nTITLE: Entity Relationship Diagram (Experimental) in Mermaid\nDESCRIPTION: Depicts entities and relationships in a database schema, including one-to-many and many-to-many relationships, using Mermaid ER diagram syntax. Note that this feature is experimental.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/examples.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ LINE-ITEM : contains\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n```\n\n----------------------------------------\n\nTITLE: Applying Font Family Directive to a Graph\nDESCRIPTION: Example showing a Mermaid graph definition preceded by a directive that sets a specific font family.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { \"fontFamily\": \"Trebuchet MS, Verdana, Arial, Sans-Serif\" } }%%\ngraph TD\nA(Forest) --> B[/Another/]\nA --> C[End]\n  subgraph section\n  B\n  C\n  end\n```\n\n----------------------------------------\n\nTITLE: Defining a Process Node with Custom Shape in Mermaid (mermaid-example)\nDESCRIPTION: This Mermaid-example snippet creates a top-down flowchart with a single node labeled 'This is a process', explicitly setting the node's shape as 'rect'. It demonstrates how to assign a semantic meaning to a basic process step via the shape attribute. Requires Mermaid with shape support and correct rendering configuration. Input is a node with shape and label parameters; output is a diagram with a rectangle-shaped process node.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_2\n\nLANGUAGE: mermaid-example\nCODE:\n```\nflowchart TD\n    A@{ shape: rect, label: \"This is a process\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring ELK Layout in Mermaid Using YAML Frontmatter\nDESCRIPTION: This snippet demonstrates how to specify the ELK diagram layout in Mermaid using YAML frontmatter. The `config` property sets the `layout` to \"elk\", overriding the default layout engine (dagre) for rendering diagrams. This setup requires Mermaid version 9.4 or higher and enabling the relevant feature in lazy-loading configuration. The YAML configuration acts as a prerequisite for Mermaid to parse and apply the ELK layout when rendering diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\n---\nconfig:\n  layout: elk\n---\n```\n\n----------------------------------------\n\nTITLE: Changing Theme via Directive\nDESCRIPTION: This code snippet demonstrates changing the theme of a Mermaid diagram using a directive. The theme is set to `forest`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n%%{init: { \"theme\": \"forest\" } }%%\n```\n\n----------------------------------------\n\nTITLE: Styling Kanban Sections using IDs in Mermaid\nDESCRIPTION: Demonstrates applying custom styles (stroke and fill color) to a specific Kanban element (referenced by `n2`, likely implicitly assigned or referring to the second node/task) using the `style` directive. Requires IDs to be defined or understood implicitly for target elements.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/diagrams/kanban/samples.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nkanban\n  id1[Todo]\n    id2[Create JISON]\n    id3[Update DB function]\n    id4[Create parsing tests]\n    id5[define getData]\n    id6[Create renderer]\n  id7[In progress]\n    id8[Design grammar]\n\n  style n2 stroke:#AA00FF,fill:#E1BEE7\n```\n\n----------------------------------------\n\nTITLE: Setting Radar Diagram Title - Markdown\nDESCRIPTION: Shows the minimal syntax for adding a title to a radar diagram within a Markdown code block. The 'title' keyword sets a diagram title above the radar chart. No additional parameters required. Useful for labeling and contextualizing diagrams. Requires radar-beta support in Mermaid.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_7\n\nLANGUAGE: md\nCODE:\n```\nradar-beta\n  title Title of the Radar Diagram\n  ...\n```\n\n----------------------------------------\n\nTITLE: Creating an Open Link\nDESCRIPTION: This snippet demonstrates the creation of an open link (a line without arrowheads) between two nodes in a flowchart.  It uses the `---` syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_22\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A --- B\n```\n\n----------------------------------------\n\nTITLE: Customizing Highlight Commit Colors per Branch in Mermaid\nDESCRIPTION: Illustrates how to customize the color of highlighted commits specifically for the first branch (index 0) using the 'gitInv0' theme variable. This allows branch-specific styling for highlighted commits.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_33\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n    'gitInv0': '#ff0000'\n---\n       gitGraph\n       commit\n       branch develop\n       commit tag:\"v1.0.0\"\n       commit\n       checkout main\n       commit type: HIGHLIGHT\n       commit\n       merge develop\n       commit\n       branch featureA\n       commit\n```\n\n----------------------------------------\n\nTITLE: Edge Data Structure and Arrow Types\nDESCRIPTION: Specifies the properties for edges in diagrams, including visual aspects like thickness, pattern, and arrow type. Supports different arrow styles such as cross, point, and circle, which influence how edges are rendered. This data structure is key for customizing edge appearance and behavior within the layout engine.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/dagre-wrapper/GraphObjects.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"\",\n  \"arrowHead\": \"\",\n  \"arrowType\": \"\",\n  \"style\": \"\",\n  \"labelStyle\": \"\",\n  \"label\": \"\",\n  \"labelPos\": \"\",\n  \"labelType\": \"\",\n  \"thickness\": \"normal\",\n  \"pattern\": \"solid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sankey Diagrams\nDESCRIPTION: This code demonstrates how to configure the display options of a Mermaid Sankey diagram using a JavaScript configuration object.  The configuration includes setting the width, height, link color (by source node), and node alignment. The Mermaid library is initialized with this configuration.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const config = {\n    startOnLoad: true,\n    securityLevel: 'loose',\n    sankey: {\n      width: 800,\n      height: 400,\n      linkColor: 'source',\n      nodeAlignment: 'left',\n    },\n  };\n  mermaid.initialize(config);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Changing Theme in Mermaid Graph\nDESCRIPTION: This example applies the 'forest' theme to a Mermaid graph using a directive.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_6\n\nLANGUAGE: Mermaid\nCODE:\n```\n%%{init: { \"theme\": \"forest\" } }%%\ngraph TD\nA(Forest) --> B[/Another/]\nA --> C[End]\n  subgraph section\n  B\n  C\n  end\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\n%%{init: { \"theme\": \"forest\" } }%%\ngraph TD\nA(Forest) --> B[/Another/]\nA --> C[End]\n  subgraph section\n  B\n  C\n  end\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Loop Limit\nDESCRIPTION: This snippet shows how to create Loop Limit node.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_55\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: notch-pent, label: \"Loop limit\" }\n```\n\n----------------------------------------\n\nTITLE: Common Renderer Utility Functions\nDESCRIPTION: Lists placeholder functions `getDirection` and `getClasses` that are intended to be implemented by the database or rendering context. These functions provide layout directions and class management, aiding in consistent rendering logic across different diagram types.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/dagre-wrapper/GraphObjects.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Creating a Pie Chart with Mermaid JavaScript\nDESCRIPTION: This code shows how to define a basic pie chart using Mermaid pie syntax, with data points representing 'Dogs', 'Cats', and 'Rats'. Mermaid is the only dependency; data is input as label-value pairs. Inputs are category names and numeric values; the output is a pie chart visualization. The chart is limited by the basic styling and feature set of Mermaid's pie chart support.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\npie\n\"Dogs\" : 386\n\"Cats\" : 85.9\n\"Rats\" : 15\n```\n\n----------------------------------------\n\nTITLE: Setting Diagram Direction in Mermaid Class Diagrams - Mermaid\nDESCRIPTION: Demonstrates how to set the rendering direction (e.g., RL for right-to-left) for Mermaid class diagrams using the direction statement. Only Mermaid is needed; input includes classes, their fields, and relationships, with diagram output oriented according to the specified direction, which can be crucial for complex layouts.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_22\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n  direction RL\n  class Student {\n    -idCard : IdCard\n  }\n  class IdCard{\n    -id : int\n    -name : string\n  }\n  class Bike{\n    -id : int\n    -name : string\n  }\n  Student \"1\" --o \"1\" IdCard : carries\n  Student \"1\" --o \"1\" Bike : rides\n\n```\n\n----------------------------------------\n\nTITLE: Customized Markdown Renderer with Mermaid Support in CoffeeScript\nDESCRIPTION: This CoffeeScript code defines a custom renderer for the 'marked' library, which injects Mermaid scripts only once and wraps Mermaid code in <pre class='mermaid'> tags. It enhances Markdown rendering to support Mermaid diagrams dynamically, depending on the code language, and requires the Mermaid library path specified in options.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_15\n\nLANGUAGE: CoffeeScript\nCODE:\n```\nmarked = require 'marked'\n\nmodule.exports = (options) ->\n  hasMermaid = false\n  renderer = new marked.Renderer()\n  renderer.defaultCode = renderer.code\n  renderer.code = (code, language) ->\n    if language is 'mermaid'\n      html = ''\n      if not hasMermaid\n        hasMermaid = true\n        html += '<script src=\"'+ options.mermaidPath +'\"></script>'\n      html + '<pre class=\"mermaid\">'+code+'</pre>'\n    else\n      @defaultCode(code, language)\n\n  renderer\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for reset() in Mermaid Config\nDESCRIPTION: The TypeScript function signature for the reset() function in Mermaid's configuration system. This function resets the currentConfig to a provided configuration object or defaults to the site configuration.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/config/functions/reset.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nreset(config: MermaidConfig = siteConfig): void\n```\n\n----------------------------------------\n\nTITLE: Visualizing Initial Setup Workflow using Mermaid\nDESCRIPTION: A Mermaid flowchart diagram illustrating the three main steps of the initial setup process: getting the source code, installing requirements, and installing packages.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  source --> requirements --> setup\n\n  source[Get the Source Code]\n  requirements[Install the Requirements]\n  setup[Install Packages]\n```\n\n----------------------------------------\n\nTITLE: Using Polygon Intersection Algorithm in JavaScript\nDESCRIPTION: Shows how to use the polygon intersection function to calculate the point where an arrow connects with a polygon shape.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/adding-new-shape.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport intersectPolygon from './intersect-polygon.js';\n\nconst intersection = intersectPolygon(node, polyPoints, point);\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Multi-Document\nDESCRIPTION: This snippet shows how to create Multi-Document node.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_58\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: docs, label: \"Multiple documents\" }\n```\n\n----------------------------------------\n\nTITLE: Kanban Diagram Task Example - Mermaid\nDESCRIPTION: This snippet provides a specific example of defining a task in a Mermaid Kanban diagram, where the task ID is `docs` and the description is `Create Documentation`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/kanban.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ndocs[Create Documentation]\n```\n\n----------------------------------------\n\nTITLE: Defining Database Node Shape (Cylinder) in Mermaid Flowchart DSL\nDESCRIPTION: This snippet shows how to create a flowchart node with a cylinder shape representing a database using Mermaid syntax. The node is labeled 'Database' and shaped as a cylinder via the 'cyl' shape property. This visual representation helps identify database components in flowcharts. Requires Mermaid version supporting custom shapes and node attribute syntax as presented. Input is Mermaid flowchart source; output is a node with cylinder shape and label.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: cyl, label: \"Database\" }\n```\n\n----------------------------------------\n\nTITLE: Using Multidirectional Arrows\nDESCRIPTION: Demonstrates the use of multi-directional arrows combining different arrow types: circle, normal, and cross edges.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_39\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A o--o B\n    B <--> C\n    C x--x D\n```\n\n----------------------------------------\n\nTITLE: Mermaid Configuration for Customizing Sankey Diagrams\nDESCRIPTION: Provides example JavaScript code to configure Mermaid.js Sankey diagrams, allowing adjustments to diagram dimensions, link colors, and node alignment. The options include setting width, height, link color types, and node alignment strategies for improved visual layout.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sankey.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  const config = {\n    startOnLoad: true,\n    securityLevel: 'loose',\n    sankey: {\n      width: 800,\n      height: 400,\n      linkColor: 'source',\n      nodeAlignment: 'left',\n    },\n  };\n  mermaid.initialize(config);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Changing Font Family via Directive\nDESCRIPTION: A specific directive example demonstrating how to change the font family used in the diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { \"fontFamily\": \"Trebuchet MS, Verdana, Arial, Sans-Serif\" } }%%\n```\n\n----------------------------------------\n\nTITLE: Assigning IDs to Kanban Columns and Tasks in Mermaid\nDESCRIPTION: Shows how to assign unique IDs to both columns (e.g., `id1[Todo]`) and tasks (e.g., `id2[Create JISON]`) within a Mermaid Kanban diagram. IDs can be used for referencing or styling specific elements.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/diagrams/kanban/samples.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nkanban\n  id1[Todo]\n    id2[Create JISON]\n    id3[Update DB function]\n    id4[Create parsing tests]\n    id5[define getData]\n    id6[Create renderer]\n  id7[In progress]\n    id8[Design grammar]\n```\n\n----------------------------------------\n\nTITLE: Changing LogLevel via Directive\nDESCRIPTION: This code snippet demonstrates changing the log level of Mermaid diagram using a directive. The log level is set to `2`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n%%{init: { \"logLevel\": 2 } }%%\n```\n\n----------------------------------------\n\nTITLE: Mermaid Graph Syntax Validation Function\nDESCRIPTION: This method uses 'mermaid.parse' to validate Mermaid graph definitions without rendering. It returns an object indicating the diagram type for valid syntax or false (when suppressErrors is true) or throws an error for invalid diagrams. Custom error handling can be implemented by overriding 'mermaid.parseError'. It requires the 'mermaid' library for syntax validation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nmermaid.parseError = function (err, hash) {\n  displayErrorInGui(err);\n};\n\nconst textFieldUpdated = async function () {\n  const textStr = getTextFromFormField('code');\n\n  if (await mermaid.parse(textStr)) {\n    reRender(textStr);\n  }\n};\n\nbindEventHandler('change', 'code', textFieldUpdated);\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Implementation with Interactive Class Diagram\nDESCRIPTION: A comprehensive example showing a complete HTML implementation with an interactive class diagram that includes callbacks and URL links. Also demonstrates initialization of Mermaid with custom configuration.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <pre class=\"mermaid\">\n    classDiagram\n    Animal <|-- Duck\n    Animal <|-- Fish\n    Animal <|-- Zebra\n    Animal : +int age\n    Animal : +String gender\n    Animal: +isMammal()\n    Animal: +mate()\n    class Duck{\n      +String beakColor\n      +swim()\n      +quack()\n      }\n    class Fish{\n      -int sizeInFeet\n      -canEat()\n      }\n    class Zebra{\n      +bool is_wild\n      +run()\n      }\n\n      callback Duck \"callback\" \"Tooltip\"\n      link Zebra \"https://www.github.com\" \"This is a link\"\n  </pre>\n\n  <script>\n    const callback = function () {\n      alert('A callback was triggered');\n    };\n    const config = {\n      startOnLoad: true,\n      securityLevel: 'loose',\n    };\n    mermaid.initialize(config);\n  </script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Wrapping Long Text and Using Break Tag in Mermaid Timeline\nDESCRIPTION: Shows how Mermaid automatically wraps long text within time periods and events. It also demonstrates the use of the HTML break tag (`<br>`) to manually force a line break for better readability within diagram elements.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/timeline.md#_snippet_4\n\nLANGUAGE: mermaid-example\nCODE:\n```\ntimeline\n        title England's History Timeline\n        section Stone Age\n          7600 BC : Britain's oldest known house was built in Orkney, Scotland\n          6000 BC : Sea levels rise and Britain becomes an island.<br> The people who live here are hunter-gatherers.\n        section Bronze Age\n          2300 BC : People arrive from Europe and settle in Britain. <br>They bring farming and metalworking.\n                  : New styles of pottery and ways of burying the dead appear.\n          2200 BC : The last major building works are completed at Stonehenge.<br> People now bury their dead in stone circles.\n                  : The first metal objects are made in Britain.Some other nice things happen. it is a good time to be alive.\n\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ntimeline\n        title England's History Timeline\n        section Stone Age\n          7600 BC : Britain's oldest known house was built in Orkney, Scotland\n          6000 BC : Sea levels rise and Britain becomes an island.<br> The people who live here are hunter-gatherers.\n        section Bronze Age\n          2300 BC : People arrive from Europe and settle in Britain. <br>They bring farming and metalworking.\n                  : New styles of pottery and ways of burying the dead appear.\n          2200 BC : The last major building works are completed at Stonehenge.<br> People now bury their dead in stone circles.\n                  : The first metal objects are made in Britain.Some other nice things happen. it is a good time to be alive.\n\n```\n\n----------------------------------------\n\nTITLE: Setting Diagram Direction in Mermaid Class Diagrams - Mermaid-Example\nDESCRIPTION: Provides an example Mermaid code demonstrating the use of the 'direction' statement to change the layout flow of class diagrams, along with interrelated class entities and associations. This code requires only Mermaid and outputs a diagram with specified orientation, revealing the impact of direction on diagram readability.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_23\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n  direction RL\n  class Student {\n    -idCard : IdCard\n  }\n  class IdCard{\n    -id : int\n    -name : string\n  }\n  class Bike{\n    -id : int\n    -name : string\n  }\n  Student \"1\" --o \"1\" IdCard : carries\n  Student \"1\" --o \"1\" Bike : rides\n\n```\n\n----------------------------------------\n\nTITLE: Applying the Neutral Theme to a Mermaid Git Diagram\nDESCRIPTION: Demonstrates how to apply the built-in 'neutral' theme to a Mermaid Git diagram. The configuration block sets the theme property to 'neutral' and enables debug logging.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_25\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'neutral'\n---\n      gitGraph\n        commit\n        branch hotfix\n        checkout hotfix\n        commit\n        branch develop\n        checkout develop\n        commit id:\"ash\" tag:\"abc\"\n        branch featureB\n        checkout featureB\n        commit type:HIGHLIGHT\n        checkout main\n        checkout hotfix\n        commit type:NORMAL\n        checkout develop\n        commit type:REVERSE\n        checkout featureB\n        commit\n        checkout main\n        merge hotfix\n        checkout featureB\n        commit\n        checkout develop\n        branch featureA\n        commit\n        checkout develop\n        merge hotfix\n        checkout featureA\n        commit\n        checkout featureB\n        commit\n        checkout develop\n        merge featureA\n        branch release\n        checkout release\n        commit\n        checkout main\n        commit\n        checkout release\n        merge main\n        checkout develop\n        merge release\n```\n\n----------------------------------------\n\nTITLE: Adding Keys and Comments to Attributes\nDESCRIPTION: This snippet illustrates how to define keys (PK, FK, UK) and comments for attributes within an ERD. Keys are added after the attribute name and are separated by commas if multiple keys are applied. Comments are placed after the key or attribute and enclosed in double quotes.  For example, `string driversLicense PK \"The license #\"`. This functionality enhances attribute descriptions within the diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    CAR ||--o{ NAMED-DRIVER : allows\n    CAR {\n        string registrationNumber PK\n        string make\n        string model\n        string[] parts\n    }\n    PERSON ||--o{ NAMED-DRIVER : is\n    PERSON {\n        string driversLicense PK \"The license #\"\n        string(99) firstName \"Only 99 characters are allowed\"\n        string lastName\n        string phone UK\n        int age\n    }\n    NAMED-DRIVER {\n        string carRegistrationNumber PK, FK\n        string driverLicence PK, FK\n    }\n    MANUFACTURER only one to zero or more CAR : makes\n```\n\n----------------------------------------\n\nTITLE: Fixing Styling Syntax in Mermaid Block Diagrams\nDESCRIPTION: Shows the correct syntax for applying styles to blocks. Illustrates proper CSS property formatting with colons and commas to ensure styles are correctly applied to diagram elements.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nblock-beta\n  A\n  style A fill:#969,stroke:#333;\n```\n\n----------------------------------------\n\nTITLE: Defining a Cloud Node in Mermaid Mindmap\nDESCRIPTION: Shows how to define a node with a cloud shape in a Mermaid mindmap using the `id)...(` syntax. The text within the delimiters becomes the node label.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_6\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    id)I am a cloud(\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    id)I am a cloud(\n```\n\n----------------------------------------\n\nTITLE: Annotating Classes with Markers in Nested Form - Mermaid-Example\nDESCRIPTION: Supplies a mermaid class diagram sample where <<interface>> and <<enumeration>> annotations are placed inside class declarations, grouping member variables under each annotation. Only Mermaid is needed, and the diagram output shows separate interface and enumeration class types.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_19\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclass Shape{\n    <<interface>>\n    noOfVertices\n    draw()\n}\nclass Color{\n    <<enumeration>>\n    RED\n    BLUE\n    GREEN\n    WHITE\n    BLACK\n}\n\n```\n\n----------------------------------------\n\nTITLE: Visualizing Contribution Workflow using Mermaid\nDESCRIPTION: A Mermaid flowchart diagram illustrating the contribution process: checking out a new branch, making changes, and submitting a Pull Request.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\n  branch --> changes --> submit\n  branch[Checkout a New Branch]\n  changes[Make Changes]\n  submit[Submit a PR]\n```\n\n----------------------------------------\n\nTITLE: Customization of theme variables using frontmatter in Markdown\nDESCRIPTION: Illustrates modifying `themeVariables` via frontmatter to customize specific color properties like `primaryColor`, `primaryTextColor`, and `lineColor`. Uses the 'base' theme as a starting point for customizations, affecting visual aspects of diagrams. This approach allows flexible theming aligned with branding or aesthetic preferences.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/theming.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n---\nconfig:\n  theme: 'base'\n  themeVariables:\n    primaryColor: '#BB2528'\n    primaryTextColor: '#fff'\n    primaryBorderColor: '#7C0000'\n    lineColor: '#F8B229'\n    secondaryColor: '#006100'\n    tertiaryColor: '#fff'\n---\n  graph TD\n    A[Christmas] -->|Get money| B(Go shopping)\n    B --> C{Let me think}\n    B --> G[/Another/]\n    C ==>|One| D[Laptop]\n    C -->|Two| E[iPhone]\n    C -->|Three| F[fa:fa-car Car]\n    subgraph section\n      C\n      D\n      E\n      F\n      G\n    end\n```\n\n----------------------------------------\n\nTITLE: Displaying Sequential Commits on Main Branch - Mermaid\nDESCRIPTION: This snippet illustrates a linear git history on the default 'main' branch by declaring three consecutive commits. No parameters or prerequisites are needed; the sequence demonstrates the Mermaid gitGraph's default behavior. The expected output is a single straight line of three commit nodes, each with a system-generated unique ID unless specified otherwise.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n   commit\n   commit\n   commit\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal XY Chart (Mermaid)\nDESCRIPTION: Presents the simplest possible XY chart definition in Mermaid. It only requires the chart type identifier (`xychart-beta`) and at least one data series (a `line` chart in this example). Axes and title are automatically generated.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/xyChart.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nxychart-beta\n    line [+1.3, .6, 2.4, -.34]\n```\n\n----------------------------------------\n\nTITLE: Rendering Unicode Text as Entity Name in Mermaid ER Diagram\nDESCRIPTION: Shows that entity names in Mermaid ER diagrams can contain Unicode characters, allowing expressive or domain-specific symbols. This snippet demonstrates an entity named \"This ❤ Unicode\", emphasizing Mermaid's support for Unicode in entity identifiers.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    \"This ❤ Unicode\"\n```\n\n----------------------------------------\n\nTITLE: Using Ellipse Intersection Algorithm in JavaScript\nDESCRIPTION: Shows how to use the ellipse intersection function to calculate the point where an arrow connects with an elliptical shape.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/adding-new-shape.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport intersectEllipse from './intersect-ellipse.js';\n\nconst intersection = intersectEllipse(node, rx, ry, point);\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Gantt Chart with Comments in Mermaid\nDESCRIPTION: Demonstrates how to create a basic Gantt chart using Mermaid syntax, including the use of comments with double percent signs (%%). This example shows multiple sections and tasks, and includes a comment within the Gantt definition. Requires the Mermaid parser and a compatible rendering environment. Comments are ignored by the parser, allowing inline documentation within diagram source code. No external dependencies are required except for the Mermaid tool or compatible renderer.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n    title A Gantt Diagram\n    %% This is a comment\n    dateFormat YYYY-MM-DD\n    section Section\n        A task          :a1, 2014-01-01, 30d\n        Another task    :after a1, 20d\n    section Another\n        Task in Another :2014-01-12, 12d\n        another task    :24d\n```\n\n----------------------------------------\n\nTITLE: Customizing Commit Label Font Size (Mermaid)\nDESCRIPTION: This Mermaid code snippet demonstrates changing the font size of commit labels in a GitGraph diagram using the `commitLabelFontSize` theme variable.  It overrides the default font size value. The GitGraph syntax defines the diagram elements.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_31\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid-example\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n    commitLabelColor: '#ff0000'\n    commitLabelBackground: '#00ff00'\n    commitLabelFontSize: '16px'\n---\n       gitGraph\n       commit\n       branch develop\n       commit tag:\"v1.0.0\"\n       commit\n       checkout main\n       commit type: HIGHLIGHT\n       commit\n       merge develop\n       commit\n       branch featureA\n       commit\n\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Rendering Test in Cypress - JavaScript\nDESCRIPTION: This JavaScript snippet shows a Cypress test case using `imgSnapshotTest` to verify the correct rendering of a Mermaid state diagram, including forks and joins. It requires Cypress, the `imgSnapshotTest` helper, and Mermaid set up in the project. The function is supplied with a diagram definition and options, and takes a snapshot for regression testing. Inputs are the diagram text and mermaid options; output is a test result and visual snapshot comparison. It assumes a compatible project environment with the relevant libraries installed.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('should render forks and joins', () => {\n  imgSnapshotTest(\n    `\n    stateDiagram\n    state fork_state <<fork>>\n      [*] --> fork_state\n      fork_state --> State2\n      fork_state --> State3\n\n      state join_state <<join>>\n      State2 --> join_state\n      State3 --> join_state\n      join_state --> State4\n      State4 --> [*]\n    `,\n    { logLevel: 0 }\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Detecting Diagram Type with Mermaid API\nDESCRIPTION: HTML and JavaScript example showing how to use mermaid.detectType function to determine the type of diagram from a given definition.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import mermaid from './mermaid.esm.mjs';\n  const graphDefinition = `sequenceDiagram\n    Pumbaa->>Timon:I ate like a pig.\n    Timon->>Pumbaa:Pumbaa, you ARE a pig.`;\n  try {\n    const type = mermaid.detectType(graphDefinition);\n    console.log(type); // 'sequence'\n  } catch (error) {\n    // UnknownDiagramError\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Class Diagrams to Hide Empty Members Box\nDESCRIPTION: Demonstrates how to configure a class diagram to hide empty members boxes using the configuration option. This creates a cleaner diagram when classes don't have member details to display.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_34\n\nLANGUAGE: mermaid\nCODE:\n```\n---\n  config:\n    class:\n      hideEmptyMembersBox: true\n---\nclassDiagram\n  class Duck\n```\n\n----------------------------------------\n\nTITLE: Defining Text Block Node Shape in Mermaid Flowchart DSL\nDESCRIPTION: This snippet defines a text block node labeled 'This is a text block' using the 'text' shape in Mermaid flowcharts. The text shape is used for displaying plain text blocks without special flowchart semantics. Requires Mermaid flowchart syntax support for the 'text' shape attribute. Input is Mermaid flowchart code; output is a textual node block.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_17\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: text, label: \"This is a text block\" }\n```\n\n----------------------------------------\n\nTITLE: Defining a User Journey Diagram with Accessibility Metadata in Mermaid-js\nDESCRIPTION: This snippet defines a user journey diagram depicting a typical working day, with sections and activities annotated with accessibility title and description. It models a sequence of events and user actions with accessible metadata.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_18\n\nLANGUAGE: mermaid\nCODE:\n```\n  journey\n      accTitle: My User Journey Diagram\n      accDescr: My User Journey Diagram Description\n\n      title My working day\n      section Go to work\n        Make tea: 5: Me\n        Go upstairs: 3: Me\n        Do work: 1: Me, Cat\n      section Go home\n        Go downstairs: 5: Me\n        Sit down: 5: Me\n```\n\n----------------------------------------\n\nTITLE: Adding Line Breaks in Actor Names with Aliases - Mermaid\nDESCRIPTION: Demonstrates how to achieve line breaks within participant or actor names by combining aliases with the `<br/>` tag in the alias definition.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Alice as Alice<br/>Johnson\n    Alice->John: Hello John,<br/>how are you?\n    Note over Alice,John: A typical interaction<br/>But now in two lines\n```\n\n----------------------------------------\n\nTITLE: Mixing Ordered and Unordered Branches with Custom Main Branch Order in Mermaid GitGraph\nDESCRIPTION: Illustrates how Mermaid handles a mix of branches with and without the `order` keyword, and how to override the default main branch order using `mainBranchOrder` in the configuration. Unordered branches appear first in definition order, followed by ordered branches (including `main` if its order is overridden).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_15\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n  gitGraph:\n    showBranches: true\n    showCommitLabel: true\n    mainBranchOrder: 2\n---\n      gitGraph\n      commit\n      branch test1 order: 3\n      branch test2\n      branch test3\n      branch test4 order: 1\n```\n\n----------------------------------------\n\nTITLE: Applying Style Classes to Class Nodes with Members\nDESCRIPTION: Shows how to apply style classes to class nodes that include member definitions. The style is applied to the entire node including its member box.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_31\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class Animal:::someclass {\n        -int sizeInFeet\n        -canEat()\n    }\n    classDef someclass fill:#f96\n```\n\n----------------------------------------\n\nTITLE: Using Commas in Sankey Diagram Data\nDESCRIPTION: This example shows how to handle commas in the source and target node names by wrapping them within double quotes. It uses the `sankey-beta` keyword followed by the data. The double quotes are used to escape the commas.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_6\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid-example\nsankey-beta\n\nPumped heat,\"Heating and cooling, homes\",193.026\nPumped heat,\"Heating and cooling, commercial\",70.672\n```\n```\n\n----------------------------------------\n\nTITLE: Visualizing Graded Scores with Radar Diagram - Mermaid Example\nDESCRIPTION: Shows the application of a radar diagram to display student grades across multiple subjects. This example, wrapped as a Mermaid-example, uses labeled axes and separate curves for each student. The diagram is configured with a maximum and minimum value (100 and 0), and optional title. All data is inline; it serves as a reference for comparative performance visualization. Requires Mermaid environment with radar-beta support.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_1\n\nLANGUAGE: mermaid-example\nCODE:\n```\n---\ntitle: \"Grades\"\n---\nradar-beta\n  axis m[\"Math\"], s[\"Science\"], e[\"English\"]\n  axis h[\"History\"], g[\"Geography\"], a[\"Art\"]\n  curve a[\"Alice\"]{85, 90, 80, 70, 75, 90}\n  curve b[\"Bob\"]{70, 75, 85, 80, 90, 85}\n\n  max 100\n  min 0\n```\n\n----------------------------------------\n\nTITLE: Styling Individual Blocks in Mermaid Block Diagrams\nDESCRIPTION: Demonstrates how to apply custom CSS styles to individual blocks in a Mermaid block diagram. Uses the style keyword followed by block ID and CSS properties to customize the appearance of specific blocks.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nblock-beta\n  id1 space id2\n  id1(\"Start\")-->id2(\"Stop\")\n  style id1 fill:#636,stroke:#333,stroke-width:4px\n  style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5\n```\n\n----------------------------------------\n\nTITLE: Applying classDef Styles Inline with ':::' Operator in Mermaid State Diagrams - Mermaid\nDESCRIPTION: This Mermaid code applies predefined classDef styles to states using the inline ':::' operator within transitions. Each state can have its appearance altered contextually for each transition, provided the relevant classDef exists. Requires Mermaid's state diagram parser; inputs are state and style declarations alongside transitions, and the output is an enhanced, stylized diagram. Not all states permit styling due to current Mermaid limitations.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_26\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram\n   direction TB\n\n   accTitle: This is the accessible title\n   accDescr: This is an accessible description\n\n   classDef notMoving fill:white\n   classDef movement font-style:italic;\n   classDef badBadEvent fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n\n   [*] --> Still:::notMoving\n   Still --> [*]\n   Still --> Moving:::movement\n   Moving --> Still\n   Moving --> Crash:::movement\n   Crash:::badBadEvent --> [*]\n```\n\n----------------------------------------\n\nTITLE: Attaching a Class to a Node - Mermaid\nDESCRIPTION: This snippet shows how to attach a previously defined class to a node in a Mermaid flowchart using the `class` directive.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_109\n\nLANGUAGE: Mermaid\nCODE:\n```\nclass nodeId1 className;\n```\n\n----------------------------------------\n\nTITLE: Configuring Flowchart Layout Algorithms\nDESCRIPTION: This snippet shows how to use the ELK layout algorithm for a flowchart. The `layout: elk` setting in the frontmatter directs Mermaid to use the ELK layout for more complex structures.  Additional Elk-specific configurations, like mergeEdges and nodePlacementStrategy are supported.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/syntax-reference.md#_snippet_3\n\nLANGUAGE: mermaid-example\nCODE:\n```\n--- \nconfig:\n  layout: elk\n  elk:\n    mergeEdges: true\n    nodePlacementStrategy: LINEAR_SEGMENTS\n---\nflowchart LR\n  A[Start] --> B{Choose Path}\n  B -->|Option 1| C[Path 1]\n  B -->|Option 2| D[Path 2]\n```\n\n----------------------------------------\n\nTITLE: Sankey Diagram with Empty Lines for Spacing\nDESCRIPTION: The example showcases how empty lines can be included within the data to improve the readability of the sankey diagram's data source. It uses `sankey-beta` and comma separated values for source, target and value. These empty lines are ignored by the parser, allowing the user to format the diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_5\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid\nsankey-beta\n\nBio-conversion,Losses,26.862\n\nBio-conversion,Solid,280.322\n\nBio-conversion,Gas,81.144\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Arrows to Edges in Mermaid Architecture Diagrams\nDESCRIPTION: Shows how to add directionality arrows to edges using `<` and `>` symbols combined with the `--` connector. This example creates an edge originating from the right (`:R`) of the `subnet` service and pointing towards (`-->`) the left (`:L`) of the `gateway` service, indicating data flow or dependency direction.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nsubnet:R --> L:gateway\n```\n\n----------------------------------------\n\nTITLE: Defining Start Node Shape (Circle) in Mermaid Flowchart DSL\nDESCRIPTION: This snippet illustrates defining a flowchart start node using a circle shape with the label 'Start' in Mermaid. The shape property is set to 'circle' to produce a circular node, often used to denote process start points. Requires Mermaid's support for node shape customizations. Input is Mermaid code; output is a circular start node labeled 'Start'.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: circle, label: \"Start\" }\n```\n\n----------------------------------------\n\nTITLE: Mermaid Quadrant Chart Syntax and Configuration Overview\nDESCRIPTION: This section provides detailed instructions on the syntax elements, configuration parameters, and options for theming Mermaid quadrant charts. It covers how to set chart titles, axes labels, quadrant labels, plotting points, and customizing visual styles. Also explains axis directions, quadrant label placements, point rendering, and various customizable parameters with their default values.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/quadrantChart.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Diagram-specific theme configuration using frontmatter in Markdown\nDESCRIPTION: Shows how to customize the theme of an individual Mermaid diagram within a Markdown file by setting the `config` object with a specific theme (e.g., 'forest') in frontmatter. This local configuration overrides the site-wide theme.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/theming.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n---\nconfig:\n  theme: 'forest'\n---\n  graph TD\n    a --> b\n```\n\n----------------------------------------\n\nTITLE: Handling Unclear Indentation in Mermaid Mindmaps\nDESCRIPTION: Illustrates how Mermaid interprets and attempts to correct ambiguous indentation in the mindmap syntax. Despite inconsistent indentation for node 'C' relative to 'B', Mermaid infers its parent based on the previous clear parent ('A'), treating 'B' and 'C' as siblings.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_11\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    Root\n        A\n            B\n          C\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\nRoot\n    A\n        B\n      C\n```\n\n----------------------------------------\n\nTITLE: Attaching an ID to Edges\nDESCRIPTION: This snippet demonstrates how to assign an ID to an edge in a Mermaid flowchart.  This allows for advanced styling and manipulation of individual edges.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_80\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n  A e1@--> B\n```\n\n----------------------------------------\n\nTITLE: Applying classDef Styles Inline with ':::' Operator in Mermaid State Diagrams - Mermaid-Example\nDESCRIPTION: This example applies classDef styles directly to state transitions using the ':::' operator. States have styles like 'notMoving', 'movement', and 'badBadEvent' directly applied inline within transition definitions. This approach is useful for immediate, context-specific styling and requires the state and style to be defined earlier in the diagram. Outputs are states rendered with their respective styles at transition points. Requires Mermaid parser with classDef and ':::' support.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_25\n\nLANGUAGE: mermaid-example\nCODE:\n```\nstateDiagram\n   direction TB\n\n   accTitle: This is the accessible title\n   accDescr: This is an accessible description\n\n   classDef notMoving fill:white\n   classDef movement font-style:italic;\n   classDef badBadEvent fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n\n   [*] --> Still:::notMoving\n   Still --> [*]\n   Still --> Moving:::movement\n   Moving --> Still\n   Moving --> Crash:::movement\n   Crash:::badBadEvent --> [*]\n```\n\n----------------------------------------\n\nTITLE: Pie Chart Example in Mermaid\nDESCRIPTION: Represents a pie chart with segments for Dogs, Cats, and Rats, showing proportional data visualization. Suitable for simple data distribution presentations.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\npie\n\"Dogs\" : 386\n\"Cats\" : 85\n\"Rats\" : 15\n```\n\nLANGUAGE: Markdown\nCODE:\n```\npie\n\"Dogs\" : 386\n\"Cats\" : 85\n\"Rats\" : 15\n```\n\n----------------------------------------\n\nTITLE: Adding Line Breaks in Messages and Notes - Mermaid\nDESCRIPTION: Explains how to insert line breaks within message text and note content using the HTML break tag `<br/>`. This allows text to span multiple lines within the diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->John: Hello John,<br/>how are you?\n    Note over Alice,John: A typical interaction<br/>But now in two lines\n```\n\n----------------------------------------\n\nTITLE: Declaring Participants Explicitly in ZenUML Sequence Diagram Using zenuml\nDESCRIPTION: This code snippet shows how to explicitly declare participants in the order they should appear in the diagram. It defines participants Bob and Alice by name before showing their interactions. This control over participant order can improve diagram clarity.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_1\n\nLANGUAGE: zenuml\nCODE:\n```\ntitle Declare participant (optional)\nBob\nAlice\nAlice->Bob: Hi Bob\nBob->Alice: Hi Alice\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch in GitGraph - Mermaid\nDESCRIPTION: This snippet shows how to create and immediately switch to a new branch with the 'branch' keyword followed by a name. Subsequent commits are attached to the new branch, which becomes the current context. This allows diagramming feature development or parallel work streams starting from the main branch within the Mermaid gitGraph environment.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n   commit\n   commit\n   branch develop\n   commit\n   commit\n   commit\n```\n\n----------------------------------------\n\nTITLE: Release Process Command for Publishing Mermaid.js Diagrams\nDESCRIPTION: This snippet provides guidelines for updating the version number in 'package.json' and executing the 'npm publish' command to publish Mermaid.js diagrams to npmJS. The process involves generating build files in the 'dist' folder before publishing to ensure the latest diagrams are available publicly.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm version <new-version>\n\n# After updating version number\nnpm publish\n\n# This command builds the diagrams into the 'dist' folder and publishes the package to https://www.npmjs.com\n```\n\n----------------------------------------\n\nTITLE: Annotating Classes with Markers (e.g., Interface) - Mermaid-Example\nDESCRIPTION: Provides a Mermaid code example showing the use of annotations such as <<interface>> after class definitions, adding meta-information in the diagram. The snippet requires only Mermaid and outputs diagrams where interfaces, services, or enumerations are marked explicitly beside class blocks.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_17\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclass Shape\n<<interface>> Shape\nShape : noOfVertices\nShape : draw()\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Commit Label Font Size (Mermaid)\nDESCRIPTION: This Mermaid code snippet demonstrates changing the font size of commit labels in a GitGraph diagram using the `commitLabelFontSize` theme variable.  It overrides the default font size value. The GitGraph syntax defines the diagram elements.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_32\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n    commitLabelColor: '#ff0000'\n    commitLabelBackground: '#00ff00'\n    commitLabelFontSize: '16px'\n---\n       gitGraph\n       commit\n       branch develop\n       commit tag:\"v1.0.0\"\n       commit\n       checkout main\n       commit type: HIGHLIGHT\n       commit\n       merge develop\n       commit\n       branch featureA\n       commit\n\n```\n```\n\n----------------------------------------\n\nTITLE: Turning Animation On for Edges\nDESCRIPTION: Enables animation for an edge by defining the edge's properties such as `e1@{ animate: true }`, given the edge has an ID.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_34\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  A e1@==> B\n  e1@{ animate: true }\n```\n\n----------------------------------------\n\nTITLE: Visualizing Mermaid Git Branching Strategy using Mermaid\nDESCRIPTION: A Mermaid Git Graph diagram illustrating the project's branching strategy, based on Git Flow. It shows development happening on the `develop` branch and feature branches merging into it.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  gitGraph:\n    mainBranchName: develop\n---\ngitGraph LR:\n  commit\n  commit\n  branch \"docs/2910_update-guidelines\" order: 1\n  commit\n  commit\n  commit\n  checkout develop\n  merge \"docs/2910_update-guidelines\"\n  commit\n```\n\n----------------------------------------\n\nTITLE: Including FontAwesome CSS for Mermaid Icon Support - HTML\nDESCRIPTION: This snippet explains how to add FontAwesome support by including the official FontAwesome CSS stylesheet in the HTML document head. By linking to a CDN-hosted CSS file, Mermaid flowcharts can render FontAwesome icons without additional registration. This approach supports any FontAwesome version and is essential for using icon packs without programmatic registration.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_59\n\nLANGUAGE: html\nCODE:\n```\n<link\n  href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css\"\n  rel=\"stylesheet\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Trapezoid Node in Mermaid Flowchart\nDESCRIPTION: This snippet demonstrates how to create a trapezoid node in a Mermaid flowchart. The text is enclosed in `[/ ... \\]`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_16\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A[/Christmas\\]\n```\n\n----------------------------------------\n\nTITLE: Nesting Messages in ZenUML\nDESCRIPTION: This snippet illustrates how sync and creation messages can be nested in ZenUML using curly braces `{}`. This provides a structured way to represent complex interactions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nzenuml\n    A.method() {\n      B.nested_sync_method()\n      B->C: nested async message\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Classes - Mermaid\nDESCRIPTION: This snippet demonstrates how to define multiple classes in a Mermaid flowchart using the `classDef` directive in a single statement.  Separate the class names with commas.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_108\n\nLANGUAGE: Mermaid\nCODE:\n```\nclassDef firstClassName,secondClassName font-size:12pt;\n```\n\n----------------------------------------\n\nTITLE: Defining ZenUML Sequence Diagram Example in zenuml\nDESCRIPTION: This snippet illustrates a basic ZenUML sequence diagram example with a title and two participants exchanging messages. It demonstrates declaring participants implicitly and showing message flow between them.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_0\n\nLANGUAGE: zenuml\nCODE:\n```\ntitle Demo\nAlice->John: Hello John, how are you?\nJohn->Alice: Great!\nAlice->John: See you later!\n```\n\n----------------------------------------\n\nTITLE: Using Break Tag in Section Titles and Events in Mermaid Timeline\nDESCRIPTION: Illustrates the application of the HTML break tag (`<br>`) not only in event text but also within section titles to format long or multi-part section headers effectively in a Mermaid timeline diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/timeline.md#_snippet_5\n\nLANGUAGE: mermaid-example\nCODE:\n```\ntimeline\n        title MermaidChart 2023 Timeline\n        section 2023 Q1 <br> Release Personal Tier\n          Bullet 1 : sub-point 1a : sub-point 1b\n               : sub-point 1c\n          Bullet 2 : sub-point 2a : sub-point 2b\n        section 2023 Q2 <br> Release XYZ Tier\n          Bullet 3 : sub-point <br> 3a : sub-point 3b\n               : sub-point 3c\n          Bullet 4 : sub-point 4a : sub-point 4b\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ntimeline\n        title MermaidChart 2023 Timeline\n        section 2023 Q1 <br> Release Personal Tier\n          Bullet 1 : sub-point 1a : sub-point 1b\n               : sub-point 1c\n          Bullet 2 : sub-point 2a : sub-point 2b\n        section 2023 Q2 <br> Release XYZ Tier\n          Bullet 3 : sub-point <br> 3a : sub-point 3b\n               : sub-point 3c\n          Bullet 4 : sub-point 4a : sub-point 4b\n```\n\n----------------------------------------\n\nTITLE: Customizing GitGraph Branch Label Colors with Theme Variables\nDESCRIPTION: This snippet demonstrates how to customize the colors of branch labels in a GitGraph diagram.  It overrides the default values for the 'gitBranchLabel0' to 'gitBranchLabel9' theme variables, setting them all to white ('#ffffff'). Note that only gitBranchLabel0 to gitBranchLabel7 are respected and after the threshold of 8 branches, theme variables are reused in a cyclic manner.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_28\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n    'gitBranchLabel0': '#ffffff'\n    'gitBranchLabel1': '#ffffff'\n    'gitBranchLabel2': '#ffffff'\n    'gitBranchLabel3': '#ffffff'\n    'gitBranchLabel4': '#ffffff'\n    'gitBranchLabel5': '#ffffff'\n    'gitBranchLabel6': '#ffffff'\n    'gitBranchLabel7': '#ffffff'\n    'gitBranchLabel8': '#ffffff'\n    'gitBranchLabel9': '#ffffff'\n---\n  gitGraph\n    checkout main\n    branch branch1\n    branch branch2\n    branch branch3\n    branch branch4\n    branch branch5\n    branch branch6\n    branch branch7\n    branch branch8\n    branch branch9\n    checkout branch1\n    commit\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Bolt\nDESCRIPTION: This snippet shows how to create a lightning bolt shaped node. Represents communication link.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_44\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: bolt, label: \"Communication link\" }\n```\n\n----------------------------------------\n\nTITLE: Setting Left-to-Right Diagram Orientation in Mermaid ER Diagrams\nDESCRIPTION: Illustrates setting the orientation of a Mermaid ER diagram from left to right using the `direction LR` statement. This arranges the entities horizontally. The example uses the same CUSTOMER, ORDER, and LINE-ITEM entities as the previous orientation example.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/entityRelationshipDiagram.md#_snippet_10\n\nLANGUAGE: mermaid-example\nCODE:\n```\nerDiagram\n    direction LR\n    CUSTOMER ||--o{ ORDER : places\n    CUSTOMER {\n        string name\n        string custNumber\n        string sector\n    }\n    ORDER ||--|{ LINE-ITEM : contains\n    ORDER {\n        int orderNumber\n        string deliveryAddress\n    }\n    LINE-ITEM {\n        string productCode\n        int quantity\n        float pricePerUnit\n    }\n```\n\n----------------------------------------\n\nTITLE: Customizing GitGraph Branch Colors with Theme Variables\nDESCRIPTION: This snippet shows how to override the default branch colors in a GitGraph diagram using theme variables. It sets the 'git0' to 'git7' theme variables to specific hex color codes within the config section to customize branch colors.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_27\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n      'git0': '#ff0000'\n      'git1': '#00ff00'\n      'git2': '#0000ff'\n      'git3': '#ff00ff'\n      'git4': '#00ffff'\n      'git5': '#ffff00'\n      'git6': '#ff00ff'\n      'git7': '#00ffff'\n---\n       gitGraph\n       commit\n       branch develop\n       commit tag:\"v1.0.0\"\n       commit\n       checkout main\n       commit type: HIGHLIGHT\n       commit\n       merge develop\n       commit\n       branch featureA\n       commit\n\n```\n\n----------------------------------------\n\nTITLE: Escaping Double Quotes in Sankey Diagram Data\nDESCRIPTION: This snippet demonstrates how to escape double quotes within the node names.  The `sankey-beta` keyword is used. When a double quote is required within a node name that's already inside a quoted string, another double quote must be added, which is standard for CSV files.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_8\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid-example\nsankey-beta\n\nPumped heat,\"Heating and cooling, \"\"homes\"\"\",193.026\nPumped heat,\"Heating and cooling, \"\"commercial\"\"\",70.672\n```\n```\n\n----------------------------------------\n\nTITLE: Connecting Multiple Classes to Lollipop Interfaces - Mermaid\nDESCRIPTION: Shows how to apply Mermaid's lollipop syntax for multiple classes, connecting them to interfaces using the --() notation. Assumes Mermaid is available. Both classes and interfaces can be declared and linked within the same diagram, clarifying interface implementation relationships for multiple classes at once.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n  class Class01 {\n    int amount\n    draw()\n  }\n  Class01 --() bar\n  Class02 --() bar\n\n  foo ()-- Class01\n\n```\n\n----------------------------------------\n\nTITLE: Adding Notes\nDESCRIPTION: This snippet shows how to add notes to states using the `note` keyword.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_13\n\nLANGUAGE: mermaid-example\nCODE:\n```\n    stateDiagram-v2\n        State1: The state with a note\n        note right of State1\n            Important information! You can write\n            notes.\n        end note\n        State1 --> State2\n        note left of State2 : This is the note to the left.\n```\n\n----------------------------------------\n\nTITLE: Basic Sequence Diagram - Mermaid\nDESCRIPTION: Demonstrates a simple sequence diagram showing a basic message exchange between two implicit participants (Alice and John). Participants are defined automatically based on the first message.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n    Alice-)John: See you later!\n```\n\n----------------------------------------\n\nTITLE: Styling Line Curves - Mermaid\nDESCRIPTION: This snippet demonstrates how to style the line curve used for lines between items in a Mermaid flowchart using the `curve` property.  Available curve styles include `basis`, `bumpX`, `bumpY`, `cardinal`, `catmullRom`, `linear`, `monotoneX`, `monotoneY`,`natural`, `step`, `stepAfter`, and `stepBefore`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_105\n\nLANGUAGE: Mermaid\nCODE:\n```\n%%{ init: { 'flowchart': { 'curve': 'stepBefore' } } }%%\ngraph LR\n```\n\n----------------------------------------\n\nTITLE: Grouping Classes Using Namespaces - Mermaid-Example\nDESCRIPTION: Provides a Mermaid code snippet encapsulating multiple class definitions under a shared namespace, showing how shapes or entities can be logically grouped in diagrams. No dependencies other than Mermaid; diagram output shows discrete namespaces with internal class organization.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_13\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nnamespace BaseShapes {\n    class Triangle\n    class Rectangle {\n      double width\n      double height\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Detecting Graph Type in TypeScript\nDESCRIPTION: This snippet defines the `detectType` function, which analyzes graph text to determine its type based on its content and the presence of the `%%init` directive. It accepts graph text and an optional Mermaid configuration as input and returns a string representing the graph definition key. It allows developers to determine the appropriate rendering logic for the mermaid diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/Mermaid.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndetectType: (`text`, `config`?) => `string`\n```\n\n----------------------------------------\n\nTITLE: Gantt Chart with Title and Description\nDESCRIPTION: This mermaid.js snippet displays a Gantt chart with an accessible title and description, demonstrating the use of the `accTitle` and `accDescr` keywords for providing accessibility information. The title and description are provided with the appropriate syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid-example\n   gantt\n      accTitle: My Gantt Chart Accessibility Title\n      accDescr: My Gantt Chart Accessibility Description\n\n    title A Gantt Diagram\n    dateFormat  YYYY-MM-DD\n    section Section\n    A task           :a1, 2014-01-01, 30d\n    Another task     :after a1  , 20d\n    section Another\n    Task in sec      :2014-01-12  , 12d\n    another task      : 24d\n\n```\n```\n\n----------------------------------------\n\nTITLE: XY Chart Example in Mermaid\nDESCRIPTION: Renders a combined bar and line chart illustrating sales revenue across months with specified axes labels. Demonstrates multi-series chart creation in Mermaid syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/examples.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nxychart-beta\n    title \"Sales Revenue\"\n    x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]\n    y-axis \"Revenue (in $)\" 4000 --> 11000\n    bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\n    line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Diamond\nDESCRIPTION: This snippet demonstrates the use of the shape keyword to create a diamond-shaped node, commonly used for decisions, in a Mermaid flowchart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_27\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: diamond, label: \"Decision\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Axis Tick Intervals in Mermaid Gantt Charts\nDESCRIPTION: This code snippet demonstrates how to set custom intervals for the ticks on the Gantt chart axis. The `tickInterval` keyword allows you to specify the frequency of ticks, such as daily or weekly intervals, which is useful for controlling the granularity of the time axis.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\ntickInterval 1day\n```\n\n----------------------------------------\n\nTITLE: Setting Block Widths in Columns\nDESCRIPTION: This code snippet demonstrates how to set the widths of blocks within a multi-column diagram. Blocks `b` and `c` are assigned a width of 2 columns, while `a` has one column.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/block.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\n```mermaid-example\nblock-beta\n  columns 3\n  a[\\\"A label\\\"] b:2 c:2 d\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Double Circle Node in Mermaid Flowchart\nDESCRIPTION: This snippet demonstrates how to create a double circle node in a Mermaid flowchart. The text is enclosed in triple parentheses `((()))`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_18\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    id1(((This is the text in the circle)))\n```\n\n----------------------------------------\n\nTITLE: Mermaid Integration with Marked in CoffeeScript\nDESCRIPTION: A more advanced Marked renderer in CoffeeScript that not only transforms Mermaid code blocks but also adds the Mermaid script tag to the generated markup if needed. This ensures the Mermaid library is loaded when diagrams are present.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_13\n\nLANGUAGE: coffee\nCODE:\n```\nmarked = require 'marked'\n\nmodule.exports = (options) ->\n  hasMermaid = false\n  renderer = new marked.Renderer()\n  renderer.defaultCode = renderer.code\n  renderer.code = (code, language) ->\n    if language is 'mermaid'\n      html = ''\n      if not hasMermaid\n        hasMermaid = true\n        html += '<script src=\"'+options.mermaidPath+'\"></script>'\n      html + '<pre class=\"mermaid\">'+code+'</pre>'\n    else\n      @defaultCode(code, language)\n\n  renderer\n```\n\n----------------------------------------\n\nTITLE: Defining Try/Catch/Finally (Break) in ZenUML\nDESCRIPTION: This snippet demonstrates how to indicate a stop of the sequence within the flow (usually used to model exceptions) using `try/catch/finally` notation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\nzenuml\n    try {\n      Consumer->API: Book something\n      API->BookingService: Start booking process\n    } catch {\n      API->Consumer: show failure\n    } finally {\n      API->BookingService: rollback status\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining a Rounded Square Node in Mermaid Mindmap\nDESCRIPTION: Shows how to define a node with a rounded square shape in a Mermaid mindmap using the `id(...)` syntax. The text within the parentheses becomes the node label.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_3\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    id(I am a rounded square)\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    id(I am a rounded square)\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal XY Chart with Line Data\nDESCRIPTION: The simplest possible XY chart example that includes only the chart type declaration and a single line data series with numeric values.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/xyChart.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nxychart-beta\n    line [+1.3, .6, 2.4, -.34]\n```\n\n----------------------------------------\n\nTITLE: Registering Icon Packs in TypeScript\nDESCRIPTION: The `registerIconPacks` function allows for registering icon packs into the Mermaid rendering process. It accepts an array of `IconLoader` objects.  This enables the use of custom icons within diagrams. The function doesn't return a value; its sole purpose is to facilitate the use of external icon sets.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/Mermaid.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nregisterIconPacks: (`iconLoaders`) => `void`\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Gantt Chart with Dates and Durations\nDESCRIPTION: This snippet shows the basic structure for a Mermaid Gantt chart. It includes a title, specifies the date format, defines sections, and lists tasks with unique IDs, explicit start dates, and durations or end dates.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\ngantt\n    title A Gantt Diagram\n    dateFormat YYYY-MM-DD\n    section Section\n        A task          :a1, 2014-01-01, 30d\n        Another task    :after a1, 20d\n    section Another\n        Task in Another :2014-01-12, 12d\n        another task    :24d\n```\n\n----------------------------------------\n\nTITLE: Markers for Diagram Elements\nDESCRIPTION: Defines a utility function for inserting markers into diagram elements, such as points, circles, and crosses. Markers influence arrowhead styles and are associated with specific arrowType attributes. This facilitates consistent visual cues across diagrams and supports customization of edge endpoints.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/dagre-wrapper/GraphObjects.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ninsertMarkers(el, ['point', 'circle'])\n```\n\n----------------------------------------\n\nTITLE: Starting Cypress Test Runner in Docker - Bash\nDESCRIPTION: This Bash command executes the Cypress test runner within a Docker container, mounting the current project folder. Requires Docker and the `run` helper script configured. Expected to be used after the dev server is live in Docker. Provides a consistent environment for running E2E tests with Cypress.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_24\n\nLANGUAGE: Bash\nCODE:\n```\n./run pnpm cypress:open --project .\n```\n\n----------------------------------------\n\nTITLE: Creating a UDP Packet Diagram in Mermaid\nDESCRIPTION: Example illustrating how to represent a UDP packet using the `packet-beta` diagram type in Mermaid. It defines standard UDP fields like Source Port, Destination Port, Length, Checksum, and Data, specifying their bit ranges. The title is included directly within the Mermaid definition.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/packet.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\npacket-beta\ntitle UDP Packet\n0-15: \"Source Port\"\n16-31: \"Destination Port\"\n32-47: \"Length\"\n48-63: \"Checksum\"\n64-95: \"Data (variable length)\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Flowchart in Mermaid\nDESCRIPTION: This code snippet demonstrates creating a simple flowchart using Mermaid syntax. It defines nodes with different shapes (square, circle, rounded rectangle, rhombus) and connects them with links. Link text can also be added. No dependencies required, Mermaid library needs to be integrated.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/examples.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A[Square Rect] -- Link text --> B((Circle))\n    A --> C(Round Rect)\n    B --> D{Rhombus}\n    C --> D\n```\n\n----------------------------------------\n\nTITLE: Nesting a Group within Another Group\nDESCRIPTION: This snippet demonstrates how to nest a group within another group in an architecture diagram. It uses the `group` keyword with the `in` keyword specifying the parent group. This organizational feature provides a structured way to represent a hierarchical relationship between groups. The output is a visual representation of the nested group structure.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_3\n\nLANGUAGE: Mermaid\nCODE:\n```\ngroup private_api(cloud)[Private API] in public_api\n```\n\n----------------------------------------\n\nTITLE: Applying the Default Theme to a Mermaid Git Diagram\nDESCRIPTION: Illustrates the default appearance of a Mermaid Git diagram using the 'default' theme. This serves as a baseline comparison for subsequent customization examples.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_26\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n---\n       gitGraph\n       commit\n       branch develop\n       commit tag:\"v1.0.0\"\n       commit\n       checkout main\n       commit type: HIGHLIGHT\n       commit\n       merge develop\n       commit\n       branch featureA\n       commit\n```\n\n----------------------------------------\n\nTITLE: Gantt Chart Example in Mermaid\nDESCRIPTION: Provides a Gantt chart illustrating project sections and tasks with start dates and durations, enabling project timeline visualization. Dependencies include Mermaid syntax documentation for Gantt charts.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\ngantt\n    section Section\n    Completed :done,    des1, 2014-01-06,2014-01-08\n    Active        :active,  des2, 2014-01-07, 3d\n    Parallel 1   :         des3, after des1, 1d\n    Parallel 2   :         des4, after des1, 1d\n    Parallel 3   :         des5, after des3, 1d\n    Parallel 4   :         des6, after des4, 1d\n```\n\nLANGUAGE: Markdown\nCODE:\n```\ngantt\n    section Section\n    Completed :done,    des1, 2014-01-06,2014-01-08\n    Active        :active,  des2, 2014-01-07, 3d\n    Parallel 1   :         des3, after des1, 1d\n    Parallel 2   :         des4, after des1, 1d\n    Parallel 3   :         des5, after des3, 1d\n    Parallel 4   :         des6, after des4, 1d\n```\n\n----------------------------------------\n\nTITLE: Subgraph Direction Inheritance When Connected Externally\nDESCRIPTION: Illustrates how subgraphs inherit parent graph direction when nodes within are linked to outside nodes, overriding internal directions. Demonstrates subgraph behavior with external links in Mermaid.js.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_47\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph subgraph1\n        direction TB\n        top1[top] --> bottom1[bottom]\n    end\n    subgraph subgraph2\n        direction TB\n        top2[top] --> bottom2[bottom]\n    end\n    outside --> subgraph1\n    outside ---> top2\n```\n\n----------------------------------------\n\nTITLE: Click Event Binding with Link Target - Mermaid\nDESCRIPTION: This Mermaid snippet shows how to specify the link target when binding a click event to a node in a flowchart.  The link target determines where the URL will be opened (e.g., `_blank` for a new tab).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_100\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    A-->B\n    B-->C\n    C-->D\n    D-->E\n    click A \"https://www.github.com\" _blank\n    click B \"https://www.github.com\" \"Open this in a new tab\" _blank\n    click C href \"https://www.github.com\" _blank\n    click D href \"https://www.github.com\" \"Open this in a new tab\" _blank\n```\n\n----------------------------------------\n\nTITLE: Using Annotators for Participants in ZenUML Sequence Diagram in zenuml\nDESCRIPTION: This example introduces annotators, special symbols or icons to visually distinguish participant roles (e.g., @Actor, @Database). It demonstrates declaration of Alice as an actor and Bob as a database, enhancing diagram semantics with role-specific visuals.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_2\n\nLANGUAGE: zenuml\nCODE:\n```\ntitle Annotators\n@Actor Alice\n@Database Bob\nAlice->Bob: Hi Bob\nBob->Alice: Hi Alice\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Flowchart with Title and Description\nDESCRIPTION: This HTML snippet shows the generated HTML for the Flowchart defined in previous snippet after the mermaid.js library processes it. The resulting HTML includes the title and description.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<svg\n  aria-labelledby=\"chart-title-mermaid_382ee221\"\n  aria-describedby=\"chart-desc-mermaid_382ee221\"\n  aria-roledescription=\"flowchart-v2\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"100%\"\n  id=\"mermaid_382ee221\"\n>\n  <title id=\"chart-title-mermaid_382ee221\">Big decisions</title>\n  <desc id=\"chart-desc-mermaid_382ee221\">Bob's Burgers process for making big decisions</desc>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Register Icon Pack from CDN\nDESCRIPTION: Registers an icon pack in Mermaid by fetching the icon data from a CDN using the fetch API.  The `name` property specifies the icon pack name, and the `loader` function fetches the JSON data and parses it. The `mermaid.registerIconPacks` function registers the icon pack with Mermaid.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/icons.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport mermaid from 'CDN/mermaid.esm.mjs';\nmermaid.registerIconPacks([\n  {\n    name: 'logos',\n    loader: () =>\n      fetch('https://unpkg.com/@iconify-json/logos@1/icons.json').then((res) => res.json()),\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Customizing Commit Colors in GitGraph (Mermaid)\nDESCRIPTION: This Mermaid code snippet demonstrates customizing the commit label and background colors within a GitGraph diagram. It utilizes the `commitLabelColor` and `commitLabelBackground` theme variables to override the default values.  The `gitGraph` directive defines the diagram's structure.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_30\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n    commitLabelColor: '#ff0000'\n    commitLabelBackground: '#00ff00'\n---\n       gitGraph\n       commit\n       branch develop\n       commit tag:\"v1.0.0\"\n       commit\n       checkout main\n       commit type: HIGHLIGHT\n       commit\n       merge develop\n       commit\n       branch featureA\n       commit\n\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Various Specialized Node Shapes in Mermaid Flowchart DSL\nDESCRIPTION: This collective group of snippets defines multiple specialized node shapes for flowcharts including notch-rect (card), lin-rect (lined process), sm-circ (small start), fork (fork/join), hourglass (collate), comment (curly braces), bolt (communication link), doc (document), delay (half-rounded rectangle), das (direct access storage), lin-cyl (disk storage), curv-trap (curved trapezoid), div-rect (divided process), tri (small triangle), win-pane (internal storage), f-circ (junction), lin-doc (lined document), notch-pent (loop limit), flip-tri (manual file), sl-rect (manual input), docs (multi-document), processes (multi-process), flag (paper tape), bow-rect (stored data), cross-circ (summary), tag-doc (tagged document), and tag-rect (tagged process). Each defines node shape and label to visually communicate semantic meanings in flowcharts. Requires Mermaid's support for all these shape types with custom node attribute syntax. Input: Mermaid code snippets; output: various visually distinct flowchart nodes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_18\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: notch-rect, label: \"Card\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: lin-rect, label: \"Lined process\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: sm-circ, label: \"Small start\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: fork, label: \"Fork or Join\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: hourglass, label: \"Collate\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: comment, label: \"Comment\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: bolt, label: \"Communication link\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: doc, label: \"Document\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: delay, label: \"Delay\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: das, label: \"Direct access storage\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: lin-cyl, label: \"Disk storage\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: curv-trap, label: \"Display\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: div-rect, label: \"Divided process\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: tri, label: \"Extract\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: win-pane, label: \"Internal storage\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: f-circ, label: \"Junction\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: lin-doc, label: \"Lined document\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: notch-pent, label: \"Loop limit\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: flip-tri, label: \"Manual file\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: sl-rect, label: \"Manual input\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: docs, label: \"Multiple documents\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: processes, label: \"Multiple processes\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: flag, label: \"Paper tape\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: bow-rect, label: \"Stored data\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: cross-circ, label: \"Summary\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: tag-doc, label: \"Tagged document\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: tag-rect, label: \"Tagged process\" }\n```\n\n----------------------------------------\n\nTITLE: Nesting Parallel Blocks in Mermaid Sequence Diagrams\nDESCRIPTION: Shows how to nest `par...end` blocks within each other in Mermaid sequence diagrams to represent complex concurrent operations. In this example, Alice messages Bob and John in parallel; John then messages Charlie and Diana in parallel.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_16\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    par Alice to Bob\n        Alice->>Bob: Go help John\n    and Alice to John\n        Alice->>John: I want this done today\n        par John to Charlie\n            John->>Charlie: Can we do this today?\n        and John to Diana\n            John->>Diana: Can you help us today?\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Defining the ParseOptions Interface in TypeScript\nDESCRIPTION: This snippet declares the ParseOptions interface with an optional boolean property suppressErrors, which influences error handling during diagram parsing. It indicates the file's role in configuring parsing behavior for Mermaid.js diagrams, including dependencies from the specified TypeScript file.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/ParseOptions.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ParseOptions {\n  /**\n   * If true, parse will return false instead of throwing an error when the diagram is invalid.\n   * The parseError function will not be called.\n   */\n  suppressErrors?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Mermaid Requirement Diagram\nDESCRIPTION: This snippet demonstrates the basic structure of a Mermaid Requirement diagram. It defines a single requirement ('test_req') with properties like id, text, risk, and verification method, and a single element ('test_entity') with a type. A 'satisfies' relationship connects the element to the requirement.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/requirementDiagram.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\n    requirementDiagram\n\n    requirement test_req {\n    id: 1\n    text: the test text.\n    risk: high\n    verifymethod: test\n    }\n\n    element test_entity {\n    type: simulation\n    }\n\n    test_entity - satisfies -> test_req\n```\n\n----------------------------------------\n\nTITLE: Defining Priority Action and Manual Operation Node Shapes (Trapezoid Bases) in Mermaid Flowchart DSL\nDESCRIPTION: These snippets demonstrate defining trapezoidal nodes labeled 'Priority action' and 'Manual operation' with bases on bottom and top respectively using 'trap-b' and 'trap-t' shapes in Mermaid. These shapes represent specific flowchart actions and operator steps. Requires Mermaid supporting these specialized trapezoid shapes. Input: Mermaid definitions; output: trapezoid-shaped nodes labeled accordingly.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_15\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: trap-b, label: \"Priority action\" }\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: trap-t, label: \"Manual operation\" }\n```\n\n----------------------------------------\n\nTITLE: Custom Markdown Renderer for Mermaid Diagrams in JavaScript\nDESCRIPTION: This snippet overrides the default code block rendering in the 'marked' library to wrap Mermaid graphs within <pre class='mermaid'> tags, enabling proper Mermaid diagram rendering in HTML Markdown output. It depends on the 'marked' library and requires Mermaid scripts to be included separately.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst renderer = new marked.Renderer();\nrenderer.code = function (code, language) {\n  if (code.match(/^sequenceDiagram/) || code.match(/^graph/)) {\n    return '<pre class=\"mermaid\">' + code + '</pre>';\n  } else {\n    return '<pre><code>' + code + '</code></pre>';\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating Mermaid with Marked Renderer in JavaScript\nDESCRIPTION: A custom renderer for the Marked library that transforms Markdown code blocks containing sequence diagrams or graphs into Mermaid diagram HTML. It detects Mermaid syntax and wraps it in a pre tag with the mermaid class.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderer = new marked.Renderer();\nrenderer.code = function (code, language) {\n  if (code.match(/^sequenceDiagram/) || code.match(/^graph/)) {\n    return '<pre class=\"mermaid\">' + code + '</pre>';\n  } else {\n    return '<pre><code>' + code + '</code></pre>';\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Example Mermaid Quadrant Chart Definition\nDESCRIPTION: This snippet defines a sample quadrant chart illustrating campaign reach and engagement, specifying axes, quadrants, and data points. It demonstrates basic usage of the 'quadrantChart' syntax with labeled axes, quadrants, and plotted data points.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/quadrantChart.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nquadrantChart\n    title Reach and engagement of campaigns\n    x-axis Low Reach --> High Reach\n    y-axis Low Engagement --> High Engagement\n    quadrant-1 We should expand\n    quadrant-2 Need to promote\n    quadrant-3 Re-evaluate\n    quadrant-4 May be improved\n    Campaign A: [0.3, 0.6]\n    Campaign B: [0.45, 0.23]\n    Campaign C: [0.57, 0.69]\n    Campaign D: [0.78, 0.34]\n    Campaign E: [0.40, 0.34]\n    Campaign F: [0.35, 0.78]\n```\n\n----------------------------------------\n\nTITLE: Styling State Names with Spaces Using ID Reference in Mermaid State Diagrams - Mermaid-Example\nDESCRIPTION: This snippet demonstrates defining and styling a state with spaces in its label by specifying an internal ID ('yswsii') and assigning a display name and style. The 'classDef' and ':::' operator are used to style the state inline. States are referenced by their ID for transitions and style assignment. Prerequisites include Mermaid with classDef and custom state ID support.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_27\n\nLANGUAGE: mermaid-example\nCODE:\n```\nstateDiagram\n    classDef yourState font-style:italic,font-weight:bold,fill:white\n\n    yswsii: Your state with spaces in it\n    [*] --> yswsii:::yourState\n    [*] --> SomeOtherState\n    SomeOtherState --> YetAnotherState\n    yswsii --> YetAnotherState\n    YetAnotherState --> [*]\n```\n\n----------------------------------------\n\nTITLE: Creating an Alternate Trapezoid Node in Mermaid\nDESCRIPTION: This snippet shows how to create an alternative trapezoid shape.  The text is enclosed in `[\\ ... /]`\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_17\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    B[\\Go shopping/]\n```\n\n----------------------------------------\n\nTITLE: Class Application in Mindmap\nDESCRIPTION: This snippet demonstrates the use of classes to style mindmap nodes, similar to applying CSS classes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\nmindmap\n    Root\n        A[A]\n        :::urgent large\n        B(B)\n        C\n```\n\n----------------------------------------\n\nTITLE: Creating a Thick Link with Text\nDESCRIPTION: This snippet creates a thick link with associated text between two nodes, emphasizing the connection and providing context.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_74\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n   A == text ==> B\n```\n\n----------------------------------------\n\nTITLE: Annotation of Classes in Mermaid Class Diagram\nDESCRIPTION: This snippet showcases the use of annotations in Mermaid class diagrams to provide additional metadata about classes. Annotations are defined within double angle brackets `<<...>>` and can be used to represent interfaces, abstract classes, services, or enumerations. The snippet demonstrates two methods: defining the annotation on a separate line and within a nested structure.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_16\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclass Shape\n<<interface>> Shape\nShape : noOfVertices\nShape : draw()\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclass Shape{\n    <<interface>>\n    noOfVertices\n    draw()\n}\nclass Color{\n    <<enumeration>>\n    RED\n    BLUE\n    GREEN\n    WHITE\n    BLACK\n}\n```\n\n----------------------------------------\n\nTITLE: Minimum Length of a Link\nDESCRIPTION: This snippet demonstrates how to specify a minimum length for a link by adding extra dashes to the link definition.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_87\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A[Start] --> B{Is it?}\n    B -->|Yes| C[OK]\n    C --> D[Rethink]\n    D --> B\n    B ---->|No| E[End]\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: fontFamily\nDESCRIPTION: Specifies the font family used in the rendered diagrams.  Accepts any valid CSS `font-family` value. This parameter influences how text is displayed in the rendered diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfontFamily?: `string`\n```\n\n----------------------------------------\n\nTITLE: JavaScript CSS Styling Example\nDESCRIPTION: This JavaScript code snippet shows an example of defining CSS styles for a diagram element ('.line') within a Mermaid theme. It demonstrates how to use theme options (e.g., `options.lineColor`) to customize the appearance of diagram elements. This is crucial for consistent and customizable styling of diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram-jison.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst getStyles = (options) =>\n  `\n    .line {\n      stroke-width: 1;\n      stroke: ${options.lineColor};\n      stroke-dasharray: 2;\n    }\n    // ...\n    `;\n```\n\n----------------------------------------\n\nTITLE: Creating a Dotted Link with Text\nDESCRIPTION: This snippet creates a dotted link with text between two nodes in a flowchart using the `-. text .-> B` syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_26\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n   A-. text .-> B\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Multi-Process\nDESCRIPTION: This snippet defines shape for Multi-Process.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_59\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: processes, label: \"Multiple processes\" }\n```\n\n----------------------------------------\n\nTITLE: Minimum Length of a Link with Label in Middle\nDESCRIPTION: This snippet shows how to specify minimum link length when the link label is written in the middle of the link.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_88\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A[Start] --> B{Is it?}\n    B -- Yes --> C[OK]\n    C --> D[Rethink]\n    D --> B\n    B -- No ----> E[End]\n```\n\n----------------------------------------\n\nTITLE: Customizing Highlight Commit Colors (Mermaid)\nDESCRIPTION: This Mermaid code uses the `gitInv0` theme variable to customize the highlight commit color for the first branch in a GitGraph diagram. It overrides the default color.  The `gitGraph` syntax defines the structure of the diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_37\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid-example\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n    'gitInv0': '#ff0000'\n---\n       gitGraph\n       commit\n       branch develop\n       commit tag:\"v1.0.0\"\n       commit\n       checkout main\n       commit type: HIGHLIGHT\n       commit\n       merge develop\n       commit\n       branch featureA\n       commit\n\n```\n```\n\n----------------------------------------\n\nTITLE: Defining 90-Degree Edge Direction in Mermaid Architecture Diagrams\nDESCRIPTION: Illustrates creating a 90-degree angled edge between services by specifying different vertical/horizontal connection points. This example creates an edge originating from the top (`:T`) of the `db` service and connecting to the left (`:L`) of the `server` service.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\ndb:T -- L:server\n```\n\n----------------------------------------\n\nTITLE: Sankey Diagram with Empty Lines\nDESCRIPTION: This snippet demonstrates that empty lines are allowed for visual purposes in the data section of a Sankey diagram. The data section uses the `sankey-beta` keyword and then follows it with the data. This allows the user to add spacing.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_4\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid-example\nsankey-beta\n\nBio-conversion,Losses,26.862\n\nBio-conversion,Solid,280.322\n\nBio-conversion,Gas,81.144\n```\n```\n\n----------------------------------------\n\nTITLE: Gantt Chart Example in Mermaid\nDESCRIPTION: Creates a Gantt chart with specified date format, title, and tasks, indicating completion, activity, and future plans. Showcases planning timelines in Mermaid syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/examples.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\ndateFormat  YYYY-MM-DD\ntitle Adding GANTT diagram to mermaid\nexcludes weekdays 2014-01-10\n\nsection A section\nCompleted task            :done,    des1, 2014-01-06,2014-01-08\nActive task               :active,  des2, 2014-01-09, 3d\nFuture task               :         des3, after des2, 5d\nFuture task2               :         des4, after des3, 5d\n```\n\n----------------------------------------\n\nTITLE: Embedding a Mermaid Diagram in HTML\nDESCRIPTION: This HTML snippet demonstrates how to embed a Mermaid diagram within a web page using `<pre>` tags with the class `mermaid`. The Mermaid library will automatically render the diagram specified within the tags. Requires the mermaid.esm.min.mjs module via a script tag.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<pre class=\"mermaid\">\n    graph LR\n    A --- B\n    B-->C[fa:fa-ban forbidden]\n    B-->D(fa:fa-spinner);\n</pre>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import mermaid from '<CDN_URL>/mermaid@<MERMAID_VERSION>/dist/mermaid.esm.min.mjs';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Mermaid.js Flowchart Example\nDESCRIPTION: Displays a simple flowchart with subgraphs, illustrating connections and hierarchy using Mermaid.js syntax and the flowchart TB direction. Demonstrates node and subgraph structure for visualizing process flows.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_44\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end\n    one --> two\n    three --> two\n    two --> c2\n```\n\n----------------------------------------\n\nTITLE: Applying Wrap Directive to a Sequence Diagram\nDESCRIPTION: Example showing a Mermaid sequence diagram definition preceded by a directive that enables text wrapping (`wrap: true`) and sets a specific width (`width: 300`) for the diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_16\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { \"sequence\": { \"wrap\": true, \"width\":300 } } }%%\nsequenceDiagram\nAlice->Bob: Hello Bob, how are you?\nBob->Alice: Fine, how did your mother like the book I suggested? And did you catch the new book about alien invasion?\nAlice->Bob: Good.\nBob->Alice: Cool\n```\n\n----------------------------------------\n\nTITLE: Visualizing Branch Naming Convention Components using Mermaid\nDESCRIPTION: A Mermaid flowchart diagram breaking down the components of the Git branch naming convention, showing the allowed types, separators, issue number, and short description examples.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_15\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  feature --> slash\n  bug --> slash\n  chore --> slash\n  docs --> slash\n  slash --> 2945 --> underscore\n  slash --> 1123 --> underscore\n  underscore --> short_description_1\n  underscore --> short_description_2\n\n  underscore[\"_\"]\n  slash[\"/\"]\n\n  short_description_1[\"state-diagram-new-arrow-florbs\"]\n  short_description_2[\"fix_random_ugly_red_text\"]\n```\n\n----------------------------------------\n\nTITLE: Grouping Participants in Boxes - Mermaid\nDESCRIPTION: Shows how to visually group participants or actors within vertical boxes using the `box` keyword. Boxes can be colored (by name or RGB/RGBA) and can have an optional descriptive label.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    box Purple Alice & John\n    participant A\n    participant J\n    end\n    box Another Group\n    participant B\n    participant C\n    end\n    A->>J: Hello John, how are you?\n    J->>A: Great!\n    A->>B: Hello Bob, how is Charley?\n    B->>C: Hello Charley, how are you?\n```\n\n----------------------------------------\n\nTITLE: Assigning Aliases to Participants in ZenUML in zenuml\nDESCRIPTION: This snippet shows how to assign concise identifiers (aliases) to participants with descriptive labels. Aliases like 'A' for Alice and 'J' for John simplify message references while preserving readability with descriptive names.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_3\n\nLANGUAGE: zenuml\nCODE:\n```\ntitle Aliases\nA as Alice\nJ as John\nA->J: Hello John, how are you?\nJ->A: Great!\n```\n\n----------------------------------------\n\nTITLE: Default Temporal Commit Rendering in Mermaid GitGraph\nDESCRIPTION: Shows the default behavior where commits are rendered based on temporal order (`parallelCommits: false`). Commits made earlier appear closer to their parent commit, reflecting the sequence of events.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_19\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  gitGraph:\n    parallelCommits: false\n---\ngitGraph:\n  commit\n  branch develop\n  commit\n  commit\n  checkout main\n  commit\n  commit\n```\n\n----------------------------------------\n\nTITLE: Fork and Join Elements in State Diagrams\nDESCRIPTION: Illustrates concurrent paths using the '<<fork>>' and '<<join>>' stereotypes to divide and synchronize flows.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    state fork_state <<fork>>\n      [*] --> fork_state\n      fork_state --> State2\n      fork_state --> State3\n\n      state join_state <<join>>\n      State2 --> join_state\n      State3 --> join_state\n      join_state --> State4\n      State4 --> [*]\n```\n\n----------------------------------------\n\nTITLE: Merging Branches with Attributes in Mermaid GitGraph\nDESCRIPTION: Illustrates customizing a merge commit in Mermaid GitGraph by adding attributes like `id`, `tag`, and `type` to the `merge` command. The example shows creating multiple branches ('nice_feature', 'very_nice_feature'), adding commits, and then merging 'nice_feature' into 'main' with a custom ID, tag, and reverse commit type.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\n    gitGraph\n       commit id: \"1\"\n       commit id: \"2\"\n       branch nice_feature\n       checkout nice_feature\n       commit id: \"3\"\n       checkout main\n       commit id: \"4\"\n       checkout nice_feature\n       branch very_nice_feature\n       checkout very_nice_feature\n       commit id: \"5\"\n       checkout main\n       commit id: \"6\"\n       checkout nice_feature\n       commit id: \"7\"\n       checkout main\n       merge nice_feature id: \"customID\" tag: \"customTag\" type: REVERSE\n       checkout very_nice_feature\n       commit id: \"8\"\n       checkout main\n       commit id: \"9\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Tag Label Font Size (Mermaid)\nDESCRIPTION: This Mermaid snippet modifies the font size of tag labels in a GitGraph using the `tagLabelFontSize` theme variable. It adjusts the font size for better readability. The core functionality uses `gitGraph` to specify the diagram layout.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_33\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid-example\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n    commitLabelColor: '#ff0000'\n    commitLabelBackground: '#00ff00'\n    tagLabelFontSize: '16px'\n---\n       gitGraph\n       commit\n       branch develop\n       commit tag:\"v1.0.0\"\n       commit\n       checkout main\n       commit type: HIGHLIGHT\n       commit\n       merge develop\n       commit\n       branch featureA\n       commit\n\n```\n```\n\n----------------------------------------\n\nTITLE: Using Rectangle Intersection Algorithm in JavaScript\nDESCRIPTION: Demonstrates how to use the rectangle intersection function to calculate the point where an arrow connects with a rectangular shape.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/adding-new-shape.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport intersectRect from './intersect-rect.js';\n\nconst intersection = intersectRect(node, point);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequence Diagram Margins in Mermaid Using JavaScript\nDESCRIPTION: This snippet shows how to set margin and layout related configuration options for Mermaid sequence diagrams using the `mermaid.sequenceConfig` object. Parameters like `diagramMarginX`, `diagramMarginY`, `boxTextMargin`, `noteMargin`, `messageMargin`, and `mirrorActors` control spacing and layout presentation aspects. This should be set before initializing Mermaid or during runtime to customize rendering margins. It requires Mermaid's support for the `sequenceConfig` settings. Inputs are margin values in pixels and boolean flags, output affects final diagram layout spacing and actor orientation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid.sequenceConfig = {\n  diagramMarginX: 50,\n  diagramMarginY: 10,\n  boxTextMargin: 5,\n  noteMargin: 10,\n  messageMargin: 35,\n  mirrorActors: true\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Commit IDs in GitGraph - Mermaid\nDESCRIPTION: This snippet shows how to set custom IDs for individual commits using the 'id' attribute within the Mermaid gitGraph syntax. Each commit line contains an explicit identifier. There are no dependencies beyond Mermaid support in the renderer. The output diagram labels each commit with its custom ID, aiding clarity and reference in documentation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n   commit id: \"Alpha\"\n   commit id: \"Beta\"\n   commit id: \"Gamma\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Sync Message with Nesting in ZenUML Sequence Diagram Using zenuml\nDESCRIPTION: This snippet demonstrates a synchronous (blocking) message call modeled in ZenUML. It includes a nested sync message within braces, resembling nested function calls or synchronous process steps in programming languages.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_4\n\nLANGUAGE: zenuml\nCODE:\n```\ntitle Sync message\nA.SyncMessage\nA.SyncMessage(with, parameters) {\n  B.nestedSyncMessage()\n}\n```\n\n----------------------------------------\n\nTITLE: Flowchart with Accessible Title and Description\nDESCRIPTION: This markdown snippet shows how to define an accessible title and single-line description in a mermaid.js flowchart using the `accTitle` and `accDescr` keywords. The description follows the keyword after a colon. The example defines an accessible title and description to the flowchart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid-example\n  graph LR\n      accTitle: Big Decisions\n      accDescr: Bob's Burgers process for making big decisions\n      A[Identify Big Decision] --> B{Make Big Decision}\n      B --> D[Be done]\n```\n```\n\n----------------------------------------\n\nTITLE: Composite States with Internal Transitions\nDESCRIPTION: Shows how to define nested states (composite states) using the 'state' keyword with a block, including internal transitions. Supports multiple nesting levels.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> First\n    state First {\n        [*] --> second\n        second --> [*]\n    }\n\n    [*] --> NamedComposite\n    NamedComposite: Another Composite\n    state NamedComposite {\n        [*] --> namedSimple\n        namedSimple --> [*]\n        namedSimple: Another simple\n    }\n```\n\n----------------------------------------\n\nTITLE: Customizing Tag Label Font Size in a Mermaid Git Diagram\nDESCRIPTION: Demonstrates adjusting the font size for tag labels associated with commits using the 'tagLabelFontSize' theme variable.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_31\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n    commitLabelColor: '#ff0000'\n    commitLabelBackground: '#00ff00'\n    tagLabelFontSize: '16px'\n---\n       gitGraph\n       commit\n       branch develop\n       commit tag:\"v1.0.0\"\n       commit\n       checkout main\n       commit type: HIGHLIGHT\n       commit\n       merge develop\n       commit\n       branch featureA\n       commit\n```\n\n----------------------------------------\n\nTITLE: Setting Input Date Format in Mermaid Gantt Charts\nDESCRIPTION: This code snippet shows how to set the input date format for Gantt chart elements using the `dateFormat` keyword. The format specified determines how dates are interpreted when defining tasks and milestones.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\ndateFormat YYYY-MM-DD\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Dev Server via Docker - Bash\nDESCRIPTION: This Bash command launches the documentation dev server inside a Docker container using an internal helper script. Docker, the `run` helper, PNPM, and docs dependencies are required. Inputs are the script and command; output is a running docs server inside the container.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_28\n\nLANGUAGE: Bash\nCODE:\n```\n./run docs:dev\n```\n\n----------------------------------------\n\nTITLE: Install Icon Pack via NPM\nDESCRIPTION: Installs an icon pack from NPM using the command line. This command adds the `@iconify-json/logos` package to the project's dependencies, allowing it to be imported and used in the Mermaid configuration.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/icons.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @iconify-json/logos@1\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Dev Server with pnpm filter (Bash)\nDESCRIPTION: Provides a Bash command to start the local development server for the documentation website using `pnpm` and the `--filter` option to target the `mermaid` package. This is one way to preview documentation changes locally.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter mermaid run docs:dev\n```\n\n----------------------------------------\n\nTITLE: Animating Edges Using classDef Statements\nDESCRIPTION: Applies animation to an edge by assigning a class to it and defining the animation properties in a `classDef` statement, e.g., `class e1 animate`.  Requires escaping commas in style definitions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_36\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  A e1@--> B\n  classDef animate stroke-dasharray: 9,5,stroke-dashoffset: 900,animation: dash 25s linear infinite;\n  class e1 animate\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Title\nDESCRIPTION: This snippet shows how to set the title of the quadrant chart. The title is rendered at the top of the chart and provides a brief description. There are no dependencies as this is a basic component of the diagram definition. The input is a string for the chart title.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/quadrantChart.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nquadrantChart\n    title This is a sample example\n```\n\n----------------------------------------\n\nTITLE: Initializing Mermaid with Security Level Configuration\nDESCRIPTION: This JavaScript code snippet demonstrates how to initialize Mermaid with a specific `securityLevel`. Setting `securityLevel` allows control over HTML tags and click functionality in rendered diagrams.  Requires the mermaid library to be imported first.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid.initialize({\n  securityLevel: 'loose',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Group in Mermaid Architecture Diagrams\nDESCRIPTION: Illustrates the basic syntax for defining a group in a Mermaid architecture diagram. This example creates a group identified as `public_api`, using the `cloud` icon and displaying the label 'Public API'. Groups visually organize related services.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/architecture.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngroup public_api(cloud)[Public API]\n```\n\n----------------------------------------\n\nTITLE: Creating Composite Blocks with Nesting\nDESCRIPTION: This snippet illustrates how to create composite blocks (blocks within blocks). It shows a parent block with child blocks nested inside. This is achieved using the 'block' keyword and defining internal elements.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/block.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\n```mermaid-example\nblock-beta\n    block\n      D\n    end\n    A[\\\"A: I am a wide one\\\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Comments to ZenUML Sequence Diagrams Using zenuml\nDESCRIPTION: Illustrates use of double slash '//' syntax to add comments above messages or fragments. Markdown formatting is supported in comments, but comments on participants are ignored and not rendered.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_10\n\nLANGUAGE: zenuml\nCODE:\n```\n// a comment on a participant will not be rendered\nBookService\n// a comment on a message.\n// **Markdown** is supported.\nBookService.getBook()\n```\n\n----------------------------------------\n\nTITLE: User Journey Diagram with Title and Description\nDESCRIPTION: This mermaid.js snippet presents a user journey diagram augmented with an accessible title and description using the `accTitle` and `accDescr` keywords to improve accessibility.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid-example\n  journey\n      accTitle: My User Journey Diagram\n      accDescr: My User Journey Diagram Description\n\n      title My working day\n      section Go to work\n        Make tea: 5: Me\n        Go upstairs: 3: Me\n        Do work: 1: Me, Cat\n      section Go home\n        Go downstairs: 5: Me\n        Sit down: 5: Me\n\n```\n```\n\n----------------------------------------\n\nTITLE: GitGraph with Accessible Title and Description in Mermaid\nDESCRIPTION: This Mermaid snippet demonstrates how to add an accessible title and description to a GitGraph diagram using the `accTitle` and `accDescr` keywords. This allows screen readers to provide more context about the diagram to users with visual impairments.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n      accTitle: My GitGraph Accessibility Title\n      accDescr: My GitGraph Accessibility Description\n\n     commit\n     commit\n     branch develop\n     checkout develop\n     commit\n     commit\n     checkout main\n     merge develop\n     commit\n     commit\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Classes to Mermaid Mindmap Nodes\nDESCRIPTION: Shows how to apply custom CSS classes to mindmap nodes using the `:::class1 class2 ...` syntax. Multiple classes can be added, separated by spaces, allowing for custom styling defined externally.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_10\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    Root\n        A[A]\n        :::urgent large\n        B(B)\n        C\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    Root\n        A[A]\n        :::urgent large\n        B(B)\n        C\n```\n\n----------------------------------------\n\nTITLE: State Diagram Example in Mermaid\nDESCRIPTION: Depicts a simple state machine with states like Moving, Crash, Moving, and an initial and terminal state. Demonstrates Mermaid's capacity for modeling state transitions in systems.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\nstateDiagram-v2\n[*] --> Still\nStill --> [*]\nStill --> Moving\nMoving --> Still\nMoving --> Crash\nCrash --> [*]\n```\n\nLANGUAGE: Markdown\nCODE:\n```\nstateDiagram-v2\n[*] --> Still\nStill --> [*]\nStill --> Moving\nMoving --> Still\nMoving --> Crash\nCrash --> [*]\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Classes to Mermaid Class Diagrams\nDESCRIPTION: Shows how to use predefined CSS classes with Mermaid class diagrams. External CSS styles can be applied to nodes using the ':::' notation to reference class names.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  .styleClass > * > g {\n    fill: #ff0000;\n    stroke: #ffff00;\n    stroke-width: 4px;\n  }\n</style>\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class Animal:::styleClass\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Comment\nDESCRIPTION: This snippet demonstrates using the shape keyword to create a comment node, represented by curly braces, in a Mermaid flowchart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_41\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: comment, label: \"Comment\" }\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: altFontFamily\nDESCRIPTION: Defines the altFontFamily configuration option, allowing for specification of a different font family. It uses the CSS `font-family` notation to specify a fallback font.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\naltFontFamily?: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining a Tagged Document Node Shape\nDESCRIPTION: This snippet defines a node with a 'tag-doc' shape, labeled as \"Tagged document\". This shape visually represents a tagged document within the flowchart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_63\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: tag-doc, label: \"Tagged document\" }\n```\n\n----------------------------------------\n\nTITLE: Hexagon Shape in Mindmap\nDESCRIPTION: This code snippet demonstrates the use of a hexagon shape for a node in a mindmap diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nmindmap\n    id{{I am a hexagon}}\n```\n\n----------------------------------------\n\nTITLE: Defining Creation Messages in ZenUML\nDESCRIPTION: This snippet shows how to define creation messages in ZenUML using the `new` keyword, indicating the creation of new objects.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nzenuml\n    new A1\n    new A2(with, parameters)\n```\n\n----------------------------------------\n\nTITLE: Selecting Animation Type for Edges\nDESCRIPTION: Sets the animation speed (fast or slow) for an edge using `e1@{ animation: fast }`, given the edge has an ID. Equivalent to setting `animate: true` and the animation speed.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_35\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  A e1@--> B\n  e1@{ animation: fast }\n```\n\n----------------------------------------\n\nTITLE: Using Default and Specific Classes in Mermaid\nDESCRIPTION: Demonstrates setting a default style for all nodes and then overriding it with specific styles for individual nodes. The 'default' class applies to all nodes unless overridden.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_32\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n  class Animal:::pink\n  class Mineral\n\n  classDef default fill:#f96,color:red\n  classDef pink color:#f9f\n```\n\n----------------------------------------\n\nTITLE: Creating a New Shape Function in TypeScript\nDESCRIPTION: Shows the implementation pattern for creating a new shape function that generates an SVG element, requiring parent element, node data, and rendering options.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/adding-new-shape.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Node, RenderOptions } from '../../types.ts';\n\nexport const myNewShape = async (\n  parent: SVGAElement,\n  node: Node,\n  renderOptions: RenderOptions\n) => {\n  // Create your shape here\n  const shape = parent.insert('g').attr('class', 'my-new-shape');\n  // Add other elements or styles as needed\n  return shape;\n};\n```\n\n----------------------------------------\n\nTITLE: Hiding Empty Members Box in Mermaid Diagrams\nDESCRIPTION: This snippet shows how to configure the `hideEmptyMembersBox` option within the class diagram configuration to hide the empty member box within a class node.  This is done by changing the `hideEmptyMembersBox` value in the class diagram configuration, usually defined in the header of the mermaid diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_30\n\nLANGUAGE: mermaid\nCODE:\n```\n---\n  config:\n    class:\n      hideEmptyMembersBox: true\n---\nclassDiagram\n  class Duck\n```\n\n----------------------------------------\n\nTITLE: Setting Mermaid Flowchart Width using JavaScript API\nDESCRIPTION: Demonstrates how to adjust the rendered width of flowcharts programmatically by setting the `mermaid.flowchartConfig` object in JavaScript. This example sets the width to 100%. This configuration can also be applied via a JSON file using the Mermaid CLI.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_121\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid.flowchartConfig = {\n    width: \"100%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Class Diagrams with Notes in Mermaid\nDESCRIPTION: Demonstrates how to add general notes and class-specific notes in Mermaid class diagrams. Notes can provide additional context or explanation for either the entire diagram or specific classes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/classDiagram.md#_snippet_24\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    note \"This is a general note\"\n    note for MyClass \"This is a note for a class\"\n    class MyClass{\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Aliases for Participants - Mermaid\nDESCRIPTION: Explains how to assign a convenient short identifier (alias) and a descriptive label to participants using the `as` keyword. This simplifies message definitions while providing clear participant names.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant A as Alice\n    participant J as John\n    A->>J: Hello John, how are you?\n    J->>A: Great!\n```\n\n----------------------------------------\n\nTITLE: Using ClassDef for Edge Animations\nDESCRIPTION: This snippet demonstrates animating edges by assigning a class and defining animation properties within a classDef statement. Note the escaping of commas in the `stroke-dasharray` property.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_83\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n  A e1@--> B\n  classDef animate stroke-dasharray: 9\\,5,stroke-dashoffset: 900,animation: dash 25s linear infinite;\n  class e1 animate\n```\n\n----------------------------------------\n\nTITLE: Calculating Rectangle Intersection Points in JavaScript\nDESCRIPTION: Demonstrates importing and using the `intersectRect` function from './intersect-rect.js'. This function calculates the intersection point between a rectangular node and another point, requiring the node element and the target point.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/adding-new-shape.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport intersectRect from './intersect-rect.js';\n\nconst intersection = intersectRect(node, point);\n```\n\n----------------------------------------\n\nTITLE: Defining the updateCurrentConfig Function Signature (TypeScript)\nDESCRIPTION: Declares the `updateCurrentConfig` function signature in TypeScript. It accepts two arguments: `siteCfg` of type `MermaidConfig` and `_directives` as an array of `MermaidConfig`. The function returns an object conforming to the `MermaidConfig` interface. It's defined in `packages/mermaid/src/config.ts`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/config/functions/updateCurrentConfig.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateCurrentConfig(siteCfg: MermaidConfig, _directives: MermaidConfig[]): MermaidConfig\n```\n\n----------------------------------------\n\nTITLE: Declaring Participants Explicitly in ZenUML\nDESCRIPTION: This snippet shows how to explicitly declare participants (Bob and Alice) in a ZenUML diagram before defining their interactions.  This allows specifying the order in which participants appear, regardless of message order.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nzenuml\n    title Declare participant (optional)\n    Bob\n    Alice\n    Alice->Bob: Hi Bob\n    Bob->Alice: Hi Alice\n```\n\n----------------------------------------\n\nTITLE: Creating an Asymmetric Node in Mermaid Flowchart\nDESCRIPTION: This snippet demonstrates how to create an asymmetric node in a Mermaid flowchart. The text is enclosed in `>... ]`\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_11\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    id1>This is the text in the box]\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Text Block\nDESCRIPTION: This snippet demonstrates using the shape keyword to create a plain text block node in a Mermaid flowchart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_34\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: text, label: \"This is a text block\" }\n```\n\n----------------------------------------\n\nTITLE: Calculating Ellipse Intersection Points in JavaScript\nDESCRIPTION: Shows how to import and use the `intersectEllipse` function from './intersect-ellipse.js' to calculate the intersection point between an ellipse node and another point. Requires the node element, ellipse radii (rx, ry), and the target point as input parameters.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/adding-new-shape.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport intersectEllipse from './intersect-ellipse.js';\n\nconst intersection = intersectEllipse(node, rx, ry, point);\n```\n\n----------------------------------------\n\nTITLE: Setting Top-to-Bottom Orientation in Mermaid GitGraph\nDESCRIPTION: Demonstrates setting the Top-to-Bottom (`TB:`) orientation for a Mermaid gitGraph. Commits flow vertically from top to bottom, and branches are arranged horizontally side-by-side.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_17\n\nLANGUAGE: mermaid\nCODE:\n```\n    gitGraph TB:\n       commit\n       commit\n       branch develop\n       commit\n       commit\n       checkout main\n       commit\n       commit\n       merge develop\n       commit\n       commit\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Dev Server with cd and pnpm (Bash)\nDESCRIPTION: Presents an alternative Bash command sequence to start the documentation development server. It involves changing the directory into the `packages/mermaid` folder before running the `pnpm docs:dev` command.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/mermaid\npnpm docs:dev\n```\n\n----------------------------------------\n\nTITLE: Installing Mermaid via NPM/Yarn/PNPM\nDESCRIPTION: These commands install the Mermaid.js library using Node Package Manager (npm), Yarn, or pnpm. The commands add Mermaid as a dependency to your project, enabling you to use it in your JavaScript applications.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\nnpm install mermaid\n# Yarn\nyarn add mermaid\n# PNPM\npnpm add mermaid\n```\n\n----------------------------------------\n\nTITLE: Styling Links - Mermaid\nDESCRIPTION: This snippet demonstrates how to style links in a Mermaid flowchart using the `linkStyle` directive. You can specify the link number and apply CSS styles such as color, stroke, and stroke width.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_103\n\nLANGUAGE: Mermaid\nCODE:\n```\nlinkStyle 3 stroke:#ff3,stroke-width:4px,color:red;\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm and Setting Node.js Version (Host Setup)\nDESCRIPTION: Installs the pnpm package manager using a curl script and sets the global Node.js version to 20 using `pnpm env`. This is part of the host environment setup requirements.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://get.pnpm.io/install.sh | sh -\npnpm env use --global 20\n```\n\n----------------------------------------\n\nTITLE: Requirement Diagram with Title and Description\nDESCRIPTION: This mermaid.js snippet presents a requirement diagram including accessible title and description using the `accTitle` and `accDescr` keywords to facilitate accessibility.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid-example\n  requirementDiagram\n      accTitle: My Requirement Diagram\n      accDescr: My Requirement Diagram Description\n\n       requirement test_req {\n  id: 1\n  text: the test text.\n  risk: high\n  verifymethod: test\n  }\n\n  element test_entity {\n  type: simulation\n  }\n\n  test_entity - satisfies -> test_req\n\n```\n```\n\n----------------------------------------\n\nTITLE: Class Diagram with Title and Description\nDESCRIPTION: This mermaid.js snippet shows a class diagram with an accessible title and description. The title and description are defined using the `accTitle` and `accDescr` keywords, followed by a colon and the string value.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid-example\n   classDiagram\n      accTitle: My Class Diagram\n      accDescr: My Class Diagram Description\n\n      Vehicle <|-- Car\n```\n```\n\n----------------------------------------\n\nTITLE: Older Renderer State Diagram Syntax\nDESCRIPTION: Shows the syntax for defining a state diagram using the legacy 'stateDiagram' directive, illustrating compatibility with older Mermaid renderers. Defines the same states and transitions as earlier examples.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram\n    [*] --> Still\n    Still --> [*]\n\n    Still --> Moving\n    Moving --> Still\n    Moving --> Crash\n    Crash --> [*]\n```\n\n----------------------------------------\n\nTITLE: Using Break Statements in Mermaid Sequence Diagrams\nDESCRIPTION: Demonstrates the `break...end` syntax in Mermaid sequence diagrams to indicate an interruption or halt in the normal sequence flow, often used to model exceptions. This example shows a booking process that might break and show a failure.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_19\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Consumer-->API: Book something\n    API-->BookingService: Start booking process\n    break when the booking process fails\n        API-->Consumer: show failure\n    end\n    API-->BillingService: Start billing process\n```\n\n----------------------------------------\n\nTITLE: Integrating Mermaid Mindmap (Pre 9.4.0)\nDESCRIPTION: Shows the method to include Mermaid and the separate Mindmap diagram module in a web page using HTML script tags and module imports for versions prior to 9.4.0, requiring explicit registration of the external diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"module\">\n  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@9.3.0/dist/mermaid.esm.min.mjs';\n  import mindmap from 'https://cdn.jsdelivr.net/npm/@mermaid-js/mermaid-mindmap@9.3.0/dist/mermaid-mindmap.esm.min.mjs';\n  await mermaid.registerExternalDiagrams([mindmap]);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining an Edge in Architecture Diagram\nDESCRIPTION: This snippet describes the syntax for declaring an edge between two services within an architecture diagram. It uses the `serviceId` followed by a direction indicator (`:T|B|L|R`), arrow indicators (`<`, `>`), and then the destination service and its direction. Edges represent relationships and connections between services. The output is a visual representation of the defined edge.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_6\n\nLANGUAGE: Mermaid\nCODE:\n```\ndb:R -- L:server\n```\n\n----------------------------------------\n\nTITLE: Defining ParseErrorFunction Type Alias in TypeScript\nDESCRIPTION: This snippet defines the `ParseErrorFunction` type alias. It is a function that accepts an error which can be a string, `DetailedError` or `unknown` as the first parameter and an optional `any` type hash as the second parameter and does not return any value.  This alias is used within the mermaid-js library to specify the type signature of functions that handle parsing errors.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/type-aliases/ParseErrorFunction.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nParseErrorFunction: (`err`, `hash`?) => `void`\n```\n\n----------------------------------------\n\nTITLE: Kanban Diagram with Todo and In Progress Columns in Mermaid\nDESCRIPTION: Illustrates a Kanban board with 'Todo' and 'In progress' columns, listing multiple tasks under each column. This demonstrates how to populate columns with task items.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/diagrams/kanban/samples.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nkanban\n  Todo\n    Create JISON\n    Update DB function\n    Create parsing tests\n    define getData\n    Create renderer\n  In progress\n    Design grammar\n```\n\n----------------------------------------\n\nTITLE: Configuring Rotated Commit Labels in Mermaid gitGraph (mermaid)\nDESCRIPTION: This snippet configures a Mermaid gitGraph diagram to use rotated commit labels, placing them below the commit circles at a 45-degree angle for improved readability, especially with long labels. It utilizes the config directive 'rotateCommitLabel: true', which is the default behavior. No external dependencies are required; the only prerequisite is a Mermaid-compatible renderer supporting directives. Key inputs include commit identifiers and branch operations. Outputs a git branch diagram with rotated commit labels. It is best used for repositories with lengthy commit messages that may overlap when displayed horizontally.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n  gitGraph:\n    rotateCommitLabel: true\n---\ngitGraph\n  commit id: \"feat(api): ...\"\n  commit id: \"a\"\n  commit id: \"b\"\n  commit id: \"fix(client): .extra long label..\"\n  branch c2\n  commit id: \"feat(modules): ...\"\n  commit id: \"test(client): ...\"\n  checkout main\n  commit id: \"fix(api): ...\"\n  commit id: \"ci: ...\"\n  branch b1\n  commit\n  branch b2\n  commit\n```\n\n----------------------------------------\n\nTITLE: Dynamically Adjusting Column Widths\nDESCRIPTION: This example highlights Mermaid's automatic column width adjustment based on the largest block content. Mermaid determines the width of the column by the width of the blocks inside. The diagram also demonstrates the use of composite blocks.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/block.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\n```mermaid-example\nblock-beta\n  columns 3\n  a:3\n  block:group1:2\n    columns 2\n    h i j k\n  end\n  g\n  block:group2:3\n    %% columns auto (default)\n    l m n o p q r\n  end\n```\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: er\nDESCRIPTION: Defines the er configuration option. This property configures settings specifically for entity relationship diagrams.  The input is an ErDiagramConfig object.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ner?: `ErDiagramConfig`\n```\n\n----------------------------------------\n\nTITLE: Defining a Summary Node Shape\nDESCRIPTION: This snippet defines a node with a 'cross-circ' shape, labeled as \"Summary\". This special shape is used to visually represent a summary in a flowchart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_62\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: cross-circ, label: \"Summary\" }\n```\n\n----------------------------------------\n\nTITLE: GitGraph with Dark Theme Configuration\nDESCRIPTION: This snippet demonstrates how to configure a GitGraph diagram with the dark theme.  It sets the logLevel to 'debug' and the theme to 'dark' within the config section. The GitGraph then defines a series of commits, branches, checkouts, and merges to simulate a basic git workflow.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_24\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'dark'\n---\n      gitGraph\n        commit\n        branch hotfix\n        checkout hotfix\n        commit\n        branch develop\n        checkout develop\n        commit id:\"ash\" tag:\"abc\"\n        branch featureB\n        checkout featureB\n        commit type:HIGHLIGHT\n        checkout main\n        checkout hotfix\n        commit type:NORMAL\n        checkout develop\n        commit type:REVERSE\n        checkout featureB\n        commit\n        checkout main\n        merge hotfix\n        checkout featureB\n        commit\n        checkout develop\n        branch featureA\n        commit\n        checkout develop\n        merge hotfix\n        checkout featureA\n        commit\n        checkout featureB\n        commit\n        checkout develop\n        merge featureA\n        branch release\n        checkout release\n        commit\n        checkout main\n        commit\n        checkout release\n        merge main\n        checkout develop\n        merge release\n```\n\n----------------------------------------\n\nTITLE: Customizing Commit Label Colors in a Mermaid Git Diagram\nDESCRIPTION: Demonstrates how to change the commit label text color and background color using the 'commitLabelColor' and 'commitLabelBackground' theme variables within the configuration.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_29\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n    commitLabelColor: '#ff0000'\n    commitLabelBackground: '#00ff00'\n---\n       gitGraph\n       commit\n       branch develop\n       commit tag:\"v1.0.0\"\n       commit\n       checkout main\n       commit type: HIGHLIGHT\n       commit\n       merge develop\n       commit\n       branch featureA\n       commit\n```\n\n----------------------------------------\n\nTITLE: Adding a Title to XY Chart\nDESCRIPTION: Example demonstrating how to add a title to an XY chart. If the title contains spaces, it must be enclosed in quotes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/xyChart.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nxychart-beta\n    title \"This is a simple example\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Basic Dependency Declaration\nDESCRIPTION: This snippet shows the basic syntax for declaring dependencies between multiple nodes, requiring multiple lines for the same connections.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_79\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TB\n    A --> C\n    A --> D\n    B --> C\n    B --> D\n```\n\n----------------------------------------\n\nTITLE: Styling Gantt Charts with CSS\nDESCRIPTION: This CSS snippet provides styling for various elements within a Mermaid Gantt chart, including grid lines, task text, and tooltips. These styles can be customized to alter the appearance of the chart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.grid .tick {\n  stroke: lightgrey;\n  opacity: 0.3;\n  shape-rendering: crispEdges;\n}\n.grid path {\n  stroke-width: 0;\n}\n\n#tag {\n  color: white;\n  background: #fa283d;\n  width: 150px;\n  position: absolute;\n  display: none;\n  padding: 3px 6px;\n  margin-left: -80px;\n  font-size: 11px;\n}\n\n#tag:before {\n  border: solid transparent;\n  content: ' ';\n  height: 0;\n  left: 50%;\n  margin-left: -5px;\n  position: absolute;\n  width: 0;\n  border-width: 10px;\n  border-bottom-color: #fa283d;\n  top: -20px;\n}\n.taskText {\n  fill: white;\n  text-anchor: middle;\n}\n.taskTextOutsideRight {\n  fill: black;\n  text-anchor: start;\n}\n.taskTextOutsideLeft {\n  fill: black;\n  text-anchor: end;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking out the develop branch\nDESCRIPTION: Switches the local Git branch to `develop`, ensuring that subsequent changes are based on the latest development version.  `git fetch` or `git pull` are then used to update the local branch with the remote.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout develop\ngit fetch # or `git pull`\n```\n\n----------------------------------------\n\nTITLE: Comments in Mermaid Flowcharts\nDESCRIPTION: Shows how to insert comments within Mermaid flowcharts using lines starting with '%%', which are ignored by the parser but useful for documentation within the diagram code.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_54\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n%% this is a comment A -- text --> B{node}\n   A -- text --> B -- text2 --> C\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests using pnpm (Host Setup)\nDESCRIPTION: Executes the project's test suite using the `pnpm test` command in the host environment. This verifies the setup and ensures the code is working correctly before making changes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Adding Mermaid as a Production Dependency using Yarn\nDESCRIPTION: This shell command uses the Yarn package manager to add Mermaid as a production dependency to the current project. Yarn will download the Mermaid package and save it in the project's node_modules directory, updating the package.json file.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/getting-started.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add mermaid\n```\n\n----------------------------------------\n\nTITLE: Cloning the Mermaid Repository\nDESCRIPTION: This command clones the forked Mermaid repository from GitHub to the local machine. Replace `git@github.com/your-fork/mermaid` with the actual URL of your forked repository. It's a prerequisite for setting up the local development environment.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com/your-fork/mermaid\n```\n\n----------------------------------------\n\nTITLE: Defining Default Class Styles in Mermaid Class Diagrams\nDESCRIPTION: This snippet illustrates how to set a default style for all nodes in a Mermaid class diagram using the `classDef default` keyword. Specific styles can be defined afterwards to override the default styling.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_28\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n  class Animal:::pink\n  class Mineral\n\n  classDef default fill:#f96,color:red\n  classDef pink color:#f9f\n```\n\n----------------------------------------\n\nTITLE: Running unit tests (Host)\nDESCRIPTION: Executes unit tests for the Mermaid project using pnpm in a host environment. The command `pnpm test` runs all tests while `pnpm test:watch` runs the tests and automatically reruns them when changes are made.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\npnpm test\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm test:watch\n```\n\n----------------------------------------\n\nTITLE: Creating Subgraphs\nDESCRIPTION: Shows how to create subgraphs to group nodes in the mermaid diagram using the following syntax:\n`subgraph title\n    graph definition\nend`\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_42\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Tasks - Mermaid\nDESCRIPTION: This snippet shows how to add metadata to tasks in a Mermaid Kanban diagram using the `@{ ... }` syntax. Metadata can include key-value pairs like assigned, ticket, and priority.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/kanban.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nkanban\ntodo[Todo]\n  id3[Update Database Function]@{ ticket: MC-2037, assigned: 'knsv', priority: 'High' }\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships\nDESCRIPTION: This snippet demonstrates different types of relationships in a class diagram (inheritance, composition, aggregation, association, dependency, realization, and link).  It shows the various relationship types supported.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclassA <|-- classB\nclassC *-- classD\nclassE o-- classF\nclassG <-- classH\nclassI -- classJ\nclassK <.. classL\nclassM <|.. classN\nclassO .. classP\n```\n\n----------------------------------------\n\nTITLE: Adding Notes Over Participants - Mermaid\nDESCRIPTION: Shows how to add notes that span horizontally over multiple participants using the `Note over [Actor1],[Actor2]: Text` syntax. This is useful for commenting on interactions between participants.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    Note over Alice,John: A typical interaction\n```\n\n----------------------------------------\n\nTITLE: Adding Comments to Mermaid Sequence Diagrams\nDESCRIPTION: Explains how to include comments within Mermaid sequence diagram code using the `%%` prefix. Comments must be on their own line and are ignored by the parser, useful for code annotation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_21\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    %% this is a comment\n    John-->>Alice: Great!\n```\n\n----------------------------------------\n\nTITLE: Longer links\nDESCRIPTION: Demonstrates the use of extra dashes for longer links to influence the visual layout, such as `B ---->|No| E[End]` or `B -- No ----> E[End]`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_32\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[Start] --> B{Is it?}\n    B -->|Yes| C[OK]\n    C --> D[Rethink]\n    D --> B\n    B ---->|No| E[End]\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[Start] --> B{Is it?}\n    B -- Yes --> C[OK]\n    C --> D[Rethink]\n    D --> B\n    B -- No ----> E[End]\n```\n\n----------------------------------------\n\nTITLE: Defining an Icon Node Shape\nDESCRIPTION: This snippet defines a node with an icon from a registered icon pack. The icon is displayed with a square background and a label positioned at the top.  Icon pack registration is a prerequisite.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_65\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ icon: \"fa:user\", form: \"square\", label: \"User Icon\", pos: \"t\", h: 60 }\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch\nDESCRIPTION: This command creates a new branch based on the current branch (usually `develop`) and switches to it. Replace `docs/2910_update-contributing-guidelines` with your desired branch name following the specified naming convention.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b docs/2910_update-contributing-guidelines\n```\n\n----------------------------------------\n\nTITLE: Repeating Sequence Diagram with Accessibility Metadata in Mermaid-js\nDESCRIPTION: This snippet repeats the same sequence diagram structure with the same accessibility labels, emphasizing consistent documentation of message flows in Mermaid.js diagrams with accessible descriptions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_15\n\nLANGUAGE: mermaid\nCODE:\n```\n   sequenceDiagram\n      accTitle: My Sequence Diagram\n      accDescr: My Sequence Diagram Description\n\n      Alice->>John: Hello John, how are you?\n      John-->>Alice: Great!\n      Alice-)John: See you later!\n```\n\n----------------------------------------\n\nTITLE: Mermaid Timeline Syntax with Multiple Events per Period\nDESCRIPTION: Shows an example of a Mermaid timeline diagram where a single time period ('2004') has multiple events ('Facebook', 'Google') defined on the same line, separated by colons.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/timeline.md#_snippet_2\n\nLANGUAGE: mermaid-example\nCODE:\n```\ntimeline\n    title History of Social Media Platform\n    2002 : LinkedIn\n    2004 : Facebook : Google\n    2005 : YouTube\n    2006 : Twitter\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ntimeline\n    title History of Social Media Platform\n    2002 : LinkedIn\n    2004 : Facebook : Google\n    2005 : YouTube\n    2006 : Twitter\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram Example (Default Behavior)\nDESCRIPTION: A standard Mermaid sequence diagram example showing default rendering behavior, particularly regarding message text wrapping (which is off by default).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\nAlice->Bob: Hello Bob, how are you?\nBob->Alice: Fine, how did your mother like the book I suggested? And did you catch the new book about alien invasion?\nAlice->Bob: Good.\nBob->Alice: Cool\n```\n\n----------------------------------------\n\nTITLE: Defining a Bank Account Class\nDESCRIPTION: This snippet defines a `BankAccount` class with attributes and methods (deposit, withdrawal), showing a class definition with member details using a simple colon syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n--- \ntitle: Bank example\n---\nclassDiagram\n    class BankAccount\n    BankAccount : +String owner\n    BankAccount : +Bigdecimal balance\n    BankAccount : +deposit(amount)\n    BankAccount : +withdrawal(amount)\n```\n\n----------------------------------------\n\nTITLE: Initializing Mermaid with JQuery Selection\nDESCRIPTION: This JavaScript code shows how to initialize Mermaid with a jQuery selection. It initializes Mermaid with undefined config and targets elements with the id `#someId` and class `.yetAnotherClass`. Requires mermaid library and JQuery.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid.init(undefined, $('#someId .yetAnotherClass'));\n```\n\n----------------------------------------\n\nTITLE: User Journey Diagram in Mermaid\nDESCRIPTION: Illustrates a user's working day through sections and steps with associated durations, using Mermaid user journey syntax to map user experiences.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/examples.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\njourney\n    title My working day\n    section Go to work\n      Make tea: 5: Me\n      Go upstairs: 3: Me\n      Do work: 1: Me, Cat\n    section Go home\n      Go downstairs: 5: Me\n      Sit down: 5: Me\n```\n\n----------------------------------------\n\nTITLE: Setting Diagram Direction\nDESCRIPTION: Specifies the rendering direction of the entire diagram or nested states using the 'direction' statement to control layout (e.g., LR for left-to-right).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_17\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram\n    direction LR\n    [*] --> A\n    A --> B\n    B --> C\n    state B {\n      direction LR\n      a --> b\n    }\n    B --> D\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm and Using Node.js 20\nDESCRIPTION: These commands install the pnpm package manager and set the global Node.js version to 20. pnpm is used for managing project dependencies. Node.js version 20 is the recommended version for development.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://get.pnpm.io/install.sh | sh -\npnpm env use --global 20\n```\n\n----------------------------------------\n\nTITLE: Changing Theme via Directive\nDESCRIPTION: A specific directive example demonstrating how to change the diagram theme to 'forest'. Valid theme values include 'default', 'base', 'dark', 'forest', and 'neutral'.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { \"theme\": \"forest\" } }%%\n```\n\n----------------------------------------\n\nTITLE: Creating a Gantt Chart with Mermaid JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Gantt chart representing tasks with their timelines using Mermaid Gantt syntax. It defines sections, marks completions, and supports parallel tasks. Required dependency is Mermaid; tasks are defined with labels, IDs, and durations. Inputs are task specifications, and output is a visual timeline, constrained to the supported Gantt features in Mermaid.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n    section Section\n    Completed :done,    des1, 2014-01-06,2014-01-08\n    Active        :active,  des2, 2014-01-07, 3d\n    Parallel 1   :         des3, after des1, 1d\n    Parallel 2   :         des4, after des1, 1d\n    Parallel 3   :         des5, after des3, 1d\n    Parallel 4   :         des6, after des4, 1d\n```\n\n----------------------------------------\n\nTITLE: Background Highlighting in Mermaid Sequence Diagrams Using Mermaid Syntax\nDESCRIPTION: This snippet demonstrates how to highlight parts of a Mermaid sequence diagram background with colored rectangles using the `rect COLOR ... end` notation. The colors can be specified using rgb or rgba formats to enhance visual grouping or emphasis within the diagram content. This snippet requires Mermaid rendering support for background rects and color parsing. The inputs are diagram elements wrapped within `rect` blocks, and the output is a sequence diagram with visually distinct background highlights.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_20\n\nLANGUAGE: mermaid\nCODE:\n```\nrect COLOR\n... content ...\nend\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nrect rgb(0, 255, 0)\n... content ...\nend\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nrect rgba(0, 0, 255, .1)\n... content ...\nend\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Alice\n    participant John\n\n    rect rgb(191, 223, 255)\n    note right of Alice: Alice calls John.\n    Alice->>+John: Hello John, how are you?\n    rect rgb(200, 150, 255)\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    end\n    John-->>-Alice: I feel great!\n    end\n    Alice ->>+ John: Did you want to go to the game tonight?\n    John -->>- Alice: Yeah! See you there.\n```\n\n----------------------------------------\n\nTITLE: Enabling Parallel Commit Rendering in Mermaid GitGraph\nDESCRIPTION: Demonstrates enabling parallel commit rendering (`parallelCommits: true`). This configuration ignores the precise temporal order and renders commits at the same distance from their parent in a more aligned, parallel fashion.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_20\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  gitGraph:\n    parallelCommits: true\n---\ngitGraph:\n  commit\n  branch develop\n  commit\n  commit\n  checkout main\n  commit\n  commit\n```\n\n----------------------------------------\n\nTITLE: Basic GitGraph Diagram with Branch and Merge in Mermaid\nDESCRIPTION: Demonstrates a simple Git Graph with commits on main branch, creating and committing to a develop branch, then merging back to main with additional commits.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Example Git diagram\n---\ngitGraph\n   commit\n   commit\n   branch develop\n   checkout develop\n   commit\n   commit\n   checkout main\n   merge develop\n   commit\n   commit\n```\n\n----------------------------------------\n\nTITLE: Applying Flowchart Directive to a Graph\nDESCRIPTION: Example showing a Mermaid flowchart definition preceded by a directive that modifies flowchart-specific settings like `htmlLabels` and `curve`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_13\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { \"flowchart\": { \"htmlLabels\": true, \"curve\": \"linear\" } } }%%\ngraph TD\nA(Forest) --> B[/Another/]\nA --> C[End]\n  subgraph section\n  B\n  C\n  end\n```\n\n----------------------------------------\n\nTITLE: Running tests using pnpm (Docker)\nDESCRIPTION: Executes the project's test suite using pnpm within a Docker environment. This command runs the tests defined in the `package.json` file's `test` script via the `./run` script.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./run pnpm test\n```\n\n----------------------------------------\n\nTITLE: Creating Composite Blocks with Nested Elements in Mermaid\nDESCRIPTION: Shows how to create hierarchical structures using composite blocks. This example defines a parent block containing a nested block 'D', followed by a separate block with custom text.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/block.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nblock-beta\n    block\n      D\n    end\n    A[\"A: I am a wide one\"]\n```\n\n----------------------------------------\n\nTITLE: State Diagram with Title and Description\nDESCRIPTION: This mermaid.js snippet includes a state diagram with an accessible title and description, defined via the `accTitle` and `accDescr` keywords for accessibility.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid-example\n   stateDiagram\n      accTitle: My State Diagram\n      accDescr: My State Diagram Description\n\n       s1 --> s2\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Notes to Participants - Mermaid\nDESCRIPTION: Demonstrates how to add notes positioned relative to a single participant using the `Note [ right of | left of ] [Actor]: Text` syntax. Notes provide additional context or comments.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant John\n    Note right of John: Text in note\n```\n\n----------------------------------------\n\nTITLE: Multi-layered Nested Composite States\nDESCRIPTION: Demonstrates deep nesting with multiple layers within composite states, creating hierarchical state structures.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> First\n\n    state First {\n        [*] --> Second\n\n        state Second {\n            [*] --> second\n            second --> Third\n\n            state Third {\n                [*] --> third\n                third --> [*]\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Changing FontFamily via Directive\nDESCRIPTION: This code snippet demonstrates changing the font family of a Mermaid diagram using a directive. The font family is set to `Trebuchet MS, Verdana, Arial, Sans-Serif`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n%%{init: { \"fontFamily\": \"Trebuchet MS, Verdana, Arial, Sans-Serif\" } }%%\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram with Title and Description\nDESCRIPTION: This mermaid.js snippet illustrates a sequence diagram enhanced with accessible title and description, using `accTitle` and `accDescr` keywords.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/accessibility.md#_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid-example\n   sequenceDiagram\n      accTitle: My Sequence Diagram\n      accDescr: My Sequence Diagram Description\n\n      Alice->>John: Hello John, how are you?\n      John-->>Alice: Great!\n      Alice-)John: See you later!\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Mermaid Configuration Directives (Single-line)\nDESCRIPTION: Shows the concise single-line syntax for defining Mermaid directives: `%%{init: { **insert configuration options here** } }%%`. This is useful for simpler configuration overrides.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { **insert configuration options here** } }%%\n```\n\n----------------------------------------\n\nTITLE: Creating a Link with Arrow Head and Text\nDESCRIPTION: This snippet demonstrates creating a link with an arrowhead and text.  It supports two equivalent syntaxes: `A-->|text|B` and `A-- text -->B`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_24\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A-->|text|B\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A-- text -->B\n```\n\n----------------------------------------\n\nTITLE: Embedding Mermaid in Markdown\nDESCRIPTION: Shows how to embed a Mermaid diagram in a Markdown document using a code block with the mermaid language identifier, which is supported by platforms like GitHub and GitLab.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/getting-started.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThe following code-block will be rendered as a Mermaid diagram:\n\n```mermaid\nflowchart LR\n  A --> B\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Link with an Arrow Head\nDESCRIPTION: This snippet creates a simple link with an arrowhead between two nodes in a flowchart.  It uses the basic `-->` syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_21\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A-->B\n```\n\n----------------------------------------\n\nTITLE: Defining Reply Messages in ZenUML\nDESCRIPTION: This snippet demonstrates different ways to express reply messages in ZenUML: assigning a variable from a sync message, using the `return` keyword, and using the `@return` annotator.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nzenuml\n    // 1. assign a variable from a sync message.\n    a = A.SyncMessage()\n\n    // 1.1. optionally give the variable a type\n    SomeType a = A.SyncMessage()\n\n    // 2. use return keyword\n    A.SyncMessage() {\n    return result\n    }\n\n    // 3. use @return or @reply annotator on an async message\n    @return\n    A->B: result\n```\n\n----------------------------------------\n\nTITLE: Stacking Blocks Horizontally\nDESCRIPTION: Demonstrates stacking blocks vertically in a single column using the `columns 1` directive within a block to arrange 4 blocks labeled a,b,c and d vertically.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/block.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\n```mermaid-example\nblock-beta\n  block\n    columns 1\n    a[\\\"A label\\\"] b c d\n  end\n```\n```\n\n----------------------------------------\n\nTITLE: Circle Edge Example\nDESCRIPTION: This snippet demonstrates creating a link between two nodes using a circle edge.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_84\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    A --o B\n```\n\n----------------------------------------\n\nTITLE: Bar Chart Visualization Using Gantt Syntax with Mermaid JavaScript\nDESCRIPTION: This code uses Mermaid's Gantt chart syntax to create a bar chart grouped by 'Git Issues', each represented as a section with a duration bar. Dependencies are limited to Mermaid; tasks are specified by issue ID and days since last update. Input is a sequence of issues with durations, output is a grouped bar chart. The approach is constrained by using Gantt charts to emulate bar charts, lacking axis and style flexibility.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n    title Git Issues - days since last update\n    dateFormat  X\n    axisFormat %s\n\n    section Issue19062\n    71   : 0, 71\n    section Issue19401\n    36   : 0, 36\n    section Issue193\n    34   : 0, 34\n    section Issue7441\n    9    : 0, 9\n    section Issue1300\n    5    : 0, 5\n```\n\n----------------------------------------\n\nTITLE: Setting Left-to-Right Orientation in Mermaid GitGraph\nDESCRIPTION: Shows how to explicitly set the default Left-to-Right (`LR:`) orientation for a Mermaid gitGraph. In this layout, commits progress horizontally from left to right, and branches are stacked vertically.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_16\n\nLANGUAGE: mermaid\nCODE:\n```\n    gitGraph LR:\n       commit\n       commit\n       branch develop\n       commit\n       commit\n       checkout main\n       commit\n       commit\n       merge develop\n       commit\n       commit\n```\n\n----------------------------------------\n\nTITLE: Applying Direct Styles to Points in Mermaid (Markdown Syntax)\nDESCRIPTION: Demonstrates the Markdown syntax for applying inline styles directly to individual points in a Mermaid quadrant chart definition. Style properties like `radius`, `color`, `stroke-color`, and `stroke-width` are specified after the point's coordinates.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/quadrantChart.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nPoint A: [0.9, 0.0] radius: 12\nPoint B: [0.8, 0.1] color: #ff3300, radius: 10\nPoint C: [0.7, 0.2] radius: 25, color: #00ff33, stroke-color: #10f0f0\nPoint D: [0.6, 0.3] radius: 15, stroke-color: #00ff0f, stroke-width: 5px ,color: #ff33f0\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: layout\nDESCRIPTION: Defines which layout algorithm is to be used for rendering the diagram. The input is a string and selects a layout from the available options.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nlayout?: `string`\n```\n\n----------------------------------------\n\nTITLE: Sankey Diagram with Simple Structure\nDESCRIPTION: This code snippet illustrates the core structure required for a Sankey diagram with basic data. The diagram uses the `sankey-beta` keyword and then follows it with the expected comma-separated data. It shows a basic flow of data through the diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sankey.md#_snippet_3\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid\nsankey-beta\n\n%% source,target,value\nElectricity grid,Over generation / exports,104.453\nElectricity grid,Heating and cooling - homes,113.726\nElectricity grid,H2 conversion,27.14\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Mermaid Flowchart Renderer to 'elk'\nDESCRIPTION: Shows how to change the default flowchart renderer from 'dagre' to 'elk' using a configuration directive. The 'elk' renderer, available from Mermaid version 9.4+, is experimental and potentially better for large or complex diagrams. This requires the feature to be enabled in lazy-loading configurations if applicable.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_120\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n  flowchart:\n    defaultRenderer: \"elk\"\n```\n\n----------------------------------------\n\nTITLE: Cross Edge Example\nDESCRIPTION: This snippet demonstrates creating a link between two nodes using a cross edge.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_85\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    A --x B\n```\n\n----------------------------------------\n\nTITLE: Applying the 'default' Theme to a Mermaid GitGraph\nDESCRIPTION: Example applying the 'default' theme to a complex gitGraph diagram via configuration directives. Using `theme: 'default'` renders the diagram with the standard default Mermaid styling.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_23\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n---\n      gitGraph\n        commit type:HIGHLIGHT\n        branch hotfix\n        checkout hotfix\n        commit\n        branch develop\n        checkout develop\n        commit id:\"ash\" tag:\"abc\"\n        branch featureB\n        checkout featureB\n        commit type:HIGHLIGHT\n        checkout main\n        checkout hotfix\n        commit type:NORMAL\n        checkout develop\n        commit type:REVERSE\n        checkout featureB\n        commit\n        checkout main\n        merge hotfix\n        checkout featureB\n        commit\n        checkout develop\n        branch featureA\n        commit\n        checkout develop\n        merge hotfix\n        checkout featureA\n        commit\n        checkout featureB\n        commit\n        checkout develop\n        merge featureA\n        branch release\n        checkout release\n        commit\n        checkout main\n        commit\n        checkout release\n        merge main\n        checkout develop\n        merge release\n```\n\n----------------------------------------\n\nTITLE: Correcting Misplaced Styling in Mermaid Diagrams\nDESCRIPTION: This snippet shows how to correct the syntax for applying styles to blocks in a Mermaid diagram. It highlights the importance of separating style properties with commas and using the correct CSS property format (e.g., fill:#969, stroke:#333). The corrected syntax ensures that the block elements are styled as intended with specific fill and stroke colors. The input is the Mermaid syntax for styling, and the output is a diagram where the block A is styled with a specified fill and stroke.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/block.md#_snippet_8\n\nLANGUAGE: Mermaid\nCODE:\n```\nblock-beta\n  A\n  style A fill:#969,stroke:#333;\n```\n\n----------------------------------------\n\nTITLE: Mermaid Comment Example - Mermaid\nDESCRIPTION: This snippet shows how to add comments to a Mermaid flowchart. Comments are ignored by the parser and must be on their own line, prefaced with `%%`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_102\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n%% this is a comment A -- text --> B{node}\n   A -- text --> B -- text2 --> C\n```\n\n----------------------------------------\n\nTITLE: Suppressing Errors in Mermaid.run\nDESCRIPTION: This JavaScript code demonstrates how to suppress errors during the rendering process of Mermaid diagrams using `mermaid.run`. It disables automatic rendering on load and then calls `mermaid.run` with the `suppressErrors` option set to true. Requires mermaid library to be imported.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nmermaid.initialize({ startOnLoad: false });\nawait mermaid.run({\n  suppressErrors: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Bottom-to-Top Orientation in Mermaid GitGraph (v11.0.0+)\nDESCRIPTION: Illustrates setting the Bottom-to-Top (`BT:`) orientation for a Mermaid gitGraph, available from v11.0.0 onwards. Commits flow vertically from bottom to top, and branches are arranged horizontally side-by-side.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_18\n\nLANGUAGE: mermaid\nCODE:\n```\n    gitGraph BT:\n       commit\n       commit\n       branch develop\n       commit\n       commit\n       checkout main\n       commit\n       commit\n       merge develop\n       commit\n       commit\n```\n\n----------------------------------------\n\nTITLE: Setting Git Graph Orientation to Top-to-Bottom (TB)\nDESCRIPTION: This snippet shows how to set the Mermaid Git Graph orientation to Top-to-Bottom using the `TB:` directive after `gitGraph`. In this layout, commits flow downwards, and branches are arranged side-by-side.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_17\n\nLANGUAGE: mermaid\nCODE:\n```\n    gitGraph TB:\n       commit\n       commit\n       branch develop\n       commit\n       commit\n       checkout main\n       commit\n       commit\n       merge develop\n       commit\n       commit\n```\n\n----------------------------------------\n\nTITLE: Defining a Hexagon Node in Mermaid Mindmap\nDESCRIPTION: Shows how to define a node with a hexagon shape in a Mermaid mindmap using the `id{{...}}` syntax. The text within the double curly braces becomes the node label.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_7\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    id{{I am a hexagon}}\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    id{{I am a hexagon}}\n```\n\n----------------------------------------\n\nTITLE: Activating Sequence Numbers within a Mermaid Diagram\nDESCRIPTION: Illustrates the use of the `autonumber` keyword at the beginning of a Mermaid sequence diagram definition to enable sequence numbering specifically for that diagram, overriding global settings if necessary.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/sequenceDiagram.md#_snippet_24\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    Alice->>John: Hello John, how are you?\n    loop HealthCheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Radar Diagram Syntax - Markdown\nDESCRIPTION: Demonstrates the minimal structure for creating a radar diagram using 'radar-beta' syntax within a Markdown code block. This snippet outlines axis and curve definitions, serving as a template for users to specify axes and compare multiple data series. No external dependencies are required beyond Mermaid's support for the radar-beta diagram. Expected input is axis tags and curve datasets; output is a rendered radar diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/radar.md#_snippet_0\n\nLANGUAGE: md\nCODE:\n```\nradar-beta\naxis A, B, C, D, E\ncurve c1{1,2,3,4,5}\ncurve c2{5,4,3,2,1}\n... More Fields ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Repeat of Requirement Diagram with Accessibility in Mermaid-js\nDESCRIPTION: This snippet repeats the requirement diagram structure with the same accessibility metadata, demonstrating consistency in requirement visualization and accessibility annotation within Mermaid.js diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_13\n\nLANGUAGE: mermaid\nCODE:\n```\n  requirementDiagram\n      accTitle: My Requirement Diagram\n      accDescr: My Requirement Diagram Description\n\n       requirement test_req {\n  id: 1\n  text: the test text.\n  risk: high\n  verifymethod: test\n  }\n\n  element test_entity {\n  type: simulation\n  }\n\n  test_entity - satisfies -> test_req\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Trapezoid Base Bottom\nDESCRIPTION: This snippet demonstrates using the shape keyword to create a trapezoid node with the base at the bottom in a Mermaid flowchart. Represents a priority action.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_31\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: trap-b, label: \"Priority action\" }\n```\n\n----------------------------------------\n\nTITLE: FontAwesome Icons Example - Mermaid\nDESCRIPTION: This snippet shows how to include FontAwesome icons in Mermaid flowchart nodes using the `fa:#icon class name#` syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_115\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    B[\"fa:fa-twitter for peace\"]\n    B-->C[fa:fa-ban forbidden]\n    B-->D(fa:fa-spinner)\n    B-->E(A fa:fa-camera-retro perhaps?)\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: block\nDESCRIPTION: Defines the block configuration option. This property configures settings specifically for block diagrams within Mermaid. It utilizes a BlockDiagramConfig object to specify diagram-specific configurations.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nblock?: `BlockDiagramConfig`\n```\n\n----------------------------------------\n\nTITLE: Defining Class Members with Colon Syntax\nDESCRIPTION: This snippet demonstrates defining class members (attributes and methods) using the colon (`:`) syntax. It focuses on defining members one at a time.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclass BankAccount\nBankAccount : +String owner\nBankAccount : +BigDecimal balance\nBankAccount : +deposit(amount)\nBankAccount : +withdrawal(amount)\n```\n\n----------------------------------------\n\nTITLE: Building Mermaid Library and Docs using pnpm (Docker Setup)\nDESCRIPTION: Compiles the Mermaid library and builds the documentation site within the Docker environment using the `./run build` helper script.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n./run build\n```\n\n----------------------------------------\n\nTITLE: Defining a Circle Node in Mermaid Mindmap\nDESCRIPTION: Shows how to define a node with a circle shape in a Mermaid mindmap using the `id((...))` syntax. The text within the double parentheses becomes the node label.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_4\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    id((I am a circle))\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    id((I am a circle))\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Parsing Text with the Parser\nDESCRIPTION: This JavaScript code snippet shows how to parse text using the parser. It calls the `parse` method of the parser with the text to be parsed as an argument.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/new-diagram-jison.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nflow.parser.parse(text);\n```\n\n----------------------------------------\n\nTITLE: Subgraph Example\nDESCRIPTION: This snippet provides an example of using subgraphs to organize a flowchart, visually grouping related nodes and links.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_92\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests (Docker)\nDESCRIPTION: This command executes the unit tests for the Mermaid project using pnpm within the Docker environment. The `./run` script is used to execute the command inside the Docker container.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\n./run pnpm test\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: fontSize\nDESCRIPTION: Defines the fontSize configuration option. This controls the font size used for diagram text and labels. The value is a number representing the font size in pixels.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nfontSize?: `number`\n```\n\n----------------------------------------\n\nTITLE: Applying Log Level Directive to a Graph\nDESCRIPTION: Example showing a Mermaid graph definition preceded by a directive that sets the log level to 2 (info).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { \"logLevel\": 2 } }%%\ngraph TD\nA(Forest) --> B[/Another/]\nA --> C[End]\n  subgraph section\n  B\n  C\n  end\n```\n\n----------------------------------------\n\nTITLE: Creating a Hexagon Node in Mermaid Flowchart\nDESCRIPTION: This snippet demonstrates how to create a hexagon-shaped node in a Mermaid flowchart. The text is enclosed in double curly braces `{{}}`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_13\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    id1{{This is the text in the box}}\n```\n\n----------------------------------------\n\nTITLE: Defining Return Types for Methods\nDESCRIPTION: This snippet shows how to specify return types for methods using a space between the closing parenthesis and the type.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclass BankAccount{\n    +String owner\n    +BigDecimal balance\n    +deposit(amount) bool\n    +withdrawal(amount) int\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Flowchart Configuration via Directive\nDESCRIPTION: A directive example specifically targeting flowchart configurations, setting `htmlLabels` to true and `curve` to linear.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { \"flowchart\": { \"htmlLabels\": true, \"curve\": \"linear\" } } }%%\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Notched Rectangle\nDESCRIPTION: This snippet shows how to create a notched rectangle, resembling a card, using the shape keyword in a Mermaid flowchart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_35\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: notch-rect, label: \"Card\" }\n```\n\n----------------------------------------\n\nTITLE: Wrap Directive Example\nDESCRIPTION: This example illustrates the usage of the wrap directive in Mermaid. The wrap directive enables text wrapping in sequence diagrams. It is a non-argument directive and is invoked using `%%{wrap}%%`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/8.6.0_docs.md#_snippet_3\n\nLANGUAGE: Mermaid\nCODE:\n```\n%%{wrap}%%\n```\n\n----------------------------------------\n\nTITLE: Applying Styles with ::: Operator\nDESCRIPTION: Shows how to apply classDef styles directly to states using the ::: (three colons) operator within the diagram statements.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_21\n\nLANGUAGE: txt\nCODE:\n```\n[state]:::[style name]\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Manual File\nDESCRIPTION: This snippet defines Manual File node.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_56\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: flip-tri, label: \"Manual file\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Subprocess\nDESCRIPTION: This snippet creates a subprocess-shaped node in a Mermaid flowchart using the `@{ shape: subproc }` syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_23\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: subproc, label: \"This is a subprocess\" }\n```\n\n----------------------------------------\n\nTITLE: Adding a Title to an XY Chart (Mermaid)\nDESCRIPTION: Shows the syntax for adding a title to an XY chart using the `title` keyword followed by the title string. Quotes are required if the title contains spaces.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/xyChart.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nxychart-beta\n    title \"This is a simple example\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Changing Log Level via Directive\nDESCRIPTION: A specific directive example demonstrating how to change the logging level. Possible values range from 1 (debug) to 5 (fatal only), with 5 being the default.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { \"logLevel\": 2 } }%%\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests in Watch Mode (Host)\nDESCRIPTION: This command executes the unit tests in watch mode using pnpm in the host environment. The tests will automatically re-run whenever a file changes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\npnpm test:watch\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: class\nDESCRIPTION: Defines the class configuration option. Configures settings specific to class diagrams rendered within Mermaid.  Uses ClassDiagramConfig to define diagram specific configuration.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass?: `ClassDiagramConfig`\n```\n\n----------------------------------------\n\nTITLE: Transitions with Descriptive Labels\nDESCRIPTION: Shows adding annotations to transitions with descriptive text, clarifying the nature of the transition between states.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    s1 --> s2: A transition\n```\n\n----------------------------------------\n\nTITLE: Chaining Links\nDESCRIPTION: This snippet demonstrates chaining multiple links in the same line, connecting nodes with different text labels on each link.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_76\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n   A -- text --> B -- text2 --> C\n```\n\n----------------------------------------\n\nTITLE: Defining Parallel Actions (par) in ZenUML\nDESCRIPTION: This snippet illustrates how to show actions happening in parallel in a ZenUML diagram using the `par` notation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_13\n\nLANGUAGE: mermaid\nCODE:\n```\nzenuml\n    par {\n        Alice->Bob: Hello guys!\n        Alice->John: Hello guys!\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Dotted Link\nDESCRIPTION: This snippet creates a dotted link between two nodes, which can be used to represent a weaker or less direct relationship.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_71\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n   A-.->B;\n```\n\n----------------------------------------\n\nTITLE: Defining a Subgraph\nDESCRIPTION: This snippet demonstrates how to define a subgraph, grouping nodes and links within a named region of the flowchart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_91\n\nLANGUAGE: Mermaid\nCODE:\n```\nsubgraph title\n    graph definition\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Sequence Diagram Configuration (Single-line)\nDESCRIPTION: A specific example of a single-line directive used to set a sequence diagram configuration (`mirrorActors` to false).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/directives.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { \"sequence\": { \"mirrorActors\":false }}}%%\n```\n\n----------------------------------------\n\nTITLE: Defining a New Custom Shape Function in TypeScript\nDESCRIPTION: Provides a template for creating a new asynchronous custom SVG shape function named `myNewShape`. The function accepts `parent` (SVG element), `node` (data object), and `renderOptions` as arguments, creates a new SVG group (`<g>`) for the shape, assigns a class, and returns the created shape element.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/adding-new-shape.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Node, RenderOptions } from '../../types.ts';\n\nexport const myNewShape = async (\n  parent: SVGAElement,\n  node: Node,\n  renderOptions: RenderOptions\n) => {\n  // Create your shape here\n  const shape = parent.insert('g').attr('class', 'my-new-shape');\n  // Add other elements or styles as needed\n  return shape;\n};\n```\n\n----------------------------------------\n\nTITLE: Commenting in Mermaid Class Diagram\nDESCRIPTION: This snippet shows how to add comments to a Mermaid class diagram. Comments start with `%%` and are ignored by the parser.  The whole line following the comment indicator is treated as a comment.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_17\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n%% This whole line is a comment classDiagram class Shape <<interface>>\nclass Shape{\n    <<interface>>\n    noOfVertices\n    draw()\n}\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: htmlLabels\nDESCRIPTION: Defines the htmlLabels configuration option.  When set to true, the diagrams will use HTML labels.  The input is a boolean.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nhtmlLabels?: `boolean`\n```\n\n----------------------------------------\n\nTITLE: Adding Mermaid as a Development Dependency using Yarn\nDESCRIPTION: This shell command uses the Yarn package manager to add Mermaid as a development dependency to the current project. Development dependencies are typically used during development or build processes, but not required at runtime in production.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/getting-started.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add --dev mermaid\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: markdownAutoWrap\nDESCRIPTION: Defines the markdownAutoWrap configuration option. This controls if automatic wrapping for markdown text in labels occurs. The input is a boolean.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nmarkdownAutoWrap?: `boolean`\n```\n\n----------------------------------------\n\nTITLE: Mermaid Configuration Security Options in TypeScript\nDESCRIPTION: Type definitions for security-related configuration options in Mermaid.js, including securityLevel and secure properties. Security levels can be set to strict, loose, antiscript, or sandbox modes to control how diagrams are processed.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\nsecurityLevel?: \"strict\" | \"loose\" | \"antiscript\" | \"sandbox\"\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nsecure?: string[]\n```\n\n----------------------------------------\n\nTITLE: Adding Parameters to the Secure Array using mermaidAPI.initialize (JavaScript)\nDESCRIPTION: Shows how site owners can extend the list of immutable configuration parameters by passing an array of parameter names to the `secure` key within the `mermaidAPI.initialize` configuration object. This prevents these parameters from being overridden by the `init` directive. Requires the Mermaid.js library (`mermaidAPI`).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/8.6.0_docs.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmermaidAPI.initialize( { startOnLoad: true, secure: ['parameter1', 'parameter2'] } );\n```\n\n----------------------------------------\n\nTITLE: Customizing the Today Marker\nDESCRIPTION: This code snippets show how to style the 'today' marker by setting stroke-width, color, and opacity. Also provides an example of how to turn it off.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\ntodayMarker stroke-width:5px,stroke:#0f0,opacity:0.5\n```\n\nLANGUAGE: markdown\nCODE:\n```\ntodayMarker off\n```\n\n----------------------------------------\n\nTITLE: Example Sankey Diagram Data with CSV Format\nDESCRIPTION: Contains sample data representing energy and waste flows in CSV format to be rendered as a Sankey diagram. Each row specifies a source node, target node, and flow value, illustrating real-world resource movement scenarios. Dependencies include Mermaid.js and the appropriate diagram rendering environment. Data freshness allows for visualizing complex flow networks.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sankey.md#_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\nAgricultural 'waste',Bio-conversion,124.729\nBio-conversion,Liquid,0.597\nBio-conversion,Losses,26.862\nBio-conversion,Solid,280.322\nBio-conversion,Gas,81.144\nBiofuel imports,Liquid,35\nBiomass imports,Solid,35\nCoal imports,Coal,11.606\nCoal reserves,Coal,63.965\nCoal,Solid,75.571\nDistrict heating,Industry,10.639\nDistrict heating,Heating and cooling - commercial,22.505\nDistrict heating,Heating and cooling - homes,46.184\nElectricity grid,Over generation / exports,104.453\nElectricity grid,Heating and cooling - homes,113.726\nElectricity grid,H2 conversion,27.14\nElectricity grid,Industry,342.165\nElectricity grid,Road transport,37.797\nElectricity grid,Agriculture,4.412\nElectricity grid,Heating and cooling - commercial,40.858\nElectricity grid,Losses,56.691\nElectricity grid,Rail transport,7.863\nElectricity grid,Lighting & appliances - commercial,90.008\nElectricity grid,Lighting & appliances - homes,93.494\nGas imports,Ngas,40.719\nGas reserves,Ngas,82.233\nGas,Heating and cooling - commercial,0.129\nGas,Losses,1.401\nGas,Thermal generation,151.891\nGas,Agriculture,2.096\nGas,Industry,48.58\nGeothermal,Electricity grid,7.013\nH2 conversion,H2,20.897\nH2 conversion,Losses,6.242\nH2,Road transport,20.897\nHydro,Electricity grid,6.995\nLiquid,Industry,121.066\nLiquid,International shipping,128.69\nLiquid,Road transport,135.835\nLiquid,Domestic aviation,14.458\nLiquid,International aviation,206.267\nLiquid,Agriculture,3.64\nLiquid,National navigation,33.218\nLiquid,Rail transport,4.413\nMarine algae,Bio-conversion,4.375\nNgas,Gas,122.952\nNuclear,Thermal generation,839.978\nOil imports,Oil,504.287\nOil reserves,Oil,107.703\nOil,Liquid,611.99\nOther waste,Solid,56.587\nOther waste,Bio-conversion,77.81\nPumped heat,Heating and cooling - homes,193.026\nPumped heat,Heating and cooling - commercial,70.672\nSolar PV,Electricity grid,59.901\nSolar Thermal,Heating and cooling - homes,19.263\nSolar,Solar Thermal,19.263\nSolar,Solar PV,59.901\nSolid,Agriculture,0.882\nSolid,Thermal generation,400.12\nSolid,Industry,46.477\nThermal generation,Electricity grid,525.531\nThermal generation,Losses,787.129\nThermal generation,District heating,79.329\nTidal,Electricity grid,9.452\nUK land based bioenergy,Bio-conversion,182.01\nWave,Electricity grid,19.013\nWind,Electricity grid,289.366\n```\n\n----------------------------------------\n\nTITLE: ER Diagram with Unicode Support in Mermaid\nDESCRIPTION: A simple demonstration of how Mermaid ER diagrams support Unicode characters in entity names.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/entityRelationshipDiagram.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    \"This ❤ Unicode\"\n```\n\n----------------------------------------\n\nTITLE: Diagram-specific Theme Configuration with Frontmatter in Mermaid\nDESCRIPTION: Example of setting a theme for an individual diagram using frontmatter configuration to apply the forest theme to a simple flowchart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/theming.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  theme: 'forest'\n---\n  graph TD\n    a --> b\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple Node Links in One Line\nDESCRIPTION: This snippet showcases declaring multiple node links in a single line, creating dependencies in an expressive way.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_77\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n   a --> b & c--> d\n```\n\n----------------------------------------\n\nTITLE: Kanban Diagram Column Example - Mermaid\nDESCRIPTION: This snippet shows a specific example of defining a column in a Mermaid Kanban diagram, where the column ID is `id1` and the title is `Todo`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/kanban.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nid1[Todo]\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated mermaid.init Method\nDESCRIPTION: JavaScript examples showing how to use the deprecated mermaid.init method with different configurations and node selections.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid.init({ noteMargin: 10 }, '.someOtherClass');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid.init(undefined, $('#someId .yetAnotherClass'));\n```\n\n----------------------------------------\n\nTITLE: Bang Shape in Mindmap\nDESCRIPTION: This code snippet illustrates the use of a 'bang' shape for a node in a mindmap diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nmindmap\n    id))I am a bang((\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Hourglass\nDESCRIPTION: This snippet defines an hourglass-shaped node using the shape keyword.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_40\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: hourglass, label: \"Collate\" }\n```\n\n----------------------------------------\n\nTITLE: Checking Out and Updating the Develop Branch using Git\nDESCRIPTION: Switches to the `develop` branch using `git checkout` and updates it with the latest changes from the remote repository using `git fetch` or `git pull`. This ensures new work is based on the latest development code.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout develop\ngit fetch # or `git pull`\n```\n\n----------------------------------------\n\nTITLE: Styling State Names with Spaces Using ID Reference in Mermaid State Diagrams - Mermaid\nDESCRIPTION: This Mermaid code block illustrates using an internal state ID to define a label with spaces while also assigning a custom style using classDef and the ':::' operator. It shows how to direct transitions to and from this specially-named state and style it differently from other nodes. Inputs include classDefs, custom labels, and transitions; output is a state diagram with visually distinct states. Limitation: relies on Mermaid's support for explicit ID and labels.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/stateDiagram.md#_snippet_28\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram\n    classDef yourState font-style:italic,font-weight:bold,fill:white\n\n    yswsii: Your state with spaces in it\n    [*] --> yswsii:::yourState\n    [*] --> SomeOtherState\n    SomeOtherState --> YetAnotherState\n    yswsii --> YetAnotherState\n    YetAnotherState --> [*]\n```\n\n----------------------------------------\n\nTITLE: Defining a Tagged Process Node Shape\nDESCRIPTION: This snippet defines a node with a 'tag-rect' shape, labeled as \"Tagged process\".  This shape visually represents a tagged process in a flowchart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_64\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: tag-rect, label: \"Tagged process\" }\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: maxEdges\nDESCRIPTION: Defines the maximum number of edges that can be drawn in a graph. The input is a number.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nmaxEdges?: `number`\n```\n\n----------------------------------------\n\nTITLE: Default Shape in Mindmap\nDESCRIPTION: This code snippet represents the default shape of a node within a mindmap diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nmindmap\n    I am the default shape\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Document\nDESCRIPTION: This snippet uses shape to create a node of Document shape.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_45\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: doc, label: \"Document\" }\n```\n\n----------------------------------------\n\nTITLE: Illustrating Complex Task Dependencies using After and Until Keywords\nDESCRIPTION: This snippet specifically demonstrates the usage of the 'after' keyword with multiple task IDs and the 'until' keyword. The 'after task1 task2' syntax sets the start date to the latest end date among the listed tasks, while 'until taskID' sets the task's end date to the start date of the referenced task.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gantt.md#_snippet_2\n\nLANGUAGE: Mermaid\nCODE:\n```\ngantt\n    apple :a, 2017-07-20, 1w\n    banana :crit, b, 2017-07-23, 1d\n    cherry :active, c, after b a, 1d\n    kiwi   :d, 2017-07-20, until b c\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Stored Data\nDESCRIPTION: This snippet creates node for Stored Data.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_61\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: bow-rect, label: \"Stored data\" }\n```\n\n----------------------------------------\n\nTITLE: GitGraph with Different Commit Types in Mermaid\nDESCRIPTION: Demonstrates the three commit types available in Mermaid Git Graphs: NORMAL (default), REVERSE (crossed circle), and HIGHLIGHT (filled rectangle).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n   commit id: \"Normal\"\n   commit\n   commit id: \"Reverse\" type: REVERSE\n   commit\n   commit id: \"Highlight\" type: HIGHLIGHT\n   commit\n```\n\n----------------------------------------\n\nTITLE: Creating a Thick Link with Text\nDESCRIPTION: This snippet creates a thick link with text between two nodes in a flowchart using the `A == text ==> B` syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_28\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n   A == text ==> B\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: maxTextSize\nDESCRIPTION: Defines the maximum allowed text size in the user's diagram. The input is a number.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nmaxTextSize?: `number`\n```\n\n----------------------------------------\n\nTITLE: Importing Shape Utility Functions in TypeScript\nDESCRIPTION: Imports various helper functions like `labelHelper`, `updateNodeBounds`, `insertPolygonShape`, `getNodeClasses`, `createPathFromPoints`, and `generateFullSineWavePoints` from the local `utils.ts` module. These utilities are designed to assist in the creation and manipulation of SVG shapes within Mermaid.js.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/adding-new-shape.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  labelHelper,\n  updateNodeBounds,\n  insertPolygonShape,\n  getNodeClasses,\n  createPathFromPoints,\n  generateFullSineWavePoints,\n} from './utils.ts';\n```\n\n----------------------------------------\n\nTITLE: Transitions between States\nDESCRIPTION: This snippet showcases the use of transitions between states.  It defines transitions using arrows and uses undefined states as needed.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_5\n\nLANGUAGE: mermaid-example\nCODE:\n```\nstateDiagram-v2\n    s1 --> s2\n```\n\n----------------------------------------\n\nTITLE: Customizing Tag Label Font Size (Mermaid)\nDESCRIPTION: This Mermaid snippet modifies the font size of tag labels in a GitGraph using the `tagLabelFontSize` theme variable. It adjusts the font size for better readability. The core functionality uses `gitGraph` to specify the diagram layout.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_34\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n    commitLabelColor: '#ff0000'\n    commitLabelBackground: '#00ff00'\n    tagLabelFontSize: '16px'\n---\n       gitGraph\n       commit\n       branch develop\n       commit tag:\"v1.0.0\"\n       commit\n       checkout main\n       commit type: HIGHLIGHT\n       commit\n       merge develop\n       commit\n       branch featureA\n       commit\n\n```\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Shape Utilities in TypeScript\nDESCRIPTION: Demonstrates a basic usage pattern for imported shape utilities. It shows how to get an SVG container element and then call `insertPolygonShape` to add a shape and `labelHelper` to add a label within that shape, passing necessary parameters.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/adding-new-shape.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { labelHelper, insertPolygonShape } from './utils.ts';\n\nconst svgContainer = document.getElementById('svgContainer');\n\n// Insert a polygon shape\ninsertPolygonShape(svgContainer /* shape-specific parameters */);\n\n// Create and insert a label inside the shape\nlabelHelper(svgContainer /* label-specific parameters */);\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: flowchart\nDESCRIPTION: Defines the flowchart configuration option. This property configures settings specific to flowchart diagrams within Mermaid. It utilizes a FlowchartDiagramConfig object.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nflowchart?: `FlowchartDiagramConfig`\n```\n\n----------------------------------------\n\nTITLE: Basic Packet Diagram Syntax in Mermaid\nDESCRIPTION: Shows the fundamental syntax for creating packet diagrams in Mermaid. Defines how to specify single-bit and multi-bit blocks within a network packet structure.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/packet.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\npacket-beta\nstart: \"Block name\" %% Single-bit block\nstart-end: \"Block name\" %% Multi-bit blocks\n... More Fields ...\n```\n\n----------------------------------------\n\nTITLE: Creating an Invisible Link\nDESCRIPTION: This snippet creates an invisible link between two nodes, which can be used to alter the default positioning of nodes in the flowchart.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_75\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    A ~~~ B\n```\n\n----------------------------------------\n\nTITLE: Initializing Mermaid after Document Ready\nDESCRIPTION: This JavaScript code uses jQuery to initialize Mermaid after the document is fully loaded, ensuring that dynamically loaded fonts are available for rendering.  It prevents issues with labels being out of bounds. Requires jQuery and the mermaid library.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$(document).ready(function () {\n  mermaid.initialize();\n});\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: elk\nDESCRIPTION: Defines the elk configuration option.  This allows configuration of Elk layout options.  The object contains a collection of elk-specific options for controlling the layout of the diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nelk?: `object`\n```\n\n----------------------------------------\n\nTITLE: Result of Combined Directives\nDESCRIPTION: This JSON shows the merged result of combining multiple init and initialize directives. Notice how the last value provided for `logLevel` is the one that is ultimately used.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"logLevel\": \"fatal\",\n  \"theme\": \"dark\",\n  \"startOnLoad\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Disk Storage\nDESCRIPTION: This snippet uses the shape keyword to define a lined cylinder which usually represents Disk Storage.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_48\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: lin-cyl, label: \"Disk storage\" }\n```\n\n----------------------------------------\n\nTITLE: Class Diagram Example in Mermaid\nDESCRIPTION: Defines a class diagram illustrating inheritance, composition, aggregation, and relationship types between classes. Key elements include class declarations, relationships (like inheritance, composition, and association), and class methods or properties. Dependencies involve Mermaid syntax support for class diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nClass01 <|-- AveryLongClass : Cool\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label\n```\n\n----------------------------------------\n\nTITLE: Initializing Mermaid after Document Ready\nDESCRIPTION: JavaScript code using jQuery to initialize Mermaid after the page (including fonts) has fully loaded to prevent labels rendering out of bounds.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$(document).ready(function () {\n  mermaid.initialize();\n});\n```\n\n----------------------------------------\n\nTITLE: State Declaration: stateId\nDESCRIPTION: This snippet defines a state using only an identifier (id).  This is the simplest way to define a state in a state diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_2\n\nLANGUAGE: mermaid-example\nCODE:\n```\nstateDiagram-v2\n    stateId\n```\n\n----------------------------------------\n\nTITLE: Mermaid Behavior Configuration Options in TypeScript\nDESCRIPTION: Type definitions for behavior-related configuration options in Mermaid.js, including startup behavior, error handling, and rendering preferences. These options control how Mermaid behaves when loaded and when encountering errors.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\nstartOnLoad?: boolean\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nsuppressErrorRendering?: boolean\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nwrap?: boolean\n```\n\n----------------------------------------\n\nTITLE: Creating an Invisible Link\nDESCRIPTION: This snippet creates an invisible link between two nodes using the `~~~` syntax. This can be used to influence the node's positioning.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_29\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A ~~~ B\n```\n\n----------------------------------------\n\nTITLE: Defining Namespaces\nDESCRIPTION: This snippet demonstrates the use of namespaces to group classes within a class diagram. It demonstrates the structuring of the class diagram with namespaces.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/classDiagram.md#_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nnamespace BaseShapes {\n    class Triangle\n    class Rectangle {\n      double width\n      double height\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Actor Symbols - Mermaid\nDESCRIPTION: Illustrates how to use the `actor` keyword instead of `participant` to render actors using a distinct stick-figure symbol, rather than the default rectangle box.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sequenceDiagram.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    actor Alice\n    actor Bob\n    Alice->>Bob: Hi Bob\n    Bob->>Alice: Hi Alice\n```\n\n----------------------------------------\n\nTITLE: Creating a Cross Edge\nDESCRIPTION: Demonstrates the creation of an edge with a cross head by using `--x`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_38\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A --x B\n```\n\n----------------------------------------\n\nTITLE: Comments in State Diagrams\nDESCRIPTION: This snippet demonstrates how to add comments to the state diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_16\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> Still\n    Still --> [*]\n%% this is a comment\n    Still --> Moving\n    Moving --> Still %% another comment\n    Moving --> Crash\n    Crash --> [*]\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for flowchart with single line accessibility in Mermaid\nDESCRIPTION: This HTML code is generated from the Mermaid code snippet showing accessibility implementation of a flowchart using accTitle and accDescr keywords.  The SVG includes aria-labelledby and aria-describedby to connect the title and description elements to the SVG, improving accessibility.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<svg\n  aria-labelledby=\"chart-title-mermaid_382ee221\"\n  aria-describedby=\"chart-desc-mermaid_382ee221\"\n  aria-roledescription=\"flowchart-v2\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"100%\"\n  id=\"mermaid_382ee221\"\n>\n  <title id=\"chart-title-mermaid_382ee221\">Big decisions</title>\n  <desc id=\"chart-desc-mermaid_382ee221\">Bob's Burgers process for making big decisions</desc>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Loops in ZenUML\nDESCRIPTION: This snippet demonstrates how to express loops in a ZenUML diagram using `while` notation. Other loop notations include `for`, `forEach`, `foreach`, and `loop`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nzenuml\n    Alice->John: Hello John, how are you?\n    while(true) {\n      John->Alice: Great!\n    }\n```\n\n----------------------------------------\n\nTITLE: Customizing Commit Label Font Size in a Mermaid Git Diagram\nDESCRIPTION: Shows how to adjust the font size of commit labels using the 'commitLabelFontSize' theme variable. This allows for fine-tuning the text size within commit markers.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gitgraph.md#_snippet_30\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n    commitLabelColor: '#ff0000'\n    commitLabelBackground: '#00ff00'\n    commitLabelFontSize: '16px'\n---\n       gitGraph\n       commit\n       branch develop\n       commit tag:\"v1.0.0\"\n       commit\n       checkout main\n       commit type: HIGHLIGHT\n       commit\n       merge develop\n       commit\n       branch featureA\n       commit\n```\n\n----------------------------------------\n\nTITLE: Example Architecture Diagram with Junctions (Duplicate)\nDESCRIPTION: This snippet is a duplicate of the architecture diagram that demonstrates the use of junctions. It defines services, junctions, and the connections between them. It also highlights the ability of a visual representation for managing edge relationships. The diagram renders the junction points for splitting or merging connections between services to depict a comprehensive network layout.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_12\n\nLANGUAGE: Mermaid\nCODE:\n```\narchitecture-beta\n    service left_disk(disk)[Disk]\n    service top_disk(disk)[Disk]\n    service bottom_disk(disk)[Disk]\n    service top_gateway(internet)[Gateway]\n    service bottom_gateway(internet)[Gateway]\n    junction junctionCenter\n    junction junctionRight\n\n    left_disk:R -- L:junctionCenter\n    top_disk:B -- T:junctionCenter\n    bottom_disk:T -- B:junctionCenter\n    junctionCenter:R -- L:junctionRight\n    top_gateway:B -- T:junctionRight\n    bottom_gateway:T -- B:junctionRight\n```\n\n----------------------------------------\n\nTITLE: Using the wrap Directive for Text Wrapping (Mermaid)\nDESCRIPTION: Shows the syntax for the non-argument `wrap` directive (`%%{wrap}%%`) used in Mermaid diagrams. This directive enables automatic text wrapping, currently only deployable for sequence diagrams, while respecting manual line breaks using `<br>` tags. Requires Mermaid.js v8.6.0+.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/8.6.0_docs.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{wrap}%%\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Data Extraction from the Graph Object\nDESCRIPTION: This JavaScript code snippet shows how to extract data from the graph object after parsing. It calls methods on the graph object to retrieve the direction, vertices, and edges of the graph.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/new-diagram-jison.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.getDirection();\ngraph.getVertices();\ngraph.getEdges();\n```\n\n----------------------------------------\n\nTITLE: Nesting Sync and Async Messages Using Braces in ZenUML Using zenuml\nDESCRIPTION: Shows how synchronous and creation messages can be nested using braces to represent compound operations. It also demonstrates mixing nested synchronous and asynchronous messages inside the block.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_9\n\nLANGUAGE: zenuml\nCODE:\n```\nA.method() {\n  B.nested_sync_method()\n  B->C: nested async message\n}\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: look\nDESCRIPTION: This option defines the overall visual style for the diagrams.  The input is a string. The valid values include \"classic\" or \"handDrawn\".\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nlook?: `\"classic\"` | `\"handDrawn\"`\n```\n\n----------------------------------------\n\nTITLE: Rendering Math in Sequence Diagram Elements (Mermaid)\nDESCRIPTION: This snippet illustrates how to use `$$...$$` delimiters to render mathematical expressions within various elements of a Mermaid sequence diagram, such as participant names, message labels, and notes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/math.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant 1 as $$\\alpha$$\n    participant 2 as $$\\beta$$\n    1->>2: Solve: $$\\sqrt{2+2}$$\n    2-->>1: Answer: $$2$$\n    Note right of 2: $$\\sqrt{2+2}=\\sqrt{4}=2$$\n```\n\n----------------------------------------\n\nTITLE: Initializing Mermaid with Legacy MathML Fallback (HTML/JS)\nDESCRIPTION: This HTML snippet demonstrates how to load Mermaid as an ES module and initialize it with the `legacyMathML: true` configuration option. This setting forces Mermaid to fall back to CSS-based KaTeX rendering if the browser lacks MathML support. It also shows the necessary inclusion of the KaTeX stylesheet in the document head for this mode to function correctly.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/math.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<!-- KaTeX requires the use of the HTML5 doctype. Without it, KaTeX may not render properly -->\n<html lang=\"en\">\n  <head>\n    <!-- Please ensure the stylesheet's version matches with the KaTeX version in your package-lock -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/npm/katex@{version_number}/dist/katex.min.css\"\n      integrity=\"sha384-{hash}\"\n      crossorigin=\"anonymous\"\n    />\n  </head>\n\n  <body>\n    <script type=\"module\">\n      import mermaid from './mermaid.esm.mjs';\n      mermaid.initialize({\n        legacyMathML: true,\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Disabling Multi-Color Styling in Mermaid Timeline via Directives\nDESCRIPTION: Demonstrates how to override the default multi-color styling for time periods and events in a Mermaid timeline diagram using inline directives within the code block. The `disableMulticolor: true` option forces all elements to use the same color scheme.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/timeline.md#_snippet_8\n\nLANGUAGE: mermaid-example\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n  timeline:\n    disableMulticolor: true\n---\n    timeline\n        title History of Social Media Platform\n          2002 : LinkedIn\n          2004 : Facebook : Google\n          2005 : YouTube\n          2006 : Twitter\n\n\n```\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'base'\n  timeline:\n    disableMulticolor: true\n---\n    timeline\n        title History of Social Media Platform\n          2002 : LinkedIn\n          2004 : Facebook : Google\n          2005 : YouTube\n          2006 : Twitter\n\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Highlight Commit Colors (Mermaid)\nDESCRIPTION: This Mermaid code uses the `gitInv0` theme variable to customize the highlight commit color for the first branch in a GitGraph diagram. It overrides the default color.  The `gitGraph` syntax defines the structure of the diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/gitgraph.md#_snippet_38\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid\n---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n    'gitInv0': '#ff0000'\n---\n       gitGraph\n       commit\n       branch develop\n       commit tag:\"v1.0.0\"\n       commit\n       checkout main\n       commit type: HIGHLIGHT\n       commit\n       merge develop\n       commit\n       branch featureA\n       commit\n\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Requirement Diagram in Mermaid\nDESCRIPTION: Shows how to initiate a requirement diagram, define a simple requirement node including its ID, text, risk level, and verification method, define an element node with its type, and establish a 'satisfies' relationship connecting the element to the requirement.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/requirementDiagram.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nrequirementDiagram\n\n    requirement test_req {\n    id: 1\n    text: the test text.\n    risk: high\n    verifymethod: test\n    }\n\n    element test_entity {\n    type: simulation\n    }\n\n    test_entity - satisfies -> test_req\n```\n\n----------------------------------------\n\nTITLE: Sending an Async Message in ZenUML Sequence Diagram Using zenuml\nDESCRIPTION: Shows an example of an asynchronous (non-blocking) message sent from Alice to Bob. The message simulates fire-and-forget interactions common in event-driven systems.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/zenuml.md#_snippet_5\n\nLANGUAGE: zenuml\nCODE:\n```\ntitle Async message\nAlice->Bob: How are you?\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic ZenUML Sequence Diagram\nDESCRIPTION: This snippet demonstrates a simple ZenUML sequence diagram with a title and basic message exchange between two participants, Alice and John. It showcases the fundamental structure for defining interactions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nzenuml\n    title Demo\n    Alice->John: Hello John, how are you?\n    John->Alice: Great!\n    Alice->John: See you later!\n```\n\n----------------------------------------\n\nTITLE: Defining Sync Messages in ZenUML\nDESCRIPTION: This snippet shows the syntax for defining synchronous messages in ZenUML, including nested sync messages. Sync messages are represented using `A.SyncMessage` notation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/zenuml.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nzenuml\n    title Sync message\n    A.SyncMessage\n    A.SyncMessage(with, parameters) {\n      B.nestedSyncMessage()\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing ELK Layout Package using npm\nDESCRIPTION: This shell command installs the '@mermaid-js/layout-elk' package via npm, which adds ELK layout support to Mermaid projects. It is a prerequisite step before registration and usage of ELK layouts in JavaScript/TypeScript projects.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid-layout-elk/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @mermaid-js/layout-elk\n```\n\n----------------------------------------\n\nTITLE: Defining a Square Node in Mermaid Mindmap\nDESCRIPTION: Shows how to define a node with a square shape in a Mermaid mindmap using the `id[...]` syntax, similar to flowcharts. The text within the square brackets becomes the node label.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_2\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    id[I am a square]\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    id[I am a square]\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Comment Right\nDESCRIPTION: This snippet uses the shape keyword to create a comment with braces on the right.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_42\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: brace-r, label: \"Comment\" }\n```\n\n----------------------------------------\n\nTITLE: Handling Clusters and Edges in Mermaid.js using Dagre\nDESCRIPTION: Provides methods and strategies for managing clusters within diagrams, especially addressing Dagre's limitations regarding edges between clusters. Includes recursive rendering processes and special edge handling with toCluster/fromCluster tags to accurately depict external relationships. Explains how graph transformations convert cluster nodes for layout purposes, with fallbacks when edges cross boundaries.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/dagre-wrapper/GraphObjects.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart\n  subgraph C1\n    a --> b\n  end\n  subgraph C2\n    c\n  end\n  C1 --> C2\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart\n  subgraph C1\n    a\n  end\n  subgraph C2\n    b\n  end\n  a --> C2\n```\n\n----------------------------------------\n\nTITLE: JavaScript Data Extraction\nDESCRIPTION: This JavaScript code shows how to extract data from the graph object after parsing is complete. Methods like `getDirection`, `getVertices`, and `getEdges` are used to retrieve the parsed data. This data is typically used by the renderer to generate the diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram-jison.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.getDirection();\ngraph.getVertices();\ngraph.getEdges();\n```\n\n----------------------------------------\n\nTITLE: JavaScript Parser Error Handling\nDESCRIPTION: This JavaScript code defines a function `parseError` that calls `mermaid.parseError` to provide a common way of detecting and handling parse errors for the end-user. This function is crucial for providing meaningful error messages to users when they write invalid diagram code. The `yy` object is initialized with this function.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram-jison.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexports.parseError = function (err, hash) {\n  mermaid.parseError(err, hash);\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Mermaid v10 Using ESM in HTML\nDESCRIPTION: Demonstrates the correct way to import Mermaid as an ECMAScript module in HTML for v10 and newer. Requires support for JavaScript modules in the browser. The 'mermaid.initialize({ startOnLoad: true })' call configures Mermaid to initialize automatically when the page loads. Expects no inputs; sets up Mermaid globally for subsequent use.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CHANGELOG.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';\n  mermaid.initialize({ startOnLoad: true });\n</script>\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Defining parseError Function\nDESCRIPTION: This JavaScript code defines the `parseError` function for the parser, which is essential for providing a common way of detecting parse errors for the end-user. It calls `mermaid.parseError` to handle the error reporting.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/new-diagram-jison.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexports.parseError = function (err, hash) {\n  mermaid.parseError(err, hash);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating C4 Dynamic Diagram for API Authentication Flow with Mermaid\nDESCRIPTION: This snippet demonstrates how to create a C4 Dynamic diagram for an Internet Banking System API Application. It illustrates the authentication flow between components, showing the sequence of interactions during the sign-in process.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/c4.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nC4Dynamic\ntitle Dynamic diagram for Internet Banking System - API Application\n\nContainerDb(c4, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\nContainer(c1, \"Single-Page Application\", \"JavaScript and Angular\", \"Provides all of the Internet banking functionality to customers via their web browser.\")\nContainer_Boundary(b, \"API Application\") {\n  Component(c3, \"Security Component\", \"Spring Bean\", \"Provides functionality Related to signing in, changing passwords, etc.\")\n  Component(c2, \"Sign In Controller\", \"Spring MVC Rest Controller\", \"Allows users to sign in to the Internet Banking System.\")\n}\nRel(c1, c2, \"Submits credentials to\", \"JSON/HTTPS\")\nRel(c2, c3, \"Calls isAuthenticated() on\")\nRel(c3, c4, \"select * from users where username = ?\", \"JDBC\")\n\nUpdateRelStyle(c1, c2, $textColor=\"red\", $offsetY=\"-40\")\nUpdateRelStyle(c2, c3, $textColor=\"red\", $offsetX=\"-40\", $offsetY=\"60\")\nUpdateRelStyle(c3, c4, $textColor=\"red\", $offsetY=\"-40\", $offsetX=\"10\")\n```\n\n----------------------------------------\n\nTITLE: Running tests using pnpm (Host)\nDESCRIPTION: Executes the project's test suite using pnpm in a host environment. This command runs the tests defined in the `package.json` file's `test` script.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Defining a Bang Node in Mermaid Mindmap\nDESCRIPTION: Shows how to define a node with a bang shape in a Mermaid mindmap using the `id))...((` syntax. The text within the delimiters becomes the node label.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/mindmap.md#_snippet_5\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    id))I am a bang((\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\nmindmap\n    id))I am a bang((\n```\n\n----------------------------------------\n\nTITLE: Register Icon Pack without Lazy Loading\nDESCRIPTION: Registers an icon pack in Mermaid without lazy loading.  The icon pack is imported directly using a static import. The `name` property is set to `icons.prefix` to use the prefix defined in the icon pack, and the `icons` object is passed directly. The `mermaid.registerIconPacks` function registers the icon pack.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/icons.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport mermaid from 'mermaid';\nimport { icons } from '@iconify-json/logos';\nmermaid.registerIconPacks([\n  {\n    name: icons.prefix, // To use the prefix defined in the icon pack\n    icons,\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: c4\nDESCRIPTION: Defines the c4 configuration option. This property configures settings specific to C4 diagrams in Mermaid. Uses C4DiagramConfig to define diagram specific configuration settings.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nc4?: `C4DiagramConfig`\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server using pnpm (Host Setup)\nDESCRIPTION: Starts the local development server using `pnpm run dev` in the host environment. The server typically watches for changes and rebuilds automatically, accessible at http://localhost:9000.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: kanban\nDESCRIPTION: Defines the kanban configuration option. This property configures settings specific to Kanban diagrams. It uses a KanbanDiagramConfig object to define configuration settings.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nkanban?: `KanbanDiagramConfig`\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: gitGraph\nDESCRIPTION: Defines the gitGraph configuration option.  This property allows configuration specific to GitGraph diagrams within Mermaid.  It uses the GitGraphDiagramConfig object to define the settings.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ngitGraph?: `GitGraphDiagramConfig`\n```\n\n----------------------------------------\n\nTITLE: Repeating State Diagram with Accessibility Metadata in Mermaid-js\nDESCRIPTION: This snippet repeats the state diagram with the same accessibility labels, demonstrating consistency in representing state transitions with accessible annotations.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_17\n\nLANGUAGE: mermaid\nCODE:\n```\n   stateDiagram\n      accTitle: My State Diagram\n      accDescr: My State Diagram Description\n\n       s1 --> s2\n```\n\n----------------------------------------\n\nTITLE: Selecting Animation Type for an Edge\nDESCRIPTION: This snippet demonstrates how to select a specific animation type (fast) for an edge, combining animation enabling and speed setting.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_82\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n  A e1@--> B\n  e1@{ animation: fast }\n```\n\n----------------------------------------\n\nTITLE: Building Mermaid locally (Host)\nDESCRIPTION: Builds the Mermaid library and documentation site using pnpm in a host environment.  This command compiles the source code and generates the necessary files for running the application.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining LayoutLoaderDefinition Interface for Mermaid Rendering in TypeScript\nDESCRIPTION: This TypeScript interface defines LayoutLoaderDefinition which contains properties for managing layout loaders in Mermaid diagrams. The optional 'algorithm' string specifies the layout algorithm's name, 'loader' refers to the LayoutLoader instance responsible for applying the layout, and 'name' is a mandatory string used as an identifier. Implementing this interface ensures consistent handling of different layout strategies within Mermaid's rendering utility. Dependencies include the LayoutLoader type and Mermaid's rendering context.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/LayoutLoaderDefinition.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface LayoutLoaderDefinition {\n\tname: string;\n\tloader: LayoutLoader;\n\talgorithm?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Icon Pack via npm\nDESCRIPTION: This command installs the Logos icon pack from the Iconify library using npm. This is a prerequisite for the bundler-based approaches shown in the other examples.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/icons.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @iconify-json/logos@1\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: architecture\nDESCRIPTION: Defines the architecture configuration option. This property configures the settings specific to architecture diagrams rendered using Mermaid. The property is an optional ArchitectureDiagramConfig object.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\narchitecture?: `ArchitectureDiagramConfig`\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: gantt\nDESCRIPTION: Defines the gantt configuration option.  This property is used to configure settings specific to Gantt diagrams within Mermaid.  The input is a GanttDiagramConfig object.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ngantt?: `GanttDiagramConfig`\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: journey\nDESCRIPTION: Defines the journey configuration option. This configures settings specific to journey diagrams. It uses a JourneyDiagramConfig object to define diagram-specific settings.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\njourney?: `JourneyDiagramConfig`\n```\n\n----------------------------------------\n\nTITLE: Calculating Polygon Intersection Points in JavaScript\nDESCRIPTION: Illustrates importing and using the `intersectPolygon` function from './intersect-polygon.js'. This function calculates the intersection point between a polygon node and another point, requiring the node element, an array of points defining the polygon (`polyPoints`), and the target point.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/adding-new-shape.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport intersectPolygon from './intersect-polygon.js';\n\nconst intersection = intersectPolygon(node, polyPoints, point);\n```\n\n----------------------------------------\n\nTITLE: Installing Packages (Host)\nDESCRIPTION: This command installs all the necessary packages and dependencies required for the Mermaid project using pnpm. This command is executed in the host development environment.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting the Mermaid Dev Server using Host Machine - Bash\nDESCRIPTION: This Bash command uses PNPM to launch the local development server for the Mermaid project. Prerequisites include Node.js and PNPM installed, as well as all Mermaid project dependencies resolved. The main input is the CLI command executed in the project's root. This step is often required before running E2E or UI tests locally. Output is an actively running dev server, accessible for further testing or development.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_20\n\nLANGUAGE: Bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Packages (Docker)\nDESCRIPTION: This command installs project dependencies using pnpm within the Docker environment. It utilizes the `./run` script as a wrapper for Docker Compose.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./run pnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Rounded\nDESCRIPTION: This snippet demonstrates how to create a rounded node using the new shape definition syntax in Mermaid, setting `shape` to `rounded`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_21\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: rounded, label: \"This is an event\" }\n```\n\n----------------------------------------\n\nTITLE: Validating Tick Interval Pattern in Mermaid Gantt Charts\nDESCRIPTION: This JavaScript regular expression validates the format of the `tickInterval` setting in Mermaid Gantt charts. It ensures that the interval is specified as a number followed by a unit of time, such as 'day', 'week', or 'month'.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/gantt.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/^([1-9][0-9]*)(millisecond|second|minute|hour|day|week|month)$/;\n```\n\n----------------------------------------\n\nTITLE: Repeated XY Chart in Mermaid\nDESCRIPTION: Replicates the XY chart with sales data, useful for examples or template purposes to demonstrate plotting multiple series.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\nxychart-beta\n  title \"Sales Revenue\"\n  x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]\n  y-axis \"Revenue (in $)\" 4000 --> 11000\n  bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\n  line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\n```\n\n----------------------------------------\n\nTITLE: Mermaid.js Sanitize Function (TypeScript)\nDESCRIPTION: This TypeScript code snippet defines the `sanitize()` function within the Mermaid.js library. The function takes an `options` parameter, which is of type `any`, and modifies it directly to sanitize the configuration settings.  The function's primary goal is to prevent malicious overrides of security-sensitive `siteConfig` keys. The function does not have a return value.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/config/functions/sanitize.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Defining Odd Shape Node in Mermaid Flowchart DSL\nDESCRIPTION: This example demonstrates creating a node with an 'odd' custom shape labeled 'Odd shape' in Mermaid flowcharts. It shows advanced styling options allowing unique visual forms to distinguish nodes. Requires Mermaid with support for the 'odd' shape type. Input is Mermaid flowchart definition; output is a flowchart node rendered with the 'odd' shape styling and label.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/flowchart.md#_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: odd, label: \"Odd shape\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Packet Diagram Syntax in Mermaid\nDESCRIPTION: Basic syntax structure for initiating a Mermaid Packet Diagram using the `packet-beta` keyword. It shows placeholders for defining single-bit (`start`) and multi-bit (`start-end`) blocks within the packet structure.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/packet.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```md\npacket-beta\nstart: \"Block name\" %% Single-bit block\nstart-end: \"Block name\" %% Multi-bit blocks\n... More Fields ...\n```\n```\n\n----------------------------------------\n\nTITLE: Rounded Square Shape in Mindmap\nDESCRIPTION: This code snippet illustrates the use of a rounded square shape for a node in a mindmap.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nmindmap\n    id(I am a rounded square)\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests in Watch Mode with Vitest (Host Setup)\nDESCRIPTION: Runs the unit tests using Vitest in watch mode via `pnpm test:watch`. This command automatically re-runs tests when source files or test files are changed.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\npnpm test:watch\n```\n\n----------------------------------------\n\nTITLE: Disable Auto Wrap - Mermaid\nDESCRIPTION: This snippet demonstrates how to disable the auto wrapping markdown strings, using the `markdownAutoWrap` config.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_97\n\nLANGUAGE: Mermaid\nCODE:\n```\n---\nconfig:\n  markdownAutoWrap: false\n---\ngraph LR\n```\n\n----------------------------------------\n\nTITLE: JavaScript: CSS Styling for a Diagram Element\nDESCRIPTION: This JavaScript code defines CSS styles for a diagram element (line) using template literals and theme options. It uses the options parameter to dynamically set the stroke color based on the configured theme.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/new-diagram-jison.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst getStyles = (options) =>\n  `\n    .line {\n      stroke-width: 1;\n      stroke: ${options.lineColor};\n      stroke-dasharray: 2;\n    }\n    // ...\n    `;\n```\n\n----------------------------------------\n\nTITLE: Documentation and Declaration of getSiteConfig() Function in Mermaid's TypeScript Code\nDESCRIPTION: This snippet introduces the getSiteConfig() function, detailing its return type, location, and purpose. It also highlights related functions such as setSiteConfig() and emphasizes the function's role in fetching the current site configuration which adheres to the MermaidConfig interface. It's primarily used within the Mermaid configuration module to access global settings.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/config/functions/getSiteConfig.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n>\n**Warning**\n>\n> ## THIS IS AN AUTOGENERATED FILE. DO NOT EDIT.\n>\n> ## Please edit the corresponding file in [/packages/mermaid/src/docs/config/setup/config/functions/getSiteConfig.md](../../../../../packages/mermaid/src/docs/config/setup/config/functions/getSiteConfig.md).\n\n[**mermaid**](../../README.md)\n\n---\n\n# Function: getSiteConfig()\n\n> **getSiteConfig**(): [`MermaidConfig`](../../mermaid/interfaces/MermaidConfig.md)\n\nDefined in: [packages/mermaid/src/config.ts:96](https://github.com/mermaid-js/mermaid/blob/master/packages/mermaid/src/config.ts#L96)\n\n## getSiteConfig\n\n| Function      | Description                                       | Type        | Values                           |\n| ------------- | ------------------------------------------------- | ----------- | -------------------------------- |\n| setSiteConfig | Returns the current siteConfig base configuration | Get Request | Returns Any Values in siteConfig |\n\n**Notes**: Returns **any** values in siteConfig.\n\n## Returns\n\n[`MermaidConfig`](../../mermaid/interfaces/MermaidConfig.md)\n\nThe siteConfig\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Type Alias in TypeScript\nDESCRIPTION: Type alias for SVG elements using d3.Selection. This type represents an SVG element selection that can be manipulated with D3.js library functions when rendering mermaid diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/type-aliases/SVG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nSVG: d3.Selection<SVGSVGElement, unknown, Element | null, unknown>\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Dev Server (Root Filtered) - Bash\nDESCRIPTION: This Bash command starts the documentation site's development server for just the mermaid package using PNPM's filter feature. Requires Node.js, PNPM, and all dependencies installed. Outputs a hot-reloading local dev server for documentation updates. Used for previewing documentation during changes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_26\n\nLANGUAGE: Bash\nCODE:\n```\npnpm --filter mermaid run docs:dev\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for flowchart with multi-line accessibility in Mermaid\nDESCRIPTION: This HTML code is generated from the Mermaid code snippet showing accessibility implementation of a flowchart using accTitle and a multi-line accDescr. The SVG element's `aria-labelledby` and `aria-describedby` attributes are linked to the `<title>` and `<desc>` elements containing the accessible title and description, respectively.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<svg\n  aria-labelledby=\"chart-title-mermaid_382ee221\"\n  aria-describedby=\"chart-desc-mermaid_382ee221\"\n  aria-roledescription=\"flowchart-v2\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"100%\"\n  id=\"mermaid_382ee221\"\n>\n  <title id=\"chart-title-mermaid_382ee221\">Big decisions</title>\n  <desc id=\"chart-desc-mermaid_382ee221\">\n    The official Bob's Burgers corporate processes that are used for making very, very big\n    decisions. This is actually a very simple flow: identify the big decision and then make the big\n    decision.\n  </desc>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Importing SVG Shape Utilities in TypeScript\nDESCRIPTION: Shows how to import the utility functions from the utils.ts file to assist with SVG shape manipulation for consistent rendering.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/adding-new-shape.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  labelHelper,\n  updateNodeBounds,\n  insertPolygonShape,\n  getNodeClasses,\n  createPathFromPoints,\n  generateFullSineWavePoints,\n} from './utils.ts';\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Odd\nDESCRIPTION: This snippet uses the shape keyword to create a node with an 'odd' shape in Mermaid.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_26\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: odd, label: \"Odd shape\" }\n```\n\n----------------------------------------\n\nTITLE: Creating a Stadium-Shaped Node in Mermaid Flowchart\nDESCRIPTION: This snippet demonstrates how to create a stadium-shaped node in a Mermaid flowchart. The text is enclosed in single square brackets `[]`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_7\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n    id1([This is the text in the box])\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm package manager globally\nDESCRIPTION: Installs the pnpm package manager globally using a shell script.  The script downloads and executes the pnpm installation script, making pnpm available for managing project dependencies.  The second command sets the global node version to 20.  Finally, the user may need to reload their shell configuration file.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://get.pnpm.io/install.sh | sh -\npnpm env use --global 20\n```\n\n----------------------------------------\n\nTITLE: Circle Shape in Mindmap\nDESCRIPTION: This code snippet demonstrates the creation of a circle-shaped node within a mindmap.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nmindmap\n    id((I am a circle))\n```\n\n----------------------------------------\n\nTITLE: Combining init and initialize Directives\nDESCRIPTION: This snippet demonstrates combining `init` and `initialize` directives. The last value assigned to a property (e.g., `logLevel`) will take precedence when the directives are merged.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_3\n\nLANGUAGE: Mermaid\nCODE:\n```\n%%{init: { 'logLevel': 'debug', 'theme': 'forest' } }%%\n%%{initialize: { 'logLevel': 'fatal', \"theme\":'dark', 'startOnLoad': true } }%%\n...\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\n%%{init: { 'logLevel': 'debug', 'theme': 'forest' } }%%\n%%{initialize: { 'logLevel': 'fatal', \"theme\":'dark', 'startOnLoad': true } }%%\n...\n```\n\n----------------------------------------\n\nTITLE: Cloud Shape in Mindmap\nDESCRIPTION: This code snippet demonstrates the use of a 'cloud' shape for a node in a mindmap.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nmindmap\n    id)I am a cloud(\n```\n\n----------------------------------------\n\nTITLE: Git Push Example for Documentation Updates - Bash\nDESCRIPTION: This Bash snippet demonstrates how to push a local documentation branch (`docs/2910_update-guidelines`) to a remote repository using Git. Git must be configured with the correct remote. The command is typically run before opening a pull request for doc changes. Input is the branch name; output is the branch available on the remote for PR submission.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_30\n\nLANGUAGE: Bash\nCODE:\n```\ngit push -u origin docs/2910_update-guidelines\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: handDrawnSeed\nDESCRIPTION: Defines the seed to be used for diagrams styled with the handDrawn look. A seed is useful for automated tests. The default value is 0 which gives a random seed. The input is a number.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nhandDrawnSeed?: `number`\n```\n\n----------------------------------------\n\nTITLE: Building Mermaid locally (Docker)\nDESCRIPTION: Builds the Mermaid library and documentation site using pnpm within a Docker environment.  This command compiles the source code and generates the necessary files for running the application, invoked using the `./run` script.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n./run build\n```\n\n----------------------------------------\n\nTITLE: Installing packages using pnpm (Host)\nDESCRIPTION: Installs the project dependencies using the pnpm package manager in a host environment. This command reads the `package.json` file and installs the specified dependencies.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Mermaid locally in development mode (Docker)\nDESCRIPTION: Starts the development server for Mermaid using pnpm within a Docker environment. This command enables hot reloading and provides a local development environment using the `./run` script.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n./run dev\n```\n\n----------------------------------------\n\nTITLE: Running unit tests (Docker)\nDESCRIPTION: Executes unit tests for the Mermaid project using pnpm within a Docker environment, prepending `./run` to execute the command in the Docker environment.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\n./run pnpm test\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch for Contribution\nDESCRIPTION: Creates and checks out a new Git branch based on the current branch (presumably `develop`) using `git checkout -b`. The example branch name follows the project's naming convention.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b docs/2910_update-contributing-guidelines\n```\n\n----------------------------------------\n\nTITLE: Changing LogLevel in Mermaid Graph\nDESCRIPTION: This example sets the logLevel to 2 in a Mermaid graph via directive.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/directives.md#_snippet_10\n\nLANGUAGE: Mermaid\nCODE:\n```\n%%{init: { \"logLevel\": 2 } }%%\ngraph TD\nA(Forest) --> B[/Another/]\nA --> C[End]\n  subgraph section\n  B\n  C\n  end\n```\n\nLANGUAGE: Mermaid\nCODE:\n```\n%%{init: { \"logLevel\": 2 } }%%\ngraph TD\nA(Forest) --> B[/Another/]\nA --> C[End]\n  subgraph section\n  B\n  C\n  end\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Paper Tape\nDESCRIPTION: This snippet creates Paper Tape node.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_60\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: flag, label: \"Paper tape\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Diagram-Specific CSS Styles in Mermaid.js\nDESCRIPTION: Example of a `getStyles` function typically located in a diagram-specific `styles.js` file (e.g., `src/diagrams/myDiagram/styles.js`). This function accepts a theme `options` object and returns a CSS string, often using template literals, to style the diagram's elements based on the theme variables (e.g., `options.lineColor`).\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst getStyles = (options) =>\n  `\n    .line {\n      stroke-width: 1;\n      stroke: ${options.lineColor};\n      stroke-dasharray: 2;\n    }\n    // ...\n    `;\n```\n\n----------------------------------------\n\nTITLE: Defining Git Branch Naming Convention\nDESCRIPTION: Specifies the required naming convention for Git branches: `[type]/[issue_number]_[short-description]`. Types include `feature`, `bug`, `chore`, `docs`.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_14\n\nLANGUAGE: txt\nCODE:\n```\n[feature | bug | chore | docs]/[issue number]_[short-description]\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: forceLegacyMathML\nDESCRIPTION: This option forces Mermaid to use KaTeX's own stylesheet for rendering MathML and is helpful for consistent rendering. If set to true, the legacyMathML setting is ignored.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nforceLegacyMathML?: `boolean`\n```\n\n----------------------------------------\n\nTITLE: Documentation Update Workflow Example (Mermaid)\nDESCRIPTION: Another instance of the Mermaid flowchart illustrating the documentation update workflow. It reinforces the concept of editing source files in `packages/mermaid/src/docs` which are then automatically processed into the `/docs` directory.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_23\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  classDef default fill:#fff,color:black,stroke:black\n\n  source[\"Edit /packages/mermaid/src/docs\"] -- automatic processing--> published[\"View /docs which will be published on Official Website\"]\n```\n\n----------------------------------------\n\nTITLE: Running Mermaid Locally (Host)\nDESCRIPTION: This command starts the development server for Mermaid in the host environment using pnpm. It allows developers to test and view their changes locally.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Tests (Host)\nDESCRIPTION: This command executes the test suite for the Mermaid project using pnpm in the host environment. It verifies that the project is set up correctly and that the tests pass.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Defining Node Shape with Shape Keyword - Extract\nDESCRIPTION: This snippet defines a small triangle.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/flowchart.md#_snippet_51\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A@{ shape: tri, label: \"Extract\" }\n```\n\n----------------------------------------\n\nTITLE: Graph Object Properties for Diagram Rendering\nDESCRIPTION: Defines the data structure for node objects used in diagram rendering. Each node includes properties such as shape, label, style, and metadata, which are used by the Mermaid.js renderer and Dagre wrapper to visualize diagram elements. Special properties denote cluster nodes and custom styling or grouping intentions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/dagre-wrapper/GraphObjects.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"shape\": \"rect\",\n  \"labelText\": \"Test\",\n  \"rx\": 0,\n  \"ry\": 0,\n  \"class\": \"default\",\n  \"style\": \"\",\n  \"id\": \"Test\",\n  \"type\": \"group\",\n  \"padding\": 15\n}\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: legacyMathML\nDESCRIPTION: Specifies whether Mermaid should expect the dependent to include KaTeX stylesheets.  This setting allows Mermaid to fallback on legacy rendering for KaTeX if MathML isn't supported.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nlegacyMathML?: `boolean`\n```\n\n----------------------------------------\n\nTITLE: Parse Function TypeScript Declaration\nDESCRIPTION: TypeScript declaration of the main parse function exported by the Mermaid Parser package. It accepts a diagram type and text string as input, and returns a typed DiagramAST.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/parser/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function parse<T extends DiagramAST>(\n  diagramType: keyof typeof initializers,\n  text: string\n): T;\n```\n\n----------------------------------------\n\nTITLE: Unclear Indentation Handling\nDESCRIPTION: This code illustrates how Mermaid.js handles unclear indentation in mindmap syntax, where the relationship is not perfectly defined.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\nmindmap\n    Root\n        A\n            B\n          C\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icons in Architecture Diagrams (Duplicate)\nDESCRIPTION: This snippet is a duplicate of the earlier example, showing how to include custom icons within an architecture diagram using a specific format, demonstrating integration with external icon libraries.  It uses logos from iconify.design. This highlights how users can specify custom images.  The output displays those specified icons within the architectural rendering. Requires iconify setup.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_14\n\nLANGUAGE: Mermaid\nCODE:\n```\narchitecture-beta\n    group api(logos:aws-lambda)[API]\n\n    service db(logos:aws-aurora)[Database] in api\n    service disk1(logos:aws-glacier)[Storage] in api\n    service disk2(logos:aws-s3)[Storage] in api\n    service server(logos:aws-ec2)[Server] in api\n\n    db:L -- R:server\n    disk1:T -- B:server\n    disk2:T -- B:db\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server using pnpm (Docker Setup)\nDESCRIPTION: Starts the local development server within the Docker environment using the `./run dev` helper script. The server is accessible at http://localhost:9000.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n./run dev\n```\n\n----------------------------------------\n\nTITLE: Opening Cypress Test Runner Locally - Bash\nDESCRIPTION: This Bash CLI command starts the Cypress test runner for the current Mermaid project. Cypress must be installed and properly configured, and the development server should already be running. Executes the project's Cypress tests interactively, allowing developers to run or debug integration/E2E tests in the browser.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_21\n\nLANGUAGE: Bash\nCODE:\n```\npnpm cypress:open\n```\n\n----------------------------------------\n\nTITLE: Illustrating Documentation Workflow (Mermaid)\nDESCRIPTION: Provides a Mermaid flowchart illustrating the recommended workflow for updating documentation. It shows that edits should be made in the source directory (`packages/mermaid/src/docs`), which are then automatically processed to generate the `/docs` folder for publication.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_22\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  classDef default fill:#fff,color:black,stroke:black\n\n  source[\"Edit /packages/mermaid/src/docs\"] -- automatic processing--> published[\"View /docs which will be published on Official Website\"]\n```\n\n----------------------------------------\n\nTITLE: Mermaid Documentation Update Workflow Visualization - Mermaid\nDESCRIPTION: This Mermaid code snippet draws a flowchart showing the automated pipeline of editing documentation sources in `packages/mermaid/src/docs`, followed by automatic processing and publication to the main `/docs` folder (which is then served on the official website). Used for visualizing the documentation workflow for contributors. Requires Mermaid rendering tool or integration. Inputs are documentation edits; the flowchart visualizes output as published docs.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_25\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n  classDef default fill:#fff,color:black,stroke:black\n\n  source[\"Edit /packages/mermaid/src/docs\"] -- automatic processing--> published[\"View /docs which will be published on Official Website\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn Globally using npm\nDESCRIPTION: This shell command uses the npm package manager to install the Yarn package manager globally on the system. Installing Yarn is a prerequisite for using it to manage project dependencies, including adding Mermaid.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/getting-started.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install -g yarn\n```\n\n----------------------------------------\n\nTITLE: MermaidConfig Interface Property: packet\nDESCRIPTION: Defines the packet configuration option. Configures settings specific to packet diagrams. This utilizes a PacketDiagramConfig object to define the diagram specific configuration settings.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/MermaidConfig.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\npacket?: `PacketDiagramConfig`\n```\n\n----------------------------------------\n\nTITLE: Running Mermaid locally in development mode (Host)\nDESCRIPTION: Starts the development server for Mermaid using pnpm in a host environment. This command enables hot reloading and provides a local development environment.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Repeated Git Graph Diagram in Mermaid\nDESCRIPTION: Shows the same git workflow as the previous snippet, emphasizing the pattern of commits and branch management in version control visualization.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n   commit\n   commit\n   branch develop\n   commit\n   commit\n   commit\n   checkout main\n   commit\n   commit\n```\n\n----------------------------------------\n\nTITLE: Repeated User Journey Diagram in Mermaid\nDESCRIPTION: Replicates the user journey diagram, reinforcing structure and syntax for depicting sequential activities and participation in a journey map.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\njourney\n  title My working day\n  section Go to work\n    Make tea: 5: Me\n    Go upstairs: 3: Me\n    Do work: 1: Me, Cat\n  section Go home\n    Go downstairs: 5: Me\n    Sit down: 5: Me\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Dev Server (Direct Package Path) - Bash\nDESCRIPTION: This pair of commands first navigates into the `packages/mermaid` directory, then starts the documentation dev server using PNPM. Assumes mermaid dependencies and scripts are installed. The documentation site will be served locally, typically on http://localhost:3333/. Inputs include relative path navigation; output is the local docs site.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_27\n\nLANGUAGE: Bash\nCODE:\n```\ncd packages/mermaid\npnpm docs:dev\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Note Box Syntax - Markdown\nDESCRIPTION: This Markdown snippet demonstrates the usage of fenced code blocks with `note`, `tip`, `warning`, or `danger` tags to display formatted message boxes in the Mermaid documentation system. It requires adherence to this syntax for proper processing, and is used in guides, alerts, and tips within documentation pages. Inputs are informational or instructional notes, outputs are styled documentation boxes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_29\n\nLANGUAGE: Markdown\nCODE:\n```\n```note\nThis is a note\n```\n\n```tip\nThis is a tip\n```\n\n```warning\nThis is a warning\n```\n\n```danger\nThis is a danger alert\n```\n```\n\n----------------------------------------\n\nTITLE: Langium-based Parser Flow Sequence Diagram\nDESCRIPTION: A Mermaid sequence diagram illustrating the flow of the Langium-based parser from the initial package call through various processing components to the final AST generation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/parser/README.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\nactor Package\nparticipant Module\nparticipant TokenBuilder\nparticipant Lexer\nparticipant Parser\nparticipant ValueConverter\n\n\nPackage ->> Module: Create services\nModule ->> TokenBuilder: Override or/and<br>reorder rules\nTokenBuilder ->> Lexer: Read the string and transform<br>it into a token stream\nLexer ->> Parser: Parse token<br>stream into AST\nParser ->> ValueConverter: Clean/modify tokenized<br>rules returned value\nValueConverter -->> Package: Return AST\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests using pnpm (Docker Setup)\nDESCRIPTION: Executes the project's test suite within the Docker environment using the `./run` helper script and `pnpm test`. This verifies the setup within the containerized environment before making changes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./run pnpm test\n```\n\n----------------------------------------\n\nTITLE: Defining UnknownDiagramError Class in TypeScript\nDESCRIPTION: This snippet defines the `UnknownDiagramError` class, inheriting from the built-in `Error` class.  It's part of the Mermaid.js library and is used for handling errors related to unknown diagram types. The class includes a constructor that takes a message and overrides the default constructor of the `Error` class.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/classes/UnknownDiagramError.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Registering Diagram Styles with the Mermaid.js Theming Engine\nDESCRIPTION: Shows how to register a new diagram's style generation function (e.g., `xyzDiagram`, which should be the imported `getStyles` function from the diagram's specific `styles.js`) within the main `themes` object located in `src/styles.js`. This makes the diagram responsive to the Mermaid theming system.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst themes = {\n  flowchart,\n  'flowchart-v2': flowchart,\n  sequence,\n  xyzDiagram,\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: Deprecated Mermaid Configuration via Global Variables\nDESCRIPTION: This code shows how to set Mermaid configuration options globally through the 'mermaid' object for backwards compatibility, specifically 'startOnLoad' and 'htmlLabels'. Usage of this method is deprecated in favor of 'mermaid.initialize'. It is kept for legacy support but should be replaced with the configuration API.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/config/usage.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nmermaid.startOnLoad = true;\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests (Host)\nDESCRIPTION: This command executes the unit tests for the Mermaid project using pnpm in the host environment. This command will execute all the tests once.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Building Mermaid Library and Docs using pnpm (Host Setup)\nDESCRIPTION: Compiles the Mermaid library and builds the documentation site using the `pnpm run build` command in the host environment.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Registering External Diagrams in TypeScript\nDESCRIPTION: This `registerExternalDiagrams` function is designed to incorporate custom diagram types into Mermaid. It accepts an array of `ExternalDiagramDefinition` objects and an optional `opts` object that controls how the diagrams are loaded. If `opts.lazyLoad` is set to false, then the diagrams will load immediately. The purpose is to extend Mermaid's capabilities by adding new diagram types defined externally.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/interfaces/Mermaid.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nregisterExternalDiagrams: (`diagrams`, `opts`) => `Promise`<`void`>\n```\n\n----------------------------------------\n\nTITLE: JISON Grammar: Accessibility Title and Description\nDESCRIPTION: This JISON grammar defines the syntax for accessible titles and descriptions within a diagram. It uses lexical grammar rules to identify and extract the title and description values, which are then stored using the `setTitle` and `setAccDescription` functions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/new-diagram-jison.md#_snippet_6\n\nLANGUAGE: jison\nCODE:\n```\n\n* lexical grammar */\n%lex\n%x acc_title\n%x acc_descr\n%x acc_descr_multiline\n\n%%\naccTitle\\s*\":\"\\s*                                { this.begin(\"acc_title\");return 'acc_title'; }\n<acc_title>(?!\\n|;|#)*[^\\n]*                     { this.popState(); return \"acc_title_value\"; }\naccDescr\\s*\":\"\\s*                                { this.begin(\"acc_descr\");return 'acc_descr'; }\n<acc_descr>(?!\\n|;|#)*[^\\n]*                     { this.popState(); return \"acc_descr_value\"; }\naccDescr\\s*\"{\"\\s*                                { this.begin(\"acc_descr_multiline\");}\n<acc_descr_multiline>[\\}]                        { this.popState(); }\n<acc_descr_multiline>[^\\}]*                      return \"acc_descr_multiline_value\";\n\nstatement\n    : acc_title acc_title_value  { $$=$2.trim();yy.setTitle($$); }\n    | acc_descr acc_descr_value  { $$=$2.trim();yy.setAccDescription($$); }\n    | acc_descr_multiline_value { $$=$1.trim();yy.setAccDescription($$); }\n\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using pnpm (Host Setup)\nDESCRIPTION: Installs all project dependencies defined in the `package.json` files using the `pnpm install` command. This is required for host setup after installing prerequisites.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using pnpm (Docker Setup)\nDESCRIPTION: Installs project dependencies within the Docker environment using the `./run` helper script and `pnpm install`. This command delegates the installation to the appropriate Docker container.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./run pnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining SVGGroup Type Alias with D3.js Selection in TypeScript\nDESCRIPTION: This snippet defines the SVGGroup type alias as a D3.Selection object parameterized for SVGGElement instances. It requires D3.js as a dependency and assumes TypeScript support for generics. The type describes a selection whose datum is unknown, the underlying DOM element is either Element or null, and output is unknown. It is intended for strongly-typed manipulation of SVG group (<g>) elements in Mermaid diagrams. Inputs and outputs are D3 selections representing SVG group elements with no data constraints.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/setup/mermaid/type-aliases/SVGGroup.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SVGGroup = d3.Selection<SVGGElement, unknown, Element | null, unknown>;\n```\n\n----------------------------------------\n\nTITLE: Installing packages using pnpm (Docker)\nDESCRIPTION: Installs the project dependencies using the pnpm package manager within a Docker environment. This command executes `pnpm install` through the `./run` script, leveraging the Docker Compose setup.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./run pnpm install\n```\n\n----------------------------------------\n\nTITLE: Repeated ER Diagram in Mermaid\nDESCRIPTION: Repeats the ER diagram showing customer, order, line-item, and delivery address relationships, useful for example consistency or reinforcement of syntax.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n CUSTOMER ||--o{ ORDER : places\n ORDER ||--|{ LINE-ITEM : contains\n CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n```\n\n----------------------------------------\n\nTITLE: Running Mermaid Locally (Docker)\nDESCRIPTION: This command starts the development server for Mermaid within the Docker environment. It uses the `./run` script to execute the command inside the Docker container, allowing for local testing of changes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n./run dev\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Setting up the Parser as a Separate Module\nDESCRIPTION: This JavaScript code snippet demonstrates how to set up the parser as a separate module. It requires the graph database and the flow parser, and then assigns the graph database to the parser's `yy` object.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/new-diagram-jison.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst graph = require('./graphDb');\nconst flow = require('./parser/flow');\nflow.parser.yy = graph;\n```\n\n----------------------------------------\n\nTITLE: Older Renderer State Diagram\nDESCRIPTION: This snippet provides an equivalent state diagram to the previous example but uses the older renderer version of mermaid.js.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/stateDiagram.md#_snippet_1\n\nLANGUAGE: mermaid-example\nCODE:\n```\nstateDiagram\n    [*] --> Still\n    Still --> [*]\n\n    Still --> Moving\n    Moving --> Still\n    Moving --> Crash\n    Crash --> [*]\n```\n\n----------------------------------------\n\nTITLE: Styling Badges and Dark Mode Content in CSS\nDESCRIPTION: CSS styles that format badge displays by setting them in a horizontal line with margins, and adds a filter to invert images in dark mode for better visibility.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_15\n\nLANGUAGE: CSS\nCODE:\n```\n<style scoped>\n .badges > p {\n    display: flex;\n  }\n\n  .badges > p > a {\n    margin: 0 0.5rem;\n  }\n\n  .dark #VPContent > div > div > div.content > div > main > div > div > img {\n    filter: invert(1) hue-rotate(217deg)  contrast(0.72);\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Running ESLint for Code Linting (Shell)\nDESCRIPTION: Executes the configured linting process using pnpm. This command typically runs ESLint to check the JavaScript/TypeScript codebase for potential errors, style inconsistencies, and adherence to project coding standards.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/index.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm lint\n```\n\n----------------------------------------\n\nTITLE: Executing the Test Suite (Shell)\nDESCRIPTION: Runs the project's automated test suite using pnpm. This command executes predefined tests to verify the functionality and correctness of the codebase. For manual testing, the user can open the `dist/index.html` file in a web browser.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/index.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Building Mermaid (Host)\nDESCRIPTION: This command builds the Mermaid library and documentation site using pnpm in the host development environment. It compiles the source code and generates the necessary files for running Mermaid locally.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining a Repeat of Pie Chart with Accessibility Metadata\nDESCRIPTION: This snippet is identical to the previous pie chart, illustrating repeated or similar chart definitions with accessibility labels. It highlights the structure for creating pie charts with labels and data values in Mermaid.js.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/accessibility.md#_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\n   pie\n      accTitle: My Pie Chart Accessibility Title\n      accDescr: My Pie Chart Accessibility Description\n\n    title Key elements in Product X\n    \"Calcium\" : 42.96\n    \"Potassium\" : 50.05\n    \"Magnesium\" : 10.01\n    \"Iron\" :  5\n```\n\n----------------------------------------\n\nTITLE: Showing Custom Markdown Block Syntax (Markdown)\nDESCRIPTION: Illustrates the Markdown syntax for creating special formatted blocks like notes, tips, warnings, and dangers using triple backticks (` ``` `) followed by the block type name. This custom syntax is processed during documentation generation.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n```note\nThis is a note\n```\n\n```tip\nThis is a tip\n```\n\n```warning\nThis is a warning\n```\n\n```danger\nThis is a danger alert\n```\n```\n\n----------------------------------------\n\nTITLE: Publishing a New Release to npm (Shell)\nDESCRIPTION: Publishes the Mermaid.js package to the npm registry. Before running this command, the version number in `package.json` should be updated. The command compiles necessary files into the `dist` directory and uploads them. Requires appropriate permissions on npmjs.com.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/intro/index.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Repeated Quadrant Chart in Mermaid\nDESCRIPTION: Repeats the quadrant chart with campaign data, serving as an example or template for strategic plotting in diagrams.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/intro/index.md#_snippet_12\n\nLANGUAGE: mermaid\nCODE:\n```\nquadrantChart\n  title Reach and engagement of campaigns\n  x-axis Low Reach --> High Reach\n  y-axis Low Engagement --> High Engagement\n  quadrant-1 We should expand\n  quadrant-2 Need to promote\n  quadrant-3 Re-evaluate\n  quadrant-4 May be improved\n  Campaign A: [0.3, 0.6]\n  Campaign B: [0.45, 0.23]\n  Campaign C: [0.57, 0.69]\n  Campaign D: [0.78, 0.34]\n  Campaign E: [0.40, 0.34]\n  Campaign F: [0.35, 0.78]\n```\n\n----------------------------------------\n\nTITLE: Rendering Mindmap Syntax\nDESCRIPTION: This snippet displays the rendered output of the mindmap syntax example, showing the visual representation of the hierarchical relationships.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/mindmap.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nmindmap\nRoot\n    A\n      B\n      C\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Dev Server in Docker (Bash)\nDESCRIPTION: Gives the command to start the local documentation development server when working within a Docker environment provided by the project using the `./run` script wrapper.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n./run docs:dev\n```\n\n----------------------------------------\n\nTITLE: Making Docker Helper Script Executable\nDESCRIPTION: Grants execute permissions to the `./run` bash script using `chmod +x`. This script provides aliases for `docker compose` commands for easier development within Docker.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x run\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Initializing the yy Object\nDESCRIPTION: This JavaScript code shows how the `yy` object is initialized before parsing. It assigns a data object (db) to `parser.yy`, allowing the parser to store data in this object during the parsing process.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/new-diagram-jison.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst parser = exampleParser.parser;\nparser.yy = db;\n```\n\n----------------------------------------\n\nTITLE: Creating a new Git branch\nDESCRIPTION: Creates and switches to a new Git branch named `docs/2910_update-contributing-guidelines`. This branch is intended for making changes related to updating the contributing guidelines.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b docs/2910_update-contributing-guidelines\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Mermaid project directory\nDESCRIPTION: Changes the current directory to the `mermaid` project folder. This command is essential for executing subsequent commands within the context of the Mermaid project.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd mermaid\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Mermaid Project\nDESCRIPTION: This command changes the current directory in the terminal to the root directory of the cloned Mermaid project. It is a prerequisite for running subsequent commands within the project.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd mermaid\n```\n\n----------------------------------------\n\nTITLE: Duplicate C4 Context Diagram for Internet Banking System in Mermaid.js\nDESCRIPTION: This second Mermaid.js code repeats the first diagram, depicting identical system relationships, boundaries, and dependencies within the internet banking system. It reinforces the diagram structure, relationships, and system components for clarity or versioning. Dependencies mirror those of the first snippet, requiring understanding of Mermaid syntax and C4 diagram conventions.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/README.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nC4Context\ntitle System Context diagram for Internet Banking System\n\nPerson(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\nPerson(customerB, \"Banking Customer B\")\nPerson_Ext(customerC, \"Banking Customer C\")\nSystem(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\n\nPerson(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\n\nEnterprise_Boundary(b1, \"BankBoundary\") {\n\n  SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n  System_Boundary(b2, \"BankBoundary2\") {\n    System(SystemA, \"Banking System A\")\n    System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts.\")\n  }\n\n  System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\n  SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\n\n  Boundary(b3, \"BankBoundary3\", \"boundary\") {\n    SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank, with personal bank accounts.\")\n    SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\n  }\n}\n\nBiRel(customerA, SystemAA, \"Uses\")\nBiRel(SystemAA, SystemE, \"Uses\")\nRel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\nRel(SystemC, customerA, \"Sends e-mails to\")\n```\n\n----------------------------------------\n\nTITLE: Creating Architecture Diagram - Beta Syntax (Duplicate)\nDESCRIPTION: This snippet is a duplicate of the first one and shows the same architecture diagram using the `architecture-beta` syntax. It defines the structure of the architecture with services, groups, and connections, showcasing the same relationship of components within the cloud or CI/CD deployments. It leverages the core functionality of mermaid-js for diagram visualization.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/architecture.md#_snippet_1\n\nLANGUAGE: Mermaid\nCODE:\n```\narchitecture-beta\n    group api(cloud)[API]\n\n    service db(database)[Database] in api\n    service disk1(disk)[Storage] in api\n    service disk2(disk)[Storage] in api\n    service server(server)[Server] in api\n\n    db:L -- R:server\n    disk1:T -- B:server\n    disk2:T -- B:db\n```\n\n----------------------------------------\n\nTITLE: Making the `./run` script executable\nDESCRIPTION: This command modifies the permissions of the `run` script, making it executable. The `run` script provides convenient aliases for Docker Compose commands.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x run\n```\n\n----------------------------------------\n\nTITLE: Defining a Cypress diagram rendering test in JavaScript\nDESCRIPTION: This code snippet demonstrates a Cypress test that verifies the correct rendering of a Mermaid.js state diagram. The `imgSnapshotTest` function takes diagram text and options, rendering the diagram and comparing snapshots in CI environments to detect unintended changes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('should render forks and joins', () => {\n  imgSnapshotTest(\n    `\n    stateDiagram\n    state fork_state &lt;&lt;fork&gt;&gt;\n      [*] --> fork_state\n      fork_state --> State2\n      fork_state --> State3\n\n      state join_state &lt;&lt;join&gt;&gt;\n      State2 --> join_state\n      State3 --> join_state\n      join_state --> State4\n      State4 --> [*]\n    `,\n    { logLevel: 0 }\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Adding Diagram to Themes Object\nDESCRIPTION: This JavaScript code demonstrates how to add the diagram-specific styles to the main themes object in `src/styles.js`. It maps the diagram identifier to the `getStyles` function for the diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/new-diagram-jison.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst themes = {\n  flowchart,\n  'flowchart-v2': flowchart,\n  sequence,\n  xyzDiagram,\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: Repeat of Example Mermaid Quadrant Chart\nDESCRIPTION: This is an identical snippet to the previous one, serving as an example to show consistent syntax or to emphasize usage. It redefines the same chart with the same axes, quadrants, and data points.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/syntax/quadrantChart.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nquadrantChart\n    title Reach and engagement of campaigns\n    x-axis Low Reach --> High Reach\n    y-axis Low Engagement --> High Engagement\n    quadrant-1 We should expand\n    quadrant-2 Need to promote\n    quadrant-3 Re-evaluate\n    quadrant-4 May be improved\n    Campaign A: [0.3, 0.6]\n    Campaign B: [0.45, 0.23]\n    Campaign C: [0.57, 0.69]\n    Campaign D: [0.78, 0.34]\n    Campaign E: [0.40, 0.34]\n    Campaign F: [0.35, 0.78]\n```\n\n----------------------------------------\n\nTITLE: JISON Grammar Example: Storing Data During Parsing\nDESCRIPTION: This JISON grammar snippet demonstrates how to store data encountered during parsing. It shows how to define grammar rules and associate actions that call methods on a data object (yy) to store the parsed information. This object is then used by the renderer to create the diagram.  It defines a call to the setTitle method in the data object when parsing, and the title keyword is encountered.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/new-diagram-jison.md#_snippet_0\n\nLANGUAGE: jison\nCODE:\n```\nstatement\n\t: 'participant' actor  { $$='actor'; }\n\t| signal               { $$='signal'; }\n\t| note_statement       { $$='note';  }\n\t| 'title' message      { yy.setTitle($2);  }\n\t;\n```\n\n----------------------------------------\n\nTITLE: Deprecated Configuration via Direct Property Setting\nDESCRIPTION: A deprecated method of configuring Mermaid by setting properties directly on the mermaid object. This approach is only maintained for backward compatibility and should be avoided in favor of the initialize method.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/config/usage.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid.startOnLoad = true;\n```\n\n----------------------------------------\n\nTITLE: Pushing Git Changes to Origin (Bash)\nDESCRIPTION: Shows an example Bash command for pushing local Git commits to a remote branch on the origin repository. The `-u` flag sets the upstream branch, simplifying future pushes.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ngit push -u origin docs/2910_update-guidelines\n```\n\n----------------------------------------\n\nTITLE: Branch naming convention\nDESCRIPTION: Defines the naming convention for Git branches. The format is `[feature | bug | chore | docs]/[issue number]_[short-description]`. This improves organization and clarity in the repository.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_11\n\nLANGUAGE: txt\nCODE:\n```\n[feature | bug | chore | docs]/[issue number]_[short-description]\n```\n\n----------------------------------------\n\nTITLE: Cloning the Mermaid repository\nDESCRIPTION: Clones the forked Mermaid repository from GitHub to the local development machine. This command creates a local copy of the repository's files for modification and contribution.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com/your-fork/mermaid\n```\n\n----------------------------------------\n\nTITLE: JISON Grammar Example - Statement Definition\nDESCRIPTION: This JISON grammar snippet defines the structure of a 'statement' in a diagram language. It shows how different keywords (e.g., 'participant', 'signal', 'note', 'title') are associated with specific actions and data storage mechanisms within the parser. The code also shows the calling of a setTitle method when the title keyword is encountered. It is important for defining the syntax and structure of the diagram.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/new-diagram-jison.md#_snippet_0\n\nLANGUAGE: jison\nCODE:\n```\nstatement\n\t: 'participant' actor  { $$='actor'; }\n\t| signal               { $$='signal'; }\n\t| note_statement       { $$='note';  }\n\t| 'title' message      { yy.setTitle($2);  }\n\t;\n```\n\n----------------------------------------\n\nTITLE: Checking out and Updating Develop Branch\nDESCRIPTION: These commands switch to the `develop` branch and update it with the latest changes from the remote repository. This ensures the local `develop` branch is up-to-date before creating a new branch.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/community/contributing.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout develop\ngit fetch # or `git pull`\n```\n\n----------------------------------------\n\nTITLE: Navigating into Cloned Mermaid Project Directory\nDESCRIPTION: Changes the current directory to the newly cloned `mermaid` project folder using the `cd` command. This is necessary before running subsequent setup commands.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/docs/community/contributing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd mermaid\n```\n\n----------------------------------------\n\nTITLE: Overview and Purpose of Mermaid Sankey Diagrams\nDESCRIPTION: Provides an introduction to the Sankey diagram feature in Mermaid.js, highlighting its use for visualizing flows between nodes such as energy, resources, or waste streams. Explains that the diagram is experimental, with syntax similar to CSV, and supports customization via configuration. No code present, just contextual information.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid/src/docs/syntax/sankey.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: No code snippets available\nDESCRIPTION: This file comprises release notes and change logs without embedded code snippets.\nSOURCE: https://github.com/mermaid-js/mermaid/blob/develop/packages/mermaid-layout-elk/CHANGELOG.md#_snippet_0\n\n"
  }
]