[
  {
    "owner": "k0sproject",
    "repo": "k0sctl",
    "content": "TITLE: k0sctl Configuration File Example\nDESCRIPTION: A comprehensive example of a k0sctl configuration file in YAML format, defining a cluster with controller and worker nodes, installation flags, SSH connection details, and k0s-specific configuration.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: k0sctl.k0sproject.io/v1beta1\nkind: Cluster\nmetadata:\n  name: my-k0s-cluster\n  user: admin\nspec:\n  hosts:\n  - role: controller\n    installFlags:\n    - --debug\n    ssh:\n      address: 10.0.0.1\n      user: root\n      port: 22\n      keyPath: ~/.ssh/id_rsa\n  - role: worker\n    installFlags:\n    - --debug\n    ssh:\n      address: 10.0.0.2\n  k0s:\n    version: 0.10.0\n    config:\n      apiVersion: k0s.k0sproject.io/v1beta1\n      kind: ClusterConfig\n      metadata:\n        name: my-k0s-cluster\n      spec:\n        images:\n          calico:\n            cni:\n              image: calico/cni\n              version: v3.16.2\n  options:\n    wait:\n      enabled: true\n    drain:\n      enabled: true\n    evictTaint:\n      enabled: false\n      taint: k0sctl.k0sproject.io/evict=true\n      effect: NoExecute\n    concurrency:\n      limit: 30\n      uploads: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring k0s Cluster with External Configuration in YAML\nDESCRIPTION: This snippet demonstrates how to configure a k0s cluster using k0sctl, including host specification and external k0s configuration. It shows the separation of k0sctl and k0s configurations into multiple YAML documents.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: k0sctl.k0sproject.io/v1beta1\nkind: Cluster\nspec:\n  hosts:\n    - role: single\n      ssh:\n        address: 10.0.0.1\n---\napiVersion: k0s.k0sproject.io/v1beta1\nkind: ClusterConfig\nmetadata:\n  name: my-k0s-cluster\nspec:\n  api:\n    externalAddress: 10.0.0.2\n```\n\n----------------------------------------\n\nTITLE: Configuring k0sctl Options in YAML\nDESCRIPTION: This snippet illustrates how to set various options for k0sctl behavior, including wait settings, drain operations, eviction taints, and concurrency limits. These options modify how k0sctl performs cluster operations.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  options:\n    wait:\n      enabled: true\n    drain:\n      enabled: true\n    evictTaint:\n      enabled: false\n      taint: k0sctl.k0sproject.io/evict=true\n      effect: NoExecute\n    concurrency:\n      limit: 30\n      uploads: 5\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying a k0sctl Configuration\nDESCRIPTION: Example of initializing a cluster configuration with multiple hosts and piping it directly to the apply command, bypassing the need to save a configuration file.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nk0sctl init 10.0.0.1 10.0.0.2 ubuntu@10.0.0.3:8022 | k0sctl apply --config -\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Connection in K0sctl YAML\nDESCRIPTION: Example of setting up SSH connection details for a host in the k0sctl configuration. This snippet shows how to specify the address, user, and key path for SSH access.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  hosts:\n    - role: controller\n      ssh:\n        address: 10.0.0.2\n        user: ubuntu\n        keyPath: ~/.ssh/id_rsa\n```\n\n----------------------------------------\n\nTITLE: Exporting Kubeconfig from k0s Cluster\nDESCRIPTION: Example showing how to export the kubeconfig from a k0s cluster managed by k0sctl and use it with kubectl to get node information.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ k0sctl kubeconfig --config path/to/k0sctl.yaml > k0s.config\n$ kubectl get node --kubeconfig k0s.config\nNAME      STATUS     ROLES    AGE   VERSION\nworker0   NotReady   <none>   10s   v1.20.2-k0s1\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform and k0sctl Commands for AWS Deployment\nDESCRIPTION: A series of commands to initialize Terraform, apply the configuration, and use the output to configure a k0s cluster with k0sctl. These commands provision AWS infrastructure and then bootstrap a k0s Kubernetes cluster on it.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/examples/aws-tf/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform apply\nterraform output -raw k0s_cluster | k0sctl apply --config -\n```\n\n----------------------------------------\n\nTITLE: Configuring Hooks for K0sctl Operations in YAML\nDESCRIPTION: Example of setting up hooks to run commands on a remote host during k0sctl operations. This snippet demonstrates before and after hooks for the 'apply' operation.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nhooks:\n  apply:\n    before:\n      - date >> k0sctl-apply.log\n    after:\n      - echo \"apply success\" >> k0sctl-apply.log\n```\n\n----------------------------------------\n\nTITLE: Using Tokens in k0s Download URL Configuration\nDESCRIPTION: This example shows how to use tokens in the k0sDownloadURL field for dynamic URL generation. Tokens allow for flexible configuration based on architecture, version, and other variables.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n  - role: controller\n    k0sDownloadURL: https://files.example.com/k0s%20files/k0s-%v-%p%x\n    # Expands to https://files.example.com/k0s%20files/k0s-v1.21.0+k0s.0-amd64\n```\n\n----------------------------------------\n\nTITLE: Defining File Uploads in K0sctl YAML Configuration\nDESCRIPTION: Example of configuring file uploads to a host in the k0sctl configuration. This snippet shows how to upload an image bundle file with specific permissions and destination.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- name: image-bundle\n  src: airgap-images.tgz\n  dstDir: /var/lib/k0s/images/\n  perm: 0600\n```\n\n----------------------------------------\n\nTITLE: Displaying k0sctl Deployment Output Example\nDESCRIPTION: Example output when using k0sctl to deploy a k0s Kubernetes cluster, showing the various phases from connecting to hosts through cluster initialization.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nINFO ==> Running phase: Connect to hosts\nINFO ==> Running phase: Detect host operating systems\nINFO [ssh] 10.0.0.1:22: is running Ubuntu 20.10\nINFO [ssh] 10.0.0.2:22: is running Ubuntu 20.10\nINFO ==> Running phase: Prepare hosts\nINFO ==> Running phase: Gather host facts\nINFO [ssh] 10.0.0.1:22: discovered 10.12.18.133 as private address\nINFO ==> Running phase: Validate hosts\nINFO ==> Running phase: Gather k0s facts\nINFO ==> Running phase: Download k0s binaries on hosts\nINFO ==> Running phase: Configure k0s\nINFO ==> Running phase: Initialize the k0s cluster\nINFO [ssh] 10.0.0.1:22: installing k0s controller\nINFO ==> Running phase: Install workers\nINFO [ssh] 10.0.0.1:22: generating token\nINFO [ssh] 10.0.0.2:22: installing k0s worker\nINFO [ssh] 10.0.0.2:22: waiting for node to become ready\nINFO ==> Running phase: Disconnect from hosts\nINFO ==> Finished in 2m2s\nINFO k0s cluster version 1.22.3+k0s.0 is now installed\nINFO Tip: To access the cluster you can now fetch the admin kubeconfig using:\nINFO      k0sctl kubeconfig\n```\n\n----------------------------------------\n\nTITLE: Using Makefile Commands for k0s Cluster Management\nDESCRIPTION: Simplified Makefile commands for deploying a k0s cluster, retrieving the kubeconfig, and destroying the infrastructure. These commands abstract the underlying Terraform and k0sctl operations.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/examples/aws-tf/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake apply\nmake kubeconfig\nmake destroy\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH with Bastion Host in K0sctl YAML\nDESCRIPTION: Example of setting up SSH connection through a bastion host in the k0sctl configuration. This snippet demonstrates how to specify both the target and bastion host details.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  hosts:\n    - role: controller\n      ssh:\n        address: 10.0.0.2\n        user: ubuntu\n        keyPath: ~/.ssh/id_rsa\n        bastion:\n          address: 10.0.0.1\n          user: root\n          keyPath: ~/.ssh/id_rsa2\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenSSH Connection in K0sctl YAML\nDESCRIPTION: Example of setting up an OpenSSH connection for a host in the k0sctl configuration. This snippet shows how to use the system's OpenSSH client for connections.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  hosts:\n    - role: controller\n      openSSH:\n        address: 10.0.0.2\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenSSH with Additional Options in K0sctl YAML\nDESCRIPTION: Example of setting up an OpenSSH connection with additional options in the k0sctl configuration. This snippet demonstrates how to enable agent forwarding and disable strict host key checking.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nopenSSH:\n  address: host\n  options:\n      ForwardAgent: true  # -o ForwardAgent=yes\n      StrictHostkeyChecking: false # -o StrictHostkeyChecking: no\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in YAML for K0sctl\nDESCRIPTION: Example of setting environment variables for a target host in the k0sctl configuration file. This snippet demonstrates how to set an HTTP proxy for the host.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  HTTP_PROXY: 10.0.0.1:443\n```\n\n----------------------------------------\n\nTITLE: Deploying k0s Cluster with Terraform and k0sctl\nDESCRIPTION: A sequence of commands to initialize Terraform, apply the infrastructure configuration, and deploy k0s cluster using k0sctl. Requires Hetzner API token, Terraform, and k0sctl to be pre-installed.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/examples/hetzner-tf/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\n```\n\nLANGUAGE: bash\nCODE:\n```\nterraform apply\n```\n\nLANGUAGE: bash\nCODE:\n```\nterraform output -raw k0s_cluster | k0sctl apply --config -\n```\n\n----------------------------------------\n\nTITLE: Installing k0sctl with Homebrew on macOS/Linux\nDESCRIPTION: Command to install k0sctl using the Homebrew package manager, which is available for both macOS and Linux operating systems.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbrew install k0sproject/tap/k0sctl\n```\n\n----------------------------------------\n\nTITLE: Installing k0sctl from Source with Go\nDESCRIPTION: Command to install k0sctl from source code using Go's package manager. Requires a working Go toolchain and will install to your $GOPATH/bin directory.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo install github.com/k0sproject/k0sctl@latest\n```\n\n----------------------------------------\n\nTITLE: Installing k0sctl with Chocolatey on Windows\nDESCRIPTION: Command to install k0sctl on Windows using the Chocolatey package manager. This package is community maintained.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nchoco install k0sctl\n```\n\n----------------------------------------\n\nTITLE: Setting Up Bash Shell Auto-completion for k0sctl\nDESCRIPTION: Command to enable command-line auto-completion for k0sctl in Bash shell environments by adding completion scripts to the system.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nk0sctl completion > /etc/bash_completion.d/k0sctl\n```\n\n----------------------------------------\n\nTITLE: Setting Up Zsh Shell Auto-completion for k0sctl\nDESCRIPTION: Commands to enable command-line auto-completion for k0sctl in Zsh shell environments, with options for standard Zsh and Oh My Zsh configurations.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nk0sctl completion > /usr/local/share/zsh/site-functions/_k0sctl\n\n# For oh my zsh\nk0sctl completion > $ZSH_CACHE_DIR/completions/_k0sctl\n```\n\n----------------------------------------\n\nTITLE: Setting Up Fish Shell Auto-completion for k0sctl\nDESCRIPTION: Command to enable command-line auto-completion for k0sctl in Fish shell environments by adding completion scripts to the user's Fish configuration.\nSOURCE: https://github.com/k0sproject/k0sctl/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nk0sctl completion > ~/.config/fish/completions/k0sctl.fish\n```"
  }
]