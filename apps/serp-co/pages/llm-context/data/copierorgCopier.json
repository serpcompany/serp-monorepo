[
  {
    "owner": "copier-org",
    "repo": "copier",
    "content": "TITLE: Using --data-file CLI Flag with Copier\nDESCRIPTION: Shows how to use the `--data-file` CLI flag with `copier copy` to specify a YAML file (e.g., `input.yml`) containing answers for the template questions. Copier reads the key-value pairs from this file to populate template variables.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ncopier copy --data-file input.yml template destination\n```\n\n----------------------------------------\n\nTITLE: Generating a Project using Copier CLI (Shell)\nDESCRIPTION: Basic command-line usage for Copier. It copies (generates) a new project in the `path/to/destination` directory based on the template located at `path/to/project/template`.\nSOURCE: https://github.com/copier-org/copier/blob/master/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncopier copy path/to/project/template path/to/destination\n```\n\n----------------------------------------\n\nTITLE: YAML Example Advanced Prompts\nDESCRIPTION: This comprehensive YAML example demonstrates various advanced prompt features in Copier, including boolean types, string validators, secret prompts, integer and float types, JSON and YAML input, and different choice formats (list and dictionary). It also includes a default value that is a YAML anchor.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlove_copier:\n    type: bool # This makes Copier ask for y/n\n    help: Do you love Copier?\n    default: yes # Without a default, you force the user to answer\n\nproject_name:\n    type: str # Any value will be treated raw as a string\n    help: An awesome project needs an awesome name. Tell me yours.\n    default: paradox-specifier\n    validator: >-\n        {% if not (project_name | regex_search('^[a-z][a-z0-9\\-]+$')) %}\n        project_name must start with a letter, followed one or more letters, digits or dashes all lowercase.\n        {% endif %}\n\nrocket_launch_password:\n    type: str\n    secret: true # This value will not be logged into .copier-answers.yml\n    placeholder: my top secret password\n\n# I'll avoid default and help here, but you can use them too\nage:\n    type: int\n    validator: \"{% if age <= 0 %}Must be positive{% endif %}\"\n\nheight:\n    type: float\n\nany_json:\n    help: Tell me anything, but format it as a one-line JSON string\n    type: json\n    multiline: true\n\nany_yaml:\n    help: Tell me anything, but format it as a one-line YAML string\n    type: yaml # This is the default type, also for short syntax questions\n    multiline: true\n\nyour_favorite_book:\n    # User will choose one of these and your template will get the value\n    choices:\n        - The Bible\n        - The Hitchhiker's Guide to the Galaxy\n\nproject_license:\n    # User will see only the dict key and choose one, but you will\n    # get the dict value in your template\n    choices:\n        MIT: &mit_text |\n            Here I can write the full text of the MIT license.\n            This will be a long text, shortened here for example purposes.\n        Apache2: |\n            Full text of Apache2 license.\n    # When using choices, the default value is the value, **not** the key;\n    # that's why I'm using the YAML anchor declared above to avoid retyping the\n    # whole license\n    default: *mit_text\n    # You can still define the type, to make sure answers that come from --data\n    # CLI argument match the type that your template expects\n    type: str\n\nclose_to_work:\n    help: Do you live close to your work?\n    # This format works just like the dict one\n    choices:\n        - [at home, I work at home]\n        - [less than 10km, quite close]\n        - [more than 10km, not so close]\n        - [more than 100km, quite far away]\n```\n\n----------------------------------------\n\nTITLE: Generating a Project Using Copier CLI in shell\nDESCRIPTION: Executes the Copier CLI command to generate a new project from a given template source path or URL into a specified destination directory. If the destination does not exist, Copier creates and populates it with generated files. This snippet demonstrates basic project generation usage with Copier from the command line.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/generating.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncopier copy path/to/project/template path/to/destination\n```\n\n----------------------------------------\n\nTITLE: Installing Copier via pip\nDESCRIPTION: This command installs Copier using pip. This is suitable for using Copier as a library within your project.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install copier\n```\n\n----------------------------------------\n\nTITLE: Generating a Project Using Copier Python API\nDESCRIPTION: Uses the `copier.run_copy` function to programmatically generate a project based on a template source into a destination directory. It offers the same functionality as the CLI but allows embedding Copier calls inside Python applications or scripts.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/generating.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncopier.run_copy(\"path/to/project/template\", \"path/to/destination\")\n```\n\n----------------------------------------\n\nTITLE: Running the Basic Copier Update Command (Shell)\nDESCRIPTION: Executes the Copier update process for the project in the current directory. This command reads Git tags, checks out the latest PEP 440 compliant tag, and applies template updates. It requires a clean Git status and a valid `.copier-answers.yml` file. Use `--vcs-ref=HEAD` to update to the latest commit instead of the latest tag. Conflict handling can be specified using `--conflict rej` or `--conflict inline` (default).\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/updating.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncopier update\n```\n\n----------------------------------------\n\nTITLE: Updating Copier Project Overriding Specific Answers (Shell)\nDESCRIPTION: Runs the Copier update process non-interactively using previous answers (`--defaults`), but overrides a specific answer (`updated_question`) with a new value (`my new answer`) provided directly via the `--data` command-line argument.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/updating.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncopier update --defaults --data updated_question=\"my new answer\"\n```\n\n----------------------------------------\n\nTITLE: Illustrative Copier Template Directory Structure (Shell)\nDESCRIPTION: Shows a typical directory layout for a Copier template project. It includes the `copier.yml` configuration file, optional `.git` directory, a folder with a templated name (`{{project_name}}`), a file with both templated name and content (`{{module_name}}.py.jinja`), and a template for storing user answers (`{{_copier_conf.answers_file}}.jinja`).\nSOURCE: https://github.com/copier-org/copier/blob/master/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n📁 my_copier_template                        # your template project\n├── 📄 copier.yml                            # your template configuration\n├── 📁 .git/                                 # your template is a Git repository\n├── 📁 {{project_name}}                      # a folder with a templated name\n│   └── 📄 {{module_name}}.py.jinja          # a file with a templated name\n└── 📄 {{_copier_conf.answers_file}}.jinja   # answers are recorded here\n```\n\n----------------------------------------\n\nTITLE: Defining Questions and Defaults in copier.yml (YAML)\nDESCRIPTION: Example `copier.yml` file demonstrating how to define questions for the user. Each top-level key (`name_of_the_project`, `number_of_eels`, `your_email`) represents a question variable. The corresponding value serves as the default answer presented to the user during the template generation process. Copier uses this structure to build its interactive questionnaire.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname_of_the_project: My awesome project\nnumber_of_eels: 1234\nyour_email: \"\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Git Reference to Checkout a Particular Template Version in Copier CLI\nDESCRIPTION: Demonstrates how to specify a particular Git reference, such as branch or tag, when generating a project from a remote Git repository template. The `--vcs-ref` option directs Copier to checkout the specified revision before generating files. This snippet is useful for selecting specific template versions rather than using the latest release tag by default.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/generating.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncopier copy --vcs-ref master https://github.com/foo/copier-template.git ./path/to/destination\n```\n\n----------------------------------------\n\nTITLE: Configuring Questions and Defaults in copier.yml - YAML\nDESCRIPTION: Defines the 'copier.yml' file used to prompt the user for project-specific values, such as project name and module name. This YAML file is mandatory for advanced Copier templates. Dependencies: Copier. Key parameters include 'type' for input type and 'help' for prompt messages. Inputs are user values; outputs are injected variables in template rendering. Limitations: Only Copier-compatible.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/creating.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# questions\nproject_name:\n    type: str\n    help: What is your project name?\n\nmodule_name:\n    type: str\n    help: What is your Python module name?\n```\n\n----------------------------------------\n\nTITLE: Example Data File for Copier (input.yml)\nDESCRIPTION: An example YAML file (`input.yml`) containing key-value pairs (user_name, age, height). This file format can be used with the `--data-file` CLI option to provide input data for Copier templates, serving as an alternative to multiple `--data` flags.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nuser_name: Manuel Calavera\nage: 7\nheight: 1.83\n```\n\n----------------------------------------\n\nTITLE: Using Jinja in Prompt Templating with YAML Configuration\nDESCRIPTION: Example showing how to use Jinja templating in Copier configuration files to create dynamic prompts and default values based on previous answers.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# default\nusername:\n    type: str\n\norganization:\n    type: str\n\nemail:\n    type: str\n    # Notice that both `username` and `organization` have been already asked\n    default: \"{{ username }}@{{ organization }}.com\"\n\n# help\ncopyright_holder:\n    type: str\n    when: \"{% if organization != 'Public domain' %}true{% endif %}\"\n    help: The person or entity within {{ organization }} that holds copyrights.\n\n# type\ntarget:\n    type: str\n    choices:\n        - humans\n        - machines\n\nuser_config:\n    type: \"{% if target == 'humans' %}yaml{% else %}json{% endif %}\"\n\n# choices\ntitle:\n    type: str\n    help: Your title within {{ organization }}\n\ncontact:\n    choices:\n        Copyright holder: \"{{ copyright_holder }}\"\n        CEO: Alice Bob\n        CTO: Carl Dave\n        \"{{ title }}\": \"{{ username }}\"\n```\n\n----------------------------------------\n\nTITLE: YAML Choice Validation\nDESCRIPTION: This YAML snippet shows how to use validators within the `choices` section of a Copier template to conditionally enable or disable choices based on the values of other variables. The `validator` field renders a Jinja2 template, and if the result is a non-empty string, the choice is disabled and the message is displayed.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncloud:\n    type: str\n    help: Which cloud provider do you use?\n    choices:\n        - Any\n        - AWS\n        - Azure\n        - GCP\n\niac:\n    type: str\n    help: Which IaC tool do you use?\n    choices:\n        Terraform: tf\n        Cloud Formation:\n            value: cf\n            validator: \"{% if cloud != 'AWS' %}Requires AWS{% endif %}\"\n        Azure Resource Manager:\n            value: arm\n            validator: \"{% if cloud != 'Azure' %}Requires Azure{% endif %}\"\n        Deployment Manager:\n            value: dm\n            validator: \"{% if cloud != 'GCP' %}Requires GCP{% endif %}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Copier via pipx\nDESCRIPTION: This command installs Copier using pipx, which is the recommended way to install command-line tools in Python.  It ensures that Copier and its dependencies are installed in an isolated environment, preventing conflicts with other Python packages. This is intended for CLI app usage.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npipx install copier\n```\n\n----------------------------------------\n\nTITLE: Running Copier from a Python program\nDESCRIPTION: This Python snippet demonstrates how to use the `run_copy` function from the `copier` library to generate a project from either a local path or a Git URL. It takes the template source and the destination path as arguments.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/index.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom copier import run_copy\n\n# Create a project from a local path\nrun_copy(\"path/to/project/template\", \"path/to/destination\")\n\n# Or from a Git URL.\nrun_copy(\"https://github.com/copier-org/copier.git\", \"path/to/destination\")\n\n# You can also use \"gh:\" as a shortcut of \"https://github.com/\"\nrun_copy(\"gh:copier-org/copier.git\", \"path/to/destination\")\n\n# Or \"gl:\" as a shortcut of \"https://gitlab.com/\"\nrun_copy(\"gl:copier-org/copier.git\", \"path/to/destination\")\n```\n\n----------------------------------------\n\nTITLE: Recording Answers in YAML Format with Jinja2 - YAML+Jinja\nDESCRIPTION: A Jinja2 and YAML combined template that records user answers with the 'to_nice_yaml' filter. The '_copier_answers' variable includes metadata and user responses. Dependency: jinja2-ansible-filters for 'to_nice_yaml'. Inputs: '_copier_answers'. Output: YAML file. Limitation: Changes to this file will be overwritten by Copier.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/creating.md#_snippet_3\n\nLANGUAGE: yaml+jinja\nCODE:\n```\n# Changes here will be overwritten by Copier\n{{ _copier_answers|to_nice_yaml -}}\n```\n\n----------------------------------------\n\nTITLE: YAML Conditional Question\nDESCRIPTION: This YAML snippet demonstrates how to create a conditional question in a Copier template using the `when` field.  The copyright holder question is only asked if the project license is not set to 'Public domain'. It uses Jinja2 templating to evaluate the condition.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nproject_creator:\n    type: str\n\nproject_license:\n    type: str\n    choices:\n        - GPLv3\n        - Public domain\n\ncopyright_holder:\n    type: str\n    default: |-\n        {% if project_license == 'Public domain' -%}\n            {#- Nobody owns public projects -#}\n            nobody\n        {%- else -%}\n            {#- By default, project creator is the owner -#}\n            {{ project_creator }}\n        {%- endif %}\n    # Only ask for copyright if project is not in the public domain\n    when: \"{{ project_license != 'Public domain' }}\"\n```\n\n----------------------------------------\n\nTITLE: Template for Storing User Answers (YAML+Jinja)\nDESCRIPTION: A Jinja template file, typically named `.copier-answers.yml.jinja` or similar based on `_copier_conf.answers_file`. It uses the `_copier_answers` variable and the `to_nice_yaml` filter to automatically record the user's answers in a YAML format within the generated project. This file allows Copier to manage project updates.\nSOURCE: https://github.com/copier-org/copier/blob/master/README.md#_snippet_4\n\nLANGUAGE: YAML+Jinja\nCODE:\n```\n# Changes here will be overwritten by Copier\n{{ _copier_answers|to_nice_yaml -}}\n```\n\n----------------------------------------\n\nTITLE: Define Secret Questions in copier.yml\nDESCRIPTION: This example shows how to define secret questions in `copier.yml`. This marks the specified question variables as secret, preventing them from being displayed in plain text during the prompt process. This is particularly useful for sensitive information like passwords.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\n_secret_questions:\n    - password\n\nuser: johndoe\npassword: s3cr3t\n```\n\n----------------------------------------\n\nTITLE: Updating Templates using Shell\nDESCRIPTION: This snippet displays the commands to update Copier templates, using the `copier update` command. It utilizes the same answer files as the initial application of templates to ensure the correct updates by keeping the user's previous answers. It relies on the `-a` argument to select the answer file.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\ncopier update -a .copier-answers.main.yml\ncopier update -a .copier-answers.pre-commit.yml\ncopier update -a .copier-answers.ci.yml\n```\n\n----------------------------------------\n\nTITLE: Creating a Templated Python File with Jinja (Python+Jinja)\nDESCRIPTION: Demonstrates a Python file within a Copier template that uses Jinja templating. The filename itself (`{{project_name}}/{{module_name}}.py.jinja`) and its content (`print(\"Hello from {{module_name}}!\")`) are rendered based on user answers provided during project generation.\nSOURCE: https://github.com/copier-org/copier/blob/master/README.md#_snippet_3\n\nLANGUAGE: Python+Jinja\nCODE:\n```\nprint(\"Hello from {{module_name}}!\")\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Excludes in copier.yml\nDESCRIPTION: Illustrates that defining the `_exclude` key in `copier.yml` completely replaces Copier's default exclusion patterns. In this example, only files matching `*.bar` and the `.git` directory are excluded, and default excludes like `copier.yml` itself are *not* automatically excluded anymore.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n_exclude:\n    - \"*.bar\"\n    - \".git\"\n```\n\n----------------------------------------\n\nTITLE: Defining User Defaults in settings.yml (YAML)\nDESCRIPTION: This code snippet demonstrates how to define user default variables within the `settings.yml` file.  These defaults can be used to pre-populate fields in Copier templates, streamlining the user experience. It utilizes YAML syntax for defining key-value pairs, where keys represent variable names and values represent their default values.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/settings.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n    user_name: \"John Doe\"\n    user_email: john.doe@acme.com\n```\n\n----------------------------------------\n\nTITLE: Installing Copier via uv\nDESCRIPTION: This command installs Copier using uv tool management. It's an alternative to pipx for managing CLI tools, leveraging a different underlying tool to provide a means of installation. This command is also intended for CLI app usage.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuv tool install copier\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests and Linters with UV and Poe\nDESCRIPTION: Executes the project's automated test suite and code linting checks using `uv run poe`. `uv` runs the `test` and `lint` tasks defined for the `poe` task runner within the project's activated virtual environment. This ensures code quality and correctness.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/contributing.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuv run poe test\nuv run poe lint\n```\n\n----------------------------------------\n\nTITLE: Using Templated Exclude Patterns in copier.yml\nDESCRIPTION: Demonstrates using Jinja templating within the `_exclude` list in `copier.yml` for conditional exclusion. This example uses the `_copier_operation` variable to exclude specific Python example files (`src/*_example.py`) only during an `update` operation, ensuring they are copied initially but ignored during subsequent updates.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n_exclude:\n    - \"{% if _copier_operation == 'update' -%}src/*_example.py{% endif %}\"\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Templates using Shell\nDESCRIPTION: This snippet demonstrates how to apply multiple Copier templates to a single project using shell commands. It initializes a Git repository, copies templates using the `copier copy` command specifying different answer files with the `-a` option. Finally, it commits the changes.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\nmkdir my-project\ncd my-project\ngit init\n# Apply framework template\ncopier copy -a .copier-answers.main.yml https://github.com/example-framework/framework-template.git .\ngit add .\ngit commit -m 'Start project based on framework template'\n# Apply pre-commit template\ncopier copy -a .copier-answers.pre-commit.yml https://gitlab.com/my-stuff/pre-commit-template.git .\ngit add .\npre-commit run -a  # Just in case 😉\ngit commit -am 'Apply pre-commit template'\n# Apply internal CI template\ncopier copy -a .copier-answers.ci.yml git@gitlab.example.com:my-company/ci-template.git .\ngit add .\ngit commit -m 'Apply internal CI template'\n```\n\n----------------------------------------\n\nTITLE: Using Choices in CI Configuration Conditionals\nDESCRIPTION: Example demonstrating how to conditionally generate different CI configuration files based on user-selected CI service.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nci:\n    type: str\n    help: What Continuous Integration service do you want to use?\n    choices:\n        GitHub CI: github\n        GitLab CI: gitlab\n    default: github\n```\n\n----------------------------------------\n\nTITLE: Exclude Files with Patterns - YAML\nDESCRIPTION: Illustrates how to exclude files from being copied to the destination folder using gitignore-style patterns. The `_exclude` key in `copier.yml` contains a list of patterns. Uses `pathspec` library.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\n_exclude:\n    # match all text files...\n    - \"*.txt\"\n    # .. but not this one:\n    - \"!a.txt\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Files Based on User Input\nDESCRIPTION: Example showing how to generate files conditionally based on user responses, using a pre-commit configuration example.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nuse_precommit:\n    type: bool\n    default: false\n    help: Do you want to use pre-commit?\n```\n\n----------------------------------------\n\nTITLE: Defining Template Structure with Directory Tree - Shell\nDESCRIPTION: Shows a shell-like 'tree' representation for how to organize a minimal Copier template, including configuration, Jinja2-templated files, and VCS-related folders. No dependencies—purely for illustration in documentation. Helps users visualize required folder and file structures. This snippet is intended for directory structure visualization only; it is not executable code.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/creating.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmy_copier_template                            # your template project\n    copier.yml                                # your template configuration\n    .git/                                     # your template is a Git repository\n    {{project_name}}                          # a folder with a templated name\n        {{module_name}}.py.jinja              # a file with a templated name\n    {{_copier_conf.answers_file}}.jinja       # answers are recorded here\n```\n\n----------------------------------------\n\nTITLE: Define Post-Generation Tasks - YAML\nDESCRIPTION: Configures tasks to be executed after project generation or updates.  Tasks can be defined as strings, lists of strings, or dictionaries with `command`, `when`, and `working_directory` keys. Requires the target project to be available for the tasks to operate on.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\n_tasks:\n    # Strings get executed under system's default shell\n    - \"git init\"\n    - \"rm {{ name_of_the_project }}/README.md\"\n    # Arrays are executed without shell, saving you the work of escaping arguments\n    - [invoke, \"--search-root={{ _copier_conf.src_path }}\", after-copy]\n    # You are able to output the full conf to JSON, to be parsed by your script\n    - [invoke, end-process, \"--full-conf={{ _copier_conf|to_json }}\"]\n    # Your script can be run by the same Python environment used to run Copier\n    - [\"{{ _copier_python }}\", task.py]\n    # Run a command during the initial copy operation only, excluding updates\n    - command: [\"{{ _copier_python }}\", task.py]\n      when: \"{{ _copier_operation == 'copy' }}\"\n    # OS-specific task (supported values are \"linux\", \"macos\", \"windows\" and `None`)\n    - command: rm {{ name_of_the_project }}/README.md\n      when: \"{{ _copier_conf.os in  ['linux', 'macos'] }}\"\n    - command: Remove-Item {{ name_of_the_project }}\\README.md\n      when: \"{{ _copier_conf.os == 'windows' }}\"\n```\n\n----------------------------------------\n\nTITLE: Generating Package Directory Structure\nDESCRIPTION: Example showing how to use user input to generate directory structures with package paths, converting path separators automatically.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\npackage:\n    type: str\n    help: Package name\n```\n\n----------------------------------------\n\nTITLE: Define Migrations in copier.yml\nDESCRIPTION: This example shows how to define migrations in `copier.yml` to run commands during template updates. It includes examples for invoking a migration script and removing a folder, with conditional execution based on the stage of the update.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n_migrations:\n  # {{ _copier_conf.src_path }} points to the path where the template was\n  # cloned, so it can be helpful to run migration scripts stored there.\n  - invoke -r {{ _copier_conf.src_path }} -c migrations migrate $STAGE $VERSION_FROM $VERSION_TO\n  - version: v1.0.0\n    command: rm ./old-folder\n    when: \"{{ _stage == 'before' }}\"\n```\n\n----------------------------------------\n\nTITLE: Diagram Illustrating the Copier Update Process (Mermaid)\nDESCRIPTION: A Mermaid graph diagram visualizing the internal steps Copier takes during an update. It shows how Copier clones template versions, generates temporary project states, compares them to derive a diff, applies pre-migrations, updates the project based on the latest template (prompting user), re-applies the diff, and finally runs post-migrations.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/updating.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n\n%% nodes ----------------------------------------------------------\ntemplate_repo(\"template repository\")\ntemplate_current(\"/tmp/template<br>(current tag)\")\ntemplate_latest(\"/tmp/template<br>(latest tag)\")\n\nproject_regen(\"/tmp/project<br>(fresh, current version)\")\nproject_current(\"current project\")\nproject_half(\"half migrated<br>project\")\nproject_updated(\"updated project\")\nproject_applied(\"updated project<br>(diff applied)\")\nproject_full(\"fully updated<br>and migrated project\")\n\nupdate[\"update current<br>project in-place<br>(prompting)<br>+ run tasks again\"]\ncompare[\"compare to get diff\"]\napply[\"apply diff\"]\n\ndiff(\"diff\")\n\n%% edges ----------------------------------------------------------\n        template_repo --> |git clone| template_current\n        template_repo --> |git clone| template_latest\n\n     template_current --> |generate and run tasks| project_regen\n      project_current --> compare\n      project_current --> |apply pre-migrations| project_half\n        project_regen --> compare\n         project_half --> update\n      template_latest --> update\n               update --> project_updated\n              compare --> diff\n                 diff --> apply\n      project_updated --> apply\n                apply --> project_applied\n      project_applied --> |apply post-migrations| project_full\n\n%% style ----------------------------------------------------------\nclassDef blackborder stroke:#000;\nclass compare,update,apply blackborder;\n```\n\n----------------------------------------\n\nTITLE: Using --data CLI Flag to Override Answers\nDESCRIPTION: Demonstrates using the `-d` or `--data` CLI flag with `copier copy` to provide specific answers (like `user_name`) directly on the command line. This allows overriding default values defined in the template or answers file. When combined with the `-f` (force) flag, it prevents interactive prompts.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncopier copy -fd 'user_name=Manuel Calavera' template destination\n```\n\n----------------------------------------\n\nTITLE: Defining Template Questions in copier.yml (YAML)\nDESCRIPTION: Example `copier.yml` file defining two questions (`project_name` and `module_name`) for the user. Each question specifies its type (`str`) and provides help text to guide the user during project generation.\nSOURCE: https://github.com/copier-org/copier/blob/master/README.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n# questions\nproject_name:\n    type: str\n    help: What is your project name?\n\nmodule_name:\n    type: str\n    help: What is your Python module name?\n```\n\n----------------------------------------\n\nTITLE: YAML Dynamic Choices\nDESCRIPTION: This YAML snippet illustrates how to generate dynamic choices for a Copier prompt using Jinja2 templating. The `choices` field contains a template that is rendered based on other variables, allowing for dynamic lists of choices.  The example switches dependency managers depending on the programming language selected.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage:\n    type: str\n    help: Which programming language do you use?\n    choices:\n        - python\n        - node\n\ndependency_manager:\n    type: str\n    help: Which dependency manager do you use?\n    choices: |\n        {%- if language == \"python\" %}\n        - poetry\n        - pipenv\n        {%- else %}\n        - npm\n        - yarn\n        {%- endif %}\n```\n\n----------------------------------------\n\nTITLE: Rendered Hello Script Example - Python\nDESCRIPTION: Example of a fully rendered Python module generated by Copier. Input is from 'super_project/world.py' with 'module_name' set to 'world'. Serves as output-only for demonstration. No dependencies to run the printed script; output shows Copier's dynamic rendering.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/creating.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Hello from world!\")\n```\n\n----------------------------------------\n\nTITLE: Copying a project from a local path\nDESCRIPTION: This command shows how to use the Copier CLI to generate a project from a local template path.  It takes two arguments: the path to the template and the path to where the generated project should be created.  The template folder must contain the copier.yml and the other template files as per the instructions.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/index.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncopier copy path/to/project/template path/to/destination\n```\n\n----------------------------------------\n\nTITLE: Templating the Subdirectory Option - YAML\nDESCRIPTION: Demonstrates how to use Jinja templating within the `_subdirectory` option.  This allows dynamic selection of the template subdirectory based on user input.  Requires a questionnaire to prompt the user for input and a directory structure that matches the possible answers.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\n_subdirectory: \"{{ python_engine }}\"\npython_engine:\n    type: str\n    choices:\n        - poetry\n        - pipenv\n```\n\n----------------------------------------\n\nTITLE: Rendering a Hello from Module Script with Jinja2 - Python+Jinja\nDESCRIPTION: A Jinja2-templated Python file that outputs a greeting using the provided module name. Dependencies: Jinja2 (implicit via Copier). Key parameter: 'module_name', injected from copier.yml. Input: Render context with 'module_name'. Output: A Python script with the greeting. It will be renamed and rendered per user response. Meant for dynamic file creation.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/creating.md#_snippet_2\n\nLANGUAGE: python+jinja\nCODE:\n```\nprint(\"Hello from {{module_name}}!\")\n```\n\n----------------------------------------\n\nTITLE: Skip Existing Files with Jinja Templating in copier.yml\nDESCRIPTION: This example shows how to use `_skip_if_exists` in `copier.yml` to skip certain files if they already exist in the destination. The pattern can be templated using Jinja. In this example, a secret password file is skipped if it exists.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\n_skip_if_exists:\n    - .secret_password.yml\n```\n\n----------------------------------------\n\nTITLE: Updating Copier Project Reusing All Previous Answers (Shell)\nDESCRIPTION: Runs the Copier update process non-interactively, automatically reusing all the answers stored in the `.copier-answers.yml` file from the previous run. This avoids the need to go through the questionnaire again if no changes to answers are needed.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/updating.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncopier update --defaults\n```\n\n----------------------------------------\n\nTITLE: Cleaning Python Build Artifacts with Pipx PyClean\nDESCRIPTION: Provides an alternative command using `pipx run pyclean` to remove Python bytecode files and build debris. Similar to the `uvx` version, it targets the current directory (`.`), includes extra debris removal (`--debris`), and provides verbose output (`--verbose`). This requires `pipx`.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/contributing.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npipx run pyclean . --debris --verbose\n```\n\n----------------------------------------\n\nTITLE: Configuring External Data in copier.yml for Template Composition\nDESCRIPTION: Example `copier.yml` configuration demonstrating how to use `_external_data` for template composition. It loads answers from a parent template's answers file (path determined by the `parent_tpl_answers_file` question) into the `_external_data.parent_tpl` namespace and uses a value from it (`target_version`) as a default for a child template question.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n# Child template defaults to a different answers file, to avoid conflicts\n_answers_file: .copier-answers.child-tpl.yml\n\n# Child template loads parent answers\n_external_data:\n    # A dynamic path. Make sure you answer that question\n    # before the first access to the data (with `_external_data.parent_tpl`)\n    parent_tpl: \"{{ parent_tpl_answers_file }}\"\n\n# Ask user where they stored parent answers\nparent_tpl_answers_file:\n    help: Where did you store answers of the parent template?\n    default: .copier-answers.yml\n\n# Use a parent answer as the default value for a child question\ntarget_version:\n    help: What version are you deploying?\n    # We already answered the `parent_tpl_answers_file` question, so we can\n    # now correctly access the external data from `_external_data.parent_tpl`\n    default: \"{{ _external_data.parent_tpl.target_version }}\"\n```\n\n----------------------------------------\n\nTITLE: Generating Copier Answers YAML File\nDESCRIPTION: This snippet shows the content of `.copier-answers.yml` file generated by Copier. This file stores user answers for template questions, allowing for easy updates. It leverages Jinja templating to serialize the `_copier_answers` variable to YAML format, which is a dictionary of answers.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_41\n\nLANGUAGE: yaml+jinja\nCODE:\n```\n# Changes here will be overwritten by Copier; NEVER EDIT MANUALLY\n{{ _copier_answers|to_nice_yaml -}}\n```\n\n----------------------------------------\n\nTITLE: Templating Limitations and Invalid Examples\nDESCRIPTION: Examples demonstrating the limitations of templating in Copier configuration files, including placement constraints and variable dependencies.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nyour_age:\n    type: int\n\n# Valid\ndouble_it:\n    type: int\n    default: \"{{ your_age * 2}}\"\n\n# Invalid, the templating occurs outside of the parameter value\ndid_you_ask:\n    type: str\n    {% if your_age %}\n    default: \"yes\"\n    {% else %}\n    placeholder: \"nope\"\n    {% endif %}\n\n# Invalid, `a_random_word` wasn't answered yet\nother_random_word:\n    type: str\n    placeholder: \"Something different to {{ a_random_word }}\"\n\n# Invalid, YAML interprets curly braces\na_random_word:\n    type: str\n    default: {{ 'hello' }}\n```\n\n----------------------------------------\n\nTITLE: Implementing in-place context modification with ContextHook\nDESCRIPTION: Demonstrates how to modify the template context in-place by setting the update attribute to false and directly modifying the context dictionary.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/faq.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom copier_templates_extensions import ContextHook\n\n\nclass ContextUpdater(ContextHook):\n    update = False\n\n    def hook(self, context):\n        flavor = context[\"flavor\"]  # user's answer to the \"flavor\" question\n\n        context[\"isDocker\"] = flavor == \"docker\"\n        context[\"isK8s\"] = flavor == \"kubernetes\"\n        context[\"isInstances\"] = flavor == \"instances\"\n        context[\"isLite\"] = flavor == \"none\"\n\n        context[\"isNotDocker\"] = flavor != \"docker\"\n        context[\"isNotK8s\"] = flavor != \"kubernetes\"\n        context[\"isNotInstances\"] = flavor != \"instances\"\n        context[\"isNotLite\"] = flavor != \"none\"\n\n        context[\"hasContainers\"] = context[\"isDocker\"] or context[\"isK8s\"]\n\n        # you can now actually remove items from the context\n        del context[\"flavor\"]\n```\n\n----------------------------------------\n\nTITLE: Jinja Template for Secret Password File\nDESCRIPTION: This Jinja template generates a random SHA512 hash for a password, which is used in conjunction with `_skip_if_exists` to prevent the password from being overwritten during updates.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_35\n\nLANGUAGE: jinja\nCODE:\n```\n{{999999999999999999999999999999999|ans_random|hash('sha512')}}\n```\n\n----------------------------------------\n\nTITLE: Rendering Secrets into a File (.secrets.yaml.jinja)\nDESCRIPTION: An example Jinja template file (`.secrets.yaml.jinja`) designed to render the values of secret questions (like `password`) into a YAML secrets file (e.g., `.secrets.yaml`). This pattern allows storing collected secret answers persistently.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\npassword: \"{{ password }}\"\n```\n\n----------------------------------------\n\nTITLE: Loading Secrets using _external_data in copier.yml\nDESCRIPTION: Shows how to configure `_external_data` in `copier.yml` to load sensitive data from a separate, potentially Git-ignored, secrets file (e.g., `.secrets.yaml`). The loaded data (under the `_external_data.secrets` namespace) can then be used, for instance, as default values for secret questions like `password`.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n# Template loads secrets from Git-ignored file\n_external_data:\n    # A static path. If missing, it will return an empty dict\n    secrets: .secrets.yaml\n\n# Use a secret answers as the default value for a secret question\npassword:\n    help: What is the password?\n    secret: true\n    # If `.secrets.yaml` exists, it has been loaded at this point and we can\n    # now correctly access the external data from `_external_data.secrets`\n    default: \"{{ _external_data.secrets.password }}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Templated Answers File\nDESCRIPTION: This code snippet demonstrates how to use Jinja templating to generate a file that will contain the answers provided during project generation, using the `_copier_answers` variable. The `to_nice_yaml` filter formats the answers in a readable YAML format.  Changes made to this file are overwritten by Copier on subsequent runs.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/index.md#_snippet_7\n\nLANGUAGE: yaml+jinja\nCODE:\n```\n# Changes here will be overwritten by Copier\n{{ _copier_answers|to_nice_yaml -}}\n```\n\n----------------------------------------\n\nTITLE: Jinja2-Templated Subcommand Python Script - Python+Jinja\nDESCRIPTION: Template file for generating a Python script per subcommand in each command folder using Jinja2. Dependencies: Copier and Jinja2. Context variables include 'cmd' and 'subcmd', which are iterated over for file generation. Inputs: 'cmd', 'subcmd'. Output: Python scripts with subcommand information. Limitation: Used only within Copier's template engine.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/creating.md#_snippet_9\n\nLANGUAGE: python+jinja\nCODE:\n```\nprint(\"This is the `{{ subcmd }}` subcommand in the `{{ cmd.name }}` command\")\n```\n\n----------------------------------------\n\nTITLE: Defining Python Project Common Questions\nDESCRIPTION: Example YAML file containing common questions for Python projects, demonstrating how to merge settings like skip_if_exists across included files.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nversion:\n    type: str\n    help: What is the version of your Python project?\n\n# Settings like `_skip_if_exists` are merged\n_skip_if_exists:\n    - \"pyproject.toml\"\n```\n\n----------------------------------------\n\nTITLE: Applying Copier to an existing project\nDESCRIPTION: Shows how to use Copier to apply a template to a preexisting Git project, demonstrating the basic copy operation.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/faq.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncopier copy https://github.com/me/my-template.git ./my-preexisting-git-project\n```\n\n----------------------------------------\n\nTITLE: Creating copier.yml Template Configuration\nDESCRIPTION: This YAML snippet defines the configuration for a Copier template, specifically outlining the questions the user will be prompted for when generating the project. It defines the type and help text associated with the `project_name` and `module_name` fields. This file resides inside the template folder.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/index.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# questions\nproject_name:\n    type: str\n    help: What is your project name?\n\nmodule_name:\n    type: str\n    help: What is your Python module name?\n```\n\n----------------------------------------\n\nTITLE: Installing Copier using Nix Flake (Shell)\nDESCRIPTION: Installs the latest release of Copier with reproducibility using Nix profile and Flakehub. This command fetches and installs the Copier package defined in the specified flake.\nSOURCE: https://github.com/copier-org/copier/blob/master/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnix profile install 'https://flakehub.com/f/copier-org/copier/*.tar.gz'\n```\n\n----------------------------------------\n\nTITLE: Using CLI Exclude Flags to Copy a Single File\nDESCRIPTION: Shows how to use multiple `--exclude` flags with `copier copy` for precise file selection during copying. This example first excludes all files (`--exclude '*'`) and then uses an inverted pattern (`--exclude '!file-i-want'`) to specifically include only `file-i-want` from the template.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\ncopier copy --exclude '*' --exclude '!file-i-want' ./template ./destination\n```\n\n----------------------------------------\n\nTITLE: Configuring _envops for Copier 5 Compatibility\nDESCRIPTION: Provides the necessary `_envops` configuration block for `copier.yml` to maintain backward compatibility with templates created for Copier 5. This sets the Jinja environment delimiters (block, variable, comment strings) and other settings like `autoescape` and `keep_trailing_newline` to match Copier 5 defaults, ensuring older templates render correctly in Copier 6+.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\n_envops:\n    autoescape: false\n    block_end_string: \"%]\"\n    block_start_string: \"[%\"\n    comment_end_string: \"#]\"\n    comment_start_string: \"[#\"\n    keep_trailing_newline: true\n    variable_end_string: \"]]\"\n    variable_start_string: \"[[\"\n```\n\n----------------------------------------\n\nTITLE: Installing Copier via conda\nDESCRIPTION: This command installs Copier using conda, a package and environment management system.  This method offers a way to install the package, especially useful when managing different environments. It is intended for use with the conda package manager.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nconda install -c conda-forge copier\n```\n\n----------------------------------------\n\nTITLE: Creating a New Release (Maintainer Workflow)\nDESCRIPTION: Commands for project maintainers to perform a release. It involves ensuring the local `master` branch is up-to-date with the remote repository including tags, using Commitizen (`cz bump --retry`) to determine the next version based on Conventional Commits, update the changelog, and create a version tag, and finally pushing the new commit and tags to the remote repository.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/contributing.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n# Make sure you're in the last commit\ngit checkout master\ngit pull --tags\n\n# Create a new changelog entry and bump the version automatically\ncz bump --retry\n\n# Push it\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Loop Directory and File Generation Visualization - Shell\nDESCRIPTION: Shell tree output showing the directory structure made via looping on commands and subcommands, illustrating Copier's 'yield' directive for dynamic content. No dependencies; for explaining looped output structures when using Copier's advanced features. This is reference for template authors.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/creating.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncommands\n    {% yield cmd from commands %}{{ cmd.name }}{% endyield %}\n        __init__.py\n        {% yield subcmd from cmd.subcommands %}{{ subcmd }}{% endyield %}.py.jinja\n```\n\n----------------------------------------\n\nTITLE: Including External YAML Files in Configuration\nDESCRIPTION: Example showing how to include settings and questions from other YAML files in Copier configuration, enabling reuse of common configurations across templates.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# Copier will load all these files\n!include shared-conf/common.*.yml\n\n# These 3 lines split the several YAML documents\n---\n# These two documents include common questions for these kind of projects\n!include common-questions/web-app.yml\n---\n!include common-questions/python-project.yml\n---\n\n# Here you can specify any settings or questions specific for your template\n_skip_if_exists:\n    - .password.txt\ncustom_question: default answer\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes with Commitizen\nDESCRIPTION: Stages all modified and new files (`git add .`), then uses Commitizen (`cz commit`) to interactively create a commit message adhering to the Conventional Commits standard. Finally, it pushes the specified branch (`name-of-your-bugfix-or-feature`) to the `origin` remote (the user's fork). Using `git commit` manually is also an option.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/contributing.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ncz commit  # use `git commit` if you prefer, but this helps\ngit push origin name-of-your-bugfix-or-feature\n```\n\n----------------------------------------\n\nTITLE: Implementing a ContextHook extension with returned context\nDESCRIPTION: Shows how to create a context hook extension that modifies the template context based on user choices, returning a new context object with additional computed variables.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/faq.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom copier_templates_extensions import ContextHook\n\n\nclass ContextUpdater(ContextHook):\n    def hook(self, context):\n        flavor = context[\"flavor\"]  # user's answer to the \"flavor\" question\n        return {\n            \"isDocker\": flavor == \"docker\",\n            \"isK8s\": flavor == \"kubernetes\",\n            \"isInstances\": flavor == \"instances\",\n            \"isLite\": flavor == \"none\",\n            \"isNotDocker\": flavor != \"docker\",\n            \"isNotK8s\": flavor != \"kubernetes\",\n            \"isNotInstances\": flavor != \"instances\",\n            \"isNotLite\": flavor != \"none\",\n            \"hasContainers\": flavor in {\"docker\", \"kubernetes\"},\n        }\n```\n\n----------------------------------------\n\nTITLE: Creating a minimal Docker image with Copier using Nix\nDESCRIPTION: Shows how to bundle Copier into a minimal Docker image using Nix bundlers, creating a reproducible container image for Copier usage.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/faq.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnix bundle --bundler github:NixOS/bundlers#toDockerImage \\\n    github:copier-org/copier#packages.x86_64-linux.default\ndocker load < python*copier*.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Set Subdirectory for Template Root - YAML\nDESCRIPTION: Configures a subdirectory within the template repository to be used as the root for generating projects. This allows separation of template metadata and code.  The `_subdirectory` key in `copier.yml` specifies the subdirectory name.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\n_subdirectory: template\n```\n\n----------------------------------------\n\nTITLE: Creating a Slugify Macro in Jinja\nDESCRIPTION: Jinja macro definition for a reusable slugify function that can be imported into various template files.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_16\n\nLANGUAGE: jinja\nCODE:\n```\n{# For simplicity ... -#}\n{% macro slugify(value) -%}\n{{ value|lower|replace(' ', '-') }}\n{%- endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Using Macros in Copier Configuration\nDESCRIPTION: Example showing how to import and use a Jinja macro in a Copier configuration file for slug generation.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n_exclude:\n    - slugify\n\nname:\n    type: str\n    help: A nice human-readable name\n\nslug:\n    type: str\n    help: A slug of the name\n    default: \"{% from 'slugify.jinja' import slugify %}{{ slugify(name) }}\"\n```\n\n----------------------------------------\n\nTITLE: Updating Copier Project Overriding Answers via Data File (Shell)\nDESCRIPTION: Demonstrates updating a Copier project non-interactively using a data file. First, a temporary YAML file is created containing the answers to override. Then, `copier update` is run with `--defaults` and `--data-file` pointing to the created YAML file. This method is useful for complex data or when `--data` has limitations (e.g., issue #1474 for multiselect).\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/updating.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\necho \"updated_question: my new answer\" > /tmp/data-file.yaml\ncopier update --defaults --data-file /tmp/data-file.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Copier using Nix Flake\nDESCRIPTION: This shell command installs the latest Copier release via Nix Flake, ensuring 100% reproducibility. It's an alternative installation method that leverages Nix to install Copier in a reproducible manner.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/index.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnix profile install 'https://flakehub.com/f/copier-org/copier/*.tar.gz'\n```\n\n----------------------------------------\n\nTITLE: Using Copier CLI to Generate from Local Template Including Dirty Changes\nDESCRIPTION: Shows how to generate or develop a project from a local template repository while including any uncommitted modifications (dirty changes) by specifying the `--vcs-ref HEAD`. This enables testing template changes without committing them to source control.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/generating.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncopier copy --vcs-ref HEAD path/to/project/template path/to/destination\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomHelpFormatter Class in Python for Enhanced Help Display\nDESCRIPTION: Defines a CustomHelpFormatter class that extends argparse.HelpFormatter to provide more verbose help output for subcommands. It overrides the _format_action method to customize how help text is displayed for individual actions.\nSOURCE: https://github.com/copier-org/copier/blob/master/tests/demo_exclude_negate/copy_me.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CustomHelpFormatter(argparse.HelpFormatter):\n    def _format_action(self, action):\n        if type(action) == argparse._SubParsersAction:\n            # inject new class variable for subcommand formatting\n            subactions = action._get_subactions()\n            invocations = []\n            for subaction in subactions:\n                if hasattr(subaction, \"_subcommand_title\"):\n                    # use defined subcommand title\n                    invocation = \"%*s%-*s   %s\\n\" % (\n                        self._current_indent + 2,\n                        \"\",\n                        action.subcommand_title_width - 2,\n                        subaction.dest,\n                        subaction._subcommand_title,\n                    )\n                else:\n                    # use first line of the description for subcommand title\n                    invocation = \"%*s%-*s   %s\\n\" % (\n                        self._current_indent + 2,\n                        \"\",\n                        action.subcommand_title_width - 2,\n                        subaction.dest,\n                        subaction.help.split(\"\\n\")[0] if subaction.help else \"\",\n                    )\n                invocations.append(invocation)\n            return \"\".join(invocations)\n\n        return super(CustomHelpFormatter, self)._format_action(action)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-commit Hook for Rejection Files (YAML)\nDESCRIPTION: YAML configuration for `.pre-commit-config.yaml` using a local hook. This hook (`forbidden-files`) prevents committing `.rej` files generated by Copier when using the `--conflict rej` setting. It uses `language: fail` to block commits if files matching the pattern `\\.rej$` are staged.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/updating.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrepos:\n    - repo: local\n      hooks:\n          # Prevent committing .rej files\n          - id: forbidden-files\n            name: forbidden files\n            entry:\n                found Copier update rejection files; review and remove them before\n                merging.\n            language: fail\n            files: \"\\\\.rej$\"\n```\n\n----------------------------------------\n\nTITLE: Rendered Copier Answers Example - YAML\nDESCRIPTION: Sample output of '.copier-answers.yml' showing rendered Copier metadata and user answers. No dependencies for reading this file; purely documentation for users to see how Copier tracks project context and answers. Demonstrates reserved fields and answer storage.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/creating.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Changes here will be overwritten by Copier\n_commit: 0.1.0\n_src_path: gh:your_account/your_template\nproject_name: super_project\nmodule_name: world\n```\n\n----------------------------------------\n\nTITLE: Implementing computed values in Copier configuration\nDESCRIPTION: Shows how to create computed values in a Copier template by combining 'default' with 'when: false' to calculate values without prompting the user.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/faq.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncopyright_year:\n    type: int\n    default: 2024\n\nnext_year:\n    type: int\n    default: \"{{ copyright_year + 1 }}\" # This computes the value\n    when: false # This makes sure it isn't asked nor stored\n```\n\n----------------------------------------\n\nTITLE: Generating Projects Programmatically with Copier API (Python)\nDESCRIPTION: Shows how to use the Copier Python library to generate projects. It imports `run_copy` and demonstrates generating a project from a local template path and various Git URL formats, including standard HTTPS, GitHub (`gh:`) shortcut, and GitLab (`gl:`) shortcut.\nSOURCE: https://github.com/copier-org/copier/blob/master/README.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom copier import run_copy\n\n# Create a project from a local path\nrun_copy(\"path/to/project/template\", \"path/to/destination\")\n\n# Or from a Git URL.\nrun_copy(\"https://github.com/copier-org/copier.git\", \"path/to/destination\")\n\n# You can also use \"gh:\" as a shortcut of \"https://github.com/\"\nrun_copy(\"gh:copier-org/copier.git\", \"path/to/destination\")\n\n# Or \"gl:\" as a shortcut of \"https://gitlab.com/\"\nrun_copy(\"gl:copier-org/copier.git\", \"path/to/destination\")\n```\n\n----------------------------------------\n\nTITLE: Advanced Question Configuration for Command Selection - YAML\nDESCRIPTION: Provides a 'copier.yml' snippet demonstrating advanced multi-select options for selecting commands and subcommands. Uses YAML anchors and references for DRY value assignment. Key parameters: multiselect, choices, and defaults. This controls how Copier prompts for complex list values.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/creating.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncommands:\n    type: yaml\n    multiselect: true\n    choices:\n        init:\n            value: &init\n                name: init\n                subcommands:\n                    - config\n                    - database\n        run:\n            value: &run\n                name: run\n                subcommands:\n                    - server\n                    - worker\n        deploy:\n            value: &deploy\n                name: deploy\n                subcommands:\n                    - staging\n                    - production\n    default: [*init, *run, *deploy]\n```\n\n----------------------------------------\n\nTITLE: Specify Minimum Copier Version in copier.yml\nDESCRIPTION: This example shows how to specify the minimum required Copier version in `copier.yml`. This ensures that users with older Copier versions cannot generate projects from the template.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\n_min_copier_version: \"4.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-commit Hook for Inline Conflicts (YAML)\nDESCRIPTION: YAML configuration for `.pre-commit-config.yaml` using `pre-commit-hooks`. This hook (`check-merge-conflict`) prevents committing files containing inline merge conflict markers (e.g., `<<<<<<<`, `=======`, `>>>>>>>`). It is recommended when using `copier update` with the default `--conflict inline` setting.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/updating.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrepos:\n    - repo: https://github.com/pre-commit/pre-commit-hooks\n      rev: v4.3.0\n      hooks:\n          # Prevent committing inline conflict markers\n          - id: check-merge-conflict\n            args: [--assume-in-merge]\n```\n\n----------------------------------------\n\nTITLE: Including Templates for Slug Generation\nDESCRIPTION: Example showing how to include a Jinja template for creating a slug from a human-readable name in Copier configuration.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n_exclude:\n    - name-slug\n\nname:\n    type: str\n    help: A nice human-readable name\n\nslug:\n    type: str\n    help: A slug of the name\n    default: \"{% include 'name-slug.jinja' %}\"\n```\n\n----------------------------------------\n\nTITLE: Equivalent --data Usage for Data File Content\nDESCRIPTION: Illustrates the command-line equivalent of using a data file. Passing multiple `-d` or `--data` flags with individual key-value pairs achieves the same result as providing the content via a YAML file specified with `--data-file`.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ncopier copy -d 'user_name=Manuel Calavera' -d 'age=7' -d 'height=1.83' template destination\n```\n\n----------------------------------------\n\nTITLE: Creating a Name Slugify Template in Jinja\nDESCRIPTION: Jinja template for converting a human-readable name into a slug by lowercasing and replacing spaces with hyphens.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_15\n\nLANGUAGE: jinja\nCODE:\n```\n{# For simplicity ... -#}\n{{ name|lower|replace(' ', '-') }}\n```\n\n----------------------------------------\n\nTITLE: Customize Jinja Template Suffix - YAML\nDESCRIPTION: Defines the file suffix that identifies files to be processed as Jinja templates. The `_templates_suffix` key in `copier.yml` specifies the suffix. An empty suffix renders all files (except excluded ones).\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\n_templates_suffix: .my-custom-suffix\n```\n\nLANGUAGE: yaml\nCODE:\n```\n_templates_suffix: \"\"\n```\n\n----------------------------------------\n\nTITLE: Running a Subset of Tests with uv and poe - Shell\nDESCRIPTION: This command demonstrates how to run a specific subset of tests by specifying the test file path as an argument to 'uv run poe test'. The snippet requires that both 'uv' and 'poe' are installed. Replace 'tests/the-tests-file.py' with the desired test file. The output will show the results of only the targeted tests, aiding faster iterations during development.\nSOURCE: https://github.com/copier-org/copier/blob/master/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nuv run poe test tests/the-tests-file.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Jinja extensions in Copier\nDESCRIPTION: Shows how to configure Jinja extensions in Copier's YAML configuration file to enable context modification through custom extensions.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/faq.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n_jinja_extensions:\n    - copier_templates_extensions.TemplateExtensionLoader\n    - extensions/context.py:ContextUpdater\n```\n\n----------------------------------------\n\nTITLE: Defining Trusted Locations (YAML)\nDESCRIPTION: This YAML snippet shows how to define trusted locations for Copier templates.  These locations can be either specific repositories or repository prefixes. This is important for security, as it restricts Copier to only use templates from trusted sources. Locations ending with '/' are treated as prefixes; otherwise, they are exact matches.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/settings.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntrust:\n    - https://github.com/your_account/your_template.git\n    - https://github.com/your_account/\n    - ~/templates/\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch for Development - Shell\nDESCRIPTION: This shell snippet shows how to create and switch to a new branch for local development using Git. It assumes that the user is inside the Copier project repository and has Git installed. The script creates a new branch (replace the branch name appropriately) and moves the working context to it, allowing the user to isolate changes for a bugfix or feature.\nSOURCE: https://github.com/copier-org/copier/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b name-of-your-bugfix-or-feature\n```\n\n----------------------------------------\n\nTITLE: Configuring Nix Binary Caches with Cachix\nDESCRIPTION: Adds the `copier` and `devenv` binary caches to the user's Nix configuration using `cachix`. This command uses `nix-shell` to temporarily install `cachix` and then runs `cachix use` for both caches, speeding up future Nix builds by downloading pre-built packages. Requires `nix`.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/contributing.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnix-shell -p cachix --run 'cachix use copier && cachix use devenv'\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Linting with uv and poe - Shell\nDESCRIPTION: This snippet demonstrates how to execute the full test suite and lint checks using 'uv' with 'poe'. Both 'uv' and 'poe' must be installed in the development environment. The snippet helps ensure code quality and correctness before submitting changes. The output details results of tests and code quality checks.\nSOURCE: https://github.com/copier-org/copier/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuv run poe test\nuv run poe lint\n```\n\n----------------------------------------\n\nTITLE: Cleaning Python Bytecode and Artifacts with pyclean - Shell\nDESCRIPTION: This snippet provides two alternative commands for cleaning Python bytecode and build artifacts using 'pyclean' via 'uvx' or 'pipx'. The commands require the specified tools to be installed and can be run from the project root. The '--debris' and '--verbose' flags increase the thoroughness and level of output, respectively.\nSOURCE: https://github.com/copier-org/copier/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nuvx pyclean . --debris --verbose\n```\n\nLANGUAGE: shell\nCODE:\n```\npipx run pyclean . --debris --verbose\n```\n\n----------------------------------------\n\nTITLE: Configuring Answers File Location\nDESCRIPTION: Example showing how to configure a custom location for the answers file in Copier configuration.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n_answers_file: .my-custom-answers.yml\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment with Direnv - Shell\nDESCRIPTION: This shell snippet illustrates the process for enabling Direnv in the project directory. It presupposes that Direnv is installed and configured in the user's shell. Running 'direnv allow' loads environment variables and dependencies required for Copier development, including creating a Python virtual environment and installing necessary packages.\nSOURCE: https://github.com/copier-org/copier/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Let direnv do its magic\ndirenv allow\n```\n\n----------------------------------------\n\nTITLE: Overriding Data File Values with --data\nDESCRIPTION: Demonstrates the precedence rule where CLI arguments passed via `-d` or `--data` override corresponding values found in the YAML file specified by `--data-file`. In this case, `user_name` from the command line overrides the value in `input.yml`.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ncopier copy -d 'user_name=Bilbo Baggins' --data-file input.yml template destination\n```\n\n----------------------------------------\n\nTITLE: Running a Subset of Tests\nDESCRIPTION: Executes a specific test file (e.g., `tests/the-tests-file.py`) instead of the entire test suite. This is done using `uv run poe test` followed by the path to the test file, allowing for faster feedback during development.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/contributing.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nuv run poe test tests/the-tests-file.py\n```\n\n----------------------------------------\n\nTITLE: YAML String Type Choices\nDESCRIPTION: This YAML snippet demonstrates using string types for all choice values in a Copier template, simplifying later template processing. It avoids mixed types, ensuring consistency and easier reasoning about the data.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npick_one:\n    type: str\n    choices:\n        Nothing, thanks: \"\"\n        Value is key: null # Becomes \"Value is key\", which is a str\n        One and a half: \"1.5\"\n        \"Yes\": \"true\"\n        Nope: \"no\"\n        Some array: \"[str, keeps, this, as, a, str]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Templated Python File\nDESCRIPTION: This code snippet demonstrates how to use Jinja templating within a Python file.  It will print a greeting using the `module_name` variable, which is defined in `copier.yml`. This file will be created and populated after project generation based on answers provided.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/index.md#_snippet_6\n\nLANGUAGE: python+jinja\nCODE:\n```\nprint(\"Hello from {{module_name}}!\")\n```\n\n----------------------------------------\n\nTITLE: Defining multiple-choice variable in Copier configuration\nDESCRIPTION: Demonstrates how to define a multiple-choice variable in Copier's configuration file that can be used with a context hook.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/faq.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nflavor:\n    type: str\n    choices:\n        - docker\n        - instances\n        - kubernetes\n        - none\n```\n\n----------------------------------------\n\nTITLE: Aborting a Copier Update Using Git Commands (Shell)\nDESCRIPTION: Provides a sequence of Git commands to completely discard changes introduced by a `copier update` run, especially when conflicts arise. `git reset` removes merge conflict information from the index, `git checkout .` restores all modified tracked files to their pre-update state, and `git clean -d -i` interactively removes untracked files and directories created during the update.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/updating.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit reset           # throw away merge conflict information\ngit checkout .      # restore modified files\ngit clean -d -i     # remove untracked files and folders\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes with Git and Commitizen - Shell\nDESCRIPTION: This snippet shows an example workflow for staging, committing, and pushing changes with Git. 'cz commit' refers to Commitizen for standardized commit messages (or plain 'git commit' can be used). This process assumes the user has already made changes and is on the appropriate feature branch. The expected output is that local changes are committed and pushed to the corresponding remote branch.\nSOURCE: https://github.com/copier-org/copier/blob/master/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ncz commit  # use `git commit` if you prefer, but this helps\ngit push origin name-of-your-bugfix-or-feature\n```\n\n----------------------------------------\n\nTITLE: Cloning Copier Repository with Git - Shell\nDESCRIPTION: This shell snippet demonstrates how to clone a forked Copier repository from GitHub and navigate into the project directory. These commands require that Git is installed and properly configured with appropriate SSH keys for GitHub access. The expected output is a local copy of the repository and an updated working directory set to the project folder.\nSOURCE: https://github.com/copier-org/copier/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:my-user/copier.git\ncd copier\n```\n\n----------------------------------------\n\nTITLE: Cloning the Forked Copier Repository\nDESCRIPTION: Clones the user's forked Copier repository from GitHub using SSH and navigates into the newly created `copier` project directory. This requires `git` to be installed and assumes the user has already forked the repository and replaced `my-user` with their actual GitHub username.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/contributing.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:my-user/copier.git\ncd copier\n```\n\n----------------------------------------\n\nTITLE: Configuring Nix Binary Cache with cachix - Shell\nDESCRIPTION: This command sets up binary caches for Nix using 'cachix' for the Copier and devenv caches. It assumes that Nix and cachix are installed. The 'nix-shell -p cachix' command runs 'cachix use' for each required cache, improving build speeds by using prebuilt binaries. This is intended to be run from anywhere on the developer's system.\nSOURCE: https://github.com/copier-org/copier/blob/master/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnix-shell -p cachix --run 'cachix use copier && cachix use devenv'\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch for Development\nDESCRIPTION: Creates a new Git branch and immediately switches to it using `git checkout -b`. Developers should replace `name-of-your-bugfix-or-feature` with a descriptive name relevant to the changes being made. This command requires `git` and should be run inside the repository.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/contributing.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b name-of-your-bugfix-or-feature\n```\n\n----------------------------------------\n\nTITLE: Activating Development Environment with Direnv\nDESCRIPTION: Authorizes Direnv to load the project's `.envrc` configuration file by running `direnv allow` within the project directory. This action sets up the defined development environment, which typically involves downloading dependencies via Nix and creating/activating a Python virtual environment using `uv`.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/contributing.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Let direnv do its magic\ndirenv allow\n```\n\n----------------------------------------\n\nTITLE: Rendered Commands Directory Structure Example - Shell\nDESCRIPTION: Shows the final shell tree structure generated by Copier's looping file system operations, with separate folders for each command and included subcommands. Helps users predict output for given template logic. It's a visualization—no execution required.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/creating.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncommands\n    deploy\n        __init__.py\n        production.py\n        staging.py\n    init\n        __init__.py\n        config.py\n        database.py\n    run\n        __init__.py\n        server.py\n        worker.py\n```\n\n----------------------------------------\n\nTITLE: Running Copier from Docker/Podman using Nix\nDESCRIPTION: Demonstrates how to run Copier from a container using Nix. This approach provides reproducible execution without requiring a dedicated Docker image.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/faq.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Change for docker if needed\nengine=podman\n\n# You can pin the version; example: github:copier-org/copier/v8.0.0\ncopier=github:copier-org/copier\n\n$engine container run --rm -it docker.io/nixos/nix \\\n    nix --extra-experimental-features 'nix-command flakes' --accept-flake-config \\\n    run $copier -- --help\n```\n\n----------------------------------------\n\nTITLE: YAML Mixed Type Choices\nDESCRIPTION: This YAML snippet shows an example of mixing different types for choice values in a Copier template, demonstrating potential complexities. It's recommended to stick to a single type and handle conversions in the template code for clarity.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/configuring.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npick_one:\n    type: yaml # If you are mixing types, better be explicit\n    choices:\n        Nothing, thanks: \"null\" # Will be YAML-parsed and converted to null\n        Value is key: null # Value will be converted to \"Value is key\"\n        One and a half: 1.5\n        \"Yes\": true\n        Nope: no\n        Some array: \"[yaml, converts, this]\"\n```\n\n----------------------------------------\n\nTITLE: Rendered Subcommand Script Example - Python\nDESCRIPTION: A Python script showing the output from a loop-generated template for the subcommand 'config' in the command 'init'. This snippet is a static output resulting from dynamic templating. Input values: cmd.name='init', subcmd='config'. Output: Python script with appropriate print message. No external dependencies.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/creating.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nprint(\"This is the `config` subcommand in the `init` command\")\n```\n\n----------------------------------------\n\nTITLE: Using HEAD reference to include dirty changes in Copier\nDESCRIPTION: Shows how to explicitly specify the HEAD reference when copying from a template to include uncommitted changes during development.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/faq.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncopier copy -r HEAD ./src ./dst\n```\n\n----------------------------------------\n\nTITLE: Adding Copier Support Badge in Markdown\nDESCRIPTION: Provides the Markdown code to embed a Copier support badge in a `README.md` file. This badge links back to the Copier GitHub repository, indicating the project uses or supports Copier.\nSOURCE: https://github.com/copier-org/copier/blob/master/README.md#_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n[![Copier](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/copier-org/copier/master/img/badge/badge-grayscale-inverted-border-orange.json)](https://github.com/copier-org/copier)\n```\n\n----------------------------------------\n\nTITLE: Adding Copier Support Badge in reStructuredText\nDESCRIPTION: Provides the reStructuredText code to embed a Copier support badge in a `README.rst` file using the `image` directive. This badge links back to the Copier GitHub repository.\nSOURCE: https://github.com/copier-org/copier/blob/master/README.md#_snippet_8\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/copier-org/copier/master/img/badge/badge-grayscale-inverted-border-orange.json\n    :target: https://github.com/copier-org/copier\n    :alt: Copier\n```\n\n----------------------------------------\n\nTITLE: Adding Copier Support Badge in HTML\nDESCRIPTION: Provides the HTML code to embed a Copier support badge, suitable for HTML documentation or web pages. It uses an `<a>` tag wrapping an `<img>` tag, linking to the Copier repository.\nSOURCE: https://github.com/copier-org/copier/blob/master/README.md#_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://github.com/copier-org/copier\"><img src=\"https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/copier-org/copier/master/img/badge/badge-grayscale-inverted-border-orange.json\" alt=\"Copier\" style=\"max-width:100%;\"/></a>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Generated Project Structure - Shell\nDESCRIPTION: Displays the directory tree resulting from rendering the Copier template with example user inputs. Helps users understand the output structure. No dependencies; documentation only. This snippet is not code, but a representation of directories and files.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/creating.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngenerated_project\n    super_project\n        world.py\n    .copier-answers.yml\n```\n\n----------------------------------------\n\nTITLE: Creating and Publishing a New Release with Commitizen - Shell\nDESCRIPTION: This multi-command shell snippet walks maintainers through the process of preparing and publishing a new release using Git and Commitizen. It consists of checking out and updating to the latest master branch, automatically creating a changelog entry and version bump with 'cz bump', and finally pushing the new tags to GitHub. Prerequisites include having Commitizen installed and proper repository permissions. The output is a new version tag and changelog entry ready for publishing a GitHub release.\nSOURCE: https://github.com/copier-org/copier/blob/master/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# Make sure you're in the last commit\ngit checkout master\ngit pull --tags\n\n# Create a new changelog entry and bump the version automatically\ncz bump --retry\n\n# Push it\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Cleaning Python Build Artifacts with UVX PyClean\nDESCRIPTION: Optionally removes Python bytecode files (`.pyc`), `__pycache__` directories, and other build debris using `uvx pyclean`. The command targets the current directory (`.`), includes extra debris removal (`--debris`), and provides detailed output (`--verbose`). This uses `uvx` to execute `pyclean`.\nSOURCE: https://github.com/copier-org/copier/blob/master/docs/contributing.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nuvx pyclean . --debris --verbose\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomArgumentParser Class in Python for Better Command-Line Help\nDESCRIPTION: Defines a CustomArgumentParser class that extends argparse.ArgumentParser to provide enhanced help output for subcommands. It customizes the description text display and passes the custom formatter to the base class.\nSOURCE: https://github.com/copier-org/copier/blob/master/tests/demo_exclude_negate/copy_me.txt#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass CustomArgumentParser(argparse.ArgumentParser):\n    def __init__(self, *args, **kwargs):\n        if \"formatter_class\" not in kwargs:\n            kwargs[\"formatter_class\"] = CustomHelpFormatter\n\n        super(CustomArgumentParser, self).__init__(*args, **kwargs)\n\n    def _get_formatter(self):\n        return self.formatter_class(\n            prog=self.prog,\n            indent_increment=2,\n            max_help_position=24,\n            width=200,\n        )\n```"
  }
]