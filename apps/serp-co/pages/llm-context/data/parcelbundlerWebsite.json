[
  {
    "owner": "parcel-bundler",
    "repo": "website",
    "content": "TITLE: Implementing Code Splitting with React.lazy and Suspense\nDESCRIPTION: Shows how to implement code splitting in React using dynamic import() syntax with React.lazy and Suspense. This example lazily loads the Profile component when a button is clicked, reducing initial bundle size.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/react.md#2025-04-09_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {Suspense} from 'react';\n\nconst Profile = React.lazy(() => import('./Profile'));\n\nexport function Home() {\n  let [showProfile, setShowProfile] = React.useState(false);\n\n  return (\n    <main>\n      <h1>Home</h1>\n      <button onClick={() => setShowProfile(true)}>\n        Show Profile\n      </button>\n      {showProfile &&\n        <Suspense fallback={<div>Loading...</div>}>\n          <Profile />\n        </Suspense>\n      }\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Imports for Lazy Loading in JavaScript\nDESCRIPTION: Shows how to use the dynamic import() function to load dependencies asynchronously. This is useful for code splitting and lazy loading modules only when needed, which can improve initial page load performance.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/javascript.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport('./pages/about').then(function(page) {\n  page.render()\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ES Modules in JavaScript with Parcel\nDESCRIPTION: Shows how to implement ES module syntax for importing and exporting values between JavaScript files. This example demonstrates how to import a multiply function from a math module and use it to implement a square function.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/javascript.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {multiply} from './math.js';\n\nexport function square(x) {\n  return multiply(x, x);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function multiply(a, b) {\n  return a * b;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Client Component in React\nDESCRIPTION: A React client component that maintains state using useState. Marked with 'use client' directive to indicate it should run in the browser and provide interactivity.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\n\nimport {useState} from \"react\";\n\nexport function Counter() {\n  let [count, setCount] = useState(0);\n\n  return (\n    <button onClick={() => setCount(count + 1)}>Count: {count}</button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CSS Modules with React\nDESCRIPTION: Example of using CSS modules in a React component to avoid global CSS conflicts.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/react.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as classes from './Button.module.css';\n\nexport function Button({ children }) {\n  return (\n    <button className={classes.button}>\n      {children}\n    </button>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.button {\n  background: hotpink;\n}\n```\n\n----------------------------------------\n\nTITLE: Vue 3 Composition API Component Example\nDESCRIPTION: Vue 3 component using the Composition API with reactive state and computed properties. The component demonstrates a counter with a computed double value that updates on button click.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/vue.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <button @click=\"increment\">\n    Count is: {{ state.count }} Double is: {{\n    state.double }}\n  </button>\n</template>\n\n<script>\n  import { reactive, computed } from \"vue\";\n\n  export default {\n    setup() {\n      const state = reactive({\n        count: 0,\n        double: computed(() => state.count * 2),\n      });\n\n      function increment() {\n        state.count++;\n      }\n\n      return {\n        state,\n        increment,\n      };\n    },\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Navigation with React Server Components\nDESCRIPTION: Shows how to implement client-side navigation using React Server Components. It uses the fetchRSC function from @parcel/rsc/client to fetch new RSC payloads and update the component tree without full page refreshes.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_19\n\nLANGUAGE: js\nCODE:\n```\n\"use client-entry\";\n\nimport { hydrate, fetchRSC } from \"@parcel/rsc/client\";\n\nlet updateRoot = hydrate();\n\nasync function navigate(pathname, push = false) {\n  let root = await fetchRSC(pathname);\n  updateRoot(root, () => {\n    if (push) {\n      history.pushState(null, \"\", pathname);\n    }\n  });\n}\n\n// Intercept link clicks to perform RSC navigation.\ndocument.addEventListener(\"click\", (e) => {\n  let link = e.target.closest(\"a\");\n  if (link) {\n    e.preventDefault();\n    navigate(link.pathname, true);\n  }\n});\n\n// When the user clicks the back button, navigate with RSC.\nwindow.addEventListener(\"popstate\", (e) => {\n  navigate(location.pathname);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Emotion CSS-in-JS in React Component\nDESCRIPTION: Example of using Emotion CSS-in-JS to style a React component with dynamic CSS.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/react.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from \"@emotion/react\";\n\nexport function Button({ children }) {\n  return (\n    <button\n      css={css`\n        background: hotpink;\n        &:hover {\n          background: purple;\n        }\n      `}\n    >\n      {children}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Parcel Bundler Configuration in package.json\nDESCRIPTION: Configuration for the @parcel/bundler-default in package.json to customize code splitting behavior. Shows how to adjust minimum bundle size, parallel request limits, and other bundling parameters.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/code-splitting.md#2025-04-09_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@parcel/bundler-default\": {\n    \"minBundles\": 1,\n    \"minBundleSize\": 3000,\n    \"maxParallelRequests\": 20\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up React Project Structure\nDESCRIPTION: Basic file structure for a React project using Parcel, including HTML entry point, main JavaScript file, and App component.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/react.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>My Parcel App</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script type=\"module\" src=\"index.js\"></script>\n  </body>\n</html>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createRoot } from \"react-dom/client\";\nimport { App } from \"./App\";\n\nconst container = document.getElementById(\"app\");\nconst root = createRoot(container)\nroot.render(<App />);\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport function App() {\n  return <h1>Hello world!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Express Server for React Server Components\nDESCRIPTION: Express server setup for rendering React Server Components. Uses renderRequest from @parcel/rsc/node to render the page component as HTML in response to requests.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport express from \"express\";\nimport { renderRequest } from \"@parcel/rsc/node\";\nimport { Page } from \"./Page\";\n\n// Create an Express app and serve the dist folder.\nconst app = express();\napp.use(\"/client\", express.static(\"dist/client\"));\n\n// Create a route for the home page.\napp.get(\"/\", async (req, res) => {\n  await renderRequest(req, res, <Page />, { component: Page });\n});\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Splitting with React.lazy\nDESCRIPTION: Example of code splitting implementation using React.lazy for conditional component loading.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { lazy } from \"react\";\n\nconst TextComment = lazy(() => import(\"./TextComment\"));\nconst ImageComment = lazy(() => import(\"./ImageComment\"));\nconst VideoComment = lazy(() => import(\"./VideoComment\"));\n\nfunction Comment({ comment }) {\n  switch (comment.type) {\n    case \"text\":\n      return <TextComment comment={comment} />;\n    case \"image\":\n      return <ImageComment comment={comment} />;\n    case \"video\":\n      return <VideoComment comment={comment} />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Parcel Build and Handling Results\nDESCRIPTION: Executes a Parcel build using the run method and handles both successful builds and errors.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/parcel-api.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Parcel} from '@parcel/core';\n\nlet bundler = new Parcel({\n  entries: 'a.js',\n  defaultConfig: '@parcel/config-default'\n});\n\ntry {\n  let {bundleGraph, buildTime} = await bundler.run();\n  let bundles = bundleGraph.getBundles();\n  console.log(`✨ Built ${bundles.length} bundles in ${buildTime}ms!`);\n} catch (err) {\n  console.log(err.diagnostics);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Exported Module for Dynamic Import in JavaScript\nDESCRIPTION: Demonstrates a module that is dynamically imported, exporting a render function that will be called by the importing module.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/code-splitting.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport function render() {\n  // Render the page\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering React Server Components with Express in Node.js\nDESCRIPTION: This snippet demonstrates how to use Parcel's RSC support to render React Server Components on the server using Express. It shows loading data from a database and rendering it with both Server and Client Components.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/v2-14-0/v2-14-0.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport express from 'express';\nimport {renderRSC} from '@parcel/rsc/node';\n\nlet app = express();\napp.get('/comments', (req, res) => {\n  renderRSC(<Comments />).pipe(res);\n});\n\nasync function Comments() {\n  // Load data from a database...\n  let comments = await db.getComments();\n\n  // Render Markdown and interactive Client Components\n  return comments.map(comment => (\n    <article key={comment.id}>\n      <p>Posted by: {comment.user}</p>\n      <Markdown content={comment.body} />\n      <LikeButton />\n    </article>\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Hot Module Replacement with State Management\nDESCRIPTION: A more advanced implementation of Hot Module Replacement that preserves state between module reloads. It uses dispose to save data before a module is replaced and accept to restore that data when the module is updated.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/development.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (module.hot) {\n  module.hot.dispose(function (data) {\n    // module is about to be replaced.\n    // You can save data that should be accessible to the new asset in `data`\n    data.updated = Date.now();\n  });\n\n  module.hot.accept(function (getParents) {\n    // module or one of its dependencies was just updated.\n    // data stored in `dispose` is available in `module.hot.data`\n    let { updated } = module.hot.data;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Client Components\nDESCRIPTION: Example of client components with interactive features using React hooks.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\n\nimport {useState} from \"react\";\n\nexport function LikeButton({likes = 0}) {\n  let [count, setCount] = useState(likes);\n\n  return (\n    <button onClick={() => setCount(count + 1)}>{count} likes</button>\n  );\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n\"use server-entry\";\n\nimport {LikeButton} from './LikeButton';\n\nexport async function Comments() {\n  // ...\n\n  return comments.map(comment => (\n    <article key={comment.id}>\n      <p>Posted by: {comment.user}</p>\n      {renderMarkdown(comment.body)}\n      <LikeButton likes={comment.likes} />\n    </article>\n  ));\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Asset Transformation in Parcel Plugin\nDESCRIPTION: Demonstrates the basic structure of a Parcel transformer plugin that retrieves asset source code and source map, compiles it, and sets the results back on the asset.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/transformer.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Transformer} from '@parcel/plugin';\n\nexport default new Transformer({\n  async transform({asset}) {\n    // Retrieve the asset's source code and source map.\n    let source = await asset.getCode();\n    let sourceMap = await asset.getMap();\n\n    // Run it through some compiler, and set the results \n    // on the asset.\n    let {code, map} = compile(source, sourceMap);\n    asset.setCode(code);\n    asset.setMap(map);\n\n    // Return the asset\n    return [asset];\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Namer Plugins in .parcelrc\nDESCRIPTION: This snippet shows how to configure namer plugins in .parcelrc. Namer plugins determine the output filename for bundles. The '...' syntax extends the default namers.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"namers\": [\"@company/parcel-namer\", \"...\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Service Worker with Caching in JavaScript\nDESCRIPTION: This service worker script demonstrates how to pre-cache all bundles during installation and clean up old versions during activation. It uses the @parcel/service-worker package to access bundle URLs and versioning.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/javascript.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {manifest, version} from '@parcel/service-worker';\n\nasync function install() {\n  const cache = await caches.open(version);\n  await cache.addAll(manifest);\n}\naddEventListener('install', e => e.waitUntil(install()));\n\nasync function activate() {\n  const keys = await caches.keys();\n  await Promise.all(\n    keys.map(key => key !== version && caches.delete(key))\n  );\n}\naddEventListener('activate', e => e.waitUntil(activate()));\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Functions with React Server Components\nDESCRIPTION: Demonstrates how to implement server functions in a React Server Components app. It shows both client-side setup for calling server functions and server-side handling of these calls.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_20\n\nLANGUAGE: js\nCODE:\n```\n\"use client-entry\";\n\nimport { hydrate, fetchRSC } from \"@parcel/rsc/client\";\n\nlet updateRoot = hydrate({\n  // Setup a callback to perform server actions.\n  // This sends a POST request to the server and updates the page.\n  async callServer(id, args) {\n    let { result, root } = await fetchRSC(\"/\", {\n      method: \"POST\",\n      headers: {\n        \"rsc-action-id\": id,\n      },\n      body: args,\n    });\n    updateRoot(root);\n    return result;\n  },\n});\n\n// ...\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { renderRequest, callAction } from \"@parcel/rsc/node\";\n\n// ...\n\napp.post(\"/\", async (req, res) => {\n  let id = req.get(\"rsc-action-id\");\n  let { result } = await callAction(req, id);\n  let root = <Page />;\n  if (id) {\n    root = { result, root };\n  }\n  await renderRequest(req, res, root, { component: Page });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Dynamic Import in JavaScript with Parcel\nDESCRIPTION: Shows how to use dynamic imports to load a sub-page of an application on demand. The main file imports the about page module asynchronously using the Promise-based import() syntax.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/code-splitting.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport(\"./pages/about\").then(function (page) {\n  // Render page\n  page.render();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Packager Plugin in JavaScript\nDESCRIPTION: This example demonstrates a simple Packager plugin that concatenates all assets in a bundle. It uses the traverseAsset method to iterate through assets and getCode to retrieve their contents.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/packager.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Packager} from '@parcel/plugin';\n\nexport default new Packager({\n  async package({bundle}) {\n    let promises = [];\n    bundle.traverseAssets(asset => {\n      promises.push(asset.getCode());\n    });\n\n    let contents = await Promise.all(promises);\n    return {\n      contents: contents.join('\\n')\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Data in JavaScript with Parcel\nDESCRIPTION: This example demonstrates how to import data from a JSON file in JavaScript using Parcel's built-in JSON support. The code imports the data from data.json and accesses an array element.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/json.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport data from './data.json';\nconsole.log(data.hello[0]);\n// => \"world\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Optimizer Plugin in JavaScript for Parcel\nDESCRIPTION: Demonstrates the basic structure of a Parcel Optimizer plugin that transforms bundle contents and source maps. The optimize method receives the bundle contents and source map, performs transformations, and returns the modified versions.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/optimizer.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Optimizer} from '@parcel/plugin';\n\nexport default new Optimizer({\n  async optimize({contents, map}) {\n    let {code, sourceMap} = optimize(contents, map);\n    return {\n      contents: code,\n      map: sourceMap\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Vue.js Application Initialization with Vue 3\nDESCRIPTION: JavaScript entry point that creates and mounts a Vue application using the createApp method from Vue 3. It imports the root App component and mounts it to the #app element.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/vue.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createApp } from \"vue\";\nimport App from \"./App.vue\";\n\nconst app = createApp(App);\napp.mount(\"#app\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Parcel Dev Server with HMR\nDESCRIPTION: Sets up a Parcel dev server with Hot Module Replacement (HMR) enabled.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/parcel-api.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Parcel} from '@parcel/core';\n\nlet bundler = new Parcel({\n  entries: 'a.js',\n  defaultConfig: '@parcel/config-default',\n  serveOptions: {\n    port: 3000\n  },\n  hmrOptions: {\n    port: 3000\n  }\n});\n\nawait bundler.watch();\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import with Async/Await in JavaScript\nDESCRIPTION: Shows how to use async/await syntax with dynamic imports for cleaner asynchronous code. This loads a module dynamically and calls its render method.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/code-splitting.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function load() {\n  const page = await import(\"./pages/about\");\n  // Render page\n  page.render();\n}\nload();\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Function from Math Module in JavaScript\nDESCRIPTION: This snippet demonstrates how to import a specific function from a math module and use it in the main application file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/scope-hoisting.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {add} from 'math';\n\nconsole.log(add(2, 3));\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Files Using Glob Specifiers in JavaScript\nDESCRIPTION: This snippet demonstrates how to use glob specifiers to import multiple files at once in JavaScript, returning an object with keys corresponding to the file names.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as files from './files/*.js';\n```\n\n----------------------------------------\n\nTITLE: Dynamic Importing of Multiple Files Using Glob Specifiers\nDESCRIPTION: This snippet illustrates how to use dynamic import with glob specifiers, resulting in an object with functions to load each module on demand.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlet files = import('./files/*.js');\n\nasync function doSomething() {\n  let foo = await files.foo();\n  let bar = await files.bar();\n  return foo + bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parcel for SVG React Components\nDESCRIPTION: Parcel configuration in .parcelrc that enables transforming SVG files into React components. The configuration extends the default Parcel config and adds the SVG React transformer to the transformers list.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/react.md#2025-04-09_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"transformers\": {\n    \"*.svg\": [\"...\", \"@parcel/transformer-svg-react\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side RSC Integration\nDESCRIPTION: Client-side component implementation for fetching and rendering RSC payload with Suspense.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Suspense} from 'react';\nimport {fetchRSC} from '@parcel/rsc/client';\n\nexport function App() {\n  return (\n    <>\n      <h1>Client rendered</h1>\n      <Suspense fallback={<>Loading comments...</>}>\n        <Comments />\n      </Suspense>\n    </>\n  );\n}\n\nlet request = null;\n\nfunction Comments() {\n  // Simple cache to make sure we only fetch once.\n  request ??= fetchRSC('http://localhost:3000/comments');\n  return request;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Hot Module Replacement in JavaScript\nDESCRIPTION: A simple implementation of Hot Module Replacement (HMR) that prevents page reloads during development. This code checks for the presence of the module.hot API and accepts updates for the current module.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/development.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (module.hot) {\n  module.hot.accept();\n}\n```\n\n----------------------------------------\n\nTITLE: Using CommonJS Module System in Parcel\nDESCRIPTION: Demonstrates the CommonJS module system with require() and exports objects. The example shows how to load a math module and use its multiply function to implement a square function using legacy CommonJS syntax.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/javascript.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet math = require('./math');\n\nexports.square = function(x) {\n  return math.multiply(x, x);\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexports.multiply = function(a, b) {\n  return a * b;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating Source Maps with @parcel/source-map in JavaScript\nDESCRIPTION: Demonstrates various ways to create and manipulate source maps using the @parcel/source-map package, including adding indexed mappings, VLQ mappings, and combining source maps together.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/source-maps.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SourceMap from '@parcel/source-map';\n\nlet sourcemap = new SourceMap(projectRoot);\n\n// Each function that adds mappings has optional offset arguments.\n// These can be used to offset the generated mappings by a certain amount.\nlet lineOffset = 0;\nlet columnOffset = 0;\n\n// Add indexed mappings\n// These are mappings that can sometimes be extracted from a library even before they get converted into VLQ Mappings\nsourcemap.addIndexedMappings(\n  [\n    {\n      generated: {\n        // line index starts at 1\n        line: 1,\n        // column index starts at 0\n        column: 4,\n      },\n      original: {\n        // line index starts at 1\n        line: 1,\n        // column index starts at 0\n        column: 4,\n      },\n      source: \"index.js\",\n      // Name is optional\n      name: \"A\",\n    },\n  ],\n  lineOffset,\n  columnOffset\n);\n\n// Add vlq mappings. This is what would be outputted into a vlq encoded source map\nsourcemap.addVLQMap(\n  {\n    file: \"min.js\",\n    names: [\"bar\", \"baz\", \"n\"],\n    sources: [\"one.js\", \"two.js\"],\n    sourceRoot: \"/the/root\",\n    mappings:\n      \"CAAC,IAAI,IAAM,SAAUA,GAClB,OAAOC,IAAID;CCDb,IAAI,IAAM,SAAUE,GAClB,OAAOA\",\n  },\n  lineOffset,\n  columnOffset\n);\n\n// Source maps can be serialized to buffers, which is what we use for caching in Parcel.\n// You can instantiate a SourceMap with these buffer values by passing it to the constructor\nlet map = new SourceMap(projectRoot, mapBuffer);\n\n// You can also add a buffer to an existing source map using the addBuffer method.\nsourcemap.addBuffer(originalMapBuffer, lineOffset);\n\n// One SourceMap object may be added to another using the addSourceMap method.\nsourcemap.addSourceMap(map, lineOffset);\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering MDX in React\nDESCRIPTION: Demonstrates how to import an MDX file into a JavaScript application and render it using React components.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/mdx.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Hello from './hello.mdx';\n\nexport function App() {\n  return <Hello />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS with PostCSS and Parcel\nDESCRIPTION: Configuration files for setting up Tailwind CSS with PostCSS in a Parcel project, including JIT mode setup.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/react.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"tailwindcss\": {}\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  content: [\"./src/*.{html,js}\"],\n  theme: {\n    extend: {},\n  },\n  variants: {},\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Tree Shaking with Destructuring in Dynamic Imports\nDESCRIPTION: Examples of various syntax patterns for dynamic imports that allow Parcel to perform tree shaking, removing unused exports from dynamically imported modules.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/code-splitting.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet { x: y } = await import(\"./b.js\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet ns = await import(\"./b.js\");\nconsole.log(ns.x);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport(\"./b.js\").then((ns) => console.log(ns.x));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport(\"./b.js\").then(({ x: y }) => console.log(y));\n```\n\n----------------------------------------\n\nTITLE: Parcel-aware Babel Preset Configuration\nDESCRIPTION: Configuration using Parcel's wrapper presets that are aware of Parcel's targets for proper differential bundling.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/javascript.md#2025-04-09_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@parcel/babel-preset-env\"],\n  \"plugins\": [\"@parcel/babel-plugin-transform-runtime\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Random Number from Macro in TypeScript\nDESCRIPTION: Example of a macro that returns a random number, which is inlined at build time.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/macros.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getRandomNumber} from './macro.ts' with {type: 'macro'};\n\nconsole.log(getRandomNumber());\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getRandomNumber() {\n  return Math.random();\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Sass Modules in JavaScript\nDESCRIPTION: Example of importing a Sass/SCSS file as a CSS module in JavaScript or TypeScript. This demonstrates how to access CSS class names as JavaScript object properties.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/sass.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as classes from './style.module.scss';\n\ndocument.body.className = classes.body;\n```\n\n----------------------------------------\n\nTITLE: Generating Optimized Regular Expression with Macro in TypeScript\nDESCRIPTION: This snippet demonstrates how to use a macro to generate an optimized regular expression at build time using the regexgen library.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/v2-12-0/v2-12-0.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport regexgen from 'regexgen' with {type: 'macro'};\n\nconst regex = regexgen(['foobar', 'foobaz', 'foozap', 'fooza']);\nconsole.log(regex);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(/foo(?:zap?|ba[rz])/);\n```\n\n----------------------------------------\n\nTITLE: Creating a Web Worker Module in JavaScript with Parcel\nDESCRIPTION: Shows how to create a web worker using the Worker constructor with the URL constructor to reference a worker file. The example demonstrates using the type: 'module' option to enable ES module syntax in workers.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/javascript.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew Worker(\n  new URL('worker.js', import.meta.url),\n  {type: 'module'}\n);\n```\n\n----------------------------------------\n\nTITLE: Specifying Browser Compatibility in Package.json\nDESCRIPTION: This package.json snippet shows how to declare supported browsers using the browserslist field, which Parcel uses for transpilation targeting.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/javascript.md#2025-04-09_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"browserslist\": \"> 0.5%, last 2 versions, not dead\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple JavaScript Library Module\nDESCRIPTION: Example of a basic ES module that exports a function. This demonstrates the minimum viable code for a library.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/getting-started/library.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport function add(a, b) {\n  return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Parcel Watch Mode\nDESCRIPTION: Demonstrates how to use Parcel's watch mode to monitor for changes and handle build events.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/parcel-api.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Parcel} from '@parcel/core';\n\nlet bundler = new Parcel({\n  entries: 'a.js',\n  defaultConfig: '@parcel/config-default'\n});\n\nlet subscription = await bundler.watch((err, event) => {\n  if (err) {\n    // fatal error\n    throw err;\n  }\n\n  if (event.type === 'buildSuccess') {\n    let bundles = event.bundleGraph.getBundles();\n    console.log(`✨ Built ${bundles.length} bundles in ${event.buildTime}ms!`);\n  } else if (event.type === 'buildFailure') {\n    console.log(event.diagnostics);\n  }\n});\n\n// some time later...\nawait subscription.unsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Importing Nested Files Using Glob Specifiers in JavaScript\nDESCRIPTION: This example shows how to use glob specifiers to import nested files, resulting in a nested object structure based on the file paths.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as pages from './pages/*/*.js';\n\nconsole.log(pages.profile.index);\n```\n\n----------------------------------------\n\nTITLE: Fetching React Server Components on the Client\nDESCRIPTION: This code snippet shows how to fetch and render React Server Components on the client side using Suspense for loading states. It demonstrates the integration of server-rendered components into a client-side React application.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/v2-14-0/v2-14-0.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {fetchRSC} from '@parcel/rsc/client';\n\nfunction App() {\n  return (\n    <Suspense fallback={<>Loading comments...</>}>\n      <Comments />\n    </Suspense>\n  );\n}\n\nlet request;\nfunction Comments() {\n  request ??= fetchRSC('http://localhost:3000/comments');\n  return request;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Lazily Loaded Component for Code Splitting\nDESCRIPTION: Defines a simple Profile component that will be lazily loaded with React.lazy and dynamic import(). This component is exported as the default to work with React.lazy.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/react.md#2025-04-09_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Profile() {\n  return <h2>Profile</h2>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using URL Dependencies to Reference Assets in JavaScript\nDESCRIPTION: Demonstrates how to reference non-JavaScript assets like images using the URL constructor with import.meta.url. This example creates an image element and sets its source to a referenced image file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/javascript.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet img = document.createElement('img');\nimg.src = new URL('hero.jpg', import.meta.url);\ndocument.body.appendChild(img);\n```\n\n----------------------------------------\n\nTITLE: Asset Type Transformation in Parcel\nDESCRIPTION: Shows how to change an asset's type during transformation, allowing it to be processed by a different pipeline.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/transformer.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Transformer} from '@parcel/plugin';\n\nexport default new Transformer({\n  async transform({asset}) {\n    let code = await asset.getCode();\n\n    let result = compile(code);\n    asset.type = 'js';\n    asset.setCode(result);\n\n    return [asset];\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Environment-Aware Asset Transformation\nDESCRIPTION: Demonstrates how to handle different compilation targets based on the environment (browser vs node) when transforming assets.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/transformer.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Transformer} from '@parcel/plugin';\n\nexport default new Transformer({\n  async transform({asset}) {\n    let code = await asset.getCode();\n\n    let result = asset.env.isBrowser()\n      ? compileForBrowser(code, asset.engines.browser)\n      : compileForNode(code, asset.engines.node);\n\n    asset.setCode(result);\n    return [asset];\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Parcel for Experimental TypeScript Validation\nDESCRIPTION: Example .parcelrc configuration to enable the experimental TypeScript validator plugin for type checking within Parcel builds.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/typescript.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"validators\": {\n    \"*.{ts,tsx}\": [\"@parcel/validator-typescript\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Data URL Scheme in CSS with Parcel\nDESCRIPTION: Demonstrates how to inline a file as a data URL using the data-url: scheme in the url() function.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.logo {\n  background: url('data-url:./logo.png');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Experimental Validation in Parcel\nDESCRIPTION: Example tsconfig.json configuration for use with the experimental Parcel TypeScript validator, including source file inclusion and compiler options.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/typescript.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\"src/**/*\"],\n  \"compilerOptions\": {\n    \"target\": \"es2021\",\n    \"strict\": true  \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Client Entry and Components in Server Entry\nDESCRIPTION: Updated Page component that imports the client entry and a client component. This enables the server-rendered page to become interactive after hydration in the browser.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n\"use server-entry\";\n\nimport './client';\nimport {Counter} from './Counter';\n\nexport function Page() {\n  return (\n    <html>\n      <body>\n        {/* ... */}\n        <Counter />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Import Attributes in JavaScript\nDESCRIPTION: Demonstrates how to configure ESLint to support import attributes by using a compatible parser like @typescript-eslint/parser.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/macros.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  parser: '@typescript-eslint/parser'\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing Variables from Other CSS Modules in Parcel\nDESCRIPTION: Demonstrates how to reference CSS variables defined in other CSS module files using the 'from' keyword.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.button {\n  background: var(--accent-color from \"./vars.module.css\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Transformer\nDESCRIPTION: Sets up a custom .parcelrc configuration to use the TypeScript TSC transformer instead of the default SWC, which may be necessary for projects with complex TypeScript configurations.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/parcel-1.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"transformers\": {\n    \"*.{ts,tsx}\": [\"@parcel/transformer-typescript-tsc\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Component for Profile Page\nDESCRIPTION: JSX code for the profile page that imports React DOM for rendering. This shares the react-dom dependency with the home page.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/code-splitting.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createRoot } from 'react-dom';\n\ncreateRoot(app).render(<h1>Profile</h1>, app);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Path Mapping Configuration\nDESCRIPTION: Configuration for custom module path mapping in TypeScript\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"jquery\": [\"./vendor/jquery/dist/jquery\"],\n      \"app/*\": [\"./src/app/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Service Worker with ES Module Support in JavaScript\nDESCRIPTION: This snippet demonstrates how to register a service worker using the navigator.serviceWorker.register function with ES module support. It uses the URL constructor to reference the service worker file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/javascript.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnavigator.serviceWorker.register(\n  new URL('service-worker.js', import.meta.url),\n  {type: 'module'}\n);\n```\n\n----------------------------------------\n\nTITLE: React Component for Home Page\nDESCRIPTION: JSX code for the home page that imports React DOM for rendering. This shows a module that will share common dependencies with other pages.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/code-splitting.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createRoot } from 'react-dom';\n\ncreateRoot(app).render(<h1>Home</h1>, app);\n```\n\n----------------------------------------\n\nTITLE: Installing SVG React Transformer Plugin for Parcel\nDESCRIPTION: Command to install the @parcel/transformer-svg-react plugin which enables importing SVG files as React components.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/react.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @parcel/transformer-svg-react --dev\n```\n\n----------------------------------------\n\nTITLE: Module Suffixes Configuration\nDESCRIPTION: TypeScript configuration for custom module suffix resolution\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"moduleSuffixes\": [\".ios\", \".native\", \"\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Binary Data with Parcel Transformer\nDESCRIPTION: Demonstrates how to implement a Parcel Transformer that processes binary content using Buffer. The transformer gets the binary buffer from an asset, transforms it, and sets the result back to the asset.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/transformer.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Transformer} from '@parcel/plugin';\n\nexport default new Transformer({\n  async transform({asset}) {\n    let buffer = await asset.getBuffer();\n\n    let result = transform(buffer);\n    asset.setBuffer(result);\n\n    return [asset];\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: TSConfig Base URL Configuration\nDESCRIPTION: TypeScript configuration for base URL resolution\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"./src\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Single Export in package.json\nDESCRIPTION: This example demonstrates how to define a single export for a package using the \"exports\" field in package.json.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"foo\",\n  \"exports\": \"./dist/index.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Parcel Configuration for Improved Tree Shaking\nDESCRIPTION: Custom .parcelrc configuration that uses the library bundler plugin to optimize tree shaking when the library is consumed.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/getting-started/library.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"bundler\": \"@parcel/bundler-library\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Parcel Instance with Basic Configuration\nDESCRIPTION: Creates a new Parcel instance with minimal configuration, specifying the entry point and default config.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/parcel-api.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Parcel} from '@parcel/core';\n\nlet bundler = new Parcel({\n  entries: 'a.js',\n  defaultConfig: '@parcel/config-default'\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ImportScripts Usage in Classic Script Workers\nDESCRIPTION: This snippet shows supported and unsupported patterns for using the importScripts function in classic script workers. It highlights the requirement for fully-qualified absolute URLs.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/javascript.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ absolute URL\nimportScripts('http://some-cdn.com/worker.js');\n\n// ✅ computed URL\nimportScripts(location.origin + '/worker.js');\n\n// 🚫 relative path\nimportScripts('worker.js');\n\n// 🚫 absolute path\nimportScripts('/worker.js');\n```\n\n----------------------------------------\n\nTITLE: Static Rendering with React Server Components in Parcel\nDESCRIPTION: This example demonstrates how to use Parcel's static rendering capabilities with React Server Components. It shows a basic page structure that includes navigation generated from a list of pages provided by Parcel.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/v2-14-0/v2-14-0.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Page({pages, currentPage}) {\n  return (\n    <html>\n      <head>\n        <title>{currentPage.name}</title>\n      </head>\n      <body>\n        <nav>\n          {pages.map(page => (\n            <a href={page.url}>{page.name}</a>\n          ))}\n        </nav>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Adding a Web Audio Worklet in JavaScript\nDESCRIPTION: This snippet shows how to import a web audio worklet using the 'worklet:' scheme and add it to an audio context using the audioWorklet.addModule method.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/javascript.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport workletUrl from 'worklet:./worklet.js';\n\ncontext.audioWorklet.addModule(workletUrl);\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX in TypeScript Configuration\nDESCRIPTION: This TSConfig snippet demonstrates how to configure JSX compilation options, including specifying the JSX runtime and import source.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/javascript.md#2025-04-09_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"preact\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Grid with CSS Modules in Parcel\nDESCRIPTION: Demonstrates the correct usage of CSS grid with CSS modules, including grid template areas and line names.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.grid {\n  grid-template-areas: \"nav main\";\n}\n\n.nav {\n  grid-column-start: nav-start;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Module Import Example in JavaScript\nDESCRIPTION: Demonstrates simple module imports and exports that work well with scope hoisting.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/scope-hoisting.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {add} from './math';\n\nconsole.log(add(2, 3));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport function add(a, b) {\n  return a + b;\n}\n\nexport function square(a) {\n  return a * a;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bare Specifiers for Node Modules in JavaScript\nDESCRIPTION: Shows how to import from the node_modules directory using bare specifiers. These specifiers don't start with './' or '/' and resolve to packages in node_modules directories searched upward from the importing file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'react';\n```\n\n----------------------------------------\n\nTITLE: Creating a Web Worker in CoffeeScript\nDESCRIPTION: Shows how to create a Web Worker in CoffeeScript using the URL constructor and __filename for URL dependencies.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/coffeescript.md#2025-04-09_snippet_2\n\nLANGUAGE: coffeescript\nCODE:\n```\nnew Worker new URL('worker.js', 'file:' + __filename),\n  type: 'module'\n```\n\n----------------------------------------\n\nTITLE: TypeScript Library Configuration\nDESCRIPTION: Package.json configuration for TypeScript libraries that includes type definitions output alongside CommonJS and ES module formats.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/getting-started/library.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-library\",\n  \"version\": \"1.0.0\",\n  \"source\": \"src/index.ts\",\n  \"main\": \"dist/main.js\",\n  \"module\": \"dist/module.js\",\n  \"types\": \"dist/types.d.ts\",\n  \"devDependencies\": {\n    \"parcel\": \"latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ES Module Workers in JavaScript\nDESCRIPTION: Demonstrates how to create a web worker that uses ES module syntax in Parcel 2. It requires using the URL constructor and specifying the type as 'module'.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/rc0/rc0.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew Worker(\n  new URL('worker.js', import.meta.url),\n  {type: 'module'}\n);\n```\n\n----------------------------------------\n\nTITLE: CSS Variables Configuration File\nDESCRIPTION: CSS configuration file that defines custom properties (variables) in the root scope for color and image URL references.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_31\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --varColor: red;\n  --varIcon: url(\"../icon.svg\");\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import Patterns\nDESCRIPTION: Examples of supported and unsupported dynamic import patterns for tree shaking.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/scope-hoisting.md#2025-04-09_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// ✅ Destructuring await\nlet {add} = await import('./math');\n\n// ✅ Static member access of await\nlet math = await import('./math');\nconsole.log(math.add(2, 3));\n\n// ✅ Destructuring Promise#then\nimport('./math').then(({add}) => console.log(add(2, 3)));\n\n// ✅ Static member access of Promise#then\nimport('./math').then(math => console.log(math.add(2, 3)));\n\n// 🚫 Dynamic property access of await\nlet math = await import('./math');\nconsole.log(math[op](2, 3));\n\n// 🚫 Dynamic property access of Promise#then\nimport('./math').then(math => console.log(math[op](2, 3)));\n\n// 🚫 Unknown use of returned Promise\ndoSomething(import('./math'));\n\n// 🚫 Unknown argument passed to Promise#then\nimport('./math').then(doSomething);\n```\n\n----------------------------------------\n\nTITLE: Complex GraphQL Query with Fragment Imports\nDESCRIPTION: Illustrates a complete example of a GraphQL query that imports fragments from separate files, demonstrating how to structure and organize larger GraphQL queries.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/graphql.md#2025-04-09_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n# import UserFragment from \"user.graphql\"\n# import \"address.graphql\"\n\nquery UserQuery($id: ID) {\n  user(id: $id) {\n    ...UserFragment\n    address {\n      ...AddressFragment\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  firstName\n  lastName\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nfragment AddressFragment on Address {\n  city\n  state\n  country\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parcel for Blob URL Inlining\nDESCRIPTION: JSON configuration for setting up a named pipeline in Parcel to handle blob-url scheme using transformer and optimizer plugins.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/bundle-inlining.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"transformers\": {\n    \"blob-url:*\": [\"...\", \"@parcel/transformer-inline\"]\n  },\n  \"optimizers\": {\n    \"blob-url:*\": [\"...\", \"@parcel/optimizer-blob-url\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling URL References in a Packager Plugin\nDESCRIPTION: This snippet demonstrates how to replace URL references in a Packager plugin using the replaceURLReferences function from @parcel/utils. It replaces dependency IDs with the actual URLs of generated bundles.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/packager.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Packager} from '@parcel/plugin';\nimport {replaceURLReferences} from '@parcel/utils';\n\nexport default new Packager({\n  async package({bundle, bundleGraph}) {\n    // ...\n\n    ({contents, map} = replaceURLReferences({\n      bundle,\n      bundleGraph,\n      contents,\n      map\n    }));\n\n    return {contents, map};\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Inlining CSS Bundle as Text in JavaScript\nDESCRIPTION: Demonstrates how to inline a compiled CSS bundle as plain text in JavaScript, which can be used to inject a style tag at runtime.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/bundle-inlining.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport cssText from 'bundle-text:./test.css';\n\n// inject <style> tag\nlet style = document.createElement('style');\nstyle.textContent = cssText;\nshadowRoot.appendChild(style);\n```\n\n----------------------------------------\n\nTITLE: Starting Parcel Dev Server\nDESCRIPTION: Demonstrates basic usage of Parcel's serve command to start a development server with hot reloading capability.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/cli.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nparcel src/index.html\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Modules Globally in Parcel\nDESCRIPTION: Configures Parcel to enable CSS modules for all source files by setting the cssModules option in package.json.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@parcel/transformer-css\": {\n    \"cssModules\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Functions and Calculating Elapsed Time in JavaScript Module\nDESCRIPTION: This module exports multiple functions and includes a side effect (calculating load time). The side effect can be optimized out if unused, thanks to the sideEffects configuration.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/scope-hoisting.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport {add} from './add.js';\nexport {multiply} from './multiply.js';\n\nlet loaded = Date.now();\nexport function elapsed() {\n  return Date.now() - loaded;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parcel for Production Build with Custom Browser Targets\nDESCRIPTION: Sets up Parcel for a production build with specific browser targets using the defaultTargetOptions.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/parcel-api.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Parcel} from '@parcel/core';\n\nlet bundler = new Parcel({\n  entries: 'a.js',\n  defaultConfig: '@parcel/config-default',\n  mode: 'production',\n  defaultTargetOptions: {\n    engines: {\n      browsers: ['last 1 Chrome version']\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Transformer Configuration\nDESCRIPTION: Configures TypeScript compilation using the TypeScript TSC transformer\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"transformers\": {\n    \"*.{ts,tsx}\": [\"@parcel/transformer-typescript-tsc\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Query Parameters with Images in CSS\nDESCRIPTION: Shows how to use query parameters in dependency specifiers to transform assets. This example demonstrates resizing an image to specific dimensions when importing it in CSS.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.logo {\n  background: url(logo.png?width=400&height=400);\n}\n```\n\n----------------------------------------\n\nTITLE: ArrayBuffer Pipeline Configuration\nDESCRIPTION: Configures a custom named pipeline for importing files as ArrayBuffers\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"transformers\": {\n    \"arraybuffer:*\": [\"...\", \"parcel-transformer-arraybuffer\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking CSS/Less Stylesheet in HTML with Parcel\nDESCRIPTION: Example of how to reference a Less stylesheet from an HTML file using the link element. Parcel will process the Less file and compile it to CSS.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/html.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"./style.less\" />\n  </head>\n  <body>\n    <h1>My Parcel app</h1>\n  </body>\n</html>\n```\n\nLANGUAGE: less\nCODE:\n```\nh1 {\n  color: darkslategray;\n}\n```\n\n----------------------------------------\n\nTITLE: Parcel Transformer Configuration\nDESCRIPTION: Configuration to disable Babel transpilation in Parcel while allowing other tools to use Babel config by modifying the transformer settings.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/javascript.md#2025-04-09_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"transformers\": {\n    \"*.{js,mjs,jsx,cjs,ts,tsx}\": [\n      \"@parcel/transformer-js\",\n      \"@parcel/transformer-react-refresh-wrap\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parcel Compression Configuration\nDESCRIPTION: JSON configuration for enabling Gzip and Brotli compression in .parcelrc file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/production.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compressors\": {\n    \"*.{html,css,js,svg,map}\": [\n      \"...\",\n      \"@parcel/compressor-gzip\",\n      \"@parcel/compressor-brotli\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Pipeline Configuration\nDESCRIPTION: Sets up a transformer pipeline for SVG files with fallback using the spread operator\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transformers\": {\n    \"icons/*.svg\": [\"@company/parcel-transformer-svg-icons\", \"...\"],\n    \"*.svg\": [\"@parcel/transformer-svg\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Modules with Dashed Identifiers in Parcel\nDESCRIPTION: Shows how to enable scoping for CSS variables and other dashed identifier names in CSS modules using package.json configuration.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@parcel/transformer-css\": {\n    \"cssModules\": {\n      \"dashedIdents\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Relative Path Config Extension\nDESCRIPTION: Shows how to extend a Parcel config using a relative file path\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../.parcelrc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inlining Image as Data URL in CSS\nDESCRIPTION: Shows how to inline a small image as a data URL within a CSS file using the data-url scheme.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/bundle-inlining.md#2025-04-09_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  background: url(data-url:./background.png);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Minification in Parcel\nDESCRIPTION: Shows how to configure HTML minification options using an .htmlnanorc file, specifically to retain HTML comments or disable SVG minification.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/html.md#2025-04-09_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"removeComments\": false\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"minifySvg\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Exports in package.json\nDESCRIPTION: This snippet demonstrates how to define conditional exports based on different environments or conditions using the \"exports\" field in package.json.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"foo\",\n  \"exports\": {\n    \"node\": \"./dist/node.js\",\n    \"default\": \"./dist/default.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Express Server for RSC\nDESCRIPTION: Server-side implementation using Express to handle RSC rendering and delivery.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport express from \"express\";\nimport cors from \"cors\";\nimport { renderRSC } from \"@parcel/rsc/node\";\nimport { Comments } from \"./Comments\";\n\nconst app = express();\napp.use(cors());\n\napp.get(\"/comments\", (req, res) => {\n  // Render the server component to an RSC payload.\n  let stream = renderRSC(<Comments />);\n  res.set(\"Content-Type\", \"text/x-component\");\n  stream.pipe(res);\n});\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Parcel Build\nDESCRIPTION: Demonstrates how to set environment variables for a Parcel build using the env option.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/parcel-api.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Parcel} from '@parcel/core';\n\nlet bundler = new Parcel({\n  entries: 'a.js',\n  defaultConfig: '@parcel/config-default',\n  mode: 'production',\n  env: {\n    NODE_ENV: 'production'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Single File Component Structure\nDESCRIPTION: A simple Vue Single File Component (SFC) with template and script sections. The component defines a data property 'name' that is displayed in the template through interpolation.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/vue.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>Hello {{ name }}!</div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        name: \"Vue\",\n      };\n    },\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Extending Multiple Parcel Configurations in JSON\nDESCRIPTION: This snippet shows how to extend multiple Parcel configurations in a .parcelrc file, including both the default config and a custom XML config.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/configuration.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"@parcel/config-default\", \"parcel-config-xml\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Parcel Build with Sourcemap Visualiser Reporter\nDESCRIPTION: This command demonstrates how to run a Parcel build with the sourcemap visualiser reporter enabled. It generates a sourcemap-info.json file that can be used for debugging.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/source-maps.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nparcel build src/index.js --reporter @parcel/reporter-sourcemap-visualiser\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Imports with Hash Specifiers\nDESCRIPTION: Shows how to use the 'imports' field in package.json to define private import mappings with hash specifiers. This allows for conditional imports depending on the environment (node vs browser).\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"#dep\": {\n      \"node\": \"dep-node\",\n      \"browser\": \"dep-browser\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Assets from Parcel Transformer\nDESCRIPTION: Illustrates how to return multiple assets from a single transformer, creating virtual assets with unique keys and establishing dependencies between them. Useful for handling inline scripts and styles in HTML.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/transformer.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Transformer} from '@parcel/plugin';\n\nexport default new Transformer({\n  async transform({asset}) {\n    let code = await asset.getCode();\n\n    // Extract inline assets to return in addition to this asset.\n    let assets = [asset];\n\n    let uniqueKey = `${asset.id}-style`;\n    assets.push({\n      type: 'css',\n      content: '...',\n      uniqueKey,\n      bundleBehavior: 'inline'\n    });\n\n    // Add a dependency, using the uniqueKey as a specifier.\n    asset.addDependency({\n      specifier: uniqueKey,\n      specifierType: 'esm'\n    });\n\n    return assets;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Plugin Parcel Package in JSON\nDESCRIPTION: This snippet shows the package.json file for a multi-plugin Parcel package. It specifies the package name, main file, version, and compatible Parcel versions.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/configuration.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"parcel-config-xml\",\n  \"main\": \"index.json\",\n  \"version\": \"1.0.0\",\n  \"engines\": {\n    \"parcel\": \"2.x\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Custom Properties in Parcel\nDESCRIPTION: Shows how to use CSS custom properties with var() function in a separate file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.logo {\n  background: var(--logo);\n}\n```\n\n----------------------------------------\n\nTITLE: URL and Path Resolution Handler\nDESCRIPTION: Implements resolution logic for handling both URL and file path specifiers based on the dependency's specifierType.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/resolver.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Resolver} from '@parcel/plugin';\nimport path from 'path';\nimport {fileURLToPath, pathToFileURL} from 'url';\n\nexport default new Resolver({\n  async resolve({specifier, dependency}) {\n    return {\n      filePath: dependency.specifierType === 'url'\n        ? fileURLToPath(\n          new URL(specifier, pathToFileURL(dependency.resolveFrom))\n        )\n        : path.resolve(dependency.resolveFrom, specifier)\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for React Server Components\nDESCRIPTION: Package.json configuration for a React Server Components app. Defines the server entry point and targets with a 'react-server' context for Parcel.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"server\": \"dist/server.js\",\n  \"targets\": {\n    \"server\": {\n      \"source\": \"src/server.js\",\n      \"context\": \"react-server\"\n    }\n  },\n  \"scripts\": {\n    \"start\": \"parcel\",\n    \"build\": \"parcel build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Source Maps in a Transformer Plugin\nDESCRIPTION: Example of how to manipulate source maps in a Parcel transformer plugin. This demonstrates how to generate a source map from a compilation result and how to ensure accurate mapping to the original source.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/source-maps.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Transformer} from '@parcel/plugin';\nimport SourceMap from '@parcel/source-map';\n\nexport default new Transformer({\n  // ...\n\n  async generate({asset, ast, resolve, options}) {\n    let compilationResult = someCompiler(await asset.getAST());\n\n    let map = null;\n    if (compilationResult.map) {\n      // If the compilationResult returned a map we convert \n      // it to a Parcel SourceMap instance.\n      map = new SourceMap(options.projectRoot);\n\n      // The compiler returned a full, encoded sourcemap with vlq mappings.\n      // Some compilers might have the possibility of returning \n      // indexedMappings which might improve performance (like Babel does).\n      // In general, every  compiler is able to return rawMappings, so\n      // it's always a safe bet to use this.\n      map.addVLQMap(compilationResult.map);\n\n      // We get the original source map from the asset to extend our mappings \n      // on top of it. This ensures we are mapping to the original source\n      // instead of the previous transformation.\n      let originalMap = await asset.getMap();\n      if (originalMap) {\n        // The `extends` function uses the provided map to remap the original \n        // source positions of the map it is called on. In this case, the \n        // original source positions of `map` get remapped to the positions \n        // in `originalMap`.\n        map.extends(originalMap);\n      }\n    }\n\n    return {\n      code: compilationResult.code,\n      map,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: AST Reuse in Parcel Transformer\nDESCRIPTION: Shows implementation of AST reuse functionality including parsing, transformation, and generation phases.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/transformer.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Transformer} from '@parcel/plugin';\nimport semver from 'semver';\n\nexport default new Transformer({\n  async canReuseAST({ast}) {\n    return ast.type === 'my-compiler' \n      && semver.satisfies(ast.version, '^1.0.0');\n  },\n  async parse({asset}) {\n    return {\n      type: 'my-compiler',\n      version: '1.0.0',\n      program: parse(await asset.getCode())\n    };\n  },\n  async transform({asset}) {\n    let ast = await asset.getAST();\n\n    let compiledAST = compile(ast.program);\n    asset.setAST({\n      type: 'my-compiler',\n      version: '1.0.0',\n      program: compiledAST\n    });\n\n    return [asset];\n  },\n  async generate({ast}) {\n    let {content, map} = generate(ast.program);\n    return {\n      content,\n      map\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Stylus as CSS Module in JavaScript\nDESCRIPTION: Shows how to import a Stylus file as a CSS module in JavaScript or TypeScript. This allows for scoped CSS classes that can be referenced in JavaScript code.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/stylus.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as classes from './style.module.styl';\n\ndocument.body.className = classes.body;\n```\n\n----------------------------------------\n\nTITLE: Module Exclusion in Parcel Resolver\nDESCRIPTION: Shows how to exclude specific modules from the build process using the isExcluded property.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/resolver.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Resolver} from '@parcel/plugin';\n\nexport default new Resolver({\n  async resolve({specifier}) {\n    if (specifier === 'aws-sdk') {\n      return {isExcluded: true};\n    }\n\n    return null;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Complete GLSL Integration Example\nDESCRIPTION: Shows a full example of GLSL integration including JavaScript importing, shader file with dependencies, and library implementation.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/glsl.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport frag from './shader.frag';\n\n// ...\ngl.shaderSource(..., frag);\n// ...\n```\n\nLANGUAGE: glsl\nCODE:\n```\n// import a function from another file\n#pragma glslify: calc_frag_color = require('./lib.glsl')\n\nprecision mediump float;\nvarying vec3 vpos;\n\nvoid main() {\n  gl_FragColor = calc_frag_color(vpos);\n}\n```\n\nLANGUAGE: glsl\nCODE:\n```\n// import a function from node_modules\n#pragma glslify: noise = require('glsl-noise/simplex/3d')\n\nvec4 calc_frag_color(vec3 pos) {\n  return vec4(vec3(noise(pos * 25.0)), 1.0);\n}\n\n// export a function\n#pragma glslify: export(calc_frag_color)\n\n```\n\n----------------------------------------\n\nTITLE: Using Source Maps in Optimizer Plugins\nDESCRIPTION: Demonstrates how to work with source maps in Parcel optimizer plugins, where the map is provided as a separate parameter rather than as part of an asset.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/source-maps.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Optimizer} from '@parcel/plugin';\n\nexport default new Optimizer({\n  // The contents and map are passed separately\n  async optimize({bundle, contents, map}) {\n    return {contents, map};\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Compressor Plugins in .parcelrc\nDESCRIPTION: This example demonstrates how to configure compressor plugins in .parcelrc. Compressor plugins compress or encode bundles when writing to disk. Multiple compressors can be chained.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"compressors\": {\n    \"*.{js,html,css}\": [\n      \"...\",\n      \"@parcel/compressor-gzip\",\n      \"@parcel/compressor-brotli\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Existing Source Maps in a Transformer Plugin\nDESCRIPTION: Shows how to pass an existing source map to a compiler within a Parcel transformer plugin, which can result in more accurate source maps than manually extending them.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/source-maps.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Transformer} from '@parcel/plugin';\nimport SourceMap from '@parcel/source-map';\n\nexport default new Transformer({\n  // ...\n\n  async generate({asset, ast, resolve, options}) {\n    // Get the original map from the asset.\n    let originalMap = await asset.getMap();\n    let compilationResult = someCompiler(await asset.getAST(), {\n      // Pass the VLQ encoded version of the originalMap to the compiler.\n      originalMap: originalMap.toVLQ(),\n    });\n\n    // In this case the compiler is responsible for mapping to the original \n    // positions provided in the originalMap, so we can just convert it to \n    // a Parcel SourceMap and return it.\n    let map = new SourceMap(options.projectRoot);\n    if (compilationResult.map) {\n      map.addVLQMap(compilationResult.map);\n    }\n\n    return {\n      code: compilationResult.code,\n      map,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding CSS with HTML Link Tag in Parcel\nDESCRIPTION: Demonstrates how to reference a CSS file using a link tag in an HTML file when working with Parcel.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"index.css\" />\n```\n\n----------------------------------------\n\nTITLE: Transformer Plugin with Warning Logger\nDESCRIPTION: Complete example of a Transformer plugin that logs a warning with code frame, hints, and documentation URL.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/logging.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Transformer} from '@parcel/plugin';\n\nexport default new Transformer({\n  async transform({asset, logger}) {\n    // ...\n\n    logger.warn({\n      message: 'This feature is deprecated.',\n      codeFrames: [{\n        filePath: asset.filePath,\n        code: await asset.getCode(),\n        codeHighlights: [{\n          start: {\n            line: 1,\n            column: 5\n          },\n          end: {\n            line: 1,\n            column: 10\n          }\n        }]\n      }],\n      hints: ['Please use this other feature instead.'],\n      documentationURL: 'http://example.com/'\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Tilde Specifiers in JavaScript\nDESCRIPTION: Demonstrates tilde specifiers which start with '~' and resolve relative to the nearest package root. This is useful in monorepos or complex project structures with multiple packages.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport '~/src/utils.js';\n```\n\n----------------------------------------\n\nTITLE: Markdown Formatting with Utility Functions\nDESCRIPTION: Shows how to use markdown formatting utility functions like md.underline for styling parts of diagnostic messages.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/logging.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {md} from '@parcel/diagnostic';\n\nthrow new ThrowableDiagnostic({\n  diagnostic: {\n    message: md`**Error**: Could not parse ${md.underline(filePath)}`\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stateful Validator Plugin in JavaScript for Parcel\nDESCRIPTION: This example shows how to implement a stateful validator plugin that maintains project-wide state. The validateAll method receives all changed assets at once, allowing for cross-file validation. Stateful validators always run on the same thread to preserve state, making them suitable for type-checking or other project-wide validations.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/validator.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Validator } from \"@parcel/plugin\";\n\n// You keep the state in a top-level variable\nlet state = {};\n\nexport default new Validator({\n  async validateAll({ assets, logger }) {\n    // ...\n    for (let asset of assets) {\n      // ...validation logic\n\n      if (hasWarning) {\n        logger.warn({\n          message: \"A validation warning\",\n          filePath: asset.filePath,\n          language: asset.type,\n        });\n      }\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Optimizer Plugins in .parcelrc\nDESCRIPTION: This snippet shows how to configure optimizer plugins in .parcelrc. Optimizer plugins process entire bundles and can be chained using pipelines.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"optimizers\": {\n    \"*.js\": [\"@parcel/optimizer-esbuild\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS from JavaScript in Parcel\nDESCRIPTION: Shows how to import a CSS file directly from a JavaScript file in Parcel, which will be processed during bundling.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport './index.css';\n```\n\n----------------------------------------\n\nTITLE: Creating a Parcel Bundler Plugin in JavaScript\nDESCRIPTION: Demonstrates the basic structure of a Parcel bundler plugin. The plugin exposes bundle and optimize methods that handle the asset graph transformation. This experimental API allows for customizing how assets are grouped into output bundles.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/bundler.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Bundler } from \"@parcel/plugin\";\n\nexport default new Bundler({\n  async bundle({ graph }) {\n    // ...\n  },\n\n  async optimize({ graph }) {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic ThrowableDiagnostic in JavaScript\nDESCRIPTION: Shows how to create and throw a basic diagnostic error using the ThrowableDiagnostic class from @parcel/diagnostic package.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/logging.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ThrowableDiagnostic from '@parcel/diagnostic';\n\nthrow new ThrowableDiagnostic({\n  diagnostic: {\n    message: 'An error occurred'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Macro in TypeScript\nDESCRIPTION: Demonstrates how to import a macro using an import attribute and use it to generate an optimized regular expression at build time.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/macros.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport regexgen from 'regexgen' with {type: 'macro'};\n\nconst regex = regexgen(['foobar', 'foobaz', 'foozap', 'fooza']);\nconsole.log(regex);\n```\n\n----------------------------------------\n\nTITLE: Formatting Markdown Messages with Template Literals\nDESCRIPTION: Demonstrates using the md tagged template literal for formatting diagnostic messages with escaped expressions.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/logging.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {md} from '@parcel/diagnostic';\n\nthrow new ThrowableDiagnostic({\n  diagnostic: {\n    message: md`**Error**: Could not parse ${filePath}`\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Packager Plugins in .parcelrc\nDESCRIPTION: This example demonstrates how to configure packager plugins using a glob map in .parcelrc. Packager plugins combine assets in a bundle into an output file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"packagers\": {\n    \"*.{jpg,png}\": \"@company/parcel-packager-image-sprite\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS @import Rule in Parcel\nDESCRIPTION: Demonstrates how to import another CSS file using the @import rule, which will be inlined into the same CSS bundle.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import 'other.css';\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Parcel Plugin Structure\nDESCRIPTION: Shows the common structure shared by all Parcel plugin types, demonstrating how to create a plugin that accepts validated input options and returns validated results.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/authoring-plugins.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NameOfPluginType } from \"@parcel/plugin\";\n\nexport default new NameOfPluginType({\n  async methodName(opts: JSONObject): Promise<JSONObject> {\n    return result;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Parallel Loading of Scripts and Styles in Parcel\nDESCRIPTION: Illustrates how Parcel handles parallel loading of scripts and styles, inserting necessary link and script tags in the compiled HTML.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/html.md#2025-04-09_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"module\" src=\"app.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport './app.css';\n\nlet app = document.createElement('div');\napp.className = 'app';\napp.textContent = 'My Parcel app!';\nroot.appendChild(app);\n```\n\nLANGUAGE: css\nCODE:\n```\n.app {\n  background: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Build Progress Event Handler\nDESCRIPTION: Implementation showing how to handle different phases of the build progress including transforming, resolving, bundling, packaging, and optimizing.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/reporter.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Reporter} from '@parcel/plugin';\n\nexport default new Reporter({\n  report({event}) {\n    if (event.type === 'buildProgress') {\n      switch (event.phase) {\n        case 'transforming':\n          process.stdout.write(`Transforming ${event.filePath}...\\n`);\n          break;\n        case 'resolving':\n          process.stdout.write(`Resolving ${event.dependency.specifier}...\\n`);\n          break;\n        case 'bundling':\n          process.stdout.write('Bundling...\\n');\n          break;\n        case 'packaging':\n          process.stdout.write(`Packaging ${event.bundle.displayName}...\\n`);\n          break;\n        case 'optimizing':\n          process.stdout.write(`Optimizing ${event.bundle.displayName}...\\n`);\n         break;\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Compiled HTML Output with Parallel Loading in Parcel\nDESCRIPTION: Shows the compiled HTML output after Parcel processes the input files, demonstrating parallel loading of CSS and JavaScript.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/html.md#2025-04-09_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <link rel=\"stylesheet\" src=\"app.f8e9c6.css\">\n    <script type=\"module\" src=\"app.26fce9.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Basic Vue.js Application Structure in HTML\nDESCRIPTION: HTML entry point for a Vue.js application that mounts a root component into the DOM. The HTML file includes a div with an ID of 'app' and a script that imports the JavaScript entry point.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/vue.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<div id=\"app\"></div>\n<script type=\"module\" src=\"./index.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Plugins in .parcelrc\nDESCRIPTION: This example demonstrates how to configure runtime plugins in .parcelrc. Runtime plugins inject assets into bundles. The '...' syntax extends the default runtimes.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"runtimes\": [\"@company/parcel-runtime\", \"...\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS from npm Package in Parcel\nDESCRIPTION: Shows how to import a CSS file from an npm package using the npm: scheme in the @import rule.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import 'npm:bootstrap/bootstrap.css';\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies in Parcel Transformer\nDESCRIPTION: Shows how to add dependencies to an asset during transformation using the addDependency method.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/transformer.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Transformer} from '@parcel/plugin';\n\nexport default new Transformer({\n  async transform({asset}) {\n    let code = await asset.getCode();\n    let deps = code.matchAll(/import \"(.*?)\"/g);\n    \n    for (let dep of deps) {\n      asset.addDependency({\n        specifier: dep,\n        specifierType: 'esm'\n      });\n    }\n\n    return [asset];\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Inline SVG Support in HTML with Parcel\nDESCRIPTION: Shows how Parcel supports inline SVG in HTML, including processing of <image> and <use> elements within the SVG.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/html.md#2025-04-09_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <body>\n    <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n      <rect x=\"10\" y=\"10\" width=\"50\" height=\"50\" fill=\"red\" />\n      <use xlink:href=\"icon.svg\"/>\n    </svg>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS Classes in React Component\nDESCRIPTION: Example of a React component using Tailwind CSS utility classes for styling.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/react.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport function Button({ children }) {\n  return (\n    <button className=\"p-2 rounded bg-blue-500 hover:bg-blue-600 transition\">\n      {children}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Inline Scripts and Styles with Imported Dependencies in HTML\nDESCRIPTION: Example showing how Parcel processes inline script and style tags, including imports from external files. The SCSS import and TypeScript module import will be bundled appropriately.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/html.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <body>\n    <style>\n      @import \"./style.scss\";\n    </style>\n    <script type=\"module\">\n      import value from \"./other.ts\";\n      console.log(value);\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Bundler Plugin in .parcelrc\nDESCRIPTION: This snippet shows how to specify a custom bundler plugin in the .parcelrc file. The bundler is responsible for grouping assets into bundles.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"bundler\": \"@company/parcel-bundler\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Glob Imports for CSS in Parcel\nDESCRIPTION: Demonstrates how to import multiple CSS files at once using glob patterns with the @parcel/resolver-glob plugin.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@import \"./components/*.css\";\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration with Custom Properties Support\nDESCRIPTION: PostCSS configuration using postcss-import, postcss-url, and postcss-custom-properties plugins to enable bundle-wide CSS variable processing.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"postcss-import\": true,\n    \"postcss-url\": true,\n    \"postcss-custom-properties\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Modules Globally with Additional Options\nDESCRIPTION: Configures Parcel to enable CSS modules globally while allowing for additional options using the 'global' property.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@parcel/transformer-css\": {\n    \"cssModules\": {\n      \"global\": true,\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Props to Code Blocks in MDX\nDESCRIPTION: Demonstrates how to add custom props to code blocks in MDX that get passed to the CodeBlock component when rendered.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/mdx.md#2025-04-09_snippet_5\n\nLANGUAGE: md\nCODE:\n```\n```tsx boolean string=\"hi\" number={2}\nconsole.log(\"hi\");\n```\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Configuration\nDESCRIPTION: Basic Tailwind configuration file that specifies content paths for scanning, and provides extension points for theming, variants, and plugins.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  content: [\"./src/*.{html,js}\"],\n  theme: {\n    extend: {},\n  },\n  variants: {},\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: SVG React Transformer Configuration\nDESCRIPTION: Extends default transformers to add SVG to React component conversion\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"transformers\": {\n    \"*.svg\": [\"...\", \"@parcel/transformer-svg-react\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Image Reference in HTML with Parcel\nDESCRIPTION: Basic example of referencing an image file in HTML using the img element. Parcel will process the image and include it in the build.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/html.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"image.jpg\" alt=\"An image\">\n```\n\n----------------------------------------\n\nTITLE: Vue Component Accessing Custom Block Data\nDESCRIPTION: Vue component that imports and accesses custom documentation blocks from a child component. It demonstrates how to read and display the processed documentation data in the template.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/vue.md#2025-04-09_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <child></child>\n    docs: {{ docs.standard }} in brief: {{\n    docs.brief }}\n  </div>\n</template>\n\n<script>\n  import Child from \"./HomePage.vue\";\n  export default {\n    components: {\n      child: Child,\n    },\n    data() {\n      let docs = { standard: Child.__docs, brief: Child.__briefDocs };\n      return { docs };\n    },\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables in a Module File for Parcel\nDESCRIPTION: Shows how to define CSS variables in a CSS module file that can be referenced from other files.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --accent-color: hotpink;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Runtime Plugin for Parcel Bundler in JavaScript\nDESCRIPTION: Basic structure for creating a Runtime plugin that can insert assets into bundles. The plugin imports the Runtime class from Parcel and implements the apply method to return assets to be inserted into a bundle. The method receives bundle and bundleGraph parameters to work with.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/runtime.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Runtime } from \"@parcel/plugin\";\n\nexport default new Runtime({\n  async apply({ bundle, bundleGraph }) {\n    // ...\n    return assets;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Data Structure\nDESCRIPTION: This is an example JSON file that contains a simple data structure with an array property. The JSON file is imported in the JavaScript example above.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/json.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hello\": [\n    \"world\",\n    \"computer\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Data URL CSS Example\nDESCRIPTION: Shows how to use named pipelines to inline an image as a data URL in CSS\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.logo {\n  background: url(data-url:./logo.png);\n}\n```\n\n----------------------------------------\n\nTITLE: Using srcset Attribute for Responsive Images in Parcel\nDESCRIPTION: Example of using the srcset attribute to provide multiple image resolutions. Parcel will process all referenced image files.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/html.md#2025-04-09_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"logo@1x.png\" srcset=\"logo@2x.png 2x\" alt=\"logo\">\n```\n\n----------------------------------------\n\nTITLE: Generating Functions with Macros in TypeScript\nDESCRIPTION: Shows how to use macros to generate functions at build time, using micromatch to compile a glob matching function.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/macros.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {compileGlob} from './glob.ts' with {type: 'macro'};\n\nconst isMatch = compileGlob('foo/**/bar.js');\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport micromatch from 'micromatch';\n\nexport function compileGlob(glob) {\n  let regex = micromatch.makeRe(glob);\n  return new Function('string', `return ${regex}.test(string)`);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Scripts for TypeScript Project\nDESCRIPTION: Example package.json scripts configuration for a TypeScript project, including build, test, lint, type check, and CI commands.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/typescript.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"parcel build src/index.ts\",\n    \"test\": \"jest\",\n    \"lint\": \"eslint\",\n    \"check\": \"tsc --noEmit\",\n    \"ci\": \"yarn build && yarn test && yarn lint && yarn check\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple CSS Files Using Glob Specifiers\nDESCRIPTION: This example shows how to use glob specifiers to import multiple CSS files in a stylesheet.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n@import \"./components/*.css\";\n```\n\n----------------------------------------\n\nTITLE: Basic CoffeeScript Example\nDESCRIPTION: A simple CoffeeScript example that logs 'Hello world!' to the console.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/coffeescript.md#2025-04-09_snippet_1\n\nLANGUAGE: coffeescript\nCODE:\n```\nconsole.log 'Hello world!'\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options in Parcel\nDESCRIPTION: Example of a tsconfig.json file to configure TypeScript compiler options for use with Parcel. It enables experimental decorators and sets the JSX import source to Preact.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/typescript.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true,\n    \"jsxImportSource\": \"preact\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using In-Memory File System with Parcel\nDESCRIPTION: Demonstrates how to use Parcel's MemoryFS for in-memory file operations during the build process.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/parcel-api.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Parcel, createWorkerFarm} from '@parcel/core';\nimport {MemoryFS} from '@parcel/fs';\n\nlet workerFarm = createWorkerFarm();\nlet outputFS = new MemoryFS(workerFarm);\n\nlet bundler = new Parcel({\n  entries: 'a.js',\n  defaultConfig: '@parcel/config-default',\n  workerFarm,\n  outputFS\n});\n\ntry {\n  let {bundleGraph} = await bundler.run();\n\n  for (let bundle of bundleGraph.getBundles()) {\n    console.log(bundle.filePath);\n    console.log(await outputFS.readFile(bundle.filePath, 'utf8'));\n  }\n} finally {\n  await workerFarm.end();\n}\n```\n\n----------------------------------------\n\nTITLE: Web Manifest Reference in HTML with Parcel\nDESCRIPTION: Example of referencing a web manifest file using the link element. Parcel will process the manifest file and any referenced assets like icons and screenshots.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/html.md#2025-04-09_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"manifest\" href=\"manifest.json\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Shared Bundles in package.json for Parcel\nDESCRIPTION: This snippet demonstrates how to configure manual shared bundles in the package.json file for Parcel. It creates a vendor bundle that includes all JavaScript assets starting from 'manual.js', split into 3 parallel HTTP requests.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/code-splitting.md#2025-04-09_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@parcel/bundler-default\": {\n   \"manualSharedBundles\": [\n      {\n        \"name\": \"vendor\",\n        \"root\": \"manual.js\",\n        \"assets\": [\"**/*\"],\n        \"types\": [\"js\"],\n        \"split\": 3\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Pug Template Structure Example\nDESCRIPTION: Demonstrates basic Pug template syntax including HTML structure, stylesheets, and script includes.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/pug.md#2025-04-09_snippet_0\n\nLANGUAGE: pug\nCODE:\n```\ndoctype html\nhtml(lang=\"en\")\n  head\n    link(rel=\"stylesheet\", href=\"style.css\")\n  body\n    h1 Hello Pug!\n    p.\n      Pug is a terse and simple templating language with a\n      strong focus on performance and powerful features.\n    script(type=\"module\", src=\"index.js\")\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json for Jest Testing\nDESCRIPTION: This snippet shows how to update the test script in package.json to use Jest directly instead of react-scripts.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/cra.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue SFC with Multiple Language Support\nDESCRIPTION: Vue component demonstrating multi-language support for styles (SCSS, Less), templates (Pug), and scripts (CoffeeScript). Shows scoped styles, CSS imports, and different preprocessor usage.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/vue.md#2025-04-09_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<style lang=\"scss\" scoped>\n  /* This style will only apply to this module */\n  $red: red;\n  h1 {\n    background: $red;\n  }\n</style>\n\n<style lang=\"less\">\n  @green: green;\n  h1 {\n    color: @green;\n  }\n</style>\n\n<style src=\"./App.module.css\">\n  /* The content of blocks with a `src` attribute is ignored and replaced with\n   the content of `src`. */\n</style>\n\n<template lang=\"pug\"> div h1 This is the app </template>\n\n<script lang=\"coffee\">\n  module.exports =\n    data: ->\n      msg: 'Hello from coffee!'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding CLI Reporter to Parcel API Build\nDESCRIPTION: Shows how to add the CLI reporter to a Parcel API build for output formatting and status reporting.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/parcel-api.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Parcel} from '@parcel/core';\nimport {fileURLToPath} from 'url';\n\nlet bundler = new Parcel({\n  entries: 'a.js',\n  defaultConfig: '@parcel/config-default',\n  additionalReporters: [\n    {\n      packageName: '@parcel/reporter-cli',\n      resolveFrom: fileURLToPath(import.meta.url)\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring PostHTML in Parcel with JSON\nDESCRIPTION: Demonstrates how to configure PostHTML plugins using a .posthtmlrc JSON file, specifically setting up the posthtml-doctype plugin.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/html.md#2025-04-09_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"posthtml-doctype\": { \"doctype\": \"HTML 5\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Parcel Engine Compatibility in package.json\nDESCRIPTION: This snippet demonstrates how to specify the compatible Parcel version range in the package.json file of a Parcel plugin. It uses the 'engines' field to define the supported Parcel version.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/authoring-plugins.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"parcel-transformer-imagemin\",\n  \"engines\": {\n    \"parcel\": \"2.x\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component with Custom Documentation Blocks\nDESCRIPTION: Vue component using custom 'docs' blocks to provide documentation for the component. It includes both standard and brief documentation content that can be processed by the custom preprocessor.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/vue.md#2025-04-09_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>Home Page</div>\n</template>\n\n<docs> This component represents the home page of the application. </docs>\n\n<docs brief> Home Page </docs>\n```\n\n----------------------------------------\n\nTITLE: Configuring API Proxy with JSON Configuration\nDESCRIPTION: A JSON configuration for Parcel's API proxy feature that redirects requests from /api to a local server. The configuration uses http-proxy-middleware options to rewrite paths and set the target server.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/development.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/api\": {\n    \"target\": \"http://localhost:8000/\",\n    \"pathRewrite\": {\n      \"^/api\": \"\"\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example Atom Feed Structure\nDESCRIPTION: Complete example of an Atom feed XML structure with URL references that will be processed by Parcel, including entry content with embedded XHTML and image references.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/xml.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n  <title>Example Feed</title>\n  <subtitle>A subtitle.</subtitle>\n  <link href=\"/\" />\n  <id>urn:uuid:60a76c80-d399-11d9-b91C-0003939e0af6</id>\n  <updated>2021-12-13T18:30:02Z</updated>\n  <entry>\n    <title>Awesome post</title>\n    <link href=\"post.html\" />\n    <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>\n    <updated>2021-12-13T18:30:02Z</updated>\n    <summary>Some text.</summary>\n    <content type=\"xhtml\">\n      <div xmlns=\"http://www.w3.org/1999/xhtml\">\n        <p>This is the entry content.</p>\n        <img src=\"image.png\" />\n      </div>\n    </content>\n    <author>\n      <name>John Doe</name>\n      <email>johndoe@example.com</email>\n    </author>\n  </entry>\n</feed>\n```\n\n----------------------------------------\n\nTITLE: Referencing Global CSS Variables in CSS Modules with Parcel\nDESCRIPTION: Demonstrates how to reference global CSS variables from CSS module files using the 'from global' syntax.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n@import \"vars.css\";\n\n.button {\n  color: var(--color from global);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Build Targets with Different Browser Support\nDESCRIPTION: Sets up Parcel with multiple build targets, each with different browser support configurations.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/parcel-api.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Parcel} from '@parcel/core';\n\nlet bundler = new Parcel({\n  entries: 'a.js',\n  defaultConfig: '@parcel/config-default',\n  mode: 'production',\n  targets: {\n    modern: {\n      engines: {\n        browsers: ['last 1 Chrome version']\n      }\n    },\n    legacy: {\n      engines: {\n        browsers: ['IE 11']\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring PostHTML with JavaScript in Parcel\nDESCRIPTION: Demonstrates how to configure PostHTML using a JavaScript file (posthtml.config.js) for more complex scenarios, such as using the posthtml-shorten plugin with a custom shortening function.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/html.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    \"posthtml-shorten\": {\n      shortener: {\n        process: function (url) {\n          return new Promise((resolve, reject) => {\n            resolve(url.replace(\".html\", \"\"));\n          });\n        },\n      },\n      tag: [\"a\"], // Allowed tags for URL shortening\n      attribute: [\"href\"], // Attributes to replace on the elements\n    },\n  },\n};\n```\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Home</title>\n  </head>\n  <body>\n    <a href=\"http://example.com/test.html\">Example</a>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Basic Parcel Config Extension\nDESCRIPTION: Shows how to extend the default Parcel configuration in .parcelrc\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SVG as React Component\nDESCRIPTION: Example of importing an SVG file as a React component using the jsx: scheme\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/svg.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport Icon from \"jsx:./icon.svg\";\n\nexport const App = () => <Icon />;\n```\n\n----------------------------------------\n\nTITLE: Compiled HTML with Shared Bundle for Home Page\nDESCRIPTION: Demonstrates the compiled output HTML for the home page after Parcel processes it, showing how shared dependencies are split into separate script tags.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/code-splitting.md#2025-04-09_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<div id=\"app\"></div>\n<script type=\"module\" src=\"react-dom.23f6d9.js\"></script>\n<script type=\"module\" src=\"home.fac9ed.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Rendered Code Block Component Output\nDESCRIPTION: Shows how the rendered code block gets transformed into a CodeBlock component with the rendered output as a prop.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/mdx.md#2025-04-09_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<CodeBlock lang=\"tsx\" render={<div>Hello world!</div>}>\n  &lt;div&gt;Hello world!&lt;/div&gt;\n</CodeBlock>\n```\n\n----------------------------------------\n\nTITLE: Specifying Parcel Targets\nDESCRIPTION: Demonstrates how to specify which targets to build using the targets option.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/parcel-api.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Parcel} from '@parcel/core';\n\nlet bundler = new Parcel({\n  entries: 'a.js',\n  defaultConfig: '@parcel/config-default',\n  targets: ['modern']\n});\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Modules in JavaScript with Parcel\nDESCRIPTION: Demonstrates how to import a CSS module file with a namespace import and access class names as exports.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as classes from './styles.module.css';\n\ndocument.body.className = classes.body;\n```\n\n----------------------------------------\n\nTITLE: Basic GLSL Shader Import in JavaScript\nDESCRIPTION: Demonstrates how to import a GLSL fragment shader file into JavaScript and use it with WebGL context.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/glsl.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport frag from './shader.frag'\n\n// ...\ngl.shaderSource(..., frag);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Custom Code Block Rendering in MDX\nDESCRIPTION: Example of implementing custom code block rendering with syntax highlighting in MDX by providing a custom CodeBlock component.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/mdx.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport Hello from './hello.mdx';\n\nconst components = {CodeBlock};\n\nexport function App() {\n  return <Hello components={components} />;\n}\n\nfunction CodeBlock({lang, children}) {\n  return (\n    <pre>\n      <code className={lang ? `language-${lang}` : null}>\n        {syntaxHighlight(children)}\n      </code>\n    </pre>\n  );\n}\n\nfunction syntaxHighlight() {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Custom Properties Path Resolution in Parcel\nDESCRIPTION: Shows the correct way to reference files in CSS custom properties using absolute paths instead of relative paths.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_7\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  /* ❌ relative paths are not allowed in custom properties. */\n  --logo: url(images/logo.png);\n  /* ✅ use absolute paths instead. */\n  --logo: url(/src/images/logo.png);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Exports in package.json\nDESCRIPTION: This snippet shows how to define multiple exports for a package, including the main entry point and subpaths, using the \"exports\" field in package.json.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"foo\",\n  \"exports\": {\n    \".\": \"./dist/index.js\",\n    \"./bar\": \"./dist/bar.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parcel for Web Extensions\nDESCRIPTION: Example of a .parcelrc file that extends the @parcel/config-webextension configuration for easier CLI usage.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/web-extension.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-webextension\"\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Tilde Path Configuration\nDESCRIPTION: Configuration for supporting tilde paths in TypeScript\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"~*\": [\".*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Classes in CSS Modules with Parcel\nDESCRIPTION: Shows how to define CSS classes in a CSS module file, which will be renamed to avoid selector clashes.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.body {\n  background: skyblue;\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Macros in JavaScript\nDESCRIPTION: Illustrates how to pass arguments to macros, including supported static evaluations and constant references.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/macros.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {myMacro} from './macro.ts' with {type: 'macro'};\n\nconst result = myMacro({\n  name: 'Devon'\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {myMacro} from './macro.ts' with {type: 'macro'};\n\nconst result = myMacro({\n  name: getName() // Error: Cannot statically evaluate macro argument\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {myMacro} from './macro.ts' with {type: 'macro'};\n\nconst name = 'Devon';\nconst result = myMacro({name});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {myMacro} from './macro.ts' with {type: 'macro'};\nimport {getName} from './name.ts' with {type: 'macro'};\n\nconst name = getName();\nconst result = myMacro({name});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {myMacro} from './macro.ts' with {type: 'macro'};\n\nconst arg = {name: 'Devon'};\narg.name = 'Peter'; // Error: Cannot statically evaluate macro argument\n\nconst result = myMacro({name});\n```\n\n----------------------------------------\n\nTITLE: Nested Conditional Exports in package.json\nDESCRIPTION: This example shows how to define nested conditional exports for different environments and module systems using the \"exports\" field in package.json.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"foo\",\n  \"exports\": {\n    \"node\": {\n      \"import\": \"./dist/node.mjs\",\n      \"require\": \"./dist/node.cjs\"\n    },\n    \"default\": \"./dist/default.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling multiple Elm files into a single JS output\nDESCRIPTION: This JavaScript code demonstrates how to use the 'with' query parameter to compile multiple Elm sources into the same bundle. This approach can help reduce bundle size by sharing common code and runtime.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/elm.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Elm } from \"./Main.elm?with=./MainB.elm&with=./MainC.elm\";\n\nElm.Main.init({ node: document.getElementById(\"root\") });\nElm.MainB.init({ node: document.getElementById(\"rootB\") });\nElm.MainC.init({ node: document.getElementById(\"rootC\") });\n```\n\n----------------------------------------\n\nTITLE: Local File Alias Configuration\nDESCRIPTION: Configuration for mapping a module to a local file using relative path\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"alias\": {\n    \"react\": \"./my-react.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parcel Resolver for Glob Support\nDESCRIPTION: This snippet shows how to enable glob specifier support in Parcel by adding the @parcel/resolver-glob to the .parcelrc configuration file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"resolvers\": [\"@parcel/resolver-glob\", \"...\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Nesting Draft Syntax in Parcel\nDESCRIPTION: Configures Parcel to enable the CSS nesting draft syntax by setting the nesting option in package.json.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@parcel/transformer-css\": {\n    \"drafts\": {\n      \"nesting\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Side Effects in Package.json for Math Module\nDESCRIPTION: This JSON configuration in package.json specifies that the math module has no side effects, allowing for better optimization by Parcel.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/scope-hoisting.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"math\"\n  \"sideEffects\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Package Sub-paths in JavaScript\nDESCRIPTION: Demonstrates importing a specific module from a package rather than its main entry point. This is useful for packages that publish multiple entry points to reduce bundle size.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'lodash/clone';\n```\n\n----------------------------------------\n\nTITLE: Caching and Invalidation in Macros with TypeScript\nDESCRIPTION: Demonstrates how to control caching behavior in macros using the MacroContext interface, including file change invalidation.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/macros.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {MacroContext} from '@parcel/macros';\nimport fs from 'fs';\n\nexport async function readFile(this: MacroContext | void, filePath: string) {\n  this?.invalidateOnFileChange(filePath);\n  return fs.readFileSync(filePath, 'utf8');\n}\n```\n\n----------------------------------------\n\nTITLE: CommonJS Export Patterns\nDESCRIPTION: Shows supported and unsupported CommonJS export patterns for static analysis.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/scope-hoisting.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ Static exports assignments\nexports.foo = 2;\nmodule.exports.foo = 2;\nthis.foo = 2;\n\n// ✅ module.exports assignment\nmodule.exports = 2;\n\n// 🚫 Dynamic exports assignments\nexports[someVar] = 2;\nmodule.exports[someVar] = 2;\nthis[someVar] = 2;\n\n// 🚫 Exports re-assignment\nlet e = exports;\ne.foo = 2;\n\n// 🚫 Module re-assignment\nlet m = module;\nm.exports.foo = 2;\n\n// 🚫 Unknown exports usage\ndoSomething(exports);\ndoSomething(this);\n\n// 🚫 Unknown module usage\ndoSomething(module);\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json Scripts for Parcel\nDESCRIPTION: This snippet shows how to update the package.json file to replace react-scripts with parcel and add a source field for the entry point.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/cra.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": \"public/index.html\",\n  \"scripts\": {\n    \"start\": \"parcel\",\n    \"build\": \"parcel build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Absolute Specifiers in JavaScript\nDESCRIPTION: Shows using absolute paths that start with '/' to import files relative to the project root. This is useful to avoid very long relative paths in deeply nested directories.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport '/src/client.js';\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Media Queries in Parcel\nDESCRIPTION: Configures Parcel to enable custom media queries by setting the customMedia option in package.json.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@parcel/transformer-css\": {\n    \"drafts\": {\n      \"customMedia\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Names for Specific Bundles in Parcel Namer Plugin (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a Namer plugin that places all PNG and JPG files into an 'images' folder with their original filenames. It returns null for other file types to allow the next namer in the pipeline to handle them.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/namer.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Namer} from '@parcel/plugin';\nimport path from 'path';\n\nexport default new Namer({\n  name({bundle}) {\n    if (bundle.type === 'png' || bundle.type === 'jpg') {\n      let filePath = bundle.getMainEntry().filePath;\n      return `images/${path.basename(filePath)}`;\n    }\n\n    // Allow the next namer to handle this bundle.\n    return null;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using PURE Annotation for Function Call Optimization in JavaScript\nDESCRIPTION: This snippet shows how to use the /*#__PURE__*/ annotation to mark a function call as side-effect free, allowing the minifier to remove it if unused.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/scope-hoisting.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const radius = 23;\nexport const circumference = /*#__PURE__*/ calculateCircumference(radius);\n```\n\n----------------------------------------\n\nTITLE: Using Hash Specifiers in JavaScript\nDESCRIPTION: Demonstrates using hash specifiers that map to the imports field in package.json. These specifiers start with '#' and enable package-private imports with potential environment-specific resolution.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport '#dep';\n```\n\n----------------------------------------\n\nTITLE: Generating CSS Assets with Macros in TypeScript\nDESCRIPTION: Demonstrates how to use macros to generate CSS assets at build time, creating a dynamic class name and corresponding styles.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/macros.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {css} from './css.ts' with {type: 'macro'};\n\n<div className={css('color: red; &:hover { color: green }')}>\n  Hello!\n</div>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {MacroContext} from '@parcel/macros';\n\nexport async function css(this: MacroContext | void, code: string) {\n  let className = hash(code);\n  code = `.${className} { ${code} }`;\n\n  this?.addAsset({\n    type: 'css',\n    content: code\n  });\n\n  return className;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Directory Index Files in JavaScript\nDESCRIPTION: Demonstrates resolving a dependency to a directory that contains an index file. When importing a directory, Parcel will look for files like index.js or index.ts within that directory.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport './client';\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS for PostCSS\nDESCRIPTION: Command to install Tailwind CSS as a development dependency for use with PostCSS in a Parcel project.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nyarn add tailwindcss --dev\n```\n\n----------------------------------------\n\nTITLE: Importing Pug Template in JavaScript\nDESCRIPTION: Demonstrates how to import and use a Pug template within JavaScript using bundle-text scheme.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/pug.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport html from 'bundle-text:./index.pug';\n\ndocument.body.innerHTML = html;\n```\n\n----------------------------------------\n\nTITLE: Development Branch Removal Example\nDESCRIPTION: Example of using NODE_ENV environment variable for development-only code that gets stripped in production builds.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/production.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.NODE_ENV !== \"production\") {\n  // Only runs in development and will be stripped in production builds.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parcel to Use TypeScript Compiler (TSC)\nDESCRIPTION: Example .parcelrc configuration to use the official TypeScript compiler (TSC) instead of Parcel's default faster transpiler for TypeScript files.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/typescript.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"transformers\": {\n    \"*.{ts,tsx}\": [\"@parcel/transformer-typescript-tsc\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Script Imports for Home Page\nDESCRIPTION: HTML for a home page that loads a JavaScript module. This demonstrates how Parcel will automatically split common dependencies into shared bundles.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/code-splitting.md#2025-04-09_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<div id=\"app\"></div>\n<script type=\"module\" src=\"home.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Virtual Module Resolution in Parcel\nDESCRIPTION: Shows how to create virtual modules by returning code directly from a resolver plugin while still providing a filePath for dependency resolution.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/resolver.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Resolver} from '@parcel/plugin';\nimport path from 'path';\n\nexport default new Resolver({\n  async resolve({specifier}) {\n    if (specifier === 'special-module') {\n      return {\n        filePath: path.join(__dirname, 'special-module.js'),\n        code: 'export default \"This is a special module!\";'\n      };\n    }\n\n    return null;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing with Omitted File Extensions in JavaScript\nDESCRIPTION: Shows how file extensions can be omitted when importing JavaScript and TypeScript files. This is for compatibility with CommonJS and TypeScript, though including extensions is recommended for better performance.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport './utils';\nimport '../constants';\n```\n\n----------------------------------------\n\nTITLE: Basic PostCSS Configuration with Tailwind\nDESCRIPTION: Simple PostCSS configuration file that enables the Tailwind CSS plugin without additional options.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"tailwindcss\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including External Script in SVG\nDESCRIPTION: Shows how to include an external JavaScript file in an SVG using the <script> element. The type=\"module\" attribute indicates it's an ES module or CommonJS file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/svg.md#2025-04-09_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<svg viewBox=\"0 0 240 80\" xmlns=\"http://www.w3.org/2000/svg\">\n  <circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"red\" />\n  <script type=\"module\" href=\"interactions.js\" />\n</svg>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet circle = document.querySelector('circle');\ncircle.addEventListener('click', () => {\n  circle.setAttribute('fill', 'blue');\n});\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Filtering Configuration\nDESCRIPTION: Package.json configuration showing how to filter allowed environment variables using glob patterns.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/node-emulation.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"dependencies\": {\n    ...\n  },\n  \"@parcel/transformer-js\": {\n    \"inlineEnvironment\": [\"SENTRY_*\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Custom Blocks Preprocessor Implementation\nDESCRIPTION: JavaScript preprocessor function for handling custom 'docs' blocks in Vue components. The function adds documentation content to the component instance based on block attributes.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/vue.md#2025-04-09_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nexport default function (component, blockContent, blockAttrs) {\n  if (blockAttrs.brief) {\n    component.__briefDocs = blockContent;\n  } else {\n    component.__docs = blockContent;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Example of using Parcel's build command for creating production-optimized builds.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/cli.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nparcel build src/index.html\n```\n\n----------------------------------------\n\nTITLE: Importing with Relative Specifiers in JavaScript\nDESCRIPTION: Demonstrates how to use relative paths starting with './' or '../' to import modules relative to the current file. The first import resolves to a file in the same directory, while the second imports from the parent directory.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport './utils.js';\nimport '../constants.js';\n```\n\n----------------------------------------\n\nTITLE: Main CSS File with Imports and Custom Properties\nDESCRIPTION: Example CSS file that imports a configuration file and uses CSS custom properties (variables) for colors and background images.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_30\n\nLANGUAGE: css\nCODE:\n```\n@import \"./config/index.css\";\n\nhtml {\n  background-color: var(--varColor);\n}\n\n.icon {\n  width: 50px;\n  height: 50px;\n  background-image: var(--varIcon);\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Inline Style Attribute in HTML with Parcel\nDESCRIPTION: Demonstrates how Parcel processes inline CSS within the style attribute of an HTML element, including handling background image URLs.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/html.md#2025-04-09_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"background: url(background.jpg)\">Hello!</div>\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Babel Plugin Performance Analysis\nDESCRIPTION: SQL query for Perfetto that identifies which Babel plugins are taking the most time during transformation. This helps prioritize which plugins might need replacement or removal to optimize build times.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/profiling.md#2025-04-09_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  name, SUM(CAST(dur AS double)/1000/1000) as dur_ms\nfrom\n  slice s\nleft join\n  args using(arg_set_id)\nwhere\n  args.flat_key = \"args.name\" AND\n  s.category LIKE \"transform:@parcel/transformer-babel%\"\ngroup by name\norder by dur_ms desc\n```\n\n----------------------------------------\n\nTITLE: Sub-path Alias Configuration\nDESCRIPTION: Example of aliasing specific sub-paths of a module\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"alias\": {\n    \"lodash/clone\": \"tiny-clone\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Trace Event Format\nDESCRIPTION: Shows the JSON format of a single trace event in Parcel's tracing output, which follows the Chrome Tracing Format. This example demonstrates the structure of a transformer event.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/profiling.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"ts\":6020131,\"pid\":11738,\"tid\":4,\"ph\":\"X\",\"name\":\"@parcel/transformer-js\",\"cat\":\"transform\",\"args\":{\"name\":\"src/index.html\"},\"dur\":11642},\n```\n\n----------------------------------------\n\nTITLE: Browser-specific File Alias\nDESCRIPTION: Configuration for browser-specific file replacements\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"browser\": {\n    \"./fs.js\": \"./fs-browser.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Optimizer for ArrayBuffer Inlining in JavaScript\nDESCRIPTION: Example of a custom Optimizer plugin that converts bundle contents into an ArrayBuffer representation for inlining.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/bundle-inlining.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Optimizer} from '@parcel/plugin';\nimport {blobToBuffer} from '@parcel/utils';\n\nexport default new Optimizer({\n  async optimize({contents}) {\n    let buffer = await blobToBuffer(contents);\n    return {\n      contents: `new Uint8Array(${JSON.stringify(Array.from(buffer))}).buffer`\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Less as CSS Module in JavaScript\nDESCRIPTION: Demonstrates how to import a Less file as a CSS module in JavaScript or TypeScript. This allows for scoped class names and modular CSS.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/less.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as classes from './style.module.less';\n\ndocument.body.className = classes.body;\n```\n\n----------------------------------------\n\nTITLE: Configuring Reporter Plugins in .parcelrc\nDESCRIPTION: This snippet shows how to configure reporter plugins in .parcelrc. Reporter plugins receive events from Parcel throughout the build process. The '...' syntax extends the default reporters.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"reporters\": [\"...\", \"@parcel/reporter-bundle-analyzer\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Parcel Core and Default Config\nDESCRIPTION: Shell command to install the necessary Parcel packages for using the API.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/parcel-api.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @parcel/core @parcel/config-default\n```\n\n----------------------------------------\n\nTITLE: Entry Point Examples\nDESCRIPTION: Various examples of specifying entry points in Parcel, including single files, multiple files, globs, and directory-based entries.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/cli.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Single file\nparcel src/index.html\n\n# Multiple files\nparcel src/a.html src/b.html\n\n# Glob (quotes required)\nparcel 'src/*.html'\n\n# Directory with package.json#source\nparcel packages/frontend\n\n# Multiple packages with a glob\nparcel 'packages/*'\n\n# Current directory with package.json#source\nparcel\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspaces for Local Plugins in package.json\nDESCRIPTION: This snippet demonstrates how to set up workspaces in package.json for using local plugins in a monorepo setup. This allows referencing local packages as if they were published.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"private\": true,\n  \"workspaces\": [\"packages/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Pipelines for Bundle Inlining in Parcel\nDESCRIPTION: JSON configuration for setting up named pipelines in Parcel to handle bundle-text and data-url schemes using transformers and optimizers.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/bundle-inlining.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transformers\": {\n    \"bundle-text:*\": [\"...\", \"@parcel/transformer-inline-string\"],\n    \"data-url:*\": [\"...\", \"@parcel/transformer-inline-string\"]\n  },\n  \"optimizers\": {\n    \"data-url:*\": [\"...\", \"@parcel/optimizer-data-url\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Less Using Parcel CLI\nDESCRIPTION: Shows the command to directly compile a Less file using the Parcel command-line interface.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/less.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nparcel build style.less\n```\n\n----------------------------------------\n\nTITLE: Including TypeScript Module in HTML with Parcel\nDESCRIPTION: Example of referencing a TypeScript module from an HTML file using the script element with type=\"module\". Parcel will compile the TypeScript to JavaScript.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/html.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"module\" src=\"app.ts\" />\n  </head>\n  <body>\n    <h1>My Parcel app</h1>\n  </body>\n</html>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log('Hello world!')\n```\n\n----------------------------------------\n\nTITLE: Named log levels in CLI options\nDESCRIPTION: Change from numeric log levels to named log levels in the --log-level CLI option. Parcel 2 uses descriptive names (none, error, warn, info, verbose) instead of numbers.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/parcel-1.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nparcel build index.js --log-level 1\n```\n\nLANGUAGE: bash\nCODE:\n```\nparcel build index.js --log-level error\n```\n\n----------------------------------------\n\nTITLE: Static React Page Component\nDESCRIPTION: Example React component for a static page that will be rendered at build time. Demonstrates basic HTML structure for a static page.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function StaticPage() {\n  return (\n    <html>\n      <body>\n        <p>This page is statically rendered at build time!</p>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Import Handling\nDESCRIPTION: Demonstrates how to handle GraphQL imports in Parcel 2, where the imported query is now a string instead of a parsed AST, requiring additional processing for use with Apollo.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/parcel-1.md#2025-04-09_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport gql from \"graphql-tag\";\nimport fetchDataQuery from \"./fetchData.gql\"; // fetchDataQuery is a string\n\n// Convert to the Apollo Specific Query AST\nconst parsedFetchDataQuery = gql(fetchDataQuery);\n\nconst DataComponent = () => {\n  const { data } = useQuery(parsedFetchDataQuery, {\n    fetchPolicy: \"cache-and-network\",\n  });\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Renaming output directory CLI option\nDESCRIPTION: Migration from --out-dir to --dist-dir CLI option for specifying the output directory. This renames the parameter to match the distDir option in package.json.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/parcel-1.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nparcel build index.html --out-dir www\n```\n\nLANGUAGE: bash\nCODE:\n```\nparcel build index.html --dist-dir www\n```\n\n----------------------------------------\n\nTITLE: Using npm Scheme in HTML Script Tags\nDESCRIPTION: Demonstrates how to reference an npm package directly from an HTML script tag using the npm: URL scheme. This allows resolving node_modules packages in HTML, CSS, and other non-JavaScript contexts.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/v2/v2.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"npm:focus-visible\"></script>\n```\n\n----------------------------------------\n\nTITLE: Referencing Stylus File in HTML\nDESCRIPTION: Demonstrates how to link a Stylus file in an HTML document using the <link> tag. Parcel will automatically process and compile the Stylus file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/stylus.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"style.styl\" />\n```\n\n----------------------------------------\n\nTITLE: Source Map Handling in Parcel Transformer\nDESCRIPTION: Demonstrates source map manipulation using @parcel/source-map library during asset transformation.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/transformer.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Transformer} from '@parcel/plugin';\nimport SourceMap from '@parcel/source-map';\n\nexport default new Transformer({\n  async transform({asset, options}) {\n    let source = await asset.getCode();\n    let sourceMap = await asset.getMap();\n\n    // Convert the input source map to JSON.\n    let result = compile(source, sourceMap.toVLQ());\n    asset.setCode(result.code);\n\n    // Convert returned JSON source map to a Parcel SourceMap.\n    let map = new SourceMap(options.projectRoot);\n    map.addVLQMap(result.map);\n    asset.setMap(map);\n\n    return [asset];\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Node.js target in package.json\nDESCRIPTION: Migration from using CLI --target option to configuring the build target in package.json using the engines field. This specifies that the code should be compiled for Node.js version 10.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/parcel-1.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nparcel build index.js --target node\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engines\": {\n    \"node\": \"10\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Navigation for Static Rendering\nDESCRIPTION: Demonstrates how to implement client-side navigation for statically rendered React Server Components. It uses the fetchRSC function to load .rsc files for navigation.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_22\n\nLANGUAGE: js\nCODE:\n```\n\"use client-entry\";\n\nimport {hydrate, fetchRSC} from '@parcel/rsc/client';\n\nlet updateRoot = hydrate();\n\nasync function navigate(pathname, push = false) {\n  let root = await fetchRSC(pathname.replace('.html', '.rsc'));\n  updateRoot(root, () => {\n    if (push) {\n      history.pushState(null, '', pathname);\n    }\n  });\n}\n\n// Intercept link clicks to perform RSC navigation.\ndocument.addEventListener('click', e => {\n  let link = e.target.closest('a');\n  if (link) {\n    e.preventDefault();\n    navigate(link.pathname, true);\n  }\n});\n\n// When the user clicks the back button, navigate with RSC.\nwindow.addEventListener('popstate', e => {\n  navigate(location.pathname);\n});\n```\n\n----------------------------------------\n\nTITLE: Hooking into bundle events with Parcel API\nDESCRIPTION: Migration from Parcel 1 event-based API to Parcel 2's watch API for responding to build events. Shows how to listen for build success and failure events using the @parcel/core package.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/parcel-1.md#2025-04-09_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nimport Bundler from \"parcel-bundler\"\n\nconst bundler = new Bundler({ /* ... */ })\nbundler.bundle()\n\nbundler.on(\"buildEnd\", () => { /* ... */ })\nbundler.on(\"buildError\", (error) => { /* ... */ })\n```\n\nLANGUAGE: js\nCODE:\n```\nimport Parcel from \"@parcel/core\"\n\nconst bundler = new Parcel({ /* ... */ })\n\nbundler.watch((err, buildEvent) => {\n  if (buildEvent.type === \"buildSuccess\") { /* ... */ }\n  if (buildEvent.type === \"buildFailure\") { /* ... */ }\n})\n```\n\n----------------------------------------\n\nTITLE: Parcel Configuration for Glob Resolver\nDESCRIPTION: Configuration snippet showing how to enable the glob resolver plugin in .parcelrc\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/rc0/rc0.md#2025-04-09_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"resolvers\": [\"@parcel/resolver-glob\", \"...\"]\n}\n```\n\n----------------------------------------\n\nTITLE: URL Reference for SVG in React\nDESCRIPTION: Demonstrates importing an SVG file using URL constructor for use in a React component\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/svg.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst logo = new URL('logo.svg', import.meta.url);\n\nexport function Logo() {\n  return <img src={logo} alt=\"logo\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Binary Content in Parcel Optimizer Plugin\nDESCRIPTION: Demonstrates how to process binary content in an Optimizer plugin using the blobToBuffer utility from @parcel/utils. This allows the plugin to handle input content that may be a string, Buffer, or ReadableStream.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/optimizer.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Optimizer} from '@parcel/plugin';\nimport {blobToBuffer} from '@parcel/utils';\n\nexport default new Optimizer({\n  async optimize({contents}) {\n    let buffer = await blobToBuffer(contents);\n    let optimized = optimize(buffer);\n    return {contents: optimized};\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Parcel for SVG React Components\nDESCRIPTION: This snippet shows how to configure Parcel to transform SVG files into React components using the @parcel/transformer-svg-react plugin.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/cra.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"transformers\": {\n    \"jsx:*.svg\": [\"...\", \"@parcel/transformer-svg-react\"],\n    \"jsx:*\": [\"...\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pseudo Class Replacement in Parcel\nDESCRIPTION: Sets up pseudo class replacement in Parcel, allowing :focus-visible to be replaced with a .focus-visible class for polyfilling.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@parcel/transformer-css\": {\n    \"pseudoClasses\": {\n      \"focusVisible\": \"focus-visible\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dual Module Format Output\nDESCRIPTION: Package.json configuration that outputs both CommonJS and ES modules formats by adding the module field.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/getting-started/library.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-library\",\n  \"version\": \"1.0.0\",\n  \"source\": \"src/index.js\",\n  \"main\": \"dist/main.js\",\n  \"module\": \"dist/module.js\",\n  \"devDependencies\": {\n    \"parcel\": \"latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Transform for Jest\nDESCRIPTION: This JavaScript file sets up a file transform for Jest to handle non-JavaScript files during testing.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/cra.md#2025-04-09_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst path = require('path').default;\n\nmodule.exports = {\n  process(src, filename) {\n    const assetFilename = JSON.stringify(path.basename(filename));\n    return `module.exports = ${assetFilename};`;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Imports with Glob Pattern\nDESCRIPTION: Example of using glob patterns with dynamic imports for asynchronous file loading\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/rc0/rc0.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet files = import('./files/*.js');\n\nasync function doSomething() {\n  let foo = await files.foo();\n  let bar = await files.bar();\n  return foo + bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Parcel Configuration for SVG React Transform\nDESCRIPTION: Configuration for .parcelrc to enable SVG to React component transformation using named pipelines\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/svg.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"transformers\": {\n    \"jsx:*.svg\": [\"...\", \"@parcel/transformer-svg-react\"],\n    \"jsx:*\": [\"...\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Build Success Event Handler\nDESCRIPTION: Reporter implementation for handling successful build completion, showing changed assets and build time.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/reporter.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Reporter} from '@parcel/plugin';\n\nexport default new Reporter({\n  report({event}) {\n    if (event.type === 'buildSuccess') {\n      process.stdout.write(`✨ Rebuilt ${event.changedAssets.size} assets in ${event.buildTime}ms!\\n`);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Package.json with Build Scripts\nDESCRIPTION: Enhanced package.json configuration that includes npm scripts for building and watching the library during development.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/getting-started/library.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-library\",\n  \"version\": \"1.0.0\",\n  \"source\": \"src/index.js\",\n  \"main\": \"dist/main.js\",\n  \"scripts\": {\n    \"watch\": \"parcel watch\",\n    \"build\": \"parcel build\"\n  },\n  \"devDependencies\": {\n    \"parcel\": \"latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Web Extension Content Scripts\nDESCRIPTION: Example of CSS usage in content scripts, demonstrating how to reference local assets and use data URLs for background images.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/web-extension.md#2025-04-09_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.my-class {\n  /* Equivalent to: https://injected-site.com/custom-bg.png */\n  /* This is probably not what you want! */\n  background-image: url(./custom-bg.png);\n}\n\n.my-other-class {\n  /* This will use the local file custom-bg.png */\n  background-image: url(data-url:./custom-bg.png);\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing and Transforming Images in JavaScript with URL Constructor\nDESCRIPTION: This snippet demonstrates how to reference an image from JavaScript using the URL constructor with query parameters to convert the image to WebP format and resize it to 250 pixels wide.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/image.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imageUrl = new URL(\n  'image.jpeg?as=webp&width=250',\n  import.meta.url\n);\n```\n\n----------------------------------------\n\nTITLE: Equivalent Static Imports in JavaScript\nDESCRIPTION: Shows the equivalent static import statements that the glob pattern resolves to\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/rc0/rc0.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as foo from './files/foo.js';\nimport * as bar from './files/bar.js';\n\nlet files = {\n  foo,\n  bar\n};\n```\n\n----------------------------------------\n\nTITLE: SVGO Configuration for Production\nDESCRIPTION: Example configuration for SVGO to customize SVG optimization in production builds\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/svg.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    {\n      \"name\": \"preset-default\",\n      \"params\": {\n        \"overrides\": {\n          \"inlineStyles\": false\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-LD Metadata with Image References in Parcel\nDESCRIPTION: Example of including JSON-LD metadata in HTML with an image reference. Parcel will process the image URL and include a content hash using the @parcel/transformer-jsonld plugin.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/html.md#2025-04-09_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"http://schema.org\",\n  \"@type\": \"LocalBusiness\",\n  \"name\": \"Joe's Pizza\",\n  \"description\": \"Delicious pizza for over 30 years.\",\n  \"telephone\": \"555-111-2345\",\n  \"openingHours\": \"Mo,Tu,We,Th,Fr 09:00-17:00\",\n  \"logo\": {\n    \"@type\": \"ImageObject\",\n    \"url\": \"images/logo.png\",\n    \"width\": 180,\n    \"height\": 120\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Extension Manifest\nDESCRIPTION: Example of a manifest.json file for a web extension using Manifest V3, including background scripts and content scripts configuration.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/web-extension.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifest_version\": 3,\n  \"name\": \"Sample Web Extension\",\n  \"version\": \"0.0.1\",\n  \"background\": {\n    \"service_worker\": \"background.ts\",\n    \"type\": \"module\"\n  },\n  \"content_scripts\": [{\n    \"matches\": [\"*://github.com/parcel-bundler/*\"],\n    \"js\": [\"parcel-content-script.ts\"]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cache Invalidation to Parcel Plugins\nDESCRIPTION: Shows how to properly invalidate the Parcel cache when external configuration changes by tracking loaded files or watching for new config files to be created.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/authoring-plugins.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Transformer} from '@parcel/plugin';\n\nexport default new Transformer({\n  async loadConfig({config}) {\n    let {result, files} = await loadToolConfigSomehow(config.searchPath);\n\n    if (result) {\n      // Invalidate whenever one of the loaded files changes.\n      for (let file of files) {\n        config.invalidateOnFileChange(file);\n      }\n    } else {\n      // Invalidate when a new config is created.\n      config.invalidateOnFileCreate({\n        fileName: 'tool.config.json',\n        aboveFilePath: config.searchPath\n      });\n    }\n\n    return result;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Resources in Web Extension Content Scripts\nDESCRIPTION: Example of importing and using an image resource in a content script, which will automatically be added to web_accessible_resources.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/web-extension.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport myImage from 'url:./image.png';\n\nconst injectedImage = document.createElement('img');\ninjectedImage.src = myImage;\ndocument.body.appendChild(injectedImage);\n```\n\n----------------------------------------\n\nTITLE: Responsive Image Loading with Transformations\nDESCRIPTION: HTML example showing how to use Parcel's image transformer with different formats and sizes\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/rc0/rc0.md#2025-04-09_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source src=\"snow.jpg?as=webp&width=400\" type=\"image/webp\" />\n  <source src=\"snow.jpg?as=jpg&width=400\" type=\"image/jpeg\" />\n  <img src=\"snow.jpg?as=jpg&width=400\" alt=\"snow\" />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Using Static and Dynamic Imports in JavaScript\nDESCRIPTION: Shows how Parcel 2 now supports using both static and dynamic imports with the same specifier in a single file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/rc0/rc0.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport something from './foo';\n\nimport('./foo');\n```\n\n----------------------------------------\n\nTITLE: Linking RSS Feed in HTML\nDESCRIPTION: Example showing how to reference an RSS feed from an HTML file using the link element with appropriate MIME type specification.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/xml.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link\n  href=\"feed.xml\"\n  rel=\"alternate\"\n  type=\"application/rss+xml\"\n  title=\"Blog RSS feed\" />\n```\n\n----------------------------------------\n\nTITLE: Using Parcel Watch Mode\nDESCRIPTION: Shows how to use Parcel's watch command for automatic rebuilding without starting a dev server.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/cli.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nparcel watch src/index.html\n```\n\n----------------------------------------\n\nTITLE: Setting up Client Entry for Hydration\nDESCRIPTION: Client entry point marked with 'use client-entry' to run in the browser. Uses hydrate from @parcel/rsc/client to make the server-rendered HTML interactive.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n\"use client-entry\";\n\nimport { hydrate } from \"@parcel/rsc/client\";\n\nhydrate();\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Normalize CSS\nDESCRIPTION: This PostCSS configuration adds support for the @import-normalize feature from Create React App.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/cra.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"postcss-normalize\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Component that Uses Server Functions in React\nDESCRIPTION: A React client component that calls a server function when clicked. Uses React's startTransition to handle the asynchronous update and useState to manage the like count.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\n\nimport {useState, startTransition} from \"react\";\nimport {likeComment} from './actions';\n\nexport function LikeButton({id, likes = 0}) {\n  let [count, setCount] = useState(likes);\n  let onClick = () => {\n    startTransition(async () => {\n      let newLikeCount = await likeComment(id);\n      setCount(newLikeCount);\n    });\n  };\n\n  return (\n    <button onClick={onClick}>{count} likes</button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Web Audio Worklets in JavaScript\nDESCRIPTION: Demonstrates how to import and add a web audio worklet using the 'worklet:' named pipeline in Parcel 2.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/rc0/rc0.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport workletUrl from 'worklet:./worklet.js';\n\ncontext.audioWorklet.addModule(workletUrl);\n```\n\n----------------------------------------\n\nTITLE: SVG Transform Priority Configuration\nDESCRIPTION: Configures priority-based transformer selection for SVG files using glob patterns\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transformers\": {\n    \"icons/*.svg\": [\"highest-priority\"],\n    \"*.svg\": [\"lowest-priority\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Parcel in Lazy Mode for Improved Development Performance\nDESCRIPTION: A shell command that launches Parcel with the lazy flag, which defers building files until they are requested in the browser. This can significantly reduce development build times for large applications.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/development.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nparcel 'pages/*.html' --lazy\n```\n\n----------------------------------------\n\nTITLE: Adding Routes in React Server Components with Parcel\nDESCRIPTION: Demonstrates how to add a new route in the server code and create a corresponding React component for rendering. It shows the server-side route definition and the client-side component structure.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport {About} from './About';\n\n// ...\n\napp.get('/about', async (req, res) => {\n  await renderRequest(req, res, <About />, {component: About});\n});\n```\n\nLANGUAGE: jsx\nCODE:\n```\n\"use server-entry\";\n\nimport \"./client\";\n\nexport function About() {\n  return (\n    <html>\n      <head>\n        <title>About</title>\n      </head>\n      <body>\n        <h1>About</h1>\n        <a href=\"/\">Home</a>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Compiled Output of CSS Generation Macro\nDESCRIPTION: Shows the resulting JavaScript and CSS output after the CSS generation macro has been evaluated.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/macros.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<div className=\"ax63jk4\">\n  Hello!\n</div>\n```\n\nLANGUAGE: css\nCODE:\n```\n.ax63jk4 {\n  color: red;\n  &:hover {\n    color: green;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing React Client App with Parcel\nDESCRIPTION: Commands to quickly scaffold a new client-only React app using Parcel bundler.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/react.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create parcel react-client my-react-app\ncd my-react-app\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for TypeScript Library Build\nDESCRIPTION: Example package.json configuration for building a TypeScript library with Parcel, including source, module, and types fields for proper type definition generation.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/typescript.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": \"src/index.ts\",\n  \"module\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Plugins Using Relative Paths in .parcelrc\nDESCRIPTION: This example shows how to reference a local plugin using a relative file path in .parcelrc. This is useful for developing plugins without publishing them first.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"transformers\": {\n    \"*.js\": [\"./my-local-plugin.mjs\", \"...\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: URL Dependencies Management in Parcel\nDESCRIPTION: Demonstrates handling URL dependencies and placeholder replacement for final bundle URLs.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/transformer.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Transformer} from '@parcel/plugin';\n\nexport default new Transformer({\n  async transform({asset}) {\n    let code = await asset.getCode();\n    let result = code.replace(/import \"(.*?)\"/g, (m, dep) => {\n      // Replace the original specifier with a dependency id \n      // as a placeholder. This will be replaced later with \n      // the final bundle URL.\n      let depId = asset.addURLDependency(dep);\n      return `import \"${depId}\"`;\n    });\n\n    asset.setCode(result);\n    return [asset];\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code for Parcel Debugging\nDESCRIPTION: This JSON configuration sets up Visual Studio Code for debugging a Parcel project using the Chrome Debugger extension. It includes settings for source map path overrides and breakpoint loading.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/debugging.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Use IntelliSense to learn about possible attributes.\n  // Hover to view descriptions of existing attributes.\n  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"name\": \"Launch Chrome against localhost\",\n      \"url\": \"http://localhost:1234\",\n      \"webRoot\": \"${workspaceFolder}\",\n      \"breakOnLoad\": true,\n      \"sourceMapPathOverrides\": {\n        \"/__parcel_source_root/*\": \"${webRoot}/*\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Build Phase Breakdown\nDESCRIPTION: SQL query for Perfetto that provides a breakdown of build time by major phases. It helps identify which phases of the build process (building, bundling, packaging) are taking the most time.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/profiling.md#2025-04-09_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  name, SUM(CAST(dur AS double)/1000/1000) as dur_ms\nfrom\n  slice s\nwhere\n  s.category = \"Core\"\ngroup by name\norder by dur_ms desc\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Worker Caching with Parcel's Manifest\nDESCRIPTION: Uses the @parcel/service-worker package to implement pre-caching of Parcel-generated files during service worker installation. The code imports a manifest of URLs and a version hash to create a cache for offline access.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/v2/v2.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {manifest, version} from '@parcel/service-worker';\n\nasync function install() {\n  const cache = await caches.open(version);\n  await cache.addAll(manifest);\n}\n\naddEventListener('install', e => e.waitUntil(install()));\n```\n\n----------------------------------------\n\nTITLE: Inlining SVG as String in JavaScript\nDESCRIPTION: Shows how to inline SVG content as a string using bundle-text scheme and inject it into the DOM\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/svg.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport svg from 'bundle-text:./logo.svg';\n\nlet logo = document.createElement('div');\nlogo.innerHTML = svg;\ndocument.body.appendChild(logo);\n```\n\n----------------------------------------\n\nTITLE: Setting up HTML structure for Elm application\nDESCRIPTION: This HTML snippet sets up the basic structure for an Elm application, including a root div and a script tag that imports the main JavaScript file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/elm.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<div id=\"root\"></div>\n<script type=\"module\" src=\"index.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Variables from Other Modules in CSS\nDESCRIPTION: Demonstrates the new syntax for referencing CSS variables defined in other files when using CSS modules in Parcel v2.6.0. This feature allows for explicit dependency declaration between CSS files.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/v2-6-0/v2-6-0.md#2025-04-09_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.button {\n  background: var(--accent-color from \"./vars.module.css\");\n}\n```\n\n----------------------------------------\n\nTITLE: HMR Update Performance Comparison Table in Markdown\nDESCRIPTION: A markdown table comparing HMR update performance between Vite, Turbopack, and Parcel for a React app with 1000 components. It shows the time from saving a file to seeing updates in the browser for root and leaf component changes.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/v2-8-0/v2-8-0.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|          | Vite    | Turbopack | Parcel     |\n| -------- | ------- | --------- | ---------- |\n| **Root** | 293.5ms | 274.8ms   | **88.6ms** |\n| **Leaf** | 143.8ms | 57ms      | **37.4ms** |\n```\n\n----------------------------------------\n\nTITLE: Bundled Output of CSS Generation Macro in JavaScript and CSS\nDESCRIPTION: This example shows the bundled output of the CSS generation macro, with the JavaScript containing only the class name and the CSS in a separate file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/v2-12-0/v2-12-0.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<div className=\"ax63jk4\">\n  Hello!\n</div>\n```\n\nLANGUAGE: css\nCODE:\n```\n.ax63jk4 {\n  color: red;\n  &:hover {\n    color: green;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating CSS with Macro in TypeScript React\nDESCRIPTION: This example shows how to use a macro to generate CSS and a class name at build time, extracting the CSS into a separate file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/v2-12-0/v2-12-0.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {css} from './css.ts' with {type: 'macro'};\n\n<div className={css('color: red; &:hover { color: green }')}>\n  Hello!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Dummy SVG Component for Jest\nDESCRIPTION: This JavaScript file creates a dummy SVG component for Jest tests to avoid errors when importing SVG files.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/cra.md#2025-04-09_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nexport function SvgComponent() {\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Inline SVG in HTML with CSS Styling\nDESCRIPTION: Shows how to embed SVG directly in HTML, allowing CSS on the HTML page to style SVG elements. This approach enables more styling flexibility compared to using external SVG files.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/svg.md#2025-04-09_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <body>\n    <svg width=\"100\" height=\"100\">\n      <circle cx=\"50\" cy=\"50\" r=\"50\" />\n    </svg>\n    <style>\n      circle {\n        fill: blue;\n      }\n\n      circle:hover {\n        fill: green;\n      }\n    </style>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing Elm application in JavaScript\nDESCRIPTION: This JavaScript code imports the Elm application from the Main.elm file and initializes it, targeting the root div in the HTML.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/elm.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Elm } from \"./Main.elm\";\n\nElm.Main.init({ node: document.getElementById(\"root\") });\n```\n\n----------------------------------------\n\nTITLE: Multiple Config Extension\nDESCRIPTION: Demonstrates extending multiple Parcel configurations that are merged in order\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"@parcel/config-default\", \"@company/parcel-config\"]\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Generation Macro Implementation in TypeScript\nDESCRIPTION: This snippet defines a macro function that generates a CSS class name and adds the CSS as an asset to be bundled separately.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/v2-12-0/v2-12-0.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {MacroContext} from '@parcel/macros';\n\nexport async function css(this: MacroContext | void, code: string) {\n  let className = hash(code);\n  code = `.${className} { ${code} }`;\n\n  this?.addAsset({\n    type: 'css',\n    content: code\n  });\n\n  return className;\n}\n```\n\n----------------------------------------\n\nTITLE: Parcel CSS Rust AST Example\nDESCRIPTION: Shows how Parcel CSS represents a background property in its strongly-typed Rust AST format with full property value parsing.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/parcel-css/parcel-css.md#2025-04-09_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nBackground([Background {\n  image: Url(Url { url: \"img.png\" }),\n  color: CssColor(RGBA(RGBA { red: 0, green: 0, blue: 0, alpha: 0 })),\n  position: Position {\n    x: Length(Dimension(Px(20.0))),\n    y: Length(Dimension(Px(10.0))),\n  },\n  repeat: BackgroundRepeat {\n    x: Repeat,\n    y: Repeat,\n  },\n  size: Explicit {\n    width: LengthPercentage(Dimension(Px(50.0))),\n    height: LengthPercentage(Dimension(Px(100.0))),\n  },\n  attachment: Scroll,\n  origin: PaddingBox,\n  clip: BorderBox,\n}])\n```\n\n----------------------------------------\n\nTITLE: PostCSS Property Value AST Example\nDESCRIPTION: Shows how PostCSS represents a CSS background property declaration in its AST format.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/parcel-css/parcel-css.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"decl\",\n  \"prop\": \"background\",\n  \"value\": \"url(img.png) 20px 10px / 50px 100px\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Scripts and Styles in SVG\nDESCRIPTION: Demonstrates the use of inline <script> and <style> tags in SVG, showing how to import external modules and stylesheets. Parcel processes these inline elements similarly to standalone files.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/svg.md#2025-04-09_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<svg viewBox=\"0 0 240 80\" xmlns=\"http://www.w3.org/2000/svg\">\n  <circle cx=\"50\" cy=\"50\" r=\"50\" />\n  <style>\n    @import './style.scss';\n  </style>\n  <script type=\"module\">\n    import {setup} from './interactions.ts';\n    let circle = document.querySelector('circle');\n    setup(circle);\n  </script>\n</svg>\n```\n\nLANGUAGE: SCSS\nCODE:\n```\n$fill: blue;\n\ncircle {\n  fill: $fill;\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setup(element: SVGElement) {\n  element.addEventListener('click', () => {\n    element.setAttribute('fill', 'red');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a basic Elm counter application\nDESCRIPTION: This Elm code creates a simple counter application with increment and decrement buttons. It demonstrates the basic structure of an Elm application including the model, update, and view functions.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/elm.md#2025-04-09_snippet_2\n\nLANGUAGE: elm\nCODE:\n```\nmodule Main exposing (..)\n\nimport Browser\nimport Html exposing (Html, button, div, text)\nimport Html.Events exposing (onClick)\n\nmain =\n  Browser.sandbox { init = init, update = update, view = view }\n\ntype alias Model = Int\n\ninit : Model\ninit =\n  0\n\ntype Msg = Increment | Decrement\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n  case msg of\n    Increment ->\n      model + 1\n\n    Decrement ->\n      model - 1\n\n\nview : Model -> Html Msg\nview model =\n  div []\n    [ button [ onClick Decrement ] [ text \"-\" ]\n    , div [] [ text (String.fromInt model) ]\n    , button [ onClick Increment ] [ text \"+\" ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Diagnostic with Hints and Documentation\nDESCRIPTION: Shows how to create a diagnostic that includes helpful hints and documentation links for resolving issues.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/logging.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new ThrowableDiagnostic({\n  diagnostic: {\n    message: 'Could not find a config file',\n    hints: ['Create a tool.config.json file in the project root.'],\n    documentationURL: 'http://example.com/'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Destructuring process.env in JavaScript\nDESCRIPTION: Demonstrates the new support for destructuring syntax on process.env in Parcel 2.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/rc0/rc0.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet {NODE_ENV, API_TOKEN} = process.env;\n```\n\n----------------------------------------\n\nTITLE: Package Alias Configuration in JSON\nDESCRIPTION: Example showing how to configure package aliases in package.json to map React to Preact compatibility layer\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"alias\": {\n    \"react\": \"preact/compat\",\n    \"react-dom\": \"preact/compat\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Development Server for Parcel 2 Website\nDESCRIPTION: These commands install dependencies and start a local development server for the Parcel 2 website. It requires yarn to be installed on the system.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn serve\n```\n\n----------------------------------------\n\nTITLE: Referencing SugarSS in HTML with Parcel\nDESCRIPTION: This snippet shows how to link a SugarSS file in an HTML document when using Parcel. The .sss file extension is used for SugarSS files.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/sugarss.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"style.sss\" />\n```\n\n----------------------------------------\n\nTITLE: Referencing SCSS Files in HTML with Parcel\nDESCRIPTION: Example of how to link a Sass/SCSS file in an HTML document for Parcel to process. Parcel will automatically detect, compile, and transform the SCSS file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/sass.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"style.scss\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Links in MDX Files\nDESCRIPTION: Demonstrates how to create links in MDX using both Markdown link syntax and HTML anchor tags.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/mdx.md#2025-04-09_snippet_2\n\nLANGUAGE: md\nCODE:\n```\nThis is a [link](another-page.mdx).\n\nThis is <a href=\"somewhere.html\">another link</a>\n```\n\n----------------------------------------\n\nTITLE: Custom Resolver Configuration\nDESCRIPTION: Sets up a custom resolver while maintaining fallback to default resolvers\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"resolvers\": [\"@company/parcel-resolver\", \"...\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Hashing in Parcel Namer Plugin (JavaScript)\nDESCRIPTION: This example shows how to include a content hash in the bundle filename using the hashReference property. It checks the needsStableName property to determine whether to include the hash, ensuring compatibility with dependencies that require consistent filenames.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/namer.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Namer} from '@parcel/plugin';\n\nexport default new Namer({\n  name({bundle}) {\n    let name = yourNamingFunction(bundle);\n    if (!bundle.needsStableName) {\n      name += \".\" + bundle.hashReference;\n    }\n    return name + \".\" + bundle.type;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Build Failure Event Handler\nDESCRIPTION: Reporter implementation for handling build failures, displaying the number of errors encountered.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/reporter.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Reporter} from '@parcel/plugin';\n\nexport default new Reporter({\n  report({event}) {\n    if (event.type === 'buildFailure') {\n      process.stdout.write(`🚨 Build failed with ${event.diagnostics.length} errors.\\n`);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Config Files in Parcel Plugins\nDESCRIPTION: Demonstrates how to handle JavaScript configuration files which may produce non-deterministic results by invalidating the cache when the Parcel process restarts.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/authoring-plugins.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Transformer} from '@parcel/plugin';\n\nexport default new Transformer({\n  async loadConfig({config}) {\n    let {contents, filePath} = await config.getConfig([\n      'tool.config.json',\n      'tool.config.js'\n    ]);\n\n    if (filePath.endsWith('.js')) {\n      config.invalidateOnStartup();\n    }\n\n    return contents;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Parcel CLI Command for Pug\nDESCRIPTION: Shows how to use Parcel CLI to build a Pug template as an entry point.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/pug.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nparcel index.pug\n```\n\n----------------------------------------\n\nTITLE: Simple Pug Template with Variable\nDESCRIPTION: Shows how to use variables (locals) in a Pug template.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/pug.md#2025-04-09_snippet_3\n\nLANGUAGE: pug\nCODE:\n```\nh1 Hello, #{name}!\n```\n\n----------------------------------------\n\nTITLE: Defining Global CSS Variables for Parcel\nDESCRIPTION: Shows how to define global CSS variables in a non-CSS module file that can be referenced from CSS module files.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --color: purple;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration in Parcel Plugins\nDESCRIPTION: Demonstrates how to load configuration in a Parcel transformer plugin using the Config object. This approach ensures proper cache invalidation when config files change.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/authoring-plugins.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Transformer} from '@parcel/plugin';\n\nexport default new Transformer({\n  async loadConfig({config}) {\n    let {contents, filePath} = await config.getConfig([\n      'tool.config.json'\n    ]);\n\n    return contents;\n  },\n  async transform({asset, config}) {\n    // ...\n    return [asset];\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Scope hoisting migration in Parcel 2\nDESCRIPTION: Shows how scope hoisting is now enabled by default in Parcel 2, and how to disable it using the --no-scope-hoist flag. This change eliminates the need for the experimental flag.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/parcel-1.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nparcel build index.js --experimental-scope-hoisting\nparcel build index.js\n```\n\nLANGUAGE: bash\nCODE:\n```\nparcel build index.js\nparcel build index.js --no-scope-hoist\n```\n\n----------------------------------------\n\nTITLE: Installing Parcel 2 Beta via Yarn\nDESCRIPTION: Command to install the beta version of Parcel 2 using Yarn package manager.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/beta1/beta1.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add parcel@next\n```\n\n----------------------------------------\n\nTITLE: Compiled JSX from MDX Code Block\nDESCRIPTION: Shows how the MDX code fence with props gets compiled to JSX with the CodeBlock component.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/mdx.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<CodeBlock lang=\"tsx\" boolean string=\"hi\" number={2}>\nconsole.log(\"hi\");\n</CodeBlock>\n```\n\n----------------------------------------\n\nTITLE: Importing TOML Data in JavaScript with Parcel\nDESCRIPTION: This code demonstrates how to import a TOML file in JavaScript and access its data structure. It imports the TOML file as a JavaScript object and logs a specific array element to the console.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/toml.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport data from './data.toml';\nconsole.log(data.hello[0]);\n// => \"world\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Access in JavaScript\nDESCRIPTION: Demonstrates how to access environment variables in JavaScript using process.env, including conditional logic based on NODE_ENV.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/node-emulation.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.NODE_ENV === 'development') {\n  console.log('Happy developing!');\n}\n```\n\n----------------------------------------\n\nTITLE: Diagnostics Handling in Parcel Resolver\nDESCRIPTION: Shows how to handle and report errors during resolution using the diagnostics property.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/resolver.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Resolver} from '@parcel/plugin';\nimport path from 'path';\n\nexport default new Resolver({\n  async resolve({specifier, options}) {\n    let aliasFile = path.join(options.projectRoot, 'alias.json');\n\n    try {\n      let aliasConfig = await options.inputFS.readFile(aliasFile);\n      let aliases = JSON.parse(aliasConfig);\n      return {\n        filePath: aliases[specifier] || null,\n        invalidateOnFileChange: [aliasFile]\n      };\n    } catch (err) {\n      return {\n        invalidateOnFileCreate: [{filePath: aliasFile}],\n        diagnostics: [\n        {\n          message: 'Could not read alias.json',\n          hints: ['Create an alias.json file in the project root.']\n        }]\n      };\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Including Images in MDX Files\nDESCRIPTION: Shows how to reference images in MDX using both Markdown image syntax and HTML img elements.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/mdx.md#2025-04-09_snippet_3\n\nLANGUAGE: md\nCODE:\n```\n![alt](some-image.jpg)\n\n<img src=\"another-image.png\">\n```\n\n----------------------------------------\n\nTITLE: Importing YAML Data in JavaScript\nDESCRIPTION: Example of importing and accessing data from a YAML file in JavaScript using Parcel's YAML transformer. The code demonstrates importing a YAML file and accessing an array element.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/yaml.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport data from './data.yaml';\nconsole.log(data.hello[0]);\n// => \"world\"\n```\n\n----------------------------------------\n\nTITLE: ArrayBuffer Import Example\nDESCRIPTION: Demonstrates using a custom named pipeline to import a file as an ArrayBuffer\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport buffer from 'arraybuffer:./file.png';\n```\n\n----------------------------------------\n\nTITLE: Adding ESLint Script to Package.json\nDESCRIPTION: This snippet shows how to add an ESLint script to package.json for linting the source code.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/cra.md#2025-04-09_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"lint\": \"eslint src\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Video Embedding for Plugin HMR Demo in HTML\nDESCRIPTION: HTML code for embedding a video demonstration of Parcel's plugin Hot Module Replacement feature, with playback settings configured for optimal demo viewing.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/beta3/beta3.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<video src=\"plugin-hmr.mp4\" playsinline loop autoplay muted></video>\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Decorators in TypeScript Configuration\nDESCRIPTION: This TSConfig snippet demonstrates how to enable support for experimental decorators in TypeScript projects.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/javascript.md#2025-04-09_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Emotion CSS-in-JS with Babel\nDESCRIPTION: Configuration for using Emotion CSS-in-JS library with React and Parcel, including Babel and JSX configuration.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/react.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@emotion/babel-plugin\"]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsxImportSource\": \"@emotion/react\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Picture Element with Image Transformations in Parcel\nDESCRIPTION: Example of using the picture element with Parcel's image transformer to generate multiple versions of an image with different sizes and formats using query parameters.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/html.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source type=\"image/webp\" srcset=\"image.jpg?as=webp&width=400, image.jpg?as=webp&width=800 2x\">\n  <source type=\"image/jpeg\" srcset=\"image.jpg?width=400, image.jpg?width=800 2x\">\n  <img src=\"image.jpg?width=400\" width=\"400\">\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Destructuring\nDESCRIPTION: Shows how to use destructuring syntax to access multiple environment variables at once.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/node-emulation.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet {NODE_ENV, API_TOKEN} = process.env;\n```\n\n----------------------------------------\n\nTITLE: Adding a CSS Houdini Paint Worklet in JavaScript\nDESCRIPTION: This code demonstrates how to add a CSS Houdini paint worklet using the CSS.paintWorklet.addModule method with a URL constructor.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/javascript.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nCSS.paintWorklet.addModule(\n  new URL('worklet.js', import.meta.url)\n);\n```\n\n----------------------------------------\n\nTITLE: Referencing External Images in React with URL Constructor\nDESCRIPTION: Shows how to reference external images in JSX components using the URL constructor. This approach enables Parcel's image optimization, content hashing, and query parameter support for resizing images.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/react.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst logo = new URL('logo.svg', import.meta.url);\n\nexport function Logo() {\n  return <img src={logo} alt=\"logo\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing External Stylesheet in SVG\nDESCRIPTION: Demonstrates how to reference an external CSS file in an SVG document using the xml-stylesheet processing instruction. Parcel will process the referenced CSS file and its dependencies.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/svg.md#2025-04-09_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml-stylesheet href=\"style.css\" ?>\n<svg viewBox=\"0 0 240 20\" xmlns=\"http://www.w3.org/2000/svg\">\n  <text>Red text</text>\n</svg>\n```\n\nLANGUAGE: CSS\nCODE:\n```\ntext {\n  fill: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating .gitignore for New Cache Location\nDESCRIPTION: Updates the .gitignore file to exclude the new Parcel 2 cache directory. The cache location has changed from '.cache' to '.parcel-cache'.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/parcel-1.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.parcel-cache\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Data File\nDESCRIPTION: Example JSON file content that can be read using fs.readFileSync.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/node-emulation.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"foo\": \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Open Graph Metadata with Image Reference in Parcel\nDESCRIPTION: Example of using Open Graph metadata in a meta tag with an image reference. Parcel will process the image and update the URL to include a content hash.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/html.md#2025-04-09_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<meta property=\"og:image\" content=\"100x100.png\" />\n```\n\n----------------------------------------\n\nTITLE: Importing SVGs as React Components\nDESCRIPTION: Demonstrates how to import an SVG file as a React component after configuring the SVG React transformer. The SVG can be used directly as a JSX component in the render function.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/react.md#2025-04-09_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport AddIcon from \"./AddIcon.svg\";\n\nexport function AddButton() {\n  return (\n    <button aria-label=\"Add\">\n      <AddIcon />\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Parcel with HTTPS Support\nDESCRIPTION: A shell command that starts Parcel's development server with HTTPS support using an automatically generated self-signed certificate. This is useful for testing features that require secure connections.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/development.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nparcel src/index.html --https\n```\n\n----------------------------------------\n\nTITLE: Importing GraphQL Fragments\nDESCRIPTION: Shows how to import all fragments or specific fragments from another GraphQL file using special comment syntax.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/graphql.md#2025-04-09_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# import \"fragments.graphql\"\n# import * from \"fragments.graphql\"\n```\n\nLANGUAGE: graphql\nCODE:\n```\n# import UserFragment, AddressFragment from \"fragments.graphql\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Plugin Parcel Package in JSON\nDESCRIPTION: This snippet demonstrates the index.json file for a multi-plugin Parcel package. It defines custom transformers and packagers for XML files.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/configuration.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transformers\": {\n    \"*.xml\": [\"parcel-transformer-xml\"]\n  },\n  \"packagers\": {\n    \"*.xml\": \"parcel-packager-xml\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Picture Element for Responsive Images with Multiple Formats in HTML\nDESCRIPTION: This HTML example shows how to use the picture element to provide different image formats (AVIF, WebP, JPEG) and sizes for responsive design. It creates a fallback hierarchy with the most optimized formats first.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/image.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>HTML Example</title>\n  </head>\n  <body>\n    <picture>\n      <source srcset=\"image.jpeg?as=avif&width=800\" type=\"image/avif\" />\n      <source srcset=\"image.jpeg?as=webp&width=800\" type=\"image/webp\" />\n      <source srcset=\"image.jpeg?width=800\" type=\"image/jpeg\" />\n      <img src=\"image.jpeg?width=200\" alt=\"test image\" />\n    </picture>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Importing GraphQL Query in JavaScript\nDESCRIPTION: Demonstrates how to import a GraphQL query from a separate file into a JavaScript file using Parcel.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/graphql.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport query from './query.graphql';\n```\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  user(id: 5) {\n    firstName,\n    lastName\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Respecting Targets in Parcel Namer Plugin (JavaScript)\nDESCRIPTION: This snippet demonstrates how to respect the Target associated with a bundle in a Namer plugin. It checks if the bundle is an entry bundle and uses the target.distEntry as the output filename when available, adhering to user configurations in package.json.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/namer.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Namer} from '@parcel/plugin';\n\nexport default new Namer({\n  name({bundle, bundleGraph}) {\n    let bundleGroup = bundleGraph\n      .getBundleGroupsContainingBundle(bundle)[0];\n    let isEntry = bundleGraph.isEntryBundleGroup(bundleGroup);\n    let bundleGroupBundles = bundleGraph\n      .getBundlesInBundleGroup(bundleGroup);\n    let mainBundle = bundleGroupBundles.find(b =>\n      b.getEntryAssets()\n       .some(a => a.id === bundleGroup.entryAssetId),\n  );\n\n    if (\n      isEntry && \n      bundle.id === mainBundle.id && \n      bundle.target?.distEntry\n    ) {\n      return bundle.target.distEntry;\n    }\n\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Naming Patterns for CSS Modules in Parcel\nDESCRIPTION: Shows how to configure custom naming patterns for CSS modules using the pattern option in package.json.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@parcel/transformer-css\": {\n    \"cssModules\": {\n      \"pattern\": \"my-company-[name]-[hash]-[local]\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parcel Configuration for Using cssnano Instead of lightningcss\nDESCRIPTION: Parcel configuration (.parcelrc) to override the default CSS optimizer and use cssnano instead of the default lightningcss minifier.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"optimizers\": {\n    \"*.css\": [\"@parcel/optimizer-cssnano\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Source Map Support in a Packager Plugin\nDESCRIPTION: This example shows how to implement source map support in a Packager plugin. It uses @parcel/source-map for manipulation and includes functions for combining asset source maps and inserting source map references.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/packager.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Packager} from '@parcel/plugin';\nimport SourceMap from '@parcel/source-map';\nimport {countLines} from '@parcel/utils';\n\nexport default new Packager({\n  async package({bundle, options, getSourceMapReference}) {\n    let promises = [];\n    bundle.traverseAssets(asset => {\n      promises.push(Promise.all([\n        asset.getCode(),\n        asset.getMap()\n      ]));\n    });\n\n    let assets = await Promise.all(promises);\n    let contents = '';\n    let map = new SourceMap(options.projectRoot);\n    let lineOffset = 0;\n\n    for (let [code, map] of assets) {\n      contents += code + '\\n';\n      map.addSourceMap(map, lineOffset);\n      lineOffset += countLines(code) + 1;\n    }\n\n    contents += `\\n//# sourceMappingURL=${await getSourceMapReference(map)}\\n`;\n    return {contents, map};\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Targets for CSS Transpilation\nDESCRIPTION: Sets the browserslist field in package.json to specify target browsers for CSS transpilation in Parcel.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"browserslist\": \"> 0.5%, last 2 versions, not dead\"\n}\n```\n\n----------------------------------------\n\nTITLE: Vendor Prefixing Example in CSS\nDESCRIPTION: Demonstrates how Parcel automatically adds vendor prefixes to CSS properties like image-set() based on browser targets.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_22\n\nLANGUAGE: css\nCODE:\n```\n.logo {\n  background: image-set(url(logo.png) 2x, url(logo.png) 1x);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bundle Inlining in a Packager Plugin\nDESCRIPTION: This example shows how to implement bundle inlining in a Packager plugin. It uses the replaceInlineReferences function from @parcel/utils to replace dependency IDs with the contents of inline bundles.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/packager.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Packager} from '@parcel/plugin';\nimport {replaceInlineReferences} from '@parcel/utils';\n\nexport default new Packager({\n  async package({bundle, bundleGraph, getInlineBundleContents}) {\n    // ...\n\n    ({contents, map} = replaceInlineReferences({\n      bundle,\n      bundleGraph,\n      contents,\n      map,\n      getInlineBundleContents,\n      getInlineReplacement: (dependency, inlineType, contents) => ({\n        from: dependency.id,\n        to: contents\n      })\n    }));\n\n    return {contents, map};\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Script Imports for Profile Page\nDESCRIPTION: HTML for a profile page that loads a JavaScript module. Used to demonstrate how shared dependencies between pages are extracted into separate bundles.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/code-splitting.md#2025-04-09_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<div id=\"app\"></div>\n<script type=\"module\" src=\"profile.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Module Pattern for Grid Compatibility in Parcel\nDESCRIPTION: Shows the correct configuration for CSS module naming patterns when using CSS grid, ensuring the [local] placeholder is at the end.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@parcel/transformer-css\": {\n    \"cssModules\": {\n      // ❌ [local] must be at the end so that\n      // auto-generated grid line names work\n      \"pattern\": \"[local]-[hash]\"\n      // ✅ do this instead\n      \"pattern\": \"[hash]-[local]\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Reporter Plugin Example\nDESCRIPTION: Example of a basic Reporter plugin that logs bundle count and build time on successful builds.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/reporter.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Reporter} from '@parcel/plugin';\n\nexport default new Reporter({\n  report({event}) {\n    if (event.type === 'buildSuccess') {\n      let bundles = event.bundleGraph.getBundles();\n      process.stdout.write(`✨ Built ${bundles.length} bundles in ${event.buildTime}ms!\\n`);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing Less File in HTML\nDESCRIPTION: Example of how to link a Less stylesheet in an HTML file. Parcel will automatically detect and process the Less file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/less.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"style.less\" />\n```\n\n----------------------------------------\n\nTITLE: Using url() Function in CSS with Parcel\nDESCRIPTION: Shows how to reference an image file using the url() function in CSS, which will be processed by Parcel.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/css.md#2025-04-09_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  background: url(images/background.png);\n}\n```\n\n----------------------------------------\n\nTITLE: Build Start Event Handler\nDESCRIPTION: Reporter plugin implementation that handles the buildStart event, triggered at the beginning of each build or rebuild.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/reporter.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Reporter} from '@parcel/plugin';\n\nexport default new Reporter({\n  report({event}) {\n    if (event.type === 'buildStart') {\n      process.stdout.write('Started build!\\n');\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Eleventy Page Frontmatter in YAML\nDESCRIPTION: This YAML frontmatter configures the layout and navigation properties for an Eleventy-powered page. It sets the layout, navigation key, title, and order for the plugin system API documentation.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/api.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: layout.njk\neleventyNavigation:\n  key: plugin-system-api\n  title: API\n  order: 17\nsummary: \"The remaining types specified in `@parcel/types`\"\n---\n```\n\n----------------------------------------\n\nTITLE: Basic Library Package Configuration\nDESCRIPTION: Initial package.json configuration for a library project using Parcel. It defines the source entry point and main output target.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/getting-started/library.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-library\",\n  \"version\": \"1.0.0\",\n  \"source\": \"src/index.js\",\n  \"main\": \"dist/main.js\",\n  \"devDependencies\": {\n    \"parcel\": \"latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Parcel Resolver Plugin Implementation\nDESCRIPTION: Demonstrates a basic resolver plugin that handles a special module resolution while allowing other dependencies to be handled by the next resolver in the pipeline.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/resolver.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Resolver} from '@parcel/plugin';\nimport path from 'path';\n\nexport default new Resolver({\n  async resolve({specifier}) {\n    if (specifier === 'special-module') {\n      return {\n        filePath: path.join(__dirname, 'special-module.js')\n      };\n    }\n\n    // Let the next resolver in the pipeline handle\n    // this dependency.\n    return null;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using iframes in HTML with Parcel\nDESCRIPTION: Example of embedding another HTML page using the iframe element. Parcel processes the referenced HTML file and maintains a stable URL.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/html.md#2025-04-09_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"iframe.html\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: CommonJS Import Patterns\nDESCRIPTION: Examples of supported and unsupported CommonJS require patterns.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/scope-hoisting.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ Static property access\nconst math = require('./math');\nconsole.log(math.add(2, 3));\n\n// ✅ Static destructuring\nconst {add} = require('./math');\n\n// ✅ Static property assignment\nconst add = require('./math').add;\n\n// 🚫 Non-static property access\nconst math = require('./math');\nconsole.log(math[op](2, 3));\n\n// 🚫 Inline require\ndoSomething(require('./math'));\nconsole.log(require('./math').add(2, 3));\n```\n\n----------------------------------------\n\nTITLE: Cache Invalidation in Parcel Resolver\nDESCRIPTION: Demonstrates how to implement cache invalidation for file system operations in a resolver plugin.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/resolver.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Resolver} from '@parcel/plugin';\nimport path from 'path';\n\nexport default new Resolver({\n  async resolve({specifier, options}) {\n    let aliasFile = path.join(options.projectRoot, 'alias.json');\n\n    try {\n      let aliasConfig = await options.inputFS.readFile(aliasFile);\n      let aliases = JSON.parse(aliasConfig);\n      return {\n        filePath: aliases[specifier] || null,\n        invalidateOnFileChange: [aliasFile]\n      };\n    } catch (err) {\n      return {\n        invalidateOnFileCreate: [{filePath: aliasFile}]\n      };\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Page Linking with Anchor Element in Parcel\nDESCRIPTION: Example of linking to another HTML page using the anchor element. Parcel will maintain stable URLs for these links without adding content hashes.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/html.md#2025-04-09_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"other.html\">Other page</a>\n```\n\n----------------------------------------\n\nTITLE: Scope Hoisted Output Example\nDESCRIPTION: Shows how Parcel compiles and renames functions when scope hoisting is applied.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/scope-hoisting.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction $fa6943ce8a6b29$add(a, b) {\n  return a + b;\n}\n\nconsole.log($fa6943ce8a6b29$add(2, 3));\n```\n\n----------------------------------------\n\nTITLE: Concatenating Source Maps in a Packager Plugin\nDESCRIPTION: Demonstrates how to concatenate source maps from multiple assets when packaging a bundle in Parcel. This ensures line offsets are properly maintained in the final source map.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/source-maps.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Packager} from '@parcel/plugin';\nimport SourceMap from '@parcel/source-map';\n\nexport default new Packager({\n  async package({bundle, options}) {\n    // Read content and source maps for each asset in the bundle.\n    let promises = [];\n    bundle.traverseAssets(asset => {\n      promises.push(Promise.all([\n        asset.getCode(),\n        asset.getMap()\n      ]);\n    });\n\n    let results = await Promise.all(promises);\n\n    // Instantiate a string to hold the bundle contents, and\n    // a SourceMap to hold the combined bundle source map.\n    let contents = '';\n    let map = new SourceMap(options.projectRoot);\n    let lineOffset = 0;\n\n    // Add the contents of each asset.\n    for (let [code, map] of assets) {\n      contents += code + '\\n';\n\n      // Add the source map if the asset has one, and offset\n      // it by the number of lines in the bundle so far.\n      if (map) {\n        map.addSourceMap(map, lineOffset);\n      }\n\n      // Add the number of lines in this asset.\n      lineOffset += countLines(code) + 1;\n    }\n\n    // Return the contents and map.\n    return {contents, map};\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Building Web Extension with Parcel CLI\nDESCRIPTION: Command to build a web extension using Parcel CLI, specifying the manifest.json as entry point and using @parcel/config-webextension configuration.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/web-extension.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nparcel build manifest.json --config @parcel/config-webextension\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Plugin Time Analysis\nDESCRIPTION: SQL query for Perfetto that identifies which plugins are consuming the most time during the build. This helps pinpoint potential optimization targets among both core and third-party plugins.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/profiling.md#2025-04-09_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  s.category, name, SUM(CAST(dur AS double)/1000/1000) as dur_ms\nfrom\n  slice s\nleft join\n  args using(arg_set_id)\nwhere\n  args.flat_key = \"args.name\"\ngroup by s.category, name\norder by dur_ms desc\n```\n\n----------------------------------------\n\nTITLE: Processing Query Parameters in Parcel Transformer\nDESCRIPTION: Shows how to access and use query parameters within a Parcel Transformer. The example demonstrates accessing width and height parameters from the asset query to resize an image.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/transformer.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Transformer} from '@parcel/plugin';\n\nexport default new Transformer({\n  async transform({asset}) {\n    let buffer = await asset.getBuffer();\n\n    let result = resize(\n      buffer,\n      asset.query.width,\n      asset.query.height\n    );\n\n    asset.setBuffer(result);\n    return [asset];\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Package Dependencies with link: Protocol in package.json\nDESCRIPTION: Demonstrates how to configure a package.json file to use a local transformer package as a dependency using Yarn's link: protocol. This allows referencing local directories as packages for development purposes.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/plugins.md#2025-04-09_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"dependencies\": {\n    \"parcel\": \"^2.0.0\",\n    \"parcel-transformer-foo\": \"link:./parcel-transformer-foo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing in Parcel via API\nDESCRIPTION: Code example showing how to enable tracing when using Parcel's JavaScript API. It demonstrates setting the shouldTrace option to true and adding the tracer reporter to generate trace JSON files.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/profiling.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Parcel} from '@parcel/core';\n\nlet bundler = new Parcel({\n  // ...\n  shouldTrace: true,\n  additionalReporters: [{\n    packageName: '@parcel/reporter-tracer',\n    resolveFrom: __dirname,\n  }],\n});\n```\n\n----------------------------------------\n\nTITLE: Inlining File Contents Without Transformation in JavaScript\nDESCRIPTION: Demonstrates how to inline the contents of a file as a string without running it through Parcel transformers, using Node's fs module.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/bundle-inlining.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport fs from 'fs';\n\nconst sourceCode = fs.readFileSync(__dirname + '/foo.js', 'utf8');\n```\n\n----------------------------------------\n\nTITLE: Including CoffeeScript in HTML with Parcel\nDESCRIPTION: Demonstrates how to include a CoffeeScript file in an HTML document using a script tag with type='module'.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/coffeescript.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\" src=\"app.coffee\"></script>\n```\n\n----------------------------------------\n\nTITLE: Parcel JS Transformer Configuration\nDESCRIPTION: Configuration options in package.json for disabling environment variable and fs.readFileSync inlining features.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/node-emulation.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"dependencies\": {\n    ...\n  },\n  \"@parcel/transformer-js\": {\n    \"inlineFS\": false,\n    \"inlineEnvironment\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Package Exports in Parcel\nDESCRIPTION: This configuration snippet shows how to enable package exports support in Parcel by adding a configuration option to the project's package.json file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@parcel/resolver-default\": {\n    \"packageExports\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Files Using Glob Pattern in JavaScript\nDESCRIPTION: Demonstrates how to use Parcel 2's glob resolver plugin to import multiple files simultaneously using a glob pattern\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/rc0/rc0.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as files from './files/*.js';\n\nconsole.log(files.foo);\n```\n\n----------------------------------------\n\nTITLE: File System Reading Example\nDESCRIPTION: Demonstrates how to use fs.readFileSync with path joining to read file contents in a Parcel project.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/node-emulation.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport fs from \"fs\";\nimport path from \"path\";\n\nconst data = fs.readFileSync(path.join(__dirname, \"data.json\"), \"utf8\");\nconsole.log(data);\n```\n\n----------------------------------------\n\nTITLE: Starting Parcel with Custom HTTPS Certificate\nDESCRIPTION: A shell command that starts Parcel's development server with HTTPS using a custom certificate and private key. This allows for more advanced HTTPS configurations during development.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/development.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nparcel src/index.html --cert certificate.cert --key private.key\n```\n\n----------------------------------------\n\nTITLE: Using PostHTML Include Plugin in Parcel\nDESCRIPTION: Shows how to use the posthtml-include plugin to inline another HTML file within the main HTML file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/html.md#2025-04-09_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"posthtml-include\": {}\n  }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Home</title>\n  </head>\n  <body>\n    <include src=\"header.html\"></include>\n    <main>My content</main>\n  </body>\n</html>\n```\n\nLANGUAGE: html\nCODE:\n```\n<header>This is my header</header>\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Example of .env file configuration for setting environment variables in Parcel projects.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/node-emulation.md#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nAPP_NAME=test\nAPI_KEY=12345\n```\n\n----------------------------------------\n\nTITLE: Configuring API Proxy with JavaScript Middleware\nDESCRIPTION: A JavaScript module that configures Parcel's API proxy using http-proxy-middleware. This approach allows for more complex proxy configurations by using Connect-compatible middleware to handle request routing.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/development.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createProxyMiddleware } = require(\"http-proxy-middleware\");\n\nmodule.exports = function (app) {\n  app.use(\n    \"/api\",\n    createProxyMiddleware({\n      target: \"http://localhost:8000/\",\n      pathRewrite: {\n        \"^/api\": \"\",\n      },\n    })\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards in Package Exports\nDESCRIPTION: This example illustrates how to use wildcards in package exports to export multiple files without listing them individually.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"foo\",\n  \"exports\": {\n    \"./*\": \"./dist/*.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiled Output of Function Generation Macro in JavaScript\nDESCRIPTION: Displays the resulting JavaScript code after the glob matching function macro has been evaluated.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/macros.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst isMatch = function(string) {\n  return /^(?:foo(?:\\/(?!\\.)(?:(?:(?!(?:^|\\/)\\.).)*?)\\/|\\/|$)bar\\.js)$/.test(string);\n};\n```\n\n----------------------------------------\n\nTITLE: Compiled Output of Macro Usage in JavaScript\nDESCRIPTION: Shows the resulting JavaScript code after the macro has been evaluated at build time, with the library completely compiled away.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/macros.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(/foo(?:zap?|ba[rz])/);\n```\n\n----------------------------------------\n\nTITLE: Gzip-Only Compression Configuration\nDESCRIPTION: JSON configuration for enabling only Gzip compression in .parcelrc file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/production.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compressors\": {\n    \"*.{html,css,js,svg,map}\": [\"@parcel/compressor-gzip\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiled Output of Random Number Macro in JavaScript\nDESCRIPTION: Shows the resulting JavaScript code after the random number macro has been evaluated at build time.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/macros.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(0.006024956627355804);\n```\n\n----------------------------------------\n\nTITLE: Async Macro for Fetching Text in TypeScript\nDESCRIPTION: Demonstrates an async macro that fetches text from a URL at build time and inlines the result.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/macros.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {fetchText} from './macro.ts' with {type: 'macro'};\n\nconsole.log(fetchText('http://example.com'));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function fetchText(url: string) {\n  let res = await fetch(url);\n  return res.text();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Paint Worklets in JavaScript\nDESCRIPTION: Shows how to add a CSS Houdini paint worklet using the CSS.paintWorklet.addModule method with a URL constructor in Parcel 2.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/rc0/rc0.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCSS.paintWorklet.addModule(new URL('worklet.js', import.meta.url));\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Modules Globally in package.json\nDESCRIPTION: Example of how to enable CSS modules for all CSS files using the @parcel/transformer-css configuration in package.json, replacing the previous PostCSS modules option.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/v2-4-0/v2-4-0.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@parcel/transformer-css\": {\n    \"modules\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Import Attributes in JSON\nDESCRIPTION: Shows how to configure Babel to support import attributes using the @babel/preset-env with shippedProposals option.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/macros.md#2025-04-09_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"shippedProposals\": true\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Glob Pattern Alias Configuration\nDESCRIPTION: Using glob patterns for source mapping in package.json\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/dependency-resolution.md#2025-04-09_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": {\n    \"./dist/*\": \"./src/$1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing package.json main field for web applications\nDESCRIPTION: Example showing how to remove the main field from package.json for web applications, as Parcel 2 infers library projects from this field. This configuration change prevents Parcel from using the main field as the output path.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/parcel-1.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"parcel index.html\",\n    \"build\": \"parcel build index.html\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"parcel index.html\",\n    \"build\": \"parcel build index.html\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Parcel Build Command\nDESCRIPTION: Basic command to run Parcel in production mode to bundle and optimize an application.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/production.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nparcel build src/index.html\n```\n\n----------------------------------------\n\nTITLE: Implementing a Gzip Compressor Plugin in Parcel Bundler\nDESCRIPTION: This snippet demonstrates how to create a basic compressor plugin for Parcel Bundler that applies gzip compression to bundle output streams. The compress function receives a stream containing the final contents of bundles and returns a new stream with the compressed data along with a file extension type to append.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/compressor.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Compressor} from '@parcel/plugin';\n\nexport default new Compressor({\n  async compress({stream}) {\n    return {\n      stream: gzipStream(stream),\n      type: 'gz'\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Parcel Raw Transformer\nDESCRIPTION: Shows how to configure the @parcel/transformer-raw plugin in .parcelrc to handle specific file types as raw imports, maintaining Parcel 1 behavior for certain assets.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/parcel-1.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"transformers\": {\n    \"*.{zip,tgz}\": [\"@parcel/transformer-raw\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Image Optimization HTML\nDESCRIPTION: HTML example showing how to use query parameters for image optimization, including WebP conversion and multiple sizes.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/production.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source\n    type=\"image/webp\"\n    srcset=\"image.jpg?as=webp&width=400, image.jpg?as=webp&width=800 2x\"\n  />\n  <source\n    type=\"image/jpeg\"\n    srcset=\"image.jpg?width=400, image.jpg?width=800 2x\"\n  />\n  <img src=\"image.jpg?width=400\" width=\"400\" />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: YAML Data Structure Definition\nDESCRIPTION: Example YAML file structure containing a nested array under the 'hello' key. The YAML file defines an array with two string elements: 'world' and 'computer'.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/yaml.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhello:\n  - world\n  - computer\n```\n\n----------------------------------------\n\nTITLE: Modifying HTML Script Tag for Module Support\nDESCRIPTION: Updates the HTML script tag to use type=\"module\", which is required in Parcel 2 for supporting ES module syntax in JavaScript files.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/parcel-1.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"app.js\"></script>\n  </head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Running Parcel Build with Bundle Buddy Reporter\nDESCRIPTION: This command runs a Parcel build on src/index.html and uses the @parcel/reporter-bundle-buddy plugin to generate a Bundle Buddy compatible report. The generated files will be output to the dist directory.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/production.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nparcel build src/index.html --reporter @parcel/reporter-bundle-buddy\n```\n\n----------------------------------------\n\nTITLE: Creating a Server Entry Component in React\nDESCRIPTION: A React component marked with 'use server-entry' directive to serve as the entry point for server rendering. Returns the complete HTML structure for the page.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n\"use server-entry\";\n\nexport function Page() {\n  return (\n    <html>\n      <head>\n        <title>Parcel React Server App</title>\n      </head>\n      <body>\n        <h1>Hello world!</h1>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Transform for Jest\nDESCRIPTION: This JavaScript file configures Babel to transform JavaScript and TypeScript files for Jest testing, using the babel-preset-react-app preset.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/cra.md#2025-04-09_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst babelJest = require('babel-jest').default;\n\nmodule.exports = babelJest.createTransformer({\n  presets: [\n    [\n      require.resolve('babel-preset-react-app'),\n      {\n        runtime: 'automatic'\n      },\n    ],\n  ],\n  babelrc: false,\n  configFile: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Parcel with npm\nDESCRIPTION: Command to install Parcel as a development dependency using npm package manager.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/getting-started/library.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev parcel\n```\n\n----------------------------------------\n\nTITLE: Creating a New React Server Components App with Parcel\nDESCRIPTION: Command-line instructions to scaffold a new server-rendered React app with Parcel. This creates a starter project with React Server Components configured.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm create parcel react-server my-rsc-app\ncd my-rsc-app\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Updating SVG Import Syntax for Parcel\nDESCRIPTION: This code demonstrates how to update the import syntax for SVG files when using Parcel's SVG React component transformation.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/cra.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport Logo from 'jsx:./logo.svg';\n```\n\n----------------------------------------\n\nTITLE: Running Automatic Migration Script for Create React App to Parcel\nDESCRIPTION: This command runs the cra-to-parcel script to automatically migrate an un-ejected Create React App project to use Parcel.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/cra.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cra-to-parcel\n```\n\n----------------------------------------\n\nTITLE: Enabling Package Exports Support in Parcel v2.9.0\nDESCRIPTION: Configuration snippet for enabling the new package.json exports feature in Parcel v2.9.0. This must be added to your project's root package.json file to opt into the feature, as it can be a breaking change for some packages.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/v2-9-0/v2-9-0.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@parcel/resolver-default\": {\n    \"packageExports\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Custom Blocks Configuration in .vuerc\nDESCRIPTION: JSON configuration for Vue custom blocks in a .vuerc file. It maps the 'docs' custom block to a preprocessor script for handling documentation within components.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/vue.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customBlocks\": {\n    \"docs\": \"./src/docs-preprocessor.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for GraphQL and Macros\nDESCRIPTION: This configuration enables the use of GraphQL imports and other Babel macros in a Parcel project.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/cra.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"babel-plugin-macros\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Parcel with Yarn\nDESCRIPTION: Command to install Parcel as a development dependency using Yarn package manager.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/getting-started/library.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev parcel\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structure in TOML Format\nDESCRIPTION: This example shows how to structure data in a TOML file format. It defines an array named 'hello' containing two string elements that can be imported and used in JavaScript.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/toml.md#2025-04-09_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nhello = [\n  \"world\",\n  \"computer\"\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Parcel Package in package.json\nDESCRIPTION: Shows how to update the Parcel package name from 'parcel-bundler' to 'parcel' in the package.json file. This is a crucial step when migrating from Parcel 1 to Parcel 2.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/parcel-1.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"parcel\": \"^2.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pug Configuration with Locals\nDESCRIPTION: Example of Pug configuration file (.pugrc) defining local variables for templates.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/pug.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"locals\": {\n    \"name\": \"Puggy\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SugarSS as CSS Module in JavaScript\nDESCRIPTION: This example demonstrates how to import a SugarSS file as a CSS module in JavaScript or TypeScript. The .module.sss extension is used to enable CSS modules functionality.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/sugarss.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as classes from './style.module.sss';\n\ndocument.body.className = classes.body;\n```\n\n----------------------------------------\n\nTITLE: Using URL Constructor for Non-Code Asset Imports\nDESCRIPTION: Demonstrates how to use the URL constructor to import non-code assets in JavaScript, which is the preferred method in Parcel 2.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/parcel-1.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst downloadUrl = new URL('download.zip', import.meta.url);\n\ndocument.body.innerHTML = `<a href=\"${downloadUrl}\">Download</a>`;\n```\n\n----------------------------------------\n\nTITLE: Directly Compiling Sass Using Parcel CLI\nDESCRIPTION: Command-line example for directly building a Sass/SCSS file using the Parcel CLI, which will compile the Sass file and apply all configured transformations.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/sass.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nparcel build style.scss\n```\n\n----------------------------------------\n\nTITLE: Compiling Stylus Using Parcel CLI\nDESCRIPTION: Demonstrates the command to directly compile a Stylus file using the Parcel command-line interface.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/stylus.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nparcel build style.styl\n```\n\n----------------------------------------\n\nTITLE: Setting Browserslist for Transpilation\nDESCRIPTION: Adds a browserslist configuration to package.json to enable transpilation in Parcel 2, which is not enabled by default unlike in Parcel 1.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/parcel-1.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"browserslist\": \"> 0.5%, last 2 versions, not dead\",\n  \"scripts\": {\n    \"start\": \"parcel index.html\",\n    \"build\": \"parcel build index.html\"\n  },\n  \"devDependencies\": {\n    \"parcel\": \"latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing CSS Macro in Parcel with Jest\nDESCRIPTION: This example demonstrates how to unit test a CSS macro by mocking the 'this' context that Parcel would normally provide. The test verifies that the addAsset function is called with the expected CSS content and that the correct className is returned.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/macros.md#2025-04-09_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {css} from '../src/css.ts';\n\nit('should generate css', () => {\n  let addAsset = jest.fn();\n  let className = css.call({\n    addAsset,\n    // ...\n  }, 'color: red');\n\n  expect(addAsset).toHaveBeenCalledWith({\n    type: 'css',\n    content: '.ax63jk4 { color: red }'\n  });\n  expect(className).toBe('ax63jk4');\n});\n```\n\n----------------------------------------\n\nTITLE: Renaming minification CLI option\nDESCRIPTION: Migration from --no-minify to --no-optimize CLI option. This option prevents optimization steps including minification in Parcel 2.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/parcel-1.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nparcel build index.js --no-minify\n```\n\nLANGUAGE: bash\nCODE:\n```\nparcel build index.js --no-optimize\n```\n\n----------------------------------------\n\nTITLE: Default Code Block Rendering HTML Structure\nDESCRIPTION: Shows the default HTML structure generated when rendering a code block with the render prop in MDX.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/mdx.md#2025-04-09_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<pre>\n  <code class=\"lang-tsx\">\n    &lt;div&gt;Hello world!&lt;/div&gt;\n  </code>\n</pre>\n<div>Hello world!</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Image Quality with Sharp Configuration\nDESCRIPTION: This JSON configuration sets a default quality of 80% for all images in the project using a sharp.config.json file. This will re-encode all images to reduce file size while maintaining reasonable quality.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/image.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"quality\": 80\n}\n```\n\n----------------------------------------\n\nTITLE: Writing TypeScript for Parcel Debugging\nDESCRIPTION: This TypeScript snippet shows a simple script that can be used to test debugging setup in a Parcel project. It sets the innerHTML of an element with the id 'greeting'.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/debugging.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst variable: string = \"Hello, World!\";\n\ndocument.getElementById(\"greeting\").innerHTML = variable;\n```\n\n----------------------------------------\n\nTITLE: Configuring Parcel Targets for RSC\nDESCRIPTION: Package.json configuration defining client and server targets for React Server Components setup.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client\": \"dist/index.html\",\n  \"server\": \"dist/server.js\",\n  \"targets\": {\n    \"client\": {\n      \"source\": \"src/index.html\",\n      \"context\": \"react-client\"\n    },\n    \"server\": {\n      \"source\": \"server/server.js\",\n      \"context\": \"react-server\"\n    }\n  },\n  \"scripts\": {\n    \"start\": \"parcel\",\n    \"build\": \"parcel build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Parcel Service Worker Package via Yarn\nDESCRIPTION: This command installs the @parcel/service-worker package as a dependency in your project using Yarn.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/javascript.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @parcel/service-worker\n```\n\n----------------------------------------\n\nTITLE: Creating Server Component Entry\nDESCRIPTION: Implementation of a server component with database integration and markdown rendering.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n\"use server-entry\";\n\nexport async function Comments() {\n  // Load data from a database...\n  let comments = await db.getComments();\n\n  return comments.map((comment) => (\n    <article key={comment.id}>\n      <p>Posted by: {comment.user}</p>\n      {renderMarkdown(comment.body)}\n    </article>\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Live Code Rendering in MDX\nDESCRIPTION: Example of how to render live code examples inline in MDX using the render prop on code fences.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/mdx.md#2025-04-09_snippet_7\n\nLANGUAGE: md\nCODE:\n```\n```tsx render\n<div>Hello world!</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Advanced Format-Specific Image Configuration with Sharp\nDESCRIPTION: This more complex Sharp configuration defines format-specific optimization options: JPEG with custom quality and chroma subsampling, WebP with near-lossless compression, and PNG with palette optimization.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/image.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jpeg\": {\n    \"quality\": 75,\n    \"chromaSubsampling\": \"4:4:4\"\n  },\n  \"webp\": {\n    \"nearLossless\": true\n  },\n  \"png\": {\n    \"palette\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing React Server Functions in JavaScript\nDESCRIPTION: A server action that increments a like count in a database. The function is marked with the 'use server' directive at the top of the file to indicate it should run on the server.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\"use server\";\n\nexport async function likeComment(id) {\n  let newLikeCount = await db.incrementLikeCount(id);\n  return newLikeCount;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux System Limits for Parcel Watcher\nDESCRIPTION: System configuration settings for Linux to increase file watcher limits when encountering 'No space left on device' errors. These settings modify the fs.inotify parameters in sysctl to allow for more file watchers.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/development.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfs.inotify.max_queued_events = 16384\nfs.inotify.max_user_instances = 128\nfs.inotify.max_user_watches = 16384\n```\n\n----------------------------------------\n\nTITLE: Structuring HTML for Parcel Debugging\nDESCRIPTION: This HTML snippet demonstrates the basic structure for a Parcel project that can be easily debugged. It includes a reference to a TypeScript file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/debugging.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Chrome Debugging Example</title>\n  </head>\n  <body>\n    <h1 id=\"greeting\"></h1>\n    <script src=\"./index.ts\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Rendering for React Server Components\nDESCRIPTION: Shows how to configure Parcel for static rendering of React Server Components. It includes package.json configuration and a basic React component structure for static pages.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"react-static\": {\n      \"source\": \"pages/**/*.{js,tsx,mdx}\",\n      \"context\": \"react-server\"\n    }\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { PageProps } from \"@parcel/rsc\";\nimport \"../src/client\";\n\nexport default function Index({ pages, currentPage }: PageProps) {\n  return (\n    <html>\n      <body>\n        <nav>\n          <ul>\n            {pages.map((page) => (\n              <li key={page.url}>\n                <a\n                  href={page.url}\n                  aria-current={\n                    page.url === currentPage.url ? \"page\" : undefined\n                  }\n                >\n                  {page.name.replace(\".html\", \"\")}\n                </a>\n              </li>\n            ))}\n          </ul>\n        </nav>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling SugarSS with Parcel CLI\nDESCRIPTION: This command shows how to directly compile a SugarSS file using the Parcel CLI. It builds the specified .sss file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/sugarss.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nparcel build style.sss\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stateless Validator Plugin in JavaScript for Parcel\nDESCRIPTION: This code demonstrates how to create a basic stateless validator plugin for Parcel. It shows how to throw diagnostic errors with code highlighting, file paths, and helpful hints. Stateless validators process one asset at a time and can be run across multiple threads for better performance.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/validator.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Validator } from \"@parcel/plugin\";\n\nexport default new Validator({\n  async validate({ asset }) {\n    // ...\n    throw new ThrowableDiagnostic({\n      diagnostic: {\n        message: \"Unexpected console statement\",\n        filePath: asset.filePath,\n        language: asset.type,\n        stack: err.stack,\n        name: err.name,\n        codeFrame: {\n          code: await asset.getCode(),\n          codeHighlights: [\n            {\n              start: {\n                line: 1,\n                column: 5,\n              },\n              end: {\n                line: 2,\n                column: 3,\n              },\n              message: \"This console statement is not allowed\",\n            },\n          ],\n        },\n        hints: [\"Remove the console.log(...)\"],\n      },\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Parcel Targets for Mixed Rendering\nDESCRIPTION: Package.json configuration that sets up multiple build targets for server and static rendering. Defines server entry point and static page source directory with React server context.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"server\": \"dist/server.js\",\n  \"targets\": {\n    \"server\": {\n      \"source\": \"src/server.js\",\n      \"context\": \"react-server\"\n    },\n    \"react-static\": {\n      \"source\": \"pages/**/*.js\",\n      \"distDir\": \"dist/static\",\n      \"context\": \"react-server\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading an Image in CoffeeScript\nDESCRIPTION: Demonstrates how to load an image in CoffeeScript using the URL constructor and __filename for URL dependencies.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/coffeescript.md#2025-04-09_snippet_3\n\nLANGUAGE: coffeescript\nCODE:\n```\nimg = document.createElement 'img'\nimg.src = new URL 'hero.jpg', 'file:' + __filename\ndocument.body.appendChild img\n```\n\n----------------------------------------\n\nTITLE: Concatenating ASTs with Source Maps in a Packager\nDESCRIPTION: Shows how to handle source maps when concatenating abstract syntax trees (ASTs) instead of source code in a Parcel packager plugin.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/source-maps.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Packager} from '@parcel/plugin';\nimport SourceMap from '@parcel/source-map';\n\nexport default new Packager({\n  async package({bundle, options}) {\n    // Do the AST concatenation and return the compiled result\n    let compilationResult = concatAndCompile(bundle);\n\n    // Create the final packaged sourcemap\n    let map = new SourceMap(options.projectRoot);\n    if (compilationResult.map) {\n      map.addVLQMap(compilationResult.map);\n    }\n\n    // Return the compiled code and map\n    return {\n      code: compilationResult.code,\n      map,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Express Server Setup for Mixed Content Serving\nDESCRIPTION: Express server implementation that handles both static and dynamic content requests. Serves HTML files for direct browser requests and RSC files for client navigation requests.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from \"express\";\n\nconst app = express();\napp.use(\"/client\", express.static(\"dist/client\"));\n\n// Respond to requests for statically rendered pages.\napp.get(\"/*\", (req, res, next) => {\n  res.format({\n    \"text/html\": () => sendFile(req.url + \".html\", res, next),\n    \"text/x-component\": () => sendFile(req.url + \".rsc\", res, next),\n    default: next,\n  });\n});\n\nfunction sendFile(path, res, next) {\n  res.sendFile(path, { root: \"dist/static\" }, (err) => {\n    if (err) next();\n  });\n}\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Basic MDX Content Structure\nDESCRIPTION: Shows the basic structure of an MDX file with Markdown heading and text content.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/languages/mdx.md#2025-04-09_snippet_1\n\nLANGUAGE: md\nCODE:\n```\n# Hello, MDX!\n\nThis is an MDX file.\n```\n\n----------------------------------------\n\nTITLE: Watcher Event Handler\nDESCRIPTION: Reporter implementation for handling watch mode start and end events.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/reporter.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Reporter} from '@parcel/plugin';\n\nexport default new Reporter({\n  report({event}) {\n    if (event.type === 'watchStart') {\n      process.stdout.write(`Watching started\\n`);\n    } else if (event.type === 'watchEnd') {\n      process.stdout.write(`Watching ended\\n`);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @parcel/config-webextension\nDESCRIPTION: Command to install the necessary Parcel configuration for web extensions using Yarn package manager.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/web-extension.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @parcel/config-webextension --dev\n```\n\n----------------------------------------\n\nTITLE: Disabling Parcel's Default Image Optimization with .parcelrc\nDESCRIPTION: This .parcelrc configuration extends the default Parcel config but disables the automatic image optimization for JPG and PNG files by setting an empty array for optimizers.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/image.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"optimizers\": {\n    \"*.{jpg,jpeg,png}\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Event Handler\nDESCRIPTION: Reporter implementation for handling different log levels (info, warn, error, verbose) with appropriate formatting.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/reporter.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Reporter} from '@parcel/plugin';\n\nexport default new Reporter({\n  report({event}) {\n    if (event.type === 'log') {\n      switch (event.level) {\n        case 'info':\n        case 'verbose':\n          process.stdout.write(`ℹ️ ${event.diagnostic.message}\\n`);\n          break;\n        case 'warn':\n          process.stdout.write(`⚠️ ${event.diagnostic.message}\\n`);\n          break;\n        case 'error':\n          process.stdout.write(`🚨 ${event.diagnostic.message}\\n`);\n          break;\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Video Embedding for Auto-Install Demo in HTML\nDESCRIPTION: HTML code for embedding a video demonstration of Parcel's automatic plugin installation feature, configured to play automatically with no sound.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/beta3/beta3.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<video src=\"autoinstall.mp4\" playsinline loop autoplay muted></video>\n```\n\n----------------------------------------\n\nTITLE: Updating HTML File for Parcel\nDESCRIPTION: This code shows how to update the public/index.html file to use relative paths and add a script tag for the entry point.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/cra.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"icon\" href=\"./favicon.ico\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n  <!-- ... -->\n  <script type=\"module\" src=\"../src/index.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Managing Source Maps in Parcel Optimizer Plugin\nDESCRIPTION: Shows how to handle source map transformation in an Optimizer plugin using @parcel/source-map. This example demonstrates converting between Parcel's source map format and JSON, and adding a source map reference to the compiled code.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/optimizer.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Optimizer} from '@parcel/plugin';\nimport SourceMap from '@parcel/source-map';\n\nexport default new Optimizer({\n  async optimize({contents, map, getSourceMapReference}) {\n    // Convert the input source map to JSON.\n    let result = optimize(contents, map.toVLQ());\n\n    // Convert returned JSON source map to a Parcel SourceMap.\n    let sourceMap = new SourceMap(options.projectRoot);\n    sourceMap.addVLQMap(result.map);\n\n    // Add source map reference to compiled code\n    let url = await getSourceMapReference(sourceMap);\n    result.code += `\\n//# sourceMappingURL=${url}\\n`\n\n    return {\n      contents: result.code,\n      sourceMap\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Parcel CSS Configuration Example\nDESCRIPTION: Configuration example showing how to enable Parcel CSS in a Parcel project via .parcelrc file.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/parcel-css/parcel-css.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"transformers\": {\n    \"*.css\": [\"@parcel/transformer-css-experimental\"]\n  },\n  \"optimizers\": {\n    \"*.css\": [\"@parcel/optimizer-css\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the CRA to Parcel Migration Tool\nDESCRIPTION: Command to run the cra-to-parcel migration script which automatically converts Create React App projects to use Parcel. This tool migrates dependencies, configuration, and source code to be compatible with Parcel bundler.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/v2-14-0/v2-14-0.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cra-to-parcel\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Optimization in Parcel Optimizer Plugin\nDESCRIPTION: Shows how to make an Optimizer plugin that only performs optimization in production builds by checking the shouldOptimize property of the bundle's environment. If shouldOptimize is false, it returns the original contents without modification.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/optimizer.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Optimizer} from '@parcel/plugin';\n\nexport default new Optimizer({\n  async optimize({contents, map, bundle}) {\n    // Don't minify if shouldOptimize is false.\n    if (!bundle.env.shouldOptimize) {\n      return {contents, map};\n    }\n\n    let {code, sourceMap} = minify(contents, map);\n    return {\n      contents: code,\n      map: sourceMap\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Script Tags for ES Modules in Parcel 2\nDESCRIPTION: Shows how to use the type='module' attribute on script tags to enable ES module support in Parcel 2. This is required for using import/export statements in browser scripts.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/rc0/rc0.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\" src=\"app.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: PostCSS Value Parser Token Example\nDESCRIPTION: Demonstrates how postcss-value-parser tokenizes a CSS background property value into an array of tokens.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/parcel-css/parcel-css.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    type: 'function',\n    value: 'url',\n    nodes: [ { type: 'word', value: 'img.png' } ]\n  },\n  { type: 'space', value: ' ' },\n  { type: 'word', value: '20px' },\n  { type: 'space', value: ' ' },\n  { type: 'word', value: '10px' },\n  { type: 'div', value: '/' },\n  { type: 'word', value: '50px' },\n  { type: 'space', value: ' ' },\n  { type: 'word', value: '100px' }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Diagnostic with Code Frames\nDESCRIPTION: Example of creating a diagnostic with code frames that include file path, source code, and highlighting specific code regions.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/logging.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new ThrowableDiagnostic({\n  diagnostic: {\n    message: md`Could not parse ${asset.filePath}`,\n    codeFrames: [{\n      filePath: asset.filePath,\n      code: await asset.getCode(),\n      codeHighlights: [\n        {\n          start: {\n            line: 1,\n            column: 5,\n          },\n          end: {\n            line: 2,\n            column: 3,\n          },\n          message: 'Expected a string but got a number'\n        }\n      ]\n    }]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using import.meta in JavaScript\nDESCRIPTION: Shows how Parcel 2 supports standalone import.meta and import.meta.url, providing file URL information for the current module.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/rc0/rc0.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(import.meta);\n// => {url: 'file:///src/App.js'}\n\nconsole.log(import.meta.url);\n// => 'file:///src/App.js'\n```\n\n----------------------------------------\n\nTITLE: Implementing MDX with React Server Components\nDESCRIPTION: Shows how to use MDX with React Server Components for static rendering. It includes an example MDX file and a layout component that renders the MDX content and table of contents.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/recipes/rsc.md#2025-04-09_snippet_23\n\nLANGUAGE: md\nCODE:\n```\nimport Layout from '../src/MDXLayout';\nexport default Layout;\n\nexport const title = 'Static MDX';\n\n# Hello, MDX!\n\nThis is a static MDX file.\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ReactNode } from \"react\";\nimport type { PageProps, TocNode } from \"@parcel/rsc\";\nimport \"./client\";\n\ninterface LayoutProps extends PageProps {\n  children: ReactNode;\n}\n\nexport default function Layout({ children, pages, currentPage }: LayoutProps) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>{currentPage.exports!.title}</title>\n      </head>\n      <body>\n        <main>{children}</main>\n        <aside>\n          <Toc toc={currentPage.tableOfContents!} />\n        </aside>\n      </body>\n    </html>\n  );\n}\n\nfunction Toc({ toc }: { toc: TocNode[] }) {\n  return toc.length > 0 ? (\n    <ul>\n      {toc.map((page, i) => (\n        <li key={i}>\n          {page.title}\n          <Toc toc={t.children} />\n        </li>\n      ))}\n    </ul>\n  ) : null;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Parcel Plugins and Transformers in JSON\nDESCRIPTION: This snippet demonstrates the index.json file for a shared Parcel configuration. It extends the default config and adds custom transformers, namers, and compressors.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/configuration.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"transformers\": {\n    \"*.svg\": [\"...\", \"@parcel/transformer-svg-react\"]\n  },\n  \"namers\": [\"@company/parcel-namer\", \"...\"],\n  \"compressors\": {\n    \"*.{js,html,css}\": [\n      \"...\",\n      \"@parcel/compressor-gzip\", \n      \"@parcel/compressor-brotli\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Referential Workers with import.meta.url\nDESCRIPTION: Demonstrates how to use import.meta.url as a self-reference when creating a worker that uses the same file as both the main script and the worker script.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/rc0/rc0.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nnew Worker(import.meta.url, {type: 'module'});\n```\n\n----------------------------------------\n\nTITLE: Bundling Node modules for Node.js targets\nDESCRIPTION: Migration from using the --bundle-node-modules CLI option to configuring it in package.json targets. This allows bundling packages from node_modules when targeting Node.js environments.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/parcel-1.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nparcel build index.js --target node --bundle-node-modules\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"default\": {\n      \"includeNodeModules\": true\n    }\n  },\n  \"engines\": {\n    \"node\": \"10\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Parcel Configuration Package in JSON\nDESCRIPTION: This snippet shows the package.json file for a shared Parcel configuration package. It specifies the package name, main file, version, and compatible Parcel versions.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/plugin-system/configuration.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@company/parcel-config\",\n  \"main\": \"index.json\",\n  \"version\": \"1.0.0\",\n  \"engines\": {\n    \"parcel\": \"2.x\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New React Server Components Project with create-parcel CLI\nDESCRIPTION: This bash command demonstrates how to use the new create-parcel CLI to scaffold a new React Server Components project. It creates a new directory, initializes a Git repo, and sets up the project structure with necessary dependencies.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/v2-14-0/v2-14-0.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm create parcel react-server my-rsc-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for React Testing\nDESCRIPTION: This Jest configuration file sets up the testing environment for a React application, including file transforms and module mappings.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/cra.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"roots\": [\"<rootDir>/src\"],\n  \"collectCoverageFrom\": [\"src/**/*.{js,jsx,ts,tsx}\", \"!src/**/*.d.ts\"],\n  \"setupFilesAfterEnv\": [\"<rootDir>/src/setupTests.js\"],\n  \"testMatch\": [\n    \"<rootDir>/src/**/__tests__/**/*.{js,jsx,ts,tsx}\",\n    \"<rootDir>/src/**/*.{spec,test}.{js,jsx,ts,tsx}\"\n  ],\n  \"testEnvironment\": \"jsdom\",\n  \"transform\": {\n    \"^.+\\\\.(js|jsx|mjs|cjs|ts|tsx)$\": \"<rootDir>/config/jest/babelTransform.js\",\n    \"^(?!.*\\\\.(js|jsx|mjs|cjs|ts|tsx|css|json)$)\": \"<rootDir>/config/jest/fileTransform.js\"\n  },\n  \"transformIgnorePatterns\": [\n    \"[/\\\\\\\\]node_modules[/\\\\\\\\].+\\\\.(js|jsx|mjs|cjs|ts|tsx)$\",\n    \"^.+\\\\.module\\\\.(css|sass|scss)$\"\n  ],\n  \"modulePaths\": [],\n  \"moduleNameMapper\": {\n    \"^react-native$\": \"react-native-web\",\n    \"^.+\\\\.(css|sass|scss)$\": \"identity-obj-proxy\",\n    \"^jsx:.+\\\\.svg\": \"<rootDir>/config/jest/SvgComponent.js\"\n  },\n  \"moduleFileExtensions\": [\"web.js\", \"js\", \"web.ts\", \"ts\", \"web.tsx\", \"tsx\", \"json\", \"web.jsx\", \"jsx\", \"node\"],\n  \"watchPlugins\": [\n    \"jest-watch-typeahead/filename\",\n    \"jest-watch-typeahead/testname\"\n  ],\n  \"resetMocks\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Modules Naming Pattern in Parcel\nDESCRIPTION: Shows how to configure a custom naming pattern for CSS modules in Parcel v2.6.0 using the @parcel/transformer-css configuration in package.json. This allows for more flexible and customizable class naming in CSS modules.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/blog/v2-6-0/v2-6-0.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@parcel/transformer-css\": {\n    \"cssModules\": {\n      \"pattern\": \"my-company-[name]-[hash]-[local]\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring output file in package.json\nDESCRIPTION: Migration from using --out-file CLI option to specifying the output path in package.json's main field. This approach is used for library targets in Parcel 2.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/parcel-1.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nparcel build index.js --out-file lib.js\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-library\",\n  \"version\": \"1.0.0\",\n  \"main\": \"lib.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Compiled HTML with Shared Bundle for Profile Page\nDESCRIPTION: Shows the compiled output HTML for the profile page, demonstrating how the shared react-dom dependency has been extracted into the same bundle used by the home page.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/features/code-splitting.md#2025-04-09_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<div id=\"app\"></div>\n<script type=\"module\" src=\"react-dom.23f6d9.js\"></script>\n<script type=\"module\" src=\"profile.9fc67e.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Redirect using Meta Refresh in HTML\nDESCRIPTION: This HTML snippet sets up an automatic redirect to the Parcel 1 migration documentation page using a meta refresh tag. It redirects the user immediately (0 second delay) to the '/migration/parcel-1/' URL.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/getting-started/migration.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<meta http-equiv=\"refresh\" content=\"0; URL='/migration/parcel-1/'\" />\n```\n\n----------------------------------------\n\nTITLE: Removing global export option\nDESCRIPTION: Shows the removal of the --global CLI option which was used to expose libraries globally. This option has been removed in Parcel 2 without a direct replacement.\nSOURCE: https://github.com/parcel-bundler/website/blob/v2/src/migration/parcel-1.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nparcel build index.js --global mylib\n```\n\nLANGUAGE: bash\nCODE:\n```\n\n```"
  }
]