[
  {
    "owner": "webpro-nl",
    "repo": "knip",
    "content": "TITLE: Knip Features Table in Markdown\nDESCRIPTION: A markdown table listing all major features of Knip with their descriptions and command line options, including auto-fix, cache, CommonJS support, compilers, debug mode, filters, JSDoc tags, monorepo support, performance monitoring, plugins, preprocessors, production mode, reporters, rules, script parsing, trace functionality, watch mode, and workspace selection.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/overview/features.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                       | Description or example                                     |\n| :----------------------------------------- | :--------------------------------------------------------- |\n| [Auto-fix][3]                              | Use `--fix` to auto-fix issues                             |\n| [Cache][4]                                 | Use `--cache` to speed up consecutive runs                 |\n| [CommonJS][5]                              | Traditional JavaScript is just fine                        |\n| [Compilers][6] (built-in/custom)           | Support for Astro, MDX, Vue, etc.                          |\n| [Debug][7]                                 | Use `--debug` for troubleshooting                          |\n| [Filters][8]                               | Exclude or focus on specific issue types                   |\n| [JSDoc tags][9]                            | Make exceptions for exports                                |\n| [Monorepos][10] (package-based/integrated) | Workspaces are first-class citizen                         |\n| [Performance][11]                          | Use `--performance` for detailed timing insights           |\n| [Plugins][12]                              | Over 60 plugins with custom entry paths and config parsing |\n| [Preprocessors][13]                        | Preprocess issues before being reported                    |\n| [Production mode][14]                      | Use `--production` to lint only production code            |\n| [Reporters][15] (built-in/custom)          | Use a custom `--reporter ./custom-output.ts`               |\n| [Rules][16]                                | Exclude or focus on issue types                            |\n| [Script parser][17]                        | Scripts contain dependencies and entry paths               |\n| [Trace][18]                                | Trace exports to find where they are used                  |\n| [Watch mode][19]                           | Use `--watch` to update the reporter on file changes       |\n| [Workspace][20]                            | Use `--workspace` to lint a single workspace in a monorepo |\n```\n\n----------------------------------------\n\nTITLE: Running Knip with Package Managers\nDESCRIPTION: Commands to execute Knip using different package managers after installation\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/overview/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run knip\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm knip\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun knip\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn knip\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tailwind Plugin in TypeScript\nDESCRIPTION: A minimal plugin implementation that handles Tailwind configuration files as entry points. Shows the basic structure with title, enablers, isEnabled function and entry patterns.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/writing-a-plugin.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { IsPluginEnabled, Plugin } from '../../types/config.js';\nimport { hasDependency } from '../../util/plugin.js';\n\nconst title = 'Tailwind';\n\nconst enablers = ['tailwindcss'];\n\nconst isEnabled: IsPluginEnabled = ({ dependencies }) =>\n  hasDependency(dependencies, enablers);\n\nconst entry = ['tailwind.config.{js,cjs,mjs,ts}'];\n\nexport default {\n  title,\n  enablers,\n  isEnabled,\n  entry,\n} satisfies Plugin;\n```\n\n----------------------------------------\n\nTITLE: Custom Knip Configuration in JSON\nDESCRIPTION: Example of a custom Knip configuration that includes JavaScript files in the scripts folder and specifies TypeScript files in the src folder.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/overview/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://unpkg.com/knip@5/schema.json\",\n  \"entry\": [\"src/index.ts\", \"scripts/{build,create}.js\"],\n  \"project\": [\"src/**/*.ts\", \"scripts/**/*.js\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Knip with JSONC Schema\nDESCRIPTION: Example of a JSONC configuration file for Knip with schema reference for IDE validation, allowing comments and trailing commas.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"$schema\": \"https://unpkg.com/knip@5/schema-jsonc.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NYC Coverage Plugin in TypeScript\nDESCRIPTION: A plugin for NYC code coverage tool that demonstrates config file handling and dependency resolution. Includes config file pattern matching and resolveConfig implementation.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/writing-a-plugin.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toDeferResolve } from '../../util/input.js';\nimport { hasDependency } from '../../util/plugin.js';\nimport type { NycConfig } from './types.js';\nimport type {\n  IsPluginEnabled,\n  Plugin,\n  ResolveConfig,\n} from '../../types/config.js';\n\nconst title = 'nyc';\n\nconst enablers = ['nyc'];\n\nconst isEnabled: IsPluginEnabled = ({ dependencies }) =>\n  hasDependency(dependencies, enablers);\n\nconst config = [\n  '.nycrc',\n  '.nycrc.{json,yml,yaml}',\n  'nyc.config.js',\n  'package.json',\n];\n\nconst resolveConfig: ResolveConfig<NycConfig> = config => {\n  const extend = config?.extends ?? [];\n  const requires = config?.require ?? [];\n  return [extend, requires].flat().map(toDeferResolve);\n};\n\nexport default {\n  title,\n  enablers,\n  isEnabled,\n  config,\n  resolveConfig,\n} satisfies Plugin;\n```\n\n----------------------------------------\n\nTITLE: Ignoring Unresolved Imports with Regular Expressions in TypeScript\nDESCRIPTION: Example of configuring Knip to ignore unresolved imports using actual regular expressions in a dynamic TypeScript configuration.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  ignoreUnresolved: [/^#/.+/],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Knip with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Knip configuration using TypeScript. It imports the KnipConfig type and defines a configuration object with entry and project properties.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/dynamic-configuration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { KnipConfig } from 'knip';\n\nconst config: KnipConfig = {\n  entry: ['src/index.ts'],\n  project: ['src/**/*.ts'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Knip\nDESCRIPTION: A YAML configuration for setting up a GitHub Actions workflow that installs dependencies and runs Knip to identify unused code. This workflow runs on push events and uses Node.js v20 on Ubuntu.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/using-knip-in-ci.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Lint project\n\non: push\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    name: Ubuntu/Node v20\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n      - name: Install dependencies\n        run: npm install --ignore-scripts\n      - name: Run knip\n        run: npm run knip\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Compiler Function in TypeScript\nDESCRIPTION: Defines the interface for Knip compiler functions that transform source file content to expose imports. The function takes source content and filename as inputs and returns processed text.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/compilers.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(source: string, filename: string) => string;\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Path Aliases in Knip\nDESCRIPTION: Example of configuring import path aliases in Knip, similar to TypeScript's path mapping feature, supporting both exact and wildcard matches.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"paths\": {\n    \"@lib\": [\"./lib/index.ts\"],\n    \"@lib/*\": [\"./lib/*\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Entry and Project Files in Knip (JSON)\nDESCRIPTION: This JSON configuration defines the default patterns for entry files and project files in Knip. It includes various file extensions and locations for entry files, as well as a pattern for all project files.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/explanations/entry-files.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entry\": [\n    \"{index,cli,main}.{js,cjs,mjs,jsx,ts,cts,mts,tsx}\",\n    \"src/{index,cli,main}.{js,cjs,mjs,jsx,ts,cts,mts,tsx}\"\n  ],\n  \"project\": [\"**/*.{js,cjs,mjs,jsx,ts,cts,mts,tsx}!\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Dedicated Knip Configuration File in JavaScript\nDESCRIPTION: Example of a dedicated knip.js configuration file that exports a configuration object defining entry points and other options.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/knip/fixtures/compilers/unused.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// knip.js\nmodule.exports = {\n  entry: [\"src/index.js\", \"src/cli.js\"],\n  project: [\"**/*.js\", \"!dist/**\"]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Vue Compiler with vue/compiler-sfc\nDESCRIPTION: A comprehensive example showing how to override Knip's built-in Vue compiler with Vue's official parser for better results. It handles script blocks, style blocks, and CSS imports within Vue single-file components.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/compilers.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { KnipConfig } from 'knip';\nimport {\n  parse,\n  type SFCScriptBlock,\n  type SFCStyleBlock,\n} from 'vue/compiler-sfc';\n\nfunction getScriptBlockContent(block: SFCScriptBlock | null): string[] {\n  if (!block) return [];\n  if (block.src) return [`import '${block.src}'`];\n  return [block.content];\n}\n\nfunction getStyleBlockContent(block: SFCStyleBlock | null): string[] {\n  if (!block) return [];\n  if (block.src) return [`@import '${block.src}';`];\n  return [block.content];\n}\n\nfunction getStyleImports(content: string): string {\n  return [...content.matchAll(/(?<=@)import[^;]+/g)].join('\\n');\n}\n\nconst config = {\n  compilers: {\n    vue: (text: string, filename: string) => {\n      const { descriptor } = parse(text, { filename, sourceMap: false });\n      return [\n        ...getScriptBlockContent(descriptor.script),\n        ...getScriptBlockContent(descriptor.scriptSetup),\n        ...descriptor.styles.flatMap(getStyleBlockContent).map(getStyleImports),\n      ].join('\\n');\n    },\n  },\n} satisfies KnipConfig;\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Including External Libraries in Knip Analysis\nDESCRIPTION: Command to address false positives for exports consumed by external libraries by including them in the analysis.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/cli.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nknip --include-libs\n```\n\n----------------------------------------\n\nTITLE: Basic Knip Configuration in package.json\nDESCRIPTION: Simple Knip configuration added to package.json that defines entry points for a JavaScript/TypeScript project.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/knip/fixtures/compilers/unused.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-package\",\n  \"knip\": {\n    \"entry\": [\"src/index.{js,ts}\", \"src/cli.{js,ts}\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Knip Configuration in JSON\nDESCRIPTION: Simplified version of the default Knip configuration, specifying entry and project file patterns.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/overview/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entry\": [\"index.{js,ts}\", \"src/index.{js,ts}\"],\n  \"project\": [\"**/*.{js,ts}\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Binary Dependencies with Regular Expressions in TypeScript\nDESCRIPTION: Example of configuring Knip to ignore binary dependencies using actual regular expressions in a dynamic TypeScript configuration.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  ignoreBinaries: [/^pm2-.+/],\n};\n```\n\n----------------------------------------\n\nTITLE: Astro Plugin Implementation with AST Processing\nDESCRIPTION: Complete implementation of an Astro plugin utilizing AST processing to detect and handle Starlight component configurations.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/writing-a-plugin.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport ts from 'typescript';\nimport {\n  getDefaultImportName,\n  getImportMap,\n  getPropertyValues,\n} from '../../typescript/ast-helpers.js';\n\nconst title = 'Astro';\n\nconst production = [\n  'src/pages/**/*.{astro,mdx,js,ts}',\n  'src/content/**/*.mdx',\n  'src/middleware.{js,ts}',\n  'src/actions/index.{js,ts}',\n];\n\nconst getComponentPathsFromSourceFile = (sourceFile: ts.SourceFile) => {\n  const componentPaths: Set<string> = new Set();\n  const importMap = getImportMap(sourceFile);\n  const importName = getDefaultImportName(importMap, '@astrojs/starlight');\n\n  function visit(node: ts.Node) {\n    if (\n      ts.isCallExpression(node) &&\n      ts.isIdentifier(node.expression) &&\n      node.expression.text === importName\n    ) {\n      const starlightConfig = node.arguments[0];\n      if (ts.isObjectLiteralExpression(starlightConfig)) {\n        const values = getPropertyValues(starlightConfig, 'components');\n        for (const value of values) componentPaths.add(value);\n      }\n    }\n\n    ts.forEachChild(node, visit);\n  }\n\n  visit(sourceFile);\n\n  return componentPaths;\n};\n\nconst resolveFromAST: ResolveFromAST = (sourceFile: ts.SourceFile) => {\n  const componentPaths = getComponentPathsFromSourceFile(sourceFile);\n  return [...production, ...componentPaths].map(id => toProductionEntry(id));\n};\n\nexport default {\n  title,\n  production,\n  resolveFromAST,\n} satisfies Plugin;\n```\n\n----------------------------------------\n\nTITLE: Advanced Knip Configuration with Multiple Entry Points\nDESCRIPTION: Example of a Knip configuration with multiple entry points and specific configurations for different workflow scenarios.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/knip/fixtures/compilers/unused.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  entry: [\n    \"src/index.ts\",                      // Main entry point\n    \"src/cli.ts\",                        // CLI entry point\n    \"config.ts\",                         // Config file\n    \"scripts/**/*.{js,ts}\",               // Build scripts or other utility scripts\n    \"e2e/**/*.{spec,test}.{js,ts,jsx,tsx}\" // End-to-end tests\n  ],\n  project: [\n    \"**/*.{js,ts}\",                       // All files written in JS or TS\n    \"!dist/**\",                           // Don't include these directories\n    \"!compiled/**\",\n    \"!coverage/**\",\n    \"!node_modules/**\"\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Entry Points for Monorepo Projects\nDESCRIPTION: Basic Knip configuration for integrated monorepos that defines entry points and project files across apps and libraries directories. Sets up patterns to track TypeScript and TSX files in src directories.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/integrated-monorepos.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entry\": [\"{apps,libs}/**/src/index.{ts,tsx}\"],\n  \"project\": [\"{apps,libs}/**/src/**/*.{ts,tsx}\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Knip with JSON Schema\nDESCRIPTION: Example of a JSON configuration file for Knip with schema reference for IDE validation.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://unpkg.com/knip@5/schema.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Unresolved Imports in Knip\nDESCRIPTION: Example of configuring Knip to ignore specific unresolved imports using specifiers or regular expressions.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ignoreUnresolved\": [\"ignore-unresolved-import\", \"#virtual/.+\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Namespace References Considered as Using All Exports\nDESCRIPTION: Shows various ways of referencing a namespace object that would cause Knip to consider all exports as used, including passing it to functions, spreading, object shorthand, assignment, and more.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/namespace-imports.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as NS from './my-namespace.js';\nimport send from 'stats';\n\nsend(NS);\n\nconst spread = { ...NS };\n\nconst shorthand = { NS };\n\nconst assignment = NS;\n\nconst item = [NS];\n\ntype TypeOf = typeof NS;\n\nObject.values(NS);\n\nfor (const fruit in Fruits) {\n  //\n}\n\nexport { NS };\n\nexport { NS as AliasedNS };\n\nexport = NS;\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint and Cypress Plugins in Knip\nDESCRIPTION: Extended Knip configuration that sets up ESLint config file patterns and Cypress test entry points to prevent false positives in unused file detection for monorepo applications.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/integrated-monorepos.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"eslint\": {\n    \"config\": [\"{apps,libs}/**/.eslintrc.json\"]\n  },\n  \"cypress\": {\n    \"entry\": [\"apps/**/cypress.config.ts\", \"apps/**/cypress/e2e/*.spec.ts\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Knip with Fix Flag\nDESCRIPTION: Basic command to run Knip with the --fix flag to automatically remove unused exports and dependencies\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/auto-fix.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nknip --fix\n```\n\n----------------------------------------\n\nTITLE: Running Knip in Debug Mode\nDESCRIPTION: This command runs Knip with the debug flag to provide detailed output about its operation, including workspace information, configuration, plugins, glob patterns, and compiled source files.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nknip --debug\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Local Reporter with Knip\nDESCRIPTION: Command to run Knip with a custom local reporter file, specifying the path to the TypeScript file.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/reporters.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nknip --reporter ./my-reporter.ts\n```\n\n----------------------------------------\n\nTITLE: Default Knip Configuration in JSON\nDESCRIPTION: Default entry and project file patterns used by Knip for each workspace.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/configuring-project-files.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entry\": [\n    \"{index,cli,main}.{js,cjs,mjs,jsx,ts,cts,mts,tsx}\",\n    \"src/{index,cli,main}.{js,cjs,mjs,jsx,ts,cts,mts,tsx}\"\n  ],\n  \"project\": [\"**/*.{js,cjs,mjs,jsx,ts,cts,mts,tsx}!\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Knip Configuration with Advanced Issue Filtering\nDESCRIPTION: Configuration example showing how to ignore specific issues and dependencies using the ignoreBinaries, ignoreDependencies, and ignoreWorkspaces options.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/knip/fixtures/compilers/unused.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  ignoreBinaries: [\n    \"eslint\"     // For Yarn v1, the eslint binary is included in the package.json,\n                // for other package managers it's hidden. We're ignoring it.\n  ],\n  ignoreDependencies: [\n    \"@swc/core\", // Peer dependency of ts-node\n    \"@parcel/*\"  // Used by Parcel\n  ],\n  ignoreWorkspaces: [\n    \"examples/**\" // Ignore workspaces in examples directory\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspaces in Knip using JSON\nDESCRIPTION: Example of a Knip configuration file that specifies custom entry and project patterns for different workspaces, including the root workspace and package directories.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/monorepos-and-workspaces.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workspaces\": {\n    \".\": {\n      \"entry\": \"scripts/*.js\",\n      \"project\": \"scripts/**/*.js\"\n    },\n    \"packages/*\": {\n      \"entry\": \"{index,cli}.ts\",\n      \"project\": \"**/*.ts\"\n    },\n    \"packages/cli\": {\n      \"entry\": \"bin/cli.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Knip with JavaScript\nDESCRIPTION: This snippet shows how to create a Knip configuration using JavaScript. It uses a JSDoc comment to import the KnipConfig type for type checking and defines a configuration object.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/dynamic-configuration.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('knip').KnipConfig} */\nconst config = {\n  entry: ['src/index.ts'],\n  project: ['src/**/*.ts'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Recommended Named Import Pattern\nDESCRIPTION: Shows the preferred way to import named exports using destructuring assignment.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/working-with-commonjs.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { A, B } = require('./common.js');\nconst runtime = [A, B];\n```\n\n----------------------------------------\n\nTITLE: Correct Configuration Example in JSON\nDESCRIPTION: Example showing the recommended way to configure project patterns and ignore rules.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/configuring-project-files.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entry\": [\"src/index.ts\", \"scripts/*.ts\"],\n  \"project\": [\"src/**\", \"scripts/**\"],\n  \"ignore\": [\"src/generated.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Issue Types in Knip with --exclude\nDESCRIPTION: Examples of using the --exclude flag to filter out specific issue types from Knip reports. Shows both comma-separated and repeated flag syntax.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/cli.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nknip --exclude classMembers,enumMembers\nknip --exclude classMembers --exclude enumMembers\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Knip Dependencies\nDESCRIPTION: Commands to manually install Knip and its peer dependencies using different package managers\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/overview/getting-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D knip typescript @types/node\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add -D knip typescript @types/node\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add -D knip typescript @types/node\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D knip typescript @types/node\n```\n\n----------------------------------------\n\nTITLE: Configuring Knip with an Async Function in JavaScript\nDESCRIPTION: This snippet shows how to create a Knip configuration using an async function in JavaScript. It returns a configuration object with entry and project properties.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/dynamic-configuration.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = async () => ({\n  entry: ['src/index.ts'],\n  project: ['src/**/*.ts'],\n});\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Comparing ts-unused-exports and Knip Commands for Unused Exports Analysis\nDESCRIPTION: Demonstrates the equivalent commands for finding unused exported symbols in TypeScript projects using ts-unused-exports and Knip. Knip's command offers more granular control over the analysis.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/explanations/comparison-and-migration.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nts-unused-exports\nknip --include exports,types,nsExports,nsTypes\n```\n\n----------------------------------------\n\nTITLE: Dedicated Knip Configuration File in TypeScript\nDESCRIPTION: Example of a dedicated knip.ts configuration file using TypeScript with type definitions for better type checking and autocompletion.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/knip/fixtures/compilers/unused.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// knip.ts\nimport type { KnipConfig } from \"knip\";\n\nconst config: KnipConfig = {\n  entry: [\"src/index.ts\", \"src/cli.ts\"],\n  project: [\"**/*.ts\", \"!dist/**\"]\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Comparing ts-prune and Knip Commands for Finding Unused Exports\nDESCRIPTION: Shows the equivalent commands for finding unused exports in TypeScript projects using ts-prune and Knip. Knip's command includes additional options for comprehensive analysis.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/explanations/comparison-and-migration.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nts-prune\nknip --include exports,types,nsExports,nsTypes\n```\n\n----------------------------------------\n\nTITLE: Configuring Entry Files in Knip\nDESCRIPTION: Example of configuring entry file patterns in Knip using glob patterns, including negation with exclamation mark.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entry\": [\"src/index.ts\", \"scripts/*.ts\", \"!scripts/except-this-one.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Export Tagging Example in TypeScript\nDESCRIPTION: Example of tagging exports in TypeScript with JSDoc/TSDoc tags that can be used for filtering in Knip's configuration.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Description of my exported value\n *\n * @type number\n * @internal Important matters\n * @lintignore\n */\nexport const myExport = 1;\n```\n\n----------------------------------------\n\nTITLE: Generated Package.json Configuration\nDESCRIPTION: Example output showing the package.json modifications after Knip initialization, including added devDependencies and scripts.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/create-config/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-package\",\n  \"scripts\": {\n    \"knip\": \"knip\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.14.8\",\n    \"knip\": \"^5.30.1\",\n    \"typescript\": \"^5.5.4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Class and Enum Members in Knip\nDESCRIPTION: Example of configuring Knip to ignore specific class and enum members using names or regular expressions.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ignoreMembers\": [\"render\", \"on.+\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Reporter for Knip\nDESCRIPTION: Example of a minimal custom reporter implementation for Knip, which logs the issues and counters to the console. This demonstrates the basic structure of a custom reporter file.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/reporters.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Reporter } from 'knip';\n\nconst reporter: Reporter = function (options) {\n  console.log(options.issues);\n  console.log(options.counters);\n};\n\nexport default reporter;\n```\n\n----------------------------------------\n\nTITLE: Configuring Knip with an Async Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Knip configuration using an async function in TypeScript. It fetches repository information asynchronously and includes it in the configuration.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/dynamic-configuration.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { KnipConfig } from 'knip';\n\nconst config = async (): Promise<KnipConfig> => {\n  const items = await fetchRepoInfo();\n\n  return {\n    entry: ['src/index.ts', ...items],\n    project: ['src/**/*.ts'],\n  };\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Files to Ignore in Knip\nDESCRIPTION: Example of configuring Knip to ignore issues from specific files using glob patterns.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ignore\": [\"src/generated.ts\", \"fixtures/**\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Knip with File Removal\nDESCRIPTION: Command to run Knip with file removal enabled using the --allow-remove-files flag\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/auto-fix.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nknip --fix --allow-remove-files\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Files in Knip\nDESCRIPTION: Example of configuring project file patterns in Knip using glob patterns to define the scope of files to analyze.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"project\": [\"src/**/*.ts\", \"scripts/**/*.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Package Configuration with Binary Example\nDESCRIPTION: Example showing proper configuration of package.json with commitlint binary and its corresponding dependency.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/handling-issues.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"lib\",\n  \"scripts\": {\n    \"commitlint\": \"commitlint --edit\"\n  },\n  \"devDependencies\": {\n    \"@commitlint/cli\": \"*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Mode Patterns in JSON\nDESCRIPTION: Example configuration showing how to specify production code patterns using exclamation marks in knip.json. The entry and project patterns with '!' suffix indicate production code files.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/production-mode.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entry\": [\"src/index.ts!\", \"build/script.js\"],\n  \"project\": [\"src/**/*.ts!\", \"build/*.js\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Exports Used in Same File in Knip\nDESCRIPTION: Example of configuring Knip to ignore exports that are used internally within the same file.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ignoreExportsUsedInFile\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Knip v4 to Include Class Members\nDESCRIPTION: JSON configuration to opt-in to detecting unused class members in Knip v4. This is needed as class member detection is no longer enabled by default to improve performance.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/knip-v4.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\"classMembers\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing package.json Structure for Entry Files\nDESCRIPTION: Example package.json showing how Knip identifies entry files from main, exports, bin, and scripts fields. The file demonstrates various entry point patterns that Knip will automatically detect.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/script-parser.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-package\",\n  \"main\": \"index.js\",\n  \"exports\": {\n    \"./lib\": {\n      \"import\": \"./dist/index.mjs\",\n      \"require\": \"./dist/index.cjs\"\n    }\n  },\n  \"bin\": {\n    \"program\": \"bin/cli.js\"\n  },\n  \"scripts\": {\n    \"build\": \"bundle src/entry.ts\",\n    \"start\": \"node --loader tsx server.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing ESLint Configuration in JSON\nDESCRIPTION: This snippet shows a minimal ESLint configuration file. The ESLint plugin parses this to identify dependencies like 'eslint-config-airbnb', 'eslint-config-prettier', and '@typescript-eslint/eslint-plugin'.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/explanations/plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"airbnb\", \"prettier\"],\n  \"plugins\": [\"@typescript-eslint\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Knip in Production Mode\nDESCRIPTION: Command to run Knip in production mode using the --production flag.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/production-mode.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nknip --production\n```\n\n----------------------------------------\n\nTITLE: Fine-grained Configuration for Ignoring Exports Used in Same File\nDESCRIPTION: Example of selectively configuring Knip to ignore specific types of exports used internally within the same file.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ignoreExportsUsedInFile\": {\n    \"interface\": true,\n    \"type\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Knip Without Installation\nDESCRIPTION: Commands to execute Knip directly without installation using different package managers\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/overview/getting-started.mdx#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx knip\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx knip\n```\n\nLANGUAGE: shell\nCODE:\n```\nbunx knip\n```\n\n----------------------------------------\n\nTITLE: Parsing package.json Scripts for Dependencies and Configuration Files\nDESCRIPTION: Example showing how Knip extracts dependencies, entry files, and configuration files from package.json scripts. It demonstrates detection of import flags, configuration files, and compiler options.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/script-parser.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-lib\",\n  \"scripts\": {\n    \"start\": \"node --import tsx/esm run.ts\",\n    \"bundle\": \"tsup -c tsup.lib.config.ts\",\n    \"type-check\": \"tsc -p tsconfig.app.json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Dependencies from bun Template Tags in TypeScript\nDESCRIPTION: Example showing how Knip parses bun template tags in TypeScript code to identify dependencies. The parser extracts the boxen-cli dependency from these command strings.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/script-parser.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { $ } from 'bun';\nawait $`bun boxen I ❤ unicorns`;\nawait $`boxen I ❤ unicorns`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Entry Files with Negated Patterns in JSON\nDESCRIPTION: Example of configuring entry files while excluding specific patterns using negation. Shows how to include route files except those starting with underscore.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/configuring-project-files.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entry\": [\"src/routes/*.ts\", \"!src/routes/_*.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Preprocessor Interface in TypeScript for Knip\nDESCRIPTION: TypeScript interface definition for implementing custom preprocessors in Knip, showing the required function signature that takes and returns ReporterOptions.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/reporters.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype Preprocessor = async (options: ReporterOptions) => ReporterOptions;\n```\n\n----------------------------------------\n\nTITLE: Creating New Knip Plugin via CLI\nDESCRIPTION: Shell commands for creating and testing a new Knip plugin using the create-plugin script.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/writing-a-plugin.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/knip\nbun create-plugin --name tool\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun test test/plugins/tool.test.ts\n```\n\n----------------------------------------\n\nTITLE: Filtering Issue Types in Knip with --include\nDESCRIPTION: Examples of using the --include flag to focus only on specific issue types in Knip reports. Shows both comma-separated and repeated flag syntax.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/cli.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nknip --include files,dependencies\nknip --include files --include dependencies\n```\n\n----------------------------------------\n\nTITLE: Production Mode Configuration in JSON\nDESCRIPTION: Configuration example for production mode with proper file pattern suffixes.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/configuring-project-files.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entry\": [\"src/index.ts!\"],\n  \"project\": [\"src/**/*.ts!\", \"!src/test-helpers/**!\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins in Knip\nDESCRIPTION: Example of configuring plugin behavior in Knip, including overriding config locations, specifying entry points, and enabling or disabling plugins.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mocha\": {\n    \"config\": \"config/mocha.config.js\",\n    \"entry\": [\"**/*.spec.js\"]\n  },\n  \"playwright\": true,\n  \"webpack\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Mode with Exclusions\nDESCRIPTION: Example configuration showing how to exclude specific files or directories from production mode analysis using negated patterns.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/production-mode.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entry\": [\"src/index.ts!\"],\n  \"project\": [\"src/**/*.ts!\", \"!src/test-helpers/**!\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Common Code Annotation Examples\nDESCRIPTION: Shows examples of common code annotation comments that Knip intentionally avoids in favor of standardized JSDoc annotations.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/explanations/why-use-knip.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint-disable-next-line\n// prettier-ignore\n// @ts-expect-error\n```\n\n----------------------------------------\n\nTITLE: Defining a Reporter Interface in TypeScript for Knip\nDESCRIPTION: TypeScript interface definition for implementing custom reporters in Knip, showing the required function signature and the structure of the ReporterOptions object passed to the reporter.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/reporters.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype Reporter = async (options: ReporterOptions): void;\n\ntype ReporterOptions = {\n  report: Report;\n  issues: Issues;\n  counters: Counters;\n  configurationHints: ConfigurationHints;\n  isDisableConfigHints: boolean;\n  isTreatConfigHintsAsErrors: boolean;\n  cwd: string;\n  isProduction: boolean;\n  isShowProgress: boolean;\n  options: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Namespace Object in TypeScript\nDESCRIPTION: Example of importing a namespace and then re-exporting it, which makes it unclear which specific exports might be used by consumers of this module.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/namespace-imports.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as NS from './my-namespace.js';\n\nexport { NS };\n```\n\n----------------------------------------\n\nTITLE: Basic Knip CLI Usage\nDESCRIPTION: Example of running Knip through npx to analyze a project's dependencies without configuration.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/knip/fixtures/compilers/unused.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx knip\n```\n\n----------------------------------------\n\nTITLE: Ignoring Exports with Custom Tags in TypeScript\nDESCRIPTION: Example showing how to use @lintignore tag to exclude exports and imports from Knip reports.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/jsdoc-tsdoc-tags.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/** @lintignore */\nexport const myUnusedExport = 1;\n\n/** @lintignore */\nimport Unresolved from './generated/lib.js';\n```\n\n----------------------------------------\n\nTITLE: Type and Variable Export Removal\nDESCRIPTION: Diff example showing removal of type and variable exports\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/auto-fix.mdx#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\ntype Snake = 'python' | 'anaconda';\nconst Owl = 'Hedwig';\nconst Hawk = 'Tony';\n-export type { Snake };\n-export { Owl, Hawk };\n+;\n+;\n```\n\n----------------------------------------\n\nTITLE: Configuring Tagged Exports in Knip\nDESCRIPTION: Example of including or excluding exports based on JSDoc/TSDoc tags in Knip configuration.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": [\"-lintignore\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Options to Preprocessors in Knip\nDESCRIPTION: Example of running Knip with a custom preprocessor and passing options to it as a JSON string.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/cli.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nknip --preprocessor ./preproc.ts --preprocessor-options '{\"key\":\"value\"}'\n```\n\n----------------------------------------\n\nTITLE: Running Knip with Performance Metrics for Class Members\nDESCRIPTION: Command-line example showing how to run Knip with the performance flag while including class member checks. This enables performance metrics to identify potential bottlenecks.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/performance.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nknip --include classMembers --performance\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Property of Namespace in TypeScript\nDESCRIPTION: Example where a namespace is imported and a specific property is accessed, which allows Knip to determine that only that specific export is used.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/namespace-imports.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NS } from './my-module.js';\n\nconst version = NS.version;\n```\n\n----------------------------------------\n\nTITLE: Configuring Knip Script in package.json\nDESCRIPTION: JSON configuration to add Knip script to package.json\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/overview/getting-started.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"scripts\": {\n    \"knip\": \"knip\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Knip Configuration in v1\nDESCRIPTION: Updated Knip configuration for v1 showing the new simplified format with renamed properties and the use of exclamation marks for production mode files.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/migration-to-v1.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entry\": [\"src/index.ts!\"],\n  \"project\": [\"src/**/*.ts!\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Named Exports Using Object Shorthand Syntax\nDESCRIPTION: Shows how to export multiple items using object shorthand notation with module.exports.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/working-with-commonjs.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst A = function () {};\nconst B = { option: true };\n\nmodule.exports = { A, B };\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Preprocessor with Knip\nDESCRIPTION: Command to run Knip with a custom preprocessor file, specifying the path to the TypeScript file.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/reporters.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nknip --preprocessor ./preprocess.ts\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dynamic Import Parsing in TypeScript\nDESCRIPTION: This snippet shows how Knip parses dynamic imports in template strings, which are used by tools like execa and bun/zx to execute scripts.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait $({ stdio: 'inherit' })`c8 node hydrate.js`; // execa\nawait $`node scripts/parse.js`; // bun/zx\n```\n\n----------------------------------------\n\nTITLE: Ignoring Package Dependencies in Knip\nDESCRIPTION: Example of configuring Knip to ignore specific package dependencies using names or regular expressions.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ignoreDependencies\": [\"hidden-package\", \"@org/.+\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Knip for a Single Workspace using Shell\nDESCRIPTION: Shell command example that demonstrates how to use the --workspace flag to run Knip on a specific workspace within a monorepo, which includes the target workspace along with its ancestors and dependents.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/monorepos-and-workspaces.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nknip --workspace packages/my-lib\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Exports for Source Mapping in package.json\nDESCRIPTION: This snippet shows a package.json configuration that defines various export paths, including src, lib, and dist directories. It demonstrates how Knip interprets these paths for source mapping.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/source-mapping.md#2025-04-23_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": \"my-workspace\",\n  \"main\": \"index.js\",\n  \"exports\": {\n    \".\": \"./src/entry.js\",\n    \"./feat\": \"./lib/feat.js\",\n    \"./public\": \"./dist/app.js\",\n    \"./public/*\": \"./dist/*.js\",\n    \"./public/*.js\": \"./dist/*.js\",\n    \"./dist/internal/*\": null,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Package.json Scripts for Entry Files\nDESCRIPTION: This JSON snippet demonstrates how Knip analyzes scripts in package.json to identify entry files and configuration files used in the project.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/faq.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-lib\",\n  \"scripts\": {\n    \"start\": \"node --import tsx/esm run.ts\",\n    \"start\": \"vitest -c config/vitest.config.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Duplicate Exports with @alias in TypeScript\nDESCRIPTION: Example demonstrating how to use @alias tag to prevent duplicate export warnings in Knip.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/jsdoc-tsdoc-tags.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Component = () => {};\n\n/** @alias */\nexport default Component;\n```\n\n----------------------------------------\n\nTITLE: Using @internal Tag in TypeScript\nDESCRIPTION: Example showing how to mark exports as internal using @internal tag to prevent reporting in production mode.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/jsdoc-tsdoc-tags.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/** @internal */\nexport const internalTestedFunction = () => {};\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compilation Options for Source Mapping\nDESCRIPTION: This tsconfig.json snippet sets the baseUrl and outDir options, which are crucial for Knip's source mapping process. It defines the source directory and the output directory for compiled files.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/source-mapping.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src\",\n    \"outDir\": \"dist\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Standard Import Syntax in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how Knip handles non-standard import syntax, such as those used by webpack loaders or Vite asset imports, by stripping off prefixes and suffixes.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/faq.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Icon from './icon.svg?raw';\nimport Styles from '-!style-loader!css-loader?modules!./styles.css';\n```\n\n----------------------------------------\n\nTITLE: Sample Namespace with Multiple Exports in TypeScript\nDESCRIPTION: A TypeScript file with two exported constants that will be used in subsequent examples to demonstrate Knip's namespace handling.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/namespace-imports.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const start = 1;\n\nexport const end = 1;\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Entry Patterns in Knip\nDESCRIPTION: A JSON configuration example for Knip showing the default entry patterns used to analyze Next.js projects. This configuration defines which files Knip will search for and analyze.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/state-of-knip.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"next\": {\n    \"entry\": [\"next.config.ts\", \"src/pages/**/*.tsx\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Script with Workspace Commands\nDESCRIPTION: A package.json script entry that demonstrates how Knip needs to handle complex command patterns, including workspace navigation and specific configuration files.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/state-of-knip.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"yarn --cwd packages/frontend vitest -c vitest.components.config.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Knip Configuration with Plugin Integration\nDESCRIPTION: Example of configuring Knip plugins for integrating with frameworks like Next.js, showing how to extend functionality for specific ecosystems.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/knip/fixtures/compilers/unused.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  entry: [\"src/index.ts\"],\n  project: [\"**/*.ts\"],\n  // Enable plugins\n  nextjs: true,     // Will add Next.js-specific entry points\n  playwright: true, // Will add Playwright-specific entry points\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration with External Dependencies Example\nDESCRIPTION: Example of a tsconfig.json file that includes external dependencies through 'extends' and JSX settings, which Knip can analyze to determine whether dependencies are properly listed in package.json.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/faq.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@tsconfig/node20/tsconfig.json\",\n  \"compilerOptions\": {\n    \"jsxImportSource\": \"hastscript/svg\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Knip Configuration for Including Namespace Exports\nDESCRIPTION: Shell command and JSON configuration examples for enabling namespace export checking in Knip v5.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/knip-v5.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nknip --include nsExports\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\"nsExports\", \"nsTypes\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases for Svelte in Knip\nDESCRIPTION: Demonstrates how to add path aliases in knip.json to resolve virtual modules like $app/* in SvelteKit projects by mapping them to their actual locations.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/compilers.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"paths\": {\n    \"$app/*\": [\"node_modules/@sveltejs/kit/src/runtime/app/*\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow with Working Directory Configuration\nDESCRIPTION: A GitHub Actions workflow YAML file that shows how Knip needs to handle working directory changes and configuration files in workflow scripts.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/state-of-knip.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  integration:\n    runs-on: ubuntu-latest\n    steps:\n      - run: playwright test -c playwright.e2e.config.ts\n        working-directory: e2e\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Export Usage with Namespace Import in TypeScript\nDESCRIPTION: Example showing two exports with a namespaced import that references one export explicitly. Used to demonstrate unused export detection.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/knip-v5.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const version = 'v5';\nexport const getRocket = () => '🚀';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as NS from './knip.js';\n\nconsole.log(NS.version);\n```\n\n----------------------------------------\n\nTITLE: Parsing execa Template Tags for Dependencies and Entry Files\nDESCRIPTION: Example showing how Knip identifies dependencies and entry files from execa template tags. It extracts c8 as a dependency and hydrate.js as an entry file.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/script-parser.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nawait $({ stdio: 'inherit' })`c8 node hydrate.js`;\n```\n\n----------------------------------------\n\nTITLE: Knip Configuration in v0.13.3 (Pre-v1)\nDESCRIPTION: Example of a Knip configuration file using the older v0.13.3 format with separate entryFiles and projectFiles definitions for both regular and dev modes.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/migration-to-v1.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entryFiles\": [\"src/index.ts\"],\n  \"projectFiles\": [\"src/**/*.ts\", \"!**/*.spec.ts\"],\n  \"dev\": {\n    \"entryFiles\": [\"src/index.ts\", \"src/**/*.spec.ts\", \"src/**/*.e2e.ts\"],\n    \"projectFiles\": [\"src/**/*.ts\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Files with Negation in JSON\nDESCRIPTION: Example showing how to configure project files with negated patterns to exclude specific directories from analysis.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/configuring-project-files.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entry\": [\"src/index.ts\"],\n  \"project\": [\"src/**/*.ts\", \"!src/exclude/**\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Extensionless Import Examples\nDESCRIPTION: Demonstration of extensionless imports in Vue components, showing supported and unsupported scenarios.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/handling-issues.mdx#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport Component from './Component'; // → Should resolve to ./Component.vue\nimport ArrowIcon from '../icons/Arrow'; // → Does NOT resolve to ../icons/Arrow.svg\n```\n\n----------------------------------------\n\nTITLE: Importing from a Monorepo Workspace in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates an import statement that Knip will analyze. It imports a helper function from another workspace within the same monorepo.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/source-mapping.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { helper } from '@org/shared';\n```\n\n----------------------------------------\n\nTITLE: Viewing Workspace Program Information in Debug Mode using Shell Commands\nDESCRIPTION: Example of debug output showing how many programs Knip uses across workspaces. The output demonstrates that Knip has installed 2 programs for 29 workspaces and analyzes files in multiple rounds.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/performance.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n...\n[*] Installed 2 programs for 29 workspaces\n...\n[*] Analyzing used resolved files [P1/1] (123)\n...\n[*] Analyzing used resolved files [P1/2] (8)\n...\n[*] Analyzing used resolved files [P2/1] (41)\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Knip Configuration with Package Managers\nDESCRIPTION: Commands to initialize Knip configuration using different package managers\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/overview/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm init @knip/config\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm create @knip/config\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun create @knip/config\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn create @knip/config\n```\n\n----------------------------------------\n\nTITLE: Configuring Knip to Consider Namespace Exports Individually\nDESCRIPTION: JSON configuration that disables Knip's default namespace heuristic and forces it to consider each export on a namespace individually.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/namespace-imports.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\"nsExports\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Icon Path Configuration\nDESCRIPTION: Configuration example for resolving external aliased imports from unplugin-icons.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/handling-issues.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"paths\": {\n    \"~icons/*\": [\"node_modules/unplugin-icons/types/[framework].d.ts\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Unimported and Knip Commands for Production Dependency Analysis\nDESCRIPTION: Demonstrates the equivalent commands for analyzing production dependencies and files using Unimported and Knip. These commands focus on production mode analysis.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/explanations/comparison-and-migration.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nunimported\nknip --production --dependencies --files\n```\n\n----------------------------------------\n\nTITLE: Including Entry Exports in Knip\nDESCRIPTION: Command to include entry files when reporting unused exports. Useful for self-contained or private repositories.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/cli.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nknip --include-entry-exports\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Post Metadata with YAML Frontmatter\nDESCRIPTION: This YAML frontmatter defines metadata for a blog post, including title, description, publication date, and hero image path. It's typically used in static site generators to provide structured data for rendering blog posts.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/knip/fixtures/plugins/astro/src/content/blog/first-post.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'First post'\ndescription: 'Lorem ipsum dolor sit amet'\npubDate: 'Jul 08 2022'\nheroImage: '/favicon.svg'\n---\n```\n\n----------------------------------------\n\nTITLE: Ignoring Workspaces in Knip\nDESCRIPTION: Example of configuring Knip to ignore specific workspaces in a monorepo using exact paths or glob patterns.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ignoreWorkspaces\": [\n    \"packages/go-server\",\n    \"packages/flat/*\"\n    \"packages/deep/**\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Package Dependencies with Regular Expressions in TypeScript\nDESCRIPTION: Example of configuring Knip to ignore package dependencies using actual regular expressions in a dynamic TypeScript configuration.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  ignoreDependencies: [/@org\\/.*/, /^lib-.+/],\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Preprocessors in Knip\nDESCRIPTION: Examples of using a custom preprocessor with Knip, showing both local file reference and package usage patterns.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/cli.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nknip --preprocessor ./my-preprocessor.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Knip for JavaScript/TypeScript Project\nDESCRIPTION: Defines the Knip configuration, including entry points, project structure, and ignored patterns. It specifies the main entry file, test files, and various ignored patterns for files and exports.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/knip/fixtures/plugins/react-cosmos/__fixtures__/any.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://unpkg.com/knip@next/schema.json\",\n  \"entry\": [\"src/index.ts\"],\n  \"project\": [\"src/**/*.ts\"],\n  \"ignore\": [\"src/**/*.d.ts\"],\n  \"ignoreDependencies\": [\"@types/*\", \"typescript\"],\n  \"ignoreBinaries\": [\"knip\"],\n  \"ignoreExportsUsedInFile\": true,\n  \"rules\": {\n    \"classMembers\": \"off\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Entry Exports in Knip Analysis\nDESCRIPTION: Example of configuring Knip to include entry file exports in unused export reports, useful for self-contained or private repositories.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"includeEntryExports\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Binary Dependencies in Knip\nDESCRIPTION: Example of configuring Knip to ignore specific binary dependencies using names or regular expressions.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ignoreBinaries\": [\"zip\", \"docker-compose\", \"pm2-.+\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Recommended Default Import Pattern\nDESCRIPTION: Demonstrates a discouraged pattern of importing named exports as a default import, which can lead to unused export reports.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/working-with-commonjs.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst DefaultImport = require('./common.js');\nconst runtime = [DefaultImport.A, DefaultImport.B];\n```\n\n----------------------------------------\n\nTITLE: Preconstruct Entry Path Resolution Example\nDESCRIPTION: Example of implementing resolveEntryPaths to handle custom entry point configurations in Preconstruct.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/writing-a-plugin.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolveEntryPaths: ResolveConfig<PreconstructConfig> = async config => {\n  return (config.entrypoints ?? []).map(id => toEntry(id));\n};\n```\n\n----------------------------------------\n\nTITLE: Running Knip in Production Mode\nDESCRIPTION: Command to run Knip in production mode to exclude test files from analysis.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/configuring-project-files.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nknip --production\n```\n\n----------------------------------------\n\nTITLE: Running Knip with Bun Runtime\nDESCRIPTION: Example of running Knip using the Bun runtime instead of Node.js + jiti. Requires Bun to be installed. Equal to using 'bunx --bun knip'.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/cli.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nknip-bun\n```\n\n----------------------------------------\n\nTITLE: Alternative Import Pattern\nDESCRIPTION: Demonstrates an alternative way to import and use named exports directly from require statement.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/working-with-commonjs.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst runtime = [require('./common.js').A];\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow in YAML\nDESCRIPTION: Example of a GitHub Actions workflow configuration showing how working directory is specified for job steps.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/writing-a-plugin.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  stylelint:\n    runs-on: ubuntu-latest\n    steps:\n      - run: npx esbuild\n        working-directory: packages/app\n```\n\n----------------------------------------\n\nTITLE: Running Knip in Production Mode Excluding Types\nDESCRIPTION: Command to run Knip in production mode while excluding type analysis from the report.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/production-mode.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nknip --production --exclude types\n```\n\n----------------------------------------\n\nTITLE: Running Knip from Project Root\nDESCRIPTION: Command to execute Knip using npx from the root directory of the project. This is used to test the Knip configuration and identify issues.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/templates/issue-reproduction/basic/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpx knip\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest in TypeScript\nDESCRIPTION: This example demonstrates a Vitest configuration file. The Vitest plugin reads this to identify dependencies such as '@vitest/coverage-istanbul' and 'vitest-environment-happy-dom'.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/explanations/plugins.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n  test: {\n    coverage: {\n      provider: 'istanbul',\n    },\n    environment: 'happy-dom',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Named Exports to Default Export\nDESCRIPTION: Shows how to convert a named exports object into a default export by adding a non-shorthand property.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/working-with-commonjs.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst A = function () {};\nconst B = { option: true };\n\nmodule.exports = { __esModule: true, A, B };\n```\n\n----------------------------------------\n\nTITLE: Running Knip v4 with Performance Metrics\nDESCRIPTION: Example of running Knip v4 with the --performance flag, showing improved metrics without findReferences and reduced total running time and memory usage.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/slim-down-to-speed-up.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ knip --performance\n\n...\n\nName                           size  min     max      median   sum\n-----------------------------  ----  ------  -------  -------  -------\ncreateProgram                     2   54.36  2138.45  1096.40  2192.81\ngetTypeChecker                    2    7.40   664.83   336.12   672.23\ngetImportsAndExports            396    0.00    36.36     0.16   224.37\ngetSymbolAtLocation            2915    0.00    29.71     0.00    65.63\n\nTotal running time: 4.3s (mem: 729.67MB)\n```\n\n----------------------------------------\n\nTITLE: Running Knip with Custom Configuration File in Shell\nDESCRIPTION: Command to run Knip with a custom configuration file path using the --config flag.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/overview/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nknip --config path/to/knip.json\n```\n\n----------------------------------------\n\nTITLE: Using Knip with JSON Reporter\nDESCRIPTION: Command to run Knip with the JSON reporter option.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/reporters.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nknip --reporter json\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Tests in TypeScript\nDESCRIPTION: This snippet shows a Playwright configuration file. The Playwright plugin uses this to determine entry patterns for test files.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/explanations/plugins.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PlaywrightTestConfig } from '@playwright/test';\n\nconst config: PlaywrightTestConfig = {\n  testDir: 'integration',\n  testMatch: ['**/*-test.ts'],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: CodeClimate Reporter Output Format in Knip\nDESCRIPTION: Example of the output from Knip's built-in CodeClimate reporter, which generates Code Climate Report JSON format for integration with CI/CD tools.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/reporters.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ knip --reporter codeclimate\n\n[\n  {\n    \"type\": \"issue\",\n    \"check_name\": \"Unused exports\",\n    \"description\": \"isUnused\",\n    \"categories\": [\"Bug Risk\"],\n    \"location\": {\n      \"path\": \"path/to/file.ts\",\n      \"positions\": {\n        \"begin\": {\n          \"line\": 6,\n          \"column\": 1\n        }\n      }\n    }\n    \"severity\": \"major\",\n    \"fingerprint\": \"e9789995c1fe9f7d75eed6a0c0f89e84\",\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Unlisted Dependencies\nDESCRIPTION: Commands for different package managers to install unlisted dependencies\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/auto-fix.mdx#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install unlisted-package\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add unlisted-package\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add unlisted-package\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add unlisted-package\n```\n\n----------------------------------------\n\nTITLE: Performance Analysis Output in Knip\nDESCRIPTION: Sample output when using the --performance flag to get execution time of expensive functions. Shows function name, invocation count, minimum/maximum/median execution time, and total time.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/cli.md#2025-04-23_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nName                           size  min       max       median    sum\n-----------------------------  ----  --------  --------  --------  --------\nfindReferences                  648     84.98   7698.61     96.41  70941.70\ncreateProgram                     2   6295.84   7064.68   6680.26  13360.52\nglob                              6      0.05    995.78    513.82   3150.87\nfindESLintDependencies            2      0.01     74.41     37.21     74.41\nfindGithubActionsDependencies     6      0.16     12.71      0.65     23.45\nfindBabelDependencies             2      0.00     38.75     19.37     38.75\n...\n\nTotal running time: 5s (mem: 631.27MB)\n```\n\n----------------------------------------\n\nTITLE: Package Installation Commands\nDESCRIPTION: Commands for installing Knip using different package managers.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/knip-v5.mdx#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D knip\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add -D knip\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add -D knip\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D knip\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack in JavaScript\nDESCRIPTION: This webpack configuration file is parsed to identify entry files like './src/app.ts' and './src/vendor.ts', as well as dependencies like 'base64-inline-loader'.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/explanations/plugins.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = env => {\n  return {\n    entry: {\n      main: './src/app.ts',\n      vendor: './src/vendor.ts',\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.(woff|ttf|ico|woff2|jpg|jpeg|png|webp)$/i,\n          use: 'base64-inline-loader',\n        },\n      ],\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Dependency Directory in TypeScript\nDESCRIPTION: Example showing how to specify a directory for a dependency using toDependency function in TypeScript.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/writing-a-plugin.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntoDependency('esbuild', { dir: 'packages/app' });\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration with Externals for Third-Party Dependencies\nDESCRIPTION: A Webpack configuration that marks specific libraries as external dependencies. This prevents bundling these dependencies with the application code and assumes they will be available in the runtime environment.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/knip/fixtures/workspaces-plugin-config/packages/package1/components/epic/component.stories.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  // ...\n  externals: {\n    'react': 'React',\n    'react-dom': 'ReactDOM'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Knip v3 with pnpm\nDESCRIPTION: Command to install Knip v3 as a dev dependency using pnpm package manager.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/knip-v3.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add -D knip\n```\n\n----------------------------------------\n\nTITLE: Installing Knip v4 with pnpm\nDESCRIPTION: Command to install Knip v4 as a development dependency using pnpm package manager.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/knip-v4.mdx#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm add -D knip\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with React and Testing in TypeScript\nDESCRIPTION: This Vite configuration file demonstrates how plugins handle both direct imports and indirect references to dependencies. It also shows how additional entry files like './setup-tests.ts' are identified.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/explanations/plugins.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\nexport default defineConfig(async ({ mode, command }) => {\n  return {\n    plugins: [react()],\n    test: {\n      setupFiles: ['./setup-tests.ts'],\n      environment: 'happy-dom',\n      coverage: {\n        provider: 'c8',\n      },\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Entry with Exports\nDESCRIPTION: Example demonstrating how to configure a production entry file with allowIncludeExports option enabled.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/writing-a-plugin.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntoProductionEntry('./entry.ts', { allowIncludeExports: true });\n```\n\n----------------------------------------\n\nTITLE: Installing and Bundling Bash Parser for Knip Project\nDESCRIPTION: This shell script clones the bash-parser repository, installs its dependencies, builds it, and then uses esbuild to create a minified, tree-shaken ESM bundle for use in the Knip project. The bundled output is placed in the vendor directory of the Knip package.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/knip/vendor/bash-parser/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:ericcornelissen/bash-parser.git\ncd bash-parser\nnpm install\nnpm run build\nnpx esbuild src/index.js --outfile=$HOME/p/knip/knip/packages/knip/vendor/bash-parser/index.js --bundle --platform=node --format=esm --tree-shaking=true --minify\n```\n\n----------------------------------------\n\nTITLE: Installing Knip v3 with npm\nDESCRIPTION: Command to install Knip v3 as a dev dependency using npm package manager.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/knip-v3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D knip\n```\n\n----------------------------------------\n\nTITLE: Installing Knip v4 with bun\nDESCRIPTION: Command to install Knip v4 as a development dependency using bun package manager.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/knip-v4.mdx#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nbun add -D knip\n```\n\n----------------------------------------\n\nTITLE: Astro Configuration with Starlight Example\nDESCRIPTION: Example configuration file showing Astro setup with Starlight integration and custom component overrides.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/writing-a-plugin.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport starlight from '@astrojs/starlight';\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  integrations: [\n    starlight({\n      components: {\n        Head: './src/components/Head.astro',\n        Footer: './src/components/Footer.astro',\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Namespace Import and Usage Pattern in TypeScript\nDESCRIPTION: An example showing how a namespace import can be used to access exported functions. This demonstrates a pattern where exports aren't directly imported by name but accessed through a namespace.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/slim-down-to-speed-up.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const referencedExport = () => {};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as NS from './namespace.ts';\n\nNS.referencedExport();\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Project Structure in JSON\nDESCRIPTION: This Angular configuration file fragment is parsed by the Angular plugin to identify entry files like 'src/main.ts' and dependencies like '@angular-devkit/build-angular'.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/explanations/plugins.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"projects\": {\n    \"knip-angular-example\": {\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/knip-angular-example\",\n            \"main\": \"src/main.ts\",\n            \"tsConfig\": \"tsconfig.app.json\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Knip v3 with bun\nDESCRIPTION: Command to install Knip v3 as a dev dependency using bun package manager.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/knip-v3.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbun add -D knip\n```\n\n----------------------------------------\n\nTITLE: React/Astro Component Imports\nDESCRIPTION: Import statements for various Astro and React components used in the documentation page layout.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card, CardGrid } from '@astrojs/starlight/components';\nimport { YouTube } from '@astro-community/astro-embed-youtube';\nimport Posts from '../../components/Posts.astro';\nimport Sponsors from '../../components/Sponsors.astro';\nimport Projects from '../../components/Projects.astro';\nimport Contributors from '../../components/Contributors.astro';\n```\n\n----------------------------------------\n\nTITLE: Using @public Tag in TypeScript\nDESCRIPTION: Example of using the @public tag to prevent Knip from reporting unused exports in non-entry files.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/jsdoc-tsdoc-tags.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @public\n */\nexport const unusedFunction = () => {};\n```\n\n----------------------------------------\n\nTITLE: Common TypeScript/ESM Configuration Errors Resolved in Knip v5.31.0\nDESCRIPTION: List of common error messages that have been resolved in Knip v5.31.0 through the upgrade to Jiti v2, particularly affecting TypeScript and ESM configuration files.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/two-years.mdx#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCannot use 'import.meta' outside a module\nawait is only valid in async functions and the top level bodies of modules\nUnexpected identifier 'Promise'\nReflect.metadata is not a function\n```\n\n----------------------------------------\n\nTITLE: Configuring Tags via CLI in Shell\nDESCRIPTION: Shell command demonstrating how to exclude tagged exports using the --tags flag with Knip.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/jsdoc-tsdoc-tags.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nknip --tags=-lintignore,-internal\n```\n\n----------------------------------------\n\nTITLE: Installing Knip v4 Canary Version with npm\nDESCRIPTION: A shell command for installing the canary (pre-release) version of Knip v4 using npm. This allows users to try the latest features before the official release.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/slim-down-to-speed-up.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D knip@canary\n```\n\n----------------------------------------\n\nTITLE: Rendering Sponsors Chart and Statistics in Astro\nDESCRIPTION: Displays a monthly overview of sponsorships using the SponsorsChart component, along with key statistics about average monthly contributions for the Knip project.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/sponsors.mdx#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## 🧡 Monthly Overview\n\nOverview of gross debit GitHub and OpenCollective sponsorships and invoices,\nstarting from the moment the project openly asked for support. Actual\ndevelopment started one year before that.\n\n<SponsorsChart />\n\n- The monthly aggregated average over the charted period is $538.\n- The monthly recurring average without one-time payments is $294.\n- GitHub Sponsors is for my GitHub account, which has more repositories, but in\n  practice targets mostly Knip (and perhaps some [release-it][1]).\n```\n\n----------------------------------------\n\nTITLE: Tagging Exports with JSDoc Comments in Knip\nDESCRIPTION: Example of using custom JSDoc tags to mark exports in TypeScript for Knip's experimental tagged exports feature. This allows for including or excluding specific exports from reports.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/knip-v4.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n/** @custom */\nexport const myExport = 1;\n```\n\n----------------------------------------\n\nTITLE: Enabling Unused Class Members via CLI in Knip v4\nDESCRIPTION: Command to enable the detection of unused class members, which is now opt-in in Knip v4. This feature is disabled by default to improve performance and memory usage.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/knip-v4.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nknip --include classMembers\n```\n\n----------------------------------------\n\nTITLE: Accessing Namespace Property Makes Other Exports Detectable as Unused\nDESCRIPTION: Example showing that when a specific property of a namespace is accessed, Knip can determine that other exports are unused, even if the namespace object is also used directly.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/namespace-imports.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as NS from './namespace.js';\n\nconst begin = NS.start;\n\nsend(NS);\n```\n\n----------------------------------------\n\nTITLE: Comparing Depcheck and Knip Commands for Dependency Analysis\nDESCRIPTION: Shows the equivalent commands for analyzing dependencies using Depcheck and Knip. Both commands perform a similar function of checking project dependencies.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/explanations/comparison-and-migration.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndepcheck\nknip --dependencies\n```\n\n----------------------------------------\n\nTITLE: Using Experimental Tags in Knip CLI\nDESCRIPTION: CLI commands for Knip's experimental tagged exports feature, allowing users to include or exclude exports marked with specific JSDoc tags from the report.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/knip-v4.mdx#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nknip --experimental-tags=+custom\nknip --experimental-tags=-custom,-internal\n```\n\n----------------------------------------\n\nTITLE: Installing Knip v4 with npm\nDESCRIPTION: Command to install Knip v4 as a development dependency using npm package manager.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/knip-v4.mdx#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D knip\n```\n\n----------------------------------------\n\nTITLE: Configuring Tagged Exports with Default Include Directive\nDESCRIPTION: Example of configuring Knip to report only exports with specific tags using the default include directive.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/configuration.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": [\"@lintignore\", \"@internal\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Component Loading Example\nDESCRIPTION: Example showing dynamic and loadable component imports that may cause export detection issues.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/handling-issues.mdx#2025-04-23_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport loadable from '@loadable/component';\n\nexport const DynamicApple = dynamic(() =>\n  import('./components.js').then(mod => mod.Apple)\n);\n\nexport const LoadableOrange = loadable(() => import('./components.js'), {\n  resolveComponent: components => components.Orange,\n});\n```\n\nLANGUAGE: ts\nCODE:\n```\nexport const Apple = () => 'Apple';\nexport const Orange = () => 'Orange';\n```\n\n----------------------------------------\n\nTITLE: JSDoc Tag Examples in TypeScript\nDESCRIPTION: Examples showing how to use JSDoc tags to control export visibility and reporting.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/knip-v5.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const version = 'v5';\n/** @public */\nexport const getRocket = () => '🚀';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const version = 'v5';\n/** @launch */\nexport const getRocket = () => '🚀';\n```\n\n----------------------------------------\n\nTITLE: Knip Error Output for Configuration Loading Failure\nDESCRIPTION: Terminal output showing a Knip error when it tries to load a Next.js configuration file that references undefined environment variables.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/state-of-knip.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ knip\n💥 LoaderError: Error loading next.config.ts\n💥 Reason: Cannot read properties of undefined (reading 'toLowerCase')\n```\n\n----------------------------------------\n\nTITLE: Package Installation Commands\nDESCRIPTION: Commands for different package managers to install dependencies after fixes\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/auto-fix.mdx#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Named Imports Example in TypeScript\nDESCRIPTION: Example showing how to use named imports instead of namespace imports for better explicitness.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/knip-v5.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { version, getRocket } from './knip.js';\n\nsend({ version, getRocket });\n```\n\n----------------------------------------\n\nTITLE: Defining Exports for Namespace Import in TypeScript\nDESCRIPTION: A TypeScript file that exports two constants which can later be imported as a namespace. This demonstrates the basic setup of exports that will be analyzed by Knip.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/namespace-imports.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const version = 'v5';\nexport const getRocket = () => '🚀';\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Actions Workflow in YAML\nDESCRIPTION: This GitHub Actions workflow file is parsed to identify entry files like 'scripts/build.js' and 'scripts/deploy.ts', as well as configuration files like 'e2e/playwright.web.config.ts'.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/explanations/plugins.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  integration:\n    runs-on: ubuntu-latest\n    steps:\n      - run: npm install\n      - run: node scripts/build.js\n      - run: node --loader tsx scripts/deploy.ts\n      - run: playwright test -c playwright.web.config.ts\n        working-dir: e2e\n```\n\n----------------------------------------\n\nTITLE: Running Knip Analysis for Detecting Code Issues\nDESCRIPTION: This command runs Knip on the codebase to identify unused files (clutter.ts), unlisted dependencies (lodash in util.ts), and unused exports (unusedFunction in util.ts).\nSOURCE: https://github.com/webpro-nl/knip/blob/main/templates/playground/basic/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run knip\nUnused files (1)\nclutter.ts\nUnlisted dependencies (1)\nlodash  util.ts\nUnused exports (1)\nunusedFunction  unknown  util.ts:6:14\n```\n\n----------------------------------------\n\nTITLE: Problematic Next.js Configuration with Environment Variables\nDESCRIPTION: A Next.js configuration that accesses environment variables unsafely, causing issues when Knip tries to load the configuration file for analysis.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/state-of-knip.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst nextConfig = {\n  pageExtensions: ['page.tsx'],\n  env: {\n    BASE_URL: process.env.BASE_URL.toLowerCase(),\n  },\n};\n\nexport default nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Importing All Exports as Namespace in TypeScript\nDESCRIPTION: Shows how to import all exports from a module onto a namespace object called NS and then pass that object to a function. This pattern makes it unclear which individual exports are used.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/namespace-imports.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as NS from './my-namespace.js';\nimport send from 'stats';\nsend(NS);\n```\n\n----------------------------------------\n\nTITLE: Export Removal Examples\nDESCRIPTION: Diff examples showing how Knip removes unused exports from TypeScript/JavaScript files\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/auto-fix.mdx#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-export const unused = 1;\n-export default class MyClass {}\n+const unused = 1;\n+class MyClass {}\n```\n\n----------------------------------------\n\nTITLE: Using Knip with Custom Reporter Option\nDESCRIPTION: Example of running Knip with the compact reporter option from the command line.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/reporters.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nknip --reporter compact\n```\n\n----------------------------------------\n\nTITLE: Incorrect Configuration Example in JSON\nDESCRIPTION: Example demonstrating incorrect way of configuring Knip using ignore patterns for build artifacts.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/configuring-project-files.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entry\": [\"src/index.ts\", \"scripts/*.ts\"],\n  \"ignore\": [\"build/**\", \"dist/**\", \"src/generated.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Exports in CommonJS\nDESCRIPTION: Demonstrates the recommended way to create named exports by assigning keys to module.exports directly.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/working-with-commonjs.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst B = function () {};\n\nmodule.exports.A = { option: true };\nmodule.exports.B = B;\n```\n\n----------------------------------------\n\nTITLE: Ignoring Generated Files Configuration in JSON\nDESCRIPTION: Example of how to ignore specific generated files that contain unused exports.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/configuring-project-files.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entry\": [\"src/index.ts\"],\n  \"project\": [\"src/**/*.ts\"],\n  \"ignore\": [\"src/generated.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Knip in Production Mode with Strict Settings\nDESCRIPTION: Command to run Knip in production mode with strict dependency checking enabled.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/production-mode.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nknip --production --strict\n```\n\n----------------------------------------\n\nTITLE: Disabling Color Output in Knip\nDESCRIPTION: Running Knip with NO_COLOR environment variable set to disable colored output. Knip uses picocolors which respects the NO_COLOR standard.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/cli.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nNO_COLOR=1 knip\n```\n\n----------------------------------------\n\nTITLE: Resolving Unresolved Svelte Imports in Knip\nDESCRIPTION: Shows error output from Knip when it encounters unresolved imports with the $app/ prefix in Svelte applications, illustrating a common issue when working with SvelteKit.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/compilers.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nUnresolved imports (5)\n$app/stores       src/routes/Header.svelte:1:9\n$app/environment  src/routes/about/+page.ts:1:9\n```\n\n----------------------------------------\n\nTITLE: Error Message for Path Alias Issue in Cypress Config\nDESCRIPTION: This error occurs when loading a configuration file (e.g., cypress.config.ts) that uses TypeScript path aliases. The error indicates that the module resolution system cannot find the aliased module.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/known-issues.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAnalyzing workspace ....\nError loading .../cypress.config.ts\nReason: Cannot find module '@alias/name'\nRequire stack:\n- .../cypress.config.ts\n```\n\n----------------------------------------\n\nTITLE: TypeScript Path Alias Configuration\nDESCRIPTION: Example of TypeScript path alias configuration that can cause false positives in monorepos.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/handling-issues.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@org/common/*\": [\"packages/common/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Class Export and Instantiation in TypeScript\nDESCRIPTION: A more complex example showing class definition with methods, exporting the class with a different name, importing it with a namespace, and then instantiating and using it. This pattern is harder to analyze with static analysis.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/slim-down-to-speed-up.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyClass {\n  constructor() {\n    this.method();\n  }\n  method() {}\n  do() {}\n}\n\nexport const OtherName = MyClass;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as MyNamespace from './MyClass.ts';\n\nconst { OtherName } = MyNamespace;\n\nconst instance = new OtherName();\n\ninstance.do();\n```\n\n----------------------------------------\n\nTITLE: JSON Reporter Output Structure in Knip\nDESCRIPTION: Example of the structured JSON output from Knip's built-in JSON reporter, showing how unused files and various issues are reported with detailed information including file positions.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/reporters.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": [\"src/unused.ts\"],\n  \"issues\": [\n    {\n      \"file\": \"package.json\",\n      \"owners\": [\"@org/admin\"],\n      \"dependencies\": [{ \"name\": \"jquery\", \"line\": 5, \"col\": 6, \"pos\": 71 }],\n      \"devDependencies\": [{ \"name\": \"lodash\", \"line\": 9, \"col\": 6, \"pos\": 99 }],\n      \"unlisted\": [{ \"name\": \"react\" }, { \"name\": \"@org/unresolved\" }],\n      \"exports\": [],\n      \"types\": [],\n      \"duplicates\": []\n    },\n    {\n      \"file\": \"src/Registration.tsx\",\n      \"owners\": [\"@org/owner\"],\n      \"dependencies\": [],\n      \"devDependencies\": [],\n      \"binaries\": [],\n      \"unresolved\": [\n        { \"name\": \"./unresolved\", \"line\": 8, \"col\": 23, \"pos\": 403 }\n      ],\n      \"exports\": [{ \"name\": \"unusedExport\", \"line\": 1, \"col\": 14, \"pos\": 13 }],\n      \"types\": [\n        { \"name\": \"unusedEnum\", \"line\": 3, \"col\": 13, \"pos\": 71 },\n        { \"name\": \"unusedType\", \"line\": 8, \"col\": 14, \"pos\": 145 }\n      ],\n      \"enumMembers\": {\n        \"MyEnum\": [\n          { \"name\": \"unusedMember\", \"line\": 13, \"col\": 3, \"pos\": 167 },\n          { \"name\": \"unusedKey\", \"line\": 15, \"col\": 3, \"pos\": 205 }\n        ]\n      },\n      \"classMembers\": {\n        \"MyClass\": [\n          { \"name\": \"unusedMember\", \"line\": 40, \"col\": 3, \"pos\": 687 },\n          { \"name\": \"unusedSetter\", \"line\": 61, \"col\": 14, \"pos\": 1071 }\n        ]\n      },\n      \"duplicates\": [\"Registration\", \"default\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Knip with Nx Daemon Disabled\nDESCRIPTION: This command demonstrates how to run Knip while disabling the Nx Daemon to avoid conflicts. It sets the NX_DAEMON environment variable to false before executing the knip command.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/known-issues.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNX_DAEMON=false knip\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Preprocessor for Knip\nDESCRIPTION: Example of a basic custom preprocessor implementation for Knip that can modify the issues and counters before they're passed to reporters.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/reporters.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Preprocessor } from 'knip';\n\nconst preprocess: Preprocessor = function (options) {\n  // modify options.issues and options.counters\n  return options;\n};\n\nexport default preprocess;\n```\n\n----------------------------------------\n\nTITLE: Using Preprocessor Package in Knip\nDESCRIPTION: Example of using a preprocessor that's installed as an npm package.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/cli.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nknip --preprocessor preprocessor-package\n```\n\n----------------------------------------\n\nTITLE: Disclosure Reporter Output Example in Knip\nDESCRIPTION: Example of the output from Knip's built-in Disclosure reporter, which formats issues in collapsible HTML details elements for easy sharing in GitHub issues and pull requests.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/reporters.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ knip --reporter disclosure\n\n<details>\n<summary>Unused files (2)</summary>\n\n```\nunused.ts\ndangling.js\n```\n\n</details>\n\n<details>\n<summary>Unused dependencies (2)</summary>\n\n```\nunused-dep     package.json\nmy-package     package.json\n```\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Installing Knip in a JavaScript/TypeScript Project\nDESCRIPTION: Instructions for installing Knip as a development dependency in a project using npm, yarn, or pnpm.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/knip/fixtures/compilers/unused.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev knip\n# or\nyarn add --dev knip\n# or\npnpm add --save-dev knip\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom CSS Compiler for Knip\nDESCRIPTION: Implements a minimal CSS compiler that extracts @import statements using regular expressions. This enables Knip to track dependencies in CSS files.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/compilers.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  compilers: {\n    css: (text: string) => [...text.matchAll(/(?<=@)import[^;]+/g)].join('\\n'),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Reporter Options in Knip\nDESCRIPTION: Example of running Knip with a specific reporter (codeowners) and passing custom options to it as a JSON string.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/cli.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nknip --reporter codeowners --reporter-options '{\"path\":\".github/CODEOWNERS\"}'\n```\n\n----------------------------------------\n\nTITLE: Analyzing CI Workflow Files for Entry Points\nDESCRIPTION: This YAML snippet shows how Knip's plugins can parse CI workflow files to identify additional entry points and configuration files used in the project.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/reference/faq.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  test:\n    steps:\n      run: playwright test e2e/**/*.spec.ts --config playwright.e2e.config.ts\n      run: node --import tsx/esm run.ts\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Components in MDX with Astro\nDESCRIPTION: Demonstrates how to import an Astro component and embed it within MDX content. This example shows importing a HeaderLink component and using it to create a clickable element that triggers a JavaScript alert.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/knip/fixtures/plugins/astro/src/content/blog/using-mdx.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport HeaderLink from '../../components/HeaderLink.astro';\n\n<HeaderLink href=\"#\" onclick=\"alert('clicked!')\">\n\tEmbedded component in MDX\n</HeaderLink>\n```\n\n----------------------------------------\n\nTITLE: Rendering Past Sponsors Section in Astro\nDESCRIPTION: Creates a section to display past sponsors of the Knip project using the SponsorsPast component within a div with 'sponsors' class.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/sponsors.mdx#2025-04-23_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## 🧡 Past Sponsors\n\n<div class=\"sponsors\">\n  <SponsorsPast />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Main Entry Point in package.json\nDESCRIPTION: This package.json snippet for a shared workspace in a monorepo defines the main entry point. Knip uses this information along with tsconfig.json to map the compiled file back to its source.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/source-mapping.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@org/shared\",\n  \"main\": \"dist/index.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Knip v3 with Performance Metrics\nDESCRIPTION: Example of running Knip v3 with the --performance flag to display metrics on various operations, including findReferences, createProgram, and getImportsAndExports.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/slim-down-to-speed-up.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ knip --performance\n\nName                           size  min     max      median   sum\n-----------------------------  ----  ------  -------  -------  -------\nfindReferences                  223    0.55  2252.35     8.46  5826.95\ncreateProgram                     2   50.78  1959.92  1005.35  2010.70\ngetTypeChecker                    2    5.04   667.45   336.24   672.48\ngetImportsAndExports            396    0.00     7.19     0.11   104.46\n\nTotal running time: 9.7s (mem: 1487.39MB)\n```\n\n----------------------------------------\n\nTITLE: Configuring ESM and CommonJS Dual Publishing Pattern in package.json\nDESCRIPTION: Example package.json configuration for publishing a package that supports both ESM and CommonJS. It defines the main entry points for both module systems and specifies TypeScript configuration.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/knip/fixtures/workspaces-plugin-config/packages/package1/components/epic/component.stories.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"dual-publishing-pattern\",\n  \"main\": \"./dist/index.js\",\n  \"module\": \"./dist/index.esm.js\",\n  \"types\": \"./dist/index.d.ts\",\n  \"scripts\": {\n    \"build\": \"tsc --emitDeclarationOnly && rollup -c\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NYC Configuration Example in JSON\nDESCRIPTION: Example configuration file for NYC code coverage tool showing extends functionality.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/writing-a-plugin.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@istanbuljs/nyc-config-typescript\",\n  \"check-coverage\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Package Dependency Configuration\nDESCRIPTION: Example of proper workspace dependency configuration in package.json for monorepos.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/handling-issues.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@org/lib\",\n  \"dependencies\": {\n    \"@org/common\": \"workspace:*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Import/Export Pattern in TypeScript\nDESCRIPTION: A basic example showing a straightforward import and export pattern in TypeScript that's easy to analyze statically. The first file imports a named export from another file.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/slim-down-to-speed-up.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyThing } from './thing.ts';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const MyThing = 'cool';\n```\n\n----------------------------------------\n\nTITLE: Installing Knip Configuration Generator\nDESCRIPTION: Command to initialize Knip configuration in a repository using npm.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/create-config/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm init @knip/config\n```\n\n----------------------------------------\n\nTITLE: Namespace Reference Example in TypeScript\nDESCRIPTION: Examples showing namespace imports where the namespace itself is referenced without accessing specific exports.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/knip-v5.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as NS from './knip.js';\nimport send from 'stats';\n\nsend(NS);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as NS from './knip.js';\n\nconst Spread = { ...NS };\n```\n\n----------------------------------------\n\nTITLE: Fix Specific Issue Types\nDESCRIPTION: Examples of fixing specific issue types using the --fix-type flag\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/auto-fix.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nknip --fix-type exports,types\nknip --fix-type exports --fix-type types   # same as above\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import Resolution in TypeScript\nDESCRIPTION: Example of a dynamic import that Knip cannot automatically resolve, requiring manual entry pattern configuration.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/handling-issues.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst entry = await import(path.join(baseDir, 'entry.ts'));\n```\n\n----------------------------------------\n\nTITLE: Embedding Performance Feature Screenshot in HTML\nDESCRIPTION: This HTML snippet displays a screenshot of the '--performance' output for the Knip codebase, demonstrating the performance analysis feature of Knip.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/overview/screenshots-videos.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/screenshots/performance.png\" alt=\"performance\" class=\"mw500\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Knip v4 with yarn\nDESCRIPTION: Command to install Knip v4 as a development dependency using yarn package manager.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/knip-v4.mdx#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D knip\n```\n\n----------------------------------------\n\nTITLE: Markdown Reporter Output Format in Knip\nDESCRIPTION: Example of the formatted Markdown output from Knip's built-in Markdown reporter, showing how different types of issues are organized into tables.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/reporters.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# Knip report\n\n## Unused files (1)\n\n- src/unused.ts\n\n## Unlisted dependencies (2)\n\n| Name            | Location          | Severity |\n| :-------------- | :---------------- | :------- |\n| unresolved      | src/index.ts:8:23 | error    |\n| @org/unresolved | src/index.ts:9:23 | error    |\n\n## Unresolved imports (1)\n\n| Name         | Location           | Severity |\n| :----------- | :----------------- | :------- |\n| ./unresolved | src/index.ts:10:12 | error    |\n```\n\n----------------------------------------\n\nTITLE: HTML Script Reference\nDESCRIPTION: Example of a script reference in HTML that Knip cannot automatically detect as an entry point.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/handling-issues.mdx#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    <script type=\"module\" src=\"production.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Rendering Sponsors Page Main Content with JSX in Astro\nDESCRIPTION: Creates the main content section of the sponsors page using JSX. Includes information about Knip, the importance of sponsorships, and displays current sponsors through the SponsorsComponent.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/sponsors.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<article class=\"sponsors-body\">\n  <div class=\"column\">\n    <p>\n      Knip is a powerful tool that helps thousands of developers keep their\n      JavaScript and TypeScript projects lean and maintainable. Knip saves\n      teams valuable time and resources.\n    </p>\n\n    <p>\n      Building and maintaining Knip has been, and remains, a lot of work.\n      Supportive resources allow me to focus on maintenance and development of\n      Knip, which is <a href=\"#projects-using-knip\">relied upon by many</a> in\n      the JavaScript community. Please consider supporting the project! The\n      following platforms are available to support Knip:\n    </p>\n\n    <ul>\n      <li><a href=\"https://github.com/sponsors/webpro\">GitHub Sponsors</a></li>\n      <li><a href=\"https://opencollective.com/knip\">OpenCollective</a></li>\n    </ul>\n\n    <p>\n      You or your company logo will be added to this page if you decide to\n      support the project on an ongoing basis. Eternal gratitude to the\n      companies and people supporting the project!\n    </p>\n\n  </div>\n\n  <div class=\"column\">\n    <SponsorsComponent showAll={true} />\n  </div>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Installing Knip v3 with yarn\nDESCRIPTION: Command to install Knip v3 as a dev dependency using yarn package manager.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/knip-v3.mdx#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D knip\n```\n\n----------------------------------------\n\nTITLE: Exporting Module with Named Exports Pattern\nDESCRIPTION: JavaScript module pattern showing how to export multiple named functions. This demonstrates the standard way to expose functionality for import by other modules.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/knip/fixtures/workspaces-plugin-config/packages/package1/components/epic/component.stories.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function multiply(a, b) {\n  return a * b;\n}\n\nexport function divide(a, b) {\n  return a / b;\n}\n```\n\n----------------------------------------\n\nTITLE: Knip CLI File Analysis Command\nDESCRIPTION: Command to run Knip analysis focusing only on unused files.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/handling-issues.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nknip --files\n```\n\n----------------------------------------\n\nTITLE: Rendering Projects Using Knip Section in Astro\nDESCRIPTION: Creates a section to showcase projects that use Knip, with a columnar layout using the Projects component.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/sponsors.mdx#2025-04-23_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n## 🧡 Projects using Knip\n\n<section class=\"columns min300\">\n  <Projects />\n</section>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Robot Access and Sitemap\nDESCRIPTION: Standard robots.txt configuration that allows all web crawlers full access to the site and specifies the location of the sitemap file. The configuration uses universal permissions and provides a simple way for search engines to discover the site structure.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\n\nSitemap: https://knip.dev/sitemap.txt\n```\n\n----------------------------------------\n\nTITLE: Importing Astro Components for Knip Sponsorship Page\nDESCRIPTION: Imports various Astro components needed to build the sponsorship page, including StarlightPage, Posts, Projects, SponsorsComponent, SponsorsChart, and SponsorsPast.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/sponsors.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';\nimport Posts from '../../components/Posts.astro';\nimport Projects from '../../components/Projects.astro';\nimport SponsorsComponent from '../../components/Sponsors.astro';\nimport SponsorsChart from '../../components/SponsorsChart.astro';\nimport SponsorsPast from '../../components/SponsorsPast.astro';\n```\n\n----------------------------------------\n\nTITLE: Knip Dependencies Analysis Command\nDESCRIPTION: Command to run Knip analysis focusing only on dependency issues.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/handling-issues.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nknip --dependencies\n```\n\n----------------------------------------\n\nTITLE: Rendering Testimonials Section in Astro\nDESCRIPTION: Creates a section to display testimonials about Knip using the Posts component.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/sponsors.mdx#2025-04-23_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n## 🧡 Testimonials\n\n<Posts />\n```\n\n----------------------------------------\n\nTITLE: Next.js Configuration with Custom Page Extensions\nDESCRIPTION: A Next.js configuration file that customizes page extensions to use '.page.tsx'. This configuration affects how Knip needs to identify page files in the project.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/state-of-knip.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst nextConfig = {\n  pageExtensions: ['page.tsx'],\n};\n\nexport default nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import Template Strings\nDESCRIPTION: Examples of dynamic imports using template strings that might be ignored by Knip.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/handling-issues.mdx#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport(`./${value}.ts`);\nimport(`@org/name/dist/${value}.js`);\n```\n\n----------------------------------------\n\nTITLE: Running Knip Command\nDESCRIPTION: Terminal command for executing Knip from the project root directory\nSOURCE: https://github.com/webpro-nl/knip/blob/main/templates/issue-reproduction/monorepo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx knip\n```\n\n----------------------------------------\n\nTITLE: Knip Configuration with Cypress in v1\nDESCRIPTION: Example of how to configure Knip v1 with Cypress end-to-end test files, demonstrating the plugin-based approach for special test file patterns.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/blog/migration-to-v1.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entry\": \"src/index.ts!\",\n  \"project\": \"src/**/*.ts!\",\n  \"cypress\": {\n    \"entry\": \"src/**/*.e2e.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Entry Files in zx Template Tags\nDESCRIPTION: Example showing how Knip extracts entry files from zx template tags in TypeScript. The parser identifies scripts/parse.js as an entry file from the command string.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/features/script-parser.md#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nawait $`node scripts/parse.js`;\n```\n\n----------------------------------------\n\nTITLE: Unsupported Build Script Configuration\nDESCRIPTION: Example of a package.json script that uses an unknown build CLI with arguments that Knip cannot parse.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/guides/handling-issues.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-lib\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"build\": \"unknown-build-cli --entry production.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Component Files\nDESCRIPTION: Imports a component, documentation from Markdown, and CSS styles for a React application. This pattern is common in modern React applications that use webpack or similar bundlers to handle various file types.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/knip/fixtures/compilers/module.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Component from './component';\nimport Docs from './readme.md';\nimport Styles from './styles.css';\n```\n\n----------------------------------------\n\nTITLE: Embedding Video for Watch & Auto-fix Feature in HTML\nDESCRIPTION: This HTML snippet embeds a video demonstrating the '--watch' and '--fix' options of Knip in Visual Studio Code. It provides two video sources for compatibility.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/overview/screenshots-videos.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<video controls width=\"500\">\n  <source src=\"/screenshots/watch-fix.mp4\" type=\"video/mp4\" />\n\n  <source src=\"/screenshots/watch-fix.webm\" type=\"video/webm\" />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Displaying Trace Feature Screenshot in HTML\nDESCRIPTION: This HTML code embeds an image showing the trace of the 'mapIterator' export in a TypeScript codebase using Knip's trace feature.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/packages/docs/src/content/docs/overview/screenshots-videos.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/screenshots/trace.png\" alt=\"trace\" class=\"mw500\" />\n```\n\n----------------------------------------\n\nTITLE: Running Knip Analysis in Bash\nDESCRIPTION: This snippet shows the command to run Knip analysis on the codebase and displays the expected output. It demonstrates Knip's ability to detect unused dependencies, unlisted dependencies, and unused exports across the monorepo structure.\nSOURCE: https://github.com/webpro-nl/knip/blob/main/templates/playground/monorepo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run knip\nUnused dependencies (1)\ntinyglobby  package.json\nUnlisted dependencies (1)\njs-yaml  packages/shared/src/used-fn.ts\nUnused exports (1)\nunusedFunction  unknown  packages/shared/src/exports.ts:7:14\n```"
  }
]