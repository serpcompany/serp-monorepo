[
  {
    "owner": "jackc",
    "repo": "pgx",
    "content": "TITLE: Connecting to PostgreSQL and Querying Data with pgx in Go\nDESCRIPTION: This example demonstrates how to connect to a PostgreSQL database using pgx, execute a query, and retrieve results. It includes error handling and proper connection closure.\nSOURCE: https://github.com/jackc/pgx/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/jackc/pgx/v5\"\n)\n\nfunc main() {\n\t// urlExample := \"postgres://username:password@localhost:5432/database_name\"\n\tconn, err := pgx.Connect(context.Background(), os.Getenv(\"DATABASE_URL\"))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Unable to connect to database: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer conn.Close(context.Background())\n\n\tvar name string\n\tvar weight int64\n\terr = conn.QueryRow(context.Background(), \"select name, weight from widgets where id=$1\", 42).Scan(&name, &weight)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"QueryRow failed: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Println(name, weight)\n}\n```\n\n----------------------------------------\n\nTITLE: Using CollectRows and RowTo Helper Functions in Go\nDESCRIPTION: Demonstrates the new CollectRows and RowTo* helper functions for collecting query results into a slice, along with CollectOneRow for single row results.\nSOURCE: https://github.com/jackc/pgx/blob/master/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nCollectRows\n```\n\n----------------------------------------\n\nTITLE: Using RowScanner Interface for Row Scanning in Go\nDESCRIPTION: Shows how to use the RowScanner interface which allows scanning an entire row into a single argument with Rows.Scan.\nSOURCE: https://github.com/jackc/pgx/blob/master/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nRowScanner\n```\n\n----------------------------------------\n\nTITLE: Using ForEachRow Helper Function in Go\nDESCRIPTION: Shows how to use the new ForEachRow function which simplifies scanning each row and executing code with the scanned values, replacing the previous QueryFunc.\nSOURCE: https://github.com/jackc/pgx/blob/master/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nForEachRow\n```\n\n----------------------------------------\n\nTITLE: Using QueuedQuery for Batch Processing in Go\nDESCRIPTION: Demonstrates the improved batch query ergonomics where Queue returns a QueuedQuery object with methods to register callback functions for handling results.\nSOURCE: https://github.com/jackc/pgx/blob/master/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nQueuedQuery\n```\n\n----------------------------------------\n\nTITLE: Using NamedArgs Type with QueryRewriter Interface in Go\nDESCRIPTION: Demonstrates how to use the new NamedArgs type which implements the QueryRewriter interface to enable named parameters in SQL queries.\nSOURCE: https://github.com/jackc/pgx/blob/master/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nNamedArgs\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Scanner for Complex Types in Go\nDESCRIPTION: Shows how to use the new Map.SQLScanner method to create a sql.Scanner for complex types like slices and ranges that don't implement the sql.Scanner interface directly.\nSOURCE: https://github.com/jackc/pgx/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n*Map.SQLScanner\n```\n\n----------------------------------------\n\nTITLE: Connecting and Querying PostgreSQL Database using pgconn in Go\nDESCRIPTION: Demonstrates establishing a PostgreSQL connection using pgconn, executing a parameterized query to fetch user email by ID, and handling the result set. Includes proper connection cleanup with defer and error handling.\nSOURCE: https://github.com/jackc/pgx/blob/master/pgconn/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npgConn, err := pgconn.Connect(context.Background(), os.Getenv(\"DATABASE_URL\"))\nif err != nil {\n\tlog.Fatalln(\"pgconn failed to connect:\", err)\n}\ndefer pgConn.Close(context.Background())\n\nresult := pgConn.ExecParams(context.Background(), \"SELECT email FROM users WHERE id=$1\", [][]byte{[]byte(\"123\")}, nil, nil, nil)\nfor result.NextRow() {\n\tfmt.Println(\"User 123 has email:\", string(result.Values()[0]))\n}\n_, err = result.Close()\nif err != nil {\n\tlog.Fatalln(\"failed reading result:\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Todo List CRUD Operations\nDESCRIPTION: Command line examples for adding, listing, updating, and removing todo items\nSOURCE: https://github.com/jackc/pgx/blob/master/examples/todo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./todo add 'Learn go'\n./todo list\n./todo update 1 'Learn more go'\n./todo remove 1\n```\n\n----------------------------------------\n\nTITLE: Complete Setup and Usage Example\nDESCRIPTION: A full walkthrough demonstrating database creation, initialization, and todo list operations\nSOURCE: https://github.com/jackc/pgx/blob/master/examples/todo/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncreatedb todo\npsql todo < structure.sql\ngo build\nexport PGDATABASE=todo\n./todo list\n./todo add 'Learn Go'\n./todo list\n./todo update 1 'Learn more Go'\n./todo list\n./todo remove 1\n./todo list\n```\n\n----------------------------------------\n\nTITLE: Setting Database Connection Environment Variables\nDESCRIPTION: Examples of setting up database connection configuration using environment variables\nSOURCE: https://github.com/jackc/pgx/blob/master/examples/todo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport PGDATABASE=todo\n./todo list\n```\n\nLANGUAGE: bash\nCODE:\n```\nPGDATABASE=todo ./todo list\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing PostgreSQL Database\nDESCRIPTION: Commands to create a new PostgreSQL database named 'todo' and initialize it with the schema from structure.sql\nSOURCE: https://github.com/jackc/pgx/blob/master/examples/todo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncreatedb todo\npsql todo < structure.sql\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a Shortened URL via cURL\nDESCRIPTION: cURL command to make a PUT request that creates or updates a shortened URL. The example maps 'google' to 'http://www.google.com'.\nSOURCE: https://github.com/jackc/pgx/blob/master/examples/url_shortener/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT -d 'http://www.google.com' http://localhost:8080/google\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Shortened URL via cURL\nDESCRIPTION: cURL command to make a GET request to retrieve the destination of a shortened URL. The example retrieves the URL mapped to 'google'.\nSOURCE: https://github.com/jackc/pgx/blob/master/examples/url_shortener/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8080/google\n```\n\n----------------------------------------\n\nTITLE: Deleting a Shortened URL via cURL\nDESCRIPTION: cURL command to make a DELETE request that removes a shortened URL mapping. The example deletes the 'google' shortened URL.\nSOURCE: https://github.com/jackc/pgx/blob/master/examples/url_shortener/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE http://localhost:8080/google\n```\n\n----------------------------------------\n\nTITLE: Running the URL Shortener Service with Go\nDESCRIPTION: Command to run the main.go file which starts the URL shortener service. The service requires prior database setup and configuration via environment variables.\nSOURCE: https://github.com/jackc/pgx/blob/master/examples/url_shortener/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run main.go\n```\n\n----------------------------------------\n\nTITLE: Running Chat Program with Inline PostgreSQL Environment Variables\nDESCRIPTION: This snippet shows how to run the chat program by prefixing the execution command with PostgreSQL environment variables. It sets the PGHOST variable inline with the chat program execution.\nSOURCE: https://github.com/jackc/pgx/blob/master/examples/chat/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPGHOST=/private/tmp ./chat\n```\n\n----------------------------------------\n\nTITLE: Exporting PostgreSQL Environment Variables for Chat Program\nDESCRIPTION: This snippet demonstrates how to export PostgreSQL environment variables before running the chat program. It sets the PGHOST variable and then executes the chat program.\nSOURCE: https://github.com/jackc/pgx/blob/master/examples/chat/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport PGHOST=/private/tmp\n./chat\n```\n\n----------------------------------------\n\nTITLE: Setting Up PostgreSQL Test Database with Existing Cluster\nDESCRIPTION: Commands to create and configure a test database for pgx in an existing PostgreSQL cluster, including creating extensions and a numeric domain required for testing.\nSOURCE: https://github.com/jackc/pgx/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport PGDATABASE=pgx_test\ncreatedb\npsql -c 'create extension hstore;'\npsql -c 'create extension ltree;'\npsql -c 'create domain uint64 as numeric(20,0);'\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Cluster for Testing\nDESCRIPTION: Commands to initialize and configure a new PostgreSQL database cluster specifically for testing pgx, including setting up listeners and importing configuration files.\nSOURCE: https://github.com/jackc/pgx/blob/master/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ninitdb --locale=en_US -E UTF-8 --username=postgres .testdb/$POSTGRESQL_DATA_DIR\n\necho \"listen_addresses = '127.0.0.1'\" >> .testdb/$POSTGRESQL_DATA_DIR/postgresql.conf\necho \"port = $PGPORT\" >> .testdb/$POSTGRESQL_DATA_DIR/postgresql.conf\ncat testsetup/postgresql_ssl.conf >> .testdb/$POSTGRESQL_DATA_DIR/postgresql.conf\ncp testsetup/pg_hba.conf .testdb/$POSTGRESQL_DATA_DIR/pg_hba.conf\n\ncd .testdb\n\n# Generate CA, server, and encrypted client certificates.\ngo run ../testsetup/generate_certs.go\n\n# Copy certificates to server directory and set permissions.\ncp ca.pem $POSTGRESQL_DATA_DIR/root.crt\ncp localhost.key $POSTGRESQL_DATA_DIR/server.key\nchmod 600 $POSTGRESQL_DATA_DIR/server.key\ncp localhost.crt $POSTGRESQL_DATA_DIR/server.crt\n\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Database in New Cluster\nDESCRIPTION: Commands to create and configure the test database in the newly created PostgreSQL cluster using a SQL setup script.\nSOURCE: https://github.com/jackc/pgx/blob/master/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncreatedb\npsql --no-psqlrc -f testsetup/postgresql_setup.sql\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Dedicated Test Cluster\nDESCRIPTION: A comprehensive set of environment variables needed to configure and run all pgx tests, including different connection methods and authentication types.\nSOURCE: https://github.com/jackc/pgx/blob/master/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport PGPORT=5015\nexport PGUSER=postgres\nexport PGDATABASE=pgx_test\nexport POSTGRESQL_DATA_DIR=postgresql\n\nexport PGX_TEST_DATABASE=\"host=127.0.0.1 database=pgx_test user=pgx_md5 password=secret\"\nexport PGX_TEST_UNIX_SOCKET_CONN_STRING=\"host=/private/tmp database=pgx_test\"\nexport PGX_TEST_TCP_CONN_STRING=\"host=127.0.0.1 database=pgx_test user=pgx_md5 password=secret\"\nexport PGX_TEST_SCRAM_PASSWORD_CONN_STRING=\"host=127.0.0.1 user=pgx_scram password=secret database=pgx_test\"\nexport PGX_TEST_MD5_PASSWORD_CONN_STRING=\"host=127.0.0.1 database=pgx_test user=pgx_md5 password=secret\"\nexport PGX_TEST_PLAIN_PASSWORD_CONN_STRING=\"host=127.0.0.1 user=pgx_pw password=secret\"\nexport PGX_TEST_TLS_CONN_STRING=\"host=localhost user=pgx_ssl password=secret sslmode=verify-full sslrootcert=`pwd`/.testdb/ca.pem\"\nexport PGX_SSL_PASSWORD=certpw\nexport PGX_TEST_TLS_CLIENT_CONN_STRING=\"host=localhost user=pgx_sslcert sslmode=verify-full sslrootcert=`pwd`/.testdb/ca.pem database=pgx_test sslcert=`pwd`/.testdb/pgx_sslcert.crt sslkey=`pwd`/.testdb/pgx_sslcert.key\"\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL Cluster for Testing\nDESCRIPTION: Command to start the PostgreSQL cluster using the configuration created earlier. This needs to be run whenever testing pgx.\nSOURCE: https://github.com/jackc/pgx/blob/master/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npostgres -D .testdb/$POSTGRESQL_DATA_DIR\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL User for Testing\nDESCRIPTION: Command to create a superuser named 'postgres' which is required for testing but might not exist in some PostgreSQL installations like Homebrew.\nSOURCE: https://github.com/jackc/pgx/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncreateuser -s postgres\n```\n\n----------------------------------------\n\nTITLE: Running pgx Tests with Existing PostgreSQL Cluster\nDESCRIPTION: Commands to set the required environment variable pointing to the test database and run the test suite. This approach runs most but not all tests.\nSOURCE: https://github.com/jackc/pgx/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport PGX_TEST_DATABASE=\"host=/private/tmp database=pgx_test\"\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Running pgfortune server\nDESCRIPTION: Command to start the pgfortune server. By default, it listens on 127.0.0.1:15432 and responds with 'fortune | cowsay -f elephant'.\nSOURCE: https://github.com/jackc/pgx/blob/master/pgproto3/example/pgfortune/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pgfortune\n```\n\n----------------------------------------\n\nTITLE: Connecting to pgfortune with psql\nDESCRIPTION: Example of connecting to the pgfortune server using psql and executing a query. Demonstrates the fortune output formatted by cowsay.\nSOURCE: https://github.com/jackc/pgx/blob/master/pgproto3/example/pgfortune/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ psql -h 127.0.0.1 -p 15432\nTiming is on.\nNull display is \"∅\".\nLine style is unicode.\npsql (11.5, server 0.0.0)\nType \"help\" for help.\n\njack@127.0.0.1:15432 jack=# select foo;\n                   fortune\n─────────────────────────────────────────────\n  _________________________________________ ↵\n / Ships are safe in harbor, but they were \\↵\n \\ never meant to stay there.              /↵\n  ----------------------------------------- ↵\n  \\     /\\  ___  /\\                         ↵\n   \\   // \\/   \\/ \\\\                        ↵\n      ((    O O    ))                       ↵\n       \\\\ /     \\ //                        ↵\n        \\/  | |  \\/                         ↵\n         |  | |  |                          ↵\n         |  | |  |                          ↵\n         |   o   |                          ↵\n         | |   | |                          ↵\n         |m|   |m|                          ↵\n\n(1 row)\n\nTime: 28.161 ms\n```\n\n----------------------------------------\n\nTITLE: Installing pgfortune using Go\nDESCRIPTION: Command to install pgfortune using Go's package manager. Requires 'fortune' and 'cowsay' to be installed separately.\nSOURCE: https://github.com/jackc/pgx/blob/master/pgproto3/example/pgfortune/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/jackc/pgproto3/example/pgfortune\n```"
  }
]