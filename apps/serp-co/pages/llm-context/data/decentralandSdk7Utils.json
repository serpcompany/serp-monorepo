[
  {
    "owner": "decentraland",
    "repo": "sdk7-utils",
    "content": "TITLE: Creating and Running Action Sequences in Decentraland SDK7\nDESCRIPTION: This comprehensive example demonstrates the use of action sequences in Decentraland SDK7. It creates a box that changes its scale until clicked, then resets its scale and moves. The example includes custom IAction implementations, sequence building, and sequence running.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport { engine, Transform, Entity } from '@dcl/sdk/ecs'\nimport { Vector3 } from '@dcl/sdk/math'\nimport * as utils from '@dcl-sdk/utils'\n\n// Set clicked flag\nlet boxClicked = false\n\n// Create box entity\nconst box = utils.addTestCube({ position: { x: 14, y: 0, z: 14 } }, (e) => {\n\tboxClicked = true\n})\n\n// Use IAction to define action for scaling\nclass ScaleAction implements utils.actions.IAction {\n\thasFinished: boolean = false\n\tentity: Entity\n\tscale: Vector3\n\n\tconstructor(entity: Entity, scale: Vector3) {\n\t\tthis.entity = entity\n\t\tthis.scale = scale\n\t}\n\n\t// Method when action starts\n\tonStart(): void {\n\t\tconst transform = Transform.get(this.entity)\n\t\tthis.hasFinished = false\n\n\t\tutils.tweens.startScaling(\n\t\t\tthis.entity,\n\t\t\ttransform.scale,\n\t\t\tthis.scale,\n\t\t\t1.5,\n\t\t\tutils.InterpolationType.EASEINQUAD,\n\t\t\t() => {\n\t\t\t\tthis.hasFinished = true\n\t\t\t}\n\t\t)\n\t}\n\t// Method to run on every frame\n\tupdate(dt: number): void {}\n\t// Method to run at the end\n\tonFinish(): void {}\n}\n\n// Use IAction to define action for translation\nclass MoveAction implements utils.actions.IAction {\n\thasFinished: boolean = false\n\tentity: Entity\n\tposition: Vector3\n\n\tconstructor(entity: Entity, position: Vector3) {\n\t\tthis.entity = entity\n\t\tthis.position = position\n\t}\n\n\tonStart(): void {\n\t\tconst transform = Transform.get(this.entity)\n\n\t\tutils.tweens.startTranslation(\n\t\t\tthis.entity,\n\t\t\ttransform.position,\n\t\t\tthis.position,\n\t\t\t4,\n\t\t\tutils.InterpolationType.LINEAR,\n\t\t\t() => {\n\t\t\t\tthis.hasFinished = true\n\t\t\t}\n\t\t)\n\t}\n\n\tupdate(dt: number): void {}\n\n\tonFinish(): void {}\n}\n\n// Use sequence builder to create a sequence\nconst builder = new utils.actions.SequenceBuilder()\n\t.while(() => !boxClicked)\n\t.then(new ScaleAction(box, Vector3.create(1.5, 1.5, 1.5)))\n\t.then(new ScaleAction(box, Vector3.create(0.5, 0.5, 0.5)))\n\t.endWhile()\n\t.then(new ScaleAction(box, Vector3.create(1, 1, 1)))\n\t.then(new MoveAction(box, Vector3.create(1, 0, 1)))\n\n// Run built sequence and destroy it once it finishes\nconst runner = new utils.actions.SequenceRunner(engine, builder, () => {\n\trunner.destroy()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Trigger Layers in Decentraland SDK7\nDESCRIPTION: This complex example demonstrates the use of multiple trigger layers to create a scene with food, mice, and cats. It showcases how different entities can interact based on their assigned layers and trigger areas.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport { engine, Transform } from '@dcl/sdk/ecs'\nimport * as utils from '@dcl-sdk/utils'\nimport { Color4 } from '@dcl/sdk/math'\n\n// Define layers\nconst FOOD_LAYER = utils.LAYER_1\nconst MOUSE_LAYER = utils.LAYER_2\nconst CAT_LAYER = utils.LAYER_3\n\n// Remove default trigger from a player so that they don't interfere\nutils.triggers.removeTrigger(engine.PlayerEntity)\n\n// Create food\nconst food = utils.addTestCube(\n\t{ position: { x: 1 + Math.random() * 14, y: 0, z: 1 + Math.random() * 14 } },\n\tundefined,\n\tundefined,\n\tColor4.Green(),\n\tfalse,\n\ttrue\n)\nutils.triggers.addTrigger(\n\tfood,\n\tFOOD_LAYER,\n\tMOUSE_LAYER | CAT_LAYER,\n\t[{ type: 'box' }],\n\tfunction (otherEntity) {\n\t\t// Food was eaten either by cat or mouse, \"respawn\" it\n\t\tTransform.getMutable(food).position = {\n\t\t\tx: 1 + Math.random() * 14,\n\t\t\ty: 0,\n\t\t\tz: 1 + Math.random() * 14,\n\t\t}\n\t\t// Set mouse and cat moving towards food\n\t\tutils.tweens.startTranslation(\n\t\t\tmouse,\n\t\t\tTransform.get(mouse).position,\n\t\t\tTransform.get(food).position,\n\t\t\t4\n\t\t)\n\t\tutils.tweens.startTranslation(\n\t\t\tcat,\n\t\t\tTransform.get(cat).position,\n\t\t\tTransform.get(food).position,\n\t\t\t4\n\t\t)\n\t}\n)\n\n// Create mouse\nconst mouse = utils.addTestCube(\n\t{\n\t\tposition: { x: 1 + Math.random() * 14, y: 0, z: 1 + Math.random() * 14 },\n\t\tscale: { x: 0.5, y: 0.5, z: 0.5 },\n\t},\n\tundefined,\n\tundefined,\n\tColor4.Blue(),\n\ttrue,\n\ttrue\n)\nutils.triggers.addTrigger(\n\tmouse,\n\tMOUSE_LAYER,\n\tCAT_LAYER,\n\t[{ type: 'sphere', radius: 0.25 }],\n\tfunction (otherEntity) {\n\t\t// Mouse was eaten by cat, \"respawn\" it\n\t\tTransform.getMutable(mouse).position = {\n\t\t\tx: 1 + Math.random() * 14,\n\t\t\ty: 0,\n\t\t\tz: 1 + Math.random() * 14,\n\t\t}\n\t\t// Set mouse moving towards food\n\t\tutils.tweens.startTranslation(\n\t\t\tmouse,\n\t\t\tTransform.get(mouse).position,\n\t\t\tTransform.get(food).position,\n\t\t\t4\n\t\t)\n\t}\n)\n\n// Create cat\nconst cat = utils.addTestCube(\n\t{ position: { x: 1 + Math.random() * 14, y: 0, z: 1 + Math.random() * 14 } },\n\tundefined,\n\tundefined,\n\tColor4.Red(),\n\ttrue,\n\ttrue\n)\nutils.triggers.addTrigger(cat, CAT_LAYER, CAT_LAYER, [\n\t{ type: 'sphere', radius: 0.5 },\n])\n\n// Set mouse and cat moving towards food\nutils.tweens.startTranslation(\n\tmouse,\n\tTransform.get(mouse).position,\n\tTransform.get(food).position,\n\t4\n)\nutils.tweens.startTranslation(\n\tcat,\n\tTransform.get(cat).position,\n\tTransform.get(food).position,\n\t4\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a One-Time Trigger in Decentraland SDK7\nDESCRIPTION: This example shows how to create a one-time trigger area using utils.triggers.oneTimeTrigger. The trigger displays a welcome message the first time a player walks into the area, then removes itself from the scene.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport { engine, Transform } from '@dcl/sdk/ecs'\nimport * as utils from '@dcl-sdk/utils'\n\nconst triggerEntity = engine.addEntity()\nTransform.create(triggerEntity)\n\nutils.triggers.oneTimeTrigger(\n\ttriggerEntity,\n\tutils.NO_LAYERS,\n\tutils.LAYER_1,\n\t[\n\t\t{\n\t\t\ttype: 'box',\n\t\t\tposition: { x: 4, y: 1, z: 4 },\n\t\t\tscale: { x: 8, y: 1, z: 8 },\n\t\t},\n\t],\n\tfunction (otherEntity) {\n\t\tconsole.log('Welcome!')\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Trigger Area with Random Movement in Decentraland SDK7\nDESCRIPTION: This snippet demonstrates how to create a trigger area for a box entity that changes its position randomly when triggered by the player. It uses the utils.triggers.addTrigger function to set up the trigger and define its behavior.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport { Transform } from '@dcl/sdk/ecs'\nimport * as utils from '@dcl-sdk/utils'\n\n// Create a box with disabled collision\nconst box = utils.addTestCube(\n\t{ position: { x: 2, y: 1, z: 2 } },\n\tundefined,\n\tundefined,\n\tundefined,\n\tundefined,\n\ttrue\n)\n\nutils.triggers.addTrigger(\n\tbox,\n\tutils.NO_LAYERS,\n\tutils.LAYER_1,\n\t[{ type: 'box' }],\n\tfunction (otherEntity) {\n\t\tconsole.log(`triggered by ${otherEntity}!`)\n\t\tTransform.getMutable(box).position = {\n\t\t\tx: 1 + Math.random() * 14,\n\t\t\ty: 1,\n\t\t\tz: 1 + Math.random() * 14,\n\t\t}\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Playing Sounds in Decentraland SDK7\nDESCRIPTION: This snippet demonstrates how to use the playSound utility function to play audio files in a scene. It shows examples of playing a sound once at the camera's position and looping a positional sound at a specific location.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport * as utils from '@dcl-sdk/utils'\n\nexport function main() {\n\t// play once at the camera's position\n\tutils.playSound('assets/sounds/hooray.mp3')\n\n\t// loop as a positional sound in a given location\n\tutils.playSound('assets/sounds/crickets.mp3', true, Vector3.create(10, 1, 14))\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Toggle and Tween in Decentraland SDK7\nDESCRIPTION: This example combines a toggle with a tween to switch an entity between two positions when clicked. It demonstrates the integration of toggle and tween functionalities.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport { InputAction, pointerEventsSystem } from '@dcl/sdk/ecs'\nimport { Vector3 } from '@dcl/sdk/math'\nimport * as utils from '@dcl-sdk/utils'\n\nconst box = utils.addTestCube({ position: { x: 5, y: 1, z: 5 } })\n\n// Define two positions for toggling\nlet pos1 = Vector3.create(5, 1, 5)\nlet pos2 = Vector3.create(5, 1, 6)\n\n// Box is moved after its state changes\nutils.toggles.addToggle(box, utils.ToggleState.Off, function (value) {\n\tif (value == utils.ToggleState.On) {\n\t\tutils.tweens.startTranslation(box, pos1, pos2, 1)\n\t} else {\n\t\tutils.tweens.startTranslation(box, pos2, pos1, 1)\n\t}\n})\n\n// Listen for click on the box and toggle its state\npointerEventsSystem.onPointerDown(\n\tbox,\n\tfunction (event) {\n\t\tutils.toggles.flip(box)\n\t},\n\t{\n\t\tbutton: InputAction.IA_POINTER,\n\t\thoverText: 'click',\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Smooth Path Movement in Decentraland SDK7\nDESCRIPTION: This snippet demonstrates how to make an entity follow a smooth path through four key points, subdivided into 20 segments, over a period of 10 seconds using the startSmoothPath function.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport { Vector3 } from '@dcl/sdk/math'\nimport * as utils from '@dcl-sdk/utils'\n\nconst box = utils.addTestCube({ position: { x: 1, y: 1, z: 1 } })\n\nlet path = [\n\tVector3.create(5, 1, 5),\n\tVector3.create(5, 1, 11),\n\tVector3.create(11, 1, 11),\n\tVector3.create(11, 1, 5),\n]\n\nutils.paths.startSmoothPath(box, path, 10, 20)\n```\n\n----------------------------------------\n\nTITLE: Implementing Straight Path Movement in Decentraland SDK7\nDESCRIPTION: This example shows how to move an entity through a straight path defined by four points over a duration of 10 seconds using the startStraightPath function.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport { Vector3 } from '@dcl/sdk/math'\nimport * as utils from '@dcl-sdk/utils'\n\nconst box = utils.addTestCube({ position: { x: 1, y: 1, z: 1 } })\n\nlet path = [\n\tVector3.create(1, 1, 1),\n\tVector3.create(1, 1, 15),\n\tVector3.create(15, 1, 15),\n\tVector3.create(15, 1, 1),\n]\n\nutils.paths.startStraightPath(box, path, 10)\n```\n\n----------------------------------------\n\nTITLE: Implementing Looping Smooth Path in Decentraland SDK7\nDESCRIPTION: This example creates a looping smooth path for a box entity, passing through three points and aligning the box's rotation with its movement direction. The path repeats indefinitely.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport * as utils from '@dcl-sdk/utils'\nimport { Color4 } from '@dcl/sdk/math'\n\n// Path points\nconst p0 = { x: 2, y: 1, z: 2 }\nconst p1 = { x: 8, y: 1, z: 2 }\nconst p2 = { x: 8, y: 1, z: 6 }\n\n// Path points' markers\nutils.addTestCube(\n\t{ position: p0 },\n\tundefined,\n\tundefined,\n\tColor4.Red(),\n\tfalse,\n\ttrue\n)\nutils.addTestCube(\n\t{ position: p1 },\n\tundefined,\n\tundefined,\n\tColor4.Green(),\n\tfalse,\n\ttrue\n)\nutils.addTestCube(\n\t{ position: p2 },\n\tundefined,\n\tundefined,\n\tColor4.Blue(),\n\tfalse,\n\ttrue\n)\n\nconst box = utils.addTestCube(\n\t{ position: p0, scale: { x: 1, y: 1, z: 2 } },\n\tundefined,\n\tundefined,\n\tColor4.Yellow(),\n\tfalse,\n\ttrue\n)\n\nfunction startPath() {\n\tutils.paths.startSmoothPath(\n\t\t// Set the last point of the path to be identical to the first one to achieve looping\n\t\tbox,\n\t\t[p0, p1, p2, p0],\n\t\t5,\n\t\t50,\n\t\t// Set faceDirection to true to align box's rotation with its movement's direction\n\t\ttrue,\n\t\t// When path is complete, start it again\n\t\tfunction () {\n\t\t\tstartPath()\n\t\t}\n\t)\n}\n\nstartPath()\n```\n\n----------------------------------------\n\nTITLE: Implementing Path Callbacks in Decentraland SDK7\nDESCRIPTION: This example demonstrates the usage of onFinishCallback and onPointReachedCallback with a straight path. It logs messages when the box reaches each point and when the entire path is completed.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport { Vector3 } from '@dcl/sdk/math'\nimport * as utils from '@dcl-sdk/utils'\n\nconst box = utils.addTestCube({ position: { x: 1, y: 1, z: 1 } })\n\nlet path = [\n\tVector3.create(5, 1, 5),\n\tVector3.create(5, 1, 11),\n\tVector3.create(11, 1, 11),\n\tVector3.create(11, 1, 5),\n]\n\nutils.paths.startStraightPath(\n\tbox,\n\tpath,\n\t10,\n\tfalse,\n\tfunction () {\n\t\tconsole.log('Path is complete')\n\t},\n\tfunction (pointIndex, pointCoords, nextPointCoords) {\n\t\tconsole.log(`Reached point ${pointIndex}`)\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Perpetual Rotation in Decentraland SDK7\nDESCRIPTION: This snippet demonstrates how to use the smoothRotation function to continuously rotate a cube entity until it's clicked. It shows the usage of perpetualMotions.smoothRotation and perpetualMotions.stopRotation.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport { Quaternion } from '@dcl/sdk/math'\nimport * as utils from '@dcl-sdk/utils'\n\nconst box = utils.addTestCube({ position: { x: 1, y: 1, z: 1 } }, function () {\n\tutils.perpetualMotions.stopRotation(box)\n})\n\nutils.perpetualMotions.smoothRotation(box, 1000)\n```\n\n----------------------------------------\n\nTITLE: Implementing Toggle Functionality in Decentraland SDK7\nDESCRIPTION: This snippet shows how to use the toggle utility to switch a box's color between green and red when clicked. It demonstrates the usage of addToggle, flip, and handling pointer events.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport { Material, InputAction, pointerEventsSystem } from '@dcl/sdk/ecs'\nimport { Color4 } from '@dcl/sdk/math'\nimport * as utils from '@dcl-sdk/utils'\n\nconst box = utils.addTestCube({ position: { x: 5, y: 1, z: 5 } })\n\n// Box is initally green\nMaterial.setPbrMaterial(box, { albedoColor: Color4.Green() })\n\n// Add a toggle\nutils.toggles.addToggle(box, utils.ToggleState.On, function (value) {\n\tif (value == utils.ToggleState.On) {\n\t\t// Set color to green\n\t\tMaterial.setPbrMaterial(box, { albedoColor: Color4.Green() })\n\t} else {\n\t\t// Set color to red\n\t\tMaterial.setPbrMaterial(box, { albedoColor: Color4.Red() })\n\t}\n})\n\n// Listen for click on the box and toggle its state\npointerEventsSystem.onPointerDown(\n\tbox,\n\tfunction (event) {\n\t\tutils.toggles.flip(box)\n\t},\n\t{\n\t\tbutton: InputAction.IA_POINTER,\n\t\thoverText: 'click',\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Player Position in Decentraland SDK7\nDESCRIPTION: This example shows how to use the getPlayerPosition utility function to retrieve the current position of the player's avatar. It should be called inside the main() function or a system to ensure the data exists.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport * as utils from '@dcl-sdk/utils'\n\nexport function main() {\n\tconst playerPos = utils.getPlayerPosition()\n\n\t// should log the player's current position\n\tconsole.log(playerPos)\n}\n```\n\n----------------------------------------\n\nTITLE: Animating Entity Position with Tweens\nDESCRIPTION: Demonstrates how to use tweens to smoothly animate an entity's position from one point to another over a specified duration.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Required to make scene work\nexport * from '@dcl/sdk'\n// Import SDK functionality and utils library\nimport { Vector3 } from '@dcl/sdk/math'\nimport * as utils from '@dcl-sdk/utils'\n\n// Create a box\nconst box = utils.addTestCube()\n\n// Define start and end positions\nlet startPos = Vector3.create(1, 1, 1)\nlet endPos = Vector3.create(15, 1, 15)\n\n// Move a box\nutils.tweens.startTranslation(box, startPos, endPos, 2)\n```\n\n----------------------------------------\n\nTITLE: Canceling Timers in Decentraland SDK7\nDESCRIPTION: This example shows how to use setInterval to change a box's color every second and how to cancel the interval when the box is clicked, demonstrating timer cancellation.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport * as utils from '@dcl-sdk/utils'\nimport { Material, InputAction, pointerEventsSystem } from '@dcl/sdk/ecs'\nimport { Color4 } from '@dcl/sdk/math'\n\nconst box = utils.addTestCube({ position: { x: 1, y: 1, z: 1 } })\n\n// Store a timer id in a variable\nconst timerId = utils.timers.setInterval(function () {\n\tMaterial.setPbrMaterial(box, {\n\t\talbedoColor: Color4.create(Math.random(), Math.random(), Math.random(), 1),\n\t})\n}, 1000)\n\npointerEventsSystem.onPointerDown(\n\tbox,\n\t// Cancel a timer when user clicks on a box\n\tfunction (event) {\n\t\tutils.timers.clearInterval(timerId)\n\t},\n\t{\n\t\tbutton: InputAction.IA_POINTER,\n\t\thoverText: 'click',\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Using setInterval in Decentraland SDK7\nDESCRIPTION: This example uses setInterval to change the scale of a cube to a random size every 2 seconds, demonstrating repeated execution at fixed intervals.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport * as utils from '@dcl-sdk/utils'\nimport { Transform } from '@dcl/sdk/ecs'\nimport { Vector3 } from '@dcl/sdk/math'\n\nconst box = utils.addTestCube()\n\nutils.timers.setInterval(function () {\n\tlet size = Math.random()\n\tTransform.getMutable(box).scale = Vector3.create(size, size, size)\n}, 2000)\n```\n\n----------------------------------------\n\nTITLE: Animating Entity Rotation with Tweens\nDESCRIPTION: Shows how to smoothly rotate an entity from one orientation to another over time using the startRotation tween function.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport { Quaternion } from '@dcl/sdk/math'\nimport * as utils from '@dcl-sdk/utils'\n\nconst box = utils.addTestCube()\n\n// Define start and end directions\nlet startRot = Quaternion.fromEulerDegrees(90, 0, 0)\nlet endRot = Quaternion.fromEulerDegrees(270, 0, 0)\n\n// Rotate a box\nutils.tweens.startRotation(box, startRot, endRot, 2)\n```\n\n----------------------------------------\n\nTITLE: Animating Entity Scale with Tweens\nDESCRIPTION: Demonstrates how to animate an entity's scale over time, making it grow or shrink between specified sizes using the startScaling tween function.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport { Vector3 } from '@dcl/sdk/math'\nimport * as utils from '@dcl-sdk/utils'\n\nconst box = utils.addTestCube()\n\n// Define start and end sizes\nlet startSize = Vector3.create(1, 1, 1)\nlet endSize = Vector3.create(0.75, 2, 0.75)\n\n// Scale a box\nutils.tweens.startScaling(box, startSize, endSize, 2)\n```\n\n----------------------------------------\n\nTITLE: Using Callbacks with Tween Animations\nDESCRIPTION: Shows how to use callback functions that execute when a tween animation completes. This example logs a message when a box finishes moving.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport { Vector3 } from '@dcl/sdk/math'\nimport * as utils from '@dcl-sdk/utils'\n\nconst box = utils.addTestCube()\nutils.tweens.startTranslation(\n\tbox,\n\tVector3.create(1, 1, 1),\n\tVector3.create(2, 1, 2),\n\t2,\n\tutils.InterpolationType.LINEAR,\n\tfunction () {\n\t\tconsole.log('Tween is done')\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Stopping Tween Animations\nDESCRIPTION: Demonstrates how to stop ongoing tween animations on an entity. The example shows multiple tweens being stopped when a player clicks on a sphere.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport { Quaternion, Vector3, Color4 } from '@dcl/sdk/math'\nimport * as utils from '@dcl-sdk/utils'\n\nconst box = utils.addTestCube()\nutils.tweens.startTranslation(\n\tbox,\n\tVector3.create(1, 1, 1),\n\tVector3.create(15, 1, 15),\n\t10\n)\nutils.tweens.startRotation(\n\tbox,\n\tQuaternion.fromEulerDegrees(0, 0, 0),\n\tQuaternion.fromEulerDegrees(0, 90, 0),\n\t10\n)\nutils.tweens.startScaling(\n\tbox,\n\tVector3.create(1, 1, 1),\n\tVector3.create(2, 2, 2),\n\t10\n)\n\nconst sphere = utils.addTestCube(\n\t{ position: { x: 2, y: 1, z: 1 } },\n\tfunction (event) {\n\t\tutils.tweens.stopTranslation(box)\n\t\tutils.tweens.stopRotation(box)\n\t\tutils.tweens.stopScaling(box)\n\t},\n\tundefined,\n\tColor4.Red(),\n\ttrue\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating World Position in Decentraland SDK7\nDESCRIPTION: This example shows how to use utils.getWorldPosition to calculate the global position of an entity that is parented to another entity, taking into account the positions of both the child and parent entities.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport * as utils from '@dcl-sdk/utils'\nimport { Transform } from '@dcl/sdk/ecs'\n\nconst cube = utils.addTestCube({ position: { x: 1, y: 1, z: 1 } })\nconst childCube = utils.addTestCube({ position: { x: 0, y: 1, z: 0 } })\nTransform.getMutable(childCube).parent = cube\n\nconst worldPos = utils.getWorldPosition(childCube)\nconsole.log(`${worldPos.x} ${worldPos.y} ${worldPos.z}`)\n```\n\n----------------------------------------\n\nTITLE: Calculating World Rotation for Nested Entities in Decentraland SDK7\nDESCRIPTION: This snippet demonstrates how to calculate the global rotation of a nested entity using the getWorldRotation utility function. It creates two cubes, sets one as a child of the other, and logs the world rotation of the child cube.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport * as utils from '@dcl-sdk/utils'\nimport { Transform } from '@dcl/sdk/ecs'\nimport { Quaternion } from '@dcl/sdk/math'\n\nconst cube = utils.addTestCube({\n\tposition: { x: 1, y: 1, z: 1 },\n\trotation: Quaternion.fromEulerDegrees(0, 30, 0),\n})\nconst childCube = utils.addTestCube({\n\tposition: { x: 0, y: 1, z: 0 },\n\trotation: Quaternion.fromEulerDegrees(0, 60, 0),\n})\nTransform.getMutable(childCube).parent = cube\n\nconst worldRot = Quaternion.toEulerAngles(utils.getWorldRotation(childCube))\nconsole.log(`${worldRot.x} ${worldRot.y} ${worldRot.z}`)\n```\n\n----------------------------------------\n\nTITLE: Using setTimeout in Decentraland SDK7\nDESCRIPTION: This snippet demonstrates how to use setTimeout to delay the execution of a function by 1000 milliseconds (1 second).\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport * as utils from '@dcl-sdk/utils'\n\nutils.timers.setTimeout(function () {\n\tconsole.log('1 second passed')\n}, 1000)\n```\n\n----------------------------------------\n\nTITLE: Using Non-linear Interpolation for Tweens\nDESCRIPTION: Shows how to use non-linear interpolation types for animations, creating more natural movement patterns like ease-in quadratic motion.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport { Vector3 } from '@dcl/sdk/math'\nimport * as utils from '@dcl-sdk/utils'\n\nconst box = utils.addTestCube()\nlet startPos = Vector3.create(1, 1, 1)\nlet endPos = Vector3.create(15, 1, 15)\nutils.tweens.startTranslation(\n\tbox,\n\tstartPos,\n\tendPos,\n\t2,\n\tutils.InterpolationType.EASEINQUAD\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Entity Parent in Decentraland SDK7\nDESCRIPTION: This example shows how to use the getEntityParent utility function to retrieve the parent entity of a given entity. It creates two cubes, sets one as the parent of the other, and then retrieves and logs the parent entity.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport * as utils from '@dcl-sdk/utils'\n\nconst box = utils.addTestCube()\n\nconst boxParent = utils.addTestCube()\n\n// set boxParent as the parent of box\nTransform.getMutable(box).parent = boxParent\n\nconst parent = utils.getEntityParent(box)\n\n// should log the id of boxParent\nconsole.log(parent)\n```\n\n----------------------------------------\n\nTITLE: Getting Child Entities of a Parent in Decentraland SDK7\nDESCRIPTION: This snippet demonstrates the use of the getEntitiesWithParent utility function to retrieve all child entities of a given parent entity. It creates two cubes, sets one as the parent of the other, and then retrieves and logs the array of child entities.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport * as utils from '@dcl-sdk/utils'\n\nconst box = utils.addTestCube()\n\nconst boxParent = utils.addTestCube()\n\n// set boxParent as the parent of box\nTransform.getMutable(box).parent = boxParent\n\nconst children = utils.getEntitiesWithParent(boxParent)\n\n// should log an array including the id of box\nconsole.log(children)\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Label for an Entity\nDESCRIPTION: Shows how to add a floating text label above an entity using the utils.addLabel function. The example creates a test cube and adds a label above it.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport * as utils from '@dcl-sdk/utils'\n\nconst cube = utils.addTestCube({ position: { x: 1, y: 1, z: 1 } })\nutils.addLabel('Random cube', cube)\n```\n\n----------------------------------------\n\nTITLE: Remapping Values in Decentraland SDK7\nDESCRIPTION: This snippet demonstrates the use of utils.remap to map a value from one range to another. It maps the value 5 from a scale of 0-10 to a scale of 300-400, resulting in 350.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport * as utils from '@dcl-sdk/utils'\n\nlet input = 5\nlet result = utils.remap(input, 0, 10, 300, 400)\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: Creating a Debug Test Cube\nDESCRIPTION: Shows how to create a clickable debug cube that logs a message when clicked. This is useful for testing and debugging scene interactions.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@dcl/sdk'\nimport * as utils from '@dcl-sdk/utils'\n\nutils.addTestCube({ position: { x: 2, y: 1, z: 2 } }, (event) => {\n\tconsole.log('Cube clicked')\n})\n```\n\n----------------------------------------\n\nTITLE: Installing the Utils Library via NPM\nDESCRIPTION: Demonstrates how to install the @dcl-sdk/utils library as an npm package for a Decentraland scene and how to import it into your TypeScript files.\nSOURCE: https://github.com/decentraland/sdk7-utils/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @dcl-sdk/utils\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as utils from '@dcl-sdk/utils'\n```"
  }
]