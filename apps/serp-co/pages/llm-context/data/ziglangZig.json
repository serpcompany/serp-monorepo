[
  {
    "owner": "ziglang",
    "repo": "zig",
    "content": "TITLE: Marking Compile Error Tests in Zig - Zig\nDESCRIPTION: This Zig snippet demonstrates how to annotate a source file as a compile error test using special comments. The 'is_test=true' flag is used to indicate that this file should be treated as a test when running 'zig test', and an expected error message is provided for output matching. The snippet also illustrates the structure for specifying the exact error message position and description, which aids in automated testing of compiler diagnostics.\nSOURCE: https://github.com/ziglang/zig/blob/master/test/cases/README.md#_snippet_0\n\nLANGUAGE: zig\nCODE:\n```\n// error\n// is_test=true\n//\n// :4:13: error: 'try' outside function scope\n```\n\n----------------------------------------\n\nTITLE: Marking Translate-c Test Cases - C\nDESCRIPTION: This C snippet uses special comments to configure a test for translating C code to Zig using 'translate-c'. It specifies the translation frontends ('aro' and 'clang') and the target platform ('x86_64-linux'). The example further includes constants in Zig syntax following the comments, testing the translation capability and constant declaration parsing. These tests help ensure the correctness of 'translate-c' output against different C frontends and targets.\nSOURCE: https://github.com/ziglang/zig/blob/master/test/cases/README.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n// translate-c\n// c_frontend=aro,clang\n// target=x86_64-linux\n//\n// pub const foo = 1;\n// pub const immediately_after_foo = 2;\n//\n// pub const somewhere_else_in_the_file = 3:\n```\n\n----------------------------------------\n\nTITLE: Specifying Execution Test Cases - Zig\nDESCRIPTION: This Zig code snippet shows how to tag a test case as an execution test, instructing the Zig test harness to run the code and expect a successful exit (exit code 0). The '// run' comment serves as a directive for automatic recognition by the test system, making these tests suitable for regular runtime validation. No additional parameters or error checking are defined in this configuration.\nSOURCE: https://github.com/ziglang/zig/blob/master/test/cases/README.md#_snippet_1\n\nLANGUAGE: zig\nCODE:\n```\n// run\n```\n\n----------------------------------------\n\nTITLE: Marking Run-Translated-C Test Cases - C\nDESCRIPTION: This C snippet demonstrates how to define a test that involves translating C code to Zig and then executing the translated code. The '// run-translated-c' directive tells the test harness to both translate and execute the code, while specifying translation frontends and the target platform just as in translate-c tests. This approach is useful for end-to-end validation of the translation process combined with runtime verification.\nSOURCE: https://github.com/ziglang/zig/blob/master/test/cases/README.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n// run-translated-c\n// c_frontend=aro,clang\n// target=x86_64-linux\n//\n// Hello world!\n```\n\n----------------------------------------\n\nTITLE: Limiting Test Backends and Targets - Zig\nDESCRIPTION: This Zig snippet configures a test case to run only with specific compiler backends ('stage2', 'llvm') and target platforms ('x86_64-linux', 'x86_64-macos'). The '// run' directive marks the snippet for execution testing, while 'backend' and 'target' parameters restrict the environments where the test will be executed. This is essential for cross-platform testing and validating backend-specific functionality, ensuring that tests only run where applicable.\nSOURCE: https://github.com/ziglang/zig/blob/master/test/cases/README.md#_snippet_4\n\nLANGUAGE: zig\nCODE:\n```\n// run\n// backend=stage2,llvm\n// target=x86_64-linux,x86_64-macos\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Hello World with Aro C Compiler\nDESCRIPTION: Demonstrates how to compile a simple C hello world program using Aro compiler and execute it. The example shows creating a C file that calls printf, compiling it with Aro via Zig build system, and running the resulting executable.\nSOURCE: https://github.com/ziglang/zig/blob/master/lib/compiler/aro/README.md#_snippet_0\n\nLANGUAGE: sh-session\nCODE:\n```\n$ cat hello.c\nextern int printf(const char *restrict fmt, ...);\nint main(void) {\n    printf(\"Hello, world!\\n\");\n    return 0;\n}\n$ zig build && ./zig-out/bin/arocc hello.c -o hello\n$ ./hello\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Building Zig from Source with CMake\nDESCRIPTION: Standard CMake build process for compiling Zig from source. Requires CMake 3.15+, a C/C++ toolchain, and LLVM, Clang, and LLD development libraries version 20.x.\nSOURCE: https://github.com/ziglang/zig/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\ncmake ..\nmake install\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Default Build Type - CMake CMakeLists.txt\nDESCRIPTION: Ensures that CMake 3.15 or higher is used for the build system and sets the default build type to \"Debug\" unless explicitly specified by the user. This enables a consistent and debuggable build environment for developers. There are no external dependencies, and the user can override the build type via CMake cache variables; outputs are CMake environment variables.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n\nif(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE STRING\n        \"Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel.\" FORCE)\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Installation Prefix - CMake CMakeLists.txt\nDESCRIPTION: Sets the default installation directory for the Zig build to a 'stage3' folder within the current binary directory, unless a prefix is already configured by the user. This determines where Zig will be installed and allows override via the CMAKE_INSTALL_PREFIX cache variable. The snippet has no prerequisites and outputs a CMake environment variable.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_INSTALL_PREFIX)\n    set(CMAKE_INSTALL_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/stage3\" CACHE PATH\n      \"Directory to install zig to\" FORCE)\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Synchronizing CMAKE_PREFIX_PATH Environment and Cache - CMake CMakeLists.txt\nDESCRIPTION: Appends system and environment-level CMAKE_PREFIX_PATH values to a Zig-specific variable, handling platform differences (':' on POSIX, ';' on Windows) to unify CMake's module and package search paths. Ensures that Zig's build picks up dependencies from package managers like Homebrew or user-defined prefixes. Inputs include CMAKE_PREFIX_PATH and the corresponding environment variable; there are no direct outputs apart from local CMake variable setup.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# CMake recognizes the CMAKE_PREFIX_PATH environment variable for some things,\n# and also the CMAKE_PREFIX_PATH cache variable for other things. However, it\n# does not relate these two things, i.e. if the environment variable is set,\n# CMake does not populate the cache variable in a corresponding manner. Some\n# package systems, such as Homebrew, set the environment variable but not the\n# cache variable. Furthermore, the environment variable follows the system path\n# separator, such as ':' on POSIX and ';' on Windows, but the cache variable\n# follows CMake's array behavior, i.e. always ';' for a separator.\nlist(APPEND ZIG_CMAKE_PREFIX_PATH \"${CMAKE_PREFIX_PATH}\")\nif(WIN32)\n  list(APPEND ZIG_CMAKE_PREFIX_PATH $ENV{CMAKE_PREFIX_PATH})\nelse()\n  string(REGEX REPLACE \":\" \";\" ZIG_CMAKE_PREFIX_PATH_STRING \"$ENV{CMAKE_PREFIX_PATH}\")\n  list(APPEND ZIG_CMAKE_PREFIX_PATH \"${ZIG_CMAKE_PREFIX_PATH_STRING}\")\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Project Declaration and Metadata Setup - CMake CMakeLists.txt\nDESCRIPTION: Declares the Zig project metadata, including description, homepage URL, supported languages (C, C++), and project name. This is required for CMake to configure the project accurately and enables IDEs and tools to fetch auxiliary information. There are no external dependencies, and this affects only CMake's project context.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nproject(zig\n  DESCRIPTION\n    \"Zig is a general-purpose programming language and toolchain for maintaining robust, optimal and reusable software\"\n  HOMEPAGE_URL\n    \"https://ziglang.org\"\n  LANGUAGES\n    C CXX\n)\n\n```\n\n----------------------------------------\n\nTITLE: Zig Version Resolution via Git or Manual Override - CMake CMakeLists.txt\nDESCRIPTION: Determines the Zig version string to use by defaulting to major, minor, patch variables, but fetches it dynamically with 'git describe' if in a git repo and version override is not specified. Handles both tagged releases and pre-release commit formats per semantic versioning, reporting errors if versionings diverge or are invalid. Depends on git being installed if dynamic resolution is needed, expects .git directory for repository-based builds, and sets the RESOLVED_ZIG_VERSION variable; limitations include parsing and format constraints.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(ZIG_VERSION_MAJOR 0)\nset(ZIG_VERSION_MINOR 15)\nset(ZIG_VERSION_PATCH 0)\nset(ZIG_VERSION \"\" CACHE STRING \"Override Zig version string. Default is to find out with git.\")\n\nif(\"${ZIG_VERSION}\" STREQUAL \"\")\n    set(RESOLVED_ZIG_VERSION \"${ZIG_VERSION_MAJOR}.${ZIG_VERSION_MINOR}.${ZIG_VERSION_PATCH}\")\n    find_program(GIT_EXE NAMES git NAMES_PER_DIR)\n    if(GIT_EXE AND EXISTS \"${PROJECT_SOURCE_DIR}/.git\")\n        execute_process(\n            COMMAND ${GIT_EXE} -C \"${PROJECT_SOURCE_DIR}\" describe --match *.*.* --tags --abbrev=9\n            RESULT_VARIABLE EXIT_STATUS\n            OUTPUT_VARIABLE GIT_DESCRIBE\n            OUTPUT_STRIP_TRAILING_WHITESPACE\n            ERROR_QUIET)\n        if(EXIT_STATUS EQUAL \"0\")\n            set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS \"${PROJECT_SOURCE_DIR}/.git/HEAD\")\n            if(GIT_DESCRIBE MATCHES \"^v?([0-9]+\\\\.[0-9]+\\\\.[0-9]+)$\")\n                # Tagged release version.\n                set(GIT_TAG ${CMAKE_MATCH_1})\n                if(NOT GIT_TAG VERSION_EQUAL RESOLVED_ZIG_VERSION)\n                    message(SEND_ERROR \"Zig version (${RESOLVED_ZIG_VERSION}) does not match Git tag (${GIT_TAG}).\")\n                endif()\n            elseif(GIT_DESCRIBE MATCHES \"^v?([0-9]+\\\\.[0-9]+\\\\.[0-9]+)-([0-9]+)-g(.+)$\")\n                # Untagged pre-release. The Zig version is updated to include the number of commits\n                # since the last tagged version and the commit hash. The version is formatted in\n                # accordance with the https://semver.org specification.\n                set(GIT_TAG ${CMAKE_MATCH_1})\n                set(GIT_COMMITS_AFTER_TAG ${CMAKE_MATCH_2})\n                set(GIT_COMMIT ${CMAKE_MATCH_3})\n                if(NOT RESOLVED_ZIG_VERSION VERSION_GREATER GIT_TAG)\n                    message(SEND_ERROR \"Zig version (${RESOLVED_ZIG_VERSION}) must be greater than tagged ancestor (${GIT_TAG}).\")\n                endif()\n                set(RESOLVED_ZIG_VERSION \"${RESOLVED_ZIG_VERSION}-dev.${GIT_COMMITS_AFTER_TAG}+${GIT_COMMIT}\")\n            else()\n                message(WARNING \"Failed to parse version from output of `git describe`.\")\n            endif()\n        endif()\n    endif()\nelse()\n    set(RESOLVED_ZIG_VERSION \"${ZIG_VERSION}\")\nendif()\nmessage(STATUS \"Configuring zig version ${RESOLVED_ZIG_VERSION}\")\n\n```\n\n----------------------------------------\n\nTITLE: Building Zig from Source without LLVM Dependencies\nDESCRIPTION: Alternative build process that only requires a C compiler. Creates a 'stage2' build of the compiler without LLVM extensions, which lacks certain features but provides a C backend and LLVM bitcode backend.\nSOURCE: https://github.com/ziglang/zig/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncc -o bootstrap bootstrap.c\n./bootstrap\n```\n\n----------------------------------------\n\nTITLE: Configuring Static and Shared Linking Flags - CMake CMakeLists.txt\nDESCRIPTION: Defines cache variables and build flags for enabling/disabling static or shared linking for major Zig dependencies such as LLVM, zlib, zstd, curses, and libxml2. Enforces constraints to avoid invalid simultaneous static/shared options, with user-tunable flags via build configuration. No direct input required other than cache variable settings; output affects build targets and linkage behavior.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(ZIG_NO_LIB off CACHE BOOL\n    \"Disable copying lib/ files to install prefix during the build phase\")\n\nset(ZIG_STATIC off CACHE BOOL \"Attempt to build a static zig executable (not compatible with glibc)\")\nset(ZIG_SHARED_LLVM off CACHE BOOL \"Prefer linking against shared LLVM libraries\")\nset(ZIG_STATIC_LLVM ${ZIG_STATIC} CACHE BOOL \"Prefer linking against static LLVM libraries\")\nset(ZIG_STATIC_ZLIB ${ZIG_STATIC} CACHE BOOL \"Prefer linking against static zlib\")\nset(ZIG_STATIC_ZSTD ${ZIG_STATIC} CACHE BOOL \"Prefer linking against static zstd\")\nset(ZIG_STATIC_CURSES OFF CACHE BOOL \"Enable static linking against curses\")\nset(ZIG_STATIC_LIBXML2 OFF CACHE BOOL \"Enable static linking against libxml2\")\n\nif (ZIG_SHARED_LLVM AND ZIG_STATIC_LLVM)\n    message(SEND_ERROR \"-DZIG_SHARED_LLVM and -DZIG_STATIC_LLVM cannot both be enabled simultaneously\")\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Platform and LLVM Option Management - CMake CMakeLists.txt\nDESCRIPTION: Sets build target parameters including architecture, CPU, and linker, limits on threading, and an option for working around archive command issues. Automatically determines whether to use llvm-config based on target triple and optionally modifies the CMake AR command for compatibility. Inputs include target-related cache variables; outputs are changes in CMake variable configuration.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(ZIG_TARGET_TRIPLE \"native\" CACHE STRING \"arch-os-abi to output binaries for\")\nset(ZIG_TARGET_MCPU \"native\" CACHE STRING \"-mcpu parameter to output binaries for\")\nset(ZIG_TARGET_DYNAMIC_LINKER \"\" CACHE STRING\n  \"Override the dynamic linker used by the Zig binary. Default is to auto-detect the dynamic linker.\")\nset(ZIG_SINGLE_THREADED off CACHE BOOL \"limit the zig compiler to use only 1 thread\")\nset(ZIG_AR_WORKAROUND off CACHE BOOL \"append 'ar' subcommand to CMAKE_AR\")\n\nif(\"${ZIG_TARGET_TRIPLE}\" STREQUAL \"native\")\n    set(ZIG_USE_LLVM_CONFIG ON CACHE BOOL \"use llvm-config to find LLVM libraries\")\nelse()\n    set(ZIG_USE_LLVM_CONFIG OFF CACHE BOOL \"use llvm-config to find LLVM libraries\")\nendif()\n\nif(ZIG_AR_WORKAROUND)\n  string(REPLACE \"<CMAKE_AR>\" \"<CMAKE_AR> ar\" CMAKE_C_ARCHIVE_CREATE ${CMAKE_C_ARCHIVE_CREATE})\n  string(REPLACE \"<CMAKE_AR>\" \"<CMAKE_AR> ar\" CMAKE_CXX_ARCHIVE_CREATE ${CMAKE_CXX_ARCHIVE_CREATE})\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring PIE (Position Independent Executable) and Validating Support - CMake CMakeLists.txt\nDESCRIPTION: Adds an option for building Zig as a Position Independent Executable (PIE), verifies through CMake's CheckPIESupported module whether the build generator and platform supports it, and reports errors if requested but unsupported. Requires the CMake 'CheckPIESupported' module; inputs are the ZIG_PIE option and platform capabilities. Output is validation of build configuration flags.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\noption(ZIG_PIE \"Produce a position independent zig executable\" ${CMAKE_POSITION_INDEPENDENT_CODE})\ninclude(CheckPIESupported)\ncheck_pie_supported(\n  OUTPUT_VARIABLE ZIG_PIE_SUPPORTED_BY_CMAKE\n  LANGUAGES C CXX\n)\nif(ZIG_PIE AND NOT CMAKE_CXX_LINK_PIE_SUPPORTED)\n  message(SEND_ERROR \"ZIG_PIE was requested but CMake does not support it for \\\"zigcpp\\\" target: ${ZIG_PIE_SUPPORTED_BY_CMAKE}\")\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Detecting System Libc++ and Managing LLVM/Clang/Libraries - CMake CMakeLists.txt\nDESCRIPTION: Detects whether the standard C++ library is 'c++' or 'stdc++', sets the variable for Zig's build accordingly, and locates critical dependencies like LLVM, Clang, and lld. Provides logic for finding and static linking against zlib, zstd, curses, and libxml2 based on cache selections, updating LLVM_LIBRARIES as required. Input includes present system libraries and user flags; outputs affect which libraries and paths are used for the links.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Detect system libcxx name.\nif (\"c++\" IN_LIST CMAKE_CXX_IMPLICIT_LINK_LIBRARIES)\n    set(ZIG_SYSTEM_LIBCXX \"c++\" CACHE STRING \"system libcxx name for build.zig\")\nelse()\n    set(ZIG_SYSTEM_LIBCXX \"stdc++\" CACHE STRING \"system libcxx name for build.zig\")\nendif()\n\nfind_package(llvm 20)\nfind_package(clang 20)\nfind_package(lld 20)\n\nif(ZIG_STATIC_ZLIB)\n    if (MSVC)\n        list(REMOVE_ITEM LLVM_LIBRARIES \"z.lib\")\n    else()\n        list(REMOVE_ITEM LLVM_LIBRARIES \"-lz\")\n    endif()\n\n    find_library(ZLIB NAMES libz.a libzlibstatic.a z zlib libz NAMES_PER_DIR)\n    list(APPEND LLVM_LIBRARIES \"${ZLIB}\")\nendif()\n\nif(ZIG_STATIC_ZSTD)\n    if (MSVC)\n        list(REMOVE_ITEM LLVM_LIBRARIES \"zstd.lib\")\n    else()\n        list(REMOVE_ITEM LLVM_LIBRARIES \"-lzstd\")\n    endif()\n\n    find_library(ZSTD NAMES libzstd.a libzstdstatic.a zstd NAMES_PER_DIR)\n    list(APPEND LLVM_LIBRARIES \"${ZSTD}\")\nendif()\n\nif(ZIG_STATIC_CURSES)\n    list(REMOVE_ITEM LLVM_LIBRARIES \"-lcurses\")\n    find_library(CURSES NAMES libcurses.a libncurses.a NAMES_PER_DIR\n      PATHS\n        /usr/local/opt/ncurses/lib\n        /opt/homebrew/opt/ncurses/lib)\n    list(APPEND LLVM_LIBRARIES \"${CURSES}\")\nendif()\n\nif(ZIG_STATIC_LIBXML2)\n    list(REMOVE_ITEM LLVM_LIBRARIES \"-lxml2\")\n    find_library(LIBXML2 NAMES libxml2.a NAMES_PER_DIR)\n    list(APPEND LLVM_LIBRARIES \"${LIBXML2}\")\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Threading Support, Configuration Output, and Source Lists - CMake CMakeLists.txt\nDESCRIPTION: Finds system threading library support for Zig and sets up output file variables for C and Zig configuration headers and sources. Specifies sources required for WASM2C and Zig's C++ integration, aligning these lists with other build definitions. Inputs are present threading support and project directory structure; outputs are updated variables and lists for later build commands.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Threads)\n\nset(ZIG_CONFIG_H_OUT \"${PROJECT_BINARY_DIR}/config.h\")\nset(ZIG_CONFIG_ZIG_OUT \"${PROJECT_BINARY_DIR}/config.zig\")\n\nset(ZIG_WASM2C_SOURCES\n    stage1/wasm2c.c\n)\n# Sync with \"zig_cpp_sources\" in build.zig\nset(ZIG_CPP_SOURCES\n    # These are planned to stay even when we are self-hosted.\n    src/zig_llvm.cpp\n    src/zig_llvm-ar.cpp\n    src/zig_clang.cpp\n    src/zig_clang_driver.cpp\n    src/zig_clang_cc1_main.cpp\n    src/zig_clang_cc1as_main.cpp\n)\n\n```\n\n----------------------------------------\n\nTITLE: Setting Zig Stage 2 Source File List with CMake - CMake\nDESCRIPTION: This CMake snippet defines the ZIG_STAGE2_SOURCES list variable, enumerating all Zig source files (.zig) required for the stage 2 build of the Zig compiler. Dependencies include a valid CMake environment, pre-configured build variables (such as ZIG_CONFIG_ZIG_OUT), and access to the referenced Zig source files. The input is a list of file paths, and the output is a CMake list variable usable elsewhere in the build system. This pattern centralizes the set of Zig modules for cross-tool compatibility and modular build management.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(ZIG_STAGE2_SOURCES\n    \"${ZIG_CONFIG_ZIG_OUT}\"\n    lib/compiler_rt.zig\n    lib/compiler_rt/absv.zig\n    lib/compiler_rt/absvdi2.zig\n    lib/compiler_rt/absvsi2.zig\n    lib/compiler_rt/absvti2.zig\n    lib/compiler_rt/adddf3.zig\n    lib/compiler_rt/addf3.zig\n    lib/compiler_rt/addo.zig\n    lib/compiler_rt/addsf3.zig\n    lib/compiler_rt/addtf3.zig\n    lib/compiler_rt/addxf3.zig\n    lib/compiler_rt/arm.zig\n    lib/compiler_rt/atomics.zig\n    lib/compiler_rt/aulldiv.zig\n    lib/compiler_rt/aullrem.zig\n    lib/compiler_rt/bswap.zig\n    lib/compiler_rt/ceil.zig\n    lib/compiler_rt/clear_cache.zig\n    lib/compiler_rt/cmp.zig\n    lib/compiler_rt/cmpdf2.zig\n    lib/compiler_rt/cmpsf2.zig\n    lib/compiler_rt/cmptf2.zig\n    lib/compiler_rt/cmpxf2.zig\n    lib/compiler_rt/common.zig\n    lib/compiler_rt/comparef.zig\n    lib/compiler_rt/cos.zig\n    lib/compiler_rt/count0bits.zig\n    lib/compiler_rt/divdf3.zig\n    lib/compiler_rt/divsf3.zig\n    lib/compiler_rt/divtf3.zig\n    lib/compiler_rt/divti3.zig\n    lib/compiler_rt/divxf3.zig\n    lib/compiler_rt/emutls.zig\n    lib/compiler_rt/exp.zig\n    lib/compiler_rt/exp2.zig\n    lib/compiler_rt/extenddftf2.zig\n    lib/compiler_rt/extenddfxf2.zig\n    lib/compiler_rt/extendf.zig\n    lib/compiler_rt/extendhfsf2.zig\n    lib/compiler_rt/extendhftf2.zig\n    lib/compiler_rt/extendhfxf2.zig\n    lib/compiler_rt/extendsfdf2.zig\n    lib/compiler_rt/extendsftf2.zig\n    lib/compiler_rt/extendsfxf2.zig\n    lib/compiler_rt/extendxftf2.zig\n    lib/compiler_rt/fabs.zig\n    lib/compiler_rt/fixdfdi.zig\n    lib/compiler_rt/fixdfsi.zig\n    lib/compiler_rt/fixdfti.zig\n    lib/compiler_rt/fixhfdi.zig\n    lib/compiler_rt/fixhfsi.zig\n    lib/compiler_rt/fixhfti.zig\n    lib/compiler_rt/fixsfdi.zig\n    lib/compiler_rt/fixsfsi.zig\n    lib/compiler_rt/fixsfti.zig\n    lib/compiler_rt/fixtfdi.zig\n    lib/compiler_rt/fixtfsi.zig\n    lib/compiler_rt/fixtfti.zig\n    lib/compiler_rt/fixunsdfdi.zig\n    lib/compiler_rt/fixunsdfsi.zig\n    lib/compiler_rt/fixunsdfti.zig\n    lib/compiler_rt/fixunshfdi.zig\n    lib/compiler_rt/fixunshfsi.zig\n    lib/compiler_rt/fixunshfti.zig\n    lib/compiler_rt/fixunssfdi.zig\n    lib/compiler_rt/fixunssfsi.zig\n    lib/compiler_rt/fixunssfti.zig\n    lib/compiler_rt/fixunstfdi.zig\n    lib/compiler_rt/fixunstfsi.zig\n    lib/compiler_rt/fixunstfti.zig\n    lib/compiler_rt/fixunsxfdi.zig\n    lib/compiler_rt/fixunsxfsi.zig\n    lib/compiler_rt/fixunsxfti.zig\n    lib/compiler_rt/fixxfdi.zig\n    lib/compiler_rt/fixxfsi.zig\n    lib/compiler_rt/fixxfti.zig\n    lib/compiler_rt/float_from_int.zig\n    lib/compiler_rt/floatdidf.zig\n    lib/compiler_rt/floatdihf.zig\n    lib/compiler_rt/floatdisf.zig\n    lib/compiler_rt/floatditf.zig\n    lib/compiler_rt/floatdixf.zig\n    lib/compiler_rt/floatsidf.zig\n    lib/compiler_rt/floatsihf.zig\n    lib/compiler_rt/floatsisf.zig\n    lib/compiler_rt/floatsitf.zig\n    lib/compiler_rt/floatsixf.zig\n    lib/compiler_rt/floattidf.zig\n    lib/compiler_rt/floattihf.zig\n    lib/compiler_rt/floattisf.zig\n    lib/compiler_rt/floattitf.zig\n    lib/compiler_rt/floattixf.zig\n    lib/compiler_rt/floatundidf.zig\n    lib/compiler_rt/floatundihf.zig\n    lib/compiler_rt/floatundisf.zig\n    lib/compiler_rt/floatunditf.zig\n    lib/compiler_rt/floatundixf.zig\n    lib/compiler_rt/floatunsidf.zig\n    lib/compiler_rt/floatunsihf.zig\n    lib/compiler_rt/floatunsisf.zig\n    lib/compiler_rt/floatunsitf.zig\n    lib/compiler_rt/floatunsixf.zig\n    lib/compiler_rt/floatuntidf.zig\n    lib/compiler_rt/floatuntihf.zig\n    lib/compiler_rt/floatuntisf.zig\n    lib/compiler_rt/floatuntitf.zig\n    lib/compiler_rt/floatuntixf.zig\n    lib/compiler_rt/floor.zig\n    lib/compiler_rt/fma.zig\n    lib/compiler_rt/fmax.zig\n    lib/compiler_rt/fmin.zig\n    lib/compiler_rt/fmod.zig\n    lib/compiler_rt/gedf2.zig\n    lib/compiler_rt/gesf2.zig\n    lib/compiler_rt/getf2.zig\n    lib/compiler_rt/gexf2.zig\n    lib/compiler_rt/int.zig\n    lib/compiler_rt/int_from_float.zig\n    lib/compiler_rt/log.zig\n    lib/compiler_rt/log10.zig\n    lib/compiler_rt/log2.zig\n    lib/compiler_rt/modti3.zig\n    lib/compiler_rt/mulXi3.zig\n    lib/compiler_rt/muldf3.zig\n    lib/compiler_rt/mulf3.zig\n    lib/compiler_rt/mulo.zig\n    lib/compiler_rt/mulsf3.zig\n    lib/compiler_rt/multf3.zig\n    lib/compiler_rt/mulxf3.zig\n    lib/compiler_rt/negXi2.zig\n    lib/compiler_rt/negdf2.zig\n    lib/compiler_rt/negsf2.zig\n    lib/compiler_rt/negtf2.zig\n    lib/compiler_rt/negv.zig\n    lib/compiler_rt/negxf2.zig\n    lib/compiler_rt/os_version_check.zig\n    lib/compiler_rt/parity.zig\n    lib/compiler_rt/popcount.zig\n    lib/compiler_rt/rem_pio2.zig\n    lib/compiler_rt/rem_pio2_large.zig\n    lib/compiler_rt/rem_pio2f.zig\n    lib/compiler_rt/round.zig\n    lib/compiler_rt/shift.zig\n    lib/compiler_rt/sin.zig\n    lib/compiler_rt/sincos.zig\n    lib/compiler_rt/sqrt.zig\n    lib/compiler_rt/stack_probe.zig\n    lib/compiler_rt/subdf3.zig\n    lib/compiler_rt/subo.zig\n    lib/compiler_rt/subsf3.zig\n    lib/compiler_rt/subtf3.zig\n    lib/compiler_rt/subxf3.zig\n    lib/compiler_rt/tan.zig\n    lib/compiler_rt/trig.zig\n    lib/compiler_rt/trunc.zig\n    lib/compiler_rt/truncdfhf2.zig\n    lib/compiler_rt/truncdfsf2.zig\n    lib/compiler_rt/truncf.zig\n    lib/compiler_rt/truncsfhf2.zig\n    lib/compiler_rt/trunctfdf2.zig\n    lib/compiler_rt/trunctfhf2.zig\n    lib/compiler_rt/trunctfsf2.zig\n    lib/compiler_rt/trunctfxf2.zig\n    lib/compiler_rt/truncxfdf2.zig\n    lib/compiler_rt/truncxfhf2.zig\n    lib/compiler_rt/truncxfsf2.zig\n    lib/compiler_rt/udivmod.zig\n    lib/compiler_rt/udivmodei4.zig\n    lib/compiler_rt/udivmodti4.zig\n    lib/compiler_rt/udivti3.zig\n    lib/compiler_rt/umodti3.zig\n    lib/compiler_rt/unorddf2.zig\n    lib/compiler_rt/unordsf2.zig\n    lib/compiler_rt/unordtf2.zig\n    lib/std/BitStack.zig\n    lib/std/Build.zig\n    lib/std/Build/Cache.zig\n    lib/std/Build/Cache/DepTokenizer.zig\n    lib/std/Progress.zig\n    lib/std/Random.zig\n    lib/std/Target.zig\n    lib/std/Target/Query.zig\n    lib/std/Target/aarch64.zig\n    lib/std/Target/amdgcn.zig\n    lib/std/Target/arm.zig\n    lib/std/Target/avr.zig\n    lib/std/Target/bpf.zig\n    lib/std/Target/hexagon.zig\n    lib/std/Target/loongarch.zig\n    lib/std/Target/mips.zig\n    lib/std/Target/msp430.zig\n    lib/std/Target/nvptx.zig\n    lib/std/Target/powerpc.zig\n    lib/std/Target/riscv.zig\n    lib/std/Target/s390x.zig\n    lib/std/Target/sparc.zig\n    lib/std/Target/wasm.zig\n    lib/std/Target/x86.zig\n    lib/std/Thread.zig\n    lib/std/Thread/Futex.zig\n    lib/std/Thread/Mutex.zig\n    lib/std/Thread/Pool.zig\n    lib/std/Thread/ResetEvent.zig\n    lib/std/Thread/WaitGroup.zig\n    lib/std/array_hash_map.zig\n    lib/std/array_list.zig\n    lib/std/ascii.zig\n    lib/std/atomic.zig\n    lib/std/base64.zig\n    lib/std/buf_map.zig\n    lib/std/builtin.zig\n    lib/std/c.zig\n    lib/std/coff.zig\n    lib/std/crypto.zig\n    lib/std/crypto/blake3.zig\n    lib/std/crypto/siphash.zig\n    lib/std/debug.zig\n    lib/std/dwarf.zig\n    lib/std/dwarf/AT.zig\n    lib/std/dwarf/ATE.zig\n    lib/std/dwarf/FORM.zig\n    lib/std/dwarf/LANG.zig\n    lib/std/dwarf/OP.zig\n    lib/std/dwarf/TAG.zig\n    lib/std/elf.zig\n    lib/std/fifo.zig\n    lib/std/fmt.zig\n    lib/std/fmt/format_float.zig\n    lib/std/fmt/parse_float.zig\n    lib/std/fs.zig\n    lib/std/fs/AtomicFile.zig\n    lib/std/fs/Dir.zig\n    lib/std/fs/File.zig\n    lib/std/fs/get_app_data_dir.zig\n    lib/std/fs/path.zig\n    lib/std/hash.zig\n    lib/std/hash/auto_hash.zig\n    lib/std/hash/wyhash.zig\n    lib/std/hash_map.zig\n    lib/std/heap.zig\n    lib/std/heap/arena_allocator.zig\n    lib/std/io.zig\n    lib/std/io/Reader.zig\n    lib/std/io/Writer.zig\n    lib/std/io/buffered_atomic_file.zig\n    lib/std/io/buffered_writer.zig\n    lib/std/io/change_detection_stream.zig\n    lib/std/io/counting_reader.zig\n    lib/std/io/counting_writer.zig\n    lib/std/io/find_byte_writer.zig\n    lib/std/io/fixed_buffer_stream.zig\n    lib/std/io/limited_reader.zig\n    lib/std/io/seekable_stream.zig\n    lib/std/json.zig\n    lib/std/json/stringify.zig\n    lib/std/leb128.zig\n    lib/std/log.zig\n    lib/std/macho.zig\n    lib/std/math.zig\n    lib/std/math/big.zig\n    lib/std/math/big/int.zig\n    lib/std/math/float.zig\n    lib/std/math/frexp.zig\n    lib/std/math/isinf.zig\n    lib/std/math/isnan.zig\n    lib/std/math/log.zig\n    lib/std/math/log10.zig\n    lib/std/math/log2.zig\n    lib/std/math/signbit.zig\n    lib/std/math/sqrt.zig\n    lib/std/mem.zig\n    lib/std/mem/Allocator.zig\n    lib/std/meta.zig\n    lib/std/meta/trailer_flags.zig\n    lib/std/multi_array_list.zig\n    lib/std/os.zig\n    lib/std/os/linux.zig\n    lib/std/os/linux.zig\n    lib/std/os/linux/IoUring.zig\n    lib/std/os/linux/io_uring_sqe.zig\n    lib/std/os/linux/x86_64.zig\n    lib/std/os/linux/x86_64.zig\n    lib/std/os/windows.zig\n    lib/std/os/windows/ntstatus.zig\n    lib/std/os/windows/win32error.zig\n    lib/std/pdb.zig\n    lib/std/process.zig\n    lib/std/process/Child.zig\n    lib/std/sort.zig\n    lib/std/start.zig\n    lib/std/static_string_map.zig\n    lib/std/std.zig\n    lib/std/time.zig\n    lib/std/treap.zig\n    lib/std/unicode.zig\n    lib/std/zig.zig\n    lib/std/zig/Ast.zig\n    lib/std/zig/AstGen.zig\n    lib/std/zig/AstRlAnnotate.zig\n    lib/std/zig/LibCInstallation.zig\n    lib/std/zig/Parse.zig\n    lib/std/zig/Server.zig\n    lib/std/zig/WindowsSdk.zig\n    lib/std/zig/Zir.zig\n    lib/std/zig/c_builtins.zig\n    lib/std/zig/render.zig\n    lib/std/zig/string_literal.zig\n    lib/std/zig/system.zig\n    lib/std/zig/system/NativePaths.zig\n    lib/std/zig/system/x86.zig\n    lib/std/zig/tokenizer.zig\n    lib/std/zig/llvm.zig\n    lib/std/zig/llvm/BitcodeReader.zig\n    lib/std/zig/llvm/Builder.zig\n    lib/std/zig/llvm/bitcode_writer.zig\n    lib/std/zig/llvm/ir.zig\n    src/Air.zig\n    src/Builtin.zig\n    src/Compilation.zig\n    src/Compilation/Config.zig\n    src/DarwinPosixSpawn.zig\n    src/InternPool.zig\n    src/Liveness.zig\n    src/Liveness/Verify.zig\n    src/Package.zig\n    src/Package/Fetch.zig\n)\n```\n\n----------------------------------------\n\nTITLE: Platform-specific MSVC DIA SDK Directory Setup\nDESCRIPTION: Detects if the MSVC environment is active and attempts to locate the DIA SDK directory from the VS installation. If found, sets the path for diaguids.lib with proper escaping for use in subsequent build steps. This setup is crucial for debugging symbol support on Windows platforms using MSVC.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\nif(MSVC)\n    set(MSVC_DIA_SDK_DIR \"$ENV{VSINSTALLDIR}DIA SDK\")\n    if(IS_DIRECTORY ${MSVC_DIA_SDK_DIR})\n        set(ZIG_DIA_GUIDS_LIB \"${MSVC_DIA_SDK_DIR}/lib/amd64/diaguids.lib\")\n        string(REGEX REPLACE \"\\\\\" \"\\\\\\\\\" ZIG_DIA_GUIDS_LIB_ESCAPED \"${ZIG_DIA_GUIDS_LIB}\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuration Header and Zig File Generation\nDESCRIPTION: Copies template configuration header and Zig script files to output locations, replacing placeholders with project-specific configurations. These files are essential for setting build macros and build environment configurations during compilation.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\nconfigure_file (\n    stage1/config.h.in\n    \"${ZIG_CONFIG_H_OUT}\"\n)\nconfigure_file (\n    stage1/config.zig.in\n    \"${ZIG_CONFIG_ZIG_OUT}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring and Configuring the 'zigcpp' Static Library Target\nDESCRIPTION: Creates a static library target named 'zigcpp' from specified sources, setting C++17 standards and position-independent code. It adjusts compiler options for different platforms, especially handling MSVC runtime library settings and MinGW-specific flags, to ensure compatibility across build environments.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\nset(ZIGCPP_OUTPUT_DIR \"${PROJECT_BINARY_DIR}/zigcpp\")\n\nadd_library(zigcpp STATIC ${ZIG_CPP_SOURCES})\n\n# Enforce C++17 standard\ntarget_compile_features(zigcpp PRIVATE cxx_std_17)\nset_target_properties(zigcpp PROPERTIES POSITION_INDEPENDENT_CODE ${ZIG_PIE})\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Definitions for Static LLVM Build\nDESCRIPTION: Adds preprocessor definitions to indicate static build modes of LLVM and Clang when the build mode is static. These definitions allow conditional compilation within source files based on the build type.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\nif(LLVM_LINK_MODE STREQUAL \"static\")\n  target_compile_definitions(zigcpp PRIVATE\n    LLVM_BUILD_STATIC\n    CLANG_BUILD_STATIC\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Platform-specific Compiler Options and Definitions for 'zigcpp'\nDESCRIPTION: Sets compiler options and preprocessor definitions to handle platform differences. For non-MSVC platforms, it adds warnings suppression for MinGW and defines macros for constants, format macros, GNU source, etc. For MSVC, it sets compiler options to conform with MSVC standards and runtime library preferences.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\nif(NOT MSVC)\n  if(MINGW)\n    target_compile_options(zigcpp PRIVATE -Wno-format)\n  endif()\n  # Sync content below with \"exe_cflags\" in build.zig\n  target_compile_definitions(zigcpp PUBLIC\n    __STDC_CONSTANT_MACROS\n    __STDC_FORMAT_MACROS\n    __STDC_LIMIT_MACROS\n\n    _GNU_SOURCE\n  )\n  target_compile_options(zigcpp PRIVATE\n    -fno-exceptions\n    -fno-rtti\n    -fno-stack-protector\n\n    -fvisibility-inlines-hidden\n\n    -Wno-type-limits\n    -Wno-missing-braces\n    -Wno-comment\n  )\nelse()\ntarget_compile_options(zigcpp PRIVATE /Zc:preprocessor)\nset_property(TARGET zigcpp PROPERTY MSVC_RUNTIME_LIBRARY \"MultiThreaded\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Directories and Linking Libraries for 'zigcpp'\nDESCRIPTION: Specifies include directories for Clang, LLVM, and LLD headers, and links against their respective libraries. Ensures that the target 'zigcpp' can find all necessary headers and dependencies during compilation and linking stages.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\ntarget_include_directories(zigcpp PUBLIC\n    ${CLANG_INCLUDE_DIRS}\n    ${LLVM_INCLUDE_DIRS}\n    ${LLD_INCLUDE_DIRS}\n)\ntarget_link_libraries(zigcpp PUBLIC\n    ${CLANG_LIBRARIES}\n    ${LLD_LIBRARIES}\n    ${LLVM_LIBRARIES}\n    ${CMAKE_THREAD_LIBS_INIT}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Directories for Multi-Configuration Builds\nDESCRIPTION: Sets the output directory for the 'zigcpp' library archive, and ensures that for each build configuration (Debug, Release, etc.), a specific output directory is used. This aids in organizing build artifacts and supports multi-configuration generator workflows like Visual Studio.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\nset_target_properties(zigcpp PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${ZIGCPP_OUTPUT_DIR})\nforeach(CONFIG_TYPE ${CMAKE_CONFIGURATION_TYPES})\n    string(TOUPPER ${CONFIG_TYPE} CONFIG_TYPE)\n    set_target_properties(zigcpp PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_${CONFIG_TYPE} ${ZIGCPP_OUTPUT_DIR})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Detecting Host Target OS and Architecture in CMake for Zig Compiler\nDESCRIPTION: Detects and normalizes the host operating system and architecture for targeting in the Zig compiler build process. Includes special handling for various system names and architectures to align with Zig's target naming conventions.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nstring(TOLOWER \"${CMAKE_HOST_SYSTEM_NAME}\" ZIG_HOST_TARGET_OS)\nif(ZIG_HOST_TARGET_OS STREQUAL \"darwin\")\n  set(ZIG_HOST_TARGET_OS \"macos\")\nelseif(ZIG_HOST_TARGET_OS STREQUAL \"sunos\")\n  check_symbol_exists(__illumos__ \"\" ZIG_HOST_TARGET_HAS_ILLUMOS_MACRO)\n  if (ZIG_HOST_TARGET_HAS_ILLUMOS_MACRO)\n    set(ZIG_HOST_TARGET_OS \"illumos\")\n  else()\n    set(ZIG_HOST_TARGET_OS \"solaris\")\n  endif()\nendif()\n\nstring(TOLOWER \"${CMAKE_HOST_SYSTEM_PROCESSOR}\" ZIG_HOST_TARGET_ARCH)\nif(ZIG_HOST_TARGET_ARCH MATCHES \"^i[3-9]86$\")\n  if (ZIG_HOST_TARGET_OS MATCHES \"(solaris|illumos)\")\n    set(ZIG_HOST_TARGET_ARCH \"x86_64\")\n  else()\n    set(ZIG_HOST_TARGET_ARCH \"x86\")\n  endif()\nelseif(ZIG_HOST_TARGET_ARCH STREQUAL \"amd64\")\n  set(ZIG_HOST_TARGET_ARCH \"x86_64\")\nelseif(ZIG_HOST_TARGET_ARCH STREQUAL \"arm64\")\n  set(ZIG_HOST_TARGET_ARCH \"aarch64\")\nelseif(ZIG_HOST_TARGET_ARCH STREQUAL \"armv7l\")\n  set(ZIG_HOST_TARGET_ARCH \"arm\")\nelseif(ZIG_HOST_TARGET_ARCH STREQUAL \"armv7b\")\n  set(ZIG_HOST_TARGET_ARCH \"armeb\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Architecture and ABI Variations in CMake for Zig Targets\nDESCRIPTION: Processes architecture-specific variations and detects appropriate ABI settings based on compiler and architecture. Handles ARM thumb mode detection and properly formats target triple components.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nstring(REGEX REPLACE \"^((arm|thumb)(hf?)?)el$\" \"\\\\1\" ZIG_HOST_TARGET_ARCH \"${ZIG_HOST_TARGET_ARCH}\")\nif(ZIG_HOST_TARGET_ARCH MATCHES \"^arm(hf?)?(eb)?$\")\n  check_symbol_exists(__thumb__ \"\" ZIG_HOST_TARGET_DEFAULTS_TO_THUMB)\n  if(ZIG_HOST_TARGET_DEFAULTS_TO_THUMB)\n    string(REGEX REPLACE \"^arm\" \"thumb\" ZIG_HOST_TARGET_ARCH \"${ZIG_HOST_TARGET_ARCH}\")\n  endif()\nendif()\nstring(REGEX REPLACE \"^ppc((64)?(le)?)$\" \"powerpc\\\\1\" ZIG_HOST_TARGET_ARCH \"${ZIG_HOST_TARGET_ARCH}\")\n\nif(MSVC)\n  set(ZIG_HOST_TARGET_ABI \"-msvc\")\nelseif(MINGW)\n  set(ZIG_HOST_TARGET_ABI \"-gnu\")\nelseif(ZIG_HOST_TARGET_ARCH MATCHES \"^(arm|thumb)hf?(eb)?$\")\n  string(REGEX REPLACE \"^(arm|thumb)hf?((eb)?)$\" \"\\\\1\\\\2\" ZIG_HOST_TARGET_ARCH \"${ZIG_HOST_TARGET_ARCH}\")\n  set(ZIG_HOST_TARGET_ABI \"-eabihf\")\nelse()\n  set(ZIG_HOST_TARGET_ABI \"\")\nendif()\n\nset(ZIG_HOST_TARGET_TRIPLE \"${ZIG_HOST_TARGET_ARCH}-${ZIG_HOST_TARGET_OS}${ZIG_HOST_TARGET_ABI}\" CACHE STRING \"Host zig target triple.\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Compiler and Linker Flags for Zig Compiler Stages\nDESCRIPTION: Sets up compilation and linking flags for different stages of the Zig compiler build process. Includes platform-specific settings for MSVC, MinGW, Apple, and Solaris/illumos systems.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n  set(ZIG_WASM2C_COMPILE_FLAGS \"\")\n  set(ZIG1_COMPILE_FLAGS \"/Os\")\n  set(ZIG2_COMPILE_FLAGS \"/Od\")\n  set(ZIG2_LINK_FLAGS \"/STACK:16777216 /FORCE:MULTIPLE\")\nelse()\n  set(ZIG_WASM2C_COMPILE_FLAGS \"-std=c99 -O2\")\n  set(ZIG1_COMPILE_FLAGS \"-std=c99 -Os\")\n  set(ZIG2_COMPILE_FLAGS \"-std=c99 -O0 -fno-sanitize=undefined -fno-stack-protector\")\n  if(APPLE)\n    set(ZIG2_LINK_FLAGS \"-Wl,-stack_size,0x10000000\")\n  elseif(MINGW)\n    set(ZIG2_LINK_FLAGS \"-Wl,--stack,0x10000000\")\n  # Solaris/illumos ld(1) does not provide a --stack-size option.\n  elseif(CMAKE_HOST_SOLARIS)\n    unset(ZIG2_LINK_FLAGS)\n  else()\n    set(ZIG2_LINK_FLAGS \"-Wl,-z,stack-size=0x10000000\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building wasm2c Executable for Stage1 of Zig Compiler\nDESCRIPTION: Defines the build process for the zig-wasm2c tool, which converts WebAssembly modules to C code. This step is necessary for bootstrapping the Zig compiler in its multi-stage build process.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nset(ZIG1_WASM_MODULE \"${PROJECT_SOURCE_DIR}/stage1/zig1.wasm\")\nset(ZIG1_C_SOURCE \"${PROJECT_BINARY_DIR}/zig1.c\")\nset(ZIG2_C_SOURCE \"${PROJECT_BINARY_DIR}/zig2.c\")\nset(ZIG_COMPILER_RT_C_SOURCE \"${PROJECT_BINARY_DIR}/compiler_rt.c\")\n\nadd_executable(zig-wasm2c ${ZIG_WASM2C_SOURCES})\nset_target_properties(zig-wasm2c PROPERTIES COMPILE_FLAGS \"${ZIG_WASM2C_COMPILE_FLAGS}\")\n\nadd_custom_command(\n  OUTPUT \"${ZIG1_C_SOURCE}\"\n  COMMAND zig-wasm2c \"${ZIG1_WASM_MODULE}\" \"${ZIG1_C_SOURCE}\"\n  DEPENDS zig-wasm2c \"${ZIG1_WASM_MODULE}\"\n  COMMENT \"Converting ${ZIG1_WASM_MODULE} to ${ZIG1_C_SOURCE}\"\n  WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building Stage1 Zig Compiler from WebAssembly-derived C code\nDESCRIPTION: Configures and builds the zig1 executable from the C code generated from the wasm module. Includes platform-specific stack settings and linking configurations for different operating systems.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(zig1 ${ZIG1_C_SOURCE} stage1/wasi.c)\nset_target_properties(zig1 PROPERTIES COMPILE_FLAGS ${ZIG1_COMPILE_FLAGS})\n\nif(MSVC)\n  target_link_options(zig1 PRIVATE /STACK:0x10000000)\nelse()\n  target_link_libraries(zig1 LINK_PUBLIC m)\n  if(MINGW)\n    target_link_options(zig1 PRIVATE -Wl,--stack,0x10000000)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Stage2 Zig Compiler Using Stage1\nDESCRIPTION: Defines the custom command to build the stage2 compiler C source using the stage1 zig compiler. Includes all necessary build arguments and dependencies for generating the stage2 source code.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_ZIG2_ARGS\n  \"${PROJECT_SOURCE_DIR}/lib\"\n  build-exe -ofmt=c -lc -OReleaseSmall\n  --name zig2\n  -femit-bin=\"${ZIG2_C_SOURCE}\"\n  -target \"${ZIG_HOST_TARGET_TRIPLE}\"\n  --dep \"build_options\"\n  --dep \"aro\"\n  \"-Mroot=src/main.zig\"\n  \"-Mbuild_options=${ZIG_CONFIG_ZIG_OUT}\"\n  \"-Maro=lib/compiler/aro/aro.zig\"\n)\n\nadd_custom_command(\n  OUTPUT \"${ZIG2_C_SOURCE}\"\n  COMMAND zig1 ${BUILD_ZIG2_ARGS}\n  DEPENDS zig1 \"${ZIG_STAGE2_SOURCES}\"\n  COMMENT \"Running zig1.wasm to produce ${ZIG2_C_SOURCE}\"\n  WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building Compiler Runtime Library for Zig Stage2\nDESCRIPTION: Creates the compiler runtime library for the stage2 Zig compiler by generating C code from Zig source. This is a critical component needed for the compiler to function properly.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_COMPILER_RT_ARGS\n  \"${PROJECT_SOURCE_DIR}/lib\"\n  build-obj -ofmt=c -OReleaseSmall\n  --name compiler_rt\n  -femit-bin=\"${ZIG_COMPILER_RT_C_SOURCE}\"\n  -target \"${ZIG_HOST_TARGET_TRIPLE}\"\n  \"-Mroot=lib/compiler_rt.zig\"\n)\n\nadd_custom_command(\n  OUTPUT \"${ZIG_COMPILER_RT_C_SOURCE}\"\n  COMMAND zig1 ${BUILD_COMPILER_RT_ARGS}\n  DEPENDS zig1 \"${ZIG_STAGE2_SOURCES}\"\n  COMMENT \"Running zig1.wasm to produce ${ZIG_COMPILER_RT_C_SOURCE}\"\n  WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling and Linking Stage2 Zig Compiler\nDESCRIPTION: Builds the stage2 Zig compiler executable from the generated C sources. Includes platform-specific linking configurations and dependencies for different operating systems.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(zig2 ${ZIG2_C_SOURCE} ${ZIG_COMPILER_RT_C_SOURCE})\nset_target_properties(zig2 PROPERTIES\n  COMPILE_FLAGS ${ZIG2_COMPILE_FLAGS}\n  LINK_FLAGS \"${ZIG2_LINK_FLAGS}\"\n)\ntarget_include_directories(zig2 PUBLIC stage1)\ntarget_link_libraries(zig2 LINK_PUBLIC zigcpp)\n\nif(MSVC)\n  target_link_libraries(zig2 LINK_PUBLIC ntdll.lib ws2_32.lib)\nelseif(MINGW)\n  target_link_libraries(zig2 LINK_PUBLIC ntdll ws2_32)\nendif()\n\nif(NOT MSVC)\n    target_link_libraries(zig2 LINK_PUBLIC ${LIBXML2})\nendif()\n\nif(ZIG_DIA_GUIDS_LIB)\n    target_link_libraries(zig2 LINK_PUBLIC ${ZIG_DIA_GUIDS_LIB})\nendif()\n\nif(MSVC OR MINGW)\n    target_link_libraries(zig2 LINK_PUBLIC version)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Arguments for Stage3 Zig Compiler\nDESCRIPTION: Sets up the build configuration arguments for the stage3 Zig compiler build. Includes handling for different build types, optimization levels, and various optional features based on CMake variables.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nset(ZIG_BUILD_ARGS\n  --zig-lib-dir \"${PROJECT_SOURCE_DIR}/lib\"\n\n  \"-Dversion-string=${RESOLVED_ZIG_VERSION}\"\n  \"-Dtarget=${ZIG_TARGET_TRIPLE}\"\n  \"-Dcpu=${ZIG_TARGET_MCPU}\"\n\n  -Denable-llvm\n  \"-Dconfig_h=${ZIG_CONFIG_H_OUT}\"\n\n  -Dno-langref\n)\n\nset(ZIG_EXTRA_BUILD_ARGS \"\" CACHE STRING \"Extra zig build args\")\nif(ZIG_EXTRA_BUILD_ARGS)\n  list(APPEND ZIG_BUILD_ARGS ${ZIG_EXTRA_BUILD_ARGS})\nendif()\n\nset(ZIG_RELEASE_SAFE OFF CACHE BOOL \"Build Zig as ReleaseSafe (with debug assertions on)\")\n\nif(\"${CMAKE_BUILD_TYPE}\" STREQUAL \"Debug\")\n  list(APPEND ZIG_BUILD_ARGS -Doptimize=Debug)\nelse()\n  if(\"${CMAKE_BUILD_TYPE}\" STREQUAL \"MinSizeRel\")\n    list(APPEND ZIG_BUILD_ARGS -Doptimize=ReleaseSmall)\n  else()\n    # Release and RelWithDebInfo\n    if(ZIG_RELEASE_SAFE)\n      list(APPEND ZIG_BUILD_ARGS -Doptimize=ReleaseSafe)\n    else()\n      list(APPEND ZIG_BUILD_ARGS -Doptimize=ReleaseFast)\n    endif()\n    if(NOT \"${CMAKE_BUILD_TYPE}\" STREQUAL \"RelWithDebInfo\")\n      list(APPEND ZIG_BUILD_ARGS -Dstrip)\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Build Arguments for Stage3 Zig Compiler\nDESCRIPTION: Adds conditional build flags to the Zig stage3 compiler build command based on user configuration options. Includes support for static builds, single-threaded mode, position-independent executables, and custom dynamic linker settings.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\nif(ZIG_STATIC AND NOT MSVC)\n  list(APPEND ZIG_BUILD_ARGS -Duse-zig-libcxx)\nendif()\n\nif(ZIG_NO_LIB)\n  list(APPEND ZIG_BUILD_ARGS -Dno-lib)\nendif()\n\nif(ZIG_SINGLE_THREADED)\n  list(APPEND ZIG_BUILD_ARGS -Dsingle-threaded)\nendif()\n\nif(ZIG_PIE)\n  list(APPEND ZIG_BUILD_ARGS -Dpie)\nendif()\n\nif(NOT \"${ZIG_TARGET_DYNAMIC_LINKER}\" STREQUAL \"\")\n  list(APPEND ZIG_BUILD_ARGS \"-Ddynamic-linker=${ZIG_TARGET_DYNAMIC_LINKER}\")\nendif()\n\nif(MINGW AND \"${ZIG_HOST_TARGET_ARCH}\" STREQUAL \"x86\")\n  list(APPEND ZIG_BUILD_ARGS --maxrss 7000000000)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Stage3 Zig Compiler and Installation Configuration\nDESCRIPTION: Sets up the final stage3 target that builds the complete Zig compiler using the stage2 compiler. Also configures the installation process through a CMake script with all necessary variables for proper installation.\nSOURCE: https://github.com/ziglang/zig/blob/master/CMakeLists.txt#_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(stage3 ALL\n  DEPENDS \"${PROJECT_BINARY_DIR}/stage3/bin/zig\"\n)\n\nset(ZIG2_WORKING_DIR \"${PROJECT_SOURCE_DIR}\")\n\nadd_custom_command(\n  OUTPUT \"${PROJECT_BINARY_DIR}/stage3/bin/zig\"\n  COMMAND zig2 build --prefix \"${PROJECT_BINARY_DIR}/stage3\" ${ZIG_BUILD_ARGS}\n  COMMENT \"Building stage3\"\n  WORKING_DIRECTORY \"${ZIG2_WORKING_DIR}\"\n)\n\nset(ZIG_EXECUTABLE \"$<TARGET_FILE:zig2>\")\n\ninstall(CODE \"set(ZIG_EXECUTABLE \\\"${ZIG_EXECUTABLE}\\\")\")\ninstall(CODE \"set(ZIG_BUILD_ARGS \\\"${ZIG_BUILD_ARGS}\\\")\")\ninstall(CODE \"set(ZIG2_WORKING_DIR \\\"${ZIG2_WORKING_DIR}\\\")\")\ninstall(CODE \"set(CMAKE_INSTALL_PREFIX \\\"${CMAKE_INSTALL_PREFIX}\\\")\")\ninstall(SCRIPT cmake/install.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Literals Length Default Distribution in C\nDESCRIPTION: Defines the default distribution table for literals length with an accuracy log of 6 bits (64 states). This distribution is used when Predefined_Mode is selected for the literals length symbol type in the Zstandard compression algorithm.\nSOURCE: https://github.com/ziglang/zig/blob/master/lib/std/compress/testdata/rfc8478.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nshort literalsLength_defaultDistribution[36] =\n  { 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1,\n    2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 1, 1, 1, 1, 1,\n    -1,-1,-1,-1\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining Match Length Default Distribution in C\nDESCRIPTION: Defines the default distribution table for match length with an accuracy log of 6 bits (64 states). This distribution is used when Predefined_Mode is selected for the match length symbol type in the Zstandard compression algorithm.\nSOURCE: https://github.com/ziglang/zig/blob/master/lib/std/compress/testdata/rfc8478.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nshort matchLengths_defaultDistribution[53] =\n  { 1, 4, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,-1,-1,\n    -1,-1,-1,-1,-1\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining Offset Codes Default Distribution in C\nDESCRIPTION: Defines the default distribution table for offset codes with an accuracy log of 5 bits (32 states). This distribution supports a maximum N value of 28, allowing offset values up to 536,870,908, and is used when Predefined_Mode is selected for offset codes in the Zstandard compression algorithm.\nSOURCE: https://github.com/ziglang/zig/blob/master/lib/std/compress/testdata/rfc8478.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nshort offsetCodes_defaultDistribution[29] =\n  { 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1,-1,-1,-1,-1,-1\n  };\n```\n\n----------------------------------------\n\nTITLE: Deriving Huffman Code Bit Length from Weight (Pseudocode)\nDESCRIPTION: This pseudocode describes the transformation from a 'Weight' value, read from the bitstream for each literal value, to the actual 'Number_of_Bits' used for the Huffman codeword. Weight 0 is a special case resulting in 0 bits; otherwise, the bit length is calculated based on the maximum bits used in the tree.\nSOURCE: https://github.com/ziglang/zig/blob/master/lib/std/compress/testdata/rfc8478.txt#_snippet_3\n\nLANGUAGE: Pseudocode\nCODE:\n```\nif Weight == 0\n  Number_of_Bits = 0\nelse\n  Number_of_Bits = Max_Number_of_Bits + 1 - Weight\n```"
  }
]