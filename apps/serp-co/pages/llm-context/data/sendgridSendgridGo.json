[
  {
    "owner": "sendgrid",
    "repo": "sendgrid-go",
    "content": "TITLE: Sending Single Email to Single Recipient with SendGrid Go\nDESCRIPTION: Demonstrates how to send a basic email to a single recipient using the SendGrid Go library. The code shows initialization of email components including from address, to address, subject, and both plain text and HTML content versions.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/proposal/mail-helper-refactor_2.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/sendgrid/sendgrid-go\"\n    \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n    from := mail.NewFrom(\"test@example.com\", \"Example User\")\n    to := mail.NewTo(\"test@example.com\", \"Example User\")\n    subject := mail.NewSubject(\"Sending with Twilio SendGrid is Fun\")\n    plainTextContent := mail.NewPlainTextContent(\"and easy to do anywhere, even with Go\")\n    htmlContent := mail.NewHtmlContent(\"<strong>and easy to do anywhere, even with Go</strong>\")\n    email := mail.NewMessage(from,\n                             to,\n                             subject, \n                             plainTextContent,\n                             htmlContent)\n    sendgrid := sendgrid.NewClient(os.Getenv(\"SENDGRID_API_KEY\"))\n    response, err := sendgrid.Send(email)\n    if err != nil {\n        log.Println(err)\n    } else {\n        fmt.Println(response.StatusCode)\n        fmt.Println(response.Body)\n        fmt.Println(response.Headers)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Personalization using SendGrid Go Helper\nDESCRIPTION: This code demonstrates how to send a personalized email to a single recipient using SendGrid's Go library. It uses substitution variables (%fname% and %CustomerID%) in the email content that get replaced with recipient-specific values through the Personalization object. The example also shows how to set custom subject lines per recipient.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/personalization-sending-single-email-single-recipient.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n  \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n  // create new *SGMailV3\n  m := mail.NewV3Mail()\n\n  from := mail.NewEmail(\"test\", \"test@example.com\")\n  content := mail.NewContent(\"text/html\", \"<p> %fname% : %CustomerID% - Personalizations are awesome!</p>\")\n\n  m.SetFrom(from)\n  m.AddContent(content)\n  \n  // create new *Personalization\n  personalization := mail.NewPersonalization()\n  \n  // populate `personalization` with data\n  to := mail.NewEmail(\"Example User\", \"test1@example.com\")\n  \n  personalization.AddTos(to)\n  personalization.SetSubstitution(\"%fname%\", \"recipient\")\n  personalization.SetSubstitution(\"%CustomerID%\", \"CUSTOMER ID GOES HERE\")\n  personalization.Subject = \"Having fun learning about personalizations?\"\n\n  // add `personalization` to `m`\n  m.AddPersonalizations(personalization)\n\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = mail.GetRequestBody(m)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Personalized Emails with SendGrid Go Library\nDESCRIPTION: Demonstrates creating and sending two different personalized emails using SendGrid's mail helper. Shows how to set up multiple personalizations with different recipients, CC recipients, custom substitutions, and subjects. Uses environment variables for API authentication.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/personalization-sending-two-emails-to-two-groups-recipients.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n  \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n  // create new *SGMailV3\n  m := mail.NewV3Mail()\n\n  from := mail.NewEmail(\"test\", \"test@example.com\")\n  content := mail.NewContent(\"text/html\", \"<p> %fname% : %CustomerID% - Personalizations are awesome!</p>\")\n\n  m.SetFrom(from)\n  m.AddContent(content)\n  \n  // create new *Personalization(s)\n  personalization1 := mail.NewPersonalization()\n  personalization2 := mail.NewPersonalization()\n  \n  // populate `personalization1` with data\n  p1_to := mail.NewEmail(\"Example User 1\", \"test1@example.com\")\n  p1_cc1 := mail.NewEmail(\"Example User 2\", \"test2@example.com\")\n  p1_cc2 := mail.NewEmail(\"Example User 3\", \"test3@example.com\")\n  p1_cc3 := mail.NewEmail(\"Example User 3\", \"test4@example.com\")\n  \n  personalization1.AddTos(p1_to)\n  personalization1.AddCCs(p1_cc1, p1_cc2, p1_cc3)\n  personalization1.SetSubstitution(\"%fname%\", \"recipient\")\n  personalization1.SetSubstitution(\"%CustomerID%\", \"CUSTOMER ID GOES HERE\")\n  personalization1.Subject = \"Having fun learning about personalizations?\"\n\n  // populate `personalization2` with data\n  p2_to := mail.NewEmail(\"Example User 1\", \"test1@example.com\")\n  p2_cc1 := mail.NewEmail(\"Example User 2\", \"test2@example.com\")\n  p2_cc2 := mail.NewEmail(\"Example User 3\", \"test3@example.com\")\n  p2_cc3 := mail.NewEmail(\"Example User 3\", \"test4@example.com\")\n  \n  personalization2.AddTos(p2_to)\n  personalization2.AddCCs(p2_cc1, p2_cc2, p2_cc3)\n  personalization2.SetSubstitution(\"%fname%\", \"recipient2\")\n  personalization2.SetSubstitution(\"%CustomerID%\", \"55\")\n  personalization2.Subject = \"Personalizations are fun!\"\n  \n  // add `personalization1` and `personalization2` to `m`\n  m.AddPersonalizations(personalization1, personalization2)\n\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = mail.GetRequestBody(m)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Attachments using SendGrid in Go\nDESCRIPTION: This code demonstrates how to create an email with multiple attachments using the SendGrid Go library. It includes attaching .txt and .pdf files as regular attachments, and a .jpg file as an inline attachment. The code also shows how to set up the email's content, recipients, and send the request to the SendGrid API.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/attachments-with-mailer-helper.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n  \"encoding/base64\"\n  \"io/ioutil\"\n  \"github.com/sendgrid/sendgrid-go\"\n  \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n  // create new *SGMailV3\n  m := mail.NewV3Mail()\n\n  from := mail.NewEmail(\"test\", \"test@example.com\")\n  content := mail.NewContent(\"text/html\", \"<p>Sending different attachments.</p>\")\n  to := mail.NewEmail(\"Example User\", \"test1@example.com\")\n\n  m.SetFrom(from)\n  m.AddContent(content)\n  \n  // create new *Personalization\n  personalization := mail.NewPersonalization()\n  personalization.AddTos(to)\n  personalization.Subject = \"Attachments - Demystified!\"\n\n  // add `personalization` to `m`\n  m.AddPersonalizations(personalization)\n  \n  // read/attach .txt file\n  a_txt := mail.NewAttachment()\n  dat, err := io.ReadFile(\"testing.txt\")\n  if err != nil {\n    fmt.Println(err)\n  }\n  encoded := base64.StdEncoding.EncodeToString([]byte(dat))\n  a_txt.SetContent(encoded)\n  a_txt.SetType(\"text/plain\")\n  a_txt.SetFilename(\"testing.txt\")\n  a_txt.SetDisposition(\"attachment\")\n  \n  // read/attach .pdf file\n  a_pdf := mail.NewAttachment()\n  dat, err = io.ReadFile(\"testing.pdf\")\n  if err != nil {\n    fmt.Println(err)\n  }\n  encoded = base64.StdEncoding.EncodeToString([]byte(dat))\n  a_pdf.SetContent(encoded)\n  a_pdf.SetType(\"application/pdf\")\n  a_pdf.SetFilename(\"testing.pdf\")\n  a_pdf.SetDisposition(\"attachment\")\n\n  // read/attach inline .jpg file\n  a_jpg := mail.NewAttachment()\n  dat, err = io.ReadFile(\"testing.jpg\")\n  if err != nil {\n    fmt.Println(err)\n  }\n  encoded = base64.StdEncoding.EncodeToString([]byte(dat))\n  a_jpg.SetContent(encoded)\n  a_jpg.SetType(\"image/jpeg\")\n  a_jpg.SetFilename(\"testing.jpg\")\n  a_jpg.SetDisposition(\"inline\")\n  a_jpg.SetContentID(\"Test Attachment\")\n  \n  // add `a_txt`, `a_pdf` and `a_jpg` to `m`\n  m.AddAttachment(a_txt)\n  m.AddAttachment(a_pdf)\n  m.AddAttachment(a_jpg)  \n  \n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = mail.GetRequestBody(m)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive SendGrid Email Configuration in Go\nDESCRIPTION: Complete example demonstrating all available SendGrid email settings including personalization, headers, substitutions, attachments, tracking options and more. Uses environment variable for API key and handles multiple recipients with different personalization indexes.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/proposal/mail-helper-refactor_2.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/sendgrid/sendgrid-go\"\n    \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n    from := mail.NewFrom(\"test@example.com\", \"Example User\")\n    to := mail.NewTo(\"test@example.com\", \"Example User\")\n    subject := mail.NewSubject(\"Sending with Twilio SendGrid is Fun\")\n    plainTextContent := mail.NewPlainTextContent(\"and easy to do anywhere, even with Go\")\n    htmlContent := mail.NewHtmlContent(\"<strong>and easy to do anywhere, even with Go</strong>\")\n    email := mail.NewMessage(from,\n                             to,\n                             subject, \n                             plainTextContent,\n                             htmlContent)\n    // For a detailed description of each of these settings, please see the [documentation](https://sendgrid.com/docs/API_Reference/api_v3.html).\n\n    email.AddTo(\"test1@example.com\", \"Example User1\")\n    to := []*mail.Tos{\n        mail.NewTo(\"test2@example.com\", \"Example User2\"),\n        mail.NewTo(\"test3@example.com\", \"Example User3\"),\n    }\n    email.AddTos(cc...)\n\n    email.AddCcs(\"test1@example4.com\", \"Example User4\")\n    cc := []*mail.Ccs{\n        mail.NewCcs(\"test5@example.com\", \"Example User5\"),\n        mail.NewCcs(\"test6@example.com\", \"Example User6\"),\n    }\n    email.AddCcs(cc...)\n\n    email.AddBcc(\"test1@example7.com\", \"Example User7\")\n    bcc := []*mail.Bccs{\n        mail.NewBcc(\"test8@example.com\", \"Example User8\"),\n        mail.NewBcc(\"test9@example.com\", \"Example User9\"),\n    }\n    email.AddBccs(bcc...)\n\n    email.AddHeader(\"X-Test1\", \"Test1\")\n    email.AddHeader(\"X-Test2\", \"Test2\")\n    headers := []*mail.Headers{\n        mail.NewHeader(\"X-Test3\", \"Test3\"),\n        mail.NewHeader(\"X-Test4\", \"Test4\"),\n    }\n    email.AddHeaders(headers)\n\n    email.AddSubstitution(\"%name1%\", \"Example Name 1\")\n    email.AddSubstitution(\"%city1%\", \"Denver\")\n    substitutions := []*mail.Substitutions{\n        mail.NewSubstitution(\"%name2%\", \"Example Name 2\"),\n        mail.NewSubstitution(\"%city2%\", \"Orange\"),\n    }\n    email.AddSubstitutions(substitutions)\n\n    email.AddCustomArg(\"marketing1\", \"false\")\n    email.AddCustomArg(\"transactional1\", \"true\")\n    customArgs := []*mail.CustomArgs{\n        mail.NewCustomArg(\"marketing2\", \"true\"),\n        mail.NewCustomArg(\"transactional2\", \"false\"),\n    }\n    email.AddCustomArgs(customArgs)\n\n    email.SetSendAt(1461775051)\n\n    // If you need to add more [Personalizations](https://sendgrid.com/docs/Classroom/Send/v3_Mail_Send/personalizations.html), here is an example of adding another Personalization by passing in a personalization index\n\n    email.AddTo(\"test10@example.com\", \"Example User10\", 1)\n    to := []*mail.Tos{\n        mail.NewTo(\"test11@example.com\", \"Example User11\"),\n        mail.NewTo(\"test12@example.com\", \"Example User12\"),\n    }\n    email.AddCcs(cc..., 1)\n\n    email.AddCcs(\"test13@example.com\", \"Example User13\", 1)\n    cc := []*mail.Ccs{\n        mail.NewCcs(\"test14@example.com\", \"Example User14\"),\n        mail.NewCcs(\"test15@example.com\", \"Example User15\"),\n    }\n    email.AddCcs(cc..., 1)\n\n    email.AddBcc(\"test16@example.com\", \"Example User16\", 1)\n    bcc := []*mail.Bccs{\n        mail.NewBcc(\"test17@example.com\", \"Example User17\"),\n        mail.NewBcc(\"test18@example.com\", \"Example User18\"),\n    }\n    email.AddBccs(bcc..., 1)\n\n    email.AddHeader(\"X-Test5\", \"Test5\", 1)\n    email.AddHeader(\"X-Test6\", \"Test6\", 1)\n    headers1 := []*mail.Headers{\n        mail.NewHeader(\"X-Test7\", \"Test7\"),\n        mail.NewHeader(\"X-Test8\", \"Test8\"),\n    }\n    email.AddHeaders(headers1, 1)\n\n    email.AddSubstitution(\"%name3%\", \"Example Name 3\", 1)\n    email.AddSubstitution(\"%city3%\", \"Redwood City\", 1)\n    substitutions1 := []*mail.Substitutions{\n        mail.NewSubstitution(\"%name4%\", \"Example Name 4\"),\n        mail.NewSubstitution(\"%city4%\", \"London\"),\n    }\n    email.AddSubstitutions(substitutions1, 1)\n\n    email.AddCustomArg(\"marketing3\", \"true\", 1)\n    email.AddCustomArg(\"transactional3\", \"false\", 1)\n    customArgs1 := []*mail.CustomArgs{\n        mail.NewCustomArg(\"marketing4\", \"false\"),\n        mail.NewCustomArg(\"transactional4\", \"true\"),\n    }\n    email.AddCustomArgs(customArgs1, 1)\n\n    email.SetSendAt(1461775051, 1)\n\n    email.SetSubject(\"this subject overrides the Global Subject\", 1)\n\n    // The values below this comment are global to entire message\n\n    email.SetFrom(\"test@example.com\", \"Example User 0\")\n\n    email.SetGlobalSubject(\"Sending with Twilio SendGrid is Fun\")\n\n    email.AddContent(sendgrid.MimeType.Text, \"and easy to do anywhere, even with Go\")\n    email.AddContent(sendgrid.MimeType.Html, \"<strong>and easy to do anywhere, even with Go</strong>\")\n    contents := []*mail.Contents{\n        mail.NewContent(\"text/calendar\", \"Party Time!!\"),\n        mail.NewContent(\"text/calendar2\", \"Party Time2!!\"),\n    }\n    email.AddContents(contents)\n\n    email.AddAttachment(\"balance_001.pdf\",\n                        \"base64 encoded string\",\n                        \"application/pdf\",\n                        \"attachment\",\n                        \"Balance Sheet\")\n    attachments := []*mail.Attachments{\n        mail.NewAttachment(\"banner.png\",\n                           \"base64 encoded string\",\n                           \"image/png\",\n                           \"inline\",\n                           \"Banner\"),\n        mail.NewAttachment(\"banner2.png\",\n                           \"base64 encoded string\",\n                           \"image/png\",\n                           \"inline\",\n                           \"Banner2\"),\n    }\n    email.AddAttachments(attachments)\n\n    email.SetTemplateId(\"13b8f94f-bcae-4ec6-b752-70d6cb59f932\")\n\n    email.AddGlobalHeader(\"X-Day\", \"Monday\")\n    globalHeaders := []*mail.Headers{\n        mail.NewHeader(\"X-Test3\", \"Test3\"),\n        mail.NewHeader(\"X-Test4\", \"Test4\"),\n    }\n    email.AddGlobalHeaders(globalHeaders)\n\n    email.AddSection(\"%section1\", \"Substitution for Section 1 Tag\")\n    sections := []*mail.Sections{\n        mail.NewSection(\"%section2%\", \"Substitution for Section 2 Tag\"),\n        mail.NewSection(\"%section3%\", \"Substitution for Section 3 Tag\"),\n    }\n    email.AddSections(sections)\n\n    email.AddCategory(\"customer\")\n    categories := []*mail.Categories{\n        mail.NewCategory(\"vip\"),\n        mail.NewCategory(\"new_account\"),\n    }\n    email.AddCategories(categories)\n\n    email.AddGlobalCustomArg(\"campaign\", \"welcome\")\n    globalCustomArgs := []*mail.CustomArgs{\n        mail.NewCustomArg(\"sequence2\", \"2\"),\n        mail.NewCustomArg(\"sequence3\", \"3\"),\n    }\n    email.AddGlobalCustomArgs(globalCustomArgs)\n\n    asmGroups := []*mail.AsmGroups{\n        mail.NewAsmGroup(1),\n        mail.NewAsmGroup(4),\n        mail.NewAsmGroup(5),\n    }\n    email.SetAsm(3, asmGroups)\n\n    email.SetGlobalSendAt(1461775051)\n\n    email.SetIpPoolName(\"23\")\n\n    // This must be a valid [batch ID](https://sendgrid.com/docs/API_Reference/SMTP_API/scheduling_parameters.html)\n    //email.SetBatchId(\"some_batch_id\")\n\n    email.SetBccSetting(true, \"test@example.com\")\n\n    email.SetBypassListManagement(true)\n\n    email.SetFooterSetting(true, \"Some Footer HTML\", \"Some Footer Text\")\n\n    email.SetSandBoxMode(true)\n\n    email.SetSpamCheck(true, 1, \"https://gotchya.example.com\")\n\n    email.SetClickTracking(true, false)\n\n    email.SetOpenTracking(true, \"Optional tag to replace with the open image in the body of the message\")\n\n    email.SetSubscriptionTracking(true,\n                                  \"HTML to insert into the text / html portion of the message\",\n                                  \"text to insert into the text/plain portion of the message\",\n                                  \"substitution tag\")\n\n    email.SetGoogleAnalytics(true,\n                             \"some campaign\",\n                             \"some content\",\n                             \"some medium\",\n                             \"some source\",\n                             \"some term\")\n\n    email.SetReplyTo(\"test+reply@example.com\", \"Reply To Me\")      \n\n    sendgrid := sendgrid.NewClient(os.Getenv(\"SENDGRID_API_KEY\"))\n    response, err := sendgrid.Send(email)\n    if err != nil {\n        log.Println(err)\n    } else {\n        fmt.Println(response.StatusCode)\n        fmt.Println(response.Body)\n        fmt.Println(response.Headers)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Attachments using SendGrid Go Library\nDESCRIPTION: This code demonstrates how to send an email with multiple attachments using the SendGrid Go library. It constructs a POST request to the SendGrid API, including the email content and attachment details in the request body. The attachments include a text file, an inline image, and a PDF file.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/attachments-without-mailer-helper.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n)\n\nfunc main() {\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = []byte(` {\n     \"personalizations\": [\n         {\n             \"to\": [\n                 {\n                     \"email\": \"test1@example.com\"\n                 }\n             ],\n             \"subject\": \"Attachments - Demystified!\"\n             }\n         }\n     ],\n     \"from\": {\n         \"email\": \"test@example.com\"\n     },\n     \"content\": [\n         {\n             \"type\": \"text/html\",\n             \"value\": \"<p>Sending different attachments.</p>\"\n         }\n     ], \n     \"attachments\": [\n        {\n          \"content\": \"SGVsbG8gV29ybGQh\", \n          \"disposition\": \"attachment\", \n          \"filename\": \"testing.txt\", \n          \"type\": \"txt\"\n        },\n        {\n          \"content\": \"BASE64 encoded content block here\", \n          \"disposition\": \"inline\", \n          \"content_id\": \"testing_2\", \n          \"filename\": \"testing.jpg\", \n          \"type\": \"jpg\"\n        },\n        {\n          \"content\": \"BASE64 encoded content block here\",\n          \"disposition\": \"attachment\", \n          \"filename\": \"testing.pdf\", \n          \"type\": \"pdf\"\n        }\n     ]\n  }`)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Personalized Email with SendGrid Go Library\nDESCRIPTION: This code demonstrates how to send a personalized email using the SendGrid Go library. It sets up a request to the SendGrid API, defines personalizations for the email content, and handles the API response. The example includes substitutions for recipient name and customer ID.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/personalization-without-helper-sending-single-email-single-recipient.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n)\n\nfunc main() {\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = []byte(`{\n  \"personalizations\": [{\n      \"to\": [{\n          \"email\": \"test1@example.com\"\n      }],\n      \"substitutions\": {\n          \"%fname%\": \"recipient\",\n          \"%CustomerID%\": \"CUSTOMER ID GOES HERE\"\n      },\n      \"subject\": \"YOUR SUBJECT LINE GOES HERE\"\n  }],\n  \"from\": {\n    \"email\": \"test@example.com\"\n  },\n  \"content\": [\n      {\n          \"type\": \"text/html\",\n          \"value\": \"<p> %fname% : %CustomerID% - Personalizations are awesome!</p>\"\n      }\n  ]\n  }`)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Templated Email with SendGrid Go Client\nDESCRIPTION: Complete Go implementation for sending an email using SendGrid's template feature. Demonstrates creating an email message, adding template substitutions, setting the template ID, and sending the email using the SendGrid API client.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/proposal/mail-helper-refactor_2.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/sendgrid/sendgrid-go\"\n    \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n    from := mail.NewFrom(\"test@example.com\", \"Example User\")\n    to := mail.NewTo(\"test@example.com\", \"Example User\")\n    subject := mail.NewSubject(\"Sending with Twilio SendGrid is Fun\")\n    plainTextContent := mail.NewPlainTextContent(\"and easy to do anywhere, even with Go\")\n    htmlContent := mail.NewHtmlContent(\"<strong>and easy to do anywhere, even with Go</strong>\")\n    email := mail.NewMessage(from,\n                             to,\n                             subject, \n                             plainTextContent,\n                             htmlContent)\n    // See `Send Multiple Emails to Multiple Recipients` for additional methods for adding substitutions\n    email.AddSubstitution(\"-name-\", \"Example User\")\n    email.AddSubstitution(\"-city-\", \"Denver\")\n    email.SetTemplateId(\"13b8f94f-bcae-4ec6-b752-70d6cb59f932\")\n    sendgrid := sendgrid.NewClient(os.Getenv(\"SENDGRID_API_KEY\"))\n    response, err := sendgrid.Send(email)\n    if err != nil {\n        log.Println(err)\n    } else {\n        fmt.Println(response.StatusCode)\n        fmt.Println(response.Body)\n        fmt.Println(response.Headers)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Personalized Email with SendGrid in Go\nDESCRIPTION: Demonstrates how to send a single email with CC and BCC recipients using SendGrid's Go SDK. The example includes email personalization with substitution variables, setting up recipients, and handling the API response. Requires SendGrid API key set in environment variables.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/personalization-sending-single-email-single-recipient-with-cc-bcc.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n  \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n  // create new *SGMailV3\n  m := mail.NewV3Mail()\n\n  from := mail.NewEmail(\"test\", \"test@example.com\")\n  content := mail.NewContent(\"text/html\", \"<p> %fname% : %CustomerID% - Personalizations are awesome!</p>\")\n\n  m.SetFrom(from)\n  m.AddContent(content)\n  \n  // create new *Personalization\n  personalization := mail.NewPersonalization()\n  \n  // populate `personalization` with data\n  to := mail.NewEmail(\"Example User\", \"test1@example.com\")\n  cc1 := mail.NewEmail(\"Example CC\", \"test2@example.com\")\n  bcc1 := mail.NewEmail(\"Example BCC\", \"test3@example.com\")\n  \n  personalization.AddTos(to)\n  personalization.AddCCs(cc1)\n  personalization.AddBCCs(bcc1)\n  personalization.SetSubstitution(\"%fname%\", \"recipient\")\n  personalization.SetSubstitution(\"%CustomerID%\", \"CUSTOMER ID GOES HERE\")\n  personalization.Subject = \"Having fun learning about personalizations?\"\n\n  // add `personalization` to `m`\n  m.AddPersonalizations(personalization)\n\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = mail.GetRequestBody(m)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Personalized Email to Multiple Recipients with SendGrid in Go\nDESCRIPTION: This code demonstrates how to send a single email to multiple recipients with personalized content using the SendGrid Go SDK. It creates a mail object, sets sender and content, and then creates a personalization object to define multiple recipients and substitution variables that will be replaced for each recipient. The example shows how to make the API request and handle the response.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/personalization-sending-single-email-to-multiple-recipients.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n  \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n  // create new *SGMailV3\n  m := mail.NewV3Mail()\n\n  from := mail.NewEmail(\"test\", \"test@example.com\")\n  content := mail.NewContent(\"text/html\", \"<p> %fname% : %CustomerID% - Personalizations are awesome!</p>\")\n\n  m.SetFrom(from)\n  m.AddContent(content)\n  \n  // create new *Personalization\n  personalization := mail.NewPersonalization()\n  \n  // populate `personalization` with data\n  to1 := mail.NewEmail(\"Example User 1\", \"test1@example.com\")\n  to2 := mail.NewEmail(\"Example User 2\", \"test2@example.com\")\n  to3 := mail.NewEmail(\"Example User 3\", \"test3@example.com\")\n  \n  personalization.AddTos(to1, to2, to3)\n  personalization.SetSubstitution(\"%fname%\", \"recipient\")\n  personalization.SetSubstitution(\"%CustomerID%\", \"CUSTOMER ID GOES HERE\")\n  personalization.Subject = \"Having fun learning about personalizations?\"\n\n  // add `personalization` to `m`\n  m.AddPersonalizations(personalization)\n\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = mail.GetRequestBody(m)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Personalized Email with Multiple CCs Using SendGrid Go Library\nDESCRIPTION: This code demonstrates how to send a personalized email to a single recipient with multiple CC recipients using SendGrid's Go library. It shows how to create a mail object, set up personalization with substitution variables, and send the email using the SendGrid API.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/personalization-sending-single-email-to-single-recipients-with-multiple-cc-bcc.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n  \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n  // create new *SGMailV3\n  m := mail.NewV3Mail()\n\n  from := mail.NewEmail(\"test\", \"test@example.com\")\n  content := mail.NewContent(\"text/html\", \"<p> %fname% : %CustomerID% - Personalizations are awesome!</p>\")\n\n  m.SetFrom(from)\n  m.AddContent(content)\n  \n  // create new *Personalization\n  personalization := mail.NewPersonalization()\n  \n  // populate `personalization` with data\n  to := mail.NewEmail(\"Example User 1\", \"test1@example.com\")\n  cc1 := mail.NewEmail(\"Example User 2\", \"test2@example.com\")\n  cc2 := mail.NewEmail(\"Example User 3\", \"test3@example.com\")\n  cc3 := mail.NewEmail(\"Example User 3\", \"test4@example.com\")\n  \n  personalization.AddTos(to)\n  personalization.AddCCs(cc1, cc2, cc3)\n  personalization.SetSubstitution(\"%fname%\", \"recipient\")\n  personalization.SetSubstitution(\"%CustomerID%\", \"CUSTOMER ID GOES HERE\")\n  personalization.Subject = \"Having fun learning about personalizations?\"\n\n  // add `personalization` to `m`\n  m.AddPersonalizations(personalization)\n\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = mail.GetRequestBody(m)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Personalized Emails to Multiple Recipients with SendGrid in Go\nDESCRIPTION: This snippet demonstrates how to send personalized emails to multiple recipients using the SendGrid Go client with substitution variables. It illustrates adding recipients individually or in batches, setting recipient-specific substitutions, overriding subjects for specific recipients, and using global substitutions.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/proposal/mail-helper-refactor.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"os\"\n        \"time\"\n\n        \"github.com/sendgrid/sendgrid-go\"\n        \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n        message := &mail.Message{\n                From: mail.Email{\"from@example.com\", \"Example Sender\"},\n        }\n\t\n\t// mail.To struct encompasses the personalizations for the recipient\n\t// You can add substitutions, categories, custom arguments, etc. for each recipient to the corresponding mail.To\n\t// object.\n\t// Learn more about personalization [here](https://sendgrid.com/docs/API_Reference/api_v3.html)\n\t// and [here](https://sendgrid.com/docs/Classroom/Send/v3_Mail_Send/personalizations.html)\n\n        to1 := &mail.To{\n                \"Email\": \"test1@example.com\",\n                \"Name\": \"Test Recipient\",\n                \"Substitutions\": map[string]string{\n                        \"-name-\":\"Alain\",\n                        \"-github-\", \"http://github.com/test1\",\n                },\n        }\n        message.AddTo(to1)\n\n        moreTos := []mail.To{\n                mail.To{\n                        \"Email\": \"test2@example.com\",\n                        \"Name\": \"Test Recipient\",\n                        \"Substitutions\": map[string]string{\n                                \"-name-\":\"Elmer\",\n                                \"-github-\", \"http://github.com/thinkingserious\",\n                        },\n                        \"Subject\": \"Override global subject\",\n                },\n                mail.To{\n                        \"Email\": \"test3@example.com\",\n                        \"Name\": \"Test Recipient\",\n                        \"Substitutions\": map[string]string{\n                                \"-name-\":\"Matt\",\n                                \"-github-\", \"http://github.com/test3\",\n                        },\n                },\n        }\n        message.AddTos(moreTos)\n\n        message.AddGlobalSubstitutions(map[string]string{\"-time-\": time.Now().String()})\n\n        message.SetSubject(\"Hi -name-!\")\n        message.SetTextContent(\"Hello -name-, your github is -github-, email sent at -time-\")\n        message.SetHTMLContent(\"<strong>Hello -name-, your github is <a href=\\\"-github-\\\">here</a></strong> email sent at -time-\")\n\n        client := sendgrid.NewSendClient(os.Getenv(\"SENDGRID_API_KEY\"))\n        response, err := client.Send(message)\n        if err != nil {\n                fmt.Println(err)\n        } else {\n                fmt.Println(response.StatusCode)\n                fmt.Println(response.Body)\n                fmt.Println(response.Headers)\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Personalized Emails with SendGrid Go SDK\nDESCRIPTION: Demonstrates how to create and send two different personalized emails using SendGrid's Go helper library. Shows how to set different from addresses, recipients, and subjects for each personalization. Includes error handling and response processing.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/personalization-sending-two-emails-to-two-groups-recipients-from-two-different-from-emails.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n  \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n  // create new *SGMailV3\n  m := mail.NewV3Mail()\n\n  from := mail.NewEmail(\"Example Sender 1\", \"defaultSender@example.com\")\n  content := mail.NewContent(\"text/html\", \"<p>Personalizations are awesome!</p>\")\n\n  m.SetFrom(from)\n  m.AddContent(content)\n  \n  // create new *Personalization(s)\n  personalization1 := mail.NewPersonalization()\n  personalization2 := mail.NewPersonalization()\n  \n  // populate `personalization1` with data \n  //this email will be sent from Example Sender 1\n  p1_to := mail.NewEmail(\"Example User 1\", \"test1@example.com\")\n  \n  personalization1.AddTos(p1_to)\n  personalization1.Subject = \"Having fun learning about personalizations?\"\n\n  // populate `personalization2` with data \n  //this email will be sent from Example Sender 2\n  p2_from :=mail.NewEmail(\"Example Sender 2\", \"sender2@example.com\")\n  p2_to := mail.NewEmail(\"Example User 1\", \"test1@example.com\")\n  \n  personalization2.AddFrom(p2_from)\n  personalization2.AddTos(p2_to)\n  personalization2.Subject = \"Personalizations are fun!\"\n  \n  // add `personalization1` and `personalization2` to `m`\n  m.AddPersonalizations(personalization1, personalization2)\n\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = mail.GetRequestBody(m)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SendGrid CustomArgs with Mail Helper Class in Go\nDESCRIPTION: This example demonstrates how to use SendGrid's Mail Helper Class to send an email with custom arguments and substitutions. It sets custom arguments at both the mail level and personalization level while using substitutions to personalize the email content with the recipient's name and city.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/custom-args-with-mailer-helper.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n  \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n  from := mail.NewEmail(\"Example User\", \"test@example.com\")\n  subject := \"CustomArgs can be fun\"\n  to := mail.NewEmail(\"Example User\", \"test@example.com\")\n  content := mail.NewContent(\"text/html\", \"<html>\\n<head>\\n\\t<title></title>\\n</head>\\n<body>\\nHello -name-,\\n<br /><br/>\\nI'm glad you are trying out the CustomArgs feature!\\n<br /><br/>\\nI hope you are having a great day in -city- :)\\n<br /><br/>\\n</body>\\n</html>\")\n  m := mail.NewV3MailInit(from, subject, to, content)\n  m.Personalizations[0].SetSubstitution(\"-name-\", \"Example User\")\n  m.Personalizations[0].SetSubstitution(\"-city-\", \"Denver\")\n  m.Personalizations[0].SetCustomArg(\"user_id\", \"343\")\n  m.Personalizations[0].SetCustomArg(\"batch_id\", \"3\")\n\n  m.SetCustomArg(\"campaign\", \"welcome\")\n  m.SetCustomArg(\"weekday\", \"morning\")\n\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = mail.GetRequestBody(m)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending Emails with SendGrid Transactional Templates in Go\nDESCRIPTION: This code demonstrates how to set up and send a transactional template email using SendGrid's Go library. It includes creating the mail object, setting the sender and recipient, attaching a template ID, populating dynamic template data for items in a receipt, and sending the request to the SendGrid API.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/transactional-templates-with-mailer-helper.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"github.com/sendgrid/sendgrid-go\"\n  \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n  \"os\"\n)\n\nfunc main() {\n  m := mail.NewV3Mail()\n\n  address := \"test@example.com\"\n  name := \"Example User\"\n  e := mail.NewEmail(name, address)\n  m.SetFrom(e)\n\n  m.SetTemplateID(\"d-c6dcf1f72bdd4beeb15a9aa6c72fcd2c\")\n\n  p := mail.NewPersonalization()\n  tos := []*mail.Email{\n    mail.NewEmail(\"Example User\", \"test1@example.com\"),\n  }\n  p.AddTos(tos...)\n\n  p.SetDynamicTemplateData(\"receipt\", \"true\")\n  p.SetDynamicTemplateData(\"total\", \"$ 239.85\")\n\n  items := []struct {\n    text  string\n    image string\n    price string\n  }{\n    {\"New Line Sneakers\", \"https://marketing-image-production.s3.amazonaws.com/uploads/8dda1131320a6d978b515cc04ed479df259a458d5d45d58b6b381cae0bf9588113e80ef912f69e8c4cc1ef1a0297e8eefdb7b270064cc046b79a44e21b811802.png\", \"$ 79.95\"},\n    {\"Old Line Sneakers\", \"https://marketing-image-production.s3.amazonaws.com/uploads/3629f54390ead663d4eb7c53702e492de63299d7c5f7239efdc693b09b9b28c82c924225dcd8dcb65732d5ca7b7b753c5f17e056405bbd4596e4e63a96ae5018.png\", \"$ 79.95\"},\n    {\"Blue Line Sneakers\", \"https://marketing-image-production.s3.amazonaws.com/uploads/00731ed18eff0ad5da890d876c456c3124a4e44cb48196533e9b95fb2b959b7194c2dc7637b788341d1ff4f88d1dc88e23f7e3704726d313c57f350911dd2bd0.png\", \"$ 79.95\"},\n  }\n\n  var itemList []map[string]string\n  var item map[string]string\n  for _, v := range items {\n    item = make(map[string]string)\n    item[\"text\"] = v.text\n    item[\"image\"] = v.image\n    item[\"price\"] = v.price\n    itemList = append(itemList, item)\n  }\n  p.SetDynamicTemplateData(\"items\", itemList)\n\n  p.SetDynamicTemplateData(\"name\", \"Sample Name\")\n  p.SetDynamicTemplateData(\"address01\", \"1234 Fake St.\")\n  p.SetDynamicTemplateData(\"address02\", \"Apt. 123\")\n  p.SetDynamicTemplateData(\"city\", \"Place\")\n  p.SetDynamicTemplateData(\"state\", \"CO\")\n  p.SetDynamicTemplateData(\"zip\", \"80202\")\n\n  m.AddPersonalizations(p)\n  \n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  var Body = mail.GetRequestBody(m)\n  request.Body = Body\n  response, err := sendgrid.API(request)\n  if err != nil {\n    fmt.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with SendGrid Transaction Templates in Go\nDESCRIPTION: This code demonstrates how to send an email with dynamic template data using SendGrid's API in Go without the Mail Helper class. It creates a direct POST request to the SendGrid API with JSON payload containing personalizations, dynamic template data for an order receipt, and a template ID.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/transactional-templates-without-mailer-helper.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"github.com/sendgrid/sendgrid-go\"\n  \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n  \"os\"\n)\n\nfunc main() {\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = []byte(` {\n    \"from\": {\n        \"email\": \"test@example.com\"\n    },    \n    \"personalizations\": [\n      {\n        \"to\": [\n            {\n                \"email\": \"test@example.com\"\n            }\n        ],\n        \"dynamic_template_data\":{  \n          \"total\":\"$ 239.85\",\n          \"items\":[  \n             {  \n                \"text\":\"New Line Sneakers\",\n                \"image\":\"https://marketing-image-production.s3.amazonaws.com/uploads/8dda1131320a6d978b515cc04ed479df259a458d5d45d58b6b381cae0bf9588113e80ef912f69e8c4cc1ef1a0297e8eefdb7b270064cc046b79a44e21b811802.png\",\n                \"price\":\"$ 79.95\"\n             },\n             {  \n                \"text\":\"Old Line Sneakers\",\n                \"image\":\"https://marketing-image-production.s3.amazonaws.com/uploads/3629f54390ead663d4eb7c53702e492de63299d7c5f7239efdc693b09b9b28c82c924225dcd8dcb65732d5ca7b7b753c5f17e056405bbd4596e4e63a96ae5018.png\",\n                \"price\":\"$ 79.95\"\n             },\n             {  \n                \"text\":\"Blue Line Sneakers\",\n                \"image\":\"https://marketing-image-production.s3.amazonaws.com/uploads/00731ed18eff0ad5da890d876c456c3124a4e44cb48196533e9b95fb2b959b7194c2dc7637b788341d1ff4f88d1dc88e23f7e3704726d313c57f350911dd2bd0.png\",\n                \"price\":\"$ 79.95\"\n             }\n          ],\n          \"receipt\":true,\n          \"name\":\"Sample Name\",\n          \"address01\":\"1234 Fake St.\",\n          \"address02\":\"Apt. 123\",\n          \"city\":\"Place\",\n          \"state\":\"CO\",\n          \"zip\":\"80202\"\n        }\n      }\n    ],\n    \"template_id\":\"d-c6dcf1f72bdd4beeb15a9aa6c72fcd2c\"\n  }`)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SendGrid Sections for Email Personalization in Go\nDESCRIPTION: This code demonstrates how to use SendGrid's Sections feature to personalize email content. It creates an email with template variables that are substituted with personalized content using the mail.AddSection method. The example shows how to set up substitutions and sections for dynamic content insertion.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/sections-with-mailer-helper.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n \nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n \n  \"github.com/sendgrid/sendgrid-go\"\n  \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n \nfunc main() {\n  from := mail.NewEmail(\"Example User\", \"test@example.com\")\n  subject := \"Sections can be fun\"\n  to := mail.NewEmail(\"Example User\", \"test@example.com\")\n  content := mail.NewContent(\"text/html\", \"<html>\\n<head>\\n\\t<title></title>\\n</head>\\n<body>\\n-wel-\\n<br /><br/>\\nI'm glad you are trying out the Sections feature!\\n<br /><br/>\\n-gday-\\n<br /><br/>\\n</body>\\n</html>\")\n  m := mail.NewV3MailInit(from, subject, to, content)\n  m.Personalizations[0].SetSubstitution(\"-name-\", \"Example User\")\n  m.Personalizations[0].SetSubstitution(\"-city-\", \"Denver\")\n  m.Personalizations[0].SetSubstitution(\"-wel-\", \"-welcome-\")\n  m.Personalizations[0].SetSubstitution(\"-gday-\", \"-great_day-\")\n \n  m.AddSection(\"-welcome-\", \"Hello -name-,\")\n  m.AddSection(\"-great_day-\", \"I hope you are having a great day in -city- :)\")\n \n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = mail.GetRequestBody(m)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Single Email to Multiple Recipients with SendGrid Go\nDESCRIPTION: Shows how to send the same email content to multiple recipients simultaneously using the SendGrid Go library. The code demonstrates how to create an array of recipients while maintaining the same email content for all.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/proposal/mail-helper-refactor_2.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/sendgrid/sendgrid-go\"\n    \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n    from := mail.NewFrom(\"test@example.com\", \"Example User\")\n    to := []*mail.Tos{\n        mail.NewTo(\"test@example1.com\", \"Example User 1\"),\n        mail.NewTo(\"test@example2.com\", \"Example User 2\"),\n    }\n    subject := mail.NewSubject(\"Sending with Twilio SendGrid is Fun\")\n    plainTextContent := mail.NewPlainTextContent(\"and easy to do anywhere, even with Go\")\n    htmlContent := mail.NewHtmlContent(\"<strong>and easy to do anywhere, even with Go</strong>\")\n    email := mail.NewMessage(from,\n                             to...,\n                             subject, \n                             plainTextContent,\n                             htmlContent)\n    sendgrid := sendgrid.NewClient(os.Getenv(\"SENDGRID_API_KEY\"))\n    response, err := sendgrid.Send(email)\n    if err != nil {\n        log.Println(err)\n    } else {\n        fmt.Println(response.StatusCode)\n        fmt.Println(response.Body)\n        fmt.Println(response.Headers)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Single Email with CC and BCC Recipients using SendGrid in Go\nDESCRIPTION: This example shows how to send an email to a primary recipient with carbon copy (CC) and blind carbon copy (BCC) recipients using the SendGrid API. It demonstrates creating a request with personalization fields, substitutions for dynamic content, and handling the API response.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/personalization-without-helper-sending-single-email-single-recipient-with-cc-bcc.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n)\n\nfunc main() {\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = []byte(`{\n  \"personalizations\": [{\n      \"to\": [{\n          \"email\": \"recipient1@example.com\"\n      }],\n      \"cc\": [{\n          \"email\": \"recipient2@example.com\"\n      }],\n      \"bcc\": [{\n          \"email\": \"recipient3@example.com\"\n      }],\n      \"substitutions\": {\n          \"%fname%\": \"recipient\",\n          \"%CustomerID%\": \"CUSTOMER ID GOES HERE\"\n      }\n  }],\n  \"from\": {\n    \"email\": \"test@example.com\"\n  },\n  \"content\": [\n      {\n          \"type\": \"text/html\",\n          \"value\": \"<p> %fname% : %CustomerID% - Personalizations are awesome!</p>\"\n      }\n  ]\n  }`)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Substitutions using SendGrid Go Library\nDESCRIPTION: This Go code demonstrates how to send an email using SendGrid's Go library with substitutions. It creates an email, sets up substitutions for personalization, adds custom arguments, and sends the email using the SendGrid API.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/substitutions-with-mailer-helper.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n   \"fmt\"\n   \"log\"\n   \"os\"\n\n   \"github.com/sendgrid/sendgrid-go\"\n   \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n  from := mail.NewEmail(\"Example User\", \"test@example.com\")\n  subject := \"Substitutions can be fun\"\n  to := mail.NewEmail(\"Example User\", \"test@example.com\")\n  content := mail.NewContent(\"text/html\", \"<html>\\n<head>\\n\\t<title></title>\\n</head>\\n<body>\\nHello -name-,\\n<br /><br/>\\nI'm glad you are trying out the Substitutions feature!\\n<br /><br/>\\nI hope you are having a great day in -city- :)\\n<br /><br/>\\n</body>\\n</html>\")\n  m := mail.NewV3MailInit(from, subject, to, content)\n  m.Personalizations[0].SetSubstitution(\"-name-\", \"Example User\")\n  m.Personalizations[0].SetSubstitution(\"-city-\", \"Denver\")\n  m.Personalizations[0].SetSubstitution(\"-user_id-\", \"343\")\n  m.Personalizations[0].SetCustomArg(\"user_id\", \"-user_id-\")\n  m.Personalizations[0].SetCustomArg(\"city\", \"-city-\")\n\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = mail.GetRequestBody(m)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Personalized Emails with SendGrid Go\nDESCRIPTION: Demonstrates how to send personalized emails to multiple recipients using substitution variables. The code includes examples of per-recipient substitutions and global substitutions for email customization.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/proposal/mail-helper-refactor_2.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/sendgrid/sendgrid-go\"\n    \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n    from := mail.NewFrom(\"test@example.com\", \"Example User\")\n    tos := []*mail.Tos{\n        mail.NewTo(\"test1@example.com\",\n                   \"Example User 1\",\n                   map[string]string{\n                       \"-name-\", \"Alain\",\n                       \"-github-\", \"http://github.com/ninsuo\",\n                   }),\n        mail.NewTo(\"test2@example.com\",\n                   \"Example User 2\",\n                   map[string]string{\n                        \"-name-\", \"Elmer\",\n                        \"-github-\", \"http://github.com/thinkingserious\",\n                    }),),\n    }\n    subject := mail.NewSubject(\"Hi -name-!\")\n    globalSubstitution = mail.NewGlobalSubstitution(\"-time-\", \"<Current Time>\")\n    plainTextContent := mail.NewPlainTextContent(\"and easy to do anywhere, even with Go\")\n    htmlContent := mail.NewHtmlContent(\"<strong>and easy to do anywhere, even with Go</strong>\")\n    email := mail.NewMessage(from,\n                             to...,\n                             subject,\n                             plainTextContent,\n                             htmlContent,\n                             globalSubstitution)\n    sendgrid := sendgrid.NewClient(os.Getenv(\"SENDGRID_API_KEY\"))\n    response, err := sendgrid.Send(email)\n    if err != nil {\n        log.Println(err)\n    } else {\n        fmt.Println(response.StatusCode)\n        fmt.Println(response.Body)\n        fmt.Println(response.Headers)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Personalized Emails to Multiple Recipient Groups Using SendGrid API in Go\nDESCRIPTION: This code demonstrates how to send two different personalized emails to two separate groups of recipients using SendGrid's Mail Send API without helper functions. It configures different 'to' and 'cc' recipients for each personalization block, sets custom substitution variables (%fname% and %CustomerID%), and includes a template with these variables in the email content.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/personalization-without-helper-sending-two-emails-to-two-groups-recipients.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n)\n\nfunc main() {\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = []byte(`{\n  \"personalizations\": [{\n      \"to\": [{\n          \"email\": \"recipient1@example.com\"\n      }],\n      \"cc\": [{\n          \"email\": \"recipient2@example.com\"\n      }, {\n          \"email\": \"recipient3@example.com\"\n      }, {\n          \"email\": \"recipient4@example.com\"\n      }],\n      \"substitutions\": {\n          \"%fname%\": \"recipient\",\n          \"%CustomerID%\": \"CUSTOMER ID GOES HERE\"\n      },\n      \"subject\": \"YOUR SUBJECT LINE GOES HERE\"\n  }, {\n      \"to\": [{\n          \"email\": \"recipient5@example.com\"\n      }],\n      \"cc\": [{\n          \"email\": \"recipient6@example.com\"\n      }, {\n          \"email\": \"recipient7@example.com\"\n      }, {\n          \"email\": \"recipient8@example.com\"\n      }],\n      \"substitutions\": {\n          \"%fname%\": \"recipient2\",\n          \"%CustomerID%\": 55\n      },\n      \"subject\": \"YOUR SUBJECT LINE GOES HERE\"\n  }],\n  \"from\": {\n    \"email\": \"test@example.com\"\n  },\n  \"content\": [\n      {\n          \"type\": \"text/html\",\n          \"value\": \"<p> %fname% : %CustomerID% - Personalizations are awesome!</p>\"\n      }\n  ]\n  }`)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with CC and Substitutions using SendGrid Go\nDESCRIPTION: This code demonstrates how to send an email to a primary recipient with a CC using SendGrid's Go library. It uses personalization for substituting custom values in the email content and sets up the request manually without helper functions. The example includes error handling and response processing.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/personalization-without-helper-sending-single-email-single-recipient-with-cc.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n)\n\nfunc main() {\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = []byte(`{\n  \"personalizations\": [{\n      \"to\": [{\n          \"email\": \"recipient1@example.com\"\n      }],\n      \"cc\": [{\n          \"email\": \"recipient2@example.com\"\n      }],\n      \"substitutions\": {\n          \"%fname%\": \"recipient\",\n          \"%CustomerID%\": \"CUSTOMER ID GOES HERE\"\n      },\n      \"subject\": \"YOUR SUBJECT LINE GOES HERE\"\n  }],\n  \"from\": {\n    \"email\": \"test@example.com\"\n  },\n  \"content\": [\n      {\n          \"type\": \"text/html\",\n          \"value\": \"<p> %fname% : %CustomerID% - Personalizations are awesome!</p>\"\n      }\n  ]\n  }`)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Custom Arguments using SendGrid Go SDK\nDESCRIPTION: Demonstrates sending an email using SendGrid's v3 API with custom arguments and substitutions. The code shows how to set recipient-specific custom arguments and global custom arguments while also implementing personalization variables. Uses direct JSON request body construction instead of the Mail Helper class.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/custom-args-without-mailer-helper.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n)\n\nfunc main() {\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = []byte(` {\n    \"personalizations\": [\n      {\n        \"to\": [\n            {\n                \"email\": \"test@example.com\"\n            }\n        ],\n        \"subject\": \"CustomArgs can be fun\",\n        \"substitutions\": {\n          \"-name-\": \"Example User\",\n          \"-city-\": \"Denver\"\n        }, \n        \"custom_args\": {\n          \"user_id\": \"343\", \n          \"batch_id\": \"3\"\n        }\n      }\n    ],\n    \"from\": {\n        \"email\": \"test@example.com\"\n    },\n    \"content\": [\n        {\n            \"type\": \"text/html\",\n            \"value\": \"<html>\\n<head>\\n\\t<title></title>\\n</head>\\n<body>\\nHello -name-,\\n<br /><br/>\\nI'm glad you are trying out the CustomArgs feature!\\n<br /><br/>\\nI hope you are having a great day in -city- :)\\n<br /><br/>\\n</body>\\n</html>\"\n        }\n    ], \n    \"custom_args\": {\n      \"campaign\": \"welcome\",\n      \"weekday\": \"morning\"\n    } \n}`)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Sections using SendGrid API in Go\nDESCRIPTION: This code demonstrates how to send an email with sections using the SendGrid API in Go. It creates a request with personalization, from address, content, and sections. The sections feature allows for dynamic content replacement in the email body.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/sections-without-mailer-helper.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n)\n\nfunc main() {\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = []byte(` {\n     \"personalizations\": [\n         {\n             \"to\": [\n                 {\n                     \"email\": \"test@example.com\"\n                 }\n             ],\n             \"subject\": \"Sections can be fun\",\n             \"substitutions\": {\n               \"-name-\": \"Example User\",\n               \"-city-\": \"Denver\",\n               \"-wel-\": \"-welcome-\",\n               \"-gday-\": \"-great_day-\"\n             }\n         }\n     ],\n     \"from\": {\n         \"email\": \"test@example.com\"\n     },\n     \"content\": [\n         {\n             \"type\": \"text/html\",\n             \"value\": \"<html>\\n<head>\\n\\t<title></title>\\n</head>\\n<body>\\n-wel-\\n<br /><br/>\\nI'm glad you are trying out the Sections feature!\\n<br /><br/>\\n-gday-\\n<br /><br/>\\n</body>\\n</html>\"\n         }\n     ], \n   \"sections\": {\n     \"section\": {\n       \"-welcome-\": \"Hello -name-,\", \n       \"-great_day-\": \"I hope you are having a great day in -city- :)\"\n     }\n   }\n  }`)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Transactional Template using SendGrid Go Library\nDESCRIPTION: This snippet demonstrates how to send an email using a transactional template with the SendGrid Go library. It shows how to set the template ID and add substitutions for dynamic content.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/proposal/mail-helper-refactor.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"os\"\n\n        \"github.com/sendgrid/sendgrid-go\"\n        \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n        message := &mail.Message{\n                To:   []mail.To{mail.To{\n                              \"Email\": \"test@example.com\",\n                              \"Name\": \"Example Recipient\",\n                              \"Substitutions\": map[string]string{\n                                      \"-name-\", \"Example User\",\n                              },\n                      }},\n                From: mail.Email{\"from@example.com\", \"Example Sender\"},\n        }\n\n        message.SetTemplateId(\"13b8f94f-bcae-4ec6-b752-70d6cb59f932\")\n        message.AddSubstitution(\"-city-\", \"Orange\")\n        message.AddSubstitution(\"%subject%\", \"A message with Template\")\n\n        client := sendgrid.NewSendClient(os.Getenv(\"SENDGRID_API_KEY\"))\n        response, err := client.Send(message)\n        if err != nil {\n                fmt.Println(err)\n        } else {\n                fmt.Println(response.StatusCode)\n                fmt.Println(response.Body)\n                fmt.Println(response.Headers)\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SendGrid Substitutions in Go\nDESCRIPTION: Example of sending an email using SendGrid's API with substitution placeholders. The code demonstrates how to replace template variables like -name-, -city-, and -user_id- with actual values in the email content. It also shows how to set custom arguments that can be used for tracking.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/substitutions-without-mailer-helper.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n)\n\nfunc main() {\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = []byte(` {\n     \"personalizations\": [\n         {\n             \"to\": [\n                 {\n                     \"email\": \"test@example.com\"\n                 }\n             ],\n             \"subject\": \"Substitutions can be fun\",\n             \"substitutions\": {\n               \"-name-\": \"Example User\",\n               \"-city-\": \"Denver\",\n               \"-user_id-\": \"343\"\n             }, \n             \"custom_args\": {\n               \"user_id\": \"-user_id-\", \n               \"city\": \"-city-\"\n             }\n         }\n     ],\n     \"from\": {\n         \"email\": \"test@example.com\"\n     },\n     \"content\": [\n         {\n             \"type\": \"text/html\",\n             \"value\": \"<html>\\n<head>\\n\\t<title></title>\\n</head>\\n<body>\\nHello -name-,\\n<br /><br/>\\nI'm glad you are trying out the Substitutions feature!\\n<br /><br/>\\nI hope you are having a great day in -city- :)\\n<br /><br/>\\n</body>\\n</html>\"\n         }\n     ]\n }`)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Error Handling for SendGrid API Status Codes in Go\nDESCRIPTION: Implementation showing how to properly handle non-2xx status codes from the SendGrid API, including logging or error propagation options.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/TROUBLESHOOTING.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nresp, err := sendgrid.API(request)\nif err != nil {\n\treturn err\n}\nif resp.StatusCode >= 400 {\n\t// something goes wrong and you have to handle (e.g. returning an error to the user or logging the problem)\n\tlog.Printf(\"api response: HTTP %d: %s\", resp.StatusCode, resp.Body)\n\t// OR\n\t// return fmt.Errorf(\"api response: HTTP %d: %s\", resp.StatusCode, resp.Body)\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with SendGrid API in Go (Without Mail Helper)\nDESCRIPTION: This code demonstrates how to send an email through SendGrid's API without using the Mail Helper class. It creates a direct API request with a JSON payload that includes recipient information, personalization substitutions, sender details, HTML content, and a template ID.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/legacy-templates-without-mailer-helper.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n)\n\nfunc main() {\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = []byte(` {\n    \"personalizations\": [\n        {\n            \"to\": [\n                {\n                    \"email\": \"test@example.com\"\n                }\n            ],\n            \"subject\": \"I'm replacing the subject tag\",\n            \"substitutions\": {\n              \"-name-\": \"Example User\",\n              \"-city-\": \"Denver\"\n            },\n        }\n    ],\n    \"from\": {\n        \"email\": \"test@example.com\"\n    },\n    \"content\": [\n        {\n            \"type\": \"text/html\",\n            \"value\": \"I'm replacing the <strong>body tag</strong>\"\n        }\n    ],\n    \"template_id\": \"13b8f94f-bcae-4ec6-b752-70d6cb59f932\"\n}`)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Personalization using SendGrid Go API\nDESCRIPTION: Example of sending a personalized email to a single recipient with multiple CC recipients using the SendGrid Go API directly. The code demonstrates how to use substitution variables (%fname%, %CustomerID%) within the email content for personalization.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/personalization-without-helper-sending-single-email-to-single-recipients-with-multiple-cc-bcc.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n)\n\nfunc main() {\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = []byte(`{\n  \"personalizations\": [{\n      \"to\": [{\n          \"email\": \"recipient1@example.com\"\n      }],\n      \"cc\": [{\n          \"email\": \"recipient2@example.com\"\n      }, {\n          \"email\": \"recipient3@example.com\"\n      }, {\n          \"email\": \"recipient4@example.com\"\n      }],\n      \"substitutions\": {\n          \"%fname%\": \"recipient\",\n          \"%CustomerID%\": \"CUSTOMER ID GOES HERE\"\n      },\n      \"subject\": \"YOUR SUBJECT LINE GOES HERE\"\n  }],\n  \"from\": {\n    \"email\": \"test@example.com\"\n  },\n  \"content\": [\n      {\n          \"type\": \"text/html\",\n          \"value\": \"<p> %fname% : %CustomerID% - Personalizations are awesome!</p>\"\n      }\n  ]\n  }`)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with SendGrid Mail Helper in Go\nDESCRIPTION: Example of sending an email using the SendGrid Mail Helper class which simplifies the creation of personalization objects and email content. This approach provides a higher-level abstraction over the API.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/sendgrid/sendgrid-go\"\n\t\"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n\tfrom := mail.NewEmail(\"Example User\", \"test@example.com\")\n\tsubject := \"Sending with Twilio SendGrid is Fun\"\n\tto := mail.NewEmail(\"Example User\", \"test@example.com\")\n\tplainTextContent := \"and easy to do anywhere, even with Go\"\n\thtmlContent := \"<strong>and easy to do anywhere, even with Go</strong>\"\n\tmessage := mail.NewSingleEmail(from, subject, to, plainTextContent, htmlContent)\n\tclient := sendgrid.NewSendClient(os.Getenv(\"SENDGRID_API_KEY\"))\n\tresponse, err := client.Send(message)\n\tif err != nil {\n\t\tlog.Println(err)\n\t} else {\n\t\tfmt.Println(response.StatusCode)\n\t\tfmt.Println(response.Body)\n\t\tfmt.Println(response.Headers)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Inbound Emails with Attachments in Go using SendGrid Helper\nDESCRIPTION: This example demonstrates how to create an HTTP handler to process incoming emails with attachments using the SendGrid Inbound Parse webhook. It includes parsing email content, handling attachments, and responding with a 200 OK status to stop SendGrid from retrying the POST request.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/helpers/inbound/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/sendgrid/sendgrid-go/helpers/inbound\"\n)\n\nfunc inboundHandler(response http.ResponseWriter, request *http.Request) {\n\tparsedEmail, err := ParseWithAttachments(request)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Print(parsedEmail.Envelope.From)\n\n\tfor filename, contents := range parsedEmail.ParsedAttachments {\n\t\t// Do something with an attachment\n\t\thandleAttachment(filename, contents)\n\t}\n\n\n\tfor section, body := range strings.Split(parsedEmail.TextBody, \"\\n\") {\n\t\t// Do something with the email lines\n\t}\n\n\n\t// Twilio SendGrid needs a 200 OK response to stop POSTing\n\tresponse.WriteHeader(http.StatusOK)\n}\n\n// example of uploading an attachment to s3 using the Go sdk-2\nfunc handleAttachment(parsedEmail *ParsedEmail) {\n\tfor _, contents := range parsedEmail.ParsedAttachments {\n\t\t\tif _, err := sgh.Client.Upload(ctx, &s3.PutObjectInput{\n\t\t\t\tBucket:               &bucket,\n\t\t\t\tKey:                  &uploadPath,\n\t\t\t\tBody:                 contents.File,\n\t\t\t\tContentType:          aws.String(contents.ContentType),\n      }\n  }\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/inbound\", inboundHandler)\n\tif err := http.ListenAndServe(\":8000\", nil); err != nil {\n\t\tlog.Fatalln(\"Error\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Complex Email with SendGrid Go Library\nDESCRIPTION: This snippet demonstrates how to send a complex email using the SendGrid Go library. It includes multiple recipients, CC, BCC, custom headers, substitutions, custom arguments, attachments, and various email settings.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/proposal/mail-helper-refactor.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"os\"\n\n        \"github.com/sendgrid/sendgrid-go\"\n        \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n        message := &mail.Message{}\n\n        to1 := &mail.To{mail.To{\"Email\": \"test1@example.com\", \"Name\": \"Test Recipient 1\"}}\n        to2 := &mail.To{mail.To{\"Email\": \"test2@example.com\", \"Name\": \"Test Recipient 2\"}}\n\n        to1.AddCC(&mail.Email{\"cc1@example.com\", \"Test Recipient\"})\n        ccs := []mail.Email{\n                mail.Email{\"cc2@example.com\", \"Test Recipient\"}.\n                mail.Email{\"cc3@example.com\", \"Test Recipient\"},\n        }\n        to2.AddCCs(ccs)\n\n        to1.AddBCC(&mail.Email{\"bcc1@example.com\", \"Test Recipient\"})\n        bccs := []mail.Email{\n                mail.Email{\"bcc2@example.com\", \"Test Recipient\"}.\n                mail.Email{\"bcc3@example.com\", \"Test Recipient\"},\n        }\n        to2.AddBCCs(bccs)\n\n        to1.AddHeader(\"X-Hdr1\", \"Test1\")\n        hdrs := map[string]string{\n                \"X-Hdr2\", \"Test2\",\n                \"X-Hdr3\", \"Test3\",\n        }\n        to2.AddHeaders(hdrs)\n\n        to1.AddSubstitution(\"%City1%\", \"Denver\")\n        to1.AddSubstitution(\"%name1%\": \"Name 1\")\n        substitutions := map[string]string{\n                \"%City2%\", \"Orange\",\n                \"%name2%\": \"Name 2\",\n        }\n        to2.AddSubstitutions(substitutions)\n\n        to1.AddCustomArg(\"Message-Category\", \"Marketing\")\n        customArgs := map[string]string{\n                \"Campaign-ID\": \"Mkt-123\",\n                \"Location\": \"US-West\",\n        }\n        to2.AddCustomArgs(customArgs)\n\n        to1.SetSendAt(1461775051)\n\n        to1.SetSubject(\"Override subject for Rcpt 1\")\n\n        message.AddTo(to1)\n        message.AddTo(to2)\n\n        // If you need to add more [Personalizations](https://sendgrid.com/docs/Classroom/Send/v3_Mail_Send/personalizations.html),\n        // Here is an example of adding another Personalization by passing in a personalization index\n\n        // Global message level methods\n        message.SetFrom(&mail.Email{\"from@example.com\", \"Example Sender\"})\n\n        message.SetReplyTo(&mail.Email{\"replyto@example.com\", \"Reply To\"})\n\n        message.SetSubject(\"Sending Email is fun!\")\n\n        message.AddContent(&mail.Content{\n                \"Type\": \"text/plain\",\n                \"Value\": \"Text content\",\n        })\n        message.AddContent(&mail.Content{\n                \"Type\": \"text/html\",\n                \"Value\": \"<strong> HTML content</strong>\",\n        })\n\n        message.AddAttachment(&mail.Attachment{\n                \"filename\": \"balance_001.pdf\",\n                \"content\": \"base64 encoded string\",\n                \"type\": \"application/pdf\",\n                \"disposition\": \"attachment\",\n        })\n\n        message.SetTemplateId(\"13b8f94f-bcae-4ec6-b752-70d6cb59f932\")\n\n        message.AddSection(\"%section1\", \"Substitution for Section 1 Tag\")\n        sections := map[string]string{\n                \"%section2%\", \"Substitution for Section 2 Tag\",\n                \"%section3%\", \"Substitution for Section 3 Tag\",\n        }\n        message.AddSections(sections)\n\n        message.AddCategory(\"customer\")\n        categories := []string{\"new_account\", \"aws\"}\n        message.AddCategories(categories\")\n\n        message.AddCustomArg(\"campaign\", \"welcome\")\n        globalCustomArgs := map[string]string{\n                \"sequence2\", \"2\",\n                \"sequence3\", \"3\",\n        }\n        message.AddCustomArgs(globalCustomArgs)\n\n        asmGroupIds := []int{1, 4, 5}\n        message.SetAsm(3, asmGroupIds)\n\n        message.SetSendAt(1461775051)\n\n        message.SetIpPoolName(\"23\")\n\n        // mail settings\n        message.SetBccSetting(true, \"test@example.com\")\n        message.SetBypassListManagement(true)\n        message.SetFooterSetting(true, \"Some Footer HTML\", \"Some Footer Text\")\n        message.SetSandBoxMode(true)\n        message.SetSpamCheck(true, 1, \"https://gotchya.example.com\")\n\n        // tracking settings\n        message.SetClickTracking(true, false)\n        message.SetOpenTracking(true, \"Optional tag to replace with the open image in the body of the message\")\n        message.SetSubscriptionTracking(true,\n                                        \"HTML to insert into the text / html portion of the message\",\n                                        \"text to insert into the text/plain portion of the message\",\n                                        \"substitution tag\")\n\n        message.SetGoogleAnalytics(true, \"some campaign\", \"some content\", \"some medium\", \"some source\", \"some term\")\n\n        client := sendgrid.NewSendClient(os.Getenv(\"SENDGRID_API_KEY\"))\n        response, err := client.Send(message)\n        if err != nil {\n                fmt.Println(err)\n        } else {\n                fmt.Println(response.StatusCode)\n                fmt.Println(response.Body)\n                fmt.Println(response.Headers)\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Legacy Template in Go using SendGrid Mail Helper\nDESCRIPTION: Demonstrates how to send an email using SendGrid's legacy template system with dynamic substitutions. The code initializes an email with custom subject, content, and template substitutions, then sends it via the SendGrid API. Requires SendGrid API key as an environment variable.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/legacy-templates-with-mailer-helper.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n  \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n  from := mail.NewEmail(\"Example User\", \"test@example.com\")\n  subject := \"I'm replacing the subject tag\"\n  to := mail.NewEmail(\"Example User\", \"test@example.com\")\n  content := mail.NewContent(\"text/html\", \"I'm replacing the <strong>body tag</strong>\")\n  m := mail.NewV3MailInit(from, subject, to, content)\n  m.Personalizations[0].SetSubstitution(\"-name-\", \"Example User\")\n  m.Personalizations[0].SetSubstitution(\"-city-\", \"Denver\")\n  m.SetTemplateID(\"13b8f94f-bcae-4ec6-b752-70d6cb59f932\")\n\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = mail.GetRequestBody(m)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Attachments using SendGrid Go Library\nDESCRIPTION: This snippet shows how to send an email with multiple attachments using the SendGrid Go library. It demonstrates adding individual attachments and a list of attachments to the email message.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/proposal/mail-helper-refactor.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"os\"\n\n        \"github.com/sendgrid/sendgrid-go\"\n        \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n        message := &mail.Message{\n                To:          []mail.To{\n                                     mail.To{\"Email\": \"test@example.com\", \"Name\": \"Example Recipient\"},\n                             },\n                From:        mail.Email{\"from@example.com\", \"Example Sender\"},\n                Subject:     \"Test Email Subject\",\n                TextContent: \"Text Email Content\",\n                HTMLContent: \"<strong>HTML Email Content<strong>\",\n        }\n\n        message.AddAttachment(&mail.Attachment{\n                \"filename\": \"yosemite.jpg\",\n                \"content\": \"base64 encoded string\",\n                \"type\": \"image/jpg\",\n                \"disposition\": \"inline\",\n                \"content_id\": \"image_1\",\n        })\n\n        attachments := []mail.Attachment{\n                mail.Attachment{\n                        \"filename\": \"el_capitan.jpg\",\n                        \"content\": \"base64 encoded string 2\",\n                        \"type\": \"image/jpg\",\n                        \"disposition\": \"inline\",\n                        \"content_id\": \"image_2\",\n                },\n                mail.Attachment{\n                        \"filename\": \"sierra.jpg\",\n                        \"content\": \"base64 encoded string 3\",\n                        \"type\": \"image/jpg\",\n                        \"disposition\": \"inline\",\n                        \"content_id\": \"image_3\",\n                },\n        }\n        message.AddAttachments(attachments)\n\n        client := sendgrid.NewSendClient(os.Getenv(\"SENDGRID_API_KEY\"))\n        response, err := client.Send(message)\n        if err != nil {\n                fmt.Println(err)\n        } else {\n                fmt.Println(response.StatusCode)\n                fmt.Println(response.Body)\n                fmt.Println(response.Headers)\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Personalized Emails with SendGrid Go\nDESCRIPTION: Demonstrates sending two different emails to different recipients using SendGrid's API. The code constructs a raw JSON request that defines multiple personalizations, allowing different subject lines and 'from' addresses for each recipient group. Uses environment variable for API key authentication.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/personalization-without-helper-sending-two-emails-to-two-groups-recipients-from-two-different-from-emails.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n)\n\nfunc main() {\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = []byte(`{\n  \"personalizations\": [{\n      \"to\": [{\n          \"email\": \"recipient1@example.com\"\n      }],\n      \"subject\": \"YOUR SUBJECT LINE GOES HERE\"\n  }, {\n      \"to\": [{\n          \"email\": \"recipient2@example.com\"\n      }],\n      \"from\": {\n          \"email\": \"sender2@example.com\"\n      },\n      \"subject\": \"YOUR OTHER SUBJECT LINE GOES HERE\"\n  }],\n  \"from\": {\n    \"email\": \"defaultSender@example.com\"\n  },\n  \"content\": [\n      {\n          \"type\": \"text/html\",\n          \"value\": \"<p>Personalizations are awesome!</p>\"\n      }\n  ]\n  }`)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SendGrid Email with Attachment in Go\nDESCRIPTION: Simple example showing how to send an email with a file attachment using SendGrid. Demonstrates basic email configuration with a PDF attachment using the SendGrid Go client library.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/proposal/mail-helper-refactor_2.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    \"github.com/sendgrid/sendgrid-go\"\n    \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n    from := mail.NewFrom(\"test@example.com\", \"Example User\")\n    to := mail.NewTo(\"test@example.com\", \"Example User\")\n    subject := mail.NewSubject(\"Sending with Twilio SendGrid is Fun\")\n    plainTextContent := mail.NewPlainTextContent(\"and easy to do anywhere, even with Go\")\n    htmlContent := mail.NewHtmlContent(\"<strong>and easy to do anywhere, even with Go</strong>\")\n    email := mail.NewMessage(from,\n                             to,\n                             subject, \n                             plainTextContent,\n                             htmlContent)\n    email.AddAttachment(\"balance_001.pdf\",\n                        \"base64 encoded string\",\n                        \"application/pdf\",\n                        \"attachment\",\n                        \"Balance Sheet\")\n\n    sendgrid := sendgrid.NewClient(os.Getenv(\"SENDGRID_API_KEY\"))\n    response, err := sendgrid.Send(email)\n    if err != nil {\n        log.Println(err)\n    } else {\n        fmt.Println(response.StatusCode)\n        fmt.Println(response.Body)\n        fmt.Println(response.Headers)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Email Activity by Recipient using SendGrid Go\nDESCRIPTION: This Go code demonstrates how to use the SendGrid API to filter email activity and find emails sent to a specific email address. It constructs a GET request to the '/v3/messages' endpoint with query parameters for filtering. The code handles URL encoding of filter values and prints the API response.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/email-activity.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/url\"\n\t\"os\"\n\n\t\"github.com/sendgrid/sendgrid-go\"\n)\n\nfunc main() {\n\tapiKey := os.Getenv(\"YOUR_SENDGRID_APIKEY\")\n\thost := \"https://api.sendgrid.com\"\n\trequest := sendgrid.GetRequest(apiKey, \"/v3/messages\", host)\n\trequest.Method = \"GET\"\n\n\tfilterKey := \"to_email\"\n\tfilterOperator := url.QueryEscape(\"=\")\n\tfilterValue := \"testing@sendgrid.net\"\n\tfilterValue = url.QueryEscape(fmt.Sprintf(\"\\\"%s\\\"\", filterValue))\n\n\tqueryParams := make(map[string]string)\n\tqueryParams[\"query\"] = fmt.Sprintf(\"%s%s%s\", filterKey, filterOperator, filterValue)\n\tqueryParams[\"limit\"] = \"1\"\n\trequest.QueryParams = queryParams\n\n\tresponse, err := sendgrid.API(request)\n\tif err != nil {\n\t\tlog.Println(err)\n\t} else {\n\t\tfmt.Println(response.StatusCode)\n\t\tfmt.Println(response.Body)\n\t\tfmt.Println(response.Headers)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with SendGrid API in Go\nDESCRIPTION: Example showing how to handle errors and read response messages from the SendGrid API when sending emails. Demonstrates proper error checking and response parsing.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/TROUBLESHOOTING.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tfrom := mail.NewEmail(\"Example User\", \"test@example.com\")\n\tsubject := \"Hello World from the Twilio SendGrid Go Library\"\n\tto := mail.NewEmail(\"Example User\", \"test@example.com\")\n\tcontent := mail.NewContent(\"text/plain\", \"some text here\")\n\tm := mail.NewV3MailInit(from, subject, to, content)\n\n\trequest := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KE\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n\trequest.Method = \"POST\"\n\trequest.Body = mail.GetRequestBody(m)\n\tresponse, err := sendgrid.API(request)\n\tif err != nil {\n\t\tlog.Println(err)\n\t} else {\n\t\tfmt.Println(response.StatusCode)\n\t\tfmt.Println(response.Body)\n\t\tfmt.Println(response.Headers)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email Statistics using SendGrid Go Client\nDESCRIPTION: A Go example that demonstrates how to use the SendGrid Go client to fetch email statistics. The code authenticates with an API key, constructs a request with query parameters for date range and aggregation, and handles the API response.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/view-email-stats.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/sendgrid/sendgrid-go\"\n)\n\nfunc main() {\n\tapiKey := os.Getenv(\"SENDGRID_API_KEY\")\n\thost := \"https://api.sendgrid.com\"\n\trequest := sendgrid.GetRequest(apiKey, \"/v3/stats\", host)\n\trequest.Method = \"GET\"\n\tqueryParams := make(map[string]string)\n\tqueryParams[\"aggregated_by\"] = \"day\"\n\tqueryParams[\"limit\"] = \"1\"\n\tqueryParams[\"start_date\"] = \"2017-01-01\"\n\tqueryParams[\"end_date\"] = \"2017-10-12\"\n\tqueryParams[\"offset\"] = \"1\"\n\trequest.QueryParams = queryParams\n\tresponse, err := sendgrid.API(request)\n\tif err != nil {\n\t\tlog.Println(err)\n\t} else {\n\t\tfmt.Println(response.StatusCode)\n\t\tfmt.Println(response.Body)\n\t\tfmt.Println(response.Headers)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Single Email to a Single Recipient with SendGrid in Go\nDESCRIPTION: This snippet demonstrates how to send a basic email to a single recipient using the SendGrid Go client. It creates a message with to/from addresses, subject, and both text and HTML content, then sends it using the SendGrid API.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/proposal/mail-helper-refactor.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"os\"\n\n        \"github.com/sendgrid/sendgrid-go\"\n        \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n        message := &mail.Message{\n                To:          []mail.To{mail.To{\n                                     \"Email\": \"test@example.com\",\n                                     \"Name\": \"Example Recipient\",\n                             }},\n                From:        mail.Email{\"from@example.com\", \"Example Sender\"},\n                Subject:     \"Test Email Subject\",\n                TextContent: \"Text Email Content\",\n                HTMLContent: \"<strong>HTML Email Content<strong>\",\n        }\n\n        client := sendgrid.NewSendClient(os.Getenv(\"SENDGRID_API_KEY\"))\n        response, err := client.Send(message)\n        if err != nil {\n                fmt.Println(err)\n        } else {\n                fmt.Println(response.StatusCode)\n                fmt.Println(response.Body)\n                fmt.Println(response.Headers)\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with SendGrid Go Client\nDESCRIPTION: Example showing how to send an email using the SendGrid Go client library. It demonstrates creating a mail helper, setting recipients, email content, and sending the request through the API.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/helpers/inbound/sample_data/default_data_with_attachments.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/sendgrid/sendgrid-go\"\n\t\"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n\tfrom := mail.NewEmail(\"Example User\", \"test@example.com\")\n\tsubject := \"Sending with SendGrid is Fun\"\n\tto := mail.NewEmail(\"Example User\", \"test@example.com\")\n\tplainTextContent := \"and easy to do anywhere, even with Go\"\n\thtmlContent := \"<strong>and easy to do anywhere, even with Go</strong>\"\n\tmessage := mail.NewSingleEmail(from, subject, to, plainTextContent, htmlContent)\n\tclient := sendgrid.NewSendClient(os.Getenv(\"SENDGRID_API_KEY\"))\n\tresponse, err := client.Send(message)\n\tif err != nil {\n\t\tlog.Println(err)\n\t} else {\n\t\tfmt.Println(response.StatusCode)\n\t\tfmt.Println(response.Body)\n\t\tfmt.Println(response.Headers)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Single Email to Multiple Recipients with SendGrid in Go\nDESCRIPTION: This snippet shows how to send the same email content to multiple recipients simultaneously using the SendGrid Go client. It creates a message with multiple recipients in the To field, along with from address, subject, and both text and HTML content.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/proposal/mail-helper-refactor.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"os\"\n\n        \"github.com/sendgrid/sendgrid-go\"\n        \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n        message := &mail.Message{\n                To:     []mail.To{\n                        mail.To{\"Email\": \"test1@example.com\", \"Name\": \"Example Recipient1\"},\n                        mail.To{\"Email\": \"test2@example.com\", \"Name\": \"Example Recipient3\"},\n                        mail.To{\"Email\": \"test3@example.com\", \"Name\": \"Example Recipient3\"},\n                },\n                From:        mail.Email{\"from@example.com\", \"Example Sender\"},\n                Subject:     \"Test Email Subject\",\n                TextContent: \"Text Email Content\",\n                HTMLContent: \"<strong>HTML Email Content<strong>\",\n        }\n\n        client := sendgrid.NewSendClient(os.Getenv(\"SENDGRID_API_KEY\"))\n        response, err := client.Send(message)\n        if err != nil {\n                fmt.Println(err)\n        } else {\n                fmt.Println(response.StatusCode)\n                fmt.Println(response.Body)\n                fmt.Println(response.Headers)\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email without Mail Helper in Go\nDESCRIPTION: Example of sending an email by directly interfacing with the SendGrid API without using the Mail Helper class. This approach requires manual construction of the JSON payload for the mail/send endpoint.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/sendgrid/sendgrid-go\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\n\trequest := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n\trequest.Method = \"POST\"\n\trequest.Body = []byte(` {\n\t\"personalizations\": [\n\t\t{\n\t\t\t\"to\": [\n\t\t\t\t{\n\t\t\t\t\t\"email\": \"test@example.com\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"subject\": \"Sending with Twilio SendGrid is Fun\"\n\t\t}\n\t],\n\t\"from\": {\n\t\t\"email\": \"test@example.com\"\n\t},\n\t\"content\": [\n\t\t{\n\t\t\t\"type\": \"text/plain\",\n\t\t\t\"value\": \"and easy to do anywhere, even with Go\"\n\t\t}\n\t]\n}`)\n\tresponse, err := sendgrid.API(request)\n\tif err != nil {\n\t\tlog.Println(err)\n\t} else {\n\t\tfmt.Println(response.StatusCode)\n\t\tfmt.Println(response.Body)\n\t\tfmt.Println(response.Headers)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: General v3 Web API Usage with SendGrid in Go\nDESCRIPTION: Example demonstrating how to use the SendGrid Go library to access general API endpoints beyond mail/send. This example shows how to get a list of API keys.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/sendgrid/sendgrid-go\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\n\trequest := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/api_keys\", \"https://api.sendgrid.com\")\n\trequest.Method = \"GET\"\n\n\tresponse, err := sendgrid.API(request)\n\tif err != nil {\n\t\tlog.Println(err)\n\t} else {\n\t\tfmt.Println(response.StatusCode)\n\t\tfmt.Println(response.Body)\n\t\tfmt.Println(response.Headers)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Email Template\nDESCRIPTION: HTML email template with dynamic substitution variables for name and city, including a template variable for the body content.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/proposal/mail-helper-refactor_2.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n    <title></title>\n</head>\n<body>\nHello -name-,\n<br /><br/>\nI'm glad you are trying out the template feature!\n<br /><br/>\n<%body%>\n<br /><br/>\nI hope you are having a great day in -city- :)\n<br /><br/>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Domain Authentication via SendGrid API in Go\nDESCRIPTION: This code example demonstrates how to create a domain authentication in Twilio SendGrid using the API. It makes a POST request to the whitelabel/domains endpoint with domain configuration details including automatic security settings, SPF customization, and IP addresses to associate with the domain.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/setup-domain-authentication.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/sendgrid/sendgrid-go\"\n)\n\nfunc main() {\n\tapiKey := os.Getenv(\"SENDGRID_API_KEY\")\n\thost := \"https://api.sendgrid.com\"\n\trequest := sendgrid.GetRequest(apiKey, \"/v3/whitelabel/domains\", host)\n\trequest.Method = \"POST\"\n\trequest.Body = []byte(` {\n  \"automatic_security\": false, \n  \"custom_spf\": true, \n  \"default\": true, \n  \"domain\": \"example.com\", \n  \"ips\": [\n    \"192.168.1.1\", \n    \"192.168.1.2\"\n  ], \n \"subdomain\": \"SUBDOMAIN\", \n \"username\": \"YOUR_SENDGRID_SUBUSER_NAME\"\n}`)\n\tresponse, err := sendgrid.API(request)\n\tif err != nil {\n\t\tlog.Println(err)\n\t} else {\n\t\tfmt.Println(response.StatusCode)\n\t\tfmt.Println(response.Body)\n\t\tfmt.Println(response.Headers)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Email Subject Template\nDESCRIPTION: Subject line template using SendGrid's template syntax.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/proposal/mail-helper-refactor_2.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n<%subject%>\n```\n\n----------------------------------------\n\nTITLE: Initializing Twilio Email Client in Go\nDESCRIPTION: Creates a new Twilio Email Send Client instance using either API key/secret pair or account SID/auth token credentials from environment variables. This client enables sending emails through the Twilio Email API.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/twilio-email.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmailClient := NewTwilioEmailSendClient(os.Getenv(\"TWILIO_API_KEY\"), os.Getenv(\"TWILIO_API_SECRET\"))\n\n// or\n\nmailClient := NewTwilioEmailSendClient(os.Getenv(\"TWILIO_ACCOUNT_SID\"), os.Getenv(\"TWILIO_AUTH_TOKEN\"))\n```\n\n----------------------------------------\n\nTITLE: Constructing Multipart Email with Attachment for Sendgrid Inbound Parse\nDESCRIPTION: Sample email message with text, HTML, and image attachment formatted for Sendgrid's inbound parse webhook. Includes MIME headers, multipart boundaries, and base64-encoded image data.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/helpers/inbound/sample_data/raw_data_with_attachments.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--xYzZY\nContent-Disposition: form-data; name=\"dkim\"\n\n{@sendgrid.com : pass}\n--xYzZY\nContent-Disposition: form-data; name=\"email\"\n\nMIME-Version: 1.0\nReceived: by 0.0.0.0 with HTTP; Mon, 15 Aug 2016 13:47:21 -0700 (PDT)\nFrom: Example User <test@example.com>\nDate: Mon, 15 Aug 2016 13:47:21 -0700\nSubject: Inbound Parse Test Raw Data with Attachment\nTo: inbound@inbound.inbound.com\nContent-Type: multipart/mixed; boundary=001a1140ffb6f4fc63053a2257e2\n\n--001a1140ffb6f4fc63053a2257e2\nContent-Type: multipart/alternative; boundary=001a1140ffb6f4fc5f053a2257e0\n\n--001a1140ffb6f4fc5f053a2257e0\nContent-Type: text/plain; charset=UTF-8\n\nHello Twilio SendGrid!\n\n--001a1140ffb6f4fc5f053a2257e0\nContent-Type: text/html; charset=UTF-8\nContent-Transfer-Encoding: quoted-printable\n\n<html><body><strong>Hello Twilio SendGrid!</body></html>\n\n--001a1140ffb6f4fc5f053a2257e0--\n\n--001a1140ffb6f4fc63053a2257e2\nContent-Type: image/jpeg; name=\"TwilioSendGrid.jpg\"\nContent-Disposition: attachment; filename=\"TwilioSendGrid.jpg\"\nContent-Transfer-Encoding: base64\nX-Attachment-Id: f_irwihell0\n\n/9j/4AAQSkZJRgABAQABLAEsAAD/4QDKRXhpZgAATU0AKgAAAAgABwESAAMA\nAAABAAEAAAEaAAUAAAABAAAAYgEbAAUAAAABAAAAagEoAAMAAAABAAIAAAEx\nAAIAAAARAAAAcgEyAAIAAAAUAAAAhIdpAAQAAAABAAAAmAAAAAAAAAEsAAAA\nAQAAASwAAAABUGl4ZWxtYXRvciAzLjQuNAAAMjAxNjowODoxMSAxNjowODo1\nNwAAA6ABAAMAAAABAAEAAKACAAQAAAABAAACEqADAAQAAAABAAACFQAAAAD/\n4Qn2aHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVn\naW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4\nbXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAg\nQ29yZSA1LjQuMCI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53\nMy5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3Jp\ncHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2Jl\nLmNvbS94YXAvMS4wLyIgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9l\nbGVtZW50cy8xLjEvIiB4bXA6TW9kaWZ5RGF0ZT0iMjAxNi0wOC0xMVQxNjow\nODo1NyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBJbWFnZVJlYWR5Ij4gPGRj\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid Client with Proxy and Custom HTTP Settings\nDESCRIPTION: Example demonstrating how to create a custom SendGrid client with proxy configuration, request timeout, and TLS settings. This shows advanced configuration options for the SendGrid HTTP client.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/helpers/inbound/sample_data/default_data_with_attachments.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/sendgrid/sendgrid-go\"\n\t\"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n\tfrom := mail.NewEmail(\"Example User\", \"test@example.com\")\n\tsubject := \"Sending with SendGrid is Fun\"\n\tto := mail.NewEmail(\"Example User\", \"test@example.com\")\n\tplainTextContent := \"and easy to do anywhere, even with Go\"\n\thtmlContent := \"<strong>and easy to do anywhere, even with Go</strong>\"\n\tmessage := mail.NewSingleEmail(from, subject, to, plainTextContent, htmlContent)\n\n\t// Create a custom HTTP client\n\tproxyURL, err := url.Parse(\"http://proxy-server:1234\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\ttransport := &http.Transport{\n\t\tProxy: http.ProxyURL(proxyURL),\n\t\t// The SendGrid API now requires TLS v1.2 or higher\n\t\tTLSClientConfig: &tls.Config{MinVersion: tls.VersionTLS12},\n\t}\n\n\tclient := &http.Client{\n\t\tHTTPClient: &http.Client{\n\t\t\tTransport: transport,\n\t\t\tTimeout:   time.Second * 10,\n\t\t},\n\t}\n\n\trequest := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n\trequest.Method = \"POST\"\n\tvar Body = mail.GetRequestBody(message)\n\trequest.Body = Body\n\tresponse, err := client.API(request)\n\tif err != nil {\n\t\tlog.Println(err)\n\t} else {\n\t\tfmt.Println(response.StatusCode)\n\t\tfmt.Println(response.Body)\n\t\tfmt.Println(response.Headers)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: SendGrid Inbound Parse Email Headers\nDESCRIPTION: Sample headers and metadata from an inbound parsed email, including sender information, recipient, subject, and SPF validation status.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/helpers/inbound/sample_data/raw_data_with_attachments.txt#2025-04-22_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\nContent-Disposition: form-data; name=\"to\"\n\ninbound@inbound.inbound.com\n--xYzZY\nContent-Disposition: form-data; name=\"from\"\n\nExample User <test@example.com>\n--xYzZY\nContent-Disposition: form-data; name=\"sender_ip\"\n\n0.0.0.0\n--xYzZY\nContent-Disposition: form-data; name=\"envelope\"\n\n{\"to\":[\"inbound@inbound.inbound.com\"],\"from\":\"test@example.com\"}\n--xYzZY\nContent-Disposition: form-data; name=\"subject\"\n\nRaw Payload\n--xYzZY\nContent-Disposition: form-data; name=\"charsets\"\n\n{\"to\":\"UTF-8\",\"subject\":\"UTF-8\",\"from\":\"UTF-8\"}\n--xYzZY\nContent-Disposition: form-data; name=\"SPF\"\n\npass\n```\n\n----------------------------------------\n\nTITLE: Multipart Form Data Structure for SendGrid Inbound Parse\nDESCRIPTION: A complete example of the multipart form data structure used for testing SendGrid's inbound email parsing. This format includes email headers, content parts, envelope information, and various email metadata fields that SendGrid's parsing service would process.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/helpers/inbound/sample_data/default_data.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--xYzZY\nContent-Disposition: form-data; name=\"headers\"\n\nMIME-Version: 1.0\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 18:10:13 -0700 (PDT)\nFrom: Example User <test@example.com>\nDate: Wed, 10 Aug 2016 18:10:13 -0700\nSubject: Inbound Parse Test Data\nTo: inbound@inbound.example.com\nContent-Type: multipart/alternative; boundary=001a113df448cad2d00539c16e89\n\n--xYzZY\nContent-Disposition: form-data; name=\"dkim\"\n\n{@sendgrid.com : pass}\n--xYzZY\nContent-Disposition: form-data; name=\"to\"\n\ninbound@inbound.example.com\n--xYzZY\nContent-Disposition: form-data; name=\"html\"\n\n<html><body><strong>Hello Twilio SendGrid!</body></html>\n\n--xYzZY\nContent-Disposition: form-data; name=\"from\"\n\nExample User <test@example.com>\n--xYzZY\nContent-Disposition: form-data; name=\"text\"\n\nHello Twilio SendGrid!\n\n--xYzZY\nContent-Disposition: form-data; name=\"sender_ip\"\n\n0.0.0.0\n--xYzZY\nContent-Disposition: form-data; name=\"envelope\"\n\n{\"to\":[\"inbound@inbound.example.com\"],\"from\":\"test@example.com\"}\n--xYzZY\nContent-Disposition: form-data; name=\"attachments\"\n\n0\n--xYzZY\nContent-Disposition: form-data; name=\"subject\"\n\nTesting non-raw\n--xYzZY\nContent-Disposition: form-data; name=\"charsets\"\n\n{\"to\":\"UTF-8\",\"html\":\"UTF-8\",\"subject\":\"UTF-8\",\"from\":\"UTF-8\",\"text\":\"UTF-8\"}\n--xYzZY\nContent-Disposition: form-data; name=\"SPF\"\n\npass\n--xYzZY--\n```\n\n----------------------------------------\n\nTITLE: Multipart Form-data Example for SendGrid Inbound Parse\nDESCRIPTION: Complete example of a multipart form-data payload sent by SendGrid's Inbound Parse webhook. This includes various parts like DKIM status, email content (with plain text and HTML versions), recipient, sender, IP address, envelope data, subject, character encodings, and SPF status.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/helpers/inbound/sample_data/raw_data.txt#2025-04-22_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n--xYzZY\nContent-Disposition: form-data; name=\"dkim\"\n\n{@sendgrid.com : pass}\n--xYzZY\nContent-Disposition: form-data; name=\"email\"\n\nMIME-Version: 1.0\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\nFrom: Example User <test@example.com>\nDate: Wed, 10 Aug 2016 14:44:21 -0700\nSubject: Inbound Parse Test Raw Data\nTo: inbound@inbound.inbound.com\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\n\n--001a113ee97c89842f0539be8e7a\nContent-Type: text/plain; charset=UTF-8\n\nHello Twilio SendGrid!\n\n--001a113ee97c89842f0539be8e7a\nContent-Type: text/html; charset=UTF-8\nContent-Transfer-Encoding: quoted-printable\n\n<html><body><strong>Hello Twilio SendGrid!</body></html>\n\n--001a113ee97c89842f0539be8e7a--\n\n--xYzZY\nContent-Disposition: form-data; name=\"to\"\n\ninbound@inbound.inbound.com\n--xYzZY\nContent-Disposition: form-data; name=\"from\"\n\nExample User <test@example.com>\n--xYzZY\nContent-Disposition: form-data; name=\"sender_ip\"\n\n0.0.0.0\n--xYzZY\nContent-Disposition: form-data; name=\"envelope\"\n\n{\"to\":[\"inbound@inbound.inbound.com\"],\"from\":\"test@example.com\"}\n--xYzZY\nContent-Disposition: form-data; name=\"subject\"\n\nTesting with Request.bin\n--xYzZY\nContent-Disposition: form-data; name=\"charsets\"\n\n{\"to\":\"UTF-8\",\"subject\":\"UTF-8\",\"from\":\"UTF-8\"}\n--xYzZY\nContent-Disposition: form-data; name=\"SPF\"\n\npass\n--xYzZY--\n```\n\n----------------------------------------\n\nTITLE: JSON Envelope Data from SendGrid Inbound Parse\nDESCRIPTION: JSON object representing the envelope data of the email, containing the recipient address array and sender email address.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/helpers/inbound/sample_data/raw_data.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"to\":[\"inbound@inbound.inbound.com\"],\"from\":\"test@example.com\"}\n```\n\n----------------------------------------\n\nTITLE: JSON Character Encoding Data from SendGrid Inbound Parse\nDESCRIPTION: JSON object specifying the character encodings used for different parts of the email, including to, subject, and from fields.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/helpers/inbound/sample_data/raw_data.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"to\":\"UTF-8\",\"subject\":\"UTF-8\",\"from\":\"UTF-8\"}\n```\n\n----------------------------------------\n\nTITLE: HTML Email Content from SendGrid Inbound Parse\nDESCRIPTION: HTML version of the email body content that was included in the multipart email. This is the formatted version that would be displayed in email clients supporting HTML.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/helpers/inbound/sample_data/raw_data.txt#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html><body><strong>Hello Twilio SendGrid!</body></html>\n```\n\n----------------------------------------\n\nTITLE: Setting Permanent Twilio Environment Variables on Windows\nDESCRIPTION: Commands to set permanent environment variables for Twilio authentication across all CLI sessions on Windows. Includes both API key/secret and Account SID/Auth Token options.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/twilio-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsetx TWILIO_API_KEY \"YOUR_TWILIO_API_KEY\"\nsetx TWILIO_API_SECRET \"YOUR_TWILIO_API_SECRET\"\n\n: or\n\nsetx TWILIO_ACCOUNT_SID \"YOUR_TWILIO_ACCOUNT_SID\"\nsetx TWILIO_AUTH_TOKEN \"YOUR_TWILIO_AUTH_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Body for SendGrid Legacy Template\nDESCRIPTION: This HTML snippet shows the structure of a legacy template body, including placeholders for personalization (-name-, -city-) and a template variable for the main content (<%body%>).\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/legacy-templates.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <title></title>\n</head>\n<body>\nHello -name-,\n<br /><br/>\nI'm glad you are trying out the template feature!\n<br /><br/>\n<%body%>\n<br /><br/>\nI hope you are having a great day in -city- :)\n<br /><br/>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Twilio Environment Variables on Windows\nDESCRIPTION: Commands to set temporary environment variables for Twilio authentication in the current CLI session on Windows. Includes both API key/secret and Account SID/Auth Token options.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/twilio-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nset TWILIO_API_KEY=YOUR_TWILIO_API_KEY\nset TWILIO_API_SECRET=YOUR_TWILIO_API_SECRET\n\n: or\n\nset TWILIO_ACCOUNT_SID=YOUR_TWILIO_ACCOUNT_SID\nset TWILIO_AUTH_TOKEN=YOUR_TWILIO_AUTH_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Defining Email Subject for SendGrid Legacy Template\nDESCRIPTION: This snippet demonstrates how to specify the email subject using a template variable in SendGrid legacy templates.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/legacy-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<%subject%>\n```\n\n----------------------------------------\n\nTITLE: Running SendGrid Mail Helper Tests\nDESCRIPTION: Changes to the mail helper directory and runs specific tests for the mail helper functionality with verbose output.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/helpers/mail/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd helpers/mail\ngo test -v\n```\n\n----------------------------------------\n\nTITLE: Specifying Template ID for SendGrid Legacy Template\nDESCRIPTION: This snippet shows the template ID that should be replaced with the user's own ID when implementing legacy templates.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/legacy-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n13b8f94f-bcae-4ec6-b752-70d6cb59f932\n```\n\n----------------------------------------\n\nTITLE: Running Tests for All Packages\nDESCRIPTION: Command to run tests for all packages with verbose output.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/helpers/eventwebhook/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./... -v\n```\n\n----------------------------------------\n\nTITLE: Dynamic Template ID for SendGrid in Text Format\nDESCRIPTION: A sample template ID for testing dynamic transactional templates with SendGrid. This ID is used as a reference and should be replaced with the user's own template ID when implementing.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/transactional-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nd-c6dcf1f72bdd4beeb15a9aa6c72fcd2c\n```\n\n----------------------------------------\n\nTITLE: Running Tests for EventWebhook Helper\nDESCRIPTION: Command to run tests specifically for the EventWebhook helper with verbose output. Requires changing to the helper directory first.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/helpers/eventwebhook/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd helpers/eventwebhook\ngo test -v\n```\n\n----------------------------------------\n\nTITLE: Template ID Configuration\nDESCRIPTION: Example template ID for SendGrid transactional template.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/proposal/mail-helper-refactor_2.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n13b8f94f-bcae-4ec6-b752-70d6cb59f932\n```\n\n----------------------------------------\n\nTITLE: Running the SendGrid Go Mail Example\nDESCRIPTION: Executes the example code demonstrating how to use the SendGrid Mail helper in Go. Requires the SENDGRID_API_KEY environment variable to be set.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/helpers/mail/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run examples/helpers/mail/example.go\n```\n\n----------------------------------------\n\nTITLE: Merging upstream changes into your topic branch in bash\nDESCRIPTION: Command to locally merge or rebase the upstream development branch into your topic branch. This ensures your branch is up-to-date with the latest changes from the main project.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/FIRST_TIMERS.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit pull [--rebase] upstream main\n```\n\n----------------------------------------\n\nTITLE: Running All SendGrid Go Tests\nDESCRIPTION: Executes all test cases in the SendGrid Go library with verbose output to verify functionality.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/helpers/mail/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./... -v\n```\n\n----------------------------------------\n\nTITLE: Pushing your topic branch to your fork in bash\nDESCRIPTION: Command to push your topic branch to your fork on GitHub. This makes your changes available remotely and allows you to create a pull request.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/FIRST_TIMERS.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin <topic-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Running the EventWebhook Example in Go\nDESCRIPTION: Command to execute the EventWebhook example file. Requires the SENDGRID_API_KEY environment variable to be set.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/helpers/eventwebhook/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run examples/eventwebhook/eventwebhook.go\n```\n\n----------------------------------------\n\nTITLE: Merging Upstream Changes in SendGrid Go\nDESCRIPTION: Git command to merge or rebase the upstream development branch into the local topic branch.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit pull [--rebase] upstream main\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links for SendGrid Go Attachments\nDESCRIPTION: Simple markdown navigation links directing users to documentation for handling attachments in SendGrid Go, both with and without using the Mail Helper class.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/attachments.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Attachments\n\n* [With Mail Helper Class](attachments-with-mailer-helper.md)\n* [Without Mail Helper Class](attachments-without-mailer-helper.md)\n```\n\n----------------------------------------\n\nTITLE: Formatting PR Title with Type and Description in Markdown\nDESCRIPTION: Shows the expected format for PR titles based on change type. The format includes a type (docs, chore, feat, fix, test, misc), an optional exclamation mark for breaking changes, and a description.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/PULL_REQUEST_TEMPLATE.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n  <type>[!]: <description>\nWhere <type> is one of: docs, chore, feat, fix, test, misc.\nAdd a '!' after the type for breaking changes (e.g. feat!: new breaking feature).\n```\n\n----------------------------------------\n\nTITLE: Initial Environment Setup for Twilio SendGrid Go Library\nDESCRIPTION: Commands to copy the sample environment file to create a local environment configuration file.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env_sample .env\n```\n\n----------------------------------------\n\nTITLE: Example Issue Reference Format in Markdown\nDESCRIPTION: Demonstrates how to properly reference and auto-link issues in the PR description using keywords like Fixes, Closes, or Resolves followed by the issue number.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/PULL_REQUEST_TEMPLATE.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\ne.g.\nFixes #1\nCloses #2\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Twilio SendGrid in Bash\nDESCRIPTION: Commands to set up the SENDGRID_API_KEY environment variable and add it to .gitignore to prevent accidentally committing sensitive information.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"export SENDGRID_API_KEY='YOUR_API_KEY'\" > sendgrid.env\necho \"sendgrid.env\" >> .gitignore\nsource ./sendgrid.env\n```\n\n----------------------------------------\n\nTITLE: Running SendGrid Go Examples\nDESCRIPTION: Command to execute a desired file from the examples directory.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo run <Desired File>\n```\n\n----------------------------------------\n\nTITLE: Setting Twilio Environment Variables on Linux/Mac\nDESCRIPTION: Commands to create and source environment variables for Twilio authentication credentials on Linux/Mac systems. Includes options for both API key/secret and Account SID/Auth Token authentication methods.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/twilio-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"export TWILIO_API_KEY='YOUR_TWILIO_API_KEY'\" > twilio.env\necho \"export TWILIO_API_SECRET='YOUR_TWILIO_API_SECRET'\" >> twilio.env\n```\n\nLANGUAGE: bash\nCODE:\n```\necho \"twilio.env\" >> .gitignore\nsource ./twilio.env\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid API Key Environment Variable\nDESCRIPTION: Steps to set up the SENDGRID_API_KEY environment variable for local development.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho \"export SENDGRID_API_KEY='YOUR_API_KEY'\" > sendgrid.env\necho \"sendgrid.env\" >> .gitignore\nsource ./sendgrid.env\n```\n\n----------------------------------------\n\nTITLE: Setting up SendGrid Go Development Environment\nDESCRIPTION: Instructions for cloning the sendgrid-go repository and setting up the initial development environment.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/sendgrid/sendgrid-go.git\ncd sendgrid-go\n```\n\n----------------------------------------\n\nTITLE: Forking and Cloning SendGrid Go Repository\nDESCRIPTION: Git commands for forking the sendgrid-go repository, cloning it locally, and configuring remotes.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Clone your fork of the repo into the current directory\ngit clone https://github.com/sendgrid/sendgrid-go\n\n# Navigate to the newly cloned directory\ncd sendgrid-go\n\n# Assign the original repo to a remote called \"upstream\"\ngit remote add upstream https://github.com/sendgrid/sendgrid-go\n```\n\n----------------------------------------\n\nTITLE: Updating Local SendGrid Go Repository\nDESCRIPTION: Git commands to update the local repository with the latest changes from upstream.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <dev-branch>\ngit pull upstream <dev-branch>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Feature Branch in SendGrid Go\nDESCRIPTION: Git command to create a new topic branch for feature development or bug fixes.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <topic-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Sending Personalized Email with CC using SendGrid Go SDK\nDESCRIPTION: Demonstrates how to create and send a personalized email with CC using SendGrid's mail helper. The code shows creation of email content, setting up personalization with substitution variables, adding CC recipients, and sending the request through SendGrid's API.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/personalization-sending-single-email-single-recipient-with-cc.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n  \"github.com/sendgrid/sendgrid-go/helpers/mail\"\n)\n\nfunc main() {\n  // create new *SGMailV3\n  m := mail.NewV3Mail()\n\n  from := mail.NewEmail(\"test\", \"test@example.com\")\n  content := mail.NewContent(\"text/html\", \"<p> %fname% : %CustomerID% - Personalizations are awesome!</p>\")\n\n  m.SetFrom(from)\n  m.AddContent(content)\n  \n  // create new *Personalization\n  personalization := mail.NewPersonalization()\n  \n  // populate `personalization` with data\n  to := mail.NewEmail(\"Example User\", \"test1@example.com\")\n  cc1 := mail.NewEmail(\"Example CC\", \"test2@example.com\")\n\n  personalization.AddTos(to)\n  personalization.AddCCs(cc1)\n  personalization.SetSubstitution(\"%fname%\", \"recipient\")\n  personalization.SetSubstitution(\"%CustomerID%\", \"CUSTOMER ID GOES HERE\")\n  personalization.Subject = \"Having fun learning about personalizations?\"\n\n  // add `personalization` to `m`\n  m.AddPersonalizations(personalization)\n\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = mail.GetRequestBody(m)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to SendGrid Go Fork\nDESCRIPTION: Git command to push the local topic branch to the forked repository on GitHub.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin <topic-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Sending Personalized Emails to Multiple Recipients with SendGrid Go\nDESCRIPTION: Shows how to send a single personalized email to multiple recipients using SendGrid's API with custom substitutions. The example demonstrates direct JSON payload construction for the mail/send endpoint without using helper methods.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/use-cases/personalization-without-helper-sending-same-email-to-multiple-recipients.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"os\"\n\n  \"github.com/sendgrid/sendgrid-go\"\n)\n\nfunc main() {\n  request := sendgrid.GetRequest(os.Getenv(\"SENDGRID_API_KEY\"), \"/v3/mail/send\", \"https://api.sendgrid.com\")\n  request.Method = \"POST\"\n  request.Body = []byte(`{\n  \"personalizations\": [{\n      \"to\": [{\n          \"email\": \"recipient1@example.com\"\n      }, {\n          \"email\": \"recipient2@example.com\"\n      }, {\n          \"email\": \"recipient3@example.com\"\n      }],\n      \"substitutions\": {\n          \"%fname%\": \"recipient\",\n          \"%CustomerID%\": \"CUSTOMER ID GOES HERE\"\n      },\n      \"subject\": \"YOUR SUBJECT LINE GOES HERE\"\n  }],\n  \"from\": {\n    \"email\": \"test@example.com\"\n  },\n  \"content\": [\n      {\n          \"type\": \"text/html\",\n          \"value\": \"<p> %fname% : %CustomerID% - Personalizations are awesome!</p>\"\n      }\n  ]\n  }`)\n  response, err := sendgrid.API(request)\n  if err != nil {\n    log.Println(err)\n  } else {\n    fmt.Println(response.StatusCode)\n    fmt.Println(response.Body)\n    fmt.Println(response.Headers)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and setting up the repository for contribution in bash\nDESCRIPTION: Commands to clone your forked repository to your local machine and set up the upstream remote to track the original repository. This allows you to keep your fork synchronized with the main project.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/FIRST_TIMERS.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone your fork of the repo into the current directory\ngit clone https://github.com/your_username/sendgrid-go\n# Navigate to the newly cloned directory\ncd sendgrid-go\n# Assign the original repo to a remote called \"upstream\"\ngit remote add upstream https://github.com/sendgrid/sendgrid-go\n```\n\n----------------------------------------\n\nTITLE: Creating a topic branch for your changes in bash\nDESCRIPTION: Command to create a new branch off the main project development branch to contain your feature, change, or fix. This isolates your changes from the main branch.\nSOURCE: https://github.com/sendgrid/sendgrid-go/blob/main/FIRST_TIMERS.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <topic-branch-name>\n```"
  }
]