[
  {
    "owner": "instructor-ai",
    "repo": "instructor-js",
    "content": "TITLE: Extracting Structured Data with Instructor-js and OpenAI\nDESCRIPTION: Demonstrates how to use instructor-js to extract structured data from text using OpenAI's API and Zod schema validation. The example shows creation of a user schema and extraction of age and name data from a text input.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/index.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Instructor from \"@instructor-ai/instructor\";\nimport OpenAI from \"openai\"\nimport { z } from \"zod\"\n\nconst oai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY ?? undefined,\n  organization: process.env.OPENAI_ORG_ID ?? undefined\n})\n\nconst client = Instructor({\n  client: oai,\n  mode: \"FUNCTIONS\"\n})\n\nconst UserSchema = z.object({\n  // Description will be used in the prompt\n  age: z.number().describe(\"The age of the user\"), \n  name: z.string()\n})\n\n\n// User will be of type z.infer<typeof UserSchema>\nconst user = await client.chat.completions.create({\n  messages: [{ role: \"user\", content: \"Jason Liu is 30 years old\" }],\n  model: \"gpt-3.5-turbo\",\n  response_model: { \n    schema: UserSchema, \n    name: \"User\"\n  }\n})\n\nconsole.log(user)\n// { age: 30, name: \"Jason Liu\" }\n```\n\n----------------------------------------\n\nTITLE: Basic Instructor-js Usage Example\nDESCRIPTION: Demonstrates how to initialize the Instructor client and use it to extract structured data using Zod schema\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Instructor from \"@instructor-ai/instructor\";\nimport OpenAI from \"openai\"\nimport { z } from \"zod\"\n\nconst oai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY ?? undefined,\n  organization: process.env.OPENAI_ORG_ID ?? undefined\n})\n\nconst client = Instructor({\n  client: oai,\n  mode: \"TOOLS\"\n})\n\nconst UserSchema = z.object({\n  // Description will be used in the prompt\n  age: z.number().describe(\"The age of the user\"), \n  name: z.string()\n})\n\n\n// User will be of type z.infer<typeof UserSchema>\nconst user = await client.chat.completions.create({\n  messages: [{ role: \"user\", content: \"Jason Liu is 30 years old\" }],\n  model: \"gpt-3.5-turbo\",\n  response_model: { \n    schema: UserSchema, \n    name: \"User\"\n  }\n})\n\nconsole.log(user)\n// { age: 30, name: \"Jason Liu\" }\n```\n\n----------------------------------------\n\nTITLE: Instructor-js Streaming Example\nDESCRIPTION: Shows how to implement streaming completions for real-time data extraction with partial results\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Instructor from \"@instructor-ai/instructor\"\nimport OpenAI from \"openai\"\nimport { z } from \"zod\"\n\nconst textBlock = `\n  In our recent online meeting, participants from various backgrounds joined to discuss the upcoming tech conference. \n  The names and contact details of the participants were as follows:\n\n  - Name: John Doe, Email: johndoe@email.com, Twitter: @TechGuru44\n  - Name: Jane Smith, Email: janesmith@email.com, Twitter: @DigitalDiva88\n  - Name: Alex Johnson, Email: alexj@email.com, Twitter: @CodeMaster2023\n\n  During the meeting, we agreed on several key points. The conference will be held on March 15th, 2024, at the Grand Tech Arena located at 4521 Innovation Drive. Dr. Emily Johnson, a renowned AI researcher, will be our keynote speaker. The budget for the event is set at $50,000, covering venue costs, speaker fees, and promotional activities. \n\n  Each participant is expected to contribute an article to the conference blog by February 20th. A follow-up meeting is scheduled for January 25th at 3 PM GMT to finalize the agenda and confirm the list of speakers.\n`\n\nasync function extractData() {\n  const ExtractionSchema = z.object({\n    users: z.array(\n      z.object({\n        name: z.string(),\n        handle: z.string(),\n        twitter: z.string()\n      })\n    ).min(3),\n    location: z.string(),\n    budget: z.number()\n  })\n\n  const oai = new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY ?? undefined,\n    organization: process.env.OPENAI_ORG_ID ?? undefined\n  })\n\n  const client = Instructor({\n    client: oai,\n    mode: \"TOOLS\"\n  })\n\n  const extractionStream = await client.chat.completions.create({\n    messages: [{ role: \"user\", content: textBlock }],\n    model: \"gpt-3.5-turbo\",\n    response_model: {\n      schema: ExtractionSchema,\n      name: \"Extraction\"\n    },\n    max_retries: 3,\n    stream: true\n  })\n\n  let extractedData = {}\n  for await (const result of extractionStream) {\n    extractedData = result\n    console.log(\"Partial extraction:\", result)\n  }\n  \n  console.log(\"Final extraction:\", extractedData)\n}\n\nextractData()\n```\n\n----------------------------------------\n\nTITLE: Initializing Instructor with OpenAI Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to import necessary libraries, create an OpenAI client, and initialize the Instructor wrapper to enable the response_model functionality.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/why.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Instructor from \"@instructor-ai/instructor\";\nimport OpenAI from \"openai\"\nimport { z } from \"zod\"\n\n// Create the OpenAI client\nconst oai = new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY ?? undefined,\n    organization: process.env.OPENAI_ORG_ID ?? undefined,\n})\n\n// This enables response_model keyword\n// from client.chat.completions.create\nconst client = Instructor({\n    client: oai,\n    mode: \"FUNCTIONS\"\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Single-Label Text Classification with OpenAI\nDESCRIPTION: Configures the OpenAI client with Instructor.js and implements a classify function that processes text input and returns a classification result using the GPT-3.5-turbo model.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/classification.md#2025-04-17_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst oai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY ?? undefined,\n  organization: process.env.OPENAI_ORG_ID ?? undefined\n})\n\nconst client = Instructor({\n  client: oai,\n  mode: \"FUNCTIONS\"\n})\n\nasync function classify(data: string): Promise<SimpleClassification> {\n  const classification = await client.chat.completions.create({\n    messages: [{ role: \"user\", content: `\"Classify the following text: ${data}` }],\n    model: \"gpt-3.5-turbo\",\n    response_model: { schema: SimpleClassificationSchema },\n    max_retries: 3\n  })\n\n  return classification\n}\n\nconst classification = await classify(\n  \"Hello there I'm a nigerian prince and I want to give you money\"\n)\n\nconsole.log({ classification })\n// { class_label: 'SPAM' }\n```\n\n----------------------------------------\n\nTITLE: Configuring Instructor.js with Tool Calling Mode for OpenAI\nDESCRIPTION: Demonstrates how to set up Instructor.js with an OpenAI client using the recommended TOOLS mode. This configuration provides the most stable approach for structured outputs as functions are being deprecated.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/concepts/patching.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Instructor from \"@instructor-ai/instructor\"\nimport OpenAI from \"openai\"\n\nconst client = Instructor({\n  client: new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY ?? undefined,\n    organization: process.env.OPENAI_ORG_ID ?? undefined\n  }),\n  mode: \"TOOLS\"\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing AI Question Answering with Citation Validation\nDESCRIPTION: Implements a function that queries the OpenAI API with a question and context, then validates the response to ensure all facts are properly cited. It uses Instructor.js for structured outputs and applies dynamic context validation after receiving the initial response.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/validated_citations.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Instructor from \"@/instructor\"\nimport OpenAI from \"openai\"\nimport { z } from \"zod\"\n\nconst oai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY ?? undefined,\n  organization: process.env.OPENAI_ORG_ID ?? undefined\n})\n\nconst client = Instructor({\n  client: oai,\n  mode: \"FUNCTIONS\"\n})\n\nasync function askAI(question: string, context: string): Promise<QuestionAnswerType> {\n  const response = await client.chat.completions.create({\n    model: \"gpt-3.5-turbo-0613\",\n    temperature: 0,\n    response_model: { schema: QuestionAnswer, name: \"Question and Answer\" },\n    messages: [\n      { role: \"system\", content: \"You are a world class algorithm to answer questions with correct and exact citations.\" },\n      { role: \"user\", content: context },\n      { role: \"user\", content: `Question: ${question}` },\n    ],\n  });\n  const QuestionAnswerWithContext = createQuestionAnswerWithContext(context);\n  const parsedResponse = QuestionAnswerWithContext.parse(response);\n\n  return parsedResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Action Item Data Structures with Zod and TypeScript\nDESCRIPTION: Sets up the type definitions and validation schemas for action items, including priorities, subtasks, and dependencies using Zod schema validation.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/action_items.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Instructor from \"@/instructor\"\nimport OpenAI from \"openai\"\nimport { z } from \"zod\"\n\nconst PrioritySchema = z.enum([\"HIGH\", \"MEDIUM\", \"LOW\"]);\n\nconst SubtaskSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n})\n\nconst TicketSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n  description: z.string(),\n  priority: PrioritySchema,\n  assignees: z.array(z.string()),\n  subtasks: z.array(SubtaskSchema).optional(),\n  dependencies: z.array(z.number()).optional()\n})\n\nconst ActionItemsSchema = z.object({\n  items: z.array(TicketSchema)\n})\n\ntype ActionItems = z.infer<typeof ActionItemsSchema>\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in Instructor.js with OpenAI Integration and Zod Schema Validation\nDESCRIPTION: This code snippet demonstrates how to enable debug mode in Instructor.js to view API requests and responses. It sets up an OpenAI client, wraps it with Instructor with debugging enabled, defines a Zod schema for data extraction, and makes a request to extract structured user data from text using OpenAI's function calling capabilities.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/concepts/logging.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst oai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY ?? undefined,\n  organization: process.env.OPENAI_ORG_ID ?? undefined\n})\n\nconst client = Instructor({\n  client: oai,\n  mode: \"TOOLS\",\n  debug: true // <== HERE\n})\n\nconst UserSchema = z.object({\n  // Description will be used in the prompt\n  age: z.number().describe(\"The age of the user\"),\n  name: z.string()\n})\n\n// User will be of type z.infer<typeof UserSchema>\nconst user = await client.chat.completions.create({\n  messages: [{ role: \"user\", content: \"Jason Liu is 30 years old\" }],\n  model: \"gpt-3.5-turbo\",\n  response_model: {\n    schema: UserSchema,\n    name: \"User\"\n  }\n})\n// [Instructor:DEBUG] 2024-03-28T13:42:00.178Z: User making completion call with params:  {\n//   messages: [ { role: 'user', content: 'Jason Liu is 30 years old' } ],\n//   model: 'gpt-3.5-turbo',\n//   stream: false,\n//   tool_choice: { type: 'function', function: { name: 'User' } },\n//   tools: [ { type: 'function', function: [Object] } ]\n// }\n// [Instructor:DEBUG] 2024-03-28T13:42:00.846Z: User Completion validation:  { success: true, data: { age: 30, name: 'Jason Liu' } }\n\nconsole.log(user)\n// { age: 30, name: \"Jason Liu\" }\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Segmentation with OpenAI Function Call and Instructor in TypeScript\nDESCRIPTION: This code demonstrates a complete workflow for segmenting complex search queries into multiple structured sub-queries using Zod schemas and OpenAI Function Call via the Instructor library. It defines search type enumerations, query structures, and includes functions to execute searches in parallel.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/segmenting_search.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Instructor from \"@/instructor\"\nimport OpenAI from \"openai\"\nimport { z } from \"zod\"\n\nconst oai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY ?? undefined,\n  organization: process.env.OPENAI_ORG_ID ?? undefined\n})\n\nconst client = Instructor({\n  client: oai,\n  mode: \"FUNCTIONS\"\n})\n\nconst SearchTypeSchema = z\n  .enum([\"VIDEO\", \"EMAIL\"])\n  .describe(\"Enumeration representing the types of searchs that can be performed\")\n\nconst SearchSchema = z\n  .object({\n    title: z.string().describe(\"Title of the request\"),\n    query: z.string().describe(\"Query to search fro relevant content\"),\n    type: SearchTypeSchema.describe(\"Type of search\")\n  })\n  .describe(\n    \"Object representing a single search query which contains title, query, and the search type\"\n  )\n\ntype Search = z.infer<typeof SearchSchema>\n\nasync function executeSearch(search: Search) {\n  setTimeout(\n    () => console.log(`Searching for ${search.title} with ${search.query} using ${search.type}`),\n    1000\n  )\n}\n\nconst MultiSearchSchema = z\n  .object({\n    searches: z.array(SearchSchema).describe(\"List of searches\")\n  })\n  .describe(\"Object representing multiple search queries\")\n\ntype MultiSearch = z.infer<typeof MultiSearchSchema>\n\nasync function executeMultiSearch(multiSearch: MultiSearch) {\n  return Promise.all(\n    multiSearch.searches.map((search: Search) => {\n      executeSearch(search)\n    })\n  )\n}\n\n/**\n * Convert a string into multiple search queries\n */\nasync function segment(data: string): Promise<MultiSearch> {\n  return await client.chat.completions.create({\n    messages: [\n      {\n        role: \"system\",\n        content: \"You are a helpful assistant.\"\n      },\n      {\n        role: \"user\",\n        content: `Consider the data below:\\n${data} and segment it into multiple search queries`\n      }\n    ],\n    model: \"gpt-4-1106-preview\",\n    response_model: { schema: MultiSearchSchema, name: \"Multi Search\" },\n    max_tokens: 1000,\n    temperature: 0.1\n  })\n}\n\nconst queries = await segment(\n  \"Please send me the video from last week about the investment case study and also documents about your GPDR policy\"\n)\nexecuteMultiSearch(queries)\n\n// >>> Searching for `Video` with query `investment case study` using `SearchType.VIDEO`\n// >>> Searching for `Documents` with query `GPDR policy` using `SearchType.EMAIL`\n```\n\n----------------------------------------\n\nTITLE: Implementing Self-Correcting Validation with Instructor and Zod in TypeScript\nDESCRIPTION: This code demonstrates how to use Instructor with a custom Zod schema that includes refinements for data validation, enabling self-correction through multiple retries.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/why.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Instructor from \"@instructor-ai/instructor\";\nimport OpenAI from \"openai\"\nimport { z } from \"zod\"\n\nconst oai = new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY ?? undefined,\n    organization: process.env.OPENAI_ORG_ID ?? undefined,\n})\n\n// Apply the patch to the OpenAI client\nconst client = Instructor({\n    client: oai,\n    mode: \"FUNCTIONS\"\n})\n\n// Use refine to ensure the name is uppercase\nconst UserDetails = z.object({\n    age: z.number(),\n    name: z.string().refine((v) => v.toUpperCase() === v, {\n        message: \"Name must be in uppercase.\",\n    }\n})\n\nconst user = await client.chat.completions.create({\n    messages: [{ role: \"user\", content: \"Extract jason is 30 years old\" }],\n    model: \"gpt-3.5-turbo\",\n    response_model: { schema: UserDetails },\n    max_retries: 2,\n})\n\nconsole.log(user.name)\n// JASON\n```\n\n----------------------------------------\n\nTITLE: Creating Zod Schema with Descriptions for Prompt Engineering\nDESCRIPTION: Shows how to add descriptions to Zod schema fields and objects, which can be used as prompts in the instructor-js project.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/concepts/schema.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst userDetails = z.object({\n  name: z.string().description('Your full name'),\n  age: z.number(),\n}).description('Fully extracted user detail');\n```\n\n----------------------------------------\n\nTITLE: Creating Query Plan with OpenAI Function Calls in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a query plan using the OpenAI API. It initializes the OpenAI client, sets up the Instructor wrapper, and defines a function to generate a query plan based on a given question.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/query_decomposition.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst oai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY ?? undefined,\n  organization: process.env.OPENAI_ORG_ID ?? undefined\n})\n\nconst client = Instructor({\n  client: oai,\n  mode: \"FUNCTIONS\",\n})\n\nconst createQueryPlan = async (question: string): Promise<QueryPlan | undefined> => {\n  const queryPlan: QueryPlan = await client.chat.completions.create({\n    messages: [\n      {\n        \"role\": \"system\",\n        \"content\": \"You are a world class query planning algorithm capable of breaking apart questions into its dependency queries such that the answers can be used to inform the parent question. Do not answer the questions, simply provide a correct compute graph with good specific questions to ask and relevant dependencies. Before you call the function, think step-by-step to get a better understanding of the problem.\",\n      },\n      {\n        \"role\": \"user\",\n        \"content\": `Consider: ${question}\\nGenerate the correct query plan.`,\n      },\n    ],\n    model: \"gpt-4o\",\n    response_model: { schema: QueryPlanSchema },\n    max_tokens: 1000,\n    temperature: 0.0,\n    max_retries: 2,\n  })\n\n  return queryPlan || undefined\n}\n\nconst queryPlan = await createQueryPlan(\n  \"What is the difference in populations of Canada and the Jason's home country?\"\n)\n\nconsole.log({ queryPlan: JSON.stringify(queryPlan) })\n```\n\n----------------------------------------\n\nTITLE: Streaming Conference Information Extraction with Instructor.js and OpenAI\nDESCRIPTION: This TypeScript snippet demonstrates how to use Instructor.js with OpenAI to stream structured extraction of conference information. It defines a schema for extraction, sets up the OpenAI client, and uses an async generator to process and display the extracted data incrementally.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/concepts/streaming.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Instructor from \"@/instructor\"\nimport OpenAI from \"openai\"\nimport { z } from \"zod\"\n\nconst ExtractionValuesSchema = z.object({\n  users: z\n    .array(\n      z.object({\n        name: z.string(),\n        email: z.string(),\n        twitter: z.string()\n      })\n    )\n    .min(5),\n  date: z.string(),\n  location: z.string(),\n  budget: z.number(),\n  deadline: z.string().min(1)\n})\n\nconst oai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY ?? undefined,\n  organization: process.env.OPENAI_ORG_ID ?? undefined\n})\n\nconst client = Instructor({\n  client: oai,\n  mode: \"TOOLS\"\n})\n\n\nconst textBlock = `\nIn our recent online meeting, participants from various backgrounds joined to discuss the upcoming tech conference.\nThe names and contact details of the participants were as follows:\n\n- Name: John Doe, Email: johndoe@email.com, Twitter: @TechGuru44\n- Name: Jane Smith, Email: janesmith@email.com, Twitter: @DigitalDiva88\n- Name: Alex Johnson, Email: alexj@email.com, Twitter: @CodeMaster2023\n- Name: Emily Clark, Email: emilyc@email.com, Twitter: @InnovateQueen\n...\n\nDuring the meeting, we agreed on several key points. The conference will be held on March 15th, 2024,\nat the Grand Tech Arena located at 4521 Innovation Drive. Dr. Emily Johnson, a renowned AI researcher, will be our keynote speaker.\n\nThe budget for the event is set at $50,000, covering venue costs, speaker fees, and promotional activities.\nEach participant is expected to contribute an article to the conference blog by February 20th.\n\nA follow-up meeting is scheduled for January 25th at 3 PM GMT to finalize the agenda and confirm the list of speakers.\n`\n\nconst extractionStream = await client.chat.completions.create({\n  messages: [{ role: \"user\", content: textBlock }],\n  model: \"gpt-4o\",\n  response_model: {\n    schema: ExtractionValuesSchema,\n    name: \"value extraction\"\n  },\n  stream: true,\n  seed: 1\n})\n\nfor await (const result of extractionStream) {\n  try {\n    console.clear()\n    console.log(result)\n  } catch (e) {\n    console.log(e)\n    break\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Structured Data Using Instructor and Zod in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Instructor-enhanced OpenAI client to send a prompt and extract structured data according to a Zod schema.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/why.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await client.chat.completions.create({\n    messages: [{ role: \"user\", content: \"Jason Liu is 30 years old\" }],\n    model: \"gpt-3.5-turbo\",\n    response_model: { schema: UserSchema }\n})\n\nconsole.log(user)\n// { age: 30, name: \"Jason Liu\" }\n```\n\n----------------------------------------\n\nTITLE: Creating Fact Schema with Context Validation in TypeScript\nDESCRIPTION: Defines a function that creates a Zod schema for a fact with context-dependent validation. It ensures that each substring quote actually exists in the provided context by using a regex search and transforms the quotes to match exactly what appears in the context.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/validated_citations.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Instructor from \"@/instructor\"\nimport { z } from \"zod\"\n\n\nfunction createFactWithContext(dynamicContext: string) {\n  return z.object({\n    statement: z.string(),\n    substring_quote: z.array(z.string()).transform((quotes) => {\n      return quotes.flatMap((quote) => {\n        const spans = getSpans(quote, dynamicContext);\n        return spans.map(span => dynamicContext.substring(span[0], span[1]));\n      });\n    })\n  });\n}\n\nfunction getSpans(quote: string, context: string): Array<[number, number]> {\n  const matches: any = [];\n  // Example regex search for simplicity; adjust according to your actual implementation\n  const regex = new RegExp(quote, 'g');\n  let match;\n\n  while ((match = regex.exec(context)) !== null) {\n    matches.push([match.index, regex.lastIndex]);\n  }\n  return matches.length > 0 ? matches : [];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity and Document Extraction Schemas with Zod in TypeScript\nDESCRIPTION: This code defines TypeScript schemas using Zod for entity extraction and validation. It creates an EntitySchema with properties for identification, string values, properties, and dependencies, as well as a DocumentExtractionSchema that contains an array of entities. The schemas include descriptive annotations for each field.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/examples/resolving-complex-entitities/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst EntitySchema = z.object({\n  id: z\n    .number()\n    .describe(\n      \"Unique identifier for the entity, used for deduplication, design a scheme allows multiple entities\"\n    ),\n  subquote_string: z\n    .array(z.string())\n    .describe(\n      \"Correctly resolved value of the entity, if the entity is a reference to another entity, this should be the id of the referenced entity, include a few more words before and after the value to allow for some context to be used in the resolution\"\n    ),\n  entity_title: z.string(),\n  properties: z.array(PropertySchema).describe(\"List of properties of the entity\"),\n  dependencies: z\n    .array(z.number())\n    .describe(\"List of entity ids that this entity depends or relies on to resolve it\")\n})\n\nconst DocumentExtractionSchema = z.object({\n  entities: z\n    .array(EntitySchema)\n    .describe(\n      \"Body of the answer, each fact should be its separate object with a body and a list of sources\"\n    )\n})\n\ntype DocumentExtraction = z.infer<typeof DocumentExtractionSchema>\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAI Moderation with Instructor and Zod\nDESCRIPTION: This code snippet demonstrates how to validate content using OpenAI's Moderation endpoint with Instructor.js. It initializes an OpenAI client, extends it with Instructor, and defines a Zod schema with a superRefine validation that checks for harmful content against OpenAI's usage policies.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/content_moderation.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Instructor from \"@/instructor\";\nimport OpenAI from \"openai\";\nimport { z } from \"zod\";\nimport { moderationValidator } from \"@/dsl/validator\"\n\nconst oai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY ?? undefined,\n  organization: process.env.OPENAI_ORG_ID ?? undefined,\n});\n\nconst client = Instructor({\n  client: oai,\n  mode: \"FUNCTIONS\",\n});\n\nconst Response = z.object({\n  message: z.string().superRefine(moderationValidator(client))\n})\n\ntry {\n  await Response.parseAsync({ message: \"I want to make them suffer the consequences\" })\n} catch (error) {\n  console.log(error)\n}\n// ZodError: [\n//   {\n//     \"code\": \"custom\",\n//     \"message\": \"Moderation error, `I want to make them suffer the consequences` was flagged for violence\",\n//     \"path\": [\n//       \"message\"\n//     ]\n//   }\n// ]\n\ntry {\n  await Response.parseAsync({ message: \"I want to hurt myself.\" })\n} catch (error) {\n  console.log(error)\n}\n//   ZodError: [\n//   {\n//       \"code\": \"custom\",\n//       \"message\": \"Moderation error, `I want to hurt myself.` was flagged for self-harm, self-harm/intent\",\n//       \"path\": [\n//       \"message\"\n//       ]\n//   }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Label Text Classification with OpenAI\nDESCRIPTION: Implements a multi_classify function that processes support ticket text and returns multiple applicable labels using the GPT-3.5-turbo model and the previously defined schema.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/classification.md#2025-04-17_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nasync function multi_classify(data: string): Promise<MultiClassification> {\n  const classification = await client.chat.completions.create({\n    messages: [{ role: \"user\", content: `\"Classify the following support ticket: ${data}` }],\n    model: \"gpt-3.5-turbo\",\n    response_model: { schema: MultiClassificationSchema },\n    max_retries: 3\n  })\n  return classification \n}\n\nconst classification = await multi_classify(\n  \"My account is locked and I can't access my billing info. Phone is also broken\"\n)\n\nconsole.log({ classification })\n// { predicted_labels: [ 'billing', 'hardware' ] }\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Item Extraction with OpenAI API\nDESCRIPTION: Implements the core extraction function that processes meeting transcript text using OpenAI's API to generate structured action items.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/action_items.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst oai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY ?? undefined,\n  organization: process.env.OPENAI_ORG_ID ?? undefined\n})\n\nconst client = Instructor({\n  client: oai,\n  mode: \"FUNCTIONS\",\n})\n\nconst extractActionItems = async (data: string): Promise<ActionItems | undefined> => {\n  const actionItems: ActionItems = await client.chat.completions.create({\n    messages: [\n      {\n        \"role\": \"system\",\n        \"content\": \"The following is a transcript of a meeting...\",\n      },\n      {\n        \"role\": \"user\",\n        \"content\": `Create the action items for the following transcript: ${data}`,\n      },\n    ],\n    model: \"gpt-4o\",\n    response_model: { schema: ActionItemsSchema },\n    max_tokens: 1000,\n    temperature: 0.0,\n    max_retries: 2,\n  })\n\n  return actionItems || undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Self-Correction with Retries\nDESCRIPTION: Enhanced implementation that adds a max_retries parameter to automatically attempt self-correction when validation errors occur, allowing the model to learn from error messages.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/self_correction.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await instructor.chat.completions.create({\n    model: \"gpt-4o\",\n    max_retries: 2,\n    response_model: { schema: QuestionAnswer, name: \"Question and Answer\" },\n    messages: [\n      {\n        role: \"system\",\n        content:\n          \"You are a system that answers questions based on the context. answer exactly what the question asks using the context.\"\n      },\n      {\n        role: \"user\",\n        content: `using the context: ${context}\\n\\nAnswer the following question: ${question}`\n      }\n    ]\n  })\n} catch (e as ZodError[]) {\n  console.error(e[0].message)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Zod Schemas\nDESCRIPTION: Shows how to create complex, nested schemas using Zod for more detailed data structures.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/concepts/schema.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = z.object({\n  name: z.string(),\n  address: z.object({\n    street: z.string(),\n    city: z.string(),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Query Plan Structures with Zod in TypeScript\nDESCRIPTION: This snippet defines the necessary models to represent the query plan and queries using Zod schemas. It includes definitions for QueryType, Query, and QueryPlan.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/query_decomposition.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Instructor from \"@/instructor\"\nimport OpenAI from \"openai\"\nimport { z } from \"zod\"\n\nconst QueryTypeSchema = z.enum([\"SINGLE\", \"MERGE_MULTIPLE_RESPONSES\"]);\n\nconst QuerySchema = z.object({\n  id: z.number(),\n  question: z.string(),\n  dependencies: z.array(z.number()).optional(),\n  node_type: QueryTypeSchema.default(\"SINGLE\")\n})\n\nconst QueryPlanSchema = z.object({\n  query_graph: z.array(QuerySchema)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Modular Chain of Thought with Zod in TypeScript\nDESCRIPTION: Demonstrates how to leverage Zod's flexibility to create modular 'chain of thought' structures that enhance data quality. This pattern allows for sequential reasoning within schema objects.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/tips/prompting.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from 'zod';\n\nconst Role = z.object({\n  chainOfThought: z.string().describe(\"Sequential reasoning to determine the correct title\"),\n  title: z.string(),\n});\n\nconst UserDetail = z.object({\n  age: z.number(),\n  name: z.string(),\n  role: Role,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schema in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a Zod schema for structured data in TypeScript. It's a crucial step in using the instructor library to create type-safe interactions with language models.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/concepts/philosophy.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst StructuredData = z.object({})\n```\n\n----------------------------------------\n\nTITLE: Implementing Structured Output with Anyscale and Instructor.js\nDESCRIPTION: Demonstrates how to set up and use Instructor.js with Anyscale's API to generate structured outputs using Zod schemas. The example shows how to define schemas, configure the OpenAI client with Anyscale's endpoint, and create a chat completion that returns structured data about Harry Potter.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/blog/posts/anyscale.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Instructor from \"@/instructor\"\nimport OpenAI from \"openai\"\nimport { z } from \"zod\"\n\nconst property = z.object({\n  name: z.string(),\n  value: z.string()\n}).describe(\"A property defined by a name and value\")\n\nconst UserSchema = z.object({\n  age: z.number(),\n  name: z.string(),\n  properties: z.array(property)\n})\n\nconst oai = new OpenAI({\n  baseURL: \"https://api.endpoints.anyscale.com/v1\",\n  apiKey: process.env.ANYSCALE_API_KEY ?? undefined,\n})\n\nconst client = Instructor({\n  client: oai,\n  mode: \"JSON_SCHEMA\"\n})\n\nconst user = await client.chat.completions.create({\n  messages: [{ role: \"user\", content: \"Harry Potter\" }],\n  model: \"mistralai/Mixtral-8x7B-Instruct-v0.1\",\n  response_model: { schema: UserSchema },\n  max_retries: 3\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Structures for Single-Label Classification in TypeScript\nDESCRIPTION: Sets up the necessary imports, enum for classification labels (SPAM/NOT_SPAM), and a Zod schema for validating the classification output.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/classification.md#2025-04-17_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport Instructor from \"@/instructor\"\nimport OpenAI from \"openai\"\nimport { z } from \"zod\"\n\nenum CLASSIFICATION_LABELS {\n  \"SPAM\" = \"SPAM\",\n  \"NOT_SPAM\" = \"NOT_SPAM\"\n}\n\nconst SimpleClassificationSchema = z.object({\n  class_label: z.nativeEnum(CLASSIFICATION_LABELS)\n})\n\ntype SimpleClassification = z.infer<typeof SimpleClassificationSchema>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Structured Outputs with Together API and Zod Validation in TypeScript\nDESCRIPTION: This code demonstrates how to use the instructor-js library to get structured outputs from Together's Mixtral model. It defines a Zod schema for user data, patches the OpenAI client to work with Together's API, and processes a simple prompt to return validated structured data about Harry Potter.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/blog/posts/together.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Instructor from \"@instructor-ai/instructor\"\nimport OpenAI from \"openai\"\nimport { z } from \"zod\"\n\nconst property = z\n  .object({\n    name: z.string(),\n    value: z.string(),\n  })\n  .describe(\"A property defined by a name and value\");\n\nconst UserSchema = z.object({\n  age: z.number(),\n  name: z.string(),\n  properties: z.array(property),\n})\n\nconst oai = new OpenAI({\n  baseURL: \"https://api.together.xyz\",\n  apiKey: process.env.TOGETHER_API_KEY ?? undefined,\n})\n\nconst client = Instructor({\n  client: oai,\n  mode: \"JSON_SCHEMA\",\n})\n\nconst user = await client.chat.completions.create({\n  messages: [{ role: \"user\", content: \"Harry Potter\" }],\n  model: \"mistralai/Mixtral-8x7B-Instruct-v0.1\",\n  response_model: { schema: UserSchema, name: \"UserSchema\" },\n  max_retries: 3,\n})\n\nconsole.log(user);\n/**\n {\n  age: 17,\n  name: \"Harry Potter\",\n  properties: [\n    {\n      name: \"House\",\n      value: \"Gryffindor\",\n    }, {\n      name: \"Wand\",\n      value: \"Holly and Phoenix feather\",\n    }\n  ],\n}\n **/\n\n```\n\n----------------------------------------\n\nTITLE: Defining Structures for Multi-Label Classification in TypeScript\nDESCRIPTION: Creates an enum for multiple classification labels (BILLING, GENERAL_QUERY, HARDWARE) and a Zod schema that validates an array of predicted labels for multi-label classification.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/classification.md#2025-04-17_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nenum MULTI_CLASSIFICATION_LABELS {\n  \"BILLING\" = \"billing\",\n  \"GENERAL_QUERY\" = \"general_query\",\n  \"HARDWARE\" = \"hardware\"\n}\n\nconst MultiClassificationSchema = z.object({\n  predicted_labels: z.array(z.nativeEnum(MULTI_CLASSIFICATION_LABELS))\n})\n\ntype MultiClassification = z.infer<typeof MultiClassificationSchema>\n```\n\n----------------------------------------\n\nTITLE: Example Query Plan Output in JSON\nDESCRIPTION: This snippet shows an example output of the query plan generated by the createQueryPlan function. It demonstrates how a complex question is broken down into smaller, dependent sub-questions.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/query_decomposition.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query_graph\": [\n    {\n      \"id\": 1,\n      \"question\": \"What is the population of Canada?\",\n      \"dependencies\": [],\n      \"node_type\": \"SINGLE\"\n    },\n    {\n      \"id\": 2,\n      \"question\": \"What is the name of Jason's home country?\",\n      \"dependencies\": [],\n      \"node_type\": \"SINGLE\"\n    },\n    {\n      \"id\": 3,\n      \"question\": \"What is the population of {country}?\",\n      \"dependencies\": [2],\n      \"node_type\": \"SINGLE\"\n    },\n    {\n      \"id\": 4,\n      \"question\": \"What is the difference in population between Canada and {country}?\",\n      \"dependencies\": [1, 3],\n      \"node_type\": \"MERGE_MULTIPLE_RESPONSES\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining QuestionAnswer Schema with Zod in TypeScript\nDESCRIPTION: Creates a Zod schema for a question-answer structure. The schema includes the original question and an array of answer facts, each with a statement and supporting substring quotes from the context.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/validated_citations.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst QuestionAnswer = z.object({\n  question: z.string(),\n  answer: z.array(z.object({\n    statement: z.string(),\n    substring_quote: z.array(z.string()), // Basic structure without dynamic context validation\n  }))\n});\ntype QuestionAnswerType = z.infer<typeof QuestionAnswer>\n```\n\n----------------------------------------\n\nTITLE: Integrating Instructor with Anyscale Provider in TypeScript\nDESCRIPTION: This snippet demonstrates how to use Instructor with the Anyscale provider. It sets up an OpenAI client with Anyscale's base URL, initializes Instructor, and extracts user information using a defined Zod schema.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Instructor from \"@instructor-ai/instructor\"\nimport OpenAI from \"openai\"\nimport { z } from \"zod\"\n\nconst UserSchema = z.object({\n  age: z.number(),\n  name: z.string().refine(name => name.includes(\" \"), {\n    message: \"Name must contain a space\"\n  })\n})\n\nasync function extractUser() {\n  const client = new OpenAI({\n    baseURL: \"https://api.endpoints.anyscale.com/v1\",\n    apiKey: process.env.ANYSCALE_API_KEY\n  })\n\n  const instructor = Instructor({\n    client: client,\n    mode: \"TOOLS\"\n  })\n\n  const user = await instructor.chat.completions.create({\n    messages: [{ role: \"user\", content: \"Jason Liu is 30 years old\" }],\n    model: \"mistralai/Mixtral-8x7B-Instruct-v0.1\",\n    response_model: {\n      schema: UserSchema,\n      name: \"User\"\n    },\n    max_retries: 4\n  })\n\n  return user\n}\n\nconst anyscaleUser = await extractUser()\nconsole.log(\"Anyscale user:\", anyscaleUser)\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Zod Schema in TypeScript\nDESCRIPTION: Demonstrates the basic usage of Zod to create a simple schema with string and number fields.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/concepts/schema.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from 'zod';\n\nconst schema = z.object({\n  name: z.string(),\n  age: z.number(),\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Instructor with Together Provider in TypeScript\nDESCRIPTION: This snippet shows how to use Instructor with the Together provider. It configures an OpenAI client with Together's base URL, sets up Instructor, and extracts user information using a predefined Zod schema.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Instructor from \"@instructor-ai/instructor\"\nimport OpenAI from \"openai\"\nimport { z } from \"zod\"\n\nconst UserSchema = z.object({\n  age: z.number(),\n  name: z.string().refine(name => name.includes(\" \"), {\n    message: \"Name must contain a space\"\n  })\n})\n\nasync function extractUser() {\n  const client = new OpenAI({\n    baseURL: \"https://api.together.xyz/v1\",\n    apiKey: process.env.TOGETHER_API_KEY\n  })\n\n  const instructor = Instructor({\n    client: client,\n    mode: \"TOOLS\"\n  })\n\n  const user = await instructor.chat.completions.create({\n    messages: [{ role: \"user\", content: \"Jason Liu is 30 years old\" }],\n    model: \"mistralai/Mixtral-8x7B-Instruct-v0.1\",\n    response_model: {\n      schema: UserSchema,\n      name: \"User\"\n    },\n    max_retries: 4\n  })\n\n  return user\n}\n\nconst togetherUser = await extractUser()\nconsole.log(\"Together user:\", togetherUser)\n```\n\n----------------------------------------\n\nTITLE: Extracting Structured Data with TypeScript Function\nDESCRIPTION: This code snippet shows the function signature for extracting structured data from an LLM response. It uses the previously defined Zod schema as the return type, ensuring type safety and validation.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/concepts/philosophy.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction extract(a): StructuredData {}\n```\n\n----------------------------------------\n\nTITLE: Using Instructor with Anthropic via llm-polyglot in TypeScript\nDESCRIPTION: This example demonstrates how to use Instructor with non-OpenAI providers like Anthropic using the llm-polyglot library. It creates an Anthropic client, initializes Instructor, and extracts user information using a Zod schema.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLLMClient } from \"llm-polyglot\"\nimport Instructor from \"@instructor-ai/instructor\"\nimport { z } from \"zod\"\n\nconst anthropicClient = createLLMClient({\n  provider: \"anthropic\",\n  apiKey: process.env.ANTHROPIC_API_KEY\n})\n\nconst UserSchema = z.object({\n  age: z.number(),\n  name: z.string()\n})\n\nconst instructor = Instructor<typeof anthropicClient>({\n  client: anthropicClient,\n  mode: \"TOOLS\"\n})\n\nasync function extractUser() {\n  const user = await instructor.chat.completions.create({\n    model: \"claude-3-opus-20240229\",\n    max_tokens: 1000,\n    messages: [\n      {\n        role: \"user\",\n        content: \"My name is Dimitri Kennedy.\"\n      }\n    ],\n    response_model: {\n      name: \"extract_name\",\n      schema: UserSchema\n    }\n  })\n\n  return user\n}\n\n// Example usage\nconst extractedUser = await extractUser()\nconsole.log(\"Extracted user:\", extractedUser)\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Relationships in Zod Schemas\nDESCRIPTION: Shows how to explicitly define relationships between entities in Zod schemas using ID references. This approach maintains clear separation while establishing connections.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/tips/prompting.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserDetail = z.object({\n  id: z.number(),\n  age: z.number(),\n  name: z.string(),\n  friends: z.array(z.number()).describe(\"List of friend IDs, representing user relationships\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Arrays in Zod Schemas\nDESCRIPTION: Demonstrates how to define arrays of a specific type within a Zod schema.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/concepts/schema.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = z.object({\n  name: z.string(),\n  friends: z.array(z.string()),\n});\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types from Zod Schemas\nDESCRIPTION: Demonstrates how to infer TypeScript types from Zod schemas using the z.infer utility.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/concepts/schema.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = z.object({\n  name: z.string(),\n  age: z.number(),\n});\n\ntype SchemaType = z.infer<typeof schema>;\n```\n\n----------------------------------------\n\nTITLE: Creating Enums in Zod Schemas\nDESCRIPTION: Shows how to define enums within a Zod schema to restrict field values to a specific set of options.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/concepts/schema.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = z.object({\n  name: z.string(),\n  role: z.enum(['admin', 'user']),\n});\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Wrapper Schemas in Zod\nDESCRIPTION: Demonstrates creating a wrapper schema for handling both successful and error states. This pattern allows for consistent error handling throughout an application.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/tips/prompting.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst MaybeUser = z.object({\n  result: UserDetail.optional(),\n  error: z.boolean(),\n  message: z.string().optional(),\n});\n\n// `MaybeUser` can now encapsulate both a result and an error state.\n```\n\n----------------------------------------\n\nTITLE: Implementing Structured Output with Ollama\nDESCRIPTION: Example of using Instructor.js with Ollama for structured output extraction using Zod schema\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/blog/posts/oss.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Instructor from \"@instructor-ai/instructor\"\nimport OpenAI from \"openai\"\nimport { z } from \"zod\"\n\nconst UserExtractSchema = z.object({\n  age: z.number(),\n  name: z.string()\n})\n\nconst oai = new OpenAI({\n  apiKey: \"ollama\",  // required, but unused\n  baseUrl: \"http://localhost:11434/v1\", // updated API URL\n})\n\nconst client = Instructor({\n  client: oai,\n  mode: \"FUNCTIONS\"\n})\n\nconst user = await client.chat.completions.create({\n  model: \"llama2\",\n  messages: [{ role: \"user\", content: \"Jason is 30 years old\" }],\n  response_model: { schema: UserExtractSchema, name: \"UserExtractSchema\" }\n})\n\nconsole.log(user)\n// { age: 30, name: \"Jason\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Values in Zod Schemas\nDESCRIPTION: Demonstrates how to make certain fields optional in a Zod schema.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/concepts/schema.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = z.object({\n  name: z.string(),\n  age: z.number().optional(),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Structured Output with Anyscale\nDESCRIPTION: Example of using Instructor.js with Anyscale for structured output extraction using Zod schema\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/blog/posts/oss.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { z } from \"zod\";\nimport Instructor from \"@instructor-js/instructor\";\nimport OpenAI from \"openai\";\n\nconst UserExtractSchema = z.object({\n  name: z.string(),\n  age: z.number(),\n});\n\nconst oai = new OpenAI({\n  apiKey: process.env.ANYSCALE_API_KEY,\n  base_url: \"https://api.endpoints.anyscale.com/v1\",\n});\n\nconst client = Instructor({\n  client: oai,\n  mode: \"JSON_SCHEMA\"\n});\n\nconst resp = await client.chat.completions.create({\n  model: \"mistralai/Mixtral-8x7B-Instruct-v0.1\",\n  messages: [\n    { role: \"system\", content: \"You are a world class extractor\" },\n    { role: \"user\", content: 'Extract the following entities: \"Jason is 20\"' },\n  ],\n  response_model: { schema: UserExtractSchema, name: \"UserExtractSchema\" },\n});\n\nconsole.log(resp);\n// Expected output: { name: 'Jason', age: 20 }\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Fields in Zod Schemas\nDESCRIPTION: Shows how to define optional fields in Zod schemas using the optional() method. This approach allows for fields that may or may not be present in validated data.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/tips/prompting.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserDetail = z.object({\n  age: z.number(),\n  name: z.string(),\n  role: z.string().optional(),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Structured Output with Groq\nDESCRIPTION: Example of using Instructor.js with Groq for structured output extraction using Zod schema\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/blog/posts/oss.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { z } from \"zod\";\nimport Instructor from \"@instructor-js/instructor\";\nimport Groq from \"groq-sdk\";\n\nconst groqClient = new Groq({\n  apiKey: process.env.GROQ_API_KEY,\n});\n\nconst UserExtractSchema = z.object({\n  name: z.string(),\n  age: z.number(),\n});\n\nconst client = Instructor({\n  client: groqClient,\n  mode: \"FUNCTIONS\",\n});\n\nconst user = await client.chat.completions.create({\n  model: \"mixtral-8x7b-32768\",\n  response_model: { schema: UserExtractSchema, name: \"UserExtract\" },\n  messages: [\n    { role: \"user\", content: \"Extract jason is 25 years old\" },\n  ],\n});\n\nconsole.log(user);\n// { name: 'jason', age: 25 }\n```\n\n----------------------------------------\n\nTITLE: Reiterating Instructions in Zod Schema Descriptions\nDESCRIPTION: Demonstrates how to include detailed instructions in field descriptions for complex attributes, ensuring clarity and proper usage.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/tips/prompting.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst Role = z.object({\n  instructions: z.string().describe(\"Repeat the rules for determining the title.\"),\n  title: z.string(),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Structured Output with Together AI\nDESCRIPTION: Example of using Instructor.js with Together AI for structured output extraction using Zod schema\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/blog/posts/oss.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { z } from \"zod\";\nimport Instructor from \"@instructor-js/instructor\";\nimport OpenAI from \"openai\";\n\nconst client = Instructor({\n  client: new OpenAI({\n    apiKey: process.env.TOGETHER_API_KEY,\n    base_url: \"https://api.together.xyz/v1\",\n  }),\n  mode: \"TOOLS\",\n});\n\nconst UserExtractSchema = z.object({\n  name: z.string(),\n  age: z.number(),\n});\n\nconst user = await client.chat.completions.create({\n  model: \"mistralai/Mixtral-8x7B-Instruct-v0.1\",\n  response_model: { schema: UserExtractSchema, name: \"UserExtract\" },\n  messages: [\n    { role: \"user\", content: \"Extract jason is 25 years old\" },\n  ],\n});\n\nconsole.assert(user instanceof UserExtractSchema, \"Should be instance of UserExtract\");\nconsole.log(user);\n//> name='jason', age=25\n```\n\n----------------------------------------\n\nTITLE: Limiting Array Lengths in Zod Schemas\nDESCRIPTION: Demonstrates how to control the maximum length of arrays in Zod schemas using the max() method. This helps maintain manageable data structures.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/tips/prompting.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst Property = z.object({\n  key: z.string(),\n  value: z.string(),\n});\n\nconst UserDetail = z.object({\n  age: z.number(),\n  name: z.string(),\n  properties: z.array(Property).max(6).describe(\"Manageable set of properties\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Schema Creation for Error Handling in Zod\nDESCRIPTION: Shows how to create a reusable function for generating Maybe types that can encapsulate both success and error states. This approach simplifies error handling across multiple schema types.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/tips/prompting.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst Maybe = (schema) => z.object({\n  result: schema.optional(),\n  error: z.boolean(),\n  message: z.string().optional(),\n});\n\nconst MaybeUser = Maybe(UserDetail);\n```\n\n----------------------------------------\n\nTITLE: Adding LLMValidator for Content Moderation\nDESCRIPTION: Enhanced version of the QuestionAnswer model that incorporates LLMValidator in a superRefine method to check content appropriateness, with error handling to capture validation failures.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/self_correction.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst QuestionAnswer = z.object({\n  question: z.string(),\n  answer: z.string().superRefine(\n    LLMValidator(instructor, statement, {\n      model: \"gpt-4o\"\n    })\n  )\n})\n\ntry {\n  await instructor.chat.completions.create({\n    model: \"gpt-4o\",\n    max_retries: 0,\n    response_model: { schema: QuestionAnswer, name: \"Question and Answer\" },\n    messages: [\n      {\n        role: \"system\",\n        content:\n          \"You are a system that answers questions based on the context. answer exactly what the question asks using the context.\"\n      },\n      {\n        role: \"user\",\n        content: `using the context: ${context}\\n\\nAnswer the following question: ${question}`\n      }\n    ]\n  })\n} catch (e as ZodError[]) {\n  console.error(e[0].message)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Enumerations with Zod\nDESCRIPTION: Shows how to use z.enum() for standardized fields with predefined values, including an 'Other' option for cases that don't fit the standard options.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/tips/prompting.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst Role = z.enum([\"PRINCIPAL\", \"TEACHER\", \"STUDENT\", \"OTHER\"]);\n\nconst UserDetail = z.object({\n  age: z.number(),\n  name: z.string(),\n  role: Role,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Zod Model for Question-Answer Format\nDESCRIPTION: Creates a simple Zod schema model called QuestionAnswer that defines the structure for question-answer pairs, with both fields as strings.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/self_correction.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst QuestionAnswer = z.object({\n  question: z.string(),\n  answer: z.string()\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Arbitrary Properties with z.record() in Zod\nDESCRIPTION: Shows how to handle arbitrary key-value pairs in a schema using z.record(). This approach allows for flexibility while maintaining type safety.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/tips/prompting.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserDetail = z.object({\n  age: z.number(),\n  name: z.string(),\n  properties: z.record(z.string()).describe(\"Arbitrary key-value pairs\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Zod Module for Schema Validation\nDESCRIPTION: Imports the Zod library which is required to create validation schemas for structured outputs from language models.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/self_correction.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\"\n```\n\n----------------------------------------\n\nTITLE: Reusing Schema Components in Different Contexts\nDESCRIPTION: Demonstrates how to define reusable components that can be incorporated into multiple schema definitions. This promotes DRY principles and consistency.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/tips/prompting.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst TimeRange = z.object({\n  startTime: z.number().describe(\"Start time in hours.\"),\n  endTime: z.number().describe(\"End time in hours.\"),\n});\n\nconst UserDetail = z.object({\n  id: z.number(),\n  age: z.number(),\n  name: z.string(),\n  workTime: TimeRange,\n  leisureTime: TimeRange,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Instructor.js with JSON Schema Mode for OpenAI\nDESCRIPTION: Shows how to initialize Instructor.js with JSON Schema mode, which is only available for select clients like llama-cpp-python, Anyscale, and Together. This mode sets response_format with both type and schema properties.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/concepts/patching.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Instructor from \"@instructor-ai/instructor\"\nimport OpenAI from \"openai\"\n\nconst client = Instructor({\n  client: new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY ?? undefined,\n    organization: process.env.OPENAI_ORG_ID ?? undefined\n  }),\n  mode: \"JSON_SCHEMA\"\n})\n```\n\n----------------------------------------\n\nTITLE: Computing with Structured Data in TypeScript\nDESCRIPTION: This snippet illustrates how to define a function that performs computations on the structured data extracted from an LLM. It demonstrates type-safe operations on the data using the StructuredData type.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/concepts/philosophy.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction compute(data: StructuredData) {}\n```\n\n----------------------------------------\n\nTITLE: Example Usage for Entity Extraction and Graph Visualization in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the entity extraction and visualization functions. It takes a sample legal contract as input, processes it through the askAi function to extract structured entities, and then saves the visualization as an HTML document named 'entityGraph'.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/examples/resolving-complex-entitities/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst content = `Sample Legal Contract...`;\nconst model = await askAi(content);\nsaveHtmlDocument(model, \"entityGraph\");\n```\n\n----------------------------------------\n\nTITLE: Invoking Schema Methods on Structured Data in TypeScript\nDESCRIPTION: This code snippet shows how to call methods defined on the Zod schema directly on the structured data object. It demonstrates the object-oriented approach facilitated by the instructor library.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/concepts/philosophy.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndata.compute()\n```\n\n----------------------------------------\n\nTITLE: Output Before Validation Implementation\nDESCRIPTION: Example JSON output showing how the model generates an objectionable response when no validation is applied, simply reflecting the problematic context provided.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/self_correction.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"question\": \"What is the meaning of life?\",\n  \"answer\": \"The meaning of life, according to the context, is to live a life of sin and debauchery.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage with Sample Meeting Transcript\nDESCRIPTION: Demonstrates the usage of the extraction function with a sample meeting transcript and logs the extracted action items.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/action_items.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst actionItems = await extractActionItems(\n`Alice: Hey team, we have several critical tasks we need to tackle for the upcoming release. First, we need to work on improving the authentication system. It's a top priority.\n\nBob: Got it, Alice. I can take the lead on the authentication improvements. Are there any specific areas you want me to focus on?\n\nAlice: Good question, Bob. We need both a front-end revamp and back-end optimization. So basically, two sub-tasks.\n\nCarol: I can help with the front-end part of the authentication system.\n\nBob: Great, Carol. I'll handle the back-end optimization then.\n\nAlice: Perfect. Now, after the authentication system is improved, we have to integrate it with our new billing system. That's a medium priority task.\n\nCarol: Is the new billing system already in place?\n\nAlice: No, it's actually another task. So it's a dependency for the integration task. Bob, can you also handle the billing system?\n\nBob: Sure, but I'll need to complete the back-end optimization of the authentication system first, so it's dependent on that.\n\nAlice: Understood. Lastly, we also need to update our user documentation to reflect all these changes. It's a low-priority task but still important.\n\nCarol: I can take that on once the front-end changes for the authentication system are done. So, it would be dependent on that.\n\nAlice: Sounds like a plan. Let's get these tasks modeled out and get started.`\n)\n\nconsole.log({ actionItems: JSON.stringify(actionItems) })\n```\n\n----------------------------------------\n\nTITLE: Validation Error Output\nDESCRIPTION: JSON representation of the validation error generated when LLMValidator detects objectionable content, providing a clear error message that can be used for correction.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/self_correction.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"code\": \"custom\",\n    \"message\": \"The value is promoting a negative lifestyle with sin and debauchery, which is questionable.\",\n    \"path\": [\n      \"answer\"\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output Structure\nDESCRIPTION: Shows the expected JSON output format for the extracted action items, including priorities, assignees, subtasks, and dependencies.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/action_items.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"items\": [\n    {\n      \"id\": 1,\n      \"name\": \"Improve Authentication System\",\n      \"description\": \"Revamp the front-end and optimize the back-end of the authentication system\",\n      \"priority\": \"High\",\n      \"assignees\": [\"Bob\", \"Carol\"],\n      \"subtasks\": [\n        {\n          \"id\": 2,\n          \"name\": \"Front-end Revamp\"\n        },\n        {\n          \"id\": 3,\n          \"name\": \"Back-end Optimization\"\n        }\n      ],\n      \"dependencies\": []\n    },\n    {\n      \"id\": 4,\n      \"name\": \"Integrate Authentication System with Billing System\",\n      \"description\": \"Integrate the improved authentication system with the new billing system\",\n      \"priority\": \"Medium\",\n      \"assignees\": [\"Bob\"],\n      \"subtasks\": [],\n      \"dependencies\": [1]\n    },\n    {\n      \"id\": 5,\n      \"name\": \"Update User Documentation\",\n      \"description\": \"Update the user documentation to reflect the changes in the authentication system\",\n      \"priority\": \"Low\",\n      \"assignees\": [\"Carol\"],\n      \"subtasks\": [],\n      \"dependencies\": [2]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 1.6.0\nDESCRIPTION: Documents peer dependency updates, removal of baseUrl check, and dependency version updates in release 1.6.0.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.6.0\n\n### Minor Changes\n\n- [#193](https://github.com/instructor-ai/instructor-js/pull/193) [`da449de`](https://github.com/instructor-ai/instructor-js/commit/da449de837389ccc30584b8954a64e3cafa22832) Thanks [@roodboi](https://github.com/roodboi)! - update peer deps + remove baseUrl check on generic client type guard\n\n- [#191](https://github.com/instructor-ai/instructor-js/pull/191) [`bf240b2`](https://github.com/instructor-ai/instructor-js/commit/bf240b27c893ee3e6da8f09e1d9c14004eb0d604) Thanks [@roodboi](https://github.com/roodboi)! - Updating core openai/zod stream/zod/anthropic dependencies to latest - updating tests and support validation to better handle changes without warning unnecessarily.\n\n  Peer dependencies will likely need to be updated to match the latest.\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic QuestionAnswer Schema with Context Validation\nDESCRIPTION: Defines a function that creates a QuestionAnswer schema with context-sensitive validation. It uses the context to validate each fact and filters out any facts that don't have valid supporting quotes after validation.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/validated_citations.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createQuestionAnswerWithContext(dynamicContext: string) {\n  const FactSchemaWithContext = createFactSchemaWithContext(dynamicContext);\n\n  return z.object({\n    question: z.string(),\n    answer: z.array(FactSchemaWithContext).transform((answers) => {\n      // Filter out any Facts that, after validation, have no valid quotes\n      return answers.filter(fact => fact.substring_quote.length > 0);\n    })\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Bun\nDESCRIPTION: Command to execute the project's test suite using Bun's test runner\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/guidelines.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun test\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Citation Validation System\nDESCRIPTION: Demonstrates how to use the citation validation system with a sample question and context. Shows the expected output format with validated facts and their supporting quotes from the context.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/validated_citations.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst question = \"Where did he go to school?\"\nconst context = `My name is Jason Liu, and I grew up in Toronto Canada but I was born in China.\nI went to an arts high school but in university I studied Computational Mathematics and physics.\n  As part of coop I worked at many companies including Stitchfix, Facebook.\n  I also started the Data Science club at the University of Waterloo and I was the president of the club for 2 years.`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  question: \"Where did Jason Liu go to school?\",\n  answer: [\n    {\n      statement: \"Jason Liu went to an arts high school.\",\n      substring_quote: [ \"arts high school\" ],\n    }, \n    {\n      statement: \"Jason Liu studied Computational Mathematics and physics in university.\",\n      substring_quote: [ \"Computational Mathematics and physics\" ],\n    }\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Instructor.js with Function Calling Mode for OpenAI\nDESCRIPTION: Shows how to initialize Instructor.js with an OpenAI client using FUNCTIONS mode. This approach is being deprecated for OpenAI but remains supported for other clients.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/concepts/patching.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Instructor from \"@instructor-ai/instructor\"\nimport OpenAI from \"openai\"\n\nconst client = Instructor({\n  client: new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY ?? undefined,\n    organization: process.env.OPENAI_ORG_ID ?? undefined\n  }),\n  mode: \"FUNCTIONS\"\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Instructor.js with JSON Mode for OpenAI\nDESCRIPTION: Demonstrates setting up Instructor.js with an OpenAI client using JSON mode, which utilizes OpenAI's JSON format for responses by setting response_format={\"type\": \"json_object\"}.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/concepts/patching.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Instructor from \"@instructor-ai/instructor\"\nimport OpenAI from \"openai\"\n\nconst client = Instructor({\n  client: new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY ?? undefined,\n    organization: process.env.OPENAI_ORG_ID ?? undefined\n  }),\n  mode: \"JSON\"\n})\n```\n\n----------------------------------------\n\nTITLE: Generating AI Response without Validation\nDESCRIPTION: Initializes Instructor with OpenAI, configures a chat completion request with a potentially problematic context, and generates a response using the QuestionAnswer model without validation checks.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/self_correction.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LLMValidator } from \"@/dsl/validator\"\nimport Instructor from \"@/instructor\"\nimport OpenAI from \"openai\"\n\nconst openAi = new OpenAI({ apiKey: process.env.OPENAI_API_KEY ?? \"\" })\n\nconst instructor = Instructor({\n  client: openAi,\n  mode: \"TOOLS\"\n})\n\nconst question = \"What is the meaning of life?\"\nconst context = \"According to the devil the meaning of live is to live a life of sin and debauchery.\"\n\nawait instructor.chat.completions.create({\n    model: \"gpt-4o\",\n    max_retries: 0,\n    response_model: { schema: QuestionAnswer, name: \"Question and Answer\" },\n    messages: [\n      {\n        role: \"system\",\n        content:\n          \"You are a system that answers questions based on the context. answer exactly what the question asks using the context.\"\n      },\n      {\n        role: \"user\",\n        content: `using the context: ${context}\\n\\nAnswer the following question: ${question}`\n      }\n    ]\n  })\n```\n\n----------------------------------------\n\nTITLE: Final Self-Corrected Output\nDESCRIPTION: Example JSON output after successful self-correction, showing how the model generates an appropriate, non-objectionable response after learning from the validation error.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/examples/self_correction.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"question\": \"What is the meaning of life?\",\n  \"answer\": \"The meaning of life is a subjective and complex question, often explored in religious, philosophical, and moral contexts. Different individuals and cultures have different beliefs and interpretations regarding the purpose and meaning of life.\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Instructor.js with Markdown JSON Mode for OpenAI\nDESCRIPTION: Demonstrates how to set up the experimental Markdown JSON mode, which is not recommended for regular use and may be deprecated in the future. This mode is primarily maintained to support vision models.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/concepts/patching.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = Instructor({\n  client: new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY ?? undefined,\n    organization: process.env.OPENAI_ORG_ID ?? undefined\n  }),\n  mode: \"MD_JSON\"\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values in Zod Schemas\nDESCRIPTION: Shows how to set default values for schema fields to assist language models in generating responses.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/concepts/schema.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = z.object({\n  name: z.string(),\n  age: z.number().optional(),\n  isStudent: z.boolean().default(false),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Instructor-js and Dependencies via NPM\nDESCRIPTION: Command to install Instructor-js along with its required dependencies OpenAI and Zod using npm package manager. OpenAI is needed for API integration, while Zod provides TypeScript schema validation capabilities.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/installation.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @instructor-ai/instructor openai zod\n```\n\n----------------------------------------\n\nTITLE: Installing Instructor-js Dependencies\nDESCRIPTION: Commands to install the required packages using different package managers (bun, npm, pnpm)\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun add @instructor-ai/instructor zod openai\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @instructor-ai/instructor zod openai\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @instructor-ai/instructor zod openai\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Bun\nDESCRIPTION: Command to install all required project dependencies using Bun package manager\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/guidelines.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Setting Anyscale API Key\nDESCRIPTION: Command to set the Anyscale API key as an environment variable\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/blog/posts/oss.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport ANYSCALE_API_KEY=\"your-api-key\"\n```\n\n----------------------------------------\n\nTITLE: Setting Groq API Key\nDESCRIPTION: Command to set the Groq API key as an environment variable\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/blog/posts/oss.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport GROQ_API_KEY=\"your-api-key\"\n```\n\n----------------------------------------\n\nTITLE: Setting Together AI API Key\nDESCRIPTION: Command to set the Together AI API key as an environment variable\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/blog/posts/oss.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport TOGETHER_API_KEY=\"your-api-key\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Ollama Local Model\nDESCRIPTION: Command to run the llama2 model locally using Ollama\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/blog/posts/oss.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nollama run llama2\n```\n\n----------------------------------------\n\nTITLE: Dependencies List for Documentation and Image Processing\nDESCRIPTION: Lists required Python packages for documentation generation using MkDocs Material theme, image processing with Pillow and CairoSVG, and documentation string handling with MkDocstrings. Includes minification plugin for optimized output.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/requirements-doc.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmkdocs-material\npillow\ncairosvg\nmkdocstrings\nmkdocstrings-python\nmkdocs-minify-plugin\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 1.7.0\nDESCRIPTION: Documents the addition of a new mode for parsing thinking blocks from markdown JSON responses in release 1.7.0.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.7.0\n\n### Minor Changes\n\n- [#195](https://github.com/instructor-ai/instructor-js/pull/195) [`3aac90e`](https://github.com/instructor-ai/instructor-js/commit/3aac90e7e965c0769d4ff98aadad78b2aada948b) Thanks [@roodboi](https://github.com/roodboi)! - adding a new mode to support parsing thinking blocks out of markdown json responses (R1)\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schema for Data Extraction in TypeScript\nDESCRIPTION: This code snippet shows how to define a Zod schema that will be used to structure the data extracted from the AI model's response.\nSOURCE: https://github.com/instructor-ai/instructor-js/blob/main/docs/why.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\"\n\nconst UserSchema = z.object({\n    age: z.number(),\n    name: z.string(),\n})\n\ntype User = z.infer<typeof UserSchema>\n```"
  }
]