[
  {
    "owner": "celery",
    "repo": "pytest-celery",
    "content": "TITLE: Configuring Celery Worker App with pytest Fixture\nDESCRIPTION: Demonstrates how to use the default_worker_app fixture to configure a Celery application for testing. This snippet shows the basic pattern of modifying the Celery app's configuration before it's applied to the worker container.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/app-conf.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_app(default_worker_app: Celery) -> Celery:\n    app = default_worker_app\n    # configure the app here\n    return app\n```\n\n----------------------------------------\n\nTITLE: Smoke Test for Celery Bug Reports\nDESCRIPTION: Complete Python script template for creating a Celery smoke test with RabbitMQ broker (with management plugin) and Redis backend. Includes fixture configurations and a sample test case.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/celery-bug-report.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# flake8: noqa\n\nfrom __future__ import annotations\n\nimport pytest\nfrom celery import Celery\nfrom celery.canvas import Signature\nfrom celery.result import AsyncResult\nfrom pytest_docker_tools import build\nfrom t.integration.tasks import identity\nfrom t.smoke.workers.dev import SmokeWorkerContainer\n\nfrom pytest_celery import RABBITMQ_PORTS\nfrom pytest_celery import WORKER_DEBUGPY_PORTS\nfrom pytest_celery import CeleryBackendCluster\nfrom pytest_celery import CeleryBrokerCluster\nfrom pytest_celery import CeleryTestSetup\nfrom pytest_celery import RabbitMQContainer\nfrom pytest_celery import RabbitMQTestBroker\nfrom pytest_celery import RedisTestBackend\n\n###############################################################################\n# RabbitMQ Management Broker\n###############################################################################\n\n\nclass RabbitMQManagementTestBroker(RabbitMQTestBroker):\n    def get_management_url(self) -> str:\n        \"\"\"Opening this link during debugging allows you to see the\n        RabbitMQ management UI in your browser.\n        \"\"\"\n        ports = self.container.attrs[\"NetworkSettings\"][\"Ports\"]\n        ip = ports[\"15672/tcp\"][0][\"HostIp\"]\n        port = ports[\"15672/tcp\"][0][\"HostPort\"]\n        return f\"http://{ip}:{port}\"\n\n\n@pytest.fixture\ndef default_rabbitmq_broker_image() -> str:\n    return \"rabbitmq:management\"\n\n\n@pytest.fixture\ndef default_rabbitmq_broker_ports() -> dict:\n    # Expose the management UI port\n    ports = RABBITMQ_PORTS.copy()\n    ports.update({\"15672/tcp\": None})\n    return ports\n\n\n@pytest.fixture\ndef celery_rabbitmq_broker(default_rabbitmq_broker: RabbitMQContainer) -> RabbitMQTestBroker:\n    broker = RabbitMQManagementTestBroker(default_rabbitmq_broker)\n    yield broker\n    broker.teardown()\n\n\n@pytest.fixture\ndef celery_broker_cluster(celery_rabbitmq_broker: RabbitMQTestBroker) -> CeleryBrokerCluster:\n    cluster = CeleryBrokerCluster(celery_rabbitmq_broker)\n    yield cluster\n    cluster.teardown()\n\n\n###############################################################################\n# Redis Result Backend\n###############################################################################\n\n\n@pytest.fixture\ndef celery_backend_cluster(celery_redis_backend: RedisTestBackend) -> CeleryBackendCluster:\n    cluster = CeleryBackendCluster(celery_redis_backend)\n    yield cluster\n    cluster.teardown()\n\n\n@pytest.fixture\ndef default_redis_backend_image() -> str:\n    return \"redis:latest\"\n\n\n###############################################################################\n# Worker Configuration\n###############################################################################\n\n\nclass WorkerContainer(SmokeWorkerContainer):\n    @classmethod\n    def log_level(cls) -> str:\n        return \"INFO\"\n\n    @classmethod\n    def worker_queue(cls) -> str:\n        return \"celery\"\n\n    @classmethod\n    def command(cls, *args: str, **kwargs: dict) -> list[str]:\n        return super().command(\n            \"--without-gossip\",\n            \"--without-mingle\",\n            \"--without-heartbeat\",\n            debugpy=True,\n            wait_for_client=False,\n        )\n\n    @classmethod\n    def ports(cls) -> dict | None:\n        return WORKER_DEBUGPY_PORTS\n\n\n@pytest.fixture\ndef default_worker_container_cls() -> type[SmokeWorkerContainer]:\n    return WorkerContainer\n\n\n@pytest.fixture(scope=\"session\")\ndef default_worker_container_session_cls() -> type[SmokeWorkerContainer]:\n    return WorkerContainer\n\n\ncelery_dev_worker_image = build(\n    path=\".\",\n    dockerfile=\"t/smoke/workers/docker/dev\",\n    tag=\"t/smoke/worker:dev\",\n    buildargs=WorkerContainer.buildargs(),\n)\n\n\n@pytest.fixture\ndef default_worker_app(default_worker_app: Celery) -> Celery:\n    app = default_worker_app\n    # app.conf...  # Add any additional configuration here\n    return app\n\n\n###############################################################################\n# Bug Reproduction\n###############################################################################\n\n\ndef test_issue_1234(celery_setup: CeleryTestSetup):\n    sig: Signature = identity.s(\"test_issue_1234\")\n    res: AsyncResult = sig.delay()\n    assert res.get() == \"test_issue_1234\"\n```\n\n----------------------------------------\n\nTITLE: Testing Celery Environment Readiness in Python\nDESCRIPTION: A simple test function that verifies the Celery test setup is ready. This test will run against all enabled combinations of workers, brokers, and result backends in the test matrix.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/first-steps.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef test_hello_world(celery_setup: CeleryTestSetup):\n    assert celery_setup.ready()\n```\n\n----------------------------------------\n\nTITLE: Complete Hello World Example Test File\nDESCRIPTION: A complete example test file that includes all necessary imports, fixture definitions for a RabbitMQ broker and Redis backend, and a simple test case that verifies the setup and executes a task.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/first-steps.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\nfrom pytest_celery import CeleryBrokerCluster\nfrom pytest_celery import CeleryTestSetup\nfrom pytest_celery import RabbitMQTestBroker\nfrom pytest_celery import RedisTestBroker\nfrom tests.tasks import noop\n\n\n@pytest.fixture\ndef celery_broker_cluster(celery_rabbitmq_broker: RabbitMQTestBroker) -> CeleryBrokerCluster:\n    cluster = CeleryBrokerCluster(celery_rabbitmq_broker)\n    yield cluster\n    cluster.teardown()\n\n\n@pytest.fixture\ndef celery_backend_cluster(celery_redis_broker: RedisTestBroker) -> CeleryBrokerCluster:\n    cluster = CeleryBrokerCluster(celery_redis_broker)\n    yield cluster\n    cluster.teardown()\n\n\n@pytest.fixture\ndef default_worker_tasks(default_worker_tasks: set) -> set:\n    from tests import tasks\n\n    default_worker_tasks.add(tasks)\n    return default_worker_tasks\n\n\ndef test_hello_world(celery_setup: CeleryTestSetup):\n    assert isinstance(celery_setup.broker, RabbitMQTestBroker)\n    assert isinstance(celery_setup.backend, RedisTestBroker)\n    assert noop.s().apply_async().get() is None\n```\n\n----------------------------------------\n\nTITLE: Celery Bug Report Template in Python\nDESCRIPTION: This is a complete template for a Celery bug report script using pytest-celery, including RabbitMQ management broker, Redis backend, and a built-in worker.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/celery-bug-report.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom pytest_celery import CeleryTestSetup\nfrom pytest_celery.vendors.rabbitmq import RabbitMQTestBroker\nfrom pytest_celery.vendors.redis import RedisTestBackend\nfrom pytest_celery import ping\nfrom celery import shared_task\n\n\n@pytest.fixture\ndef default_rabbitmq_broker_image() -> str:\n    return \"rabbitmq:management\"\n\n\n@pytest.fixture\ndef celery_broker_cluster(celery_rabbitmq_broker: RabbitMQTestBroker) -> CeleryBrokerCluster:\n    cluster = CeleryBrokerCluster(celery_rabbitmq_broker)\n    yield cluster\n    cluster.teardown()\n\n\n@pytest.fixture\ndef celery_backend_cluster(celery_redis_backend: RedisTestBackend) -> CeleryBackendCluster:\n    cluster = CeleryBackendCluster(celery_redis_backend)\n    yield cluster\n    cluster.teardown()\n\n\n@pytest.fixture\ndef default_worker_celery_version() -> str:\n    return \"5.3.1\"\n\n\n@shared_task\ndef example_task() -> str:\n    return \"Hello, World!\"\n\n\n@pytest.fixture\ndef default_worker_tasks(default_worker_tasks: set) -> set:\n    default_worker_tasks.add(example_task)\n    return default_worker_tasks\n\n\nclass TestIssue1234:\n    def test_issue_1234(self, celery_setup: CeleryTestSetup):\n        # Test case that reproduces the bug\n        assert ping.s().apply_async(queue=celery_setup.worker.worker_queue).get() == \"pong\"\n        assert example_task.s().apply_async(queue=celery_setup.worker.worker_queue).get() == \"Hello, World!\"\n        # Add assertions that demonstrate the bug\n\n```\n\n----------------------------------------\n\nTITLE: Injecting Custom Tasks into the Worker\nDESCRIPTION: Extends the default worker tasks fixture to include custom tasks module, allowing the worker to recognize and execute the defined tasks during tests.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/first-steps.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_tasks(default_worker_tasks: set) -> set:\n    from tests import tasks\n\n    default_worker_tasks.add(tasks)\n    return default_worker_tasks\n```\n\n----------------------------------------\n\nTITLE: Hello World Test Case for Celery\nDESCRIPTION: A simple test case that verifies the Celery test setup is configured correctly with the expected broker and backend types, and executes a noop task to confirm the environment is working.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/first-steps.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef test_hello_world(celery_setup: CeleryTestSetup):\n    assert isinstance(celery_setup.broker, RabbitMQTestBroker)\n    assert isinstance(celery_setup.backend, RedisTestBackend)\n    assert noop.s().apply_async().get() is None\n```\n\n----------------------------------------\n\nTITLE: Testing a Fixed List of Celery Versions in a Cluster\nDESCRIPTION: Test class that configures a cluster with specific Celery versions and verifies each worker is running with the expected version. Uses subtests to validate each worker version individually.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/range.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass TestClusterList:\n    @pytest.fixture(params=[generate_workers(versions_list)])\n    def celery_worker_cluster(self, request: pytest.FixtureRequest) -> CeleryWorkerCluster:\n        nodes: list[CeleryWorkerContainer] = [request.getfixturevalue(worker) for worker in request.param]\n        cluster = CeleryWorkerCluster(*nodes)\n        yield cluster\n        cluster.teardown()\n\n    def test_worker_cluster_with_fixed_list(self, celery_setup: CeleryTestSetup, subtests: SubTests):\n        worker: CeleryTestWorker\n        for version, worker in zip(versions_list, celery_setup.worker_cluster):\n            with subtests.test(msg=f\"Found worker {version} in cluster\"):\n                assert f\"{worker.hostname()} {version}\" in worker.logs()\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Initial Content in pytest-celery\nDESCRIPTION: Fixture for providing initial content for the worker component's container volume. This fixture integrates app modules, utility modules, tasks, signals, and the Celery app instance to configure the worker environment.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/includes/worker-breakdown.txt#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_initial_content(\n    ...\n    default_worker_app_module: ModuleType,\n    default_worker_utils_module: ModuleType,\n    default_worker_tasks: set,\n    default_worker_signals: set,\n    default_worker_app: Celery,\n    ...\n) -> dict:\n```\n\n----------------------------------------\n\nTITLE: Testing a Celery Setup with pytest-celery\nDESCRIPTION: A basic test case that validates if a Celery setup is ready using the celery_setup fixture. This demonstrates the simplicity of accessing different Celery architectures in a single test case.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/introduction.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef test_hello_world(celery_setup: CeleryTestSetup):\n    assert celery_setup.ready()\n```\n\n----------------------------------------\n\nTITLE: Testing a Range of Celery Versions in a Cluster\nDESCRIPTION: Test class that configures a cluster with a dynamically generated range of Celery versions and verifies each worker is running with the expected version. Uses the version range fetched from PyPI.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/range.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass TestClusterRange:\n    @pytest.fixture(params=[generate_workers(versions_range)])\n    def celery_worker_cluster(self, request: pytest.FixtureRequest) -> CeleryWorkerCluster:\n        nodes: list[CeleryWorkerContainer] = [request.getfixturevalue(worker) for worker in request.param]\n        cluster = CeleryWorkerCluster(*nodes)\n        yield cluster\n        cluster.teardown()\n\n    def test_worker_cluster_with_versions_range(self, celery_setup: CeleryTestSetup, subtests: SubTests):\n        worker: CeleryTestWorker\n        for version, worker in zip(versions_range, celery_setup.worker_cluster):\n            with subtests.test(msg=f\"Found worker v{version} in cluster\"):\n                assert f\"{worker.hostname()} v{version}\" in worker.logs()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Task Modules to Celery Workers Using default_worker_tasks Fixture\nDESCRIPTION: This snippet demonstrates how to extend the default_worker_tasks fixture to include custom task modules for Celery workers during testing. It adds a module from the tests directory to the set of task modules that will be injected into the worker container.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/tasks.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_tasks(default_worker_tasks: set) -> set:\n    from tests import tasks\n\n    default_worker_tasks.add(tasks)\n    return default_worker_tasks\n```\n\n----------------------------------------\n\nTITLE: Implementing Modular Celery Configuration with pytest Fixtures\nDESCRIPTION: Shows how to implement modular configuration for Celery worker apps using pytest's fixture availability feature. This example demonstrates how to layer configurations at different scopes, with a base configuration and test-specific overrides.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/app-conf.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_app(default_worker_app: Celery) -> Celery:\n    app = default_worker_app\n    app.conf.A = X\n    return app\n\n\nclass test_example:\n    @pytest.fixture\n    def default_worker_app(self, default_worker_app: Celery) -> Celery:\n        app = default_worker_app\n        # app.conf.A is already set to X\n        app.conf.B = Y\n        return app\n\n    def test_worker_app(self, celery_setup: CeleryTestSetup):\n        assert celery_setup.app.conf.A == X\n        assert celery_setup.app.conf.B == Y\n```\n\n----------------------------------------\n\nTITLE: Testing Django Celery Tasks with pytest-celery\nDESCRIPTION: Example tests for Django Celery tasks using pytest-celery, directly importing the tasks from the Django application and using the celery_setup fixture to execute them on the worker.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/django.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom demoapp.tasks import add\nfrom demoapp.tasks import count_widgets\n\n\ndef test_add(celery_setup):\n    assert add.s(1, 2).delay().get() == 3\n\n\ndef test_count_widgets(celery_setup):\n    assert count_widgets.s().delay().get() == 0\n```\n\n----------------------------------------\n\nTITLE: Implementing a Celery ping test for worker validation\nDESCRIPTION: Test function that verifies each worker in the cluster is functioning correctly by sending a ping task and expecting a pong response.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myworker.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef test_ping(celery_setup: CeleryTestSetup):\n    worker: CeleryTestWorker\n    for worker in celery_setup.worker_cluster:\n        sig: Signature = ping.s()\n        res: AsyncResult = sig.apply_async(queue=worker.worker_queue)\n        assert res.get(timeout=RESULT_TIMEOUT) == \"pong\"\n```\n\n----------------------------------------\n\nTITLE: Worker Testing with Setup Fixture in Python\nDESCRIPTION: Example test function showing how to access and verify worker status using the celery_setup fixture.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/next-steps.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef test_myworker(celery_setup: CeleryTestSetup):\n    assert celery_setup.worker_cluster[1].ready()\n```\n\n----------------------------------------\n\nTITLE: Injecting Tasks and Signal Handlers\nDESCRIPTION: Demonstrates how to inject custom tasks and signal handlers into Celery workers using pytest fixtures.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/hybrid_setup.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_tasks(default_worker_tasks: set) -> set:\n    from tests.vendors.workers import tasks\n\n    default_worker_tasks.add(tasks)\n    return default_worker_tasks\n\n\n@pytest.fixture\ndef default_worker_signals(default_worker_signals: set) -> set:\n    from tests.vendors.workers import signals\n\n    default_worker_signals.add(signals)\n    return default_worker_signals\n```\n\n----------------------------------------\n\nTITLE: Worker Cluster Integration in Python\nDESCRIPTION: Pytest fixture for integrating multiple workers into a cluster with shared network and app instance.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/next-steps.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef celery_worker_cluster(celery_worker: CeleryTestWorker, myworker_worker: CeleryTestWorker) -> CeleryWorkerCluster:\n    cluster = CeleryWorkerCluster(celery_worker, myworker_worker)\n    yield cluster\n    cluster.teardown()\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Signals in Pytest-Celery\nDESCRIPTION: Fixture demonstrating how to add custom signals to the default worker signals set. Extends the default_worker_signals fixture by adding test-specific signals.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/first-steps.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_signals(default_worker_signals: set) -> set:\n    from tests import signals\n\n    default_worker_signals.add(signals)\n    return default_worker_signals\n```\n\n----------------------------------------\n\nTITLE: Testing Celery Signal Handlers with pytest-celery\nDESCRIPTION: This code snippet demonstrates how to test Celery signal handlers using pytest-celery. It includes tests that query the output of signal handlers injected into the worker container and inline signal handlers connected on the publisher side.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/signals.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass test_signals\n\n# ... (content of the test_signals.py file)\n```\n\n----------------------------------------\n\nTITLE: Testing Celery Signal Handlers\nDESCRIPTION: Example test case showing how to test Celery signal handlers using the before_task_publish signal. Demonstrates connecting a handler and verifying it was called.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/first-steps.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom celery.signals import before_task_publish\n\ndef test_before_task_publish(celery_setup: CeleryTestSetup):\n    @before_task_publish.connect\n    def before_task_publish_handler(*args, **kwargs):\n        nonlocal signal_was_called\n        signal_was_called = True\n\n    signal_was_called = False\n    mytask.s().apply_async()\n    assert signal_was_called is True\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Setup Integration Test\nDESCRIPTION: Test case that verifies the broker configuration within a complete Celery test setup.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/rabbitmq_management.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef test_broker_in_setup(celery_setup: CeleryTestSetup):\n    assert isinstance(celery_setup.broker, RabbitMQManagementTestBroker)\n    api = celery_setup.broker.get_management_url() + \"/api/queues\"\n    response = requests.get(api, auth=HTTPBasicAuth(\"guest\", \"guest\"))\n    assert response.status_code == 200\n    res = response.json()\n    assert isinstance(res, list)\n    assert len(list(filter(lambda queues: celery_setup.worker.hostname() in queues[\"name\"], res))) == 1\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Celery Task\nDESCRIPTION: Creates a simple 'noop' task using Celery's shared_task decorator that can be used in testing.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/first-steps.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport celery.utils\nfrom celery import shared_task\n\n\n@shared_task\ndef noop(*args, **kwargs) -> None:\n    return celery.utils.noop(*args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Testing Tasks with Gevent Pool Worker\nDESCRIPTION: Test implementation demonstrating how to use the configured gevent pool worker to execute and verify Celery tasks.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/worker_pool.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# ----------------------------\n\n\ndef test_gevent_pool(celery_setup):\n    \"\"\"\n    Validate that we can run a task with the gevent pool worker.\n    \"\"\"\n    # Create a Celery app\n    worker = celery_setup.worker\n    app = worker.app()\n\n    # Check pool type matches our expected configuration\n    inspector = CeleryInspector(app)\n    stats = inspector.stats()\n    worker_stats = stats[DEFAULT_WORKER_CONTAINER_NAME]\n    assert worker_stats['pool']['max-concurrency'] == 1000\n    assert worker_stats['pool']['max-tasks-per-child'] == 'N/A'\n    assert worker_stats['pool']['processes'] == 1000\n    assert worker_stats['pool']['timeouts'] == [0, 0]\n    assert worker_stats['pool']['writes'] == {}\n\n    # Submit a task\n    result = app.signature('tasks.add', args=(1, 2)).delay()\n    assert result.get(timeout=5) == 3\n```\n\n----------------------------------------\n\nTITLE: Adding tasks to pytest-celery worker\nDESCRIPTION: Example of how to add tasks to the pytest-celery worker using the default_worker_tasks fixture.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/faq.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_tasks(default_worker_tasks: set) -> set:\n    from tests import tasks\n\n    default_worker_tasks.add(tasks)\n    return default_worker_tasks\n```\n\n----------------------------------------\n\nTITLE: Defining Celery Worker Dockerfile for pytest-celery\nDESCRIPTION: This Dockerfile defines the built-in Celery worker container used by pytest-celery. It sets up a Python environment, installs Celery and related dependencies, and configures the entrypoint for the worker.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/vendors.rst#2025-04-21_snippet_5\n\nLANGUAGE: docker\nCODE:\n```\nFROM python:3.9-slim-bullseye\n\nARG CELERY_VERSION=latest\n\nRUN pip install --upgrade pip\nRUN pip install celery${CELERY_VERSION:+==}${CELERY_VERSION}\nRUN pip install redis\nRUN pip install pytest-celery==0.1.0\n\n# Install ping utility\nRUN apt-get update && apt-get install -y iputils-ping\n\nENV PYTHONUNBUFFERED=1\n\nADD docker-entrypoint.sh /\nRUN chmod +x /docker-entrypoint.sh\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Broker Fixtures with Default Vhost\nDESCRIPTION: Defines pytest fixtures for Redis broker using the default vhost (0). Sets up the broker and ensures proper teardown after tests complete.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/vhost.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef redis_broker(redis_test_container: RedisContainer) -> RedisTestBroker:\n    broker = RedisTestBroker(redis_test_container)\n    yield broker\n    broker.teardown()\n\n\n@pytest.fixture\ndef celery_broker_cluster(redis_broker: RedisTestBroker) -> CeleryBrokerCluster:\n    cluster = CeleryBrokerCluster(redis_broker)\n    yield cluster\n    cluster.teardown()\n```\n\n----------------------------------------\n\nTITLE: Adding signal handlers to pytest-celery worker\nDESCRIPTION: Example of how to add signal handlers to the pytest-celery worker using the default_worker_signals fixture.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/faq.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_signals(default_worker_signals: set) -> set:\n    from tests import signals\n\n    default_worker_signals.add(signals)\n    yield default_worker_signals\n```\n\n----------------------------------------\n\nTITLE: Replacing default worker with custom worker in cluster\nDESCRIPTION: Alternative pytest fixture implementation that completely replaces the default worker with the custom worker in the testing cluster.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myworker.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef celery_worker_cluster(\n    myworker_worker: CeleryTestWorker,\n) -> CeleryWorkerCluster:\n    cluster = CeleryWorkerCluster(myworker_worker)\n    yield cluster\n    cluster.teardown()\n```\n\n----------------------------------------\n\nTITLE: Configuring Celery Worker Application\nDESCRIPTION: Example of customizing Celery worker configuration through pytest fixtures\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/first-steps.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_app(default_worker_app: Celery) -> Celery:\n    app = default_worker_app\n    app.conf.worker_prefetch_multiplier = 1\n    app.conf.worker_concurrency = 1\n    return app\n```\n\n----------------------------------------\n\nTITLE: Setting Redis Backend for Celery Bug Report in Python\nDESCRIPTION: This snippet sets up a Redis backend for a Celery bug report, disabling the default backend matrix. It includes a fixture to control the Redis version.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/celery-bug-report.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef celery_backend_cluster(celery_redis_backend: RedisTestBackend) -> CeleryBackendCluster:\n    cluster = CeleryBackendCluster(celery_redis_backend)\n    yield cluster\n    cluster.teardown()\n```\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_redis_backend_image() -> str:\n    return \"redis:latest\"\n```\n\n----------------------------------------\n\nTITLE: Custom Worker Fixture Creation in Python\nDESCRIPTION: Pytest fixture for initializing a custom Celery worker with app instance and container configuration.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/next-steps.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef myworker_worker(myworker_container: MyWorkerContainer, celery_setup_app: Celery) -> CeleryTestWorker:\n    worker = CeleryTestWorker(myworker_container, app=celery_setup_app)\n    yield worker\n    worker.teardown()\n```\n\n----------------------------------------\n\nTITLE: Worker Signal Handlers Configuration\nDESCRIPTION: Example of adding consumer-side signal handlers to the worker container\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/next-steps.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_signals(default_worker_signals: set) -> set:\n    from tests import signals\n\n    default_worker_signals.add(signals)\n    return default_worker_signals\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom celery.signals import worker_init\n\n\n@worker_init.connect\ndef worker_init_handler(sender, **kwargs):\n    print(\"worker_init_handler\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Celery Tasks\nDESCRIPTION: Example of adding custom tasks to the Celery worker configuration\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/first-steps.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_tasks(default_worker_tasks: set) -> set:\n    from tests import tasks\n\n    default_worker_tasks.add(tasks)\n    return default_worker_tasks\n```\n\n----------------------------------------\n\nTITLE: Injecting Signal Handlers Module in pytest Fixture for Celery Worker\nDESCRIPTION: This snippet shows how to add custom signal handlers to a Celery worker using the default_worker_signals fixture in pytest-celery. It demonstrates adding a signals module to the set of default worker signals.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/signals.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_signals(default_worker_signals: set) -> set:\n    from tests import signals\n\n    default_worker_signals.add(signals)\n    return default_worker_signals\n```\n\n----------------------------------------\n\nTITLE: Parameterizing Worker Tests with Different Celery Versions\nDESCRIPTION: Class that demonstrates how to reconfigure the default worker fixture to run tests against multiple Celery versions. Each version creates a separate test case through pytest parametrization.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/range.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass TestRange:\n    @pytest.fixture(scope=\"session\", params=get_celery_versions(\"v4.4.7\", \"v5.0.0\"))\n    def default_worker_celery_version(self, request: pytest.FixtureRequest) -> str:\n        return request.param\n```\n\n----------------------------------------\n\nTITLE: Source Code Mounting Configuration\nDESCRIPTION: Example showing how to mount project source code into the worker container\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/next-steps.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndefault_worker_container = container(\n    ...\n    volumes={\n        \"{default_worker_volume.name}\": defaults.DEFAULT_WORKER_VOLUME,\n        os.path.abspath(os.getcwd()): {\n            \"bind\": \"/src\",\n            \"mode\": \"rw\",\n        },\n    },\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Redis Broker Node\nDESCRIPTION: Test class for verifying Redis broker node functionality\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/first-steps.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass test_redis_test_broker:\n    def test_the_redis_broke_node(self, celery_redis_broker: RedisTestBroker):\n        container: RedisContainer = celery_redis_broker.container\n        assert container.client\n        assert container.client.ping()\n        assert container.client.set(\"ready\", \"1\")\n        assert container.client.get(\"ready\") == \"1\"\n        assert container.client.delete(\"ready\")\n```\n\n----------------------------------------\n\nTITLE: Dynamic Generation of Worker Containers with Different Celery Versions\nDESCRIPTION: Helper function that builds Docker containers for each Celery version using pytest-docker-tools. It dynamically creates worker images and containers with appropriate versioning and configuration.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/range.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef generate_workers(versions: list[str]) -> list[str]:\n    worker_containers = list()\n    for v in versions:\n        img = f\"worker_v{v.replace('.', '_')}_image\"\n        globals()[img] = build(\n            path=WORKER_DOCKERFILE_ROOTDIR,\n            tag=f\"pytest-celery/examples/worker:v{v}\",\n            buildargs={\n                \"CELERY_VERSION\": v,\n                \"CELERY_LOG_LEVEL\": fxtr(\"default_worker_celery_log_level\"),\n                \"CELERY_WORKER_NAME\": fxtr(\"default_worker_celery_worker_name\"),\n                \"CELERY_WORKER_QUEUE\": fxtr(\"default_worker_celery_worker_queue\"),\n            },\n        )\n        cnt = f\"worker_v{v.replace('.', '_')}_container\"\n        globals()[cnt] = container(\n            image=\"{\" + f\"{img}.id\" + \"}\",\n            ports=fxtr(\"default_worker_ports\"),\n            environment=fxtr(\"default_worker_env\"),\n            network=\"{default_pytest_celery_network.name}\",\n            volumes={\"{default_worker_volume.name}\": DEFAULT_WORKER_VOLUME},\n            wrapper_class=CeleryWorkerContainer,\n            timeout=DEFAULT_WORKER_CONTAINER_TIMEOUT,\n        )\n        worker_containers.append(cnt)\n    return worker_containers\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Worker Container Class in pytest Fixtures\nDESCRIPTION: Provides pytest fixtures to override the default worker container class with the custom DjangoWorkerContainer, for both regular and session-scoped instances.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/django.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_container_cls() -> type[CeleryWorkerContainer]:\n    return DjangoWorkerContainer\n\n\n@pytest.fixture(scope=\"session\")\ndef default_worker_container_session_cls() -> type[CeleryWorkerContainer]:\n    return DjangoWorkerContainer\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tasks for Celery Bug Report in Python\nDESCRIPTION: This snippet demonstrates how to create and inject custom tasks into the worker for a Celery bug report.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/celery-bug-report.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport celery.utils\nfrom celery import shared_task\n\n\n@shared_task\ndef mytask(*args, **kwargs) -> None:\n    return celery.utils.noop(*args, **kwargs)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport tasks\n\n@pytest.fixture\ndef default_worker_tasks(default_worker_tasks: set) -> set:\n    default_worker_tasks.add(tasks)\n    return default_worker_tasks\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom tasks import mytask\n\ndef test_issue_1234(celery_setup: CeleryTestSetup):\n    # Running this canvas causes an unexpected exception as described in the bug report...\n    assert mytask.s().apply_async().get() is None, \"The bug causes this assertion to fail...\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Worker Container in Python for pytest-celery\nDESCRIPTION: This code snippet demonstrates how to implement a custom worker container by subclassing CeleryWorkerContainer. It includes methods for configuring the worker's properties and behavior.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/vendors.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyWorkerContainer(CeleryWorkerContainer):\n    @property\n    def client(self) -> Any:\n        return self\n\n    @classmethod\n    def version(cls) -> str:\n        return celery.__version__\n\n    @classmethod\n    def log_level(cls) -> str:\n        return \"INFO\"\n\n    @classmethod\n    def worker_name(cls) -> str:\n        return \"my_tests_worker\"\n\n    @classmethod\n    def worker_queue(cls) -> str:\n        return \"my_tests_queue\"\n\n    def post_initialization_logic(self) -> None:\n        pass\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Broker for Celery Testing\nDESCRIPTION: Creates a Celery broker cluster fixture using RabbitMQ. This fixture sets up the broker, yields the cluster for testing, and handles teardown afterward.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/setup-matrix.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef celery_broker_cluster(celery_rabbitmq_broker: RabbitMQTestBroker) -> CeleryBrokerCluster:\n    cluster = CeleryBrokerCluster(celery_rabbitmq_broker)\n    yield cluster\n    cluster.teardown()\n```\n\n----------------------------------------\n\nTITLE: Custom Worker Container Implementation\nDESCRIPTION: Example of implementing a custom worker container class extending CeleryWorkerContainer\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/next-steps.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyWorkerContainer(CeleryWorkerContainer):\n    @property\n    def client(self) -> Any:\n        return self\n\n    @classmethod\n    def version(cls) -> str:\n        return \"Celery main branch\"\n\n    @classmethod\n    def log_level(cls) -> str:\n        return \"INFO\"\n\n    @classmethod\n    def worker_name(cls) -> str:\n        return \"my_worker\"\n\n    @classmethod\n    def worker_queue(cls) -> str:\n        return \"myworker\"\n```\n\n----------------------------------------\n\nTITLE: Building Celery Worker Docker Image in pytest-celery\nDESCRIPTION: Configuration for building the Celery worker Docker image with customizable parameters. This build function specifies the Dockerfile path and configurable build arguments including Celery version, log level, and worker name.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/includes/worker-breakdown.txt#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncelery_base_worker_image = build(\n    path=WORKER_DOCKERFILE_ROOTDIR,\n    tag=\"pytest-celery/components/worker:default\",\n    buildargs={\n        \"CELERY_VERSION\": fxtr(\"default_worker_celery_version\"),\n        \"CELERY_LOG_LEVEL\": fxtr(\"default_worker_celery_log_level\"),\n        \"CELERY_WORKER_NAME\": fxtr(\"default_worker_celery_worker_name\"),\n        \"CELERY_WORKER_QUEUE\": fxtr(\"default_worker_celery_worker_queue\"),\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Broker Fixture Override\nDESCRIPTION: Pytest fixture that implements the custom RabbitMQ management broker.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/rabbitmq_management.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef celery_rabbitmq_broker(default_rabbitmq_broker: RabbitMQContainer) -> RabbitMQTestBroker:\n    broker = RabbitMQManagementTestBroker(default_rabbitmq_broker)\n    yield broker\n    broker.teardown()\n```\n\n----------------------------------------\n\nTITLE: Creating Celery worker fixture from custom container\nDESCRIPTION: Python pytest fixture that wraps the custom container in a CeleryTestWorker interface, managing its lifecycle in the test environment.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myworker.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef myworker_worker(myworker_container: MyWorkerContainer, celery_setup_app: Celery) -> CeleryTestWorker:\n    worker = CeleryTestWorker(myworker_container, app=celery_setup_app)\n    yield worker\n    worker.teardown()\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Worker Utils Module in Pytest Fixture\nDESCRIPTION: Example of how to override the default_worker_utils_module fixture to inject your own custom utility module for Celery worker testing. This allows accessing custom utility functions in your test worker component.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/utils-module.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_utils_module() -> ModuleType:\n    from tests import myutils\n\n    return myutils\n```\n\n----------------------------------------\n\nTITLE: Testing Celery Worker with Solo Pool\nDESCRIPTION: Test implementation showing how to reconfigure the default Celery worker to use the solo pool, which doesn't require additional dependencies.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/worker_pool.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom pytest_celery.api.inspector import CeleryInspector\nfrom pytest_celery.defaults import DEFAULT_WORKER_CONTAINER_NAME\nfrom pytest_celery.vendors.worker import CeleryWorker\n\n\n@pytest.fixture(scope=\"session\")\ndef celery_worker_image(celery_worker_image):\n    \"\"\"\n    Use the default worker image since we just need to run a different command.\n    \"\"\"\n    return celery_worker_image\n\n\n@pytest.fixture(scope=\"session\")\ndef celery_worker(celery_worker):\n    \"\"\"\n    Set the command to use the solo pool in the default worker.\n    \"\"\"\n    celery_worker.container.set_command(\n        'celery -A pytest_celery.vendors.worker.app worker --loglevel=INFO -P solo '\n        '-E -Q celery --without-gossip --without-mingle '\n        f'--without-heartbeat -s /tmp/celerybeat-schedule '\n        f'--logfile=/var/log/celery.log '\n        f'--hostname={DEFAULT_WORKER_CONTAINER_NAME}@%h'\n    )\n    return celery_worker\n\n\ndef test_solo_pool(celery_setup, xtest_add_task):\n    \"\"\"\n    Validate that we can run a task with the solo pool worker.\n    \"\"\"\n    # Create a Celery app\n    worker = celery_setup.worker\n    app = worker.app()\n\n    # Check pool type matches our expected configuration\n    inspector = CeleryInspector(app)\n    stats = inspector.stats()\n    worker_stats = stats[DEFAULT_WORKER_CONTAINER_NAME]\n    assert worker_stats['pool']['max-concurrency'] == 1\n    assert worker_stats['pool']['max-tasks-per-child'] == 'N/A'\n    assert worker_stats['pool']['processes'] == [None]\n    assert worker_stats['pool']['timeouts'] == [0, 0]\n\n    # Submit a task\n    task = worker.import_task('pytest_celery.vendors.worker.tasks.add')\n    result = task.delay(1, 2)\n    assert result.get(timeout=5) == 3\n```\n\n----------------------------------------\n\nTITLE: Default Worker Utils Module Reference\nDESCRIPTION: The default utility module that provides the core testing functionality for Celery worker components. Any custom module must implement all these functions to maintain compatibility with the CeleryTestWorker API.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/utils-module.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# This reference to the default utils.py module is provided but not shown in the response as it's a literalinclude reference\n```\n\n----------------------------------------\n\nTITLE: Defining Celery Signal Handlers in Python Module\nDESCRIPTION: This code snippet represents a Python module containing Celery signal handlers. These handlers are intended to be connected on the consumer side (worker) of a Celery application.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/signals.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\n# ... (content of the signals.py file)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Backend for Celery Testing\nDESCRIPTION: Creates a Celery backend cluster fixture using Redis. This fixture sets up the backend, yields the cluster for testing, and handles teardown afterward.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/setup-matrix.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef celery_backend_cluster(celery_redis_backend: RedisTestBackend) -> CeleryBackendCluster:\n    cluster = CeleryBackendCluster(celery_redis_backend)\n    yield cluster\n    cluster.teardown()\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Worker Container in Python for pytest-celery\nDESCRIPTION: This code snippet shows how to register a custom worker container using pytest fixtures. It includes both the default fixture and a session-scoped fixture for configuration before building.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/vendors.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_container_cls() -> Type[CeleryWorkerContainer]:\n    return MyWorkerContainer\n\n@pytest.fixture(scope=\"session\")\ndef default_worker_container_session_cls() -> Type[CeleryWorkerContainer]:\n    return MyWorkerContainer\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Management Broker Class\nDESCRIPTION: Custom broker class that extends RabbitMQTestBroker with management URL functionality.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/rabbitmq_management.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass RabbitMQManagementTestBroker(RabbitMQTestBroker):\n    def get_management_url(self) -> str:\n        ip = self.container.attrs[\"NetworkSettings\"][\"Ports\"][\"15672/tcp\"][0][\"HostIp\"]\n        port = self.container.attrs[\"NetworkSettings\"][\"Ports\"][\"15672/tcp\"][0][\"HostPort\"]\n        return f\"http://{ip}:{port}\"\n```\n\n----------------------------------------\n\nTITLE: Custom DjangoWorkerContainer Class for pytest-celery\nDESCRIPTION: Defines a custom worker container class that extends CeleryWorkerContainer to configure specific settings for Django worker tests, including log level, worker name, and queue.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/django.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass DjangoWorkerContainer(CeleryWorkerContainer):\n    @property\n    def client(self) -> Any:\n        return self\n\n    @classmethod\n    def version(cls) -> str:\n        return celery.__version__\n\n    @classmethod\n    def log_level(cls) -> str:\n        return \"INFO\"\n\n    @classmethod\n    def worker_name(cls) -> str:\n        return \"django_tests_worker\"\n\n    @classmethod\n    def worker_queue(cls) -> str:\n        return \"celery\"\n```\n\n----------------------------------------\n\nTITLE: Worker Volume Configuration\nDESCRIPTION: Configuration example showing how tasks are injected into workers using the default volume.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/default-tasks.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvolumes={\"{default_worker_volume.name}\": defaults.DEFAULT_WORKER_VOLUME},\n```\n\n----------------------------------------\n\nTITLE: Implementing custom Celery worker container class\nDESCRIPTION: Python class extending CeleryWorkerContainer to configure the worker with custom properties like version, logging level, name, and queue.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myworker.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass MyWorkerContainer(CeleryWorkerContainer):\n    @property\n    def client(self) -> Any:\n        return self\n\n    @classmethod\n    def version(cls) -> str:\n        return \"Celery main branch\"\n\n    @classmethod\n    def log_level(cls) -> str:\n        return \"INFO\"\n\n    @classmethod\n    def worker_name(cls) -> str:\n        return \"my_worker\"\n\n    @classmethod\n    def worker_queue(cls) -> str:\n        return \"myworker\"\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Management API Test\nDESCRIPTION: Test case that verifies access to the RabbitMQ management API using default credentials.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/rabbitmq_management.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef test_login_to_broker_alone(celery_rabbitmq_broker: RabbitMQManagementTestBroker):\n    api = celery_rabbitmq_broker.get_management_url() + \"/api/whoami\"\n    response = requests.get(api, auth=HTTPBasicAuth(\"guest\", \"guest\"))\n    assert response.status_code == 200\n    assert response.json()[\"name\"] == \"guest\"\n    assert response.json()[\"tags\"] == [\"administrator\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Docker container fixture for custom worker\nDESCRIPTION: Python fixture to create a Docker container from the custom worker image, with network, volume, and environment configurations for testing.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myworker.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmyworker_container = container(\n    image=\"{myworker_image.id}\",\n    ports=MyWorkerContainer.ports(),\n    environment=fxtr(\"default_worker_env\"),\n    network=\"{default_pytest_celery_network.name}\",\n    volumes={\"{default_worker_volume.name}\": defaults.DEFAULT_WORKER_VOLUME},\n    wrapper_class=MyWorkerContainer,\n    timeout=defaults.DEFAULT_WORKER_CONTAINER_TIMEOUT,\n    command=MyWorkerContainer.command(),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Volumes to Worker Container in pytest-celery\nDESCRIPTION: Example of adding additional volumes to the worker container, including both the default volume and a project-specific volume. This allows mounting the current project directory into the worker container at a specified path.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/includes/worker-breakdown.txt#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvolumes={\n    \"{default_worker_volume.name}\": defaults.DEFAULT_WORKER_VOLUME,\n    os.path.abspath(os.getcwd()): {\n        \"bind\": \"/target/path/in/worker\",\n        \"mode\": \"rw\",\n    },\n},\n```\n\n----------------------------------------\n\nTITLE: Setting Memcached Backend for Celery Bug Report in Python\nDESCRIPTION: This snippet sets up a Memcached backend for a Celery bug report, disabling the default backend matrix. It includes a fixture to control the Memcached version.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/celery-bug-report.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef celery_backend_cluster(celery_memcached_backend: MemcachedTestBackend) -> CeleryBackendCluster:\n    cluster = CeleryBackendCluster(celery_memcached_backend)\n    yield cluster\n    cluster.teardown()\n```\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_memcached_backend_image() -> str:\n    return \"memcached:latest\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Worker Component with Container and Node in pytest-celery\nDESCRIPTION: Fixture for setting up a Celery worker component that integrates a worker container with a test node. This fixture receives the worker container during initialization to create a CeleryTestWorker instance.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/includes/worker-breakdown.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef celery_setup_worker(\n    ...\n    default_worker_container: CeleryWorkerContainer,\n    default_worker_app: Celery,\n    ...\n) -> CeleryTestWorker:\n```\n\n----------------------------------------\n\nTITLE: Celery Tasks Implementation for Gevent Pool Example\nDESCRIPTION: Python module implementing Celery tasks used in the gevent pool example, based on the official Celery gevent example.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/worker_pool.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom celery import Celery\nimport time\n\napp = Celery(\n    'tasks',\n    broker='pyamqp://guest:guest@rabbit:5672',\n    backend='rpc://guest:guest@rabbit:5672',\n)\n\n\n@app.task\ndef add(x, y):\n    time.sleep(1.0)\n    return x + y\n```\n\n----------------------------------------\n\nTITLE: Creating Docker image build fixture for custom worker\nDESCRIPTION: Python fixture using pytest-docker-tools to build a Docker image for the custom Celery worker from the defined Dockerfile.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myworker.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmyworker_image = build(\n    path=\".\",\n    dockerfile=\"tests/myworker/Dockerfile\",\n    tag=\"pytest-celery/myworker:example\",\n    buildargs=MyWorkerContainer.buildargs(),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Backend Fixtures with Custom Vhost\nDESCRIPTION: Defines pytest fixtures for Redis backend using the custom backend class that specifies a different vhost. Sets up the backend and ensures proper teardown.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/vhost.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef redis_backend(redis_test_container: RedisContainer) -> MyRedisTestBackend:\n    backend = MyRedisTestBackend(redis_test_container)\n    yield backend\n    backend.teardown()\n\n\n@pytest.fixture\ndef celery_backend_cluster(redis_backend: MyRedisTestBackend) -> CeleryBackendCluster:\n    cluster = CeleryBackendCluster(redis_backend)\n    yield cluster\n    cluster.teardown()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Django Project in Docker Container\nDESCRIPTION: Configures the working directory, copies and installs requirements, and sets up the command to start the Celery worker for the Django project.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/django.rst#2025-04-21_snippet_4\n\nLANGUAGE: docker\nCODE:\n```\n# Install packages\nWORKDIR /src\n\nCOPY --chown=test_user:test_user requirements.txt .\nRUN pip install --no-cache-dir --upgrade pip\nRUN pip install -r ./requirements.txt\n\n# Switch to the test_user\nUSER test_user\n\n# Start the celery worker\nCMD celery -A proj worker --loglevel=$LOG_LEVEL -n $WORKER_NAME@%h -Q $WORKER_QUEUE\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Django Worker Tests\nDESCRIPTION: Creates pytest fixtures to build the worker Docker image and container using pytest-docker-tools, mounting the project directory and configuring network settings.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/django.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nworker_image = build(\n    path=\".\",\n    dockerfile=\"tests/DjangoWorker.Dockerfile\",\n    tag=\"pytest-celery/examples/django:example\",\n    buildargs=DjangoWorkerContainer.buildargs(),\n)\n\n\ndefault_worker_container = container(\n    image=\"{worker_image.id}\",\n    ports=fxtr(\"default_worker_ports\"),\n    environment=fxtr(\"default_worker_env\"),\n    network=\"{default_pytest_celery_network.name}\",\n    volumes={\n        \"{default_worker_volume.name}\": defaults.DEFAULT_WORKER_VOLUME,\n        os.path.abspath(os.getcwd()): {\n            \"bind\": \"/src\",\n            \"mode\": \"rw\",\n        },\n    },\n    wrapper_class=DjangoWorkerContainer,\n    timeout=defaults.DEFAULT_WORKER_CONTAINER_TIMEOUT,\n)\n```\n\n----------------------------------------\n\nTITLE: Adding custom worker to Celery worker cluster for testing\nDESCRIPTION: Pytest fixture that integrates the custom worker with the default worker in a CeleryWorkerCluster for testing both simultaneously.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myworker.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef celery_worker_cluster(\n    celery_worker: CeleryTestWorker,\n    myworker_worker: CeleryTestWorker,\n) -> CeleryWorkerCluster:\n    cluster = CeleryWorkerCluster(celery_worker, myworker_worker)\n    yield cluster\n    cluster.teardown()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Redis Backend Class with Different Vhost\nDESCRIPTION: Defines a custom Redis backend class that extends RedisTestBackend to use a different vhost (1) for the result backend functionality.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/vhost.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyRedisTestBackend(RedisTestBackend):\n    def config(self, *args: tuple, **kwargs: dict) -> dict:\n        return super().config(vhost=1, *args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Custom Worker Container Build Configuration\nDESCRIPTION: Configuration for building and setting up a custom worker container using pytest-docker-tools\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/next-steps.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmyworker_image = build(\n    path=\".\",\n    dockerfile=\"tests/myworker/Dockerfile\",\n    tag=\"pytest-celery/myworker:example\",\n    buildargs=MyWorkerContainer.buildargs(),\n)\n\n\nmyworker_container = container(\n    image=\"{myworker_image.id}\",\n    ports=MyWorkerContainer.ports(),\n    environment=fxtr(\"default_worker_env\"),\n    network=\"{default_pytest_celery_network.name}\",\n    volumes={\"{default_worker_volume.name}\": defaults.DEFAULT_WORKER_VOLUME},\n    wrapper_class=MyWorkerContainer,\n    timeout=defaults.DEFAULT_WORKER_CONTAINER_TIMEOUT,\n    command=MyWorkerContainer.command(),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring worker concurrency in pytest-celery\nDESCRIPTION: Example of how to manage worker concurrency settings using the default_worker_app fixture in pytest-celery.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/faq.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_app(default_worker_app: Celery) -> Celery:\n    app = default_worker_app\n    app.conf.worker_concurrency = 42\n    return app\n```\n\n----------------------------------------\n\nTITLE: Configuring a RabbitMQ Broker Cluster Fixture\nDESCRIPTION: Defines a pytest fixture that configures a single RabbitMQ broker instead of using the default broker matrix. The fixture sets up and tears down the broker cluster for each test.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/first-steps.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef celery_broker_cluster(celery_rabbitmq_broker: RabbitMQTestBroker) -> CeleryBrokerCluster:\n    cluster = CeleryBrokerCluster(celery_rabbitmq_broker)\n    yield cluster\n    cluster.teardown()\n```\n\n----------------------------------------\n\nTITLE: Defining Celery Workflow with Multiple Workers\nDESCRIPTION: Demonstrates a Celery canvas that utilizes both workers by chaining group tasks with a legacy queue task.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/hybrid_setup.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncanvas = (\n    group(\n        identity.si(\"Hello, \"),\n        identity.si(\"world!\"),\n    )\n    | noop.s().set(queue=\"legacy\")\n    | identity.si(\"Done!\")\n)\n```\n\n----------------------------------------\n\nTITLE: Adding optional debugpy support to Celery worker container\nDESCRIPTION: Extension methods for enabling debugpy in the worker container, allowing for remote debugging capabilities.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myworker.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef ports(cls) -> dict | None:\n    return WORKER_DEBUGPY_PORTS\n\n@classmethod\ndef command(cls, *args: str, **kwargs: dict) -> list[str]:\n    return super().command(*args, debugpy=True, wait_for_client=True, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Redis Backend Cluster Fixture\nDESCRIPTION: Defines a pytest fixture that configures a single Redis backend instead of using the default backend matrix. The fixture sets up and tears down the backend cluster for each test.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/first-steps.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef celery_backend_cluster(celery_redis_backend: RedisTestBackend) -> CeleryBackendCluster:\n    cluster = CeleryBackendCluster(celery_redis_backend)\n    yield cluster\n    cluster.teardown()\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Gevent Pool Worker\nDESCRIPTION: Dockerfile configuration for creating a custom Celery worker with gevent pool support, based on the myworker example.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/worker_pool.rst#2025-04-21_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\nFROM python:3.11-alpine\n\nWORKDIR /app\n\nCOPY requirements.txt /app/\nRUN pip install -r requirements.txt\n\nCOPY . /app/\n\nCMD [\"celery\", \"-A\", \"tasks\", \"worker\", \"--loglevel=INFO\", \"-P\", \"gevent\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Built-in Worker Version for Celery Bug Report in Python\nDESCRIPTION: This snippet sets the built-in worker to a specific Celery release for a bug report.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/celery-bug-report.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_celery_version() -> str:\n    return \"4.4.7\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Redis Container for Celery Testing\nDESCRIPTION: Creates a Redis container using pytest-celery's container fixtures. This container will be used as both broker and result backend with different vhosts.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/vhost.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nredis_image = fetch(repository=REDIS_IMAGE)\nredis_test_container: RedisContainer = container(\n    image=\"{redis_image.id}\",\n    ports=REDIS_PORTS,\n    environment=REDIS_ENV,\n    network=\"{default_pytest_celery_network.name}\",\n    wrapper_class=RedisContainer,\n    timeout=REDIS_CONTAINER_TIMEOUT,\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Worker Container in Python Test for pytest-celery\nDESCRIPTION: This code snippet demonstrates how to access and use a custom worker container in a pytest test function. It shows how to call custom methods defined in the worker container class.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/vendors.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef test_accessing_post_initialization_logic(celery_setup: CeleryTestSetup):\n    worker: MyWorkerContainer = celery_setup.worker\n    worker.post_initialization_logic()\n```\n\n----------------------------------------\n\nTITLE: Testing Celery Worker with Gevent Pool\nDESCRIPTION: Test implementation creating a custom CeleryWorkerContainer with gevent pool configuration. This part shows how to configure the worker.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/worker_pool.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nimport docker\nfrom pytest_celery.vendors.rabbit import RabbitMQContainer\nfrom pytest_celery.vendors.worker.container import CeleryWorkerContainer\nfrom pytest_celery.api.inspector import CeleryInspector\nfrom pytest_celery.defaults import DEFAULT_WORKER_CONTAINER_NAME\nfrom pytest_celery.vendors.worker import MANAGEMENT_API_PORT\n\n\n@pytest.fixture(scope=\"session\")\ndef celery_worker_container():\n    \"\"\"\n    Create a custom worker container with the gevent pool.\n    \"\"\"\n    return (\n        CeleryWorkerContainer()\n        .set_name(DEFAULT_WORKER_CONTAINER_NAME)\n        .with_exposed_port(MANAGEMENT_API_PORT)\n        .with_file(\n            'tasks.py',\n            '/app/tasks.py')\n        .set_image('pytest-celery-examples/worker-pool:latest')\n        .set_command(\n            'celery -A tasks worker --loglevel=INFO -P gevent '\n            '-E -Q celery --without-gossip --without-mingle '\n            f'--without-heartbeat -s /tmp/celerybeat-schedule '\n            f'--logfile=/var/log/celery.log '\n            f'--hostname={DEFAULT_WORKER_CONTAINER_NAME}@%h'\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Worker Container in pytest-celery\nDESCRIPTION: Container configuration for the default Celery worker, specifying image, ports, environment, network, volumes, wrapper class, timeout, and command. This function uses fixtures to populate each configuration parameter.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/includes/worker-breakdown.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndefault_worker_container = container(\n    image=\"{celery_base_worker_image.id}\",\n    ports=fxtr(\"default_worker_ports\"),\n    environment=fxtr(\"default_worker_env\"),\n    network=\"{default_pytest_celery_network.name}\",\n    volumes={\"{default_worker_volume.name}\": DEFAULT_WORKER_VOLUME},\n    wrapper_class=CeleryWorkerContainer,\n    timeout=DEFAULT_WORKER_CONTAINER_TIMEOUT,\n    command=fxtr(\"default_worker_command\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Ping Test with Parameterized Celery Version\nDESCRIPTION: Simple test case that runs against each Celery version defined in the test class. It sends a ping task and verifies the response is 'pong', executed for each version in the specified range.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/range.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef test_ping(self, celery_setup: CeleryTestSetup, default_worker_celery_version: str):\n    sig: Signature = ping.s()\n    res: AsyncResult = sig.apply_async()\n    assert res.get(timeout=RESULT_TIMEOUT) == \"pong\"\n```\n\n----------------------------------------\n\nTITLE: Using Celery Tests Tasks for Bug Report in Python\nDESCRIPTION: This snippet shows how to use tasks from Celery's test suite in a bug report script.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/celery-bug-report.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_celery import CeleryTestSetup\n\nfrom t.integration.tasks import identity\n\n\nclass TestBug:\n    def test_issue_1234(self, celery_setup: CeleryTestSetup):\n        assert identity.s(\"test_issue_1234\").apply_async(queue=celery_setup.worker.worker_queue).get() == \"test_issue_1234\"\n```\n\n----------------------------------------\n\nTITLE: Worker Testing with Context Manager in Python\nDESCRIPTION: Example test function demonstrating worker verification using iteration over the worker cluster.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/next-steps.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef test_myworker(celery_setup: CeleryTestSetup):\n    worker: CeleryTestWorker\n    for worker in celery_setup.worker_cluster:\n        assert worker.ready()\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Broker for Celery Testing\nDESCRIPTION: Creates a Celery broker cluster fixture using Redis. This fixture sets up the broker, yields the cluster for testing, and handles teardown afterward.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/setup-matrix.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef celery_broker_cluster(celery_redis_broker: RedisTestBroker) -> CeleryBrokerCluster:\n    cluster = CeleryBrokerCluster(celery_redis_broker)\n    yield cluster\n    cluster.teardown()\n```\n\n----------------------------------------\n\nTITLE: Custom Worker Class Implementation\nDESCRIPTION: Extended CeleryTestWorker class implementation with custom myfunc() API\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myutils.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyWorker(CeleryTestWorker):\n\n    def myfunc(self) -> bool:\n        exit_code, output = self.container.exec_run(\n            'python -c \"from utils import myfunc; print(myfunc())\"',\n        )\n        if exit_code != 0:\n            raise RuntimeError(f\"Error: {output}\")\n        output = output.decode(\"utf-8\")\n        return output.strip()\n\n\n@pytest.fixture\ndef default_worker_cls() -> type[CeleryTestWorker]:\n    return MyWorker\n```\n\n----------------------------------------\n\nTITLE: Setting Redis Broker for Celery Bug Report in Python\nDESCRIPTION: This snippet sets up a Redis broker for a Celery bug report, disabling the default broker matrix. It includes a fixture to control the Redis version.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/celery-bug-report.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef celery_broker_cluster(celery_redis_broker: RedisTestBroker) -> CeleryBrokerCluster:\n    cluster = CeleryBrokerCluster(celery_redis_broker)\n    yield cluster\n    cluster.teardown()\n```\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_redis_broker_image() -> str:\n    return \"redis:latest\"\n```\n\n----------------------------------------\n\nTITLE: Project File Structure for Django Celery Testing\nDESCRIPTION: Diagram showing the relevant file structure for a Django Celery test project, including the test directory, tasks implementation, and requirements file.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/django.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndjango/\n├── demoapp/\n│   ├── tasks.py\n├── tests/\n│   ├── __init__.py\n│   ├── conftest.py\n│   └── DjangoWorker.Dockerfile\n│   └── test_tasks.py\n└── requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing and Running pytest-celery\nDESCRIPTION: Commands to install pytest-celery and run a specific test case. The plugin automatically handles Docker requirements for testing.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/celery-bug-report.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\npip install -U \"pytest-celery[all]\"\npytest -xsv test_issue_1234.py\n```\n\n----------------------------------------\n\nTITLE: VSCode Debug Configuration for pytest-celery\nDESCRIPTION: JSON configuration for VSCode debugging setup. Includes configurations for debugging tests with specific environment variables and for attaching to a Celery worker process.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/local-development-environment.rst#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python: Debug Tests\",\n            \"type\": \"debugpy\",\n            \"request\": \"launch\",\n            \"program\": \"${file}\",\n            \"purpose\": [\n                \"debug-test\",\n            ],\n            \"console\": \"integratedTerminal\",\n            \"justMyCode\": false,\n            \"presentation\": {\n                \"hidden\": true\n            },\n            // Disable cov to allow breakpoints when launched from VS Code Python\n            \"env\": {\n                \"PYTHONUNBUFFERED\": \"1\",\n                \"PYTHONDONTWRITEBYTECODE\": \"1\",\n                \"PYTEST_ADDOPTS\": \"--no-cov --exitfirst\"\n            },\n            \"stopOnEntry\": false,\n            \"showReturnValue\": true,\n            \"redirectOutput\": true\n        },\n        {\n            \"name\": \"Attach to Celery Worker\",\n            \"type\": \"debugpy\",\n            \"request\": \"attach\",\n            \"connect\": {\n                \"host\": \"localhost\",\n                \"port\": 5678\n            },\n            \"pathMappings\": [\n                {\n                    \"localRoot\": \"${workspaceFolder}\",\n                    \"remoteRoot\": \"path-to-celery-source-in-container\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Utils Module Implementation\nDESCRIPTION: Implementation of custom utility function myfunc() while maintaining access to original utils.py functionality\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myutils.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_celery.vendors.worker.content.utils import get_running_processes_info  # noqa\n\n\ndef myfunc():\n    return \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Defining Worker Volume Configuration in pytest-celery\nDESCRIPTION: Configuration for the default worker volume binding. This defines how the plugin's volume is mounted in the worker container, binding to /app with read/write access.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/includes/worker-breakdown.txt#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nWORKER_VOLUME = {\n    \"bind\": \"/app\",\n    \"mode\": \"rw\",\n}\n```\n\n----------------------------------------\n\nTITLE: Setting RabbitMQ Broker for Celery Bug Report in Python\nDESCRIPTION: This snippet sets up a RabbitMQ broker for a Celery bug report, disabling the default broker matrix. It includes a fixture to control the RabbitMQ version.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/celery-bug-report.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef celery_broker_cluster(celery_rabbitmq_broker: RabbitMQTestBroker) -> CeleryBrokerCluster:\n    cluster = CeleryBrokerCluster(celery_rabbitmq_broker)\n    yield cluster\n    cluster.teardown()\n```\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_rabbitmq_broker_image() -> str:\n    return \"rabbitmq:latest\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Backend for Celery Testing\nDESCRIPTION: Creates a fixture that disables the Celery backend by returning None. This configuration is used when testing scenarios that don't require a result backend.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/setup-matrix.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef celery_backend_cluster():\n    return None\n```\n\n----------------------------------------\n\nTITLE: Configuring Gevent Worker Dockerfile\nDESCRIPTION: Defines a Dockerfile for setting up a Celery worker with gevent pool support.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/hybrid_setup.rst#2025-04-21_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\nRUN pip install \"celery[gevent]\" \"pytest-celery[all]==1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Base Tox Configuration\nDESCRIPTION: Main tox configuration section defining the test environments for unit, integration, and smoke testing.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/tox.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[tox]\nenvlist =\n    py{37,38,39,310,311,312}-{unit,integration,smoke}\n    py312-{lint,mypy}\n    docs\n```\n\n----------------------------------------\n\nTITLE: Configuring Localstack Broker in Python for pytest-celery\nDESCRIPTION: This code snippet demonstrates how to configure the Localstack broker for use with pytest-celery. It includes fixtures for setting environment variables and updating the Celery application configuration.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/vendors.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nimport pytest\nfrom celery import Celery\n\nfrom pytest_celery import LOCALSTACK_CREDS\n\n@pytest.fixture\ndef default_worker_env(default_worker_env: dict) -> dict:\n    default_worker_env.update(LOCALSTACK_CREDS)\n    return default_worker_env\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef set_aws_credentials():\n    os.environ.update(LOCALSTACK_CREDS)\n\n\n@pytest.fixture\ndef default_worker_app(default_worker_app: Celery) -> Celery:\n    app = default_worker_app\n    if app.conf.broker_url and app.conf.broker_url.startswith(\"sqs\"):\n        app.conf.broker_transport_options[\"region\"] = LOCALSTACK_CREDS[\"AWS_DEFAULT_REGION\"]\n    return app\n```\n\n----------------------------------------\n\nTITLE: Using Signal Handlers for Celery Bug Report in Python\nDESCRIPTION: This snippet demonstrates how to use signal handlers in a Celery bug report test case.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/celery-bug-report.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef test_issue_1234(self, celery_setup: CeleryTestSetup):\n    @after_task_publish.connect\n    def signal_handler(*args, **kwargs):\n        nonlocal signal_was_called\n        signal_was_called = True\n\n    signal_was_called = False\n    noop.s().apply_async(queue=celery_setup.worker.worker_queue)\n    assert signal_was_called is True\n```\n\n----------------------------------------\n\nTITLE: Setting Celery Environment Variables for Docker Container\nDESCRIPTION: Configures build arguments for Celery log level, worker name, and queue that will be used when running the worker in the test environment.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/django.rst#2025-04-21_snippet_3\n\nLANGUAGE: docker\nCODE:\n```\n# Set arguments\nARG CELERY_LOG_LEVEL=INFO\nARG CELERY_WORKER_NAME=my_worker\nARG CELERY_WORKER_QUEUE=celery\nENV LOG_LEVEL=$CELERY_LOG_LEVEL\nENV WORKER_NAME=$CELERY_WORKER_NAME\nENV WORKER_QUEUE=$CELERY_WORKER_QUEUE\n\nEXPOSE 5678\n```\n\n----------------------------------------\n\nTITLE: Test Execution Output with Parallel Testing\nDESCRIPTION: Shows the output of running tests in parallel with pytest-xdist, demonstrating how tests are executed for different Celery versions and configurations, including both individual worker tests and cluster tests.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/range.rst#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nPASSED tests/test_range.py::TestRange::test_ping[5.0.0-celery_setup_worker-celery_redis_broker-celery_redis_backend]\nPASSED tests/test_range.py::TestRange::test_ping[4.4.7-celery_setup_worker-celery_redis_broker-celery_redis_backend]\nPASSED tests/test_range.py::TestRange::test_ping[4.4.7-celery_setup_worker-celery_rabbitmq_broker-celery_redis_backend]\nPASSED tests/test_range.py::TestRange::test_ping[5.0.0-celery_setup_worker-celery_rabbitmq_broker-celery_redis_backend]\n[Found worker v4.4.7 in cluster] SUBPASS tests/test_range_cluster.py::TestClusterList::test_worker_cluster_with_fixed_list[celery_worker_cluster0-celery_redis_broker-celery_redis_backend]\n[Found worker v4.4.7 in cluster] SUBPASS tests/test_range_cluster.py::TestClusterList::test_worker_cluster_with_fixed_list[celery_worker_cluster0-celery_rabbitmq_broker-celery_redis_backend]\n[Found worker v5.2.7 in cluster] SUBPASS tests/test_range_cluster.py::TestClusterList::test_worker_cluster_with_fixed_list[celery_worker_cluster0-celery_redis_broker-celery_redis_backend]\n[Found worker v5.2.7 in cluster] SUBPASS tests/test_range_cluster.py::TestClusterList::test_worker_cluster_with_fixed_list[celery_worker_cluster0-celery_rabbitmq_broker-celery_redis_backend]\n[Found worker v5.3.0 in cluster] SUBPASS tests/test_range_cluster.py::TestClusterList::test_worker_cluster_with_fixed_list[celery_worker_cluster0-celery_redis_broker-celery_redis_backend]\n[Found worker v5.3.0 in cluster] SUBPASS tests/test_range_cluster.py::TestClusterList::test_worker_cluster_with_fixed_list[celery_worker_cluster0-celery_rabbitmq_broker-celery_redis_backend]\nPASSED tests/test_range_cluster.py::TestClusterList::test_worker_cluster_with_fixed_list[celery_worker_cluster0-celery_redis_broker-celery_redis_backend]\nPASSED tests/test_range_cluster.py::TestClusterList::test_worker_cluster_with_fixed_list[celery_worker_cluster0-celery_rabbitmq_broker-celery_redis_backend]\n[Found worker v5.0.0 in cluster] SUBPASS tests/test_range_cluster.py::TestClusterRange::test_worker_cluster_with_versions_range[celery_worker_cluster0-celery_redis_broker-celery_redis_backend]\n```\n\n----------------------------------------\n\nTITLE: Running pytest-celery Tests in Console\nDESCRIPTION: Console output showing pytest execution with pytest-celery. The test runs against multiple broker and backend combinations, specifically with RabbitMQ and Redis backends.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/first-steps.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npytest tests/test_example.py\n======================================================================= test session starts ===================================\n...\n\ntests/test_example.py::test_hello_world[celery_setup_worker-celery_rabbitmq_broker-celery_redis_backend] PASSED         [ 50%]\ntests/test_example.py::test_hello_world[celery_setup_worker-celery_redis_broker-celery_redis_backend] PASSED            [100%]\n\n...\n======================================================================= 2 passed in 22.78s ====================================\n```\n\n----------------------------------------\n\nTITLE: Tasks Module Configuration in Python\nDESCRIPTION: Example showing how to add task modules to the worker container using pytest fixtures\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/next-steps.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_tasks(default_worker_tasks: set) -> set:\n    from tests import tasks\n\n    default_worker_tasks.add(tasks)\n    return default_worker_tasks\n```\n\n----------------------------------------\n\nTITLE: Enabling Localstack Broker in Setup Matrix for pytest-celery\nDESCRIPTION: This code snippet shows how to enable the Localstack broker in the default setup matrix for pytest-celery. It includes importing necessary components and defining a fixture for the Celery broker.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/vendors.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_celery import ALL_CELERY_BROKERS\nfrom pytest_celery import CELERY_LOCALSTACK_BROKER\nfrom pytest_celery import CeleryTestBroker\nfrom pytest_celery import _is_vendor_installed\n\nif _is_vendor_installed(\"localstack\"):\n    ALL_CELERY_BROKERS.add(CELERY_LOCALSTACK_BROKER)\n\n\n@pytest.fixture(params=ALL_CELERY_BROKERS)\ndef celery_broker(request: pytest.FixtureRequest) -> CeleryTestBroker:  # type: ignore\n    broker: CeleryTestBroker = request.getfixturevalue(request.param)\n    yield broker\n    broker.teardown()\n```\n\n----------------------------------------\n\nTITLE: Fetching Celery Versions from PyPI with Python\nDESCRIPTION: Helper function that retrieves and filters Celery versions from PyPI based on a specified version range. This is used to dynamically generate test cases for different Celery versions.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/range.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_celery_versions(start_version: str, end_version: str) -> list[str]:\n    url = \"https://pypi.org/pypi/celery/json\"\n    response = requests.get(url)\n    data = response.json()\n    all_versions = data[\"releases\"].keys()\n\n    filtered_versions = [\n        v\n        for v in all_versions\n        if (\n            parse_version(start_version) <= parse_version(v) <= parse_version(end_version)\n            and not parse_version(v).is_prerelease\n        )\n    ]\n\n    return sorted(filtered_versions, key=parse_version)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Package CI Workflow for pytest-celery\nDESCRIPTION: GitHub Actions workflow configuration for running unit, integration, and smoke tests on every push and pull request to ensure the plugin's functionality.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/release.rst#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n.github/workflows/python-package.yml\n```\n\n----------------------------------------\n\nTITLE: Defining Celery Version Lists for Cluster Testing\nDESCRIPTION: Code that sets up version ranges and fixed lists of Celery versions for testing worker clusters. This demonstrates two different approaches to defining version sets for compatibility testing.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/range.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nversions_range = get_celery_versions(\"v5.0.0\", \"v5.0.5\")\nversions_list = [\"v4.4.7\", \"v5.2.7\", \"v5.3.0\"]\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Containers for RabbitMQ Test Iteration\nDESCRIPTION: Console output showing the Docker containers created for a test iteration using RabbitMQ as the broker and Redis as the result backend, along with the Celery worker container.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/first-steps.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndocker ps\nCONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS          PORTS                                                                     NAMES\n0ffb4e75b5e4   c9ef6c81f5dc      \"/bin/sh -c 'celery …\"   30 seconds ago   Up 29 seconds                                                                             upbeat_feistel\nac085d253cda   redis:latest      \"docker-entrypoint.s…\"   31 seconds ago   Up 30 seconds   0.0.0.0:64057->6379/tcp                                                   gallant_carson\ndeeb60b73af5   rabbitmq:latest   \"docker-entrypoint.s…\"   36 seconds ago   Up 35 seconds   4369/tcp, 5671/tcp, 15691-15692/tcp, 25672/tcp, 0.0.0.0:64056->5672/tcp   romantic_cannon\n```\n\n----------------------------------------\n\nTITLE: Defining Legacy Worker Dockerfile\nDESCRIPTION: Specifies a Dockerfile for setting up a Celery 4 worker with prefork pool.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/hybrid_setup.rst#2025-04-21_snippet_3\n\nLANGUAGE: docker\nCODE:\n```\nFROM python:3.7-slim\n\nRUN pip install celery==4.4.7 pytest-celery[all]==1.0.0\n\nCMD [\"celery\", \"-A\", \"celery.contrib.pytest\", \"worker\", \"--pool=prefork\", \"--loglevel=INFO\"]\n```\n\n----------------------------------------\n\nTITLE: Setting up worker app directory for pytest-celery injection\nDESCRIPTION: Configuring the /app directory required by pytest-celery for runtime code injection into the Celery worker and switching to non-privileged user.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myworker.rst#2025-04-21_snippet_5\n\nLANGUAGE: docker\nCODE:\n```\n# The workdir must be /app\nWORKDIR /app\n\n# Switch to the test_user\nUSER test_user\n```\n\n----------------------------------------\n\nTITLE: Celery Worker Configuration Output\nDESCRIPTION: Console output showing the Celery worker's configuration including transport (RabbitMQ) and results backend (Redis) settings in the test environment.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/first-steps.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n -------------- celery_test_worker@0ffb4e75b5e4 v5.3.6 (emerald-rush)\n--- ***** -----\n-- ******* ---- Linux-6.6.12-linuxkit-aarch64-with-glibc2.28 2024-02-04 12:05:15\n- *** --- * ---\n- ** ---------- [config]\n- ** ---------- .> app:         celery_test_app:0xffffba454d90\n- ** ---------- .> transport:   amqp://guest:**@deeb60b73af5:5672//\n- ** ---------- .> results:     redis://ac085d253cda/0\n- *** --- * --- .> concurrency: 10 (prefork)\n-- ******* ---- .> task events: OFF (enable -E to monitor tasks in this worker)\n--- ***** -----\n -------------- [queues]\n                .> celery           exchange=celery(direct) key=celery\n```\n\n----------------------------------------\n\nTITLE: Configuring Localstack (SQS) Broker for Celery Testing\nDESCRIPTION: Creates a Celery broker cluster fixture using Localstack (for SQS). This fixture sets up the broker, yields the cluster for testing, and handles teardown afterward.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/setup-matrix.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef celery_broker_cluster(celery_localstack_broker: LocalstackTestBroker) -> CeleryBrokerCluster:\n    cluster = CeleryBrokerCluster(celery_localstack_broker)\n    yield cluster\n    cluster.teardown()\n```\n\n----------------------------------------\n\nTITLE: Disabling Celery Backend in Tests\nDESCRIPTION: Fixture showing how to disable the Celery result backend by returning None. This prevents result storage but may cause hangs when calling get() on results.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/first-steps.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef celery_backend_cluster():\n    return None\n```\n\n----------------------------------------\n\nTITLE: Verbose Test Session Output with Container Initialization\nDESCRIPTION: Detailed console output showing the test session with container initialization steps, including network creation, waiting for containers to be ready, and the test result.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/first-steps.rst#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n============================= test session starts ==============================\n...\n\ntests/test_example.py::test_hello_world[celery_setup_worker-celery_rabbitmq_broker-celery_redis_backend] Creating network pytest-73fadda9-8fed-401c-a0f9-78e9108818a4\nWaiting for container to be ready......RabbitMQContainer::romantic_cannon is ready.\nWaiting for container to be ready.RedisContainer::gallant_carson is ready.\nCreating volume pytest-0d0ed18e-ae68-4d10-80d4-2d46ccd6d9a7\nBuilding [REDACTED]/site-packages/pytest_celery/vendors/worker......................................................................\nWaiting for container to be ready.Waiting for CeleryWorkerContainer::upbeat_feistel to get ready...\nCeleryWorkerContainer::upbeat_feistel is ready.\nRabbitMQContainer::romantic_cannon is ready.\nRedisContainer::gallant_carson is ready.\nCeleryWorkerContainer::upbeat_feistel is ready.\nPASSED\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Port Configuration\nDESCRIPTION: Pytest fixture that configures the exposed ports for RabbitMQ, including the management UI port.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/rabbitmq_management.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_rabbitmq_broker_ports() -> dict:\n    # Expose the management UI port\n    ports = RABBITMQ_PORTS.copy()\n    ports.update({\"15672/tcp\": None})\n    return ports\n```\n\n----------------------------------------\n\nTITLE: Installing Celery from GitHub in Dockerfile\nDESCRIPTION: Docker commands to set up the working directory, install dependencies from requirements.txt, and clone/install Celery from GitHub.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myworker.rst#2025-04-21_snippet_4\n\nLANGUAGE: docker\nCODE:\n```\n# Install packages\nWORKDIR /src\n\nCOPY --chown=test_user:test_user requirements.txt .\nRUN pip install --no-cache-dir --upgrade pip\nRUN pip install -r ./requirements.txt\nRUN git clone https://github.com/celery/celery.git\n\nWORKDIR /src/celery\n\nRUN pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Defining Celery worker startup command in Dockerfile\nDESCRIPTION: Setting the default command to start the Celery worker with configurable parameters through environment variables.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myworker.rst#2025-04-21_snippet_6\n\nLANGUAGE: docker\nCODE:\n```\n# Start the celery worker\nCMD celery -A app worker --loglevel=$LOG_LEVEL -n $WORKER_NAME@%h -Q $WORKER_QUEUE\n```\n\n----------------------------------------\n\nTITLE: Configuring pytest.ini for pytest-celery logging\nDESCRIPTION: Initial configuration for pytest.ini file to enable plugin logging to the console, which can be helpful for debugging.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/faq.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nlog_cli = true\nlog_cli_level = INFO\nlog_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)\nlog_cli_date_format = %Y-%m-%d %H:%M:%S\n```\n\n----------------------------------------\n\nTITLE: Celery App Configuration Example\nDESCRIPTION: Code showing how the Celery app configuration is handled in the worker container\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/next-steps.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconfig = None\n\nif config:\n    app.config_from_object(config)\n    print(f\"Changed worker configuration: {json.dumps(config, indent=4)}\")\n```\n\n----------------------------------------\n\nTITLE: Parallel Test Environment Configuration\nDESCRIPTION: Configuration for running tests in parallel using both tox and pytest-xdist.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/tox.rst#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[testenv:parallel]\nbasepython = python3.12\ndeps =\n    {[testenv]deps}\n    pytest-xdist\ncommands =\n    tox -p auto -e py312-{unit,integration,smoke} {posargs}\n```\n\n----------------------------------------\n\nTITLE: Creating New Component Fixture in Python\nDESCRIPTION: Pytest fixture for creating a new component instance with proper teardown handling.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/next-steps.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef new_component_name(new_component_container):\n    node: CeleryTestNode = NewComponent(myworker_container)\n    yield node\n    node.teardown()\n```\n\n----------------------------------------\n\nTITLE: Worker Component Testing\nDESCRIPTION: Test case for using myfunc() through a single worker component\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myutils.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef test_myfunc_in_worker(celery_worker: MyWorker):\n    assert celery_worker.myfunc() == \"foo\"\n    assert celery_worker.get_running_processes_info()\n```\n\n----------------------------------------\n\nTITLE: Setting up Celery configuration parameters in Dockerfile\nDESCRIPTION: Configuring build arguments and environment variables for Celery worker customization, including log level, worker name, and queue settings.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myworker.rst#2025-04-21_snippet_3\n\nLANGUAGE: docker\nCODE:\n```\n# Set arguments\nARG CELERY_LOG_LEVEL=INFO\nARG CELERY_WORKER_NAME=my_worker\nARG CELERY_WORKER_QUEUE=celery\nENV LOG_LEVEL=$CELERY_LOG_LEVEL\nENV WORKER_NAME=$CELERY_WORKER_NAME\nENV WORKER_QUEUE=$CELERY_WORKER_QUEUE\n\nEXPOSE 5678\n```\n\n----------------------------------------\n\nTITLE: Testing Redis Container Implementation\nDESCRIPTION: Test class demonstrating basic Redis container functionality testing\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/first-steps.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass test_redis_container:\n    def test_the_underlying_container(self, default_redis_broker: RedisContainer):\n        container = default_redis_broker\n        assert container.client\n        assert container.client.ping()\n        assert container.client.set(\"ready\", \"1\")\n        assert container.client.get(\"ready\") == \"1\"\n        assert container.client.delete(\"ready\")\n```\n\n----------------------------------------\n\nTITLE: Alternative Task Import Method\nDESCRIPTION: Alternative way to import all worker tasks from the vendors module.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/default-tasks.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_celery.vendors.worker import tasks\n```\n\n----------------------------------------\n\nTITLE: Managing Sphinx Documentation Tasks with Makefile for pytest-celery\nDESCRIPTION: This Makefile snippet defines various tasks for managing Sphinx documentation in the pytest-celery project. It includes targets for cleaning, building HTML, checking API docs, checking links, and verifying configuration.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/sphinx.rst#2025-04-21_snippet_0\n\nLANGUAGE: make\nCODE:\n```\n.PHONY: help\nhelp:\n\t@$(SPHINXBUILD) -M help \"$(SOURCEDIR)\" \"$(BUILDDIR)\" $(SPHINXOPTS) $(O)\n\n.PHONY: clean\nclean:\n\t@rm -rf $(BUILDDIR)/*\n\n.PHONY: html\nhtml:\n\t@$(SPHINXBUILD) -M html \"$(SOURCEDIR)\" \"$(BUILDDIR)\" $(SPHINXOPTS) $(O)\n\n.PHONY: apicheck\napicheck:\n\t$(SPHINXAPIDOC) --check-tag-names\n\n.PHONY: linkcheck\nlinkcheck:\n\t$(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) $(BUILDDIR)/linkcheck\n\t@echo\n\t@echo \"Link check complete; look for any errors in the above output \" \\\n\t     \"or in $(BUILDDIR)/linkcheck/output.txt.\"\n\n.PHONY: configcheck\nconfigcheck:\n\t$(SPHINXBUILD) -b dummy $(ALLSPHINXOPTS) $(BUILDDIR)/configcheck\n```\n\n----------------------------------------\n\nTITLE: Utils Module Injection Configuration\nDESCRIPTION: Pytest fixture configuration to inject custom utils module into worker container\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myutils.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_worker_utils_module() -> ModuleType:\n    from tests import myutils\n\n    return myutils\n```\n\n----------------------------------------\n\nTITLE: Defining Testing Dependencies for a Celery Project\nDESCRIPTION: A requirements specification listing pytest packages and pytest-celery for Celery testing. It includes pytest core, pytest-xdist for parallel testing, pytest-rerunfailures for retrying failed tests, and a direct installation of pytest-celery from GitHub with all optional dependencies.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/examples/vhost/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest>=7.4.4\npytest-xdist>=3.5.0\npytest-rerunfailures>=14.0\npytest-celery[all]@git+https://github.com/celery/pytest-celery.git\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Pytest Directly\nDESCRIPTION: Commands to install dependencies and run Celery tests using pytest directly. Includes steps for installing Celery in development mode.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/celery-bug-report.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\npip install -e .\npip install -r requirements/test.txt\npytest -xsv t/smoke -k test_issue_1234\n```\n\n----------------------------------------\n\nTITLE: Creating Test User in Docker Container\nDESCRIPTION: Creates a non-privileged user for running the Celery worker in the Docker container and installs required system dependencies.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/django.rst#2025-04-21_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\n# Create a user to run the worker\nRUN adduser --disabled-password --gecos \"\" test_user\n\n# Install system dependencies\nRUN apt-get update && apt-get install -y build-essential git\n```\n\n----------------------------------------\n\nTITLE: Broker Cluster Configuration\nDESCRIPTION: Pytest fixture that configures the broker cluster to use the custom management broker.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/rabbitmq_management.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef celery_broker_cluster(celery_rabbitmq_broker: RabbitMQTestBroker) -> CeleryBrokerCluster:\n    cluster = CeleryBrokerCluster(celery_rabbitmq_broker)\n    yield cluster\n    cluster.teardown()\n```\n\n----------------------------------------\n\nTITLE: Installing pytest-celery with SQS and Redis vendors\nDESCRIPTION: Command to install pytest-celery with both SQS (via Localstack) and Redis vendors. This setup provides SQS broker and Redis result backend components for testing Celery applications.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/includes/installation.txt#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\npip install -U \"pytest-celery[redis,sqs]\"\n```\n\n----------------------------------------\n\nTITLE: Full Setup Testing\nDESCRIPTION: Test case for using myfunc() in a complete Celery test setup\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myutils.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef test_myfunc_in_setup_worker(celery_setup: CeleryTestSetup):\n    celery_worker: MyWorker = celery_setup.worker\n    assert celery_worker.myfunc() == \"foo\"\n    assert celery_worker.get_running_processes_info()\n```\n\n----------------------------------------\n\nTITLE: Running Complete Celery Test Suite with pytest-celery\nDESCRIPTION: Combined console commands to run all Celery test types (unit, integration, smoke) with pytest-celery to ensure full compatibility.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/release.rst#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\ntox -e 3.12-unit && docker start rabbitmq redis && tox -e 3.12-integration-rabbitmq_redis && docker stop rabbitmq redis && tox -e 3.12-smoke -- -n auto\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for pytest-celery Project\nDESCRIPTION: Lists the package dependencies required for the pytest-celery project. The dependencies include several pytest packages for testing functionality, Celery with gevent support, and references the pytest-celery package from its GitHub repository with all extras enabled.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/examples/worker_pool/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest>=7.4.4\npytest-xdist>=3.5.0\npytest-subtests>=0.11.0\npytest-rerunfailures>=14.0\ncelery[gevent]\npytest-celery[all]@git+https://github.com/celery/pytest-celery.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Build Workflow for pytest-celery\nDESCRIPTION: GitHub Actions workflow that builds the Docker images provided by the plugin to verify they can be constructed successfully.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/release.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n.github/workflows/docker.yml\n```\n\n----------------------------------------\n\nTITLE: Worker Queue Configuration in Python\nDESCRIPTION: Class method implementation for specifying custom worker queue name.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/next-steps.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef worker_queue(cls) -> str:\n    return \"myworker\"\n```\n\n----------------------------------------\n\nTITLE: Running Celery Integration Tests with pytest-celery\nDESCRIPTION: Console commands to start containers, run integration tests, and stop containers when testing Celery with pytest-celery.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/release.rst#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\ndocker start rabbitmq redis\ntox -e 3.12-integration-rabbitmq_redis\ndocker stop rabbitmq redis\n```\n\n----------------------------------------\n\nTITLE: Inline Signal Handlers Implementation\nDESCRIPTION: Example of implementing Celery signal handlers within test code for publisher-side signals\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/next-steps.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom celery.signals import before_task_publish\nfrom celery.signals import after_task_publish\n\ndef test_before_task_publish(celery_setup: CeleryTestSetup):\n    @before_task_publish.connect\n    def before_task_publish_handler(*args, **kwargs):\n        nonlocal signal_was_called\n        signal_was_called = True\n\n    signal_was_called = False\n    mytask.s().apply_async()\n    assert signal_was_called is True\n\ndef test_after_task_publish(self, celery_setup: CeleryTestSetup):\n    @after_task_publish.connect\n    def after_task_publish_handler(*args, **kwargs):\n        nonlocal signal_was_called\n        signal_was_called = True\n\n    signal_was_called = False\n    mytask.s().apply_async()\n    assert signal_was_called is True\n```\n\n----------------------------------------\n\nTITLE: MyPy Type Checking Configuration\nDESCRIPTION: Configuration for running MyPy type checking on the codebase.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/tox.rst#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[testenv:mypy]\nbasepython = python3.12\nextras =\n    types\ndeps =\n    mypy\ncommands =\n    mypy {posargs:src/pytest_celery}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Deployment Workflow for pytest-celery\nDESCRIPTION: GitHub Actions workflow for automated deployment to PyPI when a new release is tagged and published on GitHub, handling the continuous deployment process.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/release.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n.github/workflows/deploy.yml\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for pytest-celery Project\nDESCRIPTION: This requirements list specifies the Python packages needed for testing a Celery project. It includes pytest core, pytest-xdist for parallel testing, pytest-rerunfailures for handling flaky tests, and a Git-hosted version of pytest-celery with all optional dependencies.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/examples/myworker/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\npytest>=7.4.4\npytest-xdist>=3.5.0\npytest-rerunfailures>=14.0\npytest-celery[all]@git+https://github.com/celery/pytest-celery.git\n```\n\n----------------------------------------\n\nTITLE: Running Celery Unit Tests with pytest-celery\nDESCRIPTION: Console command to execute Celery unit tests using tox with the specified Python version to verify compatibility with pytest-celery.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/release.rst#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ntox -e 3.12-unit\n```\n\n----------------------------------------\n\nTITLE: Installing pytest-celery with All Vendors\nDESCRIPTION: Command to install the pytest-celery plugin with all available stable vendors, which configures the plugin to use all vendors in a setup matrix for each test case.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/advanced-installation.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install \"pytest-celery[all]\"\n```\n\n----------------------------------------\n\nTITLE: Direct Function Testing\nDESCRIPTION: Test case for directly calling the custom myfunc()\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myutils.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef test_myfunc():\n    assert myfunc() == \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Running Docker Containers for Celery Integration Tests\nDESCRIPTION: Console commands to pull and run Redis and RabbitMQ Docker containers required for Celery integration tests with pytest-celery.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/release.rst#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ndocker run -d -p 6379:6379 --name redis redis:latest\ndocker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:management\n```\n\n----------------------------------------\n\nTITLE: Setting Up Examples Testing Workflow for pytest-celery\nDESCRIPTION: GitHub Actions workflow that tests the official plugin examples to ensure they work correctly with the current version of the plugin.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/release.rst#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n.github/workflows/examples.yml\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Tox\nDESCRIPTION: Command to run a specific Celery test using tox. Shows how to execute a smoke test targeting a specific issue.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/celery-bug-report.rst#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\ntox -e 3.12-smoke -- -k test_issue_1234\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for pytest-celery Project\nDESCRIPTION: This snippet lists the required Python packages and their versions for the pytest-celery project. It includes pytest, pytest-xdist for distributed testing, pytest-rerunfailures for re-running failed tests, and pytest-celery from a Git repository with all optional dependencies.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/examples/rabbitmq_management/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest>=7.4.4\npytest-xdist>=3.5.0\npytest-rerunfailures>=14.0\npytest-celery[all]@git+https://github.com/celery/pytest-celery.git\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for pytest-celery\nDESCRIPTION: This code snippet lists the required Python packages and their versions for the pytest-celery project. It includes core testing libraries and a development version of pytest-celery itself.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/examples/myutils/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\npytest>=7.4.4\npytest-xdist>=3.5.0\npytest-rerunfailures>=14.0\npytest-celery[all]@git+https://github.com/celery/pytest-celery.git\n```\n\n----------------------------------------\n\nTITLE: Setting Up Parallel Tests Workflow for pytest-celery\nDESCRIPTION: GitHub Actions workflow for testing the plugin's compatibility with parallel running environments, including support for pytest-xdist.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/release.rst#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n.github/workflows/python-package.yml\n```\n\n----------------------------------------\n\nTITLE: Displaying Project File Structure for Redis vhost Example\nDESCRIPTION: Shows the file structure of the Redis vhost example project, highlighting the important files for testing Celery with Redis using different vhosts.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/vhost.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrabbitmq_management/\n├── tests/\n│   ├── __init__.py\n│   ├── conftest.py\n│   └── test_vhost.py\n└── requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Modifying Celery's tox.ini for Testing with Local pytest-celery\nDESCRIPTION: Configuration change to Celery's tox.ini file to use a local development version of pytest-celery for testing compatibility before release.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/release.rst#2025-04-21_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[testenv]\n...\ndeps=\n    -e \"../pytest-celery[all]\"\n    -r{toxinidir}/requirements/test.txt\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Linting Workflow for pytest-celery\nDESCRIPTION: GitHub Actions workflow that performs standard linting checks to maintain code quality and consistency across the pytest-celery codebase.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/release.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n.github/workflows/linting.yml\n```\n\n----------------------------------------\n\nTITLE: Project File Structure Display in Text Format\nDESCRIPTION: Shows the file organization of the example project with a text-based directory tree structure.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/range.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrange/\n├── tests/\n│   ├── __init__.py\n│   ├── conftest.py\n│   └── test_range.py\n│   └── test_range_cluster.py\n└── requirements.txt\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Tox Configuration\nDESCRIPTION: Configuration section for GitHub Actions integration using tox-gh-actions.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/tox.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[gh-actions]\nPython =\n    3.7: py37\n    3.8: py38\n    3.9: py39\n    3.10: py310\n    3.11: py311\n    3.12: py312\n```\n\n----------------------------------------\n\nTITLE: Base Test Environment Configuration\nDESCRIPTION: Base test environment settings defining dependencies and test commands for all environments.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/tox.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[testenv]\npackage = wheel\nwheel_build_env = .pkg\nusedevelop = true\nextras =\n    test\ndeps =\n    pytest-sugar\ncommands =\n    unit: pytest {posargs:tests/unit}\n    integration: pytest {posargs:tests/integration}\n    smoke: pytest {posargs:tests/smoke}\n```\n\n----------------------------------------\n\nTITLE: Linting Environment Configuration\nDESCRIPTION: Configuration for running code linting tools and pre-commit hooks.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/tox.rst#2025-04-21_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[testenv:lint]\nbasepython = python3.12\nskip_install = true\ndeps =\n    pre-commit>=3.5.0\ncommands =\n    pre-commit run --show-diff-on-failure --color=always --all-files\n    sphinx-lint docs/templates docs/source\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for pytest-celery\nDESCRIPTION: Sphinx documentation structure showing the package organization with toctree directives and automodule references for the pytest-celery package.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/reference/pytest_celery.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   pytest_celery.api\n   pytest_celery.fixtures\n   pytest_celery.vendors\n\n.. automodule:: pytest_celery.defaults\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n.. automodule:: pytest_celery.plugin\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n.. automodule:: pytest_celery\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring tox for Docker cleanup in pytest-celery\nDESCRIPTION: Tox configuration snippet for cleaning up Docker artifacts after a test run in pytest-celery.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/faq.rst#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nmake -C ./docs clean\n   :end-before: [testenv:docs]\n```\n\n----------------------------------------\n\nTITLE: Starting a Dockerfile with Python 3.11 base image for Celery worker\nDESCRIPTION: The initial part of the Dockerfile that specifies the base Python image to be used for the custom Celery worker.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myworker.rst#2025-04-21_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\nFROM python:3.11-bookworm\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Module Structure Documentation in RST\nDESCRIPTION: Sphinx documentation structure defining the RabbitMQ vendor package and its submodules including API, container, defaults, and fixtures components.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/reference/pytest_celery.vendors.rabbitmq.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\npytest\\_celery.vendors.rabbitmq package\n=======================================\n\nSubmodules\n----------\n\npytest\\_celery.vendors.rabbitmq.api module\n------------------------------------------\n\n.. automodule:: pytest_celery.vendors.rabbitmq.api\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\npytest\\_celery.vendors.rabbitmq.container module\n------------------------------------------------\n\n.. automodule:: pytest_celery.vendors.rabbitmq.container\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\npytest\\_celery.vendors.rabbitmq.defaults module\n-----------------------------------------------\n\n.. automodule:: pytest_celery.vendors.rabbitmq.defaults\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\npytest\\_celery.vendors.rabbitmq.fixtures module\n-----------------------------------------------\n\n.. automodule:: pytest_celery.vendors.rabbitmq.fixtures\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\nModule contents\n---------------\n\n.. automodule:: pytest_celery.vendors.rabbitmq\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Pytest xdist Environment Configuration\nDESCRIPTION: Configuration for running tests in parallel using pytest-xdist.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/tox.rst#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[testenv:xdist]\nbasepython = python3.12\ndeps =\n    {[testenv]deps}\n    pytest-xdist\ncommands =\n    pytest -n auto {posargs:tests}\n```\n\n----------------------------------------\n\nTITLE: Configuring the Base Docker Image for Django Worker\nDESCRIPTION: Specifies the base Python image for the Celery worker container.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/django.rst#2025-04-21_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\nFROM python:3.11-bookworm\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Block\nDESCRIPTION: ReStructuredText documentation block for pytest-celery Memcached vendor package and submodules.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/reference/pytest_celery.vendors.memcached.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: pytest_celery.vendors.memcached\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Installing pytest-celery with Redis Support\nDESCRIPTION: Command to install the pytest-celery plugin with Redis vendor support, which adds Redis backend and broker components to the default setup matrix.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/advanced-installation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"pytest-celery[redis]\"\n```\n\n----------------------------------------\n\nTITLE: Live Documentation Server Configuration\nDESCRIPTION: Configuration for serving documentation with live reload capability.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/tox.rst#2025-04-21_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[testenv:docs-livehtml]\nbasepython = python3.12\nextras =\n    docs\ncommands =\n    sphinx-autobuild -b html docs/source docs/build/html --port 7010 --host 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Project Structure Definition\nDESCRIPTION: Shows the file structure of the RabbitMQ management example project.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/rabbitmq_management.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrabbitmq_management/\n├── tests/\n│   ├── __init__.py\n│   ├── conftest.py\n│   └── test_management_broker.py\n└── requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing pytest-celery with Redis vendor\nDESCRIPTION: Command to install pytest-celery with the Redis vendor, which provides both broker and result backend components. This will configure the plugin to generate all possible setups using RabbitMQ and Redis vendors.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/includes/installation.txt#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npip install -U \"pytest-celery[redis]\"\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Structure for Pytest Celery Worker Package\nDESCRIPTION: ReStructuredText documentation defining the structure and modules of the pytest_celery.vendors.worker package. Includes automodule directives for container, defaults, fixtures, tasks, and volume modules.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/reference/pytest_celery.vendors.worker.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   pytest_celery.vendors.worker.content\n\n.. automodule:: pytest_celery.vendors.worker.container\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n.. automodule:: pytest_celery.vendors.worker.defaults\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n.. automodule:: pytest_celery.vendors.worker.fixtures\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n.. automodule:: pytest_celery.vendors.worker.tasks\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n.. automodule:: pytest_celery.vendors.worker.volume\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\n.. automodule:: pytest_celery.vendors.worker\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for pytest-celery Project\nDESCRIPTION: This snippet defines the required dependencies for the pytest-celery project. It includes pytest and several pytest plugins such as xdist for distributed testing, subtests for nested tests, and rerunfailures for retrying failed tests. It also references the pytest-celery package with all extras from its GitHub repository.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/examples/range/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npytest>=7.4.4\npytest-xdist>=3.5.0\npytest-subtests>=0.11.0\npytest-rerunfailures>=14.0\npytest-celery[all]@git+https://github.com/celery/pytest-celery.git\n```\n\n----------------------------------------\n\nTITLE: Redis Package Structure in RST\nDESCRIPTION: ReStructuredText documentation showing the package structure and module organization for the Redis vendor implementation in pytest-celery.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/reference/pytest_celery.vendors.redis.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\npytest\\_celery.vendors.redis package\n====================================\n\nSubpackages\n-----------\n\n.. toctree::\n   :maxdepth: 4\n\n   pytest_celery.vendors.redis.backend\n   pytest_celery.vendors.redis.broker\n\nSubmodules\n----------\n\npytest\\_celery.vendors.redis.container module\n---------------------------------------------\n\n.. automodule:: pytest_celery.vendors.redis.container\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\npytest\\_celery.vendors.redis.defaults module\n--------------------------------------------\n\n.. automodule:: pytest_celery.vendors.redis.defaults\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\nModule contents\n---------------\n\n.. automodule:: pytest_celery.vendors.redis\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Installing pytest-celery with specific vendor extras\nDESCRIPTION: Generic command pattern for installing pytest-celery with specific vendor extras. Replace <extra> with the name of the desired vendor such as 'redis', 'memcached', 'sqs', or 'all'.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/includes/installation.txt#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npip install -U \"pytest-celery[<extra>]\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Pytest-Celery Project\nDESCRIPTION: This code snippet lists the required Python packages and their minimum versions for the pytest-celery project. It includes SQLAlchemy, Django, pytest-django, pytest-xdist, pytest-rerunfailures, and a specific version of pytest-celery from a Git repository.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/examples/django/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsqlalchemy>=1.2.18\ndjango>=2.2.1\npytest-django>=4.7.0\npytest-xdist>=3.5.0\npytest-rerunfailures>=14.0\npytest-celery[all]@git+https://github.com/celery/pytest-celery.git\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for pytest-celery Project\nDESCRIPTION: This snippet specifies the Python package dependencies required for the pytest-celery project. It includes pytest and several extensions, Celery with gevent support, and installs pytest-celery from GitHub with all optional dependencies.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/examples/hybrid_setup/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest>=7.4.4\npytest-xdist>=3.5.0\npytest-subtests>=0.11.0\npytest-rerunfailures>=14.0\ncelery[gevent]\npytest-celery[all]@git+https://github.com/celery/pytest-celery.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx documentation for pytest-celery API\nDESCRIPTION: This reStructuredText snippet configures the Sphinx documentation for the pytest-celery API. It sets up a table of contents with a maximum depth of 4 and includes the 'pytest_celery' module.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/reference/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _apiref:\n\nAPI Documentation\n=================\n\n.. toctree::\n   :maxdepth: 4\n\n   pytest_celery\n```\n\n----------------------------------------\n\nTITLE: Installing pytest-celery package via pip\nDESCRIPTION: Command to install the latest version of pytest-celery using pip. This installs the core package with its required dependencies including Celery and the RabbitMQ broker via kombu.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/includes/installation.txt#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install -U pytest-celery\n```\n\n----------------------------------------\n\nTITLE: Displaying Project File Structure\nDESCRIPTION: Shows the file structure of the hybrid_setup project, including test files, Docker configurations, and component definitions.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/hybrid_setup.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhybrid_setup/\n├── requirements.txt\n└── tests/\n    ├── conftest.py\n    ├── test_hybrid_setup.py\n    └── vendors/\n        ├── __init__.py\n        ├── memcached.py\n        ├── rabbitmq.py\n        └── workers/\n            ├── __init__.py\n            ├── gevent.Dockerfile\n            ├── gevent.py\n            ├── legacy.Dockerfile\n            ├── legacy.py\n            ├── signals.py\n            └── tasks.py\n```\n\n----------------------------------------\n\nTITLE: Installing pytest-celery with all vendor dependencies\nDESCRIPTION: Command to install pytest-celery with all available vendor dependencies. This will configure the plugin to generate all possible broker and result backend setups for comprehensive Celery testing.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/includes/installation.txt#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\npip install -U \"pytest-celery[all]\"\n```\n\n----------------------------------------\n\nTITLE: Documentation Build Configuration\nDESCRIPTION: Configuration for building project documentation using Sphinx.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/tox.rst#2025-04-21_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[testenv:docs]\nbasepython = python3.12\nextras =\n    docs\ncommands =\n    sphinx-build -b html docs/source docs/build/html -w docs/warnings.txt\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText for pytest-celery Documentation\nDESCRIPTION: This snippet uses reStructuredText syntax to define a table of contents for the pytest-celery documentation. It includes directives for document title, release version, date, and a structured list of documentation sections.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _getting-started:\n\n=================\n Getting Started\n=================\n\n:Release: |version|\n:Date: |today|\n\n.. toctree::\n    :maxdepth: 2\n\n    introduction\n    first-steps\n    next-steps\n    vendors\n    help\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies with Poetry\nDESCRIPTION: Command to install development dependencies using Poetry package manager including all extras and development groups.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/local-development-environment.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry install -E \"all\" --with test,dev,ci,docs\n```\n\n----------------------------------------\n\nTITLE: API Documentation Generation Configuration\nDESCRIPTION: Configuration for automatically generating API reference documentation.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/tox.rst#2025-04-21_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n[testenv:docs-apidoc]\nbasepython = python3.12\nextras =\n    docs\ncommands =\n    sphinx-apidoc -f -M -e -T -o docs/source/reference src/pytest_celery\n```\n\n----------------------------------------\n\nTITLE: Cloning the pytest-celery Repository via SSH\nDESCRIPTION: Command to clone the pytest-celery repository using SSH protocol.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/local-development-environment.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit@github.com:celery/pytest-celery.git\n```\n\n----------------------------------------\n\nTITLE: Displaying Docker Container Status\nDESCRIPTION: Shows the running Docker containers for Redis broker and Celery worker\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/first-steps.rst#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ndocker ps\nCONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                     NAMES\n37e8ea35206f   c9ef6c81f5dc   \"/bin/sh -c 'celery …\"   28 seconds ago   Up 27 seconds                             adoring_diffie\n5364f8bc75f1   redis:latest   \"docker-entrypoint.s…\"   28 seconds ago   Up 27 seconds   0.0.0.0:64235->6379/tcp   beautiful_bouman\n65fe26ddcd10   redis:latest   \"docker-entrypoint.s…\"   29 seconds ago   Up 28 seconds   0.0.0.0:64234->6379/tcp   reverent_mendeleev\n```\n\n----------------------------------------\n\nTITLE: Including an External RST File in Documentation\nDESCRIPTION: This directive includes the contents of the CONTRIBUTING.rst file from the parent directory into the current document. This is a common pattern in Sphinx documentation to avoid duplication of content.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/contributing.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../CONTRIBUTING.rst\n```\n\n----------------------------------------\n\nTITLE: Project File Structure\nDESCRIPTION: Diagram showing the file structure of the worker pool example project, including the main files and directories.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/worker_pool.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrabbitmq_management/\n├── tests/\n│   ├── __init__.py\n│   └── test_gevent_pool.py\n│   └── test_solo_pool.py\n└── Dockerfile\n└── tasks.py\n└── requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Demonstrating project structure with text-based directory layout\nDESCRIPTION: A text representation of the example project's file structure, showing the organization of test files, worker implementation, and requirements.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myworker.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmyworker/\n├── tests/\n│   ├── myworker/\n│   │   └── __init__.py\n│   │   └── Dockerfile.py\n│   │   └── myworker.py\n│   ├── __init__.py\n│   ├── conftest.py\n│   └── test_myworker.py\n└── requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Requirements for Gevent Pool Worker\nDESCRIPTION: Dependencies required for the Celery worker with gevent pool, listed in requirements.txt file.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/worker_pool.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncelery\ngevent\n```\n\n----------------------------------------\n\nTITLE: Cloning the pytest-celery Repository via HTTPS\nDESCRIPTION: Command to clone the pytest-celery repository using HTTPS protocol.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/local-development-environment.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://github.com/celery/pytest-celery.git\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Broker Image Configuration\nDESCRIPTION: Pytest fixture that specifies the RabbitMQ management Docker image to use.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/rabbitmq_management.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef default_rabbitmq_broker_image() -> str:\n    return \"rabbitmq:management\"\n```\n\n----------------------------------------\n\nTITLE: Documenting pytest_celery.vendors.localstack Package in reStructuredText\nDESCRIPTION: This snippet demonstrates the use of reStructuredText to document the pytest_celery.vendors.localstack package and its submodules. It uses automodule directives to automatically generate documentation for each submodule, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/reference/pytest_celery.vendors.localstack.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\npytest\\_celery.vendors.localstack package\n=========================================\n\nSubmodules\n----------\n\npytest\\_celery.vendors.localstack.api module\n--------------------------------------------\n\n.. automodule:: pytest_celery.vendors.localstack.api\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\npytest\\_celery.vendors.localstack.container module\n--------------------------------------------------\n\n.. automodule:: pytest_celery.vendors.localstack.container\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\npytest\\_celery.vendors.localstack.defaults module\n-------------------------------------------------\n\n.. automodule:: pytest_celery.vendors.localstack.defaults\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\npytest\\_celery.vendors.localstack.fixtures module\n-------------------------------------------------\n\n.. automodule:: pytest_celery.vendors.localstack.fixtures\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\nModule contents\n---------------\n\n.. automodule:: pytest_celery.vendors.localstack\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: File structure showing the organization of the myutils example project\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myutils.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmyutils/\n├── tests/\n│   ├── __init__.py\n│   ├── conftest.py\n│   ├── myutils.py\n│   └── test_myutils.py\n└── requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Cloning the pytest-celery Repository via GitHub CLI\nDESCRIPTION: Command to clone the pytest-celery repository using GitHub CLI.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/local-development-environment.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngh repo clone celery/pytest-celery\n```\n\n----------------------------------------\n\nTITLE: Creating a test user for running the Celery worker\nDESCRIPTION: Docker commands to create a non-privileged user for running the Celery worker and installing system dependencies.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/examples/myworker.rst#2025-04-21_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\n# Create a user to run the worker\nRUN adduser --disabled-password --gecos \"\" test_user\n\n# Install system dependencies\nRUN apt-get update && apt-get install -y build-essential git\n```\n\n----------------------------------------\n\nTITLE: Clean Environment Configuration\nDESCRIPTION: Configuration for cleaning up build artifacts and temporary files.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/tox.rst#2025-04-21_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[testenv:clean]\nbasepython = python3.12\ndeps =\n    docker\n    pytest\ncommands =\n    pytest tests/clean.py --no-cov\n```\n\n----------------------------------------\n\nTITLE: Importing Celery Tasks in Python\nDESCRIPTION: Shows how to import specific tasks from the pytest-celery package.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/default-tasks.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_celery import the, tasks, you, want\n```\n\n----------------------------------------\n\nTITLE: Including External Changelog File in reStructuredText Documentation\nDESCRIPTION: This directive includes the Changelog.rst file from the parent directory into the current document. This is a common pattern in Sphinx documentation to reuse content across multiple documentation files.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/changelog.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: ../Changelog.rst\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for pytest-celery User Guide\nDESCRIPTION: This snippet defines the structure of the User Guide using reStructuredText directives. It sets up a table of contents with maxdepth 1 and lists various sections of the guide.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/userguide/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    advanced-installation\n    setup-matrix\n    app-conf\n    utils-module\n    tasks\n    default-tasks\n    signals\n    celery-bug-report\n    examples/index\n    resources/index\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Dependencies for Development\nDESCRIPTION: Bash script for cleaning up and reinstalling dependencies during development. It uninstalls pytest-celery and celery, removes all packages, and reinstalls everything with Poetry.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/devguide/local-development-environment.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip uninstall pytest-celery celery -y && pip freeze | cut -d \"@\" -f1 | xargs pip uninstall -y;\npip install -U pip ipython;\npoetry install -E \"all\" --with test,dev,ci,docs\n```\n\n----------------------------------------\n\nTITLE: Displaying LICENSE file contents for pytest-celery\nDESCRIPTION: A reference to the pytest-celery LICENSE file which is included as a literal text block in the documentation. The file is displayed with a caption.\nSOURCE: https://github.com/celery/pytest-celery/blob/main/docs/getting-started/help.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.. literalinclude:: ../../LICENSE\n   :language: text\n   :caption: pytest-celery/LICENSE\n```"
  }
]