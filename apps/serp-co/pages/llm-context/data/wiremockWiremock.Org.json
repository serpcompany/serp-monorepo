[
  {
    "owner": "wiremock",
    "repo": "wiremock.org",
    "content": "TITLE: Initializing WireMock in Spring Boot Test (Java)\nDESCRIPTION: Illustrates the basic usage of `@EnableWireMock` in a Spring Boot JUnit 5 test. It starts a WireMock server with default settings, injects its base URL via `@Value(\"${wiremock.server.baseUrl}\")`, defines a simple stub using `stubFor`, and makes a REST client call to the mocked endpoint for verification.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/spring-boot.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootTest(classes = ExamplesTests.AppConfiguration.class)\n@EnableWireMock\nclass ExampleTests {\n\n  @Value(\"${wiremock.server.baseUrl}\")\n  private String wireMockUrl;\n\n  @Test\n  void returns_a_ping() {\n    stubFor(get(\"/ping\").willReturn(ok(\"pong\")));\n\n    RestClient client = RestClient.create();\n    String body = client.get()\n            .uri(wireMockUrl + \"/ping\")\n            .retrieve()\n            .body(String.class);\n\n    assertThat(body, is(\"pong\"));\n  }\n\n  @SpringBootApplication\n  static class AppConfiguration {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WireMock Maven Dependency for JUnit with Java 1.7\nDESCRIPTION: Maven dependency configuration to include WireMock version 2.27.2 for JUnit tests in Java 1.7 projects. This version is the last one that supports Java 1.7.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/advanced/java7.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.tomakehurst</groupId>\n    <artifactId>wiremock</artifactId>\n    <version>2.27.2</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Declarative WireMock Testing with JUnit Jupiter\nDESCRIPTION: Demonstrates the basic declarative usage of the `@WireMockTest` annotation. It shows how to obtain `WireMockRuntimeInfo` to access the WireMock instance (for static and instance DSL) and runtime details like the assigned HTTP port.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/junit-jupiter.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@WireMockTest\npublic class DeclarativeWireMockTest {\n\n    @Test\n    void test_something_with_wiremock(WireMockRuntimeInfo wmRuntimeInfo) {\n        // The static DSL will be automatically configured for you\n        stubFor(get(\"/static-dsl\").willReturn(ok()));\n\n        // Instance DSL can be obtained from the runtime info parameter\n        WireMock wireMock = wmRuntimeInfo.getWireMock();\n        wireMock.register(get(\"/instance-dsl\").willReturn(ok()));\n\n        // Info such as port numbers is also available\n        int port = wmRuntimeInfo.getHttpPort();\n\n        // Do some testing...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a GET Request Stub with Body and JSON Response in Java\nDESCRIPTION: Shows how to stub a GET request with a specific URL that returns a JSON response with a body. Useful for testing APIs with predefined responses in Java tests.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(get(\"/json\")\n    .willReturn(okJson(\"{ \\\"message\\\": \\\"Hello\\\" }\")));\n```\n\n----------------------------------------\n\nTITLE: Adding WireMock and AssertJ dependencies in Maven\nDESCRIPTION: This snippet shows how to include WireMock and AssertJ libraries as dependencies in a Maven build file to enable API mocking and response verification in Java tests.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/quickstart/java-junit.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.wiremock</groupId>\n    <artifactId>wiremock</artifactId>\n    <version>{{ site.wiremock_version }}</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>org.assertj</groupId>\n    <artifactId>assertj-core</artifactId>\n    <version>3.26.3</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Stub in Java Using WireMock SDK\nDESCRIPTION: Implements a stub for GET requests to '/some/thing' in Java using WireMock's SDK. The stub responds with headers and body as specified, and assertions verify the response status. This allows dynamic creation of mocks within Java tests.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@Test\npublic void exactUrlOnly() {\n    stubFor(get(urlEqualTo(\"/some/thing\"))\n            .willReturn(aResponse()\n                .withHeader(\"Content-Type\", \"text/plain\")\n                .withBody(\"Hello world!\")));\n\n    assertThat(testClient.get(\"/some/thing\").statusCode(), is(200));\n    assertThat(testClient.get(\"/some/thing/else\").statusCode(), is(404));\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Response Body from File - Java\nDESCRIPTION: This snippet shows how to define a response body by referencing a file located under the `__files` directory using the WireMock Java API.  The stub returns the content of the specified file when a GET request is made to `/body-file`. Dependencies include the WireMock library. The file path is relative to the `__files` directory.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(get(urlEqualTo(\"/body-file\"))\n        .willReturn(aResponse()\n                .withBodyFile(\"path/to/myfile.xml\")));\n```\n\n----------------------------------------\n\nTITLE: Adding WireMock 4.x Standalone as Gradle Dependency\nDESCRIPTION: Gradle dependency configuration for adding the beta WireMock 4.x standalone version to a project.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/download-and-installation.md#_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation \"org.wiremock:wiremock-standalone:{{ site.wiremock_4_version }}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Stub Response in JSON\nDESCRIPTION: Defines a stub mapping in JSON format that intercepts GET requests to '/some/thing' and returns a 200 OK response with 'Hello, world!' body and plain text content type. This configuration is used for setting up static mock responses without code.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\"request\": {\"method\": \"GET\", \"url\": \"/some/thing\"}, \"response\": {\"status\": 200, \"body\": \"Hello, world!\", \"headers\": {\"Content-Type\": \"text/plain\"}}}\n```\n\n----------------------------------------\n\nTITLE: Stub with Different HTTP Methods and Statuses in Java\nDESCRIPTION: Provides example stubs with various HTTP methods like POST, PUT, DELETE, and customized response statuses such as redirect and unauthorized. Facilitates rich testing scenarios with multiple request types.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(post(\"/redirect\")\n    .willReturn(temporaryRedirect(\"/new/place\")));\n\nstubFor(delete(\"/fine\")\n    .willReturn(ok()));\n\nstubFor(put(\"/status-only\")\n    .willReturn(status(418)));\n```\n\n----------------------------------------\n\nTITLE: Implementing a ResponseDefinitionTransformerV2 in Java\nDESCRIPTION: Shows how to create a custom transformer class implementing ResponseDefinitionTransformerV2 to modify response definitions dynamically. The class provides a transform method that customizes status, headers, or body for specific test scenarios.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/transforming-responses.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic static class ExampleTransformer implements ResponseDefinitionTransformerV2 {\n\n        @Override\n        public ResponseDefinition transform(ServeEvent serveEvent) {\n            return new ResponseDefinitionBuilder()\n                    .withHeader(\"MyHeader\", \"Transformed\")\n                    .withStatus(200)\n                    .withBody(\"Transformed body\")\n                    .build();\n        }\n\n        @Override\n        public String getName() {\n            return \"example\";\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Applying Per-Stub Response Templating with Dynamic Body Content - Java\nDESCRIPTION: This example shows how to configure a WireMock Java stub to use Handlebars templating for the response body. The stub transforms the path information from the incoming request and populates {{request.path.[0]}} in the response. Requires enabling response-template as a transformer in aResponse(). Dependencies: WireMock Java API. The stub is matched on /templated.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nwm.stubFor(get(urlPathEqualTo(\"/templated\"))\n  .willReturn(aResponse()\n      .withBody(\"{{request.path.[0]}}\")\n      .withTransformers(\"response-template\")));\n```\n\n----------------------------------------\n\nTITLE: Starting WireMock with Command Line Arguments - Shell\nDESCRIPTION: This shell snippet launches a WireMock container using Docker, demonstrating how to pass standard command-line arguments (e.g., --https-port, --verbose) to modify the server's behavior. Requires Docker and exposes port 8443 for HTTPS. CLI parameters appended after the image name allow dynamic configuration of WireMock at startup.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/docker.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it --rm \\\n  -p 8443:8443 \\\n  --name wiremock \\\n  wiremock/wiremock:{{ site.wiremock_version }} \\\n  --https-port 8443 --verbose\n\n```\n\n----------------------------------------\n\nTITLE: Configuring and stubbing WireMock using static imports in Java\nDESCRIPTION: Using static imports from WireMock client classes, this snippet configures the client for a remote WireMock instance and sets up a stub using stubFor(get(...)). The configureFor method specifies the target host and port, enabling static DSL calls to stub HTTP endpoints on that WireMock server instance. This pattern is suitable for simpler static client usage scenarios.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/java-usage.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport static com.github.tomakehurst.wiremock.client.WireMock.*;\n\nconfigureFor(\"wiremock.host\", 8089);\nstubFor(get(....));\n```\n\n----------------------------------------\n\nTITLE: Starting and stopping WireMock server in Java\nDESCRIPTION: This snippet programmatically creates a WireMockServer instance configured to run on port 8089 using the options builder. It demonstrates starting the server with wireMockServer.start() and stopping it with wireMockServer.stop(). This approach enables non-JUnit usage of WireMock by direct lifecycle management. The snippet depends on WireMockServer and options() builder from the WireMock library. It uses default no-args constructor comments to explain the default port 8080 and lack of HTTPS configuration.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/java-usage.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nWireMockServer wireMockServer = new WireMockServer(options().port(8089)); //No-args constructor will start on port 8080, no HTTPS\nwireMockServer.start();\n\n// Sometime later\n\nwireMockServer.stop();\n```\n\n----------------------------------------\n\nTITLE: Starting WireMock Container using Docker - Shell\nDESCRIPTION: This shell snippet demonstrates how to use Docker to start a WireMock container with its default configuration. No external dependencies are necessary beyond Docker and network access to the desired port. The container exposes port 8080, and once running, WireMock's admin interface can be accessed at http://localhost:8080/__admin/mappings. The container will be removed automatically after stopping due to the --rm flag.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/docker.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it --rm \\\n  -p 8080:8080 \\\n  --name wiremock \\\n  wiremock/wiremock:{{ site.wiremock_version }}\n\n```\n\n----------------------------------------\n\nTITLE: Defining WireMock Container with Entrypoint in Docker Compose - YAML\nDESCRIPTION: This YAML snippet defines a basic Docker Compose service configuration for WireMock. It specifies the use of the wiremock/wiremock:latest image, assigns a container_name, and sets a custom entrypoint to configure WireMock at startup. It allows group management of Docker containers and supports passing entrypoint CLI parameters (e.g., --global-response-templating, --disable-gzip, --verbose).\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/docker.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Sample compose file\nversion: \"3\"\nservices:\n  wiremock:\n    image: \"wiremock/wiremock:latest\"\n    container_name: my_wiremock\n    entrypoint: [\"/docker-entrypoint.sh\", \"--global-response-templating\", \"--disable-gzip\", \"--verbose\"]\n\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers in Java Stub\nDESCRIPTION: Illustrates how to add custom headers to the stubbed response, including support for multiple header values with the same key, enhancing response customization.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(get(urlEqualTo(\"/whatever\"))\n        .willReturn(aResponse()\n                .withStatus(200)\n                .withHeader(\"Content-Type\", \"application/json\")\n                .withHeader(\"Set-Cookie\", \"session_id=91837492837\")\n                .withHeader(\"Set-Cookie\", \"split_test_group=B\")\n                .withHeader(\"Cache-Control\", \"no-cache\")));\n```\n\n----------------------------------------\n\nTITLE: Pushing Mock API JSON to Remote WireMock Server via Admin API Using Curl\nDESCRIPTION: Demonstrates how to upload a mock API JSON file to a remotely running WireMock server using the WireMock Admin API. The curl command sends a POST request to the '/__admin/mappings/import' endpoint of the remote server, transmitting the JSON content. This approach requires network access to the server and the mock API JSON file named 'mockapi.json'. It is useful for dynamically updating mappings on a running WireMock instance.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/mock-api-templates/usage.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -d@mockapi.json http://wiremock.dev.mycompany.com:8080/__admin/mappings/import\n```\n\n----------------------------------------\n\nTITLE: Adding WireMock Spring Boot Maven Dependency (XML)\nDESCRIPTION: Declares the required Maven dependency for integrating WireMock with Spring Boot. Includes the `groupId`, `artifactId`, and `version` (using a placeholder `{{ site.spring_boot_integration_version }}`). Add this to your project's `pom.xml` file.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/spring-boot.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.wiremock.integrations</groupId>\n    <artifactId>wiremock-spring-boot</artifactId>\n    <version>{{ site.spring_boot_integration_version }}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Restricting Proxy Targets for Security in WireMock\nDESCRIPTION: Defines rules for allowed and denied proxy target addresses using IP ranges, hostnames, and wildcards, ensuring proxying occurs only to authorized destinations.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/configuration.md#_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\n// Define allowed and denied address rules for proxying\n.limitProxyTargets(NetworkAddressRules.builder()\n  .allow(\"192.168.56.42\")\n  .allow(\"192.0.1.1-192.168.254.1\")\n  .deny(\"*.acme.com\")\n  .build()\n)\n```\n\n----------------------------------------\n\nTITLE: Getting All Received Requests (Java API)\nDESCRIPTION: Retrieves a list of all ServeEvent objects recorded in the WireMock request journal since the last reset. Each ServeEvent includes details about the received request and the resulting response definition.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nList<ServeEvent> allServeEvents = getAllServeEvents();\n```\n\n----------------------------------------\n\nTITLE: Creating a simple webhook with Java using WireMock\nDESCRIPTION: This snippet configures a WireMock stub in Java to trigger a POST request to a fixed URL with specified headers and body when the incoming request matches specific criteria. It demonstrates the use of ServeEventListener with a webhook configuration.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/webhooks-and-callbacks.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport static org.wiremock.webhooks.Webhooks.*;\n...\nwm.stubFor(post(urlPathEqualTo(\"/something-async\"))\n    .willReturn(ok())\n    .withServeEventListener(\"webhook\", webhook()\n        .withMethod(POST)\n        .withUrl(\"http://my-target-host/callback\")\n        .withHeader(\"Content-Type\", \"application/json\")\n        .withBody(\"{ \\\"result\\\": \\\"SUCCESS\\\" }\")\n  );\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Stub in Golang Using WireMock Client\nDESCRIPTION: Creates a mock GET request for '/some/thing' with a 200 OK response, including body and headers, using the Golang WireMock client. Enables Go-based testing by programmatically defining stub responses.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nwiremockClient.StubFor(wiremock.Get(wiremock.URLPathEqualTo(\"/some/thing\")).\n        WillReturnResponse(\n            wiremock.NewResponse().\n                WithStatus(http.StatusOK).\n                WithBody(\"Hello, world!\").\n                WithHeader(\"Content-Type\", \"text/plain\")))\n```\n\n----------------------------------------\n\nTITLE: Creating WireMock client instances for multiple server connections in Java\nDESCRIPTION: This snippet demonstrates instantiating the WireMock client class directly to allow communication with multiple WireMock server instances. By providing host, port, and optional root context path, client instances can be configured for non-default WireMock endpoints. The example shows registering a stub via wireMock.register(), which behaves equivalently to stubFor(). This approach offers greater flexibility over static client calls.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/java-usage.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nWireMock wireMock = new WireMock(\"some.host\", 9090, \"/wm\"); // As above, 3rd param is for non-root servlet deployments\nwireMock.register(get(....)); // Equivalent to stubFor()\n```\n\n----------------------------------------\n\nTITLE: Initializing WireMockRule with Default Settings in JUnit 4 - Java\nDESCRIPTION: This snippet demonstrates creating a WireMockRule instance annotated with @Rule to automatically start and stop a WireMock server on the default port 8080 for each test method. It requires JUnit 4.x and WireMock libraries. The WireMockRule lifecycle management handles server startup and shutdown seamlessly without further intervention during tests. There are no parameters passed, so default WireMock server settings apply.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/junit-extensions.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@Rule\npublic WireMockRule wireMockRule = new WireMockRule();\n```\n\n----------------------------------------\n\nTITLE: Writing a basic API test with WireMock, HttpClient, and AssertJ\nDESCRIPTION: This snippet provides a complete example of setting up a mock endpoint with WireMock, sending an HTTP POST request using Java 11's HttpClient, and verifying the response with AssertJ assertions. It illustrates essential steps for API client testing in an isolated environment.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/quickstart/java-junit.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\n\n@Test\npublic void exampleTest() {\n    // Setup the WireMock mapping stub for the test\n    stubFor(post(\"/my/resource\")\n        .withHeader(\"Content-Type\", containing(\"xml\"))\n        .willReturn(ok()\n            .withHeader(\"Content-Type\", \"text/xml\")\n            .withBody(\"<response>SUCCESS</response>\")));\n\n    // Setup HTTP POST request (with HTTP Client embedded in Java 11+)\n    final HttpClient client = HttpClient.newBuilder().build();\n    final HttpRequest request = HttpRequest.newBuilder()\n        .uri(wiremockServer.url(\"/my/resource\"))\n        .header(\"Content-Type\", \"text/xml\")\n        .POST().build();\n\n    // Send the request and receive the response\n    final HttpResponse<String> response =\n            client.send(request, HttpResponse.BodyHandlers.ofString());\n\n    // Verify the response (with AssertJ)\n    assertThat(response.statusCode()).as(\"Wrong response status code\").isEqualTo(200);\n    assertThat(response.body()).as(\"Wrong response body\").contains(\"<response>SUCCESS</response>\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom TemplateModelDataProviderExtension in Java for WireMock\nDESCRIPTION: This code creates an anonymous class implementing the TemplateModelDataProviderExtension interface to supply additional template model data during request processing in WireMock. It overrides the provideTemplateModelData method to return custom data, and getName to identify the extension. The extension is then registered with WireMockServer, enabling dynamic data injection into templates. Dependencies include WireMock's extension system and Java collections. Input: serveEvent object representing the current request; Output: a map containing custom data accessible in templates.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/adding-template-model-data.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nnew WireMockServer(.extensions(\n    new TemplateModelDataProviderExtension() {\n        @Override\n        public Map<String, Object> provideTemplateModelData(ServeEvent serveEvent) {\n            return Map.of(\n                \"mydata\", Map.of(\"path\", serveEvent.getRequest().getUrl()));\n        }\n\n        @Override\n        public String getName() {\n            return \"custom-model-data\";\n        }\n    }\n));\n```\n\n----------------------------------------\n\nTITLE: Initializing Embedded WireMockServer with Root Directory in Java\nDESCRIPTION: Illustrates how to initialize a WireMockServer instance in a plain Java application or test by specifying the root directory which contains the 'mappings' folder. This enables WireMock to load mock API definitions from the designated folder at server startup. The snippet depends on WireMock Java libraries and standard Java environment. The 'withRootDirectory' method sets the parent folder path.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/mock-api-templates/usage.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nWireMockServer wm =\n  new WireMockServer(wireMockConfig()\n    .withRootDirectory(\"path/to/root\") // The parent folder of mappings\n  );\n```\n\n----------------------------------------\n\nTITLE: Retrieving dynamic ports from WireMock server in Java\nDESCRIPTION: This snippet shows how to obtain the assigned HTTP and HTTPS ports after WireMock is started with dynamic port configuration, enabling tests to interact with the server correctly.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/quickstart/java-junit.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nint port = wireMockRule.port();\nint httpsPort = wireMockRule.httpsPort();\n```\n\n----------------------------------------\n\nTITLE: Adding WireMock and AssertJ dependencies in Gradle\nDESCRIPTION: This snippet illustrates how to declare dependencies for WireMock and AssertJ in a Gradle build file to set up the testing environment for API mocking in Java.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/quickstart/java-junit.md#_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\ntestImplementation \"org.wiremock:wiremock:{{ site.wiremock_version }}\"\ntestImplementation \"org.assertj:assertj-core:3.24.2\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ServeEventListener for Specific Lifecycle Events in Java\nDESCRIPTION: This example shows how to create a serve event listener that implements specific callback methods for different points in the request lifecycle. Each method provides access to the ServeEvent and Parameters at that stage of processing.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/listening-for-serve-events.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class MyServeEventListener implements ServeEventListener {\n\n    @Override\n    public void beforeMatch(ServeEvent serveEvent, Parameters parameters) {\n        // Do something before request matching\n    }\n\n    @Override\n    public void afterMatch(ServeEvent serveEvent, Parameters parameters) {\n        // Do something after request matching\n    }\n\n    @Override\n    public void beforeResponseSent(ServeEvent serveEvent, Parameters parameters) {\n        // Do something before the response is sent to the client\n    }\n\n    @Override\n    public void afterComplete(ServeEvent serveEvent, Parameters parameters) {\n        // Do something after the response has been sent to the client\n    }\n\n    @Override\n    public String getName() {\n        return \"my-listener\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Editing Existing Stubs - Java\nDESCRIPTION: This snippet demonstrates how to edit an existing stub mapping in WireMock using the Java API. It first defines a stub with an ID, then modifies it to return a different response body. Dependencies include WireMock and a testing framework such as JUnit.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\nwireMockServer.stubFor(get(urlEqualTo(\"/edit-this\"))\n    .withId(id)\n    .willReturn(aResponse()\n        .withBody(\"Original\")));\n\nassertThat(testClient.get(\"/edit-this\").content(), is(\"Original\"));\n\nwireMockServer.editStub(get(urlEqualTo(\"/edit-this\"))\n    .withId(id)\n    .willReturn(aResponse()\n        .withBody(\"Modified\")));\n\nassertThat(testClient.get(\"/edit-this\").content(), is(\"Modified\"));\n```\n\n----------------------------------------\n\nTITLE: Initializing WireMock Container with JUnit 5\nDESCRIPTION: This Java code snippet demonstrates how to initialize a WireMock container using JUnit 5 and Testcontainers. It sets up a WireMock server and defines a mapping for the \"/hello\" endpoint.  Dependencies include JUnit 5, Testcontainers, and the WireMock Testcontainers library. The code then sends a GET request to \"/hello\" and asserts the response body.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/testcontainers.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.junit.jupiter.api.*;\nimport org.testcontainers.junit.jupiter.*;\nimport org.wiremock.integrations.testcontainers.testsupport.http.*;\nimport static org.assertj.core.api.Assertions.assertThat;\n\n@Testcontainers\nclass WireMockContainerJunit5Test {\n\n    @Container\n    WireMockContainer wiremockServer = new WireMockContainer(\"2.35.0\")\n            .withMapping(\"hello\", WireMockContainerJunit5Test.class, \"hello-world.json\");\n\n    @Test\n    void helloWorld() throws Exception {\n        String url = wiremockServer.getUrl(\"/hello\");\n        HttpResponse response = new TestHttpClient().get(url);\n        assertThat(response.getBody())\n                .as(\"Wrong response body\")\n                .contains(\"Hello, world!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting WireMock Server Instance into Test (Java)\nDESCRIPTION: Shows how to inject the `WireMockServer` instance managed by `@EnableWireMock` directly into a test class field using the `@InjectWireMock` annotation. This provides programmatic access to the server instance for dynamic stubbing or verification within test methods.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/spring-boot.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootTest(classes = InjectionTest.AppConfiguration.class)\n@EnableWireMock\npublic class InjectionTest {\n\n  @InjectWireMock\n  WireMockServer wireMock;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using XMLUnit Placeholders in WireMock Request Matching\nDESCRIPTION: Demonstrates how to use XMLUnit placeholders to ignore specific elements when matching XML requests. The example shows matching a message with an ignored ID field.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n.withRequestBody(\n    equalToXml(\"<message><id>${xmlunit.ignore}</id><content>Hello</content></message>\", true)\n)\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request\": {\n    ...\n    \"bodyPatterns\" : [ {\n      \"equalToXml\" : \"<message><id>${xmlunit.ignore}</id><content>Hello</content></message>\",\n      \"enablePlaceholders\" : true\n    } ]\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Requests by Criteria (JSON/HTTP API)\nDESCRIPTION: Counts the number of requests received by WireMock that match the provided request pattern criteria. The criteria are sent as a JSON document in a POST request to the /__admin/requests/count endpoint.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"method\": \"POST\",\n    \"url\": \"/resource/to/count\",\n    \"headers\": {\n        \"Content-Type\": {\n            \"matches\": \".*/xml\"\n        }\n    }\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"count\": 4 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Server with WireMock Java Client - Java\nDESCRIPTION: Demonstrates how to use WireMock's Java API to configure a remote server instance using the static DSL, supporting both HTTP and HTTPS connections. This requires the WireMock Java library as a dependency. Input parameters include the host address, port, and optional protocol. Outputs are internal client state updates that direct further commands to the specified remote WireMock instance.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/java-jar.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nWireMock.configureFor(\"my.remote.host\", 8000);\n\n// or for HTTPS\nWireMock.configureFor(\"https\", \"my.remote.host\", 8443);\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS with Keystore, Truststore, and Client Authentication in WireMock\nDESCRIPTION: Sets up HTTPS support by specifying keystore and truststore paths, passwords, keystore type, and client certificate authentication options. Enables secure HTTPS connections and mutual TLS authentication as needed.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/configuration.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n// Set the keystore containing the HTTPS certificate\n.keystorePath(\"/path/to/https-certs-keystore.jks\")\n\n// Set the password to the keystore.\n.keystorePassword(\"verysecret!\")\n\n// Set the password to Jetty's key manager\n.keyManagerPassword(\"donttell\")\n\n// Set the keystore type\n.keystoreType(\"BKS\")\n\n// Require a client calling WireMock to present a client certificate\n.needClientAuth(true)\n\n// Path to the trust store containing the client certificate\n.trustStorePath(\"/path/to/trust-store.jks\")\n\n// The password to the trust store\n.trustStorePassword(\"trustme\")\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS on Random Port Declaratively in JUnit Jupiter\nDESCRIPTION: Illustrates how to enable HTTPS for the WireMock server using the declarative `@WireMockTest` annotation by setting the `httpsEnabled` parameter to `true`. A random HTTPS port will be assigned.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/junit-jupiter.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@WireMockTest(httpsEnabled = true)\npublic class HttpsRandomPortDeclarativeWireMockTest {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Arrays Handlebars\nDESCRIPTION: This snippet uses the `array` helper to create an array from a list of parameters. It takes a variable number of parameters of any valid type. The output is an array containing the specified values.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_71\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{array 1 'two' true}}\n{{array}}\n```\n\n----------------------------------------\n\nTITLE: Stubbing gRPC Methods with JSON Templating\nDESCRIPTION: Java code showing how to use JSON templating with WireMock for dynamic gRPC responses based on request values.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/grpc.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nmockGreetingService.stubFor(\n    method(\"greeting\")\n        .withRequestMessage(equalToJson(\"{ \\\"name\\\":  \\\"${json-unit.any-string}\\\" }\"))\n        .willReturn(\n            jsonTemplate(\n                \"{ \\\"greeting\\\": \\\"Hello {{jsonPath request.body '$.name'}}\\\" }\")));\n```\n\n----------------------------------------\n\nTITLE: Specifying JSON Response Body - JSON\nDESCRIPTION: This snippet demonstrates how to specify a JSON response body using the `jsonBody` property in the WireMock JSON API.  This avoids the need to escape the JSON content.  A GET request to the stubbed URL would return the defined JSON object.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"response\": {\n        \"status\": 200,\n        \"jsonBody\": {\n          \"arbitrary_json\": [1, 2, 3]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Filesystem Locations for WireMock\nDESCRIPTION: Specifies root directories for mapping files and static assets, either on the filesystem or within the classpath, for customizing file handling in WireMock.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/configuration.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n// Set the root of the filesystem WireMock will look under for files and mappings\n.usingFilesUnderDirectory(\"/path/to/files-and-mappings-root\")\n\n// Set a classpath resource as the root for files\n.usingFilesUnderClasspath(\"root/path/under/classpath\")\n```\n\n----------------------------------------\n\nTITLE: Making an Authenticated Request to the WireMock Admin API - Bash\nDESCRIPTION: Illustrates a cURL command for accessing the WireMock admin API with HTTP Basic Authentication. Requires the server to be running with admin auth enabled. Inputs: admin API endpoint and an appropriate 'Authorization' header with a Base64-encoded credential. Output: authorized access to admin operations such as viewing request logs.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/java-jar.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET --location \"http://localhost:8080/__admin/requests\" \\\n    -H \"Authorization: Basic bXktdXNlcm5hbWU6bXktc3VwZXItc2VjcmV0LXBhc3N3b3Jk\"\n```\n\n----------------------------------------\n\nTITLE: Modifying intercepted HTTP requests using RequestWrapper in WireMock with Java\nDESCRIPTION: Demonstrates how to modify the HTTP request during interception by extending StubRequestFilterV2. Uses RequestWrapper to add a query parameter to the URL and inject a custom header, then continues processing with the modified request. This snippet depends on WireMock classes Request, ServeEvent, RequestFilterAction, and RequestWrapper, and illustrates how to chain transformations with the builder pattern.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/filtering-requests.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic static class UrlAndHeadersModifyingFilter extends StubRequestFilterV2 {\n\n    @Override\n    public RequestFilterAction filter(Request request, ServeEvent serveEvent) {\n        Request wrappedRequest = RequestWrapper.create()\n                .transformAbsoluteUrl(url -> url + \"?extraQueryParam=123\")\n                .addHeader(\"X-Custom-Header\", \"headerval\")\n                .wrap(request);\n\n        return RequestFilterAction.continueWith(wrappedRequest);\n    }\n\n    @Override\n    public String getName() {\n        return \"url-and-header-modifier\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Handlebars Helper WireMock Java\nDESCRIPTION: This Java snippet demonstrates how to register a custom Handlebars helper in WireMock. It shows implementing the `TemplateHelperProviderExtension` interface and providing a map that associates a helper name (`string-length`) with its implementation, which calculates the length of the input string context.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/adding-template-helpers.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nnew WireMockServer(wireMockConfig().extensions(\n    new TemplateHelperProviderExtension() {\n        @Override\n        public String getName() {\n            return \"custom-helpers\";\n        }\n\n        @Override\n        public Map<String, Helper<?>> provideTemplateHelpers() {\n            Helper<String> helper = (context, options) -> context.length();\n            return Map.of(\"string-length\", helper);\n        }\n    }\n));\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Custom Request Matcher - Java\nDESCRIPTION: This code snippet demonstrates how to create and use an inline custom request matcher directly within a stub mapping using the Java API.  It checks if the request body length is greater than 2048.  Dependencies include the WireMock library.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/custom-matching.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nwireMockServer.stubFor(requestMatching(new RequestMatcherExtension() {\n    @Override\n    public MatchResult match(Request request, Parameters parameters) {\n        return MatchResult.of(request.getBody().length > 2048);\n    }\n}).willReturn(aResponse().withStatus(422)));\n```\n\n----------------------------------------\n\nTITLE: Specifying Response Body with String Literal - Java\nDESCRIPTION: This snippet demonstrates how to define a response body as a string literal using the WireMock Java API. It creates a stub that returns the specified text when a GET request is made to the `/body` URL. Dependencies include the WireMock library.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(get(urlEqualTo(\"/body\"))\n        .willReturn(aResponse()\n                .withBody(\"Literal text to put in the body\")));\n```\n\n----------------------------------------\n\nTITLE: Configuring WireMockExtension with Root Directory Using JUnit Jupiter in Java\nDESCRIPTION: Provides example code for configuring WireMock using the JUnit Jupiter extension. The WireMockExtension is instantiated with options pointing to a root directory containing the 'mappings' folder. This setup allows tests to leverage mock API templates from JSON files during automated test execution. The snippet requires JUnit 5+ and WireMock Java libraries integrated into the test suite.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/mock-api-templates/usage.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@RegisterExtension\n    static WireMockExtension wm1 = WireMockExtension.newInstance()\n            .options(wireMockConfig().withRootDirectory(\"path/to/root\"))\n            .build();\n```\n\n----------------------------------------\n\nTITLE: Starting Recording via API\nDESCRIPTION: This JSON snippet shows how to start recording using the WireMock JSON API, using a POST request to the recordings/start endpoint.  It specifies the targetBaseUrl for the API to be recorded. The expected output is the creation of stub mappings when the recording is stopped.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/record-playback.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nPOST /__admin/recordings/start\n{\n  \"targetBaseUrl\": \"http://examples.wiremockapi.cloud/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stubbing with OR Matcher - Java\nDESCRIPTION: This Java code snippet demonstrates how to combine two matchers using the `or` operator within WireMock. It creates a stub that matches GET requests to `/or` with a query parameter `search` that either matches the regular expression `[a-z]+` or is absent. The stub then returns an OK response.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\n// Both statements are equivalent\n\nstubFor(get(urlPathEqualTo(\"/or\"))\n  .withQueryParam(\"search\", or(\n        matching(\"[a-z]+\"),\n        absent())\n  )\n  .willReturn(ok()));\n\nstubFor(get(urlPathEqualTo(\"/or\"))\n    .withQueryParam(\"search\", matching(\"[a-z]+\").or(absent()))\n    .willReturn(ok()));\n```\n\n----------------------------------------\n\nTITLE: Initializing a WireMock gRPC Service in Java\nDESCRIPTION: Java code to initialize a mock gRPC service using WireMock, specifying the service class from the compiled proto file.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/grpc.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nWireMockGrpcService mockGreetingService =\n    new WireMockGrpcService(\n        new WireMock(wm.getPort()),\n        \"com.example.grpc.GreetingService\"\n    );\n```\n\n----------------------------------------\n\nTITLE: Registering WireMock Extensions Using Factories in Java\nDESCRIPTION: Shows how to register a WireMock extension using a factory lambda expression passed to the `extensions()` method. This pattern allows extensions to receive core WireMock services (like Admin, Options, Stores, FileSource, Extensions, TemplateEngine) via constructor injection, facilitating complex initialization and integration. The example registers a `MiscInfoApi` extension, injecting multiple services obtained from the factory's `services` parameter.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extending-wiremock.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nnew WireMockServer(wireMockConfig()\n  .extensions(services ->\n                    List.of(\n                        new MiscInfoApi(\n                            services.getAdmin(),\n                            services.getOptions(),\n                            services.getStores(),\n                            services.getFiles(),\n                            services.getExtensions()\n                        ))));\n```\n\n----------------------------------------\n\nTITLE: Configuring WireMock with dynamic port allocation\nDESCRIPTION: This snippet demonstrates how to configure WireMock to select random free ports for HTTP and HTTPS, which is useful for running tests concurrently without port conflicts.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/quickstart/java-junit.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n@Rule\npublic WireMockRule wireMockRule = new WireMockRule(wireMockConfig().dynamicPort().dynamicHttpsPort());\n```\n\n----------------------------------------\n\nTITLE: Combining Standard and Custom Matcher - Java\nDESCRIPTION: This snippet demonstrates combining standard request matchers with a custom matcher defined as an extension.  It uses `urlPathMatching` in conjunction with a custom matcher, demonstrating how to utilize custom matchers that have been configured outside of the stub itself. Dependencies include WireMock and the pre-defined \"path-contains-param\" custom matcher.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/custom-matching.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nstubFor(get(urlPathMatching(\"/the/.*/one\")\n        .andMatching(\"path-contains-param\", Parameters.one(\"path\", \"correct\"))\n        .willReturn(ok()));\n```\n\n----------------------------------------\n\nTITLE: Using request data in webhook body with Java templating\nDESCRIPTION: Configures a webhook in Java to include a transaction ID from the original request body, utilizing WireMock's templating system with jsonPath. This allows dynamic data passing based on incoming requests.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/webhooks-and-callbacks.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nwm.stubFor(post(urlPathEqualTo(\"/templating\"))\n      .willReturn(ok())\n      .withServeEventListener(\"webhook\", webhook()\n          .withMethod(POST)\n          .withUrl(\"http://my-target-host/callback\")\n          .withHeader(\"Content-Type\", \"application/json\")\n          .withBody(\"{ \\\"message\\\": \\\"success\\\", \\\"transactionId\\\": \\\"{{jsonPath originalRequest.body '$.transactionId'}}\\\" }\")\n  );\n```\n\n----------------------------------------\n\nTITLE: Proxy Configuration via API\nDESCRIPTION: This JSON snippet configures a proxy mapping in WireMock.  It directs all requests (method ANY) to be proxied to a target URL, and defines the priority for this mapping. Prerequisites include a running WireMock instance. Expected output includes proxied requests.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/record-playback.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nPOST /__admin/mappings\n{\n    \"priority\": 1,\n    \"request\": {\n        \"method\": \"ANY\"\n    },\n    \"response\": {\n        \"proxyBaseUrl\" : \"http://examples.wiremockapi.cloud/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting All Received Requests (JSON/HTTP API)\nDESCRIPTION: Retrieves all ServeEvent objects from the WireMock request journal since the last reset via a GET request to the /__admin/requests endpoint. The response is a JSON object containing an array of request and response details.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"requests\": [\n        {\n            \"id\": \"95bd9a40-82d4-47ce-9383-25a9e972f05d\",\n            \"request\": {\n                \"url\": \"/received-request/7\",\n                \"absoluteUrl\": \"http://localhost:51490/received-request/7\",\n                \"method\": \"GET\",\n                \"clientIp\": \"127.0.0.1\",\n                \"headers\": {\n                    \"Connection\": \"keep-alive\",\n                    \"User-Agent\": \"Apache-HttpClient/4.5.1 (Java/1.8.0_45)\",\n                    \"Host\": \"localhost:51490\"\n                },\n                \"cookies\": {},\n                \"browserProxyRequest\": false,\n                \"loggedDate\": 1475495213275,\n                \"bodyAsBase64\": \"\",\n                \"body\": \"\",\n                \"loggedDateString\": \"2016-10-03T11:46:53Z\"\n            },\n            \"responseDefinition\": {\n                \"status\": 200,\n                \"body\": \"This was matched\"\n            },\n            \"wasMatched\": true\n        },\n        {\n            \"id\": \"aa1a4250-f87c-4a17-82e3-79c83441ce03\",\n            \"request\": {\n                \"url\": \"/received-request/6\",\n                \"absoluteUrl\": \"http://localhost:51490/received-request/6\",\n                \"method\": \"GET\",\n                \"clientIp\": \"127.0.0.1\",\n                \"headers\": {\n                    \"Connection\": \"keep-alive\",\n                    \"User-Agent\": \"Apache-HttpClient/4.5.1 (Java/1.8.0_45)\",\n                    \"Host\": \"localhost:51490\"\n                },\n                \"cookies\": {},\n                \"browserProxyRequest\": false,\n                \"loggedDate\": 1475495213268,\n                \"bodyAsBase64\": \"\",\n                \"body\": \"\",\n                \"loggedDateString\": \"2016-10-03T11:46:53Z\"\n            },\n            \"responseDefinition\": {\n                \"status\": 404,\n                \"transformers\": [],\n                \"fromConfiguredStub\": false,\n                \"transformerParameters\": {}\n            },\n            \"wasMatched\": false\n        }\n    ],\n    \"meta\": {\n        \"total\": 2\n    },\n    \"requestJournalDisabled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Extension Scanning Declaratively in JUnit Jupiter\nDESCRIPTION: Demonstrates how to enable automatic scanning for WireMock extensions via service loading when using the declarative `@WireMockTest` annotation by setting the `extensionScanningEnabled` parameter to `true`.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/junit-jupiter.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@WireMockTest(extensionScanningEnabled = true)\npublic class ExtensionScanningDeclarativeWireMockTest {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Single Stub Mapping File Example - JSON\nDESCRIPTION: Provides an example JSON file describing a single API stub mapping, to be placed in the 'mappings' directory for file-based configuration. Requires WireMock server running with access to the filesystem. Key parameters include the HTTP method and URL to match, along with the desired response status and body. The expected output is that requests matching the pattern will receive the configured response.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/java-jar.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"request\": {\n        \"method\": \"GET\",\n        \"url\": \"/api/mytest\"\n    },\n    \"response\": {\n        \"status\": 200,\n        \"body\": \"More content\\n\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WireMock Declaratively via Annotation (Java)\nDESCRIPTION: Example of configuring WireMock settings like instance name (`name`) and HTTP port (`port`) directly within the `@EnableWireMock` annotation using one or more `@ConfigureWireMock` annotations. This allows setting common options without needing a customizer class.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/spring-boot.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@EnableWireMock({\n  @ConfigureWireMock(\n      name = \"my-mock\",\n      port = 8888)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Declarative Proxy Mode with JVM Proxy in JUnit Jupiter\nDESCRIPTION: Demonstrates enabling 'proxy mode' declaratively using `@WireMockTest(proxyMode = true)`. It shows how to configure an Apache HttpClient to use JVM system properties, allowing it to be automatically proxied via WireMock for multi-domain mocking.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/junit-jupiter.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@WireMockTest(proxyMode = true)\npublic class JUnitJupiterExtensionJvmProxyDeclarativeTest {\n\n  CloseableHttpClient client;\n\n  @BeforeEach\n  void init() {\n    client = HttpClientBuilder.create()\n      .useSystemProperties() // This must be enabled for auto proxy config\n      .build();\n  }\n\n  @Test\n  void configures_jvm_proxy_and_enables_browser_proxying() throws Exception {\n    stubFor(get(\"/things\")\n      .withHost(equalTo(\"one.my.domain\"))\n      .willReturn(ok(\"1\")));\n\n    stubFor(get(\"/things\")\n      .withHost(equalTo(\"two.my.domain\"))\n      .willReturn(ok(\"2\")));\n\n    assertThat(getContent(\"http://one.my.domain/things\"), is(\"1\"));\n    assertThat(getContent(\"http://two.my.domain/things\"), is(\"2\"));\n  }\n\n  private String getContent(String url) throws Exception {\n    try (CloseableHttpResponse response = client.execute(new HttpGet(url))) {\n      return EntityUtils.toString(response.getEntity());\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Stub Mappings in a Single JSON File - JSON\nDESCRIPTION: This snippet defines a JSON file containing multiple stub mappings under the 'mappings' array, suitable for batch loading stubs at server startup. It requires WireMock server support for multi-mapping files. Each mapping includes request patterns and corresponding responses; mapping-level IDs may be specified. The expected behavior is that each stub is loaded as a read-only mapping on server start.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/java-jar.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mappings\": [\n        {\n            \"request\": {\n                \"method\": \"GET\",\n                \"url\": \"/one\"\n            },\n            \"response\": {\n                \"status\": 200\n            }\n        },\n        {\n            \"id\": \"8c5db8b0-2db4-4ad7-a99f-38c9b00da3f7\",\n            \"request\": {\n                \"url\": \"/two\"\n            },\n            \"response\": {\n                \"body\": \"Updated\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Selecting Response Body File with Templating - JSON\nDESCRIPTION: Demonstrates a JSON stub in WireMock that uses Handlebars for selecting the response body file path dynamically based on the request's second path segment. The stub matches GET requests to the /static/.* pattern, with the filename constructed from the pathSegments array. Assumes files are organized accordingly. No transformer array is needed as bodyFileName templating is implicit.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"urlPathPattern\": \"/static/.*\",\n        \"method\": \"GET\"\n    },\n    \"response\": {\n        \"status\": 200,\n        \"bodyFileName\": \"files/{{request.pathSegments.[1]}}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stub Metadata Programmatically in WireMock - Java\nDESCRIPTION: This snippet demonstrates adding provider metadata to a WireMock stub via the Java DSL. The `withMetadata` method attaches a metadata object specifying the contract provider. Prerequisites: WireMock and wiremock-pact dependencies. The input is a stub setup; the output is the stub marked with provider metadata for later Pact extraction.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/pact.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n    stubFor(\n        post(anyUrl())\n            .withMetadata(\n                new Metadata(\n                    Map.of(\n                        WireMockPactMetadata.METADATA_ATTR,\n                        new WireMockPactMetadata()\n                            .setProvider(\"some-specific-provider\")))));\n```\n\n----------------------------------------\n\nTITLE: Combining Standard and Inline Custom Matcher - Java\nDESCRIPTION: This snippet shows how to combine standard WireMock request matchers with an inline custom matcher using the `andMatching()` method.  The example uses `urlPathMatching` for the URL path and a custom matcher.  This approach is only applicable when stubbing a local WireMock server. Dependencies include WireMock and the ability to define the custom matcher.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/custom-matching.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nstubFor(get(urlPathMatching(\"/the/.*/one\")\n        .andMatching(new MyRequestMatcher()) // Will also accept a Java 8+ lambda\n        .willReturn(ok()));\n```\n\n----------------------------------------\n\nTITLE: Defining Stub with Named Custom Matcher - JSON\nDESCRIPTION: This is a JSON representation of a stub mapping using a custom matcher named \"body-too-long\" with a parameter \"maxLength\" set to 2048.  The response status is 422.  This shows how to use custom matchers in a JSON configuration. Dependencies are related to the WireMock framework.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/custom-matching.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"request\": {\n        \"customMatcher\": {\n            \"name\": \"body-too-long\",\n            \"parameters\": {\n                \"maxLength\": 2048\n            }\n        }\n    },\n    \"response\": {\n        \"status\": 422\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing WireMockServer and WireMockRule with Options in Java\nDESCRIPTION: Demonstrates how to instantiate WireMockServer and WireMockRule using the options builder, allowing for flexible server configuration. Requires the WireMock Java library and static import of 'com.github.tomakehurst.wiremock.core.WireMockConfiguration.options'.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/configuration.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n\nWireMockServer wm = new WireMockServer(options().port(2345));\n\n@Rule\nWireMockRule wm = new WireMockRule(options().port(2345));\n```\n\n----------------------------------------\n\nTITLE: Implementing a callback with templated URL and method in Java\nDESCRIPTION: Configures a webhook in Java where the URL and HTTP method are dynamically extracted from the original request's JSON body, enabling flexible callback targets or methods based on request data.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/webhooks-and-callbacks.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nwm.stubFor(post(urlPathEqualTo(\"/something-async\"))\n      .willReturn(ok())\n      .withServeEventListener(\"webhook\", webhook()\n          .withMethod(\"{{jsonPath originalRequest.body '$.callbackMethod'}}\")\n          .withUrl(\"{{jsonPath originalRequest.body '$.callbackUrl'}}\"))\n  );\n```\n\n----------------------------------------\n\nTITLE: Running WireMock Standalone JAR Using API Template JSON\nDESCRIPTION: Demonstrates how to execute the WireMock standalone server JAR with API template JSON files placed inside a 'mappings' directory. The command launches WireMock, which automatically loads JSON mappings at startup. Required is the downloaded WireMock standalone JAR file and a 'mappings' folder containing the JSON templates. This snippet uses Bash shell syntax for running the Java JAR file.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/mock-api-templates/usage.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -jar wiremock-jre8-standalone-{{ site.wiremock_version }}.jar\n```\n\n----------------------------------------\n\nTITLE: WireMock REST API Client Usage in Go\nDESCRIPTION: This snippet shows how to use the Go WireMock REST API client to interact with a WireMock instance.  It creates a new WireMock client, sets up a stub for a POST request with a query parameter, and defines the response. The code depends on the `github.com/wiremock/go-wiremock` and `net/http` packages.  The function `wiremockClient.StubFor` defines a stub that matches POST requests to `/user` with a `name` query parameter and returns a JSON response with a 400 status code.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/golang.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc TestSome(t *testing.T) {\n    wiremockClient := wiremock.NewClient(\"http://0.0.0.0:8080\")\n    defer wiremockClient.Reset()\n\n    wiremockClient.StubFor(wiremock.Post(wiremock.URLPathEqualTo(\"/user\")).\n    WithQueryParam(\"name\", wiremock.EqualTo(\"John Doe\")).\n    WillReturnResponse(\n        wiremock.NewResponse().\n            WithJSONBody(map[string]interface{}{\n                \"code\":   400,\n                \"detail\": \"detail\",\n            }).\n            WithHeader(\"Content-Type\", \"application/json\").\n            WithStatus(http.StatusBadRequest),\n    ))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stub Priorities for Overlapping Requests in Java\nDESCRIPTION: Demonstrates assigning priorities to stub mappings, allowing control over which matching stub is used when multiple overlap. Useful for setting catch-all or more specific route responses.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\n//Catch-all case\nstubFor(get(urlMatching(\"/api/.*\")).atPriority(5)\n    .willReturn(aResponse().withStatus(401)));\n\n//Specific case\nstubFor(get(urlEqualTo(\"/api/specific-resource\")).atPriority(1)\n    .willReturn(aResponse()\n            .withStatus(200)\n            .withBody(\"Resource state\")));\n```\n\n----------------------------------------\n\nTITLE: Listening to Raw Network Traffic in WireMock with Console Output (Java)\nDESCRIPTION: This code snippet shows how to enable real-time console logging of all raw HTTP traffic between Jetty and WireMock for debugging purposes by assigning the ConsoleNotifyingWiremockNetworkTrafficListener. This listener will output unmodified request and response data directly to the console, making it useful for tracking the actual traffic, including headers potentially modified by Jetty. It requires WireMock with Jetty and the listener implementation on the classpath.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/configuration.md#_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\n.networkTrafficListener(new ConsoleNotifyingWiremockNetworkTrafficListener()))\n```\n\n----------------------------------------\n\nTITLE: Using Lambda for Custom Matcher - Java\nDESCRIPTION: This example demonstrates a more concise approach to define an inline custom matcher using a lambda expression in Java 8 and above. The matcher checks if the request body is longer than 2048 characters and sets the response status accordingly. Dependencies include WireMock.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/custom-matching.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nwireMockServer.stubFor(requestMatching(request ->\n    MatchResult.of(request.getBody().length > 2048)\n).willReturn(aResponse().withStatus(422)));\n```\n\n----------------------------------------\n\nTITLE: Snapshot Recording via Java DSL\nDESCRIPTION: This Java code demonstrates taking a snapshot of requests received by WireMock, using the snapshotRecord() method. The prerequisites are that requests have been made through WireMock (and optionally proxied to another service). The result will be a list of recorded mappings. Several variations are shown (static DSL, client instance and direct).\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/record-playback.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Static DSL\nList<StubMapping> recordedMappings = WireMock.snapshotRecord();\n\n// Client instance\nWireMock wireMockClient = new WireMock(8080);\nList<StubMapping> recordedMappings = wireMockClient.takeSnapshotRecording();\n\n// Directly\nWireMockServer wireMockServer = new WireMockServer();\nwireMockServer.start();\nList<StubMapping> recordedMappings = wireMockServer.snapshotRecord();\n```\n\n----------------------------------------\n\nTITLE: Configuring Programmatic Proxy Mode with JVM Proxy in JUnit Jupiter\nDESCRIPTION: Demonstrates enabling 'proxy mode' programmatically using `WireMockExtension.newInstance().proxyMode(true)`. It shows how to configure an Apache HttpClient to use JVM system properties, allowing it to be automatically proxied via the specified WireMock instance for multi-domain mocking.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/junit-jupiter.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class JUnitJupiterProgrammaticProxyTest {\n\n  @RegisterExtension\n  static WireMockExtension wm = WireMockExtension.newInstance()\n    .proxyMode(true)\n    .build();\n\n  CloseableHttpClient client;\n\n  @BeforeEach\n  void init() {\n    client = HttpClientBuilder.create()\n      .useSystemProperties() // This must be enabled for auto proxy config\n      .build();\n  }\n\n  @Test\n  void configures_jvm_proxy_and_enables_browser_proxying() throws Exception {\n    wm.stubFor(get(\"/things\")\n      .withHost(equalTo(\"one.my.domain\"))\n      .willReturn(ok(\"1\")));\n\n    wm.stubFor(get(\"/things\")\n      .withHost(equalTo(\"two.my.domain\"))\n      .willReturn(ok(\"2\")));\n\n    assertThat(getContent(\"http://one.my.domain/things\"), is(\"1\"));\n    assertThat(getContent(\"http://two.my.domain/things\"), is(\"2\"));\n  }\n\n  private String getContent(String url) throws Exception {\n    try (CloseableHttpResponse response = client.execute(new HttpGet(url))) {\n      return EntityUtils.toString(response.getEntity());\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using XPath Expressions for XML Request Matching\nDESCRIPTION: Shows how to use XPath expressions to match XML request bodies. This example matches a todo-list with exactly three todo-item elements.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n.withRequestBody(matchingXPath(\"/todo-list[count(todo-item) = 3]\"))\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request\": {\n    ...\n    \"bodyPatterns\" : [ {\n      \"matchesXPath\" : \"/todo-list[count(todo-item) = 3]\"\n    } ]\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Values or Providing Defaults with 'val' Helper\nDESCRIPTION: These snippets showcase the `val` helper in Handlebars for accessing values or providing default values if a value is not present.  It can also assign values to variables while preserving the data type. It takes an optional `or` or `default` parameter to specify the default value, and an optional `assign` parameter to assign the result to a variable.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_20\n\nLANGUAGE: handlebars\nCODE:\n```\n{{val request.query.search or='default'}} // the value of request.query.search or 'default' if it's not present\n{{val request.query.search default='default'}} // the value of request.query.search or 'default' if it's not present\n{{val request.query.search}} // the value of request.query.search or null if it's not present\n{{val request.query.search or='default' assign='myVar'}} // assign the value of request.query.search or 'default' to myVar\n{{val request.query.search assign='myVar'}} // assign the value of request.query.search to myVar\n\n\n{{val (array 1 2 3) default='123'}} // [1, 2, 3]\n{{val 'value for myVar' assign='myVar'}}{{myVar}} // value for myVar\n{{val null or='other value for myVar' assign='myVar'}}{{myVar}} // other value for myVar\n{{val 10 assign='myVar'}}{{#lt myVar 20}}Less Than{{else}}More Than{{/lt}} // Less Than\n```\n\n----------------------------------------\n\nTITLE: Finding Near Misses for All Unmatched Requests in WireMock Java\nDESCRIPTION: Retrieves the closest stub mapping 'near misses' for every request that was received but did not match any configured stub. This provides a convenient way to identify potential matching issues across all unmatched traffic. The method returns a Java `List` of `NearMiss` objects.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nList<NearMiss> nearMisses = WireMock.findNearMissesForAllUnmatched();\n```\n\n----------------------------------------\n\nTITLE: Creating a Stub in Python with Custom Request and Response\nDESCRIPTION: Uses the WireMock Python SDK to create a stub mapping that matches a GET request to '/some/thing' and returns a 200 status with the 'Hello, world!' message and content type header. Suitable for dynamic mock setup in Python tests.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nMappings.create_mapping(\n    Mapping(\n        request=MappingRequest(method=HttpMethods.GET, url=\"/some/thing\"),\n        response=MappingResponse(status=200, body=\"Hello, world!\", headers=(\"Content-Type\", \"text/plain\")),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Binary Response Body - Java\nDESCRIPTION: This snippet demonstrates how to specify a binary response body (byte array) using the WireMock Java API.  A GET request to `/binary-body` returns the specified byte array as the response. Dependencies include the WireMock library.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(get(urlEqualTo(\"/binary-body\"))\n        .willReturn(aResponse()\n                .withBody(new byte[] { 1, 2, 3, 4 })));\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Templating via WireMockServer Options - Java\nDESCRIPTION: This snippet demonstrates how to configure WireMockServer to enable global response templating using the options().globalTemplating(true) method in Java. This makes Handlebars templating available for all stubs without individually adding the response-template transformer. Requires the WireMock Java library. The WireMockServer instance is initialized with global templating enabled. Expects the application to use the WireMockServer instance for managing stubs.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWireMockServer wm =\n    new WireMockServer(options().globalTemplating(true));\n```\n\n----------------------------------------\n\nTITLE: Finding Near Misses for Specific Request in WireMock Java\nDESCRIPTION: Finds configured stub mappings that are 'near misses' for a specific received request, based on the matching distance concept. This is helpful for debugging why a particular request did not match an expected stub. The method takes a `LoggedRequest` object and returns a Java `List` of `NearMiss` objects.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nList<NearMiss> nearMisses = WireMock.findNearMissesFor(myLoggedRequest);\n```\n\n----------------------------------------\n\nTITLE: Finding Requests by Criteria (Java API)\nDESCRIPTION: Queries the request journal to find and retrieve a list of LoggedRequest objects that match the specified request pattern criteria.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nList<LoggedRequest> requests = findAll(putRequestedFor(urlMatching(\"/api/.*\")));\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Custom Matcher - Java\nDESCRIPTION: This snippet shows how to create a custom matcher that can be referred to by name.  It extends `RequestMatcherExtension` and includes a `getName()` method for identifying the matcher.  It also shows how to handle parameters passed to the matcher. Dependencies are the WireMock library.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/custom-matching.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class BodyLengthMatcher extends RequestMatcherExtension {\n\n    @Override\n    public String getName() {\n        return \"body-too-long\";\n    }\n\n    @Override\n    public MatchResult match(Request request, Parameters parameters) {\n        int maxLength = parameters.getInt(\"maxLength\");\n        return MatchResult.of(request.getBody().length > maxLength);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Exactly Multiple Query Parameters - Java\nDESCRIPTION: This Java code snippet configures a WireMock stub that matches GET requests to `/things`.  It verifies that the `id` query parameter has exactly three values: \"1\", \"2\", and \"3\", and no other values are present.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_28\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(get(urlPathEqualTo(\"/things\"))\n    .withQueryParam(\"id\", havingExactly(\"1\", \"2\", \"3\"))\n    .willReturn(ok()));\n```\n\n----------------------------------------\n\nTITLE: Extracting JSON Values with JSONPath Helper\nDESCRIPTION: This snippet demonstrates using the `jsonPath` helper to extract values from a JSON body using a JSONPath expression. It assumes the presence of a `request` object with a `body` property containing the JSON. It returns the value or sub-document that matches the JSONPath.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_28\n\nLANGUAGE: handlebars\nCODE:\n```\n{{jsonPath request.body '$.outer.inner'}}\n```\n\n----------------------------------------\n\nTITLE: Starting WireMock Docker Container with Mounted Mock API Mappings Folder\nDESCRIPTION: Shows how to run the WireMock Docker container with the current working directory (which includes a 'mappings' folder containing the API JSON template) mounted into the container. This allows WireMock inside Docker to automatically load the mappings. The command maps port 8080, names the container 'wiremock', and requires Docker installed and the appropriate WireMock Docker image tagged with the version.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/mock-api-templates/usage.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm \\\n  -p 8080:8080 \\\n  --name wiremock \\\n  -v $PWD:/home/wiremock \\\n  wiremock/wiremock:{{ site.wiremock_version }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication in Wiremock using JSON\nDESCRIPTION: Defines a stub in JSON to match HTTP requests to '/basic-auth' with Basic Authentication credentials, specifying username and password. The matcher inspects the request's authorization header to verify credentials and returns HTTP 200 on success.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"method\": \"GET\",\n        \"url\": \"/basic-auth\",\n        \"basicAuth\": {\n            \"username\": \"user\",\n            \"password\": \"pass\"\n        }\n    },\n    \"response\": {\n        \"status\": 200\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Packaging WireMock Stubs into a Standalone JAR - Bash\nDESCRIPTION: Shows the command for running a custom WireMock executable JAR and loading resources (mappings and files) from a classpath subdirectory. This requires the stubs to be packaged under a subdirectory in the built JAR and the '--load-resources-from-classpath' flag. Input is the path within the classpath; output is loading and registering mappings from the packaged location on startup. Limitation: cannot load from root classpath.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/java-jar.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\njava -jar custom-wiremock.jar --load-resources-from-classpath wiremock-stuff\n```\n\n----------------------------------------\n\nTITLE: Starting WireMock with Admin API Basic Authentication - Bash\nDESCRIPTION: Describes how to launch the WireMock standalone JAR with the admin API protected by HTTP Basic Authentication by specifying credentials via command line. Requires the WireMock standalone JAR and a credential string in 'username:password' format. On startup, further admin API calls must provide proper authentication headers.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/java-jar.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\njava -jar wiremock-standalone.jar --admin-api-basic-auth my-username:my-super-secret-password\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON and Accessing Values Directly\nDESCRIPTION: This snippet parses JSON from the request body and accesses the value of the 'name' property directly using the `lookup` helper, without assigning the parsed JSON to a variable.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_33\n\nLANGUAGE: handlebars\nCODE:\n```\n{{lookup (parseJson request.body) 'name'}}\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP and enabling only HTTPS in WireMock in Java\nDESCRIPTION: Configures WireMock to exclusively accept HTTPS requests by disabling HTTP protocol. Useful for enforcing secure connections in testing or production environments.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/https.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n@Rule\npublic WireMockRule wireMockRule = new WireMockRule(wireMockConfig().httpsPort(8443).httpDisabled(true));\n```\n\n----------------------------------------\n\nTITLE: Running WireMock Standalone with gRPC Extension\nDESCRIPTION: Bash command to run WireMock in standalone mode with the gRPC extension, specifying the root directory containing mappings and descriptor files.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/grpc.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\njava -cp wiremock-standalone-{{ versions.wiremock_version }}.jar:wiremock-grpc-extension-standalone-{{ versions.grpc_extension_version }}.jar \\\n  wiremock.Run \\\n  --root-dir wiremock\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Connection Settings in WireMock (Java)\nDESCRIPTION: These configuration lines increase the maximum number of HTTP client connections to 1000 and disable connection reuse (by passing true to disableConnectionReuse), which can help optimize proxying performance in high-load scenarios. Disabling connection reuse is set to true to disable persistent connections; passing false would enable reuse. Requires Java and WireMock's relevant configuration API.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/configuration.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\n// Maximum connections for Http Client\n.maxHttpClientConnections(1000);\n//Disable http connection reuse, `false` to enable\n.disableConnectionReuse(true)\n```\n\n----------------------------------------\n\nTITLE: Finding Unmatched Requests in WireMock Java\nDESCRIPTION: Retrieves a list of requests received by WireMock that did not match any configured stub mapping. This is useful for debugging unexpected 404 responses or verifying traffic. The method returns a Java `List` of `LoggedRequest` objects.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nList<LoggedRequest> unmatched = WireMock.findUnmatchedRequests();\n```\n\n----------------------------------------\n\nTITLE: Setting a Specific Scenario State via WireMock HTTP API (JSON)\nDESCRIPTION: Shows how to set the state of a specific scenario using the WireMock Admin HTTP API. A `PUT` request is sent to `/__admin/scenarios/{scenario_name}/state` with a JSON body containing the desired state, like `{\"state\": \"state_2\"}`.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stateful-behaviour.md#_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPUT /__admin/scenarios/my_scenario/state\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"state\": \"state_2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WireMock server with custom ports in Java\nDESCRIPTION: This snippet shows how to customize the WebMock server's port settings by passing a WireMockConfiguration object, allowing control over HTTP and HTTPS port assignments for more flexible test setups.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/quickstart/java-junit.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nimport static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n\n@Rule\npublic WireMockRule wireMockRule = new WireMockRule(wireMockConfig().port(8089).httpsPort(8443));\n```\n\n----------------------------------------\n\nTITLE: Checking String/Array Containment as Block Handlebars\nDESCRIPTION: This snippet illustrates the `contains` helper used as a block element. This helps determine if a string contains a specific substring or if an array includes an element. If the contained string is present, the content of the block is rendered. The output is either 'YES' or nothing, depending on whether the condition evaluates to true.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_77\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{#contains 'abcde' 'abc'}}YES{{/contains}}\n{{#contains (array 'a' 'b' 'c') 'a'}}YES{{/contains}}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Random Delay via WireMock JSON Settings API\nDESCRIPTION: Applies a globally randomized delay to all stub responses using a lognormal distribution with specified parameters (median 90, sigma 0.1). POST this JSON to /__admin/settings on the WireMock server. Inputs: JSON with delayDistribution. No code or library dependencies aside from WireMock.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/simulating-faults.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"delayDistribution\": {\n        \"type\": \"lognormal\",\n        \"median\": 90,\n        \"sigma\": 0.1\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Customizing WireMock Mappings Directory Location (Java)\nDESCRIPTION: Illustrates how to override the default search locations for WireMock's file source (mappings and `__files`) using the `filesUnderClasspath` and `filesUnderDirectory` attributes within the `@ConfigureWireMock` annotation. This allows loading stub definitions from specific project locations.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/spring-boot.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@EnableWireMock({\n  @ConfigureWireMock(\n      name = \"fs-client\",\n      filesUnderClasspath = \"some/classpath/resource\",\n      filesUnderDirectory = \"or/a/directory\")\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed HTTP Port Declaratively in JUnit Jupiter\nDESCRIPTION: Shows how to specify a fixed HTTP port (e.g., 8080) for the WireMock server when using the declarative `@WireMockTest` annotation by using the `httpPort` parameter.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/junit-jupiter.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@WireMockTest(httpPort = 8080)\npublic class FixedPortDeclarativeWireMockTest {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing HTTP Form Data Using formData Helper in Handlebars\nDESCRIPTION: The formData helper parses a URL-encoded HTTP form string and converts it into an object containing individual form fields accessible by name. It requires the input string (typically request body) and a variable name to assign the parsed form object, with an optional urlDecode boolean parameter to indicate whether values should be URL decoded. It supports access to multiple value fields via index or named properties. This helper is useful for extracting form field values from HTTP requests in WireMock response templates.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_83\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{formData request.body 'form' urlDecode=true}}{{form.formField3}}\n```\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{formData request.body 'form' urlDecode=true}}{{form.multiValueField.1}}, {{form.multiValueField.2}}\n{{formData request.body 'form' urlDecode=true}}{{form.multiValueField.first}}, {{form.multiValueField.last}}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Stub in JSON for Standalone WireMock\nDESCRIPTION: JSON configuration for defining a gRPC stub in WireMock's standalone mode, showing how to match requests and specify responses for gRPC methods.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/grpc.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request\" : {\n    \"urlPath\" : \"/com.example.grpc.GreetingService/greeting\",\n    \"method\" : \"POST\",\n    \"bodyPatterns\" : [{\n      \"equalToJson\" : \"{ \\\"name\\\":  \\\"Tom\\\" }\"\n    }]\n  },\n  \"response\" : {\n    \"status\" : 200,\n    \"body\" : \"{\\n  \\\"greeting\\\": \\\"Hi Tom\\\"\\n}\",\n    \"headers\" : {\n      \"grpc-status-name\" : \"OK\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching a File-based Stub Response - Bash\nDESCRIPTION: Shows a cURL GET request to retrieve a stubbed response configured via a JSON file in the 'mappings' directory. This requires curl and a WireMock server with the mapping properly loaded. Input is a request to the stubbed endpoint, output is the response as specified in the mapping.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/java-jar.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8080/api/mytest\nMore content\n```\n\n----------------------------------------\n\nTITLE: Using wiremock-rs for HTTP mocking in Rust\nDESCRIPTION: Example of using wiremock-rs to create a mock server, configure a request matcher for GET /hello, and verify the response. Uses async-std runtime.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/rust.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse wiremock::{MockServer, Mock, ResponseTemplate};\nuse wiremock::matchers::{method, path};\n\n#[async_std::main]\nasync fn main() {\n    // Start a background HTTP server on a random local port\n    let mock_server = MockServer::start().await;\n\n    // Arrange the behaviour of the MockServer adding a Mock:\n    // when it receives a GET request on '/hello' it will respond with a 200.\n    Mock::given(method(\"GET\")).and(path(\"/hello\"))\n        .respond_with(ResponseTemplate::new(200))\n        .mount(&mock_server).await;\n\n    // Verify the response\n    let status = surf::get(format!(\"{}/hello\", &mock_server.uri()))\n        .await.unwrap().status();\n    assert_eq!(status.as_u16(), 200);\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Gzip Compression - Java\nDESCRIPTION: This code snippet shows how to disable Gzip compression for a response using the WireMock Java API. This configuration is applied at the response definition level. A GET request to `/todo/items` returns a response with Gzip disabled.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nwireMockServer.stubFor(get(urlEqualTo(\"/todo/items\"))\n        .willReturn(aResponse()\n        .withStatus(200)\n        .withGzipDisabled(true)\n        .withBody(\n        \"Here is some kind of response body\"\n        + \"Here is some kind of response body\"\n        + \"Here is some kind of response body\")));\n```\n\n----------------------------------------\n\nTITLE: Verifying Request with Custom Matcher - Java\nDESCRIPTION: This code snippet shows how to verify that a request matching the custom matcher has been made. The custom matcher checks if the request body length exceeds 2048. Dependencies are the WireMock library.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/custom-matching.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nverify(2, requestMadeFor(new ValueMatcher<Request>() {\n    @Override\n    public MatchResult match(Request request) {\n        return MatchResult.of(request.getBody().length > 2048);\n    }\n}));\n```\n\n----------------------------------------\n\nTITLE: Using XPath with XML Element Matching\nDESCRIPTION: Demonstrates using XPath to select XML elements and comparing them with equalToXml matcher. This matches todo-item elements that exactly match the provided XML.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n.withRequestBody(matchingXPath(\"//todo-item\", equalToXml(\"<todo-item>Do the washing</todo-item>\")))\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request\": {\n    ...\n    \"bodyPatterns\" : [ {\n      \"matchesXPath\" : {\n         \"expression\": \"//todo-item\",\n         \"equalToXml\": \"<todo-item>Do the washing</todo-item>\"\n      }\n    } ]\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WireMockRule with Custom Ports via WireMockConfiguration in JUnit 4 - Java\nDESCRIPTION: This snippet initializes a WireMockRule with explicit HTTP and HTTPS ports by passing a WireMock Options instance built using WireMockConfiguration.options(). The server will start on port 8888 for HTTP and 8889 for HTTPS. This approach allows flexible customization of the WireMock server's network settings. It requires importing WireMock and WireMockConfiguration classes. The code facilitates running tests against WireMock on non-default ports.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/junit-extensions.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@Rule\npublic WireMockRule wireMockRule = new WireMockRule(options().port(8888).httpsPort(8889));\n```\n\n----------------------------------------\n\nTITLE: Observing webhook events in requests log since WireMock 3.7.0\nDESCRIPTION: This JSON illustrates how successful webhook requests and responses are captured as sub-events in the request log, including detailed request/response data and headers, with error sub-events for failures.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/webhooks-and-callbacks.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"subEvents\": [\n        {\n          \"type\": \"WEBHOOK_REQUEST\",\n          \"timeOffsetNanos\": 0,\n          \"data\": {\n            \"url\": \"/2865e463-1f98-4899-8837-90b89364a5dc\",\n            \"absoluteUrl\": \"https://example.com/2865e463-1f98-4899-8837-90b89364a5dc\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"browserProxyRequest\": false,\n            \"loggedDate\": 1719826613928,\n            \"bodyAsBase64\": \"eyJvbGRTdGF0ZSI6IHt9LCAibmV3U3RhdGUiOiB7fX0=\",\n            \"body\": \"{\\\"oldState\\\": {}, \\\"newState\\\": {}}\",\n            \"scheme\": \"https\",\n            \"host\": \"example.com\",\n            \"port\": 443,\n            \"loggedDateString\": \"2024-07-01T09:36:53.928Z\",\n            \"queryParams\": {},\n            \"formParams\": {}\n          }\n        },\n        {\n          \"type\": \"WEBHOOK_RESPONSE\",\n          \"timeOffsetNanos\": 0,\n          \"data\": {\n            \"status\": 200,\n            \"headers\": {\n              \"Transfer-Encoding\": \"chunked\",\n              \"X-Token-Id\": \"2865e463-1f98-4899-8837-90b89364a5dc\",\n              \"Cache-Control\": \"no-cache, private\",\n              \"Server\": \"nginx\",\n              \"X-Request-Id\": \"f530c738-bc00-48f2-8382-2394c25a32c6\",\n              \"Vary\": \"Accept-Encoding\",\n              \"Date\": \"Mon, 01 Jul 2024 09:36:54 GMT\",\n              \"Content-Type\": \"text/html; charset=UTF-8\"\n            },\n            \"bodyAsBase64\": \"\",\n            \"body\": \"\"\n          }\n        }\n      ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings in WireMock\nDESCRIPTION: Sets proxy timeout, enables browser proxying, controls Host and User-Agent headers forwarding, and configures proxy via another server or security stores for secured communication\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/configuration.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n// Set the timeout for requests to the proxy in milliseconds\n.proxyTimeout(5000)\n\n// Make WireMock behave as a forward proxy\n.enableBrowserProxying(true)\n\n// Send the Host header in the original request onwards to the system being proxied to\n.preserveHostHeader(false)\n\n// Transfer original User-Agent header when proxy mode is active\n.preserveUserAgentProxyHeader(true)\n\n// Override the Host header sent when reverse proxying\n.proxyHostHeader(\"my.otherdomain.com\")\n\n// Route via an upstream proxy\n.proxyVia(\"my.corporate.proxy\", 8080)\n\n// Path to trust store for proxy communication\n.trustStorePath(\"/path/to/trust-store.jks\")\n\n// Trust store password\n.trustStorePassword(\"trustme\")\n\n// CA key store path\n.caKeystorePath(\"/path/to/ca-key-store.jks\")\n\n// CA key store password\n.caKeystorePassword(\"trustme\")\n\n// CA key store type\n.caKeystoreType(\"JKS\")\n\n// Supported proxy encodings\n.withSupportedProxyEncodings(\"gzip\", \"deflate\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Global Transformations in Java\nDESCRIPTION: Shows how to restrict a transformer to specific stub mappings by overriding applyGlobally() to return false. Transformers can then be assigned to individual stubs via their names in response configuration.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/transforming-responses.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic boolean applyGlobally() {\n    return false;\n}\n```\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(get(urlEqualTo(\"/local-transform\")).willReturn(aResponse()\n        .withStatus(200)\n        .withBody(\"Original body\")\n        .withTransformers(\"my-transformer\", \"other-transformer\")));\n```\n\n----------------------------------------\n\nTITLE: Templating Proxy URLs in Stubs via Dynamic Request Headers - JSON\nDESCRIPTION: Defines a JSON WireMock stub that uses Handlebars templating to interpolate the X-WM-Proxy-Url header from the original request into the proxyBaseUrl for the response. The stub matches requests to /templated and requires the response-template transformer. Requires WireMock's JSON stubbing API.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"urlPath\": \"/templated\"\n    },\n    \"response\": {\n        \"proxyBaseUrl\": \"{{request.headers.X-WM-Proxy-Url}}\",\n        \"transformers\": [\"response-template\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook configuration with JSON templating for request data\nDESCRIPTION: Represents the same dynamic webhook setup as the Java example, using JSON to specify a POST request body that inserts a transaction ID from the original request via templating.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/webhooks-and-callbacks.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"urlPath\": \"/templating\",\n        \"method\": \"POST\"\n    },\n    \"response\": {\n        \"status\": 200\n    },\n    \"serveEventListeners\": [\n        {\n            \"name\": \"webhook\",\n            \"parameters\": {\n                \"method\": \"POST\",\n                \"url\": \"http://my-target-host/callback\",\n                \"headers\": {\n                    \"Content-Type\": \"application/json\"\n                },\n                \"body\": \"{ \\\"message\\\": \\\"success\\\", \\\"transactionId\\\": \\\"{{jsonPath originalRequest.body '$.transactionId'}}\\\" }\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Importing Stubs - JSON\nDESCRIPTION: This snippet demonstrates importing multiple stubs using the JSON API, including options for handling duplicates and deleting existing stubs not in the import. One stub has an ID and another does not.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_23\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"mappings\": [\n        {\n            \"request\": {\n                \"method\": \"GET\",\n                \"url\": \"/one\"\n            },\n            \"response\": {\n                \"status\": 200\n            }\n        },\n        {\n            \"id\": \"8c5db8b0-2db4-4ad7-a99f-38c9b00da3f7\",\n            \"request\": {\n                \"url\": \"/two\"\n            },\n            \"response\": {\n                \"status\": 200,\n                \"body\": \"Body content\"\n            }\n        }\n    ],\n\n    \"importOptions\": {\n        \"duplicatePolicy\": \"IGNORE\",\n        \"deleteAllNotInImport\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Size of String, List, or Map Using size Helper in Handlebars\nDESCRIPTION: The size helper returns the length of a string or the number of elements in a list or map. It accepts the input expression and returns an integer representing the size, which can be used for conditional logic or iteration limits in response templates. This helper aids in dynamic response construction based on input collection sizes.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_85\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{size 'abcde'}}\n{{size request.query.things}}\n```\n\n----------------------------------------\n\nTITLE: Configuring WireMock server with JUnit rule for port management\nDESCRIPTION: This snippet demonstrates how to instantiate a WireMock server within a JUnit 4 test class using the @Rule annotation, which manages the server's lifecycle. It shows a simple configuration on port 8089, facilitating test isolation and server control.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/quickstart/java-junit.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n@Rule\npublic WireMockRule wireMockRule = new WireMockRule(8089); // No-args constructor defaults to port 8080\n```\n\n----------------------------------------\n\nTITLE: Stubbing gRPC Methods using Java Message Objects\nDESCRIPTION: Java code example demonstrating how to stub gRPC methods using Java classes generated by the protocol buffer compiler.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/grpc.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nmockGreetingService.stubFor(\n    method(\"greeting\")\n        .withRequestMessage(equalToMessage(HelloRequest.newBuilder().setName(\"Tom\")))\n        .willReturn(message(HelloResponse.newBuilder().setGreeting(\"OK\"))));\n```\n\n----------------------------------------\n\nTITLE: Extracting Values from SOAP Bodies with soapXPath Helper\nDESCRIPTION: This snippet demonstrates using the `soapXPath` helper to extract values from a SOAP XML body. It assumes the presence of a `request` object with a `body` property containing the SOAP XML.  It essentially preconfigures the XPath namespaces for SOAP documents.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_23\n\nLANGUAGE: handlebars\nCODE:\n```\n{{soapXPath request.body '/a/test/text()'}}\n```\n\n----------------------------------------\n\nTITLE: Adding WireMock Jetty 12 Dependency for Maven (XML)\nDESCRIPTION: This snippet demonstrates adding the 'wiremock-jetty12' module dependency to a Maven project, enabling WireMock support for Jetty 12. It requires setting the version property '{{ site.wiremock_version }}' to the desired WireMock version. The dependency is scoped for testing purposes.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/jetty-12.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.wiremock</groupId>\n    <artifactId>wiremock-jetty12</artifactId>\n    <version>{{ site.wiremock_version }}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Extracting XML Values with XPath Helper\nDESCRIPTION: This snippet demonstrates using the `xPath` helper to extract values from an XML body using an XPath 1.0 expression.  It assumes the presence of a `request` object with a `body` property containing the XML. It returns the value or sub-document that matches the XPath.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_21\n\nLANGUAGE: handlebars\nCODE:\n```\n{{xPath request.body '/outer/inner/text()'}}\n```\n\n----------------------------------------\n\nTITLE: Matching Exactly with Expressions - Java\nDESCRIPTION: This Java example defines a WireMock stub that matches GET requests to `/things`. It verifies that the `id` query parameter has exactly three values: one equal to \"1\", one containing \"2\", and one not containing \"3\".\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(get(urlPathEqualTo(\"/things\"))\n    .withQueryParam(\"id\", havingExactly(\n        equalTo(\"1\"),\n        containing(\"2\"),\n        notContaining(\"3\")\n    )).willReturn(ok()));\n```\n\n----------------------------------------\n\nTITLE: Adding WireMock 3.x Standalone as Gradle Dependency\nDESCRIPTION: Gradle dependency configuration to add WireMock standalone for testing.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/download-and-installation.md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation \"org.wiremock:wiremock-standalone:{{ site.wiremock_version }}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ResponseTemplateTransformer in WireMock Using Java\nDESCRIPTION: This Java snippet demonstrates how to instantiate and register a ResponseTemplateTransformer extension with a WireMockRule. The extension is configured with a TemplateEngine instance, a flag indicating if templating applies globally, a FileSource for file references, and a list of TemplateModelDataProviderExtension objects for injecting additional metadata into templates. This setup enables advanced templating capabilities and supports permitted system key patterns with case-insensitive regex matching. It requires WireMock dependencies and a custom TemplateEngine implementation.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_88\n\nLANGUAGE: Java\nCODE:\n```\n@Rule\npublic WireMockRule wm = new WireMockRule(options()\n        .dynamicPort()\n        .withRootDirectory(defaultTestFilesRoot())\n        .extensions(new ResponseTemplateTransformer(\n              getTemplateEngine(),\n              options.getResponseTemplatingGlobal(),\n              getFiles(),\n              templateModelProviders\n            )\n        )\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication in Wiremock using Java\nDESCRIPTION: Sets up a GET request stub that matches requests with specific Basic Authentication credentials ('user'/'pass') using Wiremock Java API. The code depends on Wiremock's Java stub configuration and enables matching requests with the specified Authorization header credentials.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(get(urlEqualTo(\"/basic-auth\")).withBasicAuth(\"user\", \"pass\"))\n```\n\n----------------------------------------\n\nTITLE: Removing Serve Events by Criteria (JSON/HTTP API)\nDESCRIPTION: Removes multiple ServeEvent objects from the request journal that match the specified request pattern criteria by sending a POST request with the criteria JSON to /__admin/requests/remove.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"method\": \"PUT\",\n    \"urlPattern\": \"/api/.*\",\n    \"headers\": {\n        \"X-Trace-Id\": {\n            \"equalTo\": \"123\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook with fixed delay JSON configuration\nDESCRIPTION: JSON-configured webhook that introduces a fixed delay in milliseconds before firing, which helps in simulating network latency or timed retries.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/webhooks-and-callbacks.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"urlPath\": \"/delayed\",\n        \"method\": \"POST\"\n    },\n    \"response\": {\n        \"status\": 200\n    },\n    \"serveEventListeners\": [\n        {\n            \"name\": \"webhook\",\n            \"parameters\": {\n                \"method\": \"GET\",\n                \"url\": \"http://my-target-host/callback\",\n                \"delay\": {\n                    \"type\": \"fixed\",\n                    \"milliseconds\": 1000\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Recording via Java DSL\nDESCRIPTION: This Java code snippet shows how to start recording API interactions using the WireMock Java DSL. It initializes the recording process, specifying the target URL to be recorded. Dependencies include the WireMock library. The expected output includes stub mappings created after stopping the recording.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/record-playback.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Static DSL\nWireMock.startRecording(\"http://examples.wiremockapi.cloud/\");\nList<StubMapping> recordedMappings = WireMock.stopRecording();\n\n// Client instance\nWireMock wireMockClient = new WireMock(8080);\nwireMockClient.startStubRecording(\"http://examples.wiremockapi.cloud/\");\nList<StubMapping> recordedMappings = wireMockClient.stopStubRecording();\n\n// Directly\nWireMockServer wireMockServer = new WireMockServer();\nwireMockServer.start();\nWireMockServer.startRecording(\"http://examples.wiremockapi.cloud/\");\nList<StubMapping> recordedMappings = wireMockServer.stopRecording();\n```\n\n----------------------------------------\n\nTITLE: Bulk Importing Stubs - Java\nDESCRIPTION: This code demonstrates how to import multiple stub mappings in one call using the WireMock Java API. It creates stubs for GET, POST, and PUT requests, and configures import options to ignore existing stubs and delete any existing stubs not included in the import.  Dependencies include WireMock.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\nWireMock.importStubs(stubImport()\n    .stub(get(\"/one\").willReturn(ok()))\n    .stub(post(\"/two\").willReturn(ok(\"Body content\")))\n    .stub(put(\"/three\").willReturn(ok()))\n    .ignoreExisting()\n    .deleteAllExistingStubsNotInImport());\n```\n\n----------------------------------------\n\nTITLE: Using Transformer Parameters in Templated Stubs - JSON\nDESCRIPTION: Configures a WireMock JSON stub with a transformerParameters map, allowing dynamic values to be passed into Handlebars templates via the parameters. context object. The stub returns a response body using {{request.path.[0]}} and exposes MyCustomParameter for use in template expressions. Transformer array must include response-template.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"urlPath\": \"/templated\"\n    },\n    \"response\": {\n        \"body\": \"{{request.path.[0]}}\",\n        \"transformers\": [\"response-template\"],\n        \"transformerParameters\": {\n            \"MyCustomParameter\": \"Parameter Value\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using XPath with Namespace Support in WireMock\nDESCRIPTION: Demonstrates how to use XPath expressions with namespace support for matching XML with specific namespaces. The example maps namespace prefixes to URIs.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n.withRequestBody(matchingXPath(\"/stuff:outer/more:inner[.=111]\")\n  .withXPathNamespace(\"stuff\", \"http://stuff.example.com\")\n  .withXPathNamespace(\"more\", \"http://more.example.com\"))\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request\": {\n    ...\n    \"bodyPatterns\" : [ {\n      \"matchesXPath\" : \"/stuff:outer/more:inner[.=111]\",\n      \"xPathNamespaces\" : {\n        \"stuff\" : \"http://stuff.example.com\",\n        \"more\"  : \"http://more.example.com\"\n      }\n    } ]\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Specific Scenario State in WireMock (Java)\nDESCRIPTION: Demonstrates how to explicitly set the state of a specific scenario to a desired value using the `WireMock.setScenarioState()` method in the Java API. Requires the scenario name and the target state name as arguments.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stateful-behaviour.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nWireMock.setScenarioState(\"my_scenario\", \"state_2\");\n```\n\n----------------------------------------\n\nTITLE: Running WireMock with Extensions Enabled - Shell\nDESCRIPTION: This shell command demonstrates launching a WireMock Docker container with a custom extension (e.g., Webhooks) provided via a mounted directory. The -v flag maps a host directory containing jar extensions to /var/wiremock/extensions, and the --extensions CLI argument activates the extension. Requires the relevant extension jar in the extensions directory and Docker installed.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/docker.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it --rm \\\n  -p 8080:8080 \\\n  --name wiremock \\\n  -v $PWD/extensions:/var/wiremock/extensions \\\n  wiremock/wiremock \\\n    --extensions org.wiremock.webhooks.Webhooks\n\n```\n\n----------------------------------------\n\nTITLE: WireMock Testcontainers Integration in Go\nDESCRIPTION: This snippet demonstrates how to use the Testcontainers for Go module with WireMock. It initializes a WireMock container, adds a mapping file, sends an HTTP GET request, and verifies the response.  It depends on the `github.com/wiremock/wiremock-testcontainers-go` and `testing` packages. The function `RunContainerAndStopOnCleanup` starts the container with a predefined mapping file. `SendHttpGet` sends the HTTP request to the container.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/golang.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"context\"\n  . \"github.com/wiremock/wiremock-testcontainers-go\"\n  \"testing\"\n)\n\nfunc TestWireMock(t *testing.T) {\n\t// Create Container\n\tctx := context.Background()\n\tcontainer, err := RunContainerAndStopOnCleanup(ctx,\n\t\tWithMappingFile(\"hello\", \"hello-world.json\"),\n\t)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t// Send the HTTP GET request to the mocked API\n\tstatusCode, out, err := SendHttpGet(container, \"/hello\", nil)\n\tif err != nil {\n\t\tt.Fatal(err, \"Failed to get a response\")\n\t}\n\t// Verify the response\n\tif statusCode != 200 {\n\t\tt.Fatalf(\"expected HTTP-200 but got %d\", statusCode)\n\t}\n\tif string(out) != \"Hello, world!\" {\n\t\tt.Fatalf(\"expected 'Hello, world!' but got %v\", string(out))\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Snapshot Recording via API\nDESCRIPTION: This API call uses a POST request to the /__admin/recordings/snapshot endpoint to convert already received requests into stub mappings. The request has no body.  Prerequisites: requests have been made to the WireMock instance.  Output: new stub mappings based on those requests.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/record-playback.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\nPOST /__admin/recordings/snapshot\n{}\n```\n\n----------------------------------------\n\nTITLE: Registering MappingsLoaderExtension (Java)\nDESCRIPTION: This code snippet shows how to register a custom `MappingsLoaderExtension` with a WireMock server. The `extensions()` method of the `WireMockConfig` object is used to register the extension. This allows WireMock to load mappings from the custom source defined in the extension.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/adding-mappings-loader.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nWireMockServer wireMockServer = new WireMockServer(wireMockConfig()\n                .extensions(new DummyMappingsLoaderExtension())\n                ); // Register your extension here\n```\n\n----------------------------------------\n\nTITLE: Using Abbreviated Request Pattern in Java for Common HTTP Methods\nDESCRIPTION: Demonstrates simplified Java syntax to create stubs for common HTTP methods and URLs, such as GET or POST, with less verbose code. Supports quick setup of standard responses for specific endpoints in tests.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(get(\"/some/thing\")\n    .willReturn(aResponse().withStatus(200)));\n```\n\n----------------------------------------\n\nTITLE: Removing Stubs by Metadata - Java\nDESCRIPTION: This Java code demonstrates how to remove stubs based on their metadata using `matchingJsonPath`. It removes stubs where the `singleItem` field contains the string \"123\".\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stub-metadata.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nremoveStubsByMetadata(matchingJsonPath(\"$.singleItem\", containing(\"123\")));\n```\n\n----------------------------------------\n\nTITLE: Stopping Recording via API\nDESCRIPTION: This snippet shows how to stop the recording process using a POST request to the recordings/stop endpoint. This action triggers the generation of stub mappings based on recorded API interactions. No parameters are needed for the stop operation.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/record-playback.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nPOST /__admin/recordings/stop\n```\n\n----------------------------------------\n\nTITLE: Supplying Parameters for ResponseDefinitionTransformerV2 in Java\nDESCRIPTION: Demonstrates how to pass parameters to the transformer on a per-stub basis using withTransformerParameter and matching JSON response structure. Parameters can be deeply nested and are used within the transform method for dynamic responses.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/transforming-responses.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(get(urlEqualTo(\"/transform\")).willReturn(\n        aResponse()\n                .withTransformerParameter(\"newValue\", 66)\n                .withTransformerParameter(\"inner\", ImmutableMap.of(\"thing\", \"value\"))))); // ImmutableMap is from Guava, but any Map will do\n```\n\n----------------------------------------\n\nTITLE: Configuring WireMock Standalone Gradle Dependency for Java 1.7\nDESCRIPTION: Gradle dependency configuration to include WireMock standalone JAR version 2.27.2 for testing in Java 1.7 projects. This version is the last one that supports Java 1.7.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/advanced/java7.md#_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation \"com.github.tomakehurst:wiremock-standalone:2.27.2\"\n```\n\n----------------------------------------\n\nTITLE: Specifying HTTP Request Methods Including Any and GET_OR_HEAD in Java\nDESCRIPTION: Reviews how to match requests with specific HTTP methods, including special cases like any method or combined GET or HEAD. Useful for handling multiple request types with minimal configuration.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\n@Test\npublic void getOrHeadDemo() {\n\tstubFor(getOrHead(urlEqualTo(\"/get-or-head-test\"))\n            .willReturn(okJson(\"{\\\"key\\\": \\\"value\\\"}\")));\n\t\n\tassertThat(testClient.get(\"/get-or-head-test\").statusCode(), is(200));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Stub Random Delay with Lognormal Distribution via Java\nDESCRIPTION: Shows how to set a random, lognormally-distributed response delay for a stub using Java. The stub responds to GET \"/random/delayed\" with a 200 status, and delays are drawn from a lognormal distribution (median 90, sigma 0.1). Requires WireMock Java API, withLogNormalRandomDelay method, and mathematical knowledge of latency distributions. Used for simulating real-world, variable backend performance.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/simulating-faults.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nstubFor(get(urlEqualTo(\"/random/delayed\")).willReturn(\n        aResponse()\n                .withStatus(200)\n                .withLogNormalRandomDelay(90, 0.1)));\n\n```\n\n----------------------------------------\n\nTITLE: Resetting All Scenario States in WireMock (Java)\nDESCRIPTION: Illustrates how to reset the state of all configured scenarios back to their initial 'Started' state using the static `WireMock.resetAllScenarios()` method in the Java API.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stateful-behaviour.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nWireMock.resetAllScenarios()\n```\n\n----------------------------------------\n\nTITLE: Implementing Programmatic WireMock Testing with Multiple Instances in JUnit Jupiter\nDESCRIPTION: Shows advanced programmatic usage of the WireMock JUnit Jupiter extension using `@RegisterExtension`. It demonstrates how to create and configure multiple `WireMockExtension` instances, access their runtime info, and use their instance-specific DSL for stubbing.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/junit-jupiter.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class ProgrammaticWireMockTest {\n\n    @RegisterExtension\n    static WireMockExtension wm1 = WireMockExtension.newInstance()\n            .options(wireMockConfig().dynamicPort().dynamicHttpsPort())\n            .build();\n\n    @RegisterExtension\n    static WireMockExtension wm2 = WireMockExtension.newInstance()\n            .options(wireMockConfig()\n                     .dynamicPort()\n                     .extensions(new ResponseTemplateTransformer(\n                          getTemplateEngine(),\n                          options.getResponseTemplatingGlobal(),\n                          getFiles(),\n                          templateModelProviders\n                        )\n                     )\n            .build();\n\n    @Test\n    void test_something_with_wiremock() {\n        // You can get ports, base URL etc. via WireMockRuntimeInfo\n        WireMockRuntimeInfo wm1RuntimeInfo = wm1.getRuntimeInfo();\n        int httpsPort = wm1RuntimeInfo.getHttpsPort();\n\n        // or directly via the extension field\n        int httpPort = wm1.port();\n\n        // You can use the DSL directly from the extension field\n        wm1.stubFor(get(\"/api-1-thing\").willReturn(ok()));\n\n        wm2.stubFor(get(\"/api-2-stuff\").willReturn(ok()));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stubbing with OR Matcher - JSON\nDESCRIPTION: This JSON snippet configures a WireMock stub that matches GET requests to `/or`. It checks for a `search` query parameter that either matches the regular expression `[a-z]+` or is absent. The `or` condition allows the request to match if either of these sub-conditions is true.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_25\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"urlPath\": \"/or\",\n        \"method\": \"GET\",\n        \"queryParameters\": {\n            \"search\": {\n                \"or\": [\n                    {\n                        \"matches\": \"[a-z]+\"\n                    },\n                    {\n                        \"absent\": true\n                    }\n                ]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting XML Sub-Documents with XPath Helper\nDESCRIPTION: This snippet demonstrates using the `xPath` helper to extract an XML sub-document from an XML body using an XPath 1.0 expression. It assumes the presence of a `request` object with a `body` property containing the XML. It returns the sub-document that matches the XPath.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_22\n\nLANGUAGE: handlebars\nCODE:\n```\n{{xPath request.body '/outer/inner'}}\n```\n\n----------------------------------------\n\nTITLE: Registering WireMock Extensions Programmatically in Java\nDESCRIPTION: Demonstrates three ways to register custom extensions when configuring a `WireMockServer` instance in Java. Extensions can be registered by providing their fully qualified class names as strings, their Class objects, or instances of the extension classes using the `extensions()` method on `WireMockConfig`. Requires `WireMockServer` and `wireMockConfig` from the WireMock library.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extending-wiremock.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nnew WireMockServer(wireMockConfig()\n  .extensions(\"com.mycorp.BodyContentTransformer\", \"com.mycorp.HeaderMangler\"));\n\nnew WireMockServer(wireMockConfig()\n  .extensions(BodyContentTransformer.class, HeaderMangler.class));\n\nnew WireMockServer(wireMockConfig()\n  .extensions(new BodyContentTransformer(), new HeaderMangler()));\n```\n\n----------------------------------------\n\nTITLE: Simulating Chunked Dribble Delays with WireMock Java API\nDESCRIPTION: Illustrates how to send HTTP responses in slow chunks using the WireMock Java API for the endpoint \"/chunked/delayed\". The response body (\"Hello world!\") is split into 5 chunks, sent over a total duration of 1000 milliseconds. Requires WireMock Java stubFor, withChunkedDribbleDelay, and related methods. Inputs: numberOfChunks, totalDuration. Outputs: response body streamed in parts, simulating slow/unstable network.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/simulating-faults.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nstubFor(get(\"/chunked/delayed\").willReturn(\n        aResponse()\n                .withStatus(200)\n                .withBody(\"Hello world!\")\n                .withChunkedDribbleDelay(5, 1000)));\n\n```\n\n----------------------------------------\n\nTITLE: Mounting Volumes for WireMock Stubs and Extensions in Docker Compose - YAML\nDESCRIPTION: This YAML Compose example configures the WireMock container to mount local directories (extensions, __files, mappings) into the appropriate directories inside the container. This enables persistent mock behaviors and extension loading across restarts. The service uses a custom entrypoint to pass WireMock startup options, matching requirements for advanced setups and local development workflows.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/docker.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# Sample compose file\nversion: \"3\"\nservices:\n  wiremock:\n    image: \"wiremock/wiremock:latest\"\n    container_name: my_wiremock\n    volumes:\n      - ./extensions:/var/wiremock/extensions\n      - ./__files:/home/wiremock/__files\n      - ./mappings:/home/wiremock/mappings\n    entrypoint: [\"/docker-entrypoint.sh\", \"--global-response-templating\", \"--disable-gzip\", \"--verbose\"]\n\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Stub Mapping - Java\nDESCRIPTION: This Java code demonstrates how to add metadata to a stub mapping in WireMock. It uses the `withMetadata` method along with the `metadata()` builder to define key-value pairs and nested objects within the metadata.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stub-metadata.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(get(\"/with-metadata\")\n      .withMetadata(metadata()\n        .attr(\"singleItem\", 1234)\n        .list(\"listItem\", 1, 2, 3, 4)\n        .attr(\"nestedObject\", metadata()\n            .attr(\"innerItem\", \"Hello\")\n        )\n));\n```\n\n----------------------------------------\n\nTITLE: Truncating dates with truncateDate helper in Handlebars\nDESCRIPTION: Demonstrates using the truncateDate helper to truncate dates to specific time periods, such as the first day of the month.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_56\n\nLANGUAGE: handlebars\nCODE:\n```\n// If the MyDate header is Tue, 15 Jun 2021 15:16:17 GMT\n// then the result of the following will be 2021-06-01T00:00:00Z\n{{date (truncateDate (parseDate request.headers.MyDate) 'first day of month')}}\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-State Scenario in WireMock (JSON)\nDESCRIPTION: Provides the JSON equivalent for defining the \"To do list\" scenario via the WireMock Admin API. It consists of an array of three mapping objects, each specifying `scenarioName`, `requiredScenarioState`, request matchers (`method`, `url`, `bodyPatterns`), response details (`status`, `body`), and `newScenarioState` for the mapping that triggers a state transition.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stateful-behaviour.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mappings\": [\n        {\n            \"scenarioName\": \"To do list\",\n            \"requiredScenarioState\": \"Started\",\n            \"request\": {\n                \"method\": \"GET\",\n                \"url\": \"/todo/items\"\n            },\n            \"response\": {\n                \"status\": 200,\n                \"body\": \"<items><item>Buy milk</item></items>\"\n            }\n        },\n        {\n            \"scenarioName\": \"To do list\",\n            \"requiredScenarioState\": \"Started\",\n            \"newScenarioState\": \"Cancel newspaper item added\",\n            \"request\": {\n                \"method\": \"POST\",\n                \"url\": \"/todo/items\",\n                \"bodyPatterns\": [\n                    { \"contains\": \"Cancel newspaper subscription\" }\n                ]\n            },\n            \"response\": {\n                \"status\": 201\n            }\n        },\n        {\n            \"scenarioName\": \"To do list\",\n            \"requiredScenarioState\": \"Cancel newspaper item added\",\n            \"request\": {\n                \"method\": \"GET\",\n                \"url\": \"/todo/items\"\n            },\n            \"response\": {\n                \"status\": 200,\n                \"body\": \"<items><item>Buy milk</item><item>Cancel newspaper subscription</item></items>\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MappingsLoaderExtension (Java)\nDESCRIPTION: This code snippet demonstrates how to implement the `MappingsLoaderExtension` interface to create a custom mappings loader. The `getName()` method returns the name of the extension, and the `loadMappingsInto()` method is responsible for loading the mappings from a specific source (e.g., a database, file storage, or Git repository) and adding them to the `StubMappings` object.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/adding-mappings-loader.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class DummyMappingsLoaderExtension extends MappingsLoaderExtension {\n  @Override\n  public String getName() {\n    return \"dummy-mappings-loader\"; // Return the name of extension\n  }\n\n  @Override\n  public void loadMappingsInto(StubMappings stubMappings) {\n        // implementation to load the mappings\n        // mappings can be loaded from any source like git repo, database, file storage, stc\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Serve Events by Query (Java API)\nDESCRIPTION: Retrieves a list of ServeEvent objects filtered according to a specific query, such as getting only unmatched requests or requests matching a particular stub ID.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nList<ServeEvent> serveEvents = getAllServeEvents(ServeEventQuery.ALL_UNMATCHED);\n```\n\nLANGUAGE: Java\nCODE:\n```\nList<ServeEvent> serveEvents =\n  getAllServeEvents(ServeEventQuery.forStubMapping(myStubId));\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Transformers to WireMock Stub Generation Using JSON\nDESCRIPTION: This snippet illustrates how to apply one or more custom transformer extensions during the stub generation process in WireMock by specifying their names under the 'transformers' array property. Additionally, it shows how to pass parameters to these transformers via the 'transformerParameters' object, enabling customizable behavior during recording. These transformers must be implemented as StubMappingTransformer classes and registered with WireMock's extension mechanism prior to use.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/record-playback.md#_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n\"transformers\": [\"transformer-one\", \"transformer-two\"]\n```\n\nLANGUAGE: JSON\nCODE:\n```\n\"transformerParameters\": {\n    \"simpleParam1\": \"One\",\n    \"arrayParam2\": [1, 2, 3]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WireMock DevServices for Quarkus\nDESCRIPTION: This snippet shows how to configure WireMock DevServices within a Quarkus project using properties. The properties enable WireMock during development, specify the directory containing mappings and files, set the listening port, and enable automatic reloading of changes. It provides a basic setup for using WireMock with Quarkus development mode and requires the Quarkus WireMock extension to be present in the project's dependencies.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/quarkus.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nquarkus.wiremock.devservices.enabled=true\nquarkus.wiremock.devservices.files-mapping=<path to wiremock root dir with mappings and __files folders>\nquarkus.wiremock.devservices.port=8089\nquarkus.wiremock.devservices.reload=true\n```\n\n----------------------------------------\n\nTITLE: Using XPath with Nested Value Matching\nDESCRIPTION: Shows how to combine XPath with another matcher to evaluate the value returned from the XPath query. This example matches if any todo-item text contains 'wash'.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n.withRequestBody(matchingXPath(\"//todo-item/text()\", containing(\"wash\")))\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request\": {\n    ...\n    \"bodyPatterns\" : [ {\n      \"matchesXPath\" : {\n         \"expression\": \"//todo-item/text()\",\n         \"contains\": \"wash\"\n      }\n    } ]\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting a Single Scenario State in WireMock (Java)\nDESCRIPTION: Shows how to reset the state of a specific named scenario back to its initial 'Started' state using the `WireMock.resetScenario()` method in the Java API, passing the scenario name as an argument.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stateful-behaviour.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nWireMock.resetScenario(\"my_scenario\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Domain Mocking with WireMockServer in Java\nDESCRIPTION: Shows how to configure a standalone `WireMockServer` instance for multi-domain mocking in a standard Java application. It involves creating and starting the server with browser proxying enabled (`.enableBrowserProxying(true)`), configuring an Apache `HttpClient` to respect system proxy properties (`.useSystemProperties()`), setting the JVM proxy settings using `JvmProxyConfigurer.configureFor(wireMockServer)`, defining stubs with hostname matching via `.withHost()`, executing HTTP requests to the target domains, and finally stopping the server and restoring the original JVM proxy settings using `JvmProxyConfigurer.restorePrevious()`.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/multi-domain-mocking.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic void testViaProxyUsingServer() throws Exception {\n  WireMockServer wireMockServer = new WireMockServer(options()\n    .dynamicPort()\n    .enableBrowserProxying(true)\n  );\n  wireMockServer.start();\n\n  HttpClient httpClient = HttpClientBuilder.create()\n    .useSystemProperties() // This must be enabled for auto proxy config\n    .build();\n\n  JvmProxyConfigurer.configureFor(wireMockServer);\n\n  wireMockServer.stubFor(get(\"/things\")\n    .withHost(equalTo(\"my.first.domain\"))\n    .willReturn(ok(\"Domain 1\")));\n\n  wireMockServer.stubFor(get(\"/things\")\n    .withHost(equalTo(\"my.second.domain\"))\n    .willReturn(ok(\"Domain 2\")));\n\n  HttpResponse response = httpClient.execute(new HttpGet(\"http://my.first.domain/things\"));\n  String responseBody = EntityUtils.toString(response.getEntity()); // Should == Domain 1\n\n  response = httpClient.execute(new HttpGet(\"http://my.second.domain/things\"));\n  responseBody = EntityUtils.toString(response.getEntity()); // Should == Domain 2\n\n  wireMockServer.stop();\n  JvmProxyConfigurer.restorePrevious();\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Scenario States via WireMock HTTP API (JSON)\nDESCRIPTION: Demonstrates how to fetch the status of all scenarios using the WireMock Admin HTTP API. Sending a `GET` request to `/__admin/scenarios` returns a JSON response containing an array of scenario objects, each detailing its ID, name, current state, and possible states.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stateful-behaviour.md#_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /__admin/scenarios\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scenarios\" : [ {\n    \"id\" : \"my_scenario\",\n    \"name\" : \"my_scenario\",\n    \"state\" : \"Started\",\n    \"possibleStates\" : [ \"Started\", \"state_2\", \"state_3\" ]\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Per-Stub Response Templating with Dynamic Body Content - JSON\nDESCRIPTION: Defines a JSON stub that uses response-template to populate the body with the first path segment from the request using Handlebars syntax. The transformer array must include response-template for templating logic to run. The stub is matched for any request to /templated. Expects 'request' and 'response' configuration per WireMock JSON API standards.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"urlPath\": \"/templated\"\n    },\n    \"response\": {\n        \"body\": \"{{request.path.[0]}}\",\n        \"transformers\": [\"response-template\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Templating Proxy URLs in Stubs via Dynamic Request Headers - Java\nDESCRIPTION: Demonstrates configuring a WireMock stub in Java to dynamically determine a proxy base URL using Handlebars templating, interpolating the header X-WM-Proxy-Url from the original request with response-template transformer. Useful for dynamic routing scenarios. Requires WireMock Java API and proper stub registration.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nwm.stubFor(get(urlPathEqualTo(\"/templated\"))\n  .willReturn(aResponse()\n      .proxiedFrom(\"{{request.headers.X-WM-Proxy-Url}}\")\n      .withTransformers(\"response-template\")));\n```\n\n----------------------------------------\n\nTITLE: Joining Array Elements - Block Helper Handlebars\nDESCRIPTION: This snippet illustrates how to use `arrayJoin` as a block helper, enabling the processing of array elements inside the helper. It uses `parseJson` to read a JSON array, iterates using `arrayJoin`, and produces a formatted output. The output is a JSON-formatted string with the joined array elements.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_75\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{#parseJson 'myThings'}}\n[\n  { \"id\": 1, \"name\": \"One\" },\n  { \"id\": 2, \"name\": \"Two\" },\n  { \"id\": 3, \"name\": \"Three\" }\n]\n{{/parseJson}}\n[{{#arrayJoin ',' myThings as |item|}}\n{\n\"name{{item.id}}\": \"{{item.name}}\"\n}\n{{/arrayJoin}}]\n\n\n// or the same example with the prefix and suffix parameters\n{{#parseJson 'myThings'}}\n    [\n    { \"id\": 1, \"name\": \"One\" },\n    { \"id\": 2, \"name\": \"Two\" },\n    { \"id\": 3, \"name\": \"Three\" }\n    ]\n{{/parseJson}}\n{{#arrayJoin ',' myThings prefix='[' suffix=']' as |item|}}\n    {\n    \"name{{item.id}}\": \"{{item.name}}\"\n    }\n{{/arrayJoin}}\n```\n\n----------------------------------------\n\nTITLE: Adding Extensions to WireMock for Custom Functionality\nDESCRIPTION: Specifies class names of custom extensions to enhance or modify WireMock's behavior, following the extension framework.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/configuration.md#_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\n// Add custom extensions\n.extensions(\"com.mycorp.ExtensionOne\", \"com.mycorp.ExtensionTwo\")\n```\n\n----------------------------------------\n\nTITLE: Request Journal Configuration for Recording Requests in WireMock\nDESCRIPTION: Controls whether WireMock records incoming requests and limits the journal size to prevent memory issues, essential for request verification and load testing scenarios.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/configuration.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\n// Do not record received requests\n.disableRequestJournal()\n\n// Limit the size of the request log\n.maxRequestJournalEntries(Optional.of(100))\n```\n\n----------------------------------------\n\nTITLE: Testing with WireMock using Python Testcontainers\nDESCRIPTION: This Python code example showcases how to use WireMock with Testcontainers to create a mock server. It uses pytest fixtures to manage the lifecycle of the WireMock container. The code defines a mapping for the '/hello' endpoint and then sends a GET request.  Dependencies include pytest, the wiremock library and the requests library.  It verifies the response status code and content.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/testcontainers.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom wiremock.testing.testcontainer import wiremock_container\n\n@pytest.fixture(scope=\"session\") # (1)\ndef wm_server():\n    with wiremock_container(secure=False) as wm:\n        Config.base_url = wm.get_url(\"__admin\") # (2)=\n        Mappings.create_mapping(\n            Mapping(\n                request=MappingRequest(method=HttpMethods.GET, url=\"/hello\"),\n                response=MappingResponse(status=200, body=\"hello\"),\n                persistent=False,\n            )\n        ) # (3)\n        yield wm\n\ndef test_get_hello_world(wm_server): # (4)\n    resp1 = requests.get(wm_server.get_url(\"/hello\"), verify=False)\n    assert resp1.status_code == 200\n    assert resp1.content == b\"hello\"\n```\n\n----------------------------------------\n\nTITLE: Resetting All Scenario States via WireMock HTTP API\nDESCRIPTION: Explains how to reset all scenarios to their initial state using the WireMock Admin HTTP API. This is achieved by sending an empty `POST` request to the `/__admin/scenarios/reset` endpoint.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stateful-behaviour.md#_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /__admin/scenarios/reset\n```\n\n----------------------------------------\n\nTITLE: Using WireMock in Golang Tests with Testcontainers\nDESCRIPTION: This Golang code illustrates how to use WireMock with Testcontainers in a test environment. It defines a test function that starts a WireMock container, adds a mapping via a JSON file, and then sends an HTTP GET request to the \"/hello\" endpoint.  Dependencies include the wiremock-testcontainers-go package. The code verifies the response status code and the body's content.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/testcontainers.md#_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\npackage testcontainers_wiremock_quickstart\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t. \"github.com/wiremock/wiremock-testcontainers-go\"\n)\n\nfunc TestWireMock(t *testing.T) {\n\tctx := context.Background()\n\tmappingFileName := \"hello-world.json\"\n\n\tcontainer, err := RunContainerAndStopOnCleanup(ctx, t,\n\t\tWithMappingFile(mappingFileName),\n\t)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tstatusCode, out, err := SendHttpGet(container, \"/hello\", nil)\n\tif err != nil {\n\t\tt.Fatal(err, \"Failed to get a response\")\n\t}\n\n\t// Verify the response\n\tif statusCode != 200 {\n\t\tt.Fatalf(\"expected HTTP-200 but got %d\", statusCode)\n\t}\n\n\tif string(out) != \"Hello, world!\" {\n\t\tt.Fatalf(\"expected 'Hello, world!' but got %s\", out)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding gRPC Extension with Maven\nDESCRIPTION: Maven dependency configuration to add the WireMock gRPC extension to a Java project.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/grpc.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.wiremock</groupId>\n    <artifactId>wiremock-grpc-extension</artifactId>\n    <version>{{ site.grpc_extension_version }}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Fixed Delay via WireMock JSON Settings API\nDESCRIPTION: Configures a global fixed delay (here, 500 milliseconds) for all stub responses using the WireMock JSON settings API. POST this JSON to the WireMock admin endpoint at /__admin/settings. Affects all responses globally, not just individual stubs. Inputs: JSON payload. No code dependencies required.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/simulating-faults.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"fixedDelay\": 500\n}\n\n```\n\n----------------------------------------\n\nTITLE: Selecting random values with pickRandom helper in Handlebars\nDESCRIPTION: Demonstrates using the pickRandom helper to randomly select values from literal lists or from parameters passed to the helper.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_58\n\nLANGUAGE: handlebars\nCODE:\n```\n{{pickRandom '1' '2' '3'}}\n{{pickRandom (jsonPath request.body '$.names')}}\n{{pickRandom 1 2 3 4 5 count=3}}\n```\n\n----------------------------------------\n\nTITLE: Joining Array Elements with Prefix/Suffix Handlebars\nDESCRIPTION: This snippet shows how to use the `arrayJoin` helper with `prefix` and `suffix` parameters. It concatenates array elements with a separator, prepending a prefix and appending a suffix to the final string. The output is a string that begins with the prefix, then the joined array elements, followed by the suffix.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_74\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{arrayJoin ',' (array 'One' 'Two' 'Three') prefix='[' suffix=']'}} // [One,Two,Three]\n{{arrayJoin ' * ' (array 1 2 3) prefix='(' suffix=')'}} // (1 * 2 * 3)\n```\n\n----------------------------------------\n\nTITLE: Enabling Cross-origin Resource Sharing (CORS) in WireMock\nDESCRIPTION: Automatically adds CORS headers to stub responses, facilitating cross-origin requests during testing by enabling browsers to accept responses.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/configuration.md#_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\n.stubCorsEnabled(true)\n```\n\n----------------------------------------\n\nTITLE: Stubbing a GET Request with Kotlin DSL Bindings\nDESCRIPTION: This snippet demonstrates using the external 'kotlin-wiremock' library's DSL to define a WireMock stub for a GET request. It configures a stub for the URL '/users/1' to return an HTTP 200 status, a JSON content type header, and a specific JSON body.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/kotlin.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nwiremock.get {\n    url equalTo \"/users/1\"\n} returns {\n    statusCode = 200\n    header = \"Content-Type\" to \"application/json\"\n    body = \"\"\"\n    {\n      \"id\": 1,\n      \"name\": \"Bob\"\n    }\n    \"\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Near Misses for Request Pattern in WireMock Java\nDESCRIPTION: Finds requests received by WireMock that are 'near misses' for a specific request pattern, ranked by the matching distance. This is useful for debugging why a defined stub mapping was not matched by any incoming traffic. The method takes a `RequestPattern` object and returns a Java `List` of `NearMiss` objects.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nList<NearMiss> nearMisses = WireMock.findNearMissesFor(\n    getRequestedFor(urlEqualTo(\"/thing-url\"))\n        .withRequestBody(containing(\"thing\"))\n);\n```\n\n----------------------------------------\n\nTITLE: Merging JSON objects with jsonMerge in Handlebars\nDESCRIPTION: Shows how to merge two JSON objects recursively using the jsonMerge helper, which combines properties and handles nested objects.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_49\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#assign 'object1'}}\n{\n    \"id\": 456,\n    \"forename\": \"Robert\",\n    \"surname\": \"Smith\",\n    \"address\": {\n        \"number\": \"12\"\n    },\n    \"hobbies\": [ \"chess\", \"football\" ]\n}\n{{/assign}}\n{{#assign 'object2'}}\n{\n    \"forename\": \"Robert\",\n    \"nickname\": \"Bob\",\n    \"address\": {\n        \"street\": \"High Street\"\n    },\n    \"hobbies\": [ \"rugby\" ]\n}\n{{/assign}}\n\n{{jsonMerge object1 object2}}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 456,\n    \"forename\": \"Robert\",\n    \"surname\": \"Smith\",\n    \"nickname\": \"Bob\",\n    \"address\": {\n        \"number\": \"12\",\n        \"street\": \"High Street\"\n    },\n    \"hobbies\": [ \"rugby\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Odd Numbers with Conditional Rendering\nDESCRIPTION: This snippet demonstrates the `isOdd` helper in Handlebars. It checks if a given number is odd and optionally renders a specified value (e.g., 'rightBox') if true. It relies on the Handlebars.java conditional helpers.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_17\n\nLANGUAGE: handlebars\nCODE:\n```\n{{isOdd 3}}\n{{isOdd 3 'rightBox'}}\n```\n\n----------------------------------------\n\nTITLE: Parsing dates with parseDate helper in Handlebars\nDESCRIPTION: Shows how to use the parseDate helper to parse dates from strings using various formats including ISO8601, RFC standards, and custom formats.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_55\n\nLANGUAGE: handlebars\nCODE:\n```\n// Attempts parsing using ISO8601, RFC 1123, RFC 1036 and ASCTIME formats.\n// We wrap in the date helper in order to print the result as a string.\n{{date (parseDate request.headers.MyDate)}}\n\n// Parse using a custom date format\n{{date (parseDate request.headers.MyDate format='dd/MM/yyyy')}}\n\n// Format can also be unix (epoch seconds) or epoch (epoch milliseconds)\n{{date (parseDate request.headers.MyDate format='unix')}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Template Cache in WireMock\nDESCRIPTION: Sets the maximum number of cached template fragments used during response templating to improve performance, with default limits depending on WireMock version.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/configuration.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n.withMaxTemplateCacheEntries(100)\n```\n\n----------------------------------------\n\nTITLE: Webhook configuration in JSON for a simple callback\nDESCRIPTION: Defines a JSON representation of a stub with a webhook listener that fires a POST request to a fixed URL with specific headers and body. Useful for exporting or documenting stub configurations.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/webhooks-and-callbacks.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"urlPath\": \"/something-async\",\n        \"method\": \"POST\"\n    },\n    \"response\": {\n        \"status\": 200\n    },\n    \"serveEventListeners\": [\n        {\n            \"name\": \"webhook\",\n            \"parameters\": {\n                \"method\": \"POST\",\n                \"url\": \"http://my-target-host/callback\",\n                \"headers\": {\n                    \"Content-Type\": \"application/json\"\n                },\n                \"body\": \"{ \\\"result\\\": \\\"SUCCESS\\\" }\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Stubs by Metadata - JSON\nDESCRIPTION: This JSON code defines the request body for removing stubs by metadata using the `matchesJsonPath` operator. It will remove stubs where the `singleItem` field contains the string \"123\". This request is sent to the `/__admin/mappings/remove-by-metadata` endpoint.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stub-metadata.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"matchesJsonPath\" : {\n      \"expression\" : \"$.singleItem\",\n      \"contains\" : \"123\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using jsonMerge in block form in Handlebars\nDESCRIPTION: Demonstrates using the jsonMerge helper in block form, where the contents of the block are parsed as the second object to merge.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_50\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#jsonMerge object1}}\n{\n    \"forename\": \"Robert\",\n    \"nickname\": \"Bob\",\n    \"address\": {\n        \"street\": \"High Street\"\n    },\n    \"hobbies\": [ \"rugby\" ]\n}\n{{/jsonMerge}}\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON with Inline Input and Variable\nDESCRIPTION: This snippet demonstrates providing the JSON input inline to the `formatJson` helper, and formatting with a variable. `formatJson` helper is then used with variable `someJson` with `compact` format.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_38\n\nLANGUAGE: handlebars\nCODE:\n```\n{{formatJson '{\"foo\":true,\"bar\":{\"baz\":false}}'}}\n\n{{#assign 'someJson'}} { \"foo\": true, \"bar\": { \"baz\": false } } {{/assign}}\n{{formatJson someJson format='compact'}}\n```\n\n----------------------------------------\n\nTITLE: Compiling Proto Files into Descriptors for WireMock\nDESCRIPTION: Bash command to compile Protocol Buffer definition files into descriptor files that WireMock gRPC extension can understand.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/grpc.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nprotoc --descriptor_set_out wiremock/grpc/services.dsc ExampleServices.proto\n```\n\n----------------------------------------\n\nTITLE: Registering a WireMock extension in Java\nDESCRIPTION: Shows how to register the filtering extension class SimpleAuthRequestFilter with WireMockRule using wireMockConfig().extensions(). Ensures the filter is applied at runtime to stub requests. This requires WireMock test dependencies and proper import of WireMockRule and wireMockConfig methods.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/filtering-requests.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nnew WireMockRule(wireMockConfig().extensions(new SimpleAuthRequestFilter()));\n```\n\n----------------------------------------\n\nTITLE: Generating random values with randomValue helper in Handlebars\nDESCRIPTION: Shows how to use the randomValue helper to generate random strings of various types including alphanumeric, alphabetic, numeric, and UUID values.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_57\n\nLANGUAGE: handlebars\nCODE:\n```\n{{randomValue length=33 type='ALPHANUMERIC'}}\n{{randomValue length=12 type='ALPHANUMERIC' uppercase=true}}\n{{randomValue length=55 type='ALPHABETIC'}}\n{{randomValue length=27 type='ALPHABETIC' uppercase=true}}\n{{randomValue length=10 type='NUMERIC'}}\n{{randomValue length=5 type='ALPHANUMERIC_AND_SYMBOLS'}}\n{{randomValue type='UUID'}}\n{{randomValue length=32 type='HEXADECIMAL' uppercase=true}}\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Namespace Awareness in WireMock\nDESCRIPTION: Demonstrates how to configure namespace awareness in XML matching. Available options are STRICT, NONE, and LEGACY. Requires WireMock version 3.12.0 or later.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n    .withRequestBody(equalToXml(\"<body>\" +\n            \"   <entry>1</entry>\" +\n            \"   <entry>2</entry>\" +\n            \"</body>\").withNamespaceAwareness(EqualToXmlPattern.NamespaceAwareness.STRICT))\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request\": {\n    ...\n    \"bodyPatterns\" : [ {\n      \"equalToXml\" : \"<body><entry>1</entry><entry>2</entry></body>\",\n      \"namespaceAwareness\": \"STRICT\"\n    } ]\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Programmatic WireMock Configuration (Java)\nDESCRIPTION: Shows how to achieve fine-grained WireMock configuration by providing a custom `WireMockConfigurationCustomizer` implementation via the `configurationCustomizers` attribute in `@ConfigureWireMock`. The customizer's `customize` method receives the `WireMockConfiguration` object, allowing direct modification, such as setting a custom notifier.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/spring-boot.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@EnableWireMock({\n    @ConfigureWireMock(\n        configurationCustomizers = CustomizerTest.Customizer.class)\n})\npublic class CustomizerTest {\n    \n    static class Customizer implements WireMockConfigurationCustomizer {\n\n        @Override\n        public void customize(\n            WireMockConfiguration configuration,\n            ConfigureWireMock options\n        ) {\n            configuration.notifier(new CustomNotifier());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering GraphQL Request Matching Stub with WireMock in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to register a WireMock stub mapping that uses the `GraphqlBodyMatcher` from the `wiremock-graphql-extension`. It configures a POST request stub matching a specific URL path and uses the extension to semantically match the GraphQL request body provided as a JSON string, returning a 200 OK response. Requires the WireMock and `wiremock-graphql-extension` dependencies.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/graphql.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.github.tomakehurst.wiremock.client.WireMock\nimport com.github.tomakehurst.wiremock.client.WireMock.*\nimport io.github.nilwurtz.GraphqlBodyMatcher\n\nfun registerGraphQLWiremock(json: String) {\n    WireMock(8080).register(\n        post(urlPathEqualTo(endPoint))\n            .andMatching(GraphqlBodyMatcher.extensionName, GraphqlBodyMatcher.withRequest(json))\n            .willReturn(\n                aResponse()\n                    .withStatus(200)\n            )\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON with the parseJson Helper and Assigning to Variable\nDESCRIPTION: This snippet demonstrates using the `parseJson` helper to parse a JSON string and assign the resulting map-of-maps to a variable. The helper will parse the input into a map-of-maps. It will assign the result to a variable if a name is specified.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_31\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#parseJson 'parsedObj'}}\n{\n  \"name\": \"transformed\"\n}\n{{/parseJson}}\n\n{{!- Now we can access the object as usual --}}\n{{parsedObj.name}}\n```\n\n----------------------------------------\n\nTITLE: Checking String/Array Containment Handlebars\nDESCRIPTION: This snippet demonstrates the `contains` helper, which checks if a string or array contains a specific substring or element. It can be used within `if` statements or as a block element. The output is either 'YES' or nothing, depending on whether the condition evaluates to true.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_76\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{#if (contains 'abcde' 'abc')}}YES{{/if}}\n{{#if (contains (array 'a' 'b' 'c') 'a')}}YES{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Adding Response Status Message in Java\nDESCRIPTION: Configures a stub with a custom status message alongside the status code, providing more detailed response metadata. Enables testing of clients handling custom status messages.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n@Test\npublic void statusMessage() {\n    stubFor(get(urlEqualTo(\"/some/thing\"))\n            .willReturn(aResponse()\n                .withStatus(200)\n                .withStatusMessage(\"Everything was just fine!\")\n                .withHeader(\"Content-Type\", \"text/plain\")));\n\n    assertThat(testClient.get(\"/some/thing\").statusCode(), is(200));\n    assertThat(testClient.get(\"/some/thing/else\").statusCode(), is(404));\n}\n```\n\n----------------------------------------\n\nTITLE: Using WireMockClassRule with @ClassRule and @Rule in JUnit 4.10 to Share Server Across Tests - Java\nDESCRIPTION: This snippet configures a WireMockClassRule server instance that remains running between test methods by combining @ClassRule and @Rule annotations in JUnit 4.10. It declares a static WireMockClassRule with port 8089 and applies @ClassRule and @Rule on it. This pattern keeps the WireMock server alive for the duration of the test class, improving test performance by avoiding repeated restarts. Requires JUnit 4.10 compatibility and WireMockClassRule class.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/junit-extensions.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n@ClassRule\n@Rule\npublic static WireMockClassRule wireMockRule = new WireMockClassRule(8089);\n```\n\n----------------------------------------\n\nTITLE: JSONPath Helper with Default Value\nDESCRIPTION: Demonstrates using the JSONPath helper with a default value, which is returned if the JSONPath evaluates to null or undefined.  Uses the `default` parameter.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_30\n\nLANGUAGE: handlebars\nCODE:\n```\n{{jsonPath request.body '$.size' default='M'}}\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-State Scenario in WireMock (Java)\nDESCRIPTION: Demonstrates setting up a multi-state WireMock scenario using the Java API. It defines three stub mappings for a \"To do list\" scenario: an initial GET request when the state is 'Started', a POST request that adds an item and transitions the state to 'Cancel newspaper item added', and a subsequent GET request that returns updated data based on the new state. Asserts verify the expected responses and state transitions.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stateful-behaviour.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Test\npublic void toDoListScenario() {\n    stubFor(get(urlEqualTo(\"/todo/items\")).inScenario(\"To do list\")\n            .whenScenarioStateIs(STARTED)\n            .willReturn(aResponse()\n                    .withBody(\"<items>\" +\n                            \"   <item>Buy milk</item>\" +\n                            \"</items>\")));\n\n    stubFor(post(urlEqualTo(\"/todo/items\")).inScenario(\"To do list\")\n            .whenScenarioStateIs(STARTED)\n            .withRequestBody(containing(\"Cancel newspaper subscription\"))\n            .willReturn(aResponse().withStatus(201))\n            .willSetStateTo(\"Cancel newspaper item added\"));\n\n    stubFor(get(urlEqualTo(\"/todo/items\")).inScenario(\"To do list\")\n            .whenScenarioStateIs(\"Cancel newspaper item added\")\n            .willReturn(aResponse()\n                    .withBody(\"<items>\" +\n                            \"   <item>Buy milk</item>\" +\n                            \"   <item>Cancel newspaper subscription</item>\" +\n                            \"</items>\")));\n\n    WireMockResponse response = testClient.get(\"/todo/items\");\n    assertThat(response.content(), containsString(\"Buy milk\"));\n    assertThat(response.content(), not(containsString(\"Cancel newspaper subscription\")));\n\n    response = testClient.postWithBody(\"/todo/items\", \"Cancel newspaper subscription\", \"text/plain\", \"UTF-8\");\n    assertThat(response.statusCode(), is(201));\n\n    response = testClient.get(\"/todo/items\");\n    assertThat(response.content(), containsString(\"Buy milk\"));\n    assertThat(response.content(), containsString(\"Cancel newspaper subscription\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Transformer Parameter in Handlebars Template - Handlebars\nDESCRIPTION: This snippet illustrates rendering a custom transformer parameter called MyCustomParameter in Handlebars used by WireMock response templates. The parameter is available as parameters.MyCustomParameter in the template context. Intended as an example template fragment to be used in Java or JSON stub configurations with transformerParameters set.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_12\n\nLANGUAGE: Handlebars\nCODE:\n```\n<h1>The MyCustomParameter value is {{parameters.MyCustomParameter}}</h1>\n```\n\n----------------------------------------\n\nTITLE: Generating Fake Data Handlebars\nDESCRIPTION: This snippet uses the `random` helper to generate random fake data using the Data Faker library. It requires the `RandomExtension` and the desired data type (e.g., 'Name.first_name', 'Address.postcode_by_state.AL'). The output is a randomly generated piece of fake data.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_67\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{random 'Name.first_name'}}\n{{random 'Address.postcode_by_state.AL' }}\n```\n\n----------------------------------------\n\nTITLE: Adding fixed delays before webhook calls in Java\nDESCRIPTION: Sets up a webhook in Java with a fixed delay (e.g., 1000ms) before executing the HTTP call, useful for simulating latency or processing delays.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/webhooks-and-callbacks.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nwm.stubFor(post(urlPathEqualTo(\"/delayed\"))\n    .willReturn(ok())\n    .withServeEventListener(\"webhook\", webhook()\n      .withFixedDelay(1000)\n      .withMethod(RequestMethod.GET)\n      .withUrl(\"http://my-target-host/callback\")\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Removing Serve Events by Stub Metadata (JSON/HTTP API)\nDESCRIPTION: Removes ServeEvent objects from the request journal where the request matched a stub that has metadata matching the specified criteria, via a POST request to /__admin/requests/remove-by-metadata. The criteria are specified as a JSONPath match on the stub metadata.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"matchesJsonPath\" : {\n      \"expression\" : \"$.tags[0]\",\n      \"equalTo\" : \"test-57\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Recording Java DSL\nDESCRIPTION: This Java snippet shows how to customize the recording process in WireMock using the DSL with `recordSpec()`. It allows filtering of requests, capture of headers, extraction of body criteria, and more.  Dependencies:  WireMock library. The expected output is a recording tailored to specified parameters.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/record-playback.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nstartRecording(\n      recordSpec()\n          .forTarget(\"http://examples.wiremockapi.cloud/\")\n          .onlyRequestsMatching(getRequestedFor(urlPathMatching(\"/api/.*\")\n          .captureHeader(\"Accept\")\n          .captureHeader(\"Content-Type\", true)\n          .extractBinaryBodiesOver(10240)\n          .extractTextBodiesOver(2048)\n          .makeStubsPersistent(false)\n          .ignoreRepeatRequests()\n          .transformers(\"modify-response-header\")\n          .transformerParameters(Parameters.one(\"headerValue\", \"123\")\n          .matchRequestBodyWithEqualToJson(false, true)\n  );\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Body Matching Behavior in WireMock Recorder Using JSON\nDESCRIPTION: These JSON snippets show how to customize the request body matching logic for recorded stubs. The 'requestBodyPattern' property configures the matcher type ('equalTo', 'equalToJson', 'equalToXml', or 'auto') and relevant matcher options such as 'ignoreArrayOrder', 'ignoreExtraElements', or 'caseInsensitive'. The first snippet preserves the default 'auto' matcher while disabling 'ignoreArrayOrder' for JSON bodies, and the second snippet enforces case-insensitive exact equality matching regardless of MIME type. This setup influences how requests are matched during playback.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/record-playback.md#_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n\"requestBodyPattern\" : {\n    \"matcher\": \"auto\",\n    \"ignoreArrayOrder\" : false\n  }\n```\n\nLANGUAGE: JSON\nCODE:\n```\n\"requestBodyPattern\" : {\n    \"matcher\": \"equalTo\",\n    \"caseInsensitive\" : true\n  }\n```\n\n----------------------------------------\n\nTITLE: Dynamic callback configuration in JSON with templating\nDESCRIPTION: A JSON example that specifies a webhook whose HTTP method and URL are derived from the original request's JSON fields using templating, allowing for flexible callback behaviors.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/webhooks-and-callbacks.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"urlPath\": \"/something-async\",\n        \"method\": \"POST\"\n    },\n    \"response\": {\n        \"status\": 200\n    },\n    \"serveEventListeners\": [\n        {\n            \"name\": \"webhook\",\n            \"parameters\": {\n                \"method\": \"{{jsonPath originalRequest.body '$.callbackMethod'}}\",\n                \"url\": \"{{jsonPath originalRequest.body '$.callbackUrl'}}\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook with random delay using uniform distribution in Java\nDESCRIPTION: Configures a webhook in Java to delay the call by a random amount uniformly distributed between two bounds, allowing testing of variable latency conditions.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/webhooks-and-callbacks.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nwm.stubFor(post(urlPathEqualTo(\"/delayed\"))\n    .willReturn(ok())\n    .withServeEventListener(\"webhook\", webhook()\n      .withDelay(new UniformDistribution(500, 1000))\n      .withMethod(RequestMethod.GET)\n      .withUrl(\"http://my-target-host/callback\")\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Standard and Custom Matcher - JSON\nDESCRIPTION: This example shows how to represent the previous Java example in JSON. It combines a standard URL path pattern with a custom matcher named \"path-contains-param\" that takes a \"path\" parameter. Dependencies are part of the WireMock framework.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/custom-matching.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"request\": {\n        \"urlPathPattern\": \"/the/.*/one\",\n        \"method\": \"GET\",\n        \"customMatcher\": {\n            \"name\": \"path-contains-param\",\n            \"parameters\": {\n                \"path\": \"correct\"\n            }\n        }\n    },\n    \"response\": {\n        \"status\": 200\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an element to a JSON array using jsonArrayAdd helper in Handlebars\nDESCRIPTION: Demonstrates using the jsonArrayAdd helper to append a JSON object to an existing array. This helper takes the array and the item to add as parameters.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_42\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#assign 'existingArray'}}\n[\n    {\n        \"id\": 123,\n        \"name\": \"alice\"\n    }\n]\n{{/assign}}\n\n{{#assign 'newItem'}}\n{\n    \"id\": 321,\n    \"name\": \"sam\"\n}\n{{/assign}}\n\n{{jsonArrayAdd existingArray newItem}}\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": 123,\n        \"name\": \"alice\"\n    },\n    {\n        \"id\": 321,\n        \"name\": \"sam\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Snapshot Customization via API\nDESCRIPTION: This JSON snippet shows how to customize a snapshot recording using the API.  It uses a POST request to the /__admin/recordings/snapshot endpoint with a request body that defines filters, header captures, extraction criteria, etc. Prerequisites include a running WireMock instance and requests made to it. Expected output is stub mappings based on the specified parameters.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/record-playback.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\nPOST /__admin/recordings/snapshot\n{\n  \"filters\" : {\n    \"urlPathPattern\" : \"/api/.*\",\n    \"method\" : \"GET\",\n    \"ids\" : [ \"40a93c4a-d378-4e07-8321-6158d5dbcb29\" ]\n  },\n  \"captureHeaders\" : {\n    \"Accept\" : { },\n    \"Content-Type\" : {\n      \"caseInsensitive\" : true\n    }\n  },\n  \"requestBodyPattern\" : {\n    \"matcher\" : \"equalToJson\",\n    \"ignoreArrayOrder\" : false,\n    \"ignoreExtraElements\" : true\n  },\n  \"extractBodyCriteria\" : {\n    \"textSizeThreshold\" : \"2 kb\",\n    \"binarySizeThreshold\" : \"1 Mb\"\n  },\n  \"outputFormat\" : \"FULL\",\n  \"persist\" : false,\n  \"repeatsAsScenarios\" : false,\n  \"transformers\" : [ \"modify-response-header\" ],\n  \"transformerParameters\" : {\n    \"headerValue\" : \"123\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integers Handlebars\nDESCRIPTION: This snippet demonstrates the use of the `randomInt` helper function to generate random integers. It can be used without bounds, with upper and lower bounds, or with just an upper or lower bound. No dependencies are required. The output is a randomly generated integer within the specified bounds, or any integer if bounds are not specified.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_59\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{randomInt}}\n{{randomInt lower=5 upper=9}}\n{{randomInt upper=54323}}\n{{randomInt lower=-24}}\n```\n\n----------------------------------------\n\nTITLE: Enabling client certificate authentication in WireMock using Java\nDESCRIPTION: Configures WireMock to require clients to present valid certificates for authentication. Specifies trust store path and password to establish trusted client certificates, enhancing security for mutual TLS.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/https.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n@Rule\npublic WireMockRule wireMockRule = new WireMockRule(wireMockConfig()\n    .httpsPort(8443)\n    .needClientAuth(true)\n    .trustStorePath(\"/path/to/truststore.jks\") // Path to truststore\n    .trustStorePassword(\"mostsecret\")); // Truststore password\n```\n\n----------------------------------------\n\nTITLE: Matching Multipart/Form-Data Requests in WireMock\nDESCRIPTION: Demonstrates how to match multipart/form-data requests by applying header and body matchers to individual parts. This example matches a multipart with name 'info', content-type containing 'charset', and JSON body.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nstubFor(...)\n  ...\n  .withMultipartRequestBody(\n  \taMultipart()\n  \t\t.withName(\"info\")\n  \t\t.withHeader(\"Content-Type\", containing(\"charset\"))\n  \t\t.withMultipartBody(equalToJson(\"{}\"))\n  )\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request\": {\n    ...\n    \"multipartPatterns\" : [ {\n      \"matchingType\" : \"ANY\",\n      \"headers\" : {\n        \"Content-Disposition\" : {\n          \"contains\" : \"name=\\\"info\\\"\"\n        },\n        \"Content-Type\" : {\n          \"contains\" : \"charset\"\n        }\n      },\n      \"bodyPatterns\" : [ {\n        \"equalToJson\" : \"{}\"\n      } ]\n    } ],\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Stub with Named Custom Matcher - Java\nDESCRIPTION: This snippet defines a stub using the custom matcher created earlier, setting a maximum body length. The stub is configured to return a specific status code when matched. Dependencies include the WireMock library.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/custom-matching.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nstubFor(requestMatching(\"body-too-long\", Parameters.one(\"maxLength\", 2048))\n        .willReturn(aResponse().withStatus(422)));\n```\n\n----------------------------------------\n\nTITLE: Configuring WireMock Pact Extension in Spring Boot JUnit 5 Tests - Java\nDESCRIPTION: This code configures the WireMock Pact extension in a Spring Boot testing environment using JUnit 5. It demonstrates importing necessary dependencies, annotating the test base class for WireMock, and registering the WireMockPactExtension with custom configuration options. The `customize` method adds the Pact extension to the WireMock configuration. Prerequisites include Maven dependencies for WireMock, wiremock-pact libraries, and JUnit 5 support. Input is Java test lifecycle flow; output is generation of Pact JSON files during test execution.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/pact.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport com.github.tomakehurst.wiremock.core.WireMockConfiguration;\nimport com.maciejwalkowiak.wiremock.spring.ConfigureWireMock;\nimport com.maciejwalkowiak.wiremock.spring.EnableWireMock;\nimport com.maciejwalkowiak.wiremock.spring.WireMockConfigurationCustomizer;\nimport org.junit.jupiter.api.extension.RegisterExtension;\nimport se.bjurr.wiremockpact.wiremockpactextensionjunit5.WireMockPactExtension;\nimport se.bjurr.wiremockpact.wiremockpactlib.api.WireMockPactConfig;\n\n@EnableWireMock({\n  @ConfigureWireMock(\n      name = \"wiremock-service-name\",\n      property = \"wiremock.server.url\",\n      stubLocation = \"wiremock\",\n      configurationCustomizers = {WireMockPactBaseTest.class})\n})\npublic class WireMockPactBaseTest implements WireMockConfigurationCustomizer {\n  @RegisterExtension\n  static WireMockPactExtension WIREMOCK_PACT_EXTENSION =\n      new WireMockPactExtension(\n          WireMockPactConfig.builder() //\n              .setConsumerDefaultValue(\"WireMockPactExample\") //\n              .setProviderDefaultValue(\"UnknownProvider\") //\n              .setPactJsonFolder(\"src/test/resources/pact-json\"));\n\n  @Override\n  public void customize(\n      final WireMockConfiguration configuration, final ConfigureWireMock options) {\n    configuration.extensions(WIREMOCK_PACT_EXTENSION);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Named WireMock Instance in Multi-Instance Setup (Java)\nDESCRIPTION: Demonstrates injecting a specific named `WireMockServer` instance when multiple instances are configured using `@EnableWireMock` and `@ConfigureWireMock`. The `@InjectWireMock(\"instance-name\")` annotation takes the instance name (defined in `@ConfigureWireMock`) as an argument to specify which server to inject.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/spring-boot.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootTest(classes = InjectionTest.AppConfiguration.class)\n@EnableWireMock({\n  @ConfigureWireMock(name = \"user-service\")\n})\npublic class InjectionTest {\n\n  @InjectWireMock(\"user-service\")\n  WireMockServer mockUserService;\n\n  @Test\n  void fetch_empty_list_of_users() {\n    \n    mockUserService.stubFor(get(\"/users\").willReturn(okJson(\"[]\")));\n\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding/Decoding Handlebars\nDESCRIPTION: This snippet showcases the `base64` helper for encoding and decoding values using Base64. It supports decoding via the `decode` parameter and padding options. The output is the Base64 encoded or decoded version of the input, with or without padding as configured.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_81\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{base64 request.headers.X-Plain-Header}}\n{{base64 request.headers.X-Encoded-Header decode=true}}\n\n{{#base64}}\nContent to encode\n{{/base64}}\n\n{{#base64 padding=false}}\nContent to encode without padding\n{{/base64}}\n\n{{#base64 decode=true}}\nQ29udGVudCB0byBkZWNvZGUK\n{{/base64}}\n```\n\n----------------------------------------\n\nTITLE: Including with Expressions - JSON\nDESCRIPTION: This JSON defines a WireMock stub matching GET requests to `/things`. The `id` query parameter must include values matching the expressions: equal to \"1\", containing \"2\", and not containing \"3\".  Other values can also be present.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_35\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"mapping\": {\n    \"request\" : {\n      \"urlPath\" : \"/things\",\n      \"method\" : \"GET\",\n      \"queryParameters\" : {\n        \"id\" : {\n          \"includes\" : [\n            {\n              \"equalTo\": \"1\"\n            },\n            {\n              \"contains\": \"2\"\n            },\n            {\n              \"doesNotContain\": \"3\"\n            }\n          ]\n        }\n      }\n    },\n    \"response\" : {\n      \"status\" : 200\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Faulty or Corrupted Responses with WireMock JSON API\nDESCRIPTION: Defines a stub using JSON for GET \"/fault\" to trigger a simulated network fault (here, MALFORMED_RESPONSE_CHUNK). The fault type can be any supported WireMock fault, such as EMPTY_RESPONSE, CONNECTION_RESET_BY_PEER, etc. Inputs: fault string constant. Outputs: HTTP response with a specific network error for client-side failure-path testing.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/simulating-faults.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"request\": {\n        \"method\": \"GET\",\n        \"url\": \"/fault\"\n    },\n    \"response\": {\n        \"fault\": \"MALFORMED_RESPONSE_CHUNK\"\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Finding Near Misses for Specific Request via WireMock HTTP API\nDESCRIPTION: Finds stub mappings that are 'near misses' for a specified request object via the WireMock Admin API. Send a POST request to `/__admin/near-misses/request` with the full details of the request in the JSON body. The response is a JSON object containing a list of potential stub matches and their calculated match distance.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nPOST /__admin/near-misses/request\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"/actual\",\n  \"absoluteUrl\": \"http://localhost:8080/actual\",\n  \"method\": \"GET\",\n  \"clientIp\": \"0:0:0:0:0:0:0:1\",\n  \"headers\": {\n    \"User-Agent\": \"curl/7.30.0\",\n    \"Accept\": \"*/*\",\n    \"Host\": \"localhost:8080\"\n  },\n  \"cookies\": {},\n  \"browserProxyRequest\": false,\n  \"loggedDate\": 1467402464520,\n  \"bodyAsBase64\": \"\",\n  \"body\": \"\",\n  \"loggedDateString\": \"2016-07-01T19:47:44Z\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"nearMisses\": [\n        {\n            \"request\": {\n                \"url\": \"/actual\",\n                \"absoluteUrl\": \"http://localhost:8080/nomatch\",\n                \"method\": \"GET\",\n                \"clientIp\": \"0:0:0:0:0:0:0:1\",\n                \"headers\": {\n                    \"User-Agent\": \"curl/7.30.0\",\n                    \"Accept\": \"*/*\",\n                    \"Host\": \"localhost:8080\"\n                },\n                \"cookies\": {},\n                \"browserProxyRequest\": false,\n                \"loggedDate\": 1467402464520,\n                \"bodyAsBase64\": \"\",\n                \"body\": \"\",\n                \"loggedDateString\": \"2016-07-01T19:47:44Z\"\n            },\n            \"stubMapping\": {\n                \"uuid\": \"42aedcf2-1f8d-4009-ac7b-9870e4ab2316\",\n                \"request\": {\n                    \"url\": \"/expected\",\n                    \"method\": \"GET\"\n                },\n                \"response\": {\n                    \"status\": 200\n                }\n            },\n            \"matchResult\": {\n                \"distance\": 0.12962962962962962\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON with Compact Format\nDESCRIPTION: This snippet demonstrates using the `formatJson` helper with the `compact` format option to remove all whitespace from the input JSON.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_37\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#formatJson format='compact'}}\n{\n    \"foo\" : true,\n    \"bar\" : {\n        \"baz\" : false\n    }\n}\n{{/formatJson}}\n```\n\n----------------------------------------\n\nTITLE: Editing Existing Stubs - JSON\nDESCRIPTION: This snippet demonstrates how to define a basic stub mapping in WireMock using the JSON API. The stub will respond to any request with the URL path `/edit-me` using any HTTP method with a status code of 200.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_21\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"urlPath\": \"/edit-me\",\n        \"method\": \"ANY\"\n    },\n    \"response\": {\n        \"status\": 200\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: URL Encoding/Decoding Handlebars\nDESCRIPTION: This snippet uses the `urlEncode` helper to URL encode and decode values.  It supports decoding with the `decode` parameter. The output will be the URL-encoded or decoded version of the input string.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_82\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{urlEncode request.headers.X-Plain-Header}}\n{{urlEncode request.headers.X-Encoded-Header decode=true}}\n\n{{#urlEncode}}\nContent to encode\n{{/urlEncode}}\n\n{{#urlEncode decode=true}}\nContent%20to%20decode\n{{/urlEncode}}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON from Request Body with parseJson Helper\nDESCRIPTION: This snippet parses JSON from the request body and assigns it to a variable `bodyJson`. It then accesses the 'name' property of the parsed JSON object.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_32\n\nLANGUAGE: handlebars\nCODE:\n```\n{{parseJson request.body 'bodyJson'}}\n{{bodyJson.name}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Domain Mocking with WireMock JUnit 4 Rule in Java\nDESCRIPTION: Demonstrates setting up WireMock using the `WireMockRule` for JUnit 4.x to mock multiple domains. It enables browser proxying (`.enableBrowserProxying(true)`), configures an Apache `HttpClient` to use system properties (`.useSystemProperties()`), uses `JvmProxyConfigurer` in `@Before` and `@After` methods to manage JVM proxy settings for the test lifecycle, and defines stubs matching specific hostnames using `.withHost()`. The test verifies requests to different configured domains are correctly routed and return the stubbed responses.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/multi-domain-mocking.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class MultiDomainJUnit4Test {\n\n  @Rule\n  public WireMockRule wm = new WireMockRule(options()\n        .dynamicPort()\n        .enableBrowserProxying(true)\n  );\n\n  HttpClient httpClient = HttpClientBuilder.create()\n    .useSystemProperties() // This must be enabled for auto proxy config\n    .build();\n\n  @Before\n  public void init() {\n    JvmProxyConfigurer.configureFor(wm);\n  }\n\n  @After\n  public void cleanup() {\n    JvmProxyConfigurer.restorePrevious();\n  }\n\n  @Test\n  public void testViaProxy() throws Exception {\n      wm.stubFor(get(\"/things\")\n        .withHost(equalTo(\"my.first.domain\"))\n        .willReturn(ok(\"Domain 1\")));\n\n      wm.stubFor(get(\"/things\")\n        .withHost(equalTo(\"my.second.domain\"))\n        .willReturn(ok(\"Domain 2\")));\n\n      HttpResponse response = httpClient.execute(new HttpGet(\"http://my.first.domain/things\"));\n      String responseBody = EntityUtils.toString(response.getEntity());\n      assertEquals(\"Domain 1\", responseBody);\n\n      response = httpClient.execute(new HttpGet(\"http://my.second.domain/things\"));\n      responseBody = EntityUtils.toString(response.getEntity());\n      assertEquals(\"Domain 2\", responseBody);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON with the formatJson Helper\nDESCRIPTION: This snippet demonstrates the use of the `formatJson` helper to rewrite JSON in a specified format. By default, it formats the JSON with new lines and indentation (pretty format).\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_36\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#formatJson}}{\"foo\":true,\"bar\":{\"baz\":false}}{{/formatJson}}\n```\n\n----------------------------------------\n\nTITLE: Removing elements from JSON arrays with jsonRemove in Handlebars\nDESCRIPTION: Demonstrates using the jsonRemove helper with a JSONPath expression to remove an element from a JSON array based on a condition.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_52\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#assign 'existingArray'}}\n[\n    { \"id\": 456, \"name\": \"bob\"},\n    { \"id\": 123, \"name\": \"alice\"},\n    { \"id\": 321, \"name\": \"sam\"}\n]\n{{/assign}}\n\n{{jsonRemove existingArray '$.[?(@.id == 123)]'}}\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    { \"id\": 456, \"name\": \"bob\"},\n    { \"id\": 321, \"name\": \"sam\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Including Multiple Query Parameters - JSON\nDESCRIPTION: This JSON snippet defines a WireMock mapping that matches GET requests to `/things`. The `id` query parameter must include the values \"1\", \"2\", and \"3\". It may also contain other values.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_33\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"mapping\": {\n    \"request\" : {\n      \"urlPath\" : \"/things\",\n      \"method\" : \"GET\",\n      \"queryParameters\" : {\n        \"id\" : {\n          \"includes\" : [\n            {\n              \"equalTo\": \"1\"\n            },\n            {\n              \"equalTo\": \"2\"\n            },\n            {\n              \"equalTo\": \"3\"\n            }\n          ]\n        }\n      }\n    },\n    \"response\" : {\n      \"status\" : 200\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Math Operations Handlebars\nDESCRIPTION: This snippet uses the `math` helper to perform arithmetic operations such as addition, subtraction, multiplication, division, and modulo. It takes two operands and the operator as arguments. The output is the result of the arithmetic operation.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_68\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{math 1 '+' 2}}\n{{math 4 '-' 2}}\n{{math 2 '*' 3}}\n{{math 8 '/' 2}}\n{{math 10 '%' 3}}\n```\n\n----------------------------------------\n\nTITLE: Proxy Configuration via Java DSL\nDESCRIPTION: This Java snippet configures WireMock to proxy all requests to a target URL. This is a necessary step when snapshotting.  It specifies the priority to control the order of the mappings. The expected output is that all incoming requests are proxied.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/record-playback.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nstubFor(proxyAllTo(\"http://examples.wiremockapi.cloud/\").atPriority(1));\n```\n\n----------------------------------------\n\nTITLE: Adding arrays to a JSON array in Handlebars\nDESCRIPTION: Demonstrates adding an array as an element to an existing JSON array using the jsonArrayAdd helper.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_46\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#assign 'existingArray'}}\n[\n    {\n        \"id\": 123,\n        \"name\": \"alice\"\n    },\n    {\n        \"id\": 321,\n        \"name\": \"sam\"\n    }\n]\n{{/assign}}\n\n{{#jsonArrayAdd existingArray}}\n[\n    {\n        \"id\": 456,\n        \"name\": \"bob\"\n    }\n]\n{{/jsonArrayAdd}}\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 123,\n    \"name\": \"alice\"\n  },\n  {\n    \"id\": 321,\n    \"name\": \"sam\"\n  },\n  [\n    {\n      \"id\": 456,\n      \"name\": \"bob\"\n    }\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Finding Near Misses for Request Pattern via WireMock HTTP API\nDESCRIPTION: Finds received requests that are 'near misses' for a specified request pattern via the WireMock Admin API. Send a POST request to `/__admin/near-misses/request-pattern` with the request pattern details in the JSON body. The response is a JSON object containing a list of received requests that nearly matched the pattern and their calculated match distance.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nPOST /__admin/near-misses/request-pattern\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"url\": \"/almostmatch\",\n    \"method\": \"GET\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"nearMisses\": [\n        {\n            \"request\": {\n                \"url\": \"/nomatch\",\n                \"absoluteUrl\": \"http://localhost:8080/nomatch\",\n                \"method\": \"GET\",\n                \"clientIp\": \"0:0:0:0:0:0:0:1\",\n                \"headers\": {\n                    \"User-Agent\": \"curl/7.30.0\",\n                    \"Accept\": \"*/*\",\n                    \"Host\": \"localhost:8080\"\n                },\n                \"cookies\": {},\n                \"browserProxyRequest\": false,\n                \"loggedDate\": 1467402464520,\n                \"bodyAsBase64\": \"\",\n                \"body\": \"\",\n                \"loggedDateString\": \"2016-07-01T19:47:44Z\"\n            },\n            \"requestPattern\": {\n                \"url\": \"/almostmatch\",\n                \"method\": \"GET\"\n            },\n            \"matchResult\": {\n                \"distance\": 0.06944444444444445\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetty Server Threads and Connection Settings in WireMock\nDESCRIPTION: Adjusts Jetty server parameters such as thread pool size, acceptor threads, accept queue size, header buffer size, and enabling asynchronous responses for performance tuning under load.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/configuration.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n// Set the number of request handling threads in Jetty. Defaults to 10.\n.containerThreads(5)\n\n// Set the number of connection acceptor threads in Jetty. Defaults to 2.\n.jettyAcceptors(4)\n\n// Set the Jetty accept queue size. Defaults to Jetty's default of unbounded.\n.jettyAcceptQueueSize(100)\n\n// Set the size of Jetty's header buffer (to avoid exceptions when very large request headers are sent). Defaults to 8192.\n.jettyHeaderBufferSize(16834)\n\n// Enable asynchronous request processing in Jetty.\n.asynchronousResponseEnabled(true)\n\n// Set the number of asynchronous response threads.\n.asynchronousResponseThreads(10)\n```\n\n----------------------------------------\n\nTITLE: Using Handlebars 'lookup' Helper for Special Character Keys - Handlebars\nDESCRIPTION: Demonstrates use of the Handlebars lookup helper to access maps or arrays using key names that contain special characters, such as brackets, which cannot be referenced directly. Intended for use in WireMock templates when accessing query parameters like ids[].1 from the request model.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_14\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{lookup request.query 'ids[].1'}} // Will return 222\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Digits Handlebars\nDESCRIPTION: This snippet shows how to use the `numberFormat` helper to configure the number of digits before and after the decimal place using `maximumIntegerDigits`, `minimumFractionDigits`, `maximumFractionDigits`, and `minimumIntegerDigits` parameters. It takes a number and the digit configuration parameters.  The output is the number formatted with the specified digit constraints.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_64\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{{numberFormat 1234.567 maximumIntegerDigits=3 minimumFractionDigits=6}}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Local Hostname Using hostname Helper in Handlebars\nDESCRIPTION: The hostname helper returns the hostname of the local machine where WireMock is running. It requires no parameters and outputs the hostname string, allowing responses to include machine-specific information dynamically.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_86\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{hostname}}\n```\n\n----------------------------------------\n\nTITLE: Configuring WireMock client for custom host and port in Java\nDESCRIPTION: This snippet shows how to configure the static WireMock client for a server running on a custom host and port. Using WireMock.configureFor(host, port) allows the client to direct its requests to the given WireMock server instead of default localhost:8080. This is essential when the WireMockServer is running on a different host or port.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/java-usage.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nWireMock.configureFor(\"wiremock.host\", 8089);\n```\n\n----------------------------------------\n\nTITLE: Removing properties from JSON objects with jsonRemove in Handlebars\nDESCRIPTION: Shows how to use the jsonRemove helper with a JSONPath expression to remove a property from a JSON object.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_53\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#assign 'existingObject'}}\n    { \"id\": 456, \"name\": \"bob\"}\n{{/assign}}\n\n{{jsonRemove existingObject '$.name'}}\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"id\": 456 }\n```\n\n----------------------------------------\n\nTITLE: Initializing WireMock Rule and Stub - Groovy\nDESCRIPTION: This Groovy code snippet initializes a WireMockRule and a WireMockGroovy object. It is part of a DSL binding library for managing WireMock JUnit rules with declarative definitions. The WireMockRule allows for setting up mock responses and the WireMockGroovy object enables verification of requests.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/groovy.md#_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n@Rule\nWireMockRule wireMockRule = new WireMockRule()\n\ndef wireMockStub = new WireMockGroovy()\n```\n\n----------------------------------------\n\nTITLE: Default Response for Unmapped Requests - JSON\nDESCRIPTION: This snippet defines a default response for unmapped requests using the WireMock JSON API. It uses a low priority (10) to ensure other stubs take precedence. It returns a 404 status code and a JSON body with an error message, setting the Content-Type header to application/json.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_19\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"priority\": 10,\n    \"request\": {\n        \"method\": \"ANY\",\n        \"urlPattern\": \".*\"\n    },\n    \"response\": {\n        \"status\": 404,\n        \"jsonBody\": { \"status\": \"Error\", \"message\": \"Endpoint not found\" },\n        \"headers\": {\n            \"Content-Type\": \"application/json\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Chunked Dribble Delays with WireMock JSON API\nDESCRIPTION: Shows how to use the chunkedDribbleDelay field in a JSON stub mapping to simulate sending a response (\"Hello world!\") in 5 chunks over 1000 ms, for GET \"/chunked/delayed\". Inputs: JSON configuration with request/response, including chunkedDribbleDelay object (numberOfChunks and totalDuration). Outputs: streamed, chunked HTTP response.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/simulating-faults.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"request\": {\n        \"method\": \"GET\",\n        \"url\": \"/chunked/delayed\"\n    },\n    \"response\": {\n        \"status\": 200,\n        \"body\": \"Hello world!\",\n        \"chunkedDribbleDelay\": {\n            \"numberOfChunks\": 5,\n            \"totalDuration\": 1000\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing ServeEventListener for All Lifecycle Events in Java\nDESCRIPTION: This example demonstrates a generic serve event listener that handles all request phases through a single method. The method receives the RequestPhase parameter indicating when the event fired, along with the ServeEvent and Parameters for that phase.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/listening-for-serve-events.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class MyServeEventListener implements ServeEventListener {\n\n    @Override\n    public void onEvent(\n        RequestPhase requestPhase,\n        ServeEvent serveEvent,\n        Parameters parameters) {\n        \n        log.debug(\"Received serve event in phase \" + requestPhase);\n    }\n\n    @Override\n    public String getName() {\n        return \"my-listener\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting WireMock Mapping Metadata for Provider Info - JSON\nDESCRIPTION: This JSON snippet shows how to directly manipulate a WireMock stub mapping file to include provider metadata in the `metadata` field. Adding a `wireMockPactSettings` block under `metadata` allows contract tools to tag the mapping with the appropriate provider system. Input is a mapping configuration; output is WireMock recognizing provider association for Pact generation.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/pact.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\" : \"d68fb4e2-48ed-40d2-bc73-0a18f54f3ece\",\n  \"request\" : {\n    \"urlPattern\" : \"/animals/1\",\n    \"method\" : \"GET\"\n  },\n  \"response\" : {\n    \"status\" : 202\n  },\n  \"uuid\" : \"d68fb4e2-48ed-40d2-bc73-0a18f54f3ece\",\n  \"metadata\": {\n   \"wireMockPactSettings\": {\n     \"provider\":\"some-other-system\"\n   }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding WireMock 3.x Standalone as Maven Dependency\nDESCRIPTION: Maven dependency configuration to add WireMock standalone to a project for testing purposes.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/download-and-installation.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.wiremock</groupId>\n    <artifactId>wiremock-standalone</artifactId>\n    <version>{{ site.wiremock_version }}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Matching Date Range with JSONPath - JSON\nDESCRIPTION: This JSON snippet configures a WireMock stub to match POST requests to `/date-range`. It uses `matchesJsonPath` to extract the `date` field from the JSON request body and verifies that it is both before '2022-01-01T00:00:00' and after '2020-01-01T00:00:00', effectively matching a date range.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_27\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"url\": \"/date-range\",\n        \"method\": \"POST\",\n        \"bodyPatterns\": [\n            {\n                \"matchesJsonPath\": {\n                    \"expression\": \"$.date\",\n                    \"and\": [\n                        {\n                            \"before\": \"2022-01-01T00:00:00\"\n                        },\n                        {\n                            \"after\": \"2020-01-01T00:00:00\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Requests by Criteria (JSON/HTTP API)\nDESCRIPTION: Queries the request journal via a POST request to /__admin/requests/find, providing a JSON request pattern as criteria. Returns a JSON object containing a list of LoggedRequest objects that match the pattern.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"method\": \"POST\",\n    \"url\": \"/resource/to/count\",\n    \"headers\": {\n        \"Content-Type\": {\n            \"matches\": \".*/xml\"\n        }\n    }\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"requests\": [\n        {\n            \"url\": \"/my/url\",\n            \"absoluteUrl\": \"http://mydomain.com/my/url\",\n            \"method\": \"GET\",\n            \"headers\": {\n                \"Accept-Language\": \"en-us,en;q=0.5\",\n                \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:9.0) Gecko/20100101 Firefox/9.0\",\n                \"Accept\": \"image/png,image/*;q=0.8,*/*;q=0.5\"\n            },\n            \"body\": \"\",\n            \"browserProxyRequest\": true,\n            \"loggedDate\": 1339083581823,\n            \"loggedDateString\": \"2012-06-07 16:39:41\"\n        },\n        {\n            \"url\": \"/my/other/url\",\n            \"absoluteUrl\": \"http://my.other.domain.com/my/other/url\",\n            \"method\": \"POST\",\n            \"headers\": {\n                \"Accept\": \"text/plain\",\n                \"Content-Type\": \"text/plain\"\n            },\n            \"body\": \"My text\",\n            \"browserProxyRequest\": false,\n            \"loggedDate\": 1339083581823,\n            \"loggedDateString\": \"2012-06-07 16:39:41\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Format for WireMock Recorder Responses in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure the output format of the stop recording and snapshot API calls to return only the IDs of captured stubs instead of the full stub mapping JSON. It modifies the 'outputFormat' parameter to 'IDS', which changes the response content accordingly. No additional dependencies are required other than invoking the WireMock API with this payload.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/record-playback.md#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"outputFormat\": \"IDS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Multiple Date Headers with Relative Offsets in JSON\nDESCRIPTION: Sets up a POST request stub where 'X-Munged-Date' should be before now plus three days, and 'X-Finalised-Date' is checked against 'now +2 months', using JSON configuration. Supports complex relative date matching.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"url\": \"/dates\",\n        \"method\": \"POST\",\n        \"headers\": {\n            \"X-Munged-Date\": {\n                \"before\": \"now +3 days\"\n            },\n            \"X-Finalised-Date\": {\n                \"before\": \"now\",\n                \"expectedOffset\": 2,\n                \"expectedOffsetUnit\": \"months\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Response Body from File - JSON\nDESCRIPTION: This snippet shows how to define a response body by referencing a file using the WireMock JSON API. The `bodyFileName` property specifies the path to the file under the `__files` directory. When a GET request is made to `/body-file`, the content of the specified file is returned as the response body.  The file path is relative to the `__files` directory.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"method\": \"GET\",\n        \"url\": \"/body-file\"\n    },\n    \"response\": {\n        \"status\": 200,\n        \"bodyFileName\": \"path/to/myfile.xml\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Absence Matcher in WireMock Requests\nDESCRIPTION: Shows how to match requests where specific attributes are absent. This example matches requests without a session cookie, search_term query parameter, and X-Absent header.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n.withCookie(\"session\", absent())\n.withQueryParam(\"search_term\", absent())\n.withHeader(\"X-Absent\", absent())\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request\": {\n    ...\n    \"headers\" : {\n      \"X-Absent\" : {\n        \"absent\" : true\n      }\n    },\n    \"queryParameters\" : {\n      \"search_term\" : {\n        \"absent\" : true\n      }\n    },\n    \"cookies\" : {\n      \"session\" : {\n        \"absent\" : true\n      }\n    }\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Unmatched Requests via WireMock HTTP API\nDESCRIPTION: Retrieves requests that didn't match any stub mapping via the WireMock Admin API. Send a GET request to the `/__admin/requests/unmatched` endpoint on the WireMock server's host and port. The response body contains a JSON array listing the unmatched requests with full details.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nGET http://localhost:8080/__admin/requests/unmatched\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requests\" : [ {\n    \"url\" : \"/nomatch\",\n    \"absoluteUrl\" : \"http://localhost:8080/nomatch\",\n    \"method\" : \"GET\",\n    \"clientIp\" : \"0:0:0:0:0:0:0:1\",\n    \"headers\" : {\n      \"User-Agent\" : \"curl/7.30.0\",\n      \"Accept\" : \"*/*\",\n      \"Host\" : \"localhost:8080\"\n    },\n    \"cookies\" : { },\n    \"browserProxyRequest\" : false,\n    \"loggedDate\" : 1467402464520,\n    \"bodyAsBase64\" : \"\",\n    \"body\" : \"\",\n    \"loggedDateString\" : \"2016-07-01T19:47:44Z\"\n  } ],\n  \"requestJournalDisabled\" : false\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers as Percentage Handlebars\nDESCRIPTION: This snippet continues demonstrating the use of the `numberFormat` helper to format numbers as percentage. It takes a number, specifies the 'percent' format, and optionally a locale. Requires a number as input.  The output will be the number formatted as a percentage, potentially using a specific locale.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_62\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{{numberFormat 123.4567 'percent' 'en_GB'}}}\n```\n\n----------------------------------------\n\nTITLE: Mounting Host Directories for Stub Mappings in WireMock - Shell\nDESCRIPTION: This shell snippet starts a WireMock container and mounts the current working directory into /home/wiremock inside the container. This enables automatic loading of mappings and __files from the mounted path, facilitating persistent stub definitions between container restarts. Requires Docker and a properly structured host directory.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/docker.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it --rm \\\n  -p 8080:8080 \\\n  --name wiremock \\\n  -v $PWD:/home/wiremock \\\n  wiremock/wiremock:{{ site.wiremock_version }}\n\n```\n\n----------------------------------------\n\nTITLE: Matching Header Date with Relative Offset Before Now in Wiremock using Java\nDESCRIPTION: Defines a stub that matches requests where 'X-Munged-Date' is before the current date/time minus three days, using Wiremock's Java API with 'beforeNow().expectedOffset()'. It supports offset specifications and string expressions.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(post(\"/dates\"))\n  .withHeader(\"X-Munged-Date\", beforeNow().expectedOffset(3, DateTimeUnit.DAYS))\n  .willReturn(ok()));\n```\n\n----------------------------------------\n\nTITLE: Specifying keystore type for WireMock TLS configuration in Java\nDESCRIPTION: Overrides the default keystore type (JKS) with another format, such as BKS, to support different keystore implementations, especially on platforms like Android.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/https.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n.keystoreType(\"BKS\")\n```\n\n----------------------------------------\n\nTITLE: Matching Header Date with Fixed Future Date in Wiremock using JSON\nDESCRIPTION: Configures a POST request stub where the 'X-Munged-Date' header must be after a specific datetime string. Follows the fixed date matching pattern, producing a boolean match based on header content.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"url\": \"/dates\",\n        \"method\": \"POST\",\n        \"headers\": {\n            \"X-Munged-Date\": {\n                \"after\": \"2021-05-01T00:00:00Z\"\n            }\n        }\n    },\n    \"response\": {\n        \"status\": 200\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Injecting Multiple WireMock Instances (Java)\nDESCRIPTION: Example of configuring and running multiple, independent, named WireMock instances within a single Spring Boot test. Multiple `@ConfigureWireMock` annotations are provided within `@EnableWireMock`, each defining a unique name and potentially custom properties. These specific instances are then injected into test fields using `@InjectWireMock` with the corresponding instance name.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/spring-boot.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootTest(classes = WireMockSpringExtensionTest.AppConfiguration.class)\n@EnableWireMock({\n  @ConfigureWireMock(\n      name = \"user-service\",\n      baseUrlProperties = \"user-service.url\",\n      portProperties = \"user-service.port\"),\n  @ConfigureWireMock(\n      name = \"todo-service\",\n      baseUrlProperties = \"todo-service.url\",\n      portProperties = \"todo-service.port\")\n})\npublic class WireMockSpringExtensionTest {\n\n  @SpringBootApplication\n  static class AppConfiguration {}\n\n  @InjectWireMock(\"user-service\")\n  private WireMockServer mockUserService;\n\n  @InjectWireMock(\"todo-service\")\n  private WireMockServer mockTodoService;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS with WireMock using self-signed certificate in Java\nDESCRIPTION: Initializes WireMock to listen over HTTPS on port 8443 with default self-signed TLS certificate. This setup requires minimal configuration and is suitable for testing environments.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/https.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@Rule\npublic WireMockRule wireMockRule = new WireMockRule(wireMockConfig().httpsPort(8443));\n```\n\n----------------------------------------\n\nTITLE: Custom Number Formatting Handlebars\nDESCRIPTION: This snippet demonstrates custom number formatting using a format string. It takes a number as input, along with a format string (e.g., '###.000000') and optionally a locale. The output is the number formatted according to the custom format string.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_63\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{{numberFormat 123.4567 '###.000000' 'en_GB'}}}\n```\n\n----------------------------------------\n\nTITLE: Accessing One-or-Many Query Parameters in Handlebars Template - Handlebars\nDESCRIPTION: Shows several ways to access query parameters that may have single or multiple values in Handlebars templates for WireMock. Demonstrates direct access, indexed access, and the use of first and last helpers. Useful for stubs needing to reference the first or nth value of a parameter. The snippet assumes a query string like things=1&things=2&things=3.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_13\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{request.query.things}} // Will return 1\n{{request.query.things.0}} // Will return 1\n{{request.query.things.first}} // Will return 1\n{{request.query.things.1}} // Will return 2\n{{request.query.things.[-1]}} // Will return 2\n{{request.query.things.last}} // Will return 3\n```\n\n----------------------------------------\n\nTITLE: Limiting Logged Response Body Size in WireMock\nDESCRIPTION: Prevents large response bodies from consuming excessive memory by truncating logged responses to a specified byte size, improving stability during high volume or large data scenarios.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/configuration.md#_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\n.maxLoggedResponseSize(100000) // bytes\n```\n\n----------------------------------------\n\nTITLE: Stubbing with AND Matcher - JSON\nDESCRIPTION: This JSON configuration defines a WireMock stub that matches requests to the `/and` endpoint with a GET method and a header named `X-Some-Value`. The value of this header must satisfy both the `matches` regular expression '[a-z]+' and `contains` the string 'magicvalue'.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_23\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"urlPath\": \"/and\",\n        \"method\": \"GET\",\n        \"headers\": {\n            \"X-Some-Value\": {\n                \"and\": [\n                    {\n                        \"matches\": \"[a-z]+\"\n                    },\n                    {\n                        \"contains\": \"magicvalue\"\n                    }\n                ]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom WireMock Property Names (Java)\nDESCRIPTION: Demonstrates customizing the Spring property names for the WireMock server's base URL and port using the `baseUrlProperties` and `portProperties` attributes within the `@ConfigureWireMock` annotation nested inside `@EnableWireMock`. Shows injecting these custom properties using `@Value`.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/spring-boot.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@EnableWireMock(\n    @ConfigureWireMock(\n        baseUrlProperties = { \"customUrl\", \"sameCustomUrl\" },\n        portProperties = \"customPort\"\n))\nclass CustomPropertiesTest {\n\n @Value(\"${customUrl}\")\n private String customUrl;\n\n @Value(\"${sameCustomUrl}\")\n private String sameCustomUrl;\n\n @Value(\"${customPort}\")\n private String customPort;\n\n // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Number Grouping Handlebars\nDESCRIPTION: This snippet demonstrates disabling number grouping with the `groupingUsed` parameter in the `numberFormat` helper. It takes a number and the `groupingUsed=false` parameter. The output is the number without grouping separators (e.g., commas).\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_65\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{{numberFormat 12345.678 groupingUsed=false}}}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Template Data in Handlebars Template\nDESCRIPTION: This snippet demonstrates how to access the custom data provided by the extension within a Handlebars template used in WireMock. The {{mydata.path}} expression retrieves the URL path from the custom data injected by the extension, allowing dynamic data rendering in response templates.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/adding-template-model-data.md#_snippet_1\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{mydata.path}}\n```\n\n----------------------------------------\n\nTITLE: Initializing WireMock Server with gRPC Extension in Java\nDESCRIPTION: Java code to initialize a WireMock server with the gRPC extension enabled and configured with the correct root directory.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/grpc.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Same config object also for the JUnit 4 rule or JUnit 5 extension\nWireMockServer wm = new WireMockServer(wireMockConfig()\n        .dynamicPort()\n        .withRootDirectory(\"src/test/resources/wiremock\")\n        .extensions(new GrpcExtensionFactory())\n));\n```\n\n----------------------------------------\n\nTITLE: Using Transformer Parameters in Templated Stubs - Java\nDESCRIPTION: Shows how to pass custom transformer parameters in a WireMock Java stub, making values like MyCustomParameter visible within Handlebars response templates through the parameters. context. Requires use of withTransformerParameter on the stub's response. Useful for dynamic content rendering based on runtime or test data.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nwm.stubFor(get(urlPathEqualTo(\"/templated\"))\n  .willReturn(aResponse()\n      .withBody(\"{{request.path.[0]}}\")\n      .withTransformers(\"response-template\")\n      .withTransformerParameter(\"MyCustomParameter\", \"Parameter Value\")));\n\n```\n\n----------------------------------------\n\nTITLE: Limiting JSON array size with maxItems parameter in Handlebars\nDESCRIPTION: Shows how to use the maxItems parameter with the jsonArrayAdd helper to limit the number of items in the resulting array by removing older items.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_45\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#assign 'existingArray'}}\n[\n    {\n        \"id\": 123,\n        \"name\": \"alice\"\n    },\n    {\n        \"id\": 321,\n        \"name\": \"sam\"\n    }\n]\n{{/assign}}\n\n{{#jsonArrayAdd existingArray maxItems=2}}\n{\n    \"id\": 456,\n    \"name\": \"bob\"\n}\n{{/jsonArrayAdd}}\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 321,\n    \"name\": \"sam\"\n  },\n  {\n    \"id\": 456,\n    \"name\": \"bob\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Matching to Ignore Order of Same Nodes\nDESCRIPTION: Shows how to configure XML matching to ignore the order of identical child nodes. Requires WireMock version 3.7.0 or later.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n    .withRequestBody(equalToXml(\"<body>\" +\n            \"   <entry>1</entry>\" +\n            \"   <entry>2</entry>\" +\n            \"</body>\",false,true))\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request\": {\n    ...\n    \"bodyPatterns\" : [ {\n      \"equalToXml\" : \"<body><entry>1</entry><entry>2</entry></body>\",\n      \"ignoreOrderOfSameNode\": true\n    } ]\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WireMock client for non-root context path in Java\nDESCRIPTION: This snippet extends client configuration to support WireMock servers deployed inside servlet containers under a non-root path prefix. The configureFor method with parameters for host, port, and root context path ensures the client addresses the correct base URL for HTTP requests. This setup is required for servlet container deployments that do not expose WireMock at the root path.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/java-usage.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nWireMock.configureFor(\"tomcat.host\", 8080, \"/wiremock\");\n```\n\n----------------------------------------\n\nTITLE: Including Multiple Query Parameters - Java\nDESCRIPTION: This Java code sets up a WireMock stub that matches GET requests to `/things`. The `id` query parameter must include the values \"1\", \"2\", and \"3\", but may contain other values as well.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_32\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(get(urlPathEqualTo(\"/things\"))\n      .withQueryParam(\"id\", including(\"1\", \"2\", \"3\")) \n      .willReturn(ok()));\n```\n\n----------------------------------------\n\nTITLE: Adding WireMock Spring Boot Gradle Dependency (Groovy)\nDESCRIPTION: Specifies the Gradle dependency configuration for the WireMock Spring Boot integration using the `implementation` scope. Includes the group, name, and version (using a placeholder `{{ site.spring_boot_integration_version }}`). Add this to your project's `build.gradle` or `build.gradle.kts` file.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/spring-boot.md#_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'org.wiremock.integrations:wiremock-spring-boot:{{ site.spring_boot_integration_version }}'\n```\n\n----------------------------------------\n\nTITLE: Combining Range and RandomInt Handlebars\nDESCRIPTION: This snippet showcases the combination of `range`, `randomInt`, and `each` helpers to generate dynamic content with random lengths. The output will vary depending on the random integer generated, which determines the number of times the loop runs and the 'id' is generated.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_70\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{#each (range 0 (randomInt lower=1 upper=10)) as |index|}}\nid: {{index}}\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Fetching a Stubbed Response via HTTP - Bash\nDESCRIPTION: Demonstrates retrieving a previously configured stubbed API response using a basic cURL GET request. The bash command only requires curl and an accessible WireMock server. Input is a simple API endpoint path; output is the response body as defined in the stub mapping.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/java-jar.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8080/get/this\nHere it is!\n```\n\n----------------------------------------\n\nTITLE: Random delay in webhook configuration JSON\nDESCRIPTION: Defines a webhook that introduces a uniformly distributed delay, adding variability to response times, useful for testing real-world latency scenarios.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/webhooks-and-callbacks.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"urlPath\": \"/delayed\",\n        \"method\": \"POST\"\n    },\n    \"response\": {\n        \"status\": 200\n    },\n    \"serveEventListeners\": [\n        {\n            \"name\": \"webhook\",\n            \"parameters\": {\n                \"method\": \"GET\",\n                \"url\": \"http://my-target-host/callback\",\n                \"delay\": {\n                    \"type\": \"uniform\",\n                    \"lower\": 500,\n                    \"upper\": 1000\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Selecting Response Body File with Templating - Java\nDESCRIPTION: This stub example sets up a GET matcher using urlPathMatching in Java, and serves a static file where the file path is rendered dynamically from the incoming request path using Handlebars. The file path segment is extracted with {{request.pathSegments.[1]}}. Requires WireMock Java API and appropriately structured files in the specified path.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nwm.stubFor(get(urlPathMatching(\"/static/.*\"))\n  .willReturn(ok()\n    .withBodyFile(\"files/{{request.pathSegments.[1]}}\")));\n\n```\n\n----------------------------------------\n\nTITLE: Publishing Pact Contract Files Using Pactflow Script - Shell\nDESCRIPTION: This shell script snippet publishes Pact contract files to a Pactflow broker, using NPM tools for versioning (`git-changelog-command-line`) and contract publishing (`pactflow-publish-sh`). The script constructs a participant version, sets credentials and target broker, and points to the directory where Pact JSON files were generated. Prerequisites: Node.js, NPM, `git`, the specified NPM packages, and network access to the Pactflow broker. Input is contract files and project metadata; output is remote publication of contract data.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/pact.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncurrent_version=$(npx git-changelog-command-line \\\n  --patch-version-pattern \"^fix.*\" \\\n  --print-current-version)\ngit_hash=`git rev-parse --short HEAD`\nparticipant_version_number=\"$current_version-$git_hash\"\n\nnpx pactflow-publish-sh \\\n --username=dXfltyFMgNOFZAxr8io9wJ37iUpY42M \\\n --password=O5AIZWxelWbLvqMd8PkAVycBJh2Psyg1 \\\n --pactflow-broker-url=https://test.pactflow.io/contracts/publish \\\n --build-url=http://whatever/ \\\n --pact-json-folder=wiremock-pact-example-springboot-app/src/test/resources/pact-json \\\n --participant-version-number=$participant_version_number\n```\n\n----------------------------------------\n\nTITLE: Adding gRPC Extension with Gradle\nDESCRIPTION: Gradle dependency configuration to add the WireMock gRPC extension to a Java project.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/grpc.md#_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation 'org.wiremock:wiremock-grpc-extension:{{ site.grpc_extension_version }}'\n```\n\n----------------------------------------\n\nTITLE: Matching Request Header Date with Fixed Future Date in Wiremock using Java\nDESCRIPTION: Sets up a POST request stub that matches requests where the 'X-Munged-Date' header is after a specific fixed date, using the Wiremock Java API. Supports comparison with ZonedDateTime objects or ISO8601 date strings.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(post(\"/dates\")\n  .withHeader(\"X-Munged-Date\", after(\"2021-05-01T00:00:00Z\"))\n  .willReturn(ok()));\n\n// Using ZonedDateTime object\nstubFor(post(\"/dates\"))\n  .withHeader(\"X-Munged-Date\", after(ZonedDateTime.parse(\"2021-05-01T00:00:00Z\")))\n  .willReturn(ok()));\n```\n\n----------------------------------------\n\nTITLE: StubLifecycleListener Event Methods in Java\nDESCRIPTION: This code snippet lists the methods that can be overridden in a `StubLifecycleListener` implementation to subscribe to various stub lifecycle events.  These methods allow developers to execute custom logic before or after stubs are created, edited, removed, or when all stubs are reset.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/listening-for-stub-changes.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nvoid beforeStubCreated(StubMapping stub)\nvoid afterStubCreated(StubMapping stub)\nvoid beforeStubEdited(StubMapping oldStub, StubMapping newStub)\nvoid afterStubEdited(StubMapping oldStub, StubMapping newStub)\nvoid beforeStubRemoved(StubMapping stub)\nvoid afterStubRemoved(StubMapping stub)\nvoid beforeStubsReset()\nvoid afterStubsReset()\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple WireMockRule Instances for Different Ports and Using DSL Directly - Java\nDESCRIPTION: This snippet illustrates how to define multiple WireMockRule instances bound to different ports (8081 and 8082), enabling stubbing and verification on multiple WireMock servers within the same test class. Accessing the stubFor and other DSL methods directly from these rule instances avoids HTTP calls and simplifies mocking multiple services. Requires JUnit 4.x and WireMockRule class. Methods such as stubFor perform the setup of request matching and response stubbing on the respective server instance.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/junit-extensions.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n@Rule\npublic WireMockRule service1 = new WireMockRule(8081);\n\n@Rule\npublic WireMockRule service2 = new WireMockRule(8082);\n\n@Test\npublic void bothServicesDoStuff() {\n    service1.stubFor(get(urlEqualTo(\"/blah\")).....);\n    service2.stubFor(post(urlEqualTo(\"/blap\")).....);\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Template Cache Size via WireMockServer Options - Java\nDESCRIPTION: Shows how to restrict the number of compiled Handlebars templates kept in memory in WireMock by setting a cache size via options().withMaxTemplateCacheEntries(10000). This optimizes performance and manages memory use when serving templated responses. Requires WireMock Java API and the server must be started with this options instance.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nWireMockServer wm =\n    new WireMockServer(options().withMaxTemplateCacheEntries(10000));\n```\n\n----------------------------------------\n\nTITLE: Resetting a Single Scenario State via WireMock HTTP API\nDESCRIPTION: Explains how to reset a specific scenario to its initial state using the WireMock Admin HTTP API. Send an empty `PUT` request to `/__admin/scenarios/{scenario_name}/state`, replacing `{scenario_name}` with the actual name of the scenario.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stateful-behaviour.md#_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPUT /__admin/scenarios/my_scenario/state\n```\n\n----------------------------------------\n\nTITLE: Running WireMock with DirectCallHttpServer in Java\nDESCRIPTION: This code snippet demonstrates how to instantiate and use WireMock with the `DirectCallHttpServer`, which allows running WireMock without the overhead of an HTTP server. It creates a `DirectCallHttpServerFactory`, initializes a `WireMockServer` with it, and then directly interacts with the server using `stubRequest` to get a `Response`.  Dependencies include `com.github.tomakehurst.wiremock.WireMockServer`, `com.github.tomakehurst.wiremock.http.Response`, `com.github.tomakehurst.wiremock.direct.DirectCallHttpServer`, `com.github.tomakehurst.wiremock.direct.DirectCallHttpServerFactory` and `com.github.tomakehurst.wiremock.core.WireMockConfiguration`.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/running-without-http-server.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport com.github.tomakehurst.wiremock.WireMockServer;\nimport com.github.tomakehurst.wiremock.http.Response;\nimport com.github.tomakehurst.wiremock.direct.DirectCallHttpServer;\nimport com.github.tomakehurst.wiremock.direct.DirectCallHttpServerFactory;\n\nimport static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n// ..\n\nDirectCallHttpServerFactory factory = new DirectCallHttpServerFactory();\nWireMockServer wm = new WireMockServer(wireMockConfig().httpServerFactory(factory));\nwm.start(); // no-op, not required\n\nDirectCallHttpServer server = factory.getHttpServer();\n\nRequest request = new Request() {\n  // fill in with the incoming request data\n}\n\nResponse response = server.stubRequest(request);\n// then use the `response`'s data, and map it accordingly\n```\n\n----------------------------------------\n\nTITLE: Matching Date Headers with Zoned and Local Formats in Java\nDESCRIPTION: Demonstrates how to match date headers requiring ZonedDateTime or LocalDateTime formats, illustrating handling of timezone-aware and naive date/time representations in Java when used in Wiremock.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(post(\"/dates\"))\n  .withHeader(\"X-Munged-Date\",\n    equalToDateTime(\"2021-06-24T00:00:00\").actualFormat(\"dd/MM/yyyy\"))\n  .willReturn(ok()));\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Stub Random Delay with Lognormal Distribution via JSON\nDESCRIPTION: Defines a stub with a random delay drawn from a lognormal distribution using JSON configuration. Applies to GET requests at \"/random/delayed\" and specifies response status, median, and sigma for the delay distribution. Inputs: JSON mapping. Outputs: Delayed HTTP response. Only requires WireMock JSON configuration support.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/simulating-faults.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"request\": {\n        \"method\": \"GET\",\n        \"url\": \"/random/delayed\"\n    },\n    \"response\": {\n        \"status\": 200,\n        \"delayDistribution\": {\n            \"type\": \"lognormal\",\n            \"median\": 80,\n            \"sigma\": 0.4\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Searching Stubs by Metadata - Java\nDESCRIPTION: This Java code snippet shows how to find stubs based on their metadata using `matchingJsonPath`. It searches for stubs where the `singleItem` field contains the string \"123\".\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stub-metadata.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nList<StubMapping> stubs =\n    findStubsByMetadata(matchingJsonPath(\"$.singleItem\", containing(\"123\")));\n```\n\n----------------------------------------\n\nTITLE: Configuring Google URL Fix in JavaScript\nDESCRIPTION: This JavaScript snippet configures the Google URL fix functionality. It sets the language and site for the Google fix URL script. It's used to ensure that Google search indexes the site correctly, even if there are broken links or URL changes. The script is fetched from a Google service, and it likely handles redirects or other measures to improve the user experience and search engine optimization.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_pages/404.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  var GOOG_FIXURL_LANG = 'en';\n  var GOOG_FIXURL_SITE = '{{ site.url }}'\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\"\n  src=\"//linkhelp.clients.google.com/tbproxy/lh/wm/fixurl.js\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Finding Near Misses for All Unmatched Requests via WireMock HTTP API\nDESCRIPTION: Retrieves the closest stub mapping 'near misses' for all requests that did not match any stub via the WireMock Admin API. Issue a GET request to `/__admin/requests/unmatched/near-misses`. The output format is a JSON object containing a list of near misses, similar to querying for a single request.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nGET /__admin/requests/unmatched/near-misses\n```\n\n----------------------------------------\n\nTITLE: Matching Date/Time with Custom Format in Wiremock using JSON\nDESCRIPTION: Configures a header matcher for 'X-Munged-Date' that expects a specific date/time in a custom format ('dd/MM/yyyy'), in a JSON-based stub. Shows how to specify custom date formats for matching.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_18\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"url\": \"/dates\",\n        \"method\": \"POST\",\n        \"headers\": {\n            \"X-Munged-Date\": {\n                \"equalToDateTime\": \"2021-06-24T00:00:00\",\n                \"actualFormat\": \"dd/MM/yyyy\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing null attributes with jsonMerge in Handlebars\nDESCRIPTION: Shows how to use the removeNulls parameter with jsonMerge to remove attributes that have null values in the second JSON document.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_51\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#assign 'object1'}}\n{\n    \"keepMe\": 1,\n    \"removeMe\": 2\n}\n{{/assign}}\n\n{{#jsonMerge object1 removeNulls=true}}\n{\n    \"removeMe\": null\n}\n{{/jsonMerge}}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"keepMe\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering stub requests with simple authentication using WireMock in Java\nDESCRIPTION: Implements a simple authentication filter by extending StubRequestFilterV2. The filter checks the Authorization header for a specific Basic token, continuing the request if valid or stopping it with a 401 unauthorized response otherwise. This snippet requires WireMock dependencies with interfaces Request, ServeEvent, RequestFilterAction, and ResponseDefinition, and is intended for authenticating stub requests.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/filtering-requests.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class SimpleAuthRequestFilter implements StubRequestFilterV2 {\n\n    @Override\n    public RequestFilterAction filter(Request request, ServeEvent serveEvent) {\n        if (request.header(\"Authorization\").firstValue().equals(\"Basic abc123\")) {\n            return RequestFilterAction.continueWith(request);\n        }\n\n        return RequestFilterAction.stopWith(ResponseDefinition.notAuthorised());\n    }\n\n    @Override\n    public String getName() {\n        return \"simple-auth\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Stubs by Metadata - JSON\nDESCRIPTION: This JSON code defines the request body for searching stubs by metadata using the `matchesJsonPath` operator. It searches for stubs where the `singleItem` field contains the string \"123\".  This request is sent to the `/__admin/mappings/find-by-metadata` endpoint.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stub-metadata.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"matchesJsonPath\" : {\n      \"expression\" : \"$.singleItem\",\n      \"contains\" : \"123\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with WireMock Testcontainers Container in C\nDESCRIPTION: This snippet shows how to interact with a running WireMock container provisioned by Testcontainers for C/C++. It includes fetching the current WireMock mappings using the API and sending an HTTP GET request to a mapped endpoint, demonstrating how to process and validate the responses.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/c_cpp.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n    //..\n\n    struct WireMock_Mapping mapping = tc_wm_get_mappings(containerId);\n    if (mapping.responseCode != 200) {\n        printf(\"Failed to get WireMock mapping: %s\\n\", mapping.error);\n        return -1;\n    } else {\n        printf(\"WireMock Mapping:\\n%s\\n\", mapping.json);\n    }\n\n    printf(\"Sending HTTP request to the container\\n\");\n    struct tc_send_http_get_return response = tc_send_http_get(containerId, 8080, \"/hello\");\n    if (response.r0 == -1) {\n        printf(\"Failed to send HTTP request: %s\\n\", response.r2);\n        return -1;\n    }\n    if (response.r0 != 200) {\n        printf(\"Received wrong response code: %d instead of %d\\n%s\\n\", response.r0, 200, response.r2);\n        return -1;\n    }\n    printf(\"Server Response: HTTP-%d\\n%s\\n\\n\", response.r0, response.r1);\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting code examples with Jekyll codetabs (Markdown)\nDESCRIPTION: Demonstrates the usage of the custom `{% codetabs %}` Jekyll macro in Markdown. This macro is used to group equivalent code examples written in different languages or formats within a single documentation block, reducing vertical space and improving readability. It requires the custom Jekyll plugin for processing.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n    {% codetabs %}\n    \n    {% codetab JSON %}\n    \n    ```json\n    {\n      \"request\": {\n        \"method\": \"GET\",\n        \"url\": \"/some/thing\"\n      }\n      \"response\": {\n        \"status\": 200,\n        \"body\": \"Hello, world!\",\n        \"headers\": {\n            \"Content-Type\": \"text/plain\"\n        }\n      }\n    }\n    ```\n    \n    {% endcodetab %}\n    \n    {% codetab Java %}\n    \n    ```java\n    @Test\n    public void exactUrlOnly() {\n        stubFor(get(urlEqualTo(\"/some/thing\"))\n                .willReturn(aResponse()\n                    .withHeader(\"Content-Type\", \"text/plain\").withBody(\"Hello world!\")));\n    }\n    ```\n    \n    {% endcodetab %}\n    \n    {% endcodetabs %}\n```\n\n----------------------------------------\n\nTITLE: Matching Strings with Regular Expressions Handlebars\nDESCRIPTION: This snippet demonstrates the `matches` helper, which checks if a string matches a regular expression. It can be used within `if` statements or as a block element. The output is either 'YES' or nothing depending on whether the string matches the regular expression.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_78\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{#if (matches '123' '[0-9]+')}}YES{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Extending webhook behaviour via custom transformer in Java\nDESCRIPTION: Provides a Java class that implements the WebhookTransformer interface, allowing custom modifications to webhook definitions before execution, enabling advanced customization and extension of webhook behavior.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/webhooks-and-callbacks.md#_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyWebhookTransformer implements WebhookTransformer {\n\n  @Override\n  public WebhookDefinition transform(\n    ServeEvent serveEvent,\n    WebhookDefinition webhookDefinition) {\n    // build and return a new WebhookDefinition with some custom changes\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Stub Mapping - JSON\nDESCRIPTION: This JSON code defines a stub mapping with metadata for a GET request to `/with-metadata`. The `metadata` section contains a single item, a list, and a nested object, demonstrating the structure for adding metadata to stubs.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stub-metadata.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"url\": \"/with-metadata\"\n    },\n    \"response\": {\n        \"status\": 200\n    },\n\n    \"metadata\": {\n        \"singleItem\": 1234,\n        \"listItem\": [1, 2, 3, 4],\n        \"nestedObject\": {\n            \"innerItem\": \"Hello\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Body File Templating for a Specific Stub - JSON\nDESCRIPTION: Shows a JSON stub configuration where templating is disabled only for the file-backed response body by setting the disableBodyFileTemplating transformer parameter to true. This is useful for stubs where response templates should not be applied to static files even with response-template transformer enabled. The request responds to GET /test and returns the static file response.json.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"request\": {\n    \"method\": \"GET\",\n    \"urlPath\": \"/test\"\n  },\n  \"response\": {\n    \"status\": 200,\n    \"bodyFileName\": \"response.json\",\n    \"transformerParameters\": {\n      \"disableBodyFileTemplating\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP APIs with WireMock Captain in JavaScript\nDESCRIPTION: This snippet demonstrates the use of the \"wiremock-captain\" library to set up integration tests for HTTP-based APIs in a Node.js environment. It shows how to connect to a local WireMock server, define request and response objects for mocking a downstream service, and register those mocks via the WireMock Captain API. The main parameters include the WireMock server endpoint, the request to be mocked, and the expected mock response. Requires installation of the 'wiremock-captain' NPM package and assumes a running WireMock server (commonly via Docker) on localhost:8080.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/nodejs.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { WireMock } from 'wiremock-captain';\n\ndescribe('Integration with WireMock', () => {\n  // Connect to WireMock\n  const wiremockEndpoint = 'http://localhost:8080';\n  const mock = new WireMock(wiremockEndpoint);\n\n  test('mocks downstream service', async () => {\n    const request: IWireMockRequest = {\n      method: 'POST',\n      endpoint: '/test-endpoint',\n      body: {\n        hello: 'world',\n      },\n    };\n    const mockedResponse: IWireMockResponse = {\n      status: 200,\n      body: { goodbye: 'world' },\n    };\n    await mock.register(request, mockedResponse);\n\n    // rest of the test\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Including with Expressions - Java\nDESCRIPTION: This Java code creates a WireMock stub that matches GET requests to `/things`. The `id` query parameter must include a value equal to \"1\", a value containing \"2\", and a value not containing \"3\". Other values are allowed.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_34\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(get(urlPathEqualTo(\"/things\"))\n    .withQueryParam(\"id\", including(\n        equalTo(\"1\"),\n        containing(\"2\"),\n        notContaining(\"3\")\n    )).willReturn(ok()));\n```\n\n----------------------------------------\n\nTITLE: Flattening arrays when adding to JSON array in Handlebars\nDESCRIPTION: Shows how to use the flatten parameter with jsonArrayAdd to flatten nested arrays when adding them to an existing array.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_47\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#assign 'existingArray'}}\n[\n    {\n        \"id\": 123,\n        \"name\": \"alice\"\n    },\n    {\n        \"id\": 321,\n        \"name\": \"sam\"\n    }\n]\n{{/assign}}\n\n{{#jsonArrayAdd existingArray flatten=true}}\n[\n    {\n        \"id\": 456,\n        \"name\": \"bob\"\n    }\n]\n{{/jsonArrayAdd}}\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 123,\n    \"name\": \"alice\"\n  },\n  {\n    \"id\": 321,\n    \"name\": \"sam\"\n  },\n  {\n    \"id\": 456,\n    \"name\": \"bob\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring WireMock with a custom keystore in Java\nDESCRIPTION: Sets up WireMock to use a specified keystore file and password for TLS encryption. Additional parameters include keystore path, password, key manager password, and keystore type if needed. It allows using custom certificates for HTTPS.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/https.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@Rule\npublic WireMockRule wireMockRule = new WireMockRule(wireMockConfig()\n    .httpsPort(8443)\n    .keystorePath(\"/path/to/keystore.jks\") // Path to keystore file or resource\n    .keystorePassword(\"verysecret\") // Keystore access password\n    .keyManagerPassword(\"verysecret\")); // Key access password\n```\n\n----------------------------------------\n\nTITLE: Truncating Actual Date/Time for Exact Match in Wiremock with JSON\nDESCRIPTION: Defines a JSON path matcher where the actual date/time value is truncated to the first day of the month before comparison, useful for matching exact month-based dates like 'in March 2020'.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_20\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"url\": \"/dates\",\n        \"method\": \"POST\",\n        \"bodyPatterns\": [\n            {\n                \"matchesJsonPath\": {\n                    \"expression\": \"$..completedDate\",\n                    \"equalToDateTime\": \"2020-03-01T00:00:00Z\",\n                    \"truncateActual\": \"first day of month\"\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding/Removing Array Elements Handlebars\nDESCRIPTION: This snippet showcases `arrayAdd` and `arrayRemove` helpers to modify arrays. Requires an array as input, an element to add or remove, and an optional position argument. The output is the modified array with the element added or removed at the specified position.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_72\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{arrayAdd (array 1 'three') 2 position=1}} // [1, 2, three]\n{{arrayAdd (array 1 'three') 2 position='start'}} // [2, 1, three]\n{{arrayAdd (array 1 'three') 2 position='end'}} // [1, three, 2]\n{{arrayAdd (array 1 'three') 2}} // [1, three, 2]\n\n{{arrayRemove (array 1 2 'three') position=1}} // [1, three]\n{{arrayRemove (array 1 2 'three') position='start'}} // [2, three]\n{{arrayRemove (array 1 2 'three') position='end'}} // [1, 2]\n{{arrayRemove (array 1 2 'three')}} // [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Passing WireMock Options via Environment Variable - Shell\nDESCRIPTION: This shell command shows how to pass WireMock command line arguments via the WIREMOCK_OPTIONS environment variable when starting the container. Supported from version 3.2.0-2 and up, this approach allows parameterizing WireMock without altering the container launch command. Environment variables are set using -e and can contain any valid WireMock CLI flags (e.g., --https-port 8443 --verbose).\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/docker.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it --rm \\\n  -e WIREMOCK_OPTIONS='--https-port 8443 --verbose' \\\n  -p 8443:8443 \\\n  --name wiremock \\\n  wiremock/wiremock:{{ site.wiremock_version }}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Client Instances for Remote WireMock Servers - Java\nDESCRIPTION: Shows how to instantiate multiple WireMock Java client instances, each targeting a specific remote server. This pattern allows parallel configuration of multiple servers within the same Java application. Dependencies include the WireMock Java client library. Inputs are the hostname, port, and protocol; outputs are WireMock client objects targeting those addresses.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/java-jar.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nWireMock wireMock1 = new WireMock(\"1st.remote.host\", 8000);\nWireMock wireMock2 = new WireMock(\"https\", \"2nd.remote.host\", 8001);\n```\n\n----------------------------------------\n\nTITLE: Running WireMock 3.x in Docker\nDESCRIPTION: Command to run WireMock 3.x as a Docker container, exposing it on port 8080.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/download-and-installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -p 8080:8080 --name wiremock \\\n  wiremock/wiremock:{{ site.wiremock_version }}\n```\n\n----------------------------------------\n\nTITLE: Adding WireMock Jetty 12 Dependency for Gradle (Groovy)\nDESCRIPTION: This snippet shows how to add the 'wiremock-jetty12' module to a Gradle project using Groovy DSL. The 'testImplementation' configuration is used to include the dependency for testing, referencing the appropriate WireMock version via '{{ site.wiremock_version }}'.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/jetty-12.md#_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation \"org.wiremock:wiremock-jetty12:{{ site.wiremock_version }}\"\n```\n\n----------------------------------------\n\nTITLE: SOAP XML document\nDESCRIPTION: A SOAP XML document used as example in the documentation.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_40\n\nLANGUAGE: xml\nCODE:\n```\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope/\">\n    <soap:Body>\n        <m:a>\n            <m:test>success</m:test>\n        </m:a>\n    </soap:Body>\n</soap:Envelope>\n```\n\n----------------------------------------\n\nTITLE: Verifying Requests Using Groovy DSL - Groovy\nDESCRIPTION: This Groovy snippet demonstrates how to verify requests using the Groovy DSL binding library. It verifies the count of requests with specific methods and URLs. It relies on the WireMockGroovy object to perform assertions. The example includes checks for method, URL, and headers.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/groovy.md#_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndef \"example verifying test\" () {\n    ...\n    then:\n    1 == wireMockStub.count {\n        method \"GET\"\n        url \"/some/url\"\n    }\n}\n\ndef \"test using groovy truth if you need at least one request and shows example matcher\" () {\n    ...\n    then:\n    wireMockStub.count {\n        method \"POST\"\n        url \"/some/url\"\n        headers {\n            \"Content-Type\" {\n                matches \".*xml\"\n            }\n        }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Capitalizing a Request Query Parameter using Handlebars\nDESCRIPTION: This snippet demonstrates how to capitalize a request query parameter using the `capitalize` helper in Handlebars. It assumes the presence of a `request` object with a `query` property containing a `search` parameter. This relies on the Handlebars.java library.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_15\n\nLANGUAGE: handlebars\nCODE:\n```\n{{capitalize request.query.search}}\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers Handlebars\nDESCRIPTION: This snippet demonstrates the use of the `numberFormat` helper to format numbers with predefined formats, custom format strings, and various options. It requires a number as input and formats it according to the specified format, locale, rounding mode, and digit settings. Requires the number to format, the format (e.g., 'currency', 'percent', or a custom format string), an optional locale, and other optional parameters. The output is a formatted number string.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_61\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{{numberFormat 123.4567 'currency' 'en_GB'}}}\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS on Fixed Port Declaratively in JUnit Jupiter\nDESCRIPTION: Explains how to enable HTTPS and specify a fixed HTTPS port (e.g., 8443) for the WireMock server using the declarative `@WireMockTest` annotation by setting both `httpsEnabled` and `httpsPort` parameters.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/junit-jupiter.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@WireMockTest(httpsEnabled = true, httpsPort = 8443)\npublic class HttpsFixedPortDeclarativeWireMockTest {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding to a JSON array using block form in Handlebars\nDESCRIPTION: Shows how to use the jsonArrayAdd helper in block form, where the contents of the block are parsed as the new item to add to the array.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_43\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#jsonArrayAdd existingArray}}\n{\n    \"id\": 321,\n    \"name\": \"sam\"\n}\n{{/jsonArrayAdd}}\n```\n\n----------------------------------------\n\nTITLE: Customizing WireMock Startup Parameters in Custom Docker Image - Dockerfile\nDESCRIPTION: This Dockerfile example illustrates how to build a custom WireMock Docker image with a modified entrypoint to provide global startup parameters. Key steps include copying local configuration files into the container, and setting the ENTRYPOINT to /docker-entrypoint.sh with additional WireMock flags such as --global-response-templating, --disable-gzip, and --verbose. This approach ensures consistent startup behavior for instances based on the custom image.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/docker.md#_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Sample Dockerfile\nFROM wiremock/wiremock:latest\nCOPY wiremock /home/wiremock\nENTRYPOINT [\"/docker-entrypoint.sh\", \"--global-response-templating\", \"--disable-gzip\", \"--verbose\"]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring WireMock Gradle Dependency for JUnit with Java 1.7\nDESCRIPTION: Gradle dependency configuration to include WireMock version 2.27.2 for JUnit tests in Java 1.7 projects. This version is the last one that supports Java 1.7.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/advanced/java7.md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation \"com.github.tomakehurst:wiremock:2.27.2\"\n```\n\n----------------------------------------\n\nTITLE: Embedding Redoc API Documentation Display (HTML/Liquid)\nDESCRIPTION: Utilizes the custom Redoc HTML tag (<redoc>) to embed and render an OpenAPI specification dynamically. Key attributes configure the display: `hide-hostname` removes the server base URL from the UI, `path-in-middle-panel` adjusts the layout, and `spec-url` specifies the location of the OpenAPI JSON file. The URL for `spec-url` is generated using Jekyll's Liquid templating (`absolute_url` filter) to ensure it's correct relative to the site's base URL.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/admin-api-reference.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<redoc hide-hostname=\"true\" path-in-middle-panel=\"true\" spec-url=\"{{ '/assets/js/wiremock-admin-api.json' | absolute_url }}\"></redoc>\n```\n\n----------------------------------------\n\nTITLE: Matching Date Range with JSONPath - Java\nDESCRIPTION: This Java code snippet shows how to match a date range within a JSON request body using `matchesJsonPath`. It extracts the `date` field from the JSON body and checks if it falls between '2020-01-01T00:00:00' and '2022-01-01T00:00:00' using the `before` and `after` matchers combined with `and`.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_26\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(post(\"/date-range\")\n    .withRequestBody(matchingJsonPath(\"$.date\",\n        before(\"2022-01-01T00:00:00\").and(\n        after(\"2020-01-01T00:00:00\"))))\n    .willReturn(ok()));\n```\n\n----------------------------------------\n\nTITLE: Assigning a Capitalized Query Parameter to a Variable\nDESCRIPTION: This snippet shows how to assign the capitalized value of a request query parameter to a variable named `myCapitalisedQuery` using the `assign` helper in Handlebars. It depends on Handlebars.java's `assign` and `capitalize` helpers.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_16\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#assign 'myCapitalisedQuery'}}{{capitalize request.query.search}}{{/assign}}\n```\n\n----------------------------------------\n\nTITLE: Using WireMock Pact as a Library for Programmatic Contract Generation - Java\nDESCRIPTION: This snippet demonstrates using the wiremock-pact library directly for programmatic contract handling and metadata assignment. It shows setup and teardown in a test lifecycle, stubbing endpoints, initializing WireMockPactApi with consumer/provider values and JSON output folder, clearing stored Pact data, and post-test saving of collected interactions as Pact JSON. Prerequisites: wiremock-pact library, WireMock server, and proper dependency setup. Inputs are test events and WireMock interactions; outputs are persisted Pact JSON contract files.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/pact.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class ExampleTest {\n  private static WireMockServer server;\n  private static WireMockPactApi wireMockPactApi;\n\n  @BeforeAll\n  public static void beforeEach() throws IOException {\n    server = new WireMockServer();\n    server.start();\n\n    stubFor(\n        post(anyUrl())\n            .willReturn(\n                ok()\n                .withHeader(\"content-type\", \"application/json\")\n                .withBody(\"\"\"\n                {\"a\":\"b\"}\n                \"\"\"))\n            .withMetadata(\n                new Metadata(\n                    Map.of(\n                        WireMockPactMetadata.METADATA_ATTR,\n                        new WireMockPactMetadata()\n                            .setProvider(\"some-specific-provider\")))));\n\n    wireMockPactApi =\n        WireMockPactApi.create(\n            new WireMockPactConfig()\n                .setConsumerDefaultValue(\"my-service\")\n                .setProviderDefaultValue(\"unknown-service\")\n                .setPactJsonFolder(\"the/pact-json/folder\"));\n    wireMockPactApi.clearAllSaved();\n  }\n\n  @Test\n  public void testInvoke() {\n    // Do stuff that invokes WireMock...\n  }\n\n  @AfterAll\n  public static void after() {\n    for (final ServeEvent serveEvent : server.getAllServeEvents()) {\n      wireMockPactApi.addServeEvent(serveEvent);\n    }\n    // Save pact-json to folder given in WireMockPactApi\n    wireMockPactApi.saveAll();\n    server.stop();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Request Headers to JSON with toJson Helper\nDESCRIPTION: This snippet converts request headers to a JSON string using the `toJson` helper.  It assumes the presence of a `request` object with a `headers` property.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_35\n\nLANGUAGE: handlebars\nCODE:\n```\n{{toJson request.headers}}\n```\n\n----------------------------------------\n\nTITLE: Checking for Even Numbers with Conditional Rendering\nDESCRIPTION: This snippet demonstrates the `isEven` helper in Handlebars. It checks if a given number is even and optionally renders a specified value (e.g., 'leftBox') if true.  It relies on the Handlebars.java conditional helpers.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_18\n\nLANGUAGE: handlebars\nCODE:\n```\n{{isEven 2}}\n{{isEven 4 'leftBox'}}\n```\n\n----------------------------------------\n\nTITLE: Formatting XML with Inline Input\nDESCRIPTION: This snippet demonstrates providing the XML input inline to the `formatXml` helper and using a variable. The `formatXml` helper is then used with the `compact` option with variable `someXml`.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_27\n\nLANGUAGE: handlebars\nCODE:\n```\n{{formatXml ' <foo>  <bar>wh</bar>  </foo> '}}\n\n{{#assign 'someXml'}} <foo>  <bar>wh</bar>  </foo> {{/assign}}\n{{formatXml someXml format='compact'}}\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for Standalone WireMock with gRPC\nDESCRIPTION: Bash commands to create the necessary directory structure for using WireMock with gRPC in standalone mode.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/grpc.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p wiremock wiremock/mappings wiremock/grpc\n```\n\n----------------------------------------\n\nTITLE: Generating Random Decimals Handlebars\nDESCRIPTION: This snippet shows the usage of the `randomDecimal` helper to generate random decimal numbers, with or without specified upper and lower bounds. No dependencies are required. The output will be a random decimal number within the given bounds, or any decimal number if bounds are not provided.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_60\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{randomDecimal}}\n{{randomDecimal lower=-10.1 upper=-0.9}}\n{{randomDecimal upper=12.5}}\n{{randomDecimal lower=-24.01}}\n```\n\n----------------------------------------\n\nTITLE: Disabling All Response Templating via WireMockServer Options - Java\nDESCRIPTION: This snippet shows how to completely disable all Handlebars-based response templating in WireMock by setting templatingEnabled(false) in the Java startup options. This prevents any response transformers from applying templating logic. Requires the WireMock Java library. Use this configuration when you do not want any responses or proxies to be templated in your server instance.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nWireMockServer wm =\n    new WireMockServer(options().templatingEnabled(false));\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables and System Properties Using systemValue Helper in Handlebars\nDESCRIPTION: The systemValue helper fetches environment variables or JVM system properties. By default, it retrieves environment variables via the key parameter; type can be set to 'ENVIRONMENT' or 'PROPERTY' to specify source explicitly. A default value parameter can be supplied since version 3.5 to use when the key is absent. This helper is useful for injecting system or environment configuration data into templates dynamically.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_87\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{systemValue key='PATH'}} <!-- type defaults to ENVIRONMENT -->\n{{systemValue type='ENVIRONMENT' key='PATH'}}\n{{systemValue type='PROPERTY' key='os.path'}}\n```\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{systemValue key='PATH' default='DEFAULT'}} <!-- type defaults to ENVIRONMENT -->\n{{systemValue type='ENVIRONMENT' key='PATH' default='DEFAULT'}}\n{{systemValue type='PROPERTY' key='os.path' default='DEFAULT'}}\n```\n\n----------------------------------------\n\nTITLE: Including Redoc JavaScript Library (HTML/Liquid)\nDESCRIPTION: Includes the required standalone Redoc JavaScript library via an HTML <script> tag. This script is necessary for the <redoc> custom element to function and render the interactive API documentation. The `src` attribute uses Jekyll's Liquid templating (`absolute_url` filter) to construct the correct path to the Redoc JavaScript file within the project's assets.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/admin-api-reference.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"{{ '/assets/js/redoc.standalone.js' | absolute_url }}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Matching Exactly Multiple Query Parameters - JSON\nDESCRIPTION: This JSON snippet defines a WireMock mapping to match a GET request to `/things`. It asserts that the `id` query parameter has exactly three values: \"1\", \"2\", and \"3\".  No other values are allowed.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_29\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"mapping\": {\n    \"request\" : {\n      \"urlPath\" : \"/things\",\n      \"method\" : \"GET\",\n      \"queryParameters\" : {\n        \"id\" : {\n          \"hasExactly\" : [\n            {\n              \"equalTo\": \"1\"\n            },\n            {\n              \"equalTo\": \"2\"\n            },\n            {\n              \"equalTo\": \"3\"\n            }\n          ]\n        }\n      }\n    },\n    \"response\" : {\n      \"status\" : 200\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Recording via API\nDESCRIPTION: This JSON snippet demonstrates customizing the recording process in WireMock via the API. It involves a POST request to the /__admin/recordings/start endpoint, passing a JSON payload that specifies filters, header capturing, body extraction criteria, and transformers. Prerequisites: a running WireMock instance. Expected output: a recording based on the defined configuration.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/record-playback.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\nPOST /__admin/recordings/start\n{\n  \"targetBaseUrl\" : \"http://examples.wiremockapi.cloud/\",\n  \"filters\" : {\n    \"urlPathPattern\" : \"/api/.*\",\n    \"method\" : \"GET\",\n    \"allowNonProxied\": true\n  },\n  \"captureHeaders\" : {\n    \"Accept\" : { },\n    \"Content-Type\" : {\n      \"caseInsensitive\" : true\n    }\n  },\n  \"requestBodyPattern\" : {\n    \"matcher\" : \"equalToJson\",\n    \"ignoreArrayOrder\" : false,\n    \"ignoreExtraElements\" : true\n  },\n  \"extractBodyCriteria\" : {\n    \"textSizeThreshold\" : \"2048\",\n    \"binarySizeThreshold\" : \"10240\"\n  },\n  \"persist\" : false,\n  \"repeatsAsScenarios\" : false,\n  \"transformers\" : [ \"modify-response-header\" ],\n  \"transformerParameters\" : {\n    \"headerValue\" : \"123\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Exactly with Expressions - JSON\nDESCRIPTION: This JSON snippet configures a WireMock stub to match GET requests to `/things`. It validates that the `id` query parameter has exactly three values, matching the expressions: equal to \"1\", containing \"2\", and not containing \"3\".\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_31\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"mapping\": {\n    \"request\" : {\n      \"urlPath\" : \"/things\",\n      \"method\" : \"GET\",\n      \"queryParameters\" : {\n        \"id\" : {\n          \"hasExactly\" : [\n            {\n              \"equalTo\": \"1\"\n            },\n            {\n              \"contains\": \"2\"\n            },\n            {\n              \"doesNotContain\": \"3\"\n            }\n          ]\n        }\n      }\n    },\n    \"response\" : {\n      \"status\" : 200\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating over XPath Results with the each Helper\nDESCRIPTION: This snippet demonstrates how to iterate over a collection of XML node objects returned by the `xPath` helper using the `each` helper.  It accesses properties like `name`, `text`, and attributes of each node.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_24\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#each (xPath request.body '/things/item') as |node|}}\n  name: {{node.name}}, text: {{node.text}}, ID attribute: {{node.attributes.id}}\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Stubbing with AND Matcher - Java\nDESCRIPTION: This Java code snippet demonstrates how to combine two matchers using the `and` operator within WireMock. It defines a stub that matches requests to `/and` with a header `X-Some-Value` that matches both a regular expression `[a-z]+` and contains the string `magicvalue`.  The stub returns an OK response.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\n// Both statements are equivalent\n\nstubFor(get(urlPathEqualTo(\"/and\"))\n    .withHeader(\"X-Some-Value\", and(\n        matching(\"[a-z]+\"),\n        containing(\"magicvalue\"))\n    )\n    .willReturn(ok()));\n\nstubFor(get(urlPathEqualTo(\"/and\"))\n    .withHeader(\"X-Some-Value\", matching(\"[a-z]+\").and(containing(\"magicvalue\")))\n    .willReturn(ok()));\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Stub Fixed Delay with WireMock Java API\nDESCRIPTION: Demonstrates how to configure a specific stub endpoint (\"/delayed\") to always respond with a HTTP 200 status after a fixed delay of 2000 milliseconds using the WireMock Java API. Requires the WireMock Java library and access to stubFor, get, urlEqualTo, aResponse, and withFixedDelay methods. Inputs: HTTP GET request to \"/delayed\". Output: Response after 2 seconds delay. Useful for simulating slow network or backend processing for a particular endpoint.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/simulating-faults.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nstubFor(get(urlEqualTo(\"/delayed\")).willReturn(\n        aResponse()\n                .withStatus(200)\n                .withFixedDelay(2000)));\n\n```\n\n----------------------------------------\n\nTITLE: Snapshot Customisation via Java DSL\nDESCRIPTION: This Java snippet shows how to customize a snapshot recording using the recordSpec(). It allows you to specify filters, headers to capture, body extraction criteria, and other parameters. The snippet uses the snapshotRecord() function, setting filters for specific requests based on URL and header values. Expected output: Customized stub mappings based on the defined criteria.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/record-playback.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nsnapshotRecord(\n      recordSpec()\n          .onlyRequestsMatching(getRequestedFor(urlPathMatching(\"/api/.*\")\n          .onlyRequestIds(singletonList(UUID.fromString(\"40a93c4a-d378-4e07-8321-6158d5dbcb29\")\n          .allowNonProxied(true)\n          .captureHeader(\"Accept\")\n          .captureHeader(\"Content-Type\", true)\n          .extractBinaryBodiesOver(10240)\n          .extractTextBodiesOver(2048)\n          .makeStubsPersistent(false)\n          .ignoreRepeatRequests()\n          .transformers(\"modify-response-header\")\n          .transformerParameters(Parameters.one(\"headerValue\", \"123\")\n          .chooseBodyMatchTypeAutomatically()\n  );\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific XMLUnit Comparison Types\nDESCRIPTION: Demonstrates how to exempt specific XMLUnit comparison types when matching XML. This example excludes namespace URI and element tag name comparisons.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport static org.xmlunit.diff.ComparisonType.*;\n\n...\n\n.withRequestBody(equalToXml(\"<thing>Hello</thing>\")\n    .exemptingComparisons(NAMESPACE_URI, ELEMENT_TAG_NAME)\n)\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request\": {\n    ...\n    \"bodyPatterns\" : [ {\n      \"equalToXml\" : \"<thing>Hello</thing>\",\n      \"exemptedComparisons\": [\"NAMESPACE_URI\", \"ELEMENT_TAG_NAME\"]\n    } ]\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Filename Template using WireMock Java API\nDESCRIPTION: This snippet demonstrates how to set a custom filename template for stub mappings in WireMock using Java. It uses the Handlebars format to generate filenames based on request metadata (e.g., request URL and method), and requires WireMock 3.0.0-beta-8 or later. The template will dynamically produce filenames like 'put-hosts-id.json', improving clarity and traceability of stubbed endpoints.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/configuration.md#_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\n.filenameTemplate(\"{{{request.url}}}-{{{request.url}}}.json\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Stub Mapping via HTTP API - Bash\nDESCRIPTION: Illustrates the use of a cURL command to POST a JSON stub mapping directly to the WireMock HTTP admin API. The bash command requires an accessible WireMock server running on the target host and curl installed. Inputs include a JSON-formatted payload describing the request and response to stub. The expected output is creation of the mapping server-side, facilitating simulated API responses.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/java-jar.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n--data '{ \"request\": { \"url\": \"/get/this\", \"method\": \"GET\" }, \"response\": { \"status\": 200, \"body\": \"Here it is!\\n\" }}' \\\nhttp://localhost:8080/__admin/mappings\n```\n\n----------------------------------------\n\nTITLE: Configuring Transfer Encoding Policy in WireMock\nDESCRIPTION: Sets the response chunked transfer encoding policy, affecting whether responses are chunked and how response size is determined based on the policy, balancing performance and resource use.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/configuration.md#_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\n.useChunkedTransferEncoding(Options.ChunkedEncodingPolicy.BODY_FILE)\n```\n\n----------------------------------------\n\nTITLE: Disabling Unmatched Request Verification in WireMockRule Constructor - Java\nDESCRIPTION: This snippet shows how to disable the default unmatched request verification behavior of WireMockRule by passing 'false' as the second constructor argument. By default, WireMockRule fails tests if un-stubbed requests are received; this disables that feature, allowing unmatched requests without causing test failures. It requires an Options instance (here with a custom HTTP port 8888). This is useful when unmatched requests are expected or tolerated during tests.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/junit-extensions.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n@Rule\npublic WireMockRule wireMockRule = new WireMockRule(options().port(8888), false);\n```\n\n----------------------------------------\n\nTITLE: Initializing WireMock Testcontainers Container in C\nDESCRIPTION: This snippet demonstrates how to create, configure, and run a WireMock container using the testcontainers-c-wiremock library. It shows how to add mapping files and standard files to the container before starting it, including basic error handling for the container startup.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/c_cpp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <stdio.h>\n#include <string.h>\n#include \"testcontainers-c-wiremock.h\"\n\nint main() {\n    printf(\"Creating new container: %s\\n\", DEFAULT_WIREMOCK_IMAGE);\n    int requestId = tc_wm_new_default_container();\n    tc_wm_with_mapping(requestId, \"test_data/hello.json\", \"hello\");\n    tc_with_file(requestId, \"test_data/hello.json\", \"/home/wiremock/mappings/hello2.json\");\n    struct tc_run_container_return ret = tc_run_container(requestId);\n    int containerId = ret.r0;\n    if (!ret.r1) {\n        printf(\"Failed to run the container: %s\\n\", ret.r2);\n        if (containerId != -1) { // Print container log\n            char* log = tc_get_container_log(containerId);\n            if (log != NULL) {\n                printf(\"\\n%s\\n\", log);\n            }\n        }\n        return -1;\n    }\n\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Workaround for JUnit 4.11+ Static Rule Usage Limitation with WireMockClassRule - Java\nDESCRIPTION: This example demonstrates how to use WireMockClassRule with JUnit 4.11 and above, which prohibits static @Rule members. Here, the WireMockClassRule is declared as a static @ClassRule, and a non-static @Rule references this instance. This setup preserves the shared server instance across tests while conforming to JUnit's annotation constraints. The server runs on port 8089. It requires the WireMockClassRule class from WireMock and JUnit 4.11+.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/junit-extensions.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n@ClassRule\npublic static WireMockClassRule wireMockRule = new WireMockClassRule(8089);\n\n@Rule\npublic WireMockClassRule instanceRule = wireMockRule;\n```\n\n----------------------------------------\n\nTITLE: Configuring Static DSL for Programmatic WireMock Instance in JUnit Jupiter\nDESCRIPTION: Illustrates how to link the static WireMock DSL to a specific instance when using the programmatic `@RegisterExtension` approach. Calling `configureStaticDsl(true)` on the extension builder ensures that static DSL calls communicate with this particular instance.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/junit-jupiter.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class AutomaticStaticDslConfigTest {\n\n    @RegisterExtension\n    static WireMockExtension wm1 = WireMockExtension.newInstance()\n            .options(wireMockConfig().dynamicPort().dynamicHttpsPort())\n            .configureStaticDsl(true)\n            .build();\n\n    @RegisterExtension\n    static WireMockExtension wm2 = WireMockExtension.newInstance()\n            .options(wireMockConfig().dynamicPort().dynamicHttpsPort())\n            .build();\n\n    @Test\n    void test_something_with_wiremock() {\n        // Will communicate with the instance called wm1\n        stubFor(get(\"/static-dsl\").willReturn(ok()));\n\n        // Do test stuff...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Stubr with WireMock JSON stubs in Rust\nDESCRIPTION: Example showing how to use Stubr to start a mock server using a WireMock JSON stub file and test against it. Uses tokio runtime and optional asserhttp for assertions.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/rust.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse asserhttp::*;\n\n#[tokio::test]\nasync fn getting_started() {\n    // run a mock server with the stub 👇\n    let stubr = stubr::Stubr::start(\"tests/stubs/hello.json\").await;\n    // or use 'start_blocking' for a non-async version\n\n    // the mock server started on a random port e.g. '127.0.0.1:43125'\n    // so we use the stub instance 'path' (or 'uri') method to get the address back\n    let uri = stubr.path(\"/hello\");\n    reqwest::get(uri).await\n        // (optional) use asserhttp for assertions\n        .expect_status_ok()\n        .expect_content_type_text()\n        .expect_body_text_eq(\"Hello stubr\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP/2 Over HTTP and HTTPS in WireMock\nDESCRIPTION: Enables or disables HTTP/2 protocol support for plain-text (HTTP) and TLS (HTTPS) connections to optimize performance or compatibility.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/configuration.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n// Disable HTTP/2 over HTTP\n.http2PlainDisabled(true);\n\n// Disable HTTP/2 over HTTPS\n.http2TlsDisabled(true);\n```\n\n----------------------------------------\n\nTITLE: Working with dates and times in Handlebars\nDESCRIPTION: Demonstrates using the now helper to render the current date/time with various format options, offsets, and timezone specifications.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_54\n\nLANGUAGE: handlebars\nCODE:\n```\n{{now}}\n{{now offset='3 days'}}\n{{now offset='-24 seconds'}}\n{{now offset='1 years'}}\n{{now offset='10 years' format='yyyy-MM-dd'}}\n{{now timezone='Australia/Sydney' format='yyyy-MM-dd HH:mm:ssZ'}}\n{{now offset='2 years' format='epoch'}}\n{{now offset='2 years' format='unix'}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Stub Fixed Delay with WireMock JSON API\nDESCRIPTION: Shows how to configure a stub to respond to GET requests on \"/delayed\" with a fixed delay using JSON. The configuration sets status 200 and a fixed delay of 2000 milliseconds. Inputs: JSON stub mapping. Outputs: Delayed response. No external dependencies beyond WireMock server accepting JSON mappings.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/simulating-faults.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"request\": {\n        \"method\": \"GET\",\n        \"url\": \"/delayed\"\n    },\n    \"response\": {\n        \"status\": 200,\n        \"fixedDelayMilliseconds\": 2000\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Joining Array Elements Handlebars\nDESCRIPTION: This snippet showcases `arrayJoin` helper to concatenate array elements using a specified separator, with optional prefix and suffix. The output is a string formed by joining the array elements with the separator, prefix, and suffix.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_73\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{arrayJoin ',' (array 'One' 'Two' 'Three')}} // One,Two,Three\n{{arrayJoin ' - ' 'a' 'b' 'c'}} // a - b - c\n{{arrayJoin ', ' (range 1 5)}} // 1, 2, 3, 4, 5\n{{arrayJoin (pickRandom ':') (array 'One' 'Two' 'Three')}} // One:Two:Three\n{{arrayJoin '' (array 'W' 'i' 'r' 'e' 'M' 'o' 'c' 'k' ' ' 'R' 'o' 'c' 'k' 's')}} // WireMock Rocks\n```\n\n----------------------------------------\n\nTITLE: Interacting with WireMock via REST API Using wiremock-rest-client in JavaScript\nDESCRIPTION: This example illustrates programmatic interaction with a running WireMock server using the 'wiremock-rest-client' library. It connects to a WireMock instance at localhost:8080, retrieves all stub mappings via the OpenAPI 3.0 REST API, logs the mappings, and then gracefully shuts down the server. This requires the 'wiremock-rest-client' NPM package and access to a running WireMock server on the specified endpoint. The key parameters are the WireMock server URL and method calls to fetch and manage stub mappings.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/nodejs.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { WireMockRestClient } from 'wiremock-rest-client';\n\nconst wireMock = new WireMockRestClient('http://localhost:8080');\nconst stubMappings = await wireMock.mappings.getAllMappings();\nconsole.log(stubMappings);\n\nawait wireMock.global.shutdown();\n```\n\n----------------------------------------\n\nTITLE: Specifying Binary Response Body - JSON\nDESCRIPTION: This snippet demonstrates how to specify a binary response body using the WireMock JSON API. The `base64Body` property takes a base64 encoded string representing the binary data.  A GET request to `/binary-body` returns the decoded data as the response.  In this case \"WUVTIElOREVFRCE=\" decodes to some arbitrary binary.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_17\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"method\": \"GET\",\n        \"url\": \"/binary-body\"\n    },\n    \"response\": {\n        \"status\": 200,\n        \"base64Body\": \"WUVTIElOREVFRCE=\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stubbing HTTP Response with Status Message Using WireMock in Java\nDESCRIPTION: This Java snippet defines a WireMock stub for a GET request to '/my/resource' which returns HTTP status 400 with a custom status message 'ERROR'. It then performs an HTTP connection to validate the response code and message. Due to Jetty 12 limitations, the status message is not passed through to the client, so the response message defaults to 'Bad Request'. This demonstrates the limitation of status message handling in Jetty 12 with WireMock.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/jetty-12.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nstubFor(get(\"/my/resource\")\n    .willReturn(status(400)\n        .withStatusMessage(\"ERROR\")));\n\nURI uri = URI.create(wireMockRule.url(\"/my/resource\"));\nHttpURLConnection connection = (HttpURLConnection) uri.toURL ().openConnection ();\nconnection.setRequestMethod (\"GET\");\n\nassertThat(connection.getResponseCode()).isEqualTo(400);\nassertThat(connection.getResponseMessage()).isEqualTo(\"Bad Request\"); /* the status message is not returned */\n```\n\n----------------------------------------\n\nTITLE: Formatting XML with Compact Format\nDESCRIPTION: This snippet demonstrates using the `formatXml` helper with the `compact` format option to remove all whitespace from the input XML.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_26\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#formatXml format='compact'}}\n<foo><bar\n>wh</bar></foo\n>\n{{/formatXml}}\n```\n\n----------------------------------------\n\nTITLE: Specifying Response Body with String Literal - JSON\nDESCRIPTION: This snippet shows how to define a response body as a string literal using the WireMock JSON API. The stub configuration returns a 200 status code and the given text when a GET request is made to the `/body` URL.  The body is directly embedded in the JSON.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"method\": \"GET\",\n        \"url\": \"/body\"\n    },\n    \"response\": {\n        \"status\": 200,\n        \"body\": \"Literal text to put in the body\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Stub Mappings and Files to a Remote WireMock Instance - Java\nDESCRIPTION: Demonstrates how to use the WireMock Java API to connect to a remote server and push mappings and files from a specified root directory. The snippet requires the WireMock Java library and directory structure with mappings and __files subdirectories. Inputs include connection parameters and the local resource path; output is programmatic transmission and registration of mappings/files on the target WireMock instance.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/java-jar.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nWireMock wireMock = WireMock.create()\n    .scheme(\"http\")\n    .host(\"my-wiremock.example.com\")\n    .port(80)\n    .build();\n\n// The root directory of the WireMock project, under which the mappings and __files directories should be found\nwireMock.loadMappingsFrom(\"/wiremock-stuff\");\n```\n\n----------------------------------------\n\nTITLE: Using Custom String Length Helper Handlebars\nDESCRIPTION: This Handlebars snippet illustrates how to utilize the custom `string-length` helper registered via the WireMock extension. It shows examples of calling the helper with a literal string argument and with a dynamic value from the incoming request body.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/adding-template-helpers.md#_snippet_1\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{string-length 'abcde'}}\n{{string-length request.body}}\n```\n\n----------------------------------------\n\nTITLE: Default Response for Unmapped Requests - Java\nDESCRIPTION: This snippet defines a default response for any unmapped request using the WireMock Java API. It assigns a low priority (10) to this stub so that other more specific stubs are matched first. If no other stubs match, this stub returns a 404 status code and a JSON body indicating that the endpoint was not found.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stubbing.md#_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(any(anyUrl())\n                .atPriority(10)\n                .willReturn(aResponse()\n                        .withStatus(404)\n                        .withBody(\"{\\\"status\\\":\\\"Error\\\",\\\"message\\\":\\\"Endpoint not found\\\"}\")));\n```\n\n----------------------------------------\n\nTITLE: Configuring Uniform Delay Distribution via JSON\nDESCRIPTION: Demonstrates a delayDistribution JSON fragment for WireMock with a uniform distribution between 15 and 25 milliseconds. This configuration is used to add a small amount of jitter around a central delay value in either stub or global delay configuration. Inputs: lower and upper bounds (inclusive).\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/simulating-faults.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"delayDistribution\": {\n        \"type\": \"uniform\",\n        \"lower\": 15,\n        \"upper\": 25\n}\n\n```\n\n----------------------------------------\n\nTITLE: Simulating Faulty or Corrupted Responses with WireMock Java API\nDESCRIPTION: Uses the WireMock Java API to configure a stub for GET \"/fault\" that sends a corrupted response using the Fault.MALFORMED_RESPONSE_CHUNK preset. Requires WireMock Java library and Fault enum. Inputs: Fault enum value. Outputs: intentionally malformed HTTP response for resilience or error-path testing.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/simulating-faults.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nstubFor(get(urlEqualTo(\"/fault\"))\n        .willReturn(aResponse().withFault(Fault.MALFORMED_RESPONSE_CHUNK)));\n\n```\n\n----------------------------------------\n\nTITLE: Using Custom Placeholder Delimiters in XML Matching\nDESCRIPTION: Shows how to specify custom delimiters for XMLUnit placeholders when the default '${' and '}' cannot be used. This example uses '[[' and ']]' as placeholder delimiters.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n.withRequestBody(\n    equalToXml(\"<message><id>[[xmlunit.ignore]]</id><content>Hello</content></message>\",\n               true,\n               \"\\\\[\\\\[\",\n               \"]]\"\n    )\n)\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request\": {\n    ...\n    \"bodyPatterns\" : [ {\n      \"equalToXml\" : \"<message><id>[[xmlunit.ignore]]</id><content>Hello</content></message>\",\n      \"enablePlaceholders\" : true,\n      \"placeholderOpeningDelimiterRegex\" : \"\\\\[\\\\[\",\n      \"placeholderClosingDelimiterRegex\" : \"]]\"\n    } ]\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Stubbing gRPC Methods with Non-OK Status Responses\nDESCRIPTION: Java code showing how to return gRPC error statuses instead of OK responses when stubbing gRPC methods.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/grpc.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nmockGreetingService.stubFor(\n    method(\"greeting\")\n        .withRequestMessage(equalToMessage(\n            HelloRequest.newBuilder().setName(\"Prereq failure\")\n        ))\n        .willReturn(Status.FAILED_PRECONDITION, \"Failed on some prerequisite\"));\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace Handlebars\nDESCRIPTION: This snippet uses the `trim` helper to remove whitespace from the beginning and end of a string. It can be used with header values or as a block element for more complex scenarios. The output will be the input string with leading and trailing whitespace removed.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_80\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{trim request.headers.X-Padded-Header}}\n\n{{#trim}}\n\n    Some stuff with whitespace\n\n{{/trim}}\n```\n\n----------------------------------------\n\nTITLE: Using ResponseTransformerV2 for Response Transformation in Java\nDESCRIPTION: Defines a response transformer class implementing ResponseTransformerV2, which allows modification of an existing Response object based on request parameters. Suitable for transforming proxy responses or server responses after they are received.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/transforming-responses.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic static class StubResponseTransformerWithParams implements ResponseTransformerV2 {\n\n        @Override\n        public Response transform(Response response, ServeEvent serveEvent) {\n            Parameters parameters = serveEvent.getTransformerParameters();\n            return Response.Builder.like(response)\n                    .but().body(parameters.getString(\"name\") + \", \"\n                            + parameters.getInt(\"number\") + \", \"\n                            + parameters.getBoolean(\"flag\"))\n                    .build();\n        }\n\n        @Override\n        public String getName() {\n            return \"stub-transformer-with-params\";\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Network Ports and Binding IP Address in WireMock\nDESCRIPTION: Configures server network settings such as HTTP/HTTPS ports, dynamic port assignment, and local bind address. These options help control how WireMock listens for incoming requests.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/configuration.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n// Statically set the HTTP port number. Defaults to 8080.\n.port(8000)\n\n// Statically set the HTTPS port number. Defaults to 8443.\n.httpsPort(8001)\n\n// Randomly assign the HTTP port on startup\n.dynamicPort()\n\n// Randomly assign the HTTPS port on startup\n.dynamicHttpsPort()\n\n// Bind the WireMock server to this IP address locally. Defaults to the loopback adapter.\n.bindAddress(\"192.168.1.111\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Scenario States in WireMock (Java)\nDESCRIPTION: Shows how to retrieve the current state and details of all defined scenarios using the `getAllScenarios()` method from the WireMock Java client. This method returns a `List` of `Scenario` objects, each containing information like name, current state, and possible states.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/stateful-behaviour.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nList<Scenario> allScenarios = getAllScenarios();\n```\n\n----------------------------------------\n\nTITLE: Running WireMock website locally with preview (Bash)\nDESCRIPTION: Starts a local web server for the Jekyll website, providing a live preview of changes as files are modified. It uses the specified configuration file (`_config.yml`) and typically serves the site at http://localhost:4000. This command is essential for interactive development and testing.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nbundle exec jekyll serve --config '_config.yml'\n```\n\n----------------------------------------\n\nTITLE: Adding WireMock 4.x Standalone as Maven Dependency\nDESCRIPTION: Maven dependency configuration for adding the beta WireMock 4.x standalone version to a project.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/download-and-installation.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.wiremock</groupId>\n    <artifactId>wiremock-standalone</artifactId>\n    <version>{{ site.wiremock_4_version }}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Lognormal Delay Distribution via JSON\nDESCRIPTION: Defines a lognormal delay distribution fragment for use in stub or global delay settings in WireMock, specifying the median (80) and sigma (0.4). Must be included as the value of a delayDistribution field, either at stub or global scope. Inputs: median, sigma values. Used for simulating long-tail response times.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/simulating-faults.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"delayDistribution\": {\n        \"type\": \"lognormal\",\n        \"median\": 80,\n        \"sigma\": 0.4\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding to nested JSON arrays using jsonPath in Handlebars\nDESCRIPTION: Demonstrates using the jsonPath parameter with jsonArrayAdd to target and update a nested array within a JSON structure.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_48\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#assign 'existingArray'}}\n[\n    {\n        \"id\": 123,\n        \"names\":[\"alice\", \"sam\"]\n    },\n    {\n        \"id\": 321,\n        \"names\":[\"fred\", \"neil\"]\n    }\n]\n{{/assign}}\n\n{{#assign 'itemToAdd'}}\"bob\"{{/assign}}\n\n{{jsonArrayAdd existingArray itemToAdd jsonPath='$[0].names'}}\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 123,\n    \"names\": [ \"alice\", \"sam\", \"bob\" ]\n  },\n  {\n    \"id\": 321,\n    \"names\": [ \"fred\", \"neil\" ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Applying Stripes with Conditional Rendering\nDESCRIPTION: This snippet uses the `stripes` helper to alternate between two CSS classes ('row-even' and 'row-odd') based on the row number. It relies on the Handlebars.java conditional helpers.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_19\n\nLANGUAGE: handlebars\nCODE:\n```\n{{stripes 3 'row-even' 'row-odd'}}\n```\n\n----------------------------------------\n\nTITLE: Removing Serve Events by Stub Metadata (Java API)\nDESCRIPTION: Removes ServeEvent objects from the request journal where the request matched a stub that has metadata matching the specified criteria. This allows cleanup based on stub-specific tags or identifiers.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nList<ServeEvent> removedServeEvents = removeEventsByStubMetadata(matchingJsonPath(\"$.tags[0]\", equalTo(\"test-57\")));\n```\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(get(\"/api/dosomething/123\")\n    .withMetadata(metadata()\n        .list(\"tags\", \"test-57\")\n    ));\n```\n\n----------------------------------------\n\nTITLE: Generating Integer Arrays Handlebars\nDESCRIPTION: This snippet uses the `range` helper to generate an array of integers within a specified range. It takes a lower and an upper bound. The output is an array of integers from the lower bound (inclusive) to the upper bound (inclusive).\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_69\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{range 3 8}}\n{{range -2 2}}\n```\n\n----------------------------------------\n\nTITLE: Integrating WireMock with Kotest using WireMockListener\nDESCRIPTION: This example shows how to integrate WireMock into a Kotest test using the 'kotest-extensions-wiremock' library. It initializes a `WireMockServer` on port 9000 and uses `WireMockListener` to manage its lifecycle per spec. Inside the test, it stubs a GET request to '/customers/123' to return an HTTP 200 OK response, then makes an actual HTTP request to verify the stub works, asserting the response code is 200.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/solutions/kotlin.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SomeTest : FunSpec({\n  val customerServiceServer = WireMockServer(9000)\n  listener(WireMockListener(customerServiceServer, ListenerMode.PER_SPEC))\n\n  test(\"let me get customer information\") {\n    customerServiceServer.stubFor(\n      WireMock.get(WireMock.urlEqualTo(\"/customers/123\"))\n        .willReturn(WireMock.ok())\n    )\n\n    val connection = URL(\"http://localhost:9000/customers/123\").openConnection() as HttpURLConnection\n    connection.responseCode shouldBe 200\n  }\n\n    //  ------------OTHER TEST BELOW ----------------\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying Requests (Java API)\nDESCRIPTION: Verifies that requests matching specified criteria were received by WireMock. It shows variations for checking at least once, a precise count, and using comparison operators. Throws VerificationException on failure.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nverify(postRequestedFor(urlEqualTo(\"/verify/this\"))\n        .withHeader(\"Content-Type\", equalTo(\"text/xml\")));\n```\n\nLANGUAGE: Java\nCODE:\n```\nverify(3, postRequestedFor(urlEqualTo(\"/three/times\")));\n```\n\nLANGUAGE: Java\nCODE:\n```\nverify(lessThan(5), postRequestedFor(urlEqualTo(\"/many\")));\nverify(lessThanOrExactly(5), postRequestedFor(urlEqualTo(\"/many\")));\nverify(exactly(5), postRequestedFor(urlEqualTo(\"/many\")));\nverify(moreThanOrExactly(5), postRequestedFor(urlEqualTo(\"/many\")));\nverify(moreThan(5), postRequestedFor(urlEqualTo(\"/many\")));\n```\n\n----------------------------------------\n\nTITLE: Extracting JSON Sub-Documents with JSONPath Helper\nDESCRIPTION: This snippet demonstrates using the `jsonPath` helper to extract a JSON sub-document from a JSON body using a JSONPath expression.  It assumes the presence of a `request` object with a `body` property containing the JSON. It returns the sub-document that matches the JSONPath.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_29\n\nLANGUAGE: handlebars\nCODE:\n```\n{{jsonPath request.body '$.outer'}}\n```\n\n----------------------------------------\n\nTITLE: Adding to a JSON array with default empty array in Handlebars\nDESCRIPTION: Demonstrates using the jsonArrayAdd helper with the val helper to default to an empty array if the existing array doesn't exist.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_44\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#jsonArrayAdd (val existingArray or='[]')}}\n{\n    \"id\": 321,\n    \"name\": \"sam\"\n}\n{{/jsonArrayAdd}}\n```\n\n----------------------------------------\n\nTITLE: Truncating Expected Date/Time Before Comparison in Wiremock using Java\nDESCRIPTION: Sets up a request body JSON path matcher where the expected date/time is truncated to the first day of the month before comparison, enabling flexible date matching like 'after the 15th of this month'.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_19\n\nLANGUAGE: Java\nCODE:\n```\nstubFor(post(\"/dates\"))\n  .withRequestBody(matchingJsonPath(\n      \"$.completedDate\",\n      after(\"now +15 days\").truncateExpected(FIRST_DAY_OF_MONTH))\n  )\n  .willReturn(ok()));\n```\n\n----------------------------------------\n\nTITLE: Extracting Values with regexExtract Helper in Handlebars\nDESCRIPTION: The regexExtract helper allows extraction of substrings matching a specified regular expression from an input string. It can extract a single match value or, when using capturing groups with a variable name, an object containing group captures. An optional default parameter specifies a fallback value when no match is found; otherwise, an error is thrown in such cases. This helper facilitates dynamic parsing of request data patterns within WireMock response templates.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_84\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{regexExtract request.body '[A-Z]+'}}\"\n```\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{regexExtract request.body '([a-z]+)-([A-Z]+)-([0-9]+)' 'parts'}}\n{{parts.0}},{{parts.1}},{{parts.2}}\n```\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{regexExtract 'abc' '[0-9]+' default='my default value'}}\n```\n\n----------------------------------------\n\nTITLE: Matching Strings with Regex as Block Handlebars\nDESCRIPTION: This snippet demonstrates using the `matches` helper as a block element to test a string against a regular expression. The output will be 'YES' or nothing, depending on whether the string matches the provided regular expression.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_79\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{#matches '123' '[0-9]+'}}YES{{/matches}}\n```\n\n----------------------------------------\n\nTITLE: Formatting XML with the formatXml Helper\nDESCRIPTION: This snippet demonstrates the use of the `formatXml` helper to rewrite XML in a specified format.  By default, it formats the XML with new lines and indentation (pretty format).  The format can be controlled using the `format` option, which can be `compact` (all whitespace removed) or `pretty`.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_25\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#formatXml}}\n<foo><bar\n>wh</bar></foo\n>\n{{/formatXml}}\n```\n\n----------------------------------------\n\nTITLE: Building WireMock website locally (Bash)\nDESCRIPTION: Executes the Jekyll build process to generate the static website files. It uses the specified configuration file (`_config.yml`) to control the build parameters. The output will typically be placed in the `_site` directory, ready for deployment or serving.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nbundle exec jekyll build --config '_config.yml'\n```\n\n----------------------------------------\n\nTITLE: Recording API Requests via Curl\nDESCRIPTION: This bash snippet demonstrates sending a request to a WireMock instance using curl after setting up the recorder, which records the interaction with the target API. The curl command is executed to generate a request through WireMock.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/record-playback.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl http://localhost:8080/recordables/123\n```\n\n----------------------------------------\n\nTITLE: Installing WireMock website Jekyll dependencies (Bash)\nDESCRIPTION: Installs the necessary Ruby gems, including Jekyll and Bundler, required to build and run the WireMock website locally. This command utilizes Bundler to manage project dependencies specified in the Gemfile. Requires a Ruby environment with Bundler installed.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Subclassing WireMockExtension\nDESCRIPTION: This code snippet demonstrates how to subclass `WireMockExtension` to extend its behavior. It overrides the `onBeforeAll`, `onBeforeEach`, `onAfterEach`, and `onAfterAll` methods to hook into the lifecycle events. The constructor takes a `WireMockExtension.Builder` as a parameter.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/junit-jupiter.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class MyMockApi extends WireMockExtension {\n\n    public MyMockApi(WireMockExtension.Builder builder) {\n      super(builder);\n    }\n\n    @Override\n    protected void onBeforeAll(WireMockRuntimeInfo wireMockRuntimeInfo) {\n      // Do things before any tests have run\n    }\n\n    @Override\n    protected void onBeforeEach(WireMockRuntimeInfo wireMockRuntimeInfo) {\n      // Do things before each test\n    }\n\n    @Override\n    protected void onAfterEach(WireMockRuntimeInfo wireMockRuntimeInfo) {\n      // Do things after each test\n    }\n\n    @Override\n    protected void onAfterAll(WireMockRuntimeInfo wireMockRuntimeInfo) {\n      // Do things after all tests have run\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Custom Sub-events to ServeEvents in Java\nDESCRIPTION: Illustrates how WireMock extensions (like RequestFilterV2, ResponseDefinitionTransformer, ResponseTransformer, ServeEventListener) can attach custom sub-events to the current `ServeEvent` during request processing. The `appendSubEvent` method takes an event type string and a Map or object containing relevant data, enabling extensions to log diagnostic or validation information accessible later via the API or listeners.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extending-wiremock.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nserveEvent.appendSubEvent(\n  \"JSON_PARSE_WARNING\",\n  Map.of(\"message\", \"Single quotes are not permitted\")\n);\n```\n\n----------------------------------------\n\nTITLE: Registering the subclassed Extension\nDESCRIPTION: This code shows how to register an instance of the subclassed `WireMockExtension` (MyMockApi) as a JUnit extension. It uses `WireMockExtension.extensionOptions()` to configure the extension, setting dynamic ports and enabling static DSL configuration.  This ensures all parameters from the builder are set as they would be with a standard `WireMockExtension` instance.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/junit-jupiter.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n  @RegisterExtension\n  static MyMockApi myMockApi =\n      new MyMockApi(\n          WireMockExtension.extensionOptions()\n              .options(wireMockConfig().dynamicPort().dynamicHttpsPort())\n              .configureStaticDsl(true));\n```\n\n----------------------------------------\n\nTITLE: Removing Serve Events by Criteria (Java API)\nDESCRIPTION: Removes multiple ServeEvent objects from the request journal that match the specified request pattern criteria using the Java API.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nremoveServeEvents(putRequestedFor(urlMatching(\"/api/.*\")\n    .withHeader(\"X-Trace-Id\", equalTo(\"123\"))));\n```\n\n----------------------------------------\n\nTITLE: Running WireMock Standalone JAR with Java Command\nDESCRIPTION: Shows how to start the WireMock server as a standalone process using the Java command-line tool by executing the JAR file. Requires the downloaded JAR file with the appropriate version substitution.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/standalone/java-jar.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ java -jar wiremock-standalone-{{ site.wiremock_version }}.jar\n```\n\n----------------------------------------\n\nTITLE: Stubbing gRPC Methods using JSON Matching and Responses\nDESCRIPTION: Java code example showing how to stub a gRPC method using JSON for request matching and response generation.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/grpc.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nmockGreetingService.stubFor(\n    method(\"greeting\")\n        .withRequestMessage(equalToJson(\"{ \\\"name\\\":  \\\"Tom\\\" }\"))\n        .willReturn(json(\"{ \"greeting\": \"Hi Tom from JSON\" }\")));\n```\n\n----------------------------------------\n\nTITLE: Rounding Mode in Number Formatting Handlebars\nDESCRIPTION: This snippet demonstrates the `roundingMode` parameter in the `numberFormat` helper, showing how to control rounding behavior. It takes a number, a rounding mode (e.g., 'down'), and other formatting options.  The output is the number rounded according to the specified rounding mode and other formatting parameters.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_66\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{{numberFormat 1.239 roundingMode='down' maximumFractionDigits=2}}}\n```\n\n----------------------------------------\n\nTITLE: Removing Serve Event by ID (Java API)\nDESCRIPTION: Removes a single ServeEvent from the request journal using its unique identifier (ID).\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/verifying.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nremoveServeEvent(id);\n```\n\n----------------------------------------\n\nTITLE: Converting Objects to JSON with toJson Helper\nDESCRIPTION: This snippet demonstrates converting an array to a JSON string using the `toJson` helper.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_34\n\nLANGUAGE: handlebars\nCODE:\n```\n{{toJson (array 1 2 3)}}\n```\n\n----------------------------------------\n\nTITLE: Implementing StubLifecycleListener in Java\nDESCRIPTION: This code snippet demonstrates how to implement the `StubLifecycleListener` interface in Java to listen for stub creation events.  It overrides the `afterStubCreated` method to log the name of the newly created stub. The `getName` method provides a name for the listener.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/listening-for-stub-changes.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class MyStubEventListener implements StubLifecycleListener {\n\n    @Override\n    public void afterStubCreated(StubMapping stub) {\n        log.debug(\"Stub named \" + stub.getName() + \" was created\");\n    }\n\n    @Override\n    public String getName() {\n        return \"my-listener\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Notifier for Logging in WireMock\nDESCRIPTION: Replaces default logging with a custom notifier implementation, such as console logging or SLF4J, for flexible log management.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/configuration.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\n// Use console notifier for logging\n.notifier(new ConsoleNotifier(true))\n```\n\n----------------------------------------\n\nTITLE: Enabling Response GZIP Compression in WireMock\nDESCRIPTION: Disables automatic response gzip compression, which can be useful for debugging or testing uncompressed responses.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/configuration.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\n.gzipDisabled(true)\n```\n\n----------------------------------------\n\nTITLE: Example XML document\nDESCRIPTION: A simple XML document used as example in the documentation.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_39\n\nLANGUAGE: xml\nCODE:\n```\n<outer>\n    <inner>Stuff</inner>\n</outer>\n```\n\n----------------------------------------\n\nTITLE: Implementing GlobalSettingsListener with ServeEventListener in Java\nDESCRIPTION: Example of a class that implements both ServeEventListener and GlobalSettingsListener interfaces to react to settings changes. The class captures a custom setting value when global settings are updated and uses it during request handling.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/extensibility/listening-for-settings-changes.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class MyConfigurableServeEventListener\n        implements ServeEventListener, GlobalSettingsListener {\n    \n    private volatile String mySetting = \"\";\n\n    @Override\n    public void afterGlobalSettingsUpdated(\n            GlobalSettings oldSettings,\n            GlobalSettings newSettings) {\n\n        mySetting = newSettings.getExtended().getString(\"my-setting\");\n    }\n\n    @Override\n    public void onEvent(\n            RequestPhase requestPhase,\n            ServeEvent serveEvent,\n            Parameters parameters) {\n        \n        log.debug(\"My setting is \" + mySetting);\n    }\n\n    @Override\n    public String getName() {\n        return \"my-listener\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON document\nDESCRIPTION: A simple JSON document used as example in the documentation.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/response-templating.md#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"outer\": {\n        \"inner\": \"Stuff\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Truncation and Offset Order in Date/Time Matching with JSON\nDESCRIPTION: Demonstrates how to configure request matching where truncation is applied last by setting 'applyTruncationLast' to true in JSON, changing the sequence of offset and truncation operations for date/time comparison.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/request-matching.md#_snippet_21\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"request\": {\n        \"url\": \"/resource\",\n        \"method\": \"GET\",\n        \"queryParameters\": {\n            \"date\": {\n                \"equalToDateTime\": \"now +1 months\",\n                \"truncateExpected\": \"last day of month\",\n                \"applyTruncationLast\": true\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WireMock Standalone Maven Dependency for Java 1.7\nDESCRIPTION: Maven dependency configuration to include WireMock standalone JAR version 2.27.2 for testing in Java 1.7 projects. This version is the last one that supports Java 1.7.\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/_docs/advanced/java7.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.tomakehurst</groupId>\n    <artifactId>wiremock-standalone</artifactId>\n    <version>2.27.2</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Checking local website for broken links (Bash)\nDESCRIPTION: Runs the `broken-link-checker` tool against the locally running website to identify broken internal links. The `--exclude-external` flag prevents checking external URLs, focusing only on links within the site itself. Requires the `broken-link-checker` tool to be installed (e.g., globally via npm).\nSOURCE: https://github.com/wiremock/wiremock.org/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nblc http://localhost:4000/ --exclude-external\n```"
  }
]