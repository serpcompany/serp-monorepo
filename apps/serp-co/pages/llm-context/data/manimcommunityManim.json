[
  {
    "owner": "manimcommunity",
    "repo": "manim",
    "content": "TITLE: Creating and Displaying Mobjects in Manim\nDESCRIPTION: Demonstrates how to create Circle objects and add/remove them from a scene. This snippet shows the basic lifecycle of displaying objects on screen using Scene.add() and Scene.remove() methods.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/building_blocks.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CreatingMobjects(Scene):\n    def construct(self):\n        circle = Circle()\n        self.add(circle)\n        self.wait(1)\n        self.remove(circle)\n        self.wait(1)\n```\n\n----------------------------------------\n\nTITLE: Animating Color Change and Movement in Manim\nDESCRIPTION: This snippet demonstrates how to use the animate method to change a square's color and position. It shows animating fill color change, shifting position, and rotation of a square mobject.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/building_blocks.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass AnimateExample(Scene):\n    def construct(self):\n        square = Square().set_fill(RED, opacity=1.0)\n        self.add(square)\n\n        # animate the change of color\n        self.play(square.animate.set_fill(WHITE))\n        self.wait(1)\n\n        # animate the change of position and the rotation at the same time\n        self.play(square.animate.shift(UP).rotate(PI / 3))\n        self.wait(1)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Manim Scene with a Circle Animation in Python\nDESCRIPTION: This snippet defines a Scene class that creates and animates a pink circle. It demonstrates basic Manim setup, object creation, and animation.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/quickstart.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom manim import *\n\nclass CreateCircle(Scene):\n    def construct(self):\n        circle = Circle()  # create a circle\n        circle.set_fill(PINK, opacity=0.5)  # set the color and transparency\n        self.play(Create(circle))  # show the circle on screen\n```\n\n----------------------------------------\n\nTITLE: Creating a Square to Circle Animation in Manim\nDESCRIPTION: This Python code demonstrates a basic Manim scene that transforms a square into a circle with animations. It shows core Manim functionality including shape creation, transformation effects, and scene construction.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom manim import *\n\n\nclass SquareToCircle(Scene):\n    def construct(self):\n        circle = Circle()\n        square = Square()\n        square.flip(RIGHT)\n        square.rotate(-3 * TAU / 8)\n        circle.set_fill(PINK, opacity=0.5)\n\n        self.play(Create(square))\n        self.play(Transform(square, circle))\n        self.play(FadeOut(square))\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Hello World Text Animation in Manim\nDESCRIPTION: Demonstrates how to create a simple text animation using the Text class to display 'Hello world' with a specified font size.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/using_text.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass HelloWorld(Scene):\n    def construct(self):\n        text = Text(\"Hello world\", font_size=144)\n        self.add(text)\n```\n\n----------------------------------------\n\nTITLE: Animated Square to Circle Transformation in Manim\nDESCRIPTION: Python class demonstrating progressive animation of a square transforming into a circle with rotation and color changes\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/quickstart.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass AnimatedSquareToCircle2(Scene):\n    def construct(self):\n        circle = Circle()  # create a circle\n        square = Square()  # create a square\n\n        self.play(Create(square))  # show the square on screen\n        self.play(square.animate.rotate(PI / 4))  # rotate the square\n        self.play(Transform(square, circle))  # transform the square into a circle\n        self.play(square.animate.set_fill(PINK, opacity=0.5))  # color the circle on screen\n```\n\n----------------------------------------\n\nTITLE: Creating Manim CE Logo with Basic Shapes in Python\nDESCRIPTION: This snippet demonstrates how to create the Manim Community Edition logo using basic geometric shapes. It combines a triangle, square, circle, and a stylized 'M' character with specific colors and positioning to form the complete logo.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ManimCELogo(Scene):\n    def construct(self):\n        self.camera.background_color = \"#ece6e2\"\n        logo_green = \"#87c2a5\"\n        logo_blue = \"#525893\"\n        logo_red = \"#e07a5f\"\n        logo_black = \"#343434\"\n        ds_m = MathTex(r\"\\mathbb{M}\", fill_color=logo_black).scale(7)\n        ds_m.shift(2.25 * LEFT + 1.5 * UP)\n        circle = Circle(color=logo_green, fill_opacity=1).shift(LEFT)\n        square = Square(color=logo_blue, fill_opacity=1).shift(UP)\n        triangle = Triangle(color=logo_red, fill_opacity=1).shift(RIGHT)\n        logo = VGroup(triangle, square, circle, ds_m)  # order matters\n        logo.move_to(ORIGIN)\n        self.add(logo)\n```\n\n----------------------------------------\n\nTITLE: Using Multiple ValueTrackers to Animate Connected Dots\nDESCRIPTION: This example demonstrates how to use multiple ValueTrackers simultaneously to control different objects. It creates two dots connected by a line, with each dot's position controlled by a separate ValueTracker. As the trackers' values change, the dots move and the line updates to maintain the connection.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass MovingDots(Scene):\n    def construct(self):\n        d1,d2=Dot(color=BLUE),Dot(color=GREEN)\n        dg=VGroup(d1,d2).arrange(RIGHT,buff=1)\n        l1=Line(d1.get_center(),d2.get_center()).set_color(RED)\n        x=ValueTracker(0)\n        y=ValueTracker(0)\n        d1.add_updater(lambda z: z.set_x(x.get_value()))\n        d2.add_updater(lambda z: z.set_y(y.get_value()))\n        l1.add_updater(lambda z: z.become(Line(d1.get_center(),d2.get_center())))\n        self.add(d1,d2,l1)\n        self.play(x.animate.set_value(5))\n        self.play(y.animate.set_value(4))\n        self.wait()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Graph Areas and Riemann Rectangles in Manim\nDESCRIPTION: This snippet demonstrates how to visualize areas between curves on a coordinate plane. It includes plotting functions, highlighting areas between curves, and showing Riemann rectangles for numerical integration.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass GraphAreaPlot(Scene):\n    def construct(self):\n        ax = Axes(\n            x_range=[0, 5],\n            y_range=[0, 6],\n            x_axis_config={\"numbers_to_include\": [2, 3]},\n            tips=False,\n        )\n\n        labels = ax.get_axis_labels()\n\n        curve_1 = ax.plot(lambda x: 4 * x - x ** 2, x_range=[0, 4], color=BLUE_C)\n        curve_2 = ax.plot(\n            lambda x: 0.8 * x ** 2 - 3 * x + 4,\n            x_range=[0, 4],\n            color=GREEN_B,\n        )\n\n        line_1 = ax.get_vertical_line(ax.input_to_graph_point(2, curve_1), color=YELLOW)\n        line_2 = ax.get_vertical_line(ax.i2gp(3, curve_1), color=YELLOW)\n\n        riemann_area = ax.get_riemann_rectangles(curve_1, x_range=[0.3, 0.6], dx=0.03, color=BLUE, fill_opacity=0.5)\n        area = ax.get_area(curve_2, [2, 3], bounded_graph=curve_1, color=GREY, opacity=0.5)\n\n        self.add(ax, labels, curve_1, curve_2, line_1, line_2, riemann_area, area)\n```\n\n----------------------------------------\n\nTITLE: Basic Manim Animation Example in Python\nDESCRIPTION: A toy example of a Manim scene that demonstrates basic animation concepts including creating shapes, transformations, updaters, and animations. This code creates an orange square that transforms into a blue circle, adds a dot that follows the circle, and finally fades everything out.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/deep_dive.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom manim import *\n\nclass ToyExample(Scene):\n    def construct(self):\n        orange_square = Square(color=ORANGE, fill_opacity=0.5)\n        blue_circle = Circle(color=BLUE, fill_opacity=0.5)\n        self.add(orange_square)\n        self.play(ReplacementTransform(orange_square, blue_circle, run_time=3))\n        small_dot = Dot()\n        small_dot.add_updater(lambda mob: mob.next_to(blue_circle, DOWN))\n        self.play(Create(small_dot))\n        self.play(blue_circle.animate.shift(RIGHT))\n        self.wait()\n        self.play(FadeOut(blue_circle, small_dot))\n```\n\n----------------------------------------\n\nTITLE: Creating a Manim Scene with Voiceover\nDESCRIPTION: Example of creating a Manim scene with voiceover using the VoiceoverScene class and RecorderService. This script demonstrates how to add recorded voiceovers to animations of a circle being created and moved.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/add_voiceovers.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom manim import *\nfrom manim_voiceover import VoiceoverScene\nfrom manim_voiceover.services.recorder import RecorderService\n\n\n# Simply inherit from VoiceoverScene instead of Scene to get all the\n# voiceover functionality.\nclass RecorderExample(VoiceoverScene):\n    def construct(self):\n        # You can choose from a multitude of TTS services,\n        # or in this example, record your own voice:\n        self.set_speech_service(RecorderService())\n\n        circle = Circle()\n\n        # Surround animation sections with with-statements:\n        with self.voiceover(text=\"This circle is drawn as I speak.\") as tracker:\n            self.play(Create(circle), run_time=tracker.duration)\n            # The duration of the animation is received from the audio file\n            # and passed to the tracker automatically.\n\n        # This part will not start playing until the previous voiceover is finished.\n        with self.voiceover(text=\"Let's shift it to the left 2 units.\") as tracker:\n            self.play(circle.animate.shift(2 * LEFT), run_time=tracker.duration)\n```\n\n----------------------------------------\n\nTITLE: Transform vs ReplacementTransform Example\nDESCRIPTION: Demonstration of the differences between Transform and ReplacementTransform animations in Manim\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/quickstart.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass TwoTransforms(Scene):\n    def transform(self):\n        a = Circle()\n        b = Square()\n        c = Triangle()\n        self.play(Transform(a, b))\n        self.play(Transform(a, c))\n        self.play(FadeOut(a))\n\n    def replacement_transform(self):\n        a = Circle()\n        b = Square()\n        c = Triangle()\n        self.play(ReplacementTransform(a, b))\n        self.play(ReplacementTransform(b, c))\n        self.play(FadeOut(c))\n\n    def construct(self):\n        self.transform()\n        self.wait(0.5)  # wait for 0.5 seconds\n        self.replacement_transform()\n```\n\n----------------------------------------\n\nTITLE: Using .animate Syntax for Fluid Animations in Manim\nDESCRIPTION: This Python class demonstrates the use of .animate syntax to create fluid animations of method calls, such as rotating and changing the fill of a square.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/quickstart.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass AnimatedSquareToCircle(Scene):\n    def construct(self):\n        circle = Circle()  # create a circle\n        square = Square()  # create a square\n\n        self.play(Create(square))  # show the square on screen\n        self.play(square.animate.rotate(PI / 4))  # rotate the square\n        self.play(Transform(square, circle))  # transform the square into a circle\n        self.play(\n            square.animate.set_fill(PINK, opacity=0.5)\n```\n\n----------------------------------------\n\nTITLE: Creating a Heat Diagram Plot with Manim\nDESCRIPTION: This snippet demonstrates how to create a heat diagram using line graphs in Manim. It sets up axes with specific ranges and labels, then plots a line graph with given x and y values representing temperature changes.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass HeatDiagramPlot(Scene):\n    def construct(self):\n        ax = Axes(\n            x_range=[0, 40, 5],\n            y_range=[-8, 32, 5],\n            x_length=9,\n            y_length=6,\n            x_axis_config={\"numbers_to_include\": np.arange(0, 40, 5)},\n            y_axis_config={\"numbers_to_include\": np.arange(-5, 34, 5)},\n            tips=False,\n        )\n        labels = ax.get_axis_labels(\n            x_label=Tex(r\"$\\Delta Q$\"), y_label=Tex(r\"T[$^\\circ C$]\")\n        )\n\n        x_vals = [0, 8, 38, 39]\n        y_vals = [20, 0, 0, -5]\n        graph = ax.plot_line_graph(x_values=x_vals, y_values=y_vals)\n\n        self.add(ax, labels, graph)\n```\n\n----------------------------------------\n\nTITLE: Animating Rectangle on Hyperbola with Dynamic Tracking in Manim\nDESCRIPTION: This snippet shows how to create a rectangle that dynamically changes as a point moves along a hyperbola curve. It uses ValueTracker and always_redraw to update the rectangle's position and dimensions in real-time.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass PolygonOnAxes(Scene):\n    def get_rectangle_corners(self, bottom_left, top_right):\n        return [\n            (top_right[0], top_right[1]),\n            (bottom_left[0], top_right[1]),\n            (bottom_left[0], bottom_left[1]),\n            (top_right[0], bottom_left[1]),\n        ]\n\n    def construct(self):\n        ax = Axes(\n            x_range=[0, 10],\n            y_range=[0, 10],\n            x_length=6,\n            y_length=6,\n            axis_config={\"include_tip\": False},\n        )\n\n        t = ValueTracker(5)\n        k = 25\n\n        graph = ax.plot(\n            lambda x: k / x,\n            color=YELLOW_D,\n            x_range=[k / 10, 10.0, 0.01],\n            use_smoothing=False,\n        )\n\n        def get_rectangle():\n            polygon = Polygon(\n                *[\n                    ax.c2p(*i)\n                    for i in self.get_rectangle_corners(\n                        (0, 0), (t.get_value(), k / t.get_value())\n                    )\n                ]\n            )\n            polygon.stroke_width = 1\n            polygon.set_fill(BLUE, opacity=0.5)\n            polygon.set_stroke(YELLOW_B)\n            return polygon\n\n        polygon = always_redraw(get_rectangle)\n\n        dot = Dot()\n        dot.add_updater(lambda x: x.move_to(ax.c2p(t.get_value(), k / t.get_value())))\n        dot.set_z_index(10)\n\n        self.add(ax, graph, dot)\n        self.play(Create(polygon))\n        self.play(t.animate.set_value(10))\n        self.play(t.animate.set_value(k / 10))\n        self.play(t.animate.set_value(5))\n```\n\n----------------------------------------\n\nTITLE: Creating Point Tracing Animation in Manim\nDESCRIPTION: This snippet shows how to create a path tracer that follows a moving dot. It uses updater functions to continuously track and draw the path of a dot as it rotates and moves through the scene.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass PointWithTrace(Scene):\n    def construct(self):\n        path = VMobject()\n        dot = Dot()\n        path.set_points_as_corners([dot.get_center(), dot.get_center()])\n        def update_path(path):\n            previous_path = path.copy()\n            previous_path.add_points_as_corners([dot.get_center()])\n            path.become(previous_path)\n        path.add_updater(update_path)\n        self.add(path, dot)\n        self.play(Rotating(dot, radians=PI, about_point=RIGHT, run_time=2))\n        self.wait()\n        self.play(dot.animate.shift(UP))\n        self.play(dot.animate.shift(LEFT))\n        self.wait()\n```\n\n----------------------------------------\n\nTITLE: Different Rotation Methods in Manim\nDESCRIPTION: Demonstration of different rotation techniques using .animate and Rotate methods\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/quickstart.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass DifferentRotations(Scene):\n    def construct(self):\n        left_square = Square(color=BLUE, fill_opacity=0.7).shift(2 * LEFT)\n        right_square = Square(color=GREEN, fill_opacity=0.7).shift(2 * RIGHT)\n        self.play(\n            left_square.animate.rotate(PI), Rotate(right_square, angle=PI), run_time=2\n        )\n        self.wait()\n```\n\n----------------------------------------\n\nTITLE: Creating Camera Following Graph Animation in Manim\nDESCRIPTION: This snippet demonstrates how to make the camera follow a dot moving along a sine curve. It uses MovingCameraScene, updater functions, and MoveAlongPath to create a smooth camera tracking effect.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass FollowingGraphCamera(MovingCameraScene):\n    def construct(self):\n        self.camera.frame.save_state()\n\n        # create the axes and the curve\n        ax = Axes(x_range=[-1, 10], y_range=[-1, 10])\n        graph = ax.plot(lambda x: np.sin(x), color=BLUE, x_range=[0, 3 * PI])\n\n        # create dots based on the graph\n        moving_dot = Dot(ax.i2gp(graph.t_min, graph), color=ORANGE)\n        dot_1 = Dot(ax.i2gp(graph.t_min, graph))\n        dot_2 = Dot(ax.i2gp(graph.t_max, graph))\n\n        self.add(ax, graph, dot_1, dot_2, moving_dot)\n        self.play(self.camera.frame.animate.scale(0.5).move_to(moving_dot))\n\n        def update_curve(mob):\n            mob.move_to(moving_dot.get_center())\n\n        self.camera.frame.add_updater(update_curve)\n        self.play(MoveAlongPath(moving_dot, graph, rate_func=linear))\n        self.camera.frame.remove_updater(update_curve)\n\n        self.play(Restore(self.camera.frame))\n```\n\n----------------------------------------\n\nTITLE: Positioning Multiple Mobjects Using shift() Method\nDESCRIPTION: Shows how to create and position different geometric shapes on screen using the shift() method. The shapes are positioned relative to the origin using predefined direction constants.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/building_blocks.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Shapes(Scene):\n    def construct(self):\n        circle = Circle()\n        square = Square()\n        triangle = Triangle()\n\n        circle.shift(LEFT)\n        square.shift(UP)\n        triangle.shift(RIGHT)\n\n        self.add(circle, square, triangle)\n        self.wait(1)\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value of Function with Animation in Manim\nDESCRIPTION: This snippet demonstrates how to animate finding the minimum value of a function. It uses a value tracker to move a dot along the graph until it reaches the minimum point.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass ArgMinExample(Scene):\n   def construct(self):\n       ax = Axes(\n           x_range=[0, 10], y_range=[0, 100, 10], axis_config={\"include_tip\": False}\n       )\n       labels = ax.get_axis_labels(x_label=\"x\", y_label=\"f(x)\")\n\n       t = ValueTracker(0)\n\n       def func(x):\n           return 2 * (x - 5) ** 2\n       graph = ax.plot(func, color=MAROON)\n\n       initial_point = [ax.coords_to_point(t.get_value(), func(t.get_value()))]\n       dot = Dot(point=initial_point)\n\n       dot.add_updater(lambda x: x.move_to(ax.c2p(t.get_value(), func(t.get_value()))))\n       x_space = np.linspace(*ax.x_range[:2],200)\n       minimum_index = func(x_space).argmin()\n\n       self.add(ax, labels, graph, dot)\n       self.play(t.animate.set_value(x_space[minimum_index]))\n       self.wait()\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Sine Wave Animation in Python using Manim\nDESCRIPTION: Animation sequence that creates a sine wave by tracking a dot's circular motion. Uses updaters and always_redraw to maintain continuous animation of connecting lines and curve generation. The animation runs for 8.5 seconds before removing the circular motion updater.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nself.curve.add(Line(self.curve_start,self.curve_start))\ndef get_curve():\n    last_line = self.curve[-1]\n    x = self.curve_start[0] + self.t_offset * 4\n    y = dot.get_center()[1]\n    new_line = Line(last_line.get_end(),np.array([x,y,0]), color=YELLOW_D)\n    self.curve.add(new_line)\n\n    return self.curve\n\ndot.add_updater(go_around_circle)\n\norigin_to_circle_line = always_redraw(get_line_to_circle)\ndot_to_curve_line = always_redraw(get_line_to_curve)\nsine_curve_line = always_redraw(get_curve)\n\nself.add(dot)\nself.add(orbit, origin_to_circle_line, dot_to_curve_line, sine_curve_line)\nself.wait(8.5)\n\ndot.remove_updater(go_around_circle)\n```\n\n----------------------------------------\n\nTITLE: Creating Brace Annotations for Lines in Manim\nDESCRIPTION: This example shows how to create and add brace annotations to a line connecting two dots. It demonstrates both horizontal and vertical braces with corresponding text labels using get_text() and get_tex() methods.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass BraceAnnotation(Scene):\n    def construct(self):\n        dot = Dot([-2, -1, 0])\n        dot2 = Dot([2, 1, 0])\n        line = Line(dot.get_center(), dot2.get_center()).set_color(ORANGE)\n        b1 = Brace(line)\n        b1text = b1.get_text(\"Horizontal distance\")\n        b2 = Brace(line, direction=line.copy().rotate(PI / 2).get_unit_vector())\n        b2text = b2.get_tex(\"x-x_1\")\n        self.add(line, dot, dot2, b1, b2, b1text, b2text)\n```\n\n----------------------------------------\n\nTITLE: Fixed Frame 3D Scene Setup in Manim\nDESCRIPTION: Creates a 3D scene with fixed text in the frame while manipulating the camera orientation. Demonstrates the use of ThreeDScene and fixed frame mobjects.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass FixedInFrameMObjectTest(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        self.set_camera_orientation(phi=75 * DEGREES, theta=-45 * DEGREES)\n        text3d = Text(\"This is a 3D text\")\n        self.add_fixed_in_frame_mobjects(text3d)\n        text3d.to_corner(UL)\n        self.add(axes)\n        self.wait()\n```\n\n----------------------------------------\n\nTITLE: Implementing Zoomed Scene with Moving Focus in Manim\nDESCRIPTION: This snippet demonstrates how to create a zoomed-in view that follows a specific part of a scene. It uses ZoomedScene class to create a magnified display of a portion of the screen that can be moved around.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass MovingZoomedSceneAround(ZoomedScene):\n# contributed by TheoremofBeethoven, www.youtube.com/c/TheoremofBeethoven\n    def __init__(self, **kwargs):\n        ZoomedScene.__init__(\n            self,\n            zoom_factor=0.3,\n            zoomed_display_height=1,\n            zoomed_display_width=6,\n            image_frame_stroke_width=20,\n            zoomed_camera_config={\n                \"default_frame_stroke_width\": 3,\n                },\n            **kwargs\n        )\n\n    def construct(self):\n```\n\n----------------------------------------\n\nTITLE: Controlling Mobject Z-Order in Scene Rendering\nDESCRIPTION: Shows how the order of adding mobjects to a scene affects their visual layering. Objects added first appear behind objects added later, demonstrating how to control which shapes appear in front of others.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/building_blocks.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MobjectZOrder(Scene):\n    def construct(self):\n        circle = Circle().shift(LEFT)\n        square = Square().shift(UP)\n        triangle = Triangle().shift(RIGHT)\n\n        circle.set_stroke(color=GREEN, width=20)\n        square.set_fill(YELLOW, opacity=1.0)\n        triangle.set_fill(PINK, opacity=0.5)\n\n        self.add(triangle, square, circle)\n        self.wait(1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Rotation Animation with Updaters in Manim\nDESCRIPTION: This snippet demonstrates how to use updater functions to rotate a line continuously in both directions. It first rotates the line clockwise, then counterclockwise using add_updater and remove_updater methods.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass RotationUpdater(Scene):\n    def construct(self):\n        def updater_forth(mobj, dt):\n            mobj.rotate_about_origin(dt)\n        def updater_back(mobj, dt):\n            mobj.rotate_about_origin(-dt)\n        line_reference = Line(ORIGIN, LEFT).set_color(WHITE)\n        line_moving = Line(ORIGIN, LEFT).set_color(YELLOW)\n        line_moving.add_updater(updater_forth)\n        self.add(line_reference, line_moving)\n        self.wait(2)\n        line_moving.remove_updater(updater_forth)\n        line_moving.add_updater(updater_back)\n        self.wait(2)\n        line_moving.remove_updater(updater_back)\n        self.wait(0.5)\n```\n\n----------------------------------------\n\nTITLE: Using Scene Sections in Manim\nDESCRIPTION: Demonstrates the new scene sections API that allows dividing scenes into multiple parts, resulting in separate output videos when using the --save_sections flag. Sections can be named and typed for use with plugins.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.12.0-changelog.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass MyScene(Scene):\n    def construct(self):\n        # First section\n        self.next_section(\"intro\", type=\"normal\")\n        circle = Circle()\n        self.play(Create(circle))\n        \n        # Second section\n        self.next_section(\"transformation\", type=\"normal\")\n        self.play(circle.animate.scale(2))\n```\n\n----------------------------------------\n\nTITLE: Displaying Vector Arrows in a Number Plane\nDESCRIPTION: This code creates a vector representation in a number plane. It places a dot at the origin (0,0), draws an arrow to the point (2,2), and adds text labels at both positions to clarify the coordinates.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass VectorArrow(Scene):\n    def construct(self):\n        dot = Dot(ORIGIN)\n        arrow = Arrow(ORIGIN, [2, 2, 0], buff=0)\n        numberplane = NumberPlane()\n        origin_text = Text('(0, 0)').next_to(dot, DOWN)\n        tip_text = Text('(2, 2)').next_to(arrow.get_end(), RIGHT)\n        self.add(numberplane, dot, arrow, origin_text, tip_text)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Animation in Manim\nDESCRIPTION: This snippet demonstrates how to create a custom animation by extending the Animation class. It implements a Count animation that smoothly increments a DecimalNumber from a start value to an end value.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/building_blocks.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass Count(Animation):\n    def __init__(self, number: DecimalNumber, start: float, end: float, **kwargs) -> None:\n        # Pass number as the mobject of the animation\n        super().__init__(number,  **kwargs)\n        # Set start and end\n        self.start = start\n        self.end = end\n\n    def interpolate_mobject(self, alpha: float) -> None:\n        # Set value of DecimalNumber according to alpha\n        value = self.start + (alpha * (self.end - self.start))\n        self.mobject.set_value(value)\n\n\nclass CountingScene(Scene):\n    def construct(self):\n        # Create Decimal Number and add it to scene\n        number = DecimalNumber().set_color(WHITE).scale(5)\n        # Add an updater to keep the DecimalNumber centered as its value changes\n        number.add_updater(lambda number: number.move_to(ORIGIN))\n\n        self.add(number)\n\n        self.wait()\n\n        # Play the Count Animation to count from 0 to 100 in 4 seconds\n        self.play(Count(number, 0, 100), run_time=4, rate_func=linear)\n\n        self.wait()\n```\n\n----------------------------------------\n\nTITLE: Moving a Group of Objects to a Destination Point in Manim\nDESCRIPTION: This example shows how to move a group of dots to align with a specific destination point. The animation shifts the entire group so that a selected dot in the group (the red dot) aligns perfectly with the yellow destination dot.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass MovingGroupToDestination(Scene):\n    def construct(self):\n        group = VGroup(Dot(LEFT), Dot(ORIGIN), Dot(RIGHT, color=RED), Dot(2 * RIGHT)).scale(1.4)\n        dest = Dot([4, 3, 0], color=YELLOW)\n        self.add(group, dest)\n        self.play(group.animate.shift(dest.get_center() - group[2].get_center()))\n        self.wait(0.5)\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Frame Boxes Around Mathematical Expressions\nDESCRIPTION: This snippet demonstrates how to highlight different parts of a mathematical expression using animated surrounding rectangles. It creates a product rule formula and shows how to create and transform frame boxes to highlight specific terms of the equation.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass MovingFrameBox(Scene):\n    def construct(self):\n        text=MathTex(\n            \"\\\\frac{d}{dx}f(x)g(x)=\",\"f(x)\\\\frac{d}{dx}g(x)\",\"+\",\n            \"g(x)\\\\frac{d}{dx}f(x)\"\n        )\n        self.play(Write(text))\n        framebox1 = SurroundingRectangle(text[1], buff = .1)\n        framebox2 = SurroundingRectangle(text[3], buff = .1)\n        self.play(\n            Create(framebox1),\n        )\n        self.wait()\n        self.play(\n            ReplacementTransform(framebox1,framebox2),\n        )\n        self.wait()\n```\n\n----------------------------------------\n\nTITLE: Animating Points Moving Along Shapes in Manim\nDESCRIPTION: This example demonstrates multiple animation techniques: growing a circle from its center, transforming one dot into another, moving a dot along a circular path, and rotating a dot around a specified point. It shows how to sequence different animations for complex motion effects.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass PointMovingOnShapes(Scene):\n    def construct(self):\n        circle = Circle(radius=1, color=BLUE)\n        dot = Dot()\n        dot2 = dot.copy().shift(RIGHT)\n        self.add(dot)\n\n        line = Line([3, 0, 0], [5, 0, 0])\n        self.add(line)\n\n        self.play(GrowFromCenter(circle))\n        self.play(Transform(dot, dot2))\n        self.play(MoveAlongPath(dot, circle), run_time=2, rate_func=linear)\n        self.play(Rotating(dot, about_point=[2, 0, 0]), run_time=1.5)\n        self.wait()\n```\n\n----------------------------------------\n\nTITLE: Correctly Coloring LaTeX Substrings in Manim\nDESCRIPTION: This snippet shows the correct way to color specific parts of a LaTeX expression by isolating substrings. It demonstrates the use of substrings_to_isolate parameter in MathTex.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/using_text.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass CorrectLaTeXSubstringColoring(Scene):\n    def construct(self):\n        equation = MathTex(\n            r\"e^x = x^0 + x^1 + \\frac{1}{2} x^2 + \\frac{1}{6} x^3 + \\cdots + \\frac{1}{n!} x^n + \\cdots\",\n            substrings_to_isolate=\"x\"\n        )\n        equation.set_color_by_tex(\"x\", YELLOW)\n        self.add(equation)\n```\n\n----------------------------------------\n\nTITLE: Plotting Sine and Cosine Functions with Manim\nDESCRIPTION: This snippet demonstrates how to plot sine and cosine functions on a coordinate axis. It includes axis creation, plotting functions, labeling graphs, and adding vertical reference lines.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass SinAndCosFunctionPlot(Scene):\n    def construct(self):\n        axes = Axes(\n            x_range=[-10, 10.3, 1],\n            y_range=[-1.5, 1.5, 1],\n            x_length=10,\n            axis_config={\"color\": GREEN},\n            x_axis_config={\n                \"numbers_to_include\": np.arange(-10, 10.01, 2),\n                \"numbers_with_elongated_ticks\": np.arange(-10, 10.01, 2),\n            },\n            tips=False,\n        )\n        axes_labels = axes.get_axis_labels()\n        sin_graph = axes.plot(lambda x: np.sin(x), color=BLUE)\n        cos_graph = axes.plot(lambda x: np.cos(x), color=RED)\n\n        sin_label = axes.get_graph_label(\n            sin_graph, \"\\\\sin(x)\", x_val=-10, direction=UP / 2\n        )\n        cos_label = axes.get_graph_label(cos_graph, label=\"\\\\cos(x)\")\n\n        vert_line = axes.get_vertical_line(\n            axes.i2gp(TAU, cos_graph), color=YELLOW, line_func=Line\n        )\n        line_label = axes.get_graph_label(\n            cos_graph, r\"x=2\\pi\", x_val=TAU, direction=UR, color=WHITE\n        )\n\n        plot = VGroup(axes, sin_graph, cos_graph, vert_line)\n        labels = VGroup(axes_labels, sin_label, cos_label, line_label)\n        self.add(plot, labels)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Mobject Restructuring in Manim Scene\nDESCRIPTION: This example shows how the Scene's restructure_mobjects method works by demonstrating how removing a mobject from a group causes the group to be disbanded and its remaining children moved up in the hierarchy.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/deep_dive.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> from manim import Scene, Square, Circle, Group\n>>> test_scene = Scene()\n>>> mob1 = Square()\n>>> mob2 = Circle()\n>>> mob_group = Group(mob1, mob2)\n>>> test_scene.add(mob_group)\n<manim.scene.scene.Scene object at ...>\n>>> test_scene.mobjects\n[Group]\n>>> test_scene.restructure_mobjects(to_remove=[mob1])\n<manim.scene.scene.Scene object at ...>\n>>> test_scene.mobjects\n[Circle]\n```\n\n----------------------------------------\n\nTITLE: Complete Manim Example with Direct Rendering\nDESCRIPTION: A complete example showing both the scene definition and the direct rendering approach in a single Python file. This would be saved as toy_example.py and run with 'python toy_example.py' to generate the animation without using Manim's command-line interface.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/deep_dive.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom manim import *\n\nclass ToyExample(Scene):\n    def construct(self):\n        orange_square = Square(color=ORANGE, fill_opacity=0.5)\n        blue_circle = Circle(color=BLUE, fill_opacity=0.5)\n        self.add(orange_square)\n        self.play(ReplacementTransform(orange_square, blue_circle, run_time=3))\n        small_dot = Dot()\n        small_dot.add_updater(lambda mob: mob.next_to(blue_circle, DOWN))\n        self.play(Create(small_dot))\n        self.play(blue_circle.animate.shift(RIGHT))\n        self.wait()\n        self.play(FadeOut(blue_circle, small_dot))\n\nwith tempconfig({\"quality\": \"medium_quality\", \"preview\": True}):\n    scene = ToyExample()\n    scene.render()\n```\n\n----------------------------------------\n\nTITLE: Advanced Mobject Placement with move_to(), next_to(), and align_to()\nDESCRIPTION: Demonstrates various methods for positioning mobjects relative to each other and the screen. Shows how to place objects using absolute coordinates, relative positioning, and alignment with other objects.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/building_blocks.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MobjectPlacement(Scene):\n    def construct(self):\n        circle = Circle()\n        square = Square()\n        triangle = Triangle()\n\n        # place the circle two units left from the origin\n        circle.move_to(LEFT * 2)\n        # place the square to the left of the circle\n        square.next_to(circle, LEFT)\n        # align the left border of the triangle to the left border of the circle\n        triangle.align_to(circle, LEFT)\n\n        self.add(circle, square, triangle)\n        self.wait(1)\n```\n\n----------------------------------------\n\nTITLE: Colored Text Using MarkupText in Manim\nDESCRIPTION: Shows how to create text with different colors using MarkupText class and PangoMarkup formatting.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/using_text.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass SingleLineColor(Scene):\n    def construct(self):\n        text = MarkupText(\n            f'all in red <span fgcolor=\"{YELLOW}\">except this</span>', color=RED\n        )\n        self.add(text)\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic LaTeX in Manim\nDESCRIPTION: This snippet demonstrates how to render basic LaTeX commands in Manim using the Tex class. It shows the use of mathtt and looparrowright LaTeX commands.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/using_text.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass AMSLaTeX(Scene):\n    def construct(self):\n        tex = Tex(r'$\\mathtt{H} \\looparrowright$ \\LaTeX', font_size=144)\n        self.add(tex)\n```\n\n----------------------------------------\n\nTITLE: Creating and Animating Angle Measurements with Updaters\nDESCRIPTION: This example creates an animated angle that changes as one of its lines rotates. It uses ValueTracker to control the angle, and updaters to keep the angle measurement and its label in sync with the rotating line. The animation demonstrates different angle values and a color change effect.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass MovingAngle(Scene):\n    def construct(self):\n        rotation_center = LEFT\n\n        theta_tracker = ValueTracker(110)\n        line1 = Line(LEFT, RIGHT)\n        line_moving = Line(LEFT, RIGHT)\n        line_ref = line_moving.copy()\n        line_moving.rotate(\n            theta_tracker.get_value() * DEGREES, about_point=rotation_center\n        )\n        a = Angle(line1, line_moving, radius=0.5, other_angle=False)\n        tex = MathTex(r\"\\theta\").move_to(\n            Angle(\n                line1, line_moving, radius=0.5 + 3 * SMALL_BUFF, other_angle=False\n            ).point_from_proportion(0.5)\n        )\n\n        self.add(line1, line_moving, a, tex)\n        self.wait()\n\n        line_moving.add_updater(\n            lambda x: x.become(line_ref.copy()).rotate(\n                theta_tracker.get_value() * DEGREES, about_point=rotation_center\n            )\n        )\n\n        a.add_updater(\n            lambda x: x.become(Angle(line1, line_moving, radius=0.5, other_angle=False))\n        )\n        tex.add_updater(\n            lambda x: x.move_to(\n                Angle(\n                    line1, line_moving, radius=0.5 + 3 * SMALL_BUFF, other_angle=False\n                ).point_from_proportion(0.5)\n            )\n        )\n\n        self.play(theta_tracker.animate.set_value(40))\n        self.play(theta_tracker.animate.increment_value(140))\n        self.play(tex.animate.set_color(RED), run_time=0.5)\n        self.play(theta_tracker.animate.set_value(350))\n```\n\n----------------------------------------\n\nTITLE: Zooming Camera in ThreeDScene (Python)\nDESCRIPTION: Demonstrates how to zoom the camera in a ThreeDScene using the new zoom parameter of the move_camera method.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.10.0-changelog.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.move_camera(zoom=2)\n```\n\n----------------------------------------\n\nTITLE: Transforming a Square into a Circle in Manim\nDESCRIPTION: This Python class defines a Scene that animates a square transforming into a circle. It demonstrates object creation, rotation, and transformation animations.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/quickstart.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass SquareToCircle(Scene):\n    def construct(self):\n        circle = Circle()  # create a circle\n        circle.set_fill(PINK, opacity=0.5)  # set color and transparency\n\n        square = Square()  # create a square\n        square.rotate(PI / 4)  # rotate a certain amount\n\n        self.play(Create(square))  # animate the creation of the square\n        self.play(Transform(square, circle))  # interpolate the square into the circle\n        self.play(FadeOut(square))  # fade out animation\n```\n\n----------------------------------------\n\nTITLE: Animating Square Movement, Color, Scale and Rotation in Manim\nDESCRIPTION: This example shows how to animate basic transformations of a square using the animate syntax. It demonstrates shifting position, changing fill color, scaling size, and rotating the square through a sequence of animations.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass MovingAround(Scene):\n    def construct(self):\n        square = Square(color=BLUE, fill_opacity=1)\n\n        self.play(square.animate.shift(LEFT))\n        self.play(square.animate.set_fill(ORANGE))\n        self.play(square.animate.scale(0.3))\n        self.play(square.animate.rotate(0.4))\n```\n\n----------------------------------------\n\nTITLE: Initializing Camera and Display Animation in Manim\nDESCRIPTION: Sets up a zoomed camera display with scaling and movement animations. Creates a dot and image object, then manipulates camera frame positioning and zooming effects.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndot = Dot().shift(UL * 2)\nimage = ImageMobject(np.uint8([[0, 100, 30, 200],\n                                   [255, 0, 5, 33]]))\nimage.height = 7\nframe_text = Text(\"Frame\", color=PURPLE, font_size=67)\nzoomed_camera_text = Text(\"Zoomed camera\", color=RED, font_size=67)\n\nself.add(image, dot)\nzoomed_camera = self.zoomed_camera\nzoomed_display = self.zoomed_display\nframe = zoomed_camera.frame\nzoomed_display_frame = zoomed_display.display_frame\n\nframe.move_to(dot)\nframe.set_color(PURPLE)\nzoomed_display_frame.set_color(RED)\nzoomed_display.shift(DOWN)\n```\n\n----------------------------------------\n\nTITLE: Using Mobject Coordinates in Manim\nDESCRIPTION: This example illustrates how to access and use various coordinate points of a mobject, such as start, end, center, top, and bottom. It also demonstrates how to visualize these points using Dot mobjects.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/building_blocks.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass MobjectExample(Scene):\n    def construct(self):\n        p1 = [-1,-1, 0]\n        p2 = [ 1,-1, 0]\n        p3 = [ 1, 1, 0]\n        p4 = [-1, 1, 0]\n        a  = Line(p1,p2).append_points(Line(p2,p3).points).append_points(Line(p3,p4).points)\n        point_start  = a.get_start()\n        point_end    = a.get_end()\n        point_center = a.get_center()\n        self.add(Text(f\"a.get_start() = {np.round(point_start,2).tolist()}\", font_size=24).to_edge(UR).set_color(YELLOW))\n        self.add(Text(f\"a.get_end() = {np.round(point_end,2).tolist()}\", font_size=24).next_to(self.mobjects[-1],DOWN).set_color(RED))\n        self.add(Text(f\"a.get_center() = {np.round(point_center,2).tolist()}\", font_size=24).next_to(self.mobjects[-1],DOWN).set_color(BLUE))\n\n        self.add(Dot(a.get_start()).set_color(YELLOW).scale(2))\n        self.add(Dot(a.get_end()).set_color(RED).scale(2))\n        self.add(Dot(a.get_top()).set_color(GREEN_A).scale(2))\n        self.add(Dot(a.get_bottom()).set_color(GREEN_D).scale(2))\n        self.add(Dot(a.get_center()).set_color(BLUE).scale(2))\n        self.add(Dot(a.point_from_proportion(0.5)).set_color(ORANGE).scale(2))\n        self.add(*[Dot(x) for x in a.points])\n        self.add(a)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Boolean Operations with Shapes in Manim\nDESCRIPTION: This snippet shows how to perform boolean operations (intersection, union, exclusion, difference) between two ellipses. It creates visual examples of each operation with appropriate colors, labels, and positioning to illustrate the difference between these operations.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass BooleanOperations(Scene):\n    def construct(self):\n        ellipse1 = Ellipse(\n            width=4.0, height=5.0, fill_opacity=0.5, color=BLUE, stroke_width=10\n        ).move_to(LEFT)\n        ellipse2 = ellipse1.copy().set_color(color=RED).move_to(RIGHT)\n        bool_ops_text = MarkupText(\"<u>Boolean Operation</u>\").next_to(ellipse1, UP * 3)\n        ellipse_group = Group(bool_ops_text, ellipse1, ellipse2).move_to(LEFT * 3)\n        self.play(FadeIn(ellipse_group))\n\n        i = Intersection(ellipse1, ellipse2, color=GREEN, fill_opacity=0.5)\n        self.play(i.animate.scale(0.25).move_to(RIGHT * 5 + UP * 2.5))\n        intersection_text = Text(\"Intersection\", font_size=23).next_to(i, UP)\n        self.play(FadeIn(intersection_text))\n\n        u = Union(ellipse1, ellipse2, color=ORANGE, fill_opacity=0.5)\n        union_text = Text(\"Union\", font_size=23)\n        self.play(u.animate.scale(0.3).next_to(i, DOWN, buff=union_text.height * 3))\n        union_text.next_to(u, UP)\n        self.play(FadeIn(union_text))\n\n        e = Exclusion(ellipse1, ellipse2, color=YELLOW, fill_opacity=0.5)\n        exclusion_text = Text(\"Exclusion\", font_size=23)\n        self.play(e.animate.scale(0.3).next_to(u, DOWN, buff=exclusion_text.height * 3.5))\n        exclusion_text.next_to(e, UP)\n        self.play(FadeIn(exclusion_text))\n\n        d = Difference(ellipse1, ellipse2, color=PINK, fill_opacity=0.5)\n        difference_text = Text(\"Difference\", font_size=23)\n        self.play(d.animate.scale(0.3).next_to(u, LEFT, buff=difference_text.height * 3.5))\n        difference_text.next_to(d, UP)\n        self.play(FadeIn(difference_text))\n```\n\n----------------------------------------\n\nTITLE: Using LaTeX Math Fonts in Manim\nDESCRIPTION: This snippet demonstrates how to use different LaTeX math fonts in Manim using TexFontTemplates. It shows the usage of the french_cursive template.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/using_text.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass LaTeXMathFonts(Scene):\n    def construct(self):\n        tex = Tex(\n            r\"$x^2 + y^2 = z^2$\",\n            tex_template=TexFontTemplates.french_cursive,\n            font_size=144,\n        )\n        self.add(tex)\n```\n\n----------------------------------------\n\nTITLE: Visualizing VMobject Points and Handles in Manim\nDESCRIPTION: This code creates a demonstration of how points are processed in a VMobject by manually setting points for cubic Bézier curves. It visualizes the anchor points and handles of the resulting curves with colored dots and lines.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/deep_dive.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass VMobjectDemo(Scene):\n    def construct(self):\n        plane = NumberPlane()\n        my_vmobject = VMobject(color=GREEN)\n        my_vmobject.points = [\n            np.array([-2, -1, 0]),  # start of first curve\n            np.array([-3, 1, 0]),\n            np.array([0, 3, 0]),\n            np.array([1, 3, 0]),  # end of first curve\n            np.array([1, 3, 0]),  # start of second curve\n            np.array([0, 1, 0]),\n            np.array([4, 3, 0]),\n            np.array([4, -2, 0]),  # end of second curve\n        ]\n        handles = [\n            Dot(point, color=RED) for point in\n            [[-3, 1, 0], [0, 3, 0], [0, 1, 0], [4, 3, 0]]\n        ]\n        handle_lines = [\n            Line(\n                my_vmobject.points[ind],\n                my_vmobject.points[ind+1],\n                color=RED,\n                stroke_width=2\n            ) for ind in range(0, len(my_vmobject.points), 2)\n        ]\n        self.add(plane, *handles, *handle_lines, my_vmobject)\n```\n\n----------------------------------------\n\nTITLE: Creating Gradient Images from Arrays in Manim\nDESCRIPTION: This example demonstrates how to create a gradient image from a NumPy array. It generates a 256x256 grayscale gradient array that transitions from black to white horizontally, converts it to an ImageMobject, and adds a green surrounding rectangle.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass GradientImageFromArray(Scene):\n    def construct(self):\n        n = 256\n        imageArray = np.uint8(\n            [[i * 256 / n for i in range(0, n)] for _ in range(0, n)]\n        )\n        image = ImageMobject(imageArray).scale(2)\n        image.background_rectangle = SurroundingRectangle(image, color=GREEN)\n        self.add(image, image.background_rectangle)\n```\n\n----------------------------------------\n\nTITLE: Using LaTeX Template Library in Manim\nDESCRIPTION: This example shows how to use the TexTemplateLibrary in Manim, specifically demonstrating the ctex template for typesetting Chinese script alongside LaTeX.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/using_text.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass LaTeXTemplateLibrary(Scene):\n    def construct(self):\n        tex = Tex('Hello 你好 \\LaTeX', tex_template=TexTemplateLibrary.ctex, font_size=144)\n        self.add(tex)\n```\n\n----------------------------------------\n\nTITLE: Basic LaTeX Example in Manim\nDESCRIPTION: Shows how to render LaTeX content using the Tex class.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/using_text.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass HelloLaTeX(Scene):\n    def construct(self):\n        tex = Tex(r\"\\LaTeX\", font_size=144)\n        self.add(tex)\n```\n\n----------------------------------------\n\nTITLE: Rendering a Manim Scene Directly in Python\nDESCRIPTION: Code snippet demonstrating how to render a Manim scene directly in a Python script without using the command line interface. This approach uses the tempconfig context manager to set rendering options and then manually instantiates and renders the scene.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/deep_dive.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith tempconfig({\"quality\": \"medium_quality\", \"preview\": True}):\n    scene = ToyExample()\n    scene.render()\n```\n\n----------------------------------------\n\nTITLE: Creating VMobject from SVG Path String in Python\nDESCRIPTION: Example code showing how to create a mobject from an SVG path string using the svgelements library. This is part of the breaking change in SVGMobject implementation that replaced the old SVGPathMobject class with VMobjectFromSVGPath.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.17.0-changelog.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport svgelements as se\nmy_path_mobject = VMobjectFromSVGPath(se.Path(my_path_string))\n```\n\n----------------------------------------\n\nTITLE: 3D Light Source Positioning in Manim\nDESCRIPTION: Demonstrates how to position a light source in a 3D scene with a sphere surface. Creates a checkerboard-colored sphere and adjusts camera and light source positioning.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/examples.rst#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nclass ThreeDLightSourcePosition(ThreeDScene):\n    def construct(self):\n        axes = ThreeDAxes()\n        sphere = Surface(\n            lambda u, v: np.array([\n                1.5 * np.cos(u) * np.cos(v),\n                1.5 * np.cos(u) * np.sin(v),\n                1.5 * np.sin(u)\n            ]), v_range=[0, TAU], u_range=[-PI / 2, PI / 2],\n            checkerboard_colors=[RED_D, RED_E], resolution=(15, 32)\n        )\n        self.renderer.camera.light_source.move_to(3*IN)\n        self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES)\n        self.add(axes, sphere)\n```\n\n----------------------------------------\n\nTITLE: Customizing Manim Banner Animation\nDESCRIPTION: Creates a custom animation featuring the Manim banner with light theme. Includes configuration for media width, embedding settings, and custom background color. Uses medium quality rendering settings.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/example_scenes/manim_jupyter_example.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n%%manim -v WARNING --disable_caching -qm HelloManim\n\n# set the maximum width for video outputs to a predefined value\nconfig.media_width = \"20vw\"\n# embed video\nconfig.media_embed = True\n\nclass HelloManim(Scene):\n    def construct(self):\n        self.camera.background_color = \"#ece6e2\"\n        banner_large = ManimBanner(dark_theme=False).scale(0.7)\n        self.play(banner_large.create())\n        self.play(banner_large.expand())\n```\n\n----------------------------------------\n\nTITLE: Math LaTeX Comparison in Manim\nDESCRIPTION: Demonstrates the difference between MathTex and Tex classes for mathematical expressions.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/using_text.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass MathTeXDemo(Scene):\n    def construct(self):\n        rtarrow0 = MathTex(r\"\\xrightarrow{x^6y^8}\", font_size=96)\n        rtarrow1 = Tex(r\"$\\xrightarrow{x^6y^8}$\", font_size=96)\n\n        self.add(VGroup(rtarrow0, rtarrow1).arrange(DOWN))\n```\n\n----------------------------------------\n\nTITLE: Custom Font Text Example in Manim\nDESCRIPTION: Demonstrates how to use custom fonts with the Text class.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/using_text.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass FontsExample(Scene):\n    def construct(self):\n        ft = Text(\"Noto Sans\", font=\"Noto Sans\")\n        self.add(ft)\n```\n\n----------------------------------------\n\nTITLE: Styling Mobjects with set_stroke() and set_fill()\nDESCRIPTION: Demonstrates how to change the visual appearance of mobjects by modifying their stroke (border) and fill properties. Shows how to set colors and opacity levels for different geometric shapes.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/building_blocks.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MobjectStyling(Scene):\n    def construct(self):\n        circle = Circle().shift(LEFT)\n        square = Square().shift(UP)\n        triangle = Triangle().shift(RIGHT)\n\n        circle.set_stroke(color=GREEN, width=20)\n        square.set_fill(YELLOW, opacity=1.0)\n        triangle.set_fill(PINK, opacity=0.5)\n\n        self.add(circle, square, triangle)\n        self.wait(1)\n```\n\n----------------------------------------\n\nTITLE: Updated CoordinateSystem Range Syntax\nDESCRIPTION: Shows the new syntax for specifying coordinate ranges in Axes, ThreeDAxes, NumberPlane and NumberLine using lists instead of individual min/max parameters.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.6.0-changelog.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Old way\naxes = Axes(x_min=-5, x_max=5)\n\n# New way \naxes = Axes(x_range=[-5, 5, 1])  # [min, max, step]\n```\n\n----------------------------------------\n\nTITLE: Positioning Multiple Objects in Manim\nDESCRIPTION: This Python class demonstrates how to create and position multiple objects (a square and a circle) relative to each other using the next_to method.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/quickstart.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass SquareAndCircle(Scene):\n    def construct(self):\n        circle = Circle()  # create a circle\n        circle.set_fill(PINK, opacity=0.5)  # set the color and transparency\n\n        square = Square()  # create a square\n        square.set_fill(BLUE, opacity=0.5)  # set the color and transparency\n\n        square.next_to(circle, RIGHT, buff=0.5)  # set the position\n        self.play(Create(circle), Create(square))  # show the shapes on screen\n```\n\n----------------------------------------\n\nTITLE: Plotting Implicit Curves in CoordinateSystem (Python)\nDESCRIPTION: Implemented ImplicitFunction class and get_implicit_curve method in CoordinateSystem for plotting implicit curves defined by equations of the form f(x,y) = 0.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.11.0-changelog.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nImplicitFunction()\n```\n\nLANGUAGE: Python\nCODE:\n```\nCoordinateSystem.get_implicit_curve()\n```\n\n----------------------------------------\n\nTITLE: Advanced Mobject Transformation with Point Manipulation\nDESCRIPTION: This example demonstrates a more complex transformation between mobjects, including point manipulation to ensure smooth transitions. It shows how to use numpy's roll function to adjust point ordering for better transformation results.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/building_blocks.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass ExampleRotation(Scene):\n    def construct(self):\n        self.camera.background_color = WHITE\n        m1a = Square().set_color(RED).shift(LEFT)\n        m1b = Circle().set_color(RED).shift(LEFT)\n        m2a = Square().set_color(BLUE).shift(RIGHT)\n        m2b = Circle().set_color(BLUE).shift(RIGHT)\n\n        points = m2a.points\n        points = np.roll(points, int(len(points)/4), axis=0)\n        m2a.points = points\n\n        self.play(Transform(m1a,m1b),Transform(m2a,m2b), run_time=1)\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Objects in Manim\nDESCRIPTION: Demonstrates the creation of new 3D objects added in this release, including Cone, Cylinder, Line3D, Arrow3D, and Torus.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.4.0-changelog.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom manim import Cone, Cylinder, Line3D, Arrow3D, Torus\n\ncone = Cone()\ncylinder = Cylinder()\nline = Line3D()\narrow = Arrow3D()\ntorus = Torus()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Circle Animation\nDESCRIPTION: Defines a simple Manim scene that adds a circle to the animation. Uses Jupyter notebook magic command with warning-level verbosity and quick rendering settings.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/example_scenes/manim_jupyter_example.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n%%manim -v WARNING --disable_caching -ql -s Example1\n\nclass Example1(Scene):\n    def construct(self):\n        self.add(Circle())\n```\n\n----------------------------------------\n\nTITLE: Basic Animations with FadeIn, Rotate, and FadeOut\nDESCRIPTION: Demonstrates basic animation capabilities by fading in a square, rotating it 45 degrees, and then fading it out. This shows how to use the play() method to execute animations sequentially.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/building_blocks.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass SomeAnimations(Scene):\n    def construct(self):\n        square = Square()\n\n        # some animations display mobjects, ...\n        self.play(FadeIn(square))\n\n        # ... some move or rotate mobjects around...\n        self.play(Rotate(square, PI/4))\n\n        # some animations remove mobjects from the screen\n        self.play(FadeOut(square))\n\n        self.wait(1)\n```\n\n----------------------------------------\n\nTITLE: Sample Manim Animation Scene\nDESCRIPTION: Complete example of a Manim scene that transforms a square into a circle, including the configuration for profiling.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/performance.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom manim import *\n\n\nclass SquareToCircle(Scene):\n    def construct(self):\n        s = Square()\n        c = Circle()\n        self.add(s)\n        self.play(Transform(s, c))\n\n\nwith tempconfig({\"quality\": \"medium_quality\", \"disable_caching\": True}):\n    scene = SquareToCircle()\n    scene.render()\n```\n\n----------------------------------------\n\nTITLE: Initializing ReplacementTransform Animation in Manim\nDESCRIPTION: A simple example of creating a ReplacementTransform animation that transforms an orange square into a blue circle over 3 seconds. This is the starting point for the discussion about Manim's animation system.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/deep_dive.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nReplacementTransform(orange_square, blue_circle, run_time=3)\n```\n\n----------------------------------------\n\nTITLE: Configuration Options List in Python\nDESCRIPTION: Complete list of available configuration options in Manim, including display settings, file paths, rendering options and window parameters.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/configuration.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n['aspect_ratio', 'assets_dir', 'background_color', 'background_opacity', 'bottom', 'custom_folders', 'disable_caching', 'dry_run', 'ffmpeg_loglevel', 'flush_cache', 'frame_height', 'frame_rate', 'frame_size', 'frame_width', 'frame_x_radius', 'frame_y_radius', 'from_animation_number', `fullscreen`, 'images_dir', 'input_file', 'left_side', 'log_dir', 'log_to_file', 'max_files_cached', 'media_dir', 'media_width', 'movie_file_extension', 'notify_outdated_version', 'output_file', 'partial_movie_dir', 'pixel_height', 'pixel_width', 'plugins', 'preview', 'progress_bar', 'quality', 'right_side', 'save_as_gif', 'save_last_frame', 'save_pngs', 'scene_names', 'show_in_file_browser', 'sound', 'tex_dir', 'tex_template', 'tex_template_file', 'text_dir', 'top', 'transparent', 'upto_animation_number', 'use_opengl_renderer', 'verbosity', 'video_dir', 'window_position', 'window_monitor', 'window_size', 'write_all', 'write_to_movie', 'enable_wireframe', 'force_window']\n```\n\n----------------------------------------\n\nTITLE: Installing Manim via pip\nDESCRIPTION: Simple pip command to install the Manim library in an existing Python environment. This is the recommended installation method for most users.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install manim\n```\n\n----------------------------------------\n\nTITLE: Calculating Area in CoordinateSystem (Python)\nDESCRIPTION: Changed implementation of get_area() method in CoordinateSystem class to work without Riemann rectangles. The old behavior can be mimicked using get_riemann_rectangles() with a small dx value.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.11.0-changelog.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nCoordinateSystem.get_area()\n```\n\nLANGUAGE: Python\nCODE:\n```\nCoordinateSystem.get_riemann_rectangles(dx=small_value)\n```\n\n----------------------------------------\n\nTITLE: Controlling Animation Run Time in Manim\nDESCRIPTION: This example shows how to control the duration of an animation using the run_time parameter in the play method. It demonstrates shifting a square upwards over a duration of 3 seconds.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/building_blocks.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass RunTime(Scene):\n    def construct(self):\n        square = Square()\n        self.add(square)\n        self.play(square.animate.shift(UP), run_time=3)\n        self.wait(1)\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenGLImageMobject in Manim\nDESCRIPTION: Adds support for OpenGL image objects in Manim, allowing for better performance and integration with OpenGL rendering.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.15.2-changelog.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n* :pr:`2534`: Implement :class:`~.OpenGLImageMobject`\n```\n\n----------------------------------------\n\nTITLE: Implementing SpiralIn Animation in Python for Manim\nDESCRIPTION: Adds a new SpiralIn animation class and updates ManimBanner to use it. This improves the visual effects for creating animated banners.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.15.2-changelog.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n* :pr:`2404`: Add :class:`.SpiralIn` Animation\n   - Make :class:`.ManimBanner` to use :class:`.SpiralIn`.\n```\n\n----------------------------------------\n\nTITLE: Using the render Command with Manim\nDESCRIPTION: Shows the basic usage of the manim render command with its various options. This is the primary command for rendering scenes to output files.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/configuration.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmanim [OPTIONS] FILE [SCENES]\n```\n\n----------------------------------------\n\nTITLE: Installing Manim with Conda/Mamba\nDESCRIPTION: Commands to create a new conda environment and install Manim from conda-forge channel. This creates an isolated environment for Manim and installs all required dependencies.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/conda.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# if you want to use mamba, just replace conda below with mamba\nconda create -n my-manim-environment\nconda activate my-manim-environment\nconda install -c conda-forge manim\n```\n\n----------------------------------------\n\nTITLE: Updating point_from_proportion Method for Curve Length in Python\nDESCRIPTION: Updates the point_from_proportion method in VMobject to account for the length of curves, improving accuracy in point calculations.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.6.0-changelog.rst#2025-04-22_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, description based on changelog entry\n```\n\n----------------------------------------\n\nTITLE: Coloring LaTeX Substrings in Manim\nDESCRIPTION: This example demonstrates how to color specific substrings in a LaTeX expression using the set_color_by_tex method. It shows coloring a specific symbol in a multi-part TeX object.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/using_text.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass LaTeXSubstrings(Scene):\n    def construct(self):\n        tex = Tex('Hello', r'$\\bigstar$', r'\\LaTeX', font_size=144)\n        tex.set_color_by_tex('igsta', RED)\n        self.add(tex)\n```\n\n----------------------------------------\n\nTITLE: Documenting a Function with NumPy Format in Python\nDESCRIPTION: Shows how to document a function using the NumPy format, including Parameters, Returns, and Examples sections. It demonstrates proper type hinting and parameter description.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/docstrings.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef my_function(\n    thing: int,\n    other: np.ndarray,\n    name: str,\n    *,\n    d: \"SomeClassFromFarAway\",\n    test: Optional[int] = 45\n) -> \"EpicClassInThisFile\":  # typings are optional for now\n    \"\"\"My cool function. Builds and modifies an :class:`EpicClassInThisFile` instance with the given\n        parameters.\n\n    Parameters\n    ----------\n    thing\n        Specifies the index of life.\n    other\n        Specifies something cool.\n    name\n        Specifies my name.\n    d\n        Sets thing D to this value.\n    test\n        Defines the number of times things should be tested. \\\n    Defaults to 45, because that is almost the meaning of life.\n\n    Returns\n    -------\n    :class:`EpicClassInThisFile`\n        The generated EpicClass with the specified attributes and modifications.\n\n    Examples\n    --------\n    Normal usage::\n\n        my_function(5, np.array([1, 2, 3]), \"Chelovek\", d=SomeClassFromFarAway(cool=True), test=5)\n    \"\"\"\n    # code...\n    pass\n```\n\n----------------------------------------\n\nTITLE: Aligning LaTeX Formulae in Manim\nDESCRIPTION: This snippet demonstrates how to align multi-line LaTeX formulae in Manim using the MathTex class and the LaTeX align environment syntax.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/using_text.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass LaTeXAlignEnvironment(Scene):\n    def construct(self):\n        tex = MathTex(r'f(x) &= 3 + 2 + 1\\\\ &= 5 + 1 \\\\ &= 6', font_size=96)\n        self.add(tex)\n```\n\n----------------------------------------\n\nTITLE: Transforming Mobjects in Manim\nDESCRIPTION: This snippet shows how to transform one mobject into another using the Transform animation. It demonstrates transforming a square into a rectangle with rotation.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/building_blocks.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass ExampleTransform(Scene):\n    def construct(self):\n        self.camera.background_color = WHITE\n        m1 = Square().set_color(RED)\n        m2 = Rectangle().set_color(RED).rotate(0.2)\n        self.play(Transform(m1,m2))\n```\n\n----------------------------------------\n\nTITLE: Converting CONFIG Dictionary Pattern to Class Attributes\nDESCRIPTION: Demonstrates how to convert the old-style CONFIG dictionary pattern to the new style where attributes are set directly on the class. This example shows a simple Scene with two attributes.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/faq/general.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass OldStyle(Scene):\n    CONFIG = {\"a\": 1, \"b\": 2}\n```\n\nLANGUAGE: python\nCODE:\n```\nclass NewStyle(Scene):\n    a = 1\n    b = 2\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Manim Animation in Jupyter\nDESCRIPTION: Example using the Jupyter cell magic %%manim to create a simple animation that transforms a square into a circle. The flags specify medium quality (-qm) and WARNING verbosity level.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/jupyter.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n%%manim -qm -v WARNING SquareToCircle\n\nclass SquareToCircle(Scene):\n   def construct(self):\n      square = Square()\n      circle = Circle()\n      circle.set_fill(PINK, opacity=0.5)\n      self.play(Create(square))\n      self.play(Transform(square, circle))\n      self.wait()\n```\n\n----------------------------------------\n\nTITLE: Using Index Labels for Debugging in Manim\nDESCRIPTION: This example shows how to use the index_labels function to debug complex MathTex objects. It demonstrates labeling and coloring specific parts of a mathematical expression.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/using_text.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass IndexLabelsMathTex(Scene):\n    def construct(self):\n        text = MathTex(r\"\\binom{2n}{n+2}\", font_size=96)\n\n        # index the first (and only) term of the MathTex mob\n        self.add(index_labels(text[0]))\n\n        text[0][1:3].set_color(YELLOW)\n        text[0][3:6].set_color(RED)\n        self.add(text)\n```\n\n----------------------------------------\n\nTITLE: Documenting a Class with NumPy Format in Python\nDESCRIPTION: Illustrates how to document a class using the NumPy format, including Parameters and Attributes sections. It shows how to document __init__ parameters in the class docstring.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/docstrings.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyClass:\n    \"\"\"My cool class. Long or short (whatever is more appropriate) description here.\n\n    Parameters\n    ----------\n    name\n        The class's name.\n    id\n        The class's id.\n    mobj\n        The mobject linked to this instance. Defaults to `Mobject()` \\\n(is set to that if `None` is specified).\n\n    Attributes\n    ----------\n    name\n        The user's name.\n    id\n        The user's id.\n    singleton\n        Something.\n    mobj\n        The mobject linked to this instance.\n    \"\"\"\n\n    def __init__(name: str, id: int, singleton: MyClass, mobj: Mobject = None): ...\n```\n\n----------------------------------------\n\nTITLE: New Animation Syntax Using .animate Property\nDESCRIPTION: Demonstrates the transition from old-style animation method calls to the new .animate property syntax for creating animations in Manim.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.2.0-changelog.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nself.play(my_square.shift, LEFT)\n```\n\nLANGUAGE: python\nCODE:\n```\nself.play(my_square.animate.shift(LEFT))\n```\n\n----------------------------------------\n\nTITLE: Transform Cycle Animation in Manim\nDESCRIPTION: Example showing how to cycle through multiple transformations using a loop\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/quickstart.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass TransformCycle(Scene):\n    def construct(self):\n        a = Circle()\n        t1 = Square()\n        t2 = Triangle()\n        self.add(a)\n        self.wait()\n        for t in [t1,t2]:\n            self.play(Transform(a,t))\n```\n\n----------------------------------------\n\nTITLE: Running Manim with Docker in one-off container\nDESCRIPTION: Command to run a Manim scene in a one-time Docker container. This mounts your local directory to the container and renders the CircleToSquare scene with medium quality.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/docker.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it -v \"/full/path/to/your/directory:/manim\" manimcommunity/manim manim -qm test_scenes.py CircleToSquare\n```\n\n----------------------------------------\n\nTITLE: Text Slant Styles in Manim\nDESCRIPTION: Shows how to apply italic slant style to text.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/using_text.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass SlantsExample(Scene):\n    def construct(self):\n        a = Text(\"Italic\", slant=ITALIC)\n        self.add(a)\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Scene Class in Manim\nDESCRIPTION: The standard pattern for creating a Scene class in Manim, where animations are defined within the construct method. If construct is misspelled, Manim will only render a black frame.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/faq/general.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyAwesomeScene(Scene):\n    def construct(self):\n        ...\n        # your animation code\n```\n\n----------------------------------------\n\nTITLE: Using Point2DLike and Point3DLike Type Hints in Python\nDESCRIPTION: Examples of functions that use Point2DLike and Point3DLike type hints to handle 2D and 3D coordinates. Demonstrates type hinting for parameters that accept coordinate-like objects and returning specific coordinate types.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/types.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef print_point2D(coord: Point2DLike) -> None:\n    x, y = coord\n    print(f\"Point at {x=},{y=}\")\n\n\ndef print_point3D(coord: Point3DLike) -> None:\n    x, y, z = coord\n    print(f\"Point at {x=},{y=},{z=}\")\n\n\ndef print_point_array(coords: Point2DLike_Array | Point3DLike_Array) -> None:\n    for coord in coords:\n        if len(coord) == 2:\n            # it's a Point2DLike\n            print_point2D(coord)\n        else:\n            # it's a Point3DLike\n            print_point3D(coord)\n\ndef shift_point_up(coord: Point3DLike) -> Point3D:\n    result = np.asarray(coord)\n    result += UP\n    print(f\"New point: {result}\")\n    return result\n```\n\n----------------------------------------\n\nTITLE: Using vector_field Module Example\nDESCRIPTION: Demonstrates the renamed and restructured vector field functionality where VectorField becomes ArrowVectorField and a new VectorField superclass is introduced.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.6.0-changelog.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom manim import *\n\n# Old way (pre v0.6.0)\n# vector_field = VectorField(...)\n\n# New way\nvector_field = ArrowVectorField(...)\nstream_lines = StreamLines(...)\n```\n\n----------------------------------------\n\nTITLE: Creating Angles from Three Points in Manim\nDESCRIPTION: Introduces a new method Angle.from_three_points() to create angle objects more easily in Manim animations using line coordinates.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.15.2-changelog.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n* :pr:`2684`: Created a more accessible way to create Angles with line.py angle function - :meth:`.Angle.from_three_points`\n```\n\n----------------------------------------\n\nTITLE: Installing Manim with Pixi\nDESCRIPTION: Commands to initialize a new pixi project and add Manim as a dependency. Pixi is an alternative package manager that works with conda packages.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/conda.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npixi init\npixi add manim\n```\n\n----------------------------------------\n\nTITLE: Initializing Rectangle from Parent Class in Manim\nDESCRIPTION: This code snippet shows how Rectangle initialization works by calling the parent class Polygon with arguments representing the corners of the rectangle, then stretching it to fit the desired width and height.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/deep_dive.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsuper().__init__(UR, UL, DL, DR, color=color, **kwargs)\nself.stretch_to_fit_width(width)\nself.stretch_to_fit_height(height)\n```\n\n----------------------------------------\n\nTITLE: Configuring Manim with ManimConfig Class\nDESCRIPTION: Shows how to directly configure Manim through the global config object using both attribute syntax and dict-like syntax.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/configuration.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from manim import *\n>>> config.background_color = WHITE\n>>> config[\"background_color\"] = WHITE\n```\n\n----------------------------------------\n\nTITLE: Initializing Scene Renderer in Python\nDESCRIPTION: This code shows how a Scene object initializes its renderer. The renderer is responsible for setting up the SceneFileWriter and handling the actual rendering process.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/deep_dive.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nself.renderer.init_scene(self)\n```\n\n----------------------------------------\n\nTITLE: Using Variable class for dynamic text in Manim\nDESCRIPTION: Shows how to use the Variable class to display text that continuously updates to reflect the value of a Python variable in Manim.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.1.0-changelog.rst#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom manim import Variable\n\nvar = Variable(5, \"x\")\nself.play(var.tracker.animate.set_value(10))\n```\n\n----------------------------------------\n\nTITLE: Showing Screen Resolution in Manim\nDESCRIPTION: A Manim scene that visualizes the current screen resolution configuration with a reference frame and text labels.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/configuration.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass ShowScreenResolution(Scene):\n    def construct(self):\n        pixel_height = config[\"pixel_height\"]  #  1080 is default\n        pixel_width = config[\"pixel_width\"]  # 1920 is default\n        frame_width = config[\"frame_width\"]\n        frame_height = config[\"frame_height\"]\n        self.add(Dot())\n        d1 = Line(frame_width * LEFT / 2, frame_width * RIGHT / 2).to_edge(DOWN)\n        self.add(d1)\n        self.add(Text(str(pixel_width)).next_to(d1, UP))\n        d2 = Line(frame_height * UP / 2, frame_height * DOWN / 2).to_edge(LEFT)\n        self.add(d2)\n        self.add(Text(str(pixel_height)).next_to(d2, RIGHT))\n```\n\n----------------------------------------\n\nTITLE: Styling LaTeX Text in Manim\nDESCRIPTION: This example shows how to apply styling attributes to LaTeX text in Manim, similar to the Text class. It demonstrates changing the color of the TeX mobject.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/using_text.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass LaTeXAttributes(Scene):\n    def construct(self):\n        tex = Tex(r'Hello \\LaTeX', color=BLUE, font_size=144)\n        self.add(tex)\n```\n\n----------------------------------------\n\nTITLE: Converting Between Cartesian and Spherical Coordinates (Python)\nDESCRIPTION: Changed parameter names in cartesian_to_spherical and spherical_to_cartesian functions to align with mathematical conventions. Phi and theta parameters were swapped.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.11.0-changelog.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ncartesian_to_spherical()\n```\n\nLANGUAGE: Python\nCODE:\n```\nspherical_to_cartesian()\n```\n\n----------------------------------------\n\nTITLE: Performing Boolean Operations on VMobjects (Python)\nDESCRIPTION: Added support for boolean operations (union, difference, intersection, exclusion) on VMobject instances.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.11.0-changelog.rst#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nUnion()\n```\n\nLANGUAGE: Python\nCODE:\n```\nDifference()\n```\n\nLANGUAGE: Python\nCODE:\n```\nIntersection()\n```\n\nLANGUAGE: Python\nCODE:\n```\nExclusion()\n```\n\n----------------------------------------\n\nTITLE: Rendering a Scene in Python\nDESCRIPTION: This snippet demonstrates how to trigger the rendering process for a Scene object. The render method executes the full render cycle, including setup, construct, and tear_down methods.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/deep_dive.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nscene.render()\n```\n\n----------------------------------------\n\nTITLE: Using VDict class in Manim\nDESCRIPTION: Introduces the VDict class, which is to a VGroup what a dict is to a list in Manim.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.1.0-changelog.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom manim import VDict\n\nmy_dict = VDict({\n    \"square\": Square(),\n    \"circle\": Circle()\n})\n```\n\n----------------------------------------\n\nTITLE: Converting CONFIG Dictionary to __init__ Parameters for VMobject\nDESCRIPTION: Shows how to convert an old-style VMobject with a CONFIG dictionary to the new style where parameters are defined in the __init__ method. This properly handles both inherited and custom attributes.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/faq/general.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Thing(VMobject):\n    CONFIG = {\n        \"stroke_color\": RED,\n        \"fill_opacity\": 0.7,\n        \"my_awesome_argument\": 42,\n    }\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Thing(VMobject):\n    def __init__(\n        self, stroke_color=RED, fill_opacity=0.7, my_awesome_argument=42, **kwargs\n    ):\n        self.my_awesome_argument = my_awesome_argument\n        super().__init__(stroke_color=stroke_color, fill_opacity=fill_opacity, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Creating a persistent named Manim Docker container\nDESCRIPTION: Command to create a named container for Manim that can be customized and reused. This gives you an interactive bash shell where you can install additional dependencies.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/docker.rst#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it --name my-manim-container -v \"/full/path/to/your/directory:/manim\" manimcommunity/manim bash\n```\n\n----------------------------------------\n\nTITLE: Skipping Section Animations in Python\nDESCRIPTION: Code demonstrating how to skip rendering animations in a specific section by using the skip_animations parameter.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/output_and_config.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef construct(self):\n    self.next_section(skip_animations=True)\n    # play some animations that shall be skipped...\n    self.next_section()\n    # play some animations that won't get skipped...\n```\n\n----------------------------------------\n\nTITLE: Creating VGroup with VMobject Iterables in Python\nDESCRIPTION: Shows how to initialize a VGroup by passing an iterable of VMobjects to the constructor. This is a new feature in Manim v0.19.0 that allows creating groups from generators or other iterable collections.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.19.0-changelog.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nmy_group = VGroup(Dot() for _ in range(10))\n```\n\n----------------------------------------\n\nTITLE: Scene.play Method Refactoring\nDESCRIPTION: Significant refactoring of Scene.play method including removal of decorators, addition of static wait attributes, and improved animation handling logic. Includes changes to renderer interaction and animation processing.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.5.0-changelog.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nscene.play_internal\nrenderer.freeze_current_frame\nscene.begin_animations\n```\n\n----------------------------------------\n\nTITLE: Creating Sections in a Manim Scene in Python\nDESCRIPTION: Example code showing how to create sections within a Manim scene using next_section() method, including optional section naming.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/output_and_config.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef construct(self):\n    # play the first animations...\n    # you don't need a section in the very beginning as it gets created automatically\n    self.next_section()\n    # play more animations...\n    self.next_section(\"this is an optional name that doesn't have to be unique\")\n    # play even more animations...\n    self.next_section(\"this is a section without any animations, it will be removed\")\n```\n\n----------------------------------------\n\nTITLE: Type Hinting NumPy Arrays in Python\nDESCRIPTION: Demonstrates proper type hinting for NumPy arrays using numpy.typing.NDArray.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/typings.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nif TYPE_CHECKING:\n    import numpy.typing as npt\n\n\ndef foo() -> npt.NDArray[float]:\n    return np.array([1, 0, 1])\n```\n\n----------------------------------------\n\nTITLE: Installing Manim Plugins using pip\nDESCRIPTION: Demonstrates how to install Manim plugins using the pip package manager. The asterisk allows for installing any plugin with the 'manim-' prefix.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/plugins.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install manim-*\n```\n\n----------------------------------------\n\nTITLE: Rewriting put_start_and_end_on for 3D Support in Python\nDESCRIPTION: Rewrites the put_start_and_end_on method to work correctly in 3D space, enhancing support for three-dimensional animations.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.6.0-changelog.rst#2025-04-22_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, description based on changelog entry\n```\n\n----------------------------------------\n\nTITLE: Maintaining Configuration Consistency in ManimConfig\nDESCRIPTION: Shows how ManimConfig maintains internal consistency by automatically updating related properties when one property is changed.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/configuration.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> config.frame_height\n8.0\n>>> config.frame_y_radius = 5.0\n>>> config.frame_height\n10.0\n```\n\n----------------------------------------\n\nTITLE: Type Hinting Callable Parameters in Python\nDESCRIPTION: Demonstrates how to properly type hint callable parameters with specific input and output types.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/typings.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrate_func: Callable[[float], float] = lambda t: smooth(1 - t)\n```\n\n----------------------------------------\n\nTITLE: Implementing Graphical Circle Test in Python\nDESCRIPTION: Example of creating a basic graphical unit test for the Circle VMobject using the frames_comparison decorator. The test animates a circle and compares the rendered frames with control data.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/testing.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom manim import *\nfrom manim.utils.testing.frames_comparison import frames_comparison\n\n__module_test__ = \"geometry\"\n\n@frames_comparison\ndef test_circle(scene):\n    circle = Circle()\n    scene.play(Animation(circle))\n```\n\n----------------------------------------\n\nTITLE: Using Self Type Hint in Python Classes\nDESCRIPTION: Shows how to use the Self type hint for methods that return self reference.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/typings.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nif TYPE_CHECKING:\n    from typing_extensions import Self\n\n\nclass CustomMobject:\n    def set_color(self, color: ManimColor) -> Self:\n        ...\n        return self\n```\n\n----------------------------------------\n\nTITLE: ThreeDScene Test Implementation in Python\nDESCRIPTION: Example demonstrating how to specify a base scene type (ThreeDScene) for testing 3D animations using the frames_comparison decorator.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/testing.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@frames_comparison(last_frame=False, base_scene=ThreeDScene)\ndef test_circle(scene):\n    circle = Circle()\n    scene.play(Animation(circle))\n```\n\n----------------------------------------\n\nTITLE: Creating Valid Sections with Wait Animation in Python\nDESCRIPTION: Fixed example showing how to create a valid section by including a wait animation to satisfy Manim's requirement for animations in each section.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/output_and_config.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef construct(self):\n    self.next_section()\n    self.add(Circle())\n    # now we wait 1sec and have an animation to satisfy the section\n    self.wait()\n    self.next_section()\n```\n\n----------------------------------------\n\nTITLE: Creating Tex and MathTex objects with custom template in Manim\nDESCRIPTION: Demonstrates how to create Tex and MathTex objects with a custom TexTemplate in Manim.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.1.0-changelog.rst#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom manim import Tex, MathTex, TexTemplate\n\ncustom_template = TexTemplate()\ncustom_template.add_to_preamble(r\"\\usepackage{amsmath}\")\n\ntext = Tex(\"Hello World\", template=custom_template)\nmath = MathTex(\"e^{i\\pi} + 1 = 0\", template=custom_template)\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Return Type Hints in Python\nDESCRIPTION: Demonstrates how to properly type hint function returns, specifically for functions that don't return a value (None return type).\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/typings.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef height(self, value) -> None:\n    self.scale_to_fit_height(value)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom LaTeX Packages in Manim\nDESCRIPTION: This snippet shows how to add custom LaTeX packages to the Manim TeX template. It demonstrates adding the mathrsfs package to use the mathscr script.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/using_text.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass AddPackageLatex(Scene):\n    def construct(self):\n        myTemplate = TexTemplate()\n        myTemplate.add_to_preamble(r\"\\usepackage{mathrsfs}\")\n        tex = Tex(\n            r\"$\\mathscr{H} \\rightarrow \\mathbb{H}$\",\n            tex_template=myTemplate,\n            font_size=144,\n        )\n        self.add(tex)\n```\n\n----------------------------------------\n\nTITLE: Sample User-wide Config File for Manim\nDESCRIPTION: Example of a user-wide configuration file that applies global settings to all Manim renders for a specific user.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/configuration.rst#2025-04-22_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n# user-wide\n[CLI]\noutput_file = myscene\nsave_as_gif = True\nbackground_color = WHITE\n```\n\n----------------------------------------\n\nTITLE: Video Comparison Test Implementation in Python\nDESCRIPTION: Example showing how to create a video test using the video_comparison decorator to validate video output against control data.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/testing.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@video_comparison(\n    \"SquareToCircleWithlFlag.json\", \"videos/simple_scenes/480p15/SquareToCircle.mp4\"\n)\ndef test_basic_scene_l_flag(tmp_path, manim_cfg_file, simple_scenes_path):\n    scene_name = \"SquareToCircle\"\n    command = [\n        \"python\",\n        \"-m\",\n        \"manim\",\n        simple_scenes_path,\n        scene_name,\n        \"-l\",\n        \"--media_dir\",\n        str(tmp_path),\n    ]\n    out, err, exit_code = capture(command)\n    assert exit_code == 0, err\n```\n\n----------------------------------------\n\nTITLE: Preventing Mobject Duplication in add_to_back Method in Python\nDESCRIPTION: Adds a check to prevent duplication of the same mobject when adding to submobjects via the add_to_back method.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.6.0-changelog.rst#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, description based on changelog entry\n```\n\n----------------------------------------\n\nTITLE: Importing Manim in Python\nDESCRIPTION: This code snippet shows how to import the Manim library in a Python file, which should resolve correctly if the installation was successful.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/uv.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport manim\n```\n\n----------------------------------------\n\nTITLE: Using OpenGL Renderer in Jupyter Notebook (Python)\nDESCRIPTION: Shows how to use the OpenGL renderer with the %%manim magic command in Jupyter notebooks.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.10.0-changelog.rst#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n%%manim -qm -v WARNING --renderer=opengl\nclass OpenGLScene(Scene):\n    def construct(self):\n        # Scene code here\n        pass\n```\n\n----------------------------------------\n\nTITLE: Setting Font Size for Tex and Text (Python)\nDESCRIPTION: Shows how to use the new font_size parameter for Tex and Text classes, replacing the previous scale parameter.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.10.0-changelog.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nTex(\"Hello\", font_size=48)\nText(\"World\", font_size=36)\n```\n\n----------------------------------------\n\nTITLE: Rendering a Manim Scene from Command Line\nDESCRIPTION: This bash command renders the CreateCircle scene defined in main.py. The -pql flags set quality and preview options.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/quickstart.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmanim -pql main.py CreateCircle\n```\n\n----------------------------------------\n\nTITLE: Verifying Manim Installation\nDESCRIPTION: This command verifies that the local Python project is set up correctly and Manim is available by running the 'checkhealth' command.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/uv.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nuv run manim checkhealth\n```\n\n----------------------------------------\n\nTITLE: Using Vector3D Type Hints for Direction Parameters in Python\nDESCRIPTION: Demonstrates how to type hint a function that uses vectors to represent direction rather than position. Includes a generic type parameter for the Mobject to preserve its specific type through the function.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/types.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nM = TypeVar(\"M\", bound=Mobject)  # allow any mobject\ndef shift_mobject(mob: M, direction: Vector3D, scale_factor: float = 1) -> M:\n    return mob.shift(direction * scale_factor)\n```\n\n----------------------------------------\n\nTITLE: Installing Manim with a Specific Python Version\nDESCRIPTION: These commands demonstrate how to initialize a Python project with a specific Python version (3.12 in this example) and install Manim using uv.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/uv.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nuv init --python 3.12 manimations\ncd manimations\nuv add manim\n```\n\n----------------------------------------\n\nTITLE: Customizing Animation Output with Multiple Parameters\nDESCRIPTION: Advanced example showing how to customize the output file name, render only specific animations, change background color, and save as GIF instead of MP4.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/configuration.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmanim -o myscene --format=gif -n 0,10 -c WHITE <file.py> SceneName\n```\n\n----------------------------------------\n\nTITLE: Creating Cross Without Mobject (Python)\nDESCRIPTION: Illustrates how to create a Cross object without requiring a mobject parameter.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.10.0-changelog.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nCross()\n```\n\n----------------------------------------\n\nTITLE: Formatting Docstrings in Python\nDESCRIPTION: Demonstrates the correct and incorrect ways to format docstrings in Python, emphasizing that the description should begin on the same line as the opening quotes.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/docstrings.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef do_this():\n    \"\"\"This is correct.\n    (...)\n    \"\"\"\n\n\ndef dont_do_this():\n    \"\"\"\n    This is incorrect.\n    (...)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Manim Plugins\nDESCRIPTION: Shows how to use the 'manim plugins' command to list available plugins. The '-l' or '--list' option is used to display the plugins.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/plugins.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmanim plugins -l\nPlugins:\n• manim_plugintemplate\n```\n\n----------------------------------------\n\nTITLE: Type Hinting Mobject Parameters in Python\nDESCRIPTION: Shows how to properly type hint Mobject parameters in class methods using forward references.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/typings.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef match_color(self, mobject: \"Mobject\"):\n    \"\"\"Match the color with the color of another :class:`~.Mobject`.\"\"\"\n    return self.set_color(mobject.get_color())\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Scene Object in Python\nDESCRIPTION: This snippet shows how a Scene object is typically created in Manim. The Scene.__init__ method is called, which sets up various attributes and initializes the renderer.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/deep_dive.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nscene = ToyExample()\n```\n\n----------------------------------------\n\nTITLE: Running Manim Scene with Temporary Configuration\nDESCRIPTION: Code snippet showing how to run a Manim scene directly as a script with custom configuration settings for profiling purposes.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/performance.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith tempconfig({\"quality\": \"medium_quality\", \"disable_caching\": True}):\n    scene = SceneName()\n    scene.render()\n```\n\n----------------------------------------\n\nTITLE: Using SurroundingRectangle with Keyword Arguments in Python\nDESCRIPTION: Demonstrates the updated syntax for SurroundingRectangle which now requires using keyword arguments for parameters other than the mobject. This is a breaking change in v0.19.0.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.19.0-changelog.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nSurroundingRectangle(some_mobject, RED, 0.3)  # raises error now\nSurroundingRectangle(some_mobject, color=RED, buff=0.3)  # correct usage\n```\n\n----------------------------------------\n\nTITLE: Accessing Camera Configuration from Global Config\nDESCRIPTION: Demonstrates how Camera class reads its default configuration from the global config object, maintaining consistency across the library.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/configuration.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> Camera({}).background_color\n<Color white>\n>>> config.background_color = RED  # 0xfc6255\n>>> Camera({}).background_color\n<Color #fc6255>\n```\n\n----------------------------------------\n\nTITLE: Animations Inheritance Diagram in RST\nDESCRIPTION: RestructuredText directive showing inheritance diagram for Manim animation modules, with Animation class as the top-level parent.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/reference.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. inheritance-diagram::\n   manim.animation.animation\n   manim.animation.changing\n   manim.animation.composition\n   manim.animation.creation\n   manim.animation.fading\n   manim.animation.growing\n   manim.animation.indication\n   manim.animation.movement\n   manim.animation.numbers\n   manim.animation.rotation\n   manim.animation.specialized\n   manim.animation.speedmodifier\n   manim.animation.transform\n   manim.animation.transform_matching_parts\n   manim.animation.updaters.mobject_update_utils\n   manim.animation.updaters.update\n   :parts: 1\n   :top-classes: manim.animation.animation.Animation\n```\n\n----------------------------------------\n\nTITLE: Coloring Parts of MarkupText\nDESCRIPTION: Demonstrates the updated syntax for coloring parts of MarkupText using Pango's <span foreground> instead of the deprecated <color> syntax.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.4.0-changelog.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom manim import MarkupText\n\ntext = MarkupText(\"Hello <span foreground=\\\"red\\\">World</span>\")\n```\n\n----------------------------------------\n\nTITLE: Installing Manim as a Global uv-managed Tool\nDESCRIPTION: This command installs Manim as a global uv-managed tool, making it available on the system path without activating a virtual environment.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/uv.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nuv tool install manim\n```\n\n----------------------------------------\n\nTITLE: Reading tex_template from config file in Python\nDESCRIPTION: Demonstrates how to read the 'tex_template' from a configuration file if not specified by the '--tex_template' command line argument.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.1.0-changelog.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nif not args.tex_template:\n    args.tex_template = config.get('tex_template', None)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Mobject Keywords (Python)\nDESCRIPTION: Implemented set_default method for Mobject class to allow changing default values of keyword arguments.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.11.0-changelog.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nMobject.set_default()\n```\n\n----------------------------------------\n\nTITLE: Manim Sections JSON Metadata Format\nDESCRIPTION: Example JSON file generated for sections, containing metadata about each section including name, duration, dimensions, and file references.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/output_and_config.rst#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"name\": \"create square\",\n        \"type\": \"default.normal\",\n        \"video\": \"ElaborateSceneWithSections_0000.mp4\",\n        \"codec_name\": \"h264\",\n        \"width\": 854,\n        \"height\": 480,\n        \"avg_frame_rate\": \"15/1\",\n        \"duration\": \"2.000000\",\n        \"nb_frames\": \"30\"\n    },\n    {\n        \"name\": \"transform to circle\",\n        \"type\": \"default.normal\",\n        \"video\": \"ElaborateSceneWithSections_0001.mp4\",\n        \"codec_name\": \"h264\",\n        \"width\": 854,\n        \"height\": 480,\n        \"avg_frame_rate\": \"15/1\",\n        \"duration\": \"2.000000\",\n        \"nb_frames\": \"30\"\n    },\n    {\n        \"name\": \"fade out\",\n        \"type\": \"default.normal\",\n        \"video\": \"ElaborateSceneWithSections_0002.mp4\",\n        \"codec_name\": \"h264\",\n        \"width\": 854,\n        \"height\": 480,\n        \"avg_frame_rate\": \"15/1\",\n        \"duration\": \"2.000000\",\n        \"nb_frames\": \"30\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Scenes Inheritance Diagram in RST\nDESCRIPTION: RestructuredText directive showing inheritance diagram for Manim scene modules, with Scene and RerunSceneHandler as top-level parent classes.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/reference.rst#2025-04-22_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. inheritance-diagram::\n   manim.scene.moving_camera_scene\n   manim.scene.scene\n   manim.scene.scene_file_writer\n   manim.scene.three_d_scene\n   manim.scene.vector_space_scene\n   manim.scene.zoomed_scene\n   :parts: 1\n   :top-classes: manim.scene.scene.Scene, manim.scene.scene.RerunSceneHandler\n```\n\n----------------------------------------\n\nTITLE: Removing CONFIG Dictionary Pattern in Python\nDESCRIPTION: Example showing the deprecated CONFIG dictionary pattern and the new direct constructor parameter passing approach in Manim.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.2.0-changelog.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SomeMobject(Thing):\n    CONFIG = {\n        \"my_awesome_property\": 42\n    }\n```\n\n----------------------------------------\n\nTITLE: Rendering the SquareAndCircle Scene in Manim\nDESCRIPTION: This bash command renders the SquareAndCircle scene from the scene.py file, using medium quality and preview settings.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/quickstart.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmanim -pql scene.py SquareAndCircle\n```\n\n----------------------------------------\n\nTITLE: Accessing frame dimensions in Manim config\nDESCRIPTION: Shows how to access frame dimensions that have been moved from 'constants.py' to the new config system.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.1.0-changelog.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nFRAME_HEIGHT = config[\"frame_width\"]\nTOP = config[\"frame_height\"] / 2 * UP\nBOTTOM = config[\"frame_height\"] / 2 * DOWN\nLEFT_SIDE = config[\"frame_width\"] / 2 * LEFT\nRIGHT_SIDE = config[\"frame_width\"] / 2 * RIGHT\nframe_rate = config[\"frame_rate\"]\n```\n\n----------------------------------------\n\nTITLE: Font Weight Examples in Manim\nDESCRIPTION: Demonstrates different font weights using manimpango Weight options.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/using_text.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass DifferentWeight(Scene):\n    def construct(self):\n        import manimpango\n\n        g = VGroup()\n        weight_list = dict(\n            sorted(\n                {\n                    weight: manimpango.Weight(weight).value\n                    for weight in manimpango.Weight\n                }.items(),\n                key=lambda x: x[1],\n            )\n        )\n        for weight in weight_list:\n            g += Text(weight.name, weight=weight.name, font=\"Open Sans\")\n        self.add(g.arrange(DOWN).scale(0.5))\n```\n\n----------------------------------------\n\nTITLE: Manim Media Directory Structure After Multiple Quality Renderings\nDESCRIPTION: The directory structure after rendering the same scene in both low and high quality, showing how Manim organizes different resolution outputs.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/output_and_config.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nproject/\n├─scene.py\n└─media\n  ├─videos\n  | └─scene\n  |   ├─480p15\n  |   | ├─SquareToCircle.mp4\n  |   | └─partial_movie_files\n  |   └─1080p60\n  |     ├─SquareToCircle.mp4\n  |     └─partial_movie_files\n  ├─text\n  └─Tex\n```\n\n----------------------------------------\n\nTITLE: Cameras Inheritance Diagram in RST\nDESCRIPTION: RestructuredText directive showing inheritance diagram for Manim camera modules, with Camera and Mobject classes as top-level parents.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/reference.rst#2025-04-22_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. inheritance-diagram::\n   manim.camera.camera\n   manim.camera.mapping_camera\n   manim.camera.moving_camera\n   manim.camera.multi_camera\n   manim.camera.three_d_camera\n   :parts: 1\n   :top-classes: manim.camera.camera.Camera, manim.mobject.mobject.Mobject\n```\n\n----------------------------------------\n\nTITLE: Using the Generic set() Method for Mobjects\nDESCRIPTION: Shows how to use the new generic set() method for Mobjects, which provides a compatibility layer between properties and get_*/set_* methods.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.4.0-changelog.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nmobject.set(color=RED, opacity=0.5)\n```\n\n----------------------------------------\n\nTITLE: Rendering a Scene with Medium Quality\nDESCRIPTION: Example of rendering a Scene class named SceneOne from file.py with medium quality settings.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/configuration.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmanim -qm file.py SceneOne\n```\n\n----------------------------------------\n\nTITLE: Complex Dictionary Type Specification (RestructuredText)\nDESCRIPTION: Example of documenting a dictionary parameter with complex value types that can be one of multiple classes.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/references.rst#2025-04-22_snippet_12\n\nLANGUAGE: restructuredtext\nCODE:\n```\nDict[:class:`str`, Union[:class:`int`, :class:`MyClass`]]\n```\n\n----------------------------------------\n\nTITLE: Installing Manim Dependencies in Google Colab\nDESCRIPTION: Shell commands to install necessary dependencies for Manim in a Google Colab environment. This installs system packages for Cairo, LaTeX, and other requirements, followed by the Manim Python package itself.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/jupyter.rst#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n!sudo apt update\n!sudo apt install libcairo2-dev \\\n    texlive texlive-latex-extra texlive-fonts-extra \\\n    texlive-latex-recommended texlive-science \\\n    tipa libpango1.0-dev\n!pip install manim\n!pip install IPython==8.21.0\n```\n\n----------------------------------------\n\nTITLE: Manim Directory Structure with Image Output\nDESCRIPTION: The directory structure when using the -s flag to save the last frame as an image, in addition to video output.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/output_and_config.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nproject/\n├─scene.py\n└─media\n  ├─images\n  | └─scene\n  |   ├─SquareToCircle.png\n  ├─videos\n  | └─scene\n  |   ├─480p15\n  |   | ├─SquareToCircle.mp4\n  |   | └─partial_movie_files\n  |   └─1080p60\n  |     ├─SquareToCircle.mp4\n  |     └─partial_movie_files\n  ├─text\n  └─Tex\n```\n\n----------------------------------------\n\nTITLE: Using ParsableManimColor Type Hint for Color Parameters in Python\nDESCRIPTION: Example showing how to use the ParsableManimColor type hint for functions that can accept any Manim color type. Demonstrates importing a type hint conditionally when TYPE_CHECKING is True.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/types.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif TYPE_CHECKING:\n    from manim.utils.color import ParsableManimColor\n\n# type hint stuff with ParsableManimColor\n```\n\n----------------------------------------\n\nTITLE: Running a Manim Scene from Command Line\nDESCRIPTION: This shell command demonstrates how to render and preview a Manim animation. The -p flag is for previewing the result, and -ql specifies lower quality for faster rendering.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmanim -p -ql example.py SquareToCircle\n```\n\n----------------------------------------\n\nTITLE: Using SurroundingRectangle with Corner Radius (Python)\nDESCRIPTION: Demonstrates passing the corner_radius keyword argument to SurroundingRectangle for rounded corners.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.10.0-changelog.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nSurroundingRectangle(mobject, corner_radius=0.1)\n```\n\n----------------------------------------\n\nTITLE: Referencing Methods in Other Classes (RestructuredText)\nDESCRIPTION: Syntax for referencing methods in other classes within the same file, showing proper formatting with class name included.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/references.rst#2025-04-22_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:meth:`MyClass.push`​\n```\n\n----------------------------------------\n\nTITLE: Running Manim with Basic Command-line Options in Bash\nDESCRIPTION: Command to execute Manim on a Python file with flags for playback (-p) and low quality (-ql) rendering of a specific scene.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/output_and_config.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmanim -pql scene.py SquareToCircle\n```\n\n----------------------------------------\n\nTITLE: Manim Directory Structure with Saved Sections\nDESCRIPTION: The directory structure created when using the --save_sections flag, showing how separate video files are organized for each section.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/output_and_config.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmedia\n├── images\n│   └── simple_scenes\n└── videos\n    └── simple_scenes\n        └── 480p15\n            ├── ElaborateSceneWithSections.mp4\n            ├── partial_movie_files\n            │   └── ElaborateSceneWithSections\n            │       ├── 2201830969_104169243_1331664314.mp4\n            │       ├── 2201830969_398514950_125983425.mp4\n            │       ├── 2201830969_398514950_3447021159.mp4\n            │       ├── 2201830969_398514950_4144009089.mp4\n            │       ├── 2201830969_4218360830_1789939690.mp4\n            │       ├── 3163782288_524160878_1793580042.mp4\n            │       └── partial_movie_file_list.txt\n            └── sections\n                ├── ElaborateSceneWithSections_0000.mp4\n                ├── ElaborateSceneWithSections_0001.mp4\n                ├── ElaborateSceneWithSections_0002.mp4\n                └── ElaborateSceneWithSections.json\n```\n\n----------------------------------------\n\nTITLE: Specifying Manim Plugin Entry Point in pyproject.toml\nDESCRIPTION: Demonstrates how to specify the entry point for a Manim plugin in the pyproject.toml file, which is necessary for Manim to discover the plugin.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/plugins.rst#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[project.entry-points.\"manim.plugins\"]\n\"name\" = \"object_reference\"\n```\n\n----------------------------------------\n\nTITLE: Sample Folder-wide Config File for Manim\nDESCRIPTION: Example of a folder-wide configuration file (manim.cfg) that sets output file name, saves as GIF, and uses a white background color.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/configuration.rst#2025-04-22_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[CLI]\n# my config file\noutput_file = myscene\nsave_as_gif = True\nbackground_color = WHITE\n```\n\n----------------------------------------\n\nTITLE: Importing Manim in Jupyter Notebook\nDESCRIPTION: Python import statement to bring in all Manim functionality into a Jupyter notebook. This should be run after installing Manim dependencies.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/jupyter.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom manim import *\n```\n\n----------------------------------------\n\nTITLE: Adding Important Admonition Block in reStructuredText\nDESCRIPTION: Code example demonstrating how to add an Important admonition block to highlight critical information that should be given special attention.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/admonitions.rst#2025-04-22_snippet_3\n\nLANGUAGE: rest\nCODE:\n```\n.. important::\n      Some important information which should be considered.\n```\n\n----------------------------------------\n\nTITLE: Rendering the SquareToCircle Scene in Manim\nDESCRIPTION: This bash command renders the SquareToCircle scene from the scene.py file, using medium quality and preview settings.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/quickstart.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmanim -pql scene.py SquareToCircle\n```\n\n----------------------------------------\n\nTITLE: Installing Specific IPython Version to Fix OpenGL Interactive Scene Error\nDESCRIPTION: Command to downgrade the IPython package to version 8.0.1 to resolve the sqlite3.ProgrammingError that can occur when using Scene.interactive_embed with the OpenGL renderer.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/faq/opengl.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install IPython==8.0.1\n```\n\n----------------------------------------\n\nTITLE: Type Hinting Fixed-Length Tuples in Python\nDESCRIPTION: Demonstrates how to type hint functions that return fixed-length tuples.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/typings.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef foo() -> tuple[float, float, float]:\n    return (0, 0, 0)\n```\n\n----------------------------------------\n\nTITLE: Running Manim with Section Saving in Bash\nDESCRIPTION: Command to render a Manim scene with the --save_sections flag to create individual video files for each section.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/output_and_config.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmanim --save_sections scene.py\n```\n\n----------------------------------------\n\nTITLE: Writing a Manim Example in RST\nDESCRIPTION: Demonstrates the structure of a Manim example in RST format, including the manim directive, scene name, and Python code for the scene.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/examples.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nFormulas\n========\n\n.. manim:: Formula1\n    :save_last_frame:\n\n    class Formula1(Scene):\n        def construct(self):\n            t = MathTex(r\"\\int_a^b f'(x) dx = f(b) - f(a)\")\n            self.add(t)\n            self.wait(1)\n```\n\n----------------------------------------\n\nTITLE: Adding Tip Admonition Block in reStructuredText\nDESCRIPTION: Code example showing how to add a Tip admonition which can be used to provide helpful tips or suggestions in the documentation.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/admonitions.rst#2025-04-22_snippet_2\n\nLANGUAGE: rest\nCODE:\n```\n.. tip::\n      A tip\n```\n\n----------------------------------------\n\nTITLE: Importing Manim Library\nDESCRIPTION: Imports all classes and functions from the Manim library using a wildcard import.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/example_scenes/manim_jupyter_example.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom manim import *\n```\n\n----------------------------------------\n\nTITLE: Example of Empty Manim Section in Python\nDESCRIPTION: Code demonstrating a section without animations, which will be removed and won't create an output video.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/output_and_config.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef construct(self):\n    self.next_section()\n    # this section doesn't have any animations and will be removed\n    # but no error will be thrown\n    # feel free to tend your flock of empty sections if you so desire\n    self.add(Circle())\n    self.next_section()\n```\n\n----------------------------------------\n\nTITLE: Creating a New Feature Branch\nDESCRIPTION: Command to create and switch to a new branch for developing a feature or fix.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/development.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit switch -c <new branch name> upstream/main\n```\n\n----------------------------------------\n\nTITLE: Running Manim with High Quality Rendering in Bash\nDESCRIPTION: Command to render a Manim scene in high quality with the -qh flag while enabling playback with -p.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/output_and_config.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmanim -pqh scene.py SquareToCircle\n```\n\n----------------------------------------\n\nTITLE: Setting Rectangle Corners Counterclockwise in Python\nDESCRIPTION: Sets the corners of a Rectangle class in a counterclockwise direction to improve the look of transformations between rectangles and other simple mobjects.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.6.0-changelog.rst#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, description based on changelog entry\n```\n\n----------------------------------------\n\nTITLE: Enabling Manim Plugins in Configuration File\nDESCRIPTION: Demonstrates how to enable Manim plugins in the manim.cfg configuration file. Shows examples for enabling a single plugin and multiple plugins.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/plugins.rst#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[CLI]\nplugins = manim_rubikscube\n```\n\nLANGUAGE: ini\nCODE:\n```\n[CLI]\nplugins = manim_rubikscube, manim_plugintemplate\n```\n\n----------------------------------------\n\nTITLE: Running Manim with Python Module Flag\nDESCRIPTION: Alternative command syntax for running Manim when PATH variables are not properly configured on Windows systems.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/faq/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m manim\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents in reStructuredText for Manim Tutorials\nDESCRIPTION: This snippet defines a table of contents structure for Manim tutorials documentation using reStructuredText directives. It creates a toctree with a caption and includes three main tutorial sections: quickstart, output and configuration, and building blocks.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :caption: Table of Contents\n   :maxdepth: 2\n\n   quickstart\n   output_and_config\n   building_blocks\n```\n\n----------------------------------------\n\nTITLE: Installing Manim Plugin Template\nDESCRIPTION: Shows the command to install the manim-plugintemplate, which serves as a tutorial for creating Manim plugins.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/plugins.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install manim-plugintemplate\n```\n\n----------------------------------------\n\nTITLE: Rendering Manim Animation via Command Line\nDESCRIPTION: Command to render an AnimatedSquareToCircle animation using Manim CLI\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/quickstart.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmanim -pql scene.py AnimatedSquareToCircle\n```\n\n----------------------------------------\n\nTITLE: Using TypeVar for Generic Type Hints in Python\nDESCRIPTION: Shows how to use TypeVar for methods that return instances of the same class type.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/typings.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nT = TypeVar(\"T\")\n\n\ndef copy(self: T) -> T: ...\n```\n\n----------------------------------------\n\nTITLE: Defining Camera Module References in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for the Manim camera modules using reStructuredText directives. It sets the current module context and creates an autosummary that will generate documentation links to various camera implementations.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/reference_index/cameras.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. currentmodule:: manim\n\n.. autosummary::\n   :toctree: ../reference\n\n   ~camera.camera\n   ~camera.mapping_camera\n   ~camera.moving_camera\n   ~camera.multi_camera\n   ~camera.three_d_camera\n```\n\n----------------------------------------\n\nTITLE: Pushing Local Branch to GitHub\nDESCRIPTION: Command to push your local branch to your fork on GitHub, setting up tracking.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/development.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit push -u origin <branch name>\n```\n\n----------------------------------------\n\nTITLE: Specifying List Return Types in Documentation (RestructuredText)\nDESCRIPTION: Example of documenting a function that returns a list containing elements that may be strings or None.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/references.rst#2025-04-22_snippet_16\n\nLANGUAGE: restructuredtext\nCODE:\n```\nList[Optional[:class:`str`]]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Fedora Linux\nDESCRIPTION: This command installs necessary dependencies for building ManimPango and pycairo on Fedora Linux using dnf package manager.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/uv.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install python3-devel pkg-config cairo-devel pango-devel\n```\n\n----------------------------------------\n\nTITLE: Rendering a Single Frame in High Quality\nDESCRIPTION: Command to render only the last frame of a scene in high quality, useful for thumbnails or stills.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/configuration.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmanim -sqh <file.py> SceneName\n```\n\n----------------------------------------\n\nTITLE: Filtering Duplicate Submobjects in Python\nDESCRIPTION: Filters out incoming duplicate submobjects if at least one instance of that submobject already exists in the list.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.6.0-changelog.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, description based on changelog entry\n```\n\n----------------------------------------\n\nTITLE: Mobjects Inheritance Diagram in RST\nDESCRIPTION: RestructuredText directive showing inheritance diagram for Manim mobject modules, with Mobject as the top-level parent class.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/reference.rst#2025-04-22_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. inheritance-diagram::\n   manim.mobject.frame\n   manim.mobject.geometry.arc\n   manim.mobject.geometry.boolean_ops\n   manim.mobject.geometry.line\n   manim.mobject.geometry.polygram\n   manim.mobject.geometry.shape_matchers\n   manim.mobject.geometry.tips\n   manim.mobject.graph\n   manim.mobject.graphing.coordinate_systems\n   manim.mobject.graphing.functions\n   manim.mobject.graphing.number_line\n   manim.mobject.graphing.probability\n   manim.mobject.graphing.scale\n   manim.mobject.logo\n   manim.mobject.matrix\n   manim.mobject.mobject\n   manim.mobject.table\n   manim.mobject.three_d.polyhedra\n   manim.mobject.three_d.three_d_utils\n   manim.mobject.three_d.three_dimensions\n   manim.mobject.svg.brace\n   manim.mobject.svg.svg_mobject\n   manim.mobject.text.code_mobject\n   manim.mobject.text.numbers\n   manim.mobject.text.tex_mobject\n   manim.mobject.text.text_mobject\n   manim.mobject.types.image_mobject\n   manim.mobject.types.point_cloud_mobject\n   manim.mobject.types.vectorized_mobject\n   manim.mobject.value_tracker\n   manim.mobject.vector_field\n   :parts: 1\n   :top-classes: manim.mobject.mobject.Mobject\n```\n\n----------------------------------------\n\nTITLE: Installing Python Using UV\nDESCRIPTION: Command to install the latest version of Python using the uv package manager.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/uv.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv python install\n```\n\n----------------------------------------\n\nTITLE: Specifying Fixed Tuple Return Types in Documentation (RestructuredText)\nDESCRIPTION: Example of documenting a function that returns a tuple with fixed element types, specifying the type of each position.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/references.rst#2025-04-22_snippet_17\n\nLANGUAGE: restructuredtext\nCODE:\n```\nTuple[:class:`str`, :class:`int`]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Arch Linux\nDESCRIPTION: This command installs necessary dependencies for building ManimPango and pycairo on Arch Linux using pacman package manager.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/uv.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo pacman -Syu base-devel cairo pango\n```\n\n----------------------------------------\n\nTITLE: New CLI Command Structure\nDESCRIPTION: Shows the updated command-line interface structure using Click instead of Argparse, with options appearing before arguments.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.6.0-changelog.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Old way\nmanim basic.py -p -ql\n\n# New way\nmanim -p -ql basic.py\n```\n\n----------------------------------------\n\nTITLE: Importing SVGPathMobject in Python\nDESCRIPTION: Shows the updated import for the renamed SVGPathMobject class, which replaces the deprecated VMobjectFromSVGPathstring.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.4.0-changelog.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom manim import SVGPathMobject\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation Structure for Manim Mobjects\nDESCRIPTION: ReStructuredText markup defining the documentation structure for Manim's Mobject modules. Uses Sphinx autosummary directive to generate documentation from module docstrings.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/reference_index/mobjects.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: manim\n\n.. autosummary::\n   :toctree: ../reference\n\n   ~mobject.frame\n   ~mobject.geometry\n   ~mobject.graph\n   ~mobject.graphing\n   ~mobject.logo\n   ~mobject.matrix\n   ~mobject.mobject\n   ~mobject.svg\n   ~mobject.table\n   ~mobject.text\n   ~mobject.three_d\n   ~mobject.types\n   ~mobject.utils\n   ~mobject.value_tracker\n   ~mobject.vector_field\n```\n\n----------------------------------------\n\nTITLE: Installing PyCairo in Anaconda Environment\nDESCRIPTION: Command to install a compatible version of PyCairo from conda-forge channel to resolve symbol import errors in Anaconda environments.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/faq/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge pycairo\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Manim in Binder\nDESCRIPTION: Dockerfile configuration for setting up a Binder environment with Manim. It uses the official Manim Community Docker image and copies the user's notebooks into the container.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/jupyter.rst#2025-04-22_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM docker.io/manimcommunity/manim:v0.9.0\n\nCOPY --chown=manimuser:manimuser . /manim\n```\n\n----------------------------------------\n\nTITLE: Specifying Variable-Length Tuple Return Types (RestructuredText)\nDESCRIPTION: Example of documenting a function that returns a tuple of variable length where all elements are of the same type.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/references.rst#2025-04-22_snippet_18\n\nLANGUAGE: restructuredtext\nCODE:\n```\nTuple[:class:`int`, ...]\n```\n\n----------------------------------------\n\nTITLE: Multi-Frame Testing Implementation in Python\nDESCRIPTION: Example showing how to enable multi-frame testing for animations by setting last_frame parameter to False in the frames_comparison decorator.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/testing.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@frames_comparison(last_frame=False)\ndef test_circle(scene):\n    circle = Circle()\n    scene.play(Animation(circle))\n```\n\n----------------------------------------\n\nTITLE: Autosummary Directive for Custom Sphinx Directives\nDESCRIPTION: RST autosummary directive that generates documentation for the custom Sphinx directives defined in the docbuild module.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs.rst#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n\n    :toctree: ../reference\n    autoaliasattr_directive\n    autocolor_directive\n    manim_directive\n```\n\n----------------------------------------\n\nTITLE: Checking Homebrew Version (MacOS)\nDESCRIPTION: This command checks the installed version of Homebrew package manager on MacOS.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/uv.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbrew --version\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-Commit Hooks\nDESCRIPTION: Command to install pre-commit hooks for code formatting and linting.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/development.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nuv run pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Using Class References in Sphinx Documentation (RestructuredText)\nDESCRIPTION: Examples of correctly referencing classes in Sphinx documentation using roles like :class:, showing both direct references and path specifications for different locations.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/references.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:class:`int`​, :class:`str`​, :class:`float`​, :class:`bool`​\n```\n\n----------------------------------------\n\nTITLE: Implementing logging with rich library in Python\nDESCRIPTION: Introduces logging functionality using the 'rich' library and a 'logger' object instead of print statements.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.1.0-changelog.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich import logging\n\nlogger = logging.getLogger(\"manim\")\n```\n\n----------------------------------------\n\nTITLE: Type Checking Guards in Python\nDESCRIPTION: Shows how to use TYPE_CHECKING guard for import statements used only for type hints.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/typings.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TYPE_CHECKING\n\nif TYPE_CHECKING:\n    from manim.typing import Vector3D\n# type stuff with Vector3D\n```\n\n----------------------------------------\n\nTITLE: Installing Manim Voiceover Plugin\nDESCRIPTION: Command to install the Manim Voiceover plugin using pip. This installation includes support for Azure and gTTS voice services.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/add_voiceovers.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"manim-voiceover[azure,gtts]\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Manim Scene Modules in RST\nDESCRIPTION: ReStructuredText directive block defining the documentation structure for Manim's scene modules. Uses autosummary to generate documentation for various scene types including moving camera, sections, base scenes, scene file writers, 3D scenes, vector space scenes and zoomed scenes.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/reference_index/scenes.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: manim\n\n.. autosummary::\n   :toctree: ../reference\n\n   ~scene.moving_camera_scene\n   ~scene.section\n   ~scene.scene\n   ~scene.scene_file_writer\n   ~scene.three_d_scene\n   ~scene.vector_space_scene\n   ~scene.zoomed_scene\n```\n\n----------------------------------------\n\nTITLE: Referencing External Module Classes (RestructuredText)\nDESCRIPTION: Example of referencing a class from an external module using full dotted syntax to provide clear path specification.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/references.rst#2025-04-22_snippet_7\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:class:`numpy.ndarray`​\n```\n\n----------------------------------------\n\nTITLE: Installing LaTeX on Debian-based Linux\nDESCRIPTION: Command to install the full TeX Live distribution on Debian-based Linux systems using apt.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/uv.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install texlive-full\n```\n\n----------------------------------------\n\nTITLE: Launching SnakeViz Visualizer\nDESCRIPTION: Command to visualize the profiling results using SnakeViz in a browser window.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/performance.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsnakeviz square_to_circle.txt\n```\n\n----------------------------------------\n\nTITLE: Adding Copy Function to TexTemplate in Python\nDESCRIPTION: Adds a Copy function to the TexTemplate class, allowing for easier duplication of TeX templates.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.6.0-changelog.rst#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, description based on changelog entry\n```\n\n----------------------------------------\n\nTITLE: Updating CLI Help Page Styling in Manim\nDESCRIPTION: Improves the command-line interface help page styling by updating dependencies and adding new parameters for easier access to help information.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.15.2-changelog.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n* :pr:`1975`: Improved CLI help page styling\n   - Updates dependencies on Click and Cloup libraries for CLI help page styling.\n   - Removed the dependency on click-default-group.\n   - Added ``no_args_is_help`` parameter for ``manim render`` to allow easy access to help page.\n   - Added note to ``manim`` help page epilog on how to access other command help pages.\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Platform Docker Image for Manim\nDESCRIPTION: Command to build and push a multi-platform Docker image for Manim supporting both ARM64 and AMD64 architectures. This uses Docker Buildx and pushes the image directly to the registry.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docker/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx build --push --platform linux/arm64/v8,linux/amd64 --tag manimcommunity/manim:TAG -f docker/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Required LaTeX Packages for Manim\nDESCRIPTION: List of required LaTeX packages needed for Manim to function properly with minimal LaTeX installation.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/uv.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\namsmath babel-english cbfonts-fd cm-super count1to ctex doublestroke dvisvgm everysel\nfontspec frcursive fundus-calligra gnu-freefont jknapltx latex-bin\nmathastext microtype multitoc physics preview prelim2e ragged2e relsize rsfs\nsetspace standalone tipa wasy wasysym xcolor xetex xkeyval\n```\n\n----------------------------------------\n\nTITLE: Saving Video Control Data in Python\nDESCRIPTION: Function call to save control data from a rendered video to a JSON file for testing purposes. This is used to verify the -l flag functionality with the SquareToCircle scene.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/testing.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsave_control_data_from_video(\"<path-to-video>\", \"SquareToCircleWithlFlag.json\")\n```\n\n----------------------------------------\n\nTITLE: Removing Long Tick Marks Outside NumberLine Range in Python\nDESCRIPTION: Automatically removes long tick marks that fall outside the range of the NumberLine class, improving visual clarity.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.6.0-changelog.rst#2025-04-22_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, description based on changelog entry\n```\n\n----------------------------------------\n\nTITLE: Using the #INSERT Directive in OpenGL Shaders\nDESCRIPTION: Demonstrates the syntax for including external shader code using the custom #INSERT directive. This directive allows shader files to include code from other files in the same directory, similar to C++ #include functionality.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/manim/renderer/shaders/include/NOTE.md#2025-04-22_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\n#INSERT <file_name>\n```\n\n----------------------------------------\n\nTITLE: Installing Cairo and pkg-config with Homebrew (MacOS)\nDESCRIPTION: This command installs the required system utilities cairo and pkg-config using Homebrew on MacOS.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/uv.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbrew install cairo pkg-config\n```\n\n----------------------------------------\n\nTITLE: Manim Media Directory Structure After Low Quality Rendering\nDESCRIPTION: The directory structure created by Manim after rendering a scene in low quality, showing the organization of output files.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials/output_and_config.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nproject/\n├─scene.py\n└─media\n  ├─videos\n  |  └─scene\n  |     └─480p15\n  |        ├─SquareToCircle.mp4\n  |        └─partial_movie_files\n  ├─text\n  └─Tex\n```\n\n----------------------------------------\n\nTITLE: Handling Exponent Notation in SVG Transforms in Python\nDESCRIPTION: Updates SVG transform handling to support exponent notation (e.g., 6.02e23) in numeric values.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.6.0-changelog.rst#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# No code snippet provided, description based on changelog entry\n```\n\n----------------------------------------\n\nTITLE: Creating Python Project and Installing Manim with uv (Windows/MacOS/Linux)\nDESCRIPTION: These commands create a new Python project directory named 'manimations' and install Manim as a dependency in the local environment using uv package manager.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/uv.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nuv init manimations\ncd manimations\nuv add manim\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Module Structure in reStructuredText\nDESCRIPTION: This snippet defines the structure for the animation module documentation using reStructuredText directives. It sets up an autosummary for various animation submodules.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/reference_index/animations.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nAnimations\n==========\n\n.. currentmodule:: manim\n\n.. autosummary::\n   :toctree: ../reference\n\n   ~animation.animation\n   ~animation.changing\n   ~animation.composition\n   ~animation.creation\n   ~animation.fading\n   ~animation.growing\n   ~animation.indication\n   ~animation.movement\n   ~animation.numbers\n   ~animation.rotation\n   ~animation.specialized\n   ~animation.speedmodifier\n   ~animation.transform\n   ~animation.transform_matching_parts\n   ~animation.updaters\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Debian-based Linux\nDESCRIPTION: This command installs necessary dependencies for building ManimPango and pycairo on Debian-based Linux distributions using apt package manager.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/uv.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install build-essential python3-dev libcairo2-dev libpango1.0-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Table of Contents\nDESCRIPTION: RST markup for configuring a documentation table of contents using Sphinx's toctree directive. Organizes content into tutorials, guides and FAQ sections with max depth of 2.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/tutorials_guides.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :caption: Table of Contents\n   :maxdepth: 2\n\n   tutorials/index\n   guides/index\n   faq/index\n```\n\n----------------------------------------\n\nTITLE: Getting uv Tool Directory\nDESCRIPTION: This command displays the base path of all uv tool environments, useful for setting up the Python interpreter in IDEs when using Manim as a global tool.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/uv.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nuv tool dir\n```\n\n----------------------------------------\n\nTITLE: Generating Class Documentation in Sphinx for Manim\nDESCRIPTION: A Jinja2 template that structures the documentation for Manim classes in Sphinx. It displays the class name as a heading, provides qualified name reference, and organizes methods and attributes into separate sections with cross-references.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/_templates/autosummary/class.rst#2025-04-22_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ name | escape | underline}}\n\nQualified name: ``{{ fullname | escape }}``\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n   :show-inheritance:\n   :members:\n   :private-members:\n\n\n   {% block methods %}\n   {%- if methods %}\n   .. rubric:: {{ _('Methods') }}\n\n   .. autosummary::\n      :nosignatures:\n      {% for item in methods if item != '__init__' and item not in inherited_members %}\n      ~{{ name }}.{{ item }}\n      {%- endfor %}\n   {%- endif %}\n   {%- endblock %}\n\n   {% block attributes %}\n   {%- if attributes %}\n   .. rubric:: {{ _('Attributes') }}\n\n   .. autosummary::\n     {% for item in attributes %}\n     ~{{ name }}.{{ item }}\n     {%- endfor %}\n   {%- endif %}\n   {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Referencing Methods in Sphinx Documentation (RestructuredText)\nDESCRIPTION: Examples of referencing methods in the same class and in different classes using the :meth: role in Sphinx documentation.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/references.rst#2025-04-22_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:meth:`push`​\n```\n\n----------------------------------------\n\nTITLE: Building Single Architecture Docker Image for Manim\nDESCRIPTION: Command to build a Docker image for the current version of Manim. This should be run from the root directory of the repository and allows specifying a tag for the image.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docker/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t manimcommunity/manim:TAG -f docker/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for FAQ in reStructuredText\nDESCRIPTION: This snippet sets up a table of contents (toctree) for the Frequently Asked Questions section. It specifies a caption, sets the maximum depth to 2, and uses a glob pattern to include all files in the current directory.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/faq/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :caption: Table of Contents\n   :maxdepth: 2\n   :glob:\n\n   *\n```\n\n----------------------------------------\n\nTITLE: Sample Folder-wide Config Overriding User-wide Settings\nDESCRIPTION: Shows a folder-wide configuration file that overrides specific settings from the user-wide config file.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/configuration.rst#2025-04-22_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n# folder-wide\n[CLI]\nsave_as_gif = False\n```\n\n----------------------------------------\n\nTITLE: Adding Warning Admonition Block in reStructuredText\nDESCRIPTION: Code example showing how to add a Warning admonition block to alert readers about potential issues or cautions they should be aware of.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/admonitions.rst#2025-04-22_snippet_4\n\nLANGUAGE: rest\nCODE:\n```\n.. warning::\n      Some text pointing out something that people should be warned about.\n```\n\n----------------------------------------\n\nTITLE: Referencing Attributes in Other Classes (RestructuredText)\nDESCRIPTION: Syntax for referencing attributes in other classes within the same file, showing proper formatting with class name included.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/references.rst#2025-04-22_snippet_5\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:attr:`MyClass.color`​\n```\n\n----------------------------------------\n\nTITLE: Starting a previously created Manim Docker container\nDESCRIPTION: Command to start a previously created Manim container that was stopped. This starts the container in the background without giving you a shell.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/docker.rst#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker start my-manim-container\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Manim\nDESCRIPTION: This snippet lists two Python package dependencies required for the Manim project: jupyterlab for interactive notebooks and development, and sphinxcontrib-programoutput for generating documentation that includes program output.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/rtd-requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njupyterlab\nsphinxcontrib-programoutput\n```\n\n----------------------------------------\n\nTITLE: Using Short Notation for External References (RestructuredText)\nDESCRIPTION: Examples of using the shortened notation with tilde (~) for referencing classes, methods, and attributes from other files in the Manim project.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/references.rst#2025-04-22_snippet_6\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:class:`~.Animation`​, :meth:`~.VMobject.set_color`​, :attr:`~.VMobject.color`​\n```\n\n----------------------------------------\n\nTITLE: Installing UV Package Manager on MacOS/Linux\nDESCRIPTION: Command to install the uv Python package manager using curl on MacOS and Linux systems.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/uv.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Specifying Optional Types in Documentation (RestructuredText)\nDESCRIPTION: Example of documenting a parameter that can be either a specific type or None, using the Optional[] wrapper around the type specification.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/references.rst#2025-04-22_snippet_8\n\nLANGUAGE: restructuredtext\nCODE:\n```\nOptional[:class:`str`]\n```\n\n----------------------------------------\n\nTITLE: Running Manim command in existing Docker container\nDESCRIPTION: Command to execute Manim within an already running container. This renders the CircleToSquare scene with medium quality without creating a new container.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/docker.rst#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker exec -it my-manim-container manim -qm test_scenes.py CircleToSquare\n```\n\n----------------------------------------\n\nTITLE: Module Documentation Structure Template in Jinja2/RST for Manim\nDESCRIPTION: This template defines the documentation structure for Manim modules using Sphinx and Jinja2. It creates sections for the module description, classes, functions, exceptions, and submodules. The template uses Sphinx directives like 'automodule', 'autosummary', and a custom 'autoaliasattr' directive specific to the Manim project.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/_templates/autosummary/module.rst#2025-04-22_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ name | escape | underline }}\n\n.. currentmodule:: {{ fullname }}\n\n.. automodule:: {{ fullname }}\n\n   {# SEE manim.utils.docbuild.autoaliasattr_directive #}\n   {# FOR INFORMATION ABOUT THE CUSTOM autoaliasattr DIRECTIVE! #}\n   .. autoaliasattr:: {{ fullname }}\n\n   {% block classes %}\n   {% if classes %}\n   .. rubric:: Classes\n\n   .. autosummary::\n      :toctree: .\n      :nosignatures:\n      {% for class in classes %}\n        {{ class }}\n      {% endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block functions %}\n   {% if functions %}\n   .. rubric:: {{ _('Functions') }}\n\n   {% for item in functions %}\n   .. autofunction:: {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block exceptions %}\n   {% if exceptions %}\n   .. rubric:: {{ _('Exceptions') }}\n\n   .. autosummary::\n   {% for item in exceptions %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n{% block modules %}\n{% if modules %}\n.. rubric:: Modules\n\n.. autosummary::\n   :toctree:\n   :recursive:\n{% for item in modules %}\n   {{ item }}\n{%- endfor %}\n{% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Referencing Attributes in Sphinx Documentation (RestructuredText)\nDESCRIPTION: Examples of referencing attributes in the same class and in different classes using the :attr: role in Sphinx documentation.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/references.rst#2025-04-22_snippet_4\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:attr:`color`​\n```\n\n----------------------------------------\n\nTITLE: Installing UV Package Manager on Windows\nDESCRIPTION: PowerShell command to install the uv Python package manager on Windows systems.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/uv.md#2025-04-22_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Iterable Types in Documentation (RestructuredText)\nDESCRIPTION: Examples of documenting parameters that should be any iterable type, specifying the type of elements within the iterable.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/references.rst#2025-04-22_snippet_13\n\nLANGUAGE: restructuredtext\nCODE:\n```\nIterable[:class:`str`]\n```\n\n----------------------------------------\n\nTITLE: Running JupyterLab with Manim in Docker\nDESCRIPTION: Command to start a JupyterLab server with Manim installed in a Docker container. This maps port 8888 from the container to your local machine for web access.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/docker.rst#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it -p 8888:8888 manimcommunity/manim jupyter lab --ip=0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Referencing Classes in Same File (RestructuredText)\nDESCRIPTION: Examples of referencing classes, methods, and attributes that are in the same file as the docstring, showing proper syntax for local references.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/references.rst#2025-04-22_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:class:`MyClass`​\n```\n\n----------------------------------------\n\nTITLE: Specifying Dictionary Types in Documentation (RestructuredText)\nDESCRIPTION: Examples of documenting dictionary parameters with specification of both key and value types, including complex value types using Union.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/references.rst#2025-04-22_snippet_11\n\nLANGUAGE: restructuredtext\nCODE:\n```\nDict[:class:`str`, :class:`~.Mobject`]\n```\n\n----------------------------------------\n\nTITLE: Building Documentation for Manim with CLI Commands\nDESCRIPTION: CLI commands for building Manim documentation locally by navigating to the docs folder and executing OS-specific build commands.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-   Windows: ``./make.bat html``\n-   macOS and Linux: ``make html``\n```\n\n----------------------------------------\n\nTITLE: Manim CLI Usage Commands\nDESCRIPTION: Main command-line interface help output showing available commands and basic usage for the Manim animation engine.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/configuration.rst#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nUsage: manim [OPTIONS] COMMAND [ARGS]...\n\nAnimation engine for explanatory math videos.\n\nOptions:\n  --version  Show version and exit.\n  --help     Show this message and exit.\n\nCommands:\n  cfg      Manages Manim configuration files.\n  init     Sets up a new project in current working directory with default\n           settings.\n\n           It copies files from templates directory and pastes them in the\n           current working dir.\n  new      Create a new project or insert a new scene.\n  plugins  Manages Manim plugins.\n  render   Render SCENE(S) from the input FILE.\n\nSee 'manim <command>' to read about a specific subcommand.\n\nMade with <3 by Manim Community developers.\n```\n\n----------------------------------------\n\nTITLE: Cloning Forked Manim Repository\nDESCRIPTION: Command to clone your forked Manim repository to your local machine. Replace <your-username> with your GitHub username.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/development.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<your-username>/manim.git\n```\n\n----------------------------------------\n\nTITLE: Specifying Sequence Types in Documentation (RestructuredText)\nDESCRIPTION: Examples of documenting parameters that need to be sequence-like (indexable, with length), including sequences with mixed element types.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/references.rst#2025-04-22_snippet_14\n\nLANGUAGE: restructuredtext\nCODE:\n```\nSequence[:class:`str`]\n```\n\n----------------------------------------\n\nTITLE: Optional Union Types in Documentation (RestructuredText)\nDESCRIPTION: Example of documenting a parameter that can be either one of multiple types or None, combining Optional and Union syntax.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/references.rst#2025-04-22_snippet_10\n\nLANGUAGE: restructuredtext\nCODE:\n```\nOptional[Union[:class:`int`, :class:`bool`]]\n```\n\n----------------------------------------\n\nTITLE: Defining Changelog Table of Contents in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents for the changelog using reStructuredText syntax. It lists all the changelog files for different versions of Manim.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n\n    changelog/0.19.0-changelog\n    changelog/0.18.0-changelog\n    changelog/0.17.3-changelog\n    changelog/0.17.2-changelog\n    changelog/0.17.1-changelog\n    changelog/0.17.0-changelog\n    changelog/0.16.0-changelog\n    changelog/0.15.2-changelog\n    changelog/0.15.1-changelog\n    changelog/0.15.0-changelog\n    changelog/0.14.0-changelog\n    changelog/0.13.1-changelog\n    changelog/0.13.0-changelog\n    changelog/0.12.0-changelog\n    changelog/0.11.0-changelog\n    changelog/0.10.0-changelog\n    changelog/0.9.0-changelog\n    changelog/0.8.0-changelog\n    changelog/0.7.0-changelog\n    changelog/0.6.0-changelog\n    changelog/0.5.0-changelog\n    changelog/0.4.0-changelog\n    changelog/0.3.0-changelog\n    changelog/0.2.0-changelog\n    changelog/0.1.1-changelog\n    changelog/0.1.0-changelog\n```\n\n----------------------------------------\n\nTITLE: Running cProfile\nDESCRIPTION: Command to run cProfile on a Manim script and output the results to a file.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/performance.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m cProfile -o square_to_circle.txt square_to_circle.py\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Manim Project Folder\nDESCRIPTION: Command to change the current directory to the cloned Manim project folder.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/development.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd manim\n```\n\n----------------------------------------\n\nTITLE: Specifying Union Types in Documentation (RestructuredText)\nDESCRIPTION: Examples of documenting parameters that can be one of multiple types using Union[] syntax, including both simple unions and optional unions.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/references.rst#2025-04-22_snippet_9\n\nLANGUAGE: restructuredtext\nCODE:\n```\nUnion[:class:`str`, :class:`int`]\n```\n\n----------------------------------------\n\nTITLE: Mixed Element Sequence Type Specification (RestructuredText)\nDESCRIPTION: Example of documenting a parameter that should be a sequence containing elements of different possible types.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/references.rst#2025-04-22_snippet_15\n\nLANGUAGE: restructuredtext\nCODE:\n```\nSequence[Union[:class:`str`, :class:`int`]]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with UV\nDESCRIPTION: Command to install project dependencies using the UV package manager.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/development.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuv sync\n```\n\n----------------------------------------\n\nTITLE: Installing SnakeViz Profiler\nDESCRIPTION: Command to install the SnakeViz profiling visualization tool using pip.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/performance.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install snakeviz\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Manim Repository\nDESCRIPTION: Command to add the upstream ManimCommunity repository to your local git configuration.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/development.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream https://github.com/ManimCommunity/manim.git\n```\n\n----------------------------------------\n\nTITLE: Adding See Also Admonition Block in reStructuredText\nDESCRIPTION: Code example showing how to create a 'See Also' admonition that references Manim modules, classes, methods, attributes, and functions using cross-reference syntax.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/admonitions.rst#2025-04-22_snippet_0\n\nLANGUAGE: rest\nCODE:\n```\n.. seealso::\n        Some ideas at :mod:`~.tex_mobject`, :class:`~.Mobject`, :meth:`~.Mobject.add_updater`, :attr:`~.Mobject.depth`, :func:`~.make_config_parser`\n```\n\n----------------------------------------\n\nTITLE: Module Index Definition in RST\nDESCRIPTION: ReStructuredText directive for generating a module index documentation page, listing all utility modules and components of the Manim library\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/reference_index/utilities_misc.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: manim\n\n.. autosummary::\n   :toctree: ../reference\n\n   ~utils.bezier\n   cli\n   ~utils.color\n   ~utils.commands\n   ~utils.config_ops\n   constants\n   ~utils.debug\n   ~utils.deprecation\n   ~utils.docbuild\n   ~utils.hashing\n   ~utils.images\n   ~utils.ipython_magic\n   ~utils.iterables\n   ~utils.paths\n   ~utils.rate_functions\n   ~utils.simple_functions\n   ~utils.sounds\n   ~utils.space_ops\n   ~utils.testing\n   ~utils.tex\n   ~utils.tex_file_writing\n   ~utils.tex_templates\n   typing\n```\n\n----------------------------------------\n\nTITLE: Updating Local Main Branch\nDESCRIPTION: Commands to switch to the main branch and pull the latest changes from the upstream repository.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/development.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit switch main\ngit pull --rebase upstream main\n```\n\n----------------------------------------\n\nTITLE: Adding Note Admonition Block in reStructuredText\nDESCRIPTION: Code example demonstrating how to add a simple Note admonition block in reStructuredText documentation.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/admonitions.rst#2025-04-22_snippet_1\n\nLANGUAGE: rest\nCODE:\n```\n.. note::\n      A note\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Docbuild Module in RST\nDESCRIPTION: reStructuredText directive for importing the custom docbuild module from Manim, which contains custom Sphinx directives.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: manim.utils.docbuild\n```\n\n----------------------------------------\n\nTITLE: Defining Manim Configuration Module Index in RST\nDESCRIPTION: This RST code defines the documentation structure for Manim's configuration system. It specifies the module being documented and lists related configuration modules that will be included in the reference documentation.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/reference_index/configuration.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: manim\n\n.. autosummary::\n   :toctree: ../reference\n\n   ~_config\n   ~_config.utils\n   ~_config.logger_utils\n```\n\n----------------------------------------\n\nTITLE: Adding Changed Files to Git\nDESCRIPTION: Command to stage specific files or directories for commit in git.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/development.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit add <file/directory>\n```\n\n----------------------------------------\n\nTITLE: Adding Attention Admonition Block in reStructuredText\nDESCRIPTION: Code example demonstrating how to add an Attention admonition block to draw special notice to particular information in the documentation.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs/admonitions.rst#2025-04-22_snippet_5\n\nLANGUAGE: rest\nCODE:\n```\n.. attention::\n      A attention\n```\n\n----------------------------------------\n\nTITLE: Manim Rendering Log Entry Format\nDESCRIPTION: Structured JSON log entries showing the rendering pipeline stages with levelname, module and message fields. Each entry represents a different stage of the animation rendering process.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/tests/control_data/logs_data/BasicSceneLoggingTest.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"levelname\": \"INFO\", \"module\": \"logger_utils\", \"message\": \"Log file will be saved in <>\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"levelname\": \"DEBUG\", \"module\": \"hashing\", \"message\": \"Hashing ...\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"levelname\": \"DEBUG\", \"module\": \"hashing\", \"message\": \"Hashing done in <> s.\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"levelname\": \"DEBUG\", \"module\": \"hashing\", \"message\": \"Hash generated :  <>\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"levelname\": \"DEBUG\", \"module\": \"cairo_renderer\", \"message\": \"List of the first few animation hashes of the scene: <>\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"levelname\": \"INFO\", \"module\": \"scene_file_writer\", \"message\": \"Animation 0 : Partial movie file written in <>\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"levelname\": \"INFO\", \"module\": \"scene_file_writer\", \"message\": \"Combining to Movie file.\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"levelname\": \"DEBUG\", \"module\": \"scene_file_writer\", \"message\": \"Partial movie files to combine (1 files): <>\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"levelname\": \"INFO\", \"module\": \"scene_file_writer\", \"message\": \"\\nFile ready at <>\\n\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"levelname\": \"INFO\", \"module\": \"scene\", \"message\": \"Rendered SquareToCircle\\nPlayed 1 animations\"}\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Sphinx Documentation\nDESCRIPTION: This snippet lists the Python packages required for building documentation with Sphinx. It includes the core Sphinx package (version 7.3 or higher) along with several extensions like furo theme, MyST parser, and additional utilities for copy buttons, OpenGraph metadata, design components, and URL redirects.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfuro\nmyst-parser\nsphinx>=7.3\nsphinx-copybutton\nsphinxext-opengraph\nsphinx-design\nsphinx-reredirects\n```\n\n----------------------------------------\n\nTITLE: Installing LaTeX on Fedora Linux\nDESCRIPTION: Command to install the full TeX Live distribution on Fedora Linux systems using dnf.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/installation/uv.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install texlive-scheme-full\n```\n\n----------------------------------------\n\nTITLE: Documentation Table of Contents in RST\nDESCRIPTION: RST toctree directive that defines the structure of the documentation index, listing all documentation-related pages with a maximum depth of 2.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/docs.rst#2025-04-22_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   docs/admonitions\n   docs/docstrings\n   docs/examples\n   docs/references\n   docs/typings\n   docs/types\n```\n\n----------------------------------------\n\nTITLE: LaTeX Document with Missing Package\nDESCRIPTION: LaTeX document template attempting to use a non-existent package 'notapackage' and containing a division by zero error.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/tests/control_data/logs_data/bad_tex_scene_BadTex.txt#2025-04-22_snippet_0\n\nLANGUAGE: tex\nCODE:\n```\n\\documentclass[preview]{standalone}\n\\usepackage{notapackage}\n\\begin{document}\n\\begin{center}\n\\frac{1}{0}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Cython for ManimPango Build\nDESCRIPTION: Command to install Cython package to resolve ManimPango build issues during Manim installation.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/faq/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip3 install Cython\n```\n\n----------------------------------------\n\nTITLE: Configuring TeX Live Paths and Options\nDESCRIPTION: Defines the directory structure and configuration options for a minimal TeX Live installation. Sets paths for texmf directories and disables documentation and source installations.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docker/texlive-profile.txt#2025-04-22_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nselected_scheme scheme-minimal\nTEXDIR /usr/local/texlive\nTEXMFCONFIG ~/.texlive/texmf-config\nTEXMFHOME ~/texmf\nTEXMFLOCAL /usr/local/texlive/texmf-local\nTEXMFSYSCONFIG /usr/local/texlive/texmf-config\nTEXMFSYSVAR /usr/local/texlive/texmf-var\nTEXMFVAR ~/.texlive/texmf-var\noption_doc 0\noption_src 0\n```\n\n----------------------------------------\n\nTITLE: Test Environment Fix Using sys.executable\nDESCRIPTION: Modified test cases to use sys.executable instead of hardcoded 'python' command to ensure correct environment resolution during test execution with capture().\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/changelog/0.5.0-changelog.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nsys.executable\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents with reStructuredText for Manim Documentation\nDESCRIPTION: This reStructuredText (rst) code snippet creates a table of contents for thematic guides in the Manim documentation. It uses the toctree directive with options to display a caption, limit depth to 2 levels, and include documentation files via globbing pattern.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/guides/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :caption: Table of Contents\n   :maxdepth: 2\n   :glob:\n\n   configuration\n   deep_dive\n   using_text\n   add_voiceovers\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Control for Manim Documentation\nDESCRIPTION: This robots.txt file sets access restrictions for web crawlers visiting the Manim Community documentation site. It blocks access to all paths except for the stable documentation under /en/stable/ and provides a reference to the site's sitemap for permitted crawling.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow: /\nAllow: /en/stable/\n\nSitemap: https://docs.manim.community/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Video Control Data JSON Structure\nDESCRIPTION: Example JSON output structure containing video metadata including codec, dimensions, frame rate, duration, and frame count. This data is used for verification in testing.\nSOURCE: https://github.com/manimcommunity/manim/blob/main/docs/source/contributing/testing.rst#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"SquareToCircleWithlFlag\",\n    \"config\": {\n        \"codec_name\": \"h264\",\n        \"width\": 854,\n        \"height\": 480,\n        \"avg_frame_rate\": \"15/1\",\n        \"duration\": \"1.000000\",\n        \"nb_frames\": \"15\"\n    }\n}\n```"
  }
]