[
  {
    "owner": "alibaba-fusion",
    "repo": "next",
    "content": "TITLE: Defining Form Component Props in Markdown\nDESCRIPTION: This markdown table defines the properties of the Form component, including their types, default values, and descriptions. It covers various configuration options such as inline layout, size, label alignment, and event handling.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/form/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Param                     | Description                                                                                                                                                                                                                                                                              | Type                                                                                                                         | Default Value                                        | Required | Supported Version |\n| ------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------- | -------- | ----------------- |\n| inline                    | Inline                                                                                                                                                                                                                                                                                   | boolean                                                                                                                      | -                                                    |          | -                 |\n| size                      | When an Item within a Form has a specific size configuration, that customization overrides the general size setting of the Form. Additionally, if a component is integrated with an Item, the component's individual size property does not apply                                        | 'large' \\| 'medium' \\| 'small'                                                                                               | medium                                               |          | -                 |\n| fullWidth                 | Is the width of form                                                                                                                                                                                                                                                                     | boolean                                                                                                                      | -                                                    |          | -                 |\n| labelAlign                | The position of the label, if labelCol and wrapperCol are not set, defaults to having the label positioned above.                                                                                                                                                                        | 'top' \\| 'left' \\| 'inset'                                                                                                   | left                                                 |          | -                 |\n| labelTextAlign            | The alignment of the label on the left and right                                                                                                                                                                                                                                         | 'left' \\| 'right'                                                                                                            | -                                                    |          | -                 |\n| field                     | Field instance, pass false to disable                                                                                                                                                                                                                                                    | false \\| NextField \\| null                                                                                                   | -                                                    |          | -                 |\n| saveField                 | Save the Form automatically generated field object                                                                                                                                                                                                                                       | (field?: NextField \\| null) => void                                                                                          | func.noop                                            |          | -                 |\n| labelCol                  | Control the labelCol of the first level Item                                                                                                                                                                                                                                             | ColProps                                                                                                                     | -                                                    |          | -                 |\n| wrapperCol                | Control the wrapperCol of the first level Item                                                                                                                                                                                                                                           | ColProps                                                                                                                     | -                                                    |          | -                 |\n| onSubmit                  | Triggered when there is an element with `htmlType=\"submit\"` in the form                                                                                                                                                                                                                  | FormEventHandler\\<HTMLFormElement>                                                                                           | function preventDefault(e) \\{ e.preventDefault(); \\} |          | -                 |\n| children                  | Child elements                                                                                                                                                                                                                                                                           | ReactNode                                                                                                                    | -                                                    |          | -                 |\n| value                     | Form value                                                                                                                                                                                                                                                                               | FieldValues                                                                                                                  | -                                                    |          | -                 |\n| onChange                  | Form change callback<br/><br/>**signature**:<br/>**params**:<br/>_values_: Form values<br/>_item_: Form item, item.name: The name of the component that changed, item.value: The new data of the changed component, item.field: The field instance associated with the changed component | (<br/> values: FieldValues \\| undefined,<br/> item: { name: string; value: string; field: NextField \\| null }<br/> ) => void | func.noop                                            |          | -                 |\n| component                 | Set the tag type                                                                                                                                                                                                                                                                         | ElementType                                                                                                                  | 'form'                                               |          | -                 |\n| fieldOptions              | Field configuration, will be used when initializing the field instance in Form                                                                                                                                                                                                           | FieldOption                                                                                                                  | -                                                    |          | -                 |\n| device                    | Preset screen width                                                                                                                                                                                                                                                                      | 'desktop' \\| 'phone' \\| 'tablet'                                                                                             | 'desktop'                                            |          | -                 |\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Cell Rendering in React\nDESCRIPTION: This example shows how to customize cell rendering in a Table component. It uses the 'cell' prop of Table.Column to provide a custom rendering function based on the cell value.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/table/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Table } from '@alifd/next';\n\nconst dataSource = [{id: 1, time: '2016'}];\nconst renderTime = value => {\n    if (value === '2016') {\n        return 'this year';\n    }\n    return value;\n};\nReactDOM.render(\n    <Table dataSource={dataSource}>\n        <Table.Column title=\"Id\" dataIndex=\"id\"/>\n        <Table.Column title=\"Time\" dataIndex=\"time\" cell={renderTime}/>\n    </Table>, mountNode);\n```\n\n----------------------------------------\n\nTITLE: Initializing Field Component in React\nDESCRIPTION: Demonstrates basic usage of the Field component for managing form data in a React component. It shows how to create a Field instance, initialize an input, and retrieve its value.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/field/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nClass Demo extends React.Component {\n    Field = new Field(this); // instance creation\n\n    onClick = ()=>{\n        Console.log(this.field.getValue('name'));\n    }\n    Render() {\n        Const init = this.field.init;\n\n        // Note: initValue will only be assigned when the component is first initialized. If you are using an asynchronous assignment, use setValue\n        Return <div>\n            <Input {...init('name',{initValue:'first value'})} />\n            <button onClick={this.onClick>Get Data</button>\n        </div>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Search Component API in Markdown\nDESCRIPTION: This snippet outlines the API for the Search component, including various props for customization, callbacks, and styling options. It details parameters like size, value, placeholder, and more complex options like popupContent and filterProps.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/search/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Search\n\n| Param                  | Description                                                               | Type                                                            | Default Value | Required |\n| ---------------------- | ------------------------------------------------------------------------- | --------------------------------------------------------------- | ------------- | -------- |\n| size                   | -                                                                         | 'large' \\| 'medium'                                             | 'medium'      |          |\n| value                  | -                                                                         | string \\| number                                                | -             |          |\n| defaultValue           | -                                                                         | string                                                          | -             |          |\n| placeholder            | Default hint                                                              | string                                                          | -             |          |\n| autoWidth              | -                                                                         | boolean                                                         | -             |          |\n| label                  | -                                                                         | React.ReactNode                                                 | -             |          |\n| hasClear               | Show clear button                                                         | boolean                                                         | -             |          |\n| state                  | -                                                                         | 'error' \\| 'loading'                                            | -             |          |\n| readOnly               | -                                                                         | boolean                                                         | -             |          |\n| disabled               | Disabled or not                                                           | boolean                                                         | -             |          |\n| visible                | Is popupContent displayed                                                 | boolean                                                         | -             |          |\n| defaultVisible         | -                                                                         | boolean                                                         | -             |          |\n| onVisibleChange        | -                                                                         | (visible: boolean) => void                                      | -             |          |\n| popupContainer         | -                                                                         | string \\| HTMLElement \\| ((target: HTMLElement) => HTMLElement) | -             |          |\n| popupClassName         | -                                                                         | string                                                          | -             |          |\n| popupStyle             | -                                                                         | React.CSSProperties                                             | -             |          |\n| popupProps             | -                                                                         | PopupProps                                                      | -             |          |\n| popupContent           | Custom popup content                                                      | React.ReactNode                                                 | -             |          |\n| filterLocal            | -                                                                         | boolean                                                         | -             |          |\n| filter                 | Filter                                                                    | SelectProps['dataSource']                                       | -             |          |\n| useVirtual             | -                                                                         | boolean                                                         | -             |          |\n| dataSource             | Dropdown menu dataSource                                                  | AutoCompleteProps['dataSource']                                 | -             |          |\n| itemRender             | -                                                                         | (item: Item) => React.ReactNode                                 | -             |          |\n| onChange               | Callback when value changes                                               | AutoCompleteProps['onChange']                                   | -             |          |\n| fillProps              | The key of the value filled in the selection box, the default is value    | string                                                          | -             |          |\n| prefix                 | -                                                                         | string                                                          | -             |          |\n| shape                  | Shape                                                                     | 'normal' \\| 'simple'                                            | 'normal'      |          |\n| type                   | -                                                                         | 'primary' \\| 'secondary' \\| 'normal' \\| 'dark'                  | 'normal'      |          |\n| onSearch               | Callback when search button clicked                                       | (value: string, filterValue?: string) => void                   | -             |          |\n| defaultFilterValue     | DefaultFilterValue                                                        | string                                                          | -             |          |\n| filterValue            | FilterValue                                                               | string                                                          | -             |          |\n| onFilterChange         | Callback when filter changes                                              | (filter: string) => void                                        | -             |          |\n| searchText             | SearchText                                                                | React.ReactNode                                                 | -             |          |\n| filterProps            | FilterProps                                                               | SelectProps                                                     | -             |          |\n| buttonProps            | Props for Button                                                          | ButtonProps                                                     | -             |          |\n| hasIcon                | Show find button                                                          | boolean                                                         | -             |          |\n| icons                  | Configurable icons, including search, etc                                 | {<br/> search?: React.ReactNode;<br/> }                         | -             |          |\n| followTrigger          | Follow Trigger or not                                                     | boolean                                                         | -             |          |\n| autoHighlightFirstItem | Whether to automatically highlight the first element                      | boolean                                                         | -             |          |\n| onToggleHighlightItem  | Callback for keyboard up and down keys to switch menu highlighted options | AutoCompleteProps['onToggleHighlightItem']                      | -             |          |\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Table with Two Columns in React\nDESCRIPTION: This snippet demonstrates how to create a basic Table component with two columns using the Alibaba Fusion Next library. It uses Table.Column to define columns and the dataSource prop to provide data.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/table/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Table } from '@alifd/next';\n\nconst dataSource = [{id: 1, time: '2016'}];\nReactDOM.render(\n    <Table dataSource={dataSource}>\n        <Table.Column title=\"Id\" dataIndex=\"id\"/>\n        <Table.Column title=\"Time\" dataIndex=\"time\"/>\n    </Table>, mountNode);\n```\n\n----------------------------------------\n\nTITLE: Custom Cell Rendering in Table Columns\nDESCRIPTION: Shows how to customize cell rendering using the cell property in Table.Column, with conditional rendering based on cell values.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/table/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Table } from '@alifd/next';\n\nconst dataSource = [{id: 1, time: '2016'}];\nconst renderTime = value => {\n    if (value === '2016') {\n        return '今年';\n    }\n    return value;\n};\nReactDOM.render(\n    <Table dataSource={dataSource}>\n        <Table.Column title=\"Id\" dataIndex=\"id\"/>\n        <Table.Column title=\"Time\" dataIndex=\"time\" cell={renderTime}/>\n    </Table>, mountNode);\n```\n\n----------------------------------------\n\nTITLE: Search Component Type Interface\nDESCRIPTION: Comprehensive API documentation for the Search component, including size, value, placeholder, and other customizable properties.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/search/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数                   | 说明                                               | 类型                                                            | 默认值   | 是否必填 |\n| ---------------------- | -------------------------------------------------- | --------------------------------------------------------------- | -------- | -------- |\n| size                   | 大小                                               | 'large' \\| 'medium'                                             | 'medium' |          |\n| value                  | 搜索框数值                                         | string \\| number                                                | -        |          |\n| defaultValue           | 搜索框默认值                                       | string                                                          | -        |          |\n| placeholder            | 默认提示                                           | string                                                          | -        |          |\n| autoWidth              | 下拉菜单是否与选择器对齐                           | boolean                                                         | -        |          |\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Settings with ConfigProvider\nDESCRIPTION: Example showing how to set up language localization using ConfigProvider with DatePicker component. Demonstrates importing and applying different language packs.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/config-provider/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ConfigProvider, DatePicker } from '@alifd/next';\nimport enUS from '@alifd/next/lib/locale/en-us';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <ConfigProvider locale={enUS}>\n                <DatePicker />\n            </ConfigProvider>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing cellProps Function for Table Cell Customization in JavaScript\nDESCRIPTION: This function enables setting attributes for individual cells in a Table component, including cell merging. It receives row index, column index, data index, and row record as parameters and should return an object with td element properties.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/table/__docs__/index.md#2025-04-10_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ncellProps: Function(rowIndex: Number, colIndex: Number, dataIndex: String, record: Object) => Object\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Grid Layout with Row and Col Components\nDESCRIPTION: Example showing how to implement an accessible grid layout using Row and Col components with proper ARIA roles. The code demonstrates basic grid layout with column spans and offsets.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/grid/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div role=\"grid\">\n    <Row><Col span={6}>1</Col><Col span={6}>2</Col><Col span={6}>3</Col><Col span={6}>4</Col></Row>\n    <Row><Col span={6} offset={6}>1</Col><Col span={6} offset={6}>2</Col></Row>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Table Implementation with StickyLock in React\nDESCRIPTION: Demonstrates how to create a basic two-column table using Table.StickyLock component with dataSource property and Column definitions.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/table/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Table } from '@alifd/next';\n\nconst dataSource = [{id: 1, time: '2016'}];\nReactDOM.render(\n    <Table.StickyLock dataSource={dataSource}>\n        <Table.Column title=\"Id\" dataIndex=\"id\"/>\n        <Table.Column title=\"Time\" dataIndex=\"time\"/>\n    </Table.StickyLock>, mountNode);\n```\n\n----------------------------------------\n\nTITLE: Defining Select Component Props in TypeScript\nDESCRIPTION: This snippet showcases the TypeScript type definitions for various props of a Select component. It includes properties for handling tags, data sources, callbacks, and customization options.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/select/__docs__/index.en-us.md#2025-04-10_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface SelectProps {\n  maxTagPlaceholder?: (selectedValues: ObjectItem[], totalValues: ObjectItem[]) => React.ReactNode | HTMLElement;\n  hiddenSelected?: boolean;\n  showDataSourceChildren?: boolean;\n  onRemove?: (item: ObjectItem) => void;\n  onFocus?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLElement>) => void;\n  isPreview?: boolean;\n  renderPreview?: (values: DataSourceItem | DataSourceItem[], props?: SelectProps) => React.ReactNode;\n  autoHighlightFirstItem?: boolean;\n  highlightKey?: string;\n  defaultHighlightKey?: string | null;\n  popupAutoFocus?: boolean;\n  popupComponent?: React.FunctionComponent | React.ComponentClass | string;\n  tagClosable?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Table Headers in React\nDESCRIPTION: This snippet illustrates how to create a table with multiple headers using Table.ColumnGroup to wrap Table.Column components. This allows for more complex table structures.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/table/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Table } from '@alifd/next';\n\nconst dataSource = [{id: 1, time: '2016'}];\nReactDOM.render(\n    <Table dataSource={dataSource}>\n        <Table.ColumnGroup>\n            <Table.Column title=\"Id\" dataIndex=\"id\"/>\n            <Table.Column title=\"Time\" dataIndex=\"time\"/>\n        </Table.ColumnGroup>\n        <Table.ColumnGroup>\n            <Table.Column title=\"Id\" dataIndex=\"id\"/>\n        </Table.ColumnGroup>\n    </Table>, mountNode);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Dropdown Content in Markdown\nDESCRIPTION: This snippet contains markdown content defining custom dropdown functionality in both Chinese and English. It includes order metadata and brief descriptions for each language.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/search/__docs__/demo/custom/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=5\n\n# 自定义弹层\n\n自定义下拉框内容。\n\n# en-US order=5\n\n# Custom Dropdown\n\ncustom dropdown content\n```\n\n----------------------------------------\n\nTITLE: Quick Message Success Method Usage in JavaScript\nDESCRIPTION: Shows how to use the Message.success() shorthand method in two ways: with a simple string content or with a configuration object that includes title and duration.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/message/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMessage.success('message content');\n\n// or\nMessage.success({\n    title: 'message content',\n    duration: 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Field Component\nDESCRIPTION: Initialize a Field component with name, options and props parameters. Configures value handling, validation rules and event triggers.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/field/__docs__/index.en-us.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ninit(name, options, props)\n```\n\n----------------------------------------\n\nTITLE: Filter Menu Props Interface\nDESCRIPTION: Object structure for customizing filter menu behavior with subMenuSelectable and isSelectIconRight options.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/table/__docs__/index.en-us.md#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{subMenuSelectable: false}\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Next UI Components Manually\nDESCRIPTION: JavaScript code demonstrating how to import individual components and their styles from the Next UI library to reduce bundle size.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/README.md#2025-04-10_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Button from '@alifd/next/lib/button';\nimport '@alifd/next/lib/button/style';\n```\n\n----------------------------------------\n\nTITLE: Search Component Internal Functions\nDESCRIPTION: Documentation for internal functions accessible through refs, specifically the focus function.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/search/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数  | 说明                                                                                                                                             | 类型     | 默认值 |\n| ----- | ------------------------------------------------------------------------------------------------------------------------------------------------ | -------- | ------ |\n| focus | 获取焦点<br><br>**签名**:<br> Function(start:Number, end: Number)<br>**参数**:<br>_start_: {Number} 光标起始位置<br>_end_: {Number} 选择结束位置 | Function |        |\n```\n\n----------------------------------------\n\nTITLE: Rendering Select Options Using Children in React\nDESCRIPTION: This snippet demonstrates how to create a Select component with options using the children prop. It shows how to set values, labels, and disable specific options.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/select/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Select>\n    <Select.Option value=\"option1\">option1</Select.Option>\n    <Select.Option value=\"option2\">option2</Select.Option>\n    <Select.Option disabled>disabled</Select.Option>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Installing @alifd/next via NPM in JavaScript\nDESCRIPTION: This snippet shows how to install the @alifd/next library using NPM, which is the recommended method for most projects.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/en-us/quick-start.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @alifd/next --save\n```\n\n----------------------------------------\n\nTITLE: Defining Nav Component API in Markdown\nDESCRIPTION: This code snippet defines the API for the Nav component, including all available props, their types, default values, and descriptions. It covers layout options, navigation modes, and special features like iconOnly mode.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/nav/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Nav\n\n| Param               | Description                                                                                                                                                                                                             | Type                                                                       | Default Value | Required | Supported Version |\n| ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------- | -------- | ----------------- |\n| children            | Navigation item and sub navigation                                                                                                                                                                                      | React.ReactNode                                                            | -             |          | -                 |\n| defaultOpenAll      | Open all subnavs default, only when mode is set to 'inline' and openMode is set to 'multiple'                                                                                                                           | boolean                                                                    | false         |          | -                 |\n| mode                | Sub navigation open mode (horizontal navigation only supports pop up)                                                                                                                                                   | 'inline' \\| 'popup'                                                        | 'inline'      |          | -                 |\n| triggerType         | Sub navigation open trigger                                                                                                                                                                                             | 'click' \\| 'hover'                                                         | 'click'       |          | -                 |\n| openMode            | The open mode of inline sub navigation, expand a peer navigation or multiple navigations at the same level at same time, it only works in inline mode                                                                   | 'single' \\| 'multiple'                                                     | 'multiple'    |          | -                 |\n| inlineIndent        | Inline sub navigation indent distance                                                                                                                                                                                   | number                                                                     | 20            |          | -                 |\n| popupAlign          | Pop up sub navigation alignment (horizontal navigation only supports follow)                                                                                                                                            | 'follow' \\| 'outside'                                                      | 'follow'      |          | -                 |\n| popupClassName      | Pop up navigation custom class name                                                                                                                                                                                     | string                                                                     | -             |          | -                 |\n| selectedKeys        | Keys of selected nav item currently                                                                                                                                                                                     | string \\| Array\\<string>                                                   | -             |          | -                 |\n| defaultSelectedKeys | Keys of selected nav item in default                                                                                                                                                                                    | string \\| Array\\<string>                                                   | []            |          | -                 |\n| onSelect            | Callback function triggered when select or unselect nav item<br/><br/>**signature**:<br/>**params**:<br/>_selectedKeys_: Keys of selected nav item<br/>_item_: Current operation nav item<br/>_extra_: Extra parameters | (selectedKeys: string[], item: SelectableItem, extra: SelectExtra) => void | -             |          | -                 |\n| direction           | Layout of navigation                                                                                                                                                                                                    | 'hoz' \\| 'ver'                                                             | 'ver'         |          | -                 |\n| hozAlign            | Alignment of items in the horizontal nav bar, only works when direction is set to 'hoz' and the header exists                                                                                                           | 'left' \\| 'right'                                                          | 'left'        |          | -                 |\n| header              | Custom navigation head                                                                                                                                                                                                  | React.ReactNode                                                            | -             |          | -                 |\n| footer              | Custom navigation footer                                                                                                                                                                                                | React.ReactNode                                                            | -             |          | -                 |\n| embeddable          | Whether to enable embedded mode                                                                                                                                                                                         | boolean                                                                    | false         |          | 1.18              |\n| type                | Type of navigation                                                                                                                                                                                                      | 'normal' \\| 'primary' \\| 'secondary' \\| 'line'                             | 'normal'      |          | -                 |\n| activeDirection     | The active border direction of the selected item                                                                                                                                                                        | null \\| 'top' \\| 'bottom' \\| 'left' \\| 'right'                             | -             |          | -                 |\n| iconOnly            | Whether to show only icons                                                                                                                                                                                              | boolean                                                                    | -             |          | -                 |\n| iconTextOnly        | Whether to show text in iconOnly mode (only works when iconOnly=true)                                                                                                                                                   | boolean                                                                    | -             |          | -                 |\n| iconOnlyWidth       | IconOnly mode width (only works when iconOnly=true)                                                                                                                                                                     | number \\| string                                                           | -             |          | -                 |\n| hasArrow            | Whether to show arrow (only works when iconOnly=true)                                                                                                                                                                   | boolean                                                                    | true          |          | -                 |\n| hasTooltip          | Whether to show tooltip (only works when iconOnly=true)                                                                                                                                                                 | boolean                                                                    | false         |          | -                 |\n```\n\n----------------------------------------\n\nTITLE: TreeSelect Component API Props Definition in TypeScript\nDESCRIPTION: Complete API documentation table for the TreeSelect component showing all available props including types, default values, and descriptions. Includes configuration options for sizing, placeholder text, search functionality, and value handling.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tree-select/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### TreeSelect\n\n| 参数                     | 说明                                                                                                                                                                                                                                                   | 类型                                                                                                           | 默认值                                | 是否必填 | 支持版本 |\n| ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------- | ------------------------------------- | -------- | -------- |\n| children                 | 树节点                                                                                                                                                                                                                                                 | React.ReactNode                                                                                                | -                                     |          | -        |\n| size                     | 选择框大小                                                                                                                                                                                                                                             | 'small' \\| 'medium' \\| 'large'                                                                                 | 'medium'                              |          | -        |\n| placeholder              | 选择框占位符                                                                                                                                                                                                                                           | string                                                                                                         | -                                     |          | -        |\n| disabled                 | 是否禁用                                                                                                                                                                                                                                               | boolean                                                                                                        | false                                 |          | -        |\n| hasArrow                 | 是否有下拉箭头                                                                                                                                                                                                                                         | boolean                                                                                                        | true                                  |          | -        |\n| hasBorder                | 是否有边框                                                                                                                                                                                                                                             | boolean                                                                                                        | true                                  |          | -        |\n| hasClear                 | 是否有清空按钮                                                                                                                                                                                                                                         | boolean                                                                                                        | true                                  |          | -        |\n| label                    | 自定义内联 label                                                                                                                                                                                                                                       | React.ReactNode                                                                                                | -                                     |          | -        |\n| readOnly                 | 是否只读，只读模式下可以展开弹层但不能选择                                                                                                                                                                                                             | boolean                                                                                                        | -                                     |          | -        |\n| autoWidth                | 下拉框是否与选择器对齐                                                                                                                                                                                                                                 | boolean                                                                                                        | true                                  |          | -        |\n| dataSource               | 数据源，该属性优先级高于 children                                                                                                                                                                                                                      | DataSourceItem[]                                                                                               | -                                     |          | -        |\n| value                    | （受控）当前值                                                                                                                                                                                                                                         | DataSourceItem[] \\| DataSourceItem                                                                             | -                                     |          | -        |\n| defaultValue             | （非受控）默认值                                                                                                                                                                                                                                       | SelectProps['defaultValue']                                                                                    | null                                  |          | -        |\n| preserveNonExistentValue | value/defaultValue 在 dataSource 中不存在时，是否展示                                                                                                                                                                                                  | boolean                                                                                                        | false                                 |          | 1.25     |\n| onChange                 | 选中值改变时触发的回调函数                                                                                                                                                                                                                             | (<br/> value: DataSourceItem[] \\| DataSourceItem,<br/> data: ObjectItem[] \\| ObjectItem \\| null<br/> ) => void | () =\\> \\{\\}                           |          | -        |\n| tagInline                | 是否一行显示，仅在 multiple 和 treeCheckable 为 true 时生效                                                                                                                                                                                            | boolean                                                                                                        | false                                 |          | 1.25     |\n| maxTagPlaceholder        | 隐藏多余 tag 时显示的内容，在 tagInline 生效时起作用<br/><br/>**签名**:<br/>**参数**:<br/>_selectedValues_: 当前已选中的元素<br/>_totalValues_: 总待选元素，treeCheckedStrategy = 'parent' 时为 undefined<br/>**返回值**:<br/>ReactNode \\| HTMLElement | (<br/> selectedValues: ObjectItem[],<br/> totalValues?: ObjectItem[]<br/> ) => React.ReactNode \\| HTMLElement  | -                                     |          | 1.25     |\n| autoClearSearch          | 是否自动清除 searchValue                                                                                                                                                                                                                               | boolean                                                                                                        | true                                  |          | 1.26     |\n| showSearch               | 是否显示搜索框                                                                                                                                                                                                                                         | boolean                                                                                                        | false                                 |          | -        |\n| onSearch                 | 在搜索框中输入时触发的回调函数                                                                                                                                                                                                                         | (keyword: string) => void                                                                                      | () =\\> \\{\\}                           |          | -        |\n```\n\n----------------------------------------\n\nTITLE: Keyboard Accessibility Guide\nDESCRIPTION: Documentation for keyboard accessibility features of the Search component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/search/__docs__/index.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| 按键  | 说明             |     |\n| :---- | :--------------- | --- |\n| Enter | 触发onSearch事件 |     |\n```\n\n----------------------------------------\n\nTITLE: Loading Component API Definition in Markdown\nDESCRIPTION: Markdown table defining the API properties for the Loading component, including parameters like tip, tipAlign, visible, size, indicator, color, fullScreen, disableScroll, children, onVisibleChange, and safeNode. Each property includes type information, default values, and descriptions.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/loading/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数            | 说明                                                                                                                                                                                                        | 类型                                        | 默认值   | 是否必填 |\n| --------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------- | -------- | -------- |\n| tip             | 自定义内容，可以传入 string 或 reactElement                                                                                                                                                                 | React.ReactNode \\| string                   | -        |          |\n| tipAlign        | 自定义内容位置                                                                                                                                                                                              | 'right' \\| 'bottom'                         | 'bottom' |          |\n| visible         | loading 状态, 默认 true                                                                                                                                                                                     | boolean                                     | true     |          |\n| size            | 设置动画尺寸                                                                                                                                                                                                | 'large' \\| 'medium'                         | 'large'  |          |\n| indicator       | 自定义动画                                                                                                                                                                                                  | React.ReactNode                             | -        |          |\n| color           | 动画颜色                                                                                                                                                                                                    | string                                      | -        |          |\n| fullScreen      | 全屏展示                                                                                                                                                                                                    | boolean                                     | -        |          |\n| disableScroll   | 当点击 document 的时候，如果包含该节点则不会关闭弹层，<br/>如果是函数需要返回 ref，如果是字符串则是该 DOM 的 id，也可以直接传入 DOM 节点，或者以上值组成的数组<br/>是否禁用滚动，仅在 fullScreen 模式下生效 | boolean                                     | false    |          |\n| children        | 子元素                                                                                                                                                                                                      | React.ReactNode                             | -        |          |\n| onVisibleChange | 全屏模式下，loading弹层请求关闭时触发的回调函数<br/><br/>**签名**:<br/>**参数**:<br/>_type_: 弹层关闭的来源<br/>_e_: DOM 事件                                                                               | (type: string, e: React.MouseEvent) => void | -        |          |\n| safeNode        | 安全节点，仅在 fullScreen 时有效                                                                                                                                                                            | PopupProps['safeNode']                      | -        |          |\n```\n\n----------------------------------------\n\nTITLE: Installing Next UI Library via NPM\nDESCRIPTION: Command to install the @alifd/next UI library using NPM package manager. This is the recommended installation method for React projects.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @alifd/next --save\n```\n\n----------------------------------------\n\nTITLE: Importing @alifd/next in HTML\nDESCRIPTION: This HTML snippet demonstrates how to include the @alifd/next library directly in a web page using CDN links. It shows both the CSS and JavaScript imports.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/en-us/quick-start.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://unpkg.com/@alifd/next/dist/next.css\">\n\n<script src=\"https://unpkg.com/@alifd/next/dist/next.js\"></script>\n\n// The above ways import latest @alifd/next, we recommend you specify version.\n<script src=\"https://unpkg.com/@alifd/next@1.8.6/dist/next.min.js\"></script>\n\n// Or import as your own static resource\n<script src=\"../build/public/@alifd/next.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining ItemRender Function for Select Component in TypeScript\nDESCRIPTION: This snippet shows the type definition for the itemRender property, which is a function used to render MenuItem content. It takes an item and an optional search value as parameters, returning a React node.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/select/__docs__/index.en-us.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n(item: ObjectItem, searchValue: string | undefined) => React.ReactNode\n```\n\n----------------------------------------\n\nTITLE: Defining ARIA and Keyboard Interactions for Search Component in Markdown\nDESCRIPTION: This snippet outlines the keyboard interactions for the Search component, specifically mentioning the Tab key's functionality for triggering the onSearch event. This information is crucial for accessibility and user interaction documentation.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/search/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## ARIA and KeyBoard\n\n| KeyBoard | Descripiton                |\n| :------- | :------------------------- |\n| Tab      | Trigger the onSearch event |\n```\n\n----------------------------------------\n\nTITLE: Basic Dropdown Component Usage Example\nDESCRIPTION: Example showing how to implement the Dropdown component with click and hover trigger types\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/dropdown/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Dropdown triggerType={[\"click\", \"hover\"]}>\n```\n\n----------------------------------------\n\nTITLE: Configuring babel-plugin-import for @alifd/next\nDESCRIPTION: Babel configuration for setting up babel-plugin-import to work with @alifd/next, enabling automatic on-demand loading of components and styles.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/zh-cn/quick-start.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack babel loader option or .babelrc\n{\n  // ...\n  plugins: [\n    ['import', {\n      libraryName: '@alifd/next',\n      style: true\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Dialog Component TypeScript Interface Properties\nDESCRIPTION: TypeScript interface definitions for Dialog component properties including overlay configuration, localization, dimensions, and display settings.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/dialog/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DialogProps {\n    isFullScreen?: boolean;  // [v2 Deprecated]\n    shouldUpdatePosition?: boolean;  // [v2 Deprecated]\n    minMargin?: number;  // [v2 Deprecated]\n    overlayProps?: OverlayProps;\n    locale?: Partial<{\n        ok: string;\n        cancel: string;\n    }>;\n    height?: string | number;\n    width?: string | number;\n    popupContainer?: string | HTMLElement | ((target?: HTMLElement) => HTMLElement);\n    v2?: false | undefined;\n    noPadding?: boolean;\n    closeIcon?: React.ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ValueRender Function for Select Component in TypeScript\nDESCRIPTION: This snippet defines the type for the valueRender property, which is a function used to customize the rendering of selected values in the Select component. It takes an item and optional Select props as parameters.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/select/__docs__/index.en-us.md#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n(item: ObjectItem, props?: SelectProps) => React.ReactNode\n```\n\n----------------------------------------\n\nTITLE: Documenting Scroll Loading Feature for Fusion Next Menu in Markdown\nDESCRIPTION: This snippet provides documentation for implementing scroll-to-bottom loading functionality in the Alibaba Fusion Next Menu component. It explains how to monitor the menu's onScroll event to automatically load more data when the user reaches the bottom of the menu.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/select/__docs__/demo/select-scroll-load/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=15\n\n# 滚动到底部加载\n\n通过监控 menu的 onScroll 滚动到底部的时候自动加载 dataSource\n\n# en-US order=15\n\n# scroll loading data\n\nloading dataSource while scroll to bottom\n```\n\n----------------------------------------\n\nTITLE: Positioning Overlay Component in HTML with Alignment\nDESCRIPTION: Example of how to position an Overlay component at the top right corner of the page using the align property with 'tr tr' positioning. The component is shown as visible with simple text content.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/overlay/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Overlay visible align=\"tr tr\"><span>123</span></Overlay>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Moment.js Localization\nDESCRIPTION: This webpack configuration snippet shows how to optimize the build size when using Moment.js with @alifd/next. It demonstrates two plugin options: one for including specific locale files, and another for excluding all locale files by default.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/en-us/i18n.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst webpack = require('webpack');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    // package the specified language file\n    new webpack.ContextReplacementPlugin(/moment[\\/\\\\]locale$/, /zh-cn|ja/)\n    // only the language files that have been referenced are packaged, and the application needs to be added as follows: `import 'moment/locale/zh-cn';`\n    // new webpack.IgnorePlugin(/^\\.\\/(locale)$/, /moment$/)\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Drawer Component API in Markdown\nDESCRIPTION: This code snippet defines the API for the Drawer component, including various properties such as closeable, closeMode, cache, title, and others. It specifies the type, default value, and description for each property.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/drawer/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数            | 说明                                                                                                  | 类型                                                                               | 默认值                                       | 是否必填 | 支持版本 |\n| --------------- | ----------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | -------------------------------------------- | -------- | -------- |\n| closeable       | [废弃] 同 closeMode, 控制对话框关闭的方式，                                                           | 'close' \\| 'mask' \\| 'esc' \\| boolean \\| 'close,mask' \\| 'close,esc' \\| 'mask,esc' | true                                         |          | -        |\n| closeMode       | [推荐] 控制对话框关闭的方式                                                                           | CloseMode \\| CloseMode[]                                                           | -                                            |          | 1.21     |\n| cache           | 隐藏时是否保留子节点，不销毁                                                                          | boolean                                                                            | -                                            |          | -        |\n| title           | 标题                                                                                                  | React.ReactNode                                                                    | -                                            |          | -        |\n| bodyStyle       | body 上的样式                                                                                         | React.CSSProperties                                                                | -                                            |          | -        |\n| headerStyle     | header 上的样式                                                                                       | React.CSSProperties                                                                | -                                            |          | -        |\n| animation       | 显示隐藏时动画的播放方式<br/><br/>**签名**:<br/>**参数**:<br/>_animation_: 指定进场和出场动画的对象。 | { in: string; out: string } \\| false                                               | \\{ in: 'expandInDown', out: 'expandOutUp' \\} |          | -        |\n| visible         | 是否显示                                                                                              | boolean                                                                            | -                                            |          | -        |\n| width           | 宽度，仅在 placement 是 left right 的时候生效                                                         | number \\| string                                                                   | -                                            |          | -        |\n| height          | 高度，仅在 placement 是 top bottom 的时候生效                                                         | number \\| string                                                                   | -                                            |          | -        |\n| onClose         | 对话框关闭时触发的回调函数                                                                            | (reason: string, e: React.MouseEvent \\| KeyboardEvent) => void                     | `() => {}`                                   |          | -        |\n| placement       | 位于页面的位置                                                                                        | 'top' \\| 'right' \\| 'bottom' \\| 'left'                                             | 'right'                                      |          | -        |\n| v2              | 开启 v2                                                                                               | false \\| undefined                                                                 | false                                        |          | -        |\n| content         | 内容                                                                                                  | React.ReactNode                                                                    | -                                            |          | -        |\n| popupContainer  | 渲染组件的容器                                                                                        | string \\| HTMLElement \\| null                                                      | -                                            |          | -        |\n| hasMask         | 是否显示遮罩                                                                                          | boolean                                                                            | true                                         |          | -        |\n| afterOpen       | [v2 废弃] 对话框打开后的回调函数                                                                      | () => void                                                                         | -                                            |          | -        |\n| onVisibleChange | [v2 废弃] 受控模式下 (没有 trigger 的时候)，只会在关闭时触发，相当于 onClose                          | (visible: boolean, reason: string, e?: React.MouseEvent) => void                   | -                                            |          | -        |\n```\n\n----------------------------------------\n\nTITLE: Defining VisibleChangeType for Select Component\nDESCRIPTION: Defines the VisibleChangeType union type which represents the various reasons for visibility changes in the Select component, such as item clicks, keyboard events, or tag interactions.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/select/__docs__/index.en-us.md#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport type VisibleChangeType =\n    | 'itemClick'\n    | 'enter'\n    | 'esc'\n    | 'keyDown'\n    | 'selectAll'\n    | 'update'\n    | 'change'\n    | 'tag';\n```\n\n----------------------------------------\n\nTITLE: Importing Complete Theme Package in JavaScript\nDESCRIPTION: Code snippet showing how to import a theme package's styles (either as SCSS or pre-compiled CSS) and then import components from @alifd/next to use with the theme.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/en-us/theme.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@alifd/theme-xxx/index.scss';\n// import '@alifd/theme-xxx/dist/next.css';\n\nimport { Button, Input } from '@alifd/next';\n```\n\n----------------------------------------\n\nTITLE: Defining TreeSelect Props Interface in TypeScript\nDESCRIPTION: This code snippet represents the TypeScript interface for the TreeSelect component props. It includes various properties with their types and default values, covering functionality such as multiple selection, tree checkboxes, expansion control, and custom rendering.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tree-select/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TreeSelectProps {\n  notFoundContent?: React.ReactNode;\n  multiple?: boolean;\n  treeCheckable?: boolean;\n  treeCheckStrictly?: boolean;\n  treeCheckedStrategy?: 'all' | 'parent' | 'child';\n  treeDefaultExpandAll?: boolean;\n  treeDefaultExpandedKeys?: Array<Key>;\n  treeLoadData?: TreeProps['loadData'];\n  treeProps?: TreeProps;\n  defaultVisible?: boolean;\n  visible?: boolean;\n  onVisibleChange?: (visible: boolean, type: string) => void;\n  popupStyle?: React.CSSProperties;\n  popupClassName?: string;\n  popupContainer?: string | HTMLElement | ((target: HTMLElement) => HTMLElement);\n  popupProps?: PopupProps;\n  followTrigger?: boolean;\n  isPreview?: boolean;\n  renderPreview?: (data: ObjectItem[], props: TreeSelectProps) => React.ReactNode;\n  useVirtual?: boolean;\n  filterLocal?: boolean;\n  immutable?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CascaderSelect Props in Markdown\nDESCRIPTION: A markdown table defining the props for the CascaderSelect component. It includes prop names, descriptions, types, default values, and version support information.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader-select/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Param                | Description                                                                                                                                                                                           | Type                                                                                                                                               | Default Value | Required | Supported Version |\n| -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- | ------------- | -------- | ----------------- |\n| size                 | Size                                                                                                                                                                                                  | 'small' \\| 'medium' \\| 'large'                                                                                                                     | 'medium'      |          | -                 |\n| disabled             | Disabled                                                                                                                                                                                              | boolean                                                                                                                                            | false         |          | -                 |\n| hasArrow             | HasArrow                                                                                                                                                                                              | boolean                                                                                                                                            | true          |          | -                 |\n| hasBorder            | HasBorder                                                                                                                                                                                             | boolean                                                                                                                                            | true          |          | -                 |\n| hasClear             | HasClear                                                                                                                                                                                              | boolean                                                                                                                                            | false         |          | -                 |\n| readOnly             | ReadOnly, popup layer can be expanded but cannot be selected in read                                                                                                                                  | boolean                                                                                                                                            | -             |          | -                 |\n| defaultValue         | Default value(not controlled)                                                                                                                                                                         | string \\| Array\\<string>                                                                                                                           | -             |          | -                 |\n| value                | Current value(controlled)                                                                                                                                                                             | string \\| Array\\<string>                                                                                                                           | -             |          | -                 |\n| onChange             | Callback when selected value changes                                                                                                                                                                  | (<br/> value: string \\| Array\\<string> \\| null,<br/> data: CascaderDataItem \\| Array\\<CascaderDataItem> \\| null,<br/> extra?: Extra<br/> ) => void | -             |          | -                 |\n| changeOnSelect       | Whether to call onChange as soon as selected, this property only works in single selection mode                                                                                                       | boolean                                                                                                                                            | false         |          | -                 |\n| displayRender        | Custom render function of selected result                                                                                                                                                             | (<br/> label: Array\\<React.ReactNode>,<br/> data: CascaderSelectDataItem<br/> ) => React.ReactNode                                                 | -             |          | -                 |\n| showSearch           | Show search box                                                                                                                                                                                       | boolean                                                                                                                                            | false         |          | -                 |\n| filter               | Custom search function                                                                                                                                                                                | (searchValue: string, path: CascaderSelectDataItem[]) => boolean                                                                                   | -             |          | -                 |\n| onSearch             | Callback when search value changes                                                                                                                                                                    | (value: string) => void                                                                                                                            | -             |          | 1.23              |\n| resultAutoWidth      | Whether the search result list is the same width as the selection box                                                                                                                                 | boolean                                                                                                                                            | true          |          | -                 |\n| notFoundContent      | Content when no data                                                                                                                                                                                  | React.ReactNode                                                                                                                                    | -             |          | -                 |\n| header               | Custom dropdown header                                                                                                                                                                                | React.ReactNode                                                                                                                                    | -             |          | -                 |\n| footer               | Custom dropdown footer                                                                                                                                                                                | React.ReactNode                                                                                                                                    | -             |          | -                 |\n| defaultVisible       | Visible by default                                                                                                                                                                                    | boolean                                                                                                                                            | false         |          | -                 |\n| visible              | Current visible                                                                                                                                                                                       | boolean                                                                                                                                            | -             |          | -                 |\n```\n\n----------------------------------------\n\nTITLE: Defining CascaderSelect Data Structure in JavaScript\nDESCRIPTION: Example showing the data structure for CascaderSelect's dataSource prop. Demonstrates a hierarchical structure with cities and districts, including disabled items and custom attributes.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader-select/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataSource = [\n    {\n        value: '2974',\n        label: '西安',\n        children: [\n            { value: '2975', label: '西安市', disabled: true },\n            { value: '2976', label: '高陵县', checkboxDisabled: true },\n            { value: '2977', label: '蓝田县' },\n            { value: '2978', label: '户县' },\n            { value: '2979', label: '周至县' },\n            { value: '4208', label: '灞桥区' },\n            { value: '4209', label: '长安区' },\n            { value: '4210', label: '莲湖区' },\n            { value: '4211', label: '临潼区' },\n            { value: '4212', label: '未央区' },\n            { value: '4213', label: '新城区' },\n            { value: '4214', label: '阎良区' },\n            { value: '4215', label: '雁塔区' },\n            { value: '4388', label: '碑林区' },\n            { value: '610127', label: '其它区' },\n        ],\n    },\n];\n```\n\n----------------------------------------\n\nTITLE: Using field.watch and Field.useWatch in Alibaba Fusion Next\nDESCRIPTION: This snippet demonstrates the usage of field.watch and Field.useWatch to monitor field value changes in Alibaba Fusion Next. Field.useWatch is a React hook that requires React version 16.8 or higher.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/field/__docs__/demo/watch/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=13\n\n# Watch\n\n使用 `field.watch` 或 `Field.useWatch` 来监听字段值变化. `Field.useWatch` 是一个react hook, 依赖 `react@^16.8`.\n\n# en-US order=13\n\n# Watch\n\nUse `field.watch` or `Field.useWatch` to watch the value change event of field. `Field.useWatch` is a react hook, depend `react@^16.8`.\n```\n\n----------------------------------------\n\nTITLE: Defining HighlightChangeType for Select Component\nDESCRIPTION: Defines the HighlightChangeType union type which represents the various reasons for highlight changes in the Select component, such as keyboard navigation or automatic highlighting of the first item.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/select/__docs__/index.en-us.md#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport type HighlightChangeType = 'up' | 'down' | 'autoFirstItem' | 'highlightKeyToNull';\n```\n\n----------------------------------------\n\nTITLE: Configuring TreeSelect Data Source Structure\nDESCRIPTION: Example showing the data structure format for TreeSelect component with nested nodes, demonstrating various node properties like selectable, disabled, and custom labels\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tree-select/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataSource = [\n    {\n        label: 'A',\n        value: '1',\n        key: '1',\n        selectable: false,\n        children: [\n            {\n                label: 'AA',\n                value: '2',\n                key: '2',\n                children: [\n                    {\n                        label: 'AAA',\n                        value: '4',\n                        key: '4',\n                        disableCheckbox: true,\n                    },\n                    {\n                        label: 'AAB',\n                        value: '5',\n                        key: '5',\n                        disabled: true,\n                    },\n                ],\n            },\n            {\n                label: 'AB',\n                value: '3',\n                key: '3',\n                children: [\n                    {\n                        label: 'ABA',\n                        value: '6',\n                        key: '6',\n                    },\n                ],\n            },\n        ],\n    },\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Card Component API in Markdown\nDESCRIPTION: This snippet defines the API for the main Card component, listing its props, their types, default values, and descriptions.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/card/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Card\n\n| 参数            | 说明                                                                                             | 类型             | 默认值 | 是否必填 | 支持版本 |\n| --------------- | ------------------------------------------------------------------------------------------------ | ---------------- | ------ | -------- | -------- |\n| media           | 卡片的上的图片 / 视频                                                                            | ReactNode        | -      |          | -        |\n| title           | 卡片的标题                                                                                       | ReactNode        | -      |          | -        |\n| subTitle        | 卡片的副标题                                                                                     | ReactNode        | -      |          | -        |\n| actions         | 卡片操作组，位置在卡片底部                                                                       | ReactNode        | -      |          | -        |\n| showTitleBullet | 是否显示标题的项目符号                                                                           | boolean          | true   |          | -        |\n| showHeadDivider | 是否展示头部的分隔线                                                                             | boolean          | true   |          | -        |\n| contentHeight   | 内容区域的固定高度                                                                               | string \\| number | 120    |          | -        |\n| extra           | 标题区域的用户自定义内容                                                                         | ReactNode        | -      |          | -        |\n| free            | 是否开启自由模式，开启后 card 将使用子组件配合使用，设置此项后 title, subtitle, 等等属性都将失效 | boolean          | false  |          | -        |\n| hasBorder       | 是否带边框                                                                                       | boolean          | true   |          | 1.24     |\n```\n\n----------------------------------------\n\nTITLE: Custom Response Formatter Implementation in JSX\nDESCRIPTION: Example of using the formatter prop to transform irregular server responses into the required format for the Upload component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/upload/__docs__/index.md#2025-04-10_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Upload\n    action=\"http://127.0.0.1:3001/upload\"\n    formatter={(res, file) => {\n        // 函数里面根据当前服务器返回的响应数据\n        // 重新拼装符合组件要求的数据格式\n        return {\n            success: res.status === 'success',\n            url: res.img_src,\n        };\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Response Formatter Implementation in JSX\nDESCRIPTION: Example of using the formatter prop to transform irregular server responses into the required format for the Upload component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/upload/__docs__/index.md#2025-04-10_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Upload\n    action=\"http://127.0.0.1:3001/upload\"\n    formatter={(res, file) => {\n        // 函数里面根据当前服务器返回的响应数据\n        // 重新拼装符合组件要求的数据格式\n        return {\n            success: res.status === 'success',\n            url: res.img_src,\n        };\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing All-Check with Controlled Checkbox.Group in React\nDESCRIPTION: This code snippet demonstrates how to create an all-check functionality using a controlled Checkbox.Group component with intermediate states. It includes a parent checkbox for selecting all options and individual checkboxes for each option.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/checkbox/__docs__/demo/all-check/index.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Checkbox } from '@alifd/next';\n\nconst CheckboxGroup = Checkbox.Group;\n\nclass App extends React.Component {\n    state = {\n        value: ['orange'],\n    };\n\n    onChange = (value) => {\n        this.setState({\n            value: value,\n        });\n    };\n\n    onCheckAll = (checked) => {\n        this.setState({\n            value: checked ? ['orange', 'apple', 'pear'] : [],\n        });\n    };\n\n    render() {\n        const dataSource = [\n            {\n                value: 'apple',\n                label: 'Apple',\n            },\n            {\n                value: 'pear',\n                label: 'Pear',\n            },\n            {\n                value: 'orange',\n                label: 'Orange',\n            },\n        ];\n        const { value } = this.state;\n\n        return (\n            <div>\n                <p style={{marginBottom: '10px'}}>\n                    <Checkbox\n                        checked={value.length === 3}\n                        indeterminate={value.length < 3 && value.length > 0}\n                        onChange={this.onCheckAll}\n                    >\n                        Check All\n                    </Checkbox>\n                </p>\n                <CheckboxGroup\n                    value={value}\n                    dataSource={dataSource}\n                    onChange={this.onChange}\n                />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, mountNode);\n```\n\n----------------------------------------\n\nTITLE: Defining HighlightChangeType for Select/AutoComplete in TypeScript\nDESCRIPTION: Defines a type alias HighlightChangeType for use in the Select/AutoComplete component. It represents the possible values for highlight changes.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/select/__docs__/index.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type HighlightChangeType = 'up' | 'down' | 'autoFirstItem' | 'highlightKeyToNull';\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for On-Demand Theme Loading\nDESCRIPTION: Webpack configuration for on-demand loading of Alibaba Fusion theme packages. Includes babel-plugin-import, next-theme-loader, and next-theme-webpack-plugin setup.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/zh-cn/theme.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst webpack = require('webpack');\nconst ThemePlugin = require('@alifd/next-theme-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.jsx',\n    },\n    output: {\n        path: path.join(__dirname, 'build'),\n        filename: '[name].js',\n    },\n    resolve: {\n        extensions: ['.js', '.jsx'],\n    },\n    devtool: 'inline-source-map',\n    module: {\n        rules: [\n            {\n                test: /\\.jsx?$/,\n                use: {\n                    loader: 'babel-loader',\n                    options: {\n                        presets: ['env', 'react', 'stage-0'],\n                        plugins: [\n                            'add-module-exports',\n                            'transform-decorators-legacy',\n                            ['import', {\n                                libraryName: '@alifd/next',\n                                style: true\n                             }],\n                        ],\n                    },\n                },\n                exclude: /node_modules/,\n            },\n            {\n                test: /\\.css$/,\n                use: ExtractTextPlugin.extract({\n                    use: 'css-loader',\n                }),\n            },\n            {\n                test: /\\.scss$/,\n                use: ExtractTextPlugin.extract({\n                    use: [\n                        'css-loader',\n                        'fast-sass-loader',\n                        {\n                            // 添加 @alifd/next-theme-loader，引入自定义主题样式对应的 scss 变量\n                            loader: '@alifd/next-theme-loader',\n                            options: {\n                                theme: '@alifd/theme-xxx',\n                                // 基准包，默认是@alifd/next\n                                base: '@alifd/next',\n                                // 注入变量，来编译组件样式\n                                // 支持 Object 和 String ， 如果是 String 请写绝对路径 例如: modifyVars: path.join(__dirname, 'variable.scss')\n                                // 以下为Object\n                                modifyVars: {\n                                    '$css-prefix': '\"myprefix-\"',\n                                },\n                            },\n                        },\n                    ],\n                }),\n            },\n        ],\n    },\n    plugins: [\n        // 添加 @alifd/next-theme-webpack-plugin，引入 normalize 样式以及自定义 icon 定义\n        new ThemePlugin({\n            theme: '@alifd/theme-xxx',\n            // 基准包，默认是@alifd/next\n            libraryName: '@alifd/next',\n            // 是否将内置的normalize样式添加到最终的样式包中，默认为true\n            prependNormalizeCSS: true,\n            // 注入变量，来编译normalize和icon样式\n            // 支持 Object 和 String ， 如果是 String 请写绝对路径 例如: modifyVars: path.join(__dirname, 'variable.scss')\n            // 以下为Object\n            modifyVars: {\n                '$css-prefix': '\"myprefix-\"',\n            },\n        }),\n        new ExtractTextPlugin('[name].css'),\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up TreeSelect Data Structure in JavaScript\nDESCRIPTION: Example of how to structure data for the TreeSelect component. The structure includes nested nodes with properties like label, value, key, and various state flags like selectable, disabled, etc.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tree-select/__docs__/index.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataSource = [\n    {\n        label: '服装',\n        value: '1',\n        key: '1',\n        selectable: false,\n        children: [\n            {\n                label: '男装',\n                value: '2',\n                key: '2',\n                children: [\n                    {\n                        label: '外套',\n                        value: '4',\n                        key: '4',\n                        disableCheckbox: true,\n                    },\n                    {\n                        label: '夹克',\n                        value: '5',\n                        key: '5',\n                        disabled: true,\n                    },\n                ],\n            },\n            {\n                label: '女装',\n                value: '3',\n                key: '3',\n                children: [\n                    {\n                        label: '裙子',\n                        value: '6',\n                        key: '6',\n                    },\n                ],\n            },\n        ],\n    },\n];\n```\n\n----------------------------------------\n\nTITLE: Installing @alifd/next with npm\nDESCRIPTION: Command to install @alifd/next using npm package manager, which is the recommended installation method.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/zh-cn/quick-start.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @alifd/next --save\n```\n\n----------------------------------------\n\nTITLE: Creating ConfigProvider-Compatible Components\nDESCRIPTION: Shows how to create components that work with ConfigProvider by implementing necessary props and using the config HOC.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/config-provider/__docs__/index.en-us.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ConfigProvider } from '@alifd/next';\nimport locale from './locale';\n\nconst { config } = ConfigProvider;\n\nclass Component extends React.Component {\n    static propTypes = {\n        prefix: PropTypes.string,\n        locale: PropTypes.object,\n        pure: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        prefix: 'next-',\n        locale: locale,\n        pure: false,\n    };\n\n    render() {\n        const { prefix, locale, pure } = this.props;\n        // ...\n    }\n}\n\nexport default config(Component);\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Component Data Structure in JavaScript\nDESCRIPTION: This code demonstrates the hierarchical data structure used for the Tree component. Each item in the dataSource array contains a value, label, and optional children array, with support for custom properties like disabled and checkboxDisabled that get passed to the onChange function.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader-select/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataSource = [\n    {\n        value: '2974',\n        label: '西安',\n        children: [\n            { value: '2975', label: '西安市', disabled: true },\n            { value: '2976', label: '高陵县', checkboxDisabled: true },\n            { value: '2977', label: '蓝田县' },\n            { value: '2978', label: '户县' },\n            { value: '2979', label: '周至县' },\n            { value: '4208', label: '灞桥区' },\n            { value: '4209', label: '长安区' },\n            { value: '4210', label: '莲湖区' },\n            { value: '4211', label: '临潼区' },\n            { value: '4212', label: '未央区' },\n            { value: '4213', label: '新城区' },\n            { value: '4214', label: '阎良区' },\n            { value: '4215', label: '雁塔区' },\n            { value: '4388', label: '碑林区' },\n            { value: '610127', label: '其它区' },\n        ],\n    },\n];\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for Cascader Props\nDESCRIPTION: Type definitions for the Cascader component props including data source configuration, value handling, event callbacks, and visual customization options.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CascaderProps {\n    dataSource: Array<CascaderDataItem>;\n    defaultValue?: string | Array<string>;\n    value?: string | Array<string>;\n    onChange?: (value: string | Array<string>, data: CascaderDataItem | Array<CascaderDataItem>, extra: Extra) => void;\n    onSelect?: (v: string, data: CascaderDataItemWithPosInfo, extra: Extra) => void;\n    defaultExpandedValue?: Array<string>;\n    expandedValue?: Array<string>;\n    expandTriggerType?: 'click' | 'hover';\n    onExpand?: (expandedValue: Array<string>) => void;\n    useVirtual?: boolean;\n    multiple?: boolean;\n    canOnlySelectLeaf?: boolean;\n    canOnlyCheckLeaf?: boolean;\n    checkStrictly?: boolean;\n    listStyle?: React.CSSProperties;\n    listClassName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Alibaba Fusion Theme Package\nDESCRIPTION: Command to install a custom theme package for Alibaba Fusion Next component library.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/zh-cn/theme.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @alifd/theme-xxx --save\n```\n\n----------------------------------------\n\nTITLE: Installing Theme Package with npm\nDESCRIPTION: Command to install a custom theme package for Alibaba Fusion Next. The theme package is maintained as an npm package and contains SCSS variables for styling customization.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/en-us/theme.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @alifd/theme-xxx --save\n```\n\n----------------------------------------\n\nTITLE: Updating Field Data from Props in React Lifecycle\nDESCRIPTION: Demonstrates how to update Field data based on component lifecycle methods. It shows setting initial data in componentWillMount and updating data when new props are received in componentWillReceiveProps.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/field/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nClass Demo extends React.Component {\n    Field = new Field(this);\n\n    // Set the data before the component is mounted (this can be replaced with initValue)\n    componentWillMount() {\n        this.field.setValue('name', 'init Name')\n    }\n    // Receive data from props\n    componentWillReceiveProps(nextProps) {\n        this.field.setValue('name', nextProps.name)\n    }\n    Render() {\n        Const init = this.field.init;\n\n        Return <div>\n            <Input {...init('name')} />\n        </div>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Uncontrolled DatePicker Usage Examples (JSX)\nDESCRIPTION: These examples show different ways to use DatePicker in an uncontrolled manner, including default values and handling changes.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker/__docs__/index.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker onChange={val => console.log(val)} />\n// select 2019-01-23\n// >> MomentObject\n\n<DatePicker defaultValue={moment()} onChange={val => console.log(val)} />\n// select 2019-01-23\n// >> MomentObject\n\n<DatePicker defaultValue=\"2018-01-23\" onChange={val => console.log(val)} />\n// select 2019-01-23\n// >> \"2019-01-23\"\n\n<DatePicker defaultValue={moment(1581938105000)} onChange={val => console.log(val)} />\n// select 2020-02-17\n// >> \"2020-02-17\"\n```\n\n----------------------------------------\n\nTITLE: Defining Extra Type for Cascader Events\nDESCRIPTION: TypeScript interface for extra data passed during cascader events including selected paths and checked states.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Extra = {\n    /**\n     * 单选时选中的数据的路径\n     */\n    selectedPath?: Array<CascaderDataItem>;\n    /**\n     * 多选时当前的操作是选中还是取消选中\n     */\n    checked?: boolean;\n    /**\n     * 多选时当前操作的数据\n     */\n    currentData?: CascaderDataItem;\n    /**\n     * 多选时所有被选中的数据\n     */\n    checkedData?: Array<CascaderDataItem>;\n    /**\n     * 多选时半选的数据\n     */\n    indeterminateData?: Array<CascaderDataItem>;\n};\n```\n\n----------------------------------------\n\nTITLE: Including @alifd/next in browser with CDN\nDESCRIPTION: HTML code sample showing how to include the @alifd/next library directly in the browser using script and link tags. Demonstrates different ways to reference the library, including using unpkg CDN.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/zh-cn/quick-start.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://unpkg.com/@alifd/next/dist/next.css\">\n\n<script src=\"https://unpkg.com/@alifd/next/dist/next.js\"></script>\n\n// 以上引入都是引入的最新版本 @alifd/next ，但我们推荐引入固定版本的next组件，以保证代码稳定\n<script src=\"https://unpkg.com/@alifd/next@1.8.6/dist/next.min.js\"></script>\n\n// 或作为自己的静态资源引入\n<script src=\"../build/public/@alifd/next.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring locale settings for Calendar using dayjs\nDESCRIPTION: This snippet demonstrates how to set up the Calendar component with localization using dayjs and ConfigProvider. It imports the English locale for dayjs and configures the DatePicker2 component to use English language settings through ConfigProvider.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/calendar2/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DatePicker2, ConfigProvider } from '@alifd/next';\nimport 'dayjs/locale/en';\nimport en from '@alifd/next/lib/locale/en-us';\n\nfunction App() {\n    return (\n        <ConfigProvider locale={en}>\n            <DatePicker2 />\n        </ConfigProvider>\n    );\n}\nReactDOM.render(<App />, mountNode);\n```\n\n----------------------------------------\n\nTITLE: DatePicker.WeekPicker Properties Table in Markdown\nDESCRIPTION: A markdown table listing all properties of the DatePicker.WeekPicker component, including their descriptions, types, default values, and whether they are required.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Param                | Description                                             | Type                                                               | Default Value | Required |\n| -------------------- | ------------------------------------------------------- | ------------------------------------------------------------------ | ------------- | -------- |\n| value                | Date value (controlled) moment object                   | string \\| Moment \\| null                                           | -             |          |\n| defaultValue         | Initial date value, moment object                       | string \\| Moment \\| null                                           | -             |          |\n| visible              | Pop                                                     | boolean                                                            | -             |          |\n| defaultVisible       | Pop                                                     | boolean                                                            | -             |          |\n| format               | Date value format (for limiting user input and display) | string                                                             | 'GGGG         |          |\n| onChange             | Callback when the date value changes                    | (value: Moment \\| string \\| null) => void                          | -             |          |\n| onVisibleChange      | Callback when the pop                                   | (visible: boolean, reason: string) => void                         | -             |          |\n| renderPreview        | Preview state custom rendering function                 | (value: Moment \\| null, props: DatePickerProps) => React.ReactNode | -             |          |\n| dateCellRender       | Custom date rendering function                          | (calendarDate: Moment) => React.ReactNode                          | -             |          |\n| label                | Input box built                                         | React.ReactNode                                                    | -             |          |\n| state                | Input box status                                        | 'success' \\| 'loading' \\| 'error'                                  | -             |          |\n| defaultVisibleMonth  | Default displayed month                                 | () => Moment                                                       | false         |          |\n| onVisibleMonthChange | Callback when the pop                                   | (value: Moment, reason: string) => void                            | -             |          |\n| disabledDate         | Disable date function                                   | (date: Moment, view: string) => boolean                            | -             |          |\n| footerRender         | Custom panel footer                                     | () => React.ReactNode                                              | -             |          |\n| size                 | Input box size                                          | 'small' \\| 'medium' \\| 'large'                                     | 'medium'      |          |\n| disabled             | Whether to disable                                      | boolean                                                            | -             |          |\n| hasClear             | Whether to display the clear button                     | boolean                                                            | true          |          |\n| popupTriggerType     | Pop                                                     | 'click' \\| 'hover'                                                 | 'click'       |          |\n| popupAlign           | Pop                                                     | string                                                             | 'tl tl'       |          |\n| popupContainer       | Pop                                                     | PopupProps['container']                                            | -             |          |\n| popupStyle           | Pop                                                     | React.CSSProperties                                                | -             |          |\n| popupClassName       | Pop                                                     | string                                                             | -             |          |\n| popupProps           | Pop                                                     | React.PropsWithRef\\<PopupProps>                                    | -             |          |\n| popupComponent       | Custom pop                                              | React.ComponentType\\<unknown>                                      | -             |          |\n| popupContent         | Custom pop                                              | React.ReactElement                                                 | -             |          |\n| followTrigger        | Whether Pop                                             | boolean                                                            | -             |          |\n| inputProps           | Input box other attributes                              | InputProps                                                         | -             |          |\n| monthCellRender      | Custom month rendering function                         | (calendarDate: Moment) => React.ReactNode                          | -             |          |\n| yearCellRender       | Custom year rendering function                          | (calendarDate: Moment) => React.ReactNode                          | -             |          |\n| isPreview            | Whether it is a preview state                           | boolean                                                            | -             |          |\n```\n\n----------------------------------------\n\nTITLE: Defining RangePickerProps Interface in TypeScript\nDESCRIPTION: This snippet shows the type definition for the renderPreview prop of the DatePicker component. It defines a function that takes a value (array of two Moment objects or null) and props (RangePickerProps) and returns a React node.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(<br/> value: [Moment | null, Moment | null],<br/> props: RangePickerProps<br/> ) => React.ReactNode\n```\n\n----------------------------------------\n\nTITLE: Example Cascader Data Structure\nDESCRIPTION: JavaScript example showing the expected data structure for the cascader component with nested items and various states.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader/__docs__/index.en-us.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataSource = [\n    {\n        value: '2974',\n        label: 'A',\n        children: [\n            { value: '2975', label: 'B', disabled: true },\n            { value: '2976', label: 'C', checkboxDisabled: true },\n            { value: '2977', label: 'D' },\n            { value: '2978', label: 'E' },\n            { value: '2979', label: 'F' },\n            { value: '4208', label: 'G' },\n            { value: '4209', label: 'H' },\n            { value: '4210', label: 'I' },\n            { value: '4211', label: 'J' },\n            { value: '4212', label: 'K' },\n            { value: '4213', label: 'L' },\n            { value: '4214', label: 'M' },\n            { value: '4215', label: 'N' },\n            { value: '4388', label: 'O' },\n            { value: '610127', label: 'P' },\n        ],\n    },\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Locale for ConfigProvider in JSX\nDESCRIPTION: Example of how to set the locale for ConfigProvider to enable multi-language support in Next components.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/config-provider/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ConfigProvider, DatePicker } from '@alifd/next';\nimport enUS from '@alifd/next/lib/locale/en-us';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <ConfigProvider locale={enUS}>\n                <DatePicker />\n            </ConfigProvider>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Header Table Implementation\nDESCRIPTION: Demonstrates how to create a table with multiple headers using Table.ColumnGroup to wrap Table.Column components.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/table/__docs__/index.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Table } from '@alifd/next';\n\nconst dataSource = [{id: 1, time: '2016'}];\nReactDOM.render(\n    <Table dataSource={dataSource}>\n        <Table.ColumnGroup>\n            <Table.Column title=\"Id\" dataIndex=\"id\"/>\n            <Table.Column title=\"Time\" dataIndex=\"time\"/>\n        </Table.ColumnGroup>\n        <Table.ColumnGroup>\n            <Table.Column title=\"Id\" dataIndex=\"id\"/>\n        </Table.ColumnGroup>\n    </Table>, mountNode);\n```\n\n----------------------------------------\n\nTITLE: Injecting Roboto Font Path Variable in SCSS\nDESCRIPTION: Shows how to inject the $font-custom-path variable before importing the theme package index.scss file. This allows specifying a custom path for Roboto font files.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/zh-cn/font-deploy.md#2025-04-10_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n// 注意，最后以 / 结束\n$font-custom-path: \"//g.alicdn.com/font-path/\";\n@improt \"~@alifd/theme-xxx/index.scss\";\n```\n\n----------------------------------------\n\nTITLE: Defining List Component API in Markdown\nDESCRIPTION: This snippet defines the API for the List component, including various props such as header, footer, size, divider, and custom rendering options. It also includes information on loading states and empty content display.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/list/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### List\n\n| Param            | Description                                                                                                                                                  | Type                                               | Default Value | Required |\n| ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------------------------------- | ------------- | -------- |\n| header           | List header                                                                                                                                                  | ReactNode                                          | -             |          |\n| footer           | List footer                                                                                                                                                  | ReactNode                                          | -             |          |\n| size             | List size                                                                                                                                                    | 'medium' \\| 'small'                                | 'medium'      |          |\n| divider          | Whether to show the divider                                                                                                                                  | boolean                                            | true          |          |\n| children         | -                                                                                                                                                            | ReactNode                                          | -             |          |\n| dataSource       | List item data source                                                                                                                                        | DataItem[]                                         | -             |          |\n| renderItem       | **signature**:<br/>**params**:<br/>_current_: The current item<br/>_index_: The index of the current item<br/>**return**:<br/>The ReactElement be customized | (current: DataItem, index: number) => ReactElement | -             |          |\n| loading          | Loading state control                                                                                                                                        | boolean                                            | false         |          |\n| loadingComponent | Custom Loading component<br/><br/>**signature**:<br/>**params**:<br/>_props_: Pass through props<br/>**return**:<br/>Custom Loading component                | (props: LoadingProps) => ReactElement              | -             |          |\n| emptyContent     | The content displayed when the list is empty                                                                                                                 | ReactNode                                          | -             |          |\n```\n\n----------------------------------------\n\nTITLE: Date Change Callback in DatePicker.WeekPicker\nDESCRIPTION: Callback function triggered when the selected date changes in the DatePicker.WeekPicker component. It returns a MomentObject representing the new date value.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker2/__docs__/index.en-us.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nFunction() => MomentObject\n```\n\n----------------------------------------\n\nTITLE: Defining CascaderDataItemWithPosInfo Type in TypeScript\nDESCRIPTION: Extends the basic CascaderDataItem with position information. This type includes a 'pos' property for tracking the item's position in the hierarchy and an optional _source reference to the original data item.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader/__docs__/index.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CascaderDataItemWithPosInfo = CascaderDataItem & {\n    /**\n     * 位置信息\n     */\n    pos: string;\n    _source?: CascaderDataItem;\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Component Style Example for ResponsiveGrid\nDESCRIPTION: Demonstrates the correct and incorrect ways to implement custom components within ResponsiveGrid to properly handle spacing through style props.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/responsive-grid/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// wrong\nfunction Foo() {\n    return <div />;\n}\n\n// correct\nfunction Foo({ style }) {\n    return <div style={style} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Pure Render Mode\nDESCRIPTION: Example showing how to enable Pure Render mode using ConfigProvider to improve performance.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/config-provider/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ConfigProvider, DatePicker } from '@alifd/next';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <ConfigProvider pure>\n                <DatePicker />\n            </ConfigProvider>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ResponsiveGrid Props in Markdown\nDESCRIPTION: This code snippet defines the API for the ResponsiveGrid component, including props like device, columns, gap, component, and dense. It uses a markdown table to present the information.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/responsive-grid/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Param     | Description                                  | Type                              | Default Value | Required |\n| --------- | -------------------------------------------- | --------------------------------- | ------------- | -------- |\n| device    | Device for responsive C                      | 'phone' \\| 'tablet' \\| 'desktop'  | 'desktop'     |          |\n| columns   | How many columns in total, 12 by default     | number \\| string                  | '12'          |          |\n| gap       | Gap among each cell [bottom&top, right&left] | Spacing                           | -             |          |\n| component | The html tag to be rendered                  | keyof React.JSX.IntrinsicElements | 'div'         |          |\n| dense     | Fill as closely as possible without spaces   | boolean                           | 'false'       |          |\n```\n\n----------------------------------------\n\nTITLE: Defining RangeValueType in TypeScript\nDESCRIPTION: Defines the RangeValueType as either a number or an array of two numbers, used for single and double slider configurations respectively.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/range/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RangeValueType = number | [number, number];\n```\n\n----------------------------------------\n\nTITLE: Custom Component Integration with Field Reset Handling\nDESCRIPTION: Example showing how to implement componentWillReceiveProps to handle the reset functionality in custom components integrated with Field. Demonstrates proper handling of undefined values during field reset operations.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/field/__docs__/index.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\ncomponentWillReceiveProps(nextProps) {\n    if ('value' in nextProps ) {\n        this.setState({\n           value: nextProps.value === undefined? []: nextProps.value   //  设置组件的被清空后的数值\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Cascader Data Structure in JavaScript\nDESCRIPTION: Demonstrates the structure of a dataSource array for the Cascader component. Shows how to define a hierarchical structure with cities and districts, including various states like disabled and checkboxDisabled for certain items.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader/__docs__/index.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataSource = [\n    {\n        value: '2974',\n        label: '西安',\n        children: [\n            { value: '2975', label: '西安市', disabled: true },\n            { value: '2976', label: '高陵县', checkboxDisabled: true },\n            { value: '2977', label: '蓝田县' },\n            { value: '2978', label: '户县' },\n            { value: '2979', label: '周至县' },\n            { value: '4208', label: '灞桥区' },\n            { value: '4209', label: '长安区' },\n            { value: '4210', label: '莲湖区' },\n            { value: '4211', label: '临潼区' },\n            { value: '4212', label: '未央区' },\n            { value: '4213', label: '新城区' },\n            { value: '4214', label: '阎良区' },\n            { value: '4215', label: '雁塔区' },\n            { value: '4388', label: '碑林区' },\n            { value: '610127', label: '其它区' },\n        ],\n    },\n];\n```\n\n----------------------------------------\n\nTITLE: Message Configuration Example\nDESCRIPTION: Demonstrates how to configure multiple message instances with custom settings for duration, position and count.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/message/__docs__/index.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMessage.config({\n    top: 100,\n    duration: 2000,\n    maxCount: 3,\n});\n```\n\n----------------------------------------\n\nTITLE: Timeline Component API Properties Table\nDESCRIPTION: Markdown table defining the API properties for the main Timeline component, including fold options, styling, animation and display mode configurations.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/timeline/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数      | 说明                                        | 类型                  | 默认值 | 是否必填 | 支持版本 |\n| --------- | ------------------------------------------- | --------------------- | ------ | -------- | -------- |\n| fold      | 自定义折叠选项                              | Array\\<FoldItem>      | -      |          | -        |\n| className | 自定义类名                                  | string                | -      |          | -        |\n| animation | 展示动画                                    | boolean               | true   |          | -        |\n| mode      | 展示的模式，left 为左，alternate 为交替显示 | 'left' \\| 'alternate' | 'left' |          | 1.23.18  |\n```\n\n----------------------------------------\n\nTITLE: Edge Event Handler Type Definition\nDESCRIPTION: TypeScript type definition for the edgeEvent callback that is triggered when sliding to the edge of the carousel.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/slider/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n(swipeDirection: 'left' | 'right') => void\n```\n\n----------------------------------------\n\nTITLE: Menu Component Type Definitions\nDESCRIPTION: TypeScript type definitions for Menu component props showing all available configuration options including submenu control, selection modes, and styling properties.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/menu/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MenuProps {\n  children?: React.ReactNode;\n  openKeys?: string | string[];\n  defaultOpenKeys?: string | string[];\n  defaultOpenAll?: boolean;\n  onOpen?: (keys: string[], extra: { key: string; open: boolean }) => void;\n  mode?: 'inline';\n  triggerType?: 'click' | 'hover';\n  openMode?: 'single' | 'multiple';\n  inlineIndent?: number;\n  popupAutoWidth?: boolean;\n  popupAlign?: 'follow' | 'outside';\n  popupProps?: PopupProps | ((popupItemProps: PopupItemProps) => PopupProps);\n  popupClassName?: string;\n  popupStyle?: React.CSSProperties;\n  selectedKeys?: string | string[];\n  defaultSelectedKeys?: string | string[];\n  onSelect?: (selectedKeys: string[], item: SelectableItem, extra: SelectExtra) => void;\n  selectMode?: 'single' | 'multiple';\n  shallowSelect?: boolean;\n  hasSelectedIcon?: boolean;\n  isSelectIconRight?: boolean;\n  direction?: 'ver' | 'hoz';\n  hozAlign?: 'left' | 'right';\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Dot Notation to Nested Objects in Next Form Field\nDESCRIPTION: Demonstrates how to use parseName=true to transform dot notation form field names into structured JavaScript objects. The examples show converting a string property path to a nested object and an array index notation to an array.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/field/__docs__/demo/topath/index.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninit('obj.b')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nobj={obj:{b:'value'}}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ninit('arr.0')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nobj={arr:['']}\n```\n\n----------------------------------------\n\nTITLE: Defining Input Component Properties in TypeScript\nDESCRIPTION: This snippet shows the TypeScript type definitions for various properties of an Input component. It includes properties for styling, behavior, and customization of the input field.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/input/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InputProps {\n  hasBorder?: boolean;\n  size?: 'small' | 'medium' | 'large';\n  onPressEnter?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  hint?: string | React.ReactNode;\n  innerBefore?: React.ReactNode;\n  innerAfter?: React.ReactNode;\n  addonBefore?: React.ReactNode;\n  addonAfter?: React.ReactNode;\n  addonTextBefore?: React.ReactNode;\n  addonTextAfter?: React.ReactNode;\n  autoComplete?: string;\n  autoFocus?: boolean;\n  isPreview?: boolean;\n  renderPreview?: (value: string | number | undefined, props: InputProps) => React.ReactNode;\n  composition?: boolean;\n  hoverShowClear?: boolean;\n  extra?: React.ReactNode;\n  htmlSize?: string;\n  inputRender?: (input: React.ReactElement) => React.ReactNode;\n  inputStyle?: React.CSSProperties;\n  inputClassName?: string;\n  innerBeforeClassName?: string;\n  innerAfterClassName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Virtual List Component API Table\nDESCRIPTION: Markdown table documenting the API properties of the VirtualList component, including parameters, types, default values, and requirements.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/virtual-list/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Param          | Description                                                                                                                                                                                   | Type                                                                                                                                           | Default Value                                | Required |\n| -------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------- | -------- |\n| children       | Children of the virtual list component                                                                                                                                                        | React.ReactElement \\| Array\\<React.ReactElement \\| undefined \\| null>                                                                          | -                                            |          |\n| minSize        | The minimum number of items to be loaded                                                                                                                                                      | number                                                                                                                                         | 1                                            |          |\n| pageSize       | The number of items to be rendered in one screen                                                                                                                                              | number                                                                                                                                         | 10                                           |          |\n| itemsRenderer  | The parent render function                                                                                                                                                                    | (<br/> items: React.ReactNodeArray,<br/> ref: (instance: React.ReactInstance \\| null) => React.ReactInstance \\| null<br/> ) => React.ReactNode | `(items, ref) => <ul ref={ref}>{items}</ul>` |          |\n| threshold      | The height of the buffer                                                                                                                                                                      | number                                                                                                                                         | 100                                          |          |\n| itemSizeGetter | The function to get the height of the item                                                                                                                                                    | (index?: number) => void                                                                                                                       | -                                            |          |\n| jumpIndex      | Set the jump position, need to set itemSizeGetter to take effect, if not set, the element is assumed to be of equal height and the height of the first element is taken as the default height | number                                                                                                                                         | 0                                            |          |\n```\n\n----------------------------------------\n\nTITLE: Defining onDragEnd Callback Function in Tree Component\nDESCRIPTION: TypeScript type definition for the onDragEnd callback function that's triggered when dragging ends. It provides the event object and node instance.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tree/__docs__/index.en-us.md#2025-04-10_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n(info: { event: React.MouseEvent; node: NodeInstance }) => void\n```\n\n----------------------------------------\n\nTITLE: Customizing Popup Content with Menu.PopupItem in Alibaba Fusion Next\nDESCRIPTION: This snippet demonstrates how to use Menu.PopupItem to create custom popup content in the Alibaba Fusion Next Menu component. It allows for advanced usage and flexibility in menu design.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/menu/__docs__/demo/custom-popup/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=4\n\n# 自定义弹出内容\n\n高级用法，可以通过 `Menu.PopupItem` 自定义菜单弹出内容。\n\n# en-US order=4\n\n# Customize pop up content\n\nDemo how to customize pop up content.\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonSize Type in TypeScript\nDESCRIPTION: This code snippet defines the ButtonSize type, which is used to specify the size of a button. It includes three possible values: 'small', 'medium', and 'large'.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/button/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ButtonSize = 'small' | 'medium' | 'large';\n```\n\n----------------------------------------\n\nTITLE: Defining Avatar Component API in Markdown\nDESCRIPTION: This snippet outlines the API for the Avatar component, including its properties, types, default values, and descriptions. It covers various customization options such as size, shape, icon type, and image source.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/avatar/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数     | 说明                                                           | 类型                                                                                                        | 默认值   | 是否必填 |\n| -------- | -------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- | -------- | -------- |\n| children | 孩子节点列表                                                   | React.ReactNode                                                                                             | -        |          |\n| size     | 头像的大小                                                     | 'small' \\| 'medium' \\| 'large' \\| number                                                                    | 'medium' |          |\n| shape    | 头像的形状                                                     | 'circle' \\| 'square'                                                                                        | 'circle' |          |\n| icon     | icon 类头像的图标类型，可设为 Icon 的 `type` 或 `ReactElement` | React.ReactElement \\| string                                                                                | -        |          |\n| src      | 图片类头像的资源地址                                           | string                                                                                                      | -        |          |\n| onError  | 图片加载失败的事件，返回 false 会关闭组件默认的 fallback 行为  | () => boolean                                                                                               | -        |          |\n| imgProps | 图片的其他属性                                                 | Omit\\<<br/> React.ImgHTMLAttributes\\<HTMLImageElement>,<br/> 'src' \\| 'srcSet' \\| 'onError' \\| 'alt'<br/> > | -        |          |\n| alt      | 图像无法显示时的 alt 替代文本                                  | string                                                                                                      | -        |          |\n| srcSet   | 图片类头像响应式资源地址                                       | string                                                                                                      | -        |          |\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for NumberPicker Component\nDESCRIPTION: This markdown snippet provides comprehensive documentation for the NumberPicker component, including its category, family, Chinese name, and type. It also includes sections on when to use the component, how to use it, and important considerations for implementation.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/number-picker/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# NumberPicker\n\n-   category: Components\n-   family: DataEntry\n-   chinese: 数字输入框\n-   type: 表单\n\n---\n\n数字选择器。\n\n## 何时使用\n\n数字选择器，并对输入的数据做正确性检查、自动订正。\n\n## 如何使用\n\n1.  自动订正可能会导致 onChange 返回值和你输入的数据不一样。\n\n2.  其中有些中间输入状态无法触发 onChange，主要考虑到自动订正可能永远无法到达想要的值了。例如：\n\n    -   `0`=>`0.`=>`0.0`=>`0.01` 中间两步不会触发 onChange，因为如果订正会一直停留在 0 导致永远无法到达想要的值\n    -   min=10 的情况下，输入 `1`=>`12` 第一步 `1` 不会触发 onChange 也不会订正数据，因为数字是一个一个输入的\n\n3.  如果输入时没触发 onChange，会在 onBlur 检测数据正确性并触发 onChange\n\n4.  在 `1.24` 版本加入大数支持，通过 `stringMode` 开启大数或高精度小数支持，输入输出都变为 `String` 类型，具体参考[大数与高精度小数](#bignumber-container)\n\n5.  如果需要输入小数，需设置 `precision` 小数点位数\n\n## API\n```\n\n----------------------------------------\n\nTITLE: Defining Upload Component Props in TypeScript\nDESCRIPTION: This snippet defines the types for various props of an Upload component, including callbacks for file changes, selection validation, and removal. It also specifies types for custom rendering functions and file object structures.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/upload/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nformatter: (response: UploadResponse, file: UploadFile) => UploadResponse\nonChange: (value: ObjectFile[], file: ObjectFile | ObjectFile[]) => void\nafterSelect: (file: ObjectFile) => boolean | Promise<void>\nonRemove: (file: object) => void\nrenderPreview: (value: ObjectFile | ObjectFile[], props: UploadProps) => void\nfileNameRender: (file: object) => ReactNode\nactionRender: (file: ObjectFile) => ReactNode\nitemRender: (file: UploadFile, action?: { remove?: () => void }) => ReactNode\n```\n\n----------------------------------------\n\nTITLE: Form.Item Property Types TypeScript Interface\nDESCRIPTION: TypeScript type definitions showing all available properties for Form.Item component including layout, validation, and styling options.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/form/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FormItemProps {\n  labelCol?: ColProps;\n  wrapperCol?: ColProps;\n  help?: ReactNode;\n  name?: string;\n  extra?: ReactNode;\n  validateState?: 'error' | 'success' | 'loading' | 'warning';\n  hasFeedback?: boolean;\n  children?: ReactNode | ((values: FieldValues) => void);\n  fullWidth?: boolean;\n  labelAlign?: 'top' | 'left' | 'inset';\n  labelTextAlign?: 'left' | 'right';\n  required?: boolean;\n  asterisk?: boolean;\n  requiredMessage?: string;\n  requiredTrigger?: string | Array<string>;\n  min?: number;\n  max?: number;\n  minmaxMessage?: string;\n  minmaxTrigger?: string | Array<string>;\n  minLength?: number;\n  maxLength?: number;\n  minmaxLengthMessage?: string;\n  minmaxLengthTrigger?: string | Array<string>;\n  length?: number;\n  lengthMessage?: string;\n  lengthTrigger?: string | Array<string>;\n  pattern?: unknown;\n  patternMessage?: string;\n  patternTrigger?: string | Array<string>;\n  format?: 'number' | 'email' | 'url' | 'tel';\n  formatMessage?: string;\n  formatTrigger?: string | Array<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Menu.SubMenu Props in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the Menu.SubMenu component's props, including label, selectable, and mode options.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/menu/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface SubMenuProps {\n  label?: React.ReactNode;\n  selectable?: boolean;\n  mode?: Mode;\n  children?: React.ReactNode;\n  level?: number;\n  noIcon?: boolean;\n  subMenuContentClassName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Slider Component Parameters in Markdown\nDESCRIPTION: This snippet defines the API parameters for the Slider component using a markdown table. It includes a wide range of customization options for appearance, behavior, and interactivity of the slider.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/slider/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Param              | Description                                                                                                                                                | Type                                                                        | Default Value | Required |\n| ------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------- | ------------- | -------- |\n| className          | Custom className                                                                                                                                           | string                                                                      | -             |          |\n| adaptiveHeight     | Whether to use adaptive height                                                                                                                             | boolean                                                                     | false         |          |\n| animation          | Animation type, default value is 'slide'                                                                                                                   | string \\| boolean                                                           | 'slide'       |          |\n| arrows             | Whether to display arrows                                                                                                                                  | boolean                                                                     | true          |          |\n| arrowSize          | Size of the arrow                                                                                                                                          | 'medium' \\| 'large'                                                         | 'medium'      |          |\n| arrowPosition      | Position of the arrow                                                                                                                                      | 'inner' \\| 'outer'                                                          | 'inner'       |          |\n| arrowDirection     | Direction of the arrow                                                                                                                                     | 'hoz' \\| 'ver'                                                              | 'hoz'         |          |\n| autoplay           | Whether to play automatically                                                                                                                              | boolean                                                                     | false         |          |\n| autoplaySpeed      | Autoplay speed                                                                                                                                             | number                                                                      | 3000          |          |\n| prevArrow          | Prev arrow                                                                                                                                                 | ReactElement                                                                | -             |          |\n| nextArrow          | Next arrow                                                                                                                                                 | ReactElement                                                                | -             |          |\n| centerMode         | Whether to use center mode                                                                                                                                 | boolean                                                                     | false         |          |\n| dots               | Whether to display dots                                                                                                                                    | boolean                                                                     | true          |          |\n| dotsDirection      | Direction for navigation dots                                                                                                                              | 'hoz' \\| 'ver'                                                              | 'hoz'         |          |\n| dotsRender         | Render navigation dots<br/><br/>**signature**:<br/>**params**:<br/>_index_: index<br/>_current_: current                                                   | (index: number, current: number) => void                                    | -             |          |\n| draggable          | Whether it can be dragged                                                                                                                                  | boolean                                                                     | true          |          |\n| infinite           | Whether to use infinite loop mode                                                                                                                          | boolean                                                                     | true          |          |\n| defaultActiveIndex | The default activated slide index                                                                                                                          | number                                                                      | 0             |          |\n| lazyLoad           | Whether to enable lazy load                                                                                                                                | boolean                                                                     | false         |          |\n| slideDirection     | Slide direction                                                                                                                                            | 'hoz' \\| 'ver'                                                              | 'hoz'         |          |\n| slidesToShow       | Number of slides showed at the same time                                                                                                                   | number                                                                      | 1             |          |\n| slidesToScroll     | Number of slides scrolled at the same time                                                                                                                 | number                                                                      | 1             |          |\n| speed              | Carousel speed                                                                                                                                             | number                                                                      | 600           |          |\n| activeIndex        | Jump to the specified carousel image (controlled)                                                                                                          | number                                                                      | -             |          |\n| triggerType        | Triggering method for navigation dots                                                                                                                      | 'click' \\| 'hover'                                                          | 'click'       |          |\n| onChange           | Callback function for slides switching                                                                                                                     | (index: number) => void                                                     | -             |          |\n| centerPadding      | Side padding when in center mode (px or %);                                                                                                                | string                                                                      | '50px'        |          |\n| cssEase            | CSS3 Animation Easing, default value is 'ease'                                                                                                             | string                                                                      | 'ease'        |          |\n| focusOnSelect      | When multiple slides are rotated, whether to be automatically centered after clicking to select them.                                                      | boolean                                                                     | 'false'       |          |\n| style              | Custom style                                                                                                                                               | CSSProperties                                                               | -             |          |\n| waitForAnimate     | Whether to wait for the animation to end before executing the action                                                                                       | boolean                                                                     | true          |          |\n| accessibility      | Whether to enable accessibility support, using the left and right keys to switch the carousel image                                                        | boolean                                                                     | false         |          |\n| children           | Children                                                                                                                                                   | ReactNode                                                                   | -             |          |\n```\n\n----------------------------------------\n\nTITLE: Defining onExpand Callback Function in Tree Component\nDESCRIPTION: TypeScript type definition for the onExpand callback function that's triggered when a node is expanded or collapsed. It provides both the array of expanded keys and additional node information.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tree/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(\n expandedKeys: string[],\n extra: {\n node: NodeInstance;\n expanded: boolean;\n }\n) => void\n```\n\n----------------------------------------\n\nTITLE: TimePicker Format Examples in Markdown\nDESCRIPTION: A markdown table showing the supported time formats for the TimePicker component, including hours (H, HH), minutes (m, mm), and seconds (s, ss) formats along with their descriptions.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/time-picker/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Format | Example | Description |\n| ------ | ------- | ----------- |\n| `H HH` | `0..23` | Hour，24h   |\n| `m mm` | `0..59` | Minute      |\n| `s ss` | `0..59` | Second      |\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Upload Request Handler in JSX\nDESCRIPTION: Example showing how to implement a custom request handler for the Upload component. The handler must return an object with an abort method for canceling uploads.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/upload/__docs__/index.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction customRequest(option) {\n    /* coding here */\n    return {\n        abort() {\n            /* coding here */\n        },\n    };\n}\n\n<Upload request={customRequest} />;\n```\n\n----------------------------------------\n\nTITLE: Defining TransferDataItem Type in TypeScript\nDESCRIPTION: TypeScript type definition for transfer data items that represent each item in a transfer panel. It includes properties for label, value, optional title, disabled state, children items for nested structures, and allows for additional custom properties.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/transfer/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TransferDataItem = {\n    label: string | React.ReactNode;\n    value: string;\n    title?: string;\n    disabled?: boolean;\n    children?: TransferDataItem[];\n    [key: string]: unknown;\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Prefix Configuration with ConfigProvider\nDESCRIPTION: Demonstrates how to modify component class name prefixes using ConfigProvider and corresponding SCSS configuration.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/config-provider/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass App extends React.Component {\n    render() {\n        return (\n            <ConfigProvider prefix=\"my-\">\n                <div>\n                    <Input />\n                    <Button>Submit</Button>\n                </div>\n            </ConfigProvider>\n        );\n    }\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n$css-prefix: 'my-';\n@import '~@alifd/theme-xxx/index.scss';\n```\n\n----------------------------------------\n\nTITLE: Defining Overlay Component Props in Markdown\nDESCRIPTION: This markdown table defines the props for the Overlay component, including their names, descriptions, types, default values, and other metadata. It covers a wide range of functionality including content rendering, visibility control, positioning, event handling, and customization options.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/overlay/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Param                  | Description                                                                                                                                                                                                                                                           | Type                                                           | Default Value                                | Required | Supported Version |\n| ---------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------- | -------------------------------------------- | -------- | ----------------- |\n| children               | Content of overlay                                                                                                                                                                                                                                                    | React.ReactElement & { ref?: React.RefCallback\\<HTMLElement> } | -                                            |          | -                 |\n| visible                | Whether to show the overlay                                                                                                                                                                                                                                           | boolean                                                        | false                                        |          | -                 |\n| onRequestClose         | Callback function that triggers an event when the overlay request closed                                                                                                                                                                                              | (type: string, e: Event \\| React.MouseEvent\\<Element>) => void | -                                            |          | -                 |\n| target                 | Reference element for overlay positioning                                                                                                                                                                                                                             | PropTarget                                                     | Position.VIEWPORT                            |          | -                 |\n| align                  | Alignment of the overlay relative to the reference element, see [Alignment](#Alignment)                                                                                                                                                                               | string \\| boolean                                              | 'tl bl'                                      |          | -                 |\n| offset                 | Fine                                                                                                                                                                                                                                                                  | Array\\<number>                                                 | [0, 0]                                       |          | -                 |\n| container              | Container of the overlay, if it is a function, it should return ref, if it is a string, it is should be the id of the DOM element, it can also be passed the DOM element directly.                                                                                    | PropTarget                                                     | -                                            |          | -                 |\n| hasMask                | Whether to show the mask                                                                                                                                                                                                                                              | boolean                                                        | false                                        |          | -                 |\n| canCloseByEsc          | Whether to support pressing esc to close the overlay                                                                                                                                                                                                                  | boolean                                                        | true                                         |          | -                 |\n| canCloseByOutSideClick | Whether to support clicking the outside to close the overlay when the mask is hidden                                                                                                                                                                                  | boolean                                                        | true                                         |          | -                 |\n| canCloseByMask         | Whether to support clicking the mask to close the overlay when the mask is visible                                                                                                                                                                                    | boolean                                                        | true                                         |          | -                 |\n| beforeOpen             | Callback function that triggers the event before the overlay opens                                                                                                                                                                                                    | (target?: React.ReactNode) => void                             | -                                            |          | -                 |\n| onOpen                 | Callback function that triggers the event when the overlay opens                                                                                                                                                                                                      | (target?: React.ReactNode) => void                             | -                                            |          | -                 |\n| afterOpen              | Callback function that triggers the event after the overlay opens, if enable animations, trigger after the animation ends                                                                                                                                             | (target?: React.ReactNode) => void                             | -                                            |          | -                 |\n| beforeClose            | Callback function that triggers the event before the overlay closes                                                                                                                                                                                                   | (target?: React.ReactNode) => void                             | -                                            |          | -                 |\n| onClose                | Callback function that triggers the event when the overlay closes                                                                                                                                                                                                     | (target?: React.ReactNode) => void                             | -                                            |          | -                 |\n| afterClose             | Callback function that triggers the event after the overlay closes, if enable animations, trigger after the animation ends                                                                                                                                            | (target?: React.ReactNode) => void                             | -                                            |          | -                 |\n| beforePosition         | Callback function that triggers the event before the overlay positions                                                                                                                                                                                                | () => void                                                     | -                                            |          | -                 |\n| onPosition             | Callback function that triggers the event when the overlay positions                                                                                                                                                                                                  | (config: object, node?: object) => void                        | -                                            |          | -                 |\n| shouldUpdatePosition   | Whether to force the update of positioning after each rerendered, which is generally used to maintain the original positioning when the size of the content area changes.                                                                                             | boolean                                                        | false                                        |          | -                 |\n| autoFocus              | Whether to focus the element in the overlay automatically when the overlay is opened                                                                                                                                                                                  | boolean                                                        | false                                        |          | -                 |\n```\n\n----------------------------------------\n\nTITLE: Defining onDragEnter Callback Function in Tree Component\nDESCRIPTION: TypeScript type definition for the onDragEnter callback function that's triggered when a dragged node enters another node. It provides the event object, node instance, and expanded keys.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tree/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n(info: {\n event: React.MouseEvent;\n node: NodeInstance;\n expandedKeys: Array\\<string>;\n }) => void\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Icons with createFromIconfontCN in React\nDESCRIPTION: This code demonstrates how to create and use custom icons using Icon.createFromIconfontCN method which loads SVG format icons from a custom iconfont source. The example shows rendering different icon types with various sizes.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/icon/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Icon } from '@alifd/next';\n\nconst CustomIcon = Icon.createFromIconfontCN({\n    scriptUrl: '//at.alicdn.com/t/font_1464085_egnk4s8yv2f.js',\n});\n\n// 同 Icon 基础元素一样，有相同的 size 设定\nReactDOM.render(\n    <div>\n        <CustomIcon type=\"icon-store\" size=\"small\"/>\n        <CustomIcon type=\"icon-gift\"/>\n        <CustomIcon type=\"icon-pic\" size=\"large\"/>\n    </div>\n, mountNode);\n```\n\n----------------------------------------\n\nTITLE: Upload Component Response Structure in JSX\nDESCRIPTION: Shows the expected data structure returned by the onChange event of the Upload component, including file metadata and status information.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/upload/__docs__/index.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  uid: 'uid',       // 文件唯一标识\n  name: 'xx.png'    // 文件名\n  state: 'done',    // 状态有：selected uploading done error\n  response: {\"success\":true}  // 服务端响应内容\n  url: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg',\n  imgURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg', // 头像(可选)\n  downloadURL: 'https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg'   // 下载(可选)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Position Type for Transfer Panels\nDESCRIPTION: TypeScript type definition for specifying the position of a transfer panel. It can be either 'left' or 'right'.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/transfer/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PositionType = 'left' | 'right';\n```\n\n----------------------------------------\n\nTITLE: Loading Component API Table in Markdown\nDESCRIPTION: API reference table documenting the props and configuration options for the Loading component. Includes parameters, descriptions, types, default values, and required status.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/loading/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Param           | Description                                                                                                                                                                                          | Type                                        | Default Value | Required |\n| --------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------- | ------------- | -------- |\n| tip             | Tip content                                                                                                                                                                                          | React.ReactNode \\| string                   | -             |          |\n| tipAlign        | Align of tip                                                                                                                                                                                         | 'right' \\| 'bottom'                         | 'bottom'      |          |\n| visible         | Loading status, default to true                                                                                                                                                                      | boolean                                     | true          |          |\n| size            | Size of animation indicator                                                                                                                                                                          | 'large' \\| 'medium'                         | 'large'       |          |\n| indicator       | Custom animation indicator                                                                                                                                                                           | React.ReactNode                             | -             |          |\n| color           | Color of animation indicator                                                                                                                                                                         | string                                      | -             |          |\n| fullScreen      | Full screen display                                                                                                                                                                                  | boolean                                     | -             |          |\n| disableScroll   | Is scrolling disabled, only effective in fullScreen mode                                                                                                                                             | boolean                                     | false         |          |\n| children        | Child elements                                                                                                                                                                                       | React.ReactNode                             | -             |          |\n| onVisibleChange | The callback function triggered when the loading layer request is closed in full screen mode<br/><br/>**signature**:<br/>**params**:<br/>_type_: The source of fan layer closure<br/>_e_: DOM events | (type: string, e: React.MouseEvent) => void | -             |          |\n| safeNode        | Security node, only valid at fullScreen                                                                                                                                                              | PopupProps['safeNode']                      | -             |          |\n```\n\n----------------------------------------\n\nTITLE: Creating a Global ConfigProvider Component\nDESCRIPTION: Example of how to create a global ConfigProvider component with default props and PropTypes.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/config-provider/__docs__/index.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ConfigProvider } from '@alifd/next';\nimport locale from './locale';\n\nconst { config } = ConfigProvider;\n\nclass Component extends React.Component {\n    static propTypes = {\n        prefix: PropTypes.string,\n        locale: PropTypes.object,\n        pure: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        prefix: 'next-',\n        locale: locale,\n        pure: false,\n    };\n\n    render() {\n        const { prefix, locale, pure } = this.props;\n        // ...\n    }\n}\n\nexport default config(Component);\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Component Props in TypeScript\nDESCRIPTION: This snippet shows the TypeScript interface for the Menu component's props, including callback functions for item focus, click, and keyboard events.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/menu/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MenuProps {\n  focusable?: boolean;\n  onItemFocus?: (\n    key: string,\n    item: MenuItem,\n    event: React.MouseEvent | React.KeyboardEvent\n  ) => void;\n  onItemClick?: (\n    key: string,\n    item: MenuItem,\n    event: React.MouseEvent | React.KeyboardEvent\n  ) => void;\n  onItemKeyDown?: (\n    key: string | null | undefined,\n    item: MenuItem,\n    event: React.KeyboardEvent\n  ) => void;\n  // ... other props\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Filter Params in React\nDESCRIPTION: This code snippet demonstrates how to control the selected filter options for a Table component using the filterParams property. It shows how to set the selected key for the 'id' column's filter menu.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/table/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Table filterParams={{id: {selectedKeys: ['one']}}}/>\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb Component API Properties Table - Markdown\nDESCRIPTION: Table documenting the main properties of the Breadcrumb component, including children, maxNode, showHiddenItems, popupContainer, followTrigger, popupProps, separator, and component properties.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/breadcrumb/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数            | 说明                                                               | 类型                                                                                                | 默认值 | 是否必填 | 支持版本 |\n| --------------- | ------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------- | ------ | -------- | -------- |\n| children        | 面包屑子节点，需传入 Breadcrumb.Item                               | \\| Array\\<React.ReactElement\\<ItemProps> \\| boolean \\| null><br/> \\| React.ReactElement\\<ItemProps> | -      |          | -        |\n| maxNode         | 面包屑最多显示个数，超出部分会被隐藏                               | number \\| 'auto'                                                                                    | 100    |          | -        |\n| showHiddenItems | 当超过的项被隐藏时，是否可通过点击省略号展示菜单（包含被隐藏的项） | boolean                                                                                             | false  |          | 1.23     |\n| popupContainer  | 弹层挂载的容器节点（在showHiddenItems为true时才有意义）            | DropdownProps['container']                                                                          | -      |          | 1.23     |\n| followTrigger   | 是否跟随trigger滚动（在showHiddenItems为true时才有意义）           | boolean                                                                                             | -      |          | 1.23     |\n| popupProps      | 添加到弹层上的属性（在showHiddenItems为true时才有意义）            | DropdownProps                                                                                       | -      |          | 1.23     |\n| separator       | 分隔符，可以是文本或 Icon                                          | string \\| React.ReactNode                                                                           | -      |          | -        |\n| component       | 设置标签类型                                                       | React.ComponentType\\<BreadcrumbProps> \\| string                                                     | 'nav'  |          | -        |\n```\n\n----------------------------------------\n\nTITLE: DatePicker.YearPicker TypeScript Interface\nDESCRIPTION: TypeScript interface defining the props for YearPicker component including input field properties, date handling, popup behavior, and customization options.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker/__docs__/index.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface YearPickerProps {\n    label?: React.ReactNode;\n    state?: 'success' | 'loading' | 'error';\n    placeholder?: string;\n    value?: string | Moment | null;\n    defaultValue?: string | Moment | null;\n    format?: string;\n    disabledDate?: (date: Moment, view: string) => boolean;\n    footerRender?: () => React.ReactNode;\n    onChange?: (value: Moment | string | null) => void;\n    size?: 'small' | 'medium' | 'large';\n    disabled?: boolean;\n    hasClear?: boolean;\n    visible?: boolean;\n    defaultVisible?: boolean;\n    onVisibleChange?: (visible: boolean, reason: string) => void;\n    popupTriggerType?: 'click' | 'hover';\n    popupAlign?: string;\n    popupContainer?: PopupProps['container'];\n    popupStyle?: React.CSSProperties;\n    popupClassName?: string;\n    popupProps?: React.PropsWithRef<PopupProps>;\n    inputProps?: InputProps;\n    dateInputAriaLabel?: string;\n    renderPreview?: (value: Moment | null, props: DatePickerProps) => React.ReactNode;\n    popupComponent?: React.ComponentType<unknown>;\n    popupContent?: React.ReactElement;\n    followTrigger?: boolean;\n    yearCellRender?: (calendarDate: Moment) => React.ReactNode;\n    isPreview?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Field Data with AJAX in React\nDESCRIPTION: Shows how to update Field data using an AJAX call. The setValue method is called in the success callback of the AJAX request to update the field value with the received data.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/field/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nClass Demo extends React.Component {\n    Field = new Field(this);\n\n    onClick = ()=>{\n        Ajax({\n            Url:'/demo.json',\n            Success:(json)=>{\n                // Update of assignment in callback event\n                this.field.setValue('name',json.name);\n            }\n        });\n    }\n    Render() {\n        Const init = this.field.init;\n\n        Return <div>\n            <Input {...init('name')} />\n            <button onClick={this.onClick}>Settings</button>\n        </div>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature for onBodyScroll Callback\nDESCRIPTION: Callback function signature for handling table body scroll events. Takes a number parameter representing scroll position.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/table/__docs__/index.en-us.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nFunction(start: Number) => void\n```\n\n----------------------------------------\n\nTITLE: Dialog Type Definitions in TypeScript\nDESCRIPTION: Type definitions for Dialog component props including locale customization, dimensions, container settings, and styling options\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/dialog/__docs__/index.en-us.md#2025-04-10_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype DialogProps = {\n  locale: Partial<{\n    ok: string;\n    cancel: string;\n  }>;\n  height: string | number;\n  popupContainer: string | HTMLElement | ((target?: HTMLElement) => HTMLElement);\n  v2: boolean;\n  closeIcon: React.ReactNode;\n  width: string | number;\n  noPadding: boolean;\n  top: number;\n  bottom: number;\n  overflowScroll: boolean;\n  centered: boolean;\n  dialogRender: (modal: React.ReactNode) => React.ReactNode;\n  wrapperClassName: string;\n  wrapperStyle: React.CSSProperties;\n}\n```\n\n----------------------------------------\n\nTITLE: NumberPicker Props Table in Markdown\nDESCRIPTION: Markdown table documenting the various props available for the NumberPicker component, including their types, default values, and descriptions.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/number-picker/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| format            | Format value for display<br/><br/>**signature**:<br/>**params**:<br/>_value_: value                          | (value: string \\| number) => string \\| number                                                                                                                                                                                                                                                                                                                                   | -             |          | -                 |\n| hasTrigger        | Display btn trigger                                                                                          | boolean                                                                                                                                                                                                                                                                                                                                                                         | true          |          | -                 |\n| alwaysShowTrigger | Always show btn trigger without hover                                                                        | boolean                                                                                                                                                                                                                                                                                                                                                                         | false         |          | -                 |\n| label             | Inline left label                                                                                            | React.ReactNode                                                                                                                                                                                                                                                                                                                                                                 | -             |          | -                 |\n| innerAfter        | Inline right additional content                                                                              | React.ReactNode                                                                                                                                                                                                                                                                                                                                                                 | -             |          | -                 |\n| upBtnProps        | Increase button props                                                                                        | ButtonProps                                                                                                                                                                                                                                                                                                                                                                     | -             |          | -                 |\n| downBtnProps      | Decrease button props                                                                                        | ButtonProps                                                                                                                                                                                                                                                                                                                                                                     | -             |          | -                 |\n| isPreview         | Is preview                                                                                                   | boolean                                                                                                                                                                                                                                                                                                                                                                         | -             |          | -                 |\n| renderPreview     | Render content in preview mode<br/><br/>**signature**:<br/>**params**:<br/>_value_: value<br/>_props_: props | (value: number \\| string, props: NumberPickerProps) => React.ReactNode                                                                                                                                                                                                                                                                                                          | -             |          | -                 |\n| stringMode        | Enable big number support, input and output are all string types                                             | boolean                                                                                                                                                                                                                                                                                                                                                                         | false         |          | 1.24              |\n| state             | State                                                                                                        | 'error' \\| 'success'                                                                                                                                                                                                                                                                                                                                                            | -             |          | -                 |\n```\n\n----------------------------------------\n\nTITLE: Defining Notification API in Markdown\nDESCRIPTION: This code snippet defines the API for the Notification component, including its methods and their parameters. It uses a markdown table to structure the information.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/notification/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Notification\n\n| 参数    | 说明 | 类型                                               | 默认值 | 是否必填 |\n| ------- | ---- | -------------------------------------------------- | ------ | -------- |\n| config  | -    | (config: NotificationConfig) => NotificationConfig | -      | 是       |\n| open    | -    | (options: NotificationOptions) => string           | -      | 是       |\n| close   | -    | (key: string) => void                              | -      | 是       |\n| destroy | -    | () => void                                         | -      | 是       |\n| success | -    | (options: NotificationOptions) => string           | -      | 是       |\n| error   | -    | (options: NotificationOptions) => string           | -      | 是       |\n| warning | -    | (options: NotificationOptions) => string           | -      | 是       |\n| notice  | -    | (options: NotificationOptions) => string           | -      | 是       |\n| help    | -    | (options: NotificationOptions) => string           | -      | 是       |\n```\n\n----------------------------------------\n\nTITLE: Defining Upload Component Metadata in Markdown\nDESCRIPTION: This snippet defines the metadata for the Upload component, including its category, family, Chinese name, column layout, and type.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/upload/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Upload\n\n-   category: Components\n-   family: DataEntry\n-   chinese: 上传组件\n-   cols: 1\n-   type: Form\n```\n\n----------------------------------------\n\nTITLE: Field Return Value Structure\nDESCRIPTION: The structure returned by Field initialization containing id, value and onChange handler.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/field/__docs__/index.en-us.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{id,value,onChange}\n```\n\n----------------------------------------\n\nTITLE: Defining rowProps Function for Table Row Customization in JavaScript\nDESCRIPTION: This function allows setting attributes for each row in a Table component. It receives the row data and index as parameters and should return an object with the desired row properties.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/table/__docs__/index.md#2025-04-10_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrowProps: Function(record: Object, index: Number) => Object\n```\n\n----------------------------------------\n\nTITLE: Defining CloseMode Type in TypeScript\nDESCRIPTION: This snippet defines the CloseMode type as a union of string literals, representing the various ways a drawer can be closed.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/drawer/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CloseMode = 'close' | 'mask' | 'esc';\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationOptions in Markdown\nDESCRIPTION: This code snippet defines the options available for the NotificationOptions object. It uses a markdown table to structure the information about parameters, their types, default values, and descriptions.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/notification/__docs__/index.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### NotificationOptions\n\n| 参数      | 说明                                                                                                                                                | 类型              | 默认值      | 是否必填   |\n| --------- | --------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------- | ----------- | ---------- | ------ | ------------------------------------------------------- | --------- | --- |\n| key       | 当前通知唯一标志, 默认会自动生成                                                                                                                    | string            | -           |            |\n| type      | 通知类型，`Notification.open`可选参数，可选值：`success`\\\\                                                                                          | `error`\\\\         | `warning`\\\\ | `notice`\\\\ | `help` | 'success' \\| 'error' \\| 'warning' \\| 'notice' \\| 'help' | `success` |     |\n| title     | 通知提醒标题                                                                                                                                        | ReactNode         | -           |            |\n| content   | 通知提醒内容                                                                                                                                        | ReactNode         | -           |            |\n| icon      | 自定义图标                                                                                                                                          | string            | -           |            |\n| duration  | 默认 4.5 秒后自动关闭，配置为 0 则不自动关闭（单位毫秒）                                                                                            | number            | 4500        |            |\n| style     | 自定义内联样式 [详见](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e434515761b36830c3e58a970abf5186f005adac/types/react/index.d.ts#L794) | CSSProperties     | -           |            |\n| className | 自定义 CSS class                                                                                                                                    | string            | -           |            |\n| onClose   | 点击默认关闭按钮时触发的回调函数                                                                                                                    | () => void        | -           |            |\n| onClick   | 点击通知时触发的回调函数                                                                                                                            | MouseEventHandler | -           |            |\n```\n\n----------------------------------------\n\nTITLE: Divider Component API Definition in Markdown\nDESCRIPTION: API documentation table defining the configuration parameters for the Divider component, including dashed line toggle, direction options (horizontal/vertical), and title orientation settings.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/divider/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Param       | Description                                | Type                          | Default Value | Required |\n| ----------- | ------------------------------------------ | ----------------------------- | ------------- | -------- |\n| dashed      | Is it a dashed line                        | boolean                       | false         |          |\n| direction   | Is the line of horizontal or vertical type | 'hoz' \\| 'ver'                | 'hoz'         |          |\n| orientation | The position of the divider title          | 'left' \\| 'right' \\| 'center' | 'center'      |          |\n```\n\n----------------------------------------\n\nTITLE: Component Value Reset Handler\nDESCRIPTION: Example implementation of handling undefined values in component lifecycle for field reset functionality.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/field/__docs__/index.en-us.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncomponentWillReceiveProps(nextProps) {\n    if ('value' in nextProps ) {\n        this.setState({\n           value: nextProps.value === undefined? []: nextProps.value   //  set value after clear\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Affix Component API Properties Table\nDESCRIPTION: Markdown table showing the API properties for the Affix component including container, offset settings, callback functions, and styling options. Each property includes type information, default values, and whether it's required.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/affix/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数         | 说明                                                                                                  | 类型                       | 默认值        | 是否必填 |\n| ------------ | ----------------------------------------------------------------------------------------------------- | -------------------------- | ------------- | -------- |\n| container    | 设置 Affix 需要监听滚动事件的容器元素<br/><br/>**签名**:<br/>**返回值**:<br/>目标容器元素             | () => Element \\| Window    | () =\\> window |          |\n| offsetTop    | 距离窗口顶部达到指定偏移量后触发                                                                      | number                     | -             |          |\n| offsetBottom | 距离窗口底部达到指定偏移量后触发                                                                      | number                     | -             |          |\n| onAffix      | 当元素的样式发生固钉样式变化时触发的回调函数<br/><br/>**签名**:<br/>**参数**:<br/>_affixed_: 是否固定 | (affixed: boolean) => void | -             |          |\n| useAbsolute  | 是否启用绝对布局实现 affix                                                                            | boolean                    | -             |          |\n| className    | 包裹 children 容器的类名                                                                              | string                     | -             |          |\n| style        | 最外层容器的 style 样式                                                                               | React.CSSProperties        | -             |          |\n```\n\n----------------------------------------\n\nTITLE: Defining onSearch Callback for Select Component in TypeScript\nDESCRIPTION: This snippet shows the type definition for the onSearch callback function. It is triggered when the search box value changes, providing the new value and the change event object.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/select/__docs__/index.en-us.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n(value: string, e: React.ChangeEvent<HTMLInputElement>) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Badge Component API in Markdown\nDESCRIPTION: This code snippet defines the API for the Badge component, including its parameters, types, default values, and descriptions.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/badge/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Badge\n\n| 参数          | 说明                                                                | 类型             | 默认值 | 是否必填 |\n| ------------- | ------------------------------------------------------------------- | ---------------- | ------ | -------- |\n| children      | 徽章依托的内容                                                      | React.ReactNode  | -      |          |\n| count         | 展示的数字，大于 overflowCount 时显示为 overflowCount+，为 0 时隐藏 | number \\| string | 0      |          |\n| content       | 自定义节点内容                                                      | React.ReactNode  | -      |          |\n| overflowCount | 展示的封顶的数字                                                    | number \\| string | 99     |          |\n| dot           | 不展示数字，只展示一个小红点                                        | boolean          | false  |          |\n| showZero      | 当 count 为 0 时，默认不显示，但是可以使用 showZero 修改为显示      | boolean          | false  |          |\n```\n\n----------------------------------------\n\nTITLE: Defining Form Component with Markdown\nDESCRIPTION: This code snippet defines the Form component's metadata using markdown. It specifies the category, family, columns, and type of the component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/form/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Form\n\n-   category: Components\n-   family: DataEntry\n-   cols: 1\n-   type: Form\n```\n\n----------------------------------------\n\nTITLE: Form.Item Type Definition - TypeScript\nDESCRIPTION: TypeScript interface definitions showing the available props for the Form.Item component including layout, validation, and styling options\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/form/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FormItemProps {\n  labelCol?: ColProps;\n  wrapperCol?: ColProps;\n  help?: ReactNode;\n  name?: string;\n  extra?: ReactNode;\n  validateState?: 'error' | 'success' | 'loading' | 'warning';\n  hasFeedback?: boolean;\n  children?: ReactNode | ((values: FieldValues) => void);\n  fullWidth?: boolean;\n  labelAlign?: 'top' | 'left' | 'inset';\n  labelTextAlign?: 'left' | 'right';\n  required?: boolean;\n  asterisk?: boolean;\n  requiredMessage?: string;\n  requiredTrigger?: string | Array<string>;\n  min?: number;\n  max?: number;\n  minmaxMessage?: string;\n  minmaxTrigger?: string | Array<string>;\n  minLength?: number;\n  maxLength?: number;\n  minmaxLengthMessage?: string;\n  minmaxLengthTrigger?: string | Array<string>;\n  length?: number;\n  lengthMessage?: string;\n  lengthTrigger?: string | Array<string>;\n  pattern?: unknown;\n  patternMessage?: string;\n  patternTrigger?: string | Array<string>;\n  format?: 'number' | 'email' | 'url' | 'tel';\n  formatMessage?: string;\n  formatTrigger?: string | Array<string>;\n  validator?: Validator;\n  validatorTrigger?: string | Array<string>;\n  autoValidate?: boolean;\n  device?: 'desktop' | 'phone' | 'tablet';\n  colSpan?: number;\n  labelWidth?: number | string;\n  isPreview?: boolean;\n  renderPreview?: (values: unknown) => unknown;\n  errorMessageName?: string;\n  useLabelForErrorMessage?: boolean;\n  preferMarginToDisplayHelp?: boolean;\n  colon?: boolean;\n  disabled?: boolean;\n  valueName?: string;\n  type?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining onDragStart Callback Function in Tree Component\nDESCRIPTION: TypeScript type definition for the onDragStart callback function that's triggered when dragging a node begins. It provides the event object, node instance, and expanded keys.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tree/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n(info: {\n event: React.MouseEvent;\n node: NodeInstance;\n expandedKeys: string[];\n }) => void\n```\n\n----------------------------------------\n\nTITLE: Defining DataItem Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of data items used in the Collapse component. Includes properties for title, content, disabled state, key, click handler, and allows additional custom properties.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/collapse/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DataItem = {\n    id?: string;\n    title?: React.ReactNode;\n    content?: React.ReactNode;\n    disabled?: boolean;\n    key?: KeyType;\n    onClick?: (key: KeyType) => void;\n    [propName: string]: unknown;\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling a Button in Next UI\nDESCRIPTION: To disable a button in the Next UI framework, simply add the 'disabled' attribute to the button element. This will make the button unusable and will automatically change its visual appearance to indicate the disabled state.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/button/__docs__/demo/disabled/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ndisabled\n```\n\n----------------------------------------\n\nTITLE: Simplified Message Success Example\nDESCRIPTION: Shows simplified ways to display success messages using Message.success() method.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/message/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMessage.success('反馈内容');\n\n// 或者\nMessage.success({\n    title: '反馈内容',\n    duration: 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Dialog Component Properties in Markdown\nDESCRIPTION: This snippet defines the basic properties of the Dialog component, including its Chinese name, component family, category, and type.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/dialog/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Dialog\n\n-   chinese: 弹窗\n-   family: Feedback\n-   category: Components\n-   type: 弹层\n```\n\n----------------------------------------\n\nTITLE: Basic Rules Parameter Definition in Form Field\nDESCRIPTION: Basic example showing how to define a required validation rule for a form field. This specifies that the field value cannot be empty.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/field/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    rules: [{ required: true }];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining onDragOver Callback Function in Tree Component\nDESCRIPTION: TypeScript type definition for the onDragOver callback function that's triggered when a dragged node is over another node. It provides the event object and node instance.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tree/__docs__/index.en-us.md#2025-04-10_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n(info: { event: React.MouseEvent; node: NodeInstance }) => void\n```\n\n----------------------------------------\n\nTITLE: Describing Upload Component Usage in Markdown\nDESCRIPTION: This snippet provides a brief description of when to use the Upload component, explaining its purpose for file uploads to server or cloud storage.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/upload/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Develop Guide\n\n### When to Use\n\nWhen user want to upload some file to server side or cloud storage, upload component could help user deal with it.\n```\n\n----------------------------------------\n\nTITLE: Timeline Component Props API\nDESCRIPTION: API specifications for the Timeline component main properties including fold options, className, animation and display mode settings.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/timeline/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Param     | Description            | Type                  | Default Value | Required | Supported Version |\n| --------- | ---------------------- | --------------------- | ------------- | -------- | ----------------- |\n| fold      | Custom folding options | Array<FoldItem>      | -             |          | -                 |\n| className | Custom className       | string                | -             |          | -                 |\n| animation | Show animation         | boolean               | true          |          | -                 |\n| mode      | Show mode              | 'left' | 'alternate' | 'left'        |          | 1.23.18           |\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for Slider Component Events\nDESCRIPTION: TypeScript type definitions for event callbacks in the Slider component, including onBeforeChange, edgeEvent, and swipeEvent handlers.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/slider/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(index: number, currentIndex?: number) => void\n```\n\n----------------------------------------\n\nTITLE: Fixing Field.validate function signature\nDESCRIPTION: Fixes the function signature for the Field.validate method.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/CHANGELOG.md#2025-04-10_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ncommit 2bca1f6\n```\n\n----------------------------------------\n\nTITLE: Timeline.Item Props API\nDESCRIPTION: API specifications for Timeline.Item sub-component properties including state, icon, custom elements, time formatting, and content display options.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/timeline/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Param     | Description    | Type                                        | Default Value | Required | Supported Version |\n| --------- | -------------- | ------------------------------------------- | ------------- | -------- | ----------------- |\n| state     | Node state     | 'done' | 'process' | 'error' | 'success' | 'done'        |          | -                 |\n| icon      | Icon           | string                                      | -             |          | -                 |\n| dot       | Custom dot     | React.ReactNode                             | -             |          | -                 |\n| time      | Formatted time | React.ReactNode                             | -             |          | -                 |\n| title     | Title          | React.ReactNode                             | -             |          | -                 |\n| timeLeft  | Left time      | React.ReactNode                             | -             |          | -                 |\n| content   | Right content  | React.ReactNode                             | -             |          | -                 |\n| animation | Show animation | boolean                                     | true          |          | -                 |\n| mode      | Show mode      | 'left' | 'alternate'                       | 'left'        |          | 1.23.18           |\n```\n\n----------------------------------------\n\nTITLE: Defining onDragLeave Callback Function in Tree Component\nDESCRIPTION: TypeScript type definition for the onDragLeave callback function that's triggered when a dragged node leaves another node. It provides the event object and node instance.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tree/__docs__/index.en-us.md#2025-04-10_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n(info: { event: React.MouseEvent; node: NodeInstance }) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Card.Content Component API in Markdown\nDESCRIPTION: This snippet defines the API for the Card.Content subcomponent, listing its props, their types, and default values.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/card/__docs__/index.md#2025-04-10_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Card.Content\n\n| 参数      | 说明         | 类型        | 默认值 | 是否必填 |\n| --------- | ------------ | ----------- | ------ | -------- |\n| component | 设置标签类型 | ElementType | 'div'  |          |\n```\n\n----------------------------------------\n\nTITLE: Typography API Table in Markdown\nDESCRIPTION: Markdown table showing the API for the Typography component, including parameters, descriptions, types, default values, and whether they are required.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/typography/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数      | 说明         | 类型                                  | 默认值  | 是否必填 |\n| --------- | ------------ | ------------------------------------- | ------- | -------- |\n| component | 设置标签类型 | string \\| React.JSX.IntrinsicElements | article |          |\n```\n\n----------------------------------------\n\nTITLE: Defining Extra Options for Transfer Operations\nDESCRIPTION: TypeScript type definition for extra options used in transfer operations. It includes the direction of movement, data for the left panel, and information about moved items.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/transfer/__docs__/index.en-us.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ExtraOptions = {\n    /**\n     * 移动的方向，值为'left'或'right'\n     * @en Move direction, 'left' or 'right'\n     */\n    direction: PositionType;\n    /**\n     * 左面板值\n     * @en Data of left panel\n     */\n    leftValue: string[];\n    /**\n     * 左面板数据\n     * @en Data of left panel\n     */\n    leftData: TransferDataItem[];\n    /**\n     * 发生移动的数据\n     * @en Moved data\n     */\n    movedData: TransferDataItem[];\n    /**\n     * 发生移动的值\n     * @en Moved value\n     */\n    movedValue: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Dialog Component Type Definitions - TypeScript\nDESCRIPTION: Type definitions for the Dialog component props interface showing all available configuration options including visibility controls, content management, styling, and event handlers.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/dialog/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DialogProps {\n  visible?: boolean;\n  title?: React.ReactNode;\n  children?: React.ReactNode;\n  footer?: boolean | React.ReactNode;\n  footerAlign?: 'left' | 'center' | 'right';\n  footerActions?: Array<'ok' | 'cancel'>;\n  cache?: boolean;\n  onOk?: (event: React.MouseEvent) => void;\n  onCancel?: (event: React.MouseEvent) => void;\n  okProps?: ButtonProps;\n  cancelProps?: ButtonProps;\n  closeable?: 'close' | 'mask' | 'esc' | boolean | 'close,mask' | 'close,esc' | 'mask,esc';\n  closeMode?: CloseMode[] | CloseMode;\n  onClose?: (trigger: string, event: React.MouseEvent | KeyboardEvent) => void;\n  afterClose?: () => void;\n  hasMask?: boolean;\n  animation?: Record<'in' | 'out', string> | false;\n  autoFocus?: boolean;\n  align?: string | boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining canDrop Function in Tree Component\nDESCRIPTION: TypeScript type definition for the canDrop function that determines whether a node can be a valid drop target. It returns a boolean based on the drag and drop information provided.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tree/__docs__/index.en-us.md#2025-04-10_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n(info: {\n event?: React.MouseEvent;\n node: NodeInstance;\n dragNode: NodeInstance;\n dragNodesKeys: Array\\<string>;\n dropPosition: number;\n }) => boolean\n```\n\n----------------------------------------\n\nTITLE: Defining Input.TextArea Props in TypeScript\nDESCRIPTION: This snippet defines the prop types for the Input.TextArea component, including various input properties, event handlers, and styling options.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/input/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TextAreaProps {\n  value?: string | number;\n  defaultValue?: string | number;\n  onChange?: (value: string, e: React.ChangeEvent<HTMLTextAreaElement>, type?: string) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>, opts: OnKeyDownOpts) => void;\n  disabled?: boolean;\n  maxLength?: number;\n  hasLimitHint?: boolean;\n  showLimitHint?: boolean;\n  cutString?: boolean;\n  readOnly?: boolean;\n  trim?: boolean;\n  placeholder?: string;\n  onFocus?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  getValueLength?: (value: string) => number | void;\n  className?: string;\n  style?: React.CSSProperties;\n  htmlType?: string;\n  name?: string;\n  state?: 'error' | 'warning' | 'loading';\n  hasBorder?: boolean;\n  autoHeight?: boolean | { minRows?: number | string; maxRows?: number | string };\n  rows?: number;\n  isPreview?: boolean;\n  renderPreview?: (value: string | number | undefined, props: TextAreaProps) => React.ReactNode;\n  composition?: boolean;\n  hasClear?: boolean;\n  size?: 'small' | 'medium' | 'large';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Typography.Title Component API in Markdown\nDESCRIPTION: This snippet describes the Typography.Title component, which represents different levels of headings (H1-H6) and inherits from Typography.Text.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/typography/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Typography.Title\n\nT is divided into H1, H2, H3, H4, H5, H6 components, representing different levels of headings\n\nInherit the Typography.Text API\n```\n\n----------------------------------------\n\nTITLE: Typography.Paragraph API Table in Markdown\nDESCRIPTION: Markdown table showing the API for the Typography.Paragraph component, including parameters, descriptions, types, default values, and whether they are required.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/typography/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数      | 说明         | 类型                                  | 默认值 | 是否必填 |\n| --------- | ------------ | ------------------------------------- | ------ | -------- |\n| component | 设置标签类型 | string \\| React.JSX.IntrinsicElements | p      |          |\n```\n\n----------------------------------------\n\nTITLE: Defining Target Props Type in TypeScript\nDESCRIPTION: TypeScript type definition for Target prop that can accept React instances, DOM elements, functions returning elements, strings or null values\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/overlay/__docs__/index.en-us.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Target<T = unknown> =\n    | React.ReactInstance\n    | string\n    | ((param?: T) => React.ReactInstance | Element | Text | Node | null | void | undefined)\n    | Element\n    | Node\n    | Text\n    | null\n    | false\n    | undefined;\n```\n\n----------------------------------------\n\nTITLE: Dialog Static Methods Type Definitions\nDESCRIPTION: Type definitions for Dialog.alert, Dialog.confirm, and Dialog.show static methods including common configuration options\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/dialog/__docs__/index.en-us.md#2025-04-10_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DialogMethodConfig {\n  title?: ReactNode;\n  content?: ReactNode;\n  onOk?: Function;\n  onCancel?: Function;\n  messageProps?: Object;\n}\n\ninterface DialogShowConfig {\n  title?: ReactNode;\n  content?: ReactNode;\n  onOk?: Function;\n  onCancel?: Function;\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Validation Rules with Various Triggers and Types\nDESCRIPTION: Example showing multiple validation rules including required field validation, pattern matching, and custom validator function. Each rule can have different triggers (onBlur, onChange) and custom error messages.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/field/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n    rules: [\n        { required: true, trigger: 'onBlur' },\n        { pattern: /abcd/, message: 'abcd不能缺', trigger: 'onChange' },\n        {\n            validator: (rule, value, callback) => {\n                callback('出错了');\n            },\n        },\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dialog.withContext HOC in Alibaba Fusion Next\nDESCRIPTION: Implementation guide for Dialog.withContext Higher Order Component that provides contextual dialog methods (alert, confirm, show) to ensure correct Fusion config usage across multiple ConfigProvider instances.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/dialog/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Using Dialog.withContext HOC\nconst MyComponent = Dialog.withContext(({ contextDialog }) => {\n  // Now you can use contextDialog.alert, contextDialog.confirm, contextDialog.show\n  // These methods will use the correct Fusion config from the surrounding ConfigProvider\n  return (\n    <Button onClick={() => contextDialog.alert({ title: 'Alert', content: 'Content' })}>\n      Show Alert\n    </Button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Typography.Text API Table in Markdown\nDESCRIPTION: Markdown table showing the API for the Typography.Text component, including parameters, descriptions, types, default values, and whether they are required.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/typography/__docs__/index.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数      | 说明                | 类型                                  | 默认值 | 是否必填 |\n| --------- | ------------------- | ------------------------------------- | ------ | -------- |\n| delete    | 添加删除线样式      | boolean                               | false  |          |\n| mark      | 添加标记样式        | boolean                               | false  |          |\n| underline | 添加下划线样式      | boolean                               | false  |          |\n| strong    | 是否加粗            | boolean                               | false  |          |\n| code      | 添加代码样式        | boolean                               | false  |          |\n| component | 设置标签类型        | string \\| React.JSX.IntrinsicElements | span   |          |\n| rtl       | 是否以 rtl 模式展示 | boolean                               | false  |          |\n```\n\n----------------------------------------\n\nTITLE: Defining RangeValueType Type in TypeScript\nDESCRIPTION: Defines the RangeValueType type used for value properties in the Range component. It can be either a single number or an array of two numbers depending on whether the slider is single or double.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/range/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RangeValueType = number | [number, number];\n```\n\n----------------------------------------\n\nTITLE: Describing Dialog Usage and Version 2 Updates in Markdown\nDESCRIPTION: This section explains when to use the Dialog component and details the updates introduced in version 2, including new features and deprecated properties.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/dialog/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Guide\n\n## When To Use\n\nThe dialog is used to provide the user with an auxiliary window for quickly performing a simple operation, confirming user information, or providing a feedback prompt without leaving the main path.\n\n### `v2` update\n\nversion 1.25 add api `v2` to support open new version Dialog, feature as list:\n\nfeature：\n\n-   use css (not js) to compute position, will easier\n-   add `closeIcon` to controll icon display\n-   add `width` to fix width of dialog, or you can set `width=auto` to follow content width\n-   add `dialogRender` use with `react-draggable` support draggable\n\nchanges：\n\n-   deprecated `align` `shouldUpdatePosition`, Dialog will update position autoly\n-   deprecated `minMargin` , use `top` `bottom` insteaded\n-   deprecated `isFullScreen` , use `overflowScroll` insteaded\n\n## API\n```\n\n----------------------------------------\n\nTITLE: Formatting Time in TimePicker Component\nDESCRIPTION: Demonstrates the supported time formats for the TimePicker component. Shows examples for hours (24-hour format), minutes, and seconds.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/time-picker/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 格式   | 例子    | 说明          |\n| ------ | ------- | ------------- |\n| `H HH` | `0..23` | 时，24 小时制 |\n| `m mm` | `0..59` | 分            |\n| `s ss` | `0..59` | 秒            |\n```\n\n----------------------------------------\n\nTITLE: Monitoring Field Changes with onChange in React\nDESCRIPTION: Demonstrates two approaches for monitoring and reacting to changes in Field-managed inputs. The first example shows unified management using the onChange option, while the second shows individual management per input.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/field/__docs__/index.en-us.md#2025-04-10_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nClass Demo extends React.Component {\n    Field = new Field(this,{\n        onChange:(name, value) => {\n          Switch(name) {\n            Case 'name1':\n              this.field.setValue('name2','value set by name1');\n              Break;\n            Case 'name2':\n              this.field.setValue('name1','value set by name2');\n              Break;\n          }\n        }\n    });\n    Render() {\n        Const init = this.field.init;\n\n        Return <div>\n          <Input {...init('name1')} />\n          <Input {...init('name2')} />\n        </div>\n    }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nClass Demo extends React.Component {\n    Render() {\n        Const init = this.field.init;\n\n        Return <div>\n          <Input {...init('name1',{\n              Props:{\n                onChange:(v)=>{\n                  this.field.setValue('name2','value set by name1');\n                }\n              }\n            })} />\n          <Input {...init('name2',{\n              Props:{\n                onChange:(v)=>{\n                  this.field.setValue('name1','value set by name2');\n                }\n              }\n            })} />\n        </div>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Populating Select Options Using DataSource in React\nDESCRIPTION: This example shows how to use the dataSource prop to populate a Select component with options. It demonstrates setting labels, values, and disabling options using an array of objects.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/select/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst dataSource = [\n    {label:'option1', value:'option1'},\n    {label:'option2', value:'option2'},\n    {label:'disabled', disabled:true}\n]\n<Select dataSource={dataSource}/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Time Format Examples in Markdown\nDESCRIPTION: This code snippet shows a markdown table that illustrates the supported time formats for the TimePicker2 component. It includes format patterns, examples, and descriptions for hours, minutes, and seconds.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/time-picker2/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 格式   | 例子    | 说明          |\n| ------ | ------- | ------------- |\n| `H HH` | `0..23` | 时，24 小时制 |\n| `m mm` | `0..59` | 分            |\n| `s ss` | `0..59` | 秒            |\n```\n\n----------------------------------------\n\nTITLE: Defining Step Status Type in TypeScript\nDESCRIPTION: TypeScript type definition for Step status, specifying possible states of a step.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/step/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type StepStatus = 'wait' | 'process' | 'finish';\n```\n\n----------------------------------------\n\nTITLE: Adding No Padding API for Dialog\nDESCRIPTION: Feature addition that adds a noPadding API option to control Dialog body padding.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/CHANGELOG.md#2025-04-10_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n({\"Dialog\": {\"noPadding\": \"for Dialog body padding\"}})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Icons Using Icon.createFromIconfontCN in React\nDESCRIPTION: Demonstrates how to create custom SVG icons using the Icon.createFromIconfontCN method from @alifd/next. This approach allows loading icons from a custom script URL and rendering them with different sizes.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/icon/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Icon } from '@alifd/next';\n\nconst CustomIcon = Icon.createFromIconfontCN({\n    scriptUrl: '//at.alicdn.com/t/font_1464085_egnk4s8yv2f.js',\n});\n\n// CustomIcon have the same props as Icon, e.g. size\nReactDOM.render(\n    <div>\n        <CustomIcon type=\"icon-store\" size=\"small\"/>\n        <CustomIcon type=\"icon-gift\"/>\n        <CustomIcon type=\"icon-pic\" size=\"large\"/>\n    </div>\n, mountNode);\n```\n\n----------------------------------------\n\nTITLE: Filter Data Structure\nDESCRIPTION: Array structure for defining column filters with label and value properties.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/table/__docs__/index.en-us.md#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n[{label:'xxx', value:'xxx'}]\n```\n\n----------------------------------------\n\nTITLE: TimePicker Format Examples in Markdown\nDESCRIPTION: A markdown table showing the supported time format patterns for the TimePicker component. Documents the available format tokens for hours (H/HH), minutes (m/mm), and seconds (s/ss) with their corresponding ranges.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/time-picker2/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Format | Example | Description |\n| ------ | ------- | ----------- |\n| `H HH` | `0..23` | Hour，24h   |\n| `m mm` | `0..59` | Minute      |\n| `s ss` | `0..59` | Second      |\n```\n\n----------------------------------------\n\nTITLE: Defining CheckboxData Interface in TypeScript\nDESCRIPTION: Interface definition for checkbox data structure that includes value, optional label, optional disabled state, and allows for additional properties.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/checkbox/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CheckboxData = {\n    value: ValueItem;\n    label?: React.ReactNode;\n    disabled?: boolean;\n    [propName: string]: unknown;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Step Direction Type in TypeScript\nDESCRIPTION: TypeScript type definition for Step direction, allowing horizontal or vertical orientation.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/step/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type StepDirection = 'hoz' | 'ver';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for Balloon V1 Props\nDESCRIPTION: Type definitions for the Balloon component props including visibility controls, positioning, triggers, and event handlers. The interface shows all available configuration options with their types and default values.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/balloon/__docs__/index.en-us.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BalloonProps {\n    v2?: false | undefined;\n    children?: ReactNode;\n    title?: ReactNode;\n    type?: 'normal' | 'primary';\n    visible?: boolean;\n    defaultVisible?: boolean;\n    onVisibleChange?: (visible: boolean, type: string) => void;\n    closable?: boolean;\n    align?: AlignType;\n    offset?: Array<number>;\n    trigger?: ReactElement | string;\n    triggerType?: 'hover' | 'click' | 'focus' | ('hover' | 'click' | 'focus')[];\n    onClose?: () => void;\n    delay?: number;\n    afterClose?: () => void;\n    autoFocus?: boolean;\n    safeNode?: string | ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Form Usage with JSX\nDESCRIPTION: This code snippet shows examples of Form usage, including closing the inner field and wrapping components with FormItem.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/form/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Form field={false}>\n<FormItem><div><Input/></div></FormItem>\n```\n\n----------------------------------------\n\nTITLE: Cell Rendering Function Signature\nDESCRIPTION: Function signature for custom cell rendering in Table.Column. Takes value, index, and record parameters.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/table/__docs__/index.en-us.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nFunction(value, index, record) => Element\n```\n\n----------------------------------------\n\nTITLE: Correct HOC Reference Access Using getInstance\nDESCRIPTION: Demonstrates the correct approach to access internal component methods in a Higher Order Component using the getInstance() method provided by the HOC config method.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/config-provider/__docs__/index.en-us.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass App extends React.Component {\n    componentDidMount() {\n        this.refs.hoc.getInstance().someMethod();\n    }\n\n    render() {\n        return <HOC ref=\"hoc\" />;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Balloon V2 Component Properties in Markdown\nDESCRIPTION: This markdown table defines the properties, types, default values, and version support for the Balloon V2 component. It includes details on visibility control, styling, positioning, and event handling.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/balloon/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Param              | Description                                                                                                                                                                                                                                                                                                                       | Type                                                               | Default Value                                            | Required | Supported Version |\n| ------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------ | -------------------------------------------------------- | -------- | ----------------- |\n| v2                 | Enable v2                                                                                                                                                                                                                                                                                                                         | true                                                               | -                                                        |          | 1.25              |\n| children           | Content of popup                                                                                                                                                                                                                                                                                                                  | ReactNode                                                          | -                                                        |          | -                 |\n| type               | Style type                                                                                                                                                                                                                                                                                                                        | 'normal' \\| 'primary'                                              | 'normal'                                                 |          | 1.23              |\n| title              | Title                                                                                                                                                                                                                                                                                                                             | ReactNode                                                          | -                                                        |          | 1.23              |\n| visible            | Popup current display status                                                                                                                                                                                                                                                                                                      | boolean                                                            | -                                                        |          | -                 |\n| defaultVisible     | Popup default display status                                                                                                                                                                                                                                                                                                      | boolean                                                            | false                                                    |          | -                 |\n| onVisibleChange    | Popup display and hide event<br/><br/>**signature**:<br/>**params**:<br/>_visible_: Wether the popup is hidden or displayed<br/>_type_: Source of trigger popup display or hide, closeClick means triggered by the close button; fromTrigger means triggered by the trigger click; docClick means triggered by the document click | (visible: boolean, type: string) => void                           | -                                                        |          | -                 |\n| arrowPointToCenter | Whether the arrow points to the center of the target element                                                                                                                                                                                                                                                                      | boolean                                                            | false                                                    |          | 1.25              |\n| placementOffset    | Popup offset                                                                                                                                                                                                                                                                                                                      | number                                                             | -                                                        |          | -                 |\n| closable           | Whether to display close button                                                                                                                                                                                                                                                                                                   | boolean                                                            | true                                                     |          | -                 |\n| align              | Position of popup                                                                                                                                                                                                                                                                                                                 | AlignType                                                          | 'b'                                                      |          | -                 |\n| offset             | Tuning of popup relative to trigger, receive an array [hoz, ver], indicating the offset of the popup on left / top, e.g. [100, 100] means to the right (in RTL mode, it is to the left) and downward offset 100px                                                                                                                 | Array\\<number>                                                     | [0, 0]                                                   |          | -                 |\n| trigger            | Trigger element                                                                                                                                                                                                                                                                                                                   | ReactElement \\| string                                             | <span/>                                                  |          | -                 |\n| triggerType        | Trigger behavior, mouse hover, mouse click ('hover','click') or an array of them, e.g. ['hover', 'click'], strongly not recommended to use 'focus', if the popup content has complex interactions, it is recommended to use click                                                                                                 | 'hover' \\| 'click' \\| 'focus' \\| ('hover' \\| 'click' \\| 'focus')[] | 'hover'                                                  |          | -                 |\n| onClose            | Any event triggered when visible is false                                                                                                                                                                                                                                                                                         | () => void                                                         | -                                                        |          | -                 |\n| autoAdjust         | Whether to perform automatic position adjustment, default automatic opening                                                                                                                                                                                                                                                       | boolean                                                            | -                                                        |          | 1.25              |\n| delay              | Popup delay display                                                                                                                                                                                                                                                                                                               | number                                                             | -                                                        |          | -                 |\n```\n\n----------------------------------------\n\nTITLE: Defining CascaderDataItem Type in TypeScript\nDESCRIPTION: TypeScript interface defining the basic data structure for cascader items with properties like value, label, disabled state and children.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CascaderDataItem = {\n    value: string;\n    label?: React.ReactNode;\n    disabled?: boolean;\n    checkboxDisabled?: boolean;\n    children?: Array<CascaderDataItem>;\n    title?: string;\n    [propName: string]: unknown;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Headers for Cross-Domain Uploads in JSX\nDESCRIPTION: This snippet demonstrates how to set custom headers for the Upload component to resolve cross-domain issues. It specifically shows how to remove the 'X-Requested-With' header.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/upload/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Upload headers={{'X-Requested-With':null}}>\n```\n\n----------------------------------------\n\nTITLE: Documenting Radio Preview State in English\nDESCRIPTION: Markdown documentation in English explaining the preview state of Radio components. It introduces the isPreview property for Radio components.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/radio/__docs__/demo/isPreview/index.md#2025-04-10_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# en-US order=4\n\n# isPreview\n\nPreview state of `Radio`.\n```\n\n----------------------------------------\n\nTITLE: Menu Component Callback Type Definition\nDESCRIPTION: TypeScript type definition for menu item event callbacks including focus, click, and keyboard events.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/menu/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n(\n key: string,\n item: MenuItem,\n event: React.MouseEvent | React.KeyboardEvent\n) => void\n```\n\n----------------------------------------\n\nTITLE: Defining onChange Callback for Select Component in TypeScript\nDESCRIPTION: This snippet defines the type for the onChange callback function. It is called when the Select component's value changes, providing the new value, action type, and optionally the selected item(s).\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/select/__docs__/index.en-us.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n(\n value: DataSourceItem | DataSourceItem[],\n actionType: string,\n item?: ObjectItem | ObjectItem[]\n) => void\n```\n\n----------------------------------------\n\nTITLE: Implementing Balloon Tooltip with Delay\nDESCRIPTION: Example showing how to implement a Balloon Tooltip component with a delay parameter for clickable content\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/balloon/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Balloon.Tootip delay={100} />\n```\n\n----------------------------------------\n\nTITLE: Changing Moment.js Locale Globally (JSX)\nDESCRIPTION: This example shows how changing the global locale for Moment.js affects new instances but not existing ones. It switches between French and English locales.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nmoment.locale('fr');\nconst m = moment(1316116057189);\nm.fromNow(); // il y a une heure\n\nmoment.locale('en');\nm.fromNow(); // il y a une heure\nmoment(1316116057189).fromNow(); // an hour ago\n```\n\n----------------------------------------\n\nTITLE: Cascader Type Definition\nDESCRIPTION: TypeScript interface showing example usage of the itemRender property\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(item: CascaderDataItem) => item.label\n```\n\n----------------------------------------\n\nTITLE: Defining Extra Type for Cascader Events in TypeScript\nDESCRIPTION: Defines the structure for extra information passed during Cascader events. Includes properties for the selected path in single selection mode, checked state for multi-selection, current data being operated on, all checked data, and indeterminate data.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader/__docs__/index.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Extra = {\n    /**\n     * 单选时选中的数据的路径\n     */\n    selectedPath?: Array<CascaderDataItem>;\n    /**\n     * 多选时当前的操作是选中还是取消选中\n     */\n    checked?: boolean;\n    /**\n     * 多选时当前操作的数据\n     */\n    currentData?: CascaderDataItem;\n    /**\n     * 多选时所有被选中的数据\n     */\n    checkedData?: Array<CascaderDataItem>;\n    /**\n     * 多选时半选的数据\n     */\n    indeterminateData?: Array<CascaderDataItem>;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Alibaba Fusion Next via npm\nDESCRIPTION: Shows how to install the Alibaba Fusion Next UI framework using npm, which is the recommended installation method.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/README.zh-cn.md#2025-04-10_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install @alifd/next --save\n```\n\n----------------------------------------\n\nTITLE: Documenting DatePicker Disabled State in Markdown\nDESCRIPTION: This snippet describes the disabled state of a DatePicker component in both Chinese and English. It explains that the entire DatePicker can be disabled, and for RangePicker, individual inputs can be selectively disabled using an array.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker2/__docs__/demo/disabled/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=2\n\n# 禁用\n\n选择框的不可用状态。你也可以通过数组单独禁用 `RangePicker` 的其中一项。\n\n# en-US order=2\n\n# Disable dates\n\nA disabled state of the `DatePicker`. You can also set as array to disable one of input.\n```\n\n----------------------------------------\n\nTITLE: Popup Container Props Type\nDESCRIPTION: Type reference for popup container property showing it uses PopupProps['container'] type.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/balloon/__docs__/index.en-us.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nPopupProps['container']\n```\n\n----------------------------------------\n\nTITLE: Defining Year Range Type in TypeScript\nDESCRIPTION: This snippet defines the type for the yearRange prop of the DatePicker component. It specifies an array with two number elements representing the start and end years.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n[start: number, end: number]\n```\n\n----------------------------------------\n\nTITLE: Documenting MenuButton Basic Usage in Markdown\nDESCRIPTION: This snippet provides documentation for the basic usage of MenuButton in both Chinese and English. It explains that MenuButton supports various Button properties and can be used similarly to a regular Button component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/menu-button/__docs__/demo/basic/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=0\n\n# 基本\n\n最简单的用法。支持`Button`的 `shape`, `type`, `size`, `component`, `ghost` 等属性透传。\n\n# en-US order=0\n\n# Basic\n\nUse MenuButton as Button.\n```\n\n----------------------------------------\n\nTITLE: Basic Validation Rules\nDESCRIPTION: Simple validation rule configuration requiring a field to be non-empty.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/field/__docs__/index.en-us.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    rules:[{ required: true }]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining List Component Usage in Markdown\nDESCRIPTION: This snippet defines the order and title for a List component example in both Chinese and English. It specifies that this is a basic usage example of a complex List component for displaying image and text content.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/list/__docs__/demo/complex/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=1\n\n# 图文列表\n\n图文列表展示。\n\n# en-US order=1\n\n# Basic Usage\n\nComplex usage of List component.\n```\n\n----------------------------------------\n\nTITLE: Popup Props Type Definition\nDESCRIPTION: Type definition for popup properties using ComponentPropsWithRef with Popup component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/balloon/__docs__/index.en-us.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nComponentPropsWithRef<typeof Popup>\n```\n\n----------------------------------------\n\nTITLE: Defining loadData Function in Tree Component\nDESCRIPTION: TypeScript type definition for the loadData function that handles asynchronous data loading for tree nodes. It takes a node instance and returns a Promise.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tree/__docs__/index.en-us.md#2025-04-10_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n(node: NodeInstance) => Promise\\<unknown>\n```\n\n----------------------------------------\n\nTITLE: Disabling Dates in DatePicker.WeekPicker\nDESCRIPTION: Function to disable specific dates in the DatePicker.WeekPicker component. It takes a MomentObject as input and returns a boolean indicating whether the date should be disabled.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker2/__docs__/index.en-us.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nFunction(dateValue: MomentObject) => Boolean\n```\n\n----------------------------------------\n\nTITLE: Defining Notification.Config Options in Markdown\nDESCRIPTION: This code snippet defines the configuration options for the Notification.Config method. It uses a markdown table to structure the information about parameters, their types, default values, and whether they are required.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/notification/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Notification.Config\n\n| 参数         | 说明                               | 类型                                                     | 默认值                | 是否必填 |\n| ------------ | ---------------------------------- | -------------------------------------------------------- | --------------------- | -------- |\n| offset       | 对齐之后的偏移 [x, y]              | [number, number]                                         | [30, 30]              |          |\n| maxCount     | 最多同时出现的个数, 默认不限制     | number                                                   | -                     |          |\n| size         | 使用 `Message` 组件的              | 'large' \\| 'medium'                                      | large                 |          |\n| duration     | 默认自动关闭延时，单位毫秒         | number                                                   | 4500                  |          |\n| getContainer | 配置渲染节点的输出位置             | () => HTMLElement                                        | `() => document.body` |          |\n| placement    | 弹出位置，可选 `tl` `tr` `bl` `br` | 'topRight' \\| 'topLeft' \\| 'bottomLeft' \\| 'bottomRight' | topRight              |          |\n```\n\n----------------------------------------\n\nTITLE: Specifying Column Widths with span Property in Next UI\nDESCRIPTION: Demonstrates how to use the span property of the Col component to define column widths in a grid layout. The width can be specified as a fraction of 24 or 5 parts of the total row width.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/grid/__docs__/demo/basic/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=0\n\n# 基础布局\n\n通过 `Col` 的 `span` 属性指定该列宽度占整行宽度24分之几或5分之几。\n\n---\n\n# en-US order=0\n\n# Basic layout\n\nUse the `span` property of `Col` to specify the width of the column.\n```\n\n----------------------------------------\n\nTITLE: Defining Basic List Usage in Chinese\nDESCRIPTION: Markdown content describing the basic usage of a list component in Chinese. It specifies the order and provides a brief description of the simplest usage.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/list/__docs__/demo/basic/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=0\n\n# 基础列表\n\n最简单的用法。\n```\n\n----------------------------------------\n\nTITLE: Overlay Component Type Definitions\nDESCRIPTION: TypeScript type definitions for Overlay component properties including animation controls, positioning, DOM handling, and event management\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/overlay/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OverlayProps {\n  needAdjust: boolean;              // default: true\n  disableScroll: boolean;           // default: false\n  cache: boolean;                   // default: false\n  safeNode: React.ReactNode;         // default: -\n  wrapperClassName: string;         // default: -\n  wrapperStyle: React.CSSProperties; // default: -\n  animation: string | boolean | AnimationObjectType | undefined;  // default: { in: 'expandInDown', out: 'expandOutUp' }\n  v2: false | undefined;             // default: false\n  points: Array<string>;            // default: -\n  useCapture: boolean;              // default: -\n}\n```\n\n----------------------------------------\n\nTITLE: Internationalizing Calendar2 Component with dayjs\nDESCRIPTION: Example showing how to internationalize the Calendar2 component using dayjs locale and ConfigProvider. Demonstrates integration with English locale settings.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/calendar2/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DatePicker2, ConfigProvider } from '@alifd/next';\nimport 'dayjs/locale/en';\nimport en from '@alifd/next/lib/locale/en-us';\n\nfunction App() {\n    return (\n        <ConfigProvider locale={en}>\n            <DatePicker2 />\n        </ConfigProvider>\n    );\n}\nReactDOM.render(<App />, mountNode);\n```\n\n----------------------------------------\n\nTITLE: DatePicker.RangePicker Container Function\nDESCRIPTION: Function signature for custom popup container implementation\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker2/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nFunction(target: Element) => Element\n```\n\n----------------------------------------\n\nTITLE: Pure Component A11y Test Example\nDESCRIPTION: Example showing how to test a simple React component with no complex behavior for accessibility compliance using axe-core.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/TESTING.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('should not have any violations', async () => {\n    wrapper = await testReact(\n        <__Component__> </__Component__>\n    );\n    return wrapper;\n});\n```\n\n----------------------------------------\n\nTITLE: ARIA and Keyboard Interaction Documentation in Markdown\nDESCRIPTION: Markdown documentation describing the ARIA support and keyboard interactions for the DatePicker component, including specific key functionalities.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker/__docs__/index.en-us.md#2025-04-10_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## ARIA and KeyBoard\n\nWhen the `Date Picker` is focused, press `enter` will open popup to input date or time.\n\n| 按键            | 说明                                                                                |\n| :-------------- | :---------------------------------------------------------------------------------- |\n| number key      | Need to manual input the date, the specified date format                            |\n| Enter           | open the calendar or select date after input date                                   |\n| Esc             | close the calendar                                                                  |\n| Up              | Input previous day（Month Picker is previous month， Year Picker is previous year） |\n| Down            | Input next day（Month Picker is next month， Year Picker is next year）             |\n| Page Up         | Input previous month                                                                |\n| Page Down       | Input next month                                                                    |\n| Alt + Page Up   | Input previous year                                                                 |\n| Alt + Page Down | Input next year                                                                     |\n```\n\n----------------------------------------\n\nTITLE: Documenting Selectable Tag Component in Markdown\nDESCRIPTION: This code snippet provides documentation for a selectable tag component in both Chinese and English. It explains that the tag can be clicked to toggle its selection state.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tag/__docs__/demo/selectable/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=4\n\n# 可选中\n\n待选中状态的标签，通过点击来切换\n\n# en-US order=4\n\n# Selectable Tag\n\nclick tag to toggle select status\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Object Type in TypeScript\nDESCRIPTION: TypeScript type definition for animation object with 'in' and 'out' properties representing animation states\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/overlay/__docs__/index.en-us.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AnimationObjectType = Record<'in' | 'out', string>;\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarPanelMode Type in TypeScript\nDESCRIPTION: Defines the CalendarPanelMode type which specifies the available view modes for calendar panels. This type provides more granular view options including date, week, month, quarter, year, and decade views.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/calendar2/__docs__/index.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CalendarPanelMode = 'date' | 'week' | 'month' | 'quarter' | 'year' | 'decade';\n```\n\n----------------------------------------\n\nTITLE: Accessibility Keyboard Operations Table - Markdown\nDESCRIPTION: Table documenting the keyboard accessibility features of the Breadcrumb component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/breadcrumb/__docs__/index.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| 按键 | 说明         |\n| :--- | :----------- |\n| Tab  | 切换到下一项 |\n```\n\n----------------------------------------\n\nTITLE: Defining Card.Header Component API in Markdown\nDESCRIPTION: This snippet defines the API for the Card.Header subcomponent, listing its props, their types, and default values.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/card/__docs__/index.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Card.Header\n\n| 参数      | 说明                     | 类型        | 默认值 | 是否必填 |\n| --------- | ------------------------ | ----------- | ------ | -------- |\n| title     | 卡片的标题               | ReactNode   | -      |          |\n| subTitle  | 卡片的副标题             | ReactNode   | -      |          |\n| extra     | 标题区域的用户自定义内容 | ReactNode   | -      |          |\n| component | 设置标签类型             | ElementType | 'div'  |          |\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Format in Alibaba Fusion Next (Chinese)\nDESCRIPTION: This snippet explains how to use the 'format' attribute to customize the display of dates in Chinese. It emphasizes the ability to create custom date formats for user interface elements.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker2/__docs__/demo/format/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=5\n\n# 格式化\n\n使用`format`属性，可以自定义日期显示格式。\n```\n\n----------------------------------------\n\nTITLE: Animate Component Type Definition\nDESCRIPTION: Type definitions for the main Animate component props including animation controls and lifecycle callbacks.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/animate/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AnimateProps {\n  animation?: string | Partial<Record<'appear' | 'enter' | 'leave', string>>;\n  animationAppear?: boolean;\n  component?: React.ElementType;\n  singleMode?: boolean;\n  beforeAppear?: (node: HTMLElement) => void;\n  onAppear?: (node: HTMLElement) => void;\n  afterAppear?: (node: HTMLElement) => void;\n  beforeEnter?: (node: HTMLElement) => void;\n  onEnter?: (node: HTMLElement) => void;\n  afterEnter?: (node: HTMLElement) => void;\n  beforeLeave?: (node: HTMLElement) => void;\n  onLeave?: (node: HTMLElement) => void;\n  afterLeave?: (node: HTMLElement) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Describing NumberPicker Component in Markdown\nDESCRIPTION: This snippet provides metadata and usage guidelines for the NumberPicker component. It includes category information, usage scenarios, and important considerations for developers using this component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/number-picker/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# NumberPicker\n\n-   category: Components\n-   family: DataEntry\n-   type: form\n\n---\n\n## Guide\n\n### When to use\n\nNumber input and auto correct data.\n\n### Attentions\n\n1.  auto Correct may change the input value and make it different from the value which is from onChange.\n\n2.  Some interval value may not trigger the onChange, For example:\n\n    -   `0`=>`0.`=>`0.0`=>`0.01` the second & third step will not trigger onChange, because auto correct will let value always be '0'\n    -   Assume min=10, `1`=>`12` the step one ,`1`, will not not trigger onChange, because the numbers are input one by one\n\n3.  if input action does not trigger onChange, it will correct data and trigger onChange when it gets blur\n\n## API\n```\n\n----------------------------------------\n\nTITLE: Calendar Component TypeScript Interface\nDESCRIPTION: TypeScript interface defining the props and configuration options for the Calendar component. Includes parameters for date selection, display modes, custom rendering, and event handling.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/calendar2/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CalendarProps {\n  defaultValue?: ConfigType;\n  value?: ConfigType;\n  defaultPanelValue?: ConfigType;\n  panelValue?: ConfigType;\n  shape?: 'card' | 'fullscreen' | 'panel';\n  mode?: CalendarMode;\n  panelMode?: CalendarPanelMode;\n  onSelect?: (value: Dayjs, strVal: string) => void;\n  onChange?: (value: Dayjs, strVal: string) => void;\n  onPanelChange?: (value: Dayjs, mode: string, reason?: string) => void;\n  className?: string;\n  dateCellRender?: CustomCellRender;\n  monthCellRender?: CustomCellRender;\n  yearCellRender?: CustomCellRender;\n  quarterCellRender?: CustomCellRender;\n  disabledDate?: (value: Dayjs, mode: CalendarPanelMode) => boolean;\n  onPrev?: OnPrevOrNext;\n  onNext?: OnPrevOrNext;\n  onSuperPrev?: OnPrevOrNext;\n  onSuperNext?: OnPrevOrNext;\n  headerRender?: (props: HeaderPanelProps) => React.ReactNode;\n  validValue?: [Dayjs, Dayjs];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RadioValue Type in TypeScript\nDESCRIPTION: Type definition for radio button values that can be string, number or boolean.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/radio/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RadioValue = string | number | boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining ValueItem Type in TypeScript\nDESCRIPTION: Type definition for values that can be used in the Checkbox.Group component. Accepts string, number, or boolean values.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/checkbox/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ValueItem = string | number | boolean;\n```\n\n----------------------------------------\n\nTITLE: Documenting Loading List in Chinese\nDESCRIPTION: Markdown documentation for a list component with loading functionality, written in Chinese. It describes the basic usage of a list with a loading state.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/list/__docs__/demo/loading/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=2\n\n# 带 loading 的列表\n\n带 `loading` 的列表展示。\n```\n\n----------------------------------------\n\nTITLE: Animate.Expand Component Type Definition\nDESCRIPTION: Type definitions for the Expand subcomponent props focusing on animation lifecycle callbacks.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/animate/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ExpandProps {\n  animation?: string | Partial<Record<'appear' | 'enter' | 'leave', string>>;\n  beforeEnter?: (node: HTMLElement) => void;\n  onEnter?: (node: HTMLElement) => void;\n  afterEnter?: (node: HTMLElement) => void;\n  beforeLeave?: (node: HTMLElement) => void;\n  onLeave?: (node: HTMLElement) => void;\n  afterLeave?: (node: HTMLElement) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Moment.js Locale for Calendar\nDESCRIPTION: Example showing how to set the locale for moment.js to properly display the calendar with localized date formats and names.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/calendar/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport moment from 'moment';\n\nmoment.locale('zh-cn');\n```\n\n----------------------------------------\n\nTITLE: Multiple Validation Rules\nDESCRIPTION: Complex validation rules combining required field, pattern matching, and custom validator function.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/field/__docs__/index.en-us.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    rules:[{required:true,trigger:'onBlur'},{pattern:/abcd/,message:'match abcd'},{validator:(rule, value, callback)=>{callback('got error')}}]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input.Password Props in TypeScript\nDESCRIPTION: This snippet defines the additional prop type for the Input.Password component, which extends the regular Input component props.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/input/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface PasswordProps extends InputProps {\n  showToggle?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting ARIA and Keyboard Interactions in Markdown\nDESCRIPTION: This snippet provides information about ARIA and keyboard interactions for the TimePicker component. It details various keyboard shortcuts and their corresponding actions within the component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/time-picker2/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## ARIA and KeyBoard\n\n| 按键            | 说明                                                                                         |\n| :-------------- | :------------------------------------------------------------------------------------------- |\n| Enter           | Open time select popup                                                                       |\n| Esc             | Close time select popup                                                                      |\n| Up              | Input previous seconds （if `disabledMinutes={true}` is previous minutes or previous hours） |\n| Down            | Input next seconds （if `disabledMinutes={true}` is next minutes or next hours）             |\n| Page Up         | Input previous minutes                                                                       |\n| Page Down       | Input next minutes                                                                           |\n| Alt + Page Up   | Input previous hours                                                                         |\n| Alt + Page Down | Input next hours                                                                             |\n```\n\n----------------------------------------\n\nTITLE: Incorrect HOC Reference Access in React\nDESCRIPTION: Example showing the incorrect way to access internal component methods through refs in a Higher Order Component, which will result in an error.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/config-provider/__docs__/index.en-us.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass App extends React.Component {\n    componentDidMount() {\n        // throw an error\n        this.refs.hoc.someMethod();\n    }\n\n    render() {\n        return <HOC ref=\"hoc\" />;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Animate Component API Types\nDESCRIPTION: TypeScript interface definitions for the main Animate component, showing all available props including animation controls and lifecycle callbacks.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/animate/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nanimation: string | Partial<Record<'appear' | 'enter' | 'leave', string>>\nanimationAppear: boolean\ncomponent: React.ElementType\nsingleMode: boolean\nbeforeAppear: (node: HTMLElement) => void\nonAppear: (node: HTMLElement) => void\nafterAppear: (node: HTMLElement) => void\nbeforeEnter: (node: HTMLElement) => void\nonEnter: (node: HTMLElement) => void\nafterEnter: (node: HTMLElement) => void\nbeforeLeave: (node: HTMLElement) => void\nonLeave: (node: HTMLElement) => void\nafterLeave: (node: HTMLElement) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Overlay V2 Component Parameters in Markdown\nDESCRIPTION: This markdown table defines the parameters for the Overlay V2 component, including their types, default values, and descriptions. It covers various aspects such as visibility control, positioning, event handling, and interaction options.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/overlay/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Param                  | Description                                                                                                                                                                                                                                                           | Type                                                           | Default Value                                | Required | Supported Version |\n| ---------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------- | -------------------------------------------- | -------- | ----------------- |\n| children               | Content of overlay                                                                                                                                                                                                                                                    | React.ReactElement & { ref?: React.RefCallback\\<HTMLElement> } | -                                            |          | -                 |\n| visible                | Whether to show the overlay                                                                                                                                                                                                                                           | boolean                                                        | false                                        |          | -                 |\n| onRequestClose         | Callback function that triggers an event when the overlay request closed                                                                                                                                                                                              | (type: string, e: Event \\| React.MouseEvent\\<Element>) => void | -                                            |          | -                 |\n| target                 | Reference element for overlay positioning                                                                                                                                                                                                                             | PropTarget                                                     | Position.VIEWPORT                            |          | -                 |\n| align                  | Alignment of the overlay relative to the reference element, see [Alignment](#Alignment)                                                                                                                                                                               | string                                                         | 'tl bl'                                      |          | -                 |\n| offset                 | Fine                                                                                                                                                                                                                                                                  | Array\\<number>                                                 | [0, 0]                                       |          | -                 |\n| container              | Container of the overlay, if it is a function, it should return ref, if it is a string, it is should be the id of the DOM element, it can also be passed the DOM element directly.                                                                                    | PropTarget                                                     | -                                            |          | -                 |\n| hasMask                | Whether to show the mask                                                                                                                                                                                                                                              | boolean                                                        | false                                        |          | -                 |\n| canCloseByEsc          | Whether to support pressing esc to close the overlay                                                                                                                                                                                                                  | boolean                                                        | true                                         |          | -                 |\n| canCloseByOutSideClick | Whether to support clicking the outside to close the overlay when the mask is hidden                                                                                                                                                                                  | boolean                                                        | true                                         |          | -                 |\n| canCloseByMask         | Whether to support clicking the mask to close the overlay when the mask is visible                                                                                                                                                                                    | boolean                                                        | true                                         |          | -                 |\n| beforeOpen             | Callback function that triggers the event before the overlay opens                                                                                                                                                                                                    | (target?: React.ReactNode) => void                             | -                                            |          | -                 |\n| onOpen                 | Callback function that triggers the event when the overlay opens                                                                                                                                                                                                      | (target?: React.ReactNode) => void                             | -                                            |          | -                 |\n| afterOpen              | Callback function that triggers the event after the overlay opens, if enable animations, trigger after the animation ends                                                                                                                                             | (target?: React.ReactNode) => void                             | -                                            |          | -                 |\n| beforeClose            | Callback function that triggers the event before the overlay closes                                                                                                                                                                                                   | (target?: React.ReactNode) => void                             | -                                            |          | -                 |\n| onClose                | Callback function that triggers the event when the overlay closes                                                                                                                                                                                                     | (target?: React.ReactNode) => void                             | -                                            |          | -                 |\n| afterClose             | Callback function that triggers the event after the overlay closes, if enable animations, trigger after the animation ends                                                                                                                                            | (target?: React.ReactNode) => void                             | -                                            |          | -                 |\n| beforePosition         | Callback function that triggers the event before the overlay positions                                                                                                                                                                                                | () => void                                                     | -                                            |          | -                 |\n| onPosition             | Callback function that triggers the event when the overlay positions                                                                                                                                                                                                  | (config: object, node?: object) => void                        | -                                            |          | -                 |\n| shouldUpdatePosition   | Whether to force the update of positioning after each rerendered, which is generally used to maintain the original positioning when the size of the content area changes.                                                                                             | boolean                                                        | false                                        |          | -                 |\n| autoFocus              | Whether to focus the element in the overlay automatically when the overlay is opened                                                                                                                                                                                  | boolean                                                        | false                                        |          | -                 |\n```\n\n----------------------------------------\n\nTITLE: Menu RenderMore Callback Type Definition\nDESCRIPTION: TypeScript type definition for custom rendering of additional menu items when using horizontal inline mode.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/menu/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n(\n items?: React.ReactElement[]\n ) => React.ReactElement<{ className?: string; style?: React.CSSProperties }>\n```\n\n----------------------------------------\n\nTITLE: Defining CloseArea Type in TypeScript\nDESCRIPTION: This code defines the CloseArea type used in the Tag.Closeable component to specify where the close action can be triggered - either on the entire tag or just the tail (close button).\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tag/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CloseArea = 'tag' | 'tail';\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Position with jumpIndex in Alibaba Fusion Next\nDESCRIPTION: This snippet demonstrates how to use the jumpIndex property to set the initial position of a carousel or slider component. It provides instructions in both Chinese and English.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/virtual-list/__docs__/demo/initial-index/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=1\n\n# 设置初始位置\n\n使用 jumpIndex 设置初始位置\n\n# en-US order=1\n\n# Basic\n\nUse jumpIndex to set first item.\n```\n\n----------------------------------------\n\nTITLE: Animation List Implementation\nDESCRIPTION: Table showing paired animation effects for entrance and exit animations. Includes fade, slide, zoom, expand, and pulse animations.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/animate/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| In           | Out           |\n| ------------ | ------------- |\n| fadeIn       | fadeOut       |\n| fadeInDown   | fadeOutDown   |\n| fadeInLeft   | fadeOutLeft   |\n| fadeInRight  | fadeOutRight  |\n| fadeInUp     | fadeOutUp     |\n| slideInDown  | slideOutUp    |\n| slideInLeft  | slideOutLeft  |\n| slideInRight | slideOutRight |\n| slideInUp    | slideOutDown  |\n| zoomIn       | zoomOut       |\n| expandInDown | expandOutUp   |\n| expandInUp   | expandOutDown |\n| pulse        |               |\n```\n\n----------------------------------------\n\nTITLE: Defining KeyType in TypeScript for Collapse Component\nDESCRIPTION: Defines the KeyType used in the Collapse component, which can be either a string or a number.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/collapse/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type KeyType = string | number;\n```\n\n----------------------------------------\n\nTITLE: Basic Overlay Component Documentation\nDESCRIPTION: Multilingual documentation showing how to use an overlay/popup component. Provides both Chinese (zh-CN) and English (en-US) descriptions of functionality.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/overlay/__docs__/demo/baisc/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=0\n\n# 基本\n\n弹出一个弹层。\n\n# en-US order=0\n\n# Basic\n\nPop up a overlay.\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarMode Type for Calendar View Options in TypeScript\nDESCRIPTION: This type definition specifies the possible modes for a calendar component, allowing either 'month' or 'year' views.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/calendar2/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CalendarMode = 'month' | 'year';\n```\n\n----------------------------------------\n\nTITLE: Documenting Search Component Inner Methods in Markdown\nDESCRIPTION: This snippet describes the inner methods of the Search component, specifically the focus method which can be accessed via refs. It details the method signature and parameters for programmatically focusing the search input.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/search/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Search Inner Methods(Got by refs)\n\n| Param | Descripiton                                                                                                                                                      | Type     | Default Value |\n| ----- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- | ------------- |\n| focus | get foucs<br><br>**signature**:<br> Function(start:Number, end: Number)<br>**params**:<br>_start_: {Number} cursor postion<br>_end_: {Number} select end postion | Function |               |\n```\n\n----------------------------------------\n\nTITLE: Documenting Disabled State in Markdown (English)\nDESCRIPTION: Markdown documentation in English describing the ability to switch UI elements to a disabled state.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/form/__docs__/demo/disabled/index.md#2025-04-10_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# en-US order=17\n\n# Disabled\n\nYou can switch to disabled state.\n```\n\n----------------------------------------\n\nTITLE: Locale Object Structure Example\nDESCRIPTION: Shows the expected structure of a locale configuration object with translations for different components.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/config-provider/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    DatePicker: {\n        datePlaceholder: 'Select date',\n        monthPlaceholder: 'Select month',\n        yearPlaceholder: 'Select year',\n        rangeStartPlaceholder: 'Start date',\n        rangeEndPlaceholder: 'End date',\n        ok: 'OK',\n        clear: 'Clear'\n    },\n    Dialog: {\n        // ...\n    },\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Animation Property Type Definition\nDESCRIPTION: Type definition for the animation property showing possible values including string, false, or a record with 'in' and 'out' properties.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/balloon/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstring | false | Record<'in' | 'out', string>\n```\n\n----------------------------------------\n\nTITLE: Menu Icons Interface Definition\nDESCRIPTION: TypeScript interface definition for customizing internal icons in the menu component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/menu/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n select?: React.ReactNode;\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Position with popupProps\nDESCRIPTION: Documentation showing how to configure the alignment and positioning of dropdown menus using the align property within popupProps object.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/pagination/__docs__/demo/dropdown-direction/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# zh-CN order=9\n\n# 下拉框位置\n\n使用`popupProps` prop中的`align`属性设置下拉位置。\n\n# en-US order=9\n\n# Dropdown align\n\nSet dropdown location using `align` property in `popupProps` prop.\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Mode Types in TypeScript\nDESCRIPTION: Type definition for menu open modes, supporting either 'inline' or 'popup' display styles.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/menu/__docs__/index.en-us.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Mode = 'inline' | 'popup';\n```\n\n----------------------------------------\n\nTITLE: Adding default stopPropagation to Overlay onTouchEnd\nDESCRIPTION: Adds default stopPropagation behavior to the onTouchEnd event in the Overlay component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/CHANGELOG.md#2025-04-10_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ncommit fcc451d\n```\n\n----------------------------------------\n\nTITLE: Configuring Language with ConfigProvider in React\nDESCRIPTION: This snippet demonstrates how to set up internationalization using ConfigProvider from @alifd/next. It shows imports for different language locales and wraps a DatePicker component with ConfigProvider to apply the English locale.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/en-us/i18n.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ConfigProvider, DatePicker } from '@alifd/next';\nimport enUS from '@alifd/next/lib/locale/en-us';\n// import zhCN from '@alifd/next/lib/locale/zh-cn';\n// import zhHK from '@alifd/next/lib/locale/zh-hk';\n// import zhTW from '@alifd/next/lib/locale/zh-tw';\n// import jaJP from '@alifd/next/lib/locale/ja-jp';\n\n// If the application directly import the next-with-locales.js file on cdn\n// Need to import language file as follows:\n// const { ConfigProvider, DatePicker, locales } = window.Next;\n// const enUS = locales['en-us'];\n\n\nclass App extends React.Component {\n    render() {\n        return (\n            <ConfigProvider locale={enUS}>\n                <DatePicker />\n            </ConfigProvider>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Animation Configuration Object Example in Alibaba Fusion Next\nDESCRIPTION: Example of the default animation configuration object used for the animation prop, showing the in and out animation classes.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/balloon/__docs__/index.en-us.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{ in: 'zoomIn zoomInBig', out: 'zoomOut zoomOutBig', }\n```\n\n----------------------------------------\n\nTITLE: Defining onDrop Callback Function in Tree Component\nDESCRIPTION: TypeScript type definition for the onDrop callback function that's triggered when a dragged node is dropped. It provides detailed information about both the drag source and drop target.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tree/__docs__/index.en-us.md#2025-04-10_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n(info: {\n event: React.MouseEvent;\n node: NodeInstance;\n dragNode: NodeInstance;\n dragNodesKeys: Array\\<string>;\n dropPosition: number;\n }) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Configuration Type in TypeScript\nDESCRIPTION: Type definition showing the structure for animation configuration object that controls popup animations with 'in' and 'out' properties.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/balloon/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{ in: 'zoomIn zoomInBig', out: 'zoomOut zoomOutBig' }\n```\n\n----------------------------------------\n\nTITLE: Referencing Git Commits in Markdown\nDESCRIPTION: Demonstrates how to reference Git commit hashes in Markdown format, used to link specific changes to commits in the project repository.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/CHANGELOG.md#2025-04-10_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\n* **DatePicker2:** support outputFormat ([976d712](https://github.com/alibaba-fusion/next/commit/976d712))\n```\n\n----------------------------------------\n\nTITLE: Setting Locale for Moment.js in DatePicker (JSX)\nDESCRIPTION: This snippet demonstrates how to set the locale for Moment.js to Chinese, which affects the DatePicker's language and formatting.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport moment from 'moment';\n\nmoment.locale('zh-cn');\n```\n\n----------------------------------------\n\nTITLE: Cascader onChange Handler\nDESCRIPTION: TypeScript interface showing the onChange callback function signature\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader/__docs__/index.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n(\n value: string | Array<string>,\n data: CascaderDataItem | Array<CascaderDataItem>,\n extra: Extra\n) => void\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Balloon.Tooltip Parameters\nDESCRIPTION: API documentation table showing all available parameters for the Balloon.Tooltip component, including types, default values, and descriptions\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/balloon/__docs__/index.en-us.md#2025-04-10_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Param          | Description                                                                                                                                                                                                                                                                      | Type                                                               | Default Value | Required |\n| -------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------ | ------------- | -------- |\n| v2             | Enable v2                                                                                                                                                                                                                                                                        | false \\| undefined                                                 | -             |          |\n| children       | Content of tooltip                                                                                                                                                                                                                                                               | ReactNode                                                          | -             |          |\n| align          | Position of popup                                                                                                                                                                                                                                                                | AlignType                                                          | 'b'           |          |\n| trigger        | Trigger element                                                                                                                                                                                                                                                                  | ReactElement \\| string                                             | <span/>       |          |\n| triggerType    | Trigger behavior, mouse hover, mouse click ('hover', 'click') or an array of them, e.g. ['hover', 'click'], strongly not recommended to use 'focus', if the popup content has complex interactions, it is recommended to use the Balloon component with triggerType set to click | 'hover' \\| 'click' \\| 'focus' \\| ('hover' \\| 'click' \\| 'focus')[] | 'hover'       |          |\n| popupStyle     | Popup style                                                                                                                                                                                                                                                                      | CSSProperties                                                      | -             |          |\n| popupClassName | Popup className                                                                                                                                                                                                                                                                  | string                                                             | -             |          |\n| popupProps     | Popup props                                                                                                                                                                                                                                                                      | ComponentPropsWithRef<typeof Popup>                               | -             |          |\n| pure           | Whether to pure render                                                                                                                                                                                                                                                           | boolean                                                            | -             |          |\n| popupContainer | Specify the parent node of the floating layer that is rendered, which can be a string of node id, or a function that returns a node                                                                                                                                              | PopupProps['container']                                            | -             |          |\n| followTrigger  | Whether to follow scrolling                                                                                                                                                                                                                                                      | boolean                                                            | -             |          |\n| id             | Popup id, if passed value will support accessibility                                                                                                                                                                                                                             | string                                                             | -             |          |\n| delay          | If needed, set this parameter to allow the Tooltip content to be clicked, e.g. 100px                                                                                                                                                                                             | number                                                             | 50            |          |\n```\n\n----------------------------------------\n\nTITLE: IE9 Compatible Server Response\nDESCRIPTION: Server response format required for IE9 compatibility, including document.domain script for cross-domain functionality\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/upload/__docs__/index.en-us.md#2025-04-10_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script>document.domain=\"taobao.com\";</script>\n{\"status\":1,\"type\":\"ajax\",\"name\":\"54.png\",\"url\":\".\\/files\\/54.png\"}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for CalendarMode\nDESCRIPTION: Type definition for the Calendar component's mode property, specifying the available panel modes as 'date', 'month', or 'year'.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/calendar/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CalendarMode = 'date' | 'month' | 'year';\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with Next Theme Plugin for Roboto Fonts\nDESCRIPTION: Demonstrates how to configure Webpack using @alifd/next-theme-webpack-plugin to modify the Roboto font path variable when using on-demand component loading.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/zh-cn/font-deploy.md#2025-04-10_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nnew ThemePlugin({\n  theme: '@alifd/theme-xxx',\n  modifyVars: {\n    // 注意，最后以 / 结束\n    '$font-custom-path': '\"//g.alicdn.com/font-path/\"'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Date Selection with disabledDate Property in Alibaba Fusion Next\nDESCRIPTION: This snippet shows how to use the 'disabledDate' property to disable specific dates in a calendar component. It allows developers to prevent users from selecting or inputting certain dates based on custom logic.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker/__docs__/demo/disabled-date/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=4\n\n# 禁止选择某些日期\n\n可以通过 `disabledDate` 属性来禁止用户选择或输入某些特定日期。\n\n# en-US order=4\n\n# Disable dates\n\nDisable date cells by `disabledDate`.\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - ARIA and Keyboard Support\nDESCRIPTION: Documentation table showing keyboard accessibility features and behaviors for the Balloon.Tooltip component\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/balloon/__docs__/index.en-us.md#2025-04-10_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| KeyBoard | Descripiton                                           |\n| :------- | :---------------------------------------------------- |\n| SPACE    | When `triggerType='click'`, click will popup a prompt |\n| Enter    | When `triggerType='click'`, click will popup a prompt |\n```\n\n----------------------------------------\n\nTITLE: Cascader Promise Interface\nDESCRIPTION: TypeScript interface showing the loadData async function signature\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader/__docs__/index.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(data: CascaderDataItem, source: CascaderDataItem) => Promise<unknown>\n```\n\n----------------------------------------\n\nTITLE: Defining Spacing Type in TypeScript\nDESCRIPTION: Defines the Spacing type used in the Box component API. It allows for flexible specification of spacing using numbers or arrays.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/box/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Spacing =\n    | number\n    | [topAndBottom: number, rightAndLeft: number]\n    | [top: number, rightAndLeft: number, bottom: number]\n    | [top: number, right: number, bottom: number, left: number];\n```\n\n----------------------------------------\n\nTITLE: Configuring Icon Font Path with SCSS Variables\nDESCRIPTION: Sets the icon font path variable before importing the theme package's index.scss file.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/en-us/font-deploy.md#2025-04-10_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$icon-font-path: \"//g.alicdn.com/icon-font-path\";\n@import \"~@alifd/theme-xxx/index.scss\";\n```\n\n----------------------------------------\n\nTITLE: Disabling Date Selection Using disabledDate Property in Alibaba Fusion Next\nDESCRIPTION: This snippet explains how to use the 'disabledDate' property to restrict date selection in a date picker component. It allows developers to specify which dates should be disabled or unavailable for user selection or input.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker2/__docs__/demo/disabledDate/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=3\n\n# 禁止选择某些日期\n\n可以通过 `disabledDate` 属性来禁止用户选择或输入某些特定日期。\n\n# en-US order=3\n\n# Disable dates\n\nDisable date cells by `disabledDate`.\n```\n\n----------------------------------------\n\nTITLE: Basic Message Show Method Usage in JavaScript\nDESCRIPTION: Demonstrates how to use the Message.show() method to display an error message with a title, content, and mask overlay.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/message/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMessage.show({\n    type: 'error',\n    title: 'Error',\n    content: 'Please contact admin feedback!',\n    hasMask: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining onToggleHighlightItem Callback for Select Component in TypeScript\nDESCRIPTION: This snippet defines the type for the onToggleHighlightItem callback function. It is called when using keyboard navigation to switch highlighted menu options, taking optional parameters for the highlight key and change type.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/select/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n(\n highlightKey?: string | boolean | NormalizedObjectItem | null,\n type?: HighlightChangeType\n) => void\n```\n\n----------------------------------------\n\nTITLE: Server-Side Response for IE9 Compatibility in JavaScript\nDESCRIPTION: This code snippet shows the required server-side response format for IE9 compatibility when using the Upload component. It includes a script tag for setting the document domain and a JSON response with upload details.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/upload/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n  <script>document.domain=\"taobao.com\";</script>\n  {\n    \"status\":1,\n    \"type\":\"ajax\",\n    \"name\":\"54.png\",\n    \"url\":\".\\/files\\/54.png\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Next-Core Package with NPM\nDESCRIPTION: Command to install the @alifd/next-core package as a dependency in your project using npm.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/core/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @alifd/next-core --save\n```\n\n----------------------------------------\n\nTITLE: Defining TimePicker Props Interface in TypeScript\nDESCRIPTION: This code snippet represents the TypeScript interface for the props of the TimePicker component. It includes all the possible configuration options and their respective types.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/time-picker/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TimePickerProps {\n  label?: React.ReactNode;\n  state?: 'error' | 'success';\n  placeholder?: string;\n  value?: string | Moment | null;\n  defaultValue?: string | Moment;\n  size?: 'small' | 'medium' | 'large';\n  hasClear?: boolean;\n  format?: string;\n  hourStep?: number;\n  minuteStep?: number;\n  secondStep?: number;\n  disabledHours?: (index: number) => boolean;\n  disabledMinutes?: (index: number) => boolean;\n  disabledSeconds?: (index: number) => boolean;\n  visible?: boolean;\n  defaultVisible?: boolean;\n  popupContainer?: string | HTMLElement | ((target: HTMLElement) => HTMLElement);\n  popupAlign?: string;\n  popupTriggerType?: 'click' | 'hover';\n  onVisibleChange?: (visible: boolean, reason: string) => void;\n  popupStyle?: React.CSSProperties;\n  popupClassName?: string;\n  popupProps?: PopupProps;\n  disabled?: boolean;\n  isPreview?: boolean;\n  renderPreview?: (value: Moment | null, props: TimePickerProps) => React.ReactNode;\n  onChange?: (value: Moment | string | null) => void;\n  renderTimeMenuItems?: (\n    list: Array<TimeMenuListItem>,\n    mode: TimeMenuProps['mode'],\n    value: TimeMenuProps['value']\n  ) => Array<TimeMenuListItem>;\n}\n```\n\n----------------------------------------\n\nTITLE: DatePicker.RangePicker Visible Change Handler\nDESCRIPTION: Function signature for handling visibility state changes of the date picker popup\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker2/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nFunction(visible: Boolean, reason: String) => void\n```\n\n----------------------------------------\n\nTITLE: Basic Message Show Example\nDESCRIPTION: Demonstrates how to show a message using the Message.show() method with custom configuration options.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/message/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMessage.show({\n    type: 'error',\n    title: '错误',\n    content: '请联系相关人员反馈！',\n    hasMask: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining filterTreeNode Function in Tree Component\nDESCRIPTION: TypeScript type definition for the filterTreeNode function that determines whether a node should be highlighted. It returns a boolean based on the node information.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tree/__docs__/index.en-us.md#2025-04-10_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n(node: NodeInstance) => boolean\n```\n\n----------------------------------------\n\nTITLE: DatePicker.RangePicker Function Signature\nDESCRIPTION: Type definition showing the signature for the date disable function callback\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker2/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nFunction(dateValue: MomentObject, view: 'year' | 'month' | 'date') => Boolean\n```\n\n----------------------------------------\n\nTITLE: Defining CustomCellRender Function Type in TypeScript\nDESCRIPTION: Defines the CustomCellRender type which represents a function for custom rendering of calendar cells. This function takes a Dayjs date value as input and returns a React node for rendering custom cell content.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/calendar2/__docs__/index.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CustomCellRender = (value: Dayjs) => React.ReactNode;\n```\n\n----------------------------------------\n\nTITLE: Message Instance Close Example\nDESCRIPTION: Shows how to create and manually close a message instance.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/message/__docs__/index.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst instance = Message.success('this is a message');\n\ninstance.close(); // 可以用 close 直接关闭弹窗\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - ARIA and Keyboard Navigation\nDESCRIPTION: Documentation table showing keyboard navigation support for accessibility.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/breadcrumb/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| KeyBoard | Descripiton         |\n| :------- | :------------------ |\n| Tab      | switch to next item |\n```\n\n----------------------------------------\n\nTITLE: DatePicker.RangePicker Value Format\nDESCRIPTION: Example showing the structure of the date range value array\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker2/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n[moment, moment]\n```\n\n----------------------------------------\n\nTITLE: Defining CascaderSelect Component in Markdown\nDESCRIPTION: This snippet defines the basic metadata for the CascaderSelect component, including its category, family, Chinese name, and type.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader-select/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# CascaderSelect\n\n-   category: Components\n-   family: DataEntry\n-   chinese: 级联选择\n-   type: 基本\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarMode Type in TypeScript\nDESCRIPTION: Defines the CalendarMode type which specifies the available display modes for a calendar component. This type limits the calendar view to either 'month' or 'year' modes.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/calendar2/__docs__/index.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CalendarMode = 'month' | 'year';\n```\n\n----------------------------------------\n\nTITLE: Notification API Interface Definition - Markdown\nDESCRIPTION: API documentation for the main Notification object, defining methods for showing different types of notifications.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/notification/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Param   | Description | Type                                               | Default Value | Required |\n| ------- | ----------- | -------------------------------------------------- | ------------- | -------- |\n| config  | -           | (config: NotificationConfig) => NotificationConfig | -             | yes      |\n| open    | -           | (options: NotificationOptions) => string           | -             | yes      |\n| close   | -           | (key: string) => void                              | -             | yes      |\n| destroy | -           | () => void                                         | -             | yes      |\n| success | -           | (options: NotificationOptions) => string           | -             | yes      |\n| error   | -           | (options: NotificationOptions) => string           | -             | yes      |\n| warning | -           | (options: NotificationOptions) => string           | -             | yes      |\n| notice  | -           | (options: NotificationOptions) => string           | -             | yes      |\n| help    | -           | (options: NotificationOptions) => string           | -             | yes      |\n```\n\n----------------------------------------\n\nTITLE: Implementing onResizeChange Event Handler for Table Columns in JavaScript\nDESCRIPTION: This code defines the onResizeChange event handler for a Table component. It is called when column sizes are reset and receives the dataIndex of the modified column and the change value as parameters.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/table/__docs__/index.md#2025-04-10_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nonResizeChange: Function(dataIndex: String, value: Number) => void\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarPanelMode Type for Detailed Calendar Views in TypeScript\nDESCRIPTION: This type definition specifies the possible panel modes for a calendar component, offering more granular options including 'date', 'week', 'month', 'quarter', 'year', and 'decade'.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/calendar2/__docs__/index.en-us.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CalendarPanelMode = 'date' | 'week' | 'month' | 'quarter' | 'year' | 'decade';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for VisibleMonthChangeType\nDESCRIPTION: Type definition for the reason parameter in onVisibleMonthChange callback, indicating what triggered the month change.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/calendar/__docs__/index.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type VisibleMonthChangeType = 'cellClick' | 'buttonClick' | 'yearSelect' | 'monthSelect';\n```\n\n----------------------------------------\n\nTITLE: Using Dialog.alert/confirm/show API in Alibaba Fusion Next\nDESCRIPTION: Configuration options for Dialog.alert, Dialog.confirm, and Dialog.show methods with their respective properties, types, and default values.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/dialog/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nDialog.alert({\n  title: ReactNode, // Title of the dialog\n  content: ReactNode, // Content of the dialog\n  onOk: Function, // Callback when OK button is clicked\n  onCancel: Function, // Callback when Cancel button is clicked\n  messageProps: Object // Properties for embedded Message component\n});\n\nDialog.confirm({\n  // Same properties as Dialog.alert\n});\n\nDialog.show({\n  title: ReactNode, // Title of the dialog\n  content: ReactNode, // Content of the dialog\n  onOk: Function, // Callback when OK button is clicked\n  onCancel: Function // Callback when Cancel button is clicked\n  // Other Dialog component properties can also be passed\n});\n```\n\n----------------------------------------\n\nTITLE: Defining OnPrevOrNext Type for Calendar Navigation in TypeScript\nDESCRIPTION: This type definition specifies the structure of a function used for handling previous and next actions in a calendar component. It takes a Dayjs value and an options object with unit and num properties.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/calendar2/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type OnPrevOrNext = (value: Dayjs, options: { unit: ManipulateType; num: number }) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining Card Calendar Component in Markdown\nDESCRIPTION: This snippet defines the card calendar component using Markdown. It includes a title and description in both Chinese and English, explaining that the calendar can be embedded in containers with limited dimensions.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/calendar/__docs__/demo/card/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=1\n\n# 日历卡片\n\n可以将 `card` 形态的日历组件嵌套在宽高受限的容器中。\n\n# en-US order=1\n\n# Card\n\nA card calendar is usually used for embedding in a container with limiting width and height.\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonSize Type in TypeScript\nDESCRIPTION: This snippet defines the ButtonSize type, which represents the available size options for buttons in the component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/button/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ButtonSize = 'small' | 'medium' | 'large';\n```\n\n----------------------------------------\n\nTITLE: Documenting TimePicker Control\nDESCRIPTION: Markdown documentation explaining how to implement a controlled TimePicker component using the value and onChange props. This creates a controlled component where the value can only be changed through selection.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/time-picker2/__docs__/demo/value/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# zh-CN order=2\n\n# 受控\n\n通过 `value` 和 `onChange` 实现受控，仅支持通过选择实现受控。\n\n# en-US order=2\n\n# Controlled\n\nCreating controlled TimePikcer by `value` and `onChange`.\n```\n\n----------------------------------------\n\nTITLE: Describing useDetailValue Hook Functionality in Markdown\nDESCRIPTION: This snippet explains the purpose of the useDetailValue hook in both Chinese and English. It transforms the value, defaultValue, and the first argument of onChange from strings to objects.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tree-select/__docs__/demo/use-detail-value/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=8\n\n# 对象数据\n\n`useDetailValue` 把 `value`、`defaultValue`、`onChange 第一个参数`从字符串变成对象\n\n# en-US order=8\n\n# useDetailValue\n\n`useDetailValue` change `value`、`defaultValue`、`first arg of onChange` from string to object\n```\n\n----------------------------------------\n\nTITLE: Progress Component API Usage Example\nDESCRIPTION: This snippet shows the API structure for the Progress component, demonstrating its various properties including shape, size, percent, state, and more. It also includes information about property types, default values, and whether they are required.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/progress/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数            | 说明                                                                                                                              | 类型                                                           | 默认值                                    | 是否必填 |\n| --------------- | --------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------- | ----------------------------------------- | -------- |\n| shape           | 形态                                                                                                                              | 'circle' \\| 'line'                                             | 'line'                                    |          |\n| size            | 尺寸                                                                                                                              | 'small' \\| 'medium' \\| 'large'                                 | 'medium'                                  |          |\n| percent         | 所占百分比                                                                                                                        | number                                                         | 0                                         |          |\n| state           | 进度状态, 显示优先级: color \\> progressive \\> state                                                                               | 'normal' \\| 'success' \\| 'error'                               | 'normal'                                  |          |\n| progressive     | 是否为色彩阶段变化模式, 显示优先级: color \\> progressive \\> state                                                                 | boolean                                                        | false                                     |          |\n| hasBorder       | 是否添加 Border（只适用于 Line Progress)                                                                                          | boolean                                                        | false                                     |          |\n| textRender      | 文本渲染函数<br/><br/>**签名**:<br/>**参数**:<br/>_percent_: 当前的进度信息<br/>_option_: 额外的参数<br/>**返回值**:<br/>文本节点 | (percent: number, option?: {rtl?: boolean}) => React.ReactNode | percent =>\\`$\\{Math.floor(percent)\\}%\\` |          |\n| color           | 进度条颜色, 显示优先级: color \\> progressive \\> state                                                                             | string                                                         | -                                         |          |\n| backgroundColor | 背景色                                                                                                                            | string                                                         | -                                         |          |\n```\n\n----------------------------------------\n\nTITLE: Using Button.Group Component in React\nDESCRIPTION: The Button.Group sub-component is used to combine multiple buttons into a single container, providing a way to group related buttons together in the UI.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/button/__docs__/demo/group/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`Button.Group` could be used to combine multiple Buttons.\n```\n\n----------------------------------------\n\nTITLE: Defining Accessibility Keyboard Operations in Markdown\nDESCRIPTION: This snippet provides a table of keyboard operations for accessibility, specifying which keys can be used to interact with the Switch component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/switch/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| 按键  | 说明         |\n| :---- | :----------- |\n| Enter | 切换选中状态 |\n| SPACE | 切换选中状态 |\n```\n\n----------------------------------------\n\nTITLE: Customizing Loading Tip and Position in Alibaba Fusion Next (Markdown)\nDESCRIPTION: This snippet describes how to use the 'tip' property to customize the loading tip text and the 'tipAlign' property to set the tip's position. It supports 'right' and 'bottom' (default) alignments.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/loading/__docs__/demo/tipAlign/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=2\n\n# 自定义提示语及其位置\n\n通过`tip`自定义加载提示语，通过`tipAlign`设置提示语的位置，目前支持 `right` / `bottom (default)`。\n\n# en-US order=2\n\n# Custom Tip Position\n\nUse custom loading tip with its location.\n```\n\n----------------------------------------\n\nTITLE: Rendering Progress Text in React\nDESCRIPTION: This code snippet demonstrates the default implementation of the textRender prop for the Progress component. It renders the current progress percentage as text.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/progress/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npercent => `${Math.floor(percent)}%`\n```\n\n----------------------------------------\n\nTITLE: SplitButton API Properties Table in Markdown\nDESCRIPTION: Markdown table defining the API properties, types, and default values for the SplitButton component, including size, type, label, and various configuration options for button and popup behavior.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/split-button/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数                  | 说明                                                                                                                                                                                                                                              | 类型        | 默认值       |\n| ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | --------- |\n| size                | 按钮组的尺寸<br/><br/>**可选值**:<br/>'small', 'medium', 'large'                                                                                                                                                                                         | Enum      | 'medium'  |\n| type                | 按钮的类型<br/><br/>**可选值**:<br/>'normal', 'primary', 'secondary'                                                                                                                                                                                    | Enum      | 'normal'  |\n| label               | 主按钮的文案                                                                                                                                                                                                                                          | ReactNode | -         |\n| component           | 设置标签类型<br/><br/>**可选值**:<br/>'button', 'a'                                                                                                                                                                                                      | Enum      | -         |\n| ghost               | 是否为幽灵按钮<br/><br/>**可选值**:<br/>'light', 'dark', false, true                                                                                                                                                                                      | Enum      | -         |\n```\n\n----------------------------------------\n\nTITLE: Documenting Custom Error Handling in Alibaba Fusion Next (Markdown)\nDESCRIPTION: This snippet contains markdown documentation for custom error handling in Alibaba Fusion Next components. It explains how to set errors for components manually, allowing developers to have more control over error displays.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/field/__docs__/demo/seterror/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=3\n\n# 自定义错误\n\n自己控制组件的errors\n\n# en-US order=3\n\n# custom errors\n\nset errors of component by yourself\n```\n\n----------------------------------------\n\nTITLE: Documenting Fixed Width Slider in Markdown\nDESCRIPTION: This snippet provides documentation for a slider component with a fixed width range. It describes the behavior of a double slider with a preset range that cannot be changed, where dragging the selected area adjusts the positions of the start and end sliders.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/range/__docs__/demo/fixedWidth/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=0\n\n# 固定宽度滑动\n\n默认双滑块(`slider` 为 `double`)，且指定 `defaultValue`为区间值下可用。范围不可被改变，拖动所选区域改变始末滑块位置。\n\n# en-US order=0\n\n# fixedWidth\n\nIt means `slider` is `double`, and `defaultValue` is a interval. The scope can not be changed, drag the selected area to change the position of the start and end slider.\n```\n\n----------------------------------------\n\nTITLE: Defining Switch Component API in Markdown\nDESCRIPTION: This snippet outlines the API for the Switch component, including properties, their types, default values, and descriptions. It covers key features such as controlled/uncontrolled state, size options, loading state, and custom rendering for checked/unchecked states.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/switch/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数              | 说明                                                                                                                                                     | 类型                                                                                                                      | 默认值   | 是否必填 |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- | -------- | -------- |\n| defaultChecked    | 开关是否打开默认值 (非受控)                                                                                                                              | boolean                                                                                                                   | false    |          |\n| checked           | 开关是否打开（受控）                                                                                                                                     | boolean                                                                                                                   | -        |          |\n| onChange          | 开关状态改变时事件<br/><br/>**签名**:<br/>**参数**:<br/>_checked_: 是否打开                                                                              | (<br/> checked: boolean,<br/> e: React.MouseEvent\\<HTMLDivElement> \\| React.KeyboardEvent\\<HTMLDivElement><br/> ) => void | -        |          |\n| size              | switch 的尺寸                                                                                                                                            | 'medium' \\| 'small'                                                                                                       | 'medium' |          |\n| loading           | 加载状态                                                                                                                                                 | boolean                                                                                                                   | false    |          |\n| disabled          | 表示开关被禁用                                                                                                                                           | boolean                                                                                                                   | false    |          |\n| autoWidth         | 宽度根据内容自适应                                                                                                                                       | boolean                                                                                                                   | false    |          |\n| isPreview         | 是否预览模式                                                                                                                                             | boolean                                                                                                                   | false    |          |\n| renderPreview     | 自定义预览态模式下渲染的内容<br/><br/>**签名**:<br/>**参数**:<br/>_checked_: 是否打开<br/>_props_: 组件参数对象<br/>**返回值**:<br/>预览模式下的渲染内容 | (checked: boolean, props: SwitchProps) => React.ReactNode                                                                 | -        |          |\n| checkedChildren   | 打开时的内容                                                                                                                                             | React.ReactNode                                                                                                           | -        |          |\n| unCheckedChildren | 关闭时的内容                                                                                                                                             | React.ReactNode                                                                                                           | -        |          |\n| onClick           | 鼠标点击事件                                                                                                                                             | (e: React.MouseEvent\\<HTMLDivElement> \\| React.KeyboardEvent\\<HTMLDivElement>) => void                                    | -        |          |\n| onKeyDown         | 键盘按键事件                                                                                                                                             | (e: React.KeyboardEvent\\<HTMLDivElement>) => void                                                                         | -        |          |\n```\n\n----------------------------------------\n\nTITLE: Defining CustomCellRender Type for Custom Calendar Cell Rendering in TypeScript\nDESCRIPTION: This type definition specifies a function that takes a Dayjs value and returns a React node, allowing for custom rendering of calendar cells.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/calendar2/__docs__/index.en-us.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CustomCellRender = (value: Dayjs) => React.ReactNode;\n```\n\n----------------------------------------\n\nTITLE: Documenting Disabled State in Markdown (Chinese)\nDESCRIPTION: Markdown documentation in Chinese explaining the concept of disabling UI elements with a single action.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/form/__docs__/demo/disabled/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=18\n\n# 禁用\n\n一键切换元素为禁用态\n```\n\n----------------------------------------\n\nTITLE: Documenting Avatar Component Features in Markdown\nDESCRIPTION: This snippet describes the basic features of the Avatar component, including size and shape variations. It is presented in both Chinese and English languages.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/avatar/__docs__/demo/basic/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=0\n\n# 基本\n\n简单的头像展示，支持三种尺寸，两种形状。\n\n# en-US order=0\n\n# Basic Usage\n\nSimple usage of Avatar component, it has 3 sizes and 2 shapes.\n```\n\n----------------------------------------\n\nTITLE: Defining StepStatus Type in TypeScript\nDESCRIPTION: This snippet defines the StepStatus type, which represents the possible statuses for a step in the Step component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/step/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type StepStatus = 'wait' | 'process' | 'finish';\n```\n\n----------------------------------------\n\nTITLE: Configuring Switch Size Documentation\nDESCRIPTION: Markdown documentation showing how to set switch size property with small option. Includes both Chinese and English explanations.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/switch/__docs__/demo/size/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# zh-CN order=4\n\n# 两种大小\n\nsize=\"small\" 表示小号开关\n\n# en-US order=4\n\n# size\n\nuse size=small to set small switch\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Upload Component API in Markdown\nDESCRIPTION: This snippet serves as a placeholder for the API documentation of the Upload component, which is currently empty but intended to be filled with detailed API information.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/upload/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## API\n```\n\n----------------------------------------\n\nTITLE: Defining Balloon Style Types in Markdown\nDESCRIPTION: This snippet defines the title and description for balloon style types in both Chinese and English. It uses Markdown formatting to structure the content.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/balloon/__docs__/demo/arrow-point-to-center/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=4\n\n# 箭头指向中间\n\n常见气泡使用类型\n\n# en-US order=0\n\n# Style Type\n\nCommon types of Balloon\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Shapes in Next UI Library\nDESCRIPTION: Lists the available tab shape options configurable through the 'shape' property based on usage scenarios and trigger control types.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tab/__docs__/demo/shape/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-   `pure` 普通选项卡（默认）\n-   `wrapped` 包裹型选项卡\n-   `text` 文本型选项卡\n-   `capsule` 胶囊型选项卡\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Offset in Alibaba Fusion Next (Markdown)\nDESCRIPTION: This snippet explains how to set custom offsets for a component using 'offsetTop' or 'offsetBottom' properties. It provides information in both Chinese and English.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/affix/__docs__/demo/custom-offset/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=2\n\n# 自定义偏移量\n\n可以通过 `offsetTop` 或 `offsetBottom` 自定义偏移量。\n\n# en-US order=2\n\n# Offset\n\nSetting the offset by `offsetTop` or `offsetBottom`.\n```\n\n----------------------------------------\n\nTITLE: Defining RadioValue Type in TypeScript\nDESCRIPTION: TypeScript type definition for the Radio component value which can be a string, number, or boolean.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/radio/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RadioValue = string | number | boolean;\n```\n\n----------------------------------------\n\nTITLE: Setting Input Disabled State\nDESCRIPTION: Shows the configuration for disabling an Input component by setting the 'disabled' prop to true.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/input/__docs__/demo/disabled/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Disabled state\n\nSet `Input` as `disabled` state\n```\n\n----------------------------------------\n\nTITLE: Documenting Basic Usage in Chinese and English\nDESCRIPTION: This snippet provides documentation for the basic usage of an Alibaba Fusion Next component in both Chinese and English. It sets the order to 0 for both language versions.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/transfer/__docs__/demo/basic/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=0\n\n# 基本用法\n\n最简单的用法。\n\n# en-US order=0\n\n# Basic usage\n\nThe simplest usage.\n```\n\n----------------------------------------\n\nTITLE: Tab Component API Properties\nDESCRIPTION: Markdown table defining the complete API interface for the Tab component, including props, their types, default values, and descriptions.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tab/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Param               | Description                                                                                                                                                                | Type                                                                                                            | Default Value | Required |\n| ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------- | ------------- | -------- |\n| activeKey           | Key of the current active tab. This prop will make tab a 'controlled component', end user will be unable to change tabs.                                                   | string                                                                                                          | -             |          |\n| defaultActiveKey    | Key of default active tab.                                                                                                                                                 | string                                                                                                          | -             |          |\n| shape               | Shape of tab.                                                                                                                                                              | 'pure' \\| 'wrapped' \\| 'text' \\| 'capsule'                                                                      | 'pure'        |          |\n| animation           | Enable animation.                                                                                                                                                          | boolean                                                                                                         | true          |          |\n| excessMode          | Excess mode for extra tabs.                                                                                                                                                | 'slide' \\| 'dropdown'                                                                                           | 'slide'       |          |\n| tabPosition         | Position of tabs. Only effective when shape is 'wrapped'.                                                                                                                  | 'top' \\| 'bottom' \\| 'left' \\| 'right'                                                                          | 'top'         |          |\n| size                | Size of the tabs                                                                                                                                                           | 'small' \\| 'medium'                                                                                             | 'medium'      |          |\n| triggerType         | Trigger type to change active tab.                                                                                                                                         | 'hover' \\| 'click'                                                                                              | 'click'       |          |\n| lazyLoad            | Lazy mount tabs.                                                                                                                                                           | boolean                                                                                                         | true          |          |\n| unmountInactiveTabs | Auto unmount inactive tabs                                                                                                                                                 | boolean                                                                                                         | false         |          |\n```\n\n----------------------------------------\n\nTITLE: RadioGroup DataSource Configuration Documentation\nDESCRIPTION: Dual-language documentation explaining how to configure RadioGroup using dataSource parameter to render radio buttons. The dataSource parameter allows setting radio attributes through array configuration.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/radio/__docs__/demo/dataSource/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=2\n\n# 传入数组配置\n\n通过配置 `dataSource` 参数来渲染单选框分组，数组中对象元素支持配置 radio 属性。\n\n# en-US order=2\n\n# DataSource Usage\n\nGroups that are rendered using `RadioGroup` can set the component using `dataSource`.\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Sort Icons in React\nDESCRIPTION: This code example shows how to customize the sort icons for a Table component. It uses custom Icon components for ascending and descending sort indicators, with specific styling applied.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/table/__docs__/index.en-us.md#2025-04-10_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  desc: <Icon style={{top: '6px', left: '4px'}} type={'arrow-down'} size=\"small\" />,\n  asc: <Icon style={{top: '-6px', left: '4px'}} type={'arrow-up'} size=\"small\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Sort Icons in React\nDESCRIPTION: This code example shows how to customize the sort icons for a Table component. It uses custom Icon components for ascending and descending sort indicators, with specific styling applied.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/table/__docs__/index.en-us.md#2025-04-10_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  desc: <Icon style={{top: '6px', left: '4px'}} type={'arrow-down'} size=\"small\" />,\n  asc: <Icon style={{top: '-6px', left: '4px'}} type={'arrow-up'} size=\"small\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Loading List in English\nDESCRIPTION: Markdown documentation for a list component with loading functionality, written in English. It describes the basic usage of a list with a loading state.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/list/__docs__/demo/loading/index.md#2025-04-10_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# en-US order=2\n\n# Basic Usage\n\nList width loading.\n```\n\n----------------------------------------\n\nTITLE: Documenting Radio Preview State in Chinese\nDESCRIPTION: Markdown documentation in Chinese explaining the preview state of Radio components. It briefly mentions that this section is about the preview state of Radio.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/radio/__docs__/demo/isPreview/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=4\n\n# 预览状态\n\n`Radio`预览状态。\n```\n\n----------------------------------------\n\nTITLE: Tab.Item Props Interface\nDESCRIPTION: TypeScript interface defining the available props for the Tab.Item component, including title, closeable state, disabled state, styling options, and event handlers.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tab/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TabItemProps {\n  title?: ReactNode;\n  closeable?: boolean;\n  disabled?: boolean;\n  style?: CSSProperties;\n  className?: string;\n  onClick?: (key: string, e: React.MouseEvent<HTMLElement>) => void;\n  onMouseEnter?: (key: string, e: React.MouseEvent<HTMLElement>) => void;\n  onMouseLeave?: (key: string, e: React.MouseEvent<HTMLElement>) => void;\n  children?: React.ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CheckboxData Interface in TypeScript\nDESCRIPTION: Interface definition for checkbox data structure, including value, optional label, disabled state, and additional dynamic properties.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/checkbox/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CheckboxData = {\n    value: ValueItem;\n    label?: React.ReactNode;\n    disabled?: boolean;\n    [propName: string]: unknown;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Typography Component API in Markdown\nDESCRIPTION: This snippet defines the API for the main Typography component, including its inheritance from Typography.Text and the 'component' prop for setting the label type.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/typography/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Typography\n\nInherit the Typography.Text API\n\n| Param     | Description    | Type                                  | Default Value | Required |\n| --------- | -------------- | ------------------------------------- | ------------- | -------- |\n| component | Set Label Type | string \\| React.JSX.IntrinsicElements | article       |          |\n```\n\n----------------------------------------\n\nTITLE: Defining Typography Component API in Markdown\nDESCRIPTION: This snippet defines the API for the main Typography component, including its inheritance from Typography.Text and the 'component' prop for setting the label type.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/typography/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Typography\n\nInherit the Typography.Text API\n\n| Param     | Description    | Type                                  | Default Value | Required |\n| --------- | -------------- | ------------------------------------- | ------------- | -------- |\n| component | Set Label Type | string \\| React.JSX.IntrinsicElements | article       |          |\n```\n\n----------------------------------------\n\nTITLE: Describing Alignment Customization in Alibaba Fusion Next (Chinese)\nDESCRIPTION: Explains how to use the 'align' property to customize alignment in Chinese. This snippet is written in Markdown and provides a brief description for Chinese-speaking developers.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/overlay/__docs__/demo/align/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=6\n\n# 对齐\n\n通过 `align` 可以自定义对齐方式。\n```\n\n----------------------------------------\n\nTITLE: Documenting Excess Mode for Tab Component in Markdown\nDESCRIPTION: This snippet provides documentation in both Chinese and English for handling excess tabs in a Tab component. It explains how the component automatically adds scrolling support and how to use the 'excessMode' property to switch between scrolling modes.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tab/__docs__/demo/excess-mode/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=5\n\n# 超出时滑动\n\n当 Tab 标签非常多时，组件会自动增加滑动支持 (可以左右、上下滑动)。可以用过 `excessMode` 属性切换滑动模式，该属性仅在`tabPosition`为`top`或者`bottom`时生效。\n\n# en-US order=5\n\n# Excess mode\n\nIf your Tab excess the range, you can setting `excessMode` to `dropdown` for vertical display, or `slide` for horizontal display, just note that this `excessMode` will only be effective when `tabPosition` is set to be `top` or `bottom`.\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Card Usage in English\nDESCRIPTION: Markdown content describing the basic usage of a card component in English. It specifies that this example shows a simple card with a title and subtitle.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/card/__docs__/demo/basic/index.md#2025-04-10_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# en-US order=0\n\n# Basic\n\nA simple card with title and sub-title.\n```\n\n----------------------------------------\n\nTITLE: Using defaultValue with CheckboxGroup for Uncontrolled Components\nDESCRIPTION: Demonstrates how to create an uncontrolled checkbox group component by setting the defaultValue property. This allows the component to maintain its own internal state without requiring the parent component to manage the state.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/checkbox/__docs__/demo/uncontrol/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# zh-CN order=9&debug=true\n\n# 非受控组件\n\n使用 `CheckboxGroup` 渲染的组，通过设置 `defaultValue` 属性可以让组件变成[非受控组件](https://facebook.github.io/react/docs/forms.html#uncontrolled-components)。\n\n# en-US order=9&debug=true\n\n# Uncontrolled Component\n\nGroups rendered with `CheckboxGroup` can be made to become [uncontrolled components] by setting the `defaultValue` property (https://facebook.github.io/react/docs/forms.html#uncontrolled-components).\n```\n\n----------------------------------------\n\nTITLE: Defining ValueItem Type in TypeScript\nDESCRIPTION: Type definition for the value items that can be used in the Checkbox group. Accepts string, number or boolean values.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/checkbox/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ValueItem = string | number | boolean;\n```\n\n----------------------------------------\n\nTITLE: Documenting Basic Radio Button Usage in Markdown\nDESCRIPTION: This snippet provides documentation for basic radio button usage in both Chinese and English. It explains the purpose of the demo and its order in the documentation.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader-select/__docs__/demo/basic/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=0\n\n# 基本使用\n\n展示基本的单选用法。\n\n# en-US order=0\n\n# Basic Usage\n\nDemo the basic single select usage.\n```\n\n----------------------------------------\n\nTITLE: Defining Spacing Type in TypeScript\nDESCRIPTION: This snippet defines the Spacing type used in the Box component. It allows for various ways to specify spacing, including a single number, two numbers for vertical and horizontal spacing, three numbers for top, horizontal, and bottom spacing, or four numbers for individual side spacing.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/box/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Spacing =\n    | number\n    | [topAndBottom: number, rightAndLeft: number]\n    | [top: number, rightAndLeft: number, bottom: number]\n    | [top: number, right: number, bottom: number, left: number];\n```\n\n----------------------------------------\n\nTITLE: Documenting Checkbox Disabled State in English\nDESCRIPTION: Markdown documentation in English describing the disabled state of the Checkbox component. It specifies the order of this section in the documentation.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/checkbox/__docs__/demo/disbled/index.md#2025-04-10_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# en-US order=1\n\n# Disabled\n\nDisabled state of `Checkbox`.\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch\nDESCRIPTION: Commands to navigate to project directory and create a new feature branch\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/en-us/contributing.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd next\ngit checkout -b fix-issue-100\n```\n\n----------------------------------------\n\nTITLE: Using Big.js Instead of BigNumber.js\nDESCRIPTION: Implementation change to reduce bundle size by replacing BigNumber.js with Big.js library.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/CHANGELOG.md#2025-04-10_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nuse big.js instead of bignumber.js\n```\n\n----------------------------------------\n\nTITLE: Version Release History - Markdown\nDESCRIPTION: Changelog entries documenting bug fixes and improvements across multiple versions, with commit references and issue links\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* **DatePicker2:** support config state props, close [#3750](https://github.com/alibaba-fusion/next/issues/3750) ([#4189](https://github.com/alibaba-fusion/next/issues/4189)) ([6fc1474](https://github.com/alibaba-fusion/next/commit/6fc1474))\n* **DatePicker2:** update display value when toggle showTime props  ([#4190](https://github.com/alibaba-fusion/next/issues/4190)) ([fe7f913](https://github.com/alibaba-fusion/next/commit/fe7f913))\n* **Table:** optimize cell props ts signature  ([#4188](https://github.com/alibaba-fusion/next/issues/4188)) ([1a86a5b](https://github.com/alibaba-fusion/next/commit/1a86a5b))\n```\n\n----------------------------------------\n\nTITLE: Documenting Basic Box Component Usage in Markdown\nDESCRIPTION: This snippet contains markdown documentation for the basic usage of the Box component in Alibaba Fusion Next. It explains that the component provides simple elastic layout and that spacing between child elements can be controlled using the 'spacing' prop.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/box/__docs__/demo/basic/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=0\n\n# 基本\n\n简单的弹性布局展示，可以通过 `spacing` 控制子元素的间距。\n\n# en-US order=0\n\n# Basic Usage\n\nSimple usage of Box component.\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Breadcrumb Component Props\nDESCRIPTION: API documentation table showing the available props for the main Breadcrumb component including types, defaults, and version support.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/breadcrumb/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Param           | Description                                                                                                           | Type                                                                                                | Default Value | Required | Supported Version |\n| --------------- | --------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- | ------------- | -------- | ----------------- |\n| children        | Children components, should be an Breadcrumb.Item                                                                     | \\| Array\\<React.ReactElement\\<ItemProps> \\| boolean \\| null><br/> \\| React.ReactElement\\<ItemProps> | -             |          | -                 |\n| maxNode         | The maximum number of breadcrumbs is displayed and the excess is hidden, can set auto compute maximum number          | number \\| 'auto'                                                                                    | 100           |          | -                 |\n| showHiddenItems | When the hidden items are exceeded, is it possible to click the ellipsis to display the menu (including hidden items) | boolean                                                                                             | false         |          | 1.23              |\n| popupContainer  | The container node that the popup mounts (meaningful only when showHiddenItems is true)                               | DropdownProps['container']                                                                          | -             |          | 1.23              |\n| followTrigger   | Whether to scroll with the trigger (meaningful only when showHiddenItems is true)                                     | boolean                                                                                             | -             |          | 1.23              |\n| popupProps      | The attributes added to the popup (meaningful only when showHiddenItems is true)                                      | DropdownProps                                                                                       | -             |          | 1.23              |\n| separator       | Separator, can be text or Icon                                                                                        | string \\| React.ReactNode                                                                           | -             |          | -                 |\n| component       | Set Element type                                                                                                      | React.ComponentType\\<BreadcrumbProps> \\| string                                                     | 'nav'         |          | -                 |\n```\n\n----------------------------------------\n\nTITLE: Setting Locale for Specific Moment Instance (JSX)\nDESCRIPTION: This snippet demonstrates how to set the locale for a specific Moment.js instance to French, which can be used with DatePicker.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker/__docs__/index.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst value = moment();\nvalue.locale('fr'); // set this instance to use French\n```\n\n----------------------------------------\n\nTITLE: Setting Locale for Specific Moment Instance (JSX)\nDESCRIPTION: This snippet demonstrates how to set the locale for a specific Moment.js instance to French, which can be used with DatePicker.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker/__docs__/index.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst value = moment();\nvalue.locale('fr'); // set this instance to use French\n```\n\n----------------------------------------\n\nTITLE: Referencing Issues in Markdown\nDESCRIPTION: Demonstrates how to reference GitHub issues in Markdown format within the changelog entries.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/CHANGELOG.md#2025-04-10_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\n* **Breadcurmb:** fix height to 16px in case of $s-base=3 fix [#3111](https://github.com/alibaba-fusion/next/issues/3111) ([420c3ca](https://github.com/alibaba-fusion/next/commit/420c3ca))\n```\n\n----------------------------------------\n\nTITLE: Implementing Shell Component Structure in JSX\nDESCRIPTION: This code snippet demonstrates the basic structure of the Shell component with all its possible subcomponents. The Shell component acts as the application framework, with areas for branding, navigation, content, and tools.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/shell/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Shell>\n    <Shell.Branding />\n    <Shell.Navigation />\n    <Shell.Action />\n\n    <Shell.MultiTask />\n    <Shell.LocalNavigation />\n\n    <Shell.AppBar />\n    <Shell.Content />\n    <Shell.Footer />\n\n    <Shell.Ancillary />\n    <Shell.ToolDock>\n        <Shell.ToolDockItem />\n    </Shell.ToolDock>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: No code snippets found\nDESCRIPTION: This text contains only changelog entries and commit references without actual code snippets.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/CHANGELOG.md#2025-04-10_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Defining Clickable Ellipsis Behavior in Markdown\nDESCRIPTION: This snippet describes the functionality of clickable ellipsis in both Chinese and English. It explains that clicking on the ellipsis will display hidden items.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/breadcrumb/__docs__/demo/show-hidden-more/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=3\n\n# 省略号可点击展开\n\n点击省略号展示被隐藏的项。\n\n# en-US order=3\n\n# Show Omission\n\nHidden items will be displayed when ellipses clicked.\n```\n\n----------------------------------------\n\nTITLE: Controlled DatePicker Usage Examples (JSX)\nDESCRIPTION: These examples demonstrate how to use DatePicker in a controlled manner, showing different ways to set and update the value prop.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker/__docs__/index.md#2025-04-10_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker value={moment()} onChange={val => console.log(val)} />\n// setProps({ value: moment().add(1, 'months') })\n// >> MomentObject\n\n<DatePicker value=\"2018-01-23\" onChange={val => console.log(val)} />\n// setProps({ value: '2019-01-23' })\n// >> \"2019-01-23\"\n\n<DatePicker value={moment(1581938105000)} onChange={val => console.log(val)} />\n// setProps({ value: moment(1581938105000) })\n// >> \"2020-02-17\"\n```\n\n----------------------------------------\n\nTITLE: Controlled DatePicker Usage Examples (JSX)\nDESCRIPTION: These examples demonstrate how to use DatePicker in a controlled manner, showing different ways to set and update the value prop.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker/__docs__/index.md#2025-04-10_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker value={moment()} onChange={val => console.log(val)} />\n// setProps({ value: moment().add(1, 'months') })\n// >> MomentObject\n\n<DatePicker value=\"2018-01-23\" onChange={val => console.log(val)} />\n// setProps({ value: '2019-01-23' })\n// >> \"2019-01-23\"\n\n<DatePicker value={moment(1581938105000)} onChange={val => console.log(val)} />\n// setProps({ value: moment(1581938105000) })\n// >> \"2020-02-17\"\n```\n\n----------------------------------------\n\nTITLE: Defining Typography.Paragraph Component API in Markdown\nDESCRIPTION: This snippet defines the API for the Typography.Paragraph component, which inherits from Typography.Text and includes the 'component' prop for setting the label type.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/typography/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Typography.Paragraph\n\nInherit the Typography.Text API\n\n| Param     | Description    | Type                                  | Default Value | Required |\n| --------- | -------------- | ------------------------------------- | ------------- | -------- |\n| component | Set Label Type | string \\| React.JSX.IntrinsicElements | p             |          |\n```\n\n----------------------------------------\n\nTITLE: Timeline.Item Component API Properties Table\nDESCRIPTION: Markdown table defining the API properties for Timeline.Item component, including state management, visual customization, and content display options.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/timeline/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数      | 说明                                        | 类型                                        | 默认值 | 是否必填 | 支持版本 |\n| --------- | ------------------------------------------- | ------------------------------------------- | ------ | -------- | -------- |\n| state     | 节点状态                                    | 'done' \\| 'process' \\| 'error' \\| 'success' | 'done' |          | -        |\n| icon      | 图标                                        | string                                      | -      |          | -        |\n| dot       | 自定义时间轴节点                            | React.ReactNode                             | -      |          | -        |\n| time      | 格式化后的时间                              | React.ReactNode                             | -      |          | -        |\n| title     | 标题                                        | React.ReactNode                             | -      |          | -        |\n| timeLeft  | 左侧时间                                    | React.ReactNode                             | -      |          | -        |\n| content   | 右侧内容                                    | React.ReactNode                             | -      |          | -        |\n| animation | 展示动画                                    | boolean                                     | true   |          | -        |\n| mode      | 展示的模式，left 为左，alternate 为交替显示 | 'left' \\| 'alternate'                       | 'left' |          | 1.23.18  |\n```\n\n----------------------------------------\n\nTITLE: Visibility Change Callback in DatePicker.WeekPicker\nDESCRIPTION: Callback function triggered when the visibility of the DatePicker.WeekPicker popup changes. It receives a boolean indicating visibility and a string reason for the change.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker2/__docs__/index.en-us.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nFunction(visible: Boolean, reason: String) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Typography.Text Component API in Markdown\nDESCRIPTION: This snippet details the API for the Typography.Text component, including various styling props like delete, mark, underline, strong, code, as well as component and rtl options.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/typography/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Typography.Text\n\n| Param     | Description                    | Type                                  | Default Value | Required |\n| --------- | ------------------------------ | ------------------------------------- | ------------- | -------- |\n| delete    | Add strikethrough style        | boolean                               | false         |          |\n| mark      | Add markup style               | boolean                               | false         |          |\n| underline | Add underline style            | boolean                               | false         |          |\n| strong    | Bold or not                    | boolean                               | false         |          |\n| code      | Add Code Style                 | boolean                               | false         |          |\n| component | SetLabel Type                  | string \\| React.JSX.IntrinsicElements | span          |          |\n| rtl       | Whether to display in rtl mode | boolean                               | false         |          |\n```\n\n----------------------------------------\n\nTITLE: Defining StepShape Type in TypeScript\nDESCRIPTION: This snippet defines the StepShape type, which represents the possible shapes for the Step component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/step/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type StepShape = 'circle' | 'arrow' | 'dot';\n```\n\n----------------------------------------\n\nTITLE: Defining CascaderDataItem Type in TypeScript\nDESCRIPTION: Defines the basic data structure for items in a Cascader component. Includes properties for value, label, disabled state, checkbox disabled state, children items, title, and allows for additional custom properties.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader/__docs__/index.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CascaderDataItem = {\n    value: string;\n    label?: React.ReactNode;\n    disabled?: boolean;\n    checkboxDisabled?: boolean;\n    children?: Array<CascaderDataItem>;\n    title?: string;\n    [propName: string]: unknown;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Accessibility Support for Badge in React\nDESCRIPTION: This code snippet demonstrates how to add a class for screen reader accessibility in the Badge component. It allows messages to be read by screen readers without appearing visually on the page.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/badge/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<span className=\"next-sr-only\">unread messages</span>\n```\n\n----------------------------------------\n\nTITLE: Defining Affix Component API Properties\nDESCRIPTION: API table defining the properties and configuration options for the Affix component, including container settings, offset positions, and event callbacks.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/affix/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Param        | Description                                                                                                     | Type                       | Default Value | Required |\n| ------------ | --------------------------------------------------------------------------------------------------------------- | -------------------------- | ------------- | -------- |\n| container    | The container for listening scroll events                                                                       | () => Element \\| Window    | () =\\> window |          |\n| offsetTop    | Offset from top when event triggers                                                                             | number                     | -             |          |\n| offsetBottom | Offset from bottom when event triggers                                                                          | number                     | -             |          |\n| onAffix      | Callback when affix event triggers<br/><br/>**signature**:<br/>**params**:<br/>_affixed_: If element is affixed | (affixed: boolean) => void | -             |          |\n| useAbsolute  | Enable absolute position                                                                                        | boolean                    | -             |          |\n| className    | -                                                                                                               | string                     | -             |          |\n| style        | -                                                                                                               | React.CSSProperties        | -             |          |\n```\n\n----------------------------------------\n\nTITLE: Defining Step Shape Type in TypeScript\nDESCRIPTION: TypeScript type definition for Step shape, defining visual appearance options.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/step/__docs__/index.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type StepShape = 'circle' | 'arrow' | 'dot';\n```\n\n----------------------------------------\n\nTITLE: Defining CloseArea Type in TypeScript\nDESCRIPTION: TypeScript definition for the CloseArea type used by the Tag.Closeable component. This type defines possible areas that can trigger the close event, either the entire tag or just the tail area.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tag/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CloseArea = 'tag' | 'tail';\n```\n\n----------------------------------------\n\nTITLE: Documenting Fullscreen Loading in Alibaba Fusion Next\nDESCRIPTION: This snippet provides documentation for implementing fullscreen loading displays in Alibaba Fusion Next. It explains how to force fullscreen display using the 'fullScreen' prop and how to specify safe nodes with the 'safeNode' prop.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/loading/__docs__/demo/fullscreen/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=5\n\n# 全屏\n\n通过`fullScreen`强制全屏显示加载态，通过`safeNode`指定安全节点。\n\n# en-US order=5\n\n# Fullscreen\n\ndisplay a fullscreen loading\n```\n\n----------------------------------------\n\nTITLE: Defining DataSourceItem Type in TypeScript\nDESCRIPTION: Defines the DataSourceItem type which can be an ObjectItem or primitive values like string, boolean, number, null, or undefined. This type is used for data sources in the Select component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/select/__docs__/index.en-us.md#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DataSourceItem = ObjectItem | string | boolean | number | null | undefined;\n```\n\n----------------------------------------\n\nTITLE: Closeable Tag Documentation in Markdown\nDESCRIPTION: Documentation explaining how to implement closeable tags that can be hidden through clicking either the tag element or a close icon. Available in both Chinese and English translations.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tag/__docs__/demo/closable/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# zh-CN order=5\n\n# 可关闭\n\n通过点击标签或者 closeIcon 来隐藏标签\n\n# en-US order=5\n\n# Closeable Tag\n\nclose tag by clicking tag element or close icon\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Divider Display in Alibaba Fusion Next\nDESCRIPTION: This snippet explains how to configure a vertical divider using the 'direction' property in Alibaba Fusion Next. It provides instructions in both Chinese and English for implementing this feature.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/divider/__docs__/demo/direction/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=1\n\n# 垂直展示\n\n通过`direction`设置垂直分隔符展示。\n\n# en-US order=1\n\n# Direction\n\nSet vertical Divider using `direction`.\n```\n\n----------------------------------------\n\nTITLE: Documenting Checkbox Disabled State in Chinese\nDESCRIPTION: Markdown documentation in Chinese describing the disabled state of the Checkbox component. It specifies the order of this section in the documentation.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/checkbox/__docs__/demo/disbled/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=1\n\n# 禁用状态\n\n`Checkbox`禁用状态。\n```\n\n----------------------------------------\n\nTITLE: Defining SplitButton API Properties in Markdown\nDESCRIPTION: This snippet defines the API properties for the SplitButton component using a markdown table. It includes various properties such as size, type, label, and callbacks, along with their descriptions, types, and default values.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/split-button/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Param | Descripiton  | Type  | Default Value |\n| ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | --------- |\n| size             | Size of button<br><br>**option**:<br>'small', 'medium', 'large'                                                                                                             | Enum      | 'medium'  |\n| type             | Typeo of button<br><br>**option**:<br>'normal', 'primary', 'secondary'                                                                                                        | Enum      | 'normal'  |\n| label            | Text in button | ReactNode | -         |\n| component        | The html tag to be rendered<br><br>**option**:<br>'button', 'a'                                                                                                                          | Enum      | -         |\n| ghost            | Setting ghost button <br><br>**option**:<br>'light', 'dark', false, true                                                                                                          | Enum      | -         |\n| defaultSelectedKeys | Default selected items, as Menu                                                                                                                                           | Array     | \\[]       |\n| selectedKeys        | Selected items, as Menu                                                                                                                                              | Array     | -         |\n| selectMode       | Select mode of menu<br><br>**option**:<br>'single', 'multiple'                                                                                                                  | Enum      | -         |\n| onSelect         | Callback when select the menu，see Menu<br><br>**signature**:<br>Function() => void                                                                                                           | Function  | -         |\n| onItemClick      | Callback when click the menu，see Menu<br><br>**signature**:<br>Function() => void                                                                                                           | Function  | -         |\n| triggerProps     | The props of trigger element | Object    | -         |\n| autoWidth        | If popup width equals to button width | Boolean   | true      |\n| visible          | Visible state of the popup | Boolean   | -         |\n| defaultVisible   | Default visible state of the popup  | Boolean   | -         |\n| onVisibleChange  | Callback when visible state change<br><br>**signature**:<br>Function(visible: Boolean, reason: String) => void<br>**parameters**:<br>_visible_: {Boolean} visible state of the popup<br>_reason_: {String} reason to change visible state | Function  | func.noop |\n| popupTriggerType | Trigger type of popup<br><br>**option**:<br>'click', 'hover'                                                                                                                      | Enum      | 'click'   |\n| popupAlign       | Align of popup, @see Overlay doc for detail  | String    | 'tr br'   |\n| popupStyle       | Custom style of popup  | Object    | -         |\n| popupClassName   | Custom className of popup | String    | -         |\n| popupProps       | Props of popup  | Object    | {}         |\n| followTrigger       | follow Trigger or not                | Boolean         | -                                         |\n| menuProps           | Props of Menu                                                                                                                                                    | Object    | {}        |\n| leftButtonProps     | Props of left button                                                                                                                                                  | Object    | {}        |\n```\n\n----------------------------------------\n\nTITLE: Defining Card.Divider Component API in Markdown\nDESCRIPTION: This snippet defines the API for the Card.Divider subcomponent, listing its props, their types, and default values.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/card/__docs__/index.md#2025-04-10_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Card.Divider\n\n| 参数      | 说明               | 类型        | 默认值 | 是否必填 |\n| --------- | ------------------ | ----------- | ------ | -------- |\n| component | 设置标签类型       | ElementType | 'hr'   |          |\n| inset     | 分割线是否向内缩进 | boolean     | -      |          |\n```\n\n----------------------------------------\n\nTITLE: Setting Moment Locale for Calendar Component in JavaScript\nDESCRIPTION: Example showing how to properly set the locale for the Calendar component using moment.js. This is necessary for proper multilingual date display.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/calendar/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport moment from 'moment';\n\nmoment.locale('zh-cn');\n```\n\n----------------------------------------\n\nTITLE: Switch Component API TypeScript Interface\nDESCRIPTION: TypeScript interface showing the props and types for the Switch component, including controlled/uncontrolled state management, size options, loading states, and custom rendering capabilities.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/switch/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SwitchProps {\n  defaultChecked?: boolean;\n  checked?: boolean;\n  onChange?: (checked: boolean, e: React.MouseEvent<HTMLDivElement> | React.KeyboardEvent<HTMLDivElement>) => void;\n  size?: 'medium' | 'small';\n  loading?: boolean;\n  disabled?: boolean;\n  autoWidth?: boolean;\n  isPreview?: boolean;\n  renderPreview?: (checked: boolean, props: SwitchProps) => React.ReactNode;\n  checkedChildren?: React.ReactNode;\n  unCheckedChildren?: React.ReactNode;\n  onClick?: (e: React.MouseEvent<HTMLDivElement> | React.KeyboardEvent<HTMLDivElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLDivElement>) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Card.Actions Component API in Markdown\nDESCRIPTION: This snippet defines the API for the Card.Actions subcomponent, listing its props, their types, and default values.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/card/__docs__/index.md#2025-04-10_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Card.Actions\n\n| 参数      | 说明         | 类型        | 默认值 | 是否必填 |\n| --------- | ------------ | ----------- | ------ | -------- |\n| component | 设置标签类型 | ElementType | 'div'  |          |\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for Transfer Component Props\nDESCRIPTION: Type definitions for the Transfer component parameters including data source types, callback functions, and customization options. Shows function signatures and type constraints for each property.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/transfer/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TransferProps {\n    mode?: 'normal' | 'simple';\n    dataSource?: Array<TransferDataItem>;\n    value?: Array<string>;\n    defaultValue?: Array<string>;\n    onChange?: (value: Array<string>, data: Array<TransferDataItem>, extra: ExtraOptions) => void;\n    onSelect?: (sourceSelectedValue: Array<string>, targetSelectedValue: Array<string>, target: 'source' | 'target') => void;\n    disabled?: boolean;\n    leftDisabled?: boolean;\n    rightDisabled?: boolean;\n    itemRender?: (data: TransferDataItem) => React.ReactNode;\n    showSearch?: boolean | [boolean, boolean];\n    searchProps?: SearchProps | [SearchProps, SearchProps];\n    filter?: (searchedValue: string, data: TransferDataItem) => boolean;\n    onSearch?: (searchedValue: string, position: string) => void;\n    useVirtual?: boolean;\n    searchPlaceholder?: string;\n    notFoundContent?: React.ReactNode | [React.ReactNode, React.ReactNode];\n    titles?: [React.ReactNode, React.ReactNode];\n    operations?: [React.ReactNode, React.ReactNode];\n}\n```\n\n----------------------------------------\n\nTITLE: Radio Component Type Definition\nDESCRIPTION: TypeScript interface definitions showing the available props and callbacks for the Radio component including checked state, labels, event handlers, and preview mode functionality.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/radio/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface RadioProps {\n  id?: string;\n  checked?: boolean;\n  defaultChecked?: boolean;\n  label?: React.ReactNode;\n  onChange?: (checked: boolean, event: React.ChangeEvent<HTMLInputElement>) => void;\n  onMouseEnter?: (e: React.MouseEvent<HTMLInputElement>) => void;\n  onMouseLeave?: (e: React.MouseEvent<HTMLInputElement>) => void;\n  disabled?: boolean;\n  value?: RadioValue;\n  name?: string;\n  isPreview?: boolean;\n  renderPreview?: (checked: boolean, props: RadioProps) => React.ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic List Usage in English\nDESCRIPTION: Markdown content describing the basic usage of a list component in English. It specifies the order and provides a brief description of the simple usage.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/list/__docs__/demo/basic/index.md#2025-04-10_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# en-US order=0\n\n# Basic Usage\n\nSimple usage of List component.\n```\n\n----------------------------------------\n\nTITLE: Slider Component Overview in Markdown\nDESCRIPTION: Markdown documentation for the Slider component, which is a carousel used for displaying content in a slideshow format. The document includes component categorization, usage scenarios, and implementation guidelines.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/slider/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Slider\n\n-   category: Components\n-   family: DataDisplay\n-   chinese: 图片轮播\n-   type: 展示\n\n---\n\n轮播组件，就是以幻灯片的方式，在页面中横向展示诸多内容的组件。\n\n## 何时使用\n\n-   轮播内容相互独立，前后在内容以及数据上都不存在逻辑关系。\n-   **单图轮播**：该样式通常用于承载运营banner，是一个位置相对固定的模块。\n-   **多图轮播**：单元信息浏览\n\n## 如何使用\n\n1.  当轮播组件中只有一张图片的时候，轮播组件会隐藏导航锚点、禁止自动循环（即使上层设置了）、禁止拖拽播放（即使上层设置了）。\n2.  如果您要将 Slider 放到 Dialog 中，此时你需要关闭 Dialog 的动画，避免 Slider 在计算内部元素宽度时造成出错。\n3.  如果出现图片高度 1px 的问题，可以尝试在 `img` 标签的外部包裹一层 `div` 标签。\n\n## API\n```\n\n----------------------------------------\n\nTITLE: Pagination API Properties Table\nDESCRIPTION: Markdown table defining the API properties and configuration options available for the Pagination component. Includes property names, descriptions, types, default values, and required status.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/pagination/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数             | 说明                                                                                                              | 类型                                                         | 默认值          | 是否必填 |\n| ---------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------ | --------------- | -------- |\n| type             | 分页组件类型                                                                                                      | 'normal' \\| 'simple' \\| 'mini'                               | 'normal'        |          |\n| shape            | 前进后退按钮样式                                                                                                  | 'normal' \\| 'arrow-only' \\| 'arrow-prev-only' \\| 'no-border' | 'normal'        |          |\n| size             | 分页组件大小                                                                                                      | 'small' \\| 'medium' \\| 'large'                               | 'medium'        |          |\n```\n\n----------------------------------------\n\nTITLE: Component Documentation Template in Markdown\nDESCRIPTION: Base template structure for documenting a new component, including frontmatter metadata and main documentation sections.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/scripts/create/docs/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# {{ name }}\n\n-   category: Components\n-   family: {{ familyNoDash }}\n-   chinese: {{ chineseName }}\n-   type: Display\n\n---\n\n## Develop Guide\n\n### When to Use\n// ...todo\n\n\n## API\n\n### {{ name }}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Loading Component for Table in JavaScript\nDESCRIPTION: This function allows defining a custom Loading component for the Table. It receives LoadingProps as a parameter and should return a React node. The props must be passed to the custom component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/table/__docs__/index.md#2025-04-10_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nloadingComponent: Function(props: LoadingProps) => React.ReactNode\n```\n\n----------------------------------------\n\nTITLE: Keyboard Accessibility Guide\nDESCRIPTION: Markdown table showing keyboard shortcuts and their corresponding actions for accessibility navigation within the pagination component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/pagination/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| 按键  | 说明     |\n| :---- | :------- |\n| Tab   | 切换页数 |\n| Space | 按下按钮 |\n| Enter | 按下按钮 |\n```\n\n----------------------------------------\n\nTITLE: Defining Tab Component API in Markdown\nDESCRIPTION: This snippet outlines the API for the Tab component, including all available props, their types, default values, and descriptions. It covers functionality like active tab control, appearance customization, and event handling.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tab/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数                | 说明                                                                                                                                                                                | 类型                                                                                                            | 默认值   | 是否必填 |\n| ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------- | -------- | -------- |\n| activeKey           | 被激活的选项卡的 key, 赋值则 tab 为受控组件，用户无法切换                                                                                                                           | string                                                                                                          | -        |          |\n| defaultActiveKey    | 初始化时被激活的选项卡的 key                                                                                                                                                        | string                                                                                                          | -        |          |\n| shape               | 外观形态                                                                                                                                                                            | 'pure' \\| 'wrapped' \\| 'text' \\| 'capsule'                                                                      | 'pure'   |          |\n| animation           | 是否开启动效                                                                                                                                                                        | boolean                                                                                                         | true     |          |\n| excessMode          | 选项卡过多时的滑动模式                                                                                                                                                              | 'slide' \\| 'dropdown'                                                                                           | 'slide'  |          |\n| tabPosition         | 导航选项卡的位置，只适用于包裹型（wrapped）选项卡                                                                                                                                   | 'top' \\| 'bottom' \\| 'left' \\| 'right'                                                                          | 'top'    |          |\n| size                | 尺寸                                                                                                                                                                                | 'small' \\| 'medium'                                                                                             | 'medium' |          |\n| triggerType         | 激活选项卡的触发方式                                                                                                                                                                | 'hover' \\| 'click'                                                                                              | 'click'  |          |\n| lazyLoad            | 是否延迟加载 TabPane 的内容，默认开启，即不提前渲染                                                                                                                                 | boolean                                                                                                         | true     |          |\n| unmountInactiveTabs | 是否自动卸载未处于激活状态的选项卡                                                                                                                                                  | boolean                                                                                                         | false    |          |\n| navStyle            | 导航条的自定义样式                                                                                                                                                                  | CSSProperties                                                                                                   | -        |          |\n| navClassName        | 导航条的自定义样式类                                                                                                                                                                | string                                                                                                          | -        |          |\n| contentStyle        | 内容区容器的自定义样式                                                                                                                                                              | CSSProperties                                                                                                   | -        |          |\n| contentClassName    | 内容区容器的自定义样式类                                                                                                                                                            | string                                                                                                          | -        |          |\n| extra               | 导航栏附加内容                                                                                                                                                                      | ReactNode                                                                                                       | -        |          |\n| disableKeyboard     | 禁用键盘事件                                                                                                                                                                        | boolean                                                                                                         | false    |          |\n| onClick             | 点击单个选项卡时触发的回调                                                                                                                                                          | (key: string) => void                                                                                           | -        |          |\n| onChange            | 选项卡发生切换时的事件回调<br/><br/>**签名**:<br/>**参数**:<br/>_key_: 改变后的 key                                                                                                 | (key: string) => void                                                                                           | -        |          |\n| onClose             | 选项卡被关闭时的事件回调<br/><br/>**签名**:<br/>**参数**:<br/>_key_: 关闭的选项卡的 key                                                                                             | (key: string) => void                                                                                           | -        |          |\n| tabRender           | 自定义选项卡模板渲染函数<br/><br/>**签名**:<br/>**参数**:<br/>_key_: 当前 Tab.Item 的 key 值<br/>_props_: 传给 Tab.Item 的所有属性键值对返回值<br/>**返回值**:<br/>- 返回自定义组件 | (key: string, props: Record\\<string, unknown>) => ReactNode                                                     | -        |          |\n| popupProps          | 弹层属性透传，只有当 excessMode 为 dropdown 时生效                                                                                                                                  | ComponentPropsWithRef\\<typeof Popup>                                                                            | -        |          |\n| icons               | 自定义 icon                                                                                                                                                                         | {<br/> dropdown?: string \\| ReactNode;<br/> prev?: string \\| ReactNode;<br/> next?: string \\| ReactNode;<br/> } | -        |          |\n| showAdd             | 展示新增按钮                                                                                                                                                                        | boolean                                                                                                         | -        |          |\n| onAdd               | 新增的事件回调                                                                                                                                                                      | () => void                                                                                                      | -        |          |\n| addIcon             | 自定义添加按钮                                                                                                                                                                      | ReactNode                                                                                                       | -        |          |\n```\n\n----------------------------------------\n\nTITLE: Fix Menu renderMore className\nDESCRIPTION: Fix allowing className to be passed to renderMore function in Menu component\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/CHANGELOG.md#2025-04-10_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n51b412a\n```\n\n----------------------------------------\n\nTITLE: NumberPicker Keyboard Navigation in Markdown\nDESCRIPTION: Markdown table describing the keyboard navigation controls for the NumberPicker component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/number-picker/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| KeyBoard   | Descripiton         |\n| :--------- | :------------------ |\n| Up Arrow   | increase the number |\n| Down Arrow | decrease the number |\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Select in Tree Component (Markdown)\nDESCRIPTION: This snippet provides instructions in Chinese and English on how to enable multiple selection in a tree component. It specifies that setting the 'multiple' prop to 'true' allows nodes to be checkable.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader-select/__docs__/demo/multiple/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=1\n\n# 多选\n\n设置`multiple`为`true`，开启多选，此时节点可勾选。\n\n# en-US order=1\n\n# Multiple select\n\nDemo the basic multiple select usage.\n```\n\n----------------------------------------\n\nTITLE: Defining Drawer Select Component in Markdown\nDESCRIPTION: This snippet provides a markdown definition for a drawer-style select component in both Chinese and English. It specifies the order of the component and describes its functionality.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/drawer/__docs__/demo/select/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=3\n\n# 抽屉式选择\n\n将 Select 的弹出模式换成 Drawer\n\n# en-US order=3\n\n# Drawer Select\n\nSelect width drawer\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Properties for Accessibility\nDESCRIPTION: Configure downBtnprops to properly describe the functionality of the decrement button to screen readers.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/number-picker/__docs__/demo/accessibility/index.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\ndownBtnprops\n```\n\n----------------------------------------\n\nTITLE: Setting Expand Trigger Type in Alibaba Fusion Next (Markdown)\nDESCRIPTION: This snippet demonstrates how to use the 'expandTriggerType' prop to configure the expand trigger behavior in Alibaba Fusion Next components. It supports 'click' and 'hover' options, with 'click' being the default value.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader-select/__docs__/demo/expand-trigger/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=4\n\n# 展开触发行为\n\n展示可通过 `expandTriggerType` 来设置不同的展开触发行为，支持 `click` 和 `hover`，默认值为`click`。\n\n# en-US order=4\n\n# Expand trigger type\n\nYou can set expand trigger type by setting `expandTriggerType`, support `click` and `hover`, the default is `click`.\n```\n\n----------------------------------------\n\nTITLE: Defining TimePicker Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the TimePicker component in a markdown table format. It includes details on various props such as hasBorder, isPreview, renderPreview, inputProps, and more, along with their types and default values.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/time-picker2/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| hasBorder           | Whether the input has border                                                                                                                                                                                                                                           | boolean                                                                                                                                        | true          |          |\n| isPreview           | Is preview                                                                                                                                                                                                                                                             | boolean                                                                                                                                        | -             |          |\n| renderPreview       | Content of preview mode                                                                                                                                                                                                                                                | (value: ValueType, props: TimePickerProps) => ReactNode                                                                                        | -             |          |\n| inputProps          | Custom input property                                                                                                                                                                                                                                                  | InputProps                                                                                                                                     | -             |          |\n| disabledHours       | For the disabled hours function, if it's a TimePicker.RangePicker, the function should return a number[] and it shouldn't have an index parameter. If it's not a TimePicker.RangePicker, the function should return a boolean and it should have an index parameter.   | (index?: number) => boolean \\| number[]                                                                                                        | -             |          |\n| disabledMinutes     | For the disabled minutes function, if it's a TimePicker.RangePicker, the function should return a number[] and it shouldn't have an index parameter. If it's not a TimePicker.RangePicker, the function should return a boolean and it should have an index parameter. | (index?: number) => boolean \\| number[]                                                                                                        | -             |          |\n| disabledSeconds     | For the disabled seconds function, if it's a TimePicker.RangePicker, the function should return a number[] and it shouldn't have an index parameter. If it's not a TimePicker.RangePicker, the function should return a boolean and it should have an index parameter. | (index?: number) => boolean \\| number[]                                                                                                        | -             |          |\n| disabled            | Disable                                                                                                                                                                                                                                                                | boolean \\| boolean[]                                                                                                                           | false         |          |\n| placeholder         | Input hint                                                                                                                                                                                                                                                             | string \\| string[]                                                                                                                             | -             |          |\n| value               | Time value (Dayjs object or time string, controlled state use)                                                                                                                                                                                                         | Array\\<ConfigType>                                                                                                                             | -             |          |\n| defaultValue        | Time init value (Dayjs object or time string, uncontrolled state use)                                                                                                                                                                                                  | Array\\<ConfigType>                                                                                                                             | -             |          |\n| onChange            | Callback when the time value changes                                                                                                                                                                                                                                   | (value: Array\\<Dayjs>) => void                                                                                                                 | -             |          |\n| onOk                | Callback when the ok button is clicked                                                                                                                                                                                                                                 | (value: Array\\<Dayjs>) => void                                                                                                                 | -             |          |\n| preset              | Rreset values, shown below the time panel.<br/>Can be object or array of object, with the following properties.<br/>properties:<br/> label: shown text<br/> name: key of React element, can be empty, and index will become key instead<br/> value: date value         | PresetType[]                                                                                                                                   | -             |          |\n```\n\n----------------------------------------\n\nTITLE: Defining OnKeyDownOpts Interface in TypeScript\nDESCRIPTION: This snippet defines the OnKeyDownOpts interface used in the onKeyDown event handler of the Input.TextArea component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/input/__docs__/index.en-us.md#2025-04-10_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface OnKeyDownOpts {\n  beTrimed?: boolean;\n  overMaxLength?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Component Usage Order in Markdown\nDESCRIPTION: This snippet sets the order of component usage documentation to 8 using Markdown headers. It provides titles for both Chinese and English versions of the documentation.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/field/__docs__/demo/mix/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=8\n\n# 组合使用\n\n多组件混合使用\n\n# en-US order=8\n\n# mix usage\n\nmulti type of component\n```\n\n----------------------------------------\n\nTITLE: Defining Input.Group Props in TypeScript\nDESCRIPTION: This snippet defines the prop types for the Input.Group component, which includes properties for adding content before and after the input, as well as general styling and behavior options.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/input/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InputGroupProps {\n  addonBefore?: React.ReactNode;\n  addonBeforeClassName?: string;\n  addonAfter?: React.ReactNode;\n  addonAfterClassName?: string;\n  rtl?: boolean;\n  disabled?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input.Group Props in TypeScript\nDESCRIPTION: This snippet defines the prop types for the Input.Group component, which includes properties for adding content before and after the input, as well as general styling and behavior options.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/input/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InputGroupProps {\n  addonBefore?: React.ReactNode;\n  addonBeforeClassName?: string;\n  addonAfter?: React.ReactNode;\n  addonAfterClassName?: string;\n  rtl?: boolean;\n  disabled?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Mode Types in TypeScript\nDESCRIPTION: Type definition for menu opening modes, supporting either 'inline' or 'popup' display styles.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/menu/__docs__/index.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Mode = 'inline' | 'popup';\n```\n\n----------------------------------------\n\nTITLE: Defining Borderless Style in Markdown for Alibaba Fusion Next\nDESCRIPTION: This snippet defines the borderless style configuration for the Alibaba Fusion Next framework. It includes descriptions in both Chinese and English, with an order specification of 9.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker2/__docs__/demo/noborder/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=9\n\n# 无边框\n\n无边框样式。\n\n# en-US order=9\n\n# Borderless\n\nborderless style.\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Breadcrumb.Item Props\nDESCRIPTION: API documentation table showing the available props for the Breadcrumb.Item subcomponent including types and defaults.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/breadcrumb/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Param   | Description                                                                                        | Type                                  | Default Value | Required |\n| ------- | -------------------------------------------------------------------------------------------------- | ------------------------------------- | ------------- | -------- |\n| link    | The breadcrumb item link, if this property is set, the node is `<a />`, otherwise it is `<span />` | string                                | -             |          |\n| onClick | Click event<br/><br/>**signature**:<br/>**params**:<br/>_e_: e                                     | React.MouseEventHandler\\<HTMLElement> | -             |          |\n```\n\n----------------------------------------\n\nTITLE: Icon Usage in Navigation\nDESCRIPTION: Example of using custom icon in navigation components\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/nav/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Icon type=\"your type\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Upload in Chinese\nDESCRIPTION: Markdown content explaining how to configure file upload to occur after clicking a submit button, written in Chinese.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/upload/__docs__/demo/submit/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=5\n\n# 不自动上传\n\n通过按钮点击提交上传\n```\n\n----------------------------------------\n\nTITLE: Fixing division deprecation warning in Core component\nDESCRIPTION: Fixes a division deprecation warning when using dart-sass in the Core component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/CHANGELOG.md#2025-04-10_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ncommit a145c26\n```\n\n----------------------------------------\n\nTITLE: Defining KeyType Interface in TypeScript\nDESCRIPTION: TypeScript type definition for keys used in the Collapse component. Supports both string and number types for panel identification.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/collapse/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type KeyType = string | number;\n```\n\n----------------------------------------\n\nTITLE: Swipe Event Handler Type Definition\nDESCRIPTION: TypeScript type definition for the swipeEvent callback that handles various swipe directions including left, right, vertical, down, and up.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/slider/__docs__/index.en-us.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n(swipeDirection: 'left' | 'right' | 'vertical' | 'down' | 'up') => void\n```\n\n----------------------------------------\n\nTITLE: Defining Accordion Component in Markdown\nDESCRIPTION: This snippet provides a multilingual description of the Accordion component. It explains that the Accordion operates in a single-instance mode, allowing only one panel to be open at a time.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/collapse/__docs__/demo/accordion/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=2\n\n# 手风琴\n\n手风琴单例模式，每次只打开一个Panel。\n\n# en-US order=2\n\n# Accordion\n\nAccordion mode, you can only open at most one panel.\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Index for Alibaba Fusion Next Documentation\nDESCRIPTION: This Markdown snippet creates an index of links to different sections of the Alibaba Fusion Next documentation. It includes links to Quick Start, Theme Package usage, Internationalization, Font File deployment, and Contributing guidelines.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/en-us/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Index\n\n---\n\n- [Quick Start](quick-start.md)\n- [Use with Theme Package](theme.md)\n- [Internationalization](i18n.md)\n- [Deploy Font File](font-deploy.md)\n- [Contributing](contributing.md)\n```\n\n----------------------------------------\n\nTITLE: Extending CascaderDataItem with Position Info\nDESCRIPTION: TypeScript type that extends CascaderDataItem to include position information and source reference.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CascaderDataItemWithPosInfo = CascaderDataItem & {\n    /**\n     * 位置信息\n     */\n    pos: string;\n    _source?: CascaderDataItem;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Selection in Tree Component\nDESCRIPTION: This snippet demonstrates how to enable multiple selection in a tree component by setting the 'multiple' prop to 'true'.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tree/__docs__/demo/control-select/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=2\n\n# 单选与多选\n\n通过设置`multiple`为`true`，支持节点多选。\n\n# en-US order=2\n\n# Single and multiple selection\n\nDemo single and multiple selection.\n```\n\n----------------------------------------\n\nTITLE: Importing Next UI Library in Browser\nDESCRIPTION: HTML code showing how to include the Next UI library directly in a browser using CDN links or local resources. This approach uses the global Next variable.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/README.md#2025-04-10_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://unpkg.com/@alifd/next/dist/next.css\" />\n\n<script src=\"https://unpkg.com/@alifd/next/dist/next.js\"></script>\n\n// The above ways import latest @alifd/next, we recommend you specify version.\n<script src=\"https://unpkg.com/@alifd/next@1.8.6/dist/next.min.js\"></script>\n\n// Or import as your own static resource\n<script src=\"../build/public/@alifd/next.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Function for Select Component in TypeScript\nDESCRIPTION: This snippet shows the type definition for the filter property of the Select component. It defines a function that takes a search keyword and an item, returning a boolean to determine if the item should be retained in the filtered results.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/select/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string | number, item: ObjectItem) => boolean\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Function for Select Component in TypeScript\nDESCRIPTION: This snippet shows the type definition for the filter property of the Select component. It defines a function that takes a search keyword and an item, returning a boolean to determine if the item should be retained in the filtered results.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/select/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string | number, item: ObjectItem) => boolean\n```\n\n----------------------------------------\n\nTITLE: Documenting Tree Component Line Style in Markdown\nDESCRIPTION: This snippet provides multilingual documentation for a tree component feature that shows connecting lines between nodes. It explains how to use the 'showLine' property to enable this visual enhancement for clearer hierarchy representation.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tree/__docs__/demo/line/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=4\n\n# 带线样式\n\n使用`showLine`开启节点之间的连接线，用于更清晰地展示节点的层级结构。\n\n# en-US order=4\n\n# Show line\n\nDemo the tree with line.\n```\n\n----------------------------------------\n\nTITLE: Example of babel-plugin-import Transformation\nDESCRIPTION: Shows how babel-plugin-import transforms import statements from the simplified format to the explicit modular format for better tree-shaking.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/README.md#2025-04-10_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Button } from '@alifd/next';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Button from '@alifd/next/lib/button';\nimport '@alifd/next/lib/button/style';\n```\n\n----------------------------------------\n\nTITLE: Defining StepDirection Type in TypeScript\nDESCRIPTION: This snippet defines the StepDirection type, which represents the possible directions for the Step component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/step/__docs__/index.en-us.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type StepDirection = 'hoz' | 'ver';\n```\n\n----------------------------------------\n\nTITLE: Defining Drag Gap Type for Sortable Transfer Items\nDESCRIPTION: TypeScript type definition for specifying the position of a gap when dragging items in a sortable transfer list. It can be either 'before' or 'after'.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/transfer/__docs__/index.en-us.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DragGapType = 'before' | 'after';\n```\n\n----------------------------------------\n\nTITLE: Importing @alifd/next components fully\nDESCRIPTION: JavaScript code showing how to fully import the @alifd/next library, including both CSS styles and component modules.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/zh-cn/quick-start.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@alifd/next/dist/next.css';\n// import '@alifd/next/index.scss';\n\nimport { Button, Input } from '@alifd/next';\n```\n\n----------------------------------------\n\nTITLE: Defining onRightClick Callback Function in Tree Component\nDESCRIPTION: TypeScript type definition for the onRightClick callback function that's triggered when a user right-clicks on a node. It provides the event object and node instance.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tree/__docs__/index.en-us.md#2025-04-10_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n(info: { event: React.MouseEvent; node: NodeInstance }) => void\n```\n\n----------------------------------------\n\nTITLE: Defining onRightClick Callback Function in Tree Component\nDESCRIPTION: TypeScript type definition for the onRightClick callback function that's triggered when a user right-clicks on a node. It provides the event object and node instance.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/tree/__docs__/index.en-us.md#2025-04-10_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n(info: { event: React.MouseEvent; node: NodeInstance }) => void\n```\n\n----------------------------------------\n\nTITLE: Notification Config Options - Markdown\nDESCRIPTION: Configuration options for the Notification component, including positioning, timing, and container settings.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/notification/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Param        | Description                                                                                                 | Type                                                     | Default Value         | Required |\n| ------------ | ----------------------------------------------------------------------------------------------------------- | -------------------------------------------------------- | --------------------- | -------- |\n| offset       | Offset after align, [x, y]                                                                                  | [number, number]                                         | [30, 30]              |          |\n| maxCount     | Max visible count, default Infinity                                                                         | number                                                   | -                     |          |\n| size         | Use `Message` size prop                                                                                     | 'large' \\| 'medium'                                      | large                 |          |\n| duration     | Time in seconds before Notification is closed. When set to 0 or null, it will never be closed automatically | number                                                   | 4500                  |          |\n| getContainer | Return the mount node for Notification                                                                      | () => HTMLElement                                        | `() => document.body` |          |\n| placement    | Position of Notification, can be one of `tl` `tr` `bl` `br`                                                 | 'topRight' \\| 'topLeft' \\| 'bottomLeft' \\| 'bottomRight' | topRight              |          |\n```\n\n----------------------------------------\n\nTITLE: Importing @alifd/next components manually\nDESCRIPTION: JavaScript code demonstrating how to manually import individual components and their styles from the @alifd/next library.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/zh-cn/quick-start.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from '@alifd/next/lib/button';\nimport '@alifd/next/lib/button/style';\n```\n\n----------------------------------------\n\nTITLE: Keyboard Accessibility Guide in Markdown\nDESCRIPTION: Markdown table defining keyboard accessibility operations for the Loading component, specifically the ESC key functionality for exiting full-screen loading state.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/loading/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| 按键 | 说明                                                    |\n| :--- | :------------------------------------------------------ |\n| Esc  | 全屏模式下onVisibleChange接收的键盘事件，用于退出加载态 |\n```\n\n----------------------------------------\n\nTITLE: Importing Next-Core Styles in SCSS\nDESCRIPTION: Example of importing the Next-Core styles in an SCSS file without including reset styles. This imports all the core variables, mixins, and functions for use in component styling.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/core/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@import '~@alifd/next-core/lib/index-noreset.scss';\n```\n\n----------------------------------------\n\nTITLE: Importing All Components from @alifd/next in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to import the entire @alifd/next library, including both the CSS styles and individual components like Button and Input.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/en-us/quick-start.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@alifd/next/dist/next.css';\n// import '@alifd/next/index.scss';\n\nimport { Button, Input } from '@alifd/next';\n```\n\n----------------------------------------\n\nTITLE: Setting Robot Font Path with SCSS Variables\nDESCRIPTION: Configures the robot font path variable before importing the theme package's index.scss file.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/en-us/font-deploy.md#2025-04-10_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n// Note, finally end with /\n$font-custom-path: \"//g.alicdn.com/font-path/\";\n@improt \"~@alifd/theme-xxx/index.scss\";\n```\n\n----------------------------------------\n\nTITLE: Manually Importing Individual @alifd/next Components in JavaScript\nDESCRIPTION: This snippet demonstrates how to manually import a single component (Button) from the @alifd/next library, along with its associated styles.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/en-us/quick-start.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from '@alifd/next/lib/button';\nimport '@alifd/next/lib/button/style';\n```\n\n----------------------------------------\n\nTITLE: Defining List.Item Component API in Markdown\nDESCRIPTION: This snippet defines the API for the List.Item subcomponent, detailing props such as title, description, media, and extra content that can be used to customize individual list items.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/list/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### List.Item\n\n| Param       | Description                                        | Type      | Default Value | Required |\n| ----------- | -------------------------------------------------- | --------- | ------------- | -------- |\n| title       | The title of the list item                         | ReactNode | -             |          |\n| description | The description of the list item                   | ReactNode | -             |          |\n| media       | The avatar / icon / image content of the list item | ReactNode | -             |          |\n| extra       | Extra content                                      | ReactNode | -             |          |\n```\n\n----------------------------------------\n\nTITLE: Defining List.Item Component API in Markdown\nDESCRIPTION: This snippet defines the API for the List.Item subcomponent, detailing props such as title, description, media, and extra content that can be used to customize individual list items.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/list/__docs__/index.en-us.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### List.Item\n\n| Param       | Description                                        | Type      | Default Value | Required |\n| ----------- | -------------------------------------------------- | --------- | ------------- | -------- |\n| title       | The title of the list item                         | ReactNode | -             |          |\n| description | The description of the list item                   | ReactNode | -             |          |\n| media       | The avatar / icon / image content of the list item | ReactNode | -             |          |\n| extra       | Extra content                                      | ReactNode | -             |          |\n```\n\n----------------------------------------\n\nTITLE: Using @alifd/next Components with babel-plugin-import in JavaScript\nDESCRIPTION: This snippet demonstrates how to import components from @alifd/next when babel-plugin-import is configured. The plugin automatically transforms this import to include the component and its styles.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/en-us/quick-start.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from '@alifd/next';\n```\n\n----------------------------------------\n\nTITLE: Transformed Import by babel-plugin-import for @alifd/next in JavaScript\nDESCRIPTION: This code shows how babel-plugin-import transforms the import statement, splitting it into separate imports for the component and its styles.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/en-us/quick-start.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from '@alifd/next/lib/button';\nimport '@alifd/next/lib/button/style';\n```\n\n----------------------------------------\n\nTITLE: Defining Card.Media Component API in Markdown\nDESCRIPTION: This snippet defines the API for the Card.Media subcomponent, listing its props, their types, and default values.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/card/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Card.Media\n\n| 参数      | 说明           | 类型        | 默认值 | 是否必填 |\n| --------- | -------------- | ----------- | ------ | -------- |\n| component | 设置标签类型   | ElementType | 'div'  |          |\n| image     | 背景图片地址   | string      | -      |          |\n| src       | 媒体源文件地址 | string      | -      |          |\n```\n\n----------------------------------------\n\nTITLE: Configuring babel-plugin-import for @alifd/next in JavaScript\nDESCRIPTION: This code snippet shows the configuration for babel-plugin-import in webpack or .babelrc, which allows for automatic importing of @alifd/next components and their styles.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/en-us/quick-start.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack babel loader option or .babelrc\n{\n  // ...\n  plugins: [\n    ['import', {\n      libraryName: '@alifd/next',\n      style: true\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Alibaba Fusion Theme Package (Full Import)\nDESCRIPTION: JavaScript code for fully importing a custom theme package with Next components.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/zh-cn/theme.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// 直接使用主题包中预编译生成的 css 文件\nimport '@alifd/theme-xxx/dist/next.css';\n\nimport { Button, Input } from '@alifd/next';\n```\n\n----------------------------------------\n\nTITLE: Defining Cascader Component in Markdown\nDESCRIPTION: This snippet defines the Cascader component, its category, family, Chinese name, and type. It also provides information on when to use the component and its key features.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Cascader\n\n-   category: Components\n-   family: DataDisplay\n-   chinese: 级联\n-   type: 基本\n\n---\n\n级联组件。\n\n## 何时使用\n\n-   适用于从一组具有关联性的数据集合中进行选择的交互方式。\n-   由于子集目录隐藏，级联是一种节约屏幕空间的有效方法。\n-   级别数因业务需求而定，建议不超过5级。\n-   级联多用于表单场景，可以独立在页面中使用，也可以与其他元素组合使用，如级联选择。\n\n## API\n```\n\n----------------------------------------\n\nTITLE: Defining Cascader Component in Markdown\nDESCRIPTION: This snippet defines the Cascader component, its category, family, Chinese name, and type. It also provides information on when to use the component and its key features.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader/__docs__/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Cascader\n\n-   category: Components\n-   family: DataDisplay\n-   chinese: 级联\n-   type: 基本\n\n---\n\n级联组件。\n\n## 何时使用\n\n-   适用于从一组具有关联性的数据集合中进行选择的交互方式。\n-   由于子集目录隐藏，级联是一种节约屏幕空间的有效方法。\n-   级别数因业务需求而定，建议不超过5级。\n-   级联多用于表单场景，可以独立在页面中使用，也可以与其他元素组合使用，如级联选择。\n\n## API\n```\n\n----------------------------------------\n\nTITLE: Using babel-plugin-import with @alifd/next\nDESCRIPTION: JavaScript code showing the recommended way to import components using the babel-plugin-import plugin, which automatically transforms imports to load only the needed components.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/zh-cn/quick-start.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from '@alifd/next';\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Modular Theme Integration\nDESCRIPTION: Complete webpack configuration for using @alifd/next with a custom theme package in a modular way. This setup uses babel-plugin-import, @alifd/next-theme-loader, and @alifd/next-theme-webpack-plugin to inject theme variables and styles.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/en-us/theme.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst webpack = require('webpack');\nconst ThemePlugin = require('@alifd/next-theme-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n  entry: {\n    index: './src/index.jsx'\n  },\n  output: {\n    path: path.join(__dirname, 'build'),\n    filename: '[name].js'\n  },\n  resolve: {\n    extensions: ['.js', '.jsx']\n  },\n  devtool: 'inline-source-map',\n  module: {\n    rules: [{\n      test: /\\.jsx?$/,\n      use: {\n        loader: 'babel-loader',\n        options: {\n          presets: [\n            'env',\n            'react',\n            'stage-0'\n          ],\n          plugins: [\n            'add-module-exports',\n            'transform-decorators-legacy',\n            ['import', {\n                libraryName: '@alifd/next',\n                style: true\n            }]\n          ]\n        }\n      },\n      exclude: /node_modules/\n    }, {\n      test: /\\.css$/,\n      use: ExtractTextPlugin.extract({\n        use: 'css-loader'\n      })\n    }, {\n      test: /\\.scss$/,\n      use: ExtractTextPlugin.extract({\n        use: [\n          'css-loader',\n          'fast-sass-loader',\n          {\n            // add @alifd/next-theme-loader to inject the scss variable of the custom theme package\n            loader: '@alifd/next-theme-loader',\n            options: {\n              theme: '@alifd/theme-xxx'\n            }\n          }\n        ]\n      })\n    }]\n  },\n  plugins: [\n    // add @alifd/next-theme-webpack-plugin to inject normalize css and custom icon css\n    new ThemePlugin({ theme: '@alifd/theme-xxx' }),\n    new ExtractTextPlugin('[name].css')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Controlled Component Demo in Markdown\nDESCRIPTION: This snippet defines a demo for controlled component usage in Alibaba Fusion Next. It includes metadata for ordering and debugging, as well as descriptions in Chinese and English.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/transfer/__docs__/demo/control/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=1\n\n# 受控\n\n— debug: true\n\n展示受控的用法。\n\n# en-US order=1\n\n# Control\n\nDemo the control usage.\n```\n\n----------------------------------------\n\nTITLE: Importing All Components from Next UI Library\nDESCRIPTION: JavaScript code showing how to import and use the entire Next UI library with CSS in a React application.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/README.md#2025-04-10_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport '@alifd/next/dist/next.css';\n// import '@alifd/next/index.scss';\n\nimport { Button, Input } from '@alifd/next';\n```\n\n----------------------------------------\n\nTITLE: Injecting Icon Font Path Variable in SCSS\nDESCRIPTION: Demonstrates how to inject the $icon-font-path variable before importing the theme package index.scss file. This allows specifying a custom path for icon font files.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/zh-cn/font-deploy.md#2025-04-10_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$icon-font-path: \"//g.alicdn.com/icon-font-path\";\n@import \"~@alifd/theme-xxx/index.scss\";\n```\n\n----------------------------------------\n\nTITLE: Describing Field Usage for Complex Functionality in Next\nDESCRIPTION: This snippet introduces the concept of using the Field component to implement complex functionality in the Next framework. It includes both Chinese and English versions of the same information.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/form/__docs__/demo/field/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=10\n\n# 复杂功能(Field)\n\n配合 `Field` 可以实现较复杂功能\n\n# en-US order=10\n\n# use Field\n\nComplex functions can be realized with `Field`\n```\n\n----------------------------------------\n\nTITLE: Configuring babel-plugin-import for Next UI Library\nDESCRIPTION: Configuration for babel-plugin-import to automatically transform imports for the Next UI library, enabling automatic modular imports to optimize bundle size.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/README.md#2025-04-10_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// webpack babel loader option or .babelrc\n{\n    // ...\n    plugins: [\n        [\n            'import',\n            {\n                libraryName: '@alifd/next',\n                style: true,\n            },\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with Next Theme Loader for Icon Fonts\nDESCRIPTION: Shows how to configure Webpack 2+ with @alifd/next-theme-loader to modify the icon font path variable when using on-demand component loading.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/zh-cn/font-deploy.md#2025-04-10_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  test: /\\.scss$/,\n  use: ExtractTextPlugin.extract({\n    use: [\n      'css-loader',\n      'fast-sass-loader',\n      {\n        loader: '@alifd/next-theme-loader',\n        options: {\n          theme: '@alifd/theme-xxx',\n          modifyVars: {\n            '$icon-font-path': '\"//g.alicdn.com/icon-font-path\"'\n          }\n        }\n      }\n    ]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with Next Theme Loader for Icon Fonts\nDESCRIPTION: Shows how to configure Webpack 2+ with @alifd/next-theme-loader to modify the icon font path variable when using on-demand component loading.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/zh-cn/font-deploy.md#2025-04-10_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  test: /\\.scss$/,\n  use: ExtractTextPlugin.extract({\n    use: [\n      'css-loader',\n      'fast-sass-loader',\n      {\n        loader: '@alifd/next-theme-loader',\n        options: {\n          theme: '@alifd/theme-xxx',\n          modifyVars: {\n            '$icon-font-path': '\"//g.alicdn.com/icon-font-path\"'\n          }\n        }\n      }\n    ]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting SplitButton Basic Usage in Markdown\nDESCRIPTION: This snippet describes the basic usage of the SplitButton component. It mentions that SplitButton supports Button properties like type, size, component, and ghost.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/split-button/__docs__/demo/basic/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=0\n\n# 基本\n\n最简单的用法。支持 `Button` 的 `type`, `size`, `component`, `ghost` 等属性透传。\n\n# en-US order=0\n\n# Basic\n\nUse SplitButton as Button.\n```\n\n----------------------------------------\n\nTITLE: Including Alibaba Fusion Next via CDN\nDESCRIPTION: Demonstrates how to include the Alibaba Fusion Next UI framework directly in the browser using script and link tags, with options for latest and specific versions.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/README.zh-cn.md#2025-04-10_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://unpkg.com/@alifd/next/dist/next.css\" />\n\n<script src=\"https://unpkg.com/@alifd/next/dist/next.js\"></script>\n\n// 以上引入都是引入的最新版本 @alifd/next，但我们推荐引入固定版本的next组件，以保证代码稳定\n<script src=\"https://unpkg.com/@alifd/next@1.8.6/dist/next.min.js\"></script>\n\n// 或作为自己的静态资源引入\n<script src=\"../build/public/@alifd/next.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Modifying Component Class Prefix in JSX and SCSS\nDESCRIPTION: Demonstrates how to change the default class prefix for Next components using ConfigProvider and SCSS variables.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/config-provider/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nclass App extends React.Component {\n    render() {\n        return (\n            <ConfigProvider prefix=\"my-\">\n                <div>\n                    <Input />\n                    <Button>Submit</Button>\n                </div>\n            </ConfigProvider>\n        );\n    }\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n$css-prefix: 'my-';\n@import '~@alifd/theme-xxx/index.scss';\n```\n\n----------------------------------------\n\nTITLE: Using Message.withContext for Context Injection in React Components\nDESCRIPTION: Example of how to use Message.withContext to wrap components that use functional message calls, ensuring they receive the proper context. This approach helps avoid the 'wrong fusion config' bug.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/message/__docs__/demo/withContext/index.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nMessage.withContext(({ contextMessage }) => {} )\n```\n\n----------------------------------------\n\nTITLE: Importing Alibaba Fusion Next Components\nDESCRIPTION: Shows how to import and use Alibaba Fusion Next components in a JavaScript file, including both full import and on-demand import methods.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/README.zh-cn.md#2025-04-10_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 全量引入压缩后的next基础样式\nimport '@alifd/next/dist/next.min.css';\n\nimport { Button, Input } from '@alifd/next';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Button from '@alifd/next/lib/button';\nimport '@alifd/next/lib/button/style';\n```\n\n----------------------------------------\n\nTITLE: Enabling Pure Render Mode with ConfigProvider\nDESCRIPTION: Shows how to enable Pure Render mode using ConfigProvider to potentially improve performance.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/config-provider/__docs__/index.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ConfigProvider, DatePicker } from '@alifd/next';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <ConfigProvider pure>\n                <DatePicker />\n            </ConfigProvider>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb.Item Properties Table - Markdown\nDESCRIPTION: Table documenting the properties of the Breadcrumb.Item subcomponent, including link and onClick properties.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/breadcrumb/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| 参数    | 说明                                                                     | 类型                                  | 默认值 | 是否必填 |\n| ------- | ------------------------------------------------------------------------ | ------------------------------------- | ------ | -------- |\n| link    | 面包屑节点链接，如果设置这个属性，则该节点为`<a />` ，否则是`<span />`   | string                                | -      |          |\n| onClick | 元素点击事件<br/><br/>**签名**:<br/>**参数**:<br/>_e_: Click Mouse Event | React.MouseEventHandler\\<HTMLElement> | -      |          |\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for On-demand Import\nDESCRIPTION: Demonstrates how to configure Babel to use the babel-plugin-import for on-demand importing of Alibaba Fusion Next components.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/README.zh-cn.md#2025-04-10_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// webpack babel loader option or .babelrc\n{\n    // ...\n    plugins: [\n        [\n            'import',\n            {\n                libraryName: '@alifd/next',\n                style: true,\n            },\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic A11y Test Template in React\nDESCRIPTION: Template for setting up basic accessibility tests using enzyme and axe-core for React components. Includes necessary imports, test setup, and cleanup patterns.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/TESTING.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport Enzyme from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nimport __Component__ from '../../src/__component__/index';\nimport '../../src/__component__/style';\nimport { unmount, testReact } from '../util/a11y/validate';\n\nEnzyme.configure({ adapter: new Adapter() });\n\ndescribe('__Component__ A11y', () => {\n    let wrapper;\n\n    afterEach(() => {\n        if (wrapper) {\n            wrapper.unmount();\n            wrapper = null;\n        }\n        unmount();\n    });\n\n    it('should ...', async () => { ... });\n});\n```\n\n----------------------------------------\n\nTITLE: Multilingual Documentation Headers for Drag Upload Component\nDESCRIPTION: Markdown headers defining documentation order and titles for a drag-to-upload component in both Chinese (zh-CN) and English (en-US) languages.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/upload/__docs__/demo/dragger/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=4\n\n# 拖拽上传\n\n# en-US order=4\n\n# Drag to Upload\n```\n\n----------------------------------------\n\nTITLE: Window Object Check for SSR\nDESCRIPTION: Example of safely checking window object existence for Server-Side Rendering compatibility\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/en-us/contributing.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif(typeof window != undefined && window.autoScroll)\n```\n\n----------------------------------------\n\nTITLE: Portal/Overlay Component A11y Test Example\nDESCRIPTION: Example demonstrating how to test React components that render content outside their parent (like overlays and portals) for accessibility compliance.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/TESTING.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    test,\n    testReact,\n    unmount,\n    createContainer,\n} from '../util/a11y/validate';\n\nconst portalContainerId = 'a11y-portal-id';\nlet portalContainer;\n\ndescribe('A11y', () => {\n    let wrapper;\n\n    afterEach(() => {\n        if (wrapper) {\n            wrapper.unmount();\n            wrapper = null;\n        }\n        if (portalContainer) {\n            portalContainer.remove();\n        }\n\n        unmount();\n    });\n\n    it('should not have any violations', async function() {\n        portalContainer = createContainer(portalContainerId);\n        wrapper = await testReact(\n            <COMPONENT visible container={portalContainer}>\n                <div>Hello World</div>\n            </COMPONENT>\n        );\n        return test(portalContainer);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Menu.CheckboxItem Props in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the Menu.CheckboxItem component's props, including checked state and onChange callback.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/menu/__docs__/index.md#2025-04-10_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface CheckboxItemProps {\n  checked?: boolean;\n  indeterminate?: boolean;\n  disabled?: boolean;\n  onChange?: (\n    checked: boolean,\n    event: React.MouseEvent | React.KeyboardEvent | React.ChangeEvent\n  ) => void;\n  helper?: React.ReactNode;\n  children?: React.ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Menu.CheckboxItem Props in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the Menu.CheckboxItem component's props, including checked state and onChange callback.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/menu/__docs__/index.md#2025-04-10_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface CheckboxItemProps {\n  checked?: boolean;\n  indeterminate?: boolean;\n  disabled?: boolean;\n  onChange?: (\n    checked: boolean,\n    event: React.MouseEvent | React.KeyboardEvent | React.ChangeEvent\n  ) => void;\n  helper?: React.ReactNode;\n  children?: React.ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Next Repository\nDESCRIPTION: Command to clone the forked Next repository to local environment\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/en-us/contributing.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:[your account]/next.git\n```\n\n----------------------------------------\n\nTITLE: Setting Switch children text size\nDESCRIPTION: Sets the text size of Switch children to form-element-font-size to fix issue #3710.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/CHANGELOG.md#2025-04-10_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ncommit 6e2c156\n```\n\n----------------------------------------\n\nTITLE: VisibleMonthChangeType Type Definition\nDESCRIPTION: TypeScript type definition for the possible reasons why the visible month changed in the calendar component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/calendar/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type VisibleMonthChangeType = 'cellClick' | 'buttonClick' | 'yearSelect' | 'monthSelect';\n```\n\n----------------------------------------\n\nTITLE: VisibleMonthChangeType Type Definition\nDESCRIPTION: TypeScript type definition for the possible reasons why the visible month changed in the calendar component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/calendar/__docs__/index.en-us.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type VisibleMonthChangeType = 'cellClick' | 'buttonClick' | 'yearSelect' | 'monthSelect';\n```\n\n----------------------------------------\n\nTITLE: Documenting Basic Component Usage in Markdown\nDESCRIPTION: This snippet provides documentation for the basic usage of an Alibaba Fusion Next component. It describes how to monitor value changes using the `onChange` event. The content is provided in both Chinese and English.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker/__docs__/demo/basic/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=0\n\n# 基本用法\n\n最基本的用法。可以通过 `onChange` 监听选中值的变化。\n\n# en-US order=0\n\n# Basic\n\nA basic usage case.\n```\n\n----------------------------------------\n\nTITLE: Adding support for different search configs in Transfer panels\nDESCRIPTION: Adds support for configuring different search behaviors between panels in the Transfer component. Closes issue #3664.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/CHANGELOG.md#2025-04-10_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ncommit 2ce740f\n```\n\n----------------------------------------\n\nTITLE: Server Response Data Format Example\nDESCRIPTION: Example of nonstandard server response data structure that needs to be formatted\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/upload/__docs__/index.en-us.md#2025-04-10_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"success\",\n  \"img_src\": \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Server Response Data Format Example\nDESCRIPTION: Example of nonstandard server response data structure that needs to be formatted\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/upload/__docs__/index.en-us.md#2025-04-10_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"success\",\n  \"img_src\": \"https://img.alicdn.com/tps/TB19O79MVXXXXcZXVXXXXXXXXXX-1024-1024.jpg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Version References in Markdown\nDESCRIPTION: Version anchor and link definitions for changelog navigation\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/CHANGELOG.md#2025-04-10_snippet_16\n\nLANGUAGE: Markdown\nCODE:\n```\n<a name=\"1.11.11\"></a>\n\n## [1.11.11](https://github.com/alibaba-fusion/next/compare/1.11.10...1.11.11) (2019-01-22)\n```\n\n----------------------------------------\n\nTITLE: Formatting Version Headers in Markdown\nDESCRIPTION: Shows the format for version headers in the changelog, including version number, link to compare with previous version, and release date.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/CHANGELOG.md#2025-04-10_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.23.8](https://github.com/alibaba-fusion/next/compare/1.23.7...1.23.8) (2021-06-17)\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Format in Alibaba Fusion Next (English)\nDESCRIPTION: This snippet describes the use of the 'format' attribute for customizing date displays in English. It notes that the format is used both for displaying dates and validating user inputs.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker2/__docs__/demo/format/index.md#2025-04-10_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# en-US order=5\n\n# Basic\n\nUsing attribute `format` to change the displayed dates, it will be also used to check user inputs.\n```\n\n----------------------------------------\n\nTITLE: Adding Configuration for Avatar Border in Theme\nDESCRIPTION: Feature addition that enables theme-based border configuration for the Avatar component.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/CHANGELOG.md#2025-04-10_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n({\"Avatar\": {\"theme\": \"support config border\"}})\n```\n\n----------------------------------------\n\nTITLE: Fix TypeScript Type Definitions\nDESCRIPTION: Correcting TypeScript .d.ts type definition files for better type safety\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/CHANGELOG.md#2025-04-10_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n0a6833a\n```\n\n----------------------------------------\n\nTITLE: Defining OnPrevOrNext Type for Calendar Navigation in TypeScript\nDESCRIPTION: Defines the OnPrevOrNext type for handling calendar navigation events. This type represents a callback function that receives the new date value and information about the unit and amount of time changed when moving to previous or next time periods.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/calendar2/__docs__/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type OnPrevOrNext = (value: Dayjs, options: { unit: ManipulateType; num: number }) => void;\n```\n\n----------------------------------------\n\nTITLE: Add Select tagClosable API\nDESCRIPTION: Adding new tagClosable API to Select component to allow disabling tag close functionality\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/CHANGELOG.md#2025-04-10_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nc754ee9\n```\n\n----------------------------------------\n\nTITLE: Installing Theme Loader Dependencies\nDESCRIPTION: Command to install webpack plugins required for on-demand loading of Alibaba Fusion theme.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/zh-cn/theme.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @alifd/next-theme-webpack-plugin fast-sass-loader @alifd/next-theme-loader\n```\n\n----------------------------------------\n\nTITLE: Defining Version Comparison Links in Markdown\nDESCRIPTION: Additional version comparison link definitions in changelog\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/CHANGELOG.md#2025-04-10_snippet_17\n\nLANGUAGE: Markdown\nCODE:\n```\n<a name=\"1.11.10\"></a>\n\n## [1.11.10](https://github.com/alibaba-fusion/next/compare/1.11.9...1.11.10) (2019-01-17)\n```\n\n----------------------------------------\n\nTITLE: Setting aria-live for NumberPicker Component\nDESCRIPTION: Use aria-live attribute to ensure screen readers announce value changes in the NumberPicker component. This makes the component accessible to users with visual impairments.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/number-picker/__docs__/demo/accessibility/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`aria-live`\n```\n\n----------------------------------------\n\nTITLE: Describing Alignment Customization in Alibaba Fusion Next (English)\nDESCRIPTION: Explains how to use the 'align' property to set alignment type in English. This snippet is written in Markdown and provides a brief description for English-speaking developers.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/overlay/__docs__/demo/align/index.md#2025-04-10_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# en-US order=6\n\n# Align\n\nUse align prop to set align type\n```\n\n----------------------------------------\n\nTITLE: Defining onFilter Event Handler for Table in JavaScript\nDESCRIPTION: This snippet defines the onFilter event handler for a Table component. It is triggered when the filter confirmation button is clicked and receives an object containing filter field information as a parameter.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/table/__docs__/index.md#2025-04-10_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nonFilter: Function(filterParams: Object) => void\n```\n\n----------------------------------------\n\nTITLE: Step Component Basic Usage Documentation\nDESCRIPTION: Describes the three types of Step components that can be configured via the shape attribute, and explains how circle type supports text orientation control through labelPlacement property.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/step/__docs__/demo/basic/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Basic\n\nIn the simplest case, Step has three types that can be toggled through the `shape` attribute.\n\nThe `circle` type can be used to set the orientation of the text through `labelPlacement`.\n```\n\n----------------------------------------\n\nTITLE: Custom Footer Rendering in DatePicker.WeekPicker\nDESCRIPTION: Function to render a custom footer for the DatePicker.WeekPicker component. It returns a React Node that will be used as the custom footer.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/date-picker2/__docs__/index.en-us.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nFunction() => Node\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Upload in English\nDESCRIPTION: Markdown content explaining how to configure file upload to occur after clicking a submit button, written in English.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/upload/__docs__/demo/submit/index.md#2025-04-10_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# en-US order=5\n\n# Upload after submit\n\nClick a submit button to upload\n```\n\n----------------------------------------\n\nTITLE: Configuring Next Theme Webpack Plugin for Robot Fonts\nDESCRIPTION: Webpack configuration using ThemePlugin to modify robot font path variables.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/site/en-us/font-deploy.md#2025-04-10_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nnew ThemePlugin({\n  theme: '@alifd/theme-xxx',\n  modifyVars: {\n    // Note, finally end with /\n    '$font-custom-path': '\"//g.alicdn.com/font-path/\"'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Value Rendering with valueRender in Alibaba Fusion Next\nDESCRIPTION: This snippet demonstrates how to use the valueRender prop to customize the rendering of values in Alibaba Fusion Next components. It provides instructions in both Chinese and English.\nSOURCE: https://github.com/alibaba-fusion/next/blob/master/components/cascader-select/__docs__/demo/custom/index.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# zh-CN order=9\n\n# 自定义值渲染\n\n通过`valueRender`自定值渲染。\n\n# en-US order=9\n\n# Custom value render\n\nCustom value render use `valueRender`.\n```"
  }
]