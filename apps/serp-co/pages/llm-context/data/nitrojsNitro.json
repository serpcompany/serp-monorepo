[
  {
    "owner": "nitrojs",
    "repo": "nitro",
    "content": "TITLE: Using Storage API in Nitro.js\nDESCRIPTION: Demonstrates how to use the useStorage() function to get, set, and retrieve typed data from different storage bases. This includes in-memory storage, persistent data storage, and using TypeScript generics for type safety.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/4.storage.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Default storage is in memory\nawait useStorage().setItem('test:foo', { hello: 'world' })\nawait useStorage().getItem('test:foo')\n\n// You can also specify the base in useStorage(base)\nawait useStorage('test').setItem('foo', { hello: 'world' })\n\n// You can use data storage to write data to default .data/kv directory\nconst dataStorage = useStorage('data')\nawait dataStorage.setItem('test', 'works')\nawait dataStorage.getItem('data:test') // Value persists\n\n// You can use generics to define types\nawait useStorage<{ hello: string }>('test').getItem('foo')\nawait useStorage('test').getItem<{ hello: string }>('foo')\n```\n\n----------------------------------------\n\nTITLE: Typed Fetch Request with Generic Type Parameter\nDESCRIPTION: Shows how to use type inference with $fetch by passing a generic type parameter. This provides better TypeScript type checking for the returned data.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/7.fetch.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Repo } from '~/types'\n\nexport default defineEventHandler(async (event) => {\n  const data = await $fetch<Repo[]>('https://ungh.cc/orgs/unjs/repos')\n\n  return data\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Invalidating Cached Functions with Keys\nDESCRIPTION: Demonstrates how to create a cached function with a specific name and key, and how to manually invalidate its cache entry using the storage API.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/6.cache.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst getAccessToken = defineCachedFunction(() => {\n  return String(Date.now())\n}, {\n  maxAge: 10,\n  name: 'getAccessToken',\n  getKey: () => 'default'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections in Nitro\nDESCRIPTION: Configuration examples for setting up multiple database connections in Nitro, including a default SQLite connection and a PostgreSQL connection.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/5.database.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  database: {\n    default: {\n      connector: 'sqlite',\n      options: { name: 'db' }\n    },\n    users: {\n      connector: 'postgresql',\n      url: 'postgresql://username:password@hostname:port/database_name'\n    }\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    database: {\n      default: {\n        connector: 'sqlite',\n        options: { name: 'db' }\n      },\n      users: {\n        connector: 'postgresql',\n        options: {\n          url: 'postgresql://username:password@hostname:port/database_name'\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Rules in Nitro\nDESCRIPTION: Example configuration of route rules in nitro.config.ts showing various options including SWR caching, static rendering, custom headers, CORS, redirects, and proxy settings. Each rule pattern follows unjs/radix3 route matching syntax.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/2.routing.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  routeRules: {\n    '/blog/**': { swr: true },\n    '/blog/**': { swr: 600 },\n    '/blog/**': { static: true },\n    '/blog/**': { cache: { /* cache options*/ } },\n    '/assets/**': { headers: { 'cache-control': 's-maxage=0' } },\n    '/api/v1/**': { cors: true, headers: { 'access-control-allow-methods': 'GET' } },\n    '/old-page': { redirect: '/new-page' },\n    '/old-page/**': { redirect: '/new-page/**' },\n    '/proxy/example': { proxy: 'https://example.com' },\n    '/proxy/**': { proxy: '/api/**' },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Edge Worker Compatible Cached Functions\nDESCRIPTION: Shows how to use an edge worker compatible cached function in an API endpoint handler by passing the event object as the first argument.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/6.cache.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(async (event) => {\n  const repo = event.context.params.repo\n  const stars = await cachedGHStars(event, repo).catch(() => 0)\n\n  return { repo, stars }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Cached Functions in API Endpoint Handlers\nDESCRIPTION: Shows how to use a previously defined cached function within an API endpoint handler, allowing for efficient reuse of cached data across multiple endpoints.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/6.cache.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(async (event) => {\n  const repo = event.context.params.repo\n  const stars = await cachedGHStars(repo).catch(() => 0)\n\n  return { repo, stars }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Route-Based Caching Rules in Nitro\nDESCRIPTION: Shows how to configure caching for specific routes using glob patterns in the Nitro configuration file, caching all blog routes for 1 hour.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/6.cache.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  routeRules: {\n    \"/blog/**\": { cache: { maxAge: 60 * 60 } },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Configuration for Nitro\nDESCRIPTION: Demonstrates how to set up runtime configuration in Nitro, allowing for dynamic configuration values that can be updated through environment variables.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/97.configuration.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  runtimeConfig: {\n    apiToken: \"dev_token\", // `dev_token` is the default value\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Nitro Runtime Hooks\nDESCRIPTION: Example of using Nitro hooks to extend runtime behavior by registering custom functions for lifecycle events.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/9.plugins.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroPlugin((nitro) => {\n  nitro.hooks.hook(\"close\", async () => {\n    // Will run when nitro is being closed\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple API Route in Nitro.js\nDESCRIPTION: Defines a basic API route by creating a file in the server/api/ directory that returns a JSON object. The filename determines the route path, and the event handler function processes the request.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/2.routing.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(() => {\n  return { hello: 'API' }\n})\n```\n\n----------------------------------------\n\nTITLE: Graceful Shutdown Plugin Implementation\nDESCRIPTION: Plugin implementation for handling graceful server shutdown with async operations.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/9.plugins.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroPlugin((nitro) => {\n  nitro.hooks.hookOnce(\"close\", async () => {\n    // Will run when nitro is closed\n    console.log(\"Closing nitro server...\")\n    await new Promise((resolve) => setTimeout(resolve, 500));\n    console.log(\"Task is done!\");\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for Nitro and Nuxt Projects\nDESCRIPTION: Example configuration files for tsconfig.json in both Nitro standalone projects and Nuxt server environments. These configurations extend auto-generated TypeScript definitions to provide type hints for auto-imports and server routes.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/98.typescript.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./.nitro/types/tsconfig.json\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../.nuxt/tsconfig.server.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage in Nitro Config\nDESCRIPTION: Shows how to configure custom storage drivers in a Nitro application by specifying mount points and driver configurations in the nitro.config.ts file. This example sets up a Redis storage and a filesystem-based storage.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/4.storage.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  storage: {\n    redis: {\n      driver: 'redis',\n      /* redis connector options */\n    },\n    db: {\n      driver: 'fs',\n      base: './data/db'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI in Nitro\nDESCRIPTION: Configuration example for enabling and customizing OpenAPI functionality in Nitro, including setting metadata, production behavior, and UI customization.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/3.config/0.index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nopenAPI: {\n  meta: {\n    title: 'My Awesome Project',\n    description: 'This might become the next big thing.',\n    version: '1.0'\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nopenAPI: {\n    // IMPORTANT: make sure to protect OpenAPI routes if necessary!\n    production: \"runtime\", // or \"prerender\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nopenAPI: {\n  ui: {\n    scalar: {\n      theme: 'purple'\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nopenAPI: {\n  route: \"/_docs/openapi.json\",\n  ui: {\n    scalar: {\n      route: \"/_docs/scalar\"\n    },\n    swagger: {\n      route: \"/_docs/swagger\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Access Example\nDESCRIPTION: Example showing different ways to access environment variables in a Nitro application on Cloudflare.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/cloudflare.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(process.env.SECRET) // note that this is in the global scope! so it doesn't actually work and the variable is undefined!\n\nexport default defineEventHandler((event) => {\n  // note that all the below are valid ways of accessing the above mentioned variables\n  useRuntimeConfig(event).helloThere\n  useRuntimeConfig(event).secret\n  process.env.NITRO_HELLO_THERE\n  import.meta.env.SECRET\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel Bypass Token for ISR in Nitro Config\nDESCRIPTION: Sets up a bypass token for On-Demand Incremental Static Regeneration in a Nitro application. This configuration allows cache purging for ISR routes using a secure token provided as an environment variable.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/vercel.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  vercel: {\n    config: {\n      bypassToken: process.env.VERCEL_BYPASS_TOKEN\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Route Metadata with OpenAPI Specifications in Nitro.js\nDESCRIPTION: Uses the defineRouteMeta macro to add OpenAPI documentation metadata to a route. This includes tags, description, and required parameters that can be used for API documentation.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/2.routing.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndefineRouteMeta({\n  openAPI: {\n    tags: [\"test\"],\n    description: \"Test route description\",\n    parameters: [{ in: \"query\", name: \"test\", required: true }],\n  },\n});\n\nexport default defineEventHandler(() => \"OK\");\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Middleware in Nitro.js\nDESCRIPTION: Implements a middleware that extends the event context with user information. Middleware is automatically registered for all routes when placed in the server/middleware/ directory.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/2.routing.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler((event) => {\n  // Extends or modify the event\n  event.context.user = { name: 'Nitro' }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Workers Entry Point for Nitro Custom Preset\nDESCRIPTION: Implements a custom entry point for Workers environments with a fetch handler. This code handles incoming requests and forwards them to the Nitro application's localFetch method.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/2.custom-presets.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"#internal/nitro/virtual/polyfill\";\n\nconst nitroApp = useNitroApp();\n\nexport default {\n  fetch(request: Request) {\n    const url = new URL(request.url);\n    return nitroApp.localFetch(url.pathname + url.search, {\n      context: {},\n      host: url.hostname,\n      protocol: url.protocol,\n      method: request.method,\n      headers: request.headers,\n      body: undefined,\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Development Cache Storage in Nuxt\nDESCRIPTION: Shows how to override the default filesystem-based cache storage in development with a Redis driver in a Nuxt application.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/6.cache.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    devStorage: {\n      cache: {\n        driver: 'redis',\n        /* redis connector options */\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Cached Event Handlers in Nitro\nDESCRIPTION: Demonstrates how to cache an API handler response for 1 hour using defineCachedEventHandler. The cached response will use stale-while-revalidate behavior by default.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/6.cache.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Cache an API handler\nexport default defineCachedEventHandler((event) => {\n  // My event handler\n}, { maxAge: 60 * 60 /* 1 hour */ });\n```\n\n----------------------------------------\n\nTITLE: Configuring IIS Options in Nitro Configuration\nDESCRIPTION: This code snippet demonstrates how to configure IIS-specific options in a Nitro configuration file. It allows merging with a pre-existing web.config file or completely overriding the default Nitro web.config file.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/iis.md#2025-04-16_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNitroConfig({\n  // IIS options default\n  iis: {\n    // merges in a pre-existing web.config file to the nitro default file\n    mergeConfig: true,\n    // overrides the default nitro web.config file all together\n    overrideConfig: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Chunk Inlining in Nuxt Configuration\nDESCRIPTION: Sets the inlineDynamicImports flag to true in a Nuxt configuration to optimize Nitro's output for AWS Lambda by inlining all dynamic imports.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/aws.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    inlineDynamicImports: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Nitro Deployment to GitHub Pages\nDESCRIPTION: A complete GitHub Actions workflow configuration that handles the build and deployment of a Nitro application to GitHub Pages. The workflow uses the github_pages preset, sets up Node.js, installs dependencies, builds the project, and deploys it using GitHub's specialized actions.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/github-pages.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://github.com/actions/deploy-pages#usage\nname: Deploy to GitHub Pages\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: corepack enable\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"18\"\n\n      - run: npx nypm install\n      - run: npm run build\n        env:\n          NITRO_PRESET: github_pages\n\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v1\n        with:\n          path: ./.output/public\n\n  # Deployment job\n  deploy:\n    # Add a dependency to the build job\n    needs: build\n\n    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment\n    permissions:\n      pages: write      # to deploy to Pages\n      id-token: write   # to verify the deployment originates from an appropriate source\n\n    # Deploy to the github_pages environment\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n\n    # Specify runner + deployment step\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v1\n```\n\n----------------------------------------\n\nTITLE: Creating Path-Specific Middleware in Nitro.js\nDESCRIPTION: Implements a middleware that only applies to specific routes by checking the request URL path. This allows for conditional middleware execution based on the requested endpoint.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/2.routing.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler((event) => {\n  // Will only execute for /auth route\n  if (getRequestURL(event).pathname.startsWith('/auth')) {\n    event.context.user = { name: 'Nitro' }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI/CD for Nitro App Deployment\nDESCRIPTION: This YAML configuration sets up a GitLab CI/CD pipeline to automatically build and deploy a Nitro application to GitLab Pages. It uses a Node.js image, installs dependencies, builds the project, and publishes the output to GitLab Pages.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/gitlab-pages.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage: node:lts\nbefore_script:\n  - npx nypm install\npages:\n  cache:\n    paths:\n      - node_modules/\n  variables:\n    NITRO_PRESET: gitlab_pages\n  script:\n    - npm run build\n  artifacts:\n    paths:\n      - .output/public\n  publish: .output/public\n  rules:\n    # This ensures that only pushes to the default branch\n    # will trigger a pages deploy\n    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH\n```\n\n----------------------------------------\n\nTITLE: Basic Fetch Request in Nitro Router Handler\nDESCRIPTION: Demonstrates how to use $fetch to make a simple GET request to an external API. The response is automatically parsed and returned from the handler.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/7.fetch.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(async (event) => {\n  const data = await $fetch('https://ungh.cc/orgs/unjs/repos')\n\n  return data\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Zerops Deployment for Static Application\nDESCRIPTION: YAML configuration for building and deploying a Nitro static application on Zerops. Specifies build environment with a static preset, build commands, and deployment files for static content.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/zerops.md#2025-04-16_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: nodejs@20\n      envVariables:\n        SERVER_PRESET: zerops-static\n      buildCommands:\n        - pnpm i\n        - pnpm build\n      deployFiles:\n        - .zerops/output/static/~\n    run:\n      base: static\n```\n\n----------------------------------------\n\nTITLE: Implementing Catch-all Parameters in Nitro.js Routes\nDESCRIPTION: Creates a route with a catch-all parameter ([...name]) that captures all remaining parts of the URL path including slashes. This allows for flexible path matching and nested parameter capture.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/2.routing.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(event => {\n  const name = getRouterParam(event, 'name')\n\n  return `Hello ${name}!`\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Sent Events (SSE) in Nitro (TypeScript)\nDESCRIPTION: Creates an SSE handler that sends a message with the current time every second. It also handles cleanup when the connection is closed.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/3.websocket.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(async (event) => {\n  const eventStream = createEventStream(event)\n\n  const interval = setInterval(async () => {\n    await eventStream.push(`Message @ ${new Date().toLocaleTimeString()}`)\n  }, 1000)\n\n  eventStream.onClosed(async () => {\n    clearInterval(interval)\n    await eventStream.close()\n  })\n\n  return eventStream.send()\n})\n```\n\n----------------------------------------\n\nTITLE: Custom App Runner Setup\nDESCRIPTION: TypeScript code to create a custom server that listens on Nginx socket\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/heroku.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { listener } from './.output/server/index.mjs'\n\nconst server = createServer(listener)\n\nserver.listen('/tmp/nginx.socket')\n```\n\n----------------------------------------\n\nTITLE: Nitro Node Preset Configuration\nDESCRIPTION: Configuration to set Nitro preset to 'node' when using with Nginx\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/heroku.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"nitro\": {\n   \"preset\":\"node\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Nuxt Nightly Channel\nDESCRIPTION: This code snippet demonstrates how to modify the package.json file to use the nightly release of Nuxt. It replaces the stable version with the nightly version in the devDependencies.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/99.nightly.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n--    \"nuxt\": \"^3.0.0\"\n++    \"nuxt\": \"npm:nuxt-nightly@latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Handler in Nitro (TypeScript)\nDESCRIPTION: Creates a WebSocket handler in Nitro, defining actions for open, message, close, and error events. This handler responds with 'pong' when receiving a message containing 'ping'.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/3.websocket.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineWebSocketHandler({\n  open(peer) {\n    console.log(\"[ws] open\", peer);\n  },\n\n  message(peer, message) {\n    console.log(\"[ws] message\", peer, message);\n    if (message.text().includes(\"ping\")) {\n      peer.send(\"pong\");\n    }\n  },\n\n  close(peer, event) {\n    console.log(\"[ws] close\", peer, event);\n  },\n\n  error(peer, error) {\n    console.log(\"[ws] error\", peer, error);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Storage Configuration in Nitro\nDESCRIPTION: Demonstrates how to use devStorage to specify different storage configurations for development and production environments in a Nitro application. This example uses Redis in production and filesystem in development.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/4.storage.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  // Production\n  storage: {\n    db: {\n      driver: 'redis',\n      /* redis connector options */\n    }\n  },\n  // Development\n  devStorage: {\n    db: {\n      driver: 'fs',\n      base: './data/db'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Fetch Options\nDESCRIPTION: Demonstrates how to configure advanced options for $fetch including HTTP method, headers, and request body. This example shows a POST request with JSON data.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/7.fetch.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Repo } from '~/types'\n\nexport default defineEventHandler(async (event) => {\n  const data = await $fetch<Repo[]>('https://api.github.com/markdown', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: {\n      text: 'Hello **world**!'\n    }\n  })\n\n  return data\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Database Operations with Nitro\nDESCRIPTION: Example showing basic SQL database operations including creating a table, inserting data, and querying data using Nitro's database API.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/5.database.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(async () => {\n  const db = useDatabase();\n\n  // Create users table\n  await db.sql`DROP TABLE IF EXISTS users`;\n  await db.sql`CREATE TABLE IF NOT EXISTS users (\"id\" TEXT PRIMARY KEY, \"firstName\" TEXT, \"lastName\" TEXT, \"email\" TEXT)`;\n\n  // Add a new user\n  const userId = String(Math.round(Math.random() * 10_000));\n  await db.sql`INSERT INTO users VALUES (${userId}, 'John', 'Doe', '')`;\n\n  // Query for users\n  const { rows } = await db.sql`SELECT * FROM users WHERE id = ${userId}`;\n\n  return {\n    rows,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Parameters in Nitro.js\nDESCRIPTION: Creates a route with a dynamic parameter using the [name] syntax. The parameter value is extracted using getRouterParam utility and used in the response.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/2.routing.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(event => {\n  const name = getRouterParam(event, 'name')\n\n  return `Hello ${name}!`\n})\n```\n\n----------------------------------------\n\nTITLE: Creating POST Handler for User Data in Nitro.js\nDESCRIPTION: Implements a POST request handler for user data submission. The handler reads the request body using readBody utility and could store it in a database or perform other data processing.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/2.routing.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// server/routes/users.post.ts\nexport default defineEventHandler(async event => {\n  const body = await readBody(event)\n\n  // Do something with body like saving it to a database\n\n  return { updated: true }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Redis Cache Storage for Routes in Nitro\nDESCRIPTION: Demonstrates how to set up Redis as a custom cache storage and apply it to specific routes using the base option in Nitro configuration.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/6.cache.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  storage: {\n    redis: {\n      driver: \"redis\",\n      url: \"redis://localhost:6379\",\n    },\n  },\n  routeRules: {\n    \"/blog/**\": { cache: { maxAge: 60 * 60, base: \"redis\" } },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating GET Handler for User Profile in Nitro.js\nDESCRIPTION: Implements a GET request handler for retrieving user profiles by ID. The route uses dynamic parameter ([id]) to identify which user profile to fetch.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/2.routing.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// server/routes/users/[id].get.ts\nexport default defineEventHandler(async (event) => {\n  const id = getRouterParam(event, 'id')\n\n  // Do something with id\n\n  return `User profile!`\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Cached Functions with GitHub Stars Example\nDESCRIPTION: Shows how to create a cached function for fetching GitHub repository star counts, with a 1-hour cache duration and custom key generation based on the repository name.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/6.cache.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const cachedGHStars = defineCachedFunction(async (repo: string) => {\n  const data: any = await $fetch(`https://api.github.com/repos/${repo}`)\n\n  return data.stargazers_count\n}, {\n  maxAge: 60 * 60,\n  name: 'ghStars',\n  getKey: (repo: string) => repo\n})\n```\n\n----------------------------------------\n\nTITLE: Request Lifecycle Hooks Implementation\nDESCRIPTION: Plugin implementation showing how to hook into different stages of the request lifecycle including request, beforeResponse, and afterResponse.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/9.plugins.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroPlugin((nitroApp) => {\n  nitroApp.hooks.hook(\"request\", (event) => {\n    console.log(\"on request\", event.path);\n  });\n\n  nitroApp.hooks.hook(\"beforeResponse\", (event, { body }) => {\n    console.log(\"on response\", event.path, { body });\n  });\n\n  nitroApp.hooks.hook(\"afterResponse\", (event, { body }) => {\n    console.log(\"on after response\", event.path, { body });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Nitro Task for Database Migration\nDESCRIPTION: Demonstrates how to define a Nitro task for database migration in the server/tasks/db/migrate.ts file. The task includes metadata and a run function.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/10.tasks.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineTask({\n  meta: {\n    name: \"db:migrate\",\n    description: \"Run database migrations\",\n  },\n  run({ payload, context }) {\n    console.log(\"Running DB migration task...\");\n    return { result: \"Success\" };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: In-Server Fetch Between Handlers\nDESCRIPTION: Shows how to use $fetch for making internal requests between handlers. This leverages unjs/unenv to call handlers directly without HTTP overhead.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/7.fetch.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(async (event) => {\n  const data = await $fetch('/api/users')\n\n  return data\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Route Parameters in Nitro.js\nDESCRIPTION: Implements a route with multiple parameters ([name]/[age]). Each parameter is retrieved individually from the event context and used to construct a personalized response.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/2.routing.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(event => {\n  const name = getRouterParam(event, 'name')\n  const age = getRouterParam(event, 'age')\n\n  return `Hello ${name}! You are ${age} years old.`\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Storage Configuration with Runtime Plugin\nDESCRIPTION: Shows how to dynamically configure storage mount points at runtime using a Nitro plugin. This approach allows accessing runtime configuration values to set up storage drivers like Redis.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/4.storage.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport redisDriver from 'unstorage/drivers/redis'\n\nexport default defineNitroPlugin(() => {\n  const storage = useStorage()\n\n  // Dynamically pass in credentials from runtime configuration, or other sources\n  const driver = redisDriver({\n      base: 'redis',\n      host: useRuntimeConfig().redis.host,\n      port: useRuntimeConfig().redis.port,\n      /* other redis connector options */\n    })\n\n  // Mount driver\n  storage.mount('redis', driver)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Support in Nitro (TypeScript)\nDESCRIPTION: Enables the experimental WebSocket feature in Nitro configuration. This is required to use WebSocket functionality in the project.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/3.websocket.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  experimental: {\n    websocket: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage in Nuxt Config\nDESCRIPTION: Demonstrates how to configure Nitro's storage layer within a Nuxt application by using the nitro property in nuxt.config.ts. This shows the same Redis and filesystem storage configuration as in standalone Nitro.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/4.storage.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    storage: {\n      redis: {\n        driver: 'redis',\n        /* redis connector options */\n      },\n      db: {\n        driver: 'fs',\n        base: './.data/db'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Configuration in Nitro Event Handler\nDESCRIPTION: Illustrates how to access the runtime configuration within a Nitro event handler using the useRuntimeConfig function.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/97.configuration.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler((event) => {\n  return useRuntimeConfig(event).apiToken // Returns `dev_token`\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Nitro Plugin Implementation\nDESCRIPTION: Basic example of creating a Nitro plugin that runs during server startup. The plugin receives nitroApp context for accessing Nitro features.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/9.plugins.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroPlugin((nitroApp) => {\n  console.log('Nitro plugin', nitroApp)\n})\n```\n\n----------------------------------------\n\nTITLE: Runtime Config for Dynamic Storage in Nitro\nDESCRIPTION: Configures runtime configuration values in a Nitro application that can be used with the storage plugin to dynamically set up storage drivers with environment-specific credentials.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/4.storage.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  runtimeConfig: {\n    redis: { // Default values\n      host: '',\n      port: 0,\n      /* other redis connector options */\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Auto-imported Utility in Route Handler\nDESCRIPTION: Demonstrates usage of the auto-imported sum utility function within a route handler without explicit imports.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/1.utils.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(() => {\n  const sum = useSum(1, 2) // auto-imported\n  return { sum }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Support in Nuxt (TypeScript)\nDESCRIPTION: Enables the experimental WebSocket feature in Nuxt configuration, which utilizes Nitro. This is required for WebSocket functionality in Nuxt projects.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/3.websocket.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    experimental: {\n      websocket: true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Scheduled Tasks in Nitro\nDESCRIPTION: Shows how to configure scheduled tasks using Nitro configuration in both nitro.config.ts and nuxt.config.ts files. Tasks can be scheduled to run automatically at specified intervals.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/10.tasks.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  scheduledTasks: {\n    // Run `cms:update` task every minute\n    '* * * * *': ['cms:update']\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    scheduledTasks: {\n      // Run `cms:update` task every minute\n      '* * * * *': ['cms:update']\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Catch-all Route in Nitro.js\nDESCRIPTION: Creates a catch-all route that handles any requests not matched by other routes. This fallback route gets the requested URL and returns a response that includes it.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/2.routing.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(event => {\n  const url = getRequestURL(event)\n\n  return `Hello ${url}!`\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Rules in Nitro\nDESCRIPTION: Example of configuring route-specific rules for caching, headers, redirects, and proxying in Nitro. This allows fine-grained control over how different routes behave.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/3.config/0.index.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrouteRules: {\n  '/blog/**': { swr: true },\n  '/blog/**': { swr: 600 },\n  '/blog/**': { static: true },\n  '/blog/**': { cache: { /* cache options*/ } },\n  '/assets/**': { headers: { 'cache-control': 's-maxage=0' } },\n  '/api/v1/**': { cors: true, headers: { 'access-control-allow-methods': 'GET' } },\n  '/old-page': { redirect: '/new-page' }, // uses status code 307 (Temporary Redirect)\n  '/old-page2': { redirect: { to:'/new-page2', statusCode: 301 } },\n  '/old-page/**': { redirect: '/new-page/**' },\n  '/proxy/example': { proxy: 'https://example.com' },\n  '/proxy/**': { proxy: '/api/**' },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Error Handler in Nitro\nDESCRIPTION: Example of configuring a custom runtime error handler in Nitro. The handler can replace Nitro's built-in error page and provide custom error handling logic.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/3.config/0.index.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineNitroConfig({\n  errorHandler: \"~/error\",\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineNitroErrorHandler((error, event) => {\n  setResponseHeader(event, 'Content-Type', 'text/plain')\n  return send(event, '[custom error handler] ' + error.stack)\n});\n```\n\n----------------------------------------\n\nTITLE: Running Nitro Tasks Programmatically\nDESCRIPTION: Demonstrates how to run Nitro tasks programmatically using the runTask utility function in an API route handler.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/10.tasks.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default eventHandler(async (event) => {\n  // IMPORTANT: Authenticate user and validate payload!\n  const payload = { ...getQuery(event) };\n  const { result } = await runTask(\"db:migrate\", { payload });\n\n  return { result };\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to SSE Endpoint from Client (TypeScript)\nDESCRIPTION: Demonstrates how to connect to an SSE endpoint from a client-side script and handle incoming messages.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/3.websocket.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst eventSource = new EventSource('http://localhost:3000/sse')\n\neventSource.onmessage = (event) => {\n  console.log(event.data)\n}\n```\n\n----------------------------------------\n\nTITLE: Async Context Usage Examples\nDESCRIPTION: Demonstrates the implementation of authentication utility both with and without async context feature.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/1.utils.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// server/routes/index.ts\nexport default defineEventHandler(async () => {\n  const user = await useAuth()\n})\n\n// server/utils/auth.ts\nexport function useAuth() {\n  return useSession(useEvent())\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// server/routes/index.ts\nexport default defineEventHandler(async (event) => {\n  const user = await useAuth(event)\n})\n\n// server/utils/auth.ts\nexport function useAuth(event) {\n  return useSession(event)\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching WebSocket Client HTML in Nitro (TypeScript)\nDESCRIPTION: Defines an event handler that fetches HTML content for a WebSocket client from a remote source. This can be used to serve a WebSocket client interface.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/3.websocket.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(() => {\n  return $fetch(\n    \"https://raw.githubusercontent.com/unjs/crossws/main/examples/h3/public/index.html\"\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Renderer Response Hook Implementation\nDESCRIPTION: Plugin implementation for modifying the renderer response, specifically for server-side rendered pages in Nuxt.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/9.plugins.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroPlugin((nitro) => {\n\n  nitro.hooks.hook('render:response', (response, { event }) => {\n    // Inspect or Modify the renderer response here\n    console.log(response)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Route-Based Caching Rules in Nuxt\nDESCRIPTION: Shows how to configure caching for specific routes in a Nuxt application using glob patterns in the Nuxt configuration file.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/6.cache.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  routeRules: {\n    \"/blog/**\": { cache: { maxAge: 60 * 60 } },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Edge Worker Compatible Cached Functions\nDESCRIPTION: Demonstrates how to make cached functions work properly in edge worker environments by passing the H3Event as the first argument to ensure the instance stays alive during cache updates.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/6.cache.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { H3Event } from 'h3'\n\nexport const cachedGHStars = defineCachedFunction(async (event: H3Event, repo: string) => {\n  const data: any = await $fetch(`https://api.github.com/repos/${repo}`)\n\n  return data.stargazers_count\n}, {\n  maxAge: 60 * 60,\n  name: 'ghStars',\n  getKey: (event: H3Event, repo: string) => repo\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Proxy in Nitro\nDESCRIPTION: Examples of setting up proxy configurations for the development server in Nitro. This allows overriding routes and proxy-passing requests to other servers.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/3.config/0.index.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  devProxy: {\n    '/proxy/test': 'http://localhost:3001',\n    '/proxy/example': { target: 'https://example.com', changeOrigin: true }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Config for Dynamic Storage in Nuxt\nDESCRIPTION: Configures runtime configuration values in a Nuxt application for use with the storage plugin, allowing dynamic setup of storage drivers with environment-specific credentials.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/4.storage.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  runtimeConfig: {\n    redis: { // Default values\n      host: '',\n      port: 0,\n      /* other redis connector options */\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Error Capture Plugin Implementation\nDESCRIPTION: Plugin implementation for capturing and logging all application errors with event context.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/9.plugins.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroPlugin((nitro) => {\n  nitro.hooks.hook(\"error\", async (error, { event }) => {\n    console.error(`${event.path} Application error:`, error)\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Manual Cache Invalidation in Nitro\nDESCRIPTION: Shows how to manually invalidate a specific cache entry by removing it from the storage using its full cache key path.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/6.cache.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nawait useStorage('cache').removeItem('nitro:functions:getAccessToken:default.json')\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Feature in Nitro Configuration\nDESCRIPTION: Code snippets showing how to enable the experimental database feature in both standalone Nitro projects and Nuxt projects through configuration files.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/5.database.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  experimental: {\n    database: true\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    experimental: {\n      database: true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Server Asset Access Handler\nDESCRIPTION: Example of accessing server assets using the storage layer in an event handler.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/8.assets.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineEventHandler(async () => {\n  const data = await useStorage('assets:server').getItem(`data.json`)\n  return data\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Assets with Cache Control in Nitro\nDESCRIPTION: Example of setting up public assets with cache control headers in Nitro. This configuration allows specifying a directory, base URL, and cache duration for static assets.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/3.config/0.index.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n  publicAssets: [\n    {\n      baseURL: \"images\",\n      dir: \"public/images\",\n      maxAge: 60 * 60 * 24 * 7, // 7 days\n    },\n  ],\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Nitro Application Deployment\nDESCRIPTION: Multi-stage Dockerfile for building and running a Nitro application. It includes stages for dependencies installation, application building, and final runtime configuration with proper security settings.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/koyeb.md#2025-04-16_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:18-alpine AS base\n\nFROM base AS deps\nRUN apk add --no-cache libc6-compat\nWORKDIR /app\nCOPY package.json package-lock.json ./\nRUN npm ci\n\nFROM base AS builder\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY . .\nRUN npm run build && npm cache clean --force\n\nFROM base AS runner\nWORKDIR /app\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 nitro\nCOPY --from=builder /app .\nUSER nitro\nEXPOSE 3000\nENV PORT 3000\nCMD [\"npm\", \"run\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Customizing Production Cache Storage in Nitro\nDESCRIPTION: Shows how to override the default memory-based cache storage in production with a Redis driver for better persistence and scaling.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/6.cache.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  storage: {\n    cache: {\n      driver: 'redis',\n      /* redis connector options */\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Fine-Grained ISR Route Rules in Nitro\nDESCRIPTION: Defines advanced Incremental Static Regeneration (ISR) configuration for specific route patterns. This example configures product routes with custom query parameter handling for caching, allowing for more precise control over cache behavior.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/vercel.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  routeRules: {\n    \"/products/**\": {\n      isr: {\n        allowQuery: [\"q\"],\n        passQuery: true,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling AWS Lambda Response Streaming\nDESCRIPTION: Configures Nitro to use AWS Lambda's response streaming capabilities by enabling the streaming flag in the awsLambda configuration object.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/aws.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  awsLambda: {\n    streaming: true\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Context in Nitro\nDESCRIPTION: Configuration examples for enabling async context feature in both standalone Nitro and Nuxt applications.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/1.utils.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  experimental: {\n    asyncContext: true\n  }\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    experimental: {\n      asyncContext: true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Development Handlers in Nitro\nDESCRIPTION: Example of setting up development-only handlers programmatically in Nitro. These handlers are available only in development mode and not included in production builds.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/3.config/0.index.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineEventHandler } from 'h3'\n\nexport default defineNitroConfig({\n  devHandlers: [\n    {\n      route: '/',\n      handler: defineEventHandler((event) => {\n       console.log(event)\n      })\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Tasks Feature in Nitro Configuration\nDESCRIPTION: Shows how to enable the experimental tasks feature in both nitro.config.ts and nuxt.config.ts files. This is required to use the tasks API.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/10.tasks.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  experimental: {\n    tasks: true\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    experimental: {\n      tasks: true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Nitro Preset Configuration\nDESCRIPTION: Defines a custom preset entry point that can extend existing presets and specifies an entry file and hook functions. This is the foundation for creating a custom provider configuration in Nitro.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/2.custom-presets.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NitroPreset } from \"nitro\";\nimport { fileURLToPath } from \"node:url\"\n\nexport default <NitroPreset>{\n  // extends: \"node-server\", // You can extend existing presets\n  entry: fileURLToPath(new URL(\"./entry.ts\", import.meta.url)),\n  hooks: {\n    compiled() {\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Nitro Configuration in TypeScript\nDESCRIPTION: Shows how to create a Nitro configuration file using TypeScript. This snippet demonstrates the basic structure for defining Nitro options.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/97.configuration.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  // Nitro options\n})\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Preset in Nitro Configuration\nDESCRIPTION: Shows how to configure a Nitro application to use a custom preset by specifying the preset path in the Nitro configuration file.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/2.custom-presets.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  preset: \"./preset\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Node.js Entry Point for Nitro Custom Preset\nDESCRIPTION: Implements a custom entry point for Node.js environments using the built-in HTTP server. This code creates an HTTP server that listens on port 3000 and routes requests to the Nitro application.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/2.custom-presets.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"#internal/nitro/virtual/polyfill\";\nimport { Server } from \"node:http\";\nimport { toNodeListener } from \"h3\";\n\nconst nitroApp = useNitroApp();\nconst server = new Server(toNodeListener(nitroApp.h3App));\n\n// @ts-ignore\nserver.listen(3000, (err) => {\n  if (err) {\n    console.error(err);\n    process.exit(1);\n  }\n  console.log(`Listening on http://localhost:3000 (custom preset)`);\n});\n```\n\n----------------------------------------\n\nTITLE: Template Assets Configuration and Usage\nDESCRIPTION: Example of configuring and accessing template assets from a custom directory using the storage layer.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/8.assets.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(async (event) => {\n  const html = await useStorage('assets:templates').getItem(`success.html`)\n  return html\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Production Cache Storage in Nuxt\nDESCRIPTION: Shows how to override the default memory-based cache storage in production with a Redis driver in a Nuxt application.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/6.cache.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    storage: {\n      cache: {\n        driver: 'redis',\n        /* redis connector options */\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Redis Cache Storage for Routes in Nuxt\nDESCRIPTION: Shows how to set up Redis as a custom cache storage and apply it to specific routes using the base option in a Nuxt application.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/6.cache.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    storage: {\n      redis: {\n        driver: \"redis\",\n        url: \"redis://localhost:6379\",\n      },\n    },\n  },\n  routeRules: {\n    \"/blog/**\": { cache: { maxAge: 60 * 60, base: \"redis\" } },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Nitro in Nuxt Configuration File\nDESCRIPTION: Illustrates how to configure Nitro within a Nuxt project by adding a 'nitro' property to the Nuxt configuration object.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/97.configuration.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    // Nitro options\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Development Cache Storage in Nitro\nDESCRIPTION: Shows how to override the default filesystem-based cache storage in development with a Redis driver for testing production-like caching.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/6.cache.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  devStorage: {\n    cache: {\n      driver: 'redis',\n      /* redis connector options */\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Server Assets Configuration\nDESCRIPTION: Configuration examples for adding custom server asset directories in both Nitro and Nuxt configurations.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/8.assets.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineNitroConfig({\n  serverAssets: [{\n    baseName: 'my_directory',\n    dir: './server/my_directory'\n  }]\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    serverAssets: [{\n      baseName: 'my_directory',\n      dir: './server/my_directory'\n    }]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Configuration in Nuxt\nDESCRIPTION: Shows how to define runtime configuration for Nitro within a Nuxt project configuration file.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/97.configuration.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  runtimeConfig: {\n    apiToken: \"dev_token\", // `dev_token` is the default value\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Infrastructure as Code for Render.com using YAML\nDESCRIPTION: A YAML configuration file (render.yaml) that defines the deployment settings for a Nitro application on Render.com. It specifies a web service with Node environment, defines start and build commands, and sets required environment variables including the NITRO_PRESET.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/render.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - type: web\n    name: <PROJECTNAME>\n    env: node\n    branch: main\n    startCommand: node .output/server/index.mjs\n    buildCommand: npx nypm install && npm run build\n    envVars:\n    - key: NITRO_PRESET\n      value: render_com\n```\n\n----------------------------------------\n\nTITLE: Fetching Available Nitro Tasks via API\nDESCRIPTION: Shows the response structure when fetching available Nitro tasks and scheduled tasks using the /_nitro/tasks API endpoint.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/10.tasks.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasks\": {\n    \"db:migrate\": {\n      \"description\": \"Run database migrations\"\n    },\n     \"cms:update\": {\n      \"description\": \"Update CMS content\"\n    }\n  },\n  \"scheduledTasks\": [\n    {\n      \"cron\": \"* * * * *\",\n      \"tasks\": [\n        \"cms:update\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Local Development\nDESCRIPTION: Shows how to set environment variables for local development using a .env file to override default runtime configuration values.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/97.configuration.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nNITRO_API_TOKEN=\"123\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Nitro App to Koyeb via CLI\nDESCRIPTION: CLI command to initialize and deploy a Nitro application to Koyeb from a GitHub repository. This command configures the application name, source repository, runtime parameters, port mapping, and environment variables.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/koyeb.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkoyeb app init <APPLICATION_NAME> \\\n   --git github.com/<YOUR_GITHUB_USERNAME>/<YOUR_REPOSITORY_NAME> \\\n   --git-branch main \\\n   --git-run-command \"node .output/server/index.mjs\" \\\n   --ports 3000:http \\\n   --routes /:3000 \\\n   --env PORT=3000 \\\n   --env NITRO_PRESET=koyeb\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Paths in Nitro\nDESCRIPTION: Examples of configuring custom plugin paths in both Nitro and Nuxt configurations.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/9.plugins.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  plugins: ['my-plugins/hello.ts']\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    plugins: ['my-plugins/hello.ts']\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Chunk Inlining in Nitro Configuration\nDESCRIPTION: Configures Nitro to inline dynamic imports for better performance in Lambda environments by setting the inlineDynamicImports flag to true. This prevents lazy loading code chunks which can affect Lambda cold start times.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/aws.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  inlineDynamicImports: true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Production Environment Variables for Nitro\nDESCRIPTION: Demonstrates how to set environment variables for a production Nitro deployment to override runtime configuration.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/97.configuration.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nNITRO_API_TOKEN=\"123\"\n```\n\n----------------------------------------\n\nTITLE: Cloudflare D1 Database Access Example\nDESCRIPTION: Example showing how to access Cloudflare D1 database through bindings in a Nitro application.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/cloudflare.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndefineEventHandler(async (event) => {\n  const { cloudflare } = event.context\n  const stmt = await cloudflare.env.MY_D1.prepare('SELECT id FROM table')\n  const { results } = await stmt.all()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployment Preset in Nitro Configuration File\nDESCRIPTION: This TypeScript snippet shows how to set a specific deployment preset ('cloudflare_pages') by updating the nitro.config.ts file. This allows for preset configuration directly in the project files.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/0.index.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  preset: 'cloudflare_pages'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Production Environment Variables for Nuxt\nDESCRIPTION: Shows how to set environment variables for a production Nuxt deployment that uses Nitro, using the NUXT_ prefix.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/97.configuration.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nNUXT_API_TOKEN=\"123\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Bindings in wrangler.toml\nDESCRIPTION: Sample wrangler.toml configuration defining a custom environment variable and a KV namespace binding for local development. This file sets up the MY_VARIABLE environment variable and configures a KV namespace with the binding name MY_KV.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/cloudflare.md#2025-04-16_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[vars]\nMY_VARIABLE=\"my-value\"\n\n[[kv_namespaces]]\nbinding = \"MY_KV\"\nid = \"xxx\"\n```\n\n----------------------------------------\n\nTITLE: Monorepo AWS Amplify Configuration File\nDESCRIPTION: Amplify.yml configuration for deploying a Nitro application from a monorepo structure to AWS Amplify Hosting. Specifies application root and build path.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/aws-amplify.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\napplications:\n  - frontend:\n      phases:\n        preBuild:\n          commands:\n          - nvm use 18 && node --version\n          - corepack enable && npx --yes nypm install\n        build:\n          commands:\n            - pnpm --filter website1 build\n      artifacts:\n        baseDirectory: apps/website1/.amplify-hosting\n        files:\n          - '**/*'\n      buildPath: /\n    appRoot: apps/website1\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Public Assets\nDESCRIPTION: Shows the standard directory structure for public assets in a Nitro.js application, demonstrating how files in the public directory are directly accessible.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/8.assets.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nserver/\n  public/\n    image.png     <-- /image.png\n    video.mp4     <-- /video.mp4\n    robots.txt    <-- /robots.txt\npackage.json\nnitro.config.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Zerops Deployment for Node.js Application\nDESCRIPTION: YAML configuration for building and deploying a Nitro Node.js application on Zerops. Specifies build environment, commands, deployment files, and runtime configuration with HTTP port exposure.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/zerops.md#2025-04-16_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: nodejs@20\n      envVariables:\n        SERVER_PRESET: zerops\n      buildCommands:\n        - pnpm i\n        - pnpm run build\n      deployFiles:\n        - .output\n        - package.json\n        - node_modules\n    run:\n      base: nodejs@20\n      ports:\n        - port: 3000\n          httpSupport: true\n      start: node .output/server/index.mjs\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio Project in YAML\nDESCRIPTION: This YAML configuration file (genezio.yaml) defines the structure and settings for a Nitro app deployment on Genezio. It specifies the project name, backend path, language, and function details.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/genezio.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of the project.\nname: nitro-app\n# The version of the Genezio YAML configuration to parse.\nyamlVersion: 2\nbackend:\n  # The root directory of the backend.\n  path: .output/\n  # Information about the backend's programming language.\n  language:\n      # The name of the programming language.\n      name: js\n      # The package manager used by the backend.\n      packageManager: npm\n  # Information about the backend's functions.\n  functions:\n      # The name (label) of the function.\n      - name: nitroServer\n      # The path to the function's code.\n        path: server/\n        # The name of the function handler\n        handler: handler\n        # The entry point for the function.\n        entry: index.mjs\n```\n\n----------------------------------------\n\nTITLE: Building and Running Nitro Applications with Deno Runtime\nDESCRIPTION: Commands to build a Nitro application with the deno_server preset and run it using Deno runtime. The build process uses Node.js but creates output compatible with Deno, which requires specific permissions for network, file reading, and environment variables.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/10.runtimes/deno.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Build with the deno NITRO preset\nNITRO_PRESET=deno_server npm run build\n\n# Start production server\ndeno run --unstable --allow-net --allow-read --allow-env .output/server/index.ts\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Preset in Nuxt Configuration\nDESCRIPTION: Shows how to configure a Nuxt application to use a custom Nitro preset by setting the preset path in the Nuxt configuration file's nitro section.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/2.custom-presets.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    preset: \"./preset\",\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Running an Echo Payload Task\nDESCRIPTION: Demonstrates how to define an echo payload task and shows examples of running it using GET and POST requests to the /_nitro/tasks/:name endpoint.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/10.tasks.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineTask({\n  meta: {\n    name: \"echo:payload\",\n    description: \"Returns the provided payload\",\n  },\n  run({ payload, context }) {\n    console.log(\"Running echo task...\");\n    return { result: payload };\n  },\n});\n```\n\nLANGUAGE: json\nCODE:\n```\n// [GET] /_nitro/tasks/echo:payload?field=value&array=1&array=2\n{\n  \"field\": \"value\",\n  \"array\": [\"1\", \"2\"]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n/**\n * [POST] /_nitro/tasks/echo:payload?field=value\n * body: {\n *   \"payload\": {\n *     \"answer\": 42,\n *     \"nested\": {\n *       \"value\": true\n *     }\n *   }\n * }\n */\n{\n  \"field\": \"value\",\n  \"answer\": 42,\n  \"nested\": {\n    \"value\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prerender Options in TypeScript\nDESCRIPTION: Default configuration for prerendering options in Nitro. Includes settings for auto subfolder indexing, concurrency, intervals, error handling, crawling, and retry mechanisms.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/3.config/0.index.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  autoSubfolderIndex: true,\n  concurrency: 1,\n  interval: 0,\n  failOnError: false,\n  crawlLinks: false,\n  ignore: [],\n  routes: [],\n  retry: 3,\n  retryDelay: 500\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IIS Options in Nuxt Configuration\nDESCRIPTION: This code snippet shows how to configure IIS-specific options within a Nuxt configuration file. It provides the same functionality as the Nitro config but is integrated within the Nuxt configuration structure.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/iis.md#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    // IIS options default\n    iis: {\n      // merges in a pre-existing web.config file to the nitro default file\n      mergeConfig: true,\n      // overrides the default nitro web.config file all together\n      overrideConfig: false,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sum Utility in TypeScript\nDESCRIPTION: Creates a custom utility function for adding two numbers that will be auto-imported across the application.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/1.utils.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useSum(a: number, b: number) { return a + b }\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Rules in Nuxt\nDESCRIPTION: Equivalent configuration of route rules in nuxt.config.ts, demonstrating the same routing options as the Nitro configuration but within a Nuxt application context.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/2.routing.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  routeRules: {\n    '/blog/**': { swr: true },\n    '/blog/**': { swr: 600 },\n    '/blog/**': { static: true },\n    '/blog/**': { cache: { /* cache options*/ } },\n    '/assets/**': { headers: { 'cache-control': 's-maxage=0' } },\n    '/api/v1/**': { cors: true, headers: { 'access-control-allow-methods': 'GET' } },\n    '/old-page': { redirect: '/new-page' },\n    '/old-page/**': { redirect: '/new-page/**' },\n    '/proxy/example': { proxy: 'https://example.com' },\n    '/proxy/**': { proxy: '/api/**' },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Nitro Server Initialization Plugin\nDESCRIPTION: Plugin to create initialization file required by Nginx buildpack in production environment\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/heroku.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from \"fs\"\n\nexport default defineNitroPlugin((nitroApp) => {\n   if((process.env.NODE_ENV || 'development') != 'development') {\n      fs.openSync('/tmp/app-initialized', 'w')\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Zerops Project Import for Static Application\nDESCRIPTION: YAML configuration for importing a Nitro static project into Zerops. This defines the project name and specifies a static service type.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/zerops.md#2025-04-16_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nproject:\n  name: nitro-app\n\nservices:\n  - hostname: app\n    type: static\n```\n\n----------------------------------------\n\nTITLE: Integrating nitro-cloudflare-dev in Nitro Configuration\nDESCRIPTION: Implementation of the nitro-cloudflare-dev module in a Nitro configuration file. This code imports the module and adds it to Nitro's modules array to enable Cloudflare bindings in the local development environment.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/cloudflare.md#2025-04-16_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport nitroCloudflareBindings from \"nitro-cloudflare-dev\";\n\nexport default defineNitroConfig({\n  modules: [nitroCloudflareBindings],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Node.js Server with Nitro Handler\nDESCRIPTION: This JavaScript code demonstrates how to create a custom Node.js server using the Nitro handler. It imports the listener from the Nitro output and creates a server that listens on port 8080.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/10.runtimes/1.node.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { listener } from './.output/server'\n\nconst server = createServer(listener)\nserver.listen(8080)\n```\n\n----------------------------------------\n\nTITLE: Updating Nitro Package Dependency in package.json\nDESCRIPTION: Updates the package.json file to replace the 'nitropack' dependency with the new 'nitro' package, using the nightly release.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/00.migration.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"dependencies\": {\n--    \"nitropack\": \"latest\"\n++    \"nitro\": \"npm:nitro-nightly@latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating nitro-cloudflare-dev in Nuxt Configuration\nDESCRIPTION: Implementation of the nitro-cloudflare-dev module in a Nuxt configuration file. This adds the module to Nuxt's modules array to enable Cloudflare bindings in the local development environment of a Nuxt project.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/cloudflare.md#2025-04-16_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['nitro-cloudflare-dev']\n})\n```\n\n----------------------------------------\n\nTITLE: Using AWS Lambda Handler Programmatically in TypeScript\nDESCRIPTION: Demonstrates how to import and use the Nitro AWS Lambda handler programmatically to process requests, returning the standard response format with statusCode, headers, and body.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/aws.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handler } from './.output/server'\n\n// Use programmatically\nconst { statusCode, headers, body } = handler({ rawPath: '/' })\n```\n\n----------------------------------------\n\nTITLE: Updating Nitro Import Statements\nDESCRIPTION: Modifies import statements to use the new 'nitro' package instead of 'nitropack', reflecting the package renaming in Nitro 3.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/00.migration.md#2025-04-16_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-- import { defineNitroConfig } from \"nitropack/config\"\n++ import { defineNitroConfig } from \"nitro/config\"\n```\n\n----------------------------------------\n\nTITLE: Setting Deployment Preset Using Environment Variable with Bash\nDESCRIPTION: This command sets the Nitro deployment preset to 'cloudflare_pages' using the command line and the --preset argument. This approach is recommended for deployments in CI/CD environments.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/0.index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnitro build --preset cloudflare_pages\n```\n\n----------------------------------------\n\nTITLE: Production Asset Manifest Structure\nDESCRIPTION: Example of the production asset manifest that Nitro generates during build, containing metadata for public assets including type, etag, modification time, and size.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/8.assets.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/image.png\": {\n    \"type\": \"image/png\",\n    \"etag\": \"\\\"4a0c-6utWq0Kbk5OqDmksYCa9XV8irnM\\\"\",\n    \"mtime\": \"2023-03-04T21:39:45.086Z\",\n    \"size\": 18956\n  },\n  \"/robots.txt\": {\n    \"type\": \"text/plain; charset=utf-8\",\n    \"etag\": \"\\\"8-hMqyDrA8fJ0R904zgEPs3L55Jls\\\"\",\n    \"mtime\": \"2023-03-04T21:39:45.086Z\",\n    \"size\": 8\n  },\n  \"/video.mp4\": {\n    \"type\": \"video/mp4\",\n    \"etag\": \"\\\"9b943-4UwfQXKUjPCesGPr6J5j7GzNYGU\\\"\",\n    \"mtime\": \"2023-03-04T21:39:45.085Z\",\n    \"size\": 637251\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nitro Runtime Imports\nDESCRIPTION: Changes imports from nested 'nitro/runtime/*' paths to the simplified 'nitro/runtime' import, as support for nested paths has been removed.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/00.migration.md#2025-04-16_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-- import { useStorage } from \"nitropack/runtime/storage\"\n++ import { useStorage } from \"nitro/runtime\"\n```\n\n----------------------------------------\n\nTITLE: JSON Cache Entry Example\nDESCRIPTION: Shows the structure of a cached function result stored as JSON, containing the expiration timestamp, cached value, modification time, and integrity hash.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/6.cache.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"expires\":1677851092249,\"value\":43991,\"mtime\":1677847492540,\"integrity\":\"ZUHcsxCWEH\"}\n```\n\n----------------------------------------\n\nTITLE: Running a Nitro Server with Bun Runtime\nDESCRIPTION: Command to run a Nitro server in production using Bun. This requires first building the Nitro application with the 'bun' preset for optimal performance.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/10.runtimes/bun.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun run ./.output/server/index.mjs\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Alwaysdata Node.js Site\nDESCRIPTION: Configuration for the environment variables required to run a Nitro application on Alwaysdata hosting platform.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/alwaysdata.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nNITRO_PRESET=alwaysdata\n```\n\n----------------------------------------\n\nTITLE: Running Local Preview of Azure Static Web Apps\nDESCRIPTION: Commands to build a Nitro application with the Azure preset and preview it locally using Azure Functions Core Tools and Static Web Apps CLI.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/azure.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNITRO_PRESET=azure npx nypm@latest build\nnpx @azure/static-web-apps-cli start .output/public --api-location .output/server\n```\n\n----------------------------------------\n\nTITLE: Configuring Zerops Project Import for Node.js Application\nDESCRIPTION: YAML configuration for importing a Nitro Node.js project into Zerops. This defines the project name and specifies a Node.js 20 service.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/zerops.md#2025-04-16_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nproject:\n  name: nitro-app\n\nservices:\n  - hostname: app\n    type: nodejs@20\n```\n\n----------------------------------------\n\nTITLE: Building Cloudflare Pages Application with Environment Variable\nDESCRIPTION: Command to build a Nitro application for Cloudflare Pages using environment variable configuration.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/cloudflare.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNITRO_PRESET=cloudflare_pages npm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel Bypass Token for ISR in Nuxt Config\nDESCRIPTION: Sets up a bypass token for On-Demand Incremental Static Regeneration in a Nuxt application using Nitro. This configuration enables secure cache invalidation for ISR routes using an environment variable.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/vercel.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    vercel: {\n      config: {\n        bypassToken: process.env.VERCEL_BYPASS_TOKEN\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Wrangler Installation and Deployment Commands\nDESCRIPTION: Series of commands for installing wrangler, logging in, and building/deploying a Cloudflare Worker application.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/cloudflare.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i wrangler\nwrangler login\n\nNITRO_PRESET=cloudflare_module npm run build\n```\n\n----------------------------------------\n\nTITLE: Local Preview Commands using Wrangler\nDESCRIPTION: Commands for previewing Cloudflare Worker applications locally using wrangler CLI.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/cloudflare.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNITRO_PRESET=cloudflare npm run build\n\n# If you have added a 'wrangler.toml' file like above in the root of your project:\nnpx wrangler dev\n\n# If you don't have a 'wrangler.toml', directly use:\nnpx wrangler dev .output/server/index.mjs --site .output/public\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform.sh for Nitro Applications\nDESCRIPTION: A Platform.sh configuration file (.platform.app.yaml) that defines how to build and run a Nitro application. It specifies the Node.js environment, disk allocation, startup commands, build hooks, and data persistence mount.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/platform-sh.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: nitro-app\ntype: 'nodejs:18'\ndisk: 128\nweb:\n  commands:\n    start: \"node .output/server/index.mjs\"\nbuild:\n  flavor: none\nhooks:\n  build: |\n    corepack enable\n    npx nypm install\n    NITR_PRESET=platform_sh npm run build\nmounts:\n    '.data':\n        source: local\n        source_path: .data\n```\n\n----------------------------------------\n\nTITLE: Deploying Nitro App with Deno Deploy CLI\nDESCRIPTION: Commands to build a Nitro application with deno_deploy preset and deploy it using deployctl CLI tool. Requires DENO_DEPLOY_TOKEN to be set as an environment variable.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/deno-deploy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Build with the deno_deploy NITRO preset\nNITRO_PRESET=deno_deploy npm run build\n\n# Make sure to run the deployctl command from the output directory\ncd .output\ndeployctl deploy --project=my-project server/index.ts\n```\n\n----------------------------------------\n\nTITLE: Setting NITRO_PRESET Environment Variable for DigitalOcean Deployment\nDESCRIPTION: Configures the required environment variable to specify DigitalOcean as the deployment preset for a Nitro application. This environment variable should be set at the app level in the DigitalOcean App Platform settings.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/digitalocean.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNITRO_PRESET=digital_ocean\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Amplify Settings in Nitro Config\nDESCRIPTION: Configuration options for AWS Amplify in a Nitro project. Includes options for catch-all static fallback and image optimization settings.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/aws-amplify.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroConfig({\n  awsAmplify: {\n      // catchAllStaticFallback: true,\n      // imageOptimization: { path: \"/_image\", cacheControl: \"public, max-age=3600, immutable\" },\n      // imageSettings: { ... },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Nitro Preset for Cleavr Deployment\nDESCRIPTION: This code snippet demonstrates how to configure the Nitro preset to 'cleavr' in a project's configuration file. This setting prepares the Nitro application for deployment on the Cleavr platform.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/cleavr.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  nitro: {\n    preset: 'cleavr'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Import Example from Virtual Imports\nDESCRIPTION: Shows how to manually import utilities from the virtual #imports file for edge cases and IDE support.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/1.utils.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useStorage } from '#imports'\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Images for Netlify Image CDN in Nitro\nDESCRIPTION: Example of how to configure the Netlify Image CDN integration using the 'netlify' key in the Nitro configuration file. This allows for custom deployment settings, specifically for remote images.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/netlify.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"netlify\": {\n    \"images\": {\n      \"remote_images\": [...]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Nitro App with Edgio Preset Locally\nDESCRIPTION: Command to build your Nitro application using the Edgio preset. This creates a production build configured for Edgio deployment.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/edgio.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNITRO_PRESET=edgio npx nitropack build\n```\n\n----------------------------------------\n\nTITLE: Building Nitro Project with CLI\nDESCRIPTION: This command builds the Nitro project using the Nitro CLI. It prepares the application for production deployment.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/10.runtimes/1.node.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnitro build\n```\n\n----------------------------------------\n\nTITLE: Simulating Production Environment Locally with Edgio\nDESCRIPTION: Commands to build and run your application in a simulated Edgio production environment locally. This helps test how your app would behave when deployed to Edgio.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/edgio.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nedgio build && edgio run --production\n```\n\n----------------------------------------\n\nTITLE: Deploying Nitro App to Edgio from Local Machine\nDESCRIPTION: Command to deploy your Nitro application to Edgio from your local environment. This requires prior authentication with Edgio.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/edgio.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nedgio deploy\n```\n\n----------------------------------------\n\nTITLE: Running Nitro Tasks via CLI\nDESCRIPTION: Shows CLI commands for listing and running Nitro tasks while the dev server is running.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/10.tasks.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnitro task list\n```\n\nLANGUAGE: bash\nCODE:\n```\nnitro task run db:migrate --payload \"{}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flightcontrol Deployment for Nitro Apps using JSON\nDESCRIPTION: Sample flightcontrol.json configuration file that defines an AWS Fargate service for a Nitro application. The configuration specifies deployment settings for the production environment, including region, branch source, service type, domain, and resource allocations.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/flightcontrol.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://app.flightcontrol.dev/schema.json\",\n  \"environments\": [\n    {\n      \"id\": \"production\",\n      \"name\": \"Production\",\n      \"region\": \"us-west-2\",\n      \"source\": {\n        \"branch\": \"main\"\n      },\n      \"services\": [\n        {\n          \"id\": \"nitro\",\n          \"buildType\": \"nixpacks\",\n          \"name\": \"My Nitro site\",\n          \"type\": \"fargate\",\n          \"domain\": \"www.yourdomain.com\",\n          \"outputDirectory\": \".output\",\n          \"startCommand\": \"node .output/server/index.mjs\",\n          \"cpu\": 0.25,\n          \"memory\": 0.5\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Nitro App to Genezio\nDESCRIPTION: This command uses the Genezio CLI to deploy the built Nitro application to Genezio's infrastructure. The 'genezio deploy' command initiates the deployment process.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/genezio.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Navigating to Nitro App Directory in Shell\nDESCRIPTION: This command navigates to the newly created nitro-app directory after setting up a project using the starter template.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/0.index.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd nitro-app\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Workflow for Azure Static Web Apps Deployment\nDESCRIPTION: Example GitHub workflow configuration for deploying a Nitro application to Azure Static Web Apps, specifying the app location, API location, and output location for proper deployment.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/azure.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n###### Repository/Build Configurations ######\napp_location: '/'\napi_location: '.output/server'\noutput_location: '.output/public'\n###### End of Repository/Build Configurations ######\n```\n\n----------------------------------------\n\nTITLE: Running Nitro Application on Koyeb\nDESCRIPTION: Command to run the Nitro application server in a Koyeb environment. This specifies the entry point to the server file generated by the Nitro build process.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/koyeb.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode .output/server/index.mjs\n```\n\n----------------------------------------\n\nTITLE: Creating Heroku Application\nDESCRIPTION: Command to create a new Heroku application using the Heroku CLI\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/heroku.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nheroku create myapp\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Amplify Settings in Nuxt Config\nDESCRIPTION: Configuration options for AWS Amplify in a Nuxt project. Shows how to set Nitro-specific AWS Amplify options within Nuxt configuration.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/aws-amplify.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    awsAmplify: {\n      // catchAllStaticFallback: true,\n      // imageOptimization: { \"/_image\", cacheControl: \"public, max-age=3600, immutable\" },\n      // imageSettings: { ... },\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Running Built Nitro Node.js Server\nDESCRIPTION: This command runs the built Nitro Node.js server. It starts the server and makes it listen on the default port 3000.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/10.runtimes/1.node.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ node .output/server/index.mjs\nListening on http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Setting Heroku Node.js Buildpack\nDESCRIPTION: Command to configure Heroku to use the Node.js buildpack\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/heroku.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nheroku buildpacks:set heroku/nodejs\n```\n\n----------------------------------------\n\nTITLE: Standard AWS Amplify Configuration File\nDESCRIPTION: Basic amplify.yml configuration for deploying a Nitro application to AWS Amplify Hosting. Defines build phases and artifact settings.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/aws-amplify.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\nfrontend:\n  phases:\n    preBuild:\n      commands:\n        - nvm use 18 && node --version\n        - corepack enable && npx --yes nypm install\n    build:\n      commands:\n        - pnpm build\n  artifacts:\n    baseDirectory: .amplify-hosting\n    files:\n      - \"**/*\"\n```\n\n----------------------------------------\n\nTITLE: Running WinterJS Application Locally with Wasmer\nDESCRIPTION: Command to run a WinterJS application locally using Wasmer. It forwards the host environment, enables networking, and maps the app directory to the .output folder.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/10.runtimes/_winterjs.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwasmer run wasmer/winterjs --forward-host-env --net --mapdir app:.output app/server/index.mjs\n```\n\n----------------------------------------\n\nTITLE: Configuring Nitro Preset\nDESCRIPTION: Command to set the Nitro preset environment variable for Heroku\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/heroku.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nheroku config:set NITRO_PRESET=heroku\n```\n\n----------------------------------------\n\nTITLE: Building Nitro Application with WinterJS Preset\nDESCRIPTION: Command to build a Nitro application using the WinterJS preset. This sets the NITRO_PRESET environment variable to 'winterjs' before running the build command.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/10.runtimes/_winterjs.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nNITRO_PRESET=\"winterjs\" npm run build\n```\n\n----------------------------------------\n\nTITLE: Wrangler Configuration File Example\nDESCRIPTION: Example wrangler.toml configuration file showing environment variables setup for different environments.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/cloudflare.md#2025-04-16_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n# Shared\n[vars]\nNITRO_HELLO_THERE=\"general\"\nSECRET=\"secret\"\n\n# Override values for `--env production` usage\n[env.production.vars]\nNITRO_HELLO_THERE=\"captain\"\nSECRET=\"top-secret\"\n```\n\n----------------------------------------\n\nTITLE: Installing Edgio CLI\nDESCRIPTION: Command to install the Edgio CLI globally using npm. This is required before you can deploy your Nitro app to Edgio.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/edgio.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g @edgio/cli\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Sample environment variables configuration file content.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/cloudflare.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nNITRO_HELLO_THERE=\"captain\"\nSECRET=\"top-secret\"\n```\n\n----------------------------------------\n\nTITLE: Building Nitro App with Genezio Preset\nDESCRIPTION: This bash command builds the Nitro application using the Genezio preset. It sets the NITRO_PRESET environment variable to 'genezio' before running the build command.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/genezio.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNITRO_PRESET=genezio npm run build\n```\n\n----------------------------------------\n\nTITLE: Package.json Script Configuration\nDESCRIPTION: Required build and start scripts configuration in package.json for Heroku deployment\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/heroku.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"build\": \"nitro build\",\n  \"start\": \"node .output/server/index.mjs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nitro Type Imports\nDESCRIPTION: Modifies type imports to use the new 'nitro/types' path instead of importing directly from 'nitropack', as Nitro types are now only exported from this specific path.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/00.migration.md#2025-04-16_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-- import { NitroRuntimeConfig } from \"nitropack\"\n++ import { NitroRuntimeConfig } from \"nitro/types\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Nitro App to Edgio with CI/CD\nDESCRIPTION: Command for deploying to Edgio in non-interactive environments like CI/CD pipelines. Requires a deploy token from the Edgio Developer Console.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/edgio.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nedgio deploy --token=XXX\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Version in package.json for DigitalOcean\nDESCRIPTION: Specifies the Node.js version to use for the application deployment on DigitalOcean. This configuration in package.json ensures that DigitalOcean uses a supported Node.js version during the build and runtime processes.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/digitalocean.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"engines\": {\n      \"node\": \"16.x\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Koyeb CLI\nDESCRIPTION: Command to log into your Koyeb account using the Koyeb CLI. After running this command, you will be prompted to enter your API credentials.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/koyeb.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkoyeb login\n```\n\n----------------------------------------\n\nTITLE: Adding Start Script in package.json for DigitalOcean Deployment\nDESCRIPTION: Defines the start script in package.json that DigitalOcean will use as the run command after building the application. This script points to the Nitro server output file that should be executed to start the application.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/digitalocean.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"scripts\": {\n      \"start\": \"node .output/server/index.mjs\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Deno Deploy\nDESCRIPTION: GitHub Actions workflow configuration for automated deployment to Deno Deploy. Sets up Node.js environment, builds the application with deno_deploy preset, and deploys using deployctl action.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/deno-deploy.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: deno-deploy\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  deploy:\n    steps:\n      - uses: actions/checkout@v3\n      - run: corepack enable\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 18\n          cache: pnpm\n      - run: pnpm install\n      - run: pnpm build\n        env:\n          NITRO_PRESET: deno_deploy\n      - name: Deploy to Deno Deploy\n        uses: denoland/deployctl@v1\n        with:\n          project: my-project\n          entrypoint: server/index.ts\n          root: .output\n```\n\n----------------------------------------\n\nTITLE: Docker Ignore Configuration for Nitro Projects\nDESCRIPTION: Docker ignore configuration that specifies which files should be excluded when building the Docker container for a Nitro application. This prevents unnecessary files from being included in the Docker image.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/2.deploy/20.providers/koyeb.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nDockerfile\n.dockerignore\nnode_modules\nnpm-debug.log\n.nitro\n.output\n.git\ndist\nREADME.md\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Nitro Nightly Channel\nDESCRIPTION: This code snippet shows how to modify the package.json file to use the nightly release of Nitro. It replaces the stable version with the nightly version in the devDependencies.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/99.nightly.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n--    \"nitropack\": \"^2.0.0\"\n++    \"nitropack\": \"npm:nitropack-nightly@latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating File Generation with autoSubfolderIndex in Bash\nDESCRIPTION: Shows how the autoSubfolderIndex option affects file generation in the .output/public directory. This is useful for controlling trailing slash behavior based on hosting provider requirements.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/3.config/0.index.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# autoSubfolderIndex: true (default)\n/about -> .output/public/about/index.html\n# autoSubfolderIndex: false\n/about -> .output/public/about.html\n```\n\n----------------------------------------\n\nTITLE: Accessing NODE_ENV Environment Variable in Node.js\nDESCRIPTION: This snippet shows how to access the NODE_ENV environment variable in a Node.js application. The NODE_ENV variable is commonly used to determine the execution environment (development, production, etc.).\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/test/fixture/assets/test.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.env.NODE_ENV\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Storage Configuration in Nuxt\nDESCRIPTION: Shows how to configure different storage setups for development and production environments in a Nuxt application using the devStorage property under the nitro configuration.\nSOURCE: https://github.com/nitrojs/nitro/blob/v3/docs/1.guide/4.storage.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    // Production\n    storage: {\n      db: {\n        driver: 'redis',\n        /* redis connector options */\n      }\n    },\n    // Development\n    devStorage: {\n      db: {\n        driver: 'fs',\n        base: './data/db'\n      }\n    }\n  }\n})\n```"
  }
]