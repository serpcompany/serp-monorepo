[
  {
    "owner": "astorm",
    "repo": "magento-layout-no-frills",
    "content": "TITLE: Layout Builder Methods Delegating to Layout Object\nDESCRIPTION: Shows how the Builder delegates actual XML processing to the layout object through three key methods that control loading updates, generating XML, and generating elements.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nprotected function loadLayoutUpdates()\n{\n    /* ... */\n    $this->layout->getUpdate()->load();\n    /* ... */\n}\n    \nprotected function generateLayoutXml()\n{\n    /* ... */    \n    $this->layout->generateXml();\n    /* ... */\n}        \n\nprotected function generateLayoutBlocks()\n{\n    /* ... */    \n    $this->layout->generateElements();\n    /* ... */    \n}\n```\n\n----------------------------------------\n\nTITLE: Module Registration in Magento Component System\nDESCRIPTION: This snippet shows how a module is registered in Magento's component system using the ComponentRegistrar. The registration.php file specifies the component type (MODULE), the module name, and its directory location.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-components.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\Framework\\Component\\ComponentRegistrar::register(\n    \\Magento\\Framework\\Component\\ComponentRegistrar::MODULE,\n    'Someotherpackage_Module',\n    __DIR__\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller with ResultPageFactory in Magento 2\nDESCRIPTION: A basic Magento 2 controller class that injects the ResultPageFactory to create page responses. This shows the controller class structure with constructor dependency injection.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-3-layouthandles.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Pulsestorm\\Nofrillslayout\\Controller\\Chapter3;\nuse Pulsestorm\\Nofrillslayout\\Controller\\Base;\n\nclass Index extends Base\n{   \n    protected $resultPageFactory;\n    public function __construct(\n        \\Magento\\Framework\\App\\Action\\Context $context,\n        \\Magento\\Framework\\View\\Result\\PageFactory $resultPageFactory\n    )\n    {    \n        $this->resultPageFactory = $resultPageFactory;\n        return parent::__construct($context);\n    }           \n    public function execute()\n    {\n        var_dump(__METHOD__);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Module Configuration File in Magento\nDESCRIPTION: This XML configuration file defines a basic Magento module. It must be placed in the module's etc directory and includes the module name and version number. This is the minimum required configuration for a module to exist in Magento.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/c_appendix_creating_modules.markdown#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- #File: app/code/local/Packagename/Modulename/etc/config.xml -->\n<config>\n    <modules>\n        <Packagename_Modulename>\n            <version>1.0.0</version>\n        </Packagename_Modulename>\n    </modules>\n</config>\n```\n\n----------------------------------------\n\nTITLE: Accessing Arguments in Magento 2 Template File\nDESCRIPTION: This PHP template file shows how to access arguments passed from the layout XML. It demonstrates two methods: using getData() and using magic methods.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-2-layout-xml.md#2025-04-18_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<p>\n    Printed with getData: <?php echo $block->getData('the_message'); ?>\n</p>\n\n<p>\n    Printed with magic methods: <?php echo $block->getTheMessage(); ?>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Loading Layout Updates in Magento 2 Layout Merge\nDESCRIPTION: Method signature for loading file layout updates XML in the Magento\\Framework\\View\\Model\\Layout\\Merge class. This method is responsible for building the Global XML Handle Tree.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n#File: vendor/magento/framework/View/Model/Layout/Merge.php\nprotected function _loadFileLayoutUpdatesXml()\n{\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Magento Configuration Values\nDESCRIPTION: Demonstrates how to retrieve configuration values using Magento's getStoreConfig method with xpath-like expressions.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/i_system_config.markdown#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nMage::getStoreConfig('store/database/name');\nMage::getStoreConfig('store/database/password');\nMage::getStoreConfig('store/design/logo');\n```\n\n----------------------------------------\n\nTITLE: Layout XML with References in Magento\nDESCRIPTION: Enhanced layout XML that demonstrates using the reference tag to modify existing blocks after they're created. Shows how to add a text block to a content area using XML rather than PHP code.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<layout>\n\t<block type=\"nofrills_booklayout/template\" name=\"root\"\n\ttemplate=\"simple-page/2col.phtml\" output=\"toHtml\">\n\n\t\t<block type=\"nofrills_booklayout/template\" name=\"additional_head\"\n\t\ttemplate=\"simple-page/head.phtml\" />\n\n\t\t<block type=\"nofrills_booklayout/template\" name=\"sidebar\">\n\t\t\t<action method=\"setTemplate\">\n\t\t\t\t<template>simple-page/sidebar.phtml</template>\n\t\t\t</action>\n\t\t</block>\n\n\t\t<block type=\"core/text_list\" name=\"content\" />\n\n\t</block>\n\t\n\n\t<reference name=\"content\">\n\t\t<block type=\"core/text\" name=\"goodbye\">\n\t\t\t<action method=\"setText\">\n\t\t\t\t<text> The lazy dog was only faking it. </text>\n\t\t\t</action>\n\t\t</block>\n\t\t\n\t</reference>\t\n</layout>\n```\n\n----------------------------------------\n\nTITLE: Loading Layout XML Files from Multiple Sources\nDESCRIPTION: Shows how the Layout Merge system loads XML files from both standard layout sources and page layout-specific sources, combining them into a single collection of update files.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nprotected function _loadFileLayoutUpdatesXml()\n{\n    /* ... */\n    $updateFiles = $this->fileSource->getFiles($theme, '*.xml');\n    $updateFiles = array_merge($updateFiles, $this->pageLayoutFileSource->getFiles($theme, '*.xml'));\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Module Activation File in Magento\nDESCRIPTION: This XML file enables the module in Magento's system. It must be placed in app/etc/modules directory and specifies that the module is active and which code pool it belongs to (local, community, or core).\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/c_appendix_creating_modules.markdown#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- #File: app/etc/modules/Packagename_Modulename.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<config>\n\t<modules>\n\t\t<Packagename_Modulename>\n\t\t\t<active>true</active>\n\t\t\t<codePool>local</codePool>\n\t\t</Packagename_Modulename>\n\t</modules>\n</config>\n```\n\n----------------------------------------\n\nTITLE: XML Structure for Global XML Handle Tree in Magento 2\nDESCRIPTION: The XML structure representing all loaded layout handles in Magento 2's layout system. Each layout handle is contained within a <handle> node under the root <layouts> element.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<layouts xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <handle id=\"...\">\n        <!-- ... -->\n    </handle>\n    <handle id=\"...\">\n        <!-- ... -->\n    </handle>\n    \n    <!-- etc... -->\n</layouts>\n```\n\n----------------------------------------\n\nTITLE: Configuring YouTube Widget Definition - XML\nDESCRIPTION: Widget configuration defining a YouTube video widget with name and description for the Magento admin interface.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/7_widgets.markdown#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- #File: app/code/local/Nofrills/Booklayout/etc/widget.xml -->\n<widgets>\n\t<nofrills_layoutbook_youtube type=\"nofrills_booklayout/youtube\">\n\t\t<name>YouTube Example Widget</name>\n\t\t<description type=\"desc\">\n\t\t\tThis wiget displays a YouTube video.\n\t\t</description>\n\t</nofrills_layoutbook_youtube>\n</widgets>\n```\n\n----------------------------------------\n\nTITLE: Using the Update Tag in Magento Layout XML\nDESCRIPTION: A complete layout XML example demonstrating how to use the <update> tag to include fragments from one handle in another. This allows for reusing layout blocks across different page layouts.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/3_package_layout.markdown#2025-04-18_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<layout version=\"0.1.0\">\n\t<nofrills_booklayout_package_index>\n\t\t<reference name=\"content\">\n\t\t\t<block type=\"core/text\" name=\"planet_4\">\n\t\t\t\t<action method=\"setText\"><text>Hello Mars. </text></action>\n\t\t\t</block>                        \n\t\t</reference>\n\t\n\t\t<update handle=\"nofrills_booklayout_package_second\" />\n\t</nofrills_booklayout_package_index>\n\t\n\t<nofrills_booklayout_package_second>\n\t\t<reference name=\"content\">\n\t\t\t<block type=\"core/text\" name=\"planet_5\">\n\t\t\t\t<action method=\"setText\"><text>Hello Jupiter. </text></action>\n\t\t\t</block>                        \n\t\t</reference>\n\t</nofrills_booklayout_package_second>   \n\t\n\t<nofrills_booklayout_package_second>    \n\t\t<reference name=\"root\">\n\t\t\t<action method=\"setTemplate\">\n\t\t\t\t<template>page/1column.phtml</template>\n\t\t\t</action>\n\t\t</reference>\n\t</nofrills_booklayout_package_second>\n</layout>\n```\n\n----------------------------------------\n\nTITLE: Generating Layout Elements in Magento Layout System\nDESCRIPTION: The generateElements method orchestrates the layout generation process. It first uses readers to interpret XML instructions, then passes control to generator objects that process these instructions to build the actual layout structure.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\npublic function generateElements()\n{\n    /* ... */\n    if ($result) {\n        /* ... */\n    } else {\n        /* ... */\n        $this->readerPool->interpret($this->getReaderContext(), $this->getNode());\n        /* ... */\n    }\n\n    /* ... */\n    \n    $this->generatorPool->process($this->getReaderContext(), $generatorContext);\n\n    /* ... */\n    \n    $this->addToOutputRootContainers();\n    \\Magento\\Framework\\Profiler::stop(__CLASS__ . '::' . __METHOD__);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Magento Cache Status via CLI Command\nDESCRIPTION: This command displays all Magento cache types and their current status (enabled/disabled). It shows various cache identifiers like config, layout, block_html, and others with their corresponding status values.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-cache.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/magento cache:status\n                        config: 1\n                        layout: 1\n                    block_html: 1\n                   collections: 1\n                    reflection: 1\n                        db_ddl: 1\n                           eav: 1\n         customer_notification: 1\n                     full_page: 0\n            config_integration: 1\n        config_integration_api: 1\n                     translate: 1\n             config_webservice: 1\n```\n\n----------------------------------------\n\nTITLE: Passing Complex Arguments in Magento 2 Layout XML\nDESCRIPTION: This XML snippet shows how to pass more complex arguments, including arrays and objects, to a block in Magento 2 layout XML.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-2-layout-xml.md#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<arguments>\n    <argument name=\"the_message\" xsi:type=\"string\">Hello World</argument>\n    <argument name=\"the_array\" xsi:type=\"array\">\n        <item name=\"key\" xsi:type=\"string\">value</item>\n        <item name=\"foo\" xsi:type=\"string\">var</item>\n    </argument>\n</arguments>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<arguments>\n    <!-- ... -->\n    <argument name=\"the_object\" xsi:type=\"object\">Pulsestorm\\Nofrillslayout\\Chapter2\\Example</argument>                \n</arguments>\n```\n\n----------------------------------------\n\nTITLE: Returning a Result Page Object in Magento 2 Controller\nDESCRIPTION: A controller execute method that creates and returns a Result Page object instead of directly outputting HTML. This is the recommended approach for Magento 2 controllers.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-3-layouthandles.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function execute()\n{\n    $pageObject = $this->resultPageFactory->create();\n    return $pageObject;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RequireJS in Magento 2 modules\nDESCRIPTION: This snippet demonstrates how individual Magento 2 modules can configure RequireJS using the require.config method in their requirejs-config.js files.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-8-frontend-javascript.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n(function(require){\n(function() {\n/**\n * Copyright © 2016 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nvar config = {\n    /* ... */\n};\n\nrequire.config(config);\n})();\n```\n\n----------------------------------------\n\nTITLE: Programmatic Area Code Detection in PHP\nDESCRIPTION: PHP code demonstrating how to programmatically determine the current Magento 2 area using dependency injection and the App\\State class.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-areas.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct(\n    \\Magento\\Framework\\App\\State $appState\n)\n{\n    $this->appState = $appState;\n}\n/* ... */\npublic function someMethod()\n{\n    var_dump(\n        $this->appState->getAreaCode()\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Container and Adding Block in Magento 2 Layout XML\nDESCRIPTION: XML snippet demonstrating how to reference an existing container ('content') and add a text block to it with arguments. This is a common pattern for adding content to Magento pages.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-3-layouthandles.md#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<referenceContainer name=\"content\">\n    <block  name=\"pulsestorm_nofrills_chapter3_text\"\n            class=\"Magento\\Framework\\View\\Element\\Text\">\n        <arguments>\n            <argument name=\"text\" xsi:type=\"string\">This is a test.</argument>\n        </arguments>\n    </block>        \n</referenceContainer>\n```\n\n----------------------------------------\n\nTITLE: Complex Action Method in Magento Controller\nDESCRIPTION: Controller action that loads an XML layout file, creates the layout structure, adds a text block programmatically, and renders the output. Shows how to interact with blocks after generateBlocks is called.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function complexAction()\n{\t\t\n\t$layout = Mage::getSingleton('core/layout');\n\t$path\t= Mage::getModuleDir('', 'Nofrills_Booklayout') . DS . \n\t'page-layouts' . DS . 'complex.xml';\n\t$xml = simplexml_load_file($path,\n\tMage::getConfig()->getModelClassName('core/layout_element'));\n\t$layout->setXml($xml);\n\n\t$text = $layout->createBlock('core/text','foxxy')\n\t->setText(\"The quick brown fox jumped over the lazy dog.\");\n\t\n\t$layout->generateBlocks();\t\t\n\t$layout->getBlock('content')->insert($text);\n\t\n\techo $layout->setDirectOutput(true)->getOutput();\t\t\t\t\t\t\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript to Magento Layout XML\nDESCRIPTION: Shows how to add a JavaScript file to a Magento 2 layout XML file using the <script/> tag in the <head/> section. This allows Magento to properly handle the static content deployment and URL generation.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-8-frontend-javascript.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\">\n    <head>\n        <!-- ... -->\n        <script src=\"Pulsestorm_Nofrillslayout::chapter-8/example-script.js\"/>             \n        \n        <!-- alternate <link/> syntax for the same thing -->            \n        <!-- <link src=\"Pulsestorm_Nofrillslayout::chapter-8/example-script.js\"/>              -->\n        <!-- ... -->\n    </head>\n</page>\n```\n\n----------------------------------------\n\nTITLE: Merging Layout Handles in Magento 2\nDESCRIPTION: The _merge method from Magento\\Framework\\View\\Model\\Layout\\Merge that processes individual layout handles, fetching updates from package and database sources while preventing cyclic dependencies.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n#File: vendor/magento/framework/View/Model/Layout/Merge.php\nprotected function _merge($handle)\n{\n    if (!isset($this->allHandles[$handle])) {\n        $this->allHandles[$handle] = $this->handleProcessing;\n        $this->_fetchPackageLayoutUpdates($handle);\n        $this->_fetchDbLayoutUpdates($handle);\n        $this->allHandles[$handle] = $this->handleProcessed;\n    } elseif ($this->allHandles[$handle] == $this->handleProcessing\n        && $this->appState->getMode() === \\Magento\\Framework\\App\\State::MODE_DEVELOPER\n    ) {\n        $this->logger->info('Cyclic dependency in merged layout for handle: ' . $handle);\n    }\n    return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Structure of Page Layout XML File in Magento 2\nDESCRIPTION: Shows the basic structure of a page layout XML file in Magento 2, with the required page tag, schema reference, and body section where all layout update XML should be placed.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-3-layouthandles.md#2025-04-18_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<page xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\" layout=\"1column\">\n    <body>\n        <!-- ... -->\n    </body>\n</page>\n```\n\n----------------------------------------\n\nTITLE: Initializing RequireJS modules using data-mage-init attributes\nDESCRIPTION: This snippet shows how to use data-mage-init attributes on HTML elements to initialize RequireJS modules in Magento 2, passing configuration as a JSON object.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-8-frontend-javascript.md#2025-04-18_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<ul id=\"main-dropdown\" class=\"dropdown switcher-dropdown\" \n    data-mage-init='{\"dropdownDialog\":{\n        \"appendTo\":\"#switcher-currency > .options\",\n        \"triggerTarget\":\"#switcher-currency-trigger\",\n        \"closeOnMouseLeave\": false,\n        \"triggerClass\":\"active\",\n        \"parentClass\":\"active\",\n        \"buttons\":null}}'>\n```\n\n----------------------------------------\n\nTITLE: Parent-Child Block Relationship in Magento Layout XML\nDESCRIPTION: Demonstrates how to configure nested blocks to create parent-child relationships using layout XML.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-2-layout-xml.md#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<referenceContainer name=\"top\">\n    <block \n        class=\"Magento\\Framework\\View\\Element\\Template\" \n        name=\"pulsestorm_nofrills_chapter2_parent\"\n        template=\"Pulsestorm_Nofrillslayout::chapter2/parent.phtml\">                  \n            <block \n                class=\"Magento\\Framework\\View\\Element\\Template\" \n                name=\"pulsestorm_nofrills_chapter2_child\"\n                template=\"Pulsestorm_Nofrillslayout::chapter2/child.phtml\">                  \n            </block>        \n    </block>    \n</referenceContainer>\n```\n\n----------------------------------------\n\nTITLE: Adding Reader Objects to NodeReaders Array in Magento\nDESCRIPTION: Method that indexes reader objects by the node names they support. This allows the ReaderPool to quickly find the appropriate reader for each node type.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_16\n\nLANGUAGE: php\nCODE:\n```\npublic function addReader(Layout\\ReaderInterface $reader)\n{\n    foreach ($reader->getSupportedNodes() as $nodeName) {\n        $this->nodeReaders[$nodeName] = $reader;\n    }\n    return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Block to a Container in Magento Layout XML\nDESCRIPTION: Demonstrates adding a new template block to a container. This block uses Magento's base Template class and references a theme template file.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-5-themes.md#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<block  name=\"pulsestorm_magento_catalog_category_view_example\"\n        class=\"Magento\\Framework\\View\\Element\\Template\"\n        template=\"hello.phtml\"/>\n```\n\n----------------------------------------\n\nTITLE: YouTube Widget PHP Block Class\nDESCRIPTION: PHP class for a Magento YouTube widget block that extends the core template block and implements the widget interface, allowing it to be used as a widget in the system.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/7_widgets.markdown#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Nofrills_Booklayout_Block_Youtube extends Mage_Core_Block_Template\n    implements Mage_Widget_Block_Interface\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Magento 2 Theme XML Declaration\nDESCRIPTION: This XML file defines the theme's metadata including its title, parent theme, and optional preview image. The theme inherits from Magento's Luma theme, allowing it to extend all Luma's functionality while providing customization points.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-5-themes.md#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<theme xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Config/etc/theme.xsd\">\n    <title>Pulsestorm Dram</title>\n    <parent>Magento/luma</parent>\n    <media>\n        <preview_image/>\n    </media>\n</theme>\n```\n\n----------------------------------------\n\nTITLE: Generating Block Elements in Magento 2 Layout\nDESCRIPTION: The Block generator's method for creating block objects from layout definitions. This method instantiates block classes, sets templates and other attributes, and connects blocks to the structure object.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nprotected function generateBlock(\n    Layout\\ScheduledStructure $scheduledStructure,\n    Layout\\Data\\Structure $structure,\n    $elementName\n) {\n    list(, $data) = $scheduledStructure->getElement($elementName);\n    $attributes = $data['attributes'];\n\n    if (!empty($attributes['group'])) {\n        $structure->addToParentGroup($elementName, $attributes['group']);\n    }\n    if (!empty($attributes['display'])) {\n        $structure->setAttribute($elementName, 'display', $attributes['display']);\n    }\n\n    // create block\n    $className = $attributes['class'];\n    $block = $this->createBlock($className, $elementName, [\n        'data' => $this->evaluateArguments($data['arguments'])\n    ]);\n    if (!empty($attributes['template'])) {\n        $block->setTemplate($attributes['template']);\n    }\n    if (!empty($attributes['ttl'])) {\n        $ttl = (int)$attributes['ttl'];\n        $block->setTtl($ttl);\n    }\n    return $block;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CSS, Link, and Script Tags in Magento Layout XML\nDESCRIPTION: Shows various ways to add CSS, link, and JavaScript files to Magento pages, including support for LessCSS files and different source types.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-9-frontend-advanced-topics.md#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<head>\n    <css src=\"path/to/file.css\"/>\n    <css src=\"path/to/file.less\"/>\n</head>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<head>\n    <link src=\"path/to/file.xxx\" />\n</head>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<head>\n    <script src=\"path/to/file.js\" />\n</head>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<script src=\"path/to/file.js\" />\n<script src=\"Package_Module::path/to/file.js\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<script src=\"https://example.com/path/to/file.js\" src_type=\"url\" />\n<css src=\"https://example.com/path/to/file.js\"    src_type=\"url\" />\n<link src=\"https://example.com/path/to/file.js\"   src_type=\"url\"  />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<css src=\"css/styles-l.css\" media=\"screen and (min-width: 768px)\"/>\n```\n\nLANGUAGE: html\nCODE:\n```\n<link  rel=\"stylesheet\"\n       type=\"text/css\"\n       media=\"screen and (min-width: 768px)\"\n       href=\"http://magento.example...css/styles-l.css\" />\n```\n\n----------------------------------------\n\nTITLE: Deploying Static Content for Production\nDESCRIPTION: The Magento CLI command used to deploy all static content for a production environment. This process compiles and places all frontend assets in the pub/static directory structure.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/_url_writing.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/magento setup:static-content:deploy\n```\n\n----------------------------------------\n\nTITLE: Default Base Layout XML Structure in Magento\nDESCRIPTION: This XML snippet from Magento's base page.xml file demonstrates the default layout structure. It shows how the root block is defined with the output='toHtml' attribute and includes JS resource loading actions.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/3_package_layout.markdown#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- #File: app/design/frontend/base/default/layout/page.xml -->\n<default translate=\"label\" module=\"page\">\n    <label>All Pages</label>\n    <block type=\"page/html\" name=\"root\" output=\"toHtml\"\n    template=\"page/3columns.phtml\">\n\n        <block type=\"page/html_head\" name=\"head\" as=\"head\">           \n            <action method=\"addJs\">\n            \t<script>prototype/prototype.js</script>\n            </action>\n            <action method=\"addJs\" ifconfig=\"dev/js/deprecation\">\n            \t<script>prototype/deprecation.js</script>\n            </action>\n            <action method=\"addJs\">\n            \t<script>lib/ccard.js</script>\n            </action>\n\t\t\t...\n```\n\n----------------------------------------\n\nTITLE: Initializing RequireJS modules using x-magento-init script tags\nDESCRIPTION: This snippet demonstrates how to use x-magento-init script tags to initialize RequireJS modules in Magento 2, passing configuration as a JSON object.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-8-frontend-javascript.md#2025-04-18_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/x-magento-init\">\n    {\n        \"*\": {\n            \"mage/cookies\": {\n                \"expires\": null,\n                \"path\": \"/\",\n                \"domain\": \".magento.example.com\",\n                \"secure\": false,\n                \"lifetime\": \"3600\"\n            }\n        }\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Layout XML in Magento 2 CMS Helper\nDESCRIPTION: A code snippet from Magento 2's CMS Page Helper showing how layout updates are accessed and applied, demonstrating the potential risks of interacting directly with layout objects which may lead to unintended behavior.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_63\n\nLANGUAGE: PHP\nCODE:\n```\nif ($this->_page->getCustomLayoutUpdateXml() && $inRange) {\n    $layoutUpdate = $this->_page->getCustomLayoutUpdateXml();\n} else {\n    $layoutUpdate = $this->_page->getLayoutUpdateXml();\n}\nif (!empty($layoutUpdate)) {\n    $resultPage->getLayout()->getUpdate()->addUpdate($layoutUpdate);\n}\n\n$contentHeadingBlock = $resultPage->getLayout()->getBlock('page_content_heading');\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Widget Form Element Block Class in Magento PHP\nDESCRIPTION: Implementation of a helper block class for rendering a custom widget form element. The prepareElementHtml method modifies a form element to create a custom UI component while maintaining proper form functionality.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/h_widget_field_rendering_options.markdown#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n#File: app/code/local/Yourpackage/Yourmodule/Block/Widgettest.php\nclass Yourpackage_Yourmodule_Block_Widgettest extends Mage_Core_Block_Abstract\n{\n\t/**\n\t* Overly simple example\n\t*/\t\n\tpublic function prepareElementHtml(\n\tVarien_Data_Form_Element_Abstract $element)\n\t{\n\t\t$simple_input = '<input type=\"text\" name=\"' . \n\t\tstrip_tags($element->getName()) . \n\t\t'\" value=\"' . \n\t\tstrip_tags($element->getValue()).\n\t\t'\"/>';\n\t\t\n        $element->setData('after_element_html', $simple_input);\t\t\t\n        \n        $element->setValue(''); //blank out value\n\t\treturn $element;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Block References in Magento Layout XML Processing\nDESCRIPTION: This method from the Block reader handles XML block references by either marking elements for removal or updating their data in the ScheduledStructure. It merges attributes and evaluates arguments from the XML elements.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function scheduleReference(\n    Layout\\ScheduledStructure $scheduledStructure,\n    Layout\\Element $currentElement\n) {\n    $elementName = $currentElement->getAttribute('name');\n    $elementRemove = filter_var($currentElement->getAttribute('remove'), FILTER_VALIDATE_BOOLEAN);\n    if ($elementRemove) {\n        $scheduledStructure->setElementToRemoveList($elementName);\n    } else {\n        $data = $scheduledStructure->getStructureElementData($elementName, []);\n        $data['attributes'] = $this->mergeBlockAttributes($data, $currentElement);\n        $this->updateScheduledData($currentElement, $data);\n        $this->evaluateArguments($currentElement, $data);\n        $scheduledStructure->setStructureElementData($elementName, $data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining module dependencies in Magento 2 RequireJS configuration\nDESCRIPTION: These snippets show how Magento 2 defines module dependencies for both frontend and adminhtml areas using the 'deps' key in RequireJS configuration.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-8-frontend-javascript.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {    \n    deps: [\n        \"jquery/jquery.mobile.custom\",\n        \"js/responsive\",\n        \"mage/common\",\n        \"mage/dataPost\",\n        \"js/theme\",\n        \"mage/bootstrap\"\n    ]    \n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    \"deps\": [\n        \"js/theme\",\n        \"mage/backend/bootstrap\",\n        \"mage/adminhtml/globals\"\n    ],    \n};\n```\n\n----------------------------------------\n\nTITLE: Running Static Content Deployment in Magento for LessCSS Preprocessing\nDESCRIPTION: Command to run the static content deployment process that generates CSS files from LessCSS files for production environments. This command scans layout handle XML files for CSS directives and preprocesses them.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/magento setup:static-content:deploy\n```\n\n----------------------------------------\n\nTITLE: Cleaning Specific Magento Cache Types via CLI Command\nDESCRIPTION: This command cleans all Magento's main cache types. It's the recommended approach for clearing caches during development as it works regardless of whether the cache is stored on disk or in memory solutions like Redis.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-cache.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/magento cache:clean\n```\n\n----------------------------------------\n\nTITLE: Example Class Using Magento's Constructor Dependency Injection\nDESCRIPTION: Shows how dependencies are declared in a Magento 2 class constructor, which allows Magento's automatic dependency injection system to instantiate and provide them.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-di.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass SomeClass\n{\n    public function __construct(\n        \\Some\\Other\\Class $someOtherClass,\n        \\Another\\Class $anotherClass\n    )\n    {\n        $this->someOtherClass = $someOtherClass;\n        $this->anotherClass   = $anotherClass;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Arguments in Magento 2 Layout XML\nDESCRIPTION: This snippet demonstrates how to define arguments in a Magento 2 layout XML file. It shows how to pass a string argument to a block and set up the block's template.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-2-layout-xml.md#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<referenceContainer name=\"top\">\n    <block \n        class=\"Magento\\Framework\\View\\Element\\Template\" \n        name=\"pulsestorm_nofrills_chapter2_hello_argument\"\n        template=\"Pulsestorm_Nofrillslayout::chapter2/user/hello-argument.phtml\">                  \n            <arguments>\n                <argument name=\"the_message\" xsi:type=\"string\">Hello World</argument>\n            </arguments>\n    </block> \n</referenceContainer>\n```\n\n----------------------------------------\n\nTITLE: Rendering CMS Pages in Magento Helper (PHP)\nDESCRIPTION: The renderPage and _renderPage methods in the Mage_Cms_Helper_Page class handle the actual rendering of CMS pages, including loading layout updates and generating layout blocks.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/6_cms_page.markdown#2025-04-18_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass Mage_Cms_Helper_Page extends Mage_Core_Helper_Abstract\n{\n    public function renderPage(Mage_Core_Controller_Front_Action $action,\n    $pageId = null)\n    {\n        return $this->_renderPage($action, $pageId);\n    }\t\n\n    ...\n    \n    protected function _renderPage(\n        Mage_Core_Controller_Varien_Action  $action, $pageId = null,\n        $renderLayout = true)\n    {\t\t\n        ...\n\n        $action->loadLayoutUpdates();\n        $layoutUpdate = ($page->getCustomLayoutUpdateXml() && $inRange) \n        ? $page->getCustomLayoutUpdateXml() : $page->getLayoutUpdateXml();\n        $action->getLayout()->getUpdate()->addUpdate($layoutUpdate);\n        $action->generateLayoutXml()->generateLayoutBlocks();\t\t\t\n\n        ...\n        \n        if ($renderLayout) {\n            $action->renderLayout();\n        }\n        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Form Element with Helper Block in Magento XML\nDESCRIPTION: Setting up a custom form element for a widget parameter using a helper block. This approach allows for complex, interactive form elements beyond what's provided by Magento's standard field types.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/h_widget_field_rendering_options.markdown#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<our_parameter>\n\t<visible>1</visible>\n\t<required>1</required>\n\t<label>Should I Stay or Should I Go?</label>\n\t<type>label</type>\n\t<helper_block>\n\t\t<type>yourpackage_yourmodule/widgettest</type>\t\t\t\t\n\t</helper_block>\n\t<sort_order>10</sort_order>\n\t<description>This is the field where you'll put the synergy.</description>\t\t\t\n</our_parameter>\n```\n\n----------------------------------------\n\nTITLE: Removing Blocks in Magento Layout XML (XML)\nDESCRIPTION: Demonstrates how to use the <remove> directive in Magento layout XML to remove a block (in this case, the sidebar) from the page layout.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<reference name=\"content\">\n\t<block type=\"core/text\" name=\"our_message\">\n\t\t<action method=\"setText\"><text>\n\t\t\tSidebar?  We don't need a sidebar!\n\t\t</text></action>\n\t</block>\n</reference>\n\n<remove name=\"sidebar\" />\n```\n\n----------------------------------------\n\nTITLE: Checking Full Action Name in Magento 2 Controller\nDESCRIPTION: Code snippet to display the full action name of the current request within a controller's execute method. Useful for debugging and identifying the correct layout handle name for a specific page.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-3-layouthandles.md#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n#File: app/code/Pulsestorm/Nofrillslayout/Controller/Chapter3/Index.php\npublic function execute()\n{\n    var_dump($this->getRequest()->getFullActionName());\n}\n```\n\n----------------------------------------\n\nTITLE: Examining the .htaccess Configuration for Static Asset Routing in Apache\nDESCRIPTION: This code snippet from Magento's pub/static/.htaccess file handles URL rewriting for static assets. It strips the version slug from URLs and routes requests for non-existent files to static.php, which dynamically generates the requested assets.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/_url_writing.md#2025-04-18_snippet_0\n\nLANGUAGE: apache\nCODE:\n```\n<IfModule mod_rewrite.c>\n    RewriteEngine On\n\n    # Remove signature of the static files that is used to overcome the browser cache\n    RewriteRule ^version.+?/(.+)$ $1 [L]\n\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME} !-l\n\n    RewriteRule .* ../static.php?resource=$0 [L]\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: RequireJS jQuery Module Usage\nDESCRIPTION: An example showing how to use jQuery within Magento 2's RequireJS framework. This demonstrates how to include the jQuery module as a dependency and use it within the program function.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-8-frontend-javascript.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['jquery'], function(jqueryModule){\n    //the jquery module returns the object we normally\n    //think about as the global jQuery/$ obejct\n    var body = jqueryModule('body')[0];\n    jqueryModule(body).html('<p>Hello jQuery</p>')\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Layout Handle XML File in Magento 2\nDESCRIPTION: XML file that defines a custom layout handle with a one-column layout. This file is loaded by Magento when the corresponding handle is added to a page object.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-3-layouthandles.md#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<page xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\" layout=\"1column\">        \n</page>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Layout XML for Category View in Magento 2 Theme\nDESCRIPTION: This custom layout handle XML file extends the catalog_category_view layout from the Magento_Catalog module. It adds a custom block to the content container that will render a template file. This demonstrates how themes can add to existing module layouts.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-5-themes.md#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\">\n    <body>\n        <referenceContainer name=\"content\">\n            <block  name=\"pulsestorm_magento_catalog_category_view_example\"\n                    class=\"Magento\\Framework\\View\\Element\\Template\"\n                    template=\"hello.phtml\"/>\n        </referenceContainer>\n    </body>\n</page>\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title in Magento Layout XML\nDESCRIPTION: Shows how to set the HTML title element content using the <title/> tag in Magento layout XML.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-9-frontend-advanced-topics.md#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<head>\n    <title>Ten Reasons Magento 2 isn't Right for your Business</title>\n</head>\n```\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <title>Ten Reasons Magento 2 isn't Right for your Business</title>\n    </head>\n    <body>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Editing LessCSS Files in Magento Development Environment\nDESCRIPTION: Example of editing a LessCSS file in a Magento development environment, showing how to modify color variables. This demonstrates the basic usage of LessCSS variables in Magento themes.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_12\n\nLANGUAGE: less\nCODE:\n```\n#File: app/code/Pulsestorm/Nofrillslayout/view/frontend/web/chapter-7/example-2.less\n@myBlue: #00a;\nbody {\n    background-color:@myBlue;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Component Registration PHP File for Magento 2 Theme\nDESCRIPTION: This snippet shows how to register a custom theme in Magento 2 using the ComponentRegistrar class. The registration.php file is required for all Magento components, identifying this as a THEME component with the identifier 'frontend/Pulsestorm/dram'.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-5-themes.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    \\Magento\\Framework\\Component\\ComponentRegistrar::register(\n        \\Magento\\Framework\\Component\\ComponentRegistrar::THEME,\n        'frontend/Pulsestorm/dram',\n        __DIR__\n    );\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Dropdown Widget Parameter with Source Model in Magento XML\nDESCRIPTION: Using a source model to populate a select dropdown widget parameter. The source model provides the option values dynamically instead of defining them inline in the XML.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/h_widget_field_rendering_options.markdown#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<parameters>\n\t<our_parameter>\n\t\t<visible>1</visible>\n\t\t<required>1</required>\n\t\t<label>Should I Stay or Should I Go?</label>\n\t\t<type>select</type>\n\t\t<value>stay</value>\n\t\t<source_model>adminhtml/system_config_source_yesno</source_model>\n\t\t<sort_order>10</sort_order>\n\t</our_parameter>\n</parameters>\n```\n\n----------------------------------------\n\nTITLE: Basic RequireJS Hello World Example\nDESCRIPTION: A simple RequireJS example with no dependencies. This demonstrates the basic structure of a RequireJS program in Magento 2, with an empty dependency array and a function containing the program code.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-8-frontend-javascript.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire([], function(){\n    alert(\"Hello RequireJS\");\n});\n```\n\n----------------------------------------\n\nTITLE: Processing Page Assets in Magento Head Element Reader\nDESCRIPTION: This snippet shows how the Head XML reader interprets page assets by adding them to the PageConfigStructure. This method processes the <head> section of layout XML files to configure front-end assets like CSS and JavaScript files.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\npublic function interpret(\n    Layout\\Reader\\Context $readerContext,\n    Layout\\Element $headElement\n) {\n    $pageConfigStructure = $readerContext->getPageConfigStructure();\n    /* ... */\n    $pageConfigStructure->addAssets($node->getAttribute('src'), \n        $this->getAttributes($node));\n    /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asset Repository in a Magento Block\nDESCRIPTION: This snippet shows how to modify a block class to access the Asset Repository through the Context object. It demonstrates how to properly inject the context and access the repository in a Magento 2 block.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-9-frontend-advanced-topics.md#2025-04-18_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Pulsestorm\\Nofrillslayout\\Block;\nclass Head extends \\Magento\\Framework\\View\\Element\\Template\n{\n    public $assetRepository;\n    public function __construct(\n        \\Magento\\Framework\\View\\Element\\Template\\Context $context,\n        array $data = []\n    )\n    {\n        $this->assetRepository = $context->getAssetRepository();\n        return parent::__construct($context, $data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CSS via Layout XML in Magento 2\nDESCRIPTION: Example of how to add a CSS file to Magento 2 by creating a layout handle XML file that includes a <css> node in the <head> section.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\">\n    <head>\n        <css src=\"Pulsestorm_Nofrillslayout::chapter-7/example.css\"/>\n    </head>\n</page>\n```\n\n----------------------------------------\n\nTITLE: Page Rendering in Magento 2 Result Page\nDESCRIPTION: The render method from Magento\\Framework\\View\\Result\\Page that coordinates the final page rendering process. It builds the page configuration, assigns view variables, and outputs the rendered content.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n#File: vendor/magento/framework/View/Result/Page.php\nprotected function render(ResponseInterface $response)\n{\n    $this->pageConfig->publicBuild();\n    if ($this->getPageLayout()) {\n        $config = $this->getConfig();\n        $this->addDefaultBodyClasses();\n        $addBlock = $this->getLayout()->getBlock('head.additional'); // todo\n        $requireJs = $this->getLayout()->getBlock('require.js');\n        $this->assign([\n            'requireJs' => $requireJs ? $requireJs->toHtml() : null,\n            'headContent' => $this->pageConfigRenderer->renderHeadContent(),\n            'headAdditional' => $addBlock ? $addBlock->toHtml() : null,\n            'htmlAttributes' => $this->pageConfigRenderer->renderElementAttributes($config::ELEMENT_TYPE_HTML),\n            'headAttributes' => $this->pageConfigRenderer->renderElementAttributes($config::ELEMENT_TYPE_HEAD),\n            'bodyAttributes' => $this->pageConfigRenderer->renderElementAttributes($config::ELEMENT_TYPE_BODY),\n            'loaderIcon' => $this->getViewFileUrl('images/loader-2.gif'),\n        ]);\n\n        $output = $this->getLayout()->getOutput();\n        $this->assign('layoutContent', $output);\n        $output = $this->renderPage();\n        $this->translateInline->processResponseBody($output);\n        $response->appendBody($output);\n    } else {\n        parent::render($response);\n    }\n    return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Layout XML Container Definition\nDESCRIPTION: Example of defining a container using Magento's XML layout DSL.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-2-layout-xml.md#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<container name=\"top\" label=\"The top level container\"></container>\n```\n\n----------------------------------------\n\nTITLE: Creating a Widget-Specific LessCSS File for Magento Import\nDESCRIPTION: Example of a widget-specific LessCSS file that follows Magento's naming conventions to be automatically imported via the @magento_import directive. This file defines custom CSS rules for widgets.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_19\n\nLANGUAGE: less\nCODE:\n```\n#File: app/code/Pulsestorm/Nofrillslayout/view/frontend/web/css/source/widgets.less    \n#someWeirdRuleInWidget{\n    color:#fff;\n}\n```\n\n----------------------------------------\n\nTITLE: Magento Layout XML Update for Adding Content Block (XML)\nDESCRIPTION: XML update file that adds a text block to the content reference. This demonstrates how to add new blocks to the layout using XML updates.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<reference name=\"content\">\n\t<block type=\"core/text\" name=\"our_message\">\n\t\t<action method=\"setText\"><text>\n\t\t\tMagento is a foxy system.\n\t\t</text></action>\n\t</block>\n</reference>\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello Updates Action in Magento Controller\nDESCRIPTION: Controller action that demonstrates how to use the Layout Update Manager to add XML updates programmatically. This method creates a layout object, adds a simple hello world block update, and renders the output.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n#http://magento.example.com/nofrills_booklayout/update/helloUpdates\npublic function helloUpdatesAction()\n{\n\t$layout \t\t= Mage::getSingleton('core/layout');\n\t$update_manager = $layout->getUpdate();\t\t\t\n\t$update_manager->addUpdate( '<block\n\ttype=\"nofrills_booklayout/helloworld\" \n\tname=\"root\" \n\toutput=\"toHtml\" />');\t\t\t\n\t$layout->generateXml();\n\t$layout->generateBlocks();\t\t\t\n\techo $layout->setDirectOutput(true)->getOutput();\t\t\t\t\t\t\t\t\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Autoloading for Magento 2 Components\nDESCRIPTION: This JSON snippet from a composer.json file demonstrates how to configure Composer's autoloading feature for Magento 2 components. It specifies the registration.php file to be autoloaded, which is crucial for component registration.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-components.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"autoload\": {\n        \"files\": [\n            \"registration.php\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RequireJS modules using x-magento-init with selectors\nDESCRIPTION: This snippet demonstrates how to use x-magento-init script tags with jQuery/CSS selectors to initialize RequireJS modules for specific DOM elements in Magento 2.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-8-frontend-javascript.md#2025-04-18_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"x-magento-init\">\n    {\n        \".switcher-dropdown\":{\n            \"dropdownDialog\":{\n                \"appendTo\":\"#switcher-currency > .options\",\n                \"triggerTarget\":\"#switcher-currency-trigger\",\n                \"closeOnMouseLeave\": false,\n                \"triggerClass\":\"active\",\n                \"parentClass\":\"active\",\n                \"buttons\":null                \n            }\n        }\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Resource Handling in Magento\nDESCRIPTION: This snippet from StaticResource.php shows the launch method that handles static resource requests. It checks for production mode, parses resource paths, creates and publishes assets, and returns the appropriate response.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/_url_writing.md#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function launch()\n{\n    // disabling profiling when retrieving static resource\n    \\Magento\\Framework\\Profiler::reset();\n    $appMode = $this->state->getMode();\n    if ($appMode == \\Magento\\Framework\\App\\State::MODE_PRODUCTION) {\n        $this->response->setHttpResponseCode(404);\n    } else {\n        $path = $this->request->get('resource');\n        $params = $this->parsePath($path);\n        $this->state->setAreaCode($params['area']);\n        $this->objectManager->configure($this->configLoader->load($params['area']));\n        $file = $params['file'];\n        unset($params['file']);\n        $asset = $this->assetRepo->createAsset($file, $params);\n        $this->response->setFilePath($asset->getSourceFile());\n        $this->publisher->publish($asset);\n    }\n    return $this->response;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Product Attribute Template in Theme\nDESCRIPTION: A modified version of the product attribute template that adds custom text. This demonstrates how to override a core template file by placing it in the appropriate theme directory with the same relative path.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-5-themes.md#2025-04-18_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Copyright © 2016 Magento. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n// @codingStandardsIgnoreFile\n\n/**\n * Product view template\n *\n * @see \\Magento\\Catalog\\Block\\Product\\View\\Description\n */\n?>\n<?php\n$_helper = $this->helper('Magento\\Catalog\\Helper\\Output');\n$_product = $block->getProduct();\n$_call = $block->getAtCall();\n$_code = $block->getAtCode();\n$_className = $block->getCssClass();\n$_attributeLabel = $block->getAtLabel();\n$_attributeType = $block->getAtType();\n$_attributeAddAttribute = $block->getAddAttribute();\n\nif ($_attributeLabel && $_attributeLabel == 'default') {\n    $_attributeLabel = $_product->getResource()->getAttribute($_code)->getFrontendLabel();\n}\nif ($_attributeType && $_attributeType == 'text') {\n    $_attributeValue = ($_helper->productAttribute($_product, $_product->$_call(), $_code)) ? $_product->getAttributeText($_code) : '';\n} else {\n    $_attributeValue = $_helper->productAttribute($_product, $_product->$_call(), $_code);\n}\n?>\n\n<?php if ($_attributeValue): ?>\n<div class=\"product attribute <?php /* @escapeNotVerified */ echo $_className?>\">\n    <h2>This is an attribute: </h2>\n    <?php if ($_attributeLabel != 'none'): ?><strong class=\"type\"><?php /* @escapeNotVerified */ echo $_attributeLabel?></strong><?php endif; ?>\n    <div class=\"value\" <?php /* @escapeNotVerified */ echo $_attributeAddAttribute;?>><?php /* @escapeNotVerified */ echo $_attributeValue; ?></div>\n</div>\n<?php endif; ?>\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Methods in Varien_Object Class (PHP)\nDESCRIPTION: This code snippet shows the implementation of magic methods (__call) in the Varien_Object class, handling get, set, uns, and has operations on object data.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/g_appendix_setters_and_getters.markdown#2025-04-18_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __call($method, $args)\n{\n    switch (substr($method, 0, 3)) {\n        case 'get' :\n            //Varien_Profiler::start('GETTER: '.get_class($this).'::'.$method);\n            $key = $this->_underscore(substr($method,3));\n            $data = $this->getData($key, isset($args[0]) ? $args[0] : null);\n            //Varien_Profiler::stop('GETTER: '.get_class($this).'::'.$method);\n            return $data;\n\n        case 'set' :\n            //Varien_Profiler::start('SETTER: '.get_class($this).'::'.$method);\n            $key = $this->_underscore(substr($method,3));\n            $result = $this->setData($key, isset($args[0]) ? $args[0] : null);\n            //Varien_Profiler::stop('SETTER: '.get_class($this).'::'.$method);\n            return $result;\n\n        case 'uns' :\n            //Varien_Profiler::start('UNS: '.get_class($this).'::'.$method);\n            $key = $this->_underscore(substr($method,3));\n            $result = $this->unsetData($key);\n            //Varien_Profiler::stop('UNS: '.get_class($this).'::'.$method);\n            return $result;\n\n        case 'has' :\n            //Varien_Profiler::start('HAS: '.get_class($this).'::'.$method);\n            $key = $this->_underscore(substr($method,3));\n            //Varien_Profiler::stop('HAS: '.get_class($this).'::'.$method);\n            return isset($this->_data[$key]);\n    }\n    throw new Varien_Exception(\"Invalid method \" . get_class($this) . \"::\" . \n    $method.\"(\".print_r($args,1).\")\");\n}\n```\n\n----------------------------------------\n\nTITLE: Magento 2 Interface Preference Configuration in di.xml\nDESCRIPTION: Shows how Magento 2 configures which concrete implementation to use when an interface is requested in a constructor, using the preference tag in di.xml configuration files.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-di.md#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n#File: vendor/magento/module-catalog/etc/adminhtml/di.xml\n<preference \n    for=\"Magento\\Catalog\\Model\\Locator\\LocatorInterface\" \n    type=\"Magento\\Catalog\\Model\\Locator\\RegistryLocator\"/>\n```\n\n----------------------------------------\n\nTITLE: Finding Magento Theme Module-Specific LessCSS Files\nDESCRIPTION: Command to find all module-specific LessCSS files in the Luma theme that would be imported via the @magento_import directive. This shows how theme styling is organized across multiple modules.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ find vendor/magento/ -wholename '*theme-frontend-luma*web/css/source/_module.less*'\nvendor/magento//theme-frontend-luma/Magento_AdvancedCheckout/web/css/source/_module.less\nvendor/magento//theme-frontend-luma/Magento_AdvancedSearch/web/css/source/_module.less\n//...\nvendor/magento//theme-frontend-luma/Magento_Vault/web/css/source/_module.less\nvendor/magento//theme-frontend-luma/Magento_Wishlist/web/css/source/_module.less\n```\n\n----------------------------------------\n\nTITLE: Layout XML File with Full Action Name Handle\nDESCRIPTION: Complete XML layout file using the full action name handle pattern. Defines a one-column page layout and adds a text block to the content container.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-3-layouthandles.md#2025-04-18_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<!-- File: app/code/Pulsestorm/Nofrillslayout/view/frontend/layout//pulsestorm_nofrillslayout_chapter3_index.xml --> \n<page xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\" layout=\"1column\">\n    <body>\n        <referenceContainer name=\"content\">\n            <block  name=\"pulsestorm_nofrills_chapter3_text\"\n                    class=\"Magento\\Framework\\View\\Element\\Text\">\n                <arguments>\n                    <argument name=\"text\" xsi:type=\"string\">This is a test.</argument>\n                </arguments>\n            </block>        \n        </referenceContainer>\n    </body>\n</page>\n```\n\n----------------------------------------\n\nTITLE: Order Controller Implementation\nDESCRIPTION: Basic Magento controller implementation for handling layout loading and rendering.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/5_advanced_layout_features.markdown#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass Nofrills_Booklayout_OrderController \nextends Mage_Core_Controller_Front_Action\n{\n\tpublic function indexAction()\n\t{\n\t\t$this->loadLayout();\n\t\t$this->renderLayout();\t\t\t\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript and CSS Files in Magento Layout XML\nDESCRIPTION: Shows how to add JavaScript and CSS files to a Magento page via the <head/> section of a layout handle XML file using script and css tags.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-9-frontend-advanced-topics.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<head>\n    <script src=\"Packagename_Modulename::path/to/file.js\"/>\n    <css src=\"Packagename_Modulename::path/to/file.css\"/>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Creating a Module-Specific LessCSS File for Magento Import\nDESCRIPTION: Example of a module-specific LessCSS file that follows Magento's naming conventions to be automatically imported via the @magento_import directive. This file defines custom CSS rules for a module.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_18\n\nLANGUAGE: less\nCODE:\n```\n#File: app/code/Pulsestorm/Nofrillslayout/view/frontend/web/css/source/_module.less    \n#someWeirdRuleInModule{\n    color:#fff;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Magento 2 Theme Component\nDESCRIPTION: This code snippet demonstrates how to register a Magento 2 theme component using the ComponentRegistrar class. It specifies the component type as THEME, provides an identifier, and sets the component's directory.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-components.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\Framework\\Component\\ComponentRegistrar::register(\n    \\Magento\\Framework\\Component\\ComponentRegistrar::THEME,\n    'frontend/Magento/blank',\n    __DIR__\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a LessCSS File in Magento 2\nDESCRIPTION: Example of creating a simple LessCSS file that uses variables to set the background color of the body element, showing where to place it in the module directory structure.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_9\n\nLANGUAGE: less\nCODE:\n```\n@myBlue: #00f;\nbody {\n    background-color:@myBlue;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Both CSS and LessCSS Files via Layout XML\nDESCRIPTION: Extended layout XML example showing how to add both regular CSS and LessCSS files to a Magento 2 page, noting that LessCSS files use the same pattern with .css extension in the src attribute.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\">\n    <head>\n        <css src=\"Pulsestorm_Nofrillslayout::chapter-7/example.css\"/>\n        \n        <!-- START: our new node -->\n        <css src=\"Pulsestorm_Nofrillslayout::chapter-7/example-2.css\"/>\n        <!-- END:   our new node -->\n    </head>\n</page>\n```\n\n----------------------------------------\n\nTITLE: Updated PHP Controller with XML Layout\nDESCRIPTION: Modified controller implementation that uses Magento's XML DSL to create layouts instead of direct PHP methods.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-2-layout-xml.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function execute()\n{\n    $objectManager = $this->getObjectManager();        \n    $layout        = $objectManager->get('Magento\\Framework\\View\\Layout');        \n    \n    $updateManager = $layout->getUpdate();  \n    $updateManager->addUpdate(\n        '<container name=\"top\"></container>'\n    );         \n    \n    $blockOne   = $layout->createBlock(\n        'Magento\\Framework\\View\\Element\\Template',\n        'pulsestorm_nofrills_chapter2_block1'\n    );\n    $blockOne->setTemplate('Pulsestorm_Nofrillslayout::chapter2/block1.phtml');\n    \n    $blockTwo    = $layout->createBlock(\n        'Magento\\Framework\\View\\Element\\Template',\n        'pulsestorm_nofrills_chapter2_block2'\n    );\n    $blockTwo->setTemplate('Pulsestorm_Nofrillslayout::chapter2/block2.phtml');\n                  \n    $structure = $layout->getStructure();\n    $structure->setAsChild('pulsestorm_nofrills_chapter2_block1', 'top');\n    $structure->setAsChild('pulsestorm_nofrills_chapter2_block2', 'top');\n    \n    echo $layout->getOutput();       \n}\n```\n\n----------------------------------------\n\nTITLE: Layout Output Block Method Definition\nDESCRIPTION: Shows the implementation of the addOutputBlock method that handles block output configuration.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function addOutputBlock($blockName, $method='toHtml')\n{\n    //$this->_output[] = array($blockName, $method);\n    $this->_output[$blockName] = array($blockName, $method);\n    return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Magento 2 File Structure for Static Content\nDESCRIPTION: Shows the file structure Magento 2 uses for static content, including the two possible index.php files and the static content directory.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nindex.php\npub/index.php\npub/static\n```\n\n----------------------------------------\n\nTITLE: Real Magento 2 Constructor with Interface Dependency\nDESCRIPTION: Excerpt from a real Magento 2 class showing constructor dependency injection with an interface type hint instead of a concrete class, demonstrating Magento's interface resolution.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-di.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n#File: vendor/magento/module-catalog/Ui/DataProvider/Product/Form/Modifier/Images.php\nuse Magento\\Catalog\\Model\\Locator\\LocatorInterface;\n\n//...\n\npublic function __construct(LocatorInterface $locator)\n{\n    $this->locator = $locator;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Magento 2 Module Component\nDESCRIPTION: This code snippet shows how to register a Magento 2 module component. It uses the ComponentRegistrar class to specify the component type as MODULE, provides the module's identifier, and sets its directory.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-components.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\Framework\\Component\\ComponentRegistrar::register(\n    \\Magento\\Framework\\Component\\ComponentRegistrar::MODULE,\n    'Magento_Catalog',\n    __DIR__\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Meta Tags in Magento Layout XML\nDESCRIPTION: Demonstrates how to add HTML meta tags to a Magento page using the <meta/> directive with name or property attributes.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-9-frontend-advanced-topics.md#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n</head>\n```\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n    </head>\n    <body>\n    </body>\n</html>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<head>\n    <meta property=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Processing Layout with Generator Pool in Magento 2\nDESCRIPTION: The GeneratorPool process method builds the layout structure and then processes each generator to transform the structure into actual blocks and containers. This is a key method in the layout generation process that delegates work to specialized generators.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_27\n\nLANGUAGE: php\nCODE:\n```\npublic function process(Reader\\Context $readerContext, Generator\\Context $generatorContext)\n{\n    $this->buildStructure($readerContext->getScheduledStructure(), $generatorContext->getStructure());\n    foreach ($this->generators as $generator) {\n        $generator->process($readerContext, $generatorContext);\n    }\n    return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Layout Handle XML File with XML Declaration\nDESCRIPTION: Complete custom layout handle XML file including the XML declaration. This file specifies that pages using this handle should use the one-column layout template.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-3-layouthandles.md#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<page xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\" layout=\"1column\">        \n</page>\n```\n\n----------------------------------------\n\nTITLE: Complex Page Layout XML Structure\nDESCRIPTION: Defines a two-column layout structure with a root block, additional head block, sidebar, and content area. Shows how to set templates and nest blocks to create parent-child relationships.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<layout>\t\t\t\n\t<block type=\"nofrills_booklayout/template\" name=\"root\"\n\ttemplate=\"simple-page/2col.phtml\" output=\"toHtml\">\n\t\t<block type=\"nofrills_booklayout/template\" name=\"additional_head\"\n\t\ttemplate=\"simple-page/head.phtml\" />\n\n\t\t<block type=\"nofrills_booklayout/template\" name=\"sidebar\">\n\t\t\t<action method=\"setTemplate\">\n\t\t\t\t<template>simple-page/sidebar.phtml</template>\n\t\t\t</action>\n\t\t</block>\n\n\t\t<block type=\"core/text_list\" name=\"content\" />\n\n\t</block>\n</layout>\n```\n\n----------------------------------------\n\nTITLE: Creating Block in Magento 2 Layout\nDESCRIPTION: This snippet from Magento\\Framework\\View\\Layout shows how blocks are created and assigned a layout, which triggers the _prepareLayout method.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_57\n\nLANGUAGE: php\nCODE:\n```\npublic function createBlock($type, $name = '', array $arguments = [])\n{\n    $this->build();\n    $name = $this->structure->createStructuralElement($name, Element::TYPE_BLOCK, $type);\n    $block = $this->_createBlock($type, $name, $arguments);\n    $block->setLayout($this);\n    return $block;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Layout Handle in Magento XML\nDESCRIPTION: XML snippet showing how a template is applied and an IsHandle flag is set on a block object. This flag prevents multiple handles from setting the root template.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/6_cms_page.markdown#2025-04-18_snippet_13\n\nLANGUAGE: XML\nCODE:\n```\n<action method=\"setIsHandle\"><applied>1</applied></action>\n```\n\n----------------------------------------\n\nTITLE: Building Layout Structure from Scheduled Instructions in Magento\nDESCRIPTION: This comprehensive method transforms scheduled layout instructions into the actual layout structure. It processes element creation, reordering, moving, removing, and conditional inclusion based on configuration flags (ifconfig).\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function buildStructure(ScheduledStructure $scheduledStructure, Data\\Structure $structure)\n{\n    //Schedule all element into nested structure\n    while (false === $scheduledStructure->isStructureEmpty()) {\n        $this->helper->scheduleElement($scheduledStructure, $structure, key($scheduledStructure->getStructure()));\n    }\n    $scheduledStructure->flushPaths();\n    while (false === $scheduledStructure->isListToSortEmpty()) {\n        $this->reorderElements($scheduledStructure, $structure, key($scheduledStructure->getListToSort()));\n    }\n    foreach ($scheduledStructure->getListToMove() as $elementToMove) {\n        $this->moveElementInStructure($scheduledStructure, $structure, $elementToMove);\n    }\n    foreach ($scheduledStructure->getListToRemove() as $elementToRemove) {\n        $this->removeElement($scheduledStructure, $structure, $elementToRemove);\n    }\n    foreach ($scheduledStructure->getIfconfigList() as $elementToCheckConfig) {\n        list($configPath, $scopeType) = $scheduledStructure->getIfconfigElement($elementToCheckConfig);\n        if (!empty($configPath)\n            && !$this->scopeConfig->isSetFlag($configPath, $scopeType, $this->scopeResolver->getScope())\n        ) {\n            $this->removeIfConfigElement($scheduledStructure, $structure, $elementToCheckConfig);\n        }\n    }\n    return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Layout Handle to a Result Page Object\nDESCRIPTION: Enhanced controller execute method that creates a Result Page object and adds a custom layout handle to it. This allows for custom layout configurations to be applied to the page.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-3-layouthandles.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function execute()\n{\n    $pageObject = $this->resultPageFactory->create();\n    $pageObject->addHandle('our_custom_handle');\n    return $pageObject;\n}\n```\n\n----------------------------------------\n\nTITLE: Static Content Deployment Command for Magento 2\nDESCRIPTION: Command used to deploy static content in Magento 2 production environments. This processes all frontend assets from modules and themes.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-9-frontend-advanced-topics.md#2025-04-18_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/magento setup:static-content:deploy\n```\n\n----------------------------------------\n\nTITLE: Flushing Magento Cache Storage via CLI Command\nDESCRIPTION: This command completely flushes Magento's cache storage, removing all cache entries regardless of their type. This is useful when dealing with custom cache entries not cleared by standard cache cleaning.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-cache.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/magento cache:flush\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom RequireJS Module\nDESCRIPTION: An example showing how to define a custom RequireJS module in Magento 2. This demonstrates the module definition syntax with no dependencies and returning a module object with methods.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-8-frontend-javascript.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndefine([], function(){\n    var moduleObject = {};\n    moduleObject.getMessage = function(){\n        return \"Hello RequireJS Custom Module\";\n    };\n    return moduleObject;\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Magento Module and Updating Database\nDESCRIPTION: Commands to enable the Pulsestorm_Nofrillslayout module in Magento and update the database schema.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-install-module.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/magento module:enable Pulsestorm_Nofrillslayout\n//...\nphp bin/magento setup:upgrade\n//...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Layout Files in PHP Controller Action\nDESCRIPTION: A controller action that demonstrates how to retrieve the list of layout files that Magento will load into the Package Layout. It parses the configuration and adds the local.xml file at the end.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/3_package_layout.markdown#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n#URL: http://magento.example.com/nofrills_booklayout/reference/layoutfiles\npublic function layoutfilesAction()\n{\n\t$updatesRoot = Mage::app()->getConfig()->getNode('frontend/layout/updates');\n\t$updateFiles = array();\n\tforeach ($updatesRoot->children() as $updateNode) {\n\t\tif ($updateNode->file) {\n\t\t\t$module = $updateNode->getAttribute('module');\n\t\t\tif ($module && \n\t\t\tMage::getStoreConfigFlag('advanced/modules_disable_output/' .\n\t\t\t$module)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$updateFiles[] = (string)$updateNode->file;\n\t\t}\n\t}\n\t// custom local layout updates file - load always last\n\t$updateFiles[] = 'local.xml';\t\t\n\tvar_dump($updateFiles);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Visible Text Field Widget Parameter in Magento XML\nDESCRIPTION: Configuration for a visible text field parameter that allows users to enter data. It includes a label, default value, and sort order to control positioning in the UI.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/h_widget_field_rendering_options.markdown#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<parameters>\n\t<our_parameter>\n\t\t<visible>1</visible>\n\t\t<required>1</required>\n\t\t<label>Label for our Parameter</label>\n\t\t<type>text</type>\n\t\t<value>bazbarfoo</value>\n\t\t<sort_order>10</sort_order>\n\t</our_parameter>\n</parameters>\n```\n\n----------------------------------------\n\nTITLE: PHP Block Instantiation and Method Call\nDESCRIPTION: PHP equivalent of the XML block configuration showing block instantiation and method calling.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/5_advanced_layout_features.markdown#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$block = new Mage_Some_Block_Foo();\n$block->someMethod('a value','27');\n```\n\n----------------------------------------\n\nTITLE: Moving XML Updates to External Files in Magento\nDESCRIPTION: Demonstrates moving XML layout updates from PHP string literals to external XML files for better maintainability and IDE support.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-2-layout-xml.md#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<container name=\"top\"></container>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<referenceContainer name=\"top\">\n    <block \n        class=\"Magento\\Framework\\View\\Element\\Template\" \n        name=\"pulsestorm_nofrills_chapter2_block1\"\n        template=\"Pulsestorm_Nofrillslayout::chapter2/block1.phtml\">                  \n    </block>\n</referenceContainer>\n```\n\n----------------------------------------\n\nTITLE: Caching Layout XML Updates\nDESCRIPTION: Shows how Magento caches layout XML updates to improve performance, generating a cache ID based on a suffix and either loading from cache or building from the filesystem.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_46\n\nLANGUAGE: php\nCODE:\n```\npublic function getFileLayoutUpdatesXml()\n{\n    if ($this->layoutUpdatesCache) {\n        return $this->layoutUpdatesCache;\n    }\n    $cacheId = $this->generateCacheId($this->cacheSuffix);\n    $result = $this->_loadCache($cacheId);\n    if ($result) {\n        $result = $this->_loadXmlString($result);\n    } else {\n        $result = $this->_loadFileLayoutUpdatesXml();\n        $this->_saveCache($result->asXml(), $cacheId);\n    }\n    $this->layoutUpdatesCache = $result;\n    return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Assets in Magento Layout XML\nDESCRIPTION: Demonstrates how to remove previously added assets using the <remove/> tag in Magento layout XML.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-9-frontend-advanced-topics.md#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<head>\n    <remove src=\"path/to/file.css\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Layout Initialization Method in Magento Controller\nDESCRIPTION: Method that initializes a layout by loading an XML file and adding it as an update. This demonstrates how to load layout XML from a file in a Magento module.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nprotected function _initLayout()\n{\n\t$path_page = Mage::getModuleDir('', 'Nofrills_Booklayout') . DS . \n\t'page-layouts' . DS . 'page.xml';\t\t\t\t\t\t\t\n\t$xml = file_get_contents($path_page); \t\n\t\n\t$layout = Mage::getSingleton('core/layout')\n\t->getUpdate()\n\t->addUpdate($xml);\t\t\t\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Price in Magento 2 Catalog ListProduct\nDESCRIPTION: This snippet from Magento\\Catalog\\Block\\Product\\ListProduct demonstrates how the price render block is used to render product prices in Magento 2.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_61\n\nLANGUAGE: php\nCODE:\n```\n$priceRender = $this->getPriceRender();\n\n$price = '';\nif ($priceRender) {\n    $price = $priceRender->render(\n        \\Magento\\Catalog\\Pricing\\Price\\FinalPrice::PRICE_CODE,\n        $product,\n        [\n            'include_container' => true,\n            'display_minimal_price' => true,\n            'zone' => \\Magento\\Framework\\Pricing\\Render::ZONE_ITEM_LIST,\n            'list_category_page' => true\n        ]\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Layout Blocks in Page Builder (PHP)\nDESCRIPTION: The Page Builder's generateLayoutBlocks method reads the page layout and then calls the parent implementation to generate blocks.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n#File: vendor/magento/framework/View/Page/Builder.php\nprotected function generateLayoutBlocks()\n{\n    $this->readPageLayout();\n    return parent::generateLayoutBlocks();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Action Method XML Block Configuration\nDESCRIPTION: Example of configuring a block with action method parameters in Magento layout XML.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/5_advanced_layout_features.markdown#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<block type=\"some/foo\" name=\"some_block\">\n\t<action method=\"someMethod\">\n\t\t<param1>a value</param1>\n\t\t<param2>27</param2>\t\t\t\n\t</action>\n</block>\n```\n\n----------------------------------------\n\nTITLE: Magento XML Configuration Structure\nDESCRIPTION: Example of Magento's hierarchical XML configuration structure showing database and design settings.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/i_system_config.markdown#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<system_config>\n\t<store>\n\t\t<database>\n\t\t\t<name>localhost</name>\n\t\t\t<password>12345</password>\n\t\t</databases>\n\t\t<design>\n\t\t\t<logo>awesomelogo.gif</logo>\n\t\t</design>\n\t</store>\n</system_config>\n```\n\n----------------------------------------\n\nTITLE: Basic Magento Layout XML Structure\nDESCRIPTION: Demonstrates the basic XML structure for creating a Hello World block with a class alias. Shows the essential layout node with block attributes for type, name and output.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<layout>\n    <block type=\"nofrills_booklayout/helloworld\" name=\"root\" output=\"toHtml\" />\n</layout>\n```\n\n----------------------------------------\n\nTITLE: Dynamic XML Update File Loading in Magento Controller (PHP)\nDESCRIPTION: Shows a method to dynamically load an XML update file based on the full action name. This allows for more flexible and modular layout updates.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nprotected function _loadUpdateFileFromRequest()\n{\n\t$path_update = Mage::getModuleDir('', 'Nofrills_Booklayout') . DS . \n\t'content-updates' . DS . $this->getFullActionName() . '.xml';\n\n\t$layout = Mage::getSingleton('core/layout')\n\t->getUpdate()\n\t->addUpdate(file_get_contents($path_update));\n}\n```\n\n----------------------------------------\n\nTITLE: Completely Replacing a Layout Handle XML File in Magento\nDESCRIPTION: Demonstrates how to completely override a module's layout XML file using a special path convention. This example shows an empty replacement that would effectively remove all blocks from the original layout.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-5-themes.md#2025-04-18_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\">\n    <body>\n    </body>\n</page>\n```\n\n----------------------------------------\n\nTITLE: Registering a Magento 2 Library Component\nDESCRIPTION: This code snippet demonstrates the registration of a Magento 2 library component. It uses the ComponentRegistrar class to specify the component type as LIBRARY and provides the library's identifier and directory.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-components.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\Framework\\Component\\ComponentRegistrar::register(\n    \\Magento\\Framework\\Component\\ComponentRegistrar::LIBRARY,\n    'magento/framework',\n    __DIR__\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Layout Handle in Magento 2 Controller\nDESCRIPTION: Demonstrates how to add a custom layout handle to a page object in a Magento 2 controller's execute method. This is typically used when default handles aren't sufficient for complex features.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-3-layouthandles.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$pageObject->addHandle('our_custom_handle');\n```\n\n----------------------------------------\n\nTITLE: Magento Widget Template Parameter Configuration\nDESCRIPTION: XML configuration for adding a template parameter to the widget, making it possible to select different rendering templates for the YouTube widget.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/7_widgets.markdown#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<parameters>\n\t<!-- ... -->\n\t<template>\n\t\t<required>1</required>\n\t\t<visible>0</visible>\n\t\t<value>youtube.phtml</value>\n\t\t<label>Frontend Template</label>\n\t\t<type>text</type>\n\t</template>\n\t<!-- ... -->\n</parameters>\n```\n\n----------------------------------------\n\nTITLE: Creating Main Layout Update Object in Magento 2\nDESCRIPTION: This snippet shows how the main layout update object is created using a processor factory rather than relying on dependency injection with shared=false. This ensures each layout update object maintains its own state.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_35\n\nLANGUAGE: php\nCODE:\n```\npublic function getUpdate()\n{\n    if (!$this->_update) {\n        $theme = $this->themeResolver->get();\n        $this->_update = $this->_processorFactory->create(['theme' => $theme]);\n    }\n    return $this->_update;\n}\n```\n\n----------------------------------------\n\nTITLE: Translation System XML Configuration\nDESCRIPTION: Example of configuring parameter translation in Magento layout XML using the translate and module attributes.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/5_advanced_layout_features.markdown#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<action method=\"someMethod\" translate=\"param1\" module=\"core\">\n\t<param1>a value</param1>\n\t<param2>27</param2>\t\t\t\n</action>\n```\n\n----------------------------------------\n\nTITLE: Moving Elements in Magento Layout XML Processing\nDESCRIPTION: This snippet from the Move reader demonstrates how Magento schedules element movement operations. It creates a record in the ScheduledStructure that will later be processed to relocate elements within the layout hierarchy.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n$scheduledStructure->setElementToMove(\n    $elementName,\n    [$destination, $siblingName, $isAfter, $alias]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Supported Blocks for Widgets in XML\nDESCRIPTION: XML configuration showing how to restrict which blocks a widget instance may be inserted into. This configuration defines both eligible blocks and which templates can be used with each block.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/7_widgets.markdown#2025-04-18_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<widgets>\n\t<nofrills_layoutbook_youtube>\n\t\t<!-- ... -->\n\t\t<supported_blocks>\n\t\t\t<uniquely_named_node>\n\t\t\t\t<block_name>content</block_name>\n\t\t\t\t<template>\n\t\t\t\t\t<unique_name_one>as_video</unique_name_one>\n\t\t\t\t\t<unique_name_two>as_link</unique_name_two>\n\t\t\t\t</template>\n\t\t\t</uniquely_named_node>\n\t\t\t\n\t\t\t<another_uniquely_named_node>\n\t\t\t\t<block_name>left</block_name>\n\t\t\t\t<template>\n\t\t\t\t\t<unique_name_one>as_video</unique_name_one>\n\t\t\t\t\t<unique_name_two>as_link</unique_name_two>\n\t\t\t\t</template>\n\t\t\t</another_uniquely_named_node>\n\t\t\t\n\t\t</supported_blocks>\t\t\n\t\t<!-- ... -->\n\t</nofrills_layoutbook_youtube>\n</widgets>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Head Block Class in Magento\nDESCRIPTION: Demonstrates how to create a custom block class that extends Template to be used with the head.additional block reference.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-9-frontend-advanced-topics.md#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Pulsestorm\\Nofrillslayout\\Block;\nclass Head extends \\Magento\\Framework\\View\\Element\\Template\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Link Tag for CSS in Magento 2\nDESCRIPTION: Shows how Magento transforms the CSS node in layout XML into an actual HTML link tag with a fully qualified URL to the static asset.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<link  rel=\"stylesheet\" type=\"text/css\"  media=\"all\" href=\"http://magento-2-2-x.dev/static/version1514092162/frontend/Pulsestorm/dram/en_US/Pulsestorm_Nofrillslayout/chapter-7/example.css\" />\n```\n\n----------------------------------------\n\nTITLE: Using Magic Getter and Setter Methods in Magento (PHP)\nDESCRIPTION: This snippet demonstrates the use of Magento's magic getter and setter methods, which allow for a more intuitive syntax when working with object data.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/g_appendix_setters_and_getters.markdown#2025-04-18_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$key = $object->getTheKey();\t\n$object->setTheKey('value');\n```\n\n----------------------------------------\n\nTITLE: Creating Price Rendering Layout Object in Magento 2\nDESCRIPTION: This snippet shows the constructor for the Price Rendering Layout class where a new layout instance is created through a factory. This ensures the price rendering has its own layout object that won't interfere with the main layout processing.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_37\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct(\n    LayoutFactory $layoutFactory,\n    \\Magento\\Framework\\View\\LayoutInterface $generalLayout\n) {\n    $this->layout = $layoutFactory->create(['cacheable' => $generalLayout->isCacheable()]);\n}\n```\n\n----------------------------------------\n\nTITLE: Package Layout with Handles in XML\nDESCRIPTION: Extended structure of a Package Layout showing multiple handles that each contain XML Update Fragments. Some handle names may be repeated, and examples of real handle names like 'default' and 'catalog_product_send' are shown.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/3_package_layout.markdown#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<layouts>\n\t<handle_name>\n\t\t<!-- ... XML Update Fragment --->\n\t</handle_name>\n\t\n\t<handle_name2>\n\t\t<!-- ... XML Update Fragment --->\n\t</handle_name2>\n\t\n\t<handle_name3>\n\t\t<!-- ... XML Update Fragment --->\n\t</handle_name3>\n\t\n\t<handle_name>\n\t\t<!-- ... XML Update Fragment --->\n\t</handle_name>\t\t\n\t\n\t<default> <!-- default is an actual handle name from the system-->\n\t\t<!-- ... -->\n\t</default>\n\t\n\t<catalog_product_send> <!-- another real name -->\n\t\t<!-- ... -->\n\t</catalog_product_send>\n\t\n\t\n\t<!-- etc. -->\n</layouts>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom PHTML Template for Magento 2 Theme\nDESCRIPTION: This simple PHTML template file contains HTML that will be rendered by the custom block added to the category view page. This shows how themes can add custom content to existing pages through template files.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-5-themes.md#2025-04-18_snippet_3\n\nLANGUAGE: phtml\nCODE:\n```\n<h2>Hello Category Listing Page.</h2>\n```\n\n----------------------------------------\n\nTITLE: Magento Factory Methods for Different Class Types\nDESCRIPTION: Demonstrates the use of Magento's factory methods for instantiating block, helper, and model classes using class aliases.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/b_appendix_class_alias.markdown#2025-04-18_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$layout->createBlock('foo/bar')\n```\n\nLANGUAGE: PHP\nCODE:\n```\nMage::helper('foo/bar')\n```\n\nLANGUAGE: PHP\nCODE:\n```\nMage::getModel('foo/bar'),Mage::getModel('foo/bar')\n```\n\n----------------------------------------\n\nTITLE: Adding Root Containers to Output in Magento 2 Layout\nDESCRIPTION: Method that identifies top-level container elements and adds them to the output array. This is a critical step that determines which elements will be rendered when the layout is output.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nprotected function addToOutputRootContainers()\n{\n    foreach ($this->structure->exportElements() as $name => $element) {\n        if ($element['type'] === Element::TYPE_CONTAINER && empty($element['parent'])) {\n            $this->addOutputElement($name);\n        }\n    }\n    return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Context-Sensitive Template Configuration for Widgets in XML\nDESCRIPTION: XML configuration that specifies different templates for different blocks, allowing for context-sensitive widget rendering. This example restricts video templates to the content area while only allowing link templates in the left column.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/7_widgets.markdown#2025-04-18_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<uniquely_named_node>\n\t<block_name>content</block_name>\n\t<template>\n\t\t<unique_name_one>as_video</unique_name_one>\n\t\t<unique_name_two>as_link</unique_name_two>\n\t</template>\n</uniquely_named_node>\n\n<another_uniquely_named_node>\n\t<block_name>left</block_name>\n\t<template>\n\t\t<unique_name_two>as_link</unique_name_two>\n\t</template>\n</another_uniquely_named_node>\n```\n\n----------------------------------------\n\nTITLE: Multiple Blocks Configuration in Magento Layout XML\nDESCRIPTION: XML configuration showing how to define multiple blocks within a single container using layout XML updates.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-2-layout-xml.md#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<referenceContainer name=\"top\">\n    <block \n        class=\"Magento\\Framework\\View\\Element\\Template\" \n        name=\"pulsestorm_nofrills_chapter2_block1\"\n        template=\"Pulsestorm_Nofrillslayout::chapter2/block1.phtml\">                  \n    </block>\n\n    <block \n        class=\"Magento\\Framework\\View\\Element\\Template\" \n        name=\"pulsestorm_nofrills_chapter2_block2\"\n        template=\"Pulsestorm_Nofrillslayout::chapter2/block2.phtml\">                  \n    </block>    \n</referenceContainer>\n```\n\n----------------------------------------\n\nTITLE: Loading Custom XML File in Magento 2 Controller\nDESCRIPTION: This PHP code snippet shows how to load a custom XML file in a Magento 2 controller, replacing the default blocks XML file.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-2-layout-xml.md#2025-04-18_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n//$block_xml     = $this->loadXmlFromSampleXmlFolder('chapter2/user/blocks.xml');\n$block_xml     = $this->loadXmlFromSampleXmlFolder('chapter2/page.xml');\n```\n\n----------------------------------------\n\nTITLE: Creating Blocks with Layout Updates in Magento Controller\nDESCRIPTION: Controller execute method that demonstrates creating blocks using XML layout updates. Uses layout manager to add container and block definitions via XML.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-2-layout-xml.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function execute()\n{\n    $objectManager = $this->getObjectManager();        \n    $layout        = $objectManager->get('Magento\\Framework\\View\\Layout');        \n\n    $updateManager = $layout->getUpdate(); \n\n    $updateManager->addUpdate(\n        '<container name=\"top\"></container>'\n    );        \n    \n    $updateManager->addUpdate(\n        '<referenceContainer name=\"top\">\n            <block \n                class=\"Magento\\Framework\\View\\Element\\Template\" \n                name=\"pulsestorm_nofrills_chapter2_block1\"\n                template=\"Pulsestorm_Nofrillslayout::chapter2/block1.phtml\">                  \n            </block>\n        </referenceContainer>'\n    ); \n    \n    echo $layout->getOutput();    \n}\n```\n\n----------------------------------------\n\nTITLE: CMS Page Layout XML in Magento (XML)\nDESCRIPTION: This XML snippet defines the layout update for CMS pages, including the blocks for content heading and page content.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/6_cms_page.markdown#2025-04-18_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<layout>\n    <!-- ... -->\n    <cms_page translate=\"label\">\n        <label>CMS Pages (All)</label>\n        <reference name=\"content\">\n            <block type=\"core/template\" name=\"page_content_heading\"\n            template=\"cms/content_heading.phtml\"/>\n            <block type=\"page/html_wrapper\" name=\"cms.wrapper\" translate=\"label\">\n                <label>CMS Content Wrapper</label>\n                <action method=\"setElementClass\"><value>std</value></action>\n                <block type=\"cms/page\" name=\"cms_page\"/>\n            </block>\n        </reference>\n    </cms_page>\n    <!-- ... --->\n</layout>\n```\n\n----------------------------------------\n\nTITLE: Scanning Folders for Registration Files in Magento\nDESCRIPTION: This PHP code from NonComposerComponentRegistration.php shows how Magento scans specific directories for registration.php files to load components without using Composer. It builds a list of paths to search, uses glob() to find matching files, and includes each file found.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-components.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$pathList[] = dirname(__DIR__) . '/code/*/*/cli_commands.php';\n$pathList[] = dirname(__DIR__) . '/code/*/*/registration.php';\n$pathList[] = dirname(__DIR__) . '/design/*/*/*/registration.php';\n$pathList[] = dirname(__DIR__) . '/i18n/*/*/registration.php';\n$pathList[] = dirname(dirname(__DIR__)) . '/lib/internal/*/*/registration.php';\n$pathList[] = dirname(dirname(__DIR__)) . '/lib/internal/*/*/*/registration.php';\nforeach ($pathList as $path) {\n    // Sorting is disabled intentionally for performance improvement\n    $files = glob($path, GLOB_NOSORT);\n    if ($files === false) {\n        throw new \\RuntimeException('glob() returned error while searching in \\'' . $path . '\\'');\n    }\n    foreach ($files as $file) {\n        include $file;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Module Layout Updates Configuration in XML\nDESCRIPTION: XML configuration in a module's config.xml file that defines which layout files should be loaded into the Package Layout. Each module can specify layout files to be included in the frontend area.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/3_package_layout.markdown#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<frontend>  <!-- frontend is the \"area\" name. -->\n        <layout>\n            <updates>\n                <section>\n                    <file>section.xml</file>\n                </section>\n                <anysection>\n                    <file>anysection.xml</file>\n                </anysection>                \n            </updates>\n        </layout>\n</frontend>\n```\n\n----------------------------------------\n\nTITLE: Yes/No Source Model Implementation in Magento PHP\nDESCRIPTION: Implementation of a source model that provides Yes/No options for select fields. The toOptionArray method returns an array of value/label pairs that will populate the select dropdown.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/h_widget_field_rendering_options.markdown#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass Mage_Adminhtml_Model_System_Config_Source_Yesno\n{\n\n\t/**\n\t * Options getter\n\t *\n\t * @return array\n\t */\n\tpublic function toOptionArray()\n\t{\n\t\treturn array(\n\t\t\tarray('value' => 1, 'label'=>Mage::helper('adminhtml')->__('Yes')),\n\t\t\tarray('value' => 0, 'label'=>Mage::helper('adminhtml')->__('No')),\n\t\t);\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Layout in Magento 2 AbstractBlock\nDESCRIPTION: This method in Magento\\Framework\\View\\Element\\AbstractBlock sets the layout for a block and calls _prepareLayout. It's typically used when assigning a layout to a block in Magento 2.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_56\n\nLANGUAGE: php\nCODE:\n```\npublic function setLayout(\\Magento\\Framework\\View\\LayoutInterface $layout)\n{\n    $this->_layout = $layout;\n    $this->_prepareLayout();\n    return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Examining Layout Update Merge Method in Magento PHP\nDESCRIPTION: PHP code showing the merge method from Mage_Core_Model_Layout_Update class which fetches layout updates from both the package and the database. This method applies widget layout updates when building page layouts.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/7_widgets.markdown#2025-04-18_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function merge($handle)\n{\n    $packageUpdatesStatus = $this->fetchPackageLayoutUpdates($handle);\n    if (Mage::app()->isInstalled()) {\n        $this->fetchDbLayoutUpdates($handle);\n    }\n    return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Initial PHP Controller Implementation\nDESCRIPTION: PHP controller code that creates a layout with containers and blocks using direct PHP methods.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-2-layout-xml.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function execute()\n{\n    $objectManager = $this->getObjectManager();        \n    $layout        = $objectManager->get('Magento\\Framework\\View\\Layout');        \n    $layout->addContainer('top', 'The top level container');  \n    \n    $blockOne   = $layout->createBlock(\n        'Magento\\Framework\\View\\Element\\Template',\n        'pulsestorm_nofrills_chapter2_block1'\n    );\n    $blockOne->setTemplate('Pulsestorm_Nofrillslayout::chapter2/block1.phtml');\n    \n    $blockTwo    = $layout->createBlock(\n        'Magento\\Framework\\View\\Element\\Template',\n        'pulsestorm_nofrills_chapter2_block2'\n    );\n    $blockTwo->setTemplate('Pulsestorm_Nofrillslayout::chapter2/block2.phtml');\n                  \n    $structure = $layout->getStructure(); //note: not standard magento\n    $structure->setAsChild('pulsestorm_nofrills_chapter2_block1', 'top');\n    $structure->setAsChild('pulsestorm_nofrills_chapter2_block2', 'top');\n    \n    $layout->generateElements();\n    echo $layout->getOutput();       \n}\n```\n\n----------------------------------------\n\nTITLE: Defining YouTube Widget in Magento Configuration XML\nDESCRIPTION: XML configuration for defining a YouTube video widget in Magento, including basic widget properties and parameters for collecting the video ID.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/7_widgets.markdown#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<widgets>\n\t<nofrills_layoutbook_youtube type=\"nofrills_booklayout/youtube\">\n\t\t<name>YouTube Example Widget</name>\n\t\t<description type=\"desc\">\n\t\t\tThis wiget displays a YouTube video.\n\t\t</description>\n\n\t\t<!-- START new section -->\n\t\t<parameters>\n\t\t\t<video_id>\n\t\t\t\t<required>1</required>\n\t\t\t\t<visible>1</visible>\n\t\t\t\t<value>Enter ID Here</value>\n\t\t\t\t<label>YouTube Video ID</label>\n\t\t\t\t<type>text</type>\n\t\t\t</video_id>\n\t\t</parameters>\t\n\t\t<!-- END new section -->\n\t\n\t</nofrills_layoutbook_youtube>\n</widgets>\n```\n\n----------------------------------------\n\nTITLE: Loading XML Layout File in Magento\nDESCRIPTION: Shows how to load a layout XML file using simplexml_load_file, using Magento's configuration to get the correct XML element class for maximum compatibility with future versions.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'page-layouts' . DS . 'complex.xml';\n$xml = simplexml_load_file($path,\nMage::getConfig()->getModelClassName('core/layout_element'));\n```\n\n----------------------------------------\n\nTITLE: Complete Layout XML Implementation\nDESCRIPTION: Full controller action showing XML layout loading, block generation and output rendering using Magento's layout system.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function indexAction()\n{\n    $layout = Mage::getSingleton('core/layout');\t\t\t\t\t\t\n    $xml = simplexml_load_string('<layout>\n            <block type=\"nofrills_booklayout/helloworld\" \n            name=\"root\" output=\"toHtml\" />\n        </layout>','Mage_Core_Model_Layout_Element');\n\n    $layout->setXml($xml);\n    $layout->generateBlocks();\t\t\t\n    echo $layout->setDirectOutput(true)->getOutput();\t\t\t\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Magento 2 Price Render Layout\nDESCRIPTION: This constructor for Magento\\Framework\\Pricing\\Render\\Layout creates a new instance of the Magento\\Framework\\View\\Layout object, separate from the main layout system.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_59\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct(\n    LayoutFactory $layoutFactory,\n    \\Magento\\Framework\\View\\LayoutInterface $generalLayout\n) {\n    $this->layout = $layoutFactory->create(['cacheable' => $generalLayout->isCacheable()]);\n}\n```\n\n----------------------------------------\n\nTITLE: Page Layout XML Structure Example in Magento\nDESCRIPTION: Example of the XML structure that makes up the Page Layout XML tree. This tree contains the merged layout XML from all relevant layout files with specific handle names.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<layout xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <body>\n       <referenceContainer name=\"header.panel\">\n          <block class=\"Magento\\Directory\\Block\\Currency\" name=\"currency\" before=\"store_language\" template=\"currency.phtml\"/>\n       </referenceContainer>\n    </body>\n\n    <head>\n       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n       <css src=\"mage/calendar.css\"/>\n       <script src=\"requirejs/require.js\"/>\n    </head>\n\n    <body>\n       <referenceContainer name=\"after.body.start\">\n          <block class=\"Magento\\Framework\\View\\Element\\Js\\Components\" name=\"head.components\" as=\"components\" template=\"Magento_Theme::js/components.phtml\" before=\"-\"/>\n       </referenceContainer>\n    </body>\n\n    <!-- ... more nodes -->\n</layout>\n```\n\n----------------------------------------\n\nTITLE: Getting Magento Model Class Name\nDESCRIPTION: Demonstrates the proper way to retrieve a Magento class name through the configuration system rather than hardcoding it, ensuring better compatibility with future Magento versions.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nMage::getConfig()->getModelClassName('core/layout_element')\n```\n\n----------------------------------------\n\nTITLE: Magento Model Group Configuration Example\nDESCRIPTION: Illustrates the XML structure for defining a model group and its base class name in Magento's configuration.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/b_appendix_class_alias.markdown#2025-04-18_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<models>\n    <catalog>\n        <class>Mage_Catalog_Model</class>        \n    </catalog>\n</model>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Page Result in Magento\nDESCRIPTION: Shows how the render method in the Page result class initiates the page building process by calling the publicBuild method on the pageConfig object.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nprotected function render(ResponseInterface $response)\n{\n    $this->pageConfig->publicBuild();\n    /* ... */\n    return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Template Rendering in Magento 2 Result Page\nDESCRIPTION: The renderPage method from Magento\\Framework\\View\\Result\\Page that handles the actual rendering of the page template. It extracts view variables and includes the template file to generate the final HTML output.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n#File: vendor/magento/framework/View/Result/Page.php\nprotected function renderPage()\n{\n    $fileName = $this->viewFileSystem->getTemplateFileName($this->template);\n    if (!$fileName) {\n        throw new \\InvalidArgumentException('Template \"' . $this->template . '\" is not found');\n    }\n\n    ob_start();\n    try {\n        extract($this->viewVars, EXTR_SKIP);\n        include $fileName;\n    } catch (\\Exception $exception) {\n        ob_end_clean();\n        throw $exception;\n    }\n    $output = ob_get_clean();\n    return $output;\n}\n```\n\n----------------------------------------\n\nTITLE: URL Examples for Magento Areas\nDESCRIPTION: Example URLs showing the difference between frontend and adminhtml areas in Magento 2.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-areas.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttp://magento.example.com/\nhttp://magento.example.com/checkout\nhttp://magento.example.com/admin/admin/dashboard/index\n```\n\n----------------------------------------\n\nTITLE: CSS File Declaration in Magento Layout XML\nDESCRIPTION: XML snippet from Magento's default_head_blocks.xml that demonstrates how CSS files are declared in the head section of the layout. This shows how Magento associates CSS files with specific media queries.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-5-themes.md#2025-04-18_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<head>\n    <!-- ... --->\n    <css src=\"css/styles-l.css\" media=\"screen and (min-width: 768px)\"/>\n    <!-- ... --->\n</head>\n```\n\n----------------------------------------\n\nTITLE: Generated CSS from LessCSS Processing\nDESCRIPTION: Shows the CSS output that Magento 2 generates after processing the LessCSS file, demonstrating how variables are resolved into actual CSS values.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_10\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  background-color: #0000ff;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Directive in Magento PHP\nDESCRIPTION: PHP method from Mage_Core_Model_Email_Template_Filter class that implements the {{media}} directive. It combines the base media URL with the provided URL parameter.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/6_cms_page.markdown#2025-04-18_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\npublic function mediaDirective($construction)\n{\n    $params = $this->_getIncludeParameters($construction[2]);\n    return Mage::getBaseUrl('media') . $params['url'];\n}\n```\n\n----------------------------------------\n\nTITLE: Text List Block Rendering Implementation in Magento PHP\nDESCRIPTION: Core implementation of how text list blocks render their children in sorted order.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/5_advanced_layout_features.markdown#2025-04-18_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass Mage_Core_Block_Text_List extends Mage_Core_Block_Text\n{\n\tprotected function _toHtml()\n\t{\n\t\t$this->setText('');\n\t\tforeach ($this->getSortedChildren() as $name) {\n\t\t\t$block = $this->getLayout()->getBlock($name);\n\t\t\tif (!$block) {\n\t\t\t\tMage::throwException(Mage::helper('core')->__('Invalid block: %s', $name));\n\t\t\t}\n\t\t\t$this->addText($block->toHtml());\n\t\t}\n\t\treturn parent::_toHtml();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Layout Handle Definitions in Magento XML\nDESCRIPTION: This XML demonstrates how the same functionality can be achieved by splitting the layout instructions across multiple instances of the same handle. Each update handle is processed in order but should be independent.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/3_package_layout.markdown#2025-04-18_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<nofrills_booklayout_package_second>\n\t<reference name=\"content\">\n\t\t<block type=\"core/text\" name=\"our_message\">\n\t\t\t<action method=\"setText\"><text>Hello Jupiter</text></action>\n\t\t</block>\t\t\t\t\t\n\t</reference>\n</nofrills_booklayout_package_second>\t\n\n<nofrills_booklayout_package_second>\t\n\t<reference name=\"root\">\n\t\t<action method=\"setTemplate\">\n\t\t\t<template>page/1column.phtml</template>\n\t\t</action>\n\t</reference>\n</nofrills_booklayout_package_second>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Child Blocks Using Structure Object in Magento 2\nDESCRIPTION: Method illustrating how the Structure object is used to locate child blocks by their aliases. This demonstrates the relationship between the Layout object that developers interact with and the underlying Structure object.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_30\n\nLANGUAGE: php\nCODE:\n```\npublic function getChildBlock($parentName, $alias)\n{\n    $this->build();\n    $name = $this->structure->getChildId($parentName, $alias);\n    if ($this->isBlock($name)) {\n        return $this->getBlock($name);\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Static Asset Serving\nDESCRIPTION: Nginx configuration rules for handling static asset requests in Magento 2, including version stripping and fallback to static.php.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-9-frontend-advanced-topics.md#2025-04-18_snippet_13\n\nLANGUAGE: nginx\nCODE:\n```\nlocation ~ ^/static/version {\n    rewrite ^/static/(version\\d*/)?(.*)$ /static/$2 last;\n}\n\nif (!-f $request_filename) {\n    rewrite ^/static/?(.*)$ /static.php?resource=$1 last;\n}\n```\n\n----------------------------------------\n\nTITLE: Solution: Dependency Injection Pattern in PHP Functions\nDESCRIPTION: Shows how to implement dependency injection by passing objects as parameters to functions rather than instantiating them directly, allowing for greater flexibility.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-di.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n//type hint for $object to make sure we get the sort\n//or object this function/method expects\nfunction someFunction(SomeClasName $object)\n{\n    //... does some stuff ...\n    \n    //... does some other stuff with $object ...    \n}\n```\n\n----------------------------------------\n\nTITLE: Handling CMS Page View Action in Magento Controller (PHP)\nDESCRIPTION: The viewAction method in the Mage_Cms_PageController class handles the rendering of CMS pages, including retrieving the page ID and calling the renderPage helper method.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/6_cms_page.markdown#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass Mage_Cms_PageController extends Mage_Core_Controller_Front_Action\n{\n    /**\n     * View CMS page action\n     *\n     */\n    public function viewAction()\n    {\n        $pageId = $this->getRequest()\n            ->getParam('page_id', $this->getRequest()->getParam('id', false));\n        if (!Mage::helper('cms/page')->renderPage($this, $pageId)) {\n            $this->_forward('noRoute');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Factory Constructor Dependency Example\nDESCRIPTION: Example of constructor dependency that triggers code generation\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-autoload.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct(SomeObjectFactory $factory)\n{\n    /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Layout Output in Magento 2\nDESCRIPTION: Simple method that adds an element to the output array, making it part of the rendered page. This method is called for top-level containers that need to be included in the final HTML output.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_32\n\nLANGUAGE: php\nCODE:\n```\npublic function addOutputElement($name)\n{\n    $this->_output[$name] = $name;\n    return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Generators via Dependency Injection in Magento 2\nDESCRIPTION: Configuration of layout generators through Magento's dependency injection system. This XML snippet defines the generators responsible for different aspects of page generation, including blocks, containers, and UI components.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<type name=\"Magento\\Framework\\View\\Layout\\GeneratorPool\">\n    <arguments>\n        <argument name=\"generators\" xsi:type=\"array\">\n            <item name=\"head\" xsi:type=\"object\">Magento\\Framework\\View\\Page\\Config\\Generator\\Head</item>\n            <item name=\"body\" xsi:type=\"object\">Magento\\Framework\\View\\Page\\Config\\Generator\\Body</item>\n            <item name=\"block\" xsi:type=\"object\">Magento\\Framework\\View\\Layout\\Generator\\Block</item>\n            <item name=\"container\" xsi:type=\"object\">Magento\\Framework\\View\\Layout\\Generator\\Container</item>\n            <item name=\"uiComponent\" xsi:type=\"object\">Magento\\Framework\\View\\Layout\\Generator\\UiComponent</item>\n        </argument>\n    </arguments>\n</type>\n```\n\n----------------------------------------\n\nTITLE: Configurable Template Selection for Magento Widget\nDESCRIPTION: XML configuration that provides a dropdown selection of template options for rendering a YouTube widget, allowing users to choose between embedding a video or showing a link.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/7_widgets.markdown#2025-04-18_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<template>\n\t<required>1</required>\n\t<visible>1</visible>\n\t<value>youtube.phtml</value>\n\t<label>Frontend Template</label>\n\t<type>select</type>\n\t\n\t<values>\n\t\t<as_video>\n\t\t\t<value>youtube.phtml</value>\n\t\t\t<label>Embed Video</label>\n\t\t</as_video>\t\n\t\t<as_link>\n\t\t\t<value>youtube-as-link.phtml</value>\n\t\t\t<label>Link Video</label>\t\t\t\t\t\t\t\t\t\n\t\t</as_link>\n\t</values>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Matching CMS Pages in Magento Router (PHP)\nDESCRIPTION: The match method in the Mage_Cms_Controller_Router class is responsible for matching CMS pages based on the request URL.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/6_cms_page.markdown#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function match(Zend_Controller_Request_Http $request)\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Apache .htaccess Configuration for Static Asset Serving\nDESCRIPTION: Apache rewrite rules for handling static asset requests in Magento 2, including version signature stripping and routing to static.php for dynamic serving.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-9-frontend-advanced-topics.md#2025-04-18_snippet_12\n\nLANGUAGE: apache\nCODE:\n```\n<IfModule mod_rewrite.c>\n    RewriteEngine On\n\n    # Remove signature of the static files that is used to overcome the browser cache\n    RewriteRule ^version.+?/(.+)$ $1 [L]\n\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME} !-l\n\n    RewriteRule .* ../static.php?resource=$0 [L]\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Magento Module Registration in PHP\nDESCRIPTION: Shows how a Magento module registers itself with the ComponentRegistrar, defining its component identifier. This identifier is used in theme paths when extending module functionality.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-5-themes.md#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\Framework\\Component\\ComponentRegistrar::register(\n    \\Magento\\Framework\\Component\\ComponentRegistrar::MODULE,\n    'Magento_Catalog',\n    __DIR__\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing YouTube Widget Block Class - PHP\nDESCRIPTION: PHP class implementing the widget interface and rendering YouTube video embed code.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/7_widgets.markdown#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Nofrills_Booklayout_Block_Youtube extends Mage_Core_Block_Abstract\nimplements Mage_Widget_Block_Interface\n{\n\tprotected function _toHtml()\n\t{\n\t\treturn '<object width=\"640\" height=\"505\">\n\t\t<param name=\"movie\" \n\t\tvalue=\"http://www.youtube.com/v/dQw4w9WgXcQ?fs=1&amp;hl=en_US\">\n\t\t</param>\n\t\t<param name=\"allowFullScreen\" value=\"true\"></param>\n\t\t<param name=\"allowscriptaccess\" value=\"always\"></param>\n\t\t<embed src=\"http://www.youtube.com/v/dQw4w9WgXcQ?fs=1&amp;hl=en_US\"\n\t\ttype=\"application/x-shockwave-flash\" \n\t\tallowscriptaccess=\"always\" allowfullscreen=\"true\" \n\t\twidth=\"640\" height=\"505\"></embed></object>';\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Builder Build Process\nDESCRIPTION: Shows the main build method of the Layout Builder class, which orchestrates the three-step process of loading layout updates, generating layout XML, and generating layout blocks.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_40\n\nLANGUAGE: php\nCODE:\n```\npublic function build()\n{\n    if (!$this->isBuilt) {\n        $this->isBuilt = true;\n        $this->loadLayoutUpdates();\n        $this->generateLayoutXml();\n        $this->generateLayoutBlocks();\n    }\n    return $this->layout;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Method Calling Example\nDESCRIPTION: Using ifconfig attribute to conditionally call methods based on system configuration values.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/5_advanced_layout_features.markdown#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<block type=\"page/html_head\" name=\"head\" as=\"head\">\n\t<action method=\"addJs\" ifconfig=\"dev/js/deprecation\">\n\t\t<script>prototype/deprecation.js</script>\n\t</action>\n</block>\n```\n\n----------------------------------------\n\nTITLE: Rendering Price in Magento 2 Pricing Render\nDESCRIPTION: This method in Magento\\Framework\\Pricing\\Render demonstrates how the separate priceLayout object is used to fetch and render price blocks independently of the main layout system.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_62\n\nLANGUAGE: php\nCODE:\n```\npublic function render($priceCode, SaleableInterface $saleableItem, array $arguments = [])\n{\n    $useArguments = array_replace($this->_data, $arguments);\n\n    /** @var \\Magento\\Framework\\Pricing\\Render\\RendererPool $rendererPool */\n    $rendererPool = $this->priceLayout->getBlock('render.product.prices');\n    if (!$rendererPool) {\n        throw new \\RuntimeException('Wrong Price Rendering layout configuration. Factory block is missed');\n    }\n\n    // obtain concrete Price Render\n    $priceRender = $rendererPool->createPriceRender($priceCode, $saleableItem, $useArguments);\n    return $priceRender->toHtml();\n}\n```\n\n----------------------------------------\n\nTITLE: Magento Configuration XML Structure for Class Aliases\nDESCRIPTION: Shows the basic structure of Magento's configuration XML used for resolving class aliases to actual PHP classes.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/b_appendix_class_alias.markdown#2025-04-18_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<config>\n    <global>\n        <models>...</models>\n        <helpers>...</helpers>\n        <blocks>...</blocks>\n    </global>\n</config>\n```\n\n----------------------------------------\n\nTITLE: Retrieving CMS Page Object in Magento PHP\nDESCRIPTION: PHP method from a Magento block class that retrieves the CMS page object. It checks for existing data, loads a page by ID if provided, or uses a singleton instance.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/6_cms_page.markdown#2025-04-18_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getPage()\n{\n    if (!$this->hasData('page')) {\n        if ($this->getPageId()) {\n            $page = Mage::getModel('cms/page')\n                ->setStoreId(Mage::app()->getStore()->getId())\n                ->load($this->getPageId(), 'identifier');\n        } else {\n            $page = Mage::getSingleton('cms/page');\n        }\n        $this->setData('page', $page);\n    }\n    return $this->getData('page');\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Head Section XML Implementation\nDESCRIPTION: Details of the head and css nodes used in layout XML to add CSS files to a Magento 2 page.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<head>\n    <css src=\"Pulsestorm_Nofrillslayout::chapter-7/example.css\"/>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Interfaces in PHP Class Declaration\nDESCRIPTION: Demonstrates how a PHP class can extend a parent class and implement multiple interfaces simultaneously. This is the basic syntax for interface implementation in PHP.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-interfaces.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Foo extends Bar implements FirstInterface, SecondInterface {...}\n```\n\n----------------------------------------\n\nTITLE: Page Builder Block Generation with Page Layout\nDESCRIPTION: Shows how the Page Builder extends the generateLayoutBlocks method to read the page layout configuration before generating blocks, ensuring the page structure is properly set up.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nprotected function generateLayoutBlocks()\n{\n    $this->readPageLayout();\n    return parent::generateLayoutBlocks();\n}\n\nprotected function readPageLayout()\n{\n    $pageLayout = $this->getPageLayout();\n    if ($pageLayout) {\n        $readerContext = $this->layout->getReaderContext();\n        $this->pageLayoutReader->read($readerContext, $pageLayout);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Action with Reference Node in Magento\nDESCRIPTION: Controller action that demonstrates the use of reference nodes to add content to an existing layout block. This shows how to target content areas defined in the base layout.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n#URL:  http://magento.example.com/nofrills_booklayout/reference\npublic function indexAction()\n{\n\t$this->_initLayout();\n\tMage::getSingleton('core/layout')\n\t->getUpdate()\n\t->addUpdate('<reference name=\"content\">\n\t\t<block type=\"core/text\" name=\"our_message\">\n\t\t\t<action method=\"setText\"><text>Here we go!</text></action>\n\t\t</block>\n\t</reference>');\n\t$this->_sendOutput();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Magento 2 Language Pack Component\nDESCRIPTION: This code snippet shows how to register a Magento 2 language pack component. It uses the ComponentRegistrar class to specify the component type as LANGUAGE and provides the language pack's identifier and directory.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-components.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\Framework\\Component\\ComponentRegistrar::register(\n    \\Magento\\Framework\\Component\\ComponentRegistrar::LANGUAGE,\n    'magento_de_de',\n    __DIR__\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Layout Handles in PHP Controller Action\nDESCRIPTION: A controller action that shows how to retrieve the list of handles that Magento has set for the current request. It requires loadLayout() to be called first to ensure handles are set.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/3_package_layout.markdown#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n#URL: http://magento.example.com/nofrills_booklayout/reference/handle\npublic function handleAction()\n{\n\t$this->loadLayout();\n\t$handles = Mage::getSingleton('core/layout')->getUpdate()->getHandles();\n\tvar_dump($handles);\n\texit;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Asset Repository in a Magento Template\nDESCRIPTION: This PHTML template demonstrates how to use the Asset Repository to create asset objects and generate proper URLs for JavaScript files. It shows the pattern for accessing module-specific assets and incorporating them into HTML.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-9-frontend-advanced-topics.md#2025-04-18_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    $asset_repository = $this->assetRepository;\n    $asset  = $asset_repository->createAsset('Pulsestorm_Nofrillslayout::test.js');\n    $url    = $asset->getUrl();\n?>\n<!-- Hello There -->\n<script src=\"<?php echo $url; ?>\"></script>\n```\n\n----------------------------------------\n\nTITLE: Widget Directive with Template Parameter\nDESCRIPTION: Example of a Magento widget directive that includes both the video ID and a template path, allowing for template customization when rendering the widget.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/7_widgets.markdown#2025-04-18_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n{{widget type=\"nofrills_booklayout/youtube\" video_id=\"qYkbTyHXwbs\"\ntemplate=\"youtube.phtml\"}}\n```\n\n----------------------------------------\n\nTITLE: Layout Element Generation Implementation (PHP)\nDESCRIPTION: The Layout's generateElements method orchestrates the processing of layout definitions, using reader pools and generator pools to interpret and process layout instructions.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n#File: vendor/magento/framework/View/Layout.php\npublic function generateElements()\n{\n    /* ... */\n    \n    if ($result) {\n        $this->readerContext = unserialize($result);\n    } else {\n        \\Magento\\Framework\\Profiler::start('build_structure');\n        $this->readerPool->interpret(\n            $this->getReaderContext(), \n            $this->getNode()\n        );\n        /* ... */\n    }\n\n    $generatorContext = $this->generatorContextFactory->create(\n        [\n            'structure' => $this->structure,\n            'layout' => $this,\n        ]\n    );\n\n    /* ... */\n    $this->generatorPool->process($this->getReaderContext(), $generatorContext);\n    /* ... */    \n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping the Static Asset Server in PHP\nDESCRIPTION: This snippet shows how Magento bootstraps the static asset server application through static.php, creating and running the StaticResource application.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/_url_writing.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nrequire realpath(__DIR__) . '/../app/bootstrap.php';\n$bootstrap = \\Magento\\Framework\\App\\Bootstrap::create(BP, $_SERVER);\n/** @var \\Magento\\Framework\\App\\StaticResource $app */\n$app = $bootstrap->createApplication(\\Magento\\Framework\\App\\StaticResource::class);\n$bootstrap->run($app);\n```\n\n----------------------------------------\n\nTITLE: Applying Page Template in Magento Layout Helper (PHP)\nDESCRIPTION: The applyTemplate method in the Mage_Page_Helper_Layout class applies the selected page template to the root block of the layout.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/6_cms_page.markdown#2025-04-18_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function applyTemplate($pageLayout = null)\n{\n    if ($pageLayout === null) {\n        $pageLayout = $this->getCurrentPageLayout();\n    } else {\n        $pageLayout = $this->_getConfig()->getPageLayout($pageLayout);\n    }\n\n    if (!$pageLayout) {\n        return $this;\n    }\n\n    if ($this->getLayout()->getBlock('root') &&\n        !$this->getLayout()->getBlock('root')->getIsHandle()) {\n            // If not applied handle\n            $this->getLayout()\n                ->getBlock('root')\n                ->setTemplate($pageLayout->getTemplate());\n    }\n\n    return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Grunt Tasks\nDESCRIPTION: This command shows all available Grunt tasks that can be run in the Magento project.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-frontend-build.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ grunt --help\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic CSS File for Magento 2\nDESCRIPTION: Example of creating a simple CSS file that changes the background color of the body element, showing where to place it in the module directory structure.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_7\n\nLANGUAGE: css\nCODE:\n```\nbody {\n    background-color:#f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading RequireJS and Magento-specific scripts in HTML\nDESCRIPTION: This snippet shows the three crucial script tags used to load RequireJS, Magento's mixins system, and the dynamically generated RequireJS configuration in Magento 2.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-8-frontend-javascript.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script  type=\"text/javascript\"  src=\"http://magento.example.com/static/version1514092162/frontend/Magento/luma/en_US/requirejs/require.js\"></script>\n<script  type=\"text/javascript\"  src=\"http://magento.example.com/static/version1514092162/frontend/Magento/luma/en_US/mage/requirejs/mixins.js\"></script>\n<script  type=\"text/javascript\"  src=\"http://magento.example.com/static/version1514092162/_requirejs/frontend/Magento/luma/en_US/requirejs-config.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Rendering CMS Page Content in Magento PHP\nDESCRIPTION: PHP code from Mage_Cms_Block_Page class showing how the CMS page content is rendered. It retrieves the page content, processes it through a template processor, and adds any system messages.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/6_cms_page.markdown#2025-04-18_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function _toHtml()\n{\n    /* @var $helper Mage_Cms_Helper_Data */\n    $helper = Mage::helper('cms');\n    $processor = $helper->getPageTemplateProcessor();\n    $html = $processor->filter($this->getPage()->getContent());\n    $html = $this->getMessagesBlock()->getGroupedHtml() . $html;\n    return $html;\n}\n```\n\n----------------------------------------\n\nTITLE: Block Ordering with After Attribute in Magento XML\nDESCRIPTION: Shows how to position a block after another block using the 'after' attribute in layout XML.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/5_advanced_layout_features.markdown#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<block type=\"core/text\" name=\"line\" after=\"six\">\n\t<action method=\"setText\"><text><![CDATA[<hr/>]]></text></action>\n</block>\n```\n\n----------------------------------------\n\nTITLE: Complex Block Insertion in Magento Layout XML\nDESCRIPTION: Example of inserting a styled divider block after a specific block in the content reference.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/5_advanced_layout_features.markdown#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<reference name=\"content\">\n\t<block type=\"core/text\" name=\"fakeline\" after=\"four\">\n\t\t<action method=\"setText\">\n\t\t\t<text><![CDATA[<div style=\"border-color:black;border-style:solid;border-top:1px;width:300px;\"></div>]]></text>\n\t\t</action>\n\t</block>\n</reference>\n```\n\n----------------------------------------\n\nTITLE: Page Config Building Process\nDESCRIPTION: Shows how the Page Config class delegates the build process to its builder property, exposing a public build method that will eventually be removed.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n/**\n * TODO Will be eliminated in MAGETWO-28359\n * @return void\n */\npublic function publicBuild()\n{\n    $this->build();\n}\n\nprotected function build()\n{        \n    if (!empty($this->builder)) {\n        $this->builder->build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Layout Elements in Magento PHP\nDESCRIPTION: The main layout generation method that triggers reader and generator pools to process the page layout XML. It interprets the XML nodes and processes them to create the actual layout structure.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function generateElements()\n{\n    /* ... */\n    if ($result) {\n        /* ... */\n    } else {\n        /* ... */\n        $this->readerPool->interpret($this->getReaderContext(), $this->getNode());\n        /* ... */\n    }\n\n    /* ... */\n    \n    $this->generatorPool->process($this->getReaderContext(), $generatorContext);\n\n    /* ... */\n    \n    $this->addToOutputRootContainers();\n    \\Magento\\Framework\\Profiler::stop(__CLASS__ . '::' . __METHOD__);\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Objects in Raw PHP vs Magento\nDESCRIPTION: Compares the standard PHP object instantiation with Magento's factory method approach using class aliases.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/b_appendix_class_alias.markdown#2025-04-18_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$customer = new Product();\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$customer = Mage::getModel('catalog/product');\n```\n\n----------------------------------------\n\nTITLE: Processing Generator Pool in Magento Layout System\nDESCRIPTION: This method processes layout generators by first building the structure from scheduled instructions, then iterating through individual generators. Each generator transforms scheduled layout instructions into actual layout elements.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\npublic function process(Reader\\Context $readerContext, Generator\\Context $generatorContext)\n{\n    $this->buildStructure($readerContext->getScheduledStructure(), $generatorContext->getStructure());\n    foreach ($this->generators as $generator) {\n        $generator->process($readerContext, $generatorContext);\n    }\n    return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Module-Specific Less Rule\nDESCRIPTION: Example of adding a custom Less rule to a specific module folder within the theme structure.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-5-themes.md#2025-04-18_snippet_16\n\nLANGUAGE: less\nCODE:\n```\nbody.example-less-rule-in-mage-catalog{\n    background-color:#f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Head Template in Magento\nDESCRIPTION: Shows a simple example of a template file that will be rendered in the HTML head section when used with the head.additional block reference.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-9-frontend-advanced-topics.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- Hello There -->\n```\n\n----------------------------------------\n\nTITLE: Update Tag Example from Magento Core\nDESCRIPTION: A simple example from Magento core showing how the customer login layout is reused in the multi-shipping checkout page using the update tag.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/3_package_layout.markdown#2025-04-18_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<checkout_multishipping_login>\n\t<update handle=\"customer_account_login\"/>\n</checkout_multishipping_login>\n```\n\n----------------------------------------\n\nTITLE: Magento Widget Parameters Configuration XML\nDESCRIPTION: XML configuration showing the parameters section of a widget that defines data fields, validation rules, and UI rendering options for the YouTube video ID.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/7_widgets.markdown#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<parameters>\n\t<video_id>\n\t\t<required>1</required>\n\t\t<visible>1</visible>\n\t\t<value>Enter ID Here</value>\n\t\t<label>YouTube Video ID</label>\n\t\t<type>text</type>\n\t</video_id>\n</parameters>\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection Configuration for Layout in Magento\nDESCRIPTION: DI configuration that injects the readerPool into the Layout object. This shows how Magento configures the main reader pool using a virtual type.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<type name=\"Magento\\Framework\\View\\Layout\">\n    <arguments>\n        <argument name=\"readerPool\" xsi:type=\"object\" shared=\"false\">commonRenderPool</argument>\n        <argument name=\"cache\" xsi:type=\"object\">Magento\\Framework\\App\\Cache\\Type\\Layout</argument>\n    </arguments>\n</type>\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Layout Handles in Magento 2\nDESCRIPTION: The load method from Magento\\Framework\\View\\Model\\Layout\\Merge that processes an array of layout handles. This method initiates the merging of layout XML nodes for the requested handles.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n#File: vendor/magento/framework/View/Model/Layout/Merge.php\npublic function load($handles = [])\n{\n    if (is_string($handles)) {\n        $handles = [$handles];\n    } elseif (!is_array($handles)) {\n        throw new \\Magento\\Framework\\Exception\\LocalizedException(\n            new \\Magento\\Framework\\Phrase('Invalid layout update handle')\n        );\n    }\n\n    $this->addHandle($handles);\n\n    /* ... */\n\n    foreach ($this->getHandles() as $handle) {\n        $this->_merge($handle);\n    }\n\n    $layout = $this->asString();\n    /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protected Data Property in Varien_Object Class (PHP)\nDESCRIPTION: This snippet shows the definition of the protected $_data property in the Varien_Object class, which is used to store object attributes as an array.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/g_appendix_setters_and_getters.markdown#2025-04-18_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * Object attributes\n *\n * @var array\n */\nprotected $_data = array();\n```\n\n----------------------------------------\n\nTITLE: Counting LessCSS Files in Magento Vendor Directory\nDESCRIPTION: Command to count the total number of LessCSS files in the Magento vendor directory, showing the extensive use of LessCSS in Magento's theming system despite having only six top-level CSS imports.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ find vendor/magento/ -name '*.less' | wc -l\n 485\n\n$ find vendor/magento/ -name '*.less'\nvendor/magento//framework/Css/Test/Unit/PreProcessor/_files/invalid.less\nvendor/magento//framework/Css/Test/Unit/PreProcessor/_files/valid.less\n...\nvendor/magento//theme-frontend-luma/web/css/source/_theme.less\nvendor/magento//theme-frontend-luma/web/css/source/_variables.less\nvendor/magento//theme-frontend-luma/web/css/source/components/_modals_extend.less\n```\n\n----------------------------------------\n\nTITLE: Custom CSS/LESS File Replacement Example\nDESCRIPTION: A simple CSS example that demonstrates how to override Magento's default styles by creating a replacement file in the theme directory. This would change the background color of the body to red.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-5-themes.md#2025-04-18_snippet_13\n\nLANGUAGE: css\nCODE:\n```\nbody{\n    background-color:#f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Two-Column Left Layout Handle in Magento (XML)\nDESCRIPTION: This XML snippet shows the layout handle for the two-column left layout, which sets the template for the root block.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/6_cms_page.markdown#2025-04-18_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<page_two_columns_left translate=\"label\">\n    <label>All Two-Column Layout Pages (Left Column)</label>\n    <reference name=\"root\">\n        <action method=\"setTemplate\">\n            <template>page/2columns-left.phtml</template>\n        </action>\n        <!-- Mark root page block that template is applied -->\n    </reference>\n</page_two_columns_left>\n```\n\n----------------------------------------\n\nTITLE: Referencing the Root Block in Magento Layout\nDESCRIPTION: Shows the reference to the 'root' block, which is typically the main output block that renders the page template in Magento layouts.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/4_bringing_it_together.markdown#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<code>root</code>\n```\n\n----------------------------------------\n\nTITLE: Setting Developer Mode in Magento's .htaccess File\nDESCRIPTION: Code snippet showing how to enable Magento's DEVELOPER_MODE using an Apache .htaccess file directive. This mode makes Magento less tolerant of small coding errors and displays fatal errors and exceptions.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/0_intro.markdown#2025-04-18_snippet_0\n\nLANGUAGE: Apache\nCODE:\n```\nSetEnv MAGE_IS_DEVELOPER_MODE 1\n```\n\n----------------------------------------\n\nTITLE: Preparing Pricing Layout in Magento 2\nDESCRIPTION: Example of a separate layout loading process used by the price renderer. This demonstrates how Magento can load additional layout handles during block initialization, showing that layout loading isn't always a one-time process.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nprotected function _prepareLayout()\n{\n    $this->priceLayout->addHandle($this->getPriceRenderHandle());\n    $this->priceLayout->loadLayout();\n    return parent::_prepareLayout();\n}\n```\n\n----------------------------------------\n\nTITLE: ReaderPool Interpret Method Call in Magento Layout\nDESCRIPTION: Call to the readerPool's interpret method that processes the XML layout tree. This begins the parsing of the layout update XML structure.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$this->readerPool->interpret($this->getReaderContext(), $this->getNode());\n```\n\n----------------------------------------\n\nTITLE: ReaderPool Interpret Method Implementation in Magento\nDESCRIPTION: The implementation of the ReaderPool interpret method that loops through XML nodes and delegates to specific reader objects based on node names. This method orchestrates the interpretation of layout XML.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function interpret(Reader\\Context $readerContext, Layout\\Element $element)\n{            \n    $this->prepareReader($this->readers);\n    /** @var $node Layout\\Element */\n    foreach ($element as $node) {\n        $nodeName = $node->getName();\n        if (!isset($this->nodeReaders[$nodeName])) {\n            continue;\n        }\n        /** @var $reader Layout\\ReaderInterface */\n        $reader = $this->nodeReaders[$nodeName];\n        $reader->interpret($readerContext, $node, $element);\n    }\n    return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Examining Magento's Main LessCSS File Structure with Import Directives\nDESCRIPTION: Content of Magento's styles-l.less file showing how Magento organizes its LessCSS files using @import and @magento_import directives. This demonstrates how Magento modularizes its styling system.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_16\n\nLANGUAGE: less\nCODE:\n```\n#File: vendor/magento/theme-frontend-blank/web/css/styles-l.less\n\n//...\n\n@import '_styles.less';\n@import (reference) 'source/_extends.less';\n\n//\n//  Magento Import instructions\n//  ---------------------------------------------\n\n//@magento_import 'source/_module.less'; // Theme modules\n//@magento_import 'source/_widgets.less'; // Theme widgets\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Magento Autoloader Implementation\nDESCRIPTION: Implementation of Magento's custom autoloader load method\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-autoload.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function load($className)\n{\n    if (!class_exists($className)) {\n        return Generator::GENERATION_ERROR != $this->_generator->generateClass($className);\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing a Container in Magento Layout XML\nDESCRIPTION: Shows how to reference an existing container named 'content' in a theme's layout XML file. This is a common pattern used to add new blocks to predefined page regions.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-5-themes.md#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<referenceContainer name=\"content\">\n    <!-- ... -->\n</referenceContainer>\n```\n\n----------------------------------------\n\nTITLE: Setting Layout in Magento 2 Block Generator\nDESCRIPTION: This loop in Magento\\Framework\\View\\Layout\\Generator\\Block sets the layout for generated blocks, triggering _prepareLayout for each block.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_58\n\nLANGUAGE: php\nCODE:\n```\nforeach ($blocks as $elementName => $block) {\n    try {\n        $block->setLayout($layout);\n        $this->eventManager->dispatch('core_layout_block_create_after', ['block' => $block]);\n    } catch (\\Exception $e) {\n        $this->handleRenderException($e);\n        $layout->setBlock(\n            $elementName,\n            $this->exceptionHandlerBlockFactory->create(['blockName' => $elementName])\n        );\n        unset($blockActions[$elementName]);\n    }\n    $scheduledStructure->unsetElement($elementName);\n}\n```\n\n----------------------------------------\n\nTITLE: XML Layout Update for CMS Pages\nDESCRIPTION: Example of an XML layout update that can be added to a CMS page to include an additional text block.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/6_cms_page.markdown#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<reference name=\"content\">\n    <block type=\"core/text\" name=\"redundant\">\n        <action method=\"setText\"><text>Hello Again</text></action>\n    </block>\n</reference>\n```\n\n----------------------------------------\n\nTITLE: Using Update Handle Directive in Magento Layout XML\nDESCRIPTION: Shows the syntax for the update handle directive that tells the Layout Update Manager to fetch additional nodes based on a specified handle.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/4_bringing_it_together.markdown#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<code>&lt;update handle=\"...\"/&gt;</code>\n```\n\n----------------------------------------\n\nTITLE: Controller Method Without Custom Layout Handle\nDESCRIPTION: Example of a controller's execute method that creates a page result without adding any custom layout handles. This relies on Magento's default handling of layout handles.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-3-layouthandles.md#2025-04-18_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n#File: app/code/Pulsestorm/Nofrillslayout/Controller/Chapter3/Index.php\npublic function execute()\n{\n    $pageObject = $this->resultPageFactory->create();\n    //$pageObject->addHandle('our_custom_handle');\n    return $pageObject;\n}\n```\n\n----------------------------------------\n\nTITLE: Page Layout Reader Process\nDESCRIPTION: Shows how the Page Layout Reader loads the specific page layout (like 1column, 2columns-left) and passes it to the reader for interpretation, creating a SimpleXML object in the process.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_43\n\nLANGUAGE: php\nCODE:\n```\npublic function read(Layout\\Reader\\Context $readerContext, $pageLayout)\n{\n    $this->getPageLayoutMerge()->load($pageLayout);\n    $xml = $this->getPageLayoutMerge()->asSimplexml();\n    $this->reader->interpret($readerContext, $xml);\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced YouTube Widget with Dynamic Video ID - PHP\nDESCRIPTION: Updated widget implementation with configurable video ID using Magento's magic getter/setter methods.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/7_widgets.markdown#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Nofrills_Booklayout_Block_Youtube extends Mage_Core_Block_Abstract\nimplements Mage_Widget_Block_Interface\n{\n\tprotected function _toHtml()\n\t{\t\t\t\n\t\t$this->setVideoId('dQw4w9WgXcQ');\t\n\t\treturn '\n\t\t\t<object width=\"640\" height=\"505\">\n\t\t\t\t<param name=\"movie\" value=\"http://www.youtube.com/v/' .\n\t\t\t\t$this->getVideoId() . \t\t\t\t\t\n\t\t\t\t'?fs=1&amp;hl=en_US\"></param>\n\t\t\t\t<param name=\"allowFullScreen\" value=\"true\"></param>\n\t\t\t\t<param name=\"allowscriptaccess\" value=\"always\"></param>\n\t\t\t\t<embed src=\"http://www.youtube.com/v/' .\n\t\t\t\t$this->getVideoId() . \n\t\t\t\t'?fs=1&amp;hl=en_US\" \n\t\t\t\ttype=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" ' . \n\t\t\t\t'allowfullscreen=\"true\" width=\"640\" height=\"505\"></embed>\n\t\t\t</object>\t\t\t\n\t\t';\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Module Archive Files\nDESCRIPTION: Command to extract the Pulsestorm_Nofrills module files from a tar.gz archive.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-install-module.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntar -zxvf Pulsestorm_Nofrills.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Custom Page-Specific Layout Handle in local.xml\nDESCRIPTION: This XML snippet demonstrates how to add content to a specific page using the Full Action Name handle. It creates a text block with 'Hello Mars' content and places it in the content reference block.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/3_package_layout.markdown#2025-04-18_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<!-- #File: app/design/frontend/default/nofrills_layoutbook/layout/local.xml -->\n<?xml version=\"1.0\"?>\n<layout version=\"0.1.0\">\n\t<nofrills_booklayout_package_index>\n\t\t<reference name=\"content\">\n\t\t\t<block type=\"core/text\" name=\"our_message\">\n\t\t\t\t<action method=\"setText\"><text>Hello Mars</text></action>\n\t\t\t</block>\n\t\t</reference>\n\t</nofrills_booklayout_package_index>\n</layout>\n```\n\n----------------------------------------\n\nTITLE: Basic Main Function with Manual Dependency Injection\nDESCRIPTION: Demonstrates a simple approach where a main function instantiates all objects and passes them to functions that need them, showing the concept of dependency injection without automation.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-di.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction main()\n{\n    $object1 = new SomeClass;\n    $object2 = new SomeOtherClass;\n    //...\n    someFunction($object1);\n    \n    someOtherFunction($object1, $object2)\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Layout Output in Magento 2\nDESCRIPTION: Method that generates the final HTML output by rendering all elements in the output array. This triggers the recursive rendering of the entire layout tree, starting from the root containers.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_33\n\nLANGUAGE: php\nCODE:\n```\npublic function getOutput()\n{\n    $this->build();\n    $out = '';\n    foreach ($this->_output as $name) {\n        $out .= $this->renderElement($name);\n    }\n    return $out;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Magento Layout Updates from Database in SQL\nDESCRIPTION: SQL query to retrieve layout update XML fragments from the core_layout_update table. These fragments contain layout modifications that are applied when building page layouts and are used by widgets.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/7_widgets.markdown#2025-04-18_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nselect * from core_layout_update;  \n+------------------+----------------------+---------+------------+\n| layout_update_id | handle               | xml     | sort_order |\n+------------------+----------------------+----------------------+\n|                1 | default \t\t\t  | [...]   |          0 |\n+------------------+----------------------+----------------------+\n```\n\n----------------------------------------\n\nTITLE: Template Path Examples in Magento Areas\nDESCRIPTION: Directory structure examples showing how template files are organized in different Magento 2 areas.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-areas.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nvendor/magento/module-catalog/view/frontend/templates/\nvendor/magento/module-catalog/view/adminhtml/templates/\n```\n\n----------------------------------------\n\nTITLE: Creating the Page Layout Merge Object\nDESCRIPTION: Shows how the Page Layout Reader creates a new Merge object to process page layout XML files, utilizing factory objects and theme resolution to find the right files.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nprotected function getPageLayoutMerge()\n{\n    if ($this->pageLayoutMerge) {\n        return $this->pageLayoutMerge;\n    }\n    $this->pageLayoutMerge = $this->processorFactory->create([\n        'theme'       => $this->themeResolver->get(),\n        'fileSource'  => $this->pageLayoutFileSource,\n        'cacheSuffix' => self::MERGE_CACHE_SUFFIX,\n    ]);\n    return $this->pageLayoutMerge;\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing CSS Link Tags in Magento 2 HTML Source\nDESCRIPTION: Example of how Magento 2 includes CSS stylesheets in the HTML head of a page, showing the URL patterns used for static assets.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link  rel=\"stylesheet\" type=\"text/css\"  media=\"all\" href=\"http://magento.example.com/static/version1484770320/frontend/Magento/luma/en_US/css/styles-m.css\" />\n<link  rel=\"stylesheet\" type=\"text/css\"  media=\"screen and (min-width: 768px)\" href=\"http://magento.example.com/static/version1484770320/frontend/Magento/luma/en_US/css/styles-l.css\" />\n<link  rel=\"stylesheet\" type=\"text/css\"  media=\"print\" href=\"http://magento.example.com/static/version1484770320/frontend/Magento/luma/en_US/css/print.css\" />\n```\n\n----------------------------------------\n\nTITLE: Copying Magento Package Configuration File\nDESCRIPTION: This command navigates to the Magento root directory and creates a package.json file from the sample provided by Magento.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-frontend-build.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /path/to/magento\n$ cp package.json.sample package.json\n```\n\n----------------------------------------\n\nTITLE: Secondary Action Layout Handle in Magento\nDESCRIPTION: This controller action method and corresponding layout XML show how to create content for a second page. The secondAction method loads and renders the layout, while the layout XML adds a 'Hello Jupiter' text block.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/3_package_layout.markdown#2025-04-18_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n#http://magento.example.com/nofrills_booklayout/package/second\npublic function secondAction()\n{\n\t$this->loadLayout();\n\t$this->renderLayout();\t\t\t\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- #File: app/design/frontend/default/nofrills_layoutbook/layout/local.xml -->\n<layout version=\"0.1.0\">\n\t<!-- ... -->\n\t<nofrills_booklayout_package_second>\n\t\t<reference name=\"content\">\n\t\t\t<block type=\"core/text\" name=\"our_message\">\n\t\t\t\t<action method=\"setText\"><text>Hello Jupiter</text></action>\n\t\t\t</block>\n\t\t</reference>\n\t</nofrills_booklayout_package_second>\n\t<!-- ... -->\n</layout>\n```\n\n----------------------------------------\n\nTITLE: Referencing a Text List Block Type in Magento\nDESCRIPTION: Shows the block type identifier for a text list block, which automatically renders all of its child blocks in Magento layouts.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/4_bringing_it_together.markdown#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<code>core/text\\_list</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Hidden Widget Parameter in Magento XML\nDESCRIPTION: The simplest configuration for a Magento widget parameter, creating a hidden field that will always contain a specific value. The parameter is not visible in the UI but will be included in the widget's configuration.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/h_widget_field_rendering_options.markdown#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<parameters>\n\t<our_parameter>\n\t\t<visible>0</visible>\n\t\t<required>1</required>\n\t\t<value>foobazbar</value>\n\t\t<type>text</type>\n\t</our_parameter>\n</parameters>\n```\n\n----------------------------------------\n\nTITLE: Configuring Magento Mode in env.php Configuration File\nDESCRIPTION: Example of how the MAGE_MODE setting appears in the app/etc/env.php configuration file when set to production mode. This file is modified when using the deploy:mode:set command.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-magento-modes.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n#File: app/etc/env.php\n  \n  'MAGE_MODE' => 'production',\n```\n\n----------------------------------------\n\nTITLE: Magento Module Enable Command\nDESCRIPTION: Command to enable a Magento module\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-cli.md#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/magento module:enable Foo_Bar\n```\n\n----------------------------------------\n\nTITLE: Magento Module PSR-4 Composer Configuration\nDESCRIPTION: Shows how Magento configures PSR-4 autoloading in a module's composer.json\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-autoload.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n    \"psr-4\": {\n        \"Magento\\\\Catalog\\\\\": \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Head Tag Attributes in Magento Layout XML\nDESCRIPTION: Demonstrates how to set attributes on the HTML <head> tag using the <attribute/> directive in Magento layout XML.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-9-frontend-advanced-topics.md#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<head>\n    <attribute name=\"foo\" value=\"bar\" />\n</head>\n```\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head foo=\"bar\">\n    </head>\n    <body>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Block Generation in Magento 1 Layout System\nDESCRIPTION: The generateBlocks method from Magento 1's core/layout model that recursively processes layout XML nodes to create blocks. This is shown for comparison with Magento 2's more complex approach.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n#File: app/code/core/Mage/Core/Model/Layout.php\npublic function generateBlocks($parent=null)\n{\n    if (empty($parent)) {\n        $parent = $this->getNode();\n    }\n    foreach ($parent as $node) {\n        $attributes = $node->attributes();\n        if ((bool)$attributes->ignore) {\n            continue;\n        }\n        switch ($node->getName()) {\n            case 'block':\n                $this->_generateBlock($node, $parent);\n                $this->generateBlocks($node);\n                break;\n\n            case 'reference':\n                $this->generateBlocks($node);\n                break;\n\n            case 'action':\n                $this->_generateAction($node, $parent);\n                break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Handle in local.xml for Global Content\nDESCRIPTION: This XML snippet shows how to use the default handle in local.xml to add content that appears on all pages. It creates a text block with the message 'I am on all pages!'.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/3_package_layout.markdown#2025-04-18_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<layout>\n\t<!-- ... -->\n\t<default>\n\t\t<reference name=\"content\">\n\t\t\t<block type=\"core/text\" name=\"for_everyone\">\n\t\t\t\t<action method=\"setText\">\n\t\t\t\t\t<text>I am on all pages!</text>\n\t\t\t\t</action>\n\t\t\t</block>\t\t\t\t\t\n\t\t</reference>\t\t\n\t</default>\n\n\t<!-- ... -->\n</layout>\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Alert Example\nDESCRIPTION: A simple JavaScript alert example showing raw JavaScript usage in Magento 2. This demonstrates the most basic form of adding JavaScript functionality to a Magento page.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-8-frontend-javascript.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nalert(\"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating getData Method Usage in Magento (PHP)\nDESCRIPTION: This code snippet demonstrates how to use the getData method to retrieve all key/value pairs of an object's data.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/g_appendix_setters_and_getters.markdown#2025-04-18_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nvar_dump($object->getData());\n```\n\n----------------------------------------\n\nTITLE: HTML Meta Tags for CMS Pages\nDESCRIPTION: Examples of HTML meta tags for keywords and description that are generated based on CMS page fields.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/6_cms_page.markdown#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"keywords\" content=\"This is a test of the keywords.\" />\n<meta name=\"description\" content=\"Describing the meta.\" />\n```\n\n----------------------------------------\n\nTITLE: Magento CLI List Commands\nDESCRIPTION: Command to list all available Magento CLI commands\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-cli.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/magento list\n...\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Static Asset Handling\nDESCRIPTION: Nginx server configuration that handles static asset requests in Magento, stripping the version slug from URLs and routing requests for non-existent files to static.php for dynamic generation.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/_url_writing.md#2025-04-18_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\nlocation ~ ^/static/version {\n    rewrite ^/static/(version\\d*/)?(.*)$ /static/$2 last;\n}\n\nif (!-f $request_filename) {\n    rewrite ^/static/?(.*)$ /static.php?resource=$1 last;\n}\n```\n\n----------------------------------------\n\nTITLE: StaticResource Launch Method Implementation\nDESCRIPTION: Core implementation of Magento 2's static resource serving logic, handling production/development modes and asset publishing.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-9-frontend-advanced-topics.md#2025-04-18_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic function launch()\n{\n    // disabling profiling when retrieving static resource\n    \\Magento\\Framework\\Profiler::reset();\n    $appMode = $this->state->getMode();\n    if ($appMode == \\Magento\\Framework\\App\\State::MODE_PRODUCTION) {\n        $this->response->setHttpResponseCode(404);\n    } else {\n        $path = $this->request->get('resource');\n        $params = $this->parsePath($path);\n        $this->state->setAreaCode($params['area']);\n        $this->objectManager->configure($this->configLoader->load($params['area']));\n        $file = $params['file'];\n        unset($params['file']);\n        $asset = $this->assetRepo->createAsset($file, $params);\n        $this->response->setFilePath($asset->getSourceFile());\n        $this->publisher->publish($asset);\n    }\n    return $this->response;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Description to Widget Parameter Field in Magento XML\nDESCRIPTION: Enhancing a widget parameter with a description node to provide instructional text to users. This helps explain the purpose or expected input for the field.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/h_widget_field_rendering_options.markdown#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<parameters>\n\t<our_parameter>\n\t\t<visible>1</visible>\n\t\t<required>1</required>\n\t\t<label>Label for our Parameter</label>\n\t\t<type>text</type>\n\t\t<value>bazbarfoo</value>\n\t\t<sort_order>10</sort_order>\n\t\t<description>\n\t\t\tThis is the field where we put the thing\n\t\t</description>\n\t</our_parameter>\n</parameters>\n```\n\n----------------------------------------\n\nTITLE: Two-Column Template in Magento\nDESCRIPTION: A template file for a two-column layout that renders child blocks using getChildHtml method. This template is used by the root block and provides the basic HTML structure of the page.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\" />\n\t<title></title>\n\t<?php echo $this->getChildhtml('additional_head'); ?>\n</head>\n<body>\n\t<?php echo $this->getChildhtml('sidebar'); ?>\n\t<section>\n\t<?php echo $this->getChildhtml('content'); ?>\n\t</section>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: BodyRenderPool Virtual Type Configuration in Magento\nDESCRIPTION: Virtual type configuration for the bodyRenderPool used by the Body reader. This defines a subset of readers for processing nodes inside <body> tags.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<virtualType name=\"bodyRenderPool\" type=\"Magento\\Framework\\View\\Layout\\ReaderPool\">\n    <arguments>\n        <argument name=\"readers\" xsi:type=\"array\">\n            <item name=\"container\" xsi:type=\"string\">Magento\\Framework\\View\\Layout\\Reader\\Container</item>\n            <item name=\"block\" xsi:type=\"string\">Magento\\Framework\\View\\Layout\\Reader\\Block</item>\n            <item name=\"move\" xsi:type=\"string\">Magento\\Framework\\View\\Layout\\Reader\\Move</item>\n            <item name=\"uiComponent\" xsi:type=\"string\">Magento\\Framework\\View\\Layout\\Reader\\UiComponent</item>\n        </argument>\n    </arguments>\n</virtualType>\n```\n\n----------------------------------------\n\nTITLE: Package Layout Basic Structure in XML\nDESCRIPTION: The basic structure of a Package Layout XML tree, with a top-level <layouts> node containing multiple handle nodes, each containing XML Update Fragments.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/3_package_layout.markdown#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<layouts>\n\t<!-- ... --->\n</layouts>\n```\n\n----------------------------------------\n\nTITLE: Basic PHP Object Instantiation Examples\nDESCRIPTION: Shows the standard ways to instantiate objects in PHP, including using the 'new' keyword and static factory methods.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-di.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$object = new SomeClassName;\n$object = SomeClassName::createObject();\n```\n\n----------------------------------------\n\nTITLE: Running Grunt Clean Task\nDESCRIPTION: This command runs the Grunt clean task which clears generated front end files and cached/preprocessed LessCSS views.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-frontend-build.md#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ grunt clean\n```\n\n----------------------------------------\n\nTITLE: Creating Page Layout Merge Object in Magento 2\nDESCRIPTION: This snippet demonstrates how the page layout merge object is created with a processor factory, passing in the theme, file source, and a specific cache suffix. This creates a separate instance from the main layout update object.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nprotected function getPageLayoutMerge()\n{\n    if ($this->pageLayoutMerge) {\n        return $this->pageLayoutMerge;\n    }\n    $this->pageLayoutMerge = $this->processorFactory->create([\n        'theme'       => $this->themeResolver->get(),\n        'fileSource'  => $this->pageLayoutFileSource,\n        'cacheSuffix' => self::MERGE_CACHE_SUFFIX,\n    ]);\n    return $this->pageLayoutMerge;\n}\n```\n\n----------------------------------------\n\nTITLE: Static Asset URL Patterns in Magento 2\nDESCRIPTION: Demonstrates the two different URL patterns for static assets depending on which webroot is being used to serve Magento.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttp://magento.example.com/pub/static/...\n\nvs.\n\nhttp://magento.example.com/static/...\n```\n\n----------------------------------------\n\nTITLE: Setting Data in Magento Objects (PHP)\nDESCRIPTION: These snippets show different ways to set data in Magento objects, including setting a single key-value pair and setting multiple key-value pairs at once.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/g_appendix_setters_and_getters.markdown#2025-04-18_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$object->setData('the_key', 'value');\n\n$value = $object->setData(array(\n'the_key'=>'value'\n'the_thing'=>$thing,\n));\n```\n\n----------------------------------------\n\nTITLE: Referencing XML Layout Configuration in Magento Module\nDESCRIPTION: Shows how a Magento module's config.xml file can be used to add custom XML files to the Layout.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/4_bringing_it_together.markdown#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<code>config.xml</code>\n```\n\n----------------------------------------\n\nTITLE: CommonRenderPool Virtual Type Configuration in Magento\nDESCRIPTION: Virtual type configuration for the commonRenderPool used by the main Layout object. This defines which reader classes handle different types of XML nodes.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<virtualType name=\"commonRenderPool\" type=\"Magento\\Framework\\View\\Layout\\ReaderPool\">\n    <arguments>\n        <argument name=\"readers\" xsi:type=\"array\">\n            <item name=\"html\" xsi:type=\"string\">Magento\\Framework\\View\\Page\\Config\\Reader\\Html</item>\n            <item name=\"head\" xsi:type=\"string\">Magento\\Framework\\View\\Page\\Config\\Reader\\Head</item>\n            <item name=\"body\" xsi:type=\"string\">Magento\\Framework\\View\\Page\\Config\\Reader\\Body</item>\n            <item name=\"container\" xsi:type=\"string\">Magento\\Framework\\View\\Layout\\Reader\\Container</item>\n            <item name=\"block\" xsi:type=\"string\">Magento\\Framework\\View\\Layout\\Reader\\Block</item>\n            <item name=\"move\" xsi:type=\"string\">Magento\\Framework\\View\\Layout\\Reader\\Move</item>\n            <item name=\"uiComponent\" xsi:type=\"string\">Magento\\Framework\\View\\Layout\\Reader\\UiComponent</item>\n        </argument>\n    </arguments>\n</virtualType>\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty Widget Configuration - XML\nDESCRIPTION: Basic widget.xml configuration file structure placed in the module's etc folder.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/7_widgets.markdown#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- #File: app/code/local/Nofrills/Booklayout/etc/widget.xml -->\n<widgets>\n</widgets>\n```\n\n----------------------------------------\n\nTITLE: Magento Help Command\nDESCRIPTION: Command to get help for a specific Magento command\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-cli.md#2025-04-18_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/magento help module:enable\n```\n\n----------------------------------------\n\nTITLE: Verifying Grunt Installation\nDESCRIPTION: This command checks if Grunt CLI is properly installed by displaying its version number.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-frontend-build.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ grunt -V\ngrunt-cli v1.2.0\n```\n\n----------------------------------------\n\nTITLE: Reference Controller Implementation for Magento Layout\nDESCRIPTION: Complete controller class showing layout initialization, processing, and output methods. This controller demonstrates a pattern for handling layout updates and references in Magento.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n#File: app/code/local/Nofrills/Booklayout/controllers/ReferenceController.php\n#URL:  http://magento.example.com/nofrills_booklayout/reference\nclass Nofrills_Booklayout_ReferenceController \nextends Mage_Core_Controller_Front_Action\n{\n\t\n\t/**\n\t* Use to set the base page structure\n\t*/\t\n\tprotected function _initLayout()\n\t{\n\t\t$path_page = Mage::getModuleDir('', 'Nofrills_Booklayout') . DS . \n\t\t'page-layouts' . DS . 'page.xml';\t\t\t\t\t\n\t\t$xml = file_get_contents($path_page); \t\n\t\t$layout = Mage::getSingleton('core/layout')\n\t\t->getUpdate()\n\t\t->addUpdate($xml);\t\t\t\n\t}\n\n\t/**\n\t* Use to send output \n\t*/\t\t\n\tprotected function _sendOutput()\n\t{\n\t\t$layout = Mage::getSingleton('core/layout');\n\t\t\n\t\t$layout->generateXml()\n\t\t->generateBlocks();\n\t\t\n\t\techo $layout->setDirectOutput(false)->getOutput();\n\t}\n\t\n\t\n\tpublic function indexAction()\n\t{\n\t\t$this->_initLayout();\n\t\t$this->_sendOutput();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Update Manager and Adding XML Fragment\nDESCRIPTION: Code snippet that demonstrates how to get the Layout Update Manager, add an XML update fragment, and generate the XML. This is a core part of Magento's layout processing system.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$update_manager = $layout->getUpdate();\t\t\t\n$update_manager->addUpdate('<block \ntype=\"nofrills_booklayout/helloworld\" \nname=\"root\" \noutput=\"toHtml\" />');\t\t\t\n$layout->generateXml();\n```\n\n----------------------------------------\n\nTITLE: Base Package Theme Path in Magento\nDESCRIPTION: Shows the file system path to the base package default theme, which serves as the final fallback location for template files in Magento.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/e_theme_and_layout_resolution.markdown#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\napp/design/frontend/base/default/*\n```\n\n----------------------------------------\n\nTITLE: Declaring a Local XML Layout File in Magento\nDESCRIPTION: Shows the usage of local.xml file as one method for users to add to the Package Layout in Magento.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/4_bringing_it_together.markdown#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<code>local.xml</code>\n```\n\n----------------------------------------\n\nTITLE: GeneratorPool Process Method Call in Magento Layout\nDESCRIPTION: Call to the generatorPool's process method that generates the actual layout elements after the XML has been interpreted by the readers.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$this->generatorPool->process($this->getReaderContext(), $generatorContext);\n```\n\n----------------------------------------\n\nTITLE: Adding Content to Head using head.additional Block in Magento\nDESCRIPTION: Shows how to add arbitrary HTML content to the <head> section of a Magento page by referencing and modifying the head.additional block.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-9-frontend-advanced-topics.md#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\">\n    <body>\n        <referenceBlock name=\"head.additional\">\n            <block  template=\"Pulsestorm_Nofrillslayout::chapter-9/head.phtml\"\n                    class=\"Pulsestorm\\Nofrillslayout\\Block\\Head\"\n                    name=\"pulsestorm_javascriptcssexample_block_head\" />\n        </referenceBlock>\n    </body>\n    <!-- ... -->\n</page>\n```\n\n----------------------------------------\n\nTITLE: Git Command Examples\nDESCRIPTION: Examples of Git sub-commands\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-cli.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ git add ...\n$ git status\n```\n\n----------------------------------------\n\nTITLE: Asset Creation and Publishing in Magento\nDESCRIPTION: These three lines demonstrate how Magento creates an asset, sets the file path in the response for the current request, and publishes the asset to the pub/static folder for future use.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/_url_writing.md#2025-04-18_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$asset = $this->assetRepo->createAsset($file, $params);\n$this->response->setFilePath($asset->getSourceFile());\n$this->publisher->publish($asset);\n```\n\n----------------------------------------\n\nTITLE: Setting Magento Mode via .htaccess Files\nDESCRIPTION: Examples showing how to set Magento operating mode through Apache .htaccess files. The MAGE_MODE environment variable can be set in both the root and pub/.htaccess files and will override env.php settings.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-magento-modes.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#File: .htaccess\nSetEnv MAGE_MODE \"developer\"\n\n#File: pub/.htaccess\nSetEnv MAGE_MODE \"developer\"\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for CMS Page Layouts\nDESCRIPTION: XML structure defining available page layouts for CMS pages in Magento's global configuration.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/6_cms_page.markdown#2025-04-18_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<page>\n    <layouts>\n        <empty module=\"page\" translate=\"label\">\n            <label>Empty</label>\n            <template>page/empty.phtml</template>\n            <layout_handle>page_empty</layout_handle>\n        </empty>\n        <one_column module=\"page\" translate=\"label\">\n            <label>1 column</label>\n            <template>page/1column.phtml</template>\n            <layout_handle>page_one_column</layout_handle>\n            <is_default>1</is_default>\n        </one_column>\n        <two_columns_left module=\"page\" translate=\"label\">\n            <label>2 columns with left bar</label>\n            <template>page/2columns-left.phtml</template>\n            <layout_handle>page_two_columns_left</layout_handle>\n        </two_columns_left>\n        <two_columns_right module=\"page\" translate=\"label\">\n            <label>2 columns with right bar</label>\n            <template>page/2columns-right.phtml</template>\n            <layout_handle>page_two_columns_right</layout_handle>\n        </two_columns_right>\n        <three_columns module=\"page\" translate=\"label\">\n            <label>3sum columns</label>\n            <template>page/3columns.phtml</template>\n            <layout_handle>page_three_columns</layout_handle>\n        </three_columns>\n    </layouts>\n</page>\n```\n\n----------------------------------------\n\nTITLE: Locating Default Magento Theme Directory\nDESCRIPTION: Shows the file system path to the default Magento theme directory in the frontend design structure.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/e_theme_and_layout_resolution.markdown#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napp/design/frontend/default/default/*\n```\n\n----------------------------------------\n\nTITLE: XML File Loading Utility Method for Magento\nDESCRIPTION: Helper method to load XML files from a specific directory, handling XML parsing and cleanup of XML declaration.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-2-layout-xml.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nprotected function loadXmlFromSampleXmlFolder($path)\n{\n    $path = realpath(__DIR__) . '/../sample-xml/'  . $path;\n    @$xml = simplexml_load_file($path);        \n    if(!$xml)\n    {\n        throw new \\Exception(\"Could not load valid XML from $path\");\n    }\n    return str_replace('<?xml version=\"1.0\"?>', '', $xml->asXml());\n}\n```\n\n----------------------------------------\n\nTITLE: Magento Import Directive Example in styles-l.less\nDESCRIPTION: Example of Magento's custom LessCSS import directive used to import widget styles across different modules and themes.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-5-themes.md#2025-04-18_snippet_14\n\nLANGUAGE: less\nCODE:\n```\n//@magento_import 'source/_widgets.less'; // Theme widgets\n```\n\n----------------------------------------\n\nTITLE: Magento Class Rewrite Configuration\nDESCRIPTION: Demonstrates how to configure a class rewrite in Magento, allowing for the replacement of core classes with custom implementations.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/b_appendix_class_alias.markdown#2025-04-18_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<models>\n  <catalog>\n    <rewrite>\n      <product_review>Yourpackage_Yourmodule_Model_Someclass</product_review>\n    </rewrite>\n  </catalog>\n</model>\n```\n\n----------------------------------------\n\nTITLE: Listing File Properties of a Static Asset\nDESCRIPTION: A bash command to display detailed file information for a specific CSS file in Magento's static content directory, showing file permissions, size, and last modification time.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/_url_writing.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nls -lh ./pub/static/frontend/Magento/luma/en_US/css/styles-m.css\n```\n\n----------------------------------------\n\nTITLE: Handling Production Mode in Magento's Static Asset Server\nDESCRIPTION: This code snippet shows how Magento returns a 404 status code when the application is in production mode, preventing dynamic serving of static assets for performance and security reasons.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/_url_writing.md#2025-04-18_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nif ($appMode == \\Magento\\Framework\\App\\State::MODE_PRODUCTION) {\n    $this->response->setHttpResponseCode(404);\n}\n```\n\n----------------------------------------\n\nTITLE: Two-Column Left Layout Configuration in Magento (XML)\nDESCRIPTION: This XML snippet defines the configuration for the two-column left layout, including the template and layout handle.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/6_cms_page.markdown#2025-04-18_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<two_columns_left module=\"page\" translate=\"label\">\n    <label>2 columns with left bar</label>\n    <template>page/2columns-left.phtml</template>\n    <layout_handle>page_two_columns_left</layout_handle>\n</two_columns_left>\n```\n\n----------------------------------------\n\nTITLE: Setting Execute Permissions for Magento CLI Tools\nDESCRIPTION: This command grants execute permissions to the 'pear' or 'mage' script in the Magento root folder, allowing it to be run as a program.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/j_magento_connect.markdown#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x pear\n```\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x mage\n```\n\n----------------------------------------\n\nTITLE: Checking for Static Asset Availability with curl Command\nDESCRIPTION: This bash command uses curl to verify whether a specific CSS file is accessible via Magento's frontend URL structure. The -I flag shows only the HTTP headers to confirm a successful 200 OK response.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/_url_writing.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -I 'http://magento-2-2-x.dev/pub/static/version1514092162/frontend/Pulsestorm/dram/en_US/css/styles-m.css'\n```\n\n----------------------------------------\n\nTITLE: Body Reader Interpret Method Implementation in Magento\nDESCRIPTION: The interpret method for the Body reader that processes <body> nodes in layout XML. It demonstrates how a reader delegates to another reader pool for nested nodes.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_17\n\nLANGUAGE: php\nCODE:\n```\npublic function interpret(\n    Layout\\Reader\\Context $readerContext,\n    Layout\\Element $bodyElement\n) {\n    /** @var \\Magento\\Framework\\View\\Layout\\Element $element */\n    foreach ($bodyElement as $element) {\n        if ($element->getName() === self::BODY_ATTRIBUTE) {\n            $this->setBodyAttributeToStructure($readerContext, $element);\n        }\n    }\n    $this->readerPool->interpret($readerContext, $bodyElement);\n    return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Template Processor in Magento PHP\nDESCRIPTION: PHP method from Mage_Cms_Helper_Data class that retrieves the page template processor. It uses configuration to determine the model class for the processor.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/6_cms_page.markdown#2025-04-18_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getPageTemplateProcessor()\n{\n    $model = (string)Mage::getConfig()\n    ->getNode(self::XML_NODE_PAGE_TEMPLATE_FILTER);\n    return Mage::getModel($model);\n}\n```\n\n----------------------------------------\n\nTITLE: PSR-4 Class Instantiation Example\nDESCRIPTION: Demonstrates how PSR-4 autoloading resolves class names to file paths\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-autoload.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$object = new \\Foo\\Baz\\Bar\\Bap;\n```\n\n----------------------------------------\n\nTITLE: Generator Context Creation (PHP)\nDESCRIPTION: This code creates a generator context containing the layout structure and a reference to the layout instance. These are passed to the generator pool for processing layout elements.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n#File: vendor/magento/framework/View/Layout.php\n\n$generatorContext = $this->generatorContextFactory->create(\n    [\n        'structure' => $this->structure,\n        'layout' => $this,\n    ]\n);\n\n/* ... */\n$this->generatorPool->process($this->getReaderContext(), $generatorContext);\n```\n\n----------------------------------------\n\nTITLE: Adding Handle and Loading Layout in Magento 2 Price Render\nDESCRIPTION: These methods in Magento\\Framework\\Pricing\\Render\\Layout add a handle and load the layout for the separate price rendering layout object.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_60\n\nLANGUAGE: php\nCODE:\n```\npublic function addHandle($handle)\n{\n    $this->layout->getUpdate()->addHandle($handle);\n}\n\npublic function loadLayout()\n{\n    $this->layout->getUpdate()->load();\n    $this->layout->generateXml();\n    $this->layout->generateElements();\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Files in Magento Vendor Directory\nDESCRIPTION: This command uses find to list all files and directories within the vendor/magento directory. It shows how find can be used without additional options to display the entire directory structure.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-unix-find.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ find vendor/magento\n```\n\n----------------------------------------\n\nTITLE: Searching for .phtml Files from Current Directory\nDESCRIPTION: This command demonstrates how to use find to search for .phtml files starting from the current directory. It uses the '.' notation to specify the current directory as the search starting point.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-unix-find.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ find . -name '*.phtml'\n```\n\n----------------------------------------\n\nTITLE: Body Reader Dependency Injection Configuration in Magento\nDESCRIPTION: DI configuration that injects a specific readerPool instance into the Body reader. This shows how Magento configures different reader pools for different node types.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<type name=\"Magento\\Framework\\View\\Page\\Config\\Reader\\Body\">\n    <arguments>\n        <argument name=\"readerPool\" xsi:type=\"object\">bodyRenderPool</argument>\n    </arguments>\n</type>\n```\n\n----------------------------------------\n\nTITLE: Empty Magento Layout XML Structure\nDESCRIPTION: This XML shows a minimal empty layout XML file that serves as a starting point for custom theme layouts. It contains only the XML declaration and an empty layout node with version attribute.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/3_package_layout.markdown#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- #File: app/design/frontend/default/nofrills_layoutbook/layout/page.xml -->\n<?xml version=\"1.0\"?>\n<layout version=\"0.1.0\">\n</layout>\n```\n\n----------------------------------------\n\nTITLE: Block Ordering with Before Attribute in Magento XML\nDESCRIPTION: Demonstrates how to position a block before another block using the 'before' attribute in layout XML.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/5_advanced_layout_features.markdown#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<block type=\"core/text\" name=\"line\" before=\"two\">\n\t<action method=\"setText\"><text><![CDATA[<hr/>]]></text></action>\n</block>\n```\n\n----------------------------------------\n\nTITLE: PHP Layout Block Generation\nDESCRIPTION: PHP equivalent code showing how blocks are created programmatically using the Magento layout singleton. Demonstrates block creation and output configuration.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$layout = new Mage::getSingleton('core/layout');\n$layout->createBlock('nofrills_booklayout/helloworld','root');\n$layout->addOutputBlock('root','toHtml')\n```\n\n----------------------------------------\n\nTITLE: Showing NonComposerComponentRegistration.php Glob Pattern\nDESCRIPTION: This code snippet from Magento's NonComposerComponentRegistration.php file demonstrates the glob pattern used to locate theme registration files in the app/design directory. This allows themes to be registered without requiring Composer installation.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-5-themes.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$pathList[] = dirname(__DIR__) . '/design/*/*/*/registration.php';\n```\n\n----------------------------------------\n\nTITLE: Saving curl responses to files\nDESCRIPTION: Examples showing how to save curl responses to files using both Unix redirection and curl's built-in options.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-curl.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl https://alanstorm.com/ > file.html\n$ curl https://api.twitter.com/1/statuses/alanstorm.json > file.json\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -O https://api.twitter.com/1/statuses/alanstorm.json\n$ cat alanstorm.json\n```\n\n----------------------------------------\n\nTITLE: Following redirects with curl\nDESCRIPTION: Shows how to use the -L option to make curl automatically follow HTTP redirects, which is useful when sites redirect from HTTP to HTTPS.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-curl.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -L http://alanstorm.com\n//...\n```\n\n----------------------------------------\n\nTITLE: Body Reader Constructor in Magento\nDESCRIPTION: Constructor for the Body reader that shows how it receives its own ReaderPool instance. This demonstrates the nested reader pools pattern.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_18\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct(\n    \\Magento\\Framework\\View\\Layout\\ReaderPool $readerPool)\n{\n    $this->readerPool = $readerPool;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom RequireJS Module in Magento 2\nDESCRIPTION: An example demonstrating how to use a custom RequireJS module alongside jQuery. This shows the module naming convention that uses the Magento module name as a namespace prefix.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-8-frontend-javascript.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\n    ['jquery', 'Pulsestorm_Nofrillslayout/messages'], \n    function(jQuery, messages){\n        var body = jQuery('body')[0];\n        jQuery(body).html(messages.getMessage())\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Parameters Configuration\nDESCRIPTION: Example of using dynamic parameters in layout XML with helper methods to generate values.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/5_advanced_layout_features.markdown#2025-04-18_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<action method=\"addLink\" translate=\"label title\" module=\"customer\">\n\t<label>My Account</label>\n\t<url helper=\"customer/getAccountUrl\"/>\n\t<title>My Account</title>\n\t<prepare/>\n\t<urlParams/>\n\t<position>10</position>\n</action>\n```\n\n----------------------------------------\n\nTITLE: Magento 2 Static Asset Server Bootstrap\nDESCRIPTION: PHP bootstrap code for Magento 2's static asset server, initializing the StaticResource application.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-9-frontend-advanced-topics.md#2025-04-18_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nrequire realpath(__DIR__) . '/../app/bootstrap.php';\n$bootstrap = \\Magento\\Framework\\App\\Bootstrap::create(BP, $_SERVER);\n/** @var \\Magento\\Framework\\App\\StaticResource $app */\n$app = $bootstrap->createApplication(\\Magento\\Framework\\App\\StaticResource::class);\n$bootstrap->run($app);\n```\n\n----------------------------------------\n\nTITLE: Examining Original Product Attribute Template in Magento\nDESCRIPTION: The original product attribute template file from Magento core that renders product attributes on the product details page. This template contains the HTML structure for displaying attribute labels and values.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-5-themes.md#2025-04-18_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php if ($_attributeValue): ?>\n<div class=\"product attribute <?php /* @escapeNotVerified */ echo $_className?>\">\n    <?php if ($_attributeLabel != 'none'): ?><strong class=\"type\"><?php /* @escapeNotVerified */ echo $_attributeLabel?></strong><?php endif; ?>\n    <div class=\"value\" <?php /* @escapeNotVerified */ echo $_attributeAddAttribute;?>><?php /* @escapeNotVerified */ echo $_attributeValue; ?></div>\n</div>\n<?php endif; ?>\n```\n\n----------------------------------------\n\nTITLE: Viewing Source Code in Google Chrome\nDESCRIPTION: Navigation path to access the raw HTML source in Google Chrome browser, showing the menu path to the View Source option.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-view-source.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nView -> Developer -> View Source\n```\n\n----------------------------------------\n\nTITLE: Checking 404 Response for Missing CSS File with Curl\nDESCRIPTION: Using curl to check the HTTP response for a CSS file that hasn't been created yet, showing a 404 error.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -I 'http://magento-2-2-x.dev/pub/static/version1514092162/frontend/Pulsestorm/dram/en_US/Pulsestorm_Nofrillslayout/chapter-7/example.css'\nHTTP/1.1 404 Not Found\nDate: Tue, 13 Feb 2018 02:56:24 GMT\nServer: Apache/2.4.28 (Unix) PHP/7.0.18\nX-Powered-By: PHP/7.0.18\nX-Content-Type-Options: nosniff\nX-XSS-Protection: 1; mode=block\nX-Frame-Options: SAMEORIGIN\nX-UA-Compatible: IE=edge\nContent-Type: text/plain;charset=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Asset Creation and Publishing in StaticResource\nDESCRIPTION: Core logic for creating and publishing static assets in Magento 2's development mode.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-9-frontend-advanced-topics.md#2025-04-18_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$asset = $this->assetRepo->createAsset($file, $params);\n$this->response->setFilePath($asset->getSourceFile());\n$this->publisher->publish($asset);\n```\n\n----------------------------------------\n\nTITLE: Magento Widget Directive Example\nDESCRIPTION: Example of a widget directive that gets inserted into CMS content to display a YouTube video with the specified video ID.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/7_widgets.markdown#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n{{widget type=\"nofrills_booklayout/youtube\" video_id=\"qYkbTyHXwbs\"}}\n```\n\n----------------------------------------\n\nTITLE: Changing Template in Magento Layout XML\nDESCRIPTION: This XML demonstrates how to change the page template for a specific action by referencing the root block and calling setTemplate. It changes the layout from the default to a one-column layout.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/3_package_layout.markdown#2025-04-18_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<nofrills_booklayout_package_second>\n\t<reference name=\"content\">\n\t\t<block type=\"core/text\" name=\"our_message\">\n\t\t\t<action method=\"setText\"><text>Hello Jupiter</text></action>\n\t\t</block>\t\t\t\t\t\n\t</reference>\n\t\n\t<reference name=\"root\">\n\t\t<action method=\"setTemplate\">\n\t\t\t<template>page/1column.phtml</template>\n\t\t</action>\n\t</reference>\n</nofrills_booklayout_package_second>\n```\n\n----------------------------------------\n\nTITLE: Installing Grunt CLI Globally\nDESCRIPTION: This command installs the Grunt Command Line Interface globally on your system so it can be accessed from any directory.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-frontend-build.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g grunt-cli\n```\n\n----------------------------------------\n\nTITLE: Standard Less Import Examples\nDESCRIPTION: Examples of standard Less import statements in Magento's styles-l.less that can be overridden in themes.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-5-themes.md#2025-04-18_snippet_17\n\nLANGUAGE: less\nCODE:\n```\n@import '_styles.less';\n//...\n@import 'source/_theme.less';\n```\n\n----------------------------------------\n\nTITLE: Magento Module Registration Implementation\nDESCRIPTION: Implementation of module registration in registration.php file\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-autoload.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\Framework\\Component\\ComponentRegistrar::register(\n    \\Magento\\Framework\\Component\\ComponentRegistrar::MODULE,\n    'Magento_Catalog',\n    __DIR__\n);\n```\n\n----------------------------------------\n\nTITLE: Page Layout Reading Process (PHP)\nDESCRIPTION: The readPageLayout method gets the current page layout and passes it to the page layout reader, which updates the shared reader context with page layout information.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n#File: vendor/magento/framework/View/Page/Builder.php\nprotected function readPageLayout()\n{\n    $pageLayout = $this->getPageLayout();\n    if ($pageLayout) {\n        $readerContext = $this->layout->getReaderContext();\n        $this->pageLayoutReader->read($readerContext, $pageLayout);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Layout in Magento 2 Price Render\nDESCRIPTION: This snippet shows the _prepareLayout method in the Magento\\Framework\\Pricing\\Render class. It adds a handle to a separate priceLayout object and loads it, which is unusual compared to typical Magento 2 layout preparation.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nprotected function _prepareLayout()\n{\n    $this->priceLayout->addHandle($this->getPriceRenderHandle());\n    $this->priceLayout->loadLayout();\n    return parent::_prepareLayout();\n}\n```\n\n----------------------------------------\n\nTITLE: Root Block Definition in Magento Layout XML\nDESCRIPTION: This XML snippet shows the configuration for the root block in page.xml. The output='toHtml' attribute is crucial as it signals Magento to render this block's output to the browser.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/3_package_layout.markdown#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n#File: app/design/frontend/default/nofrills_layoutbook/layout/page.xml \n<block type=\"page/html\" name=\"root\" output=\"toHtml\"\ntemplate=\"page/3columns.phtml\">\n```\n\n----------------------------------------\n\nTITLE: Copying Magento Grunt Configuration File\nDESCRIPTION: This command creates a Gruntfile.js configuration file from the sample provided by Magento, which is necessary for running Grunt tasks.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-frontend-build.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cp Gruntfile.js.sample Gruntfile.js\n```\n\n----------------------------------------\n\nTITLE: Checking Node Installation with Version Flag\nDESCRIPTION: This command checks if NodeJS is installed on your system and displays the installed version.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-frontend-build.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ node -v\nv6.4.0\n```\n\n----------------------------------------\n\nTITLE: Checking Singular/Plural Grammar with 'name which'\nDESCRIPTION: Searches for the phrase 'name which' which might indicate improper grammar when referring to names (should likely be 'names which' for plural).\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/bin/editing-regex.txt#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nack 'name which' *.markdown\n```\n\n----------------------------------------\n\nTITLE: Magento Module Registration Composer Configuration\nDESCRIPTION: Configuration for module registration via Composer's files autoloader\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-autoload.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n    \"files\": [\n        \"registration.php\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reader Context Initialization in Layout (PHP)\nDESCRIPTION: This method ensures a ReaderContext object is available, creating one if needed. The context holds references to the ScheduledStructure and Config Structure objects.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n#File: vendor/magento/framework/View/Layout.php\n\npublic function getReaderContext()\n{\n    if (!$this->readerContext) {\n        $this->readerContext = $this->readerContextFactory->create();\n    }\n    return $this->readerContext;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading CMS Page Model in PHP\nDESCRIPTION: This snippet shows how to load a CMS page model in Magento using the 'cms/page' identifier.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/6_cms_page.markdown#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$page = Mage::getModel('cms/page');\n```\n\n----------------------------------------\n\nTITLE: Extending Magento Controller with Custom loadLayout Method in PHP\nDESCRIPTION: This code defines a custom controller that extends Mage_Core_Controller_Front_Action and overrides the loadLayout method to display debug information about handles. It demonstrates how to intercept the normal layout process while maintaining original functionality.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/3_package_layout.markdown#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n#File: app/code/local/Nofrills/Booklayout/controllers/PackageController.php\nclass Nofrills_Booklayout_PackageController extends\nMage_Core_Controller_Front_Action\n{\t\t\n\tpublic function loadLayout($handles=null, $generateBlocks=true,\n\t$generateXml=true)\t\t\n\t{\n\t\t$original_results = parent::loadLayout($handles,$generateBlocks,\n\t\t$generateXml);\n\n\t\t$handles = Mage::getSingleton('core/layout')->getUpdate()->getHandles();\n\t\techo \"<strong>Handles Generated For This Request: \",\n\t\timplode(\",\",$handles),\"</strong>\";\n\t\t\n\t\treturn $original_results;\n\t}\n\t\n\t#http://magento.example.com/nofrills_booklayout/package/index\n\tpublic function indexAction()\n\t{\n\t\t$this->loadLayout();\n\t\t$this->renderLayout();\t\t\t\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Reader Preparation Method in Magento ReaderPool\nDESCRIPTION: Method that instantiates reader objects from their class names. This creates the actual reader objects that will be used to interpret XML nodes.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nprotected function prepareReader($readers)\n{\n    if (empty($this->nodeReaders)) {\n        /** @var $reader Layout\\ReaderInterface */\n        foreach ($readers as $readerClass) {\n            $reader = $this->readerFactory->create($readerClass);\n            $this->addReader($reader);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Dropdown Widget Parameter with Inline Values in Magento XML\nDESCRIPTION: Creating a select dropdown widget parameter with inline value definitions. Each option has a value for data storage and a label for display in the UI.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/h_widget_field_rendering_options.markdown#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<parameters>\n\t<our_parameter>\n\t\t<visible>1</visible>\n\t\t<required>1</required>\n\t\t<label>Should I Stay or Should I Go?</label>\n\t\t<type>select</type>\n\t\t<value>stay</value>\n\t\t<values>\n\t\t\t<staying>\n\t\t\t\t<value>stay</value>\n\t\t\t\t<label>There will be Trouble</label>\n\t\t\t</staying>\n\t\t\t<going>\n\t\t\t\t<value>go</value>\n\t\t\t\t<label>There will be Double</label>\n\t\t\t</going>\n\t\t</values>\n\t\t<sort_order>10</sort_order>\n\t</our_parameter>\n</parameters>\n```\n\n----------------------------------------\n\nTITLE: Magento Cache Clean Command\nDESCRIPTION: Command to clean Magento cache\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-cli.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/magento cache:clean\n```\n\n----------------------------------------\n\nTITLE: Displaying Magento Block Hierarchy Tree Structure\nDESCRIPTION: This snippet shows the complete block class hierarchy for Magento CE 1.4.2.0 in a tree format. It starts with Varien_Object as the root and branches out to various block classes across different Magento modules, illustrating inheritance relationships.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/a_appendix_blocks.markdown#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`-- Varien_Object\n|-- Mage_Core_Block_Abstract\n|   |-- Mage_Adminhtml_Block_Urlrewrite_Link\n|   |-- Mage_CatalogSearch_Block_Autocomplete\n|   |-- Mage_Catalog_Block_Product_Price_Template\n|   |-- Mage_Cms_Block_Block\n|   |-- Mage_Cms_Block_Page\n|   |-- Mage_Core_Block_Flush\n|   |-- Mage_Core_Block_Html_Select\n|   |   |-- Mage_Adminhtml_Block_Html_Select\n|   |   `-- Mage_CatalogInventory_Block_Adminhtml_Form_Field_Customergroup\n|   |-- Mage_Core_Block_Html_Select\n|   |-- Mage_Core_Block_Profiler\n|   |-- Mage_Core_Block_Template\n|   |   |-- Mage_Adminhtml_Block_Abstract\n|   |   |   |-- Mage_Adminhtml_Block_Catalog_Product_Frontend_Product_Watermark\n|   |   |   |-- Mage_Adminhtml_Block_Customer_Edit_Renderer_Newpass\n|   |   |   |-- Mage_Adminhtml_Block_Customer_Edit_Renderer_Region\n|   |   |   |-- Mage_Adminhtml_Block_Extensions_Custom_Edit_Tab_Load\n|   |   |   |-- Mage_Adminhtml_Block_Promo_Widget_Chooser_Daterange\n|   |   |   |-- Mage_Adminhtml_Block_System_Config_Form_Field\n|   |   |   |   |-- Mage_Adminhtml_Block_Catalog_Form_Renderer_Config_DateFieldsOrder\n|   |   |   |   |-- Mage_Adminhtml_Block_Catalog_Form_Renderer_Config_YearRange\n|   |   |   |   |-- Mage_Adminhtml_Block_Report_Config_Form_Field_MtdStart\n|   |   |   |   |-- Mage_Adminhtml_Block_Report_Config_Form_Field_YtdStart\n|   |   |   |   |-- Mage_Adminhtml_Block_System_Config_Form_Field_Array_Abstract\n|   |   |   |   |   |-- Mage_Adminhtml_Block_System_Config_Form_Field_Regexceptions\n|   |   |   |   |   `-- Mage_CatalogInventory_Block_Adminhtml_Form_Field_Minsaleqty\n|   |   |   |   |-- Mage_Adminhtml_Block_System_Config_Form_Field_Array_Abstract\n|   |   |   |   |-- Mage_Adminhtml_Block_System_Config_Form_Field_Datetime\n|   |   |   |   |-- Mage_Adminhtml_Block_System_Config_Form_Field_Notification\n|   |   |   |   |-- Mage_Adminhtml_Block_System_Config_Form_Field_Select_Flatcatalog\n|   |   |   |   |-- Mage_Adminhtml_Block_System_Config_Form_Field_Select_Flatproduct\n|   |   |   |   |-- Mage_Directory_Block_Adminhtml_Frontend_Currency_Base\n|   |   |   |   |-- Mage_Directory_Block_Adminhtml_Frontend_Region_Updater\n|   |   |   |   |-- Mage_GoogleCheckout_Block_Adminhtml_Shipping_Applicable_Countries\n|   |   |   |   |-- Mage_GoogleCheckout_Block_Adminhtml_Shipping_Merchant\n|   |   |   |   |-- Mage_Paypal_Block_Adminhtml_System_Config_ApiWizard\n|   |   |   |   `-- Mage_Tax_Block_Adminhtml_Frontend_Region_Updater\n|   |   |   |-- Mage_Adminhtml_Block_System_Config_Form_Field\n|   |   |   |-- Mage_Adminhtml_Block_System_Config_Form_Field_Heading\n|   |   |   |-- Mage_Adminhtml_Block_System_Config_Form_Fieldset\n|   |   |   |   |-- Mage_Adminhtml_Block_System_Config_Form_Fieldset_Modules_DisableOutput\n|   |   |   |   `-- Mage_Adminhtml_Block_System_Config_Form_Fieldset_Order_Statuses\n|   |   |   |-- Mage_Adminhtml_Block_System_Config_Form_Fieldset\n|   |   |   |-- Mage_Adminhtml_Block_System_Convert_Profile_Run\n|   |   |   |-- Mage_Adminhtml_Block_Widget_Form_Element_Dependence\n|   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Filter_Abstract\n|   |   |   |   |-- Mage_Adminhtml_Block_Newsletter_Problem_Grid_Filter_Checkbox\n|   |   |   |   |-- Mage_Adminhtml_Block_Newsletter_Subscriber_Grid_Filter_Checkbox\n|   |   |   |   |-- Mage_Adminhtml_Block_System_Convert_Profile_Edit_Filter_Action\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Filter_Date\n|   |   |   |   |   `-- Mage_Adminhtml_Block_Widget_Grid_Column_Filter_Datetime\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Filter_Date\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Filter_Price\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Filter_Range\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Filter_Select\n|   |   |   |   |   |-- Mage_Adminhtml_Block_Catalog_Product_Edit_Tab_Super_Config_Grid_Filter_Inventory\n|   |   |   |   |   |-- Mage_Adminhtml_Block_Customer_Edit_Tab_Newsletter_Grid_Filter_Status\n|   |   |   |   |   |-- Mage_Adminhtml_Block_Customer_Grid_Filter_Country\n|   |   |   |   |   |-- Mage_Adminhtml_Block_Newsletter_Subscriber_Grid_Filter_Website\n|   |   |   |   |   |-- Mage_Adminhtml_Block_Review_Grid_Filter_Type\n|   |   |   |   |   |-- Mage_Adminhtml_Block_System_Email_Template_Grid_Filter_Type\n|   |   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Filter_Checkbox\n|   |   |   |   |   |   `-- Mage_Adminhtml_Block_Widget_Grid_Column_Filter_Massaction\n|   |   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Filter_Checkbox\n|   |   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Filter_Country\n|   |   |   |   |   `-- Mage_Adminhtml_Block_Widget_Grid_Column_Filter_Radio\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Filter_Select\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Filter_Store\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Filter_Text\n|   |   |   |   `-- Mage_Adminhtml_Block_Widget_Grid_Column_Filter_Theme\n|   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Filter_Abstract\n|   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Abstract\n|   |   |   |   |-- Mage_Adminhtml_Block_Catalog_Product_Edit_Tab_Super_Config_Grid_Renderer_Inventory\n|   |   |   |   |-- Mage_Adminhtml_Block_Cms_Page_Grid_Renderer_Action\n|   |   |   |   |-- Mage_Adminhtml_Block_Customer_Edit_Tab_Newsletter_Grid_Renderer_Action\n|   |   |   |   |-- Mage_Adminhtml_Block_Customer_Edit_Tab_Newsletter_Grid_Renderer_Status\n|   |   |   |   |-- Mage_Adminhtml_Block_Customer_Edit_Tab_Wishlist_Grid_Renderer_Description\n|   |   |   |   |-- Mage_Adminhtml_Block_Customer_Online_Grid_Renderer_Ip\n|   |   |   |   |-- Mage_Adminhtml_Block_Customer_Online_Grid_Renderer_Type\n|   |   |   |   |-- Mage_Adminhtml_Block_Customer_Online_Grid_Renderer_Url\n|   |   |   |   |-- Mage_Adminhtml_Block_Dashboard_Searches_Renderer_Searchquery\n|   |   |   |   |-- Mage_Adminhtml_Block_Newsletter_Problem_Grid_Renderer_Checkbox\n|   |   |   |   |-- Mage_Adminhtml_Block_Newsletter_Subscriber_Grid_Renderer_Checkbox\n|   |   |   |   |-- Mage_Adminhtml_Block_Newsletter_Template_Grid_Renderer_Sender\n|   |   |   |   |-- Mage_Adminhtml_Block_Notification_Grid_Renderer_Actions\n|   |   |   |   |-- Mage_Adminhtml_Block_Notification_Grid_Renderer_Notice\n|   |   |   |   |-- Mage_Adminhtml_Block_Notification_Grid_Renderer_Severity\n|   |   |   |   |-- Mage_Adminhtml_Block_Report_Grid_Column_Renderer_Customer\n|   |   |   |   |-- Mage_Adminhtml_Block_Report_Grid_Column_Renderer_Product\n|   |   |   |   |-- Mage_Adminhtml_Block_Report_Product_Downloads_Renderer_Purchases\n|   |   |   |   |-- Mage_Adminhtml_Block_Review_Grid_Renderer_Type\n|   |   |   |   |-- Mage_Adminhtml_Block_Sales_Reorder_Renderer_Action\n|   |   |   |   |-- Mage_Adminhtml_Block_Sitemap_Grid_Renderer_Link\n|   |   |   |   |-- Mage_Adminhtml_Block_Sitemap_Grid_Renderer_Time\n|   |   |   |   |-- Mage_Adminhtml_Block_System_Convert_Profile_Edit_Renderer_Action\n|   |   |   |   |-- Mage_Adminhtml_Block_System_Email_Template_Grid_Renderer_Sender\n|   |   |   |   |-- Mage_Adminhtml_Block_System_Email_Template_Grid_Renderer_Type\n|   |   |   |   |-- Mage_Adminhtml_Block_System_Store_Grid_Render_Group\n|   |   |   |   |-- Mage_Adminhtml_Block_System_Store_Grid_Render_Store\n|   |   |   |   |-- Mage_Adminhtml_Block_System_Store_Grid_Render_Website\n|   |   |   |   |-- Mage_Adminhtml_Block_Tax_Rate_Grid_Renderer_Data\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Checkbox\n|   |   |   |   |   |-- Mage_Adminhtml_Block_Catalog_Product_Edit_Tab_Super_Config_Grid_Renderer_Checkbox\n|   |   |   |   |   |-- Mage_Adminhtml_Block_Sales_Order_Create_Search_Grid_Renderer_Giftmessage\n|   |   |   |   |   `-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Massaction\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Checkbox\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Concat\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Country\n|   |   |   |   |   `-- Mage_Adminhtml_Block_Tax_Rate_Grid_Renderer_Country\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Country\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Currency\n|   |   |   |   |   `-- Mage_Adminhtml_Block_Report_Grid_Column_Renderer_Currency\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Currency\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Date\n|   |   |   |   |   `-- Mage_Adminhtml_Block_Report_Sales_Grid_Column_Renderer_Date\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Date\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Datetime\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Input\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Ip\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Longtext\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Number\n|   |   |   |   |   `-- Mage_Adminhtml_Block_Report_Grid_Column_Renderer_Blanknumber\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Number\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Price\n|   |   |   |   |   `-- Mage_Adminhtml_Block_Sales_Order_Create_Search_Grid_Renderer_Price\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Price\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Radio\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Select\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Store\n|   |   |   |   |-- Mage_Adminhtml_Block_Widget_Grid_Column_Renderer_Text\n```\n\n----------------------------------------\n\nTITLE: Base Area Template Resolution Paths\nDESCRIPTION: File path resolution order for templates in Magento 2's base and frontend areas.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-areas.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nvendor/magento/module-catalog/view/frontend/templates/path/to/template.phtml\nvendor/magento/module-catalog/view/base/templates/path/to/template.phtml\n```\n\n----------------------------------------\n\nTITLE: Loading XML Update File in Magento Controller Action (PHP)\nDESCRIPTION: Demonstrates a controller action that initializes the layout, loads an XML update file, and sends the output. This pattern is used for different actions like 'fox', 'dog', and 'ceaser'.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_18\n\nLANGUAGE: php\nCODE:\n```\npublic function foxAction()\n{\n\t$this->_initLayout();\n\t$this->_loadUpdateFile('fox.xml');\n\t$this->_sendOutput();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Root Containers to Layout Output in Magento\nDESCRIPTION: Method call that identifies which structure blocks should be rendered first, which begins the rendering cascade through child elements.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$this->addToOutputRootContainers();\n```\n\n----------------------------------------\n\nTITLE: Defining a PHP Interface with Abstract Methods\nDESCRIPTION: Shows how to define a PHP interface with abstract method signatures. When a class implements this interface, it must define all the methods specified in the interface.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-interfaces.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ninterface FirstInterface\n{\n    abstract public function baz();\n    abstract public function zip($one, $two);\n}\n```\n\n----------------------------------------\n\nTITLE: Magento CLI Bootstrap Script\nDESCRIPTION: PHP script that initializes the Magento CLI framework\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-cli.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n#!/usr/bin/env php\n<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nif (PHP_SAPI !== 'cli') {\n    echo 'bin/magento must be run as a CLI application';\n    exit(1);\n}\n\ntry {\n    require __DIR__ . '/../app/bootstrap.php';\n} catch (\\Exception $e) {\n    echo 'Autoload error: ' . $e->getMessage();\n    exit(1);\n}\ntry {\n    $handler = new \\Magento\\Framework\\App\\ErrorHandler();\n    set_error_handler([$handler, 'handler']);\n    $application = new Magento\\Framework\\Console\\Cli('Magento CLI');\n    $application->run();\n} catch (\\Exception $e) {\n    while ($e) {\n        echo $e->getMessage();\n        echo $e->getTraceAsString();\n        echo \"\\n\\n\";\n        $e = $e->getPrevious();\n    }\n    exit(Magento\\Framework\\Console\\Cli::RETURN_FAILURE);\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Static Content in Magento 2 via Command Line\nDESCRIPTION: Command to deploy static frontend assets from modules to the pub/static folder, making them available for public access. This is required in production mode but automated in developer/default modes.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-magento-modes.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/magento setup:static-content:deploy\n```\n\n----------------------------------------\n\nTITLE: Default Theme Path Reference\nDESCRIPTION: Shows the typical path for the default theme in Magento that store owners often leave unchanged when customizing their stores.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/e_theme_and_layout_resolution.markdown#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndefault/default\n```\n\n----------------------------------------\n\nTITLE: Method for Loading Update Files in Magento Controller\nDESCRIPTION: Helper method for loading update XML files from a module. This method starts the process of adding layout updates from an external file.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nprotected function _loadUpdateFile($file)\n{\n\t$path_update = Mage::getModuleDir('', 'Nofrills_Booklayout') . DS . \n\t'content-updates' . DS . $file;\t\t\t\n\t\n\t$layout = Mage::getSingleton('core/layout')\n\t->getUpdate()\n```\n\n----------------------------------------\n\nTITLE: Loading CMS Page in Magento PHP\nDESCRIPTION: PHP code snippet from Mage_Cms_Helper_Page showing how a CMS page is loaded. It handles page IDs with delimiters and sets the store ID before loading the page.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/6_cms_page.markdown#2025-04-18_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n$page = Mage::getSingleton('cms/page');        \nif (!is_null($pageId) && $pageId!==$page->getId()) {\n    $delimeterPosition = strrpos($pageId, '|');\n    if ($delimeterPosition) {\n        $pageId = substr($pageId, 0, $delimeterPosition);\n    }\n\n    $page->setStoreId(Mage::app()->getStore()->getId());\n    if (!$page->load($pageId)) {\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Block Reordering in Magento Layout XML\nDESCRIPTION: Demonstrates block reordering by removing and reinserting a block using unsetChild method.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/5_advanced_layout_features.markdown#2025-04-18_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<reference name=\"content\">\n\t<action method=\"unsetChild\"><name>one</name></action>\t\t\n\t<block type=\"core/text\" name=\"one\" after=\"-\">\n\t\t<action method=\"setText\"><t>one</t></action>\n\t</block>\n</reference>\n```\n\n----------------------------------------\n\nTITLE: Single Column Directory Listing\nDESCRIPTION: Demonstrates ls command with -1 option for single column output\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-cli.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ls -1\n```\n\n----------------------------------------\n\nTITLE: Listing Magento Cache Directory Contents in Bash\nDESCRIPTION: This command lists the contents of Magento's cache directory, showing the structure and files used for caching. It's useful for understanding the cache storage mechanism and manually managing cache files.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/f_appendix_clearing_cache.markdown#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nls -l var/cache\ntotal 0\ndrwxrwxrwx   10 _www  staff   340 Mar 15 16:10 mage--0\ndrwxrwxrwx   10 _www  staff   340 Mar 15 16:10 mage--1\ndrwxrwxrwx    6 _www  staff   204 Mar 15 16:02 mage--2\ndrwxrwxrwx    8 _www  staff   272 Mar 15 16:02 mage--3\ndrwxrwxrwx    8 _www  staff   272 Mar 15 16:10 mage--4\ndrwxrwxrwx   12 _www  staff   408 Mar 15 16:02 mage--5\ndrwxrwxrwx   10 _www  staff   340 Mar 15 16:02 mage--6\ndrwxrwxrwx    8 _www  staff   272 Mar 15 16:02 mage--7\ndrwxrwxrwx   12 _www  staff   408 Mar 15 16:02 mage--8\ndrwxrwxrwx   10 _www  staff   340 Mar 15 16:02 mage--9\ndrwxrwxrwx    6 _www  staff   204 Mar 15 16:02 mage--a\ndrwxrwxrwx   10 _www  staff   340 Mar 15 16:02 mage--b\ndrwxrwxrwx  164 _www  staff  5576 Mar 15 16:02 mage--c\ndrwxrwxrwx  172 _www  staff  5848 Mar 15 16:02 mage--d\ndrwxrwxrwx    4 _www  staff   136 Mar 15 16:10 mage--e\ndrwxrwxrwx   12 _www  staff   408 Mar 15 16:10 mage--f\n```\n\n----------------------------------------\n\nTITLE: Generator Context Factory Implementation (PHP)\nDESCRIPTION: Factory method that creates a Generator Context object, passing the provided data as constructor arguments.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n#File: vendor/magento/framework/View/Layout/Generator/ContextFactory.php\npublic function create(array $data = [])\n{\n    return $this->objectManager->create('Magento\\Framework\\View\\Layout\\Generator\\Context', $data);\n}\n```\n\n----------------------------------------\n\nTITLE: Magento Base Page Layout XML Structure\nDESCRIPTION: XML structure that defines a base page layout with a 2-column template. It contains blocks for the head, sidebar, and content area that can be referenced by layout updates.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<!-- #File: app/code/local/Nofrills/Booklayout/page-layouts/page.xml -->\n<block type=\"nofrills_booklayout/template\" name=\"root\" \ntemplate=\"simple-page/2col.phtml\" output=\"toHtml\">\n\t<block type=\"nofrills_booklayout/template\" name=\"additional_head\"\n\ttemplate=\"simple-page/head.phtml\" />\n\n\t<block type=\"nofrills_booklayout/template\" name=\"sidebar\">\n\t\t<action method=\"setTemplate\">\n\t\t\t<template>simple-page/sidebar.phtml</template>\n\t\t</action>\n\t</block>\n\n\t<block type=\"core/text_list\" name=\"content\" />\n</block>\n```\n\n----------------------------------------\n\nTITLE: Custom Theme Widget Less Rule\nDESCRIPTION: Example of adding a custom Less rule to the theme's web/css/source folder that will be included via magento_import.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-5-themes.md#2025-04-18_snippet_15\n\nLANGUAGE: less\nCODE:\n```\nbody.example-less-rule-base-css-folder {\n  background-color: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Uninstalling Extensions in Magento 1.5+\nDESCRIPTION: These commands show how to install a Magento extension from a .tgz file and uninstall an extension using its name in Magento 1.5 and later versions.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/j_magento_connect.markdown#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./mage install-file No_Frills_Magento_Layout_3_start-1.0.0.tgz\n```\n\nLANGUAGE: bash\nCODE:\n```\n./mage uninstall community No_Frills_Magento_Layout_3_start\n```\n\n----------------------------------------\n\nTITLE: CURL Progress Bar Example\nDESCRIPTION: Shows using curl with the progress bar option\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-cli.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl --progress-bar http://example.com\n```\n\n----------------------------------------\n\nTITLE: Initializing Magento Connect CLI for Magento 1.4.2\nDESCRIPTION: This command sets up the Magento Connect CLI tool for Magento 1.4.2, configuring variables and initializing channels.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/j_magento_connect.markdown#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./pear mage-setup\n```\n\n----------------------------------------\n\nTITLE: Installing and Uninstalling Extensions in Magento 1.4.2\nDESCRIPTION: These commands demonstrate how to install a Magento extension from a .tgz file and uninstall an extension using its channel URL in Magento 1.4.2.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/j_magento_connect.markdown#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./pear install No_Frills_Magento_Layout_1_start-1.0.0.tgz\n```\n\nLANGUAGE: bash\nCODE:\n```\n./pear uninstall \\\nchannel://connect.magentocommerce.com/community/No_Frills_Magento_Layout_1_sta...\n```\n\n----------------------------------------\n\nTITLE: Production Mode Check in StaticResource\nDESCRIPTION: Code snippet showing how Magento 2 handles static resource requests in production mode by returning a 404 response.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-9-frontend-advanced-topics.md#2025-04-18_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nif ($appMode == \\Magento\\Framework\\App\\State::MODE_PRODUCTION) {\n    $this->response->setHttpResponseCode(404);\n}\n```\n\n----------------------------------------\n\nTITLE: YouTube Link Template for Magento Widget\nDESCRIPTION: Alternative PHTML template that renders a YouTube video as a clickable link instead of an embedded video, demonstrating template flexibility in Magento widgets.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/7_widgets.markdown#2025-04-18_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php \n#File: app/design/frontend/default/default/template/youtube-as-link.phtml \n?>\n<a href=\"http://www.youtube.com/watch?v=<?php \n\techo $this->getVideoId();?>\">Watch this!?</a>\n```\n\n----------------------------------------\n\nTITLE: Finding Default XML Layout Files in Magento 2\nDESCRIPTION: Bash command to locate all default.xml layout files within Magento's core modules. This helps identify how Magento uses the 'default' handle across different modules.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-3-layouthandles.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ find vendor/magento -wholename '*/module-*/default.xml'\n```\n\n----------------------------------------\n\nTITLE: Installing Node Dependencies for Magento\nDESCRIPTION: This command installs all the Node dependencies specified in the package.json file, creating a node_modules folder with required packages.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-frontend-build.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Searching for .phtml Files in Magento Vendor Directory\nDESCRIPTION: This command uses find to search for all .phtml files within the vendor/magento directory of a Magento project. It demonstrates the basic syntax of find with a specific search path and filename pattern.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-unix-find.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ find vendor/magento -name '*.phtml'\n```\n\n----------------------------------------\n\nTITLE: Initializing Magento Connect CLI for Magento 1.5+\nDESCRIPTION: This command sets up the Magento Connect CLI tool for Magento 1.5 and later versions.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/j_magento_connect.markdown#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./mage mage-setup\n```\n\n----------------------------------------\n\nTITLE: Generator Context Constructor Definition (PHP)\nDESCRIPTION: Constructor for the Generator Context class that accepts the layout structure and layout interface objects.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n#File: vendor/magento/framework/View/Layout/Generator/Context.php\npublic function __construct(\n    Layout\\Data\\Structure $structure,\n    LayoutInterface $layout\n) {\n    $this->structure = $structure;\n    $this->layout = $layout;\n}\n```\n\n----------------------------------------\n\nTITLE: Parent generateLayoutBlocks Implementation in Layout Builder (PHP)\nDESCRIPTION: The parent implementation of generateLayoutBlocks in the Layout Builder triggers the layout element generation process.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-6-advanced-xml-loading.md#2025-04-18_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n#File: vendor/magento/framework/View/Layout/Builder.php\nprotected function generateLayoutBlocks()\n{\n    /* ... */\n\n    /* generate blocks from xml layout */\n    $this->layout->generateElements();\n\n    /* ... */\n\n    return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Grunt Without Configuration\nDESCRIPTION: This shows the error that occurs when running Grunt without the required Gruntfile.js configuration file.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-frontend-build.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ grunt \nA valid Gruntfile could not be found. Please see the getting started \nguide for more information on how to configure grunt:\n    http://gruntjs.com/getting-started\n    \nFatal error: Unable to find Gruntfile.\n```\n\n----------------------------------------\n\nTITLE: Setting Magento 2 Operation Modes via Command Line\nDESCRIPTION: Commands to switch Magento between different operating modes using the bin/magento CLI. The first sets developer mode while the second sets production mode while skipping the compilation process.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-magento-modes.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/magento deploy:mode:set developer \nphp bin/magento deploy:mode:set production --skip-compilation\n```\n\n----------------------------------------\n\nTITLE: Checking npm Version\nDESCRIPTION: This command verifies the npm (Node Package Manager) installation and displays its version.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-frontend-build.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm -v\n3.10.6\n```\n\n----------------------------------------\n\nTITLE: Basic PHP Key-Value Configuration Example\nDESCRIPTION: Simple example showing traditional key-value pair configuration storage in PHP.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/i_system_config.markdown#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$config['db_name'] \t\t= 'localhost';\n$config['db_password'] \t= '12345';\n$config['logo'] \t\t= 'awesomelogo.gif';\n```\n\n----------------------------------------\n\nTITLE: jQuery Document Ready Example\nDESCRIPTION: A JavaScript example using jQuery's document ready function. This demonstrates why plain jQuery doesn't work in Magento 2 without RequireJS, as Magento's JavaScript system is built on RequireJS.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-8-frontend-javascript.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\njQuery(function(){\n    alert(\"Hello World\");\n});\n```\n\n----------------------------------------\n\nTITLE: Removing a Deployed Static Asset File\nDESCRIPTION: A bash command that demonstrates how to remove a deployed static asset file from the pub/static directory. This is used to test Magento's on-demand asset generation functionality in developer mode.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/_url_writing.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm ./pub/static/frontend/Magento/luma/en_US/css/styles-m.css\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Configuration in Magento Admin\nDESCRIPTION: Navigation path in the Magento Admin panel to access and modify the default theme configuration.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/e_theme_and_layout_resolution.markdown#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSystem -> Configuration -> Design -> Themes -> Default\n```\n\n----------------------------------------\n\nTITLE: Setting Magento 2 to Developer Mode via Command Line\nDESCRIPTION: Command for switching a Magento 2 installation to developer mode using the Magento CLI. This is recommended for development work with the layout system as covered in the book.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-0-introduction.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/magento deploy:mode:set developer\n```\n\n----------------------------------------\n\nTITLE: Searching for Miscapitalized Block References in Markdown\nDESCRIPTION: Uses ack to search for potentially miscapitalized 'Block' words in Markdown files. The regex excludes properly formatted references by looking for Block preceded by a non-alphanumeric, non-underscore, non-slash character.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/bin/editing-regex.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nack '[^a-zA-Z_/]Block' *.markdown\n```\n\n----------------------------------------\n\nTITLE: Finding and Removing Preprocessed LessCSS Files in Magento Cache\nDESCRIPTION: Commands to locate and remove preprocessed LessCSS files from Magento's view_preprocessed directory. This is necessary when making changes to LessCSS files in development mode.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ find var/view_preprocessed -name example-2.less\nvar/view_preprocessed/css/frontend/Magento/luma/en_US/Pulsestorm_Nofrillslayout/chapter-7/example-2.less\n\n$ find var/view_preprocessed -name example-2.less -exec rm '{}' \\;\n$ rm var/view_preprocessed/css/frontend/Magento/luma/en_US/Pulsestorm_Nofrillslayout/chapter-7/example-2.less\n```\n\n----------------------------------------\n\nTITLE: Accessing Developer Tools in Google Chrome\nDESCRIPTION: Navigation path to access Chrome's Developer Tools for viewing the rendered HTML after JavaScript execution.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-view-source.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nView -> Developer -> Developer Tools\n```\n\n----------------------------------------\n\nTITLE: Magento Custom Autoloader Registration\nDESCRIPTION: Code showing how Magento registers its custom code generation autoloader\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-autoload.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function createClassDefinition()\n{\n    $autoloader = new Autoloader($this->getCodeGenerator());\n    spl_autoload_register([$autoloader, 'load']);\n    return new Runtime();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Design Settings in Magento Admin\nDESCRIPTION: Navigation path to the System Design section in Magento Admin where custom themes can be configured for specific date ranges.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/e_theme_and_layout_resolution.markdown#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSystem -> Design\n```\n\n----------------------------------------\n\nTITLE: Setting Developer Mode in Magento's index.php\nDESCRIPTION: PHP code snippet showing how to enable developer mode in Magento's index.php file. This configuration forces Magento to show errors, which is helpful when learning the system.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/0_intro.markdown#2025-04-18_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nif (isset($_SERVER['MAGE_IS_DEVELOPER_MODE'])) {\n\tMage::setIsDeveloperMode(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Miscapitalized Helper References\nDESCRIPTION: Searches for potentially miscapitalized 'Helper' words in Markdown files. Uses regex to exclude properly formatted references by checking for Helper preceded by a non-alphanumeric character.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/bin/editing-regex.txt#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nack '[^a-zA-Z_/]Helper' *.markdown\n```\n\n----------------------------------------\n\nTITLE: Finding and Removing Generated CSS Files in Magento Static Directory\nDESCRIPTION: Commands to locate and remove generated CSS files from Magento's pub/static directory. This is required alongside removing preprocessed files to ensure changes to LessCSS files are reflected.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-7-frontend-css.md#2025-04-18_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ find pub/static -name example-2.css\npub/static/frontend/Magento/luma/en_US/Pulsestorm_Nofrillslayout/chapter-7/example-2.css\n\n$ find pub/static -name example-2.css -\n$ rm pub/static/frontend/Magento/luma/en_US/Pulsestorm_Nofrillslayout/chapter-7/example-2.css\n```\n\n----------------------------------------\n\nTITLE: Viewing HTTP headers with curl\nDESCRIPTION: Demonstrates how to use curl to view HTTP headers with the -I option, which helps diagnose issues like redirects.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-curl.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl http://alanstorm.com\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>302 Found</title>\n</head><body>\n<h1>Found</h1>\n<p>The document has moved <a href=\"https://alanstorm.com/\">here</a>.</p>\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -I http://alanstorm.com\nHTTP/1.1 302 Found\nDate: Thu, 29 Mar 2018 00:42:28 GMT\nServer: Apache/2.4.29\nLocation: https://alanstorm.com/\nContent-Type: text/html; charset=iso-8859-1\n```\n\n----------------------------------------\n\nTITLE: Resulting Page Layout after Update Tag Processing\nDESCRIPTION: This snippet shows the final Page Layout XML that Magento would generate after processing the <update> tag. It includes both the original fragments and the ones included from the referenced handle.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/3_package_layout.markdown#2025-04-18_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<!-- from our handle -->\n<reference name=\"content\">\n\t<block type=\"core/text\" name=\"planet_4\">\n\t\t<action method=\"setText\"><text>Hello Mars. </text></action>\n\t</block>\t\t\t\t\t\t\n</reference>\n\n<!-- from our [update handle=\"nofrills_booklayout_package_second\"/] -->\n<reference name=\"root\">\n\t<action method=\"setTemplate\"><template>page/1column.phtml</template></action>\n</reference>\t\n<reference name=\"content\">\n\t<block type=\"core/text\" name=\"planet_5\">\n\t\t<action method=\"setText\"><text>Hello Jupiter. </text></action>\n\t</block>\t\t\t\t\t\t\n</reference>\n```\n\n----------------------------------------\n\nTITLE: HTML Reference to Local XML Layout File\nDESCRIPTION: Shows a code-formatted reference to the local.xml file, which is recommended for layout updates instead of editing default package layout files.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/e_theme_and_layout_resolution.markdown#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<code>local.xml</code>\n```\n\n----------------------------------------\n\nTITLE: Building the Magento 2 Layout Documentation\nDESCRIPTION: Command to run the build script that generates documentation for Magento 2 layouts. The PHP script build.php is executed to process the documentation and output the files to the 'output' folder.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n% php build.php\n```\n\n----------------------------------------\n\nTITLE: Identifying 'test list' vs 'text list' Typos\nDESCRIPTION: Case-insensitive search for 'test list' or 'test_list' in Markdown files, which might be typos of 'text list' in documentation content.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/bin/editing-regex.txt#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nack -i 'test[ _]list' *.markdown\n```\n\n----------------------------------------\n\nTITLE: Displaying Future Development Timeline in Markdown\nDESCRIPTION: A code snippet showing the use of a placeholder variable for time periods in Markdown. This uses square brackets to denote a variable that would be replaced with an actual regional time period.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`[regional time period]`\n```\n\n----------------------------------------\n\nTITLE: Directory Change Command Example\nDESCRIPTION: Shows how to change directories using the cd command\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-cli.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /path/to/magento\n```\n\n----------------------------------------\n\nTITLE: HTML Select for CMS Page Layouts\nDESCRIPTION: HTML markup for the select element used to choose a page layout in the CMS page admin interface.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/6_cms_page.markdown#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<select id=\"page_root_template\" name=\"root_template\" class=\"required-entry select\">\n    <option value=\"empty\">Empty</option>\n    <option value=\"one_column\" selected=\"selected\">1 column</option>\n    <option value=\"two_columns_left\">2 columns with left bar</option>\n    <option value=\"two_columns_right\">2 columns with right bar</option>\n    <option value=\"three_columns\">3sum columns</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: HTML Reference to Base Package Theme\nDESCRIPTION: Shows a code-formatted reference to the phtml files that can be selectively updated in the theme system.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/e_theme_and_layout_resolution.markdown#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<code>phtml</code>\n```\n\n----------------------------------------\n\nTITLE: Locating Miscapitalized Model References\nDESCRIPTION: Searches for potentially miscapitalized 'Model' words in Markdown files. The regex excludes properly formatted references by looking for a non-alphanumeric character before 'Model'.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/bin/editing-regex.txt#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nack '[^a-zA-Z_/]Model' *.markdown\n```\n\n----------------------------------------\n\nTITLE: Finding 'out' in Middle of Sentences\nDESCRIPTION: Uses a regex to find sentences containing the word 'out' but excludes instances where 'out' starts a sentence. Searches between punctuation marks for content analysis.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/bin/editing-regex.txt#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n[\\.\\!\\?].+?\\bout\\b.*?[\\.\\!\\?]\n```\n\n----------------------------------------\n\nTITLE: Using curl to Fetch Web Page Source\nDESCRIPTION: Command demonstrating how to use curl to retrieve the raw HTML source of Google's homepage directly from the server.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-view-source.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl 'http://www.google.com'\n<!doctype html><html itemscope=\"\" itemtype=\"http://schema.o... \n```\n\n----------------------------------------\n\nTITLE: Basic Directory Listing Command\nDESCRIPTION: Demonstrates using the ls command to list directory contents\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-cli.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ls\n...\n```\n\n----------------------------------------\n\nTITLE: Problem Demonstration: Direct Object Instantiation in Functions\nDESCRIPTION: Illustrates the maintenance problem that occurs when directly instantiating objects within functions, making the code inflexible for future changes or testing.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-di.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction someFunction()\n{\n    //... does some stuff ...\n    $object = new SomeClassName;\n    //... does some other stuff with $object ...    \n}\n```\n\n----------------------------------------\n\nTITLE: HTML Reference to Default Theme Path\nDESCRIPTION: Shows a code-formatted reference to the default theme path using HTML code element.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/e_theme_and_layout_resolution.markdown#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<code>default/default</code>\n```\n\n----------------------------------------\n\nTITLE: Building No Frills Magento 1 Layout Document using Bash\nDESCRIPTION: This command runs the build script for the No Frills Magento 1 Layout project. It generates output files in the './deliverable/nofrills_layout' directory.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n% ./bin/build.bash\n```\n\n----------------------------------------\n\nTITLE: Searching for 'out example' Phrases\nDESCRIPTION: Case-insensitive search for the phrase 'out example' which might indicate awkward phrasing in documentation.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/bin/editing-regex.txt#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nack -i '\\bout example'\n```\n\n----------------------------------------\n\nTITLE: Basic Command Line Prompt Example\nDESCRIPTION: Shows the basic command line prompt indicating readiness for input\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-cli.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$\n```\n\n----------------------------------------\n\nTITLE: Saving Web Page Source to File with curl\nDESCRIPTION: Command showing how to use curl to fetch a web page's source and save it to a local file using output redirection.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-view-source.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl 'http://www.google.com' > file.html\n```\n\n----------------------------------------\n\nTITLE: Generating PDF from LaTeX for No Frills Magento 1 Layout\nDESCRIPTION: This command uses pdflatex to generate a PDF from the LaTeX file produced by the build process. The input file is located in the 'deliverable/nofrills_layout/' directory.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/README.md#2025-04-18_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\npdflatex deliverable/nofrills_layout/No_Frills_Magento_Layout.tex\n```\n\n----------------------------------------\n\nTITLE: Identifying Grammar Issues with 'it add the'\nDESCRIPTION: Case-insensitive search for the phrase 'it add the' which indicates subject-verb agreement errors (should be 'it adds the').\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/bin/editing-regex.txt#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nack -i 'it add the' *.markdownAlan\n```\n\n----------------------------------------\n\nTITLE: Setting Request Parameters for CMS Pages in PHP\nDESCRIPTION: PHP code that sets the module, controller, action, and page_id parameters for a CMS page request in Magento.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/6_cms_page.markdown#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$request->setModuleName('cms')\n    ->setControllerName('page')\n    ->setActionName('view')\n    ->setParam('page_id', $pageId);\n```\n\n----------------------------------------\n\nTITLE: Fetching URLs with curl and displaying responses\nDESCRIPTION: Basic examples of using curl to fetch web pages and API responses. The command displays the raw response content to standard output.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-curl.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl https://alanstorm.com/\n<!DOCTYPE html>\n<!--[if IE 7]>\n<html class=\"ie ie7\" lang=\"en-US\">\n<![endif]-->\n<!--[if IE 8]>\n<html class=\"ie ie8\" lang=\"en-US\">\n//...\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl https://api.twitter.com/1/statuses/alanstorm.json\n{\n    \"errors\": [{\n        \"message\": \"The Twitter REST API v1 is no longer active. Please migrate to API v1.1. https://dev.twitter.com/docs/api/1.1/overview.\",\n        \"code\": 64\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: YouTube Video Embed Template for Magento Widget\nDESCRIPTION: PHTML template file that renders a YouTube video embed using the video ID provided by the widget. This template is used by the YouTube widget when rendering in the frontend.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/7_widgets.markdown#2025-04-18_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<h2>Rick</h2>\n<object width=\"640\" height=\"505\">\n\t<param name=\"movie\" value=\"http://www.youtube.com/v/'<?php \n\techo $this->getVideoId();?>?fs=1&amp;hl=en_US\"></param>\n\t<param name=\"allowFullScreen\" value=\"true\"></param>\n\t<param name=\"allowscriptaccess\" value=\"always\"></param>\n\t<embed src=\"http://www.youtube.com/v/<?php \n\techo $this->getVideoId();?>?fs=1&amp;hl=en_US\"\n\ttype=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" \n\tallowfullscreen=\"true\" width=\"640\" height=\"505\"></embed>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Finding Lowercased HTML References in Prose\nDESCRIPTION: Searches for potentially inappropriate lowercase 'html' in documentation text. The regex excludes properly formatted references by looking for html preceded by non-alphanumeric, non-underscore, non-slash, non-dot characters.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/bin/editing-regex.txt#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nack '[^a-zA-Z_/$.]html' *.markdown\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HTTP Redirects with curl\nDESCRIPTION: Example showing curl's behavior when encountering an HTTP redirect, displaying the exact server response without following the redirect.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/appendix-view-source.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl 'http://google.com'\n<HTML><HEAD><meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\n<TITLE>301 Moved</TITLE></HEAD><BODY>\n<H1>301 Moved</H1>\nThe document has moved\n<A HREF=\"http://www.google.com/\">here</A>.\n</BODY></HTML>\n```\n\n----------------------------------------\n\nTITLE: Complex Layout Action Implementation\nDESCRIPTION: Controller action demonstrating loading of XML layout from file and advanced block generation.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/2_page_layout.markdown#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function complexAction()\n{\t\t\n    $layout = Mage::getSingleton('core/layout');\n    $path\t= Mage::getModuleDir('', 'Nofrills_Booklayout') . DS . \n    'page-layouts' . DS . 'complex.xml';\n    $xml = simplexml_load_file($path,\n    Mage::getConfig()->getModelClassName('core/layout_element'));\n    $layout->setXml($xml);\n    $layout->generateBlocks();\t\t\t\n    echo $layout->setDirectOutput(true)->getOutput();\t\t\t\t\t\t\t\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling PHP Error Display in Magento\nDESCRIPTION: PHP configuration change in index.php to enable error display. This helps developers see PHP errors that would otherwise be hidden in the production environment.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-1/0_intro.markdown#2025-04-18_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nini_set('display_errors', 1);\n```\n\n----------------------------------------\n\nTITLE: Simple Template HTML for Magento Theme\nDESCRIPTION: A simple HTML template that will be rendered when the block is displayed. This example shows a theme-specific template that doesn't belong to any module.\nSOURCE: https://github.com/astorm/magento-layout-no-frills/blob/main/magento-2/src/chapter-5-themes.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<h2>Hello Category Listing Page.</h2>\n```"
  }
]