[
  {
    "owner": "paulveillard",
    "repo": "cybersecurity-devsecops",
    "content": "TITLE: Installing Homebrew on macOS - Bash\nDESCRIPTION: Installs the Homebrew package manager on macOS using a script fetched via curl. This command is a prerequisite for installing other dependencies like Vagrant, VirtualBox, and Ansible using Homebrew taps and casks.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up & Pushing New Feature Branch - Shell\nDESCRIPTION: This snippet shows the initial steps for a contributor: adding the upstream remote, creating a new feature branch based on master, committing changes, and pushing the new branch to the origin (fork).\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/contributing.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit remote add upstream https://github.com/paulveillard/<repos-name>\ngit checkout -b my-new-feature master\ngit commit -a\ngit push origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Virtual Hosts (Ansible)\nDESCRIPTION: Defines a list of Nginx virtual host configurations using the `nginx_vhosts` variable. Each entry in the list represents a server block, allowing specification of listen addresses, server names, root directories, index files, logs, state, and extra parameters. This variable allows dynamic generation of individual virtual host configuration files.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_vhosts: []\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_vhosts:\\n  - listen: \"443 ssl http2\"\\n    server_name: \"example.com\"\\n    server_name_redirect: \"www.example.com\"\\n    root: \"/var/www/example.com\"\\n    index: \"index.php index.html index.htm\"\\n    error_page: \"\"\\n    access_log: \"\"\\n    error_log: \"\"\\n    state: \"present\"\\n    template: \"{{ nginx_vhost_template }}\"\\n    filename: \"example.com.conf\"\\n    extra_parameters: |\\n      location ~ \\\\.php$ {\\n          fastcgi_split_path_info ^(.+\\\\.php)(/.+)$;\\n          fastcgi_pass unix:/var/run/php5-fpm.sock;\\n          fastcgi_index index.php;\\n          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\\n          include fastcgi_params;\\n      }\\n      ssl_certificate     /etc/ssl/certs/ssl-cert-snakeoil.pem;\\n      ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;\\n      ssl_protocols       TLSv1.1 TLSv1.2;\\n      ssl_ciphers         HIGH:!aNULL:!MD5;\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_vhosts:\\n  - listen: \"80\"\\n    server_name: \"example.com www.example.com\"\\n    return: \"301 https://example.com$request_uri\"\\n    filename: \"example.com.80.conf\"\n```\n\n----------------------------------------\n\nTITLE: Defining Nginx Upstream Blocks (Ansible)\nDESCRIPTION: Allows defining Nginx upstream blocks for load balancing configurations using the `nginx_upstreams` variable. This variable accepts a list of upstream definitions, which can then be referenced in server blocks using `proxy_pass` to forward requests to a group of servers.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_upstreams: []\n```\n\n----------------------------------------\n\nTITLE: Cloning Linux Security Scripts Repository (Bash)\nDESCRIPTION: This command uses Git to clone the repository containing the Linux security scripts from GitHub. It is the first step to obtain the scripts locally. Requires the Git command-line tool to be installed on your system.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/linux-security-scripts/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/StrangeRanger/linux-security-scripts\n```\n\n----------------------------------------\n\nTITLE: Cloning the DevSecOps Studio Repository - Bash\nDESCRIPTION: Downloads the DevSecOps Studio project source code from its GitHub repository using the git command. This is typically the first step after installing all necessary prerequisites like Git.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/hysnsec/DevSecOps-Studio.git\n```\n\n----------------------------------------\n\nTITLE: Installing Ansible Galaxy Roles - Bash\nDESCRIPTION: Downloads and installs required Ansible roles listed in the `requirements.yml` file using the `ansible-galaxy` command. These roles are necessary for the subsequent provisioning steps executed by Vagrant.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ ansible-galaxy install -r requirements.yml\n```\n\n----------------------------------------\n\nTITLE: Installing Ansible Roles Bash\nDESCRIPTION: Installs Ansible roles listed in the specified requirements file (`requirements.yml`) into a designated directory (`provisioning/roles`). This command is crucial for setting up the necessary dependencies for Ansible playbooks within the DevSecOps Studio environment. Requires Ansible and the requirements file.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/docs/troubleshooting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ansible-galaxy install -r requirements.yml -p provisioning/roles\n```\n\n----------------------------------------\n\nTITLE: Executing Linux Security Script with Root (Bash)\nDESCRIPTION: These commands demonstrate how to execute a specific script from the cloned repository using `sudo` to gain necessary root privileges. Scripts can be run directly if executable (`./`) or explicitly via the `bash` interpreter. Requires appropriate user permissions to use `sudo`.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/linux-security-scripts/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo ./[script name]\nOR\nsudo bash [script name]\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Playbook (YAML)\nDESCRIPTION: Demonstrates a simple Ansible playbook that applies the `geerlingguy.pip` role to all hosts. It includes an example of setting the `pip_install_packages` variable within the playbook vars to install `docker` and `awscli`.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.pip/README.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n- hosts: all\n\n  vars:\n    pip_install_packages:\n      - name: docker\n      - name: awscli\n\n  roles:\n    - geerlingguy.pip\n```\n\n----------------------------------------\n\nTITLE: Fixing Up Changes into Earlier Commit - Shell\nDESCRIPTION: To incorporate new changes into a commit older than the last one, use `git commit --fixup` followed by an interactive rebase to squash the fixup commit into the target commit. Finally, force push the updated branch.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/contributing.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngit add .\ngit commit --fixup <commit>\ngit rebase -i --autosquash master\ngit push --force-with-lease origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Playbook for Jenkins Installation\nDESCRIPTION: This Ansible playbook demonstrates how to use the 'geerlingguy.jenkins' role to install Jenkins. It defines a target host group 'jenkins', sets a specific hostname variable, and includes the required 'geerlingguy.java' role before applying the Jenkins role. The 'become: true' directive indicates that root privileges are needed for the tasks.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.jenkins/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- hosts: jenkins\n  vars:\n    jenkins_hostname: jenkins.example.com\n  roles:\n    - role: geerlingguy.java\n    - role: geerlingguy.jenkins\n      become: true\n```\n\n----------------------------------------\n\nTITLE: Installing analyze_hosts Dependencies - Bash\nDESCRIPTION: These commands perform a one-time setup by cloning the project repository from GitHub, navigating into the project directory, and installing the required Python dependencies listed in `requirements.txt` using pip3.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/security-scripts/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone https://github.com/PeterMosmans/security-scripts && \\\ncd security-script && \\\npip3 install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Playbook for Logstash Role\nDESCRIPTION: This YAML snippet shows an example Ansible playbook structure. It targets hosts in the 'search' group and includes a `pre_tasks` section to set a Java package fact specifically for Debian/Ubuntu. It then lists the necessary roles to apply: `geerlingguy.java`, `geerlingguy.elasticsearch`, and finally the `geerlingguy.logstash` role.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.logstash/README.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n- hosts: search\n\n  pre_tasks:\n    - name: Use Java 8 on Debian/Ubuntu.\n      set_fact:\n        java_packages:\n          - openjdk-8-jdk\n      when: ansible_os_family == 'Debian'\n\n  roles:\n    - geerlingguy.java\n    - geerlingguy.elasticsearch\n    - geerlingguy.logstash\n```\n\n----------------------------------------\n\nTITLE: Applying Ansible Role for Elasticsearch\nDESCRIPTION: This Ansible playbook snippet demonstrates how to include the 'geerlingguy.java' and 'geerlingguy.elasticsearch' roles in a playbook to provision hosts. It assumes target hosts are defined in the 'search' group within the Ansible inventory.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.elasticsearch/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- hosts: search\n      roles:\n        - geerlingguy.java\n        - geerlingguy.elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Python Library with Ansible PIP Role (YAML)\nDESCRIPTION: This Ansible playbook snippet demonstrates how to install the 'docker' Python library, which is required for many Ansible modules that interact with Docker, by using the 'geerlingguy.pip' role. It also includes the 'geerlingguy.docker' role to ensure Docker is installed on the target hosts before attempting to use the Docker modules.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.docker/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- hosts: all\n\n  vars:\n    pip_install_packages:\n      - name: docker\n\n  roles:\n    - geerlingguy.pip\n    - geerlingguy.docker\n```\n\n----------------------------------------\n\nTITLE: Setting up DevSecOps Studio via Command Line - Bash\nDESCRIPTION: Provides a quick three-step process to download the project repository, install required Ansible roles using ansible-galaxy, and provision the DevSecOps environment using Vagrant. Requires Git, Ansible, Vagrant, and VirtualBox to be pre-installed and configured.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/hysnsec/DevSecOps-Studio.git && cd DevSecOps-Studio\n$ ansible-galaxy install -r requirements.yml -p provisioning/roles\n$ vagrant up\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Playbook for GitLab Runner (YAML)\nDESCRIPTION: This YAML snippet provides an example of how to integrate and use the `gitlab-runner` role within an Ansible playbook. It demonstrates setting necessary variables like the `gitlab_runner_coordinator_url`, `gitlab_runner_tags`, and optionally `gitlab_runner_coordinator_cert_path`, as well as prompting the user for the `gitlab_runner_registration_token`.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/gitlab-runner/README.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n---\n- hosts: gitlab-runner\n  become: true\n  roles:\n    - gitlab-runner\n  vars:\n    gitlab_runner_coordinator_url: 'https://gitlab.example.com/ci'\n    gitlab_runner_tags: [ 'docker' ]\n    gitlab_runner_coordinator_cert_path: \"./certs/gitlab.example.com.crt\"\n  vars_prompt:\n   - name: \"gitlab_runner_registration_token\"\n     prompt: \"Registration token is\"\n  tags:\n    - runner\n```\n\n----------------------------------------\n\nTITLE: Syncing Feature Branch with Upstream - Shell\nDESCRIPTION: Use this command sequence to update your feature branch to include the latest changes from the upstream master branch by rebasing. This keeps the commit history linear and clean.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/contributing.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout my-new-feature\ngit fetch -a\ngit pull --rebase upstream master\ngit push --force-with-lease origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Service State and Enabled Status (Ansible)\nDESCRIPTION: Manages the state (e.g., `started`, `stopped`, `restarted`) and enabled-at-boot status of the Nginx service after configuration. Useful for controlling the service lifecycle.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_service_state: started\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_service_enabled: yes\n```\n\n----------------------------------------\n\nTITLE: Amending Latest Commit & Force Pushing - Shell\nDESCRIPTION: If changes are related to the most recent commit or if a pull request has only one commit, use these commands to add new changes, amend the last commit, and force push (safely) to update the remote branch.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/contributing.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngit add .\ngit commit --amend\ngit push --force-with-lease origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Installing Ansible via Pip on Linux - Bash\nDESCRIPTION: Installs the Ansible package using the Python package installer, pip, on Linux systems. This requires Python and pip to be already installed and available in the system's PATH.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install ansible\n```\n\n----------------------------------------\n\nTITLE: Installing Ansible via Pip on Windows - Bash\nDESCRIPTION: Installs the Ansible package using the Python package installer, pip, on Windows. This command assumes Python 3 and pip were previously installed and are available in the system's PATH.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npip install ansible\n```\n\n----------------------------------------\n\nTITLE: Setup and Run Molecule Testing Workflow - Bash\nDESCRIPTION: These commands guide the user through setting up a Python virtual environment, installing necessary tools (docker, molecule), and executing the standard Molecule workflow (`create`, `converge`, `verify`) for testing an Ansible role. The `-s` flag specifies the test scenario (e.g., `devsecops`). Requires Python, virtualenv, Docker, and Molecule.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/docs/testing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ virtualenv env\n$ source/env/bin/activate\n(env) $ pip install docker molecule==2.19\n\n# We need to create docker container for a particular box, obviously for testing needs\n(env) $ molecule create -s devsecops # other options include jenkins, gitlab, gitlab-runner\n\n# Next run the ansible script to provision the container\n(env) $ molecule converge -s devsecops\n\n# Finally we test our changes with the scripts under tests/test_default.py\n(env) $ molecule verify -s devsecops\n```\n\n----------------------------------------\n\nTITLE: Installing VirtualBox via Apt on Linux - Bash\nDESCRIPTION: Adds the VirtualBox repository to the system's sources list, downloads and adds the repository key, updates the package list, and installs VirtualBox using apt on Debian-based systems. Requires root privileges (`sudo`).\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo sh -c 'echo \"deb http://download.virtualbox.org/virtualbox/debian xenial contrib\" >> /etc/apt/sources.list.d/virtualbox.list'\n\nwget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add -\n\nsudo apt update\n\nsudo apt install virtualbox\n```\n\n----------------------------------------\n\nTITLE: Including Docker Installation Role in Ansible Playbook (YAML)\nDESCRIPTION: This simple Ansible playbook snippet shows the basic way to include the 'geerlingguy.docker' role in a play. By including this role, the defined tasks within the role will execute, installing and configuring Docker on the hosts targeted by the playbook based on the role's default variables or any overrides provided.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.docker/README.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n- hosts: all\n  roles:\n    - geerlingguy.docker\n```\n\n----------------------------------------\n\nTITLE: Using the Ruby Ansible Role (YAML)\nDESCRIPTION: This snippet shows a simple Ansible playbook example demonstrating how to apply the 'geerlingguy.ruby' role to a target host group named 'server'. This is the standard way to include and execute the role within an Ansible automation workflow.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.ruby/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- hosts: server\n  roles:\n    - role: geerlingguy.ruby\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Playbook Including Nginx Role\nDESCRIPTION: This snippet provides a basic example of an Ansible playbook that includes the `geerlingguy.nginx` role. It shows how to apply the role to a target host group ('server') to deploy and configure Nginx.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: server\n  roles:\n    - { role: geerlingguy.nginx }\n```\n\n----------------------------------------\n\nTITLE: Applying Ansible Role: geerlingguy.kibana (YAML)\nDESCRIPTION: This Ansible playbook snippet demonstrates how to apply the 'geerlingguy.kibana' role to a group of target hosts named 'kibana'.\nThis requires the 'geerlingguy.kibana' role to be installed and available to your Ansible controller, and an inventory file defining the 'kibana' group.\nIt executes the role's tasks on the specified hosts to install and configure Kibana.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.kibana/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- hosts: kibana\n  roles:\n    - geerlingguy.kibana\n```\n\n----------------------------------------\n\nTITLE: Using Ansible Role to Install Packer (YAML)\nDESCRIPTION: This snippet shows a basic Ansible playbook structure to apply the `geerlingguy.packer` role to a group of hosts named 'servers'. It demonstrates how to include the role in your playbook to automate the Packer installation process.  It requires the `geerlingguy.packer` role to be installed and available to Ansible.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.packer/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- hosts: servers\n  roles:\n    - geerlingguy.packer\n```\n\n----------------------------------------\n\nTITLE: Example Package Definitions (YAML)\nDESCRIPTION: Provides examples for the `pip_install_packages` variable, showing how to specify name/version, get the latest, uninstall (`state: absent`), update (`state: latest`), force reinstall (`state: forcereinstall`), and install into a virtual environment (`virtualenv`).\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.pip/README.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\npip_install_packages:\n  # Specify names and versions.\n  - name: docker\n    version: \"1.2.3\"\n  - name: awscli\n    version: \"1.11.91\"\n\n  # Or specify bare packages to get the latest release.\n  - docker\n  - awscli\n\n  # Or uninstall a package.\n  - name: docker\n    state: absent\n\n  # Or update a package ot the latest version.\n  - name: docker\n    state: latest\n\n  # Or force a reinstall.\n  - name: docker\n    state: forcereinstall\n\n  # Or install a package in a particular virtualenv.\n  - name: docker\n    virtualenv: /my_app/venv\n```\n\n----------------------------------------\n\nTITLE: Installing Vagrant via Dpkg on Linux - Bash\nDESCRIPTION: Downloads a specific version of the Vagrant .deb package using wget, installs it using dpkg, and then installs any missing dependencies using apt-get. This method is recommended over the standard apt package. Requires wget, dpkg, apt-get, and root privileges (`sudo`).\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Looks like vagrant doesn't play nicely if you install with apt\nVAGRANT_VERSION=2.2.1\nwget https://releases.hashicorp.com/vagrant/${VAGRANT_VERSION}/vagrant_${VAGRANT_VERSION}_x86_64.deb\nsudo dpkg -i vagrant_${VAGRANT_VERSION}_x86_64.deb\n\nsudo apt-get install python3 python3-pip\n```\n\n----------------------------------------\n\nTITLE: Running Linux Dependency Setup Script via Curl - Bash\nDESCRIPTION: Downloads a setup script from GitHub, makes it executable, and runs it to install DevSecOps Studio dependencies on Linux. This provides an automated way to install required tools with necessary permissions.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/hysnsec/DevSecOps-Studio/master/setup/Linux_DevSecOps_Setup.sh && chmod +x Linux_DevSecOps_Setup.sh && ./Linux_DevSecOps_Setup.sh;\n```\n\n----------------------------------------\n\nTITLE: Installing Vagrant via Homebrew Cask on macOS - Bash\nDESCRIPTION: Installs Vagrant using the Homebrew package manager's cask functionality on macOS. This command simplifies the installation process for Vagrant once Homebrew is set up and configured.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew cask install vagrant\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed SSL Cert with OpenSSL\nDESCRIPTION: This shell command uses the `openssl req` utility to generate a self-signed X.509 certificate (`.crt`) and an RSA private key (`.key`). It creates a 2048-bit key valid for 3650 days and sets the subject's Common Name (CN) to 'example.com'. This is useful for basic SSL setup between components like Filebeat and Logstash.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.logstash/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ openssl req -x509 -batch -nodes -days 3650 -newkey rsa:2048 -keyout logstash.key -out logstash.crt -subj '/CN=example.com'\n```\n\n----------------------------------------\n\nTITLE: Provisioning the DevSecOps Environment with Vagrant - Bash\nDESCRIPTION: Starts and provisions the virtual machines defined in the project's Vagrantfile. This command downloads the base box if necessary, configures the VMs according to the setup, and runs the specified provisioning scripts (like Ansible playbooks). Requires Vagrant and a provider like VirtualBox to be installed.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/README.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nvagrant up\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies via Chocolatey on Windows - Bash\nDESCRIPTION: Installs Vagrant, VirtualBox, and Git on Windows using the Chocolatey package manager with automatic confirmation (`-y`). This command simplifies obtaining the core required tools after Chocolatey is installed.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nchoco install vagrant virtualbox git -y\n```\n\n----------------------------------------\n\nTITLE: Running Analyze Hosts Docker Image - Shell\nDESCRIPTION: This command executes the analyze_hosts script using its official Docker image. The `--rm` flag ensures the container is automatically removed after the command finishes.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/security-scripts/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run --rm gofwd/analyze_hosts\n```\n\n----------------------------------------\n\nTITLE: Installing VirtualBox via Homebrew Cask on macOS - Bash\nDESCRIPTION: Installs VirtualBox using the Homebrew package manager's cask functionality on macOS. This command simplifies the installation process for VirtualBox once Homebrew is set up and configured.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew cask install virtualbox\n```\n\n----------------------------------------\n\nTITLE: Converting SSL Key to PKCS#8 Format with OpenSSL\nDESCRIPTION: This shell command uses the `openssl pkcs8` utility to convert a standard RSA private key file (`.key`) into the PKCS#8 format (`.p8`). This format is required by newer versions of Filebeat and Logstash for private keys. The `-topk8` flag specifies the PKCS#8 conversion, and `-nocrypt` ensures the output key is not encrypted.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.logstash/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nopenssl pkcs8 -in logstash.key -topk8 -nocrypt -out logstash.p8\n```\n\n----------------------------------------\n\nTITLE: Overriding Nginx Virtual Host Template Per Vhost in Ansible\nDESCRIPTION: This YAML snippet demonstrates how to specify a custom template file for individual virtual hosts within the `nginx_vhosts` list. This overrides the global `nginx_vhost_template` setting for the specific vhost entries where the `template` key is used.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_vhosts:\n  - listen: \"80 default_server\"\n    server_name: \"site1.example.com\"\n    root: \"/var/www/site1.example.com\"\n    index: \"index.php index.html index.htm\"\n    template: \"{{ playbook_dir }}/templates/site1.example.com.vhost.j2\"\n  - server_name: \"site2.example.com\"\n    root: \"/var/www/site2.example.com\"\n    index: \"index.php index.html index.htm\"\n    template: \"{{ playbook_dir }}/templates/site2.example.com.vhost.j2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Gzip via Jinja2 Template Inheritance\nDESCRIPTION: This Jinja2 template snippet demonstrates how to extend a base Nginx configuration template from an Ansible role and override a specific block (`http_gzip`) to add detailed gzip compression settings. This allows customization without copying the entire base template.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_22\n\nLANGUAGE: jinja2\nCODE:\n```\n{% extends 'roles/geerlingguy.nginx/templates/nginx.conf.j2' %}\n\n{% block http_gzip %}\n    gzip on;\n    gzip_proxied any;\n    gzip_static on;\n    gzip_http_version 1.0;\n    gzip_disable \"MSIE [1-6]\\.\";\n    gzip_vary on;\n    gzip_comp_level 6;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/javascript\n        application/x-javascript\n        application/json\n        application/xml\n        application/xml+rss\n        application/xhtml+xml\n        application/x-font-ttf\n        application/x-font-opentype\n        image/svg+xml\n        image/x-icon;\n    gzip_buffers 16 8k;\n    gzip_min_length 512;\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Installing Ansible via Homebrew on macOS - Bash\nDESCRIPTION: Installs Ansible using the Homebrew package manager on macOS. This command simplifies the installation process for Ansible once Homebrew is set up and configured.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install ansible\n```\n\n----------------------------------------\n\nTITLE: Disabling Jenkins Setup Wizard via Script (Ansible/Groovy)\nDESCRIPTION: Adds an Ansible task using the `jenkins_script` module to execute Groovy code on the Jenkins controller. This script checks if the initial setup is complete and marks it as such if not, preventing the setup wizard from appearing unexpectedly. This fix is intended to be added to the `geerlingguy.jenkins` role tasks.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/docs/notes.md#_snippet_2\n\nLANGUAGE: Ansible\nCODE:\n```\n- name: Fix a defect to disable setup wizard\n  jenkins_script:\n    script: |\n      import static jenkins.model.Jenkins.instance as jenkins\n      import jenkins.install.InstallState\n      if (!jenkins.installState.isSetupComplete()) {\n        InstallState.INITIAL_SETUP_COMPLETED.initializeState()\n      }\n    user: \"{{ admin.userid }}\"\n    password: \"{{ admin.password }}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Worker Processes and Connections (Ansible)\nDESCRIPTION: Controls the number of Nginx worker processes, worker connections, and whether `multi_accept` is enabled. These settings are crucial for tuning Nginx performance based on server hardware and expected traffic load.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_worker_processes: \"{{ ansible_processor_vcpus|default(ansible_processor_count) }}\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_worker_connections: \"1024\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_multi_accept: \"off\"\n```\n\n----------------------------------------\n\nTITLE: Defining Python Packages List (YAML)\nDESCRIPTION: Initializes the list variable where each item represents a Python package to be installed, updated, uninstalled, or reinstalled via Pip. Items can be simple names or dictionaries specifying name, version, state, and virtual environment.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.pip/README.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\npip_install_packages: []\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tool via Docker Entrypoint - Shell\nDESCRIPTION: This command demonstrates how to run a specific tool included in the analyze_hosts Docker image, such as testssl.sh, by overriding the default entrypoint with the `--entrypoint` flag.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/security-scripts/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run --rm --entrypoint 'testssl.sh' gofwd/analyze_hosts\n```\n\n----------------------------------------\n\nTITLE: Adding Extra HTTP Options to Nginx Config (Ansible)\nDESCRIPTION: Allows injecting custom Nginx configuration lines directly into the top-level `http` block within `nginx.conf`. This is useful for adding directives not explicitly covered by other variables.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_extra_http_options: |\\n  proxy_buffering    off;\\n  proxy_set_header   X-Real-IP $remote_addr;\\n  proxy_set_header   X-Scheme $scheme;\\n  proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\\n  proxy_set_header   Host $http_host;\n```\n\n----------------------------------------\n\nTITLE: Install GitLab Runner Ansible Role (Bash)\nDESCRIPTION: This snippet shows the command to install the `Furdarius.gitlab-runner` Ansible role using the `ansible-galaxy` command-line tool. This is a prerequisite step before using the role in an Ansible playbook.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/gitlab-runner/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nansible-galaxy install Furdarius.gitlab-runner\n```\n\n----------------------------------------\n\nTITLE: Installing Python 3 via Chocolatey on Windows - Bash\nDESCRIPTION: Installs Python 3, including the pip package installer, using the Chocolatey package manager on Windows. This is a prerequisite for installing Ansible via pip on Windows.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nchoco install python3 -y\n```\n\n----------------------------------------\n\nTITLE: Adding Retries for Jenkins Plugin Installation (Ansible/YAML)\nDESCRIPTION: Configures an Ansible task responsible for installing Jenkins plugins to retry on failure. This is a workaround for intermittent plugin installation issues, adding retries, a delay, and using `register` and `until` to check for task success, as discussed in Github issue #169.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/docs/notes.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n  retries: 2                # https://github.com/geerlingguy/ansible-role-jenkins/issues/169\n  delay: 3\n  register: result            # <<<\n  until: result is succeeded  # <<<\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Log Format (Ansible)\nDESCRIPTION: Customizes the log format used by Nginx for access logs. This variable accepts the string definition for the `log_format` directive, allowing control over the information captured in log entries.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_log_format: |-\\n  '$remote_addr - $remote_user [$time_local] \"$request\" '\\n  '$status $body_bytes_sent \"$http_referer\" '\\n  '\"$http_user_agent\" \"$http_x_forwarded_for\"'\n```\n\n----------------------------------------\n\nTITLE: Installing Chocolatey on Windows - PowerShell\nDESCRIPTION: Executes a PowerShell command from the command prompt to download and run the Chocolatey installation script. Chocolatey is a package manager for Windows, used to simplify the installation of required tools like Vagrant, VirtualBox, and Git.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/README.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n@\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"\n```\n\n----------------------------------------\n\nTITLE: Setting Nginx Client Max Body Size (Ansible)\nDESCRIPTION: Configures the maximum allowed size of the client request body. This setting is crucial for file uploads and preventing large requests from consuming excessive resources.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_client_max_body_size: \"64m\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx TCP Options (Ansible)\nDESCRIPTION: Controls various TCP connection options like `sendfile`, `tcp_nopush`, and `tcp_nodelay`. These settings affect how Nginx handles file transfers and network buffering for improved performance.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_sendfile: \"on\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_tcp_nopush: \"on\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_tcp_nodelay: \"on\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Keepalive Settings (Ansible)\nDESCRIPTION: Sets the `keepalive_timeout` and `keepalive_requests` directives for persistent connections. These settings influence how long Nginx keeps a connection open and how many requests can be served over a single connection.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_keepalive_timeout: \"65\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_keepalive_requests: \"100\"\n```\n\n----------------------------------------\n\nTITLE: Controlling Nginx Default Vhost Removal (Ansible)\nDESCRIPTION: Sets whether the default Nginx virtual host configuration provided by the package should be removed. Setting this to `true` is useful if you intend for one of your custom virtual hosts to handle requests to the base server address (`/`).\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_remove_default_vhost: false\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Global Config Options to Nginx (Ansible)\nDESCRIPTION: Allows injecting custom Nginx configuration lines at the very top of the `nginx.conf` file, outside the `http` block. Useful for directives like `worker_rlimit_nofile`.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_extra_conf_options: |\\n  worker_rlimit_nofile 8192;\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Default Logs (Ansible)\nDESCRIPTION: Sets the paths and levels for the default Nginx error and access logs. This allows customization or disabling of the global log files.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_error_log: \"/var/log/nginx/error.log warn\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_access_log: \"/var/log/nginx/access.log main buffer=16k\"\n```\n\n----------------------------------------\n\nTITLE: Controlling Nginx Server Tokens (Ansible)\nDESCRIPTION: Determines whether Nginx includes its version number in HTTP headers. Setting this to `\"off\"` can slightly enhance security by obfuscating the exact server version.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_server_tokens: \"on\"\n```\n\n----------------------------------------\n\nTITLE: Stopping and Disabling Logstash-Web Service (Ansible)\nDESCRIPTION: This is an Ansible task snippet using the `service` module. It ensures that the `logstash-web` service is stopped (`state=stopped`) and configured not to start automatically on system boot (`enabled=no`). This task is suggested as a potential workaround for issues involving high CPU usage caused by the `logstash-web` process repeatedly failing to start.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.logstash/README.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Ensure logstash-web process is stopped and disabled.\n  service: name=logstash-web state=stopped enabled=no\n```\n\n----------------------------------------\n\nTITLE: Setting Nginx User (Ansible)\nDESCRIPTION: Configures the operating system user under which the Nginx worker processes will run. This variable overrides the distribution's default Nginx user.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_user: \"nginx\"\n```\n\n----------------------------------------\n\nTITLE: Setting Nginx Server Names Hash Bucket Size (Ansible)\nDESCRIPTION: Adjusts the hash bucket size for server names. This setting may need to be increased if you configure a large number of virtual hosts or use very long server names to prevent Nginx startup errors.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_server_names_hash_bucket_size: \"64\"\n```\n\n----------------------------------------\n\nTITLE: Setting Molecule Python Interpreter (Ansible/YAML)\nDESCRIPTION: Specifies the Python interpreter to use on Molecule instances within the `playbook.yml` to resolve dependency import errors for Ansible modules. This is required when the default `/usr/bin/python` is missing necessary libraries like `setuptools`.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/docs/notes.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nansible_python_interpreter: /usr/bin/python3\n```\n\n----------------------------------------\n\nTITLE: Getting Jenkins Initial Admin Password using Bash\nDESCRIPTION: This snippet provides bash commands to SSH into the Jenkins Vagrant box and retrieve the initial administrator password required for the first-time Jenkins login. It assumes the user is in the DevSecOps Studio directory.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/docs/jenkins.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# SSH into jenkins box, ensure you are DevSecOps Studio directory.\n$ vagrant ssh jenkins\n\n# Get the initial admin password\n$ sudo cat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n----------------------------------------\n\nTITLE: Controlling RedHat/CentOS Nginx Yum Repo (Ansible)\nDESCRIPTION: (RedHat/CentOS only) Determines whether the official Nginx yum repository is installed. Set to `false` if you prefer using the default OS packages or manage repositories separately.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_yum_repo_enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Pip Package Name (YAML)\nDESCRIPTION: Sets the name of the operating system package to install for Pip. This variable can be adjusted for different Python versions or distributions, such as `python3-pip` for Python 3 on Ubuntu.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.pip/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\npip_package: python-pip\n```\n\n----------------------------------------\n\nTITLE: Check SSL/TLS Ciphers using analyze_hosts.sh\nDESCRIPTION: This example shows how to run `analyze_hosts.sh` to perform comprehensive SSL/TLS cipher checks (`--ssl`) on specific ports (`--sslports 443`) for a host like www.microsoft.com, with verbose output (`-v`).\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/security-scripts/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n./analyze_hosts.sh --ssl --sslports 443 -v www.microsoft.com\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory and Checking Vagrant Status - Bash\nDESCRIPTION: Changes the current directory to the newly cloned DevSecOps-Studio repository and then runs `vagrant status` to check the state of the defined Vagrant virtual machines. This verifies the setup is ready for provisioning.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ cd DevSecOps-Studio && vagrant status\n```\n\n----------------------------------------\n\nTITLE: Install docker-py Python library (bash)\nDESCRIPTION: This bash command installs the `docker-py` Python library globally using `pip`. It requires `pip` to be installed and uses `sudo` for system-wide installation privileges. This library is needed to interact with the Docker Engine API from Python.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/provisioning/molecule/gitlab/INSTALL.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo pip install docker-py\n```\n\n----------------------------------------\n\nTITLE: Installing docker-py using pip in Bash\nDESCRIPTION: Installs the `docker-py` Python library using the `pip` package installer. This command is typically run with `sudo` privileges to install the library system-wide. It is a necessary dependency for interacting with the Docker API programmatically from Python.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/provisioning/molecule/prod/INSTALL.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo pip install docker-py\n```\n\n----------------------------------------\n\nTITLE: Check SSL Certificate Details using analyze_hosts.sh\nDESCRIPTION: This command example demonstrates how to use `analyze_hosts.sh` with the `--sslcert` option to retrieve and display details about the SSL certificate of a specific host, such as www.google.com.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/security-scripts/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n./analyze_hosts.sh --sslcert www.google.com\n```\n\n----------------------------------------\n\nTITLE: Disabling Jenkins Setup Wizard via Separate Task (Ansible/Groovy)\nDESCRIPTION: Creates a dedicated Ansible task, intended to be saved as `disable-wizard.yml` and included from `main.yml`, that executes Groovy code on the Jenkins controller. This script explicitly marks the Jenkins initial setup as complete to prevent the setup wizard from appearing, addressing Github issue #181.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/docs/notes.md#_snippet_4\n\nLANGUAGE: Ansible\nCODE:\n```\n- name: Fix a defect to disable setup wizard\n  jenkins_script:\n    script: |\n      import static jenkins.model.Jenkins.instance as jenkins\n      import jenkins.install.InstallState\n      if (!jenkins.installState.isSetupComplete()) {\n        InstallState.INITIAL_SETUP_COMPLETED.initializeState()\n      }\n    user: \"{{ jenkins_admin_username }}\"\n    password: \"{{ jenkins_admin_password }}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ubuntu Nginx PPA Usage (Ansible)\nDESCRIPTION: (Ubuntu only) Controls whether to use the official Nginx PPA (`stable` or `development`) instead of the standard Ubuntu repositories for installation.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_ppa_use: false\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_ppa_version: stable\n```\n\n----------------------------------------\n\nTITLE: Making Ansible Test Shim Executable - Shell\nDESCRIPTION: This command changes the permissions of the `tests/test.sh` file, adding the execute permission for the owner, making it possible to run the script directly.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.jenkins/tests/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nchmod +x tests/test.sh\n```\n\n----------------------------------------\n\nTITLE: Making Ansible Test Shim Executable (Shell)\nDESCRIPTION: Changes the permissions of the downloaded test shim script (`tests/test.sh`) to make it executable. This is a necessary step before the script can be run to initiate the tests. Requires file system access and appropriate permissions.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.packer/tests/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nchmod +x tests/test.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Molecule for GitLab Role Testing (Ansible/YAML)\nDESCRIPTION: Provides specific Molecule scenario configurations required for testing the Gitlab Ansible role, particularly in a Docker environment. Includes setting a variable to ignore restart handler failures, updating the apt cache as a pre-task, and removing the `.dockerenv` file to prevent issues with Gitlab Omnibus.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/docs/notes.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n  vars:\n    gitlab_restart_handler_failed_when: false\n\n  pre_tasks:\n    - name: Update apt cache.\n      apt: update_cache=yes cache_valid_time=600\n      when: ansible_os_family == 'Debian'\n      changed_when: false\n\n    - name: Remove the .dockerenv file so GitLab Omnibus doesn't get confused.\n      file:\n        path: /.dockerenv\n        state: absent\n```\n\n----------------------------------------\n\nTITLE: analyze_hosts.sh Command Line Usage\nDESCRIPTION: This comprehensive snippet details the command-line interface for the `analyze_hosts.sh` script, listing all available options for scanning, port selection, logging, input files, and tool locations.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/security-scripts/README.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n./analyze_hosts.sh [OPTION]... [HOST]\n\nScanning options:\n -a, --all               perform all basic scans\n     --max               perform all advanced scans (more thorough)\n -b, --basic             perform basic scans (fingerprint, ssl, trace)\n                         results of HOST matches regexp FILTER\n     --dns               test for recursive query and version string\n -f                      perform web fingerprinting (all webports)\n     --fingerprint       perform all web fingerprinting methods\n -h, --header            show webserver headers (all webports)\n -n, --nikto             nikto webscan (all webports)\n -p                      nmap portscan (top 1000 TCP ports)\n     --ports             nmap portscan (all ports, TCP and UDP)\n     --redirect          test for open secure redirect\n -s                      check SSL configuration\n     --ssl               perform all SSL configuration checks\n     --sslcert           show details of SSL certificate\n     --timeout=SECONDS   change timeout for tools (default 60)\n     --ssh               perform SSH configuration checks\n -t                      check webserver for HTTP TRACE method\n     --trace             perform all HTTP TRACE method checks\n -w, --whois             perform WHOIS lookup for (hostname and) IP address\n -W                      confirm WHOIS results before continuing scan\n     --filter=FILTER     only proceed with scan of HOST if WHOIS\n     --wordlist=filename scan webserver for existence of files in filename\n\nPort selection (comma separated list):\n     --webports=PORTS    use PORTS for web scans (default 80,443,8080)\n     --sslports=PORTS    use PORTS for ssl scans (default 443,465,993,995,3389)\n\nLogging and input file:\n -d, --directory=DIR     location of temporary files (default /tmp)\n -i, --inputfile=FILE    use a file containing hostnames\n -l, --log               log each scan in a separate logfile\n     --nocolor           don't use fancy colors in screen output\n -o, --output=FILE       concatenate all OK and WARNING messages into FILE\n -q, --quiet             quiet\n -v, --verbose           show server responses\n\nDefault programs:\n     --cipherscan=FILE   location of cipherscan (default cipherscan)\n     --openssl=FILE      location of openssl (default openssl)\n\n -u                      update this script (if it's a cloned repository)\n     --update            force update (overwrite all local modifications)\n     --version           print version information and exit\n\n                         BLUE: INFO, status messages\n                         GREEN: OK, secure settings\n                         RED: WARNING, possible vulnerabilities\n\n [HOST] can be a single (IP) address, an IP range, eg. 127.0.0.1-255\n or multiple comma-separated addressess\n```\n\n----------------------------------------\n\nTITLE: Configuring Pip Executable Path (YAML)\nDESCRIPTION: Specifies the command used to invoke Pip. The role attempts to auto-detect based on `pip_package`, but this variable allows explicit override, for example, to use `pip3.6`.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.pip/README.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\npip_executable: pip\n```\n\n----------------------------------------\n\nTITLE: Sample Scan Results Output Format\nDESCRIPTION: This snippet provides an example of the JSON structure used by the `analyze_hosts.sh` script to output scan results. It includes arguments used, start/finish times, and results per host detailing open ports and security alerts.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/security-scripts/README.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"arguments\": {\n    \"target\": \"1.2.3.1/30\",\n    \"version\": false,\n    \"dry_run\": false,\n    \"inputfile\": \"0frnfb4e\",\n    \"output_file\": \"output.txt,\n    \"compact\": true,\n    \"queuefile\": \"analyze_hosts.queue\",\n    \"resume\": false,\n    \"force\": false,\n    \"debug\": false,\n    \"verbose\": false,\n    \"quiet\": false,\n    \"allports\": false,\n    \"no_portscan\": false,\n    \"port\": null,\n    \"up\": false,\n    \"udp\": false,\n    \"framework\": false,\n    \"http\": true,\n    \"json\": \"results.json\",\n    \"ssl\": true,\n    \"nikto\": true,\n    \"sslcert\": false,\n    \"trace\": false,\n    \"whois\": false,\n    \"proxy\": null,\n    \"timeout\": true,\n    \"threads\": 5,\n    \"user_agent\": \"analyze_hosts\",\n    \"password\": null,\n    \"username\": null,\n    \"maxtime\": 1200,\n    \"testssl.sh\": true,\n    \"curl\": false,\n    \"wpscan\": true,\n    \"droopescan\": true,\n    \"nmap\": true,\n    \"nmap_arguments\": \"-sV --open -sS --script=banner,dns-nsid,dns-recursion,http-cisco-anyconnect,http-php-version,http-title,http-trace,ntp-info,ntp-monlist,nbstat,rdp-enum-encryption,rpcinfo,sip-methods,smb-os-discovery,smb-security-mode,smtp-open-relay,ssh2-enum-algos,vnc-info,xmlrpc-methods,xmpp-info\"\n  },\n  \"date_start\": \"2020-05-26 31:33:06\"\n  \"results\": {\n    \"1.2.3.1\": {\n      \"ports\": [\n        53\n      ]\n    },\n    \"1.2.3.2\": {\n      \"ports\": []\n    },\n    \"1.2.3.3\": {\n      \"ports\": [\n        80,\n        443\n      ],\n      \"alerts\": [\n        \":443  LUCKY13 (CVE-2013-0169), experimental     potentially VULNERABLE, uses cipher block chaining (CBC) ciphers with TLS. Check patches\"\n      ]\n    },\n    \"1.2.3.4\": {\n      \"ports\": [\n        80,\n        443\n      ],\n      \"alerts\": [\n        \":443 + OSVDB-3092: /download/: This might be interesting...\",\n        \":443 + OSVDB-3092: /status/: This might be interesting...\",\n        \":443 + OSVDB-4231: /DHrPp.xml: Coccoon from Apache-XML project reveals file system path in error messages.\",\n        \":443 + OSVDB-3092: /upgrade.php: upgrade.php was found.\"\n      ]\n    }\n  },\n  \"date_finish\": \"2020-05-26 31:33:07\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rehashing OpenSSL Certificates Bash\nDESCRIPTION: Executes the `c_rehash` script located within the OpenSSL installation directory. This script updates the symbolic links in the OpenSSL certificate directory (`certs`) to reflect any newly added certificates. It's a critical step after adding a corporate root certificate to ensure OpenSSL applications can find and trust it. Requires OpenSSL to be installed and the correct path to the `c_rehash` utility.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/docs/troubleshooting.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ /usr/local/opt/openssl/bin/c_rehash\n```\n\n----------------------------------------\n\nTITLE: Downloading Ansible Role Test Shim Script - Shell\nDESCRIPTION: This command downloads the test shim script from a GitHub Gist URL and saves it as `tests/test.sh` in the local directory. It's a prerequisite for running the tests. Requires `wget` to be installed.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.ruby/tests/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget -O tests/test.sh https://gist.githubusercontent.com/geerlingguy/73ef1e5ee45d8694570f334be385e181/raw/\n```\n\n----------------------------------------\n\nTITLE: Downloading Ansible Test Shim Script - Shell\nDESCRIPTION: This command downloads a test shim script from a specified Gist URL and saves it as `tests/test.sh` in the local file system, typically used to facilitate testing Ansible roles.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.jenkins/tests/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nwget -O tests/test.sh https://gist.githubusercontent.com/geerlingguy/73ef1e5ee45d8694570f334be385e181/raw/\n```\n\n----------------------------------------\n\nTITLE: display_results.py Command Line Usage\nDESCRIPTION: This snippet shows the command-line arguments and options available for the `display_results.py` Python script, which is used to format and display the JSON scan results from `analyze_hosts.sh`.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/security-scripts/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nusage: display_results.py [-h] [--info] [--version] [inputfile]\n\ndisplay_results version 0.0.1 - displays scan results nicely\n\npositional arguments:\n  inputfile   A JSON file containing scan results\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --info      Show also informational items\n  --version   Show version and exit\n```\n\n----------------------------------------\n\nTITLE: Finding OpenSSL Path with Homebrew Bash\nDESCRIPTION: Uses the Homebrew package manager to display detailed information about the installed OpenSSL package, including its installation prefix. This information is necessary to locate the OpenSSL directories where certificates and utilities like `c_rehash` are stored, particularly when addressing certificate validation errors. Requires Homebrew and OpenSSL to be installed via Homebrew.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/docs/troubleshooting.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ brew info openssl\n```\n\n----------------------------------------\n\nTITLE: Running Ansible Role Tests with Shim - Shell\nDESCRIPTION: This command executes the test shim script (`tests/test.sh`) from the role's root directory. It requires specifying the target distribution (`distro`) and the playbook to run (`playbook`) as environment variables. Optional variables like `cleanup=false` and `container_id=$(date +%s)` can be prefixed to prevent container deletion after the test.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.ruby/tests/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndistro=[distro] playbook=[playbook] ./tests/test.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Ansible Role Tests with Variables - Shell\nDESCRIPTION: This command runs the previously downloaded and made-executable test shim script, passing environment variables `distro` and `playbook` to specify the test environment and playbook to use.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.jenkins/tests/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndistro=[distro] playbook=[playbook] ./tests/test.sh\n```\n\n----------------------------------------\n\nTITLE: Running Ansible Role Tests (Shell)\nDESCRIPTION: Executes the test shim script (`tests/test.sh`) to run the Ansible role tests. It requires setting environment variables `distro` and `playbook` to specify the target distribution and the playbook to use for testing. Must be run from the role's root directory.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.packer/tests/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndistro=[distro] playbook=[playbook] ./tests/test.sh\n```\n\n----------------------------------------\n\nTITLE: Installing docker-py Python Library (Bash)\nDESCRIPTION: This bash command installs the `docker-py` Python library globally using `pip` with `sudo` privileges. It is a required dependency for interacting with the Docker Engine from Python. The command invokes `pip install docker-py` after gaining superuser access via `sudo`.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/provisioning/molecule/devsecops/INSTALL.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo pip install docker-py\n```\n\n----------------------------------------\n\nTITLE: Installing docker-py Python Library with pip - Bash\nDESCRIPTION: This command installs the docker-py Python library globally using the pip package installer. It requires superuser privileges (`sudo`) to write to system directories. This library is necessary for interacting with the Docker Engine API from Python.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/provisioning/molecule/elk/INSTALL.rst#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ sudo pip install docker-py\n```\n\n----------------------------------------\n\nTITLE: Install docker-py library - Bash\nDESCRIPTION: This command installs the `docker-py` Python library using pip with superuser privileges. It assumes pip is already installed on the system. The expected output is the standard output from the pip installation process.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/provisioning/molecule/jenkins/INSTALL.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo pip install docker-py\n```\n\n----------------------------------------\n\nTITLE: Installing docker-py using pip in Bash\nDESCRIPTION: This command installs the `docker-py` library using the `pip` package installer. It requires Python and `pip` to be installed on the system and uses `sudo` to perform a global installation.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/provisioning/molecule/gitlab-runner/INSTALL.rst#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ sudo pip install docker-py\n```\n\n----------------------------------------\n\nTITLE: Installing Gitlab Dependencies on Debian (Ansible/YAML)\nDESCRIPTION: Defines an Ansible task to install the `gnupg2` package on Debian-based systems. This package is a required dependency for the Gitlab Ansible role to function correctly, specifically noted as a fix for Ubuntu 18.04, as per Github issue #145.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/docs/notes.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Install GitLab dependencies (Debian).\n  apt:\n    name: gnupg2\n    state: present\n  when: ansible_os_family == 'Debian'\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Requirements\nDESCRIPTION: This snippet lists the necessary Python packages and their minimum required versions for the project to function correctly. These dependencies are typically installed using a package manager like pip (e.g., 'pip install -r requirements.txt').\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/security-scripts/requirements.txt#_snippet_0\n\nLANGUAGE: requirements.txt\nCODE:\n```\ncolorama\ndroopescan>=1.41.2\npython-nmap>=0.5.0.post1\npython-wappalyzer>=0.2.2\npyyaml\nrequests>=2.9.1\n```\n\n----------------------------------------\n\nTITLE: Listing Python Project Dependencies\nDESCRIPTION: This snippet lists the core Python packages required for the project, along with their exact version specifications. This format is commonly used in a 'requirements.txt' file for dependency management with pip.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/requirements.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nansible==2.9.6\ncffi==1.14.0\ncryptography==2.9\nJinja2==2.11.2\nMarkupSafe==1.1.1\npycparser==2.20\nPyYAML==5.3.1\nsix==1.14.0\n```\n\n----------------------------------------\n\nTITLE: Example PEM Certificate Content Text\nDESCRIPTION: Illustrates the standard PEM format for certificate data, including the BEGIN and END CERTIFICATE boundary markers and base64-encoded content. This example represents the structure of a corporate root certificate file (`corporate_root_certificate.pem`) that needs to be merged or referenced by system/application trust stores to resolve SSL validation issues behind a proxy. It is a data format, not an executable code snippet.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/docs/troubleshooting.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN CERTIFICATE-----\\ndfdfdfdfdfdfdfd some value\\n-----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Making Ansible Role Test Shim Executable - Shell\nDESCRIPTION: This command makes the downloaded `tests/test.sh` file executable using `chmod +x`. This step is necessary before the script can be run. It requires the `tests/test.sh` file to exist.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.ruby/tests/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x tests/test.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Test Cleanup - Shell\nDESCRIPTION: These environment variables are used to control the test execution behavior when added to the run command. `cleanup=false` prevents the automatic deletion of the Docker container after the test, and `container_id=$(date +%s)` assigns a unique ID based on the current timestamp.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.jenkins/tests/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncleanup=false container_id=$(date +%s)\n```\n\n----------------------------------------\n\nTITLE: Downloading Ansible Test Shim Script (Shell)\nDESCRIPTION: Downloads the specified test shim script from a Gist URL and saves it as `tests/test.sh`. This script is essential for running the role tests within a Docker container. Requires `wget` to be installed.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.packer/tests/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nwget -O tests/test.sh https://gist.githubusercontent.com/geerlingguy/73ef1e5ee45d8694570f334be385e181/raw/\n```\n\n----------------------------------------\n\nTITLE: Running Ansible Galaxy Command Bash\nDESCRIPTION: Executes the base `ansible-galaxy` command without arguments. This is often done to test if the command runs successfully or to trigger and diagnose specific issues, such as SSL certificate validation failures when operating behind a corporate proxy. Requires an installed Ansible environment.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/docs/troubleshooting.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ansible-galaxy\n```\n\n----------------------------------------\n\nTITLE: Setting Global Nginx Template Paths in Ansible\nDESCRIPTION: This YAML snippet shows how to define the paths for the main nginx.conf template and the default virtual host template globally using Ansible variables. This allows users to replace the default templates provided by the role with their custom versions.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_conf_template: \"nginx.conf.j2\"\nnginx_vhost_template: \"vhost.j2\"\n```\n\n----------------------------------------\n\nTITLE: Preventing Docker Container Cleanup (Shell)\nDESCRIPTION: Sets environment variables to prevent the Docker container used for testing from being automatically deleted after the test run. `cleanup=false` explicitly disables cleanup, and `container_id=$(date +%s)` provides a unique identifier for the container. Typically used in conjunction with the test execution command.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.packer/tests/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncleanup=false container_id=$(date +%s)\n```\n\n----------------------------------------\n\nTITLE: Setting Global Nginx Conf Template Path with Playbook Dir Variable\nDESCRIPTION: This YAML snippet shows how to set the global path for the `nginx.conf` template using the `playbook_dir` variable, pointing to a template file located relative to the main playbook file. This is a common pattern for including custom template files within an Ansible project.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_conf_template: \"{{ playbook_dir }}/templates/nginx.conf.j2\"\n```\n\n----------------------------------------\n\nTITLE: Setting Debian/Ubuntu Nginx Repository Release (Ansible)\nDESCRIPTION: (Debian/Ubuntu only) Specifies a particular distribution release or repository (like 'wheezy-backports') to install Nginx from, overriding the system's default.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_default_release: \"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Nginx Proxy Cache Path (Ansible)\nDESCRIPTION: Configures the `proxy_cache_path` directive for setting up Nginx's caching capabilities when acting as a reverse proxy. By default, caching is not configured unless this variable is set to a valid path.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/roles/geerlingguy.nginx/README.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nnginx_proxy_cache_path: \"\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Docker Host Entries in Molecule (Ansible/YAML)\nDESCRIPTION: Disables Molecule's attempt to add host entries when using the Docker driver. This is a workaround for a known issue where host entries do not function correctly within Docker containers used by Molecule, as referenced in the Stack Overflow link.\nSOURCE: https://github.com/paulveillard/cybersecurity-devsecops/blob/main/DevSecOps-Studio/docs/notes.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nadd_host_entries: false\n```"
  }
]