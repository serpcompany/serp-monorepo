[
  {
    "owner": "ppy",
    "repo": "osu",
    "content": "TITLE: Replace osuTK.MathHelper.Clamp with Math.Clamp in C#\nDESCRIPTION: This snippet recommends replacing osuTK.MathHelper.Clamp methods with the standard Math.Clamp() for all numeric types, noting special handling for NaN cases in floating point variants.\nSOURCE: https://github.com/ppy/osu/blob/master/CodeAnalysis/BannedSymbols.txt#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nM:osuTK.MathHelper.Clamp(System.Int32,System.Int32,System.Int32)~System.Int32;Use Math.Clamp() instead.\n```\n\nLANGUAGE: C#\nCODE:\n```\nM:osuTK.MathHelper.Clamp(System.Single,System.Single,System.Single)~System.Single;This osuTK helper has unsafe semantics when one of the bounds provided is NaN. Use Math.Clamp() instead.\n```\n\nLANGUAGE: C#\nCODE:\n```\nM:osuTK.MathHelper.Clamp(System.Double,System.Double,System.Double)~System.Double;This osuTK helper has unsafe semantics when one of the bounds provided is NaN. Use Math.Clamp() instead.\n```\n\n----------------------------------------\n\nTITLE: Recommendation to Use IEquatable<T> and EqualityComparer<T> for Equality Checks in C#\nDESCRIPTION: This snippet advises replacing object.Equals method calls with IEquatable<T> or EqualityComparer<T>.Default implementations for type-safe and performant equality comparisons. It highlights various overloads of Equals() on Object, ValueType, and Nullable<T> types, suggesting modern alternatives to improve type safety and code clarity.\nSOURCE: https://github.com/ppy/osu/blob/master/CodeAnalysis/BannedSymbols.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nM:System.Object.Equals(System.Object,System.Object)~System.Boolean;Don't use object.Equals. Use IEquatable<T> or EqualityComparer<T>.Default instead.\n```\n\nLANGUAGE: C#\nCODE:\n```\nM:System.Object.Equals(System.Object)~System.Boolean;Don't use object.Equals. Use IEquatable<T> or EqualityComparer<T>.Default instead.\n```\n\nLANGUAGE: C#\nCODE:\n```\nM:System.ValueType.Equals(System.Object)~System.Boolean;Don't use object.Equals(Fallbacks to ValueType). Use IEquatable<T> or EqualityComparer<T>.Default instead.\n```\n\nLANGUAGE: C#\nCODE:\n```\nM:System.Nullable`1.Equals(System.Object)~System.Boolean;Use == instead.\n```\n\n----------------------------------------\n\nTITLE: Use Task.GetResultSafely() Instead of Task.Result to Avoid Deadlocks\nDESCRIPTION: This snippet recommends replacing Task.Result with Task.GetResultSafely() to prevent potential deadlocks and improve asynchronous code safety.\nSOURCE: https://github.com/ppy/osu/blob/master/CodeAnalysis/BannedSymbols.txt#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nP:System.Threading.Tasks.Task`1.Result;Don't use Task.Result. Use Task.GetResultSafely() to ensure we avoid deadlocks.\n```\n\n----------------------------------------\n\nTITLE: Avoid Non-Generic IComparable, Prefer Generic IComparable<T> in C#\nDESCRIPTION: This snippet recommends replacing non-generic IComparable interfaces with their generic counterparts for type safety and performance advantages in sorting and comparisons.\nSOURCE: https://github.com/ppy/osu/blob/master/CodeAnalysis/BannedSymbols.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nT:System.IComparable;Don't use non-generic IComparable. Use generic version instead.\n```\n\n----------------------------------------\n\nTITLE: Use WaitSafely and Specify Timeout for ManualResetEventSlim Waiting\nDESCRIPTION: This snippet suggests specifying a timeout and using WaitSafely() for ManualResetEventSlim.Wait() calls to prevent indefinite blocking and potential deadlocks.\nSOURCE: https://github.com/ppy/osu/blob/master/CodeAnalysis/BannedSymbols.txt#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nM:System.Threading.ManualResetEventSlim.Wait();Specify a timeout to avoid waiting forever.\n```\n\n----------------------------------------\n\nTITLE: Use Guid.NewGuid() or Guid.Empty Explicitly in C#\nDESCRIPTION: This snippet recommends creating new GUIDs with Guid.NewGuid() rather than using the constructor, and using Guid.Empty for an empty GUID, to improve code clarity and correctness.\nSOURCE: https://github.com/ppy/osu/blob/master/CodeAnalysis/BannedSymbols.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nM:System.Guid.#ctor;Probably meaning to use Guid.NewGuid() instead. If actually wanting empty, use Guid.Empty.\n```\n\n----------------------------------------\n\nTITLE: Replace Realm Collection Notifications with QueryAsyncWithNotifications\nDESCRIPTION: This snippet emphasizes replacing deprecated Realm collection notification methods with QueryAsyncWithNotifications for consistent and updated notification handling.\nSOURCE: https://github.com/ppy/osu/blob/master/CodeAnalysis/BannedSymbols.txt#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nM:Realms.CollectionExtensions.SubscribeForNotifications`1(System.Linq.IQueryable{``0},Realms.NotificationCallbackDelegate{``0});Use osu.Game.Database.RealmObjectExtensions.QueryAsyncWithNotifications(IQueryable<T>,NotificationCallbackDelegate<T>) instead.\n```\n\n----------------------------------------\n\nTITLE: Use Manual Construction and BindTo Instead of GetBoundCopy in Bindable Lists\nDESCRIPTION: This snippet highlights the failure of GetBoundCopy() on iOS and recommends manual creation of bindable objects, followed by BindTo, for better reliability across platforms.\nSOURCE: https://github.com/ppy/osu/blob/master/CodeAnalysis/BannedSymbols.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nM:osu.Framework.Bindables.IBindableList`1.GetBoundCopy();Fails on iOS. Use manual ctor + BindTo instead. (see https://github.com/mono/mono/issues/19900)\n```\n\n----------------------------------------\n\nTITLE: Use osu.Game.Database.RealmObjectExtensions.QueryAsyncWithNotifications for Realm Notifications\nDESCRIPTION: This snippet advises replacing the Realm's SubscribeForNotifications methods with osu.Game.Database.RealmObjectExtensions.QueryAsyncWithNotifications to ensure compatibility and correct notification handling.\nSOURCE: https://github.com/ppy/osu/blob/master/CodeAnalysis/BannedSymbols.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nM:Realms.IRealmCollection`1.SubscribeForNotifications`1(Realms.NotificationCallbackDelegate{``0});Use osu.Game.Database.RealmObjectExtensions.QueryAsyncWithNotifications(IRealmCollection<T>,NotificationCallbackDelegate<T>) instead.\n```\n\nLANGUAGE: C#\nCODE:\n```\nM:Realms.CollectionExtensions.SubscribeForNotifications`1(System.Linq.IQueryable{``0},Realms.NotificationCallbackDelegate{``0});Use osu.Game.Database.RealmObjectExtensions.QueryAsyncWithNotifications(IQueryable<T>,NotificationCallbackDelegate<T>) instead.\n```\n\nLANGUAGE: C#\nCODE:\n```\nM:Realms.CollectionExtensions.SubscribeForNotifications`1(System.Collections.Generic.IList{``0},Realms.NotificationCallbackDelegate{``0});Use osu.Game.Database.RealmObjectExtensions.QueryAsyncWithNotifications(IList<T>,NotificationCallbackDelegate<T>) instead.\n```\n\n----------------------------------------\n\nTITLE: Use osu.Game.Utils.IDeepCloneable<T> Instead of IDeepCloneable<T> in ImageSharp\nDESCRIPTION: This snippet suggests replacing the IDeepCloneable<T> interface from SixLabors.ImageSharp with osu.Game.Utils.IDeepCloneable<T> to align with the project's standards for deep cloning implementations.\nSOURCE: https://github.com/ppy/osu/blob/master/CodeAnalysis/BannedSymbols.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nT:SixLabors.ImageSharp.IDeepCloneable`1;Use osu.Game.Utils.IDeepCloneable<T> instead.\n```\n\n----------------------------------------\n\nTITLE: Replace Humanizer String Extensions with ToPascalCase, ToCamelCase, ToSnakeCase, ToKebabCase\nDESCRIPTION: These snippets suggest replacing Humanizer's culture-sensitive string extension methods with their dehumanized counterparts from StringDehumanizeExtensions to ensure consistent behavior across cultures.\nSOURCE: https://github.com/ppy/osu/blob/master/CodeAnalysis/BannedSymbols.txt#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nM:Humanizer.InflectorExtensions.Pascalize(System.String);Humanizer's .Pascalize() extension method changes behaviour depending on CultureInfo.CurrentCulture. Use StringDehumanizeExtensions.ToPascalCase() instead.\n```\n\nLANGUAGE: C#\nCODE:\n```\nM:Humanizer.InflectorExtensions.Camelize(System.String);Humanizer's .Camelize() extension method changes behaviour depending on CultureInfo.CurrentCulture. Use StringDehumanizeExtensions.ToCamelCase() instead.\n```\n\nLANGUAGE: C#\nCODE:\n```\nM:Humanizer.InflectorExtensions.Underscore(System.String);Humanizer's .Underscore() extension method changes behaviour depending on CultureInfo.CurrentCulture. Use StringDehumanizeExtensions.ToSnakeCase() instead.\n```\n\nLANGUAGE: C#\nCODE:\n```\nM:Humanizer.InflectorExtensions.Kebaberize(System.String);Humanizer's .Kebaberize() extension method changes behaviour depending on CultureInfo.CurrentCulture. Use StringDehumanizeExtensions.ToKebabCase() instead.\n```\n\n----------------------------------------\n\nTITLE: Building and Running osu! Desktop Project - Shell\nDESCRIPTION: This snippet uses the .NET CLI to build and run the osu! project targeting the desktop platform. It requires the .NET 8.0 SDK and is executed from the repository root or a subdirectory where the project file resides. The '--project osu.Desktop' flag specifies the desktop entry point. Standard output displays build and execution logs. Useful for cross-platform testing and development.\nSOURCE: https://github.com/ppy/osu/blob/master/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run --project osu.Desktop\n```\n\n----------------------------------------\n\nTITLE: Switching to Local osu-framework and osu-resources - Shell\nDESCRIPTION: Designed for macOS and Linux terminals, this snippet uses shell scripts to link the osu! project with locally cloned 'osu-framework' and 'osu-resources' directories. Scripts must have execute permissions and require the directories be placed adjacent to one another for correct resolution. These commands automate re-linking dependencies for development and testing of framework/resource updates.\nSOURCE: https://github.com/ppy/osu/blob/master/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nUseLocalFramework.sh\nUseLocalResources.sh\n```\n\n----------------------------------------\n\nTITLE: Switching to Local osu-framework and osu-resources - PowerShell\nDESCRIPTION: This Windows PowerShell snippet provides commands to redirect dependencies to local checkouts of 'osu-framework' and 'osu-resources' for cross-testing modifications. Relevant projects must be cloned in sibling directories. Running 'UseLocalFramework.ps1' and 'UseLocalResources.ps1' will update dependency references within the osu! project, allowing local changes to be reflected without publishing. Outputs typical script status/log messages.\nSOURCE: https://github.com/ppy/osu/blob/master/README.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nUseLocalFramework.ps1\nUseLocalResources.ps1\n```\n\n----------------------------------------\n\nTITLE: Generating a Sample Freeform osu! Game Project with .NET CLI in Bash\nDESCRIPTION: Creates a fully working sample freeform osu! game ruleset named 'MyCoolWorkingRuleset' for demonstration or further development. Depends on the osu! Game Templates being installed. Intended as a complete, runnable starting point.\nSOURCE: https://github.com/ppy/osu/blob/master/Templates/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new ruleset-example -n MyCoolWorkingRuleset\n```\n\n----------------------------------------\n\nTITLE: Creating a Scrolling osu! Ruleset Project with .NET CLI in Bash\nDESCRIPTION: Uses the ruleset-scrolling template to scaffold a new empty scrolling ruleset, ideal for rhythm game mechanics involving directional scrolling interactions. Requires the template package and a project name parameter. Resulting project is ready for development with scrolling features.\nSOURCE: https://github.com/ppy/osu/blob/master/Templates/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new ruleset-scrolling -n MyCoolRuleset\n```\n\n----------------------------------------\n\nTITLE: Updating the osu! Source Code - Shell\nDESCRIPTION: This snippet updates the local osu! Git repository to the latest commit from the default remote using 'git pull.' It should be executed inside the 'osu' directory. Assumes that Git is already initialized and the current directory is a valid osu! repo clone. Outputs the changes fetched and applied, helpful for keeping the local source up to date with upstream development.\nSOURCE: https://github.com/ppy/osu/blob/master/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Creating a Freeform osu! Ruleset Project with .NET CLI in Bash\nDESCRIPTION: Generates a new empty freeform ruleset project called 'MyCoolRuleset' using the installed osu! ruleset template. Relies on the previous installation of osu! Game Templates and requires specifying a project name with the '-n' flag. Produces a ready-to-develop C# ruleset project directory.\nSOURCE: https://github.com/ppy/osu/blob/master/Templates/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new ruleset -n MyCoolRuleset\n```\n\n----------------------------------------\n\nTITLE: Generating a Sample Scrolling osu! Game Project with .NET CLI in Bash\nDESCRIPTION: Scaffolds a complete, runnable example of a scrolling-based ruleset under the project name 'MyCoolWorkingRuleset'. Requires osu! Game Templates and .NET CLI. Suitable for users wanting a quick start to a scrolling osu! ruleset with sample code included.\nSOURCE: https://github.com/ppy/osu/blob/master/Templates/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new ruleset-scrolling-example -n MyCoolWorkingRuleset\n```\n\n----------------------------------------\n\nTITLE: Cloning and Entering the osu! Repository - Shell\nDESCRIPTION: This code snippet demonstrates how to clone the osu! repository using Git and navigate into the project directory with standard shell commands. Requires Git to be installed on the local system. The 'git clone' command fetches the latest codebase, while 'cd osu' changes the directory into the newly cloned project folder. Intended for Linux, macOS, or Windows terminals with shell support. No output is produced other than typical Git messages.\nSOURCE: https://github.com/ppy/osu/blob/master/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/ppy/osu\ncd osu\n```\n\n----------------------------------------\n\nTITLE: Installing osu! Game Templates using .NET CLI in Bash\nDESCRIPTION: Installs or updates the osu! Game Templates package via the .NET Core CLI, enabling access to project scaffolding templates for osu! dependent projects. Requires .NET Core SDK and internet access. No parameters required; runs once per machine to register the templates.\nSOURCE: https://github.com/ppy/osu/blob/master/Templates/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new install ppy.osu.Game.Templates\n```\n\n----------------------------------------\n\nTITLE: Replacing SpriteText Constructor with OsuSpriteText in osu.Framework\nDESCRIPTION: This snippet indicates that the constructor for SpriteText should be replaced with OsuSpriteText to conform to the framework's customized sprite text component.\nSOURCE: https://github.com/ppy/osu/blob/master/CodeAnalysis/BannedSymbols.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nM:osu.Framework.Graphics.Sprites.SpriteText.#ctor;Use OsuSpriteText.\n```"
  }
]