[
  {
    "owner": "y-crdt",
    "repo": "ydotnet",
    "content": "TITLE: Synchronizing documents using YDotNet\nDESCRIPTION: This C# code demonstrates how to synchronize two YDotNet documents by creating local and remote documents, inserting data into the local document, calculating the state difference, applying the state difference to the remote document, and verifying the text in the remote document. The example uses Doc, Text, and Transaction classes. This synchronization can be done locally or over the Internet.\nSOURCE: https://github.com/y-crdt/ydotnet/blob/main/README.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Set up the local document with some sample data.\nvar localDoc = new Doc();\nvar localText = localDoc.Text(\"name\");\n\nvar localTransaction = localDoc.WriteTransaction();\nlocalText.Insert(localTransaction, 0, \"Y-CRDT\");\nlocalTransaction.Commit();\n\n// Set up the remote document.\nvar remoteDoc = new Doc();\nvar remoteText = remoteDoc.Text(\"name\");\n\n// Get the remote document state vector.\nvar remoteTransaction = remoteDoc.WriteTransaction();\nvar remoteState = remoteTransaction.StateVectorV1();\n\n// Calculate the state diff between the local and the remote document.\nlocalTransaction = localDoc.ReadTransaction();\nvar stateDiff = localTransaction.StateDiffV1(remoteState);\nlocalTransaction.Commit();\n\n// Apply the state diff to synchronize the remote document with the local changes.\nvar result = remoteTransaction.ApplyV1(stateDiff);\n\n// Read the text from the remote document.\nvar text = remoteText.String(remoteTransaction);\n\n// At this point, the `text` variable is \"Y-CRDT\" and this demonstrates how the two\n// documents synchronized their state.\n//\n// This example does it locally but the same could be done over the Internet, for example.\n```\n\n----------------------------------------\n\nTITLE: Using DisposableHandle for Memory Management in C#\nDESCRIPTION: Demonstrates the usage of `DisposableHandle` for managing memory allocated for UTF-8 strings and structs. The `using` statement ensures that the `DisposableHandle` instances are disposed of automatically, releasing the allocated memory.\nSOURCE: https://github.com/y-crdt/ydotnet/blob/main/docs/decisions.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Insert(Transaction transaction, string key, Input input)\n{\n    ThrowIfDisposed();\n\n    using var unsafeKey = MemoryWriter.WriteUtf8String(key);\n    using var unsafeValue = MemoryWriter.WriteStruct(input.InputNative);\n\n    MapChannel.Insert(Handle, transaction.Handle, unsafeKey.Handle, unsafeValue.Handle);\n}\n```\n\n----------------------------------------\n\nTITLE: Implement DisposableHandle in C#\nDESCRIPTION: Implements a `DisposableHandle` record to automatically free allocated memory. The `Dispose` method releases the native memory using `Marshal.FreeHGlobal`. This simplifies memory management by ensuring resources are released when the `DisposableHandle` is disposed.\nSOURCE: https://github.com/y-crdt/ydotnet/blob/main/docs/decisions.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ninternal sealed record DisposableHandle(nint Handle) : IDisposable\n{\n    public void Dispose()\n    {\n        if (Handle != nint.Zero)\n        {\n            Marshal.FreeHGlobal(Handle);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing YDotNet package\nDESCRIPTION: This command adds the YDotNet package to your .NET project. This is the core of the library and must be installed before installing any platform-specific or feature-specific packages.  Run this command in the project directory where the .csproj file is located.\nSOURCE: https://github.com/y-crdt/ydotnet/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YDotNet\n```\n\n----------------------------------------\n\nTITLE: Define NativeWithHandle struct in C#\nDESCRIPTION: Defines a generic struct `NativeWithHandle` that holds a value of type `T` and a native handle. This struct is used to associate CLR types with their corresponding native resources, facilitating interaction with the Yrs library.\nSOURCE: https://github.com/y-crdt/ydotnet/blob/main/docs/decisions.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ninternal record struct NativeWithHandle<T>(T Value, nint Handle) where T : struct;\n```\n\n----------------------------------------\n\nTITLE: ESLint Parser Options Configuration (tsconfig)\nDESCRIPTION: This JavaScript snippet configures the `parserOptions` property in ESLint to enable type-aware linting rules. It specifies the ECMAScript version, source type, and the location of the tsconfig.json files. This is crucial for enabling stricter and more accurate linting in TypeScript projects.\nSOURCE: https://github.com/y-crdt/ydotnet/blob/main/Demo/Client/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n   parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    project: ['./tsconfig.json', './tsconfig.node.json'],\n    tsconfigRootDir: __dirname,\n   }\n```\n\n----------------------------------------\n\nTITLE: Running unit tests using dotnet test\nDESCRIPTION: This shell command executes the unit tests for the YDotNet project. All tests are located in the YDotNet.Tests.Unit project. This command requires the .NET SDK to be installed.\nSOURCE: https://github.com/y-crdt/ydotnet/blob/main/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Old memory management approach in C#\nDESCRIPTION: Illustrates the previous memory management approach which was improved by introducing the `DisposableHandle` class. It shows how memory was manually allocated and released for native calls.\nSOURCE: https://github.com/y-crdt/ydotnet/blob/main/docs/decisions.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar handle = MemoryWriter.WriteUtf8String(value);\n\n// Perform native call\n\nMemoryWriter.Release(value);\n```"
  }
]