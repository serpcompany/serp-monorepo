[
  {
    "owner": "devopness",
    "repo": "devopness",
    "content": "TITLE: Authenticating with Devopness API\nDESCRIPTION: Example function demonstrating how to authenticate with the Devopness API by calling the loginUser method and setting the access token for subsequent API calls.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/sdks/javascript/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function authenticate(email, pass) {\n  const userTokens = await devopnessApi.users.loginUser({ email: email, password: pass });\n  // The `accessToken` must be set every time a token is obtained or refreshed.\n  devopnessApi.accessToken = userTokens.data.access_token;\n}\n\n// invoke the authentication method\nauthenticate('user@email.com', 'secret-password');\n```\n\n----------------------------------------\n\nTITLE: Accessing Protected Endpoints in Devopness API\nDESCRIPTION: Example showing how to access protected endpoints after authentication, specifically retrieving the current user's profile details.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/sdks/javascript/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getUserProfile() {\n    // invoke the authentication method to ensure an auth token\n    // is retrieved and set to the SDK instance\n    await authenticate('user@email.com', 'secret-password');\n\n    // Now that we're authenticated, we can invoke methods on any services.\n    // Here we're invoking the `getUserMe()` method on the `users` service\n    const currentUser = await devopnessApi.users.getUserMe();\n    console.log('Successfully retrieved user profile: ', currentUser);\n}\n\ngetUserProfile();\n```\n\n----------------------------------------\n\nTITLE: Creating Outgoing Webhook for action.started Event in Devopness\nDESCRIPTION: This cURL command creates an outgoing webhook that triggers when a deployment action starts. It sends deployment status information to your source provider (GitHub, Bitbucket, or GitLab) using their respective API endpoints.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/applications/integrate-application-deployments-to-ci-workflows.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.devopness.com/pipelines/<pipeline_id>/hooks/outgoing \\\n  --header 'Accept: application/json' \\\n  --header 'Authorization: Bearer <access_token>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"name\": \"CI(build)\",\n    \"action_type\": \"deploy\",\n    \"target_url\": \"https://<target_url>/{{ action.triggered_from.hook_parsed_variables.commit_hash }}\",\n    \"settings\": {\n      \"request_headers\": [\n        {\n          \"name\": \"Authorization\",\n          \"value\": \"Bearer {{ application.source_provider.access_token }}\"\n        }\n        // NOTE: add Request Headers (`<request_headers>`) here\n      ],\n      \"request_body\": {\n        // NOTE: review the fields bellow according to Request Body (`<request_body>`) from the source provider instructions\n        \"state\": <source_provider_pipeline_status>,\n        \"target_url\": \"https://app.devopness.com/actions/{{ action.id }}\",\n        \"url\": \"https://app.devopness.com/actions/{{ action.id }}\",\n        \"description\": \"Application building started\",\n        \"context\": \"ci\\/devopness(build)\",\n        \"key\": \"ci\\/devopness(build)\"\n      }\n    },\n    \"trigger_when\": {\n      \"events\": [\n        \"action.started\"\n      ]\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Installing Devopness SDK with npm or yarn\nDESCRIPTION: Commands to install the Devopness SDK as a dependency using npm or yarn package managers.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/sdks/javascript/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Using npm\nnpm install @devopness/sdk-js\n\n# Using yarn\nyarn add @devopness/sdk-js\n```\n\n----------------------------------------\n\nTITLE: Listing Pipeline Webhooks using curl (Bash)\nDESCRIPTION: This snippet demonstrates how to list all webhooks for a specific pipeline using a GET request to the /pipelines/:id/hooks endpoint. It requires the pipeline ID and access token to authenticate the request.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/webhooks/create-incoming-webhook.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n  --url https://api.devopness.com/pipelines/<pipeline_id>/hooks \\\n  --header 'Accept: application/json' \\\n  --header 'Authorization: Bearer <access_token>' \\\n  --header 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Asynchronous invocation of authenticated endpoints\nDESCRIPTION: Demonstrates how to authenticate and then invoke an authenticated endpoint asynchronously to retrieve user profile information.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/sdks/python/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom devopness import DevopnessClient\nfrom devopness.models import UserLogin\n\ndevopness = DevopnessClient()\n\nasync def authenticate(user_email, user_pass):\n    user_data = UserLogin(email=user_email, password=user_pass)\n    user_tokens = await devopness.users.login_user(user_data)\n\n    # The `access_token` must be set every time a token is obtained or refreshed.\n    devopness.access_token = user_tokens.data.access_token\n\nasync def get_user_profile():\n    # Ensure an auth token is retrieved and set to the SDK instance\n    await authenticate('user@email.com', 'secret-password')\n\n    # Now that we're authenticated, we can invoke methods on any service.\n    # Here we're invoking the `get_user_me()` method on the `users` service\n    current_user = await devopness.users.get_user_me()\n    print(f'Successfully retrieved user profile with ID: {current_user.data.id}')\n\n# Invoke the get user profile method\nif __name__ == \"__main__\":\n    asyncio.run(get_user_profile())\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Devopness API\nDESCRIPTION: POST request to login to Devopness API using email and password credentials. Returns an access token required for subsequent API calls.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/users/find-your-activity-summary.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.devopness.com/users/login \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n\t\"email\": \"<email>\",\n\t\"password\": \"<password>\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Devopness API using cURL\nDESCRIPTION: This snippet demonstrates how to authenticate with the Devopness API using a POST request to the /users/login endpoint. It requires the user's email and password and returns an access token.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/webhooks/create-outgoing-webhook.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.devopness.com/users/login \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n\t\"email\": \"<email>\",\n\t\"password\": \"<password>\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Devopness SDK Client\nDESCRIPTION: Example of importing and initializing the DevopnessApiClient class, which is the main entry point to interact with the Devopness API.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/sdks/javascript/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DevopnessApiClient } from '@devopness/sdk-js'\nconst devopnessApi = new DevopnessApiClient();\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Component with Custom Link Properties in React TSX\nDESCRIPTION: Example demonstrating how to use the Card component with enhanced URL handling that supports full LinkProps configuration, including target, rel, and other Link component properties for both the main card and footer actions.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Card\n  title=\"Example Card\"\n  url={{\n    hideExternalUrlIcon: true,\n    rel: 'noopener',\n    target: '_blank',\n    to: '/dashboard',\n  }}\n  footer={[\n    {\n      label: 'View Details',\n      url: {\n        hideExternalUrlIcon: true,\n        target: '_self',\n        to: '/details',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous authentication with Devopness SDK\nDESCRIPTION: Demonstrates how to authenticate asynchronously using the login_user method and set the access token.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/sdks/python/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom devopness import DevopnessClient\nfrom devopness.models import UserLogin\n\ndevopness = DevopnessClient()\n\nasync def authenticate(user_email, user_pass):\n    user_data = UserLogin(email=user_email, password=user_pass)\n    user_tokens = await devopness.users.login_user(user_data)\n\n    # The `access_token` must be set every time a token is obtained or refreshed.\n    devopness.access_token = user_tokens.data.access_token\n\n# Invoke the authentication method\nif __name__ == \"__main__\":\n    asyncio.run(authenticate('user@email.com', 'secret-password'))\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown with Enhanced Link Properties in React TSX\nDESCRIPTION: Example showing how to use the Dropdown component with the new linkProps property on DropdownOption type, allowing granular control over link behavior for URL-based options including target, rel, and icon visibility.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Dropdown\n  options={[\n    {\n      label: 'Documentation',\n      url: 'https://docs.example.com',\n      linkProps: {\n        target: '_blank',\n        hideExternalUrlIcon: true,\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Remote Server via SSH in Bash\nDESCRIPTION: Command to connect to a Devopness server via SSH using the 'devopness' user and the server's IP address. This establishes a secure shell connection to run commands on the remote server.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/servers/ssh-into-server.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh devopness@<server IP address copied in previous steps>\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Component with Optional Auto-Focus Error Behavior in React TSX\nDESCRIPTION: Example showing how to use the Input component with the new autoFocusOnError prop that makes error auto-focus behavior optional. The first example shows enabling auto-focus, while the second shows the new default behavior without auto-focus.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// With auto-focus enabled (previous default behavior)\n<Input\n  autoFocusOnError\n  error={{ message: 'This field is required' }}\n/>\n\n// Without auto-focus (new default behavior)\n<Input\n  error={{ message: 'This field is required' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating RSA SSH Key Pair in Bash\nDESCRIPTION: Command to generate a new SSH key pair with RSA encryption, 4096-bit length, and a custom email label. This creates private and public key files stored in the user's ~/.ssh directory.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/ssh-keys/create-ssh-key-pair.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t rsa -b 4096 -C \"<your email address>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Card Component with Various Props in React TSX\nDESCRIPTION: Example demonstrating the usage of the Card component with its various features including header with avatar/icon, title, subtitle, and footer with action links and tooltips.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Card\n  title=\"Environment\"\n  subtitle=\"Overview of current environments\"\n  avatarProps={{ backgroundColor: 'blue.500' }}\n  icon=\"cubes\"\n  footer={[\n    {\n      label: 'View All',\n      url: '/environments',\n      tooltip: 'View all environments',\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating an Incoming Webhook for a Pipeline using curl (Bash)\nDESCRIPTION: This snippet shows how to create an incoming webhook for a specific pipeline using a POST request to the /pipelines/:id/hooks/incoming endpoint. It requires the pipeline ID and access token, and includes webhook configuration details such as name, secret settings, and variable mappings.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/webhooks/create-incoming-webhook.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.devopness.com/pipelines/<pipeline_id>/hooks/incoming \\\n  --header 'Accept: application/json' \\\n  --header 'Authorization: Bearer <access_token>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n\t\"name\": \"Deploy `main` branch\",\n\t\"requires_secret\": true,\n\t\"secret_algorithm\": \"sha256\",\n\t\"secret_header_name\": \"x-hub-signature-256\",\n\t\"action_type\": \"deploy\",\n\t\"settings\": {\n\t\t\"variables\": [\n\t\t\t{\n\t\t\t\t\"name\": \"source_type\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"required\": false,\n\t\t\t\t\"default_value\": \"branch\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"source_ref\",\n\t\t\t\t\"path\": \"pull_request.head.ref\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"required\": false,\n\t\t\t\t\"default_value\": \"main\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"pull_request_id\",\n\t\t\t\t\"path\": \"pull_request.number\",\n\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\"required\": false\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"pull_request_title\",\n\t\t\t\t\"path\": \"pull_request.title\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"required\": false\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"commit_hash\",\n\t\t\t\t\"path\": \"pull_request.head.sha\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"required\": false\n\t\t\t}\n\t\t]\n\t}\n}'\n```\n\n----------------------------------------\n\nTITLE: React Component with Spread Props Pattern\nDESCRIPTION: Example of how to implement a component that accepts props for child components using TypeScript spread pattern for better flexibility and composition.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/src/components/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyComponent = ({ isLoading, onAction, buttonProps }: MyComponentProps) => {\n  return (\n    <Button {...buttonProps}>\n      My Component\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Outgoing Webhook for Devopness Pipeline using cURL\nDESCRIPTION: This snippet shows how to create an outgoing webhook for a Devopness pipeline using a POST request to the /pipelines/:id/hooks/outgoing endpoint. It requires the pipeline ID, target URL, request headers, and request body, and uses the previously obtained access token for authentication.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/webhooks/create-outgoing-webhook.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.devopness.com/pipelines/<pipeline_id>/hooks/outgoing \\\n  --header 'Accept: application/json' \\\n  --header 'Authorization: Bearer <access_token>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"name\": \"CD(deploy)\",\n    \"action_type\": \"deploy\",\n    \"target_url\": \"https://<target_url>/{{ action.triggered_from.hook_parsed_variables.pull_request_id }}\",\n    \"settings\": {\n      \"request_headers\": [\n        {\n          \"name\": \"Authorization\",\n          \"value\": \"Bearer {{ application.source_provider.access_token }}\"\n        }\n        // NOTE: add Request Headers (`<request_headers>`) here\n      ],\n      \"request_body\": {\n        // NOTE: review the fields below according to Request Body (`<request_body>`)\n        \"body\": \"Deployed pipeline for `PR #{{ action.triggered_from.hook_parsed_variables.pull_request_id }} ({{ action.triggered_from.hook_parsed_variables.pull_request_title }})`: Devopness application `{{ application.name }}` deployment **{{ action.status }}** on action <https:\\/\\/{{ application.name }}> using [commit](https://github.com/devopness/devopness-site/commit/{{ action.triggered_from.hook_parsed_variables.commit_hash }})\"\n      }\n    },\n    \"trigger_when\": {\n      \"events\": [\n        \"action.status_changed\"\n      ]\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Component with TypeScript and JSDoc\nDESCRIPTION: Example of implementing a React component with TypeScript typing, proper JSDoc documentation, and clear prop definitions for improved developer experience.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/src/components/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n   type MyComponentProps = {\n     /** Whether the component is in a loading state */\n     isLoading?: boolean\n     /** Event handler called when the action is triggered */\n     onAction?: () => void\n   }\n\n   /**\n    * MyComponent provides a reusable pattern for...\n    *\n    * @example\n    * ```jsx\n    * <MyComponent\n    *   isLoading={false}\n    *   onAction={() => console.log('action triggered')}\n    * />\n    * ```\n    */\n   const MyComponent = ({ isLoading, onAction }: MyComponentProps) => {\n     return (\n       // Component JSX\n     )\n   }\n\n   export type { MyComponentProps }\n   export { MyComponent }\n```\n\n----------------------------------------\n\nTITLE: Synchronous invocation of authenticated endpoints\nDESCRIPTION: Shows how to authenticate and then invoke an authenticated endpoint synchronously to retrieve user profile information.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/sdks/python/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom devopness import DevopnessClient\nfrom devopness.models import UserLogin\n\ndevopness = DevopnessClient()\n\ndef authenticate(user_email, user_pass):\n    user_data = UserLogin(email=user_email, password=user_pass)\n    user_tokens = devopness.users.login_user_sync(user_data)\n\n    # The `access_token` must be set every time a token is obtained or refreshed.\n    devopness.access_token = user_tokens.data.access_token\n\ndef get_user_profile():\n    # Ensure an auth token is retrieved and set to the SDK instance\n    authenticate('user@email.com', 'secret-password')\n\n    # Now that we're authenticated, we can invoke methods on any service.\n    # Here we're invoking the `get_user_sync()` method on the `users` service\n    current_user = devopness.users.get_user_sync(1)\n    print(f'Successfully retrieved user profile with ID: {current_user.data.id}')\n\n# Invoke the get user profile method\nif __name__ == \"__main__\":\n    get_user_profile()\n```\n\n----------------------------------------\n\nTITLE: Initializing DevopnessClient in Python\nDESCRIPTION: Basic example of importing and instantiating the DevopnessClient class.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/sdks/python/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom devopness import DevopnessClient\n\ndevopness = DevopnessClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Outgoing Webhook for action.completed Event in Devopness\nDESCRIPTION: This cURL command creates an outgoing webhook that triggers when a deployment action completes successfully. It updates the deployment status in your source provider to indicate success with appropriate details.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/applications/integrate-application-deployments-to-ci-workflows.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.devopness.com/pipelines/<pipeline_id>/hooks/outgoing \\\n  --header 'Accept: application/json' \\\n  --header 'Authorization: Bearer <access_token>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"name\": \"CI(build)\",\n    \"action_type\": \"deploy\",\n    \"target_url\": \"https://<target_url>/{{ action.triggered_from.hook_parsed_variables.commit_hash }}\",\n    \"settings\": {\n      \"request_headers\": [\n        {\n          \"name\": \"Authorization\",\n          \"value\": \"Bearer {{ application.source_provider.access_token }}\"\n        }\n        // NOTE: add Request Headers (`<request_headers>`) here\n      ],\n      \"request_body\": {\n        // NOTE: review the fields below according to Request Body (`<request_body>`) from the source provider instructions\n        \"state\": <source_provider_pipeline_status>,\n        \"target_url\": \"https://app.devopness.com/actions/{{ action.id }}\",\n        \"url\": \"https://app.devopness.com/actions/{{ action.id }}\",\n        \"description\": \"Application building success\",\n        \"context\": \"ci\\/devopness(build)\",\n        \"key\": \"ci\\/devopness(build)\"\n      }\n    },\n    \"trigger_when\": {\n      \"events\": [\n        \"action.completed\"\n      ]\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Installing Devopness SDK using package managers\nDESCRIPTION: Commands to install the Devopness SDK using different package managers (uv, poetry, pip).\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/sdks/python/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Using uv\nuv add devopness\n\n# Using poetry\npoetry add devopness\n\n# Using pip\npip install devopness\n```\n\n----------------------------------------\n\nTITLE: Creating Outgoing Webhook for action.failed Event in Devopness\nDESCRIPTION: This cURL command creates an outgoing webhook that triggers when a deployment action fails. It updates the deployment status in your source provider to indicate failure with appropriate details.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/applications/integrate-application-deployments-to-ci-workflows.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.devopness.com/pipelines/<pipeline_id>/hooks/outgoing \\\n  --header 'Accept: application/json' \\\n  --header 'Authorization: Bearer <access_token>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"name\": \"CI(build)\",\n    \"action_type\": \"deploy\",\n    \"target_url\": \"https://<target_url>/{{ action.triggered_from.hook_parsed_variables.commit_hash }}\",\n    \"settings\": {\n      \"request_headers\": [\n        {\n          \"name\": \"Authorization\",\n          \"value\": \"Bearer {{ application.source_provider.access_token }}\"\n        }\n        // NOTE: add Request Headers (`<request_headers>`) here\n      ],\n      \"request_body\": {\n        // NOTE: review the fields bellow according to Request Body (`<request_body>`) from the source provider instructions\n        \"state\": <source_provider_pipeline_status>,\n        \"target_url\": \"https://app.devopness.com/actions/{{ action.id }}\",\n        \"url\": \"https://app.devopness.com/actions/{{ action.id }}\",\n        \"description\": \"Application building failed\",\n        \"context\": \"ci\\/devopness(build)\",\n        \"key\": \"ci\\/devopness(build)\"\n      }\n    },\n    \"trigger_when\": {\n      \"events\": [\n        \"action.failed\"\n      ]\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Deprecating Icons with Type Indication in TypeScript\nDESCRIPTION: Shows how to properly deprecate icons by adding them to the icon list with a 'deprecated-icon' type and referencing the new icon name to use instead.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/src/icons/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  type: 'deprecated-icon',\n  name: 'downArrow',\n  component: MdKeyboardArrowDown,\n  newName: 'arrowDown'  // The new icon name to use instead, or undefined if the icon is being removed permanently\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Activity Summary from Devopness API\nDESCRIPTION: GET request to retrieve user activity summary using user ID and access token. Returns detailed activity information for the specified user.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/users/find-your-activity-summary.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n  --url https://api.devopness.com/users/<id>/activity \\\n  --header 'Accept: application/json' \\\n  --header 'Authorization: Bearer <access_token>' \\\n  --header 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Deprecating Image Icons in TypeScript\nDESCRIPTION: Shows the pattern for deprecating image-based icons by setting them as 'deprecated-image' type with an optional replacement name.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/src/icons/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  type: 'deprecated-image',\n  name: 'rightArrow',\n  component: MdKeyboardArrowRight,\n  newName: undefined // The new icon name to use instead, or undefined if the icon is being removed permanently\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Devopness API using curl (Bash)\nDESCRIPTION: This snippet demonstrates how to authenticate with the Devopness API using a POST request to the /users/login endpoint. It requires the user's email and password as input and returns an access token for subsequent API calls.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/webhooks/create-incoming-webhook.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.devopness.com/users/login \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n\t\"email\": \"<email>\",\n\t\"password\": \"<password>\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Launching Storybook\nDESCRIPTION: npm script to start the Storybook development environment. This provides an interactive playground for developing and showcasing UI components.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run storybook\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Details from Devopness API\nDESCRIPTION: GET request to fetch authenticated user details using the access token obtained from login. Returns user information including the user ID.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/users/find-your-activity-summary.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n  --url https://api.devopness.com/users/me \\\n  --header 'Accept: application/json' \\\n  --header 'Authorization: Bearer <access_token>' \\\n  --header 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: npm command to install all required dependencies listed in the package.json file. This ensures all necessary modules are available for development.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Synchronous authentication with Devopness SDK\nDESCRIPTION: Shows how to authenticate synchronously using the login_user_sync method and set the access token.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/sdks/python/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom devopness import DevopnessClient\nfrom devopness.models import UserLogin\n\ndevopness = DevopnessClient()\n\ndef authenticate(user_email, user_pass):\n    user_data = UserLogin(email=user_email, password=user_pass)\n    user_tokens = devopness.users.login_user_sync(user_data)\n\n    # The `access_token` must be set every time a token is obtained or refreshed.\n    devopness.access_token = user_tokens.data.access_token\n\n# Invoke the authentication method\nif __name__ == \"__main__\":\n    authenticate('user@email.com', 'secret-password')\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Shell command to change the current directory to the Devopness UI React project folder. This is typically the first step in the development setup process.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/ui/react/\n```\n\n----------------------------------------\n\nTITLE: Configuring DevopnessClient with custom settings\nDESCRIPTION: Example of creating a DevopnessClient instance with custom configuration options.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/sdks/python/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom devopness import DevopnessClient, DevopnessClientConfig\n\nconfig = DevopnessClientConfig(\n    base_url='https://api.devopness.com',\n    timeout=10\n)\n\ndevopness = DevopnessClient(config)\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Docker\nDESCRIPTION: Command to run SDK tests using Docker and make.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/sdks/javascript/README.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Listing Pipeline Webhooks using cURL\nDESCRIPTION: This snippet demonstrates how to list all webhooks for a specific pipeline using a GET request to the /pipelines/:id/hooks endpoint. It requires the pipeline ID and uses the previously obtained access token for authentication.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/webhooks/create-outgoing-webhook.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n  --url https://api.devopness.com/pipelines/<pipeline_id>/hooks \\\n  --header 'Accept: application/json' \\\n  --header 'Authorization: Bearer <access_token>' \\\n  --header 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Building SDK Without Docker\nDESCRIPTION: Command to build the JavaScript SDK directly without using Docker.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/sdks/javascript/README.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Listing Pipeline Webhooks in Devopness\nDESCRIPTION: This cURL command retrieves a list of all webhooks configured for a specific pipeline. It's useful for verifying that the webhooks were created successfully and viewing their current configuration.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/applications/integrate-application-deployments-to-ci-workflows.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n  --url https://api.devopness.com/pipelines/<pipeline_id>/hooks \\\n  --header 'Accept: application/json' \\\n  --header 'Authorization: Bearer <access_token>' \\\n  --header 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Example GCP Service Account Key Format\nDESCRIPTION: The downloaded service account key will be in JSON format containing the necessary credentials for GCP authentication. This is automatically generated when creating a new service account key.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/credentials/add-gcp-credential.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"service_account\",\n  \"project_id\": \"your-project-id\",\n  \"private_key_id\": \"key-id\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"service-account@project-id.iam.gserviceaccount.com\",\n  \"client_id\": \"client-id\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/service-account%40project-id.iam.gserviceaccount.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Devopness UI React Package\nDESCRIPTION: Commands to install the Devopness UI React package using npm or yarn package managers. This snippet shows how to add the package as a dependency to a project.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Using npm\nnpm install @devopness/ui-react\n\n# Using yarn\nyarn add @devopness/ui-react\n```\n\n----------------------------------------\n\nTITLE: Azure Service Principal Required Permissions List\nDESCRIPTION: Detailed list of required Azure permissions that need to be assigned to the Service Principal for Devopness integration. Includes permissions for compute, network, and resource management operations.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/credentials/add-azure-credential.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Microsoft.Authorization/roleAssignments {read}\n- Microsoft.Authorization/roleDefinitions {read}\n- Microsoft.Compute/disks {write}\n- Microsoft.Compute/virtualMachines {deallocate/action, delete, read, restart/action, start/action, write}\n- Microsoft.Network/networkInterfaces {delete, join/action, read, write}\n- Microsoft.Network/networkSecurityGroups {delete, join/action, read, write}\n- Microsoft.Network/networkSecurityGroups/securityRules {delete, read, write}\n- Microsoft.Network/publicIPAddresses {delete, join/action, read, write}\n- Microsoft.Network/virtualNetworks {delete, read, write}\n- Microsoft.Network/virtualNetworks/subnets {delete, join/action, read, write}\n- Microsoft.Resources/subscriptions/resourceGroups {read, write}\n```\n\n----------------------------------------\n\nTITLE: Using Input Component with Automatic Error Focus in React TypeScript\nDESCRIPTION: Example showing the Input component with automatic focus behavior when in error state. This focuses the input field automatically when an error is present, directing user attention to fields needing correction.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<Input\n  // Focus will be automatically applied when error prop is present\n  error={{ message: 'This field is required' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Virtual Host Properties for Ruby on Rails in Markdown\nDESCRIPTION: Markdown table specifying virtual host properties for the Ruby on Rails application in Devopness. Includes type, name, application, and listen address.\nSOURCE: https://github.com/devopness/devopness/blob/main/examples/applications/ruby-rails/README.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Property       | Value                                                 |\n| -------------- | ----------------------------------------------------- |\n| Type           | `Server IP Address`                                   |\n| Name           | **Server IP and Port** using the format `{IP}:{PORT}` |\n| Application    | `Your Application`                                    |\n| Listen Address | `http://localhost:{PORT}`                             |\n```\n\n----------------------------------------\n\nTITLE: Creating Card with Custom Border Color in React TSX\nDESCRIPTION: Example showing how to use the Card component with the new borderBottomColor prop in headerProps to customize the bottom border color independently from the background color.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Card\n  title=\"Example Card\"\n  headerProps={{\n    backgroundColor: 'blue.100',\n    borderBottomColor: 'purple.500', // New prop\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Example Test Utility Implementation in TypeScript\nDESCRIPTION: Demonstrates the recommended implementation pattern for test utilities, including type definition, JSDoc documentation, and function structure\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/src/test-utils/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyTestUtilOptions = {\n  /** Description of option */\n  option: string\n}\n\n/**\n * Brief description of what the utility does\n *\n * @example\n * ```typescript\n * await myTestUtil({ option: 'value' })\n * ```\n */\nexport async function myTestUtil(options: MyTestUtilOptions) {\n  // Implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Properties for Devopness in Markdown\nDESCRIPTION: Markdown table defining the application properties for adding a Ruby on Rails application to Devopness. Includes repository, stack, engine version, framework, and root directory.\nSOURCE: https://github.com/devopness/devopness/blob/main/examples/applications/ruby-rails/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property       | Value                               |\n| -------------- | ----------------------------------- |\n| Repository     | `devopness/devopness`               |\n| Stack          | `Ruby`                              |\n| Engine Version | `3.4.2`                             |\n| Framework      | `Ruby on Rails`                     |\n| Root Directory | `/examples/applications/ruby-rails` |\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure in Test Utils\nDESCRIPTION: Shows the directory structure for test utilities organization, including interactions folder and main exports\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/src/test-utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/test-utils/\n├── interactions/ # User interaction test helpers\n│ └── hoverTooltip.ts # Tooltip hover testing utilities\n└── index.ts # Public exports\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables for Ruby on Rails in Markdown\nDESCRIPTION: Markdown table specifying environment variables for the Ruby on Rails application in Devopness. Includes RAILS_ENV and PORT variables.\nSOURCE: https://github.com/devopness/devopness/blob/main/examples/applications/ruby-rails/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable Key | Variable Value |\n| ------------ | -------------- |\n| RAILS_ENV    | `development`  |\n| PORT         | `9000`         |\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Security Documentation\nDESCRIPTION: YAML configuration block defining the structure and navigation links for the security documentation section.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/security/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Security\nintro: This section contains all documentation related to the product's security topics.\nlinks:\n    overview:\n    quickstart:\n    previous:\n    next:\n    guides:\n    related:\n    featured:\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Daemon Properties for Ruby on Rails in Markdown\nDESCRIPTION: Markdown table defining daemon properties for running the Ruby on Rails server in Devopness. Includes name, command, and application.\nSOURCE: https://github.com/devopness/devopness/blob/main/examples/applications/ruby-rails/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Property    | Value                      |\n| ----------- | -------------------------- |\n| Name        | `rails-server`             |\n| Command     | `bundle exec rails server` |\n| Application | `Your Application`         |\n```\n\n----------------------------------------\n\nTITLE: Markdown Invitations Template Structure\nDESCRIPTION: A template structure for documentation of invitations functionality with sections for overview, quickstart, navigation links and other related content.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/teams/invitations/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Invitations\nintro:\nlinks:\n    overview:\n    quickstart:\n    previous:\n    next:\n    guides:\n    related:\n    featured:\n---\n```\n\n----------------------------------------\n\nTITLE: Component Export Pattern in TypeScript\nDESCRIPTION: The recommended pattern for exporting components and types from component files, ensuring proper module structure and accessibility.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/src/components/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\nexport * from './ComponentName'\n// Update category index (e.g., Forms/index.ts)\nexport * from './ComponentName'\n// Update root index if needed (components/index.ts)\nexport * from './Category'\n```\n\n----------------------------------------\n\nTITLE: Privacy Policy Structure in Markdown\nDESCRIPTION: YAML frontmatter and markdown structure for the privacy policy document, including navigation links and document metadata.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/legal/privacy-policy.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Privacy Policy\nintro:\nlinks:\n    overview:\n    quickstart:\n    previous:\n    next:\n    guides:\n    related:\n    featured:\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing New Icons in TypeScript\nDESCRIPTION: Demonstrates how to add new icons to the icon list, showing both regular SVG icons and technology-specific image icons with their naming conventions.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/src/icons/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// New icon addition\nconst iconList = [\n  {\n    type: 'icon',\n    name: 'arrowDown', // Clear, action-oriented name\n    component: MdKeyboardArrowDown,\n  },\n  {\n    type: 'image',\n    name: 'python-django', // Technology name with hyphen\n    component: pythonDjangoSVG,\n  },\n] as const\n```\n\n----------------------------------------\n\nTITLE: Extracting Pipeline ID from Devopness URL\nDESCRIPTION: This snippet shows the URL format for a pipeline in Devopness, from which the pipeline ID can be extracted. The pipeline ID is a crucial parameter for setting up the webhook.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/applications/deploy-application-using-incoming-hook.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://app.devopness.com/projects/<project_id>/environments/<environment_id>/applications/<application_id>/pipelines/<pipeline_id>\n```\n\n----------------------------------------\n\nTITLE: Common Icon Naming Patterns in TypeScript\nDESCRIPTION: Demonstrates the standard naming patterns for icons in the Devopness UI system, organized by actions, states, directional icons, and variants.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/src/icons/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Actions\n'add', 'remove', 'edit', 'delete'\n\n// States\n'loading', 'error', 'success', 'warning'\n\n// Directional\n'arrowUp', 'arrowDown', 'arrowLeft', 'arrowRight'\n\n// Variants\n'checkOutline', 'checkFilled'\n'eyeOpen', 'eyeClosed'\n```\n\n----------------------------------------\n\nTITLE: Technology and Brand Icon Naming in TypeScript\nDESCRIPTION: Shows the naming convention for technology and brand-specific icons, using lowercase names and hyphens for compound names.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/src/icons/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'aws', 'docker', 'nodejs'\n'dotnet-core', 'python-django'\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: npm script to execute the test suite for the Devopness UI React components. This ensures the reliability and correctness of the package.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Building UI Package\nDESCRIPTION: npm script to build the Devopness UI React package. This compiles the source code and prepares it for distribution or testing.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Component Directory Structure Pattern\nDESCRIPTION: The recommended directory structure for organizing component files, including the main component, styled components, tests, and stories.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/src/components/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/components/\n├── ComponentName/\n│   ├── index.ts                  # Public exports\n│   ├── ComponentName.tsx         # Main component\n│   ├── ComponentName.styled.ts   # Styled components (if needed)\n│   ├── ComponentName.stories.tsx # Storybook stories\n│   └── ComponentName.test.tsx    # Unit tests\n```\n\n----------------------------------------\n\nTITLE: Sample Environment Variables Configuration\nDESCRIPTION: Example of a .env (dotenv) file structure for storing environment variables used by applications and infrastructure resources in Devopness.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/files/index.md#2025-04-23_snippet_0\n\nLANGUAGE: env\nCODE:\n```\n.env\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Devopness Icons\nDESCRIPTION: Shows the file structure of the icons directory, including the main components like icon loader, type definitions, and exports.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/src/icons/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/icons/\n├── getImageAssetUrl.ts # Devopness CDN image asset URL getter\n├── iconLoader.tsx      # Main icon loader\n├── index.ts            # Public exports\n├── README.md           # Documentation\n└── types.ts            # Icon types\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies Without Docker\nDESCRIPTION: Command to install npm dependencies directly without using Docker.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/sdks/javascript/README.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Using Deprecation Map Helper in React and TypeScript\nDESCRIPTION: Shows how to use the deprecatedToNewIconMap helper to programmatically get the replacement name for a deprecated icon.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/src/icons/README.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { deprecatedToNewIconMap } from '@devopness/ui-react'\n\nconst newName = deprecatedToNewIconMap['eyeOff'] // returns 'eyeClosed'\n<Icon name={newName} />\n```\n\n----------------------------------------\n\nTITLE: Updating Icon Usage After Deprecation in React\nDESCRIPTION: Demonstrates how to update code that uses deprecated icons, showing both direct replacement and using the deprecation mapping helper.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/src/icons/README.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\n<Icon name=\"eyeOff\" />\n\n// After\n<Icon name=\"eyeClosed\" />\n```\n\n----------------------------------------\n\nTITLE: Running Tests Without Docker\nDESCRIPTION: Command to run SDK tests directly without using Docker.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/sdks/javascript/README.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Building SDK with Docker\nDESCRIPTION: Command to build the JavaScript SDK using Docker and make.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/sdks/javascript/README.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmake build-sdk-js\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Docker\nDESCRIPTION: Command to install npm dependencies using Docker and make.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/sdks/javascript/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmake npm-ci\n```\n\n----------------------------------------\n\nTITLE: Displaying Subscription Plan Limits Table in Markdown\nDESCRIPTION: A markdown table comparing the usage limits between Free and Standard subscription plans on Devopness, including parallel actions, log retention, execution time limits, and API request rate limits.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/users/subscriptions/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                                                             | Free       | Standard             |\n|:-------------------------------------------------------------|:-----------|:---------------------|\n| **Max parallel actions, per server**                         | 1          | 10                   |\n| **Max parallel actions, per pipeline**                       | 1          | 10                   |\n| **Max amount of time an action step log remains accessible** | 24 hours   | 90 days              |\n| **Max execution time, per action step**                      | 10 minutes | 15 minutes           |\n| **Max API requests, per minute**                             | 30         | 120                  |\n```\n\n----------------------------------------\n\nTITLE: Error Message for Insufficient Credits\nDESCRIPTION: Example error message displayed when a user attempts to run an action without sufficient credits in their account.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/users/subscriptions/faq/index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nInsufficient credits to run this action\n```\n\n----------------------------------------\n\nTITLE: Reverting Button Props Changes in Patch Update\nDESCRIPTION: Diff showing the reversion of button component property changes that were made in version 2.153.1, restoring original property names without $ prefix.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/ui/react/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n-  noMargin?: boolean\n+  $noMargin?: boolean\n   /**\n    * The button component has a 10px margin on its sides, to remove activate the \"noIconMargin\" property\n    */\n-  noIconMargin?: boolean\n+  $noIconMargin?: boolean\n   /**\n    * The button component has a 15px padding on its sides, to remove activate the \"noPadding\" property\n    */\n-  noPadding?: boolean\n+  $noPadding?: boolean\n```\n\n----------------------------------------\n\nTITLE: Using Admonitions in Markdown\nDESCRIPTION: Example demonstrating how to use admonitions to highlight important information in documentation.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n:::note\n\nThis is the content of the note.\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Document References in Markdown\nDESCRIPTION: Examples showing how to properly reference other documentation pages using markdown syntax.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- docs/virtual-hosts/edit-virtual-host.md -->\nFollow the guide [/docs/virtual-hosts/edit-virtual-host]\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- docs/users/subscriptions/faq/index.md -->\n3. In environments using custom [/docs/roles/index] in their [/docs/environments/team-memberships/index], the membership will be updated to use the role \"Read\", converting all users to read-only users.\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Frontmatter in YAML\nDESCRIPTION: Example of deprecated frontmatter configuration and the recommended new format for document metadata.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: My Document\nintro: This is an introduction to my document\n---\n```\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: My Document\n---\nThis is an introduction to my document\n```\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: My Document\nlinks:\n  previous: getting-started\n  next: advanced-usage\n---\n```\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: My Document\npagination_prev: getting-started\npagination_next: advanced-usage\n---\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Development\nDESCRIPTION: Command to build a Docker image for SDK development using make.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/sdks/javascript/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmake build-image\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory for Development\nDESCRIPTION: Command to navigate to the JavaScript SDK project directory for local development.\nSOURCE: https://github.com/devopness/devopness/blob/main/packages/sdks/javascript/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/sdks/javascript/\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for User Activity Documentation\nDESCRIPTION: YAML front matter configuration for a documentation page about user activity summaries. Defines the page title, introduction, and related navigation links.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/users/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Users\nintro: In this section you will learn how to find your activity summary.\nlinks:\n    overview:\n    quickstart:\n    previous:\n    next:\n    guides:\n    related:\n        - users/find-your-activity-summary\n    featured:\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Pipeline Steps Documentation\nDESCRIPTION: YAML frontmatter block defining metadata structure for a documentation page about pipeline steps, including title and navigation link placeholders.\nSOURCE: https://github.com/devopness/devopness/blob/main/docs/pipelines/steps/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Pipeline Steps\nintro:\nlinks:\n    overview:\n    quickstart:\n    previous:\n    next:\n    guides:\n    related:\n    featured:\n---\n```\n\n----------------------------------------\n\nTITLE: Project Package Structure Example in Markdown\nDESCRIPTION: Directory structure showing the main packages and components of the Devopness repository, including documentation, JavaScript SDK, and React UI components.\nSOURCE: https://github.com/devopness/devopness/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Subpath                    | Package                   | Description                     |\n|:---------------------------|:--------------------------|:--------------------------------|\n| [/docs](docs/)             | 📚 Documentation          | End user product documentation  |\n| [/packages/sdks/javascript](packages/sdks/javascript/) | API SDK JavaScript  | API SDK to interact with Devopness using JavaScript and TypeScript |\n| [/packages/ui/react](packages/ui/react/) | UI React Components  | Devopness Design System UI components for React |\n```"
  }
]