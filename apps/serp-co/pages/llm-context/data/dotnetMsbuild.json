[
  {
    "owner": "dotnet",
    "repo": "msbuild",
    "content": "TITLE: Creating a Debug Target in MSBuild XML\nDESCRIPTION: This snippet demonstrates how to add a custom target to print debugging information during the build process. It uses the Message task to output property and item values at specific points in the build pipeline by hooking before another target.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Something's-wrong-in-my-build.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Target Name=\"PrintfDebugger\" BeforeTargets=\"Something\">\n  <Message Importance=\"High\" Text=\"PropOfInterest: $(PropOfInterest)\" />\n  <Message Importance=\"High\" Text=\"ItemOfInterest: @(ItemOfInterest)\" />\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Capturing MSBuild Binary Logs in Visual Studio via PowerShell\nDESCRIPTION: PowerShell commands to set environment variables that enable MSBuild binary logging for all builds in Visual Studio. These variables tell MSBuild to generate detailed logs for each build operation.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Providing-Binary-Logs.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n> $env:MSBUILDDEBUGENGINE = 1\n> $env:MSBUILDDEBUGPATH=\"C:\\MSBuildReproLogs\"\n> & \"devenv.exe\" MySolution.sln\n```\n\n----------------------------------------\n\nTITLE: Implementing Secure MSBuild Project Configuration with Secrets\nDESCRIPTION: Example MSBuild project file showing the proposed syntax for handling secrets, including initialization from command line, environment variables, and tasks. Demonstrates secure credential handling for Azure Container Registry operations.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/security-metadata.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <Secrets>\n    <!-- initialize from command line -->\n    <GH_token />\n    <!-- initialize from env -->\n    <ACR_login>$(ACR_login)</ACR_login>\n    <!-- initialize by task -->\n    <ACR_password />\n\t</Secrets>\n\n  <UsingTask TaskName=\"ReadCreadentialFromValut\" AssemblyFile=\"$(MSBuildProjectDirectory)/Tasks/ACR-Tasks.dll\" />\n  <UsingTask TaskName=\"PushImageToACR\" AssemblyFile=\"$(MSBuildProjectDirectory)/Tasks/ACR-Tasks.dll\" />\n\t\n  <Target Name='PushImage'> \n    <Message Text=\"Pushin image to ACR\" />\n    <ReadCreadentialFromValut \n      Key=\"$(ACR_password_key)\"\n    >\n      <Output TaskParameter=\"Value\" PropertyName=\"ACR_password\"/>\n    </ReadCreadentialFromValut>\n    <PushImageToACR \n      Login=\"$(ACR_login)\"\n      Password=\"$(ACR_password)\"\n    />\n  </Target>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Configuring MSBuild Custom Check Severity in EditorConfig\nDESCRIPTION: EditorConfig configuration to customize the severity level of a specific MSBuild custom check. This example shows how to change the BC123 check from its default warning level to error.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/CustomBuildCheck.md#2025-04-16_snippet_3\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Custom check configuration\nbuild_check.BC123.severity = error\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Task in MSBuild\nDESCRIPTION: Shows how to register a custom task implementation in an MSBuild project file using UsingTask with an AssemblyFile attribute pointing to the compiled task DLL.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Tasks.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<UsingTask TaskName=\"MyTaskClass\" AssemblyFile=\"MyTasks.dll\"/>\n```\n\n----------------------------------------\n\nTITLE: Capturing MSBuild Binary Logs from Command Line\nDESCRIPTION: Examples of command-line parameters for capturing binary logs with both dotnet CLI and MSBuild.exe. Shows how to create default logs or specify custom log filenames with various build configurations.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Providing-Binary-Logs.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet build -bl\ndotnet build -bl:SpecificStep.binlog\nMSBuild.exe -bl:ServiceRelease.binlog -p:Configuration=Release\n```\n\n----------------------------------------\n\nTITLE: Configuring TreatAsLocalProperty in MSBuild Project\nDESCRIPTION: Example of using TreatAsLocalProperty attribute to make sure local property assignments override command-line property values. This allows project-defined property values to take precedence over those passed via the command line.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Tips-&-Tricks.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project TreatAsLocalProperty=\"Platform\" DefaultTargets=\"Build\">\n```\n\n----------------------------------------\n\nTITLE: Visualizing MSBuild Engine Components with Mermaid Diagram\nDESCRIPTION: A flowchart diagram showing the relationship between MSBuild engine components, including build inputs, API consumers, entry points, worker nodes, and loggers. It illustrates how components like Visual Studio and .NET SDK interact with the MSBuild API.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/High-level-overview.md#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: MSBuild engine parts\n---\nflowchart LR\n    subgraph Build inputs\n    I[\"`Inputs\n    _.proj_ file`\"]\n    API([API])\n    end\n    \n    subgraph API consumers\n    VS[Visual Studio] --> API\n    SDK[.NET SDK] --> API\n    NC[NuGet Client] --> API\n    E[Extensibilities] --> API\n    end\n\n    API & I --> EN[Entry Point Node \n    and Scheduler]\n    \n    EN --IPC--> WN[Worker Nodes]\n    WN <--IPC--> TH[Task Host]\n    L[Loggers] --> EN\n    WN --> FW[Forwarding Loggers] --> EN\n```\n\n----------------------------------------\n\nTITLE: Running MSBuild with Question Mode\nDESCRIPTION: Demonstrates how to use the Question mode to check if a build is up-to-date by running a normal build followed by a build with the /question switch. This helps identify which targets or tasks would cause a rebuild.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/question.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nmsbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\nmsbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n```\n\n----------------------------------------\n\nTITLE: Implementing BuildExecutionCheckConfiguration Class for Rule Configuration\nDESCRIPTION: Class that defines configuration options for build check rules, including evaluation scope and severity. Default values can be specified in code and overridden by user settings in .editorconfig files.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Configuration for a build check.\n/// Default values can be specified by the check in code.\n/// Users can overwrite the defaults by explicit settings in the .editorconfig file.\n/// Each rule can have its own configuration, which can differ per each project.\n/// The <see cref=\"EvaluationCheckScope\"/> setting must be same for all rules in the same check (but can differ between projects)\n/// </summary>\npublic class BuildExecutionCheckConfiguration\n{\n    /// <summary>\n    /// This applies only to specific events, that can distinguish whether they are directly inferred from\n    ///  the current project, or from some import. If supported it can help tuning the level of detail or noise from check.\n    ///\n    /// If not supported by the data source - then the setting is ignored\n    /// </summary>\n    public EvaluationCheckScope? EvaluationCheckScope { get; internal init; }\n\n    /// <summary>\n    /// The default severity of the result for the rule. May be overridden by user configuration.\n    ///\n    /// If all rules within the check are `none`, the whole check will not be run.\n    /// If some rules are `none` and some are not, the check will be run and reports will be post-filtered.\n    /// </summary>\n    public BuildExecutionCheckResultSeverity? Severity { get; internal init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Validation in C# MSBuild Custom Check\nDESCRIPTION: C# implementation of an MSBuild custom check that validates project properties against allowed version constraints. The check inherits from the Microsoft.Build.Experimental.BuildCheck.Check base class and implements logic to prevent usage of forbidden versions.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/CustomBuildCheck.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class MaxVersionCheck : Check\n{\n    // Define allowed versions\n    private static Dictionary<string, Version> propertiesToAllowedVersion = new Dictionary<string, Version>()\n    {\n        { \"ProductVersion\", new Version(6, 0, 0) }\n    };\n\n    // Unique Rule Identifier\n    private const string RuleId = \"BC123\";\n\n    // Define Rule with Detailed Information\n    public static CheckRule SupportedRule = new CheckRule(\n        RuleId,\n        \"NoForbiddenProjectProperties\",\n        \"Prevent unauthorized version usage\",\n        \"The version '{0}' for property '{1}' is forbidden. Use version '{2}' instead.\",\n        new CheckConfiguration(Severity = CheckResultSeverity.Warning));\n\n    // Registration Method\n    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n    {\n        registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n    }\n\n    // Validation Logic\n    private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesCheckData> context)\n    {\n        foreach (var property in propertiesToAllowedVersion)\n        {\n            if (context.Data.EvaluatedProperties.TryGetValue(property.Key, out string value))\n            {\n                if (Version.TryParse(value, out Version version) && version > property.Value)\n                {\n                    context.ReportResult(BuildCheckResult.Create(\n                        SupportedRule,\n                        ElementLocation.EmptyLocation,\n                        value,\n                        property.Key,\n                        property.Value.ToString()));\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IIncrementalTask for Custom Tasks in C#\nDESCRIPTION: Shows how to implement the IIncrementalTask interface in a custom MSBuild task to handle the Question mode. The code demonstrates how to detect the FailIfNotIncremental flag and change logging from messages to errors when appropriate.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/question.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nif (FailIfNotIncremental)\n{\n  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n  return false;\n}\nelse\n{\n  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing MSBuild Binary Logs in Visual Studio via CMD\nDESCRIPTION: Demonstrates how to set environment variables in Command Prompt to enable MSBuild binary logging for all builds in Visual Studio. This method captures logs for all MSBuild invocations including design-time builds.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Providing-Binary-Logs.md#2025-04-16_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\n> SET MSBUILDDEBUGENGINE=1\n> SET MSBUILDDEBUGPATH=C:\\MSBuildReproLogs\n> devenv.exe MySolution.sln\n```\n\n----------------------------------------\n\nTITLE: Configuring ProjectReference Accessibility and Output in MSBuild\nDESCRIPTION: This snippet demonstrates how to configure a project reference in MSBuild so that it is built before the current project but is not accessible in code nor copied to the output folder. This approach is useful for build-time only dependencies where the build order is critical but accessibility is not required.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Controlling-Dependencies-Behavior.md#2025-04-16_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\\n  <ProjectReference Include=\\\"../somepath/MyProj.csproj\\\">\\n    <!-- This indicates that the referenced project should not be referenced in code and output should not be copied to output folder. \\n         This way we basically only indicate the build order.\\n    -->\\n    <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\\n  </ProjectReference>\\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Platform Resolution in Directory.Build.props\nDESCRIPTION: Shows how to enable dynamic platform resolution for all projects in a solution by setting EnableDynamicPlatformResolution property to true in Directory.Build.props. This enables MSBuild to dynamically determine what platform a ProjectReference should build as.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/ProjectReference-Protocol.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Project>\n  <PropertyGroup>\n    <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Binary Log with MSBuild\nDESCRIPTION: Command to create a standard binary log file named 'msbuild.binlog' in the current directory when building a solution.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> msbuild.exe MySolution.sln /bl\n```\n\n----------------------------------------\n\nTITLE: Declaring ProjectReference in MSBuild\nDESCRIPTION: Basic example of how to reference another project using the ProjectReference item in a .csproj file. This is the simplest form of project reference declaration.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/ProjectReference-Protocol.md#2025-04-16_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<ItemGroup>\n  <ProjectReference Include=\"..\\..\\some\\other\\project.csproj\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: RegisterLogger Method for Central Logging in MSBuild\nDESCRIPTION: Method that registers a logger as distributed with a single CentralForwardingLogger. Called by BuildManager when starting the build on the Scheduler node and by ProjectCollection to register loggers for API operations.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Logging-Internals.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nRegisterLogger(ILogger logger)\n```\n\n----------------------------------------\n\nTITLE: Implementing BuildExecutionCheck Abstract Class in C#\nDESCRIPTION: The core contract for authoring custom build checks in MSBuild. Developers need to implement this abstract class which defines the check's friendly name, supported rules, initialization method, and action registration for data processing.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic abstract class BuildExecutionCheck : IDisposable\n{\n    /// <summary>\n    /// Friendly name of the check.\n    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n    /// </summary>\n    public abstract string FriendlyName { get; }\n\n    /// <summary>\n    /// Single or multiple rules supported by the check.\n    /// </summary>\n    public abstract IReadOnlyList<BuildExecutionCheckRule> SupportedRules { get; }\n\n    /// <summary>\n    /// Optional initialization of the check.\n    /// </summary>\n    /// <param name=\"configurationContext\">\n    /// Custom data (not recognized by the infrastructure) passed from .editorconfig\n    /// Currently the custom data has to be identical for all rules in the check and all projects.\n    /// </param>\n    public abstract void Initialize(ConfigurationContext configurationContext);\n\n    /// <summary>\n    /// \n    /// </summary>\n    /// <param name=\"context\"></param>\n    public abstract void RegisterActions(IBuildCheckRegistrationContext context);\n\n    public virtual void Dispose()\n    { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BuildExecutionCheckRule Class for Rules Declaration\nDESCRIPTION: Class for defining individual build check rules. Each check can support multiple rules, and each rule provides default configuration settings that can be overridden by .editorconfig files.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BuildExecutionCheckRule\n{\n    // Identification/Description fields\n    // (To be defined more precisely by https://github.com/dotnet/msbuild/issues/9823)\n\n    /// <summary>\n    /// The default configuration - overridable by the user via .editorconfig.\n    /// If no user specified configuration is provided, this default will be used.\n    /// </summary>\n    public BuildExecutionCheckConfiguration DefaultConfiguration { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Assembly Search Path Configuration in MSBuild\nDESCRIPTION: Provides extensive configuration properties to control and disable specific assembly search locations during reference resolution. Allows fine-grained control over how MSBuild searches for and resolves assembly references.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ResolveAssemblyReference.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\nAssemblySearchPath_UseCandidateAssemblyFiles=\"false\"\nAssemblySearchPath_UseReferencePath=\"false\"\nAssemblySearchPath_UseHintPathFromItem=\"false\"\nAssemblySearchPath_UseTargetFrameworkDirectory=\"false\"\nAssemblySearchPath_UseAssemblyFoldersConfigFileSearchPath=\"false\"\nAssemblySearchPath_UseRegistry=\"false\"\nAssemblySearchPath_UseAssemblyFolders=\"false\"\nAssemblySearchPath_UseGAC=\"false\"\nAssemblySearchPath_UseRawFileName=\"false\"\nAssemblySearchPath_UseOutDir=\"false\"\n```\n\n----------------------------------------\n\nTITLE: Registering Project Cache Plugin in MSBuild Project Files\nDESCRIPTION: This XML snippet shows how to register a Project Cache plugin in an MSBuild project using the ProjectCachePlugin item. The item specifies the path to the plugin DLL that MSBuild will discover and load.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/project-cache.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n<ProjectCachePlugin Include=\"$(SomePath)\\MyAmazingCachePlugin.dll\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Source Resolution in .NET Project\nDESCRIPTION: XML configuration showing how to specify package references with source resolution options. Uses ResolveAsSources attribute to enable source-based resolution and SourcesLocation to specify local source paths.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/interactive-package-references.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Newtonsoft.Json\" ResolveAsSources=\"true\" />\n    <PackageReference Include=\"Contoso.CommonPackage\" ResolveAsSources=\"true\" SourcesLocation=\"$(MSBuildProjectDirectory)/../CommonPackage/src/CommonPackage.csproj\" />\n  </ItemGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Visualizing MSBuild Evaluation Passes with Mermaid Diagram\nDESCRIPTION: A flowchart depicting the sequence of evaluation passes that occur during MSBuild project processing. It shows the order in which different elements like environment variables, imports, properties, items, and targets are evaluated.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/High-level-overview.md#2025-04-16_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Evaluation passes \n---\nflowchart LR\n    PE[Project evaluation] --> \n    EV[Environment variables] --> \n    IP[Imports and Properties \n    outside targets] -->\n    ID[Item definitions] -->\n    IO[Items outside targets] -->\n    UE[UsingTasks] -->\n    T[Targets]\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom MSBuild Task in C#\nDESCRIPTION: This code snippet defines a simple MSBuild task named MyInlineTask by extending the Task class from Microsoft.Build.Utilities. The task includes a boolean property, Success, that indicates whether the task succeeds. The Execute method is overridden to provide custom logic for the task; currently, it returns the value of Success. This setup requires references to Microsoft.Build.Framework and Microsoft.Build.Utilities to work within the MSBuild system.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Tasks.UnitTests/TaskFactorySource/RoslynCodeTaskFactory_Tests.CSharpFragmentSourceCodeFromFile.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnamespace InlineCode {\n    using Microsoft.Build.Framework;\n    using Microsoft.Build.Utilities;\n    using System;\n    using System.Collections;\n    using System.Collections.Generic;\n    using System.IO;\n    using System.Linq;\n    using System.Text;\n    \n    \n    public class MyInlineTask : Microsoft.Build.Utilities.Task {\n        \n        private bool _Success = true;\n        \n        public virtual bool Success {\n            get {\n                return _Success;\n            }\n            set {\n                _Success = value;\n            }\n        }\n        \n        public override bool Execute() {\nint x = 0;\n            return Success;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting CPU Cores from MSBuild in C#\nDESCRIPTION: Example of how a task can request CPU cores from MSBuild to control parallelism. The RequestCores method returns the number of cores the task is allowed to use, which may be less than requested if resources are limited.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/resource-management.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nint allowedParallelism = BuildEngine8.RequestCores(Inputs.Count); // Inputs.Count == 25\n```\n\n----------------------------------------\n\nTITLE: Defining MSBuild Task in C#\nDESCRIPTION: This code snippet defines a class 'HelloWorld' that inherits from 'Task' provided by the MSBuild framework. The 'Execute' method is overridden to log the message 'Hello, world!' to the MSBuild output. The task returns a boolean indicating whether any errors occurred during logging. It relies on the Microsoft.Build.Utilities namespace.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Tasks.UnitTests/TaskFactorySource/RoslynCodeTaskFactory_Tests.CSharpClassSourceCodeFromFile.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace InlineTask\n{\n    using Microsoft.Build.Utilities;\n\n    public class HelloWorld : Task\n    {\n        public override bool Execute()\n        {\n            Log.LogMessage(\"Hello, world!\");\n            return !Log.HasLoggedErrors;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Test Target with VSTest Runner in MSBuild\nDESCRIPTION: Example implementation of a VSTest runner that hooks into the Test target using the AfterTargets attribute. This demonstrates how different test runners can extend the basic functionality of the test target.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/test-target.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Target Name=\"RunVSTest\" AfterTargets=\"Test\">\n  <!-- Implementation details here -->\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Configuring GAC Reference Copy Behavior in MSBuild\nDESCRIPTION: Control how references are copied when parent references are in the Global Assembly Cache (GAC). Provides configuration options to manage dependencies and improve build reproducibility.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ResolveAssemblyReference.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\nCopyLocalDependenciesWhenParentReferenceInGac=\"$(CopyLocalDependenciesWhenParentReferenceInGac)\"\nDoNotCopyLocalIfInGac=\"$(DoNotCopyLocalIfInGac)\"\n```\n\n----------------------------------------\n\nTITLE: C# Interface for Custom Value Redactor\nDESCRIPTION: This C# code defines the interface `IValueRedactor` that custom built-in plugins can implement to redact values, providing a set of tuples representing the parts of the value to redact and their replacements. The `GetPartsToRedact` method takes a string value and returns a set of tuples of strings, where the first string is the value to be redacted, and the second string is the replacement value.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/security-metadata.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n\"public interface IValueRedactor\n{\n   public ISet<Tuple<string, string>>? GetPartsToRedact(string value);\n}\"\n```\n\n----------------------------------------\n\nTITLE: Handling Recoverable Reading Errors in MSBuild Binary Log Processing\nDESCRIPTION: Shows how to implement error handling for recoverable errors when reading MSBuild binary logs in forward compatibility mode. This code subscribes to the RecoverableReadError event and can decide whether to continue reading based on the error type and context.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Those can be raised only during forward compatibility reading mode.\nlogReader.RecoverableReadError += errorEventArgs =>\n{\n    // ...\n\n    // e.g. we can decide to ignore the error and continue reading or break reading\n    //  based on the type of the error or/and type of the record or/and the frequency of the error\n\n    // Would we decide to completely ignore some errors - we can aid better performance by not materializing the actual error message.\n    // Otherwise the error message can be materialized via the provided method on the event argument:\n    Console.WriteLine($\"Recoverable reader error: {errorEventArgs.GetFormattedMessage()}\");\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Import of Test Target in MSBuild\nDESCRIPTION: Configuration in Microsoft.Common.CurrentVersion.targets that conditionally imports the Test target based on the UseMSBuildTestInfrastructure property. This opt-in approach prevents breaking changes for existing Test targets.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/test-target.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n  <PropertyGroup>\n    <UseMSBuildTestInfrastructure Condition=\"'$(UseMSBuildTestInfrastructure)' == ''\">false</UseMSBuildTestInfrastructure>\n  </PropertyGroup>\n  <Import Project=\"$(MSBuildToolsPath)\\Microsoft.Common.Test.targets\" Condition=\"'$(UseMSBuildTestInfrastructure)' == 'true'\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Check Package Reference in MSBuild Project\nDESCRIPTION: XML example showing how to reference a custom check package in an MSBuild project file. Only projects explicitly referencing the package will be able to run its checks.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck.md#2025-04-16_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Contoso.checks\" Version=\"1.2.3\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Redaction with Value Regex in MSBuild\nDESCRIPTION: This snippet demonstrates how to use regular expressions to define data that should be redacted from logs in an MSBuild project. The `DataToRedactFromLogs` item specifies a regular expression via the `Include` attribute, and the `Type` is set to `ValueRegex`. This allows build architects to define common redaction patterns for tokens, secrets, and sensitive data without needing to know the specific properties or items where they might appear.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/security-metadata.md#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n\"<ItemGroup>\n  <!-- Redact GH tokens based on https://github.blog/changelog/2021-03-31-authentication-token-format-updates-are-generally-available -->\n  <DataToRedactFromLogs Include=\"ghp_[A-Za-z0-9_]\" Type=\"ValueRegex\">\n  </DataToRedactFromLogs>\n</ItemGroup>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Secure ACR Image Push Task\nDESCRIPTION: C# task implementation for pushing images to Azure Container Registry with secure handling of login credentials using the Secret type.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/security-metadata.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nPushImageToACR : Task\n{\n  /// <summary>\n  /// Azure Container Registry Login\n  /// </summary>\n  public Secret Login { get; set; }\n\n  /// <summary>\n  /// Azure Container Registry Password\n  /// </summary>\n  public Secret Password { get; set; }\n\n  // ... Execute() ...\n}\n```\n\n----------------------------------------\n\nTITLE: Replaying Binary Log to Diagnostic Text Log in MSBuild\nDESCRIPTION: Command to replay a binary log file to a diagnostic verbosity text log file without console output.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> msbuild.exe msbuild.binlog /noconlog /flp:v=diag;logfile=diag.log\n```\n\n----------------------------------------\n\nTITLE: Setting TargetFramework for Multitargeted Projects in MSBuild\nDESCRIPTION: This code snippet shows how to force a specific target framework for a referenced multitargeted project using MSBuild. The `SetTargetFramework` metadata ensures that the project and its dependencies are built and referenced for the desired framework, although it does not affect NuGet package binaries in the output folder.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Controlling-Dependencies-Behavior.md#2025-04-16_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\\n  <ProjectReference Include=\\\"..\\Repository\\Repository.csproj\\\" SetTargetFramework=\\\"TargetFramework=netstandard2.0\\\" />\\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining Redaction with Custom Plugin in MSBuild\nDESCRIPTION: This snippet shows how to define data redaction using a custom plugin in an MSBuild project. The `DataToRedactFromLogs` item specifies the plugin's assembly and class name via the `Include` attribute, and the `Type` is set to `ValueClassifierPlugin`.  This allows for versatile secrets redaction but requires careful consideration of security implications.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/security-metadata.md#2025-04-16_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n\"<ItemGroup>\n  <DataToRedactFromLogs Include=\"MySecretsClassifier.dll,Contoso.Secrets.Classifier.ClassifySecrets\" Type=\"ValueClassifierPlugin\">\n  </DataToRedactFromLogs>\n</ItemGroup>\"\n```\n\n----------------------------------------\n\nTITLE: Example EditorConfig Configuration for Solution-Level BuildCheck Settings\nDESCRIPTION: An example of how .editorconfig might be configured to apply BuildCheck rules to all projects within a solution. This is shown as an out-of-scope feature for the initial implementation.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# I expect this to apply to all projects within my solution, but not to projects which are not part of the solution\n[ContosoFrontEnd.sln]\nbuild_check.BC0101.Severity=warning\n```\n\n----------------------------------------\n\nTITLE: Creating Binary Log with Custom Filename in MSBuild\nDESCRIPTION: Command to create a binary log file with a custom filename when building a solution.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> msbuild.exe MySolution.sln /bl:out.binlog\n```\n\n----------------------------------------\n\nTITLE: Implementing Multitargeting in Microsoft.Net.Sdk Projects\nDESCRIPTION: This example demonstrates a trimmed down Microsoft.Net.Sdk multitargeting project configuration. It shows how the SDK defines the InnerBuildProperty and InnerBuildPropertyValues properties, and how the project file specifies multiple target frameworks.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/static-graph.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.Net.Sdk\">\n  <!-- This property group is defined in the sdk -->\n  <PropertyGroup>\n    <InnerBuildProperty>TargetFramework</InnerBuildProperty>\n    <InnerBuildPropertyValues>TargetFrameworks</InnerBuildPropertyValues>\n  </PropertyGroup>\n\n  <!-- This property group is defined in the project file-->\n  <PropertyGroup>\n    <TargetFrameworks>net472;netcoreapp2.2</TargetFrameworks>\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Custom MSBuild Check Template\nDESCRIPTION: This snippet shows how to create a new custom MSBuild check project using the installed template. The dotnet new command is used with the template name 'msbuildcheck' and a project name must be specified with the -n flag. This command initializes a new project directory with the necessary baseline code for creating custom checks.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/template_feed/content/Microsoft.CheckTemplate/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new msbuildcheck -n <ProjectName>\n```\n\n----------------------------------------\n\nTITLE: Setting SkipUnchangedFilesOnCopyAlways Property in MSBuild\nDESCRIPTION: XML configuration example showing how to set the SkipUnchangedFilesOnCopyAlways property to improve build performance by preventing unnecessary file copies when using CopyToOutputDirectory=\"Always\".\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/Codes.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <SkipUnchangedFilesOnCopyAlways>True</SkipUnchangedFilesOnCopyAlways>\n</PropertyGroup>\n\n<ItemGroup>\n    <None Include=\"File1.txt\" CopyToOutputDirectory=\"Always\" />\n    <None Include=\"File2.txt\" CopyToOutputDirectory=\"IfDifferent\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Project Graphs in MSBuild using C#\nDESCRIPTION: The code snippet defines the `ProjectGraph` class within the `Microsoft.Build.Experimental.Graph` namespace, providing multiple constructors for initializing project graphs from given project files or entry points. It also includes the `ProjectGraphEntryPoint` structure for specifying project files and global properties, and the `ProjectGraphNode` class that represents nodes within the project graph. The API facilitates the construction of project graphs and provides properties to access entry point nodes and all project nodes.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/static-graph.md#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Microsoft.Build.Experimental.Graph\n{\n    public class ProjectGraph\n    {\n        // Creates a graph starting at the given project file.\n        public ProjectGraph(string projectFile) { }\n        public ProjectGraph(string entryProjectFile, IDictionary<string, string> globalProperties) { }\n\n        // Creates a graph starting at the given project files.\n        public ProjectGraph(IEnumerable<string> projectFiles) { }\n        public ProjectGraph(IEnumerable<string> entryProjectFiles, IDictionary<string, string> globalProperties) { }\n\n        // Creates a graph starting at the given entry point(s). An entry point is a (project file, global properties) pair.\n        public ProjectGraph(ProjectGraphEntryPoint entryPoint) { }\n        public ProjectGraph(IEnumerable<ProjectGraphEntryPoint> entryPoints) { }\n\n        /* Also various constructor overloads which take a ProjectCollection */\n\n        // Nodes for the provided entry points\n        IReadOnlyCollection<ProjectGraphNode> EntryPointNodes { get; }\n\n        // All project nodes in the graph.\n        IReadOnlyCollection<ProjectGraphNode> ProjectNodes { get; }\n    }\n\n    public struct ProjectGraphEntryPoint\n    {\n        public ProjectGraphEntryPoint(string projectFile) { }\n\n        public ProjectGraphEntryPoint(string projectFile, IDictionary<string, string> globalProperties) { }\n\n        // The project file to use for this entry point\n        public string ProjectFile { get; }\n\n        // The global properties to use for this entry point\n        public IDictionary<string, string> GlobalProperties { get; }\n    }\n\n    public class ProjectGraphNode\n    {\n        // No public creation.\n        internal ProjectGraphNode() { }\n\n        // Projects which this project references.\n        IReadOnlyCollection<ProjectGraphNode> ProjectReferences { get; }\n\n        // Projects which reference this project.\n        IReadOnlyCollection<ProjectGraphNode> ReferencingProjects { get; }\n\n        // The evaluated project\n        Project Project { get; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IBuildCheckRegistrationContext Interface for Action Registration\nDESCRIPTION: Interface that enables subscription to data events from the MSBuild infrastructure. It allows checks to register callbacks for various data events such as evaluated properties and parsed items.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IBuildCheckRegistrationContext\n{\n    void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesCheckData>> evaluatedPropertiesAction);\n\n    void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsCheckData>> parsedItemsAction);\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MSBuild Debug Engine and Path in Environment Variables\nDESCRIPTION: Enables binary logging and additional debugging information for MSBuild invocations. Useful for debugging build or evaluation issues, especially in Visual Studio.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Environment-Variables.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n```\n\n----------------------------------------\n\nTITLE: Setting Reserved Properties in MSBuild Toolset\nDESCRIPTION: Reference to code in the Toolset class that sets reserved properties available only for .tasks and .overridetasks files, not regular project evaluation.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/Built-in-Properties.md#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nhttps://github.com/dotnet/msbuild/blob/24b33188f385cee07804cc63ec805216b3f8b72f/src/Build/Definition/Toolset.cs#L914-L921\n```\n\n----------------------------------------\n\nTITLE: JSON Format for Parameter Values in MSBuild Wasm Tasks\nDESCRIPTION: JSON structure for passing parameter values to MSBuild Wasm tasks. Shows how to format simple values like strings and booleans, as well as more complex types like ITaskItem with metadata and ITaskItemArray collections.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/Wasm-tasks.md#2025-04-16_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"Param1\": \"hello\",\n    \"Param2\": true,\n    \"Param3\": {\n        \"ItemSpec\": \"C:\\\\real\\\\path\\\\file.txt\",\n        \"WasmPath\": \"file.txt\", // guest runtime path\n        \"More .NET metadata\": \"...\"\n    },\n    \"Param4\": [\n        {\n            \"ItemSpec\": \"item1\",\n            \"Metadata1\": \"value1\"\n        },\n        {\n            \"ItemSpec\": \"item2\",\n            \"Metadata2\": \"value2\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running MSBuild with BuildCheck and Binary Logging\nDESCRIPTION: Command to run a dotnet build with binary logging enabled and build checking activated. This helps troubleshoot issues identified by BuildCheck.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/Codes.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\ndotnet build -bl -check\n```\n\n----------------------------------------\n\nTITLE: Simplified ResolveAssemblyReference Execution Algorithm\nDESCRIPTION: A simplified pseudocode representation of the RAR task's Execute method, showing the main steps of logging inputs, computing dependency closure, building output tables, and writing the state file to cache.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ResolveAssemblyReference.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n...\nLine 1923: LogInputs();\n...\n// useful environment variable to set to crank up detailed search result logging\nLine 1930: _logVerboseSearchResults = Environment.GetEnvironmentVariable(\"MSBUILDLOGVERBOSERARSEARCHRESULTS\") != null;\n...\nLine 2087: ReferenceTable dependencyTable = new ReferenceTable(...) // main data structure\n...\nLine 2052: ReadStateFile(); // read the cache file from the `obj` directory if present\n...\nLine 2182: dependencyTable.ComputeClosure(allRemappedAssemblies, _assemblyFiles, _assemblyNames, generalResolutionExceptions);\n...\nLine 2213: // Build the output tables.\n           dependencyTable.GetReferenceItems\n           (\n               out _resolvedFiles,\n               out _resolvedDependencyFiles,\n               out _relatedFiles,\n               out _satelliteFiles,\n               out _serializationAssemblyFiles,\n               out _scatterFiles,\n               out _copyLocalFiles\n           );\n...\nLine 2274: WriteStateFile(); // write the cache file to the `obj` directory\n...\nLine 2284: LogResults();\n...\n```\n\n----------------------------------------\n\nTITLE: MSBuild Framework Core Interfaces\nDESCRIPTION: Key interfaces for implementing MSBuild tasks and logging mechanisms, primarily used in the Microsoft.Build.Framework namespace\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Framework/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ninterface ITask { }\ninterface ILogger { }\n```\n\n----------------------------------------\n\nTITLE: Defining Redaction with Global Property in MSBuild\nDESCRIPTION: This snippet demonstrates how to define data to be redacted from logs using a global property in an MSBuild project. The property `DataToRedactFromLogs` contains a semicolon-separated list of data to redact, specifying the data type and name. This approach is simple for basic redaction scenarios but can become cryptic for complex cases.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/security-metadata.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n\"<DataToRedactFromLogs>Foo;Bar;Baz->SomeMetadata;MyItem->*</DataToRedactFromLogs>\"\n```\n\n----------------------------------------\n\nTITLE: Using Exec Task with Wasmtime for Wasm Execution in MSBuild\nDESCRIPTION: XML configuration for an MSBuild project that compiles a Rust program to WebAssembly and executes it using the Wasmtime runtime via the Exec task, demonstrating the basic integration without proper parameter passing.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/Wasm-tasks.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n  <Target Name=\"CompileAndRun\" BeforeTargets=\"Build\">\n    <Exec Command=\"cargo build --target wasm32-wasi --release --manifest-path='sometask/Cargo.toml'\">\n    <Exec Command=\"wasmtime run path_to_compiled_rust_program.wasm --additional_args_for_wasmtime_enabling_more_than_CPU_and_memory\" />\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Task Factory in MSBuild\nDESCRIPTION: Shows how to register and configure a custom task factory in an MSBuild project file, including specifying the factory class and providing initialization parameters.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Tasks.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<UsingTask TaskName=\"MyTask\" AssemblyFile=\"Factory.dll\" Factory=\"MyTaskFactory\">\n    <Task>Insides that the MyTaskFactory uses to initialize</Task>\n</UsingTask>\n```\n\n----------------------------------------\n\nTITLE: Exempting Projects from Isolation Constraints in MSBuild - XML\nDESCRIPTION: This XML snippet shows how to exempt a specific project from isolation constraints by adding its full path to the 'GraphIsolationExemptReference' item. Crucial for cases where project files are dynamically generated. Dependencies: MSBuild system with XML build configuration setup.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/static-graph.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <GraphIsolationExemptReference Include=\"/Full/Path/To/B.csproj\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Invoking ResolveAssemblyReference Task in MSBuild\nDESCRIPTION: Shows how the ResolveAssemblyReference task is invoked in MSBuild targets file with its key input parameters, including Assemblies and AssemblyFiles from Reference items and resolved project references.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ResolveAssemblyReference.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <ResolveAssemblyReference\n        Assemblies=\"@(Reference)\"\n        AssemblyFiles=\"@(_ResolvedProjectReferencePaths);@(_ExplicitReference)\"\n```\n\n----------------------------------------\n\nTITLE: Reading MSBuild Binary Logs with BinaryLogReplayEventSource in C#\nDESCRIPTION: Demonstrates how to use BinaryLogReplayEventSource to read and process MSBuild binary log files. This code creates a reader with forward compatibility enabled, subscribes to all events in the log, and processes them accordingly.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar logReader = new BinaryLogReplayEventSource()\n{\n    AllowForwardCompatibility = true\n};\n\n// Handling of the structured events contained within the log\nlogReader.AnyEventRaised += (_, e) =>\n{\n    if (e is BuildErrorEventArgs error)\n    {\n        //...\n    }\n\n    // ...\n};\n\n// Starts the synchronous log reading loop.\nlogReader.Replay(path_to_binlog_file);\n\n```\n\n----------------------------------------\n\nTITLE: MSBuild Yield and Reacquire Method Calls\nDESCRIPTION: Demonstrates the method calls used to yield and reacquire node control in MSBuild tasks, allowing computational work to run parallel with other project builds.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/threading.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nIBuildEngine3.Yield()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nIBuildEngine3.Reacquire()\n```\n\n----------------------------------------\n\nTITLE: Setting BuildCheck Severity Level in .editorconfig (INI)\nDESCRIPTION: Example of configuring the severity level for a specific BuildCheck rule in an .editorconfig file.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[*.csproj]\nbuild_check.BC0101.severity=warning\n```\n\n----------------------------------------\n\nTITLE: Running MSBuild Tests from Command Line\nDESCRIPTION: Command to build MSBuild and run all unit tests from the command line.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md#2025-04-16_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\n.\\build.cmd -test\n```\n\n----------------------------------------\n\nTITLE: Integrating Wasm Task in MSBuild Project\nDESCRIPTION: XML configuration showing how to integrate a WebAssembly task in an MSBuild project file, including the required package reference, task registration using WasmTaskFactory, and task usage within a target.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/Wasm-tasks.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"MSBuildWasm\" Version=\"0.2.0\" />\n</ItemGroup>\n\n...\n\n<UsingTask TaskName=\"FancyWasmTask\" \n           AssemblyFile=\"$(MSBuildWasmAssembly)\" \n           TaskFactory=\"WasmTaskFactory\" \n           Condition=\"$(MSBuildWasmAssembly) != ''\">\n  <Task>compiled_task_implementation.wasm</Task>\n</UsingTask>\n\n<Target Name=\"name\">\n  <FancyWasmTask Param=\"...\" Param2=\"asdf\">\n    <Output .../>\n  </FancyWasiTask>\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Parameter Specification for MSBuild Wasm Tasks\nDESCRIPTION: JSON schema for defining MSBuild Task parameters to be reflected to a C# class. The format specifies parameter name, type, whether it's required, and if it's an output parameter. This mirrors the standard MSBuild task parameter attributes.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/Wasm-tasks.md#2025-04-16_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"properties\": [\n        {\n            \"name\": \"Param1\",\n            \"property_type\": \"String\", \n            \"required\": true, // Maps to RequiredAttribute in MSBuild\n            \"output\": false // Maps to OutputAttribute in MSBuild\n        },\n        {\n            \"name\": \"Param2\",\n            \"property_type\": \"Bool\",\n            \"required\": false,\n            \"output\": false\n        },\n        {\n            \"name\": \"Param3\",\n            \"property_type\": \"ITaskItem\", \n            \"required\": false,\n            \"output\": false\n        },\n        {\n            \"name\": \"Param4\",\n            \"property_type\": \"ITaskItemArray\",\n            \"required\": false,\n            \"output\": true // output means that the parameter is read from the output of the task, but it can be inputted too\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Change Wave Feature Test Example in C#\nDESCRIPTION: Comprehensive code example for testing Change Wave functionality, including creating a test environment, setting up a project with a Change Wave-conditioned target, and verifying the expected behavior.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ChangeWaves-Dev.md#2025-04-16_snippet_5\n\nLANGUAGE: c#\nCODE:\n```\nusing (TestEnvironment env = TestEnvironment.Create())\n{\n    ChangeWaves.ResetStateForTests();\n    env.SetEnvironmentVariable(\"MSBUILDDISABLEFEATURESFROMVERSION\", ChangeWaves.Wave17_4.ToString());\n    BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();\n\n    string projectFile = @\"\n        <Project>\n            <Target Name='HelloWorld' Condition=\"\"$([MSBuild]::AreFeaturesEnabled('17.4'))\"\">\n                <Message Text='Hello World!'/>\n            </Target>\n        </Project>\";\n\n    TransientTestFile file = env.CreateFile(\"proj.csproj\", projectFile);\n\n    ProjectCollection collection = new ProjectCollection();\n    MockLogger log = new MockLogger();\n    collection.RegisterLogger(log);\n\n    collection.LoadProject(file.Path).Build().ShouldBeTrue();\n    log.AssertLogContains(\"Hello World!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MSBuild Manifest for Registration-Free COM\nDESCRIPTION: XML configuration in msbuild.exe.manifest that defines the type library location and COM interface specifications for ITaskHost. The configuration enables registration-free COM activation for out-of-process tasks.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/remote-host-object.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<file name=\"Microsoft.Build.Framework.tlb\">\n    <typelib\n        tlbid=\"{D8A9BA71-4724-481D-9CA7-0DA23A1D615C}\"\n        version=\"15.1\"\n        helpdir=\"\"/>\n</file>\n\n<comInterfaceExternalProxyStub\n    iid=\"{9049A481-D0E9-414f-8F92-D4F67A0359A6}\"\n    name=\"ITaskHost\"\n    tlbid=\"{D8A9BA71-4724-481D-9CA7-0DA23A1D615C}\"\n    proxyStubClsid32=\"{00020424-0000-0000-C000-000000000046}\" />\n```\n\n----------------------------------------\n\nTITLE: MSBuild Project Definition\nDESCRIPTION: This XML snippet defines a simple MSBuild project with a target that prints the value of a property. It demonstrates how to access and display property values within an MSBuild target.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Tips-&-Tricks.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Project>\n  <Target Name=\"PrintPropertyValue\">\n      <Message Text=\"Property value = ($(propertyValue))\" Importance=\"high\" />\n  </Target>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Configuring MSBuild Project Cache Plugins with XML\nDESCRIPTION: Example XML configuration for ProjectCachePlugin items with custom settings that can be accessed by the plugin implementation through CacheContext.PluginSettings.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/project-cache.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <ProjectCachePlugin Include=\"$(SomePath)\\MyAmazingCachePlugin.dll\">\n    <PluginSetting1>$(PluginSetting1)</PluginSetting1>\n    <PluginSetting2>$(PluginSetting2)</PluginSetting2>\n    <PluginSetting3>$(PluginSetting3)</PluginSetting3>\n  </ProjectCachePlugin>\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Conditioning MSBuild Target on Change Wave\nDESCRIPTION: XML snippet demonstrating how to condition a Task or Target in MSBuild XML to only execute when a specific Change Wave is enabled, using the built-in AreFeaturesEnabled function.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ChangeWaves-Dev.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Target Name=\"SomeRiskyChange\" Condition=\"$([MSBuild]::AreFeaturesEnabled('17.4'))\">\n<!-- Where '17.4' is the change wave assigned to your feature. -->\n```\n\n----------------------------------------\n\nTITLE: Improved SDK Resolution Error Output\nDESCRIPTION: Example of the new error output format showing improved error handling with immediate build failure and clearer error messages.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/sdk-resolvers-algorithm.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nC:\\src\\temp\\8-18>\"C:\\foo\\dotnet-sdk-6.0.100-preview.7.21379.14-win-x64\\dotnet.exe\" build\nMicrosoft (R) Build Engine version 17.0.0-dev-21420-01+5df152759 for .NET\nCopyright (C) Microsoft Corporation. All rights reserved.\n\nC:\\foo\\bar.csproj : error MSB4242: SDK Resolver Failure: \"The SDK resolver \\\"Microsoft.DotNet.MSBuildWorkloadSdkResolver\\\" failed while attempting to resolve the SDK \\\"Microsoft.NET.Sdk\\\". Exception: \\'s\\' is an invalid start of a property name. Expected a '\"'. LineNumber: 14 | BytePositionInLine: 8.\"\".\n\nBuild FAILED.\n\nC:\\foo\\bar.csproj : error MSB4242: SDK Resolver Failure: \"The SDK resolver \\\"Microsoft.DotNet.MSBuildWorkloadSdkResolver\\\" failed while attempting to resolve the SDK \\\"Microsoft.NET.Sdk\\\". Exception: \\'s\\' is an invalid start of a property name. Expected a '\"'. LineNumber: 14 | BytePositionInLine: 8.\"\".\n    0 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:00.15\n```\n\n----------------------------------------\n\nTITLE: Disabling Node Reuse in MSBuild\nDESCRIPTION: Prevents MSBuild from leaving processes behind. Similar to '/nr:false' but can be used for Visual Studio as well.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Environment-Variables.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n* `MSBUILDDISABLENODEREUSE=1`\n```\n\n----------------------------------------\n\nTITLE: AssemblyResources Class with Shared Resources\nDESCRIPTION: Defines the `AssemblyResources` class with support for both primary and shared resources. It includes two `ResourceManager` instances: `resources` for the assembly's primary resources and `sharedResources` for resources defined in `Strings.shared.resx`.  The manifest resource name of the shared resources must also be provided during initialization.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Shared/SharedCode.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Resources;\nusing System.Reflection;\n\nnamespace Microsoft.Build.Shared\n{\n    internal static class AssemblyResources\n    {\n        internal static readonly ResourceManager resources =\n            new ResourceManager(\n                \"<manifest resource name>\",\n                Assembly.GetExecutingAssembly());\n\n        internal static readonly ResourceManager sharedResources =\n            new ResourceManager(\n                \"<manifest resource name of shared resources>\",\n                Assembly.GetExecutingAssembly());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RegisterDistributedLogger Method in MSBuild Logging System\nDESCRIPTION: Registers a distributed logger where the central logger runs in the Scheduler node and the forwarding logger in the out-of-proc worker node. Creates EventSourceSink and EventRedirectorToSink instances for proper event routing.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Logging-Internals.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nRegisterDistributedLogger(ILogger centralLogger, LoggerDescription forwardingLogger)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment for Change Wave Testing in C#\nDESCRIPTION: Code snippet showing how to configure a test environment to test feature behavior with a specific Change Wave disabled. This demonstrates setting the MSBUILDDISABLEFEATURESFROMVERSION environment variable.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ChangeWaves-Dev.md#2025-04-16_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\nusing TestEnvironment env = TestEnvironment.Create();\n\nChangeWaves.ResetStateForTests();\n// Important: use the version here\nenv.SetEnvironmentVariable(\"MSBUILDDISABLEFEATURESFROMVERSION\", ChangeWaves.Wave17_4.ToString());\nBuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();\n```\n\n----------------------------------------\n\nTITLE: Defining an Inline Task in .NET\nDESCRIPTION: This snippet defines a class MyInlineTask that extends Task from Microsoft.Build.Utilities. It includes a Boolean property 'Success' to indicate if the task was successful, which defaults to true. The Execute method simply returns the value of the Success property.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Tasks.UnitTests/TaskFactorySource/RoslynCodeTaskFactory_Tests.CSharpFragment.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nnamespace InlineCode {\n    using Microsoft.Build.Framework;\n    using Microsoft.Build.Utilities;\n    using System;\n    using System.Collections;\n    using System.Collections.Generic;\n    using System.IO;\n    using System.Linq;\n    using System.Text;\n    \n    public class MyInlineTask : Microsoft.Build.Utilities.Task {\n        \n        private bool _Success = true;\n        \n        public virtual bool Success {\n            get {\n                return _Success;\n            }\n            set {\n                _Success = value;\n            }\n        }\n        \n        public override bool Execute() {\n            int x = 0;\n            return Success;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PlatformLookupTable on ProjectReference in MSBuild\nDESCRIPTION: Demonstrates how to define a PlatformLookupTable as metadata on a ProjectReference item to customize platform mapping. This example maps AnyCPU to Win32 for a specific project reference, which is needed when a managed project references an unmanaged one.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/ProjectReference-Protocol.md#2025-04-16_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <ProjectReference Include=\"B.csproj\" PlatformLookupTable=\"AnyCPU=Win32\">\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: C# Interface for Custom Value Classifier\nDESCRIPTION: This C# code defines the interface `IValueClassifier` that custom plugins must implement to classify values for redaction. The `GetPartsToRedact` method takes a string value and returns a set of strings representing the parts of the value to redact. The returned set can be null if no redaction is needed.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/security-metadata.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n\"Contoso.Secrets;\n\npublic class Classifier: IValueClassifier\n{\n   public ISet<string>? GetPartsToRedact(string value) {/* Logic goes here */}\n}\"\n```\n\n----------------------------------------\n\nTITLE: Cache Query and Write Logic Implementation\nDESCRIPTION: Describes the query and write behavior for the composite caches (ConfigCacheWithOverride and ResultsCacheWithOverride). Queries first check the override cache, then the current cache, while writes only go to the current cache.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/single-project-isolated-builds.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nIn the `ConfigCacheWithOverride`, these caches are instances of `ConfigCache`s and, in the `ResultsCacheWithOverride`, these caches are instances of `ResultsCache`s. A query for a cache entry is first attempted from the override cache and, if unsatisfied, a second attempt is made from the current cache. Writes are only written to the current cache, never into the override cache.\n```\n\n----------------------------------------\n\nTITLE: Interface for Telemetry Data Collection in MSBuild\nDESCRIPTION: Implementation pattern for classes that hold telemetry data in MSBuild. This approach allows creating specialized data holders that implement a common interface for working with OpenTelemetry Activities and their tags.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/VS-OpenTelemetry.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nIActivityTelemetryDataHolder data = new SomeData();\n...\nmyActivity?.WithTags(data);\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Code with OpenTelemetry Activities in MSBuild\nDESCRIPTION: Example of how to instrument code in MSBuild's main process using OpenTelemetry Activities. This pattern creates an activity, performs operations, and adds telemetry data using tags. The code is designed to be performance-conscious with appropriate null checking.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/VS-OpenTelemetry.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing (Activity? myActivity = OpenTelemetryManager.DefaultActivitySource?.StartActivity(TelemetryConstants.NameFromAConstantToAvoidAllocation))\n{\n// something happens here\n\n// add data to the trace\nmyActivity?.WithTag(\"SpecialEvent\",\"fail\")\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for MSBuild Task Contribution\nDESCRIPTION: Structured documentation explaining the process of contributing new tasks to MSBuild, including requirements, development guidelines, testing procedures, and documentation standards.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Contributing-Tasks.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributing Tasks\n\nMSBuild tasks are units of executable code used to perform atomic build operations.  There are many tasks already in MSBuild but there is always a need for more.  We encourage you to contribute useful tasks directory to MSBuild.\n\n## Getting Started\nPlease [open an issue](https://github.com/dotnet/msbuild/issues/new) to propose a new task.  This gives the community a chance to provide feedback and make suggestions.  Once there is consensus that the task is needed and the below requirements are met, fork the repository and begin development.\n\n## Requirements\nThe following requirements are in place for contributed tasks:\n\n1. The task must not introduce the need to ship any third-party assemblies.\n2. The task should work on .NET Framework and .NET Core if possible.  It can be confusing to users if a task only works on certain platforms.\n3. The task must have unit tests in place to prevent regressions.\n\n## Developing a new Task\nReview the existing documentation on [Task Writing](https://learn.microsoft.com/visualstudio/msbuild/task-writing) to learn about the fundamentals.  You can also looking at existing tasks in the [Microsoft.Build.Tasks.Core assembly](https://github.com/dotnet/msbuild/tree/main/src/Tasks) for a great starting point.\n\nTasks are generally simple and should not require much effort to develop.  If you find a task becoming very complicated, consider breaking it up into smaller tasks which can be run together in a target.\n\n## Developing unit tests\nContributed tasks must have unit tests in place to prove they work and to prevent regressions caused by other code changes.  There are a lot of examples in the [Microsoft.Build.Tasks.UnitTests](https://github.com/dotnet/msbuild/tree/main/src/Tasks.UnitTests) project.  Please provide a reasonable amount of test coverage so ensure the quality of the product.\n\n## Documentation\nYou can document the new task in the [visualstudio-docs](https://github.com/MicrosoftDocs/visualstudio-docs/tree/main/docs/msbuild) repository.  This helps users discover the new functionality.  The easiest way is to copy the documentation page for an existing task as a template.\n\n## Ship schedule\nMSBuild ships regularly with Visual Studio.  It also is updated in Preview releases.  Once your contribution is merged, expect it to be available in the next release.\n```\n\n----------------------------------------\n\nTITLE: Setting Property Initialization Tracking in MSBuild\nDESCRIPTION: Enables tracking of initial property value assignments during build process.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/Property-tracking-capabilities.md#2025-04-16_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nset MsBuildLogPropertyTracking=2\n```\n\n----------------------------------------\n\nTITLE: Passing Quoted Property Value in PowerShell Core\nDESCRIPTION: This PowerShell snippet shows how to pass a property value containing quotes to MSBuild using PowerShell Core (7.4 and higher). It uses a combination of double quotes and backticks for proper escaping.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Tips-&-Tricks.md#2025-04-16_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nmsbuild.exe filename.proj /p:propertyValue=\"Hello, `\"World!`\"\"\n```\n\n----------------------------------------\n\nTITLE: Registering Custom BuildCheck Rule in C#\nDESCRIPTION: Demonstrates the use of the RegisterBuildCheck intrinsic function to register a custom BuildCheck rule in MSBuild. This function is crucial for MSBuild to recognize and integrate custom checks.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck-Architecture.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvoid RegisterBuildCheck(string path)\n```\n\n----------------------------------------\n\nTITLE: Common .NET Core SDK Error Message\nDESCRIPTION: This snippet shows a typical error message that occurs when MSBuild cannot locate the .NET Core SDK. This often happens when trying to use preview versions of the SDK without enabling the appropriate Visual Studio settings.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Something's-wrong-in-my-build.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nerror : Unable to locate the .NET Core SDK. Check that it is installed and that the version specified in global.json (if any) matches the installed version.\nerror MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.\n```\n\n----------------------------------------\n\nTITLE: Passing Quoted Property Value in PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to pass a property value with quotes to MSBuild using Windows PowerShell.  It utilizes backticks (`) to escape the quotes within the property value.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Tips-&-Tricks.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nmsbuild.exe filename.proj /p:propertyValue=\"Hello, \\`\"World!\\`\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Project with Custom Target - XML\nDESCRIPTION: This XML snippet defines a .NET Core project named Referenced.csproj with a custom target called UnusualThing. The target is configured to return a specific file path when built, defined by the UnusualOutput property. This configuration is essential for referencing projects that rely on specific build outputs.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/static-graph.md#2025-04-16_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<Project Sdk=\\\"Microsoft.NET.Sdk\\\">\n\n  <PropertyGroup>\n    <TargetFramework>netcoreapp3.1</TargetFramework>\n    <UnusualOutput>Configuration\\Unusual.txt</UnusualOutput>\n  </PropertyGroup>\n\n  <Target Name=\\\"UnusualThing\\\" Returns=\\\"$(UnusualOutput)\\\" />\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Test Target Stub in MSBuild XML\nDESCRIPTION: The minimal implementation of the Test target in Microsoft.Common.Test.targets file, which serves as a placeholder and entry point for test target implementations.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/test-target.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project>\n    <Target Name=\"Test\"></Target>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Implementing MSBuild Error Code in C#\nDESCRIPTION: Demonstrates how to consume and log an MSBuild error code in C# code using the LogErrorWithCodeFromResources method.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/assigning-msb-error-code.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nLog.LogErrorWithCodeFromResources(\"Copy.Error\", SourceFiles[i].ItemSpec, DestinationFolder.ItemSpec, e.Message);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom MSBuild Properties File\nDESCRIPTION: Example of a custom MSBuild properties file (Custom.props) that can be placed in various extension locations to affect all builds. This file defines a custom property that will be available to any project that imports it.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Tips-&-Tricks.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project>\n  <PropertyGroup>\n    <MyCustomProperty>Value!</MyCustomProperty>\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Setting Uninitialized Property Read Tracking in MSBuild\nDESCRIPTION: Enables tracking of attempts to read uninitialized properties during build process.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/Property-tracking-capabilities.md#2025-04-16_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\nset MsBuildLogPropertyTracking=8\n```\n\n----------------------------------------\n\nTITLE: Defining Custom BuildCheck Rule Class in C#\nDESCRIPTION: Shows the inheritance requirement for custom BuildCheck rules. Custom rules must inherit from the BuildCheckRule class to be properly recognized and registered by MSBuild.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck-Architecture.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nBuildCheckRule\n```\n\n----------------------------------------\n\nTITLE: Passing Quoted Property Value in CMD\nDESCRIPTION: This batch file snippet shows how to pass a property value containing quotes to MSBuild when using the Command Prompt (CMD). It uses escape sequences to correctly handle the quotes within the property value.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Tips-&-Tricks.md#2025-04-16_snippet_4\n\nLANGUAGE: batchfile\nCODE:\n```\nmsbuild.exe filename.proj /p:propertyValue=\"Hello, \\\"World!\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Running MSBuild with PerfView for Event Tracing\nDESCRIPTION: Command to run MSBuild with PerfView for event tracing. It uses the Microsoft-Build provider to capture performance data.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/event-source.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nPerfView /Providers=*Microsoft-Build run MSBuild.exe <project to build>\n```\n\n----------------------------------------\n\nTITLE: XML Format of Additional Properties in MSBuild Project References\nDESCRIPTION: Shows the XML format used for the AdditionalPropertiesFromProject metadata, which contains property values for each target framework in the referenced project. This format is being changed to use attributes for target framework names.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/ProjectReference-Protocol.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<AdditionalProjectProperties>\n  <net5.0>\n    <SelfContained>true</SelfContained>\n    <_IsExecutable>true</_IsExecutable>\n  </net5.0>\n  <net5.0-windows>\n    <SelfContained>false</SelfContained>\n    <_IsExecutable>true</_IsExecutable>\n  </net5.0-windows>\n</AdditionalProjectProperties>\n```\n\n----------------------------------------\n\nTITLE: Building with Graph - Shell\nDESCRIPTION: This shell command snippet demonstrates how to build a referencing project with the -graph option in dotnet msbuild. The output indicates successful loading of the static graph with details about nodes and edges, ensuring that both referenced and referencing projects are built correctly.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/static-graph.md#2025-04-16_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ dotnet msbuild Referencing\\Referencing.csproj -graph\n\\\"Static graph loaded in 0.253 seconds: 2 nodes, 1 edges\\\"\n  Referenced -> S:\\Referenced\\bin\\Debug\\netcoreapp3.1\\Referenced.dll\n  Referencing -> S:\\Referencing\\bin\\Debug\\netcoreapp3.1\\Referencing.dll\n```\n\n----------------------------------------\n\nTITLE: Implementing Wasmtime-dotnet Bindings for MSBuild Wasm Tasks\nDESCRIPTION: C# code demonstrating how to use wasmtime-dotnet to load and execute a WebAssembly module with WASI capabilities. Shows basic setup including configuring the WASI environment, defining host functions that can be called from Wasm, and invoking a Wasm function.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/Wasm-tasks.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing var engine = new Engine();\nusing var module = Module.FromFile(engine, WasmFilePath);\nusing var linker = new Linker(engine);\nlinker.DefineWasi(); // linking WASI\nlinker.Define(\"namespace\", \"function\", (Action)delegate { /* do something */ }); // Host function that can be called from Wasm\nusing var store = new Store(engine);\nvar wasiConfigBuilder = new WasiConfiguration(); // enable resources: InheritEnvironment, PreopenedDirectory, StdIO \nstore.SetWasiConfiguration(wasiConfigBuilder);\nInstance instance = linker.Instantiate(store, module);\nAction fn = instance.GetAction(\"Execute\");\nfn.Invoke();\n```\n\n----------------------------------------\n\nTITLE: Task Lifecycle Diagram Using Mermaid\nDESCRIPTION: A mermaid diagram illustrating the complete lifecycle of an MSBuild task from implementation through execution and output gathering.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Tasks.md#2025-04-16_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph \n\nI[\"Implement:<br/>extend ITask interface in .dll\"] --> R[\"Register:<br/>&lt;UsingTask /&gt;\"] --> U[\"Use in XML:<br/>&lt;Target&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;MyTask /&gt;<br/>&lt;/Target&gt;\"] --> In[\"Initialize:<br/> compile inline or load from assembly <br/>(TaskFactory)\"] --> S[\"Setup:<br/> Set input properties<br/> (TaskExecutionHost)\"] --> E[\"ITask.Execute()\"] --> O[\"Gather outputs: <br/> (TaskExecutionHost)\"]\n```\n\n----------------------------------------\n\nTITLE: Performing Proprietary Handshake for Transport Validation in C#\nDESCRIPTION: This code snippet demonstrates the proprietary handshake used in MSBuild for validating the transport layer between nodes. It's part of the NodeProviderOutOfProcBase class and ensures secure communication setup.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Nodes-Orchestration.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Proprietary handshake code\n// (Specific implementation details not provided in the original text)\n```\n\n----------------------------------------\n\nTITLE: Declaring Additional Properties in Referenced MSBuild Projects\nDESCRIPTION: Demonstrates how to use the AdditionalTargetFrameworkInfoProperty item to declare properties that should be gathered from a referenced project. This allows referencing projects to access these properties via the AdditionalPropertiesFromProject metadata.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/ProjectReference-Protocol.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n  <ItemGroup>\n    <AdditionalTargetFrameworkInfoProperty Include=\"SelfContained\"/>\n    <AdditionalTargetFrameworkInfoProperty Include=\"_IsExecutable\"/>\n  </ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing ITranslatable Interface for Message Serialization in C#\nDESCRIPTION: This snippet shows the core method of the ITranslatable interface used for serializing communication messages in MSBuild. It defines a Translate method that takes an ITranslator parameter, allowing for bidirectional serialization.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Nodes-Orchestration.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Translate(ITranslator translate)\n```\n\n----------------------------------------\n\nTITLE: Enabling MSBuild Evaluation Profiling\nDESCRIPTION: Command-line syntax for enabling the MSBuild evaluation profiler, which generates a performance report after build completion. The profiler can output in TSV format (for spreadsheet analysis) or Markdown format (for human readability).\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n/profileevaluation:<filename>\n```\n\n----------------------------------------\n\nTITLE: JSON Format for Task Output in MSBuild Wasm Tasks\nDESCRIPTION: JSON format for task outputs in MSBuild Wasm tasks. Only parameters marked with output=true in the parameter spec are recognized. Shows how ITaskItemArray outputs are structured with ItemSpec and WasmPath metadata.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/Wasm-tasks.md#2025-04-16_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"Param4\": [\n        {\n            \"ItemSpec\": \"also/can/be/dir\",\n            \"WasmPath\": \"also/can/be/dir\"\n        },\n        {\n            \"ItemSpec\": \"name_in_host.txt\",\n            \"WasmPath\": \"item.txt\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building a specific target from a multi-targeted project in .NET CLI\nDESCRIPTION: Example command showing how to build a single target from a multi-targeted project using the dotnet CLI, which is a valid use case that doesn't trigger the BC0107 error.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/Codes.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet build my-multi-target.csproj /p:TargetFramework=net9.0\n```\n\n----------------------------------------\n\nTITLE: Installing MSBuild Custom Check Template\nDESCRIPTION: Command to install the MSBuild custom check template using the dotnet CLI. This prepares the development environment for creating custom MSBuild check libraries.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/BuildCheck.UnitTests/TestAssets/CustomCheck/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new install msbuildcheck\n```\n\n----------------------------------------\n\nTITLE: Configuring BuildCheck Evaluation Scope in .editorconfig (INI)\nDESCRIPTION: Example of setting the evaluation scope for a BuildCheck rule in an .editorconfig file. This determines which parts of the project are included in the check.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck.md#2025-04-16_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[*.csproj]\nbuild_check.BC0101.scope=all\n```\n\n----------------------------------------\n\nTITLE: Configuring BuildCheck Rules in .editorconfig (INI)\nDESCRIPTION: Sample configuration for BuildCheck rules in an .editorconfig file. This demonstrates how to set severity levels and scopes for different build checks.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[*.csproj]\nbuild_check.BC0101.severity=warning\n\nbuild_check.COND0543.severity=none\nbuild_check.COND0543.scope=project_file\nbuild_check.COND0543.custom_switch=QWERTY\n```\n\n----------------------------------------\n\nTITLE: Implementing 1ES Pipeline Template with Multiple Outputs in Azure DevOps\nDESCRIPTION: Example YAML configuration for azure-pipelines.yml that uses 1ES MicroBuild template with multiple outputs optimization to reduce security scan overhead. It demonstrates how to properly set up artifact publishing using Build.ArtifactStagingDirectory.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/eng/common/template-guidance.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# azure-pipelines.yml\nextends:\n  template: azure-pipelines/MicroBuild.1ES.Official.yml@MicroBuildTemplate\n  parameters:\n    stages:\n    - stage: build\n      jobs:\n      - template: /eng/common/templates-official/jobs/jobs.yml@self\n        parameters:\n          # 1ES makes use of outputs to reduce security task injection overhead\n          templateContext:\n            outputs:\n            - output: pipelineArtifact\n              displayName: 'Publish logs from source'\n              continueOnError: true\n              condition: always()\n              targetPath: $(Build.ArtifactStagingDirectory)/artifacts/log\n              artifactName: Logs\n          jobs:\n          - job: Windows\n            steps:\n            - script: echo \"friendly neighborhood\" > artifacts/marvel/spiderman.txt\n          # copy build outputs to artifact staging directory for publishing\n          - task: CopyFiles@2\n              displayName: Gather build output\n              inputs:\n                SourceFolder: '$(Build.SourcesDirectory)/artifacts/marvel'\n                Contents: '**'\n                TargetFolder: '$(Build.ArtifactStagingDirectory)/artifacts/marvel'\n```\n\n----------------------------------------\n\nTITLE: Project Reference Declaration in MSBuild\nDESCRIPTION: Shows the syntax for declaring project dependencies using ProjectReference items in MSBuild projects. This is one way to create build dependencies between projects.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/threading.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n@(ProjectReference)\n```\n\n----------------------------------------\n\nTITLE: Configuring property initialization checks in MSBuild project files\nDESCRIPTION: INI configuration to set build check severity and options for BC0201 and BC0202, disabling the allowance of uninitialized properties in conditions.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/Codes.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[*.csproj]\nbuild_check.BC0201.severity=error\nbuild_check.BC0201.AllowUninitializedPropertiesInConditions=false\nbuild_check.BC0202.AllowUninitializedPropertiesInConditions=false\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Culture Support in MSBuild\nDESCRIPTION: Sets the EnableCustomCulture property to true in a PropertyGroup to enable custom culture detection and processing in MSBuild projects.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/custom-cultures.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <EnableCustomCulture>true</EnableCustomCulture>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Enabling Asynchronous Logging in MSBuild\nDESCRIPTION: Enables asynchronous logging in MSBuild.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Environment-Variables.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n* `MSBUILDLOGASYNC=1`\n```\n\n----------------------------------------\n\nTITLE: Calculating Fuzzy Matching Similarity Score in C#\nDESCRIPTION: Implementation of a fuzzy matching algorithm that calculates a similarity score between two strings. The score is based on the number of matching characters and their positions, used to determine if two slightly different package names might represent the same dependency.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.GoesToProject.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n﻿Project\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Layer Project References\nDESCRIPTION: Example of Service Layer project configuration in Onion Architecture, demonstrating how to disable transitive project references.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Controlling-Dependencies-Behavior.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <ProjectReference Include=\"..\\Repository\\Repository.csproj\" />\n  </ItemGroup>\n\n  <PropertyGroup>\n    <TargetFramework>net48</TargetFramework>\n    <LangVersion>10</LangVersion>\n    <!-- This prevents referencing types from transitive project references. -->\n    <DisableTransitiveProjectReferences>true</DisableTransitiveProjectReferences>\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Using CheckFeatureAvailability Property Function in MSBuild\nDESCRIPTION: Demonstrates how to use the CheckFeatureAvailability property function in MSBuild to check the availability status of a specific feature. The result is stored in a property named FeatureAvailability.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/FeatureAvailability.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <FeatureAvailability>$([MSBuild]::CheckFeatureAvailability('FeatureA'))</FeatureAvailability>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: InitializeNodeLoggers Method for OOP Node Configuration in MSBuild\nDESCRIPTION: Called from OutOfProcNode.HandleNodeConfiguration to set up logging in out-of-process nodes. Creates BuildEventArgTransportSink instances to handle event bundling and transport across nodes.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Logging-Internals.md#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nInitializeNodeLoggers(ICollection<LoggerDescription> descriptions, IBuildEventSink forwardingLoggerSink, int nodeId)\n```\n\n----------------------------------------\n\nTITLE: Running Visual Studio Design-time Build Command\nDESCRIPTION: Command-line that approximates Visual Studio design-time build for IntelliSense. It executes multiple targets with specific properties to simulate VS design-time behavior for tasks like reference resolution and output grouping.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Tips-&-Tricks.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/t:CollectResolvedSDKReferencesDesignTime;DebugSymbolsProjectOutputGroup;CollectPackageReferences;ResolveComReferencesDesignTime;ContentFilesProjectOutputGroup;DocumentationProjectOutputGroupDependencies;SGenFilesOutputGroup;ResolveProjectReferencesDesignTime;SourceFilesProjectOutputGroup;DebugSymbolsProjectOutputGroupDependencies;SatelliteDllsProjectOutputGroup;BuiltProjectOutputGroup;SGenFilesOutputGroupDependencies;ResolveAssemblyReferencesDesignTime;CollectAnalyzersDesignTime;CollectSDKReferencesDesignTime;DocumentationProjectOutputGroup;PriFilesOutputGroup;BuiltProjectOutputGroupDependencies;ResolvePackageDependenciesDesignTime;SatelliteDllsProjectOutputGroupDependencies;SDKRedistOutputGroup;CompileDesignTime /p:SkipCompilerExecution=true /p:ProvideCommandLineArgs=true /p:BuildingInsideVisualStudio=true /p:DesignTimeBuild=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Target Output Logging in MSBuild\nDESCRIPTION: Enables printing of all target outputs to the log, providing more detailed information during the build process.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Environment-Variables.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* `MSBUILDTARGETOUTPUTLOGGING=1`\n```\n\n----------------------------------------\n\nTITLE: Visualizing Event Flow in Replay Mode with Mermaid Flowchart\nDESCRIPTION: Mermaid flowchart showing how events from the BinaryLogReplayEventSource and BuildCheck are merged into the IEventSource, which then forwards events to loggers.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck-Architecture.md#2025-04-16_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    replayEventSource[BinaryLogReplayEventSource replayEventSource] --> mergedEventSource[IEventSource mergedEventSource]\n    replayEventSource[BinaryLogReplayEventSource replayEventSource] --> BuildCheckBuildEventHandler[BuildCheckBuildEventHandler]\n    BuildCheckBuildEventHandler[BuildCheckBuildEventHandler] --> mergedEventSource[IEventSource mergedEventSource]\n    mergedEventSource[IEventSource mergedEventSource] --> loggers\n```\n\n----------------------------------------\n\nTITLE: Building MSBuild with Retail Framework Reference\nDESCRIPTION: Command to build MSBuild while setting the TargetRetailBuildFramework property to true, enabling the use of the retail assembly version of Microsoft.Build.Framework.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Microsoft.Build.Framework.md#2025-04-16_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nBuildAndCopy.cmd <path> true\n```\n\n----------------------------------------\n\nTITLE: Visualizing MSBuild Scheduler Flow with Mermaid Diagram\nDESCRIPTION: A flowchart diagram showing how the MSBuild scheduler processes build requests, checks for cached results, handles project dependencies, and manages the build execution flow. It illustrates the decision paths when dependencies are encountered during the build process.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/High-level-overview.md#2025-04-16_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n   A1[Build Request] --> S1[Scheduler]\n   \n   S1 --> C1{Is cached}\n   C1 --Yes--> Result1[Return result]\n   C1 -- No --> Build1[Build Project]\n\n   Build1 --> HD{Has \n   Dependency}\n   HD --No --> PF[Project Finished]\n   HD --Yes --> DI[Identify Project Dependency]\n\n   DI --Request Dependency Build--> S1\n```\n\n----------------------------------------\n\nTITLE: ProcessLoggingEvent Method for Event Ingestion in MSBuild\nDESCRIPTION: The main ingestion point for build events, handling both local API-logged events and events received through node-to-node remoting. Ensures isolated delivery through locking or queueing.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Logging-Internals.md#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nProcessLoggingEvent(object buildEvent)\n```\n\n----------------------------------------\n\nTITLE: Creating Change Wave Version in C#\nDESCRIPTION: Code snippet showing how to add a new Change Wave version identifier in the ChangeWaves.cs file. This creates a static readonly Version object that represents a specific version of MSBuild.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ChangeWaves-Dev.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic static readonly Version Wave17_4 = new Version(17, 4);\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic MSBuild Inline Task in C#\nDESCRIPTION: This code snippet demonstrates the creation of a basic MSBuild inline task using C#. The `MyInlineTask` class inherits from `Microsoft.Build.Utilities.Task` and overrides the `Execute` method, which is the entry point for the task's logic. The current implementation simply initializes an integer and returns true, signifying success.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Tasks.UnitTests/TaskFactorySource/RoslynCodeTaskFactory_Tests.CSharpMethod.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnamespace InlineCode {\n    using Microsoft.Build.Framework;\n    using Microsoft.Build.Utilities;\n    using System;\n    using System.Collections;\n    using System.Collections.Generic;\n    using System.IO;\n    using System.Linq;\n    using System.Text;\n    \n    \n    public class MyInlineTask : Microsoft.Build.Utilities.Task {\n        \npublic override bool Execute() { int x = 0; return true; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Directories from Culture-Specific Resource Processing in MSBuild\nDESCRIPTION: Configures the NonCultureResourceDirectories property to specify directories that should not be treated as culture-specific resources, even if their names match culture naming patterns.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/custom-cultures.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <NonCultureResourceDirectories>long;hash;temp</NonCultureResourceDirectories>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining ProjectReferenceTargets Items in XML for MSBuild Static Graph\nDESCRIPTION: Example XML showing how to define the ProjectReferenceTargets items in MSBuild. The targets for core mappings are stored as properties for extensibility, but the ProjectReferenceTargets item is what will be read by the ProjectGraph.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/static-graph.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <ProjectReferenceTargetsForClean>GetTargetFrameworks;Clean</ProjectReferenceTargetsForClean>\n</PropertyGroup>\n\n<ItemGroup>\n  <ProjectReferenceTargets Include=\"Clean\" Targets=\"$(ProjectReferenceTargetsForClean)\"/>\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: XML Project Extension Import in MSBuild\nDESCRIPTION: XML import statement that loads project-specific property extensions using a wildcard pattern, conditional on import properties being enabled. This is shown as a significant property evaluation cost.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<Import Project=\"$(MSBuildProjectExtensionsPath)$(MSBuildProjectFile).*.props\" Condition=\"'$(ImportP...\"\n```\n\n----------------------------------------\n\nTITLE: Deploying MSBuild to Visual Studio with PowerShell\nDESCRIPTION: Command for deploying custom-built MSBuild binaries to Visual Studio using the Deploy-MSBuild PowerShell script. Requires administrator privileges and specification of destination and configuration parameters.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/Deploy-MSBuild.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nscripts\\Deploy-MSBuild.ps1 -destination {destination} -configuration {configuration}\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Task Parameters in C#\nDESCRIPTION: This code snippet defines a C# class 'MyInlineTask' that extends 'Microsoft.Build.Utilities.Task'. It includes several parameters, including string and ITaskItem types, that can be set and accessed within the build process. The primary functionality is to manage these parameters and indicate the success status of the task execution.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Tasks.UnitTests/TaskFactorySource/RoslynCodeTaskFactory_Tests.CSharpFragmentWithProperties.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nnamespace InlineCode {\n    using Microsoft.Build.Framework;\n    using Microsoft.Build.Utilities;\n    using System;\n    using System.Collections;\n    using System.Collections.Generic;\n    using System.IO;\n    using System.Linq;\n    using System.Text;\n    \n    public class MyInlineTask : Microsoft.Build.Utilities.Task {\n        \n        private string _Parameter1;\n        \n        public virtual string Parameter1 {\n            get {\n                return _Parameter1;\n            }\n            set {\n                _Parameter1 = value;\n            }\n        }\n        \n        private string _Parameter2;\n        \n        public virtual string Parameter2 {\n            get {\n                return _Parameter2;\n            }\n            set {\n                _Parameter2 = value;\n            }\n        }\n        \n        private string _Parameter3;\n        \n        public virtual string Parameter3 {\n            get {\n                return _Parameter3;\n            }\n            set {\n                _Parameter3 = value;\n            }\n        }\n        \n        private Microsoft.Build.Framework.ITaskItem _Parameter4;\n        \n        public virtual Microsoft.Build.Framework.ITaskItem Parameter4 {\n            get {\n                return _Parameter4;\n            }\n            set {\n                _Parameter4 = value;\n            }\n        }\n        \n        private Microsoft.Build.Framework.ITaskItem[] _Parameter5;\n        \n        public virtual Microsoft.Build.Framework.ITaskItem[] Parameter5 {\n            get {\n                return _Parameter5;\n            }\n            set {\n                _Parameter5 = value;\n            }\n        }\n        \n        private bool _Success = true;\n        \n        public virtual bool Success {\n            get {\n                return _Success;\n            }\n            set {\n                _Success = value;\n            }\n        }\n        \n        public override bool Execute() {\nint x = 0;\n            return Success;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package References with Private Assets\nDESCRIPTION: Example showing how to configure package references with PrivateAssets to prevent transitive access.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Controlling-Dependencies-Behavior.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"newtonsoft.json\" Version=\"13.0.1\">\n    <!-- This prevents the reference to be available to referencing types. -->\n    <PrivateAssets>compile</PrivateAssets>\n  </PackageReference>\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining MSBuild Error Code in Resource File\nDESCRIPTION: Example of how an MSBuild error code is defined in a .resx file. Shows the structure for error MSB3021 which handles file copy failures.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/assigning-msb-error-code.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <data name=\"Copy.Error\">\n    <value>MSB3021: Unable to copy file \"{0}\" to \"{1}\". {2}</value>\n    <comment>{StrBegin=\"MSB3021: \"}</comment>\n  </data>\n```\n\n----------------------------------------\n\nTITLE: Logging Task Inputs in MSBuild\nDESCRIPTION: Enables logging of task inputs, which is not necessary if diagnostic loggers are already in use.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Environment-Variables.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* `MSBUILDLOGTASKINPUTS=1`\n```\n\n----------------------------------------\n\nTITLE: Querying BuildCheck API Availability with Feature Query API\nDESCRIPTION: Code showing how to check for the availability of the BuildCheck API using the Feature Query API. This allows checks to be written with compatibility in mind despite potential API changes.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck.md#2025-04-16_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar availability = Features.CheckFeatureAvailability(\"BuildCheck.Beta\");\n```\n\n----------------------------------------\n\nTITLE: Defining ConfigurationContext Class for Custom Configuration\nDESCRIPTION: Class that holds both standard and custom configuration data from .editorconfig files. It provides access to unrecognized configuration key-value pairs which allow checks to be extended with custom parameters.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Holder of an optional configuration from .editorconfig file (not recognized by the infrastructure)\n/// </summary>\npublic class ConfigurationContext\n{\n    /// <summary>\n    /// Custom configuration data - per each rule that has some specified.\n    /// </summary>\n    public IReadOnlyList<CustomConfigurationData> CustomConfigurationData { get; init; }\n\n    /// <summary>\n    /// Configuration data from standard declarations\n    /// </summary>\n    public IReadOnlyList<BuildExecutionCheckConfiguration> BuildExecutionCheckConfig { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MSBuild Check Template using .NET CLI\nDESCRIPTION: This snippet demonstrates how to install the MSBuild Check Template using the .NET command-line interface. \nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/BuildCheck.UnitTests/TestAssets/CustomCheck2/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new install msbuildcheck\n```\n\n----------------------------------------\n\nTITLE: XML C# Targets Import in MSBuild\nDESCRIPTION: XML import statement that loads C#-specific build targets from a defined path. This appears as a major contributor to property evaluation time in the profiler output.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<Import Project=\"$(CSharpTargetsPath)\"  />\n```\n\n----------------------------------------\n\nTITLE: Patching Visual Studio with MSBuild Binaries\nDESCRIPTION: PowerShell commands to build MSBuild and deploy the binaries to Visual Studio, replacing the default MSBuild installation.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md#2025-04-16_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n# bootstrap build\n.\\build.cmd\n\n# copy the bootstrap build output over the MSBuild binaries in Visual Studio\n.\\scripts\\Deploy-MSBuild.ps1 -destination \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\"\n```\n\n----------------------------------------\n\nTITLE: XML Target Platform SDK Path Definition\nDESCRIPTION: XML property that defines the target platform SDK path using MSBuild utility methods when not already specified. This is highlighted as a costly property evaluation operation in the profiler output.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<TargetPlatformSdkPath Condition=\"'$(TargetPlatformSdkPath)' == ''\" >$([Microsoft.Build.Utilities.To...\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New MSBuild Check Project\nDESCRIPTION: This snippet shows how to create a new project using the MSBuild Check Template with a specified project name.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/BuildCheck.UnitTests/TestAssets/CustomCheck2/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new msbuildcheck -n <ProjectName>\n```\n\n----------------------------------------\n\nTITLE: Reverting Package Source Changes CLI Command\nDESCRIPTION: Command line example showing how to revert package references back from source references\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/interactive-package-references.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n> dotnet package-to-sources --revert --project MySolution.sln --packages: FooBar.Baz, Newtonsoft.Json\n\nSuccessfuly reverted packages sourcing for: FooBar.Baz, Newtonsoft.Json.\n>\n```\n\n----------------------------------------\n\nTITLE: XML Default Compile Include Pattern in .NET SDK\nDESCRIPTION: XML item definition that specifies which files should be included as compile items in a .NET project, using wildcards and excluding items based on default exclusion patterns. This is shown as one of the more expensive lazy item evaluations.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Compile Include=\"**/*$(DefaultLanguageSourceExtension)\" Exclude=\"$(DefaultItemExcludes);$(DefaultEx...\"\n```\n\n----------------------------------------\n\nTITLE: Conditioning C# Code on Change Wave\nDESCRIPTION: Code snippet showing how to condition C# code to only execute when a specific Change Wave is enabled. The AreFeaturesEnabled method checks if features from a particular version are enabled or have been disabled via environment variables.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ChangeWaves-Dev.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\n    // If you pass an incorrectly formatted change wave, this will throw.\n    // Use the readonly Version that was created in the previous step.\n    if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))\n    {\n        <your feature>\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining ServerNodeBuildCommand Packet Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of the ServerNodeBuildCommand packet used in client-server communication for MSBuild. It includes property names, types, and descriptions for each field in the packet.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/MSBuild-Server.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property name            | Type                         | Description |\n|---|---|---|\n| CommandLine              | String                       | The MSBuild command line with arguments for build |\n| StartupDirectory         | String                       | The startup directory path |\n| BuildProcessEnvironment  | IDictionary<String, String>  | Environment variables for current build |\n| Culture                  | CultureInfo                  | The culture value for current build |\n| UICulture                | CultureInfo                  | The UI culture value for current build |\n| ConsoleConfiguration     | TargetConsoleConfiguration   | Console configuration of target Console at which the output will be rendered |\n```\n\n----------------------------------------\n\nTITLE: Running CI Build for MSBuild\nDESCRIPTION: Command to run the CI build process which mimics the Continuous Integration environment.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md#2025-04-16_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\neng\\CIBuild.cmd\n```\n\n----------------------------------------\n\nTITLE: Defining Redaction with Global Items in MSBuild\nDESCRIPTION: This snippet showcases how to define data redaction rules using global items in an MSBuild project. Each `DataToRedactFromLogs` item specifies the data to redact, its type (Property, Item, TaskOutput, TaskParameter), and other attributes like `RedactValue` and `Metadata`. This method provides a more structured and readable way to define redaction rules, especially for complex scenarios.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/security-metadata.md#2025-04-16_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n\"<ItemGroup>\n  <!-- Redacting property content based on the name of the property (or environment variable) -->\n  <DataToRedactFromLogs Include=\"Foo\" Type=\"Property\">\n  </DataToRedactFromLogs>\n  <!-- Redacting item content based on the name of the item. Metadat are not redacted -->\n  <DataToRedactFromLogs Include=\"Bar\" Type=\"Item\" RedactValue=True>\n  </DataToRedactFromLogs>\n  <!-- Redacting item metadata content based on the name. -->\n  <DataToRedactFromLogs Include=\"Baz\" Type=\"Item\" RedactValue=False Metadata=\"SomeMetadata\">\n  </DataToRedactFromLogs>\n  <!-- Redacting all metadata content of specific item based on the name of the item. -->\n  <DataToRedactFromLogs Include=\"MyItem\" Type=\"Item\" RedactValue=False Metadata=\"*\" />\n  <!-- Redacting property content passed from the task. At the same time requiring that the data receiving the output of the task are denoted as secret as well. -->\n  <DataToRedactFromLogs Include=\"OutputA\" Type=\"TaskOutput\" TaskName=\"TaskX\" />\n  <!-- Redacting task parameter value. At the same time requiring that the data passed to the parameter of the task are denoted as secret as well. -->\n  <DataToRedactFromLogs Include=\"ParamA\" Type=\"TaskParameter\" TaskName=\"TaskX\" />\n  </DataToRedactFromLogs>\n</ItemGroup>\"\n```\n\n----------------------------------------\n\nTITLE: XML Project Reference Item Definition in MSBuild\nDESCRIPTION: XML item definition group that defines properties for project references, including comments about build targets. This appears as a significant item definition group evaluation cost.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<ProjectReference ><!-- Target to build in the project reference; by default, this property is blank...\"\n```\n\n----------------------------------------\n\nTITLE: Project Reference Output Control\nDESCRIPTION: Example showing how to control project reference output copying behavior.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Controlling-Dependencies-Behavior.md#2025-04-16_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <ProjectReference Include=\"../somepath/MyProj.csproj\">\n    <!-- This indicates that the referenced project output should not be copied to output folder. -->\n    <Private>false</Private>\n  </ProjectReference>\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: XML Example: Sensitive Data Item Group\nDESCRIPTION: Demonstrates a sample item group configuration with potential sensitive and non-sensitive data items for redaction testing\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/security-metadata.md#2025-04-16_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <DataToRedactFromLogs>MySecret</DataToRedactFromLogs>\n  <MySecret>a</MySecret>\n  <MyInnocentData>hahaha</MyInnocentData>\n  <SomeProp></SomeProp>\n</ItemGroup>\n\n<Target Name=\"Test\">\n  <MyTask FirstInput=\"MySecret\" SecondInput=\"MyInnocentData\">\n    <Output PropertyName=\"SomeProp\" TaskParameter=\"Result\">\n  </MyTask>\n  <Message Text=\"Result from task: $(SomeProp)\">\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Task in C# - MSBuild\nDESCRIPTION: This code snippet defines a custom inline task for MSBuild by extending the Microsoft.Build.Utilities.Task class. It overrides the Execute method, providing a structure for any actions that the task should perform when executed. The task does not currently implement any specific logic within the Execute method apart from returning true, indicating successful execution. Required namespaces include Microsoft.Build.Framework and Microsoft.Build.Utilities.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Tasks.UnitTests/TaskFactorySource/RoslynCodeTaskFactory_Tests.CSharpMethodSourceCodeFromFile.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnamespace InlineCode {\n    using Microsoft.Build.Framework;\n    using Microsoft.Build.Utilities;\n    using System;\n    using System.Collections;\n    using System.Collections.Generic;\n    using System.IO;\n    using System.Linq;\n    using System.Text;\n    \n    public class MyInlineTask : Microsoft.Build.Utilities.Task {\n        \npublic override bool Execute() { int x = 0; return true; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling All Property Tracking Features in MSBuild\nDESCRIPTION: Enables all property tracking events by setting the combined flag value for all tracking options.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/Property-tracking-capabilities.md#2025-04-16_snippet_5\n\nLANGUAGE: batch\nCODE:\n```\nset MsBuildLogPropertyTracking=15\n```\n\n----------------------------------------\n\nTITLE: Adding Built-In Properties in MSBuild Evaluator\nDESCRIPTION: Reference to AddBuiltInProperties() method in the Evaluator class that sets built-in properties during Pass 0 of project evaluation.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/Built-in-Properties.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nhttps://github.com/dotnet/msbuild/blob/24b33188f385cee07804cc63ec805216b3f8b72f/src/Build/Evaluation/Evaluator.cs#L609-L612\n```\n\n----------------------------------------\n\nTITLE: Defining ServerNodeConsoleWrite Packet Structure in Markdown\nDESCRIPTION: This snippet describes the structure of the ServerNodeConsoleWrite packet used for console output in the MSBuild Server. It includes property names, types, and descriptions for each field in the packet.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/MSBuild-Server.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Property name            | Type          | Description |\n|---|---|---|\n| Text                     | String        | The text that is written to the output stream. It includes ANSI escape codes for formatting. |\n| OutputType               | Byte          | Identification of the output stream (1 = standard output, 2 = error output) |\n```\n\n----------------------------------------\n\nTITLE: Deploying MSBuild to .NET Core SDK with PowerShell on Linux\nDESCRIPTION: Command for deploying custom-built MSBuild binaries to .NET Core SDK on Linux using PowerShell. Requires the PowerShell tool to be installed on the Linux system.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/Deploy-MSBuild.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npwsh scripts\\Deploy-MSBuild.ps1\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Task\nDESCRIPTION: This snippet defines a custom inline task 'MyInlineTask' that inherits from Microsoft.Build.Utilities.Task. The Execute() function is overridden to implement the task's behavior, which currently initializes a variable and returns true, indicating the task executed successfully. This task can be used in MSBuild scripts to run custom code during project builds.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Tasks.UnitTests/TaskFactorySource/RoslynCodeTaskFactory_Tests.VisualBasicMethod.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: VB.NET\nCODE:\n```\n'------------------------------------------------------------------------------\n' <auto-generated>\n'     This code was generated by a tool.\n'\n'     Changes to this file may cause incorrect behavior and will be lost if\n'     the code is regenerated.\n' </auto-generated>\n'------------------------------------------------------------------------------\n\nOption Strict Off\nOption Explicit On\n\nImports Microsoft.Build.Framework\nImports Microsoft.Build.Utilities\nImports System\nImports System.Collections\nImports System.Collections.Generic\nImports System.IO\nImports System.Linq\nImports System.Text\n\nNamespace InlineCode\n    \n    Public Class MyInlineTask\n        Inherits Microsoft.Build.Utilities.Task\n        \n        Public Overrides Function Execute() As Boolean\n            Dim x = 0\n            Return True\n        End Function\n    End Class\nEnd Namespace\n```\n\n----------------------------------------\n\nTITLE: Overriding Glob Expansion Behavior in MSBuild\nDESCRIPTION: Overrides the default behavior of glob expansion. If a path with wildcards matches one of the provided regular expressions, it is not expanded. The value is a semicolon-separated list of regular expressions.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Environment-Variables.md#2025-04-16_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n* `MsBuildSkipEagerWildCardEvaluationRegexes`\n```\n\n----------------------------------------\n\nTITLE: Building with Graph Isolate - Shell\nDESCRIPTION: This shell command demonstrates an attempt to build the referencing project using the -graph -isolate option. The operation fails because the referenced project’s target is not well-understood by the graph, highlighting issues with caching outputs in isolated builds due to unspecified project reference targets.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/static-graph.md#2025-04-16_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n$ dotnet msbuild Referencing\\Referencing.csproj -graph -isolate\n\\\"Static graph loaded in 0.255 seconds: 2 nodes, 1 edges\\\"\n  Referenced -> S:\\Referenced\\bin\\Debug\\netcoreapp3.1\\Referenced.dll\nS:\\Referencing\\Referencing.csproj(12,5): error : MSB4252: Project \\\"S:\\Referencing\\Referencing.csproj\\\" with global properties\nS:\\Referencing\\Referencing.csproj(12,5): error :     (IsGraphBuild=true)\nS:\\Referencing\\Referencing.csproj(12,5): error :     is building project \\\"S:\\Referenced\\Referenced.csproj\\\" with global properties\nS:\\Referencing\\Referencing.csproj(12,5): error :     (IsGraphBuild=true)\nS:\\Referencing\\Referencing.csproj(12,5): error :     with the (UnusualThing) target(s) but the build result for the built project is not in the engine cache. In isolated builds this could mean one of the following:\nS:\\Referencing\\Referencing.csproj(12,5): error :     - the reference was called with a target which is not specified in the ProjectReferenceTargets item in project \\\"S:\\Referencing\\Referencing.csproj\\\"\nS:\\Referencing\\Referencing.csproj(12,5): error :     - the reference was called with global properties that do not match the static graph inferred nodes\nS:\\Referencing\\Referencing.csproj(12,5): error :     - the reference was not explicitly specified as a ProjectReference item in project \\\"S:\\Referencing\\Referencing.csproj\\\"\nS:\\Referencing\\Referencing.csproj(12,5): error :\n```\n\n----------------------------------------\n\nTITLE: Setting Built-In Properties in MSBuild Evaluator\nDESCRIPTION: Reference to SetBuiltInProperty() method in the Evaluator class that handles the actual setting of individual built-in properties.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/Built-in-Properties.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nhttps://github.com/dotnet/msbuild/blob/24b33188f385cee07804cc63ec805216b3f8b72f/src/Build/Evaluation/Evaluator.cs#L1257\n```\n\n----------------------------------------\n\nTITLE: AssemblyResources Class Definition\nDESCRIPTION: Defines the `AssemblyResources` class, which is required for assemblies that share code. This class provides access to the assembly's resources using a `ResourceManager`.  It initializes a `ResourceManager` with the manifest resource name and the executing assembly. It is essential to declare this class with the `internal static` modifiers.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Shared/SharedCode.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Resources;\nusing System.Reflection;\n\nnamespace Microsoft.Build.Shared\n{\n    internal static class AssemblyResources\n    {\n        internal static readonly ResourceManager resources =\n            new ResourceManager(\n                \"<manifest resource name>\",\n                Assembly.GetExecutingAssembly());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MSBuild Error Code Range Documentation\nDESCRIPTION: Comment block showing how error code ranges are tracked and managed in the resx file, including used, unused, and retired codes.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/assigning-msb-error-code.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nThe engine message bucket is: MSB4001 - MSB4999\n\nMSB4128 is being used in FileLogger.cs (can't be added here yet as strings are currently frozen)\nMSB4129 is used by Shared\\XmlUtilities.cs (can't be added here yet as strings are currently frozen)\n\nNext message code should be MSB4259.\n\nSome unused codes which can also be reused (because their messages were deleted, and UE hasn't indexed the codes yet):\n    <none>\n\nRetired codes, which have already shipped, but are no longer needed and should not be re-used:\nMSB4056\nMSB4005\n...\n\nDon't forget to update this comment after using a new code.\n```\n\n----------------------------------------\n\nTITLE: GetString Method for Resource Retrieval\nDESCRIPTION: Defines a `GetString()` method within the `AssemblyResources` class to retrieve resources. This method attempts to retrieve a string from the assembly's primary resources first, and if not found, it retrieves the string from the shared resources. It uses `CultureInfo.CurrentUICulture` to get culture-specific resources.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Shared/SharedCode.md#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\ninternal static string GetString(string name)\n{\n    string resource = resources.GetString(name, CultureInfo.CurrentUICulture);\n\n    if (resource == null)\n    {\n        resource = sharedResources.GetString(name, CultureInfo.CurrentUICulture);\n    }\n\n    return resource;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ServerNodeBuildResult Packet Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of the ServerNodeBuildResult packet used to indicate how the build finished in the MSBuild Server. It includes property names, types, and descriptions for each field in the packet.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/MSBuild-Server.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Property name            | Type          | Description |\n|---|---|---|\n| ExitCode                 | Int32         | The exit code of the build |\n| ExitType                 | String        | The exit type of the build |\n```\n\n----------------------------------------\n\nTITLE: Visualizing Wasm Execution Flow from Host\nDESCRIPTION: Mermaid flowchart showing how a Wasm module is executed from a host environment, illustrating the compilation process, runtime components, memory sharing, and execution flow.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/Wasm-tasks.md#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    a[guest language] -->|compile with wasi-sdk| K[Wasm Module]\n\n    A[Engine]  --> E[Linker]\n    \n    E -->|Define host functions & WASI| H[Instance]\n\n    H <---> Mem[Shared Memory]\n    \n    K[Module] -->|Piece of functionality| H\n    \n    L[Store] -->|Config for runtime| H\n    \n    H -->|Invoke module functions| M[Execution]\n\n    subgraph \" \"\n    A\n    K\n    L\n    end\n\n    subgraph \"Single run\"\n    H\n    E\n    M\n    Mem\n    end\n```\n\n----------------------------------------\n\nTITLE: MSBuildWasm System Architecture Diagram\nDESCRIPTION: Mermaid flowchart illustrating the architecture of the MSBuildWasm system, showing the interaction between MSBuild, the WasmTaskFactory, task execution host, WebAssembly modules, and the Wasmtime runtime.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/Wasm-tasks.md#2025-04-16_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[MSBuild] -.->|1. Registering tasks| B[WasmTaskFactory]\n    A -.->|5. Target execution| C[TaskExecutionHost]\n    C -->|6. a. instantiate \\n b. set parameters from XML\\n c. Execute task| D[WasmTask]\n    H[languages targeting wasi P1] -->|\"0. compile using wasi-sdk/cargo\"| G\n    D -->|9. properties| C \n    \n    D -->|7. run module's Execute function| E[wasmtime-dotnet]\n    E -->|8. stdout json \\nwith property values| D\n    E <--> F[Wasmtime]\n\n    B -->|4. Create Type for\\n the specific WasmTask| D\n    B <-->|3. GetTaskParameters| E\n    G[.wasm module] -->|2. module path via XML| B\n    %%B, C, D%%\n    style A fill:magenta\n    style B fill:#512bd4\n    style C fill:#512bd4\n    style D fill:#512bd4\n```\n\n----------------------------------------\n\nTITLE: File References for MSBuild Custom Events Implementation\nDESCRIPTION: List of key files that need to be modified when implementing a new custom event in MSBuild, including Binary Logger components and test files.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Adding-Events.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/Framework/NewEventArgs\nsrc/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs\nsrc/Build/Logging/BinaryLogger/BinaryLogger.cs\nsrc/Build/Logging/BinaryLogger/BuildEventArgsReader.cs\nsrc/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs\nsrc/Shared/LogMessagePacketBase.cs\nFramework.UnitTests/NewEventArgs_Tests.cs\nsrc/Build.UnitTests/BackEnd/NodePackets_Tests.cs\n```\n\n----------------------------------------\n\nTITLE: Building MSBuild on Unix Systems\nDESCRIPTION: Shell command to build MSBuild on Unix-based systems like OSX and Ubuntu.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Creating a new MSBuild Check Project\nDESCRIPTION: This snippet provides the command to instantiate a new custom template for an MSBuild check library. Replace <ProjectName> with your desired project name. This command sets up the initial structure required for the custom checks.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/BuildCheck.UnitTests/TestAssets/ErrorCustomCheck/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new msbuildcheck -n <ProjectName>\n```\n\n----------------------------------------\n\nTITLE: File References for MSBuildStructuredLog Implementation\nDESCRIPTION: List of files that need to be modified in the MSBuildStructuredLog repository to support the new custom event.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Adding-Events.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/StructuredLogger/BinaryLogger/BinaryLogRecordKind.cs\nsrc/StructuredLogger/BinaryLogger/BinaryLogger.cs\nsrc/StructuredLogger/BinaryLogger/XXXEventArgs.cs\nsrc/StructuredLogger/BinaryLogger/BuildEventArgsReader.cs\nsrc/StructuredLogger/BinaryLogger/BuildEventArgsWriter.cs\n```\n\n----------------------------------------\n\nTITLE: Service Layer Implementation with Package Restrictions\nDESCRIPTION: Example demonstrating how PrivateAssets affects package usage in Service Layer code.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Controlling-Dependencies-Behavior.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Service;\n//This is allowed unless PrivateAssets=compile is set on the PackageDependency in Repository.\n//using Newtonsoft.Json;\n\npublic class PersonsAccessor\n{\n    private Repository.Persona _persona;\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing MSBuild Project Input Logic with Mermaid Diagram\nDESCRIPTION: A flowchart showing how different types of import logic feed into an MSBuild project file. It demonstrates the relationship between user-defined imports, common targets logic, NuGet imports, and the project file itself.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/High-level-overview.md#2025-04-16_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD    \n    UL[\"`User defined import logic\n    _.props_ and _.targets_`\"]\n    \n    PROJ[\"`_.proj_ file`\"\n    eg. Foo.csproj]\n    \n    IL[Common Targets Logic\n    SDK or VS]\n\n    NI[\"`NuGet imports\n    _.g.props_ and _.g.targets_`\"]\n\n    UL --> PROJ\n    IL --> PROJ\n    NI --> PROJ\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific SDK Resolver in XML Manifest\nDESCRIPTION: XML configuration example showing how to specify a resolver as specific by setting the ResolvableSdkPattern using C# regex format. This determines which SDKs the resolver can handle.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/sdk-resolvers-algorithm.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<SdkResolver>\n  <Path>MySdkResolver.dll</Path>\n  <ResolvableSdkPattern>MySdk.*</ResolvableSdkPattern>\n</SdkResolver>\n```\n\n----------------------------------------\n\nTITLE: Installing MSBuild Custom Check Template with PowerShell\nDESCRIPTION: PowerShell command to install MSBuild custom check templates from Microsoft.Build.Templates package. This is a prerequisite for creating custom build checks.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/CustomBuildCheck.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet new install Microsoft.Build.Templates\n```\n\n----------------------------------------\n\nTITLE: Installing MSBuild Check Template using .NET CLI\nDESCRIPTION: This snippet outlines the command to install the MSBuild Custom Check Template, which is necessary for creating custom MSBuild checks. Ensure that the .NET SDK is installed prior to running this command.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/BuildCheck.UnitTests/TestAssets/ErrorCustomCheck/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new install msbuildcheck\n```\n\n----------------------------------------\n\nTITLE: Example of Running MSBuild with PerfView on Windows\nDESCRIPTION: Specific example of how to run MSBuild.exe to build MSBuild.sln using PerfView for event tracing on Windows. It assumes PerfView is one directory level up from the current directory.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/event-source.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n..\\PerfView /OnlyProviders=*Microsoft-Build run .\\MSBuild.exe .\\MSBuild.sln\n```\n\n----------------------------------------\n\nTITLE: Error and Warning Summary in MSBuild Output\nDESCRIPTION: This snippet outlines the result of the build process, indicating that it failed with specific error and warning codes, and provides details on the warnings generated.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryNormalVerbosity_FailedWithErrors.Windows.verified.txt#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nproject failed with 1 error(s) and 2 warning(s) (0.2s)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ndirectory/file(1,2,3,4): warning AA0000: Warning!\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ndirectory/file(1,2,3,4): warning AA0000: A\n      Multi\n      Line\n      Warning!\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ndirectory/file(1,2,3,4): error AA0000: Error!\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nBuild failed with 1 error(s) and 2 warning(s) in 5.0s\n```\n\n----------------------------------------\n\nTITLE: XML Language Targets Import in SDK\nDESCRIPTION: XML import statement that loads language-specific build targets. This appears as a significant property evaluation cost in the profiler output, contributing to overall build time.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<Import Project=\"$(LanguageTargets)\"  />\n```\n\n----------------------------------------\n\nTITLE: XML Web Content Definition in .NET SDK\nDESCRIPTION: XML content item definition that includes all files from the wwwroot directory to be copied during publishing. This appears as a noteworthy lazy item evaluation cost in the profiler output.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<Content Include=\"wwwroot\\**\" CopyToPublishDirectory=\"PreserveNewest\" Exclude=\"$(DefaultItemExcludes...\"\n```\n\n----------------------------------------\n\nTITLE: Logging MSB3026 Warnings\nDESCRIPTION: This snippet captures the output from the MSBuild process, showing repeated warnings about failed file copy attempts. It indicates retries being made and ultimately the failure of the build due to these warnings.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.PrintCopyTaskRetryWarningAsImmediateMessage_Failed.Windows.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndirectory/\\[1mfile\\[m(1,2,3,4): \\[33;1mwarning\\[m \\[33;1mMSB3026\\[m: MSB3026: Could not copy \"sourcePath\" to \"destinationPath\". Beginning retry 1 in x ms.\ndirectory/\\[1mfile\\[m(1,2,3,4): \\[33;1mwarning\\[m \\[33;1mMSB3026\\[m: MSB3026: Could not copy \"sourcePath\" to \"destinationPath\". Beginning retry 2 in x ms.\ndirectory/\\[1mfile\\[m(1,2,3,4): \\[33;1mwarning\\[m \\[33;1mMSB3026\\[m: MSB3026: Could not copy \"sourcePath\" to \"destinationPath\". Beginning retry 3 in x ms.\n  project \\[31;1mfailed with 3 warning(s)\\[m (0.2s)\n    directory/\\[1mfile\\[m(1,2,3,4): \\[33;1mwarning\\[m \\[33;1mMSB3026\\[m: MSB3026: Could not copy \"sourcePath\" to \"destinationPath\". Beginning retry 1 in x ms.\n    directory/\\[1mfile\\[m(1,2,3,4): \\[33;1mwarning\\[m \\[33;1mMSB3026\\[m: MSB3026: Could not copy \"sourcePath\" to \"destinationPath\". Beginning retry 2 in x ms.\n    directory/\\[1mfile\\[m(1,2,3,4): \\[33;1mwarning\\[m \\[33;1mMSB3026\\[m: MSB3026: Could not copy \"sourcePath\" to \"destinationPath\". Beginning retry 3 in x ms.\nBuild \\[31;1mfailed with 3 warning(s)\\[m in 5.0s\n```\n\n----------------------------------------\n\nTITLE: Creating MSBuild Custom Check Project with PowerShell\nDESCRIPTION: PowerShell command to instantiate a new MSBuild custom check project using the installed template. This creates the basic structure needed for implementing custom checks.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/CustomBuildCheck.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet new msbuildcheck -n MyCustomBuildChecks\n```\n\n----------------------------------------\n\nTITLE: XML JSON Files Content Definition in Web SDK\nDESCRIPTION: XML content item definition that includes all JSON files to be copied during publishing, with exclusions based on default patterns. This appears as a noteworthy lazy item evaluation cost.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<Content Include=\"**\\*.json\" CopyToPublishDirectory=\"PreserveNewest\" Exclude=\"$(DefaultItemExcludes)...\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Final Version for MSBuild Release\nDESCRIPTION: Sets the DotNetFinalVersionKind property to 'release' to remove the prerelease suffix from packages. This should be done on the same line as version specification to ensure merge conflicts when branching.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/release.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<DotNetFinalVersionKind>release</DotNetFinalVersionKind>\n```\n\n----------------------------------------\n\nTITLE: Building MSBuild from Command Line\nDESCRIPTION: Command to build MSBuild from the command line.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md#2025-04-16_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\n.\\build.cmd\n```\n\n----------------------------------------\n\nTITLE: Build Failure Summary\nDESCRIPTION: Provides total build time and final build status indication\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrors.Windows.verified.txt#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nBuild [31;1mfailed with 1 error(s)[m in 5.0s\n```\n\n----------------------------------------\n\nTITLE: MSBuild Assembly Dependency Configuration\nDESCRIPTION: XML configuration for MSBuild dependency resolution, showing how to specify codeBase and assembly identity for the Microsoft.DotNet.MSBuildSdkResolver.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/NETFramework-NGEN.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n    <dependentAssembly>\n      <assemblyIdentity name=\"Microsoft.DotNet.MSBuildSdkResolver\" culture=\"neutral\" publicKeyToken=\"adb9793829ddae60\" />\n      <codeBase version=\"8.0.100.0\" href=\".\\SdkResolvers\\Microsoft.DotNet.MSBuildSdkResolver\\Microsoft.DotNet.MSBuildSdkResolver.dll\" />\n    </dependentAssembly>\n```\n\n----------------------------------------\n\nTITLE: Disabling Property Tracking in MSBuild\nDESCRIPTION: Disables all property tracking features in the build process.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/Property-tracking-capabilities.md#2025-04-16_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\nset MsBuildLogPropertyTracking=0\n```\n\n----------------------------------------\n\nTITLE: Additional Project Build Failure Output\nDESCRIPTION: Secondary terminal output showing another project build failure with distinct error and warning messages\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_2Projects_FailedWithErrorsAndWarnings.Windows.verified.txt#2025-04-16_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nproject2 [31;1mfailed with 2 error(s) and 2 warning(s)[m (0.2s)\n    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning3!\n    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning4!\n    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error3!\n    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error4!\n```\n\n----------------------------------------\n\nTITLE: Defining MSBuild Labels Table in Markdown\nDESCRIPTION: This markdown table defines the labels used by the MSBuild team, including when they are applied and additional notes. It covers labels such as 'triaged', 'needs-attention', 'needs-more-info', 'initial-investigation', 'stale', 'For consideration', and 'help wanted'.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Labels.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Label             | Applied When | Notes |\n|-------------------|--------------|-------|\n| `triaged`    | Team has determined what area/prioritization applies to the issue. | This is the primary label absence of which is queried during a regular bug triage meeting. Automatically added when `needs-more-info` is applied. |\n| `needs-attention` | An issue requires the team look at it during bug triage. | Automatically applied when a stale issue receives a comment. |\n| `needs-more-info` | Team asked for info needed to continue an investigation. | If no response is given within 7 days, the `stale` label is applied. |\n| `initial-investigation` | A member of the team does a \"first pass\" investigation. | `triaged` label is removed and team member unassigns themselves after the initial investigation is complete. |\n| `stale` | An issue marked with `needs-more-info` is inactive for 7 days. | The issue will be closed after 30 days of inactivity while the `stale` label is applied. |\n| `For consideration` | An issue should get higher prioritization when planning the next set of features. | |\n| `help wanted` | Anyone can take ownership over this issue. | If a contributor wants to take the issue on, they should ask that it be assigned to them BEFORE doing development work.  |\n```\n\n----------------------------------------\n\nTITLE: XML Config Files Content Definition in Web SDK\nDESCRIPTION: XML content item definition that includes all config files to be copied during publishing, with exclusions based on default patterns. This appears as a performance-impacting lazy item evaluation.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<Content Include=\"**\\*.config\" CopyToPublishDirectory=\"PreserveNewest\" Exclude=\"$(DefaultItemExclude...\"\n```\n\n----------------------------------------\n\nTITLE: Project Identifier Hash Generation\nDESCRIPTION: Contains unique hexadecimal hash identifiers for .NET project configuration tracking\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Tasks.UnitTests/TaskFactorySource/RoslynCodeTaskFactory_Tests.SourceCodeFromFile.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n1F214E27A13F432B9397F1733BC55929\n```\n\nLANGUAGE: csharp\nCODE:\n```\n9111DC29B0064E6994A68CFE465404D4\n```\n\n----------------------------------------\n\nTITLE: Logging Verbose Search Results in ResolveAssemblyReference Task\nDESCRIPTION: Enables logging of verbose search results in the ResolveAssemblyReference task.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Environment-Variables.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n* `MSBUILDLOGVERBOSERARSEARCHRESULTS=1`\n```\n\n----------------------------------------\n\nTITLE: XML Package Reference in MSBuild Properties\nDESCRIPTION: XML snippet that includes package conflict platform manifests in the build process. This is shown as a time-consuming operation in the Items evaluation pass.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageConflictPlatformManifests Include=\"$(MSBuildThisFileDirectory)Microsoft.NETCore.App.Platform...\"\n```\n\n----------------------------------------\n\nTITLE: NuGet Credential Provider Authentication Error\nDESCRIPTION: Indicates a failure in acquiring credentials during the build process, suggesting manual intervention or interactive mode activation\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDetailedVerbosity_FailedWithErrors.Windows.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nThe plugin credential provider could not acquire credentials.Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive=\"true\" for MSBuild or removing the -NonInteractive switch for `NuGet`\n```\n\n----------------------------------------\n\nTITLE: Resource Localization Comments\nDESCRIPTION: Defines comment templates for different types of resource properties, including string, non-string, and culture-specific resources. Provides documentation guidelines for generated resource classes.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Tasks/system.design/system.design.txt#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nStringPropertyComment=   Looks up a localized string similar to {0}.\n```\n\nLANGUAGE: text\nCODE:\n```\nNonStringPropertyComment=   Looks up a localized resource of type {0}.\n```\n\nLANGUAGE: text\nCODE:\n```\nCulturePropertyComment1=   Overrides the current thread's CurrentUICulture property for all\n```\n\n----------------------------------------\n\nTITLE: XML Common Targets Import in MSBuild\nDESCRIPTION: XML import statement that loads common build targets from a specified path. This is identified as a significant contributor to property evaluation time in the profiler output.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<Import Project=\"$(CommonTargetsPath)\"  />\n```\n\n----------------------------------------\n\nTITLE: Project Test Result Output\nDESCRIPTION: Console log displaying test execution summary with total tests, failures, successes, and duration\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.PrintTestSummaryNormalVerbosity_Succeeded.OSX.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nproject test [32;1msucceeded[m (0.2s)\nTest summary: total: 10, [31;1mfailed: 1[m, succeeded: 7, skipped: 2, duration: 1.0s\nBuild [32;1msucceeded[m in 5.0s\n```\n\n----------------------------------------\n\nTITLE: Files Requiring Updates During MSBuild Major Version Release\nDESCRIPTION: List of source code files that need version number updates during a major MSBuild release. These files contain version-specific constants and telemetry information.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/release.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [BuildEnvironmentHelper.cs](../src/Shared/BuildEnvironmentHelper.cs)\n- [Constants.cs](../src/Shared/Constants.cs)\n- [TelemetryConstants.cs](../src/Framework/Telemetry/TelemetryConstants.cs)\n```\n\n----------------------------------------\n\nTITLE: XML Debug Symbols Output Path Definition\nDESCRIPTION: XML definition that specifies the output path for debug symbols using path transformation expressions. This is shown as a performance-impacting lazy item evaluation.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<_DebugSymbolsOutputPath Include=\"@(_DebugSymbolsIntermediatePath-&gt;'$(OutDir)%(Filename)%(Extensi...\"\n```\n\n----------------------------------------\n\nTITLE: Viewing MSBuild Test Output with ANSI Color Codes\nDESCRIPTION: A console output log from an MSBuild test run showing a single passing test named 'MyTestName1' with execution time. The output includes ANSI terminal color codes (36;1m for cyan bold, 32;1m for green bold) to format the display in terminals.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/NodeStatus_Transition_Tests.NodeWithColoredTargetUpdatesTime.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[1F\n  Namespace.Project [36;1mTargetFramework[m [120G[25D[32;1mpassed[m MyTestName1 (0.0s)\n[2F\n[120G[6D(0.2s)\n```\n\n----------------------------------------\n\nTITLE: XML Debug Symbols Output Conditional\nDESCRIPTION: XML condition that checks for specific output types and debug symbol paths. This is highlighted as a costly items evaluation operation in the profiler output.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\nCondition=\"'$(OutputType)' != 'winmdobj' and '@(_DebugSymbolsIntermediatePath)' == ''\")'\n```\n\n----------------------------------------\n\nTITLE: XML Razor Views Content Definition in Web SDK\nDESCRIPTION: XML content item definition that includes all CSHTML files (Razor views) to be copied during publishing, with exclusions based on default patterns. This is shown as a noteworthy lazy item evaluation cost.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<Content Include=\"**\\*.cshtml\" CopyToPublishDirectory=\"PreserveNewest\" Exclude=\"$(DefaultItemExclude...\"\n```\n\n----------------------------------------\n\nTITLE: MSBuild Build Status Terminal Output\nDESCRIPTION: Console log showing a successful build completion within 5 seconds\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.PrintSummaryWithoutTaskCommandLineEventArgs_Succeeded.Windows.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nBuild [32;1msucceeded[m in 5.0s\n```\n\n----------------------------------------\n\nTITLE: Displaying Authentication Error in MSBuild\nDESCRIPTION: This snippet communicates that the plugin credential provider failed to acquire credentials, indicating that manual action is required. It suggests possible command options for interactive credential acquisition.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryNormalVerbosity_FailedWithErrors.Windows.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThe plugin credential provider could not acquire credentials.Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive=\"true\" for MSBuild or removing the -NonInteractive switch for `NuGet`\n```\n\n----------------------------------------\n\nTITLE: XML NuGet Extension Import in MSBuild\nDESCRIPTION: XML import statement that loads Microsoft extension configuration targets from the NuGet fallback folder. This is identified as a property evaluation cost in the profiler output.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<Import Project=\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration....\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Target Framework Information in MSBuild Console Output\nDESCRIPTION: This snippet shows a console output line from MSBuild that displays target framework information with ANSI color formatting. The text 'TargetFramework' appears in cyan bold color (36;1m), followed by a cursor positioning code ([120G[7D) and a timestamp indication (0.0s).\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.NamespaceIsTruncatedNext.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  Project [36;1mTargetFramework[m [120G[7D (0.0s)\n```\n\n----------------------------------------\n\nTITLE: Target Framework Configuration for MSBuild\nDESCRIPTION: Specifies target framework configurations for MSBuild, highlighting the transition from netstandard2.0 to net9.0 and net472 runtime targets\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Framework/README.md#2025-04-16_snippet_1\n\nLANGUAGE: dotnet\nCODE:\n```\ntarget: netstandard2.0\nruntimeTargets: net9.0, net472\n```\n\n----------------------------------------\n\nTITLE: Referencing Project with Custom Target - XML\nDESCRIPTION: This XML snippet defines another .NET Core project, Referencing.csproj, which references the previous project and includes a custom target GetUnusualThing. This target utilizes MSBuild to invoke the UnusualThing target from the referenced project, capturing its output into a Content item. This dependency setup is critical for correct build order and output collection.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/static-graph.md#2025-04-16_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<Project Sdk=\\\"Microsoft.NET.Sdk\\\">\n\n  <PropertyGroup>\n    <TargetFramework>netcoreapp3.1</TargetFramework>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\\\"..\\Referenced\\Referenced.csproj\\\" />\n  </ItemGroup>\n\n  <Target Name=\\\"GetUnusualThing\\\" BeforeTargets=\\\"BeforeBuild\\\">\n    <MSBuild Projects=\\\"..\\Referenced\\Referenced.csproj\\\"\n             Targets=\\\"UnusualThing\\\">\n      <Output TaskParameter=\\\"TargetOutputs\\\"\n              ItemName=\\\"Content\\\" />\n    </MSBuild>\n  </Target>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Overall Build Failure Summary\nDESCRIPTION: Final terminal output summarizing total build failures across multiple projects\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_2Projects_FailedWithErrorsAndWarnings.Windows.verified.txt#2025-04-16_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nBuild [31;1mfailed with 4 error(s) and 4 warning(s)[m in 5.0s\n```\n\n----------------------------------------\n\nTITLE: MSBuild Project Build Failure Output\nDESCRIPTION: Terminal output representing build process with multiple error and warning messages across different projects\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_2Projects_FailedWithErrorsAndWarnings.Windows.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nproject [31;1mfailed with 2 error(s) and 2 warning(s)[m (0.2s)\n    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning1!\n    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning2!\n    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error1!\n    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error2!\n```\n\n----------------------------------------\n\nTITLE: XML Web Content Exclusion for wwwroot\nDESCRIPTION: XML item definition that removes wwwroot files from the compile items collection. This appears as a performance-impacting lazy item evaluation in the profiler output.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<Compile Remove=\"wwwroot\\**\"  />\n```\n\n----------------------------------------\n\nTITLE: MSBuild Error Output Parsing\nDESCRIPTION: Displays build failure details including error count, file location, and specific error code\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_FailedWithErrors.Windows.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nproject [31;1mfailed with 1 error(s)[m (0.2s)\n    directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!\n```\n\n----------------------------------------\n\nTITLE: XML Conditional Link Base Processing in .NET SDK\nDESCRIPTION: XML condition that processes items with a defined LinkBase property. This is identified as a performance-impacting lazy item evaluation in the profiler output.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\nCondition=\"'%(LinkBase)' != ''\")'\n```\n\n----------------------------------------\n\nTITLE: Package Reference Output Control Examples\nDESCRIPTION: Three examples showing different ways to control package reference output copying behavior.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Controlling-Dependencies-Behavior.md#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"newtonsoft.json\" Version=\"13.0.1\">\n    <!-- This allows compiling against the dependency, but prevents it's copying to output folder or flow to downstream dependant projects. -->\n    <IncludeAssets>compile</IncludeAssets>\n  </PackageReference>\n</ItemGroup>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"newtonsoft.json\" Version=\"13.0.1\">\n    <!-- The dependency is copied to output folder in current referencing project, \n           but it's not copied to output folder of projects referencing current project. -->\n    <PrivateAssets>all</PrivateAssets>\n  </PackageReference>\n</ItemGroup>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <ProjectReference Include=\"../somepath/MyProj.csproj\">\n    <!-- This prevents PackageReferences from MyProj.csproj to be copied to output of current project. -->\n    <ExcludeAssets>all</ExcludeAssets>\n  </ProjectReference>\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Dumping Scheduler State in MSBuild\nDESCRIPTION: Dumps the scheduler state to a specified directory. Requires both MSBUILDDEBUGSCHEDULER and MSBUILDDEBUGPATH to be set.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Environment-Variables.md#2025-04-16_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n* `MSBUILDDEBUGSCHEDULER=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n```\n\n----------------------------------------\n\nTITLE: MSBuild Exception Handling for Globbing Operations\nDESCRIPTION: Reference to the exception handling code in MSBuild that determines when IO-related exceptions cause globbing to return the original filespec. The linked code shows which specific exceptions are caught during file system traversal.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/WhenGlobbingReturnsOriginalFilespec.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/dotnet/msbuild/blob/c1d949558b4808ca9381d09af384b66b31cde2b2/src/Shared/ExceptionHandling.cs#L125-L140\n```\n\n----------------------------------------\n\nTITLE: Displaying Build Completion Status in Console\nDESCRIPTION: Provides a colored console output indicating a successful build with execution time\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.PrintImmediateMessage_Skipped.OSX.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nBuild [32;1msucceeded[m in 5.0s\n```\n\n----------------------------------------\n\nTITLE: XML Wildcard Import Condition Check\nDESCRIPTION: XML condition that checks if wildcard imports before Microsoft common properties are enabled. This operation appears in the property evaluation performance metrics.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\nCondition=\"'$(ImportByWildcardBeforeMicrosoftCommonProps)' == ''\")'\n```\n\n----------------------------------------\n\nTITLE: Terminal Build Output for .NET Projects\nDESCRIPTION: Command-line log showing build progress for multiple project files with color-coded output and build duration\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.DisplayNodesOverwritesWithNewTargetFramework.Windows.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n  project [36;1mtfName[m [120G[12DBuild (0.2s)\n  project [36;1mtf2[m [120G[12DBuild (0.2s)\n```\n\n----------------------------------------\n\nTITLE: Viewing Test Log File Contents\nDESCRIPTION: Command to display the last line of a test log file containing the test execution command\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Mac-Debugging.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntail -n 1 ./artifacts/log/Debug/Microsoft.Build.Engine.UnitTests_netcoreapp2.1_x64.log\n```\n\n----------------------------------------\n\nTITLE: Assembly Reference Configuration\nDESCRIPTION: Example showing assembly reference configuration with output copying control.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Controlling-Dependencies-Behavior.md#2025-04-16_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <Reference Include=\"mydll\">\n    <HintPath>..\\somepath\\mydll.dll</HintPath>\n    <!-- This indicates that the reference should not be copied to output folder. -->\n    <Private>false</Private>\n  </Reference>\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Enabling Additional Property Functions in MSBuild\nDESCRIPTION: Enables additional property functions in MSBuild. Binary logs are generally more useful for this level of detail.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Environment-Variables.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`\n```\n\n----------------------------------------\n\nTITLE: Example EditorConfig Configuration for Import-Level BuildCheck Settings\nDESCRIPTION: An example of how .editorconfig might be configured to apply BuildCheck rules only to a specific imported project file scope. This is shown as an out-of-scope feature for the initial implementation.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# I expect this to apply only to a scope of the imported file. Or possibly I expect this to apply to all projects importing this project.\n[ContosoCommonImport.proj]\nbuild_check.BC0101.Severity=warning\n```\n\n----------------------------------------\n\nTITLE: Saving Generated Project File for Solution in MSBuild\nDESCRIPTION: Saves the generated .proj file for the .sln used to build the solution. Files are emitted into a binary log by default.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Environment-Variables.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* `MSBUILDEMITSOLUTION=1`\n```\n\n----------------------------------------\n\nTITLE: Referencing Logical Resource Name in Microsoft.Build Assembly\nDESCRIPTION: This XML snippet shows how the logical resource name is referenced in the Microsoft.Build assembly's project file. It demonstrates the naming convention for localized resources.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Localization.md#2025-04-16_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<LogicalName>Microsoft.Build.Strings.resources</LogicalName>\n```\n\n----------------------------------------\n\nTITLE: XML None Include Pattern for Project Files\nDESCRIPTION: XML item definition that includes all files not specifically excluded by default patterns as None items. This is shown as a performance-impacting lazy item evaluation.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<None Include=\"**/*\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\"  />\n```\n\n----------------------------------------\n\nTITLE: Dumping Generated Code for Task in MSBuild\nDESCRIPTION: Dumps the generated code for a task to a <GUID>.txt file in the TEMP directory.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Environment-Variables.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n* `MSBUILDLOGCODETASKFACTORYOUTPUT=1`\n```\n\n----------------------------------------\n\nTITLE: Removing MSBuild Assemblies from GAC using gacutil commands\nDESCRIPTION: A set of gacutil commands to uninstall various MSBuild-related assemblies from the Global Assembly Cache. These commands should be run in an administrator command prompt to resolve issues with MSBuild assemblies.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/UnGAC.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ngacutil /u \"MSBuild, Version=15.1.0.0\"\ngacutil /u \"Microsoft.Build.Conversion.Core, Version=15.1.0.0\"\ngacutil /u \"Microsoft.Build, Version=15.1.0.0\"\ngacutil /u \"Microsoft.Build.Engine, Version=15.1.0.0\"\ngacutil /u \"Microsoft.Build.Tasks.Core, Version=15.1.0.0\"\ngacutil /u \"Microsoft.Build.Utilities.Core, Version=15.1.0.0\"\ngacutil /u \"Microsoft.Build.Framework, Version=15.1.0.0\"\ngacutil /u \"Microsoft.NET.StringTools, Version=1.0.0.0\"\ngacutil /u \"BuildXL.Processes, Version=1.0.0.0\"\ngacutil /u \"BuildXL.Utilities.Core, Version=1.0.0.0\"\ngacutil /u \"BuildXL.Native, Version=1.0.0.0\"\ngacutil /u \"Microsoft.VisualStudio.SolutionPersistence, Version=1.0.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Executing BuildCheck in Replay Mode with Command Line Interface\nDESCRIPTION: Command line syntax for applying BuildChecks when replaying a binary log file using the -check switch with MSBuild.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck-Architecture.md#2025-04-16_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\n> msbuild msbuild.binlog -check\n```\n\n----------------------------------------\n\nTITLE: Executing NGEN Queue Processing in Windows\nDESCRIPTION: Command to force generation of native images from the NGEN queue in an elevated terminal window.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/NETFramework-NGEN.md#2025-04-16_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nC:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\ngen eqi\n```\n\n----------------------------------------\n\nTITLE: XML Common Properties Import in SDK\nDESCRIPTION: XML import statement that loads common MSBuild properties based on the MSBuild tools version. This appears as a significant property evaluation cost in the profiler output.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\"  />\n```\n\n----------------------------------------\n\nTITLE: Legacy SDK Resolution Error Output\nDESCRIPTION: Example of the previous error output format when SDK resolution fails, showing both warning MSB4242 and error MSB4236.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/sdk-resolvers-algorithm.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nwarning MSB4242: The SDK resolver \"Microsoft.DotNet.MSBuildWorkloadSdkResolver\" failed to run. 's' is an invalid start of a property name. Expected a '\"'. LineNumber: 14 | BytePositionInLine: 8.\nerror MSB4236: The SDK 'Microsoft.NET.SDK.WorkloadAutoImportPropsLocator' specified could not be found. [C:\\foo\\bar.csproj]\n```\n\n----------------------------------------\n\nTITLE: MSBuild Assembly Qualification Configuration\nDESCRIPTION: XML configuration showing how to qualify a partial assembly name with its full name, enabling simple name references in code while maintaining version control.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/NETFramework-NGEN.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<qualifyAssembly partialName=\"Microsoft.DotNet.MSBuildSdkResolver\" fullName=\"Microsoft.DotNet.MSBuildSdkResolver, Version=8.0.100.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" />\n```\n\n----------------------------------------\n\nTITLE: XML Resource Files Definition in .NET SDK\nDESCRIPTION: XML item definition that includes all RESX resource files as embedded resources, with exclusions based on default patterns. This is identified as a lazy item evaluation cost in the profiler output.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<EmbeddedResource Include=\"**/*.resx\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFold...\"\n```\n\n----------------------------------------\n\nTITLE: Running BuildCheck in Binlog Replay Mode (Bash)\nDESCRIPTION: Command to run BuildCheck during binlog replay mode. This allows users to explicitly opt-in to run BuildCheck on a previously generated binlog file.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> dotnet build msbuild.binlog /check\n```\n\n----------------------------------------\n\nTITLE: XML NuGet Package Reference Import in Project\nDESCRIPTION: XML import statement that loads .NET Standard library targets from a NuGet package. This is identified as a notable property evaluation cost in the profiler output.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<Import Project=\"$(NuGetPackageRoot)netstandard.library\\2.0.0\\build\\netstandard2.0\\NETStandard.Libra...\"\n```\n\n----------------------------------------\n\nTITLE: Cache Result Transfer Exception Example\nDESCRIPTION: Demonstrates a special case scenario where target results from exempted ProjectReferences are handled in the cache system\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/single-project-isolated-builds.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nExcept in the following scenario when a `ProjectReference` is exempted from isolation constraints: a dependency project A outputs a cache file F containing a `BuildResult` with `TargetResult`s T<sub>cached</sub> for targets t<sub>1</sub>, t<sub>2</sub>, ..., t<sub>m</sub> and a dependent project B uses F as an input cache file but builds and obtains the `TargetResult`s T<sub>new</sub> for targets t<sub>m + 1</sub>, t<sub>m + 2</sub>, ..., t<sub>n</sub> such that 0 < m < n. In this case, T<sub>new</sub> will be placed into the `ResultsCache` containing T<sub>cached</sub> to enforce no overlap between the override and current caches in the `ConfigCacheWithOverride`.\n```\n\n----------------------------------------\n\nTITLE: XML Framework Path Override in MSBuild Targets\nDESCRIPTION: XML property definition that sets the framework path override using MSBuild utility methods when the property isn't already defined. This appears as a performance-intensive property in the evaluation profile.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<FrameworkPathOverride Condition=\"'$(FrameworkPathOverride)' == ''\" >$([Microsoft.Build.Utilities.To...\"\n```\n\n----------------------------------------\n\nTITLE: Consuming CustomConfigurationData in C#\nDESCRIPTION: This code snippet demonstrates how to consume the CustomConfigurationData within the Initialize method of a BuildCheck check. It accesses the configuration data from the ConfigurationContext passed during initialization.  The code iterates through the custom configuration data, prints the RuleId, and then prints the key-value pairs if configuration data is available, or indicates if the data is null.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build/BuildCheck/Infrastructure/EditorConfig/README.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic override void Initialize(ConfigurationContext configurationContext)\n{\n    Console.WriteLine(configurationContext.CustomConfigurationData.Count);\n    for (int i = 0; i < configurationContext.CustomConfigurationData.Count; i++)\n    {\n        var customConfigPerRule = configurationContext.CustomConfigurationData[i]; \n        Console.WriteLine(customConfigPerRule.RuleId); \n\n        if (customConfigPerRule.ConfigurationData is not null) // null when the configuration was not provided from editorconfig\n        {\n            foreach (var kv in customConfigPerRule.ConfigurationData)\n            {\n                Console.WriteLine($\"{kv.Key}------{kv.Value}\");\n            }\n        }\n        else\n        {\n            Console.WriteLine($\"The data is null for index: {i}\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: XML Import Statement in MSBuild Project File\nDESCRIPTION: Example of an XML import statement from an MSBuild project file that loads the SDK properties for a .NET web application. This is one of the evaluation steps profiled in the output.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/evaluation-profiling.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk.Web\" />\n```\n\n----------------------------------------\n\nTITLE: Parsing EditorConfig file in C#\nDESCRIPTION: This snippet demonstrates how to use the EditorConfigParser to parse an editorconfig file.  It initializes an instance of the parser and calls the Parse method with the file path as input. The method returns a dictionary of string key-value pairs representing the configurations found in the .editorconfig files.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build/BuildCheck/Infrastructure/EditorConfig/README.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar editorConfigParser = new EditorConfigParser();\neditorConfigParser.Parse(\"path/to/the/file\")\n```\n\n----------------------------------------\n\nTITLE: Package Sourcing CLI Tool Usage\nDESCRIPTION: Command line examples showing how to install and use the package sourcing tool to convert package references to source references\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/interactive-package-references.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n> dotnet tool install Microsoft.Build.PackageSourcing\n> dotnet package-to-sources --project MySolution.sln --packages: FooBar.Baz, Newtonsoft.Json\n\nFooBar.Baz:\nSources located: github.com/FooBar/Baz@0abcb66\nLocal checkout: C:\\Users\\jankrivanek\\.nuget\\sources\\FooBar\\6.5.4\\\nBuild instructions located: FooBar-package-sourcing.proj\nBuild reconstructed: OK\nReference replaced: OK\n\nNewtonsoft.Json:\n...\n\nSourced packages are ready to use.\n\n>\n```\n\n----------------------------------------\n\nTITLE: Building MSBuild without Bootstrap\nDESCRIPTION: Command to build MSBuild without creating a bootstrap directory, which typically contains additional dependencies.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md#2025-04-16_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\n.\\build.cmd /p:CreateBootstrap=false\n```\n\n----------------------------------------\n\nTITLE: Package Source Resolution CLI Command\nDESCRIPTION: Simple dotnet restore command example for resolving package sources\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/interactive-package-references.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet restore MyProj.csproj\n```\n\n----------------------------------------\n\nTITLE: Cloning MSBuild Repository\nDESCRIPTION: Command to clone the MSBuild repository from GitHub.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/dotnet/msbuild\n```\n\n----------------------------------------\n\nTITLE: Using Repository Binaries for Project Builds\nDESCRIPTION: Command syntax for using MSBuild repository binaries to build projects with the dotnet CLI.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md#2025-04-16_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\nartifacts/bin/bootstrap/core/dotnet.exe <Command> <Project File>\n```\n\n----------------------------------------\n\nTITLE: Running Tests on Unix Systems\nDESCRIPTION: Shell command to execute MSBuild tests on Unix-based systems.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh --test\n```\n\n----------------------------------------\n\nTITLE: Building MSBuild on Windows\nDESCRIPTION: Command to build MSBuild using the dotnet engine on Windows systems.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md#2025-04-16_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nbuild.cmd -msbuildEngine dotnet\n```\n\n----------------------------------------\n\nTITLE: Creating Git Release Tag for MSBuild\nDESCRIPTION: Git commands to create and push a version tag for the MSBuild release. This is done before creating the GitHub release.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/release-checklist.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <commit noted above>\ngit tag v{{THIS_RELEASE_VERSION}}.3\ngit push upstream v{{THIS_RELEASE_VERSION}}.3\n```\n\n----------------------------------------\n\nTITLE: Implementing Secure Credential Vault Reader Task\nDESCRIPTION: C# task implementation for reading credentials from a vault securely, with proper secret attribute marking for output values.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/security-metadata.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nReadCreadentialFromValut : Task\n{\n  /// <summary>\n  /// Key to be fetched\n  /// </summary>\n  public string Key { get; set; }\n\n  /// <summary>\n  /// Fetched value\n  /// </summary>\n  [Output]\n  [Secret]\n  public string Value { get; set; }\n\n  // ... Execute() ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running MSBuild Build Script on Windows\nDESCRIPTION: Command to execute the build script from the root of the MSBuild repository. This builds the code and restores packages needed to open the projects in Visual Studio.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\n.\\build.cmd\n```\n\n----------------------------------------\n\nTITLE: Finding Test Log Files in MacOS\nDESCRIPTION: Command to locate specific test log files in the project directory using the find command\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Mac-Debugging.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfind . -name Microsoft.Build.Engine.UnitTests_netcoreapp2.1_x64.log\n```\n\n----------------------------------------\n\nTITLE: Updating AllWaves Array in C#\nDESCRIPTION: Code snippet demonstrating how to update the AllWaves array after adding a new Change Wave version. This array maintains the list of all active Change Waves in the system.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ChangeWaves-Dev.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic static readonly Version[] AllWaves = { Wave17_0, Wave17_2, Wave17_4 };\n```\n\n----------------------------------------\n\nTITLE: Enabling Localized MSBuild Builds\nDESCRIPTION: Command line argument to enable localized builds when building MSBuild. This parameter can be passed to the build script to generate localized versions of MSBuild.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\n/p:LocalizedBuild=true\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Class\nDESCRIPTION: Command to execute all tests within a specific test class, redirecting standard output to /dev/null\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Mac-Debugging.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"/Users/forgind/Desktop/code/msbuild/.dotnet/dotnet\" exec --depsfile \"/Users/forgind/Desktop/code/msbuild/artifacts/bin/Microsoft.Build.Engine.UnitTests/Debug/netcoreapp2.1/Microsoft.Build.Engine.UnitTests.deps.json\" --runtimeconfig \"/Users/forgind/Desktop/code/msbuild/artifacts/bin/Microsoft.Build.Engine.UnitTests/Debug/netcoreapp2.1/Microsoft.Build.Engine.UnitTests.runtimeconfig.json\"  \"/Users/forgind/.nuget/packages/xunit.runner.console/2.4.1/tools/netcoreapp2.0/xunit.console.dll\" \"/Users/forgind/Desktop/code/msbuild/artifacts/bin/Microsoft.Build.Engine.UnitTests/Debug/netcoreapp2.1/Microsoft.Build.Engine.UnitTests.dll\" -noautoreporters -xml \"/Users/forgind/Desktop/code/msbuild/artifacts/TestResults/Debug/Microsoft.Build.Engine.UnitTests_netcoreapp2.1_x64.xml\" -html \"/Users/forgind/Desktop/code/msbuild/artifacts/TestResults/Debug/Microsoft.Build.Engine.UnitTests_netcoreapp2.1_x64.html\" -notrait category=nonosxtests -notrait category=netcore-osx-failing -notrait category=nonnetcoreapptests -notrait category=failing -class Microsoft.Build.UnitTests.BackEnd.TaskBuilder_Tests > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Building MSBuild with Command Prompt on Windows\nDESCRIPTION: Command to clone the MSBuild repository using Git. This is part of the setup process for building MSBuild on Windows with Visual Studio 2022.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\ngit clone https://github.com/dotnet/msbuild\n```\n\n----------------------------------------\n\nTITLE: Launching Debugger on Build Start in MSBuild\nDESCRIPTION: Launches debugger on build start. Works on Windows only. Setting value to 2 allows manual attachment of debugger to a process ID, which works on both Windows and non-Windows systems.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Environment-Variables.md#2025-04-16_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n* `MSBUILDDEBUGONSTART=1`\n```\n\n----------------------------------------\n\nTITLE: Running Single Test Method with Build\nDESCRIPTION: Command to build the project and run a specific test method, including full test execution parameters\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Mac-Debugging.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh && \"/Users/forgind/Desktop/code/msbuild/.dotnet/dotnet\" exec --depsfile \"/Users/forgind/Desktop/code/msbuild/artifacts/bin/Microsoft.Build.Engine.UnitTests/Debug/netcoreapp2.1/Microsoft.Build.Engine.UnitTests.deps.json\" --runtimeconfig \"/Users/forgind/Desktop/code/msbuild/artifacts/bin/Microsoft.Build.Engine.UnitTests/Debug/netcoreapp2.1/Microsoft.Build.Engine.UnitTests.runtimeconfig.json\"  \"/Users/forgind/.nuget/packages/xunit.runner.console/2.4.1/tools/netcoreapp2.0/xunit.console.dll\" \"/Users/forgind/Desktop/code/msbuild/artifacts/bin/Microsoft.Build.Engine.UnitTests/Debug/netcoreapp2.1/Microsoft.Build.Engine.UnitTests.dll\" -noautoreporters -xml \"/Users/forgind/Desktop/code/msbuild/artifacts/TestResults/Debug/Microsoft.Build.Engine.UnitTests_netcoreapp2.1_x64.xml\" -html \"/Users/forgind/Desktop/code/msbuild/artifacts/TestResults/Debug/Microsoft.Build.Engine.UnitTests_netcoreapp2.1_x64.html\" -notrait category=nonosxtests -notrait category=netcore-osx-failing -notrait category=nonnetcoreapptests -notrait category=failing -method Microsoft.Build.UnitTests.BackEnd.TaskBuilder_Tests.NullMetadataOnLegacyOutputItems\n```\n\n----------------------------------------\n\nTITLE: Using BinaryLogger with Older MSBuild Versions\nDESCRIPTION: Command to use the BinaryLogger with older MSBuild versions by explicitly specifying the logger assembly path.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> msbuild.exe /logger:BinaryLogger,\"path\\to\\StructuredLogger.dll\";msbuild.binlog\n```\n\n----------------------------------------\n\nTITLE: Service Layer Class Implementation\nDESCRIPTION: Example showing how transitive reference restrictions affect class implementation in the Service Layer.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Controlling-Dependencies-Behavior.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Service;\n\npublic class PersonsAccessor\n{\n    private Repository.Persona _persona;\n    // This is allowed unless DisableTransitiveProjectReferences=true is passed into build.\n    // private Domain.PersonTable _tbl;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ResourceManager for Microsoft.Build Assembly\nDESCRIPTION: This C# code snippet illustrates how the ResourceManager is initialized for the Microsoft.Build assembly, using the logical resource name without the '.resources' suffix.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Localization.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nResourceManager = new ResourceManager(\"Microsoft.Build.Strings\", typeof(AssemblyResources).Assembly);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom MSBuild Task in C#\nDESCRIPTION: Implements a Microsoft Build Task that logs a greeting message and returns task completion status. Inherits from the Task base class and overrides the Execute method to perform custom logic.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Tasks.UnitTests/TaskFactorySource/RoslynCodeTaskFactory_Tests.CSharpClass.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace InlineTask\n{\n    using Microsoft.Build.Utilities;\n\n    public class HelloWorld : Task\n    {\n        public override bool Execute()\n        {\n            Log.LogMessage(\"Hello, world!\");\n            return !Log.HasLoggedErrors;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable Read Tracking in MSBuild\nDESCRIPTION: Enables tracking of environment variable reads during build execution.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/Property-tracking-capabilities.md#2025-04-16_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\nset MsBuildLogPropertyTracking=4\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Task Properties in VB.NET\nDESCRIPTION: This code snippet defines a VB.NET class 'MyInlineTask' that extends the base Task class from the Microsoft.Build.Utilities namespace. It includes properties for multiple parameters that can be configured when the task is invoked. The properties support getting and setting values for different types including strings and ITaskItem, effectively allowing users to pass various types of input when the task is executed.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Tasks.UnitTests/TaskFactorySource/RoslynCodeTaskFactory_Tests.VisualBasicFragmentWithProperties.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: VB.NET\nCODE:\n```\n'------------------------------------------------------------------------------\n' <auto-generated>\n'     This code was generated by a tool.\n'\n'     Changes to this file may cause incorrect behavior and will be lost if\n'     the code is regenerated.\n' </auto-generated>\n'------------------------------------------------------------------------------\n\nOption Strict Off\nOption Explicit On\n\nImports Microsoft.Build.Framework\nImports Microsoft.Build.Utilities\nImports System\nImports System.Collections\nImports System.Collections.Generic\nImports System.IO\nImports System.Linq\nImports System.Text\n\nNamespace InlineCode\n    \n    Public Class MyInlineTask\n        Inherits Microsoft.Build.Utilities.Task\n        \n        Private _Parameter1 As String\n        \n        Public Overridable Property Parameter1() As String\n            Get\n                Return _Parameter1\n            End Get\n            Set\n                _Parameter1 = value\n            End Set\n        End Property\n        \n        Private _Parameter2 As String\n        \n        Public Overridable Property Parameter2() As String\n            Get\n                Return _Parameter2\n            End Get\n            Set\n                _Parameter2 = value\n            End Set\n        End Property\n        \n        Private _Parameter3 As String\n        \n        Public Overridable Property Parameter3() As String\n            Get\n                Return _Parameter3\n            End Get\n            Set\n                _Parameter3 = value\n            End Set\n        End Property\n        \n        Private _Parameter4 As Microsoft.Build.Framework.ITaskItem\n        \n        Public Overridable Property Parameter4() As Microsoft.Build.Framework.ITaskItem\n            Get\n                Return _Parameter4\n            End Get\n            Set\n                _Parameter4 = value\n            End Set\n        End Property\n        \n        Private _Parameter5() As Microsoft.Build.Framework.ITaskItem\n        \n        Public Overridable Property Parameter5() As Microsoft.Build.Framework.ITaskItem()\n            Get\n                Return _Parameter5\n            End Get\n            Set\n                _Parameter5 = value\n            End Set\n        End Property\n        \n        Private _Success As Boolean = true\n        \n        Public Overridable Property Success() As Boolean\n            Get\n                Return _Success\n            End Get\n            Set\n                _Success = value\n            End Set\n        End Property\n        \n        Public Overrides Function Execute() As Boolean\nDim x = 0\n            Return Success\n        End Function\n    End Class\nEnd Namespace\n```\n\n----------------------------------------\n\nTITLE: MSBuild BuildProjectFile Method\nDESCRIPTION: Shows the interface method used to create project dependencies programmatically within MSBuild tasks.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/specs/threading.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nIBuildEngine.BuildProjectFile\n```\n\n----------------------------------------\n\nTITLE: Setting Property Reassignment Tracking in MSBuild\nDESCRIPTION: Enables tracking of property value changes during build execution.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/documentation/Property-tracking-capabilities.md#2025-04-16_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nset MsBuildLogPropertyTracking=1\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Target Framework in MSBuild Console Output\nDESCRIPTION: A formatted console output line from MSBuild showing a project's namespace and target framework. The output includes ANSI color/formatting codes (indicated by escape sequences) for highlighting the 'TargetFramework' text in bold.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.TargetIsTruncatedFirst.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  Namespace.Project [36;1mTargetFramework[m [120G[7D (0.0s)\n```\n\n----------------------------------------\n\nTITLE: Defining Inline MSBuild Task in VB.NET\nDESCRIPTION: This code snippet defines a custom MSBuild task class named 'MyInlineTask' that inherits from the base class 'Task'. It includes a boolean property 'Success' that indicates if the task execution was successful. The 'Execute' method, which overrides the base class method, currently returns the value of the 'Success' property.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Tasks.UnitTests/TaskFactorySource/RoslynCodeTaskFactory_Tests.VisualBasicFragment.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: VB.NET\nCODE:\n```\n'------------------------------------------------------------------------------\n' <auto-generated>\n'     This code was generated by a tool.\n'\n'     Changes to this file may cause incorrect behavior and will be lost if\n'     the code is regenerated.\n' </auto-generated>\n'------------------------------------------------------------------------------\n\nOption Strict Off\nOption Explicit On\n\nImports Microsoft.Build.Framework\nImports Microsoft.Build.Utilities\nImports System\nImports System.Collections\nImports System.Collections.Generic\nImports System.IO\nImports System.Linq\nImports System.Text\n\nNamespace InlineCode\n    \n    Public Class MyInlineTask\n        Inherits Microsoft.Build.Utilities.Task\n        \n        Private _Success As Boolean = true\n        \n        Public Overridable Property Success() As Boolean\n            Get\n                Return _Success\n            End Get\n            Set\n                _Success = value\n            End Set\n        End Property\n        \n        Public Overrides Function Execute() As Boolean\nDim x = 0\n            Return Success\n        End Function\n    End Class\nEnd Namespace\n```\n\n----------------------------------------\n\nTITLE: MSBuild Console Output Showing Target Framework Information\nDESCRIPTION: A console output from MSBuild showing a project namespace with highlighted target framework information and execution time. The output includes ANSI color formatting codes for terminal display.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/NodeStatus_SizeChange_Tests.EverythingFits.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n  Namespace.Project [36;1mTargetFramework[m [120G[13DTarget (0.0s)\n```\n\n----------------------------------------\n\nTITLE: Error Message Single Line\nDESCRIPTION: Standard MSBuild error message with file location and error code\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryQuietVerbosity_FailedWithErrors.Windows.verified.txt#2025-04-16_snippet_2\n\nLANGUAGE: msbuild\nCODE:\n```\ndirectory/file(1,2,3,4): error AA0000: Error!\n```\n\n----------------------------------------\n\nTITLE: Build Error and Warning Summary\nDESCRIPTION: Detailed build process output showing project build failure with specific error and warning messages\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryDetailedVerbosity_FailedWithErrors.Windows.verified.txt#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nproject failed with 1 error(s) and 2 warning(s) (0.2s)\n    directory/file(1,2,3,4): warning AA0000: Warning!\n    directory/file(1,2,3,4): warning AA0000: \n      A\n      Multi\n      Line\n      Warning!\n    directory/file(1,2,3,4): error AA0000: Error!\nBuild failed with 1 error(s) and 2 warning(s) in 5.0s\n```\n\n----------------------------------------\n\nTITLE: Warning Message Single Line\nDESCRIPTION: Standard MSBuild warning message with file location and warning code\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryQuietVerbosity_FailedWithErrors.Windows.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: msbuild\nCODE:\n```\ndirectory/file(1,2,3,4): warning AA0000: Warning!\n```\n\n----------------------------------------\n\nTITLE: Handling Credential Acquisition Errors in MSBuild\nDESCRIPTION: This snippet describes the error encountered while acquiring credentials using the MSBuild plugin's credential provider. It recommends using interactive command options to resolve authentication issues.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryMinimalVerbosity_FailedWithErrors.Windows.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThe plugin credential provider could not acquire credentials.Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive=\"true\" for MSBuild or removing the -NonInteractive switch for `NuGet`\n```\n\n----------------------------------------\n\nTITLE: Warning Message Multi-Line\nDESCRIPTION: MSBuild warning message spanning multiple lines with file location and warning code\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryQuietVerbosity_FailedWithErrors.Windows.verified.txt#2025-04-16_snippet_1\n\nLANGUAGE: msbuild\nCODE:\n```\ndirectory/file(1,2,3,4): warning AA0000: \n  A\n  Multi\n  Line\n  Warning!\n```\n\n----------------------------------------\n\nTITLE: Installing MSBuild Custom Check Template using dotnet CLI\nDESCRIPTION: This snippet demonstrates how to install the MSBuild Custom Check Template using the dotnet CLI. It assumes that the .NET SDK is already installed on your machine. The command installs a template that facilitates the creation of MSBuild check libraries.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/template_feed/content/Microsoft.CheckTemplate/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new install msbuildcheck\n```\n\n----------------------------------------\n\nTITLE: Warning and Error Messages in MSBuild Build Process\nDESCRIPTION: This snippet provides information about warnings and errors during the build process in MSBuild, including a multi-line warning and a general error with error codes.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummaryMinimalVerbosity_FailedWithErrors.Windows.verified.txt#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nproject failed with 1 error(s) and 2 warning(s)\n\tdirectory/file(1,2,3,4): warning AA0000: Warning!\n\tdirectory/file(1,2,3,4): warning AA0000: \n\t  A\n\t  Multi\n\t  Line\n\t  Warning!\n\tdirectory/file(1,2,3,4): error AA0000: Error!\n```\n\n----------------------------------------\n\nTITLE: Creating New MSBuild Custom Check Project\nDESCRIPTION: Command to generate a new MSBuild custom check project with a specified project name. This creates the initial project structure for developing custom build checks.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/BuildCheck.UnitTests/TestAssets/CustomCheck/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new msbuildcheck -n <ProjectName>\n```\n\n----------------------------------------\n\nTITLE: Console Build Status Output\nDESCRIPTION: Displays build success status with color-coded terminal output and timing information\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/Snapshots/TerminalLogger_Tests.PrintsBuildSummary_Succeeded.Linux.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nBuild [32;1msucceeded[m in 5.0s\n```\n\n----------------------------------------\n\nTITLE: Generating Strongly-Typed Resource Classes in MSBuild\nDESCRIPTION: Defines documentation and configuration comments for automatically generated resource classes using MSBuild's GenerateResource task. Provides guidelines for resource file management and localization.\nSOURCE: https://github.com/dotnet/msbuild/blob/main/src/Tasks/system.design/system.design.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nClassDocComment=   A strongly-typed resource class, for looking up localized strings, etc.\n```\n\nLANGUAGE: text\nCODE:\n```\nClassComments1=   This class was generated by MSBuild using the GenerateResource task.\n```\n\nLANGUAGE: text\nCODE:\n```\nClassComments3=   To add or remove a member, edit your .resx file then rerun MSBuild.\n```"
  }
]