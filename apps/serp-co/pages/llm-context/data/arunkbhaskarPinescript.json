[
  {
    "owner": "arunkbhaskar",
    "repo": "pinescript",
    "content": "TITLE: Implementing Trading Signal Screener in PineScript\nDESCRIPTION: This code implements a screener for different trading patterns. It defines condition functions for different signal types (FVG %, First Touch, Full Fill, Reversal) and creates an indicator calculation function that evaluates these conditions, returning time, gap percentage, and other metrics when signals are detected.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_21\n\nLANGUAGE: pinescript\nCODE:\n```\n// Acknowledgement & Reference\n// Trader: 'MUQWISHI'\n// Indicator Title: 'Candlestick Patterns Screener [By MUQWISHI]'\n// Indicator Link: 'https://www.tradingview.com/script/xiWQuGOq-Candlestick-Patterns-Screener-By-MUQWISHI/'\n\n// Scanner Conditions\nshort_cond = \n i_scr_choose == 'FVG %' ? short_cont_1 : \n i_scr_choose == 'First Touch' ? short_first_touch_signal : \n i_scr_choose == 'First Touch Confirmed' ? short_first_touch_conf_signal : \n i_scr_choose == 'Full Fill' ? short_full_fill_signal : \n i_scr_choose == 'Full Fill Confirmed' ? short_full_fill_conf_signal : \n short_reversal_signal\n\nlong_cond = \n i_scr_choose == 'FVG %' ? long_cont_1 : \n i_scr_choose == 'First Touch' ? long_first_touch_signal : \n i_scr_choose == 'First Touch Confirmed' ? long_first_touch_conf_signal : \n i_scr_choose == 'Full Fill' ? long_full_fill_signal : \n i_scr_choose == 'Full Fill Confirmed' ? long_full_fill_conf_signal : \n long_reversal_signal\n\n// Function for Screener Indicator Calculation\nindicator_calculation() =>\n    // Initialize variables\n    gap_percent = float(na)\n    //price = float(na)\n    _time = int(na)\n    _cum_pchg = float(na)\n    _cum_vol_pchg = float(na)\n    signal = int(na)\n\n    if barstate.isconfirmed\n        // Check for Short Momentum Candle and conditions (Modify here to customize indicators)\n        if i_scr_show_long and long_cond\n            gap_percent := FVGUpPercent\n            signal := 1\n            signal\n\n        // Check for Long Momentum Candle and conditions (Modify here to customize indicators)\n        else if i_scr_show_short and short_cond\n            gap_percent := FVGDownPercent\n            signal := -1\n            signal\n\n        // Update price and time if signal is not null\n        if not na(signal)\n            //price := math.round_to_mintick(close)\n            _time := time\n            _cum_pchg := cum_pchg\n            _cum_vol_pchg := cum_vol_pchg\n            _cum_vol_pchg\n\n    [_time, gap_percent, _cum_pchg, _cum_vol_pchg, signal]\n```\n\n----------------------------------------\n\nTITLE: ICT Liquidity Void Scanner Core Implementation\nDESCRIPTION: Main indicator implementation including menu settings, filters, Fibonacci calculations, signal generation, and plotting functionality. Features configurable ATR, body percentage, time, and date filters with customizable visual elements.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Indicator] ICT Liquidity Void Fill.txt#2025-04-16_snippet_0\n\nLANGUAGE: pinescript\nCODE:\n```\n//@version=6\nindicator(title = 'ICT Liquidity Void Fill', shorttitle = 'ICT LV Fill', overlay = true, max_lines_count = 500)\n\n//_____________________________ Menu Start\n\nstring g_lv = '███████████████ Liquidity Void ███████████████'\n\nstring tt_lv_fib = \n \"• '0' → Bottom of a bullish candle, top of a bearish candle.\" + \n \"\\n• '1' → Top of a bullish candle, bottom of a bearish candle.\" + \n \"\\n• '0.5' → 50% level of the candle.\" + \n \"\\n• Other Fibonacci/OTE values like 0.62, 0.705, 0.79, etc., are usable.\" + \n \"\\n• Range: Min = 0, Max = 1.\"\n\nbool i_scr_show_long = input.bool(defval = true, title = 'Long Signals', inline = 'tb_2', group = g_lv)\nbool i_scr_show_short = input.bool(defval = true, title = 'Short Signals', inline = 'tb_2', group = g_lv)\nfloat i_fib_val = input.float(defval = 0.5, title = 'Fib Value', minval = 0, maxval = 1, step = 0.1, tooltip = tt_lv_fib, group = g_lv)\nstring i_fvg_ln_style = input.string(defval = line.style_solid, title = 'Line Style', options = [line.style_solid, line.style_dashed, line.style_dotted], group = g_lv)\n```\n\n----------------------------------------\n\nTITLE: Implementing ICT Market Structure Shift Indicator in Pine Script\nDESCRIPTION: Complete implementation of an ICT Market Structure Shift indicator in Pine Script version 5. The indicator detects bullish and bearish shifts in market structure using zigzag patterns and includes configuration options for visualization, filtering, and retracement level detection.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Market Structure Shift (MSS)/ICT Market Structure Shift (MSS).txt#2025-04-16_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\n// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\n// © Arun_K_Bhaskar\n\n//@version=5\ni_max_bars_back = 300\nindicator(title=\"ICT Market Structure Shift (MSS)\", shorttitle=\"ICT MSS\", overlay=true, max_bars_back=i_max_bars_back, max_lines_count=500, max_boxes_count=500)\n\n//_____________________________ Menu Zig Zag Start \n\ng_zz = '██████████████████ Zig Zag ██████████████████'\n\nbool i_zz_bear_show = input.bool(defval=true, title='Bearish', inline='be', group=g_zz)\nbool i_zz_bear_shift_show = input.bool(defval=true, title='Shift', inline='be', group=g_zz)\nbool i_zz_bear_ret_show = input.bool(defval=true, title='Retracement', inline='be', group=g_zz)\n\nbool i_zz_bull_show = input.bool(defval=true, title='Bullish ', inline='bu', group=g_zz)\nbool i_zz_bull_shift_show = input.bool(defval=true, title='Shift', inline='bu', group=g_zz)\nbool i_zz_bull_ret_show = input.bool(defval=true, title='Retracement', inline='bu', group=g_zz)\n\nint i_zz_period = input.int(defval=4, title='Zig Zag Length', minval=2, group=g_zz)\nstring i_zz_source = input.string(defval='High/Low', title='Source', options=['High/Low', 'Open/Close'], group=g_zz)\ntt_zz = \"• Distance between swings.\" +\n     \"\\n• Lower values mean highs and lows are closer.\"\nfloat i_zz_percent = input.float(defval=0, minval=0, step=0.1, title='% Difference >', tooltip=tt_zz, group=g_zz)\nbool i_zz_show = input.bool(defval=false, title='', inline='zz', group=g_zz)\ncolor i_zz_bull_color = input.color(defval=#1E53E5, title='Zig Zag Colors: +', inline='zz', group=g_zz)\ncolor i_zz_bear_color = input.color(defval=#1E53E5, title='-', inline='zz', group=g_zz)\ncolor i_pos_color = input.color(defval=#22AB94, title='Colors:             +', inline='c_1', group=g_zz)\ncolor i_neg_color = input.color(defval=#F7525F, title='-', inline='c_1', group=g_zz)\ncolor i_zz_bull_signal_color = input.color(defval=#70CCBD, title='Signal Colors:       +', inline='c_2', group=g_zz)\ncolor i_zz_bear_signal_color = input.color(defval=#FAA1A4, title='-', inline='c_2', group=g_zz)\nint i_zz_bx_transp = input.int(defval=75, title='Box Transparency   ', minval=0, maxval=100, group=g_zz)\n\ng_zz_f = \"Additional Filters\"\ntt_zz_f = \"• Filters remove narrow swing displacements.\" +\n \"\\n• Swing displacement means the distance between old swing high/low and new swing high/low.\" +\n \"\\n• Multiplier filtering adjusts automatically when the chart timeframe changes.\" +\n \"\\n• Percentage filter will be constant across all timeframes.\" +\n \"\\n• If you don't want any filtering, choose 'Percentage' and then change Percentage to 0.\"\nstring i_zz_filter_choice = input.string(defval='Percentage', title='Filter Using', options=['Multiplier', 'Percentage'], tooltip=tt_zz_f, group=g_zz_f)\ntt_zz_m = \"• Higher the number, filters higher swing displacement.\" +\n \"\\n• Eg: If 'Multiplier' is 2, swing displacement is 2 times than the previous swing.\"\nfloat i_zz_multiplier = input.float(defval=2, minval=1, step=0.1, title='Multiplier', tooltip=tt_zz_m, group=g_zz_f)\ntt_zz_p = \"Filters liquidity displacement above the given percentage.\"\nfloat i_zz_percentage = input.float(defval=0.7, minval=0, step=0.1, title='Percentage Above', tooltip=tt_zz_p, group=g_zz_f)\n\n//_____________________________ Menu Zig Zag End \n\n//_____________________________ Zig Zag Start \n\n// Acknowledgement & Reference\n// Trader: 'RozaniGhani-RG'\n// Indicator Title: 'Zig Zag Ratio Simplified'\n// Indicator Link: 'https://www.tradingview.com/script/CIk186OY-Zig-Zag-Ratio-Simplified/'\n\n//_____________________________ Get Source\n\nfloat _high = i_zz_source == 'Open/Close' ? math.max(open, close) : high\nfloat _low = i_zz_source == 'Open/Close' ? math.min(open, close) : low\n\n//============================== 1.  Variables\n\n//_____________________________ 1.1 Highest / Lowest\nfloat ph = ta.highestbars(_high, i_zz_period) == 0 ? _high : na\nfloat pl = ta.lowestbars(_low, i_zz_period) == 0 ? _low  : na\n\n//_____________________________ 1.2 Dir\nvar int dir = 0, dir := pl and na(ph) ? -1 : ph and na(pl) ? 1 : dir\n\n//_____________________________ 1.4 Array\nvar max_array_size = 10, var zigzag = array.new_float(0), oldzigzag = array.copy(zigzag)\n\n//_____________________________ 1.5 Others\nvar line line_zz = na\n\n//============================== 3.  Custom Functions\n\nadd_to_zigzag(float[] pointer, float value, int bindex) =>\n    array.unshift(pointer, bindex)\n    array.unshift(pointer, value)\n    if array.size(pointer) > max_array_size\n        array.pop(pointer)\n        array.pop(pointer)\n    \nupdate_zigzag(float[] pointer, float value, int bindex, int dir) =>\n    if array.size(pointer) == 0\n        add_to_zigzag(pointer, value, bindex)\n    else\n        if dir == 1 and value > array.get(pointer, 0) or dir == -1 and value < array.get(pointer, 0)\n            array.set(pointer, 0, value)\n            array.set(pointer, 1, bindex)\n        0.\n\n//============================== 4.  Calculations\n\ndirchanged = ta.change(dir)\n\nif ph or pl\n    if dirchanged\n        add_to_zigzag(zigzag, dir == 1 ? ph : pl, bar_index)\n    else\n        update_zigzag(zigzag, dir == 1 ? ph : pl, bar_index, dir)\n\n//============================== 5.  Constructs\n\nif array.size(zigzag) >= 6\n    if array.get(zigzag, 0) != array.get(oldzigzag, 0) or array.get(zigzag, 1) != array.get(oldzigzag, 1)\n        if array.get(zigzag, 2) == array.get(oldzigzag, 2) and array.get(zigzag, 3) == array.get(oldzigzag, 3)\n            line.delete(line_zz)\n        if i_zz_show\n            line_zz := line.new(x1 = math.round(array.get(zigzag, 1)), y1 = array.get(zigzag, 0), x2 = math.round(array.get(zigzag, 3)), y2 = array.get(zigzag, 2), color = dir == 1 ? i_zz_bull_color : i_zz_bear_color, width=2)\n\n//_____________________________ Get Swing Price & Bar Index\n\nzz_1 = array.size(zigzag) > 7 ? array.get(zigzag, array.size(zigzag) - 8) : na\nbi_1 = array.size(zigzag) > 6 ? array.get(zigzag, array.size(zigzag) - 7) : na\nzz_2 = array.size(zigzag) > 5 ? array.get(zigzag, array.size(zigzag) - 6) : na\nbi_2 = array.size(zigzag) > 4 ? array.get(zigzag, array.size(zigzag) - 5) : na\nzz_3 = array.size(zigzag) > 3 ? array.get(zigzag, array.size(zigzag) - 4) : na\nbi_3 = array.size(zigzag) > 2 ? array.get(zigzag, array.size(zigzag) - 3) : na\n\n// Create a single label for the last five zigzag values and their corresponding bar index\n//label_text = str.tostring(zz_0) + \"\\n\" + str.tostring(bi_0) + \"\\n\" + str.tostring(zz_1) + \"\\n\" + str.tostring(bi_1) + \"\\n\" + str.tostring(zz_2) + \n// \"\\n\" + str.tostring(bi_2) + \"\\n\" + str.tostring(zz_3) + \"\\n\" + str.tostring(bi_3) + \"\\n\" + str.tostring(zz_4) + \"\\n\" + str.tostring(bi_4)\n//if barstate.islast\n//    label.new(x = bar_index, y = high, text = label_text, color=color.white)\n\n// Function to calculate filter based on ATR or percentage\nfilter(float swing_3, float swing_2, float swing_1, float multiplier, float percentage, string choice) =>\n    filter_x_times = math.abs(swing_1 - swing_2) > math.abs(swing_3 - swing_2) * multiplier\n    filter_percent = math.abs((swing_3 - swing_1) / swing_3 * 100) > percentage\n    choice == 'Multiplier' ? filter_x_times : filter_percent\n\nbearish_filter = filter(zz_3, zz_2, zz_1, i_zz_multiplier, i_zz_percentage, i_zz_filter_choice)\nbullish_filter = filter(zz_3, zz_2, zz_1, i_zz_multiplier, i_zz_percentage, i_zz_filter_choice)\n\n//_____________________________ MSS Conditions\n\n// Bearish Condition\nbearish_condition = \n zz_1 > zz_2 and\n zz_1 > zz_3 and\n zz_2 < zz_1 and\n zz_2 < zz_3 and\n zz_3 < zz_1 and\n zz_3 > zz_2 and\n close < zz_1 and\n close < zz_2 and\n close < zz_3 and\n ta.crossunder(close, zz_2) and\n bearish_filter and \n barstate.isconfirmed\n\n// Bullish Condition\nbullish_condition = \n zz_1 < zz_2 and\n zz_1 < zz_3 and\n zz_2 > zz_1 and\n zz_2 > zz_3 and\n zz_3 > zz_1 and\n zz_3 < zz_2 and\n close > zz_1 and\n close > zz_2 and\n close > zz_3 and\n ta.crossover(close, zz_2) and\n bullish_filter and \n barstate.isconfirmed\n\n//___________________________ Bearish Retracement\n\n// Retracement Levels\nfloat bearish_retracement_level = zz_1 - ((zz_1-zz_2)/3)\nfloat bullish_retracement_level = zz_1 + ((zz_2-zz_1)/3)\n\n// Get Bearish Retracement Price in Bearish Condition\nvar bearish_retracement_price = float(na)\nvar bearish_retracement_bi = float(na)\nif bearish_condition\n    bearish_retracement_price := bearish_retracement_level\n    bearish_retracement_bi := bi_1\n\n// Bearish Retracement Condition\nbool bearish_retracement_condition = \n ta.crossover(high, bearish_retracement_price) and\n barstate.isconfirmed\n\n// Bearish Retracement in Sequential Order\nvar bear_current_state = 0\nbear_previous_state = nz(bear_current_state[1])\nbear_current_state := bear_previous_state == 2 ? 0 : bear_previous_state\nif bearish_condition and bear_current_state == 0\n    bear_current_state := 1\nif bearish_retracement_condition and bear_current_state == 1\n    bear_current_state := 2\n\nbool bearish_retracement_trigger = bear_current_state == 2 ? true : false\n\n//___________________________ Bullish Retracement\n\n// Get Bullish Retracement Price in Bullish Condition\nvar bullish_retracement_price = float(na)\nvar bullish_retracement_bi = float(na)\nif bullish_condition\n    bullish_retracement_price := bullish_retracement_level\n    bullish_retracement_bi := bi_1\n\n// Bullish Retracement Condition\nbool bullish_retracement_condition = \n ta.crossunder(low, bullish_retracement_price) and\n barstate.isconfirmed\n\n// Bullish Retracement in Sequential Order\nvar bull_current_state = 0\nbull_previous_state = nz(bull_current_state[1])\nbull_current_state := bull_previous_state == 2 ? 0 : bull_previous_state\nif bullish_condition and bull_current_state == 0\n    bull_current_state := 1\nif bullish_retracement_condition and bull_current_state == 1\n    bull_current_state := 2\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Trend Following Scanner in Pine Script\nDESCRIPTION: Complete Pine Script indicator that scans for trend following setups while skipping sideways markets. The script includes multiple input parameters for customization, built-in Supertrend calculation, volatility range detection, and additional filters for ATR, volume, candle body, and time-based conditions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Scanner - Trend Following Setup - Sideways Market Skipper Scanner.txt#2025-04-16_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\n// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\n// © Arun_K_Bhaskar\n\n//@version=5\nindicator(title='Trend Following Setup - Sideways Market Skipper Scanner', shorttitle='Sideways Skip Scan', overlay=false, max_bars_back=500)\n\n//_____________________________ Menu Scanner Start\n\ng_scrtb = '██████████████████ Scanner ██████████████████'\n\n//string i_scr_choose = input.string(defval='Continuous Signals', title='Scanning Method', options=['Continuous Signals', 'Flip Signals'], group=g_scrtb)\n\ntt_is = \"• Reads only up to first 40 symbols.\" +\n     \"\\n• Total characters cannot exceed 4096.\" +\n     \"\\n• Eg: EXCHANGE:SYMBOL_A,EXCHANGE:SYMBOL_B\"\n\nstring i_symbols = input.text_area(\n defval=\"NSE:ABFRL,NSE:ASHOKA,NSE:BALMLAWRIE,NSE:BEL,NSE:BHEL,NSE:BOMDYEING,NSE:CANBK,NSE:DBREALTY,NSE:DCXINDIA,NSE:ENGINERSIN,NSE:GAIL,NSE:HINDCOPPER,NSE:HUDCO,NSE:INDIACEM,NSE:INOXWIND,NSE:IRCON,NSE:IRFC,NSE:ITI,NSE:MARKSANS,NSE:MIDHANI,NSE:MRPL,NSE:NATIONALUM,NSE:NBCC,NSE:NCC,NSE:NFL,NSE:NHPC,NSE:NLCINDIA,NSE:PNB,NSE:PTC,NSE:RAILTEL,NSE:RCF,NSE:RELINFRA,NSE:RVNL,NSE:SAIL,NSE:SCI,NSE:SJVN,NSE:TI,NSE:UNIONBANK,NSE:VEDL,NSE:ZEEL\", \n title=\"Paste Symbols\", tooltip=tt_is, group=g_scrtb)\n\nbool i_scr_show_table  = input.bool(defval=true, title='Display Table', group=g_scrtb)\nbool i_scr_show_long  = input.bool(defval=true, title='Long Signals', inline='tb_2', group=g_scrtb)\nbool i_scr_show_short  = input.bool(defval=true, title='Short Signals', inline='tb_2', group=g_scrtb)\n\nint i_scr_tbl_disp_rows = input.int(defval=12, title='Display Rows', minval=0, maxval=100, group=g_scrtb)\nstring i_scr_tbl_position = input.string(defval=position.bottom_left, title='Table Position', options=[position.top_left, position.top_center, position.top_right, position.middle_left, position.middle_center, position.middle_right, position.bottom_left, position.bottom_center, position.bottom_right], group=g_scrtb)\nstring i_scr_tbl_text_size = input.string(defval=size.small, title='Table Size', options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group=g_scrtb)\n\n//_____________________________ Menu Scanner End\n\n//_____________________________ Menu Supertrend Start\n\ng_st = '█████████████████ Supertrend █████████████████'\n//bool i_st_display = input.bool(defval=true, title='Display', group=g_st)\nint i_st_atr_period = input.int(defval=10, title=\"ATR Length\", minval=1, group=g_st)\nfloat i_st_factor = input.float(defval=3.0, title=\"Factor\", minval=0.01, step=0.01, group=g_st)\n\n//_____________________________ Menu Supertrend End\n\n//_____________________________ Menu Range Start\n\ng_r = '███████████████ Volatility Range ███████████████'\n\ntt_r = \n \"• 'Auto ATR': Automatically sets the range based on the ATR value.\" +\n \"\\n• The range adjusts automatically when switching between symbols.\" +\n \"\\n• The default ATR timeframe is 1 hour.\" +\n \"\\n• For a Supertrend Long Crossover, the range is defined by adding the ATR value.\" +\n \"\\n• For a Supertrend Short Crossunder, the range is defined by subtracting the ATR value.\" +\n \"\\n\\n• Type Points: Manually enter the points for different symbols to define the volatility range.\" +\n \"\\n• For example, the points are 60 for NIFTY and 120 for BANKNIFTY.\"\n\ntt_tp = \"Applicable only when 'Range Type' is selected as 'Type Points'.\"\n\ntt_atr_tf =\n \"• This uses the ATR value of the given timeframe.\" +\n \"\\n• The default ATR timeframe is 1 hour.\"\n\nbool i_atr_range_display = input.bool(defval=true, title='Display', group=g_r)\nstring i_atr_range_choice = input.string(defval='Auto ATR', title='Range Type', options=['Auto ATR', 'Type Points'], tooltip=tt_r, group=g_r)\nfloat i_atr_range_points = input.float(defval=120, title=\"Type Points\", minval=0.01, tooltip=tt_tp, group=g_r)\n\n//string i_atr_range_timeframe = input.timeframe(defval='60', title='ATR Timeframe', tooltip=tt_atr_tf, group=g_r)\nint i_atr_range_length = input.int(defval=14, title='ATR Length', minval=1, group=g_r)\nstring i_atr_range_smoothing = input.string(title=\"ATR Smoothing\", defval=\"RMA\", options=[\"RMA\", \"SMA\", \"EMA\", \"WMA\"], group=g_r)\nfloat i_atr_range_multiplier = input.float(defval=1.5, title=\"ATR Multiplier\", minval=1, step=0.5, group=g_r)\nint i_atr_range_sma_length = input.int(defval=14, title='ATR SMA Length', minval=1, group=g_r)\n\n//_____________________________ Menu Range End\n\n//_____________________________ Menu Additional Fiters Start\n\ng_af = '███████████████ Additional Fiters ███████████████'\ntt_pchg = \n \"• If '% Change Above/Below +/-' is 4, it means relative volume is considered when the price change is above 4%.\" +\n \"\\n• A value of 4% is positive for bullish scenarios and negative for bearish scenarios.\" +\n \"\\n• The percentage change is calculated using cumulative percentage change, so there might be a minor difference between the actual and displayed percentage change.\"\ntt_vpchg = \n \"• If 'Volume % Change Above' is 0, it means Relative Volume is considered when today's volume is greater than the previous day's volume.\" +\n \"\\n• For 'Screening Method' choice 'Retracement to EMA,' the 'Apply Volume % Change Filter' can be unchecked.\" +\n \"\\n• A 'Volume % Change Above' 300% or more often indicates a major breakout, which may happen today or the next day.\" +\n \"\\n• The volume percentage change is calculated using cumulative percentage change, so there might be a minor difference between the actual and displayed percentage change.\"\ntt_atr = \n \"• ATR helps filter out longer or more volatile signal candles.\"\ntt_atr_mul =\n \"• Higher multiplier value filters a longer or more volatile signal candle.\"\ntt_bf =\n \"• If the input is '80', it means the body covers over 80% of the candle.\"\ntt_bs =\n \"• 2 means the candle is 2 times larger than the previous candle.\"\ntt_vol =\n \"• Filter out a candle when its volume is greater than the SMA of the volume.\"\ntt_rv =\n \"• Filter out a candle when its volume is greater than the Relative Volume.\"\ntt_tf =\n \"• Filter out a signals between the given Time.\"\n\nbool i_pchg_filter = input.bool(defval=false, title='Apply % Change Filter', tooltip=tt_pchg, group=g_af)\nfloat i_pchg_above_below = input.float(defval=2, title='% Change Above/Below +/-', minval=0, group=g_af)\n\nbool i_vol_pchg_filter = input.bool(defval=false, title='Apply Volume % Change Filter', tooltip=tt_vpchg, group=g_af)\nfloat i_vol_pchg_above = input.float(defval=0, title='Volume % Change Above', minval=0, group=g_af)\n\nbool i_atr_filter = input.bool(defval=true, title='Apply ATR Filter', tooltip=tt_atr, group=g_af)\nint i_atr_length = input.int(defval=14, minval=1, title='ATR Length', group=g_af)\nfloat i_atr_multi = input.float(defval=1, title='ATR Multiplier', minval=1, group=g_af)\n\nbool i_body_filter = input.bool(defval=false, title='Apply Body % Filter', tooltip=tt_bf, group=g_af)\nfloat i_body_percent = input.float(defval=80, title='Body % Above', minval=0, maxval=100, group=g_af) / 100\n\nbool i_body_size_filter = input.bool(defval=false, title='Apply Body Size Filter', tooltip=tt_bs, group=g_af)\nint i_body_size_multiplier = input.int(defval=2, title='Body Size Multiplier (x)', minval=0,  group=g_af)\n\nbool i_volume_filter = input.bool(defval=false, title='Apply Volume Filter', tooltip=tt_vol, group=g_af)\nint i_vol_sma_length = input.int(defval=20, minval=1, title='Volume SMA Length', group=g_af)\n\nbool i_rel_vol_filter = input.bool(defval=false, title='Apply Relative Volume Filter', tooltip=tt_rv, group=g_af)\nint i_rel_vol_avg_vol_len = input.int(defval=90, title='Relative Volume Length', minval=2, group=g_af)\nfloat i_rel_vol_avg_vol_multi = input.float(defval=5, title='Rel Vol SMA Multiplier', minval=0, group=g_af)\n\nbool i_time_filter = input.bool(defval=false, title='Apply Time Filter', tooltip=tt_tf, group=g_af)\nint i_hour_1 = input.int(defval=9, minval=0, title='Time From', inline='t_1', group=g_af)\nint i_minute_1 = input.int(defval=15, minval=0, title=':', inline='t_1', group=g_af)\nint i_hour_2 = input.int(defval=10, minval=0, title='Time To ', inline='t_2', group=g_af)\nint i_minute_2 = input.int(defval=15, minval=0, title=':', inline='t_2', group=g_af)\n\n//_____________________________ Menu Additional Fiters End\n\n//_____________________________ Menu Table Start\n\ng_dtb = '█████████████████ Data Table █████████████████'\nbool i_tbl_data_show  = input.bool(defval=true, title='Display Table', group=g_dtb)\nstring i_tbl_data_pos = input.string(defval=position.bottom_right, title='Position', options=[position.top_left, position.top_center, position.top_right, position.middle_left, position.middle_center, position.middle_right, position.bottom_left, position.bottom_center, position.bottom_right], group=g_dtb)\nstring i_tbl_data_txt_size = input.string(defval=size.normal, title='Size', options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group=g_dtb)\n\n//_____________________________ Menu Table End\n\n//_____________________________ Chart Settings Start\n\ng_ch = '███████████████ Chart Settings ███████████████'\ncolor i_pos_dark_color = input.color(defval=#03110F, title='Positive Dark', group=g_ch)\ncolor i_pos_color = input.color(defval=#26A69A, title='Positive Mid', group=g_ch)\ncolor i_pos_light_color = input.color(defval=#ACE5DC, title='Positive Light', group=g_ch)\ncolor i_neg_light_color = input.color(defval=#FCCBCD, title='Negative Light', group=g_ch)\ncolor i_neg_color = input.color(defval=#FF5252, title='Negative Mid', group=g_ch)\ncolor i_neg_dark_color = input.color(defval=#180809, title='Negative Dark', group=g_ch)\ncolor i_indicator_color = input.color(defval=#2962FF, title='Indicator', group=g_ch)\ncolor i_signal_color = input.color(defval=#FF6D00, title='Signal', group=g_ch)\ncolor i_neu_color = input.color(defval=#D1D4DC, title='Neutral Light', group=g_ch)\ncolor i_neu_mid_color = input.color(defval=#2A2E39, title='Neutral Mid', group=g_ch)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Symbol Screener in PineScript\nDESCRIPTION: This snippet implements a multi-symbol screener that detects bullish and bearish conditions across multiple symbols. It uses a matrix to store data and displays results in a table.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void/ICT Liquidity Void Screener.txt#2025-04-16_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\n// Screener Conditions\nbearish_cond = ta.crossunder(low, bull_price_source_val) and barstate.isconfirmed\nbullish_cond = ta.crossover(high, bear_price_source_val) and barstate.isconfirmed\n\n// Define Bull and Bear Conditions\nbull = not(i_scr_direction == \"Bearish\")\nbear = not(i_scr_direction == \"Bullish\")\n\n// Function for Screener Indicator Calculation\nindicator_calculation() =>\n    // Initialize variables\n    price = float(na)\n    _time = int(na)\n    indicator = \"\"\n    signal = int(na) \n\n    if barstate.isconfirmed\n        // Check for Bearish Momentum Candle and conditions (Modify here to customize indicators)\n        if i_scr_show_bull and bearish_cond and bear \n            indicator := \"L\"\n            signal := -1\n\n        // Check for Bullish Momentum Candle and conditions (Modify here to customize indicators)\n        else if i_scr_show_bear and bullish_cond and bull\n            indicator := \"H\"\n            signal := 1\n\n        // Update price and time if signal is not null\n        if not na(signal)\n            price := math.round_to_mintick(close)\n            _time := time\n\n    [_time, indicator, price, signal]\n\n// Function to format time\nformat_time(x) =>\n    timezone = syminfo.timezone\n    timeframe.isintraday ? str.format_time(x, \"HH:mm  dd-MM-yyyy\", timezone) : str.format_time(x, \"dd-MM-yyyy\", timezone)\n\n// Function to extract symbol name\nsymbol(s) => \n    array.get(str.split(s, \":\"), 1)\n\n// Matrix setup\nvar matrix = matrix.new<string>(0, 5, na)\n\n// Function to add rows to the matrix\nmtxFun(symbol, _time, indicator, price, signal) =>\n    matrix.add_row(matrix, 0, array.from(symbol, _time, indicator, price, signal))\n\n// Screener function to collect data\nscreener(s) =>\n    sym = ticker.modify(s, syminfo.session)\n    [_time, indicator, price, signal] = request.security(sym, timeframe.period, indicator_calculation())\n\n    // Check if the signal is not na and the time matches\n    if not na(signal) and _time == time\n        symbolName = symbol(s)\n        formattedTime = format_time(_time)\n        strPrice = str.tostring(price)\n        strSignal = str.tostring(signal)\n        \n        // Add data to the matrix\n        mtxFun(symbolName, formattedTime, indicator, strPrice, strSignal)\n\n// Call Screener function for multiple symbols\nscreener(tid_01), screener(tid_02), screener(tid_03), screener(tid_04), screener(tid_05), screener(tid_06), screener(tid_07),\nscreener(tid_08), screener(tid_09), screener(tid_10), screener(tid_11), screener(tid_12), screener(tid_13), screener(tid_14),\nscreener(tid_15), screener(tid_16), screener(tid_17), screener(tid_18), screener(tid_19), screener(tid_20), screener(tid_21),\nscreener(tid_22), screener(tid_23), screener(tid_24), screener(tid_25), screener(tid_26), screener(tid_27), screener(tid_28),\nscreener(tid_29), screener(tid_30), screener(tid_31), screener(tid_32), screener(tid_33), screener(tid_34), screener(tid_35),\nscreener(tid_36), screener(tid_37), screener(tid_38), screener(tid_39), screener(tid_40)\n\n// Trim excess rows in the matrix\nif matrix.rows(matrix) > i_scr_disp_rows\n    while matrix.rows(matrix) > i_scr_disp_rows\n        matrix.remove_row(matrix, matrix.rows(matrix)-1)\n\n// Plot Table\n// Create table with specified properties\nvar table tbl = table.new(position=i_scr_position, columns=4, rows=102, border_width=1)\n\n// Function to populate cells in the table\ncell(col, row, txt, color) => \n    table.cell(tbl, col, row, text = txt, text_color = color, text_halign=text.align_left, bgcolor = color.new(color, 90), text_size=i_scr_text_size)\n\n// Check if it's the last bar\nif barstate.islast\n    // Clear existing data in the table\n    table.clear(tbl, 0, 0, 3, 101)\n\n    // Set headers for the table\n    cell(0, 0, \"Symbol\", i_scr_neu_col)\n    cell(1, 0, \"Time\",   i_scr_neu_col)\n    cell(2, 0, \"Dir\" ,  i_scr_neu_col)\n    cell(3, 0, \"Price\",  i_scr_neu_col)\n\n    j = 1\n    // Populate table with matrix data\n    if matrix.rows(matrix) > 0\n        for i = 0 to matrix.rows(matrix) - 1\n            // Determine color based on the signal\n            col = matrix.get(matrix, i, 4) ==  \"1\" ? i_scr_neg_col :\n                  matrix.get(matrix, i, 4) == \"-1\" ? i_scr_pos_col : i_scr_neu_col\n\n            // Populate cells in the table\n            cell(0, j, matrix.get(matrix, i, 0), col)\n            cell(1, j, matrix.get(matrix, i, 1), col)\n            cell(2, j, matrix.get(matrix, i, 2), col)\n            cell(3, j, matrix.get(matrix, i, 3), col)\n\n            j += 1\n```\n\n----------------------------------------\n\nTITLE: Defining Screener Logic for Market Structure and Retracements in PineScript\nDESCRIPTION: This snippet implements the core logic for a market structure and retracement screener. It defines conditions for bullish and bearish signals based on user-selected screening methods and direction preferences.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Market Structure Shift (MSS)/ICT Market Structure Shift (MSS) Screener.txt#2025-04-16_snippet_8\n\nLANGUAGE: pinescript\nCODE:\n```\nbear_method =\n i_scr_choose == 'Market Structure Shift' ? bearish_condition :\n bearish_retracement_trigger and bearish_retracement_condition\n\nbull_method =\n i_scr_choose == 'Market Structure Shift' ? bullish_condition :\n bullish_retracement_trigger and bullish_retracement_condition\n\nbearish_cond = bear_method\nbullish_cond = bull_method \n\nbull = not(i_scr_direction == \"Bearish\")\nbear = not(i_scr_direction == \"Bullish\")\n\nindicator_calculation() =>\n    price = float(na)\n    _time = int(na)\n    signal = int(na) \n\n    if barstate.isconfirmed\n        if i_scr_show_bull and bearish_cond and bear \n            signal := -1\n        else if i_scr_show_bear and bullish_cond and bull\n            signal := 1\n\n        if not na(signal)\n            price := math.round_to_mintick(close)\n            _time := time\n\n    [_time, price, signal]\n\nformat_time(x) =>\n    timezone = syminfo.timezone\n    timeframe.isintraday ? str.format_time(x, \"HH:mm  dd-MM-yyyy\", timezone) : str.format_time(x, \"dd-MM-yyyy\", timezone)\n```\n\n----------------------------------------\n\nTITLE: Generating Trading Signals Based on Multiple Indicator Conditions in Pine Script\nDESCRIPTION: This section defines the conditions for generating short and long trading signals based on the combination of multiple indicators. Signals occur when percentage change, RSI, MFI, CCI, and volume criteria are all met simultaneously, and are visualized as triangles on the chart.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup with Scanner.txt#2025-04-16_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\n//_____________________________ Signals Start\n\n// Condition\nshort_cont = \n //ta.crossunder(pchg, (-i_pchg_250)) and \n pchg < (-i_pchg_250) and \n rsi < i_rsi_os and \n mfi < i_mfi_os and \n cci < i_cci_os and\n volume > vol_sma and\n barstate.isconfirmed\n\nlong_cont = \n //ta.crossover(pchg, i_pchg_250) and \n pchg > i_pchg_250 and \n rsi > i_rsi_ob and \n mfi > i_mfi_ob and \n cci > i_cci_ob and\n volume > vol_sma and\n barstate.isconfirmed\n\n// Plot \nplotshape(series=short_cont, title='Short Signal', style=shape.triangledown, location=location.abovebar, color=i_neg_light_col, size=size.tiny)\nplotshape(series=long_cont, title='Long Signal', style=shape.triangleup, location=location.belowbar, color=i_pos_light_col, size=size.tiny)\n```\n\n----------------------------------------\n\nTITLE: Documentation for BANKNIFTY Option Scalping Strategy in PineScript\nDESCRIPTION: This comment section provides comprehensive documentation for an options scalping strategy developed by trader Vijay S. Thakare. It details the strategy type, timeframe, indicators used, entry/exit rules, and risk management parameters for both long and short positions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n// Readme First:\n// \n// About:\n// This is a BANKNIFTY option buying or scalping setup shared by trader Vijay S. Thakare on YouTube.\n// \n// Strategy Reference Video:\n// Vijay Thakare at Traders Carnival Seminar:\n// Video Title: \"Vijay Thakare: An Excellent Option Scalper Sharing His Knowledge @ Traders Carnival\"\n// Video Link: https://www.youtube.com/watch?v=6INokexfeLc\n// \n// Explanation Video from His YouTube Channel:\n// Video Title: \"Setup Video\"\n// Video Link: https://www.youtube.com/watch?v=KK5j1dgklIY&t=9150s\n// \n// Strategy Type: Momentum\n// Bias: Strongly Directional\n// Trading Style: Scalping\n// Instrument: Option - Buying\n// Original Symbol: NSE:BANKNIFTY (Works with other symbols as well)\n// Timeframe: 5 minute\n// \n// Risk Reward Ratio: 1:2\n// Stop Loss: Rs. 20 on the premium chart\n// Target: Rs. 40 on the premium chart\n// \n// Charts Referred:\n// - BANKNIFTY Futures Chart\n// - BANKNIFTY Options Premium Chart\n// \n// Indicator Used and Settings:\n// 1. EMA: Close, 20, 50, 100, 200\n// 2. VWAP: Daily VWAP\n// 3. MACD: Fast Length - 3, Slow Length - 9, Signal Smoothing - 15\n// 4. Stochastic: %K Length - 5, %K Smoothing - 3, %D Smoothing - 3\n// \n// Long Entry Rules:\n// - Close above VWAP\n// - Close above Supertrend (Not in original strategy. It avoids many false signals.)\n// - MACD above 0\n// - Stochastic above 40\n// - Consider VWAP, EMA 20, 50, 100, 200 are closer to each other\n// - Rising volume (optional)\n// \n// Short Entry Rules:\n// - Close below VWAP\n// - Close below Supertrend (Not in original strategy. It avoids many false signals.)\n// - MACD below 0\n// - Stochastic below 60\n// - Consider VWAP, EMA 20, 50, 100, 200 are closer to each other\n// - Rising volume (optional)\n//\n// Update 09 June 2024\n// 1. Added Supertrend filter.\n// 2. Added TWAP to use it with Symbols without Volume.\n// 3. Removed indicator values Table.\n// 4. Two types of scanners are available. One generates continuous signals and one generates flip signals.\n```\n\n----------------------------------------\n\nTITLE: Calculating Price Range Frequency for TPO Analysis\nDESCRIPTION: Implements a function to calculate how frequently price visits specific price ranges during a session. This function is the core of TPO (Time Price Opportunity) analysis that helps identify value areas in the Market Profile.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] Market Profile with Screener (Based on [RS]Market Profile by RicardoSantos).txt#2025-04-16_snippet_4\n\nLANGUAGE: pine script\nCODE:\n```\n//  ||--    function to get the frequency a specified range is visited:\nf_frequency_of_range(_src, _upper_range, _lower_range, _length) =>\n    _adjusted_length = _length < 1 ? 1 : _length\n    _frequency = 0\n    for _i = 0 to _adjusted_length - 1 by 1\n        if _src[_i] >= _lower_range and _src[_i] < _upper_range\n            _frequency += 1\n            _frequency\n    _return = nz(_frequency, 0)  // _adjusted_length\n    _return\n```\n\n----------------------------------------\n\nTITLE: Processing Symbol Lists for PineScript Screener\nDESCRIPTION: This snippet defines a function to parse a CSV string of ticker symbols and extract individual symbols. It implements a recursive approach to process up to 40 symbols from the input string, storing each in a separate variable for further processing in a screener.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_20\n\nLANGUAGE: pinescript\nCODE:\n```\n// Acknowledgement & Reference\n// Trader: 'allanster'\n// Indicator Title: 'How To Input CSV List Of Symbol Data Used For Screener'\n// Indicator Link: 'https://www.tradingview.com/script/KfqHqHUH-How-To-Input-CSV-List-Of-Symbol-Data-Used-For-Screener/'\n\nfeed(back) => // extract tickerid and decrement list of ticker IDs\n    loop = back // declare string variable to hold content list\n    getT = string(na) // declare string variable to hold tickerid\n    if str.length(loop) == 0 // if list is empty\n        getT := string(na) // assign na to tickerid variable\n        loop := string(na) // assign na to list of ticker Ids variable\n        loop\n    else // else extract first tickerid\n        getP = nz(str.pos(loop, ','), str.length(loop)) // get position of first comma or last character\n        getT := str.substring(loop, 0, getP) // get tickerid in first position of list\n        loop := str.replace(loop, getT + ',', '') // clear tickerid + delimiter character from list\n        loop\n    [getT, loop] // return tickerid in first position & truncated list\n\n[tid_01, out_01] = feed(i_symbols), [tid_02, out_02] = feed(out_01), [tid_03, out_03] = feed(out_02), [tid_04, out_04] = feed(out_03),\n[tid_05, out_05] = feed(out_04), [tid_06, out_06] = feed(out_05), [tid_07, out_07] = feed(out_06), [tid_08, out_08] = feed(out_07),\n[tid_09, out_09] = feed(out_08), [tid_10, out_10] = feed(out_09), [tid_11, out_11] = feed(out_10), [tid_12, out_12] = feed(out_11),\n[tid_13, out_13] = feed(out_12), [tid_14, out_14] = feed(out_13), [tid_15, out_15] = feed(out_14), [tid_16, out_16] = feed(out_15),\n[tid_17, out_17] = feed(out_16), [tid_18, out_18] = feed(out_17), [tid_19, out_19] = feed(out_18), [tid_20, out_20] = feed(out_19),\n[tid_21, out_21] = feed(out_20), [tid_22, out_22] = feed(out_21), [tid_23, out_23] = feed(out_22), [tid_24, out_24] = feed(out_23),\n[tid_25, out_25] = feed(out_24), [tid_26, out_26] = feed(out_25), [tid_27, out_27] = feed(out_26), [tid_28, out_28] = feed(out_27),\n[tid_29, out_29] = feed(out_28), [tid_30, out_30] = feed(out_29), [tid_31, out_31] = feed(out_30), [tid_32, out_32] = feed(out_31),\n[tid_33, out_33] = feed(out_32), [tid_34, out_34] = feed(out_33), [tid_35, out_35] = feed(out_34), [tid_36, out_36] = feed(out_35),\n[tid_37, out_37] = feed(out_36), [tid_38, out_38] = feed(out_37), [tid_39, out_39] = feed(out_38), [tid_40, out_40] = feed(out_39)\n```\n\n----------------------------------------\n\nTITLE: Implementing Short Position Trading Signals in PineScript\nDESCRIPTION: This code snippet defines various short position trading signals based on Fair Value Gaps. It tracks conditions like crossovers, confirms signals based on price action, and implements state machines to detect multi-condition signal patterns like First Touch, Full Fill, and Reversal patterns.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_15\n\nLANGUAGE: pine\nCODE:\n```\nvar short_cont_2_low = float(na)\nif short_cont_2\n    short_cont_2_low := low\n    short_cont_2_low\n\n// Short Condition 2 Confirmed\nshort_cont_2_conf = \n ta.crossunder(close, short_cont_2_low) and \n time_filter and\n date_filter and\n barstate.isconfirmed\n\n// Short Condition 3\nshort_cont_3 = \n ta.crossover(high, isFVGDown_top) and \n close < isFVGDown_top and\n time_filter and\n date_filter and\n barstate.isconfirmed\n\nvar short_cont_3_low = float(na)\nif short_cont_3\n    short_cont_3_low := low\n    short_cont_3_low\n\n// Short Condition 3 Confirmed\nshort_cont_3_conf = \n ta.crossunder(close, short_cont_3_low) and \n time_filter and\n date_filter and\n barstate.isconfirmed\n\n// Short Condition 4\nshort_cont_4 = \n ta.crossover(close, isFVGDown_top) and \n time_filter and\n date_filter and\n barstate.isconfirmed\n\n// Short First Touch\nvar short_first_touch_current_state = 0\nshort_first_touch_prev_state = nz(short_first_touch_current_state[1])\nshort_first_touch_current_state := short_first_touch_prev_state == 2 ? 0 : short_first_touch_prev_state\nif short_cont_1 and short_first_touch_current_state == 0\n    short_first_touch_current_state := 1\n    short_first_touch_current_state\nif short_cont_2 and short_first_touch_current_state == 1\n    short_first_touch_current_state := 2\n    short_first_touch_current_state\n\nshort_first_touch_signal = short_first_touch_current_state == 2 ? true : false\n\n// Short Confirmed First Touch\nvar short_first_touch_conf_current_state = 0\nshort_first_touch_conf_prev_state = nz(short_first_touch_conf_current_state[1])\nshort_first_touch_conf_current_state := short_first_touch_conf_prev_state == 3 ? 0 : short_first_touch_conf_prev_state\nif short_cont_1 and short_first_touch_conf_current_state == 0\n    short_first_touch_conf_current_state := 1\n    short_first_touch_conf_current_state\nif short_cont_2 and short_first_touch_conf_current_state == 1\n    short_first_touch_conf_current_state := 2\n    short_first_touch_conf_current_state\nif short_cont_2_conf and short_first_touch_conf_current_state == 2\n    short_first_touch_conf_current_state := 3\n    short_first_touch_conf_current_state\n\nshort_first_touch_conf_signal = short_first_touch_conf_current_state == 3 ? true : false\n\n// Short Full Fill\nvar short_full_fill_current_state = 0\nshort_full_fill_prev_state = nz(short_full_fill_current_state[1])\nshort_full_fill_current_state := short_full_fill_prev_state == 2 ? 0 : short_full_fill_prev_state\nif short_cont_1 and short_full_fill_current_state == 0\n    short_full_fill_current_state := 1\n    short_full_fill_current_state\nif short_cont_3 and short_full_fill_current_state == 1\n    short_full_fill_current_state := 2\n    short_full_fill_current_state\n\nshort_full_fill_signal = short_full_fill_current_state == 2 ? true : false\n\n// Short Full Fill Confirmed\nvar short_full_fill_conf_current_state = 0\nshort_full_fill_conf_prev_state = nz(short_full_fill_conf_current_state[1])\nshort_full_fill_conf_current_state := short_full_fill_conf_prev_state == 3 ? 0 : short_full_fill_conf_prev_state\nif short_cont_1 and short_full_fill_conf_current_state == 0\n    short_full_fill_conf_current_state := 1\n    short_full_fill_conf_current_state\nif short_cont_3 and short_full_fill_conf_current_state == 1\n    short_full_fill_conf_current_state := 2\n    short_full_fill_conf_current_state\nif short_cont_3_conf and short_full_fill_conf_current_state == 2\n    short_full_fill_conf_current_state := 3\n    short_full_fill_conf_current_state\n\nshort_full_fill_conf_signal = short_full_fill_conf_current_state == 3 ? true : false\n\n// Short Reversal\nvar short_reversal_current_state = 0\nshort_reversal_prev_state = nz(short_reversal_current_state[1])\nshort_reversal_current_state := short_reversal_prev_state == 2 ? 0 : short_reversal_prev_state\nif short_cont_1 and short_reversal_current_state == 0\n    short_reversal_current_state := 1\n    short_reversal_current_state\nif short_cont_4 and short_reversal_current_state == 1\n    short_reversal_current_state := 2\n    short_reversal_current_state\n\nshort_reversal_signal = short_reversal_current_state == 2 ? true : false\n```\n\n----------------------------------------\n\nTITLE: Implementing a Multi-Symbol Technical Scanner in PineScript\nDESCRIPTION: A scanner implementation that processes multiple symbols to detect trading signals based on user-defined conditions. Includes signal detection, table generation, and result display functionalities with visual formatting.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Scanner] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_10\n\nLANGUAGE: PineScript\nCODE:\n```\n// Scanner Conditions\nbool short_cond =  \n i_scn_choose == 'Continuous Break' ? short_cont_break : \n i_scn_choose == 'Continuous Retracement' ? short_cont_ret : \n i_scn_choose == 'Flip Break' ? short_flip_break : \n i_scn_choose == 'Flip Retracement' ? short_flip_ret : \n i_scn_choose == 'Divergence' ? bearDiv : hiddenBearDiv\n\nbool long_cond = \n i_scn_choose == 'Continuous Break' ? long_cont_break : \n i_scn_choose == 'Continuous Retracement' ? long_cont_ret : \n i_scn_choose == 'Flip Break' ? long_flip_break : \n i_scn_choose == 'Flip Retracement' ? long_flip_ret : \n i_scn_choose == 'Divergence' ? bullDiv : hiddenBullDiv\n\n// Indicator Calculation Function \nindicator_calculation() =>\n    // Declare variables with var for persistence\n    var float price = na\n    var int _time = na\n    var float pchg = na\n    var float vol_pchg = na\n    var int signal = na\n\n    if barstate.isconfirmed\n        // Single-line signal assignment\n        signal := i_scn_show_long and long_cond ? 1 : i_scn_show_short and short_cond ? -1 : na\n\n        if not na(signal)\n            price := math.round_to_mintick(close)\n            _time := time\n            pchg := cum_pchg\n            vol_pchg := cum_vol_pchg\n            vol_pchg\n\n    [_time, price, pchg, vol_pchg, signal]\n\n// Time Formatting Function\nformat_time(x) =>\n    str.format_time(x, timeframe.isintraday ? 'HH:mm dd-MM-yyyy' : 'dd-MM-yyyy', syminfo.timezone)\n\n// Symbol Extraction Function\nticker_extract(s) =>\n    array.get(str.split(s, ':'), 1)\n\n// Matrix setup\nvar matrix = matrix.new<string>(0, 6, na)\n\n// Add Rows Function\nrows_to_matix(symbol, _time, price, pchg, vol_pchg, signal) =>\n    matrix.add_row(matrix, 0, array.from(symbol, _time, price, pchg, vol_pchg, signal))\n\n// Scanner Function\nscan(new_sym_arr) =>\n    for i = 0 to array.size(new_sym_arr) - 1 by 1\n        sym = ticker.modify(array.get(new_sym_arr, i), syminfo.session)\n        [_time, price, pchg, vol_pchg, signal] = request.security(sym, timeframe.period, indicator_calculation())\n        if not na(signal) and _time == time\n            rows_to_matix(\n                 ticker_extract(array.get(new_sym_arr, i)), \n                 format_time(_time), \n                 str.tostring(price), \n                 str.tostring(pchg, '#.##'), \n                 str.tostring(vol_pchg, '#.##'), \n                 str.tostring(signal))\n\n// Scan Symbols Array\nscan(new_sym_arr)\n\n// Trim excess rows in the matrix\nif matrix.rows(matrix) > i_scn_tbl_show_rows\n    while matrix.rows(matrix) > i_scn_tbl_show_rows\n        matrix.remove_row(matrix, matrix.rows(matrix) - 1)\n\n// Draw Table\nvar table tbl_scan = table.new(position = i_scn_tbl_pos, columns = 5, rows = 102, border_width = 1, force_overlay = true)\n\n// Cells Function\ncell_scan_title(int _column, int _row, string _title) =>\n    table.cell(table_id = tbl_scan, column = _column, row = _row, text = _title, text_color = i_neu_color, text_halign = text.align_center, bgcolor = i_neu_dark_color, text_size = i_scn_tbl_txt_size)\n\ncell_scan(col, row, txt, _text_color) =>\n    table.cell(tbl_scan, col, row, text = txt, text_color = _text_color, text_halign = text.align_left, bgcolor = i_neu_dark_color, text_size = i_scn_tbl_txt_size)\n\n// Scanner Table\nif barstate.islast and i_scn_show_table\n    // Clear existing data in the table\n    table.clear(table_id = tbl_scan, start_column = 0, start_row = 0, end_column = 2, end_row = 101)\n\n    cell_scan_title(0, 0, i_scn_choose)\n    table.merge_cells(table_id = tbl_scan, start_column = 0, start_row = 0, end_column = 4, end_row = 0)\n    cell_scan_title(0, 1, 'Symbol')\n    cell_scan_title(1, 1, 'Time')\n    cell_scan_title(2, 1, 'Price')\n    cell_scan_title(3, 1, '%Chg')\n    cell_scan_title(4, 1, 'V %Chg')\n\n    j = 4\n\n    // Populate table with matrix data\n    if matrix.rows(matrix) > 0\n```\n\n----------------------------------------\n\nTITLE: Implementing Signal Generation with State Machine in Pine Script\nDESCRIPTION: This snippet implements a state machine for generating continuous trading signals based on RSI crossovers and various filter conditions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Indicator] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_6\n\nLANGUAGE: Pine Script\nCODE:\n```\nvar int state = 0\nstate := nz(state[1]) == 3 or nz(state[1]) == 6 ? 0 : nz(state[1])\n\n// Short Conditions\nbool short_1 = \n ta.crossunder(rsi, breakdown) and \n rsi < rsi_ma and \n (state == 0 or state >= 4 and state <= 5)\n\nvar float short_1_low = na\nvar float short_1_rsi = na\nvar int short_1_bar = na\nif short_1\n    short_1_low := low\n    short_1_rsi := rsi\n    short_1_bar := bar_index\n\nbool short_2 = rsi > breakdown\n\nbool short_3 = \n not na(short_1_low) and \n rsi < breakdown and \n rsi < rsi_ma and \n close < short_1_low and \n pchg_above_filter and \n pchg_below_filter and \n vol_filter and \n vol_pchg_filter and \n atr_filter and \n body_filter and \n body_size_filter and \n volume_filter and \n rel_vol_filter and \n time_filter and \n date_filter and \n barstate.isconfirmed \n\n// Long Conditions\nlong_1 = \n ta.crossover(rsi, breakout) and\n```\n\n----------------------------------------\n\nTITLE: Implementing Supertrend Calculation and Plotting in PineScript\nDESCRIPTION: Calculates Supertrend values and direction, then plots the Supertrend lines on the chart with color-coded fill areas.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Indicator - Trend Following Setup - Sideways Market Skipper.txt#2025-04-16_snippet_1\n\nLANGUAGE: pinescript\nCODE:\n```\n[supertrend, direction] = ta.supertrend(i_st_factor, i_st_atr_period)\nsupertrend := barstate.isfirst ? na : supertrend\n\n// Plot Supertrend\nupTrend = plot(series=direction < 0 ? supertrend : na, title=\"Supertrend Up\", color=i_pos_color, style=plot.style_linebr, force_overlay=true)\ndownTrend = plot(series=direction < 0 ? na : supertrend, title=\"Supertrend Down\", color=i_neg_color, style=plot.style_linebr, force_overlay=true)\nbodyMiddle = plot(series=barstate.isfirst ? na : (open + close) / 2, title=\"Body Middle\", display=display.none, force_overlay=true)\nfill(plot1=bodyMiddle, plot2=upTrend, color=color.new(i_pos_color, 90), fillgaps=false)\nfill(plot1=bodyMiddle, plot2=downTrend, color=color.new(i_neg_color, 90), fillgaps=false)\n```\n\n----------------------------------------\n\nTITLE: Indicator Calculation for Pattern Screening in PineScript\nDESCRIPTION: Core function that calculates indicator values for pattern screening. It detects long and short momentum candles based on user-selected conditions, and returns time, price, cumulative percentage change, volume percentage change, and signal direction data.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Scanner - ICT Liquidity Sweep Pattern Scanner.txt#2025-04-16_snippet_12\n\nLANGUAGE: pine\nCODE:\n```\n// Function for Screener Indicator Calculation\nindicator_calculation() =>\n    // Initialize variables\n    price = float(na)\n    _time = int(na)\n    _cum_pchg = float(na)\n    _cum_vol_pchg = float(na)\n    signal = int(na) \n\n    if barstate.isconfirmed\n        // Check for Short Momentum Candle and conditions (Modify here to customize indicators)\n        if i_scr_show_long and long_cond\n            signal := 1\n\n        // Check for Long Momentum Candle and conditions (Modify here to customize indicators)\n        else if i_scr_show_short and short_cond\n            signal := -1\n\n        // Update price and time if signal is not null\n        if not na(signal)\n            price := math.round_to_mintick(close)\n            _time := time\n            _cum_pchg := cum_pchg\n            _cum_vol_pchg := cum_vol_pchg\n\n    [_time, price, _cum_pchg, _cum_vol_pchg, signal]\n```\n\n----------------------------------------\n\nTITLE: Implementing ICT Equal Highs and Lows Indicator in Pine Script\nDESCRIPTION: This Pine Script indicator identifies equal highs and lows on price charts using pivot points. It allows customization of pivot detection parameters, equality threshold percentage, and visual presentation. The indicator marks equal high/low areas with colored boxes and X-crosses to highlight potential trading opportunities based on ICT methodology.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Equal Highs and Lows/ICT Equal Highs and Lows Indicator.txt#2025-04-16_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\n// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\n// © Arun_K_Bhaskar\n\n//@version=5\ni_max_bars_back = 300\nindicator(title=\"ICT Equal Highs and Lows\", shorttitle=\"Equal HL\", overlay=true, max_bars_back=i_max_bars_back, max_lines_count=500, max_labels_count=500)\n\n//____________________________ Menu Pivot High Low Start\n\ng_phl_eq = '███████████████ Equal High Low ███████████████'\nint i_phl_1_left = input.int(defval=60, title='Left', group=g_phl_eq)\nint i_phl_1_right = input.int(defval=30, title='Right', group=g_phl_eq)\ntt_eq = \"Lower values mean highs and lows are closer.\"\nfloat i_phl_eq_percent = input.float(defval=0.05, minval=0, step=0.01, title='Equal HL %', tooltip=tt_eq, group=g_phl_eq) \nstring i_phl_1_source = input.string(defval='High/Low', title='Source', options=['High/Low', 'Open/Close'], group=g_phl_eq)\ncolor i_phl_1_h_ln_color = input.color(defval=#F7525F, title='Bearish Color', group=g_phl_eq)\ncolor i_phl_1_l_ln_color = input.color(defval=#22AB94, title='Bullish Color', group=g_phl_eq)\nint i_phl_eq_transp = input.int(defval=25, minval=0, title='Transparency', group=g_phl_eq) \n\n//____________________________ Menu Pivot High Low End\n\n//____________________________ Equal High Low Start\n\n// Get Source\nfloat _high = i_phl_1_source == 'Open/Close' ? math.max(open, close) : high\nfloat _low = i_phl_1_source == 'Open/Close' ? math.min(open, close) : low\n\n// Arrays to store the last 2 pivot highs and lows\nvar float[] ph_arr = array.new_float(2)\nvar int[] ph_bi_arr = array.new_int(2)\nvar float[] pl_arr = array.new_float(2)\nvar int[] pl_bi_arr = array.new_int(2)\n\n// Pivot calculations\nint prev_ph_bi = na, int prev_pl_bi = na\nbool ph = false, bool pl = false\n\nphl_1_ph = ta.pivothigh(_high, i_phl_1_left, i_phl_1_right)\nphl_1_pl = ta.pivotlow(_low, i_phl_1_left, i_phl_1_right)\n\n// Update the arrays with the last 2 pivot highs and lows\nif not na(phl_1_ph)\n    ph := true\n    prev_ph_bi := bar_index - i_phl_1_right\n    array.unshift(ph_bi_arr, bar_index)\n    array.pop(ph_bi_arr)\n\nif not na(phl_1_pl)\n    pl := true\n    prev_pl_bi := bar_index - i_phl_1_right\n    array.unshift(pl_bi_arr, bar_index)\n    array.pop(pl_bi_arr)\n\n// Function to update the arrays with the last 2 values\nupdate_arrays(value, array_ref) =>\n    array.unshift(array_ref, value)\n    array.pop(array_ref)\n\n// Update arrays with the last 2 pivot highs and lows\nif ph\n    update_arrays(phl_1_ph, ph_arr)\nif pl\n    update_arrays(phl_1_pl, pl_arr)\n\n// Get last two pivot highs and lows\nph_price_0 = array.get(ph_arr, 0), ph_price_1 = array.get(ph_arr, 1)\nph_bi_0 = array.get(ph_bi_arr, 0), ph_bi_1 = array.get(ph_bi_arr, 1)\n\npl_price_0 = array.get(pl_arr, 0), pl_price_1 = array.get(pl_arr, 1)\npl_bi_0 = array.get(pl_bi_arr, 0), pl_bi_1 = array.get(pl_bi_arr, 1)\n\n// Function to calculate percentage change\npchg(price_1, price_2) =>\n    change = price_1 - price_2\n    percent_change = math.abs((change / price_2) * 100)\n    percent_change\n\n// Calculate percentage change between the last two pivot highs and lows\nvar float ph_pchg = na\nvar float pl_pchg = na\n\nif array.size(ph_arr) >= 2\n    ph_pchg := pchg(array.get(ph_arr, 0), array.get(ph_arr, 1))\n\nif array.size(pl_arr) >= 2\n    pl_pchg := pchg(array.get(pl_arr, 0), array.get(pl_arr, 1))\n\n// Draw Equals Box\nvar levelBoxes_equal = array.new_box()\n\nph_condition = ph and ph_pchg < i_phl_eq_percent and barstate.isconfirmed\npl_condition = pl and pl_pchg < i_phl_eq_percent and barstate.isconfirmed\n\nif ph_condition\n    ph_box = box.new(left=ph_bi_1 - i_phl_1_right, top=ph_price_1, right=ph_bi_0 - i_phl_1_right, bottom=ph_price_0, border_color=color.new(i_phl_1_h_ln_color, i_phl_eq_transp), bgcolor=color.new(i_phl_1_h_ln_color, i_phl_eq_transp))\n    array.push(levelBoxes_equal, ph_box)\n\nif pl_condition\n    pl_box = box.new(left=pl_bi_1 - i_phl_1_right, top=pl_price_1, right=pl_bi_0 - i_phl_1_right, bottom=pl_price_0, border_color=color.new(i_phl_1_l_ln_color, i_phl_eq_transp), bgcolor=color.new(i_phl_1_l_ln_color, i_phl_eq_transp))\n    array.push(levelBoxes_equal, pl_box)\n\n// Plot Equal Labels\nplotshape(ph_condition ? high[i_phl_1_right] : na, style=shape.xcross, location=location.absolute, offset=-i_phl_1_right, color=color.new(i_phl_1_h_ln_color, i_phl_eq_transp), size=size.small)\nplotshape(pl_condition ? low[i_phl_1_right] : na, style=shape.xcross, location=location.absolute, offset=-i_phl_1_right, color=color.new(i_phl_1_l_ln_color, i_phl_eq_transp), size=size.small)\n\n//____________________________ Equal High Low End\n\n// _____________________________ Code End\n```\n\n----------------------------------------\n\nTITLE: Multi-Symbol Screener Implementation in PineScript\nDESCRIPTION: The screener function that processes each symbol to detect patterns. It requests security data for each ticker, calculates signals, and adds positive results to the matrix. The function is called for each of the 40 potential symbols.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Scanner - ICT Liquidity Sweep Pattern Scanner.txt#2025-04-16_snippet_15\n\nLANGUAGE: pine\nCODE:\n```\n// Screener function to collect data\nscreener(s) =>\n    sym = ticker.modify(s, syminfo.session)\n    [_time, price, _cum_pchg, _cum_vol_pchg, signal] = request.security(sym, timeframe.period, indicator_calculation())\n\n    // Check if the signal is not na and the time matches\n    if not na(signal) and _time == time\n        symbolName = symbol(s)\n        formattedTime = format_time(_time)\n        strPrice = str.tostring(price)\n        str_cum_pchg = str.tostring(_cum_pchg, '#.##')\n        str_cum_vol_pchg = str.tostring(_cum_vol_pchg, '#.##')\n        strSignal = str.tostring(signal)\n        \n        // Add data to the matrix\n        mtxFun(symbolName, formattedTime, strPrice, str_cum_pchg, str_cum_vol_pchg, strSignal)\n\n// Call Screener function for multiple symbols\nscreener(tid_01), screener(tid_02), screener(tid_03), screener(tid_04), screener(tid_05), screener(tid_06), screener(tid_07),\nscreener(tid_08), screener(tid_09), screener(tid_10), screener(tid_11), screener(tid_12), screener(tid_13), screener(tid_14),\nscreener(tid_15), screener(tid_16), screener(tid_17), screener(tid_18), screener(tid_19), screener(tid_20), screener(tid_21),\nscreener(tid_22), screener(tid_23), screener(tid_24), screener(tid_25), screener(tid_26), screener(tid_27), screener(tid_28),\nscreener(tid_29), screener(tid_30), screener(tid_31), screener(tid_32), screener(tid_33), screener(tid_34), screener(tid_35),\nscreener(tid_36), screener(tid_37), screener(tid_38), screener(tid_39), screener(tid_40)\n```\n\n----------------------------------------\n\nTITLE: Implementing MACD in PineScript\nDESCRIPTION: This code calculates the Moving Average Convergence Divergence (MACD) using the ta.macd() function with customizable parameters.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_8\n\nLANGUAGE: pinescript\nCODE:\n```\n[macdLine, signalLine, histLine] = ta.macd(close, i_macd_fast_len, i_macd_slow_len, i_macd_signal_len)\n```\n\n----------------------------------------\n\nTITLE: Implementing Long Position Trading Signals in PineScript\nDESCRIPTION: This code snippet defines various long position trading signals based on Fair Value Gaps. It implements conditions for detecting entry points and confirmations using price action relative to Fair Value Gap levels, with state machines to track multi-condition patterns.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_16\n\nLANGUAGE: pine\nCODE:\n```\n// Long Condition 1\nlong_cont_1 = \n isFVGUp and \n time_filter and\n date_filter and\n barstate.isconfirmed\n\n// Long Condition 2\nlong_cont_2 = \n ta.crossunder(low, isFVGUp_top) and \n time_filter and\n date_filter and\n barstate.isconfirmed\n\nvar long_cont_2_high = float(na)\nif long_cont_2\n    long_cont_2_high := high\n    long_cont_2_high\n\n// Long Condition 2 Confirmed\nlong_cont_2_conf = \n ta.crossover(close, long_cont_2_high) and \n time_filter and\n date_filter and\n barstate.isconfirmed\n\n// Long Condition 3\nlong_cont_3 = \n ta.crossunder(low, isFVGUp_bottom) and \n close > isFVGUp_bottom and\n time_filter and\n date_filter and\n barstate.isconfirmed\n\nvar long_cont_3_high = float(na)\nif long_cont_3\n    long_cont_3_high := high\n    long_cont_3_high\n    \n// Long Condition 3 Confirmed\nlong_cont_3_conf = \n ta.crossover(close, long_cont_3_high) and \n time_filter and\n date_filter and\n barstate.isconfirmed\n \n// Long Condition 4\nlong_cont_4 = \n ta.crossunder(close, isFVGUp_bottom) and \n time_filter and\n date_filter and\n barstate.isconfirmed\n\n// Long First Touch\nvar long_first_touch_current_state = 0\nlong_first_touch_prev_state = nz(long_first_touch_current_state[1])\nlong_first_touch_current_state := long_first_touch_prev_state == 2 ? 0 : long_first_touch_prev_state\nif long_cont_1 and long_first_touch_current_state == 0\n    long_first_touch_current_state := 1\n    long_first_touch_current_state\nif long_cont_2 and long_first_touch_current_state == 1\n    long_first_touch_current_state := 2\n    long_first_touch_current_state\n\nlong_first_touch_signal = long_first_touch_current_state == 2 ? true : false\n\n// Long First Touch Confirmed\nvar long_first_touch_conf_current_state = 0\nlong_first_touch_conf_prev_state = nz(long_first_touch_conf_current_state[1])\nlong_first_touch_conf_current_state := long_first_touch_conf_prev_state == 3 ? 0 : long_first_touch_conf_prev_state\nif long_cont_1 and long_first_touch_conf_current_state == 0\n    long_first_touch_conf_current_state := 1\n    long_first_touch_conf_current_state\nif long_cont_2 and long_first_touch_conf_current_state == 1\n    long_first_touch_conf_current_state := 2\n    long_first_touch_conf_current_state\nif long_cont_2_conf and long_first_touch_conf_current_state == 2\n    long_first_touch_conf_current_state := 3\n    long_first_touch_conf_current_state\n\nlong_first_touch_conf_signal = long_first_touch_conf_current_state == 3 ? true : false\n\n// Long Full Fill\nvar long_full_fill_current_state = 0\nlong_full_fill_prev_state = nz(long_full_fill_current_state[1])\nlong_full_fill_current_state := long_full_fill_prev_state == 2 ? 0 : long_full_fill_prev_state\nif long_cont_1 and long_full_fill_current_state == 0\n    long_full_fill_current_state := 1\n    long_full_fill_current_state\nif long_cont_3 and long_full_fill_current_state == 1\n    long_full_fill_current_state := 2\n    long_full_fill_current_state\n\nlong_full_fill_signal = long_full_fill_current_state == 2 ? true : false\n\n// Long Full Fill Confirmed\nvar long_full_fill_conf_current_state = 0\nlong_full_fill_conf_prev_state = nz(long_full_fill_conf_current_state[1])\nlong_full_fill_conf_current_state := long_full_fill_conf_prev_state == 3 ? 0 : long_full_fill_conf_prev_state\nif long_cont_1 and long_full_fill_conf_current_state == 0\n    long_full_fill_conf_current_state := 1\n    long_full_fill_conf_current_state\nif long_cont_3 and long_full_fill_conf_current_state == 1\n    long_full_fill_conf_current_state := 2\n    long_full_fill_conf_current_state\nif long_cont_3_conf and long_full_fill_conf_current_state == 2\n    long_full_fill_conf_current_state := 3\n    long_full_fill_conf_current_state\n\nlong_full_fill_conf_signal = long_full_fill_conf_current_state == 3 ? true : false\n\n// Long Reversal\nvar long_reversal_current_state = 0\nlong_reversal_prev_state = nz(long_reversal_current_state[1])\nlong_reversal_current_state := long_reversal_prev_state == 2 ? 0 : long_reversal_prev_state\nif long_cont_1 and long_reversal_current_state == 0\n    long_reversal_current_state := 1\n    long_reversal_current_state\nif long_cont_4 and long_reversal_current_state == 1\n    long_reversal_current_state := 2\n    long_reversal_current_state\n\nlong_reversal_signal = long_reversal_current_state == 2 ? true : false\n```\n\n----------------------------------------\n\nTITLE: Creating Matrix and Row Addition Function in PineScript\nDESCRIPTION: Initializes a matrix to store screener data and defines a function to add rows to the matrix with symbol information, time, gap percentage, cumulative percentage changes, and trading signals.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_23\n\nLANGUAGE: PineScript\nCODE:\n```\n// Matrix setup\nvar matrix = matrix.new<string>(0, 6, na)\n\n// Function to add rows to the matrix\nmtxFun(symbol, _time, gap_percent, _cum_pchg, _cum_vol_pchg, signal) =>\n    matrix.add_row(matrix, 0, array.from(symbol, _time, gap_percent, _cum_pchg, _cum_vol_pchg, signal))\n```\n\n----------------------------------------\n\nTITLE: Implementing Candlestick Patterns Screener in PineScript\nDESCRIPTION: This code implements a candlestick patterns screener that can analyze multiple symbols simultaneously. It uses a matrix to store and display results, and allows for customization of screening methods and display options.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_22\n\nLANGUAGE: pine\nCODE:\n```\n// Choose Screening Method\nbear_method = \n i_scr_choose == 'Continuous Signals' ? short_ret_trigger : \n i_scr_choose == 'Flip Signals' ? short_entry : na\n\nbull_method = \n i_scr_choose == 'Continuous Signals' ? long_ret_trigger : \n i_scr_choose == 'Flip Signals' ? long_entry : na\n\n// Screener Conditions\nbearish_cond = bear_method\nbullish_cond = bull_method \n\n// Define Bull and Bear Conditions\nbull = not(i_scr_direction == \"Short\")\nbear = not(i_scr_direction == \"Long\")\n\n// Function for Screener Indicator Calculation\nindicator_calculation() =>\n    // Initialize variables\n    price = float(na)\n    _time = int(na)\n    signal = int(na) \n\n    if barstate.isconfirmed\n        // Check for Short Momentum Candle and conditions (Modify here to customize indicators)\n        if i_scr_show_bull and bearish_cond and bear \n            signal := -1\n\n        // Check for Long Momentum Candle and conditions (Modify here to customize indicators)\n        else if i_scr_show_bear and bullish_cond and bull\n            signal := 1\n\n        // Update price and time if signal is not null\n        if not na(signal)\n            price := math.round_to_mintick(close)\n            _time := time\n\n    [_time, price, signal]\n\n// Function to format time\nformat_time(x) =>\n    timezone = syminfo.timezone\n    timeframe.isintraday ? str.format_time(x, \"HH:mm  dd-MM-yyyy\", timezone) : str.format_time(x, \"dd-MM-yyyy\", timezone)\n\n// Function to extract symbol name\nsymbol(s) => \n    array.get(str.split(s, \":\"), 1)\n\n// Matrix setup\nvar matrix = matrix.new<string>(0, 4, na)\n\n// Function to add rows to the matrix\nmtxFun(symbol, _time, price, signal) =>\n    matrix.add_row(matrix, 0, array.from(symbol, _time, price, signal))\n\n// Screener function to collect data\nscreener(s) =>\n    sym = ticker.modify(s, syminfo.session)\n    [_time, price, signal] = request.security(sym, timeframe.period, indicator_calculation())\n\n    // Check if the signal is not na and the time matches\n    if not na(signal) and _time == time\n        symbolName = symbol(s)\n        formattedTime = format_time(_time)\n        strPrice = str.tostring(price)\n        strSignal = str.tostring(signal)\n        \n        // Add data to the matrix\n        mtxFun(symbolName, formattedTime, strPrice, strSignal)\n\n// Call Screener function for multiple symbols\nscreener(tid_01), screener(tid_02), screener(tid_03), screener(tid_04), screener(tid_05), screener(tid_06), screener(tid_07),\nscreener(tid_08), screener(tid_09), screener(tid_10), screener(tid_11), screener(tid_12), screener(tid_13), screener(tid_14),\nscreener(tid_15), screener(tid_16), screener(tid_17), screener(tid_18), screener(tid_19), screener(tid_20), screener(tid_21),\nscreener(tid_22), screener(tid_23), screener(tid_24), screener(tid_25), screener(tid_26), screener(tid_27), screener(tid_28),\nscreener(tid_29), screener(tid_30), screener(tid_31), screener(tid_32), screener(tid_33), screener(tid_34), screener(tid_35),\nscreener(tid_36), screener(tid_37), screener(tid_38), screener(tid_39), screener(tid_40)\n\n// Trim excess rows in the matrix\nif matrix.rows(matrix) > i_scr_tbl_disp_rows\n    while matrix.rows(matrix) > i_scr_tbl_disp_rows\n        matrix.remove_row(matrix, matrix.rows(matrix)-1)\n\n// Plot Table\n// Create table with specified properties\nvar table scr_tbl = table.new(position=i_scr_tbl_position, columns=3, rows=102, border_width=1)\n\n// Function to populate cells in the table\nscr_cell_title(col, row, txt) => \n    table.cell(scr_tbl, col, row, text = txt, text_color = i_neu_color, text_halign=text.align_center, bgcolor = color.new(i_neu_color, 90), text_size=i_scr_tbl_text_size)\n\nscr_cell(col, row, txt, color) => \n    table.cell(scr_tbl, col, row, text = txt, text_color = color, text_halign=text.align_left, bgcolor = color.new(color, 90), text_size=i_scr_tbl_text_size)\n\n// Check if it's the last bar\nif barstate.islast\n    // Clear existing data in the table\n    table.clear(scr_tbl, 0, 0, 2, 101)\n\n    scr_cell_title(0, 0, i_scr_choose)\n    table.merge_cells(table_id=scr_tbl, start_column=0, start_row=0, end_column=2, end_row=0)\n    scr_cell_title(0, 1, \"Symbol\")\n    scr_cell_title(1, 1, \"Time\")\n    scr_cell_title(2, 1, \"Price\")\n\n    j = 2\n    // Populate table with matrix data\n    if matrix.rows(matrix) > 0\n        for i = 0 to matrix.rows(matrix) - 1\n            // Determine color based on the signal\n            col = matrix.get(matrix, i, 3) ==  \"1\" ? i_pos_color :\n                  matrix.get(matrix, i, 3) == \"-1\" ? i_neg_color : i_neu_color\n\n            // Populate cells in the table\n            scr_cell(0, j, matrix.get(matrix, i, 0), col)\n            scr_cell(1, j, matrix.get(matrix, i, 1), col)\n            scr_cell(2, j, matrix.get(matrix, i, 2), col)\n\n            j += 1\n```\n\n----------------------------------------\n\nTITLE: Implementing RSI Directional Momentum Scanner in PineScript v6\nDESCRIPTION: This code creates a PineScript indicator for scanning multiple symbols for momentum setups based on RSI patterns. It supports various trading methods including Continuous Break, Retracement, Flip Break, Divergence, and Hidden Divergence with customizable parameters and filtering options.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Scanner] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\n// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\n// © Arun_K_Bhaskar\n\n//@version=6\nindicator(title = 'Momentum Setup - RSI Directional Momentum Scanner', shorttitle = 'RSIDMScan', behind_chart = false)\n\n//___________________________ Menu Start\n\nstring g_scn_tb = '█████████████████ Scanner █████████████████'\n\nstring tt_ch = \n \"Continuous Break:\" + \n \"\\n• Buy: RSI crosses above 60, dips below, then breaks the previous high while staying above 60.\" + \n \"\\n• Sell: RSI crosses below 40, rises above, then breaks the previous low while staying below 40.\" +\n\n \"\\n\\n Continuous Retracement:\" + \n \"\\n• After a Continuous Break, a Fibonacci level is set.\" +\n \"\\n• Buy: Price retraces to this level and bounces.\" +\n \"\\n• Sell: Price retraces to this level and drops.\" +\n\n \"\\n\\n Flip Break:\" + \n \"\\n• If a Continuous Break fails, the trade flips (Long → Short, Short → Long).\" + \n\n \"\\n\\n Flip Retracement:\" + \n \"\\n• If a Continuous Retracement fails, the trade flips (Long → Short, Short → Long).\" + \n\n \"\\n\\n Divergence:\" + \n \"\\n• Buy: Price makes a lower low, RSI makes a higher low.\" + \n \"\\n• Sell: Price makes a higher high, RSI makes a lower high.\" + \n\n \"\\n\\n Hidden Divergence (Trend continuation):\" + \n \"\\n• Buy: Price makes a higher low, RSI makes a lower low.\" + \n \"\\n• Sell: Price makes a lower high, RSI makes a higher high.\"\n\nstring tt_is = \n \"• Reads only the first 40 symbols.\" + \n \"\\n• Max 4096 characters.\" + \n \"\\n• Format: EXCHANGE:SYMBOL_A,EXCHANGE:SYMBOL_B\"\n\nstring i_scn_choose = input.string(\n defval = 'Continuous Break', \n title = 'Scanning Method', \n options = ['Continuous Break', 'Continuous Retracement', 'Flip Break', 'Flip Retracement', 'Divergence', 'Hidden Divergence'], tooltip = tt_ch, group = g_scn_tb)\n\nstring i_symbols = input.text_area(\n defval = 'NSE:ABCAPITAL,NSE:ABFRL,NSE:ASHOKLEY,NSE:BANDHANBNK,NSE:BANKBARODA,NSE:BANKINDIA,NSE:BEL,NSE:BHEL,NSE:BIOCON,NSE:BPCL,NSE:CESC,NSE:DELHIVERY,NSE:FEDERALBNK,NSE:GAIL,NSE:HINDCOPPER,NSE:HUDCO,NSE:IEX,NSE:IGL,NSE:IIFL,NSE:INDUSTOWER,NSE:IOC,NSE:IREDA,NSE:IRFC,NSE:JIOFIN,NSE:LTF,NSE:MANAPPURAM,NSE:MOTHERSON,NSE:M_MFIN,NSE:NATIONALUM,NSE:NCC,NSE:NYKAA,NSE:ONGC,NSE:PETRONET,NSE:POONAWALLA,NSE:POWERGRID,NSE:RBLBANK,NSE:SAIL,NSE:TATASTEEL,NSE:UNIONBANK,NSE:ZOMATO', \n title = 'Paste Symbols', tooltip = tt_is, group = g_scn_tb)\n\nbool i_scn_show_table = input.bool(defval = true, title = 'Display Table', group = g_scn_tb)\nbool i_scn_show_long = input.bool(defval = true, title = 'Long Signals', inline = 'tb_2', group = g_scn_tb)\nbool i_scn_show_short = input.bool(defval = true, title = 'Short Signals', inline = 'tb_2', group = g_scn_tb)\n\nint i_scn_tbl_show_rows = input.int(defval = 12, title = 'Display Rows', minval = 0, maxval = 100, group = g_scn_tb)\nstring i_scn_tbl_pos = input.string(defval = position.bottom_left, title = 'Table Position', options = [position.top_left, position.top_center, position.top_right, position.middle_left, position.middle_center, position.middle_right, position.bottom_left, position.bottom_center, position.bottom_right], group = g_scn_tb)\nstring i_scn_tbl_txt_size = input.string(defval = size.small, title = 'Table Size', options = [size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group = g_scn_tb)\n\nstring g_rsi = '██████████ Relative Strength Index (RSI) ██████████'\nstring tt_ret_fib = \n \"• 0: Bottom of bullish & top of bearish breaking candle.\" + \n \"\\n• 1: Top of bullish & bottom of bearish breaking candle.\" + \n \"\\n• 0.5: 50% of the breaking candle.\"\nint i_rsi_len = input.int(defval = 14, title = 'RSI Length', minval = 1, group = g_rsi)\nfloat i_rsi_src = input.source(defval = close, title = 'RSI Source', group = g_rsi)\nint i_rsi_ma_len = input.int(defval = 14, title = 'SMA Length', minval = 1, group = g_rsi)\nfloat i_rsi_fib_val = input.float(defval = 0.5, title = 'Fib Value', step = 0.1, tooltip = tt_ret_fib, group = g_rsi)\nbool i_rsi_show_bull = input.bool(defval = true, title = 'Display Bullish Divergence', group = g_rsi)\nbool i_rsi_show_bear = input.bool(defval = true, title = 'Display Bearish Divergence', group = g_rsi)\nbool i_rsi_show_hbull = input.bool(defval = true, title = 'Display Hidden Bullish Divergence', group = g_rsi)\nbool i_rsi_show_hbear = input.bool(defval = true, title = 'Display Hidden Bearish Divergence', group = g_rsi)\nint i_rsi_p_right = input.int(defval = 5, title = 'Pivot Lookback Right', group = g_rsi)\nint i_rsi_p_left = input.int(defval = 5, title = 'Pivot Lookback Left', group = g_rsi)\nint i_rsi_range_max = input.int(defval = 60, title = 'Max of Lookback Range', group = g_rsi)\nint i_rsi_range_min = input.int(defval = 5, title = 'Min of Lookback Range', group = g_rsi)\n\nstring g_af = '██████████████ Additional Fiters ██████████████'\n\nstring tt_pchg = \n \"• Percentage change of the day.\" \nstring tt_vpchg = \n \"• 0% means today's volume must exceed the previous day's.\" + \n \"\\n• 300%+ often signals a major breakout (today or next day).\"\nstring tt_atr = \"• Filters out longer or more volatile signal candles.\"\nstring tt_atr_mul = \"• Higher values filter longer or more volatile candles.\"\nstring tt_bf = \"• 80 means the body covers 80%+ of the candle.\"\nstring tt_bs = \"• 2 means the candle is twice the size of the previous one.\"\nstring tt_vol = \"• Filter candles with volume > SMA of volume.\"\nstring tt_rv = \"• Filter candles with volume > Relative Volume.\"\nstring tt_tf = \"• Filter signals within a given time.\"\nstring tt_df = \"• Filter signals on specified dates (for Break Candles (2) only).\"\n\nbool i_pchg_filter = input.bool(defval = false, title = 'Apply % Change Filter', tooltip = tt_pchg, group = g_af)\nfloat i_pchg_above_below = input.float(defval = 2, title = '% Change Above/Below +/-', minval = 0, group = g_af)\n\nbool i_vol_filter = input.bool(defval = false, title = 'Apply Volume Filter', tooltip = tt_vpchg, group = g_af)\nint i_vol_above = input.int(defval = 500000, title = 'Volume Above', minval = 0, group = g_af)\n\nbool i_vol_pchg_filter = input.bool(defval = false, title = 'Apply Volume % Change Filter', tooltip = tt_vpchg, group = g_af)\nfloat i_vol_pchg_above = input.float(defval = 0, title = 'Volume % Change Above', minval = 0, group = g_af)\n\nbool i_atr_filter = input.bool(defval = false, title = 'Apply ATR Filter', tooltip = tt_atr, group = g_af)\nint i_atr_length = input.int(defval = 14, minval = 1, title = 'ATR Length', group = g_af)\nfloat i_atr_multi = input.float(defval = 1, title = 'ATR Multiplier', minval = 1, group = g_af)\n\nbool i_body_filter = input.bool(defval = false, title = 'Apply Body % Filter', tooltip = tt_bf, group = g_af)\nfloat i_body_percent = input.float(defval = 70, title = 'Body % Above', minval = 0, maxval = 100, group = g_af) / 100\n\nbool i_body_size_filter = input.bool(defval = false, title = 'Apply Body Size Filter', tooltip = tt_bs, group = g_af)\nint i_body_size_multi = input.int(defval = 2, title = 'Body Size Multiplier (x)', minval = 0, group = g_af)\n\nbool i_volume_filter = input.bool(defval = false, title = 'Apply Volume Filter', tooltip = tt_vol, group = g_af)\nint i_vol_sma_length = input.int(defval = 20, minval = 1, title = 'Volume SMA Length', group = g_af)\n\nbool i_rel_vol_filter = input.bool(defval = false, title = 'Apply Relative Volume Filter', tooltip = tt_rv, group = g_af)\nint i_rel_vol_avg_vol_len = input.int(defval = 90, title = 'Relative Volume Length', minval = 2, group = g_af)\nfloat i_rel_vol_avg_vol_multi = input.float(defval = 5, title = 'Rel Vol SMA Multiplier', minval = 0, group = g_af)\n\nbool i_time_filter = input.bool(defval = false, title = 'Apply Time Filter', tooltip = tt_tf, group = g_af)\nint i_hour_1 = input.int(defval = 9, minval = 0, title = 'Time From', inline = 't_1', group = g_af)\nint i_minute_1 = input.int(defval = 15, minval = 0, title = ':', inline = 't_1', group = g_af)\nint i_hour_2 = input.int(defval = 10, minval = 0, title = 'Time To ', inline = 't_2', group = g_af)\nint i_minute_2 = input.int(defval = 15, minval = 0, title = ':', inline = 't_2', group = g_af)\n\nbool i_date_filter = input.bool(defval = false, title = 'Apply Date Filter', tooltip = tt_df, group = g_af)\nint i_day = input.int(defval = 25, minval = 1, maxval = 31, title = 'Day', group = g_af)\nint i_month = input.int(defval = 10, minval = 1, maxval = 12, title = 'Month', group = g_af)\nint i_year = input.int(defval = 2024, minval = 0, title = 'Year', group = g_af)\n\nstring g_cum = '█████████████ Performance Table █████████████'\nbool i_cum_tbl_disp = input.bool(defval = true, title = 'Display', group = g_cum)\nstring i_cum_tbl_pos = input.string(defval = position.bottom_right, title = 'Position', options = [position.top_left, position.top_center, position.top_right, position.middle_left, position.middle_center, position.middle_right, position.bottom_left, position.bottom_center, position.bottom_right], group = g_cum)\nstring i_cum_tbl_size = input.string(defval = size.normal, title = 'Size', options = [size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group = g_cum)\n\n//string g_ch = '█████████████████ Colors █████████████████'\ncolor i_pos_color = #089981 //input.color(defval = #089981, title = 'Positive', group = g_ch)\ncolor i_pos_light_color = #70CCBD //input.color(defval = #70CCBD, title = 'Positive Light', group = g_ch)\ncolor i_neg_light_color = #FAA1A4 //input.color(defval = #FAA1A4, title = 'Negative Light', group = g_ch)\ncolor i_neg_color = #F23645 //input.color(defval = #F23645, title = 'Negative', group = g_ch)\ncolor i_indicator_color = #2962FF //input.color(defval = #2962FF, title = 'Indicator', group = g_ch)\ncolor i_signal_color = #FF6D00 //input.color(defval = #FF6D00, title = 'Signal', group = g_ch)\ncolor i_neu_color = #D1D4DC //input.color(defval = #D1D4DC, title = 'Neutral Light', group = g_ch)\n```\n\n----------------------------------------\n\nTITLE: Implementing ICT Equal Highs and Lows with Screener in Pine Script\nDESCRIPTION: This Pine Script indicator identifies and visualizes equal highs and lows on price charts with a built-in screener for multiple symbols. It allows customization of pivot detection parameters, visualization settings, and screening criteria for bullish and bearish setups.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Equal Highs and Lows/ICT Equal Highs and Lows with Screener.txt#2025-04-16_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\n// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\n// © Arun_K_Bhaskar\n\n//@version=5\ni_max_bars_back = 300\nindicator(title=\"ICT Equal Highs and Lows with Screener\", shorttitle=\"Equal HL Scr\", overlay=true, max_bars_back=i_max_bars_back, max_lines_count=500, max_labels_count=500)\n\n//_____________________________ Menu Screener Start\n\ng_tb = '█████████████████ Screener █████████████████'\n\nstring i_scr_choose = input.string(defval='Equals', title='Screening Method', options=['Equals', 'Equals Sweep'], group=g_tb)\n\ntt_is = \"• Input exactly 40 symbols, nothing more or less.\" +\n     \"\\n• Total characters cannot exceed 4096.\" +\n     \"\\n• Use comma as delimiter without any space.\" +\n     \"\\n• Eg: EXCHANGE:SYMBOL_A,EXCHANGE:SYMBOL_B\"\nstring i_symbols = input.text_area(\n defval=\"NSE:AEGISCHEM,NSE:BANKINDIA,NSE:BHEL,NSE:BLS,NSE:CASTROLIND,NSE:CESC,NSE:ENGINERSIN,NSE:EQUITASBNK,NSE:FSL,NSE:GICRE,NSE:GPPL,NSE:GSPL,NSE:HFCL,NSE:HINDCOPPER,NSE:HUDCO,NSE:IBULHSGFIN,NSE:INDIACEM,NSE:INDUSTOWER,NSE:IOC,NSE:IRCON,NSE:IRFC,NSE:KARURVYSYA,NSE:NATIONALUM,NSE:NETWORK18,NSE:NIACL,NSE:NLCINDIA,NSE:PCBL,NSE:PFC,NSE:PNB,NSE:PNCINFRA,NSE:RVNL,NSE:SAIL,NSE:SJVN,NSE:TTML,NSE:UNIONBANK,NSE:USHAMART,NSE:VAIBHAVGBL,NSE:WELSPUNLIV,NSE:ZEEL,NSE:ZOMATO,\",\n title=\"Paste Symbols\", tooltip=tt_is, group=g_tb)\n\nstring i_scr_direction = input.string(defval='Both', title='Direction', options=['Both', 'Bullish', 'Bearish'], inline='tb_1', group=g_tb)\nbool i_scr_show_bull  = input.bool(defval=true, title='Only Bullish', inline='tb_2', group=g_tb)\nbool i_scr_show_bear  = input.bool(defval=true, title='Only Bearish', inline='tb_2', group=g_tb)\n\nint i_tbl_disp_rows = input.int(defval=16, title='Display Rows', minval=0, maxval=100, group=g_tb)\nstring i_tbl_position = input.string(defval=position.bottom_left, title='Table Position', options=[position.top_left, position.top_center, position.top_right, position.middle_left, position.middle_center, position.middle_right, position.bottom_left, position.bottom_center, position.bottom_right], group=g_tb)\nstring i_tbl_text_size = input.string(defval=size.small, title='Table Size', options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group=g_tb)\n\n//_____________________________ Menu Screener End\n\n//____________________________ Menu Pivot High Low Start\n\ng_phl_eq = '███████████████ Equal High Low ███████████████'\nint i_phl_1_left = input.int(defval=60, title='Left', group=g_phl_eq)\nint i_phl_1_right = input.int(defval=30, title='Right', group=g_phl_eq)\ntt_eq = \"Lower values mean highs and lows are closer.\"\nfloat i_phl_eq_percent = input.float(defval=0.05, minval=0, step=0.01, title='Equal HL %', tooltip=tt_eq, group=g_phl_eq) \nstring i_phl_1_source = input.string(defval='High/Low', title='Source', options=['High/Low', 'Open/Close'], group=g_phl_eq)\ncolor i_phl_1_h_ln_color = input.color(defval=#F7525F, title='Bearish Color', group=g_phl_eq)\ncolor i_phl_1_l_ln_color = input.color(defval=#22AB94, title='Bullish Color', group=g_phl_eq)\ncolor i_phl_txt_color = input.color(defval=#B2B5BE, title='Neutral Color', group=g_phl_eq)\nint i_phl_eq_transp = input.int(defval=25, minval=0, title='Transparency', group=g_phl_eq) \n\n//____________________________ Menu Pivot High Low End\n\n//____________________________ Equal High Low Start\n\n// Get Source\nfloat _high = i_phl_1_source == 'Open/Close' ? math.max(open, close) : high\nfloat _low = i_phl_1_source == 'Open/Close' ? math.min(open, close) : low\n\n// Arrays to store the last 2 pivot highs and lows\nvar float[] ph_arr = array.new_float(2)\nvar int[] ph_bi_arr = array.new_int(2)\nvar float[] pl_arr = array.new_float(2)\nvar int[] pl_bi_arr = array.new_int(2)\n\n// Pivot calculations\nint prev_ph_bi = na, int prev_pl_bi = na\nbool ph = false, bool pl = false\n\nphl_1_ph = ta.pivothigh(_high, i_phl_1_left, i_phl_1_right)\nphl_1_pl = ta.pivotlow(_low, i_phl_1_left, i_phl_1_right)\n\n// Update the arrays with the last 2 pivot highs and lows\nif not na(phl_1_ph)\n    ph := true\n    prev_ph_bi := bar_index - i_phl_1_right\n    array.unshift(ph_bi_arr, bar_index)\n    array.pop(ph_bi_arr)\n\nif not na(phl_1_pl)\n    pl := true\n    prev_pl_bi := bar_index - i_phl_1_right\n    array.unshift(pl_bi_arr, bar_index)\n    array.pop(pl_bi_arr)\n\n// Function to update the arrays with the last 2 values\nupdate_arrays(value, array_ref) =>\n    array.unshift(array_ref, value)\n    array.pop(array_ref)\n\n// Update arrays with the last 2 pivot highs and lows\nif ph\n    update_arrays(phl_1_ph, ph_arr)\nif pl\n    update_arrays(phl_1_pl, pl_arr)\n\n// Get last two pivot highs and lows\nph_price_0 = array.get(ph_arr, 0), ph_price_1 = array.get(ph_arr, 1)\nph_bi_0 = array.get(ph_bi_arr, 0), ph_bi_1 = array.get(ph_bi_arr, 1)\n\npl_price_0 = array.get(pl_arr, 0), pl_price_1 = array.get(pl_arr, 1)\npl_bi_0 = array.get(pl_bi_arr, 0), pl_bi_1 = array.get(pl_bi_arr, 1)\n\n// Function to calculate percentage change\npchg(price_1, price_2) =>\n    change = price_1 - price_2\n    percent_change = math.abs((change / price_2) * 100)\n    percent_change\n\n// Calculate percentage change between the last two pivot highs and lows\nvar float ph_pchg = na\nvar float pl_pchg = na\n\nif array.size(ph_arr) >= 2\n    ph_pchg := pchg(array.get(ph_arr, 0), array.get(ph_arr, 1))\n\nif array.size(pl_arr) >= 2\n    pl_pchg := pchg(array.get(pl_arr, 0), array.get(pl_arr, 1))\n\n// Draw Equals Box\nvar levelBoxes_equal = array.new_box()\n\nph_condition = ph and ph_pchg < i_phl_eq_percent and barstate.isconfirmed\npl_condition = pl and pl_pchg < i_phl_eq_percent and barstate.isconfirmed\n\nif ph_condition\n    ph_box = box.new(left=ph_bi_1 - i_phl_1_right, top=ph_price_1, right=ph_bi_0 - i_phl_1_right, bottom=ph_price_0, border_color=color.new(i_phl_1_h_ln_color, i_phl_eq_transp), bgcolor=color.new(i_phl_1_h_ln_color, i_phl_eq_transp))\n    array.push(levelBoxes_equal, ph_box)\n\nif pl_condition\n    pl_box = box.new(left=pl_bi_1 - i_phl_1_right, top=pl_price_1, right=pl_bi_0 - i_phl_1_right, bottom=pl_price_0, border_color=color.new(i_phl_1_l_ln_color, i_phl_eq_transp), bgcolor=color.new(i_phl_1_l_ln_color, i_phl_eq_transp))\n    array.push(levelBoxes_equal, pl_box)\n\n// Plot Equal Labels\nplotshape(ph_condition ? high[i_phl_1_right] : na, style=shape.xcross, location=location.absolute, offset=-i_phl_1_right, color=color.new(i_phl_1_h_ln_color, i_phl_eq_transp), size=size.small)\nplotshape(pl_condition ? low[i_phl_1_right] : na, style=shape.xcross, location=location.absolute, offset=-i_phl_1_right, color=color.new(i_phl_1_l_ln_color, i_phl_eq_transp), size=size.small)\n\n//____________________________ Equal High Low End\n\n//____________________________ Get Symbols for Screener Start\n\n// Acknowledgement & Reference\n// Trader: 'allanster'\n// Indicator Title: 'How To Input CSV List Of Symbol Data Used For Screener'\n// Indicator Link: 'https://www.tradingview.com/script/KfqHqHUH-How-To-Input-CSV-List-Of-Symbol-Data-Used-For-Screener/'\n\nfeed(back) =>                                             // extract tickerid and decrement list of ticker IDs\n    loop  = back                                          // declare string variable to hold content list\n    getT  = string(na)                                    // declare string variable to hold tickerid\n    if str.length(loop) == 0                              // if list is empty\n        getT := string(na)                                // assign na to tickerid variable\n        loop := string(na)                                // assign na to list of ticker Ids variable\n    else                                                  // else extract first tickerid\n        getP  = nz(str.pos(loop, ','), str.length(loop))  // get position of first comma or last character\n        getT := str.substring(loop, 0, getP)              // get tickerid in first position of list\n        loop := str.replace(loop, getT + ',', '')         // clear tickerid + delimiter character from list\n    [getT, loop]                                          // return tickerid in first position & truncated list\n\n[tid_001, out_001] = feed(i_symbols), [tid_002, out_002] = feed(out_001), [tid_003, out_003] = feed(out_002), [tid_004, out_004] = feed(out_003),\n[tid_005, out_005] = feed(out_004), [tid_006, out_006] = feed(out_005), [tid_007, out_007] = feed(out_006), [tid_008, out_008] = feed(out_007),\n[tid_009, out_009] = feed(out_008), [tid_010, out_010] = feed(out_009), [tid_011, out_011] = feed(out_010), [tid_012, out_012] = feed(out_011),\n[tid_013, out_013] = feed(out_012), [tid_014, out_014] = feed(out_013), [tid_015, out_015] = feed(out_014), [tid_016, out_016] = feed(out_015),\n[tid_017, out_017] = feed(out_016), [tid_018, out_018] = feed(out_017), [tid_019, out_019] = feed(out_018), [tid_020, out_020] = feed(out_019),\n[tid_021, out_021] = feed(out_020), [tid_022, out_022] = feed(out_021), [tid_023, out_023] = feed(out_022), [tid_024, out_024] = feed(out_023),\n[tid_025, out_025] = feed(out_024), [tid_026, out_026] = feed(out_025), [tid_027, out_027] = feed(out_026), [tid_028, out_028] = feed(out_027),\n[tid_029, out_029] = feed(out_028), [tid_030, out_030] = feed(out_029), [tid_031, out_031] = feed(out_030), [tid_032, out_032] = feed(out_031),\n[tid_033, out_033] = feed(out_032), [tid_034, out_034] = feed(out_033), [tid_035, out_035] = feed(out_034), [tid_036, out_036] = feed(out_035),\n[tid_037, out_037] = feed(out_036), [tid_038, out_038] = feed(out_037), [tid_039, out_039] = feed(out_038), [tid_040, out_040] = feed(out_039)\n\n//____________________________ Get Symbols for Screener End\n\n// _____________________________ Screener Start\n\n// Acknowledgement & Reference\n// Trader: 'MUQWISHI'\n// Indicator Title: 'Candlestick Patterns Screener [By MUQWISHI]'\n```\n\n----------------------------------------\n\nTITLE: State Machine Implementation for Signal Generation in PineScript\nDESCRIPTION: Implements a state machine to track the progression of trading signals through different conditions. The machine transitions between states based on RSI crossovers and price action, enabling precise signal generation for both long and short positions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Scanner] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\n// State Machine for Continuous Signals\nvar int state = 0\nstate := nz(state[1]) == 3 or nz(state[1]) == 6 ? 0 : nz(state[1])\n\n// Short Conditions\nbool short_1 = \n ta.crossunder(rsi, breakdown) and \n rsi < rsi_ma and \n (state == 0 or state >= 4 and state <= 5)\n\nvar float short_1_low = na\nvar float short_1_rsi = na\nvar int short_1_bar = na\nif short_1\n    short_1_low := low\n    short_1_rsi := rsi\n    short_1_bar := bar_index\n\nbool short_2 = rsi > breakdown\n\nbool short_3 = \n not na(short_1_low) and \n rsi < breakdown and \n rsi < rsi_ma and \n close < short_1_low and \n //ta.crossunder(close, short_1_low) and \n pchg_above_filter and \n pchg_below_filter and \n vol_filter and \n vol_pchg_filter and \n atr_filter and \n body_filter and \n body_size_filter and \n volume_filter and \n rel_vol_filter and \n time_filter and \n date_filter and \n barstate.isconfirmed \n\n// Long Conditions\nlong_1 = \n ta.crossover(rsi, breakout) and \n rsi > rsi_ma and \n (state == 0 or state >= 1 and state <= 2)\n\nvar float long_1_high = na\nvar float long_1_rsi = na\nvar int long_1_bar = na\nif long_1\n    long_1_high := high\n    long_1_rsi := rsi\n    long_1_bar := bar_index\n\nlong_2 = rsi < breakout\n\nlong_3 = \n not na(long_1_high) and \n rsi > breakout and \n rsi > rsi_ma and \n close > long_1_high and \n //ta.crossover(close, long_1_high) and \n pchg_above_filter and \n pchg_below_filter and \n vol_filter and \n vol_pchg_filter and \n atr_filter and \n body_filter and \n body_size_filter and \n volume_filter and \n rel_vol_filter and \n time_filter and \n date_filter and \n barstate.isconfirmed\n\n// State Transitions\nif short_1\n    state := 1\nelse if short_2 and state == 1\n    state := 2\nelse if short_3 and state == 2\n    state := 3\nelse if long_1\n    state := 4\nelse if long_2 and state == 4\n    state := 5\nelse if long_3 and state == 5\n    state := 6\n\n// Continuous Signals\nshort_cont_break = state == 3\nlong_cont_break = state == 6\n```\n\n----------------------------------------\n\nTITLE: Calculating Technical Indicators in PineScript\nDESCRIPTION: Computes various technical indicators including Percentage Change, RSI, MFI, CCI, Volume SMA, and Supertrend. These calculations are used for generating trading signals and chart overlays.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup.txt#2025-04-16_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\n//_____________________________ 1. Percentage Change 250 Start\n\nfloat pchg = (ta.change(close, 250) / close) * 100\n \n//_____________________________ 1. Percentage Change 250 end\n\n//_____________________________ 2. RSI Start\n\nfloat rsi = ta.rsi(close, i_rsi_len)\nfloat rsi_sma = ta.sma(rsi, i_rsi_sma_len)\n\n//_____________________________ 2. RSI End\n\n//_____________________________ 3. MFI Start\n\nfloat mfi = ta.mfi(hlc3, i_mfi_len)\n\n//_____________________________ 3. MFI End\n\n//_____________________________ 4. CCI Start\n\nfloat cci = ta.cci(hlc3, i_cci_len)\nfloat cci_sma = ta.sma(cci, i_cci_sma_len)\n\n//_____________________________ 4. CCI End\n\n//_____________________________ 5. Volume: 20 SMA Start\n\nvol_sma = ta.ema(volume, i_vol_ma_len) * i_vol_ma_multi\n\n//_____________________________ 5. Volume: 20 SMA End\n\n//_____________________________ 6. Supertrend Start\n\n[supertrend, direction] = ta.supertrend(i_st_factor, i_st_atr_period)\n\nsupertrend := i_st_display and barstate.isfirst ? na : supertrend\nupTrend = plot(series=i_st_display and direction < 0 ? supertrend : na, title=\"Supertrend Up\", color=i_pos_col, style=plot.style_linebr)\ndownTrend = plot(series=i_st_display and direction < 0 ? na : supertrend, title=\"Supertrend Down\", color=i_neg_col, style=plot.style_linebr)\nbodyMiddle = plot(series=i_st_display and barstate.isfirst ? na : (open + close) / 2, title=\"Body Middle\", display=display.none)\n\n//_____________________________ 6. Supertrend End\n```\n\n----------------------------------------\n\nTITLE: Calculating VWAP/TWAP in PineScript\nDESCRIPTION: This snippet calculates and plots either the Volume Weighted Average Price (VWAP) or Time Weighted Average Price (TWAP) based on user input.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_7\n\nLANGUAGE: pinescript\nCODE:\n```\nvwap_twap_choice = i_vtwap_choice == \"VWAP\" ? vwap : twapValue\nplot(series = i_vtwap_display ? vwap_twap_choice : na, title = \"VWAP/TWAP\", color=i_neu_color)\n```\n\n----------------------------------------\n\nTITLE: Rendering Screener Results Table in PineScript\nDESCRIPTION: Renders the screener results table on the chart with formatted data from the matrix. The code handles table headers, populates rows with signal data, and applies color coding based on signal direction (bullish/bearish).\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Scanner - ICT Liquidity Sweep Pattern Scanner.txt#2025-04-16_snippet_18\n\nLANGUAGE: pine\nCODE:\n```\n// Check if it's the last bar\nif barstate.islast and i_scr_show_table\n    // Clear existing data in the table\n    table.clear(scr_tbl, 0, 0, 2, 101)\n\n    scr_cell_title(0, 0, i_scr_choose)\n    table.merge_cells(table_id=scr_tbl, start_column=0, start_row=0, end_column=4, end_row=0)\n    scr_cell_title(0, 1, \"Symbol\")\n    scr_cell_title(1, 1, \"Time\")\n    scr_cell_title(2, 1, \"Price\")\n    scr_cell_title(3, 1, \"%Chg\")\n    scr_cell_title(4, 1, \"V %Chg\")\n\n    j = 4\n    // Populate table with matrix data\n    if matrix.rows(matrix) > 0\n        for i = 0 to matrix.rows(matrix) - 1\n            // Determine color based on the signal\n\n            _textcolor = \n             matrix.get(matrix, i, 5) ==  \"1\" ? i_pos_color : \n             matrix.get(matrix, i, 5) == \"-1\" ? i_neg_color : i_neu_color\n\n            _bg_color = \n             matrix.get(matrix, i, 5) ==  \"1\" ? i_pos_dark_color :\n             matrix.get(matrix, i, 5) == \"-1\" ? i_neg_dark_color : i_neu_color\n\n            // Populate cells in the table\n            scr_cell(0, j, matrix.get(matrix, i, 0), _textcolor, _bg_color)\n            scr_cell(1, j, matrix.get(matrix, i, 1), _textcolor, _bg_color)\n            scr_cell(2, j, matrix.get(matrix, i, 2), _textcolor, _bg_color)\n            scr_cell(3, j, matrix.get(matrix, i, 3), _textcolor, _bg_color)\n            scr_cell(4, j, matrix.get(matrix, i, 4), _textcolor, _bg_color)\n\n            j += 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Technical Indicators for Momentum Trading in Pine Script\nDESCRIPTION: This section defines the input parameters for all technical indicators used in the momentum strategy, including percentage change over 250 candles, RSI, MFI, CCI, volume analysis, and Supertrend. Each indicator has customizable parameters for thresholds and visual display.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup with Scanner.txt#2025-04-16_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\ng_pchg = '██████████████ 250 Candle % Change ██████████████'\ntt_pchg = \n \"• Calculate the % change between the past 250th candle and the current candle.\" +\n \"\\n• For a bullish trend, the input value is considered positive; for a bearish trend, it's negative.\" +\n \"\\n• The default value is 8 for daily timeframe. For intraday timeframes like 5 minutes, change it to 2 or 4 or adjust as needed for other timeframes.\"\n\nfloat i_pchg_250 = input.float(defval=8, title='Above/Below %', minval=0, tooltip=tt_pchg, group=g_pchg)\n\ng_rsi = '███████████ Relative Strength Index (RSI) ███████████'\nbool i_rsi_display = input.bool(defval=true, title='Display', group=g_rsi)\nint i_rsi_len = input.int(defval=14, title='RSI Length', minval=1, group=g_rsi)\nint i_rsi_sma_len = input.int(defval=14, title='SMA Length', minval=1, group=g_rsi)\nint i_rsi_ob = input.int(defval=60, title='Overbought', minval=0, maxval=100, group=g_rsi)\nint i_rsi_os = input.int(defval=40, title='Oversold', minval=0, maxval=100, group=g_rsi)\nfloat i_rsi_voffset = input.float(defval=1.3, title='Vertical Offset', step=0.1, group=g_rsi)\nfloat i_rsi_height = input.float(defval=2, title='Height', step=0.1, group=g_rsi)\n\ng_mfi = '█████████████ Money Flow Index (MFI) █████████████'\nbool i_mfi_display = input.bool(defval=true, title='Display', group=g_mfi)\nint i_mfi_len = input.int(defval=14, title='MFI Length', minval=1, group=g_mfi)\nint i_mfi_ob = input.int(defval=60, title='Overbought', minval=0, maxval=100, group=g_mfi)\nint i_mfi_os = input.int(defval=40, title='Oversold', minval=0, maxval=100, group=g_mfi)\nfloat i_mfi_voffset = input.float(defval=1.6, title='Vertical Offset', step=0.1, group=g_mfi)// 1.1\nfloat i_mfi_height = input.float(defval=1, title='Height', step=0.1, group=g_mfi)//1.0\n\ng_cci = '██████████ Commodity Channel Index (CCI) ██████████'\nbool i_cci_display = input.bool(defval=true, title='Display', group=g_cci)\nint i_cci_len = input.int(defval=20, title='CCI Length', minval=1, group=g_cci)\nint i_cci_sma_len = input.int(defval=5, title='SMA Length', minval=1, group=g_cci)\nint i_cci_ob = input.int(defval=100, title='Overbought', minval=0, group=g_cci)\nint i_cci_os = input.int(defval=-100, title='Oversold', maxval=0, group=g_cci)\nfloat i_cci_voffset = input.float(defval=1.8, title='Vertical Offset', step=0.1, group=g_cci)\nfloat i_cci_height = input.float(defval=0.2, title='Height', step=0.1, group=g_cci)\n\ng_vol = '██████████████████ Volume ██████████████████'\ntt_vm = \n \"• The value shifts the volume moving average upward.\" +\n \"\\n• The default value of 1 means no multiplier is applied, but a multiplier of 5 indicates higher volume according to the strategy.\"\n\nbool i_vol_display = input.bool(defval=true, title='Display', inline='VOL', group=g_vol)\nstring i_vol_type = input.string(defval='Regular Volume', title='Type', options=['Buying/Selling Volume', 'Regular Volume', 'None'], group=g_vol)\nint i_vol_ma_len = input.int(defval=20, title='MA Length', minval=1, group=g_vol)\nfloat i_vol_ma_multi = input.float(defval=5, title='MA Multiplier (x)', minval=1, tooltip=tt_vm, group=g_vol)\ni_vol_hoffset = 0\nfloat i_vol_voffset = input.float(defval=0.3, title='Vertical Offset', step=0.1, group=g_vol)\nfloat i_vol_height = input.float(defval=0.6, title='Height', step=0.1, group=g_vol)\n\ng_st = '█████████████████ Supertrend █████████████████'\nbool i_st_display = input.bool(defval=true, title='Display', group=g_st)\nint i_st_atr_period = input.int(defval=10, title=\"ATR Length\", minval=1, group=g_st)\nfloat i_st_factor = input.float(defval=3.0, title=\"Factor\", minval=0.01, step=0.01, group=g_st)\n```\n\n----------------------------------------\n\nTITLE: Short Retracement Pattern Detection in PineScript\nDESCRIPTION: Implements a complex short retracement pattern detection algorithm based on ZigZag swing points. It uses a state machine to track pattern progression and generates short signals when specific ZigZag relationships are detected.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_11\n\nLANGUAGE: pine\nCODE:\n```\n//_____________________________ Retracement Signals Start\n\n// Short Retracement Start\n\n// Short Condition 1\nshort_ret_cont_1 = \n zz_1 > zz_2 and\n zz_1 < zz_3 and\n\n zz_2 < zz_1 and\n zz_2 < zz_3 and\n\n zz_3 > zz_2 and\n zz_3 > zz_1 and\n zz_3 > zz_4 and\n zz_3 < zz_5 and\n\n zz_4 < zz_3 and\n zz_4 > zz_2 and\n zz_4 < zz_5 and\n //zz_4 > zz_6 and\n\n zz_5 > zz_3 and\n zz_5 > zz_4 and\n zz_5 > zz_6 and\n zz_5 > zz_7 and\n\n zz_6 < zz_5 and\n //zz_6 < zz_4 and\n zz_6 < zz_7 and\n //zz_6 > zz_8 and\n\n zz_7 > zz_6 and\n zz_7 < zz_5 and\n zz_7 > zz_8 and\n\n //zz_8 < zz_7 and\n //zz_8 < zz_6 and\n\n ta.crossunder(close, zz_2) and\n\n pchg_above_filter and\n pchg_below_filter and\n vol_filter and\n vol_pchg_filter and\n atr_filter and\n body_filter and\n body_size_filter and\n volume_filter and\n rel_vol_filter and\n time_filter and\n date_filter and\n barstate.isconfirmed\n\n// Get Short Retracement Price\nvar short_break_price = float(na)\nvar short_break_bi = float(na)\nif short_ret_cont_1\n    short_break_price := zz_2\n    short_break_bi := bi_2\n\n// Short Condition 2\nbool short_ret_cont_2 = \n ta.crossover(high, short_break_price) and\n high[1] < short_break_price and\n\n pchg_above_filter and\n pchg_below_filter and\n vol_filter and\n vol_pchg_filter and\n atr_filter and\n body_filter and\n body_size_filter and\n volume_filter and\n rel_vol_filter and\n time_filter and\n date_filter and\n barstate.isconfirmed\n\n// Short Retracement Trigger\nvar short_break_current_state = 0\nshort_break_previous_state = nz(short_break_current_state[1])\nshort_break_current_state := short_break_previous_state == 2 ? 0 : short_break_previous_state\nif short_ret_cont_1 and short_break_current_state == 0\n    short_break_current_state := 1\nif short_ret_cont_2 and short_break_current_state == 1\n    short_break_current_state := 2\n\nbool short_ret_trigger = short_break_current_state == 2 ? true : false\n```\n\n----------------------------------------\n\nTITLE: Multi-Symbol Screener Function Implementation in PineScript\nDESCRIPTION: Implements the main screener function that processes each symbol and collects pattern data. The function checks for signals, formats the data, and adds it to the matrix for display. It uses request.security to access data from different symbols.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Equal Highs and Lows/ICT Equal Highs and Lows with Screener.txt#2025-04-16_snippet_5\n\nLANGUAGE: pine\nCODE:\n```\n// Screener function to collect data\nscreener(s) =>\n    sym = ticker.modify(s, syminfo.session)\n    [_time, indicator, price, signal] = request.security(sym, timeframe.period, indicator_calculation())\n\n    // Check if the signal is not na and the time matches\n    if not na(signal) and _time == time\n        symbolName = symbol(s)\n        formattedTime = format_time(_time)\n        strPrice = str.tostring(price)\n        strSignal = str.tostring(signal)\n        \n        // Add data to the matrix\n        mtxFun(symbolName, formattedTime, indicator, strPrice, strSignal)\n```\n\n----------------------------------------\n\nTITLE: Implementing VWAP and TWAP in PineScript\nDESCRIPTION: This snippet calculates and implements Volume Weighted Average Price (VWAP) and Time Weighted Average Price (TWAP) based on user selection and specified timeframe.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\nfloat vwap = na\n[_vwap, _stdevUpper, _] = ta.vwap(hlc3, timeframe.change(i_vtwap_timeframe), 1)\nvwap := _vwap\n\ntwap(source, anchorChange) =>\n    var prices = 0.0\n    var count = 0\n\n    if anchorChange\n        prices := 0\n        count := 0\n\n\tprices += source\n\tcount += 1\n\n    prices / count\n\ntwapValue = twap(ohlc4, timeframe.change(i_vtwap_timeframe))\n```\n\n----------------------------------------\n\nTITLE: Parsing CSV Symbol List for Multi-Symbol Screener in Pine Script\nDESCRIPTION: This function extracts ticker symbols from a comma-separated list for use in a multi-symbol screener. It systematically parses the input string, extracting one symbol at a time and returning both the extracted symbol and the remaining list for further processing.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup with Scanner.txt#2025-04-16_snippet_13\n\nLANGUAGE: pine\nCODE:\n```\nfeed(back) =>                                             // extract tickerid and decrement list of ticker IDs\n    loop  = back                                          // declare string variable to hold content list\n    getT  = string(na)                                    // declare string variable to hold tickerid\n    if str.length(loop) == 0                              // if list is empty\n        getT := string(na)                                // assign na to tickerid variable\n        loop := string(na)                                // assign na to list of ticker Ids variable\n    else                                                  // else extract first tickerid\n        getP  = nz(str.pos(loop, ','), str.length(loop))  // get position of first comma or last character\n        getT := str.substring(loop, 0, getP)              // get tickerid in first position of list\n        loop := str.replace(loop, getT + ',', '')         // clear tickerid + delimiter character from list\n    [getT, loop]                                          // return tickerid in first position & truncated list\n\n[tid_001, out_001] = feed(i_symbols), [tid_002, out_002] = feed(out_001), [tid_003, out_003] = feed(out_002), [tid_004, out_004] = feed(out_003),\n[tid_005, out_005] = feed(out_004), [tid_006, out_006] = feed(out_005), [tid_007, out_007] = feed(out_006), [tid_008, out_008] = feed(out_007),\n[tid_009, out_009] = feed(out_008), [tid_010, out_010] = feed(out_009), [tid_011, out_011] = feed(out_010), [tid_012, out_012] = feed(out_011),\n[tid_013, out_013] = feed(out_012), [tid_014, out_014] = feed(out_013), [tid_015, out_015] = feed(out_014), [tid_016, out_016] = feed(out_015),\n[tid_017, out_017] = feed(out_016), [tid_018, out_018] = feed(out_017), [tid_019, out_019] = feed(out_018), [tid_020, out_020] = feed(out_019),\n[tid_021, out_021] = feed(out_020), [tid_022, out_022] = feed(out_021), [tid_023, out_023] = feed(out_022), [tid_024, out_024] = feed(out_023),\n[tid_025, out_025] = feed(out_024), [tid_026, out_026] = feed(out_025), [tid_027, out_027] = feed(out_026), [tid_028, out_028] = feed(out_027),\n[tid_029, out_029] = feed(out_028), [tid_030, out_030] = feed(out_029), [tid_031, out_031] = feed(out_030), [tid_032, out_032] = feed(out_031),\n[tid_033, out_033] = feed(out_032), [tid_034, out_034] = feed(out_033), [tid_035, out_035] = feed(out_034), [tid_036, out_036] = feed(out_035),\n[tid_037, out_037] = feed(out_036), [tid_038, out_038] = feed(out_037), [tid_039, out_039] = feed(out_038)//, [tid_040, out_040] = feed(out_039)\n```\n\n----------------------------------------\n\nTITLE: Calculating Divergences in PineScript\nDESCRIPTION: Implements logic for detecting regular and hidden divergences in RSI. It calculates bullish, bearish, hidden bullish, and hidden bearish divergences based on pivot points and price action.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Scanner] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\n// Divergence Calculation\n_inRange(cond) =>\n    bars = ta.barssince(cond)\n    i_rsi_range_min <= bars and bars <= i_rsi_range_max\n\nbool plFound = not na(ta.pivotlow(rsi, i_rsi_p_left, i_rsi_p_right))\nbool phFound = not na(ta.pivothigh(rsi, i_rsi_p_left, i_rsi_p_right))\nfloat rsiLBR = rsi[i_rsi_p_right]\nfloat lowLBR = low[i_rsi_p_right]\nfloat highLBR = high[i_rsi_p_right]\n\n// Bull Divergence\nrsiHL = rsiLBR > ta.valuewhen(plFound, rsiLBR, 1) and _inRange(plFound[1])\npriceLL = lowLBR < ta.valuewhen(plFound, lowLBR, 1)\nbullDiv = i_scn_choose == 'Divergence' and i_rsi_show_bull and priceLL and rsiHL and plFound\n\n// Bear Divergence\nrsiLH = rsiLBR < ta.valuewhen(phFound, rsiLBR, 1) and _inRange(phFound[1])\npriceHH = highLBR > ta.valuewhen(phFound, highLBR, 1)\nbearDiv = i_scn_choose == 'Divergence' and i_rsi_show_bear and priceHH and rsiLH and phFound\n\n// Hidden Bullish\nrsiLL = rsiLBR < ta.valuewhen(plFound, rsiLBR, 1) and _inRange(plFound[1])\npriceHL = lowLBR > ta.valuewhen(plFound, lowLBR, 1)\nhiddenBullDiv = i_scn_choose == 'Hidden Divergence' and i_rsi_show_hbull and priceHL and rsiLL and plFound\n\n// Hidden Bearish\nrsiHH = rsiLBR > ta.valuewhen(phFound, rsiLBR, 1) and _inRange(phFound[1])\npriceLH = highLBR < ta.valuewhen(phFound, highLBR, 1)\nhiddenBearDiv = i_scn_choose == 'Hidden Divergence' and i_rsi_show_hbear and priceLH and rsiHH and phFound\n```\n\n----------------------------------------\n\nTITLE: Plotting Trading Signals and Indicators in PineScript\nDESCRIPTION: This code section handles the visualization of trading signals, including plotting shapes, lines, and boxes to represent different market conditions and potential entry points for both long and short trades.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_14\n\nLANGUAGE: pine\nCODE:\n```\nplotshape(series=i_scr_show_short and i_scr_choose == 'Mitigation Block' ? short_ret_cont_1 : na, title='Short Shift', style=shape.triangledown, location=location.abovebar, color=i_neg_light_color, textcolor=i_neg_light_color, size=size.tiny)\nplotshape(series=i_scr_show_long and i_scr_choose == 'Mitigation Block' ? long_ret_cont_1 : na, title='Long Shift', style=shape.triangleup, location=location.belowbar, color=i_pos_light_color, textcolor=i_pos_light_color, size=size.tiny)\nbarcolor(color=i_scr_show_short and i_scr_choose == 'Mitigation Block' and short_ret_cont_1 ? i_neg_light_color : i_scr_show_long and i_scr_choose == 'Mitigation Block' and long_ret_cont_1 ? i_pos_light_color : na, title='Shift Candle')\n\n//var box_array = array.new_box()\nvar line_array = array.new_line()\n\nif i_scr_show_short and short_ret_cont_1// and not short_ret_cont_0[1]\n    ph_box = box.new(left=int(bi_8), top=math.min(zz_8, zz_6, zz_4, zz_2), right=int(bi_0), bottom=zz_5, border_color=color.new(i_neg_color, i_zz_bx_transp), bgcolor=color.new(i_neg_color, i_zz_bx_transp))\n    if i_scr_choose == 'Mitigation Block'\n        ph_line = line.new(x1=int(bi_2), y1=zz_2, x2=bar_index, y2=zz_2, color=i_neg_color, style=line.style_dashed)\n        //array.push(box_array, ph_box)\n        array.push(line_array, ph_line)\n```\n\n----------------------------------------\n\nTITLE: Implementing Trading Signals with Filters in PineScript\nDESCRIPTION: Generates trading signals based on Supertrend crossovers and breakouts. It incorporates various filters such as percentage change, volume, ATR, body size, and time filters to refine the signals.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Scanner - Trend Following Setup - Sideways Market Skipper Scanner.txt#2025-04-16_snippet_5\n\nLANGUAGE: pine\nCODE:\n```\n// Condition 1\nshort_cont = ta.crossunder(close, supertrend) and barstate.isconfirmed\nlong_cont = ta.crossover(close, supertrend) and barstate.isconfirmed\n\n// Get Volatility Range After Cross \nvar top_price = float(na)\nvar bottom_price = float(na)\n\nif (short_cont)\n    bottom_price := close - range_source\n    top_price := na  // Reset top_price to avoid plotting it\n\nif (long_cont)\n    top_price := close + range_source\n    bottom_price := na  // Reset bottom_price to avoid plotting it\n\n// Condition 2\nshort_break_cond = \n close < bottom_price and \n open > close and\n atr > atr_sma and\n pchg_below_filter and\n vol_pchg_filter and\n atr_filter and\n body_filter and\n body_size_filter and\n volume_filter and\n rel_vol_filter and \n time_filter and\n barstate.isconfirmed\n\nlong_break_cond = \n close > top_price and \n open < close and\n atr > atr_sma and\n pchg_above_filter and\n vol_pchg_filter and\n atr_filter and\n body_filter and\n body_size_filter and\n volume_filter and\n rel_vol_filter and \n time_filter and\n barstate.isconfirmed\n\n// Short Signal\nvar short_current_state = 0\nbear_previous_state = nz(short_current_state[1])\nshort_current_state := bear_previous_state == 2 ? 0 : bear_previous_state\nif short_cont and short_current_state == 0\n    short_current_state := 1\nif short_break_cond and short_current_state == 1\n    short_current_state := 2\n\nbool short_break_trigger = short_current_state == 2 ? true : false\n\n// Long Signal\nvar long_current_state = 0\nbull_previous_state = nz(long_current_state[1])\nlong_current_state := bull_previous_state == 2 ? 0 : bull_previous_state\nif long_cont and long_current_state == 0\n    long_current_state := 1\nif long_break_cond and long_current_state == 1\n    long_current_state := 2\n\nbool long_break_trigger = long_current_state == 2 ? true : false\n```\n\n----------------------------------------\n\nTITLE: Long Retracement Pattern Detection in PineScript\nDESCRIPTION: Implements a long retracement pattern detection algorithm based on ZigZag swing points. This is the counterpart to the short retracement pattern and detects bullish retracement patterns.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_12\n\nLANGUAGE: pine\nCODE:\n```\n//___________________________ Long Retracement Start\n\n// Long Retracement Start\n\n// Long Condition 1\nlong_ret_cont_1 = \n zz_1 < zz_2 and\n zz_1 > zz_3 and\n\n zz_2 > zz_1 and\n zz_2 > zz_3 and\n\n zz_3 < zz_2 and\n zz_3 < zz_1 and\n zz_3 < zz_4 and\n zz_3 > zz_5 and\n\n zz_4 > zz_3 and\n zz_4 < zz_2 and\n zz_4 > zz_5 and\n //zz_4 < zz_6 and\n\n zz_5 < zz_3 and\n zz_5 < zz_4 and\n zz_5 < zz_6 and\n zz_5 < zz_7 and\n\n zz_6 > zz_5 and\n //zz_6 > zz_4 and\n zz_6 > zz_7 and\n //zz_6 < zz_8 and\n\n zz_7 < zz_6 and\n zz_7 > zz_5 and\n zz_7 < zz_8 and\n\n //zz_8 > zz_7 and\n```\n\n----------------------------------------\n\nTITLE: Implementing Supertrend Indicator in PineScript\nDESCRIPTION: This snippet calculates the Supertrend indicator using the ta.supertrend() function and plots the results with color-coded trend lines.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_11\n\nLANGUAGE: pinescript\nCODE:\n```\n[supertrend, direction] = ta.supertrend(i_st_factor, i_st_atr_period)\n\nsupertrend := barstate.isfirst ? na : supertrend\nupTrend = plot(series=direction < 0 ? supertrend : na, title=\"Supertrend Up\", color = i_pos_color, style = plot.style_linebr)\ndownTrend = plot(series=direction < 0 ? na : supertrend, title=\"Supertrend Down\", color = i_neg_color, style = plot.style_linebr)\nbodyMiddle = plot(series=barstate.isfirst ? na : ohlc4, title=\"Body Middle\", display = display.none)\n\nfill(plot1=bodyMiddle, plot2=upTrend, color=color.new(i_pos_color, 90), fillgaps=false, display=display.none)\nfill(plot1=bodyMiddle, plot2=downTrend, color=color.new(i_neg_color, 90), fillgaps=false, display=display.none)\n```\n\n----------------------------------------\n\nTITLE: Generating Trading Signals with Supertrend and Volatility Ranges in PineScript\nDESCRIPTION: Logic to generate long and short signals based on Supertrend crosses and subsequent price breakouts from volatility ranges. It uses a state machine to track signal progression and applies multiple filter conditions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Indicator - Trend Following Setup - Sideways Market Skipper.txt#2025-04-16_snippet_6\n\nLANGUAGE: pinescript\nCODE:\n```\n// Condition 1\nshort_cont = ta.crossunder(close, supertrend) and barstate.isconfirmed\nlong_cont = ta.crossover(close, supertrend) and barstate.isconfirmed\n\n// Get Volatility Range After Cross \nvar top_price = float(na)\nvar bottom_price = float(na)\n\nif (short_cont)\n    bottom_price := close - range_source\n    top_price := na  // Reset top_price to avoid plotting it\n\nif (long_cont)\n    top_price := close + range_source\n    bottom_price := na  // Reset bottom_price to avoid plotting it\n\n// Condition 2\nshort_break_cond = \n close < bottom_price and \n open > close and\n atr > atr_sma and\n pchg_below_filter and\n vol_pchg_filter and\n atr_filter and\n body_filter and\n body_size_filter and\n volume_filter and\n rel_vol_filter and \n time_filter and\n barstate.isconfirmed\n\nlong_break_cond = \n close > top_price and \n open < close and\n atr > atr_sma and\n pchg_above_filter and\n vol_pchg_filter and\n atr_filter and\n body_filter and\n body_size_filter and\n volume_filter and\n rel_vol_filter and \n time_filter and\n barstate.isconfirmed\n\n// Short Signal\nvar short_current_state = 0\nbear_previous_state = nz(short_current_state[1])\nshort_current_state := bear_previous_state == 2 ? 0 : bear_previous_state\nif short_cont and short_current_state == 0\n    short_current_state := 1\nif short_break_cond and short_current_state == 1\n    short_current_state := 2\n\nbool short_break_trigger = short_current_state == 2 ? true : false\n\n// Long Signal\nvar long_current_state = 0\nbull_previous_state = nz(long_current_state[1])\nlong_current_state := bull_previous_state == 2 ? 0 : bull_previous_state\nif long_cont and long_current_state == 0\n    long_current_state := 1\nif long_break_cond and long_current_state == 1\n    long_current_state := 2\n\nbool long_break_trigger = long_current_state == 2 ? true : false\n```\n\n----------------------------------------\n\nTITLE: Implementing Zig-Zag Pattern Recognition in Pine Script\nDESCRIPTION: This implementation creates a zig-zag indicator with customizable parameters that identifies significant price swings and draws lines between them. It maintains an array of zig-zag points and provides helper functions to add and update points based on price movement direction.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Scanner - ICT Liquidity Sweep Pattern Scanner.txt#2025-04-16_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\n//_____________________________ Get Source\n\nfloat _high = i_zz_source == 'Open/Close' ? math.max(open, close) : high\nfloat _low = i_zz_source == 'Open/Close' ? math.min(open, close) : low\n\n//============================== 1.  Variables\n\n//_____________________________ 1.1 Highest / Lowest\nfloat ph = ta.highestbars(_high, i_zz_period) == 0 ? _high : na\nfloat pl = ta.lowestbars(_low, i_zz_period) == 0 ? _low  : na\n\n//_____________________________ 1.2 Dir\nvar int dir = 0, dir := pl and na(ph) ? -1 : ph and na(pl) ? 1 : dir\n\n//_____________________________ 1.4 Array\nvar max_array_size = 14, var zigzag = array.new_float(0), oldzigzag = array.copy(zigzag)\n\n//_____________________________ 1.5 Others\nvar line line_zz = na\n\n//============================== 3.  Custom Functions\n\nadd_to_zigzag(float[] pointer, float value, int bindex) =>\n    array.unshift(pointer, bindex)\n    array.unshift(pointer, value)\n    if array.size(pointer) > max_array_size\n        array.pop(pointer)\n        array.pop(pointer)\n    \nupdate_zigzag(float[] pointer, float value, int bindex, int dir) =>\n    if array.size(pointer) == 0\n        add_to_zigzag(pointer, value, bindex)\n    else\n        if dir == 1 and value > array.get(pointer, 0) or dir == -1 and value < array.get(pointer, 0)\n            array.set(pointer, 0, value)\n            array.set(pointer, 1, bindex)\n        0.\n\n//============================== 4.  Calculations\n\ndirchanged = ta.change(dir)\n\nif ph or pl\n    if dirchanged\n        add_to_zigzag(zigzag, dir == 1 ? ph : pl, bar_index)\n    else\n        update_zigzag(zigzag, dir == 1 ? ph : pl, bar_index, dir)\n\n//============================== 5.  Constructs\n\nif array.size(zigzag) >= 6\n    if array.get(zigzag, 0) != array.get(oldzigzag, 0) or array.get(zigzag, 1) != array.get(oldzigzag, 1)\n        if array.get(zigzag, 2) == array.get(oldzigzag, 2) and array.get(zigzag, 3) == array.get(oldzigzag, 3)\n            line.delete(line_zz)\n        if i_zz_display\n            line_zz := line.new(x1 = math.round(array.get(zigzag, 1)), y1 = array.get(zigzag, 0), x2 = math.round(array.get(zigzag, 3)), y2 = array.get(zigzag, 2), color = dir == 1 ? i_zz_bull_color : i_zz_bear_color, width=1)\n```\n\n----------------------------------------\n\nTITLE: Table Population with Screener Results\nDESCRIPTION: Conditional logic that executes on the last bar to populate the screener table with data from the matrix. It formats the header row, column titles, and iterates through matrix rows to display symbol data with appropriate color coding based on signals.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Scanner] ICT Liquidity Void Fill Scanner.txt#2025-04-16_snippet_16\n\nLANGUAGE: pine\nCODE:\n```\nif barstate.islast and i_scr_show_table\n    // Clear existing data in the table\n    table.clear(scr_tbl, 0, 0, 2, 101)\n\n    scr_cell_title(0, 0, 'Fill to ' + str.tostring(i_fib_val) + '%')\n    table.merge_cells(table_id = scr_tbl, start_column = 0, start_row = 0, end_column = 4, end_row = 0)\n    scr_cell_title(0, 1, 'Symbol')\n    scr_cell_title(1, 1, 'Time')\n    scr_cell_title(2, 1, 'Price')\n    scr_cell_title(3, 1, '%Chg')\n    scr_cell_title(4, 1, 'V %Chg')\n\n    j = 4\n    // Populate table with matrix data\n    if matrix.rows(matrix) > 0\n        for i = 0 to matrix.rows(matrix) - 1 by 1\n        // Determine color based on the signal\n\n            _textcolor = matrix.get(matrix, i, 5) == '1' ? i_pos_color : matrix.get(matrix, i, 5) == '-1' ? i_neg_color : i_neu_color\n\n            _bg_color = matrix.get(matrix, i, 5) == '1' ? i_neu_dark_color : matrix.get(matrix, i, 5) == '-1' ? i_neu_dark_color : i_neu_color\n\n            // Populate cells in the table\n            scr_cell(0, j, matrix.get(matrix, i, 0), _textcolor, _bg_color)\n            scr_cell(1, j, matrix.get(matrix, i, 1), _textcolor, _bg_color)\n            scr_cell(2, j, matrix.get(matrix, i, 2), _textcolor, _bg_color)\n            scr_cell(3, j, matrix.get(matrix, i, 3), _textcolor, _bg_color)\n            scr_cell(4, j, matrix.get(matrix, i, 4), _textcolor, _bg_color)\n\n            j := j + 1\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Symbol Scanner with Custom Input Parameters in Pine Script\nDESCRIPTION: This code segment sets up the scanner functionality with a text input area for symbols and configuration options for the scanner table. It allows users to paste up to 40 comma-separated symbols and configure the display options for bullish or bearish signals.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup with Scanner.txt#2025-04-16_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\ng_scrtb = '██████████████████ Scanner ██████████████████'\n\ntt_is = \n \"• Reads only up to first 40 symbols.\" +\n \"\\n• Total characters cannot exceed 4096.\" +\n \"\\n• Use comma as delimiter without any space.\" +\n \"\\n• Eg: EXCHANGE:SYMBOL_A,EXCHANGE:SYMBOL_B\"\n\nstring i_symbols = input.text_area(\n defval=\"NSE:ABCAPITAL,NSE:ABFRL,NSE:AUROPHARMA,NSE:BANDHANBNK,NSE:BEL,NSE:BHEL,NSE:BPCL,NSE:BSOFT,NSE:COLPAL,NSE:CONCOR,NSE:CUB,NSE:DLF,NSE:EICHERMOT,NSE:GAIL,NSE:GNFC,NSE:GODREJCP,NSE:GODREJPROP,NSE:GRANULES,NSE:HINDCOPPER,NSE:HINDPETRO,NSE:IDEA,NSE:IGL,NSE:INDIACEM,NSE:INDUSTOWER,NSE:LAURUSLABS,NSE:MANAPPURAM,NSE:INDHOTEL,NSE:MUTHOOTFIN,NSE:NATIONALUM,NSE:NAUKRI,NSE:NMDC,NSE:OBEROIRLTY,NSE:PETRONET,NSE:PFC,NSE:RECLTD,NSE:SAIL,NSE:TATACHEM,NSE:VEDL,NSE:VOLTAS,NSE:ZEEL\", \n title=\"Paste Symbols\", tooltip=tt_is, group=g_scrtb)\n\nstring i_scr_direction = input.string(defval='Both', title='Direction', options=['Both', 'Bullish', 'Bearish'], inline='tb_1', group=g_scrtb)\nbool i_scr_show_bull  = input.bool(defval=true, title='Only Bullish', inline='tb_2', group=g_scrtb)\nbool i_scr_show_bear  = input.bool(defval=true, title='Only Bearish', inline='tb_2', group=g_scrtb)\n\nint i_scr_tbl_disp_rows = input.int(defval=12, title='Display Rows', minval=0, maxval=100, group=g_scrtb)\nstring i_scr_tbl_position = input.string(defval=position.bottom_left, title='Table Position', options=[position.top_left, position.top_center, position.top_right, position.middle_left, position.middle_center, position.middle_right, position.bottom_left, position.bottom_center, position.bottom_right], group=g_scrtb)\nstring i_scr_tbl_text_size = input.string(defval=size.small, title='Table Size', options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group=g_scrtb)\n```\n\n----------------------------------------\n\nTITLE: Implementing Retracement Detection and Visualization in PineScript\nDESCRIPTION: This snippet implements logic to detect and mark price retracements to Fibonacci levels. It tracks active sequences, identifies when price crosses Fibonacci levels, and visually marks these events with shapes, lines, and bar coloring.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Scanner] ICT Displacement Candles.txt#2025-04-16_snippet_9\n\nLANGUAGE: pine\nCODE:\n```\n// Retracement tracking combined\nvar bool bullActive = false\nvar bool bearActive = false\nvar bool bullDone = false\nvar bool bearDone = false\nvar int bullBar = na\nvar int bearBar = na\nvar int bullStart = na\nvar int bearStart = na\nvar float bullLow = na\nvar float bearHigh = na\nvar line bullLine = na\nvar line bearLine = na\n\n// Activate sequences\nif bullCnt >= i_dc_min_bars and bullCnt[1] < i_dc_min_bars\n    bullActive := true\n    bearActive := false\n    bullDone := false\n    bearDone := false\n    bullStart := bar_index - bullCnt + 1\nif bearCnt >= i_dc_min_bars and bearCnt[1] < i_dc_min_bars\n    bearActive := true\n    bullActive := false\n    bearDone := false\n    bullDone := false\n    bearStart := bar_index - bearCnt + 1\n\n// Detect and mark retracements\nbool bearRet = bearActive and not bearDone and ta.crossover(high, bearFib) and high[1] < bearFib and time_filter and date_filter\nbool bullRet = bullActive and not bullDone and ta.crossunder(low, bullFib) and low[1] > bullFib and time_filter and date_filter\nif bearRet and i_scn_choose == 'Retracement' and i_scn_show_short\n    bearDone := true\n    bearBar := bar_index\n    bearHigh := high\n    bearLine := line.new(x1 = bearStart, y1 = bearFib, x2 = bearBar, y2 = bearFib, color = i_neg_light_color, style = line.style_dotted)\nif bullRet and i_scn_choose == 'Retracement' and i_scn_show_long\n    bullDone := true\n    bullBar := bar_index\n    bullLow := low\n    bullLine := line.new(x1 = bullStart, y1 = bullFib, x2 = bullBar, y2 = bullFib, color = i_pos_light_color, style = line.style_dotted)\n\n// Plot signals\nplotshape(i_scn_show_short and i_scn_choose == 'Retracement' ? bearRet : false, title = 'Bearish Retracement', style = shape.triangledown, location = location.abovebar, color = i_neg_light_color, size = size.tiny)\nplotshape(i_scn_show_long and i_scn_choose == 'Retracement' ? bullRet : false, title = 'Bullish Retracement', style = shape.triangleup, location = location.belowbar, color = i_pos_light_color, size = size.tiny)\nbarcolor(i_scn_show_short and i_scn_choose == 'Retracement' and bearRet ? i_neg_light_color : i_scn_show_long and i_scn_choose == 'Retracement' and bullRet ? i_pos_light_color : na, title = 'Retracement Candle')\n```\n\n----------------------------------------\n\nTITLE: Drawing Technical Indicators on Chart in PineScript\nDESCRIPTION: This code creates visual representations of technical indicators including Stochastic Oscillator, MACD, and Volume analysis. It draws lines, boxes, and labels to display indicator values and provides various display customization options through parameters prefixed with 'i_'.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_17\n\nLANGUAGE: pine\nCODE:\n```\nbox.delete(array.shift(a_hist))\n\n    if i_stoc_display\n        mid_line = math.avg(100, 0)\n        array.push(a_hist , box.new (bar_index[i_display_len], priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 + i_stoc_over_bought / oscHighest * priceChangeRate * i_stoc_height), \n                                     bar_index                   , priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 + i_stoc_over_bought / oscHighest * priceChangeRate * i_stoc_height), color.new(i_neg_color  , 75), 1))\n        array.push(a_hist , box.new (bar_index[i_display_len], priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 +        mid_line / oscHighest * priceChangeRate * i_stoc_height), \n                                     bar_index                   , priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 +        mid_line / oscHighest * priceChangeRate * i_stoc_height), color.new(i_neu_color  , 75), 1))\n        array.push(a_hist , box.new (bar_index[i_display_len], priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 +   i_stoc_over_sold / oscHighest * priceChangeRate * i_stoc_height), \n                                     bar_index                   , priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 +   i_stoc_over_sold / oscHighest * priceChangeRate * i_stoc_height), color.new(i_pos_color, 75), 1))\n        f_drawLabelX(bar_index + 3,                                priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 +        mid_line / oscHighest * priceChangeRate * i_stoc_height), 'STOC', xloc.bar_index, yloc.price, #00000000, label.style_label_left, chart.fg_color, size.tiny, text.align_center, '%stoc_k : ' + str.tostring(stoc_k, '#.##') + '\\n%stoc_d : ' + str.tostring(stoc_d, '#.##'))\n\n    if i_macd_display\n        f_drawLabelX(bar_index + 3,  priceLowest * (1 - priceChangeRate * i_macd_voffset) * (1 +        50 / oscHighest * priceChangeRate * i_macd_height), 'MACD', xloc.bar_index, yloc.price, #00000000, label.style_label_left, chart.fg_color, size.tiny, text.align_center, '')//'macd : ' + str.tostring(macdLine, '#.##') + '\\nsignal : ' + str.tostring(signalLine, '#.##'))\n    \n    if i_vol_type != 'None' \n        f_drawLabelX(bar_index + 3,  priceHighest * (1 + priceChangeRate * i_vol_voffset), 'VOL', xloc.bar_index, yloc.price, #00000000, label.style_label_left, chart.fg_color, size.tiny, text.align_center, 'buying volume : ' + str.tostring(B / (B + S) * 100, '#.##') + '%\\nselling volume : ' + str.tostring(S / (B + S) * 100, '#.##') + '%\\nlast volume : ' + str.tostring(nzVolume, format.volume) + '\\naverage volume : ' + str.tostring(volMa, format.volume))\n```\n\n----------------------------------------\n\nTITLE: Liquidity Void Functions Implementation\nDESCRIPTION: Core functions for calculating and drawing liquidity voids, including filter calculations, price source determination, and line/box drawing utilities.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void/ICT Liquidity Void Screener.txt#2025-04-16_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\nfilter(prev_value, other_value, _atr_htf, _atr_multi, _percentage, _additional) =>\n    filter_atr = math.abs(prev_value - other_value) > _atr_htf * _atr_multi\n    filter_percent = math.abs((prev_value - other_value) / prev_value * 100) > _percentage\n    _additional == 'ATR' ? filter_atr : filter_percent\n\nprice_source(float prev_value, float other_value, string price_source) =>\n    price_source == 'High/Low' ? prev_value : \n     price_source == 'OTE 0.79%' ? other_value + ((prev_value - other_value) * 0.79) : \n     price_source == 'OTE 0.79%' ? other_value - ((prev_value - other_value) * 0.79) : \n     math.avg(prev_value, other_value)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Symbol Screener Function in PineScript\nDESCRIPTION: This code implements a screener function that processes multiple symbols to detect trading signals. It uses a matrix to store and manage the screener results.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Scanner] ICT Liquidity Void Fill Scanner.txt#2025-04-16_snippet_10\n\nLANGUAGE: pine\nCODE:\n```\n// Scanner Conditions\nshort_cond = short_ret_signal\nlong_cond = long_ret_signal\n\n// Function for Screener Indicator Calculation\nindicator_calculation() =>\n    // Initialize variables\n    price = float(na)\n    _time = int(na)\n    _cum_pchg = float(na)\n    _cum_vol_pchg = float(na)\n    signal = int(na)\n\n    if barstate.isconfirmed\n        // Check for Short Momentum Candle and conditions (Modify here to customize indicators)\n        if i_scr_show_long and long_cond\n            signal := 1\n\n        // Check for Long Momentum Candle and conditions (Modify here to customize indicators)\n        else if i_scr_show_short and short_cond\n            signal := -1\n\n        // Update price and time if signal is not null\n        if not na(signal)\n            price := math.round_to_mintick(close)\n            _time := time\n            _cum_pchg := cum_pchg\n            _cum_vol_pchg := cum_vol_pchg\n\n    [_time, price, _cum_pchg, _cum_vol_pchg, signal]\n\n// Function to format time\nformat_time(x) =>\n    timezone = syminfo.timezone\n    timeframe.isintraday ? str.format_time(x, 'HH:mm  dd-MM-yyyy', timezone) : str.format_time(x, 'dd-MM-yyyy', timezone)\n\n// Function to extract symbol name\nsymbol(s) =>\n    array.get(str.split(s, ':'), 1)\n\n// Matrix setup\nvar matrix = matrix.new<string>(0, 6, na)\n\n// Function to add rows to the matrix\nmtxFun(symbol, _time, price, _cum_pchg, _cum_vol_pchg, signal) =>\n    matrix.add_row(matrix, 0, array.from(symbol, _time, price, _cum_pchg, _cum_vol_pchg, signal))\n\n// Screener function to collect data\nscan(s) =>\n    sym = ticker.modify(s, syminfo.session)\n    [_time, price, _cum_pchg, _cum_vol_pchg, signal] = request.security(sym, timeframe.period, indicator_calculation())\n\n    // Check if the signal is not na and the time matches\n    if not na(signal) and _time == time\n        symbolName = symbol(s)\n        formattedTime = format_time(_time)\n        strPrice = str.tostring(price)\n        str_cum_pchg = str.tostring(_cum_pchg, '#.##')\n        str_cum_vol_pchg = str.tostring(_cum_vol_pchg, '#.##')\n        strSignal = str.tostring(signal)\n\n        // Add data to the matrix\n```\n\n----------------------------------------\n\nTITLE: Implementing RSI and Divergence Analysis in Pine Script\nDESCRIPTION: This snippet calculates RSI, plots RSI bands, and detects various types of divergences including bullish, bearish, and hidden divergences.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Indicator] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_5\n\nLANGUAGE: Pine Script\nCODE:\n```\nfloat rsi = ta.rsi(i_rsi_src, i_rsi_len)\nfloat rsi_ma = ta.sma(rsi, i_rsi_ma_len)\n\nplot(series = rsi, title = 'RSI', color = i_indicator_color, linewidth = 2)\nplot(series = rsi_ma, title = 'RSI Moving Average', color = i_signal_color)\n\nfloat overbought = 70\nfloat breakout = 60\nfloat middle = 50\nfloat breakdown = 40\nfloat oversold = 30\n\n_inRange(cond) =>\n    bars = ta.barssince(cond)\n    i_rsi_range_min <= bars and bars <= i_rsi_range_max\n\nbool plFound = not na(ta.pivotlow(rsi, i_rsi_p_left, i_rsi_p_right))\nbool phFound = not na(ta.pivothigh(rsi, i_rsi_p_left, i_rsi_p_right))\nfloat rsiLBR = rsi[i_rsi_p_right]\nfloat lowLBR = low[i_rsi_p_right]\nfloat highLBR = high[i_rsi_p_right]\n\n// Bull Divergence\nrsiHL = rsiLBR > ta.valuewhen(plFound, rsiLBR, 1) and _inRange(plFound[1])\npriceLL = lowLBR < ta.valuewhen(plFound, lowLBR, 1)\nbullDiv = i_scn_choose == 'Divergence' and i_rsi_show_bull and priceLL and rsiHL and plFound\n\n// Bear Divergence\nrsiLH = rsiLBR < ta.valuewhen(phFound, rsiLBR, 1) and _inRange(phFound[1])\npriceHH = highLBR > ta.valuewhen(phFound, highLBR, 1)\nbearDiv = i_scn_choose == 'Divergence' and i_rsi_show_bear and priceHH and rsiLH and phFound\n\n// Hidden Bullish\nrsiLL = rsiLBR < ta.valuewhen(plFound, rsiLBR, 1) and _inRange(plFound[1])\npriceHL = lowLBR > ta.valuewhen(plFound, lowLBR, 1)\nhiddenBullDiv = i_scn_choose == 'Hidden Divergence' and i_rsi_show_hbull and priceHL and rsiLL and plFound\n\n// Hidden Bearish\nrsiHH = rsiLBR > ta.valuewhen(phFound, rsiLBR, 1) and _inRange(phFound[1])\npriceLH = highLBR < ta.valuewhen(phFound, highLBR, 1)\nhiddenBearDiv = i_scn_choose == 'Hidden Divergence' and i_rsi_show_hbear and priceLH and rsiHH and phFound\n```\n\n----------------------------------------\n\nTITLE: Detecting and Managing FVGs in PineScript\nDESCRIPTION: Implements logic to detect Fair Value Gaps (FVGs), create new gaps, and manage existing ones. Includes functionality to register new gaps and check for gap closures.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_9\n\nLANGUAGE: pine\nCODE:\n```\nvar allGaps = array.new<Gap>()\n\nisFVGDown = high < low[2] and low[2] - high >= minimalDeviationInput\nisFVGUp = low > high[2] and low - high[2] >= minimalDeviationInput\nisFVG = isFVGDown or isFVGUp\nboxBorderColor = isFVGDown ? color.new(i_neg_color, i_transp + add_transp) : color.new(i_pos_color, i_transp + add_transp)\nboxBgcolor = isFVGDown ? color.new(i_neg_color, i_transp) : color.new(i_pos_color, i_transp)\n\nregisterNewGap(bool isFVGDown) => \n    alertInfo.countOpenGap += 1\n    \n    newBox = box.new(\n      bar_index - 2,\n      (isFVGDown ? low[2] : low),\n      bar_index,\n      (isFVGDown ? high : high[2]),\n      border_color = boxBorderColor,\n      bgcolor = boxBgcolor,\n      extend = extend.right)\n\n    allGaps.push(Gap.new(true, isFVGDown, array.from(newBox)))\n\n    if allGaps.size() > boxLimitInput\n        allGaps.shift().delete()\n\nfor gap in allGaps\n    gap.checkForClose()\n\nif isFVG    \n    registerNewGap(isFVGDown)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Retracement Signals in Pine Script\nDESCRIPTION: Creates visual indicators for retracement signals including shapes above/below bars, background colors, and bar colors based on the continuous signal type selection.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_11\n\nLANGUAGE: pine\nCODE:\n```\nplotshape(series=i_scr_choose == 'Continuous Signals' and short_ret_trigger ? 3 : na, title='Short Continuous', style=shape.triangledown, location=location.abovebar, color=i_neg_light_color, size=size.tiny)\nplotshape(series=i_scr_choose == 'Continuous Signals' and long_ret_trigger ? 3 : na, title='Long Continuous', style=shape.triangleup, location=location.belowbar, color=i_pos_light_color, size=size.tiny)\n\nbgcolor(color=i_scr_choose == 'Continuous Signals' and short_ret_trigger ? color.new(i_neg_light_color, 90) : i_scr_choose == 'Continuous Signals' and long_ret_trigger ? color.new(i_pos_light_color, 90) : na, title='Continuous Bgcolor', show_last=i_display_len)\nbarcolor(color=i_scr_choose == 'Continuous Signals' and short_ret_trigger ? i_neg_light_color : i_scr_choose == 'Continuous Signals' and long_ret_trigger ? i_pos_light_color : na, title='Continuous Candle')\n```\n\n----------------------------------------\n\nTITLE: Generating Retracement Signals in PineScript\nDESCRIPTION: This code generates retracement signals for both short and long positions based on multiple conditions and filters.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_13\n\nLANGUAGE: pinescript\nCODE:\n```\n// Short Retracement\nshort_ret_cont_1 = macdLine > 0\n\nshort_ret_cont_2 = \n close < supertrend and \n close < vwap_twap_choice and \n stoc_k < i_stoc_over_bought and \n stoc_k < stoc_d and \n macdLine < 0 and\n macdLine < signalLine and\n macdLine < histLine and\n atr_filter and\n body_filter and\n body_size_filter and\n volume_filter and\n rel_vol_filter and\n time_filter and\n barstate.isconfirmed\n\nvar bear_break_current_state = 0\nbear_break_previous_state = nz(bear_break_current_state[1])\nbear_break_current_state := bear_break_previous_state == 2 ? 0 : bear_break_previous_state\nif short_ret_cont_1 and bear_break_current_state == 0\n    bear_break_current_state := 1\nif short_ret_cont_2 and bear_break_current_state == 1\n    bear_break_current_state := 2\n\nshort_ret_trigger = bear_break_current_state == 2 ? true : false\n\n// Long Retracement\nlong_ret_cont_1 = macdLine < 0\n\nlong_ret_cont_2 = \n close > supertrend and \n close > vwap_twap_choice and \n stoc_k > i_stoc_over_sold and \n stoc_k > stoc_d and \n macdLine > 0 and\n macdLine > signalLine and\n macdLine > histLine and\n atr_filter and\n body_filter and\n body_size_filter and\n volume_filter and\n rel_vol_filter and\n time_filter and\n barstate.isconfirmed\n\nvar bull_break_current_state = 0\nbull_break_previous_state = nz(bull_break_current_state[1])\nbull_break_current_state := bull_break_previous_state == 2 ? 0 : bull_break_previous_state\nif long_ret_cont_1 and bull_break_current_state == 0\n    bull_break_current_state := 1\nif long_ret_cont_2 and bull_break_current_state == 1\n    bull_break_current_state := 2\n\nlong_ret_trigger = bull_break_current_state == 2 ? true : false\n```\n\n----------------------------------------\n\nTITLE: Implementing Trading Condition Filters in Pine Script\nDESCRIPTION: Series of boolean filters for trading conditions that can be activated via user input. Includes ATR filter for volatility, body percentage filter for candle quality, body size filter for momentum, and time/date filters for specific trading windows.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Scanner] ICT Liquidity Void Fill Scanner.txt#2025-04-16_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\n// ATR Filter\nbool atr_filter = true\nif i_atr_filter\n    atr_filter := high - low > ta.atr(i_atr_length) * i_atr_multi\n\n// Body Percent Filter\nbool body_filter = true\nif i_body_filter\n    body_filter := math.abs(close - open) / (high - low) >= i_body_percent\n\n// Body Size Filter\nbool body_size_filter = true\nif i_body_size_filter\n    body_size_filter := math.abs(close - open) / (high - low) >= i_body_percent and high - low >= (high[1] - low[1]) * i_body_size_multiplier\n\n// Time Filter\nbool time_filter = true\nif i_time_filter\n    time_filter := (hour > i_hour_1 or hour == i_hour_1 and minute >= i_minute_1) and (hour < i_hour_2 or hour == i_hour_2 and minute < i_minute_2)\n\n// Date Filter\nbool date_filter = true\nif i_date_filter\n    date_filter := year == i_year and month == i_month and dayofmonth == i_day\n```\n\n----------------------------------------\n\nTITLE: Implementing Additional Filters in PineScript\nDESCRIPTION: This code implements various filters including ATR, body percent, body size, volume SMA, relative volume, and time filters to refine trading signals.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_12\n\nLANGUAGE: pinescript\nCODE:\n```\n// ATR Filter\nbool atr_filter = true\nif i_atr_filter\n    atr_filter := (high - low) > ta.atr(i_atr_length) * i_atr_multi\n\n// Body Percent Filter\nbool body_filter = true\nif i_body_filter\n    body_filter := (math.abs(close - open)) / (high - low) >= i_body_percent\n\n// Body Size Filter\nbool body_size_filter = true\nif i_body_size_filter\n    body_size_filter := (math.abs(close - open)) / (high - low) >= i_body_percent and (high - low) >= (high[1] - low[1]) * i_body_size_multiplier\n\n// Volume SMA Filter\nbool volume_filter = true\nif i_volume_filter\n    volume_filter := volume > ta.sma(volume, i_vol_sma_length)\n\n// Relative Volume Filter\naverage_volume = ta.sma(volume, i_rel_vol_avg_vol_len)\nrelative_volume = volume / average_volume[1]\nrel_vol_sma_multiplier = ta.sma(relative_volume, i_rel_vol_avg_vol_len) * i_rel_vol_avg_vol_multi\n\nbool rel_vol_filter = true\nif i_rel_vol_filter\n    rel_vol_filter := relative_volume > rel_vol_sma_multiplier\n\n// Time Filter\nbool time_filter = true\nif i_time_filter\n    time_filter := (hour > i_hour_1 or (hour == i_hour_1 and minute >= i_minute_1)) and (hour < i_hour_2 or (hour == i_hour_2 and minute < i_minute_2))\n```\n\n----------------------------------------\n\nTITLE: Implementing ZigZag Pattern Detection in PineScript\nDESCRIPTION: An implementation of a ZigZag indicator based on 'Zig Zag Ratio Simplified' by RozaniGhani-RG. It identifies swing highs and lows based on configurable periods and maintains them in an array for pattern detection.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_9\n\nLANGUAGE: pine\nCODE:\n```\n// Acknowledgement & Reference\n// Trader: 'RozaniGhani-RG'\n// Indicator Title: 'Zig Zag Ratio Simplified'\n// Indicator Link: 'https://www.tradingview.com/script/CIk186OY-Zig-Zag-Ratio-Simplified/'\n\n//_____________________________ Get Source\n\nfloat _high = \n i_zz_source == 'Open/Close' ? math.max(open, close) : \n i_zz_source == 'Close' ? close : \n high\n\nfloat _low = \n i_zz_source == 'Open/Close' ? math.max(open, close) : \n i_zz_source == 'Close' ? close : \n low\n\n//============================== 1.  Variables\n\n//_____________________________ 1.1 Highest / Lowest\nfloat ph = ta.highestbars(_high, i_zz_period) == 0 ? _high : na\nfloat pl = ta.lowestbars(_low, i_zz_period) == 0 ? _low  : na\n\n//_____________________________ 1.2 Dir\nvar int dir = 0, dir := pl and na(ph) ? -1 : ph and na(pl) ? 1 : dir\n\n//_____________________________ 1.4 Array\nvar max_array_size = 18, var zigzag = array.new_float(0), oldzigzag = array.copy(zigzag)\n\n//_____________________________ 1.5 Others\nvar line line_zz = na\n\n//============================== 3.  Custom Functions\n\nadd_to_zigzag(float[] pointer, float value, int bindex) =>\n    array.unshift(pointer, bindex)\n    array.unshift(pointer, value)\n    if array.size(pointer) > max_array_size\n        array.pop(pointer)\n        array.pop(pointer)\n    \nupdate_zigzag(float[] pointer, float value, int bindex, int dir) =>\n    if array.size(pointer) == 0\n        add_to_zigzag(pointer, value, bindex)\n    else\n        if dir == 1 and value > array.get(pointer, 0) or dir == -1 and value < array.get(pointer, 0)\n            array.set(pointer, 0, value)\n            array.set(pointer, 1, bindex)\n        0.\n\n//============================== 4.  Calculations\n\ndirchanged = ta.change(dir)\n\nif ph or pl\n    if dirchanged\n        add_to_zigzag(zigzag, dir == 1 ? ph : pl, bar_index)\n    else\n        update_zigzag(zigzag, dir == 1 ? ph : pl, bar_index, dir)\n\n//============================== 5.  Constructs\n\nif array.size(zigzag) >= 9\n    if array.get(zigzag, 0) != array.get(oldzigzag, 0) or array.get(zigzag, 1) != array.get(oldzigzag, 1)\n        if array.get(zigzag, 2) == array.get(oldzigzag, 2) and array.get(zigzag, 3) == array.get(oldzigzag, 3)\n            line.delete(line_zz)\n        if i_zz_display\n            line_zz := line.new(x1 = math.round(array.get(zigzag, 1)), y1 = array.get(zigzag, 0), x2 = math.round(array.get(zigzag, 3)), y2 = array.get(zigzag, 2), color = dir == 1 ? i_zz_bull_color : i_zz_bear_color, width=1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Technical Filters in PineScript\nDESCRIPTION: A comprehensive set of technical filters for trading strategies including percentage change, volume, ATR, candle body, time, and date filters. Each filter can be toggled on/off through input variables.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_8\n\nLANGUAGE: pine\nCODE:\n```\n// % Change Filter\nbool pchg_above_filter = true\nbool pchg_below_filter = true\nif i_pchg_filter\n    pchg_above_filter := cum_pchg > i_pchg_above_below\n    pchg_below_filter := cum_pchg < -i_pchg_above_below\n\n// Volume Filter\nbool vol_filter = true\nif i_vol_filter\n    vol_filter := current_cum_vol >= i_vol_above\n\n// Volume % Change Filter\nbool vol_pchg_filter = true\nif i_vol_pchg_filter\n    vol_pchg_filter := cum_vol_pchg >= i_vol_pchg_above\n\n// ATR Filter\nbool atr_filter = true\nif i_atr_filter\n    atr_filter := (high - low) > ta.atr(i_atr_length) * i_atr_multi\n\n// Body Percent Filter\nbool body_filter = true\nif i_body_filter\n    body_filter := (math.abs(close - open)) / (high - low) >= i_body_percent\n\n// Body Size Filter\nbool body_size_filter = true\nif i_body_size_filter\n    body_size_filter := (math.abs(close - open)) / (high - low) >= i_body_percent and (high - low) >= (high[1] - low[1]) * i_body_size_multiplier\n\n// Volume SMA Filter\nbool volume_filter = true\nif i_volume_filter\n    volume_filter := volume > ta.sma(volume, i_vol_sma_length)\n\n// FVG Retracement Filter\naverage_volume = ta.sma(volume, i_rel_vol_avg_vol_len)\nrelative_volume = volume / average_volume[1]\nrel_vol_sma_multiplier = ta.sma(relative_volume, i_rel_vol_avg_vol_len) * i_rel_vol_avg_vol_multi\n\nbool rel_vol_filter = true\nif i_rel_vol_filter\n    rel_vol_filter := relative_volume > rel_vol_sma_multiplier\n\n// Time Filter\nbool time_filter = true\nif i_time_filter\n    time_filter := (hour > i_hour_1 or (hour == i_hour_1 and minute >= i_minute_1)) and (hour < i_hour_2 or (hour == i_hour_2 and minute < i_minute_2))\n\n// Date Filter\nbool date_filter = true\nif i_date_filter\n    date_filter := (year == i_year and month == i_month and dayofmonth == i_day)\n```\n\n----------------------------------------\n\nTITLE: Calculating Cumulative Volume in PineScript\nDESCRIPTION: Function to calculate daily cumulative volume and track the current and previous day's cumulative volumes. It detects day changes using time('D') and maintains running totals.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_7\n\nLANGUAGE: pine\nCODE:\n```\n// Function to calculate Daily Cumulative Volume\ncumulative_volume() =>\n    var float _cum_vol = na\n    _is_new_day = ta.change(time('D')) != 0 ? 1 : 0\n    _cum_vol := _is_new_day ? volume : (na(_cum_vol) ? volume : (_cum_vol + volume))\n    _cum_vol\n\n// Calculate current and previous day cumulative volumes\nvar float current_cum_vol = na\nvar float prev_cum_vol = na\n\nif ta.change(time('D')) != 0\n    prev_cum_vol := current_cum_vol\n    current_cum_vol := volume\nelse\n    current_cum_vol += volume\n\n// Calculate Cumulative Volume Percentage Change\ncum_vol_pchg = (current_cum_vol - nz(prev_cum_vol, current_cum_vol)) / nz(prev_cum_vol, current_cum_vol) * 100\n```\n\n----------------------------------------\n\nTITLE: Multi-Timeframe Fair Value Gap Implementation in PineScript\nDESCRIPTION: Main implementation code that processes Fair Value Gap detection across three different timeframes. It fetches data for each timeframe, processes imbalances, and adjusts margins for visual display. This enables viewing Fair Value Gaps from multiple timeframes on a single chart.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_10\n\nLANGUAGE: pine\nCODE:\n```\ndaily                                   := request.security(syminfo.tickerid, \"1D\", ta.atr(14))\nmonthly                                 := request.security(syminfo.tickerid, \"1M\", ta.atr(14))\n\n[o_1, h_1, l_1, c_1, t_1]               = request.security(syminfo.tickerid, htf_1, [open[1], high[1], low[1], close[1], time[1]])\n[o1_1, h1_1, l1_1, c1_1, t1_1]          = request.security(syminfo.tickerid, htf_1, [open[2], high[2], low[2], close[2], time[2]])\n[o2_1, h2_1, l2_1, c2_1, t2_1]          = request.security(syminfo.tickerid, htf_1, [open[3], high[3], low[3], close[3], time[3]])\nTF_1 := FVG_1.Process(o_1, h_1, l_1, c_1, t_1, o1_1, h1_1, l1_1, c1_1, t1_1, o2_1, h2_1, l2_1, c2_1, t2_1)\nFVG_1.AdjustMargins(TF_1)\n\n[o_2, h_2, l_2, c_2, t_2]               = request.security(syminfo.tickerid, htf_2, [open[1], high[1], low[1], close[1], time[1]])\n[o1_2, h1_2, l1_2, c1_2, t1_2]          = request.security(syminfo.tickerid, htf_2, [open[2], high[2], low[2], close[2], time[2]])\n[o2_2, h2_2, l2_2, c2_2, t2_2]          = request.security(syminfo.tickerid, htf_2, [open[3], high[3], low[3], close[3], time[3]])\nTF_2 := TF_1 + FVG_2.Process(o_2, h_2, l_2, c_2, t_2, o1_2, h1_2, l1_2, c1_2, t1_2, o2_2, h2_2, l2_2, c2_2, t2_2)\nFVG_2.AdjustMargins(TF_2)\n\n[o_3, h_3, l_3, c_3, t_3]               = request.security(syminfo.tickerid, htf_3, [open[1], high[1], low[1], close[1], time[1]])\n[o1_3, h1_3, l1_3, c1_3, t1_3]          = request.security(syminfo.tickerid, htf_3, [open[2], high[2], low[2], close[2], time[2]])\n[o2_3, h2_3, l2_3, c2_3, t2_3]          = request.security(syminfo.tickerid, htf_3, [open[3], high[3], low[3], close[3], time[3]])\nTF_3 := TF_2 + FVG_3.Process(o_3, h_3, l_3, c_3, t_3, o1_3, h1_3, l1_3, c1_3, t1_3, o2_3, h2_3, l2_3, c2_3, t2_3)\nFVG_3.AdjustMargins(TF_3)\n```\n\n----------------------------------------\n\nTITLE: Implementing AddZone Method for Displaying Imbalance Zones in Pine Script\nDESCRIPTION: Defines a method to visualize imbalance zones (Fair Value Gaps) on the chart. This method handles the creation and updating of boxes and middle lines for each imbalance, managing colors based on bullish/bearish direction and mitigation status.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\n//____________________________ Imbalances Methods\n\n// AddZone is used to display and manage imbalance related boxes\nmethod AddZone(ImbalanceStructure IS, Imbalance imb, int step) =>\n    bool visible = true\n    if IS.settings.show\n        int buffer = time+((time-time[1])*(settings.padding+1+(settings.buffer*(step-1)))) \n\n        if na(imb.box)\n            _bgcolor = imb.open < imb.close ? color.new(IS.settings.color_bull, settings.bgcolor_transp) : color.new(IS.settings.color_bear, settings.bgcolor_transp)\n            _text = helper.Gethtftext(IS.settings.htf)\n            _text_color = settings.text_show ? _bgcolor : na   \n            imb.box := box.new(imb.open_time, imb.open, buffer, imb.close, _bgcolor, bgcolor = _bgcolor, xloc=xloc.bar_time, text=_text, text_size=settings.text_size, text_color=_text_color, text_halign=text.align_center, text_valign=text.align_center)\n\n            if settings.CE_show\n                _line_color = imb.open < imb.close ? color.new(IS.settings.color_bull, settings.color_transp) : color.new(IS.settings.color_bear, settings.color_transp)\n                imb.line_middle := line.new(imb.open_time, imb.middle, buffer, imb.middle, xloc=xloc.bar_time, style=settings.CE_style, color=_line_color)\n        else\n            box.set_right(imb.box, imb.mitigated ? imb.mitigated_time : buffer)\n            mitigated_text_color = imb.open < imb.close ? imb.mitigated ? color.new(settings.mitigated_color_bull, settings.bgcolor_transp) : color.new(IS.settings.color_bull, settings.bgcolor_transp) : imb.mitigated ? color.new(settings.mitigated_color_bear, settings.bgcolor_transp) : color.new(IS.settings.color_bear, settings.bgcolor_transp)\n            box.set_bgcolor(imb.box, mitigated_text_color)\n            box.set_border_color(imb.box, mitigated_text_color)\n            box.set_text_color(imb.box, settings.text_show ? mitigated_text_color : na)\n            line.set_color(imb.line_middle, imb.open < imb.close ? imb.mitigated ? color.new(settings.mitigated_color_bull, settings.bgcolor_transp) : color.new(IS.settings.color_bull, settings.color_transp) : imb.mitigated ? color.new(settings.mitigated_color_bear, settings.bgcolor_transp) : color.new(IS.settings.color_bear, settings.color_transp))\n\n            if settings.CE_show\n```\n\n----------------------------------------\n\nTITLE: Implementing Long Retracement Signal Logic in Pine Script\nDESCRIPTION: Creates a state machine to detect long retracement signals. Requires specific conditions for MACD, price relative to Supertrend and VWAP/TWAP, and stochastic conditions, along with all enabled filters.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_10\n\nLANGUAGE: pine\nCODE:\n```\n// Long Condition 1\nlong_ret_cont_1 = macdLine < 0\n\n// Long Condition 2\nlong_ret_cont_2 = \n close > supertrend and \n close > vwap_twap_choice and \n stoc_k > i_stoc_over_sold and \n stoc_k > stoc_d and \n macdLine > 0 and\n macdLine > signalLine and\n macdLine > histLine and\n atr_filter and\n body_filter and\n body_size_filter and\n volume_filter and\n rel_vol_filter and\n time_filter and\n barstate.isconfirmed\n\n// Long  Retracement Trigger\nvar bull_break_current_state = 0\nbull_break_previous_state = nz(bull_break_current_state[1])\nbull_break_current_state := bull_break_previous_state == 2 ? 0 : bull_break_previous_state\nif long_ret_cont_1 and bull_break_current_state == 0\n    bull_break_current_state := 1\nif long_ret_cont_2 and bull_break_current_state == 1\n    bull_break_current_state := 2\n\nlong_ret_trigger = bull_break_current_state == 2 ? true : false\n```\n\n----------------------------------------\n\nTITLE: Defining Trading Filters in PineScript\nDESCRIPTION: Implementation of multiple trading filters including percentage change, volume change, ATR, candlestick body size, relative volume, and time filters. These filters are combined to improve signal quality and reduce false positives.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Indicator - Trend Following Setup - Sideways Market Skipper.txt#2025-04-16_snippet_5\n\nLANGUAGE: pinescript\nCODE:\n```\n// % Change Filter\nbool pchg_above_filter = true\nbool pchg_below_filter = true\nif i_pchg_filter\n    pchg_above_filter := cum_pchg > i_pchg_above_below\n    pchg_below_filter := cum_pchg < -i_pchg_above_below\n\n// Volume % Change Filter\nbool vol_pchg_filter = true\nif i_vol_pchg_filter\n    vol_pchg_filter := cum_vol_pchg >= i_vol_pchg_above\n\n// ATR Filter\nbool atr_filter = true\nif i_atr_filter\n    atr_filter := (high - low) > ta.atr(i_atr_length) * i_atr_multi\n\n// Body Percent Filter\nbool body_filter = true\nif i_body_filter\n    body_filter := (math.abs(close - open)) / (high - low) >= i_body_percent\n\n// Body Size Filter\nbool body_size_filter = true\nif i_body_size_filter\n    body_size_filter := (math.abs(close - open)) / (high - low) >= i_body_percent and (high - low) >= (high[1] - low[1]) * i_body_size_multiplier\n\n// Volume SMA Filter\nbool volume_filter = true\nif i_volume_filter\n    volume_filter := volume > ta.sma(volume, i_vol_sma_length)\n\n// Continuous Signals Filter\naverage_volume = ta.sma(volume, i_rel_vol_avg_vol_len)\nrelative_volume = volume / average_volume[1]\nrel_vol_sma_multiplier = ta.sma(relative_volume, i_rel_vol_avg_vol_len) * i_rel_vol_avg_vol_multi\n\nbool rel_vol_filter = true\nif i_rel_vol_filter\n    rel_vol_filter := relative_volume > rel_vol_sma_multiplier\n\n// Time Filter\nbool time_filter = true\nif i_time_filter\n    time_filter := (hour > i_hour_1 or (hour == i_hour_1 and minute >= i_minute_1)) and (hour < i_hour_2 or (hour == i_hour_2 and minute < i_minute_2))\n```\n\n----------------------------------------\n\nTITLE: Magnetic Zones Calculation Functions\nDESCRIPTION: Core functions for calculating magnetic zones and buffer zones. The magnetic_zones function calculates resistance and support levels based on previous high-low differences, while buffer_zone creates margins around these levels.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_1\n\nLANGUAGE: pinescript\nCODE:\n```\nmagnetic_zones(float multiplier) =>\n    prev_hl_diff = high[1] - low[1]\n    r = hl2[1] + multiplier * prev_hl_diff\n    s = hl2[1] - multiplier * prev_hl_diff\n    [r, s]\n\nbuffer_zone(float level, float level_top, float level_bot) =>\n    top = level + ((level_top - level_bot) / 8)\n    bottom = level - ((level_top - level_bot) / 8)\n    [top, bottom]\n```\n\n----------------------------------------\n\nTITLE: VWAP and TWAP Implementation\nDESCRIPTION: Calculates Volume Weighted Average Price (VWAP) and Time Weighted Average Price (TWAP) with customizable timeframe settings.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_2\n\nLANGUAGE: pinescript\nCODE:\n```\nfloat vwap = na\n[_vwap, _stdevUpper, _] = ta.vwap(hlc3, timeframe.change(i_vtwap_timeframe), 1)\nvwap := _vwap\n\ntwap(source, anchorChange) =>\n    var prices = 0.0\n    var count = 0\n\n    if anchorChange\n        prices := 0\n        count := 0\n\n\tprices += source\n\tcount += 1\n\n    prices / count\n\ntwapValue = twap(ohlc4, timeframe.change(i_vtwap_timeframe))\n```\n\n----------------------------------------\n\nTITLE: Implementing Short Retracement Signal Logic in Pine Script\nDESCRIPTION: Creates a state machine to detect short retracement signals. Requires specific conditions for MACD, price relative to Supertrend and VWAP/TWAP, and stochastic conditions, along with all enabled filters.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_9\n\nLANGUAGE: pine\nCODE:\n```\n// Short Condition 1\nshort_ret_cont_1 = macdLine > 0\n\n// Short Condition 2\nshort_ret_cont_2 = \n close < supertrend and \n close < vwap_twap_choice and \n stoc_k < i_stoc_over_bought and \n stoc_k < stoc_d and \n macdLine < 0 and\n macdLine < signalLine and\n macdLine < histLine and\n atr_filter and\n body_filter and\n body_size_filter and\n volume_filter and\n rel_vol_filter and\n time_filter and\n barstate.isconfirmed\n\n// Short Retracement Trigger\nvar bear_break_current_state = 0\nbear_break_previous_state = nz(bear_break_current_state[1])\nbear_break_current_state := bear_break_previous_state == 2 ? 0 : bear_break_previous_state\nif short_ret_cont_1 and bear_break_current_state == 0\n    bear_break_current_state := 1\nif short_ret_cont_2 and bear_break_current_state == 1\n    bear_break_current_state := 2\n\nshort_ret_trigger = bear_break_current_state == 2 ? true : false\n```\n\n----------------------------------------\n\nTITLE: Implementing Bullish Retracement Logic in PineScript\nDESCRIPTION: This code segment defines bullish retracement levels and conditions, using a similar approach to the bearish retracement. It includes a state machine for tracking the progression of bullish retracements.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Market Structure Shift (MSS)/ICT Market Structure Shift (MSS) Screener.txt#2025-04-16_snippet_5\n\nLANGUAGE: pinescript\nCODE:\n```\nvar bullish_retracement_price = float(na)\nvar bullish_retracement_bi = float(na)\nif bullish_condition\n    bullish_retracement_price := bullish_retracement_level\n    bullish_retracement_bi := bi_1\n\nbool bullish_retracement_condition = \n ta.crossunder(low, bullish_retracement_price) and\n barstate.isconfirmed\n\nvar bull_current_state = 0\nbull_previous_state = nz(bull_current_state[1])\nbull_current_state := bull_previous_state == 2 ? 0 : bull_previous_state\nif bullish_condition and bull_current_state == 0\n    bull_current_state := 1\nif bullish_retracement_condition and bull_current_state == 1\n    bull_current_state := 2\n\nbool bullish_retracement_trigger = bull_current_state == 2 ? true : false\n```\n\n----------------------------------------\n\nTITLE: Configuring Scanner Input Parameters in PineScript\nDESCRIPTION: Defines user input options for the scanner, including scanning method, symbol list, and table display preferences. This allows customization of the scanner's behavior and output.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_1\n\nLANGUAGE: pinescript\nCODE:\n```\nstring i_scr_choose = input.string(defval = 'First Touch Confirmed', title = 'Scanning Method', options = ['FVG %', 'First Touch', 'First Touch Confirmed',  'Full Fill', 'Full Fill Confirmed', 'Reversal'], group = g_scrtb)\n\nstring i_symbols = input.text_area(\n defval=\"NSE:ABFRL,NSE:BANDHANBNK,NSE:BHEL,NSE:BLS,NSE:CENTRALBK,NSE:CESC,NSE:ENGINERSIN,NSE:EXIDEIND,NSE:FINPIPE,NSE:HINDCOPPER,NSE:IEX,NSE:IGL,NSE:IIFL,NSE:INOXWIND,NSE:IOB,NSE:IRB,NSE:IRCON,NSE:IRFC,NSE:LTF,NSE:MAHABANK,NSE:MANAPPURAM,NSE:MMTC,NSE:MRPL,NSE:NATIONALUM,NSE:NETWORK18,NSE:NLCINDIA,NSE:NMDC,NSE:PPLPHARMA,NSE:RAILTEL,NSE:RBLBANK,NSE:RCF,NSE:RTNINDIA,NSE:SAIL,NSE:SAMMAANCAP,NSE:SBFC,NSE:SCI,NSE:SJVN,NSE:SUZLON,NSE:TTML,NSE:FSL\", \n title=\"Paste Symbols\", tooltip=tt_is, group=g_scrtb)\n\nbool i_scr_show_table = input.bool(defval = true, title = 'Display Table', group = g_scrtb)\nbool i_scr_show_long = input.bool(defval = true, title = 'Long Signals', inline = 'tb_2', group = g_scrtb)\nbool i_scr_show_short = input.bool(defval = true, title = 'Short Signals', inline = 'tb_2', group = g_scrtb)\n```\n\n----------------------------------------\n\nTITLE: Calculating and Drawing Pivot High/Low Points in PineScript\nDESCRIPTION: Implements the logic for calculating pivot high/low points for the first timeframe, creates arrays to store the pivot points, and draws the corresponding lines and labels on the chart.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External Range Liquidity/ICT External Range Liquidity Static Multi-timeframe (Swing High and Low).txt#2025-04-16_snippet_3\n\nLANGUAGE: pinescript\nCODE:\n```\nvar phl_1_ln_arr = array.new_line(i_phl_1_showlast)\nvar phl_1_lbl_arr = array.new_label(i_phl_1_showlast)\n\nphl_1_bars_htf = int(f_tfResInMinutes(i_phl_1_tf) / res_in_minutes)\nphl_1_bars_offset = int(i_phl_1_left * phl_1_bars_htf)\n\nphl_1_ph = ta.pivothigh(_high, i_phl_1_left, i_phl_1_right)\nphl_1_pl = ta.pivotlow(_low, i_phl_1_left, i_phl_1_right)\n\nphl_1_ph_htf = request.security(syminfo.tickerid, i_phl_1_tf, phl_1_ph)\nphl_1_pl_htf = request.security(syminfo.tickerid, i_phl_1_tf, phl_1_pl)\nphl_1_ph_new = na(phl_1_ph_htf[1]) and not na(phl_1_ph_htf)\nphl_1_pl_new = na(phl_1_pl_htf[1]) and not na(phl_1_pl_htf)\n\nphl_1_ph_offset = f_offsetToP(_high, phl_1_ph_htf, math.min(i_max_bars_back, math.max(30, phl_1_bars_offset + phl_1_bars_htf + 1)))\nphl_1_pl_offset = f_offsetToP(_low, phl_1_pl_htf, math.min(i_max_bars_back, math.max(30, phl_1_bars_offset + phl_1_bars_htf + 1)))\n\nif i_phl_1_show and phl_1_bars_offset <= i_max_bars_back\n    f_addLines(i_phl_1_lbl_show, phl_1_ph_htf, phl_1_pl_htf, phl_1_ph_offset, phl_1_pl_offset, phl_1_ph_new, phl_1_pl_new, i_phl_1_h_ln_color, i_phl_1_l_ln_color, i_phl_1_showlast, i_phl_1_ln_width, i_phl_1_ln_stye, phl_1_ln_arr, phl_1_lbl_arr)   \n\nif i_phl_1_show\n    f_extendArray(phl_1_ln_arr, phl_1_lbl_arr, i_phl_1_ln_extend)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Multi-Symbol Technical Analysis Screener in Pine Script\nDESCRIPTION: This code implements a screener that evaluates multiple symbols against customizable bullish and bearish conditions. It collects signals from different symbols, organizes them in a matrix, and displays them in a formatted table with timestamps and prices for quick market analysis.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup with Scanner.txt#2025-04-16_snippet_14\n\nLANGUAGE: pine\nCODE:\n```\n// Screener Conditions\nbearish_cond = short_cont\nbullish_cond = long_cont \n\n// Define Bull and Bear Conditions\nbull = not(i_scr_direction == \"Bearish\")\nbear = not(i_scr_direction == \"Bullish\")\n\n// Function for Screener Indicator Calculation\nindicator_calculation() =>\n    // Initialize variables\n    price = float(na)\n    _time = int(na)\n    signal = int(na) \n\n    if barstate.isconfirmed\n        // Check for Bearish Momentum Candle and conditions (Modify here to customize indicators)\n        if i_scr_show_bull and bearish_cond and bear \n            signal := -1\n\n        // Check for Bullish Momentum Candle and conditions (Modify here to customize indicators)\n        else if i_scr_show_bear and bullish_cond and bull\n            signal := 1\n\n        // Update price and time if signal is not null\n        if not na(signal)\n            price := math.round_to_mintick(close)\n            _time := time\n\n    [_time, price, signal]\n\n// Function to format time\nformat_time(x) =>\n    timezone = syminfo.timezone\n    timeframe.isintraday ? str.format_time(x, \"HH:mm  dd-MM-yyyy\", timezone) : str.format_time(x, \"dd-MM-yyyy\", timezone)\n\n// Function to extract symbol name\nsymbol(s) => \n    array.get(str.split(s, \":\"), 1)\n\n// Matrix setup\nvar matrix = matrix.new<string>(0, 4, na)\n\n// Function to add rows to the matrix\nmtxFun(symbol, _time, price, signal) =>\n    matrix.add_row(matrix, 0, array.from(symbol, _time, price, signal))\n\n// Screener function to collect data\nscreener(s) =>\n    sym = ticker.modify(s, syminfo.session)\n    [_time, price, signal] = request.security(sym, timeframe.period, indicator_calculation())\n\n    // Check if the signal is not na and the time matches\n    if not na(signal) and _time == time\n        symbolName = symbol(s)\n        formattedTime = format_time(_time)\n        strPrice = str.tostring(price)\n        strSignal = str.tostring(signal)\n        \n        // Add data to the matrix\n        mtxFun(symbolName, formattedTime, strPrice, strSignal)\n\n// Call Screener function for multiple symbols\nscreener(tid_001), screener(tid_002), screener(tid_003), screener(tid_004), screener(tid_005), screener(tid_006), screener(tid_007),\nscreener(tid_008), screener(tid_009), screener(tid_010), screener(tid_011), screener(tid_012), screener(tid_013), screener(tid_014),\nscreener(tid_015), screener(tid_016), screener(tid_017), screener(tid_018), screener(tid_019), screener(tid_020), screener(tid_021),\nscreener(tid_022), screener(tid_023), screener(tid_024), screener(tid_025), screener(tid_026), screener(tid_027), screener(tid_028),\nscreener(tid_029), screener(tid_030), screener(tid_031), screener(tid_032), screener(tid_033), screener(tid_034), screener(tid_035),\nscreener(tid_036), screener(tid_037), screener(tid_038), screener(tid_039)//, screener(tid_040)\n\n// Trim excess rows in the matrix\nif matrix.rows(matrix) > i_scr_tbl_disp_rows\n    while matrix.rows(matrix) > i_scr_tbl_disp_rows\n        matrix.remove_row(matrix, matrix.rows(matrix)-1)\n\n// Plot Table\n// Create table with specified properties\nvar table scr_tbl = table.new(position=i_scr_tbl_position, columns=3, rows=102, border_width=1)\n\n// Function to populate cells in the table\nscr_cell_title(col, row, txt) => \n    table.cell(scr_tbl, col, row, text = txt, text_color = i_neu_col, text_halign=text.align_center, bgcolor = color.new(i_neu_col, 90), text_size=i_scr_tbl_text_size)\n\nscr_cell(col, row, txt, color) => \n    table.cell(scr_tbl, col, row, text = txt, text_color = color, text_halign=text.align_left, bgcolor = color.new(color, 90), text_size=i_scr_tbl_text_size)\n```\n\n----------------------------------------\n\nTITLE: Creating ZigZag Pattern Boxes and Lines in PineScript\nDESCRIPTION: Implements visualization for ZigZag patterns using boxes and dashed lines. Creates and stores line objects in an array for bearish and bullish conditions, with customizable colors and transparency levels.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Market Structure Shift (MSS)/ICT Market Structure Shift (MSS).txt#2025-04-16_snippet_3\n\nLANGUAGE: pinescript\nCODE:\n```\n//var box_array = array.new_box()\nvar line_array = array.new_line()\n\nif i_zz_bear_show and bearish_condition\n    ph_box = box.new(left=int(bi_3), top=zz_3, right=int(bi_1), bottom=zz_1, border_color=#00000000, bgcolor=color.new(i_neg_color, i_zz_bx_transp))\n    if i_zz_bear_shift_show\n        ph_line = line.new(x1=int(bi_2), y1=zz_2, x2=bar_index, y2=zz_2, color=i_neg_color, style=line.style_dashed)\n        //array.push(box_array, ph_box)\n        array.push(line_array, ph_line)\n\nif i_zz_bull_show and bullish_condition\n    pl_box = box.new(left=int(bi_3), top=zz_3, right=int(bi_1), bottom=zz_1, border_color=#00000000, bgcolor=color.new(i_pos_color, i_zz_bx_transp))\n    if i_zz_bull_shift_show\n        pl_line = line.new(x1=int(bi_2), y1=zz_2, x2=bar_index, y2=zz_2, color=i_pos_color, style=line.style_dashed)\n        //array.push(box_array, pl_box)\n        array.push(line_array, pl_line)\n```\n\n----------------------------------------\n\nTITLE: Implementing Short Retracement Signal Logic in PineScript\nDESCRIPTION: This snippet defines the logic for detecting short retracement signals. It uses a state machine approach to track the progression of conditions leading to a short signal.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Scanner] ICT Liquidity Void Fill Scanner.txt#2025-04-16_snippet_5\n\nLANGUAGE: pine\nCODE:\n```\n// Short Retracement Signal\nvar short_curr_state = 0\nshort_prev_state = nz(short_curr_state[1])\nshort_curr_state := short_prev_state == 2 ? 0 : short_prev_state\nif short_cont_1 and short_curr_state == 0\n    short_curr_state := 1\nif not short_cont_1 and short_cont_2 and short_curr_state == 1\n    short_curr_state := 2\n\nshort_ret_signal = short_curr_state == 2 ? true : false\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Symbol Screener in PineScript\nDESCRIPTION: Sets up input options for the multi-symbol screener, including a text area for symbol input, direction selection, and table display settings. This allows users to screen multiple symbols for the ICT retracement strategy.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] ICT Retracement to Order Block with Screener.txt#2025-04-16_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\ng_tb = 'Screener'\ntt_is = \"• Input exactly 40 symbols, nothing more or less.\" +\n     \"\\n• Total characters cannot exceed 4096.\" +\n     \"\\n• Use comma as delimiter without any space.\" +\n     \"\\n• Eg: EXCHANGE:SYMBOL_A,EXCHANGE:SYMBOL_B\"\n\nstring i_symbols = input.text_area(\n defval=\"NSE:ABCAPITAL,NSE:ANANTRAJ,NSE:ASTERDM,NSE:BANKINDIA,NSE:BIOCON,NSE:CAPACITE,NSE:CESC,NSE:CGPOWER,NSE:DCBBANK,NSE:DELHIVERY,NSE:ELECTCAST,NSE:EXIDEIND,NSE:FINPIPE,NSE:FSL,NSE:GAIL,NSE:GENUSPOWER,NSE:GEPIL,NSE:GMDCLTD,NSE:GREAVESCOT,NSE:HEMIPROP,NSE:HITECH,NSE:HPL,NSE:HSCL,NSE:IIFLSEC,NSE:INDUSTOWER,NSE:IPL,NSE:JAGRAN,NSE:JWL,NSE:KALYANKJIL,NSE:KCP,NSE:L_TFH,NSE:MANINDS,NSE:MOTHERSON,NSE:NAVKARCORP,NSE:NTPC,NSE:ONGC,NSE:PAISALO,NSE:PENIND,NSE:POONAWALLA,NSE:PPLPHARMA\",\n title=\"Paste Symbols\", tooltip=tt_is, group=g_tb)\n\nstring i_scr_direction = input.string(defval='Both', title='Direction', options=['Both', 'Bullish', 'Bearish'], inline='tb_1', group=g_tb)\nbool i_scr_show_bull_mc  = input.bool(defval=true, title='Only Bullish', inline='tb_2', group=g_tb)\nbool i_scr_show_bear_mc  = input.bool(defval=true, title='Only Bearish', inline='tb_2', group=g_tb)\n\nint i_tbl_disp_rows = input.int(defval=16, title='Display Rows', minval=0, maxval=100, group=g_tb)\nstring i_tbl_position = input.string(defval=position.bottom_left, title='Table Position', options=[position.top_left, position.top_center, position.top_right, position.middle_left, position.middle_center, position.middle_right, position.bottom_left, position.bottom_center, position.bottom_right], group=g_tb)\nstring i_tbl_text_size = input.string(defval=size.small, title='Table Size', options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group=g_tb)\n```\n\n----------------------------------------\n\nTITLE: Implementing Fibonacci Calculations for FVG Analysis in PineScript\nDESCRIPTION: Defines a function to calculate Fibonacci levels based on high and low values. This is used for additional analysis and potential trading signals based on FVGs.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_13\n\nLANGUAGE: pine\nCODE:\n```\nfibonacci(bool calc_from_high, high_value, low_value, float fib_value) =>\n    if calc_from_high\n        low_value + (high_value - low_value) * fib_value\n    else\n        high_value - (high_value - low_value) * fib_value\n```\n\n----------------------------------------\n\nTITLE: Defining Screening Methods for Candlestick Pattern Detection in PineScript\nDESCRIPTION: Sets up the screening methods for pattern detection based on user-selected options. Uses either exact price conditions or percentage-based conditions with crossover/crossunder confirmations.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Equal Highs and Lows/ICT Equal Highs and Lows with Screener.txt#2025-04-16_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\n// Choose Screening Method\nbull_method =\n i_scr_choose == 'Equals' ? ph_condition :\n ph_pchg < i_phl_eq_percent and ta.crossover(high, ph_price_0) and barstate.isconfirmed\n\nbear_method =\n i_scr_choose == 'Equals' ? pl_condition :\n pl_pchg < i_phl_eq_percent and ta.crossunder(low, pl_price_0) and barstate.isconfirmed\n\n// Screener Conditions\nbullish_cond = bull_method\nbearish_cond = bear_method\n\n// Define Bull and Bear Conditions\nbull = not(i_scr_direction == \"Bearish\")\nbear = not(i_scr_direction == \"Bullish\")\n```\n\n----------------------------------------\n\nTITLE: Detecting Bullish Liquidity Voids in PineScript\nDESCRIPTION: This snippet detects bullish liquidity voids using custom filters and price sources. It draws lines and boxes to visualize the voids and manages the drawing elements using arrays.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void/ICT Liquidity Void Screener.txt#2025-04-16_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\nbull_filter = filter(bull_prev_high, low, ta.atr(i_lv_atr_length), i_lv_atr_multi, i_lv_percentage, i_lv_additional)\nbull_price_source = price_source(bull_prev_high, low, i_lv_line)\n\nif (na(bull_prev_high) or low >= bull_prev_high) and bull_filter\n    lv_bull_line = draw_line(bull_prev_high_time, bull_price_source, i_lv_bull_color)\n    lv_bull_box = draw_box(bull_prev_high_time, low, bull_prev_high, i_lv_bull_color)\n    clean_arrays(bull_all_lines, bull_keep_lines, bull_all_boxes, bull_keep_boxes, lv_bull_line, lv_bull_box)\n\n    bull_low_val := high\n    bull_price_source_val := bull_price_source\n\nbull_prev_high := high\nbull_prev_high_time := time\n\n// Update\nupdate_lines(bull_all_lines, bull_keep_lines, time)\nupdate_boxes(bull_all_boxes, bull_keep_boxes, time)\n\n// Clean\nclean_lines(bull_keep_lines, bull_all_lines)\nclean_boxes(bull_keep_boxes, bull_all_boxes)\n```\n\n----------------------------------------\n\nTITLE: Implementing Short Trade Condition Detection in Pine Script\nDESCRIPTION: Code that detects bearish (short) trading conditions based on candlestick patterns. It identifies bearish candles that meet ATR, body percentage, and body size filter criteria, then stores their high/low values and calculates Fibonacci retracement levels for entry targets.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Scanner] ICT Liquidity Void Fill Scanner.txt#2025-04-16_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\n// Short Condition 1\nshort_cont_1 = \n open > close and \n atr_filter and \n body_filter and\n body_size_filter\n\nvar short_cont_1_high = float(na)\nvar short_cont_1_low = float(na)\nvar short_cont_1_bi = int(na)\nif short_cont_1\n    short_cont_1_high := high\n    short_cont_1_low := low\n    short_cont_1_bi := bar_index\n\nfloat bear_fib_val = fibonacci(false, short_cont_1_high, short_cont_1_low, i_fib_val)\n```\n\n----------------------------------------\n\nTITLE: Detecting and Marking Fibonacci Retracements\nDESCRIPTION: Identifies when price retraces to Fibonacci levels in active bull and bear sequences. When a retracement is detected, it marks the pattern as complete, records the position and price, and draws a dotted line at the Fibonacci level.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Indicator] ICT Displacement Candles.txt#2025-04-16_snippet_11\n\nLANGUAGE: pine\nCODE:\n```\n// Detect and mark retracements\nbool bearRet = bearActive and not bearDone and ta.crossover(high, bearFib) and high[1] < bearFib and time_filter and date_filter\nbool bullRet = bullActive and not bullDone and ta.crossunder(low, bullFib) and low[1] > bullFib and time_filter and date_filter\nif bearRet and i_scn_choose == 'Retracement' and i_scn_show_short\n    bearDone := true\n    bearBar := bar_index\n    bearHigh := high\n    bearLine := line.new(x1 = bearStart, y1 = bearFib, x2 = bearBar, y2 = bearFib, color = i_neg_light_color, style = line.style_dotted)\nif bullRet and i_scn_choose == 'Retracement' and i_scn_show_long\n    bullDone := true\n    bullBar := bar_index\n    bullLow := low\n    bullLine := line.new(x1 = bullStart, y1 = bullFib, x2 = bullBar, y2 = bullFib, color = i_pos_light_color, style = line.style_dotted)\n```\n\n----------------------------------------\n\nTITLE: Defining Short Continuous Signals for FVG Trading in PineScript\nDESCRIPTION: Implements conditions for short continuous signals based on FVG detection and various filters. These signals can be used for potential short trading opportunities.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_14\n\nLANGUAGE: pine\nCODE:\n```\nshort_cont_1 = \n isFVGDown and \n time_filter and\n date_filter and\n barstate.isconfirmed\n\nshort_cont_2 = \n ta.crossover(high, isFVGDown_bottom) and \n time_filter and\n```\n\n----------------------------------------\n\nTITLE: Drawing Line and Label Functions for Pivot Points in PineScript\nDESCRIPTION: Implements utility functions for drawing lines and labels on the chart to represent pivot high and low points. These functions create and configure visual elements with appropriate styling and positioning.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_16\n\nLANGUAGE: pine\nCODE:\n```\nf_drawLine(_x1, _x2, _yValue, _lineColor, _lineThickness, _lineStyle) =>\n    line.new(x1=_x1, y1=_yValue, x2=_x2, y2=_yValue, color=_lineColor, style=_lineStyle, width=_lineThickness)\n\nf_drawLabel(label_show, _x, _y, _textColor) =>\n    if label_show\n        label.new(_x, _y, '      ' + str.tostring(_y), xloc.bar_index, yloc.price, #00000000, label.style_none, _textColor)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Retracement Signals in PineScript\nDESCRIPTION: Plots retracement signals using special characters and colored candles based on bearish and bullish retracement triggers. Draws dotted lines extending from the retracement points to the current bar index.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Market Structure Shift (MSS)/ICT Market Structure Shift (MSS).txt#2025-04-16_snippet_4\n\nLANGUAGE: pinescript\nCODE:\n```\n// Plot Retracement Signal\nplotchar(series=i_zz_bear_show and i_zz_bear_ret_show and bearish_retracement_trigger ? 3 : na, title='Bear Retracement', char=\"↷\", location=location.abovebar, color=i_zz_bear_signal_color, size=size.tiny)\nplotchar(series=i_zz_bull_show and i_zz_bull_ret_show and bullish_retracement_trigger ? 3 : na, title='Bull Retracement', char=\"⤻\", location=location.belowbar, color=i_zz_bull_signal_color, size=size.tiny)\nbarcolor(color=i_zz_bear_show and i_zz_bear_ret_show and bearish_retracement_trigger ? i_zz_bear_signal_color : i_zz_bull_show and i_zz_bull_ret_show and bullish_retracement_trigger ? i_zz_bull_signal_color : na, title='Retracement Candle')\n\n//var line_array = array.new_line()\n\nif i_zz_bear_show and i_zz_bear_ret_show and bearish_retracement_trigger\n    bull_ret_ln = line.new(x1=int(bearish_retracement_bi), y1=bearish_retracement_price, x2=bar_index, y2=bearish_retracement_price, color=i_neg_color, style=line.style_dotted)\n    array.push(line_array, bull_ret_ln)\n\nif i_zz_bull_show and i_zz_bull_ret_show and bullish_retracement_trigger\n    bear_ret_ln = line.new(x1=int(bullish_retracement_bi), y1=bullish_retracement_price, x2=bar_index, y2=bullish_retracement_price, color=i_pos_color, style=line.style_dotted)\n    array.push(line_array, bear_ret_ln)\n```\n\n----------------------------------------\n\nTITLE: Implementing Long Retracement Signal Logic in PineScript\nDESCRIPTION: This snippet defines the logic for detecting long retracement signals. It uses a state machine approach similar to the short signal logic.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Scanner] ICT Liquidity Void Fill Scanner.txt#2025-04-16_snippet_7\n\nLANGUAGE: pine\nCODE:\n```\n// Long  Retracement\nvar long_curr_state = 0\nlong_prev_state = nz(long_curr_state[1])\nlong_curr_state := long_prev_state == 2 ? 0 : long_prev_state\nif long_cont_1 and long_curr_state == 0\n    long_curr_state := 1\nif not long_cont_1 and long_cont_2 and long_curr_state == 1\n    long_curr_state := 2\n\nlong_ret_signal = long_curr_state == 2 ? true : false\n```\n\n----------------------------------------\n\nTITLE: Calculating Displacement Candles in PineScript\nDESCRIPTION: Identifies bullish and bearish displacement candles based on user-defined criteria. This core functionality of the indicator tracks consecutive bullish or bearish candles that meet specific price movement thresholds.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Indicator] ICT Displacement Candles.txt#2025-04-16_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\nfloat priceChg = (high - low)\nbool bullish = priceChg >= i_dc_dev_percent and close > open and (not i_dc_close_filter or close > close[1]) and (not i_dc_hl_filter or close > high[1]) and atr_filter\nbool bearish = priceChg >= i_dc_dev_percent and close < open and (not i_dc_close_filter or close < close[1]) and (not i_dc_hl_filter or close < low[1]) and atr_filter\n\nif bullish\n    bullCnt := bullCnt + 1\n    bearCnt := 0\n    array.push(bullHighs, high)\n    array.push(bullLows, low)\n    if bullCnt == 1\n        array.clear(bearHighs)\n        array.clear(bearLows)\nelse if bearish\n    bearCnt := bearCnt + 1\n    bullCnt := 0\n    array.push(bearHighs, high)\n    array.push(bearLows, low)\n    if bearCnt == 1\n        array.clear(bullHighs)\n        array.clear(bullLows)\nelse\n    bullCnt := 0\n    bearCnt := 0\n    array.clear(bullHighs)\n    array.clear(bullLows)\n    array.clear(bearHighs)\n    array.clear(bearLows)\n```\n\n----------------------------------------\n\nTITLE: Implementing Additional Filters in PineScript\nDESCRIPTION: This code section adds various filters to the momentum setup, including ATR filter, body percentage filter, body size filter, volume filter, relative volume filter, and time filter.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\ng_af = '███████████████ Additional Fiters ███████████████'\n\nbool i_atr_filter = input.bool(defval=false, title='Apply ATR Filter', tooltip=tt_atr, group=g_af)\nint i_atr_length = input.int(defval=14, minval=1, title='ATR Length', group=g_af)\nfloat i_atr_multi = input.float(defval=1, title='ATR Multiplier', minval=1, group=g_af)\n\nbool i_body_filter = input.bool(defval=false, title='Apply Body % Filter', tooltip=tt_bf, group=g_af)\nfloat i_body_percent = input.float(defval=80, title='Body % Above', minval=0, maxval=100, group=g_af) / 100\n\n// ... (similar configuration for body size, volume, relative volume, and time filters)\n```\n\n----------------------------------------\n\nTITLE: Signal Generation Logic\nDESCRIPTION: Implements the core signal generation logic for both long and short trades, including condition checking and state management for trade signals based on price retracements.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Indicator] ICT Liquidity Void Fill.txt#2025-04-16_snippet_2\n\nLANGUAGE: pinescript\nCODE:\n```\n//_____________________________ Signals Start\n\n// Short Condition 1\nshort_cont_1 = \n open > close and \n atr_filter and \n body_filter and\n body_size_filter\n\nvar short_cont_1_high = float(na)\nvar short_cont_1_low = float(na)\nvar short_cont_1_bi = int(na)\nif short_cont_1\n    short_cont_1_high := high\n    short_cont_1_low := low\n    short_cont_1_bi := bar_index\n```\n\n----------------------------------------\n\nTITLE: Calculating Price Ranges and Fibonacci Levels in PineScript\nDESCRIPTION: This snippet calculates high-low ranges and percentage changes for bullish and bearish sequences. It also determines Fibonacci levels based on a configurable Fibonacci value and detects when a pattern has completed.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Scanner] ICT Displacement Candles.txt#2025-04-16_snippet_7\n\nLANGUAGE: pine\nCODE:\n```\n// Calculate high-low range and percentage\nfloat bullRange = na\nfloat bearRange = na\nfloat bullRangePercent = na\nfloat bearRangePercent = na\n\nif bullCnt >= i_dc_min_bars\n    bullHi := array.max(bullHighs)\n    bullLo := array.min(bullLows)\n    bullRange := bullHi - bullLo\n    bullRangePercent := (bullRange / bullLo) * 100\n    bullFib := bullHi - (bullHi - bullLo) * i_dc_fib_val\nif bearCnt >= i_dc_min_bars\n    bearHi := array.max(bearHighs)\n    bearLo := array.min(bearLows)\n    bearRange := bearHi - bearLo\n    bearRangePercent := (bearRange / bearLo) * 100\n    bearFib := bearLo + (bearHi - bearLo) * i_dc_fib_val\n\nbearMaxCnt = bearCnt[1] >= i_dc_min_bars and bearCnt == 0\nbullMaxCnt = bullCnt[1] >= i_dc_min_bars and bullCnt == 0\n```\n\n----------------------------------------\n\nTITLE: Plotting Trading Signals with PineScript Visualization Functions\nDESCRIPTION: This snippet shows how to use plotshape, plotchar, and barcolor functions to visualize different trading signals like 'First Touch', 'Full Fill', and 'Reversal'. The code creates triangles and custom characters along with color-coded candles based on signal conditions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_18\n\nLANGUAGE: pinescript\nCODE:\n```\nplotshape(series = i_scr_show_long and i_scr_choose == 'First Touch Confirmed' and long_first_touch_conf_signal ? 4 : na, title = 'Long Confirmed First Touch', style = shape.triangleup, location = location.belowbar, color = i_pos_light_color, size = size.tiny, force_overlay = true)\nbarcolor(color = i_scr_show_short and i_scr_choose == 'First Touch Confirmed' and short_first_touch_conf_signal ? i_neg_light_color : i_scr_show_long and i_scr_choose == 'First Touch Confirmed' and long_first_touch_conf_signal ? i_pos_light_color : na, title = 'Confirmed First Touch Candle')\n\n// 3\nplotchar(series = i_scr_show_short and i_scr_choose == 'Full Fill' and short_full_fill_signal ? 3 : na, title = 'Short Full Fill', char = '↷', location = location.abovebar, color = i_neg_light_color, size = size.tiny, force_overlay = true)\nplotchar(series = i_scr_show_long and i_scr_choose == 'Full Fill' and long_full_fill_signal ? 3 : na, title = 'Long Full Fill', char = '⤻', location = location.belowbar, color = i_pos_light_color, size = size.tiny, force_overlay = true)\nbarcolor(color = i_scr_show_short and i_scr_choose == 'Full Fill' and short_full_fill_signal ? i_pos_light_color : i_scr_show_long and i_scr_choose == 'Full Fill' and long_full_fill_signal ? i_neg_light_color : na, title = 'Full Fill Candle')\n\n// 4\nplotshape(series = i_scr_show_short and i_scr_choose == 'Full Fill Confirmed' and short_full_fill_conf_signal ? 4 : na, title = 'Short Confirmed Full Fill', style = shape.triangledown, location = location.abovebar, color = i_neg_light_color, size = size.tiny, force_overlay = true)\nplotshape(series = i_scr_show_long and i_scr_choose == 'Full Fill Confirmed' and long_full_fill_conf_signal ? 4 : na, title = 'Long Confirmed Full Fill', style = shape.triangleup, location = location.belowbar, color = i_pos_light_color, size = size.tiny, force_overlay = true)\nbarcolor(color = i_scr_show_short and i_scr_choose == 'Full Fill Confirmed' and short_full_fill_conf_signal ? i_pos_light_color : i_scr_show_long and i_scr_choose == 'Full Fill Confirmed' and long_full_fill_conf_signal ? i_neg_light_color : na, title = 'Confirmed Full Fill Candle')\n\n// 5\nplotshape(series = i_scr_show_short and i_scr_choose == 'Reversal' and short_reversal_signal ? 3 : na, title = 'Long Reversal', style = shape.triangleup, location = location.belowbar, color = i_pos_light_color, size = size.tiny, force_overlay = true)\nplotshape(series = i_scr_show_long and i_scr_choose == 'Reversal' and long_reversal_signal ? 3 : na, title = 'Short Reversal', style = shape.triangledown, location = location.abovebar, color = i_neg_light_color, size = size.tiny, force_overlay = true)\nbarcolor(color = i_scr_show_short and i_scr_choose == 'Reversal' and short_reversal_signal ? i_pos_light_color : i_scr_show_long and i_scr_choose == 'Reversal' and long_reversal_signal ? i_neg_light_color : na, title = 'Reversal Candle')\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Filters for RSI Momentum Indicator in Pine Script\nDESCRIPTION: Defines input options for various additional filters such as percentage change, volume, ATR, body percentage, body size, relative volume, time, and date filters. These filters can be applied to refine the signal generation process.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Indicator] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\nstring g_af = '██████████████ Additional Fiters ██████████████'\n\nstring tt_pchg = \n \"• Percentage change of the day.\" \nstring tt_vpchg = \n \"• 0% means today's volume must exceed the previous day's.\" + \n \"\\n• 300%+ often signals a major breakout (today or next day).\"\nstring tt_atr = \"• Filters out longer or more volatile signal candles.\"\nstring tt_atr_mul = \"• Higher values filter longer or more volatile candles.\"\nstring tt_bf = \"• 80 means the body covers 80%+ of the candle.\"\nstring tt_bs = \"• 2 means the candle is twice the size of the previous one.\"\nstring tt_vol = \"• Filter candles with volume > SMA of volume.\"\nstring tt_rv = \"• Filter candles with volume > Relative Volume.\"\nstring tt_tf = \"• Filter signals within a given time.\"\nstring tt_df = \"• Filter signals on specified dates (for Break Candles (2) only).\"\n\nbool i_pchg_filter = input.bool(defval = false, title = 'Apply % Change Filter', tooltip = tt_pchg, group = g_af)\nfloat i_pchg_above_below = input.float(defval = 2, title = '% Change Above/Below +/-', minval = 0, group = g_af)\n\nbool i_vol_filter = input.bool(defval = false, title = 'Apply Volume Filter', tooltip = tt_vpchg, group = g_af)\nint i_vol_above = input.int(defval = 500000, title = 'Volume Above', minval = 0, group = g_af)\n\nbool i_vol_pchg_filter = input.bool(defval = false, title = 'Apply Volume % Change Filter', tooltip = tt_vpchg, group = g_af)\nfloat i_vol_pchg_above = input.float(defval = 0, title = 'Volume % Change Above', minval = 0, group = g_af)\n\nbool i_atr_filter = input.bool(defval = false, title = 'Apply ATR Filter', tooltip = tt_atr, group = g_af)\nint i_atr_length = input.int(defval = 14, minval = 1, title = 'ATR Length', group = g_af)\nfloat i_atr_multi = input.float(defval = 1, title = 'ATR Multiplier', minval = 1, group = g_af)\n\nbool i_body_filter = input.bool(defval = false, title = 'Apply Body % Filter', tooltip = tt_bf, group = g_af)\nfloat i_body_percent = input.float(defval = 70, title = 'Body % Above', minval = 0, maxval = 100, group = g_af) / 100\n\nbool i_body_size_filter = input.bool(defval = false, title = 'Apply Body Size Filter', tooltip = tt_bs, group = g_af)\nint i_body_size_multi = input.int(defval = 2, title = 'Body Size Multiplier (x)', minval = 0, group = g_af)\n\nbool i_volume_filter = input.bool(defval = false, title = 'Apply Volume Filter', tooltip = tt_vol, group = g_af)\nint i_vol_sma_length = input.int(defval = 20, minval = 1, title = 'Volume SMA Length', group = g_af)\n\nbool i_rel_vol_filter = input.bool(defval = false, title = 'Apply Relative Volume Filter', tooltip = tt_rv, group = g_af)\nint i_rel_vol_avg_vol_len = input.int(defval = 90, title = 'Relative Volume Length', minval = 2, group = g_af)\nfloat i_rel_vol_avg_vol_multi = input.float(defval = 5, title = 'Rel Vol SMA Multiplier', minval = 0, group = g_af)\n\nbool i_time_filter = input.bool(defval = false, title = 'Apply Time Filter', tooltip = tt_tf, group = g_af)\nint i_hour_1 = input.int(defval = 9, minval = 0, title = 'Time From', inline = 't_1', group = g_af)\nint i_minute_1 = input.int(defval = 15, minval = 0, title = ':', inline = 't_1', group = g_af)\nint i_hour_2 = input.int(defval = 10, minval = 0, title = 'Time To ', inline = 't_2', group = g_af)\nint i_minute_2 = input.int(defval = 15, minval = 0, title = ':', inline = 't_2', group = g_af)\n\nbool i_date_filter = input.bool(defval = false, title = 'Apply Date Filter', tooltip = tt_df, group = g_af)\nint i_day = input.int(defval = 25, minval = 1, maxval = 31, title = 'Day', group = g_af)\nint i_month = input.int(defval = 10, minval = 1, maxval = 12, title = 'Month', group = g_af)\nint i_year = input.int(defval = 2024, minval = 0, title = 'Year', group = g_af)\n```\n\n----------------------------------------\n\nTITLE: Processing Imbalance Structure in PineScript\nDESCRIPTION: Main method for processing the ImbalanceStructure, which checks for valid timeframe settings, finds imbalances, and checks for mitigated imbalances. It returns a visibility flag indicating whether any imbalance was processed and visible.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_9\n\nLANGUAGE: pine\nCODE:\n```\nmethod Process(ImbalanceStructure IS, float o, float h, float l, float c, int t, float o1, float h1, float l1, float c1, int t1, float o2, float h2, float l2, float c2, int t2) =>\n    var int visible = 0\n    if IS.settings.show\n        if not settings.ltf_hide or (settings.ltf_hide and helper.Validtimeframe(IS.settings.htf))\n            if IS.settings.show\n                IS.FindImbalance(o, h, l, c, t, o1, h1, l1, c1, t1, o2, h2, l2, c2, t2)\n                visible := 1\n        IS.CheckMitigated(o, h, l, c)\n    visible\n```\n\n----------------------------------------\n\nTITLE: Equal High Low Pivot Detection in PineScript\nDESCRIPTION: Implements the equal high/low pivot detector, which identifies pivot points where the price differences are within a specified percentage threshold. It stores pivot points in arrays and tracks their bar indices for further analysis.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_23\n\nLANGUAGE: pine\nCODE:\n```\nphl_eq_ph = ta.pivothigh(_high, i_phl_eq_left, i_phl_eq_right)\nphl_eq_pl = ta.pivotlow(_low, i_phl_eq_left, i_phl_eq_right)\n\ni_phl_eq_tf = \"\"\nphl_eq_ph_htf = request.security(syminfo.tickerid, i_phl_eq_tf, phl_eq_ph)\nphl_eq_pl_htf = request.security(syminfo.tickerid, i_phl_eq_tf, phl_eq_pl)\n\n// Arrays to store the last 2 pivot highs and lows\nvar float[] ph_arr = array.new_float(2)\nvar int[] ph_bi_arr = array.new_int(2)\nvar float[] pl_arr = array.new_float(2)\nvar int[] pl_bi_arr = array.new_int(2)\n\n// Pivot calculations\nint prev_ph_bi = na, int prev_pl_bi = na\nbool active_ph = false, bool active_pl = false\nbool ph = false, bool pl = false\n\n// Update the arrays with the last 2 pivot highs and lows\nif not na(phl_eq_ph_htf)\n    ph := true\n    prev_ph_bi := bar_index - i_phl_eq_right\n    array.unshift(ph_bi_arr, bar_index)\n    array.pop(ph_bi_arr)\n\nif not na(phl_eq_pl_htf)\n    pl := true\n    prev_pl_bi := bar_index - i_phl_eq_right\n    array.unshift(pl_bi_arr, bar_index)\n    array.pop(pl_bi_arr)\n\n// Function to update the arrays with the last 2 values\nupdate_arrays(value, array_ref) =>\n    array.unshift(array_ref, value)\n    array.pop(array_ref)\n\n// Update arrays with the last 2 pivot highs and lows\nif ph\n    update_arrays(phl_eq_ph_htf, ph_arr)\nif pl\n    update_arrays(phl_eq_pl_htf, pl_arr)\n\n// Get last two pivot highs and lows\nph_price_0 = array.get(ph_arr, 0), ph_price_1 = array.get(ph_arr, 1)\nph_bi_0 = array.get(ph_bi_arr, 0), ph_bi_1 = array.get(ph_bi_arr, 1)\n```\n\n----------------------------------------\n\nTITLE: Pivot High-Low Configuration Settings in PineScript\nDESCRIPTION: Configuration section for the Pivot High-Low detection feature, with extensive customization options for three different timeframes. Settings include visibility controls, source selection, lookback periods, visual styling options, and parameters for detecting equal highs and lows.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_11\n\nLANGUAGE: pine\nCODE:\n```\ng_phl_qd = \"█████████ External Range Liquidity (Swings) █████████\"\nbool i_phl_1_show = input.bool(defval=true, title='Pivot High Low 1', group=g_phl_qd)\nbool i_phl_2_show = input.bool(defval=true, title='Pivot High Low 2', group=g_phl_qd)\nbool i_phl_3_show = input.bool(defval=true, title='Pivot High Low 3', group=g_phl_qd)\nbool i_phl_eq_show = input.bool(defval=true, title='Equal Pivot High Low', group=g_phl_qd)\n\ng_phl_co = \"███ Common Settings\"\nstring i_phl_1_source = input.string(defval='High/Low', title='Source', options=['High/Low', 'Open/Close'], group=g_phl_co)\n\ng_phl_1 = \"███ Pivot High Low 1\"\nstring i_phl_1_tf = input.timeframe(defval=\"15\", title='Timeframe', group=g_phl_1)\nint i_phl_1_left = input.int(defval=2, title='Left', group=g_phl_1)\nint i_phl_1_right = input.int(defval=2, title='Right', group=g_phl_1)\nint i_phl_1_showlast = input.int(defval=2, title='Show Last', minval=0, group=g_phl_1)\nbool i_phl_1_ln_extend = input.bool(defval=false, title='Line Extend', group=g_phl_1)\ncolor i_phl_1_h_ln_color = input.color(defval=#F7525F, title='High Color', group=g_phl_1)\ncolor i_phl_1_l_ln_color = input.color(defval=#22AB94, title='Low Color', group=g_phl_1)\nstring i_phl_1_ln_stye = input.string(defval=line.style_solid, title='Line style', options=[line.style_solid, line.style_dashed, line.style_dotted], group=g_phl_1)\nint i_phl_1_ln_width = input.int(defval=2, title='Line Width', minval=1, group=g_phl_1)\nbool i_phl_1_lbl_show = input.bool(defval=false, title='Label', group=g_phl_1)\n\ng_phl_2 = \"███ Pivot High Low 2\"\nstring i_phl_2_tf = input.timeframe(defval=\"60\", title='Timeframe', group=g_phl_2)\nint i_phl_2_left = input.int(defval=2, title='Left', group=g_phl_2)\nint i_phl_2_right = input.int(defval=2, title='Right', group=g_phl_2)\nint i_phl_2_showlast = input.int(defval=2, title='Show Last', minval=0, group=g_phl_2)\nbool i_phl_2_ln_extend = input.bool(defval=false, title='Line Extend', group=g_phl_2)\ncolor i_phl_2_h_ln_color = input.color(defval=#F7525F, title='High Color', group=g_phl_2)\ncolor i_phl_2_l_ln_color = input.color(defval=#22AB94, title='Low Color', group=g_phl_2)\nstring i_phl_2_ln_stye = input.string(defval=line.style_solid, title='Line style', options=[line.style_solid, line.style_dashed, line.style_dotted], group=g_phl_2)\nint i_phl_2_ln_width = input.int(defval=2, title='Line Width', minval=1, group=g_phl_2)\nbool i_phl_2_lbl_show = input.bool(defval=false, title='Label', group=g_phl_2)\n\ng_phl_3 = \"███ Pivot High Low 3\"\nstring i_phl_3_tf = input.timeframe(defval=\"240\", title='Timeframe', group=g_phl_3)\nint i_phl_3_left = input.int(defval=2, title='Left', group=g_phl_3)\nint i_phl_3_right = input.int(defval=2, title='Right', group=g_phl_3)\nint i_phl_3_showlast = input.int(defval=2, title='Show Last', minval=0, group=g_phl_3)\nbool i_phl_3_ln_extend = input.bool(defval=false, title='Line Extend', group=g_phl_3)\ncolor i_phl_3_h_ln_color = input.color(defval=#F7525F, title='High Color', group=g_phl_3)\ncolor i_phl_3_l_ln_color = input.color(defval=#22AB94, title='Low Color', group=g_phl_3)\nstring i_phl_3_ln_stye = input.string(defval=line.style_solid, title='Line style', options=[line.style_solid, line.style_dashed, line.style_dotted], group=g_phl_3)\nint i_phl_3_ln_width = input.int(defval=2, title='Line Width', minval=1, group=g_phl_3)\nbool i_phl_3_lbl_show = input.bool(defval=false, title='Label', group=g_phl_3)\n\ng_phl_eq = \"███ Equal High Low\"\nint i_phl_eq_left = input.int(defval=60, title='Left', group=g_phl_eq)\nint i_phl_eq_right = input.int(defval=30, title='Right', group=g_phl_eq)\n```\n\n----------------------------------------\n\nTITLE: Defining Long Entry Conditions in PineScript\nDESCRIPTION: This code defines the conditions for a long entry signal. It checks multiple filters including ATR, body size, and price action patterns.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Scanner] ICT Liquidity Void Fill Scanner.txt#2025-04-16_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\n// Long Condition 1\nlong_cont_1 = \n open < close and \n atr_filter and \n body_filter and\n body_size_filter\n\nvar long_cont_1_high = float(na)\nvar long_cont_1_low = float(na)\nvar long_cont_1_bi = int(na)\nif long_cont_1\n    long_cont_1_high := high\n    long_cont_1_low := low\n    long_cont_1_bi := bar_index\n\nfloat bull_fib_val = fibonacci(true, long_cont_1_high, long_cont_1_low, i_fib_val)\n```\n\n----------------------------------------\n\nTITLE: Configuring Technical Indicators in PineScript\nDESCRIPTION: This snippet sets up input parameters for various technical indicators used in the momentum setup, including Supertrend, EMA, VWAP/TWAP, MACD, Stochastic, and Volume indicators.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\ng_st = '█████████████████ Supertrend █████████████████'\nint i_st_atr_period = input.int(defval=10, title=\"ATR Length\", minval=1, group=g_st)\nfloat i_st_factor = input.float(defval=3.0, title=\"Factor\", minval=0.01, step=0.01, group=g_st)\n\ngp_ma = '████████ Exponential Moving Average (EMA) ████████'\nbool i_ma_display = input.bool(defval=true, title='Display', group=gp_ma)\nint i_ma_len_1 = input.int(defval=20, title='Length', minval=1, group=gp_ma)\nint i_ma_len_2 = input.int(defval=50, title='Length', minval=1, group=gp_ma)\nint i_ma_len_3 = input.int(defval=100, title='Length', minval=1, group=gp_ma)\nint i_ma_len_4 = input.int(defval=200, title='Length', minval=1, group=gp_ma)\n\n// ... (similar configuration for VWAP/TWAP, MACD, Stochastic, and Volume indicators)\n```\n\n----------------------------------------\n\nTITLE: Indicator Calculation Function for Pattern Detection in PineScript\nDESCRIPTION: Implements the core logic for detecting bullish and bearish patterns. The function initializes variables for price, time, indicator type, and signal direction, then evaluates conditions to identify patterns on confirmed bars.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Equal Highs and Lows/ICT Equal Highs and Lows with Screener.txt#2025-04-16_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\n// Function for Screener Indicator Calculation\nindicator_calculation() =>\n    // Initialize variables\n    price = float(na)\n    _time = int(na)\n    indicator = \"\"\n    signal = int(na) \n\n    if barstate.isconfirmed\n        // Check for Bearish Momentum Candle and conditions (Modify here to customize indicators)\n        if i_scr_show_bull and bearish_cond and bear \n            indicator := \"L\"\n            signal := -1\n\n        // Check for Bullish Momentum Candle and conditions (Modify here to customize indicators)\n        else if i_scr_show_bear and bullish_cond and bull\n            indicator := \"H\"\n            signal := 1\n\n        // Update price and time if signal is not null\n        if not na(signal)\n            price := math.round_to_mintick(close)\n            _time := time\n\n    [_time, indicator, price, signal]\n```\n\n----------------------------------------\n\nTITLE: Computing and Visualizing Pivot High Low 3 in PineScript\nDESCRIPTION: This code calculates pivot high and low points for a third timeframe configuration, using custom arrays to store drawing elements. It determines bar offsets based on the timeframe, identifies new pivot points, and manages their visual representation on the chart.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External Range Liquidity/ICT External Range Liquidity Static Multi-timeframe (Swing High and Low).txt#2025-04-16_snippet_5\n\nLANGUAGE: pine\nCODE:\n```\n//____________________________ Pivot High Low 3 Get Data & Draw Start\n\n// Arrays\nvar phl_3_ln_arr = array.new_line(i_phl_3_showlast)\nvar phl_3_lbl_arr = array.new_label(i_phl_3_showlast)\n\n// Get Data\nphl_3_bars_htf = int(f_tfResInMinutes(i_phl_3_tf) / res_in_minutes)\nphl_3_bars_offset = int(i_phl_3_left * phl_3_bars_htf)\n\nfloat phl_3_ph = ta.pivothigh(_high, i_phl_3_left, i_phl_3_right)\nfloat phl_3_pl = ta.pivotlow(_low, i_phl_3_left, i_phl_3_right)\n\nphl_3_ph_htf = request.security(syminfo.tickerid, i_phl_3_tf, phl_3_ph)\nphl_3_pl_htf = request.security(syminfo.tickerid, i_phl_3_tf, phl_3_pl)\nphl_3_ph_new = na(phl_3_ph_htf[1]) and not na(phl_3_ph_htf)\nphl_3_pl_new = na(phl_3_pl_htf[1]) and not na(phl_3_pl_htf)\n\nphl_3_ph_offset = f_offsetToP(_high, phl_3_ph_htf, math.min(i_max_bars_back, math.max(30, phl_3_bars_offset + phl_3_bars_htf + 1)))\nphl_3_pl_offset = f_offsetToP(_low, phl_3_pl_htf, math.min(i_max_bars_back, math.max(30, phl_3_bars_offset + phl_3_bars_htf + 1)))\n\n// Draw\nif i_phl_3_show and phl_3_bars_offset <= i_max_bars_back\n    f_addLines(i_phl_3_lbl_show, phl_3_ph_htf, phl_3_pl_htf, phl_3_ph_offset, phl_3_pl_offset, phl_3_ph_new, phl_3_pl_new, i_phl_3_h_ln_color, i_phl_3_l_ln_color, i_phl_3_showlast, i_phl_3_ln_width, i_phl_3_ln_stye, phl_3_ln_arr, phl_3_lbl_arr)   \n\nif i_phl_3_show\n    f_extendArray(phl_3_ln_arr, phl_3_lbl_arr, i_phl_3_ln_extend)\n\n//____________________________ Pivot High Low 3 Get Data & Draw End\n```\n\n----------------------------------------\n\nTITLE: Calculating Technical Indicators for Momentum Analysis in Pine Script\nDESCRIPTION: This section implements the calculation of various technical indicators used in the momentum setup, including percentage change over 250 periods, RSI, MFI, CCI, volume moving average, and Supertrend. These indicators are later used to generate trading signals.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup with Scanner.txt#2025-04-16_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\n//_____________________________ 1. Percentage Change 250 Start\n\nfloat pchg = (ta.change(close, 250) / close) * 100\n \n//_____________________________ 1. Percentage Change 250 end\n\n//_____________________________ 2. RSI Start\n\nfloat rsi = ta.rsi(close, i_rsi_len)\nfloat rsi_sma = ta.sma(rsi, i_rsi_sma_len)\n\n//_____________________________ 2. RSI End\n\n//_____________________________ 3. MFI Start\n\nfloat mfi = ta.mfi(hlc3, i_mfi_len)\n\n//_____________________________ 3. MFI End\n\n//_____________________________ 4. CCI Start\n\nfloat cci = ta.cci(hlc3, i_cci_len)\nfloat cci_sma = ta.sma(cci, i_cci_sma_len)\n\n//_____________________________ 4. CCI End\n\n//_____________________________ 5. Volume: 20 SMA Start\n\nvol_sma = ta.ema(volume, i_vol_ma_len) * i_vol_ma_multi\n\n//_____________________________ 5. Volume: 20 SMA End\n\n//_____________________________ 6. Supertrend Start\n\n[supertrend, direction] = ta.supertrend(i_st_factor, i_st_atr_period)\n\nsupertrend := i_st_display and barstate.isfirst ? na : supertrend\nupTrend = plot(series=i_st_display and direction < 0 ? supertrend : na, title=\"Supertrend Up\", color=i_pos_col, style=plot.style_linebr)\ndownTrend = plot(series=i_st_display and direction < 0 ? na : supertrend, title=\"Supertrend Down\", color=i_neg_col, style=plot.style_linebr)\nbodyMiddle = plot(series=i_st_display and barstate.isfirst ? na : (open + close) / 2, title=\"Body Middle\", display=display.none)\n\n//fill(plot1=bodyMiddle, plot2=upTrend, color=color.new(i_pos_col, 90), fillgaps=false)\n//fill(plot1=bodyMiddle, plot2=downTrend, color=color.new(i_neg_col, 90), fillgaps=false)\n```\n\n----------------------------------------\n\nTITLE: Checking Mitigated Imbalances in PineScript\nDESCRIPTION: Method to check if imbalances have been mitigated based on user settings. It supports different mitigation types like 'Wick Fill', 'Body Fill', '50% Wick Fill', and '50% Body Fill'. When an imbalance is mitigated, it can either be removed or visually updated.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\nmethod CheckMitigated(ImbalanceStructure IS, o, h, l, c) =>\n    if IS.imbalance.size() > 0\n        for i = IS.imbalance.size() - 1 to 0\n            imb = IS.imbalance.get(i)\n\n            if not imb.mitigated\n                switch settings.mitigated_type\n                    \"None\" =>\n                        imb.mitigated       := false\n                    'Wick Fill' =>\n                        imb.mitigated       := imb.open <= imb.close ? low <= imb.open : high >= imb.open\n                    'Body Fill' =>\n                        imb.mitigated       := imb.open < imb.close ? math.min(o, c) <= imb.open : math.max(o, c) >= imb.open\n                    '50% Wick Fill' =>\n                        imb.mitigated       := imb.open <= imb.close ? low <= imb.middle : high >= imb.middle\n                    '50% Body Fill' =>\n                        imb.mitigated       := imb.open <= imb.close ? math.min(o, c) <= imb.middle : math.max(o, c) >= imb.middle\n                if imb.mitigated\n                    if not settings.mitigated_show\n                        if not na(imb.box)\n                            box.delete(imb.box)\n                            line.delete(imb.line_middle)\n                            label.delete(imb.lbl)\n                        IS.imbalance.remove(i)\n                    else\n                        imb.mitigated_time  := time\n    IS\n```\n\n----------------------------------------\n\nTITLE: Indicator Calculation Function for Trading Signals in PineScript\nDESCRIPTION: A function that calculates trading signals based on predefined conditions (short_cond and long_cond). It checks for confirmed bars and returns time, price, percentage change, volume percentage change, and signal (-1 for short, 1 for long).\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Scanner - Trend Following Setup - Sideways Market Skipper Scanner.txt#2025-04-16_snippet_9\n\nLANGUAGE: pine\nCODE:\n```\n// Scanner Conditions\nshort_cond = short_break_trigger\nlong_cond = long_break_trigger \n\n// Function for Scanner Indicator Calculation\nindicator_calculation() =>\n    // Initialize variables\n    price = float(na)\n    _time = int(na)\n    _cum_pchg = float(na)\n    _cum_vol_pchg = float(na)\n    signal = int(na) \n\n    if barstate.isconfirmed\n        // Check for Short Momentum Candle and conditions (Modify here to customize indicators)\n        if i_scr_show_long and long_cond\n            signal := 1\n\n        // Check for Long Momentum Candle and conditions (Modify here to customize indicators)\n        else if i_scr_show_short and short_cond\n            signal := -1\n\n        // Update price and time if signal is not null\n        if not na(signal)\n            price := math.round_to_mintick(close)\n            _time := time\n            _cum_pchg := cum_pchg\n            _cum_vol_pchg := cum_vol_pchg\n\n    [_time, price, _cum_pchg, _cum_vol_pchg, signal]\n```\n\n----------------------------------------\n\nTITLE: Drawing Technical Indicator Lines for Historical Data in PineScript\nDESCRIPTION: Creates line visualizations for historical data of Stochastic Oscillator, MACD, and Volume indicators. Iterates through historical bars to draw lines connecting indicator values positioned relative to price.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_19\n\nLANGUAGE: pine\nCODE:\n```\nfor barIndex = 0 to i_display_len - 1\n    if array.size(a_lines) < 500\n\n        if i_stoc_display\n            array.push(a_lines, line.new(bar_index[barIndex], priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 + stoc_k[barIndex]     / oscHighest * priceChangeRate * i_stoc_height), \n                                     bar_index[barIndex + 1], priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 + stoc_k[barIndex + 1] / oscHighest * priceChangeRate * i_stoc_height), xloc.bar_index, extend.none, i_indicator_color   , line.style_solid, 1))\n            array.push(a_lines, line.new(bar_index[barIndex], priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 + stoc_d[barIndex]     / oscHighest * priceChangeRate * i_stoc_height), \n                                     bar_index[barIndex + 1], priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 + stoc_d[barIndex + 1] / oscHighest * priceChangeRate * i_stoc_height), xloc.bar_index, extend.none, i_signal_color   , line.style_solid, 1))\n\n        if i_macd_display\n            array.push(a_lines, line.new(bar_index[barIndex], priceLowest * (1 - priceChangeRate * i_macd_voffset) * (1 + macdLine[barIndex]       / macdHighest * priceChangeRate * i_macd_height ), \n                                     bar_index[barIndex + 1], priceLowest * (1 - priceChangeRate * i_macd_voffset) * (1 + macdLine[barIndex + 1]   / macdHighest * priceChangeRate * i_macd_height ), xloc.bar_index, extend.none, i_indicator_color   , line.style_solid, 1))\n            array.push(a_lines, line.new(bar_index[barIndex], priceLowest * (1 - priceChangeRate * i_macd_voffset) * (1 + signalLine[barIndex]     / macdHighest * priceChangeRate * i_macd_height ), \n                                     bar_index[barIndex + 1], priceLowest * (1 - priceChangeRate * i_macd_voffset) * (1 + signalLine[barIndex + 1] / macdHighest * priceChangeRate * i_macd_height ), xloc.bar_index, extend.none, i_signal_color   , line.style_solid, 1))\n\n            array.push(a_hist , box.new (bar_index[barIndex], priceLowest * (1 - priceChangeRate * i_macd_voffset), \n                                         bar_index[barIndex], priceLowest * (1 - priceChangeRate * i_macd_voffset) * (1 + histLine[barIndex] / macdHighest * priceChangeRate * i_macd_height), histColor[barIndex], 2))\n\n        if nzVolume\n            if i_vol_type != 'None' \n                array.push(a_hist , box.new (bar_index[barIndex] + i_vol_hoffset,  priceHighest * (1 + priceChangeRate * i_vol_voffset), \n                                             bar_index[barIndex] + i_vol_hoffset,  priceHighest * (1 + priceChangeRate * i_vol_voffset) * (1 + nzVolume[barIndex] / volumeHighest * priceChangeRate * i_vol_height), i_vol_type == 'Buying/Selling Volume' ? color.new(i_pos_color, 0) : bullCandle[barIndex] ? color.new(i_pos_color, 0) : color.new(i_neg_color, 0), 2, bgcolor = i_vol_type == 'Buying/Selling Volume' ? color.new(i_pos_color, 0) : bullCandle[barIndex] ? color.new(i_pos_color, 0) : color.new(i_neg_color, 0)))\n                if i_vol_type == 'Buying/Selling Volume'\n                    array.push(a_hist , box.new (bar_index[barIndex] + i_vol_hoffset,   priceHighest * (1 + priceChangeRate * i_vol_voffset), \n                                                 bar_index[barIndex] + i_vol_hoffset,   priceHighest * (1 + priceChangeRate * i_vol_voffset) * (1 + S[barIndex]            / volumeHighest * priceChangeRate * i_vol_height), color.new(i_neg_color, 0), 2, bgcolor = color.new(i_neg_color, 0)))\n                // Voumme MA\n                if i_vol_display\n                    array.push(a_lines, line.new(bar_index[barIndex] + i_vol_hoffset,     priceHighest * (1 + priceChangeRate * i_vol_voffset) * (1 + nzVolume[barIndex]     / volumeHighest * priceChangeRate * i_vol_height / volumeMARate[barIndex]), \n                                               bar_index[barIndex + 1] + i_vol_hoffset, priceHighest * (1 + priceChangeRate * i_vol_voffset) * (1 + nzVolume[barIndex + 1] / volumeHighest * priceChangeRate * i_vol_height / volumeMARate[barIndex + 1]), xloc.bar_index, extend.none, i_neu_color, line.style_solid, 1))\n```\n\n----------------------------------------\n\nTITLE: Flip Signal Implementation Using exrem Function in PineScript\nDESCRIPTION: Creates a filtering mechanism for trade signals to prevent consecutive signals of the same type. The exrem function returns entry signals only when there's a change in direction, enabling the detection of 'flip' signals in market direction.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Scanner] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\n//___________________________ Flip Signals\n\n// Acknowledgement & Reference\n// Trader: 'vitvlkv'\n// Indicator Title: 'HOWTO: Skip consecutive signals'\n// Indicator Link: 'https://www.tradingview.com/script/2M9I2sgP-HOWTO-Skip-consecutive-signals/'\n\nexrem(bool cond1, bool cond2) =>\n    var int signal = 0\n    signal := cond1 ? 1 : cond2 ? -1 : signal[1]\n    bool entry = signal != signal[1]\n    [entry and signal == 1, entry and signal == -1]\n\n[long_flip_break, short_flip_break] = exrem(long_cont_break, short_cont_break)\n[long_flip_ret, short_flip_ret] = exrem(long_cont_ret, short_cont_ret)\n```\n\n----------------------------------------\n\nTITLE: Defining Short Trade Conditions in PineScript\nDESCRIPTION: This snippet defines conditions for short trades based on the zigzag pattern. It includes multiple comparisons between different points in the zigzag pattern and uses the ta.crossover function.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Scanner - ICT Liquidity Sweep Pattern Scanner.txt#2025-04-16_snippet_5\n\nLANGUAGE: pine\nCODE:\n```\nshort_condition_1 = \n zz_2 < zz_3 and\n zz_2 < zz_4 and\n zz_2 < zz_6 and\n zz_2 < zz_7 and\n\n zz_3 < zz_5 and\n zz_3 > zz_4 and\n zz_3 > zz_2 and\n\n zz_4 < zz_3 and\n zz_4 < zz_5 and\n zz_4 < zz_6 and\n zz_4 < zz_7 and\n\n zz_5 > zz_3 and\n zz_5 > zz_4 and\n zz_5 > zz_6 and\n zz_5 < zz_7 and\n\n zz_6 < zz_5 and\n zz_6 < zz_7 and\n zz_6 > zz_4 and\n\n zz_7 > zz_2 and\n zz_7 > zz_3 and\n zz_7 > zz_4 and\n zz_7 > zz_5 and\n zz_7 > zz_6 and\n\n ta.crossover(zz_1, zz_3) and\n\n barstate.isconfirmed\n```\n\n----------------------------------------\n\nTITLE: Drawing Technical Indicator Overlays in Last Bar State\nDESCRIPTION: Comprehensive code for drawing MFI, RSI, CCI, and volume overlays on the chart at the last bar. Manages cleaning up previous indicators and draws reference lines, boxes, and labels for each indicator.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup with Scanner.txt#2025-04-16_snippet_9\n\nLANGUAGE: pine\nCODE:\n```\nif barstate.islast \n    if array.size(a_lines) > 0\n        for i = 1 to array.size(a_lines)\n            line.delete(array.shift(a_lines))\n    \n    if array.size(a_hist) > 0\n        for i = 1 to array.size(a_hist)\n            box.delete(array.shift(a_hist))\n\n    if i_mfi_display\n        mid_line = math.avg(100, 0)\n        array.push(a_hist, box.new (bar_index[i_display_len], priceLowest * (1 - priceChangeRate * i_mfi_voffset) * (1 + i_mfi_ob / oscHighest * priceChangeRate * i_mfi_height), \n                                     bar_index              , priceLowest * (1 - priceChangeRate * i_mfi_voffset) * (1 + i_mfi_ob / oscHighest * priceChangeRate * i_mfi_height), color.new(i_pos_col, 75), 1))\n        array.push(a_hist, box.new (bar_index[i_display_len], priceLowest * (1 - priceChangeRate * i_mfi_voffset) * (1 + mid_line / oscHighest * priceChangeRate * i_mfi_height), \n                                     bar_index              , priceLowest * (1 - priceChangeRate * i_mfi_voffset) * (1 + mid_line / oscHighest * priceChangeRate * i_mfi_height), color.new(i_neu_col, 75), 1))\n        array.push(a_hist, box.new (bar_index[i_display_len], priceLowest * (1 - priceChangeRate * i_mfi_voffset) * (1 + i_mfi_os / oscHighest * priceChangeRate * i_mfi_height), \n                                     bar_index              , priceLowest * (1 - priceChangeRate * i_mfi_voffset) * (1 + i_mfi_os / oscHighest * priceChangeRate * i_mfi_height), color.new(i_neg_col, 75), 1))\n        f_drawLabelX(                bar_index + 3          , priceLowest * (1 - priceChangeRate * i_mfi_voffset) * (1 + mid_line / oscHighest * priceChangeRate * i_mfi_height), 'MFI', xloc.bar_index, yloc.price, #00000000, label.style_label_left, chart.fg_color, size.small, text.align_center, str.tostring(mfi, '#.##'))\n\n    if i_rsi_display\n        mid_line = math.avg(100, 0)\n        array.push(a_hist, box.new (bar_index[i_display_len], priceLowest * (1 - priceChangeRate * i_rsi_voffset) * (1 + i_rsi_ob / oscHighest * priceChangeRate * i_rsi_height), \n                                     bar_index              , priceLowest * (1 - priceChangeRate * i_rsi_voffset) * (1 + i_rsi_ob / oscHighest * priceChangeRate * i_rsi_height), color.new(i_pos_col, 75), 1))\n        array.push(a_hist, box.new (bar_index[i_display_len], priceLowest * (1 - priceChangeRate * i_rsi_voffset) * (1 + mid_line / oscHighest * priceChangeRate * i_rsi_height), \n                                     bar_index              , priceLowest * (1 - priceChangeRate * i_rsi_voffset) * (1 + mid_line / oscHighest * priceChangeRate * i_rsi_height), color.new(i_neu_col, 75), 1))\n        array.push(a_hist, box.new (bar_index[i_display_len], priceLowest * (1 - priceChangeRate * i_rsi_voffset) * (1 + i_rsi_os / oscHighest * priceChangeRate * i_rsi_height), \n                                     bar_index              , priceLowest * (1 - priceChangeRate * i_rsi_voffset) * (1 + i_rsi_os / oscHighest * priceChangeRate * i_rsi_height), color.new(i_neg_col, 75), 1))\n        f_drawLabelX(                bar_index + 3          , priceLowest * (1 - priceChangeRate * i_rsi_voffset) * (1 + mid_line / oscHighest * priceChangeRate * i_rsi_height), 'RSI', xloc.bar_index, yloc.price, #00000000, label.style_label_left, chart.fg_color, size.small, text.align_center, str.tostring(rsi, '#.##'))\n\n    if i_cci_display\n        mid_line = math.avg(100, 0)\n        array.push(a_hist, box.new (bar_index[i_display_len], priceLowest * (1 - priceChangeRate * i_cci_voffset) * (1 + i_cci_ob / oscHighest * priceChangeRate * i_cci_height), \n                                     bar_index              , priceLowest * (1 - priceChangeRate * i_cci_voffset) * (1 + i_cci_ob / oscHighest * priceChangeRate * i_cci_height), color.new(i_pos_col, 75), 1))\n        array.push(a_hist, box.new (bar_index[i_display_len], priceLowest * (1 - priceChangeRate * i_cci_voffset), \n                                     bar_index              , priceLowest * (1 - priceChangeRate * i_cci_voffset), color.new(i_neu_col, 75), 1))\n        array.push(a_hist, box.new (bar_index[i_display_len], priceLowest * (1 - priceChangeRate * i_cci_voffset) * (1 + i_cci_os / oscHighest * priceChangeRate * i_cci_height), \n                                     bar_index              , priceLowest * (1 - priceChangeRate * i_cci_voffset) * (1 + i_cci_os / oscHighest * priceChangeRate * i_cci_height), color.new(i_neg_col, 75), 1))\n        f_drawLabelX(                bar_index + 3          , priceLowest * (1 - priceChangeRate * i_cci_voffset), 'CCI', xloc.bar_index, yloc.price, #00000000, label.style_label_left, chart.fg_color, size.small, text.align_center, str.tostring(cci, '#.##'))\n\n    if i_vol_type != 'None' \n        f_drawLabelX(                bar_index + 3          , priceHighest * (1 + priceChangeRate * i_vol_voffset), 'VOL', xloc.bar_index, yloc.price, #00000000, label.style_label_left, chart.fg_color, size.small, text.align_center, 'Buy Vol : ' + str.tostring(B / (B + S) * 100, '#.##') + '%\\nSell Vol : ' + str.tostring(S / (B + S) * 100, '#.##') + '%\\nLast Vol : ' + str.tostring(nzVolume, format.volume) + '\\nAvg Vol : ' + str.tostring(vol_sma, format.volume))\n```\n\n----------------------------------------\n\nTITLE: Volume Analysis Calculations in PineScript\nDESCRIPTION: Code snippet for calculating buy and sell volume pressure based on price position within the candle range. Uses price and volume data to determine buying and selling pressure.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup with Scanner.txt#2025-04-16_snippet_7\n\nLANGUAGE: pine\nCODE:\n```\nsource   = close\nnzVolume = nz(volume)\n\nB = nzVolume * (close - low) / (high - low)\nS = nzVolume * (high - close) / (high - low)\n```\n\n----------------------------------------\n\nTITLE: Identifying Bullish and Bearish Price Movements in PineScript\nDESCRIPTION: This code defines the conditions for bullish and bearish price movements based on price percentage changes, optional filters for close and high/low comparisons, and ATR filters. It then tracks consecutive bullish or bearish bars using counters and arrays.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Scanner] ICT Displacement Candles.txt#2025-04-16_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\nfloat priceChg = (high - low)\nbool bullish = priceChg >= i_dc_dev_percent and close > open and (not i_dc_close_filter or close > close[1]) and (not i_dc_hl_filter or close > high[1]) and atr_filter\nbool bearish = priceChg >= i_dc_dev_percent and close < open and (not i_dc_close_filter or close < close[1]) and (not i_dc_hl_filter or close < low[1]) and atr_filter\n\n// Optimized counting and array management\nif bullish\n    bullCnt := bullCnt + 1\n    bearCnt := 0\n    array.push(bullHighs, high)\n    array.push(bullLows, low)\n    if bullCnt == 1\n        array.clear(bearHighs)\n        array.clear(bearLows)\nelse if bearish\n    bearCnt := bearCnt + 1\n    bullCnt := 0\n    array.push(bearHighs, high)\n    array.push(bearLows, low)\n    if bearCnt == 1\n        array.clear(bullHighs)\n        array.clear(bullLows)\nelse\n    bullCnt := 0\n    bearCnt := 0\n    array.clear(bullHighs)\n    array.clear(bullLows)\n    array.clear(bearHighs)\n    array.clear(bearLows)\n```\n\n----------------------------------------\n\nTITLE: Calculating Fibonacci Levels and Range Percentages in PineScript\nDESCRIPTION: Calculates the high, low, range, and Fibonacci retracement levels for bearish price movements. The code processes array data to find maximum and minimum values, then calculates the percentage range and Fibonacci level based on user input.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Indicator] ICT Displacement Candles.txt#2025-04-16_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\n    bearHi := array.max(bearHighs)\n    bearLo := array.min(bearLows)\n    bearRange := bearHi - bearLo\n    bearRangePercent := (bearRange / bearLo) * 100\n    bearFib := bearLo + (bearHi - bearLo) * i_dc_fib_val\n```\n\n----------------------------------------\n\nTITLE: Implementing Long Retracement Detection in PineScript\nDESCRIPTION: This snippet defines conditions and logic for detecting long retracements in price action. It uses crossover and crossunder functions along with various custom filters to identify potential long entry points.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_13\n\nLANGUAGE: pine\nCODE:\n```\nbool long_ret_cont_2 = \n ta.crossunder(low, long_break_price) and\n low[1] > long_break_price and\n pchg_above_filter and\n pchg_below_filter and\n vol_filter and\n vol_pchg_filter and\n atr_filter and\n body_filter and\n body_size_filter and\n volume_filter and\n rel_vol_filter and\n time_filter and\n date_filter and\n barstate.isconfirmed\n\n// Long  Retracement Trigger\nvar long_break_current_state = 0\nlong_break_previous_state = nz(long_break_current_state[1])\nlong_break_current_state := long_break_previous_state == 2 ? 0 : long_break_previous_state\nif long_ret_cont_1 and long_break_current_state == 0\n    long_break_current_state := 1\nif long_ret_cont_2 and long_break_current_state == 1\n    long_break_current_state := 2\n\nlong_ret_trigger = long_break_current_state == 2 ? true : false\n```\n\n----------------------------------------\n\nTITLE: Timeframe Data Request Function\nDESCRIPTION: Helper function to request security data for different timeframes. Returns time and time_close values for the specified timeframe using TradingView's request.security function.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_2\n\nLANGUAGE: pinescript\nCODE:\n```\nget_time(timeframe) =>\n    [_time, _time_close] = request.security(symbol=syminfo.tickerid, timeframe=timeframe, expression=[time, time_close], gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)\n    [_time, _time_close]\n```\n\n----------------------------------------\n\nTITLE: Defining Long Trade Conditions in PineScript\nDESCRIPTION: This snippet defines conditions for long trades based on the zigzag pattern. It includes multiple comparisons between different points in the zigzag pattern and uses the ta.crossunder function.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Scanner - ICT Liquidity Sweep Pattern Scanner.txt#2025-04-16_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\nlong_condition_1 = \n zz_2 < zz_3 and\n zz_2 < zz_4 and\n zz_2 < zz_6 and\n zz_2 < zz_7 and\n\n zz_3 < zz_5 and\n zz_3 > zz_4 and\n zz_3 > zz_2 and\n\n zz_4 < zz_3 and\n zz_4 < zz_5 and\n zz_4 < zz_6 and\n zz_4 < zz_7 and\n\n zz_5 > zz_3 and\n zz_5 > zz_4 and\n zz_5 > zz_6 and\n zz_5 < zz_7 and\n\n zz_6 < zz_5 and\n zz_6 < zz_7 and\n zz_6 > zz_4 and\n\n zz_7 > zz_2 and\n zz_7 > zz_3 and\n zz_7 > zz_4 and\n zz_7 > zz_5 and\n zz_7 > zz_6 and\n\n ta.crossunder(zz_1, zz_3) and\n\n barstate.isconfirmed\n```\n\n----------------------------------------\n\nTITLE: Detecting Equal High/Low Levels in PineScript\nDESCRIPTION: This snippet identifies and highlights equal high/low pivot points based on percentage similarity. It maintains arrays of recent pivot prices, calculates percentage differences between them, and draws boxes around equal level zones when the price difference is below a specified threshold.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External Range Liquidity/ICT External Range Liquidity Static Multi-timeframe (Swing High and Low).txt#2025-04-16_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\n//____________________________ Equal High Low Start\n\nphl_eq_ph = ta.pivothigh(_high, i_phl_eq_left, i_phl_eq_right)\nphl_eq_pl = ta.pivotlow(_low, i_phl_eq_left, i_phl_eq_right)\n\ni_phl_eq_tf = \"\"\nphl_eq_ph_htf = request.security(syminfo.tickerid, i_phl_eq_tf, phl_eq_ph)\nphl_eq_pl_htf = request.security(syminfo.tickerid, i_phl_eq_tf, phl_eq_pl)\n\n// Arrays to store the last 2 pivot highs and lows\nvar float[] ph_arr = array.new_float(2)\nvar int[] ph_bi_arr = array.new_int(2)\nvar float[] pl_arr = array.new_float(2)\nvar int[] pl_bi_arr = array.new_int(2)\n\n// Pivot calculations\nint prev_ph_bi = na, int prev_pl_bi = na\nbool active_ph = false, bool active_pl = false\nbool ph = false, bool pl = false\n\n// Update the arrays with the last 2 pivot highs and lows\nif not na(phl_eq_ph_htf)\n    ph := true\n    prev_ph_bi := bar_index - i_phl_eq_right\n    array.unshift(ph_bi_arr, bar_index)\n    array.pop(ph_bi_arr)\n\nif not na(phl_eq_pl_htf)\n    pl := true\n    prev_pl_bi := bar_index - i_phl_eq_right\n    array.unshift(pl_bi_arr, bar_index)\n    array.pop(pl_bi_arr)\n\n// Function to update the arrays with the last 2 values\nupdate_arrays(value, array_ref) =>\n    array.unshift(array_ref, value)\n    array.pop(array_ref)\n\n// Update arrays with the last 2 pivot highs and lows\nif ph\n    update_arrays(phl_eq_ph_htf, ph_arr)\nif pl\n    update_arrays(phl_eq_pl_htf, pl_arr)\n\n// Get last two pivot highs and lows\nph_price_0 = array.get(ph_arr, 0), ph_price_1 = array.get(ph_arr, 1)\nph_bi_0 = array.get(ph_bi_arr, 0), ph_bi_1 = array.get(ph_bi_arr, 1)\n\npl_price_0 = array.get(pl_arr, 0), pl_price_1 = array.get(pl_arr, 1)\npl_bi_0 = array.get(pl_bi_arr, 0), pl_bi_1 = array.get(pl_bi_arr, 1)\n\n// Function to calculate percentage change\npchg(price_1, price_2) =>\n    change = price_1 - price_2\n    percent_change = math.abs((change / price_2) * 100)\n    percent_change\n\n// Calculate percentage change between the last two pivot highs and lows\nvar float ph_pchg = na\nvar float pl_pchg = na\n\nif array.size(ph_arr) >= 2\n    ph_pchg := pchg(array.get(ph_arr, 0), array.get(ph_arr, 1))\n\nif array.size(pl_arr) >= 2\n    pl_pchg := pchg(array.get(pl_arr, 0), array.get(pl_arr, 1))\n\n// Draw Equals Box\nvar levelBoxes_equal=array.new_box()\n\nif i_phl_eq_show and ph and ph_pchg < i_phl_eq_percent\n    ph_box = box.new(left=ph_bi_1 - i_phl_eq_right, top=ph_price_1, right=ph_bi_0 - i_phl_eq_right, bottom=ph_price_0, border_color=color.new(i_phl_eq_h_ln_color, i_phl_eq_transp), bgcolor=color.new(i_phl_eq_h_ln_color, i_phl_eq_transp))\n    array.push(levelBoxes_equal, ph_box)\nif i_phl_eq_show and pl and pl_pchg < i_phl_eq_percent\n    pl_box = box.new(left=pl_bi_1 - i_phl_eq_right, top=pl_price_1, right=pl_bi_0 - i_phl_eq_right, bottom=pl_price_0, border_color=color.new(i_phl_eq_l_ln_color, i_phl_eq_transp), bgcolor=color.new(i_phl_eq_l_ln_color, i_phl_eq_transp))\n    array.push(levelBoxes_equal, pl_box)\n\n// Plot Equal Labels\nplotshape(i_phl_eq_show and pl and pl_pchg < i_phl_eq_percent ? low[i_phl_eq_right] : na, style=shape.xcross, location=location.absolute, offset=-i_phl_eq_right, color=color.new(i_phl_eq_l_ln_color, i_phl_eq_transp), size=size.small)\nplotshape(i_phl_eq_show and ph and ph_pchg < i_phl_eq_percent ? high[i_phl_eq_right] : na, style=shape.xcross, location=location.absolute, offset=-i_phl_eq_right, color=color.new(i_phl_eq_h_ln_color, i_phl_eq_transp), size=size.small)\n\n//____________________________ Equal High Low End\n\n//____________________________ CODE END\n```\n\n----------------------------------------\n\nTITLE: Creating Volume Visualization Overlay in PineScript\nDESCRIPTION: Implements visual elements for a Volume indicator overlay including volume statistics label. Displays buying volume percentage, selling volume percentage, last volume, and average volume information.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_18\n\nLANGUAGE: pine\nCODE:\n```\nif i_vol_type != 'None' \n    f_drawLabelX(bar_index + 3,  priceHighest * (1 + priceChangeRate * i_vol_voffset), 'VOL', xloc.bar_index, yloc.price, #00000000, label.style_label_left, chart.fg_color, size.tiny, text.align_center, 'buying volume : ' + str.tostring(B / (B + S) * 100, '#.##') + '%\\nselling volume : ' + str.tostring(S / (B + S) * 100, '#.##') + '%\\nlast volume : ' + str.tostring(nzVolume, format.volume) + '\\naverage volume : ' + str.tostring(volMa, format.volume))\n```\n\n----------------------------------------\n\nTITLE: Plotting ZigZag Shift Signals in PineScript\nDESCRIPTION: Creates visual triangular markers for bearish and bullish shift conditions. Includes conditional plotting based on user configuration flags and colors the candles according to the detected signals.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Market Structure Shift (MSS)/ICT Market Structure Shift (MSS).txt#2025-04-16_snippet_2\n\nLANGUAGE: pinescript\nCODE:\n```\n// Plot Break Signal\nplotshape(series=i_zz_bear_show and i_zz_bear_shift_show ? bearish_condition : na, title='Bearish Shift', style=shape.triangledown, location=location.abovebar, color=i_zz_bear_signal_color, textcolor=i_zz_bear_signal_color, size=size.tiny)\nplotshape(series=i_zz_bull_show and i_zz_bull_shift_show ? bullish_condition : na, title='Bullish Shift', style=shape.triangleup, location=location.belowbar, color=i_zz_bull_signal_color, textcolor=i_zz_bull_signal_color, size=size.tiny)\nbarcolor(color=i_zz_bear_show and i_zz_bear_shift_show and bearish_condition ? i_zz_bear_signal_color : i_zz_bull_show and i_zz_bull_shift_show and bullish_condition ? i_zz_bull_signal_color : na, title='Shift Candle')\n```\n\n----------------------------------------\n\nTITLE: Plotting Divergences in PineScript\nDESCRIPTION: Visualizes the detected divergences on both the RSI indicator pane and the main price chart. It uses different colors and styles to distinguish between bullish and bearish divergences.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Scanner] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\n// Divergence Plots\n// Underlay\nplot(i_scn_choose == 'Divergence' and plFound ? rsiLBR : na, offset = -i_rsi_p_right, title = 'Line Bull Div', color = bullDiv ? i_pos_color : no_color, linewidth = 2, display = display.pane, editable = i_rsi_show_bull)\n//plotshape(bullDiv ? rsiLBR : na, offset=-i_rsi_p_right, title=\"Label Bull Div\", text=\" Bull \", style=shape.labelup, location=location.absolute, color=i_pos_color, textcolor=i_neu_color, editable=i_rsi_show_bull)\nplot(i_scn_choose == 'Divergence' and phFound ? rsiLBR : na, offset = -i_rsi_p_right, title = 'Line Bear Div', color = bearDiv ? i_neg_color : no_color, linewidth = 2, display = display.pane, editable = i_rsi_show_bear)\n//plotshape(bearDiv ? rsiLBR : na, offset=-i_rsi_p_right, title=\"Label Bear Div\", text=\" Bear \", style=shape.labeldown, location=location.absolute, color=i_neg_color, textcolor=i_neu_color, editable=i_rsi_show_bear)\n// Overlay\nplot(i_scn_choose == 'Divergence' and plFound ? lowLBR : na, offset = -i_rsi_p_right, title = 'Line Bull Div Over', color = bullDiv ? i_pos_color : no_color, linewidth = 2, display = display.pane, force_overlay = true)\n//plotshape(bullDiv ? lowLBR : na, offset=-i_rsi_p_right, title=\"Label Bull Div Over\", text=\" Bull \", style=shape.labelup, location=location.absolute, color=i_pos_color, textcolor=i_neu_color, force_overlay=true)\nplot(i_scn_choose == 'Divergence' and phFound ? highLBR : na, offset = -i_rsi_p_right, title = 'Line Bear Div Over', color = bearDiv ? i_neg_color : no_color, linewidth = 2, display = display.pane, force_overlay = true)\n//plotshape(bearDiv ? highLBR : na, offset=-i_rsi_p_right, title=\"Label Bear Div Over\", text=\" Bear \", style=shape.labeldown, location=location.absolute, color=i_neg_color, textcolor=i_neu_color, force_overlay=true)\n\n// Underlay\nplot(i_scn_choose == 'Hidden Divergence' and plFound ? rsiLBR : na, offset = -i_rsi_p_right, title = 'Line Hidden Bull Div', color = hiddenBullDiv ? i_pos_color : no_color, display = display.pane, editable = i_rsi_show_hbull)\n//plotshape(hiddenBullDiv ? rsiLBR : na, offset=-i_rsi_p_right, title=\"Label Hidden Bull Div\", text=\" H Bull \", style=shape.labelup, location=location.absolute, color=i_pos_color, textcolor=i_neu_color, editable=i_rsi_show_hbull)\nplot(i_scn_choose == 'Hidden Divergence' and phFound ? rsiLBR : na, offset = -i_rsi_p_right, title = 'Line Hidden Bear Div', color = hiddenBearDiv ? i_neg_color : no_color, display = display.pane, editable = i_rsi_show_hbear)\n//plotshape(hiddenBearDiv ? rsiLBR : na, offset=-i_rsi_p_right, title=\"Label Hidden Bear Div\", text=\" H Bear \", style=shape.labeldown, location=location.absolute, color=i_neg_color, textcolor=i_neu_color, editable=i_rsi_show_hbear)\n// Overlay\nplot(i_scn_choose == 'Hidden Divergence' and plFound ? lowLBR : na, offset = -i_rsi_p_right, title = 'Line Hidden Bull Div Over', color = hiddenBullDiv ? i_pos_color : no_color, display = display.pane, force_overlay = true)\n//plotshape(hiddenBullDiv ? lowLBR : na, offset=-i_rsi_p_right, title=\"Label Hidden Bull Div Over\", text=\" H Bull \", style=shape.labelup, location=location.absolute, color=i_pos_color, textcolor=i_neu_color, force_overlay=true)\nplot(i_scn_choose == 'Hidden Divergence' and phFound ? highLBR : na, offset = -i_rsi_p_right, title = 'Line Hidden Bear Div Over', color = hiddenBearDiv ? i_neg_color : no_color, display = display.pane, force_overlay = true)\n```\n\n----------------------------------------\n\nTITLE: Pivot Lines Addition Function in PineScript\nDESCRIPTION: Implements a function that adds new pivot high and low lines to the chart when pivot points are detected. It calculates appropriate positions and applies visual styling based on user-defined parameters.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_18\n\nLANGUAGE: pine\nCODE:\n```\nf_addLines(label_show, _htfPH, _htfPL, _offsetToPH, _offsetToPL, _newPH, _newPL, h_color, l_color, _lineCount, _lineThickness, _lineStyle, _pivotArray, _pivotLabelArray) =>\n    if _newPH\n        int x1 = bar_index - _offsetToPH\n        int x2 = bar_index\n        float yValue = _htfPH\n        f_drawPivotLineAndLabel(label_show, x1, x2, yValue, h_color, _lineCount, _lineThickness, _lineStyle, _pivotArray, _pivotLabelArray)\n        \n    if _newPL\n        int x1 = bar_index - _offsetToPL\n        int x2 = bar_index\n        float yValue = _htfPL\n        f_drawPivotLineAndLabel(label_show, x1, x2, yValue, l_color, _lineCount, _lineThickness, _lineStyle, _pivotArray, _pivotLabelArray)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Flip Trade Signals in PineScript\nDESCRIPTION: Code for visualizing flip pattern signals with triangles and color indicators. Uses plotshape, barcolor, and bgcolor functions to highlight second and third flip patterns for both long and short positions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Scanner] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_8\n\nLANGUAGE: PineScript\nCODE:\n```\nplotshape(i_scn_show_short and choice_flip ? short_flip_break : false, title = 'Flip 2nd Short', style = shape.triangledown, location = location.abovebar, color = i_neg_light_color, text = '2', textcolor = i_neg_light_color, size = size.auto, force_overlay = true)\nplotshape(i_scn_show_long and choice_flip ? long_flip_break : false, title = 'Flip 2nd Long', style = shape.triangleup, location = location.belowbar, color = i_pos_light_color, text = '2', textcolor = i_pos_light_color, size = size.auto, force_overlay = true)\nbarcolor(i_scn_show_short and choice_flip and short_flip_break ? i_neg_light_color : i_scn_show_long and choice_flip and long_flip_break ? i_pos_light_color : na, title = 'Flip 2nd Candle')\nbgcolor(i_scn_show_short and choice_flip and short_flip_break ? color.new(i_neg_light_color, 90) : i_scn_show_long and choice_flip and long_flip_break ? color.new(i_pos_light_color, 90) : na, title = 'Flip 2nd Bgcolor')\n\n// Flip 3rd Retracement\nplotshape(i_scn_show_short and choice_flip_ret ? short_flip_ret : false, title = 'Flip 3rd Short', style = shape.triangledown, location = location.abovebar, color = i_neg_light_color, text = '3', textcolor = i_neg_light_color, size = size.auto, force_overlay = true)\nplotshape(i_scn_show_long and choice_flip_ret ? long_flip_ret : false, title = 'Flip 3rd Long', style = shape.triangleup, location = location.belowbar, color = i_pos_light_color, text = '3', textcolor = i_pos_light_color, size = size.auto, force_overlay = true)\nbarcolor(i_scn_show_short and choice_flip_ret and short_flip_ret ? i_neg_light_color : i_scn_show_long and choice_flip_ret and long_flip_ret ? i_pos_light_color : na, title = 'Flip 3rd Candle')\nbgcolor(i_scn_show_short and choice_flip_ret and short_flip_ret ? color.new(i_neg_light_color, 90) : i_scn_show_long and choice_flip_ret and long_flip_ret ? color.new(i_pos_light_color, 90) : na, title = 'Flip 3rd Bgcolor')\n```\n\n----------------------------------------\n\nTITLE: Visualizing Retracement Signals with Shapes and Bar Colors\nDESCRIPTION: Displays visual signals for retracement patterns using shape markers and bar coloring. Triangle shapes indicate bullish (up) or bearish (down) retracements, while the bar color changes to highlight the candle where the retracement occurs.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Indicator] ICT Displacement Candles.txt#2025-04-16_snippet_12\n\nLANGUAGE: pine\nCODE:\n```\n// Plot signals\nplotshape(i_scn_show_short and i_scn_choose == 'Retracement' ? bearRet : false, title = 'Bearish Retracement', style = shape.triangledown, location = location.abovebar, color = i_neg_light_color, size = size.tiny)\nplotshape(i_scn_show_long and i_scn_choose == 'Retracement' ? bullRet : false, title = 'Bullish Retracement', style = shape.triangleup, location = location.belowbar, color = i_pos_light_color, size = size.tiny)\nbarcolor(i_scn_show_short and i_scn_choose == 'Retracement' and bearRet ? i_neg_light_color : i_scn_show_long and i_scn_choose == 'Retracement' and bullRet ? i_pos_light_color : na, title = 'Retracement Candle')\n```\n\n----------------------------------------\n\nTITLE: Implementing Drawing Functions for Visualization in PineScript\nDESCRIPTION: Defines helper functions for drawing price lines and boxes. The draw_line function creates horizontal lines at specific price levels, while draw_box creates rectangular boxes with customizable appearance, text, and positioning.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_8\n\nLANGUAGE: pine\nCODE:\n```\n//_____________________________ Draw Functions Start\n\ndraw_line(left_time, right_time, float price, color _color, string _style, int _width) =>\n    _line = line.new(x1=left_time, y1=price, x2=right_time, y2=price, xloc=xloc.bar_time, color=_color, style=_style, width=_width)\n\ndraw_box(left_time, right_time, float top_price, float bottom_price, color _color, int _border_width, string _border_style, string _text, string _text_size, color _text_color, string _text_halign) =>\n    _box = box.new(left=left_time, top=top_price, right=right_time, bottom=bottom_price, border_color=_color, border_width=_border_width, border_style=_border_style, xloc=xloc.bar_time, bgcolor=_color, text=_text, text_size=_text_size, text_color=_text_color, text_halign=_text_halign, text_valign=text.align_center)//, text_wrap=text.wrap_auto)\n\n//_____________________________ Draw Functions End\n```\n\n----------------------------------------\n\nTITLE: Implementing Additional Filters in PineScript\nDESCRIPTION: Adds various filtering options such as percentage change, volume, ATR, and time-based filters. These filters allow for more precise control over the FVG detection and analysis process.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_3\n\nLANGUAGE: pinescript\nCODE:\n```\nbool i_pchg_filter = input.bool(defval = false, title = 'Apply % Change Filter', tooltip = tt_pchg, group = g_af)\nfloat i_pchg_above_below = input.float(defval = 2, title = '% Change Above/Below +/-', minval = 0, group = g_af)\n\nbool i_vol_filter = input.bool(defval = false, title = 'Apply Volume Filter', tooltip = tt_vpchg, group = g_af)\nint i_vol_above = input.int(defval = 500000, title = 'Volume Above', minval = 0, group = g_af)\n\nbool i_atr_filter = input.bool(defval = false, title = 'Apply ATR Filter', tooltip = tt_atr, group = g_af)\nint i_atr_length = input.int(defval = 14, minval = 1, title = 'ATR Length', group = g_af)\nfloat i_atr_multi = input.float(defval = 1, title = 'ATR Multiplier', minval = 1, group = g_af)\n```\n\n----------------------------------------\n\nTITLE: Defining Common Settings for Pivot High/Low in PineScript\nDESCRIPTION: Sets up common input parameters for the pivot high/low calculations, including source data and timeframe settings for three different pivot levels.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External Range Liquidity/ICT External Range Liquidity Static Multi-timeframe (Swing High and Low).txt#2025-04-16_snippet_1\n\nLANGUAGE: pinescript\nCODE:\n```\ng_phl_co = '██████████████ Common Settings ██████████████'\nstring i_phl_1_source = input.string(defval='High/Low', title='Source', options=['High/Low', 'Open/Close'], group=g_phl_co)\n\ng_phl_1 = '██████████████ Pivot High Low 1 ██████████████'\nstring i_phl_1_tf = input.timeframe(defval=\"15\", title='Timeframe', group=g_phl_1)\nint i_phl_1_left = input.int(defval=2, title='Left', group=g_phl_1)\nint i_phl_1_right = input.int(defval=2, title='Right', group=g_phl_1)\nint i_phl_1_showlast = input.int(defval=2, title='Show Last', minval=0, group=g_phl_1)\nbool i_phl_1_ln_extend = input.bool(defval=false, title='Line Extend', group=g_phl_1)\ncolor i_phl_1_h_ln_color = input.color(defval=#F7525F, title='High Color', group=g_phl_1)\ncolor i_phl_1_l_ln_color = input.color(defval=#22AB94, title='Low Color', group=g_phl_1)\nstring i_phl_1_ln_stye = input.string(defval=line.style_solid, title='Line style', options=[line.style_solid, line.style_dashed, line.style_dotted], group=g_phl_1)\nint i_phl_1_ln_width = input.int(defval=2, title='Line Width', minval=1, group=g_phl_1)\nbool i_phl_1_lbl_show = input.bool(defval=false, title='Label', group=g_phl_1)\n```\n\n----------------------------------------\n\nTITLE: Indicator Calculation Function in PineScript\nDESCRIPTION: Implements the core indicator calculation function that evaluates trading signals based on configurable conditions. The function initializes variables, checks for long and short momentum candles, and returns time, price, cumulative percentage changes, and signal data.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_18\n\nLANGUAGE: pinescript\nCODE:\n```\n// Function for Screener Indicator Calculation\nindicator_calculation() =>\n    // Initialize variables\n    price = float(na)\n    _time = int(na)\n    _cum_pchg = float(na)\n    _cum_vol_pchg = float(na)\n    signal = int(na) \n\n    if barstate.isconfirmed\n        // Check for Short Momentum Candle and conditions (Modify here to customize indicators)\n        if i_scr_show_long and long_cond\n            signal := 1\n\n        // Check for Long Momentum Candle and conditions (Modify here to customize indicators)\n        else if i_scr_show_short and short_cond\n            signal := -1\n\n        // Update price and time if signal is not null\n        if not na(signal)\n            price := math.round_to_mintick(close)\n            _time := time\n            _cum_pchg := cum_pchg\n            _cum_vol_pchg := cum_vol_pchg\n\n    [_time, price, _cum_pchg, _cum_vol_pchg, signal]\n```\n\n----------------------------------------\n\nTITLE: Implementing Supertrend Indicator in Pine Script\nDESCRIPTION: Calculates the Supertrend indicator and sets up visualization for both uptrend and downtrend conditions with color fills.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_7\n\nLANGUAGE: pine\nCODE:\n```\n[supertrend, direction] = ta.supertrend(i_st_factor, i_st_atr_period)\n\nsupertrend := barstate.isfirst ? na : supertrend\nupTrend = plot(series=direction < 0 ? supertrend : na, title=\"Supertrend Up\", color = i_pos_color, style = plot.style_linebr)\ndownTrend = plot(series=direction < 0 ? na : supertrend, title=\"Supertrend Down\", color = i_neg_color, style = plot.style_linebr)\nbodyMiddle = plot(series=barstate.isfirst ? na : ohlc4, title=\"Body Middle\", display = display.none)\n\nfill(plot1=bodyMiddle, plot2=upTrend, color=color.new(i_pos_color, 90), fillgaps=false, display=display.none)\nfill(plot1=bodyMiddle, plot2=downTrend, color=color.new(i_neg_color, 90), fillgaps=false, display=display.none)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Trading Signals with PineScript Plotting Functions\nDESCRIPTION: This code creates visual indicators on the chart for the trading signals. It uses plotchar and barcolor functions to display symbols and color bars based on the active signal type and direction (long or short), with customizable appearance settings.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_17\n\nLANGUAGE: pine\nCODE:\n```\n// 1\nplotchar(series = i_scr_show_short and i_scr_choose == 'First Touch' and short_first_touch_signal ? 3 : na, title = 'Short First Touch', char = '↷', location = location.abovebar, color = i_neg_light_color, size = size.tiny, force_overlay = true)\nplotchar(series = i_scr_show_long and i_scr_choose == 'First Touch' and long_first_touch_signal ? 3 : na, title = 'Long First Touch', char = '⤻', location = location.belowbar, color = i_pos_light_color, size = size.tiny, force_overlay = true)\nbarcolor(color = i_scr_show_short and i_scr_choose == 'First Touch' and short_first_touch_signal ? i_neg_light_color : i_scr_show_long and i_scr_choose == 'First Touch' and long_first_touch_signal ? i_pos_light_color : na, title = 'First Touch Candle')\n\n// 2\nplotshape(series = i_scr_show_short and i_scr_choose == 'First Touch Confirmed' and short_first_touch_conf_signal ? 4 : na, title = 'Short Confirmed First Touch', style = shape.triangledown, location = location.abovebar, color = i_neg_light_color, size = size.tiny, force_overlay = true)\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Table Display in PineScript\nDESCRIPTION: Implements a data table that shows key metrics including percentage change, volume percentage change, current volume, and previous day's volume. The table uses color coding to indicate positive and negative values for better visualization.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Indicator - Trend Following Setup - Sideways Market Skipper.txt#2025-04-16_snippet_8\n\nLANGUAGE: pinescript\nCODE:\n```\n// To String\nday_pchg_str = str.tostring(cum_pchg,\"#.##\") + ' %'\nvolume_pchg_str = str.tostring(cum_vol_pchg,\"#.##\") + ' %'\nday_volume_str = str.tostring(current_cum_vol/100000,\"#.##\") + ' L'\nprev_day_volume_str = str.tostring(prev_cum_vol/100000,\"#.##\") + ' L'\n\n// Color\nbgcolor_1 = i_neu_dark_color\nbgcolor_2 = i_neu_mid_color\n\npchg_col = cum_pchg > 0 ? i_pos_color : i_neg_color\nvol_pchg_col = cum_vol_pchg > 0 ? i_pos_color : i_neg_color\nprev_vol_pchg_col = prev_cum_vol < current_cum_vol ? i_neg_color : i_pos_color\n\n// Plot Table\nvar table tbl_data = table.new(position=i_tbl_data_pos, columns=2, rows=4, border_width=1, force_overlay=true)\n\nif barstate.islast and i_tbl_data_show\n    table.cell(table_id=tbl_data, column=0, row=0, text=\"%Chg\", text_color=i_neu_color, text_halign=text.align_left, bgcolor=bgcolor_1, text_size=i_tbl_data_txt_size)\n    table.cell(table_id=tbl_data, column=1, row=0, text=day_pchg_str, text_color=pchg_col, text_halign=text.align_right, bgcolor=bgcolor_1, text_size=i_tbl_data_txt_size)\n\n    table.cell(table_id=tbl_data, column=0, row=1, text=\"Vol %Chg\", text_color=i_neu_color, text_halign=text.align_left, bgcolor=bgcolor_2, text_size=i_tbl_data_txt_size)\n    table.cell(table_id=tbl_data, column=1, row=1, text=volume_pchg_str, text_color=vol_pchg_col, text_halign=text.align_right, bgcolor=bgcolor_2, text_size=i_tbl_data_txt_size)\n\n    table.cell(table_id=tbl_data, column=0, row=2, text=\"Vol\", text_color=i_neu_color, text_halign=text.align_left, bgcolor=bgcolor_1, text_size=i_tbl_data_txt_size)\n    table.cell(table_id=tbl_data, column=1, row=2, text=day_volume_str, text_color=vol_pchg_col, text_halign=text.align_right, bgcolor=bgcolor_1, text_size=i_tbl_data_txt_size)\n\n    table.cell(table_id=tbl_data, column=0, row=3, text=\"PD Vol\", text_color=i_neu_color, text_halign=text.align_left, bgcolor=bgcolor_2, text_size=i_tbl_data_txt_size)\n    table.cell(table_id=tbl_data, column=1, row=3, text=prev_day_volume_str, text_color=prev_vol_pchg_col, text_halign=text.align_right, bgcolor=bgcolor_2, text_size=i_tbl_data_txt_size)\n```\n\n----------------------------------------\n\nTITLE: Third Pivot High Low Data Processing in PineScript\nDESCRIPTION: Implements the third pivot high/low detector, providing another timeframe option for pivot point detection. This follows the same implementation pattern as the first and second pivot detectors but with its own configuration parameters.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_22\n\nLANGUAGE: pine\nCODE:\n```\n// Arrays\nvar phl_3_ln_arr = array.new_line(i_phl_3_showlast)\nvar phl_3_lbl_arr = array.new_label(i_phl_3_showlast)\n\n// Get Data\nphl_3_bars_htf = int(f_tfResInMinutes(i_phl_3_tf) / res_in_minutes)\nphl_3_bars_offset = int(i_phl_3_left * phl_3_bars_htf)\n\nfloat phl_3_ph = ta.pivothigh(_high, i_phl_3_left, i_phl_3_right)\nfloat phl_3_pl = ta.pivotlow(_low, i_phl_3_left, i_phl_3_right)\n\nphl_3_ph_htf = request.security(syminfo.tickerid, i_phl_3_tf, phl_3_ph)\nphl_3_pl_htf = request.security(syminfo.tickerid, i_phl_3_tf, phl_3_pl)\nphl_3_ph_new = na(phl_3_ph_htf[1]) and not na(phl_3_ph_htf)\nphl_3_pl_new = na(phl_3_pl_htf[1]) and not na(phl_3_pl_htf)\n\nphl_3_ph_offset = f_offsetToP(_high, phl_3_ph_htf, math.min(i_max_bars_back, math.max(30, phl_3_bars_offset + phl_3_bars_htf + 1)))\nphl_3_pl_offset = f_offsetToP(_low, phl_3_pl_htf, math.min(i_max_bars_back, math.max(30, phl_3_bars_offset + phl_3_bars_htf + 1)))\n\n// Draw\nif i_phl_3_show and phl_3_bars_offset <= i_max_bars_back\n    f_addLines(i_phl_3_lbl_show, phl_3_ph_htf, phl_3_pl_htf, phl_3_ph_offset, phl_3_pl_offset, phl_3_ph_new, phl_3_pl_new, i_phl_3_h_ln_color, i_phl_3_l_ln_color, i_phl_3_showlast, i_phl_3_ln_width, i_phl_3_ln_stye, phl_3_ln_arr, phl_3_lbl_arr)   \n\nif i_phl_3_show\n    f_extendArray(phl_3_ln_arr, phl_3_lbl_arr, i_phl_3_ln_extend)\n```\n\n----------------------------------------\n\nTITLE: Initializing Magnetic Zones with Fibonacci Ratios in PineScript\nDESCRIPTION: Sets up initial magnetic zone values using different Fibonacci ratios (0.236, 0.786, 1.618, 2.618, 4.236, 6.618). The magnetic_zones() function returns resistance and support level pairs for each ratio.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\n[r_1, s_1] = magnetic_zones(0.236)\n[r_2, s_2] = magnetic_zones(0.786)\n[r_3, s_3] = magnetic_zones(1.618)\n[r_4, s_4] = magnetic_zones(2.618)\n[r_5, s_5] = magnetic_zones(4.236)\n[r_6, s_6] = magnetic_zones(6.618)\n```\n\n----------------------------------------\n\nTITLE: Implementing Volume Histogram Visualization in Pine Script\nDESCRIPTION: This code creates volume histogram bars with customizable height and color based on buying/selling volume. It includes functionality to display volume moving averages as overlay lines on the chart.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup with Scanner.txt#2025-04-16_snippet_11\n\nLANGUAGE: pine\nCODE:\n```\n                    if i_vol_type == 'Buying/Selling Volume'\n                        array.push(a_hist, box.new (bar_index[barIndex] + i_vol_hoffset,   priceHighest * (1 + priceChangeRate * i_vol_voffset), \n                                                     bar_index[barIndex] + i_vol_hoffset,   priceHighest * (1 + priceChangeRate * i_vol_voffset) * (1 + S[barIndex]            / volumeHighest * priceChangeRate * i_vol_height), color.new(i_neg_col, 0), 2, bgcolor = color.new(i_neg_col, 0)))\n                    // Voumme MA\n                    if i_vol_display\n                        array.push(a_lines, line.new(bar_index[barIndex] + i_vol_hoffset,     priceHighest * (1 + priceChangeRate * i_vol_voffset) * (1 + nzVolume[barIndex]   / volumeHighest * priceChangeRate * i_vol_height / volumeMARate[barIndex]), \n                                                     bar_index[barIndex + 1] + i_vol_hoffset, priceHighest * (1 + priceChangeRate * i_vol_voffset) * (1 + nzVolume[barIndex + 1] / volumeHighest * priceChangeRate * i_vol_height / volumeMARate[barIndex + 1]), xloc.bar_index, extend.none, i_neu_col, line.style_solid, 1))\n```\n\n----------------------------------------\n\nTITLE: Security Request and Data Collection Function in PineScript\nDESCRIPTION: Implements the screener function that collects data from multiple symbols. It uses request.security to fetch indicator calculations for each symbol and adds valid signals to the results matrix with formatted values.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_21\n\nLANGUAGE: pinescript\nCODE:\n```\n// Screener function to collect data\nscreener(s) =>\n    sym = ticker.modify(s, syminfo.session)\n    [_time, price, _cum_pchg, _cum_vol_pchg, signal] = request.security(sym, timeframe.period, indicator_calculation())\n\n    // Check if the signal is not na and the time matches\n    if not na(signal) and _time == time\n        symbolName = symbol(s)\n        formattedTime = format_time(_time)\n        strPrice = str.tostring(price)\n        str_cum_pchg = str.tostring(_cum_pchg, '#.##')\n        str_cum_vol_pchg = str.tostring(_cum_vol_pchg, '#.##')\n        strSignal = str.tostring(signal)\n        \n        // Add data to the matrix\n        mtxFun(symbolName, formattedTime, strPrice, str_cum_pchg, str_cum_vol_pchg, strSignal)\n```\n\n----------------------------------------\n\nTITLE: Implementing Bearish Liquidity Void Analysis in Pine Script\nDESCRIPTION: This code block handles the identification and visualization of bearish liquidity voids. It includes logic for filtering, drawing, and managing visual objects for bearish voids.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void/ICT Liquidity Void Multi-timeframe.txt#2025-04-16_snippet_5\n\nLANGUAGE: Pine Script\nCODE:\n```\nvar float bear_prev_low = na, var int bear_prev_low_time = na\nvar bear_keep_lines = array.new_line(), var bear_all_lines = array.new_line()\nvar bear_keep_boxes = array.new_box(), var bear_all_boxes = array.new_box()\n\nif i_lv_bear_show and bc_htf and (close_htf > open_htf)\n    bear_filter = filter(bear_prev_low, high_htf, atr_htf, i_lv_atr_multi, i_lv_percentage, i_lv_additional)\n    bear_price_source = price_source(bear_prev_low, high_htf, i_lv_line)\n\n    if (na(bear_prev_low) or high_htf <= bear_prev_low) and bear_filter\n        lv_bear_line = draw_line(bear_prev_low_time, bear_price_source, i_lv_bear_color)\n        lv_bear_box = draw_box(bear_prev_low_time, high_htf, bear_prev_low, i_lv_bear_color)\n        clean_arrays(bear_all_lines, bear_keep_lines, bear_all_boxes, bear_keep_boxes, lv_bear_line, lv_bear_box)\n\n    bear_prev_low := low_htf\n    bear_prev_low_time := time_htf\n\n// Update\nupdate_lines(bear_all_lines, bear_keep_lines, time_htf)\nupdate_boxes(bear_all_boxes, bear_keep_boxes, time_htf)\n\n// Clean\nclean_lines(bear_keep_lines, bear_all_lines)\nclean_boxes(bear_keep_boxes, bear_all_boxes)\n```\n\n----------------------------------------\n\nTITLE: Signal Visualization and Plotting\nDESCRIPTION: Implements visual elements for trading signals including shapes, lines, and background colors. Provides multiple visualization options for different types of signals and trading conditions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Indicator] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_9\n\nLANGUAGE: pinescript\nCODE:\n```\nf_drawLine(id, x1, y1, x2, y2, col) => \n    line.new(x1, y1, x2, y2, color=col, style=line.style_dotted, force_overlay=true)\n\nplotshape(i_scn_show_short and choice_cont ? short_1 : false, title = 'Cont 1st Short', style = shape.circle, location = location.abovebar, color = i_neg_light_color, size = size.auto, force_overlay = true)\nplotshape(i_scn_show_long and choice_cont ? long_1 : false, title = 'Cont 1st Long', style = shape.circle, location = location.belowbar, color = i_pos_light_color, size = size.auto, force_overlay = true)\n```\n\n----------------------------------------\n\nTITLE: Signal Visualization with Lines and Shapes in PineScript\nDESCRIPTION: Implements comprehensive visual indicators for trade signals using custom lines, shapes, and bar coloring. The function f_drawLine creates dotted lines to connect key price levels, while plotshape creates visual markers for different signal types.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Scanner] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_7\n\nLANGUAGE: pine\nCODE:\n```\n//___________________________ Plot Signal\n\nchoice_cont_ln = i_scn_choose == 'Continuous Break'\nchoice_cont_ret_ln = i_scn_choose == 'Continuous Retracement'\n\nchoice_cont = i_scn_choose == 'Continuous Break' or i_scn_choose == 'Continuous Retracement'\nchoice_cont_ret = i_scn_choose == 'Continuous Retracement'\nchoice_flip = i_scn_choose == 'Flip Break'\nchoice_flip_ret = i_scn_choose == 'Flip Retracement'\n\n// Line Instances\nf_drawLine(id, x1, y1, x2, y2, col) => \n    line.new(x1, y1, x2, y2, color=col, style=line.style_dotted, force_overlay=true)\n\nvar line short_line_1 = na\nvar line short_line_2 = na\nvar line long_line_1 = na\nvar line long_line_2 = na\n\nif short_cont_break and choice_cont_ln and not na(short_1_low) and not na(short_signal_low) and not na(short_1_bar) and not na(short_signal_bar)\n    short_line_1 := f_drawLine(short_line_1, short_1_bar, short_1_low, short_signal_bar, short_1_low, i_neg_color)\n\nif short_cont_ret and choice_cont_ret_ln and not na(short_fib_val) and not na(short_ret_high) and not na(short_signal_bar) and not na(short_ret_bar)\n    short_line_2 := f_drawLine(short_line_2, short_signal_bar, short_fib_val, short_ret_bar, short_fib_val, i_neg_color)\n\nif long_cont_break and choice_cont_ln and not na(long_1_high) and not na(long_signal_high) and not na(long_1_bar) and not na(long_signal_bar)\n    long_line_1 := f_drawLine(long_line_1, long_1_bar, long_1_high, long_signal_bar, long_1_high, i_pos_color)\n\nif long_cont_ret and choice_cont_ret_ln and not na(long_fib_val) and not na(long_ret_low) and not na(long_signal_bar) and not na(long_ret_bar)\n    long_line_2 := f_drawLine(long_line_2, long_signal_bar, long_fib_val, long_ret_bar, long_fib_val, i_pos_color)\n\n// Continuous 1st Alert\nplotshape(i_scn_show_short and choice_cont ? short_1 : false, title = 'Cont 1st Short', style = shape.circle, location = location.abovebar, color = i_neg_light_color, size = size.auto, force_overlay = true)\nplotshape(i_scn_show_long and choice_cont ? long_1 : false, title = 'Cont 1st Long', style = shape.circle, location = location.belowbar, color = i_pos_light_color, size = size.auto, force_overlay = true)\nbarcolor(i_scn_show_short and choice_cont and short_1 ? i_neg_light_color : i_scn_show_long and choice_cont and long_1 ? i_pos_light_color : na, title = 'Cont 1st Candle')\n//bgcolor(i_scn_show_short and choice_cont and short_1 ? color.new(i_neg_light_color, 90) : i_scn_show_long and choice_cont and long_1 ? color.new(i_pos_light_color, 90) : na, title=\"Cont 1st Bgcolor\")\n\n// Continuous 2nd Breakout\nplotshape(i_scn_show_short and choice_cont ? short_cont_break : false, title = 'Cont 2nd Short', style = shape.triangledown, location = location.abovebar, color = i_neg_light_color, text = '2', textcolor = i_neg_light_color, size = size.auto, force_overlay = true)\nplotshape(i_scn_show_long and choice_cont ? long_cont_break : false, title = 'Cont 2nd Long', style = shape.triangleup, location = location.belowbar, color = i_pos_light_color, text = '2', textcolor = i_pos_light_color, size = size.auto, force_overlay = true)\nbarcolor(i_scn_show_short and choice_cont and short_cont_break ? i_neg_light_color : i_scn_show_long and choice_cont and long_cont_break ? i_pos_light_color : na, title = 'Cont 2nd Candle')\nbgcolor(i_scn_show_short and choice_cont and short_cont_break ? color.new(i_neg_light_color, 90) : i_scn_show_long and choice_cont and long_cont_break ? color.new(i_pos_light_color, 90) : na, title = 'Cont 2nd Bgcolor')\n\n// Continuous 3rd Retracement\nplotshape(i_scn_show_short and choice_cont_ret ? short_cont_ret : false, title = 'Cont 3rd Short', style = shape.triangledown, location = location.abovebar, color = i_neg_light_color, text = '3', textcolor = i_neg_light_color, size = size.auto, force_overlay = true)\nplotshape(i_scn_show_long and choice_cont_ret ? long_cont_ret : false, title = 'Cont 3rd Long', style = shape.triangleup, location = location.belowbar, color = i_pos_light_color, text = '3', textcolor = i_pos_light_color, size = size.auto, force_overlay = true)\nbarcolor(i_scn_show_short and choice_cont_ret and short_cont_ret ? i_neg_light_color : i_scn_show_long and choice_cont_ret and long_cont_ret ? i_pos_light_color : na, title = 'Cont 3rd Candle')\nbgcolor(i_scn_show_short and choice_cont_ret and short_cont_ret ? color.new(i_neg_light_color, 90) : i_scn_show_long and choice_cont_ret and long_cont_ret ? color.new(i_pos_light_color, 90) : na, title = 'Cont 3rd Bgcolor')\n\n// Flip 2nd Breakout\nplotshape(i_scn_show_short and choice_flip ? short_flip_break : false, title = 'Flip 2nd Short', style = shape.triangledown, location = location.abovebar, color = i_neg_light_color, text = '2', textcolor = i_neg_light_color, size = size.auto, force_overlay = true)\n```\n\n----------------------------------------\n\nTITLE: Plotting ICT Retracement Signals in PineScript\nDESCRIPTION: Visualizes the ICT retracement signals on the chart using plotshape() function. It plots primary, secondary, and tertiary signals for both long and short trades with customizable colors and styles.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] ICT Retracement to Order Block with Screener.txt#2025-04-16_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\n//___________________________ Plot Alert & Break Start\n// Plot Long Break & Break\nplotshape(\n         series = primary_long_signal,\n         title = 'Long Break', \n         style = shape.circle, \n         location = location.belowbar, \n         color = i_pos_col, \n         text = \"1\", \n         textcolor = i_pos_col, \n         size = size.tiny \n         )\n\nplot(series = primary_long_signal ? high : na, title = 'Past Long Break Line', color = i_pos_col, style = plot.style_stepline_diamond, display = display.none)\n\nplotshape(\n         series = secondary_long_signal,\n         title = 'Long Retrace', \n         style = shape.circle, \n         location = location.belowbar, \n         color = i_pos_col, \n         text = '2', \n         textcolor = i_pos_col, \n         size = size.tiny\n         )\n\nplotshape(\n         series = teritiary_long_signal,\n         title = 'Long Retrace', \n         style = shape.circle, \n         location = location.belowbar, \n         color = i_pos_col, \n         text = '3', \n         textcolor = i_pos_col, \n         size = size.tiny\n         )\n\n// Plot Short Break & Break\nplotshape(\n         series = primary_short_signal,\n         title = \"Short Break\", \n         style = shape.circle, \n         location = location.abovebar, \n         color = i_neg_col, \n         text = \"1\", \n         textcolor = i_neg_col, \n         size = size.tiny\n         )\n\nplot(series = primary_short_signal ? low : na, title = 'Past Short Break Line', color = i_neg_col, style = plot.style_stepline_diamond, display = display.none)\n\nplotshape(\n         series = secondary_short_signal,\n         title = 'Short Retrace', \n         style = shape.circle, \n         location = location.abovebar, \n         color = i_neg_col, \n         text = '2', \n         textcolor = i_neg_col, \n         size = size.tiny\n         )\n\nplotshape(\n         series = teritiary_short_signal,\n         title = 'Short Retrace', \n         style = shape.circle, \n         location = location.abovebar, \n         color = i_neg_col, \n         text = '3', \n         textcolor = i_neg_col, \n         size = size.tiny\n         )\n```\n\n----------------------------------------\n\nTITLE: Calculating and Fetching Magnetic Zone 2 Data in PineScript\nDESCRIPTION: Retrieves data for the second magnetic zone timeframe, including previous high/low values, pivot points, and support/resistance levels 1 and 2. Creates buffer zones around these levels for visualization.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\n/// MZ 2\n// PDHL\nmz_2_ph = data(i_mz_2_tf, high[1])\nmz_2_pl = data(i_mz_2_tf, low[1])\n\n// Pivot\nmz_2_p = data(i_mz_2_tf, hl2[1])\n\n// MZ 2 SR\nmz_2_r_1 = data(i_mz_2_tf, r_1)\nmz_2_r_2 = data(i_mz_2_tf, r_2)\n\nmz_2_s_1 = data(i_mz_2_tf, s_1)\nmz_2_s_2 = data(i_mz_2_tf, s_2)\n\n// Buffer\n[mz_2_r_1_top, mz_2_r_1_bot] = buffer_zone(mz_2_r_1, mz_2_r_1, mz_2_s_1)\n[mz_2_s_1_top, mz_2_s_1_bot] = buffer_zone(mz_2_s_1, mz_2_r_1, mz_2_s_1)\n[mz_2_r_2_top, mz_2_r_2_bot] = buffer_zone(mz_2_r_2, mz_2_r_2, mz_2_r_1)\n[mz_2_s_2_top, mz_2_s_2_bot] = buffer_zone(mz_2_s_2, mz_2_s_1, mz_2_s_2)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Zig-Zag Swing Price Points in Pine Script\nDESCRIPTION: This code extracts specific swing price points and their corresponding bar indices from the zig-zag array. These points represent significant market structure levels that are used to identify potential liquidity sweep patterns.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Scanner - ICT Liquidity Sweep Pattern Scanner.txt#2025-04-16_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\n//_____________________________ Get Swing Price & Bar Index\n\n//zz_0 = array.size(zigzag) > 15 ? array.get(zigzag, array.size(zigzag) - 16) : na\n//bi_0 = array.size(zigzag) > 14 ? array.get(zigzag, array.size(zigzag) - 15) : na\nzz_1 = array.size(zigzag) > 13 ? array.get(zigzag, array.size(zigzag) - 14) : na\n//bi_1 = array.size(zigzag) > 12 ? array.get(zigzag, array.size(zigzag) - 13) : na\nzz_2 = array.size(zigzag) > 11 ? array.get(zigzag, array.size(zigzag) - 12) : na\n//bi_2 = array.size(zigzag) > 10 ? array.get(zigzag, array.size(zigzag) - 11) : na\nzz_3 = array.size(zigzag) > 9 ? array.get(zigzag, array.size(zigzag) - 10) : na\nbi_3 = array.size(zigzag) > 8 ? array.get(zigzag, array.size(zigzag) - 9) : na\nzz_4 = array.size(zigzag) > 7 ? array.get(zigzag, array.size(zigzag) - 8) : na\n//bi_4 = array.size(zigzag) > 6 ? array.get(zigzag, array.size(zigzag) - 7) : na\nzz_5 = array.size(zigzag) > 5 ? array.get(zigzag, array.size(zigzag) - 6) : na\nbi_5 = array.size(zigzag) > 4 ? array.get(zigzag, array.size(zigzag) - 5) : na\n```\n\n----------------------------------------\n\nTITLE: Indicator Calculation Function Implementation\nDESCRIPTION: Core function that calculates indicator values including time, bars, range, percentage change and signals.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Scanner] ICT Displacement Candles.txt#2025-04-16_snippet_12\n\nLANGUAGE: pinescript\nCODE:\n```\nindicator_calculation() =>\n    var int _time = na\n    var int bars = na\n    var float _range = na\n    var float pchg = na\n    var int signal = na\n\n    if barstate.isconfirmed\n        signal := i_scn_show_long and long_cond ? 1 : i_scn_show_short and short_cond ? -1 : na\n\n        if not na(signal)\n            _time := time\n            bars := bearMaxCnt ? bearCnt[1] : bullMaxCnt ? bullCnt[1] : na\n            _range := bearMaxCnt ? bearRangePercent[1] : bullMaxCnt ? bullRangePercent[1] : na\n            pchg := cum_pchg\n\n    [_time, bars, _range, pchg, signal]\n```\n\n----------------------------------------\n\nTITLE: Fibonacci Retracement Signal Generator in PineScript\nDESCRIPTION: Implements Fibonacci retracement level calculation for detecting potential reversal points after continuous breakout signals. It tracks the high and low points of significant breakouts and calculates retracement levels for trade entries.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Scanner] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_5\n\nLANGUAGE: pine\nCODE:\n```\n//___________________________ Continuous Retracement Signals\n\n// Fibonacci Levels for Continuous Signals\nvar float short_signal_high = na\nvar float short_signal_low = na\nvar int short_signal_bar = na\nvar float long_signal_high = na\nvar float long_signal_low = na\nvar int long_signal_bar = na\n\nif short_cont_break\n    short_signal_high := high\n    short_signal_low := low\n    short_signal_bar := bar_index\n\nif long_cont_break\n    long_signal_high := high\n    long_signal_low := low\n    long_signal_bar := bar_index\n\nshort_fib_val = \n not na(short_signal_high) and not na(short_signal_low) ? \n short_signal_high - (short_signal_high - short_signal_low) * i_rsi_fib_val : na\n\nlong_fib_val = \n not na(long_signal_high) and not na(long_signal_low) ? \n long_signal_low + (long_signal_high - long_signal_low) * i_rsi_fib_val : na\n\n// Continuous Retracement Signals\nvar bool short_active = false\nvar bool long_active = false\nvar bool short_cont_ret_done = false\nvar bool long_cont_ret_done = false\nvar int short_ret_bar = na\nvar float short_ret_high = na\nvar int long_ret_bar = na\nvar float long_ret_low = na\n\nif short_cont_break\n    short_active := true\n    long_active := false\n    short_cont_ret_done := false\n    long_cont_ret_done := false\n\nif long_cont_break\n    long_active := true\n    short_active := false\n    long_cont_ret_done := false\n    short_cont_ret_done := false\n \nshort_cont_ret = \n short_active and \n not short_cont_ret_done and \n not na(short_fib_val) and \n ta.crossover(high, short_fib_val) and \n high[1] < short_fib_val\n\nlong_cont_ret = \n long_active and \n not long_cont_ret_done and \n not na(long_fib_val) and \n ta.crossunder(low, long_fib_val) and \n low[1] > long_fib_val\n\nif short_cont_ret\n    short_cont_ret_done := true\n    short_ret_bar := bar_index\n    short_ret_high := high\nif long_cont_ret\n    long_cont_ret_done := true\n    long_ret_bar := bar_index\n    long_ret_low := low\n```\n\n----------------------------------------\n\nTITLE: Implementing Bullish Liquidity Void Analysis in Pine Script\nDESCRIPTION: This section implements the identification and visualization of bullish liquidity voids. It includes similar logic to the bearish analysis but for bullish market conditions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void/ICT Liquidity Void Multi-timeframe.txt#2025-04-16_snippet_6\n\nLANGUAGE: Pine Script\nCODE:\n```\nvar float bull_prev_high = na, var int bull_prev_high_time = na\nvar bull_keep_lines = array.new_line(), var bull_all_lines = array.new_line()\nvar bull_keep_boxes = array.new_box(), var bull_all_boxes = array.new_box()\n\nif i_lv_bull_show and bc_htf and (close_htf < open_htf)\n    bull_filter = filter(bull_prev_high, low_htf, atr_htf, i_lv_atr_multi, i_lv_percentage, i_lv_additional)\n    bull_price_source = price_source(bull_prev_high, low_htf, i_lv_line)\n\n    if (na(bull_prev_high) or low_htf >= bull_prev_high) and bull_filter\n        lv_bull_line = draw_line(bull_prev_high_time, bull_price_source, i_lv_bull_color)\n        lv_bull_box = draw_box(bull_prev_high_time, low_htf, bull_prev_high, i_lv_bull_color)\n        clean_arrays(bull_all_lines, bull_keep_lines, bull_all_boxes, bull_keep_boxes, lv_bull_line, lv_bull_box)\n\n    bull_prev_high := high_htf\n    bull_prev_high_time := time_htf\n\n// Update\nupdate_lines(bull_all_lines, bull_keep_lines, time_htf)\nupdate_boxes(bull_all_boxes, bull_keep_boxes, time_htf)\n\n// Clean\nclean_lines(bull_keep_lines, bull_all_lines)\nclean_boxes(bull_keep_boxes, bull_all_boxes)\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Parameters for ICT Fair Value Gap Indicator in Pine Script\nDESCRIPTION: Sets up the user interface inputs for configuring the indicator. This section defines inputs for three different timeframes with color settings, visibility options, and appearance controls for fair value gaps. It organizes settings into logical groups with proper labeling.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\n//____________________________ Settings                                                                                             ---+//\n\nSettings_Group                      = \"Global Settings\"\n\nSettings settings                   = Settings.new()\nImbalance_Settings htf_1_Settings   = Imbalance_Settings.new()\nImbalance_Settings htf_2_Settings   = Imbalance_Settings.new()\nImbalance_Settings htf_3_Settings   = Imbalance_Settings.new()\n\n//____________________________ Menu Fair Value Gap Start\n\ng_fvg = \"██████████ Internal Range Liquidity (FVG) ██████████\"\n\nhtf_1_Settings.show         := input.bool(defval=true, title=\"\", inline=\"htf1\", group=g_fvg)\nhtf_1                        = input.timeframe(\"\", title=\"\", inline=\"htf1\", group=g_fvg)\nhtf_1_Settings.htf          := htf_1\nhtf_1_Settings.color_bull   := input.color(defval=color.green, title=\"\", inline=\"htf1\", group=g_fvg)\nhtf_1_Settings.color_bear   := input.color(defval=color.yellow, title=\"\", inline=\"htf1\", group=g_fvg)\nhtf_1_Settings.max_count    := input.int(defval=20, title=\"\", inline=\"htf1\", group=g_fvg)\n\nhtf_2_Settings.show         := input.bool(defval=true, title=\"\", inline=\"htf2\", group=g_fvg)\nhtf_2                        = input.timeframe(\"5\", title=\"\", inline=\"htf2\", group=g_fvg)\nhtf_2_Settings.htf          := htf_2\nhtf_2_Settings.color_bull   := input.color(defval=color.aqua, title=\"\", inline=\"htf2\", group=g_fvg)\nhtf_2_Settings.color_bear   := input.color(defval=color.orange, title=\"\", inline=\"htf2\", group=g_fvg)\nhtf_2_Settings.max_count    := input.int(defval=20, title=\"\", inline=\"htf2\", group=g_fvg)\n\nhtf_3_Settings.show         := input.bool(defval=true, title=\"\", inline=\"htf3\", group=g_fvg)\nhtf_3                        = input.timeframe(\"15\", title=\"\", inline=\"htf3\", group=g_fvg)\nhtf_3_Settings.htf          := htf_3\nhtf_3_Settings.color_bull   := input.color(defval=color.blue, title=\"\", inline=\"htf3\", group=g_fvg)\nhtf_3_Settings.color_bear   := input.color(defval=color.red, title=\"\", inline=\"htf3\", group=g_fvg)\nhtf_3_Settings.max_count    := input.int(defval=20, title=\"\", inline=\"htf3\", group=g_fvg)\n\nsettings.ltf_hide               := input.bool(defval=true, title=\"Hide Lower Timeframes\", group=g_fvg)\n\ng_f = \"███ Filled Settings\"\nsettings.mitigated_show         := input.bool(defval=true, title=\"Display Filled\", group=g_f)\nsettings.mitigated_type         := input.string(defval='50% Wick Fill', title='Filling Method', options = ['None', 'Wick Fill', 'Body Fill', '50% Wick Fill', '50% Body Fill'], group=g_f)\nsettings.mitigated_color_bull   := input.color(defval=color.white, title=\"Color Support\", group=g_f)\nsettings.mitigated_color_bear   := input.color(defval=color.white, title=\"Color Resistance\", group=g_f)\n\ng_bx = \"███ Box Settings\"\nsettings.bgcolor_transp         := input.int(defval=90, title=\"Box Transparency\", group=g_bx)\nsettings.padding                := input.int(defval=4, title=\"Offset\", minval=0, group=g_bx)\ntt_fvg_s = \"Spacing Between Timeframes\"\nsettings.buffer                 := input.int(defval=6, title=\"Spacing\", minval=0, tooltip=tt_fvg_s, group=g_bx)\n\ng_50 = \"███ 50% Line Settings\"\nsettings.CE_show                := input.bool(defval=true, title=\"Display 50%\", group=g_50)\nsettings.CE_style               := input.string(defval=line.style_dashed, title='Line Style', options=[line.style_solid, line.style_dashed, line.style_dotted], group=g_50)\nsettings.color_transp           := input.int(defval=0, title=\"Line Transparency\", group=g_50)\n\ng_txt = \"███ Text Settings\"\nsettings.text_show              := input.bool(defval=true, title=\"Display Text\", group=g_txt)\nsettings.text_size              := input.string(defval=size.auto, title='Size', options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group=g_txt)\n```\n\n----------------------------------------\n\nTITLE: Processing Multiple Symbols with the Screener Function in PineScript\nDESCRIPTION: Applies the screener function to multiple ticker symbols to gather pattern data from all specified instruments. Calls the screener function for up to 40 different ticker symbols in sequence.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Equal Highs and Lows/ICT Equal Highs and Lows with Screener.txt#2025-04-16_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\n// Call Screener function for multiple symbols\nscreener(tid_001), screener(tid_002), screener(tid_003), screener(tid_004), screener(tid_005), screener(tid_006), screener(tid_007),\nscreener(tid_008), screener(tid_009), screener(tid_010), screener(tid_011), screener(tid_012), screener(tid_013), screener(tid_014),\nscreener(tid_015), screener(tid_016), screener(tid_017), screener(tid_018), screener(tid_019), screener(tid_020), screener(tid_021),\nscreener(tid_022), screener(tid_023), screener(tid_024), screener(tid_025), screener(tid_026), screener(tid_027), screener(tid_028),\nscreener(tid_029), screener(tid_030), screener(tid_031), screener(tid_032), screener(tid_033), screener(tid_034), screener(tid_035),\nscreener(tid_036), screener(tid_037), screener(tid_038), screener(tid_039), screener(tid_040)\n\n// Trim excess rows in the matrix\nif matrix.rows(matrix) > i_tbl_disp_rows\n    while matrix.rows(matrix) > i_tbl_disp_rows\n        matrix.remove_row(matrix, matrix.rows(matrix)-1)\n```\n\n----------------------------------------\n\nTITLE: Initializing Zigzag Pattern Variables in PineScript\nDESCRIPTION: This snippet initializes variables for the zigzag pattern analysis, retrieving values from an array named 'zigzag'. It sets up variables for different points in the zigzag pattern.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Scanner - ICT Liquidity Sweep Pattern Scanner.txt#2025-04-16_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\nzz_6 = array.size(zigzag) > 3 ? array.get(zigzag, array.size(zigzag) - 4) : na\nzz_7 = array.size(zigzag) > 1 ? array.get(zigzag, array.size(zigzag) - 2) : na\nbi_7 = array.size(zigzag) > 0 ? array.get(zigzag, array.size(zigzag) - 1) : na\n```\n\n----------------------------------------\n\nTITLE: Visualizing Trading Signals and Ranges in PineScript\nDESCRIPTION: Plots visual indicators for the strategy including signal shapes, bar coloring for signal candles, and volatility range lines. These visual elements help traders identify the signals and understand the strategy's logic.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Indicator - Trend Following Setup - Sideways Market Skipper.txt#2025-04-16_snippet_7\n\nLANGUAGE: pinescript\nCODE:\n```\n// Plot Supertrend Cross Bar\nbarcolor(color=short_cont ? i_neg_light_color : long_cont ? i_pos_light_color : na, title='Supertrend Cross Candle')\n\n// Plot Break Signal\nplotshape(series=long_break_trigger ? 3 : na, title='Long Signal', style=shape.triangleup, location=location.belowbar, color=i_pos_light_color, size=size.tiny, force_overlay=true)\nplotshape(series=short_break_trigger ? 3 : na, title='Short Signal', style=shape.triangledown, location=location.abovebar, color=i_neg_light_color, size=size.tiny, force_overlay=true)\nbarcolor(color=short_break_trigger ? i_neg_light_color : long_break_trigger ? i_pos_light_color : na, title='Signal Candle')\n\n// Plot Historical Range\nplot(series=i_atr_range_display and i_atr_range_display and top_price == top_price[1] ? top_price : na, title='Top Range', color=i_pos_color, linewidth=1, style=plot.style_steplinebr, offset=-1, force_overlay=true)\nplot(series=i_atr_range_display and i_atr_range_display and bottom_price == bottom_price[1] ? bottom_price : na, title='Bottom Range', color=i_neg_color, linewidth=1, style=plot.style_steplinebr, offset=-1, force_overlay=true)\n```\n\n----------------------------------------\n\nTITLE: Defining Market Structure Shift Conditions in PineScript\nDESCRIPTION: Sets up conditions for identifying bearish and bullish market structure shifts based on Zig Zag patterns and price action. Includes filtering logic to reduce false signals.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Market Structure Shift (MSS)/ICT Market Structure Shift (MSS) Screener.txt#2025-04-16_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\n//_____________________________ Get Swing Price & Bar Index\n\nzz_1 = array.size(zigzag) > 7 ? array.get(zigzag, array.size(zigzag) - 8) : na\nbi_1 = array.size(zigzag) > 6 ? array.get(zigzag, array.size(zigzag) - 7) : na\nzz_2 = array.size(zigzag) > 5 ? array.get(zigzag, array.size(zigzag) - 6) : na\nbi_2 = array.size(zigzag) > 4 ? array.get(zigzag, array.size(zigzag) - 5) : na\nzz_3 = array.size(zigzag) > 3 ? array.get(zigzag, array.size(zigzag) - 4) : na\nbi_3 = array.size(zigzag) > 2 ? array.get(zigzag, array.size(zigzag) - 3) : na\n\n// Function to calculate filter based on ATR or percentage\nfilter(float swing_3, float swing_2, float swing_1, float multiplier, float percentage, string choice) =>\n    filter_x_times = math.abs(swing_1 - swing_2) > math.abs(swing_3 - swing_2) * multiplier\n    filter_percent = math.abs((swing_3 - swing_1) / swing_3 * 100) > percentage\n    choice == 'Multiplier' ? filter_x_times : filter_percent\n\nbearish_filter = filter(zz_3, zz_2, zz_1, i_zz_multiplier, i_zz_percentage, i_zz_filter_choice)\nbullish_filter = filter(zz_3, zz_2, zz_1, i_zz_multiplier, i_zz_percentage, i_zz_filter_choice)\n\n//_____________________________ MSS Conditions\n\n// Bearish Condition\nbearish_condition = \n zz_1 > zz_2 and\n zz_1 > zz_3 and\n zz_2 < zz_1 and\n zz_2 < zz_3 and\n zz_3 < zz_1 and\n zz_3 > zz_2 and\n close < zz_1 and\n close < zz_2 and\n close < zz_3 and\n ta.crossunder(close, zz_2) and\n bearish_filter and \n barstate.isconfirmed\n\n// Bullish Condition\nbullish_condition = \n```\n\n----------------------------------------\n\nTITLE: Plotting Retracement Signals in PineScript\nDESCRIPTION: This code plots the retracement signals as shapes and background colors on the chart.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_14\n\nLANGUAGE: pinescript\nCODE:\n```\nplotshape(series=i_scr_choose == 'Continuous Signals' and short_ret_trigger ? 3 : na, title='Short Continuous', style=shape.triangledown, location=location.abovebar, color=i_neg_light_color, size=size.tiny)\nplotshape(series=i_scr_choose == 'Continuous Signals' and long_ret_trigger ? 3 : na, title='Long Continuous', style=shape.triangleup, location=location.belowbar, color=i_pos_light_color, size=size.tiny)\n\nbgcolor(color=i_scr_choose == 'Continuous Signals' and short_ret_trigger ? color.new(i_neg_light_color, 90) : i_scr_choose == 'Continuous Signals' and long_ret_trigger ? color.new(i_pos_light_color, 90) : na, title='Continuous Bgcolor', show_last=i_display_len)\nbarcolor(color=i_scr_choose == 'Continuous Signals' and short_ret_trigger ? i_neg_light_color : i_scr_choose == 'Continuous Signals' and long_ret_trigger ? i_pos_light_color : na, title='Continuous Candle')\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types for ICT Liquidity Indicator in Pine Script\nDESCRIPTION: Creates custom type definitions to structure the indicator data. This includes Settings type for global configuration, Imbalance_Settings for timeframe-specific settings, Imbalance type to track individual fair value gaps, ImbalanceStructure to group related imbalances, and a Helper type for utility functions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\n//____________________________ Types\n\ntype Settings \n    bool    CE_show\n    string  CE_style\n    bool    Border_show\n    bool    mitigated_show\n    string  mitigated_type\n    color   mitigated_color_bull\n    color   mitigated_color_bear\n    bool    ltf_hide\n    bool    text_show\n    color   label_color\n    color   label_bgcolor\n    string  label_size\n    int     padding\n    int     buffer\n    int     bgcolor_transp\n    int     color_transp\n    string  text_size\n\ntype Imbalance_Settings\n    bool    show\n    string  htf\n    color   color_bull\n    color   color_bear\n    int     max_count\n\ntype Imbalance\n    int     open_time\n    int     close_time\n    float   open\n    float   middle\n    float   close\n    bool    mitigated\n    int     mitigated_time\n    line    line_middle\n    label   lbl\n    box     box\n\ntype ImbalanceStructure\n    Imbalance[]         imbalance\n    Imbalance_Settings  settings\n\ntype Helper\n    string name         = \"Helper\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Displacement Candles Settings in PineScript\nDESCRIPTION: Defines input options for displacement candles, including minimum bars, deviation percentage, close filters, and Fibonacci value for retracement.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Scanner] ICT Displacement Candles.txt#2025-04-16_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\nstring g_dc = '████████████ Displacement Candles ████████████'\n\nstring tt_mb = \"Shows if bars exceed the set value.\"\nstring tt_dev = \"Specifies the minimal size of displament, as a percentage of the average high-low range for the last 14 bars.\"\nstring tt_ret_fib = \n \"• 0: Top of bullish & bottom of bearish displacement.\" + \n \"\\n• 1: Bottom of bullish & top of bearish displacement.\" + \n \"\\n• 0.5: 50% of the displacement.\"\n\nint i_dc_min_bars = input.int(defval = 3, title = 'Minimum Bars', minval = 1, tooltip = tt_mb, group = g_dc)\nfloat i_dc_dev_percent = nz(input.float(60.0, \"Minimal Deviation (%)\", minval=1, step = 10, tooltip = tt_dev, group = g_dc) / 100 * ta.sma(high-low, 14))\nbool i_dc_close_filter = input.bool(defval = true, title = 'Apply Close Above/Below Prev Close', group = g_dc)\nbool i_dc_hl_filter = input.bool(defval = false, title = 'Apply Close Above/Below Prev High/Low', group = g_dc)\nfloat i_dc_fib_val = input.float(defval = 0.5, title = 'Fibonacci Value', step = 0.1, tooltip = tt_ret_fib, group = g_dc)\n```\n\n----------------------------------------\n\nTITLE: Initializing ICT Displacement Candles Indicator in PineScript\nDESCRIPTION: Sets up the main indicator properties including title, overlay, and maximum counts for lines and labels. This snippet defines the core parameters for the indicator's display and functionality.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Indicator] ICT Displacement Candles.txt#2025-04-16_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\n//@version=6\nindicator(title = 'ICT Displacement Candles Indicator', shorttitle = 'ICTDC', overlay = true, max_lines_count = 500, max_labels_count = 500, behind_chart = false)\n```\n\n----------------------------------------\n\nTITLE: Initializing Arrays and Calculating Price Ranges for Chart Overlay\nDESCRIPTION: Setup for overlay charts with array initialization and price range calculations. Establishes the data structures for lines and histograms while determining the highest and lowest prices for the display period.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup with Scanner.txt#2025-04-16_snippet_8\n\nLANGUAGE: pine\nCODE:\n```\nvar a_lines       = array.new_line()\nvar a_hist        = array.new_box()\n\npriceHighest      = ta.highest(high, i_display_len)\npriceLowest       = ta.lowest (low , i_display_len)\npriceChangeRate   = (priceHighest - priceLowest) / priceHighest\n\noscHighest        = 100\n\nvolumeMARate      = nzVolume / vol_sma\nvolumeHighest     = ta.highest(nzVolume, i_display_len)\nbullCandle        = close > open\n```\n\n----------------------------------------\n\nTITLE: Initializing ICT Displacement Candles Scanner Indicator in PineScript\nDESCRIPTION: Sets up the indicator with title, overlay settings, and maximum line/label counts. Defines input options for scanning method, symbol list, and display settings.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Scanner] ICT Displacement Candles.txt#2025-04-16_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\n//@version=6\nindicator(title = 'ICT Displacement Candles Scanner', shorttitle = 'ICTDCScan', overlay = true, max_lines_count = 500, max_labels_count = 500, behind_chart = false)\n\n//___________________________ Menu Start\n\nstring g_scn_tb = '█████████████████ Scanner █████████████████'\n\nstring tt_ch = \n \"Displacement:\" + \n \"\\n• Strong, sudden price move (up/down) with long candles, minimal wicks.\" + \n\n \"\\n\\n Retracement:\" + \n \"\\n• Price retraces to a Fibonacci level of the displacement.\" +\n \"\\n• Potential entry point for trend continuation.\"\n\nstring tt_is = \n \"• Reads only the first 40 symbols.\" + \n \"\\n• Max 4096 characters.\" + \n \"\\n• Format: EXCHANGE:SYMBOL_A,EXCHANGE:SYMBOL_B\"\n\nstring i_scn_choose = input.string(\n defval = 'Displacement', \n title = 'Scanning Method', \n options = ['Displacement', 'Retracement'], tooltip = tt_ch, group = g_scn_tb)\n\nstring i_symbols = input.text_area(\n defval = 'NSE:ABCAPITAL,NSE:ABFRL,NSE:ASHOKLEY,NSE:BANDHANBNK,NSE:BANKBARODA,NSE:BANKINDIA,NSE:BEL,NSE:BHEL,NSE:BIOCON,NSE:BPCL,NSE:CESC,NSE:DELHIVERY,NSE:FEDERALBNK,NSE:GAIL,NSE:HINDCOPPER,NSE:HUDCO,NSE:IEX,NSE:IGL,NSE:IIFL,NSE:INDUSTOWER,NSE:IOC,NSE:IREDA,NSE:IRFC,NSE:JIOFIN,NSE:LTF,NSE:MANAPPURAM,NSE:MOTHERSON,NSE:M_MFIN,NSE:NATIONALUM,NSE:NCC,NSE:NYKAA,NSE:ONGC,NSE:PETRONET,NSE:POWERGRID,NSE:RBLBANK,NSE:SAIL,NSE:TATASTEEL,NSE:UNIONBANK,NSE:WIPRO,NSE:ZOMATO', \n title = 'Paste Symbols', tooltip = tt_is, group = g_scn_tb)\n\nbool i_scn_show_table = input.bool(defval = true, title = 'Display Table', group = g_scn_tb)\nbool i_scn_show_long = input.bool(defval = true, title = 'Long Signals', inline = 'tb_2', group = g_scn_tb)\nbool i_scn_show_short = input.bool(defval = true, title = 'Short Signals', inline = 'tb_2', group = g_scn_tb)\n\nint i_scn_tbl_show_rows = input.int(defval = 12, title = 'Display Rows', minval = 0, maxval = 100, group = g_scn_tb)\nstring i_scn_tbl_pos = input.string(defval = position.bottom_left, title = 'Table Position', options = [position.top_left, position.top_center, position.top_right, position.middle_left, position.middle_center, position.middle_right, position.bottom_left, position.bottom_center, position.bottom_right], group = g_scn_tb)\nstring i_scn_tbl_txt_size = input.string(defval = size.small, title = 'Table Size', options = [size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group = g_scn_tb)\n```\n\n----------------------------------------\n\nTITLE: Calculating and Plotting ATR in PineScript\nDESCRIPTION: Computes Average True Range (ATR) with customizable smoothing methods, and plots ATR and its SMA on the chart.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Indicator - Trend Following Setup - Sideways Market Skipper.txt#2025-04-16_snippet_2\n\nLANGUAGE: pinescript\nCODE:\n```\nma_function_atr(source, length) =>\n\tswitch i_atr_range_smoothing\n\t\t'RMA' => ta.rma(source, length)\n\t\t'SMA' => ta.sma(source, length)\n\t\t'EMA' => ta.ema(source, length)\n\t\t'WMA' => ta.wma(source, length)\n\natr = ma_function_atr(ta.tr(true), i_atr_range_length)\natr_sma = ta.sma(atr, i_atr_range_sma_length)\nplot(series=atr, title=\"ATR\", color=i_indicator_color)\nplot(series=atr_sma, title=\"ATR SMA\", color=i_signal_color)\n\n// Range Source\nrange_input = i_atr_range_choice == 'Auto ATR' ? (atr * i_atr_range_multiplier) : i_atr_range_points\nrange_source = i_atr_range_choice == 'Type Points' ? i_atr_range_points :range_input\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Table with PineScript\nDESCRIPTION: This code creates a data table displaying price change percentage, volume change percentage, current volume, and previous day's volume. It formats values as strings, sets colors based on whether values are positive or negative, and renders the table conditionally on the last bar.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_19\n\nLANGUAGE: pinescript\nCODE:\n```\n// To String\nday_pchg_str = str.tostring(cum_pchg, '#.##') + ' %'\nvolume_pchg_str = str.tostring(cum_vol_pchg, '#.##') + ' %'\nday_volume_str = str.tostring(current_cum_vol / 100000, '#.##') + ' L'\nprev_day_volume_str = str.tostring(prev_cum_vol / 100000, '#.##') + ' L'\n\n// Color\nbgcolor_1 = i_neu_dark_color\nbgcolor_2 = i_neu_mid_color\n\npchg_col = cum_pchg > 0 ? i_pos_color : i_neg_color\nvol_pchg_col = cum_vol_pchg > 0 ? i_pos_color : i_neg_color\nprev_vol_pchg_col = prev_cum_vol < current_cum_vol ? i_neg_color : i_pos_color\n\n// Plot Table\nvar table tbl_data = table.new(position = i_tbl_data_pos, columns = 2, rows = 4, border_width = 1, force_overlay = true)\n\nif barstate.islast and i_tbl_data_show\n    table.cell(table_id = tbl_data, column = 0, row = 0, text = '%Chg', text_color = i_neu_color, text_halign = text.align_left, bgcolor = bgcolor_1, text_size = i_tbl_data_txt_size)\n    table.cell(table_id = tbl_data, column = 1, row = 0, text = day_pchg_str, text_color = pchg_col, text_halign = text.align_right, bgcolor = bgcolor_1, text_size = i_tbl_data_txt_size)\n\n    table.cell(table_id = tbl_data, column = 0, row = 1, text = 'Vol %Chg', text_color = i_neu_color, text_halign = text.align_left, bgcolor = bgcolor_2, text_size = i_tbl_data_txt_size)\n    table.cell(table_id = tbl_data, column = 1, row = 1, text = volume_pchg_str, text_color = vol_pchg_col, text_halign = text.align_right, bgcolor = bgcolor_2, text_size = i_tbl_data_txt_size)\n\n    table.cell(table_id = tbl_data, column = 0, row = 2, text = 'Vol', text_color = i_neu_color, text_halign = text.align_left, bgcolor = bgcolor_1, text_size = i_tbl_data_txt_size)\n    table.cell(table_id = tbl_data, column = 1, row = 2, text = day_volume_str, text_color = vol_pchg_col, text_halign = text.align_right, bgcolor = bgcolor_1, text_size = i_tbl_data_txt_size)\n\n    table.cell(table_id = tbl_data, column = 0, row = 3, text = 'PD Vol', text_color = i_neu_color, text_halign = text.align_left, bgcolor = bgcolor_2, text_size = i_tbl_data_txt_size)\n    table.cell(table_id = tbl_data, column = 1, row = 3, text = prev_day_volume_str, text_color = prev_vol_pchg_col, text_halign = text.align_right, bgcolor = bgcolor_2, text_size = i_tbl_data_txt_size)\n```\n\n----------------------------------------\n\nTITLE: Plotting Labels for Completed Bull and Bear Sequences\nDESCRIPTION: Creates labels displaying the count of bars in completed bull and bear sequences. Labels are positioned above or below price bars with customizable colors based on user settings and only appear when count thresholds are met.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Indicator] ICT Displacement Candles.txt#2025-04-16_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\n// Plot\nif bearMaxCnt and i_scn_show_short\n    label.new(x = bar_index[1], y = low[1], text = str.tostring(bearCnt[1]), color = na, textcolor = i_neg_light_color, size = size.small, style = label.style_label_up, yloc = yloc.belowbar)\n//    label.new(x = bar_index[1], y = low[1], text = str.format(\"{0,number,#.##}%\", bearRangePercent[1]), color = na, textcolor = i_neg_light_color, size = size.small, style = label.style_label_up, yloc = yloc.belowbar)\n\nif bullMaxCnt and i_scn_show_long\n    label.new(x = bar_index[1], y = high[1], text = str.tostring(bullCnt[1]), color = na, textcolor = i_pos_light_color, size = size.small, style = label.style_label_down, yloc = yloc.abovebar)\n//    label.new(x = bar_index[1], y = high[1], text = str.format(\"{0,number,#.##}%\", bullRangePercent[1]), color = na, textcolor = i_pos_light_color, size = size.small, style = label.style_label_down, yloc = yloc.abovebar)\n\n// Plot counts\n//if bearCnt >= i_dc_min_bars and i_scn_show_short\n//    label.new(x = bar_index, y = low, text = str.tostring(bearCnt), color = na, textcolor = i_neg_light_color, size = size.small, style = label.style_label_up, yloc = yloc.belowbar)\n//if bullCnt >= i_dc_min_barst and i_scn_show_long\n//    label.new(x = bar_index, y = high, text = str.tostring(bullCnt), color = na, textcolor = i_pos_light_color, size = size.small, style = label.style_label_down, yloc = yloc.abovebar)\n```\n\n----------------------------------------\n\nTITLE: Finding Fair Value Gaps in PineScript\nDESCRIPTION: Method to detect Fair Value Gaps (FVGs) in price action. It identifies gaps between candles where high price of current candle is below the low of a previous candle or vice versa, and adds them to the imbalance structure if they meet the criteria.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_8\n\nLANGUAGE: pine\nCODE:\n```\nmethod FindImbalance(ImbalanceStructure IS, o, h, l, c, t, o1, h1, l1, c1, t1, o2, h2, l2, c2, t2) =>\n    if IS.settings.show and (h < l2 or l > h2) \n        o = h < l2 ? l2 : h2\n        c = h < l2 ? h : l\n        if IS.imbalance.size() == 0 \n            IS.AddImbalance(o, c, t2)\n        else\n            if IS.imbalance.first().open_time < t2\n                IS.AddImbalance(o, c, t2)\n    IS\n```\n\n----------------------------------------\n\nTITLE: Creating Table Display for Scanner Results in PineScript\nDESCRIPTION: Sets up a table to display scanner results with formatting functions for title cells and data cells. The table includes columns for symbol, time, price, percentage change, and volume percentage change.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Scanner - Trend Following Setup - Sideways Market Skipper Scanner.txt#2025-04-16_snippet_15\n\nLANGUAGE: pine\nCODE:\n```\n// Plot Table\n// Create table with specified properties\nvar table scr_tbl = table.new(position=i_scr_tbl_position, columns=5, rows=102, border_width=1, force_overlay=true)\n\n// Function to populate cells in the table\nscr_cell_title(col, row, txt) => \n    table.cell(scr_tbl, col, row, text = txt, text_color = i_neu_color, text_halign=text.align_center, bgcolor=i_neu_dark_color, text_size=i_scr_tbl_text_size)\n\nscr_cell(col, row, txt, _text_color, _bgcolor) => \n    table.cell(scr_tbl, col, row, text = txt, text_color = _text_color, text_halign=text.align_left, bgcolor=_bgcolor, text_size=i_scr_tbl_text_size)\n```\n\n----------------------------------------\n\nTITLE: Plotting Pattern Labels and Fibonacci Levels in PineScript\nDESCRIPTION: This code visualizes the identified patterns by adding labels showing the count of bars in bullish/bearish sequences, plotting Fibonacci retracement lines, and tracking the last count values before pattern resets.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Scanner] ICT Displacement Candles.txt#2025-04-16_snippet_8\n\nLANGUAGE: pine\nCODE:\n```\n// Plot\nif bearMaxCnt and i_scn_show_short\n    label.new(x = bar_index[1], y = low[1], text = str.tostring(bearCnt[1]), color = na, textcolor = i_neg_light_color, size = size.small, style = label.style_label_up, yloc = yloc.belowbar)\n//    label.new(x = bar_index[1], y = low[1], text = str.format(\"{0,number,#.##}%\", bearRangePercent[1]), color = na, textcolor = i_neg_light_color, size = size.small, style = label.style_label_up, yloc = yloc.belowbar)\n\nif bullMaxCnt and i_scn_show_long\n    label.new(x = bar_index[1], y = high[1], text = str.tostring(bullCnt[1]), color = na, textcolor = i_pos_light_color, size = size.small, style = label.style_label_down, yloc = yloc.abovebar)\n//    label.new(x = bar_index[1], y = high[1], text = str.format(\"{0,number,#.##}%\", bullRangePercent[1]), color = na, textcolor = i_pos_light_color, size = size.small, style = label.style_label_down, yloc = yloc.abovebar)\n\n// Plot counts\n//if bearCnt >= i_dc_min_bars and i_scn_show_short\n//    label.new(x = bar_index, y = low, text = str.tostring(bearCnt), color = na, textcolor = i_neg_light_color, size = size.small, style = label.style_label_up, yloc = yloc.belowbar)\n//if bullCnt >= i_dc_min_barst and i_scn_show_long\n//    label.new(x = bar_index, y = high, text = str.tostring(bullCnt), color = na, textcolor = i_pos_light_color, size = size.small, style = label.style_label_down, yloc = yloc.abovebar)\n\nplot(series = bearFib, title = 'Bearish Fib Line', color = i_neg_color, style = plot.style_stepline, display = display.none)\nplot(series = bullFib, title = 'Bullish Fib Line', color = i_pos_color, style = plot.style_stepline, display = display.none)\n\n// Track the final count before reset\nvar int lastBullCnt = 0\nvar int lastBearCnt = 0\n\n// Update when sequence ends\nif bullMaxCnt\n    lastBullCnt := bullCnt[1]\nif bearMaxCnt\n    lastBearCnt := bearCnt[1]\n```\n\n----------------------------------------\n\nTITLE: Configuring Zig Zag Visualization Parameters in Pine Script\nDESCRIPTION: Defines user interface inputs for the Zig Zag line visualization, including display toggle, period length, source data options, and color settings. The Zig Zag pattern helps identify significant price reversals.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_2\n\nLANGUAGE: Pine Script\nCODE:\n```\ng_zz = '██████████████████ Zig Zag ██████████████████'\n\nbool i_zz_display = input.bool(defval=true, title='Display Zig Zag', group=g_zz)\nint i_zz_period = input.int(defval=3, title='Zig Zag Length', minval=2, group=g_zz)\nstring i_zz_source = input.string(defval='High/Low', title='Source', options=['High/Low', 'Open/Close', 'Close'], group=g_zz)\ncolor i_zz_bull_color = input.color(defval=#26A69A, title='Color Up', group=g_zz)\ncolor i_zz_bear_color = input.color(defval=#FF5252, title='Color Down', group=g_zz)\nint i_zz_bx_transp = input.int(defval=85, title='Box Transparency', minval=0, maxval=100, group=g_zz)\n```\n\n----------------------------------------\n\nTITLE: Table Display Functions\nDESCRIPTION: Functions for creating and populating a table with formatted cells, including title cells and data cells with color coding.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Market Structure Shift (MSS)/ICT Market Structure Shift (MSS) Screener.txt#2025-04-16_snippet_12\n\nLANGUAGE: pinescript\nCODE:\n```\nvar table tbl = table.new(position=i_tbl_position, columns=3, rows=102, border_width=1)\n\ncell_title(col, row, txt) => \n    table.cell(tbl, col, row, text = txt, text_color = i_neu_color, text_halign=text.align_center, bgcolor = color.new(i_neu_color, 90), text_size=i_tbl_text_size)\n\ncell(col, row, txt, color) => \n    table.cell(tbl, col, row, text = txt, text_color = color, text_halign=text.align_left, bgcolor = color.new(color, 90), text_size=i_tbl_text_size)\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Settings in PineScript\nDESCRIPTION: This snippet sets up customizable chart settings for the indicator, including display length and color options for various elements of the chart.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\ng_ch = '███████████████ Chart Settings ███████████████'\nint i_display_len = input.int(defval=50, title='Display Length', minval=1, group=g_ch)\ncolor i_pos_color = input.color(defval=#26A69A, title='Positive', group=g_ch)\ncolor i_pos_light_color = input.color(defval=#ACE5DC, title='Positive Light', group=g_ch)\ncolor i_neu_color = input.color(defval=#D1D4DC, title='Neutral', group=g_ch)\ncolor i_neg_light_color = input.color(defval=#FCCBCD, title='Negative Light', group=g_ch)\ncolor i_neg_color = input.color(defval=#FF5252, title='Negative', group=g_ch)\ncolor i_indicator_color = input.color(defval=#2962FF, title='Indicator', group=g_ch)\ncolor i_signal_color = input.color(defval=#FF6D00, title='Signal', group=g_ch)\n```\n\n----------------------------------------\n\nTITLE: Creating Fibonacci Price Level Calculator in Pine Script\nDESCRIPTION: Function that calculates Fibonacci price levels based on high and low values. It can calculate levels from either high or low reference points and applies a specified Fibonacci ratio to determine the target price level.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Scanner] ICT Liquidity Void Fill Scanner.txt#2025-04-16_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\nfibonacci(bool calc_from_high, float high_value, float low_value, float fib_value) =>\n    if calc_from_high\n        low_value + (high_value - low_value) * fib_value\n    else\n        high_value - (high_value - low_value) * fib_value\n```\n\n----------------------------------------\n\nTITLE: Populating Scanner Results Table in PineScript\nDESCRIPTION: Fills the scanner results table with data from the matrix on the last bar if display is enabled. It formats cells with different colors based on the signal type (positive for long, negative for short) and shows all detected signals.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Scanner - Trend Following Setup - Sideways Market Skipper Scanner.txt#2025-04-16_snippet_16\n\nLANGUAGE: pine\nCODE:\n```\n// Check if it's the last bar\nif barstate.islast and i_scr_show_table\n    // Clear existing data in the table\n    table.clear(scr_tbl, 0, 0, 2, 101)\n\n    scr_cell_title(0, 0, \"Sideways Market Skipper\")\n    table.merge_cells(table_id=scr_tbl, start_column=0, start_row=0, end_column=4, end_row=0)\n    scr_cell_title(0, 1, \"Symbol\")\n    scr_cell_title(1, 1, \"Time\")\n    scr_cell_title(2, 1, \"Price\")\n    scr_cell_title(3, 1, \"%Chg\")\n    scr_cell_title(4, 1, \"V %Chg\")\n\n    j = 4\n    // Populate table with matrix data\n    if matrix.rows(matrix) > 0\n        for i = 0 to matrix.rows(matrix) - 1\n            // Determine color based on the signal\n\n            _textcolor = \n             matrix.get(matrix, i, 5) ==  \"1\" ? i_pos_color : \n             matrix.get(matrix, i, 5) == \"-1\" ? i_neg_color : i_neu_color\n\n            _bg_color = \n             matrix.get(matrix, i, 5) ==  \"1\" ? i_pos_dark_color :\n             matrix.get(matrix, i, 5) == \"-1\" ? i_neg_dark_color : i_neu_color\n\n            // Populate cells in the table\n            scr_cell(0, j, matrix.get(matrix, i, 0), _textcolor, _bg_color)\n            scr_cell(1, j, matrix.get(matrix, i, 1), _textcolor, _bg_color)\n            scr_cell(2, j, matrix.get(matrix, i, 2), _textcolor, _bg_color)\n            scr_cell(3, j, matrix.get(matrix, i, 3), _textcolor, _bg_color)\n            scr_cell(4, j, matrix.get(matrix, i, 4), _textcolor, _bg_color)\n\n            j += 1\n```\n\n----------------------------------------\n\nTITLE: Populating Screener Table with Matrix Data in PineScript\nDESCRIPTION: Code that executes on the last bar to populate the screener table with headers and data from the matrix, using color-coding based on signal values and displaying symbol information with associated metrics.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_29\n\nLANGUAGE: PineScript\nCODE:\n```\n// Check if it's the last bar\nif barstate.islast and i_scr_show_table\n    // Clear existing data in the table\n    table.clear(scr_tbl, 0, 0, 2, 101)\n\n    scr_cell_title(0, 0, i_scr_choose)\n    table.merge_cells(table_id = scr_tbl, start_column = 0, start_row = 0, end_column = 4, end_row = 0)\n    scr_cell_title(0, 1, 'Symbol')\n    scr_cell_title(1, 1, 'Time')\n    scr_cell_title(2, 1, 'FVG %')\n    scr_cell_title(3, 1, '%Chg')\n    scr_cell_title(4, 1, 'V %Chg')\n\n    j = 4\n    // Populate table with matrix data\n    if matrix.rows(matrix) > 0\n        for i = 0 to matrix.rows(matrix) - 1 by 1\n        // Determine color based on the signal\n\n            _textcolor = matrix.get(matrix, i, 5) == '1' ? i_pos_color : matrix.get(matrix, i, 5) == '-1' ? i_neg_color : i_neu_color\n\n            _bg_color = matrix.get(matrix, i, 5) == '1' ? i_pos_dark_color : matrix.get(matrix, i, 5) == '-1' ? i_neg_dark_color : i_neu_color\n\n            // Populate cells in the table\n            scr_cell(0, j, matrix.get(matrix, i, 0), _textcolor, _bg_color)\n            scr_cell(1, j, matrix.get(matrix, i, 1), _textcolor, _bg_color)\n            scr_cell(2, j, matrix.get(matrix, i, 2), _textcolor, _bg_color)\n            scr_cell(3, j, matrix.get(matrix, i, 3), _textcolor, _bg_color)\n            scr_cell(4, j, matrix.get(matrix, i, 4), _textcolor, _bg_color)\n\n            j := j + 1\n            j\n```\n\n----------------------------------------\n\nTITLE: Selecting Screening Method in PineScript\nDESCRIPTION: Defines conditional logic to choose between different screening methods based on user input. It selects either 'Mitigation Block' or trigger signals for both short and long conditions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_17\n\nLANGUAGE: pinescript\nCODE:\n```\n// Choose Screening Method\nshort_cond = \n i_scr_choose == 'Mitigation Block' ? short_ret_cont_1 :\n short_ret_trigger\n\nlong_cond =  \n i_scr_choose == 'Mitigation Block' ? long_ret_cont_1 :\n long_ret_trigger\n```\n\n----------------------------------------\n\nTITLE: Applying Additional Filters for ICT Displacement Candles Scanner in PineScript\nDESCRIPTION: Implements additional filters including ATR, body percentage, time, and date filters to refine scanning results.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Scanner] ICT Displacement Candles.txt#2025-04-16_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\n//___________________________ Additional Filters Start\n\n// Pre-calculate common values\ncandle_range = high - low\nbody_size = math.abs(close - open)\n\n// ATR Filter\natr_filter = not i_atr_filter or candle_range > ta.atr(i_atr_length) * i_atr_multi\n\n// Body Filters\nbody_filter = not i_body_filter or candle_range > 0 and body_size / candle_range >= i_body_percent\n\n// Time Filter\ntime_filter = \n not i_time_filter or \n (hour > i_hour_1 or hour == i_hour_1 and minute >= i_minute_1) and \n (hour < i_hour_2 or hour == i_hour_2 and minute < i_minute_2)\n\n// Date Filter\ndate_filter = not i_date_filter or year == i_year and month == i_month and dayofmonth == i_day\n```\n\n----------------------------------------\n\nTITLE: Initializing Variables and Data Structures for ICT Liquidity Indicator in Pine Script\nDESCRIPTION: Creates and initializes the data structures needed for tracking fair value gaps across multiple timeframes. Sets up arrays to store imbalances for each timeframe and associates them with their respective settings.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\n//____________________________ Variables\n\ncolor color_transparent             = #00000000\n\nHelper helper                       = Helper.new()\n\nvar ImbalanceStructure FVG_1        = ImbalanceStructure.new()\nvar ImbalanceStructure FVG_2        = ImbalanceStructure.new()\nvar ImbalanceStructure FVG_3        = ImbalanceStructure.new()\n\nvar Imbalance[] FVGs_1              = array.new<Imbalance>()\nvar Imbalance[] FVGs_2              = array.new<Imbalance>()\nvar Imbalance[] FVGs_3              = array.new<Imbalance>()\n\nFVG_1.imbalance                     := FVGs_1\nFVG_1.settings                      := htf_1_Settings\nFVG_2.imbalance                     := FVGs_2\nFVG_2.settings                      := htf_2_Settings\nFVG_3.imbalance                     := FVGs_3\nFVG_3.settings                      := htf_3_Settings\n\n// Used internally for padding\nvar int TF_1        = 0\nvar int TF_2        = 0\nvar int TF_3        = 0\n\nvar float daily     = 0\nvar float monthly   = 0\n```\n\n----------------------------------------\n\nTITLE: Creating Data Table for Market Information in PineScript\nDESCRIPTION: This snippet creates a data table to display key market information such as price change, volume change, and current/previous day volumes. It formats the data and applies color coding based on positive or negative values.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_15\n\nLANGUAGE: pine\nCODE:\n```\n// To String\nday_pchg_str = str.tostring(cum_pchg,\"#.##\") + ' %'\nvolume_pchg_str = str.tostring(cum_vol_pchg,\"#.##\") + ' %'\nday_volume_str = str.tostring(current_cum_vol/100000,\"#.##\") + ' L'\nprev_day_volume_str = str.tostring(prev_cum_vol/100000,\"#.##\") + ' L'\n\n// Color\nbgcolor_1 = i_neu_dark_color\nbgcolor_2 = i_neu_mid_color\n\npchg_col = cum_pchg > 0 ? i_pos_color : i_neg_color\nvol_pchg_col = cum_vol_pchg > 0 ? i_pos_color : i_neg_color\nprev_vol_pchg_col = prev_cum_vol < current_cum_vol ? i_neg_color : i_pos_color\n\n// Plot Table\nvar table tbl_data = table.new(position=i_tbl_data_pos, columns=2, rows=4, border_width=1, force_overlay=true)\n\nif barstate.islast and i_tbl_data_show\n    table.cell(table_id=tbl_data, column=0, row=0, text=\"%Chg\", text_color=i_neu_color, text_halign=text.align_left, bgcolor=bgcolor_1, text_size=i_tbl_data_txt_size)\n    table.cell(table_id=tbl_data, column=1, row=0, text=day_pchg_str, text_color=pchg_col, text_halign=text.align_right, bgcolor=bgcolor_1, text_size=i_tbl_data_txt_size)\n```\n\n----------------------------------------\n\nTITLE: Initializing MZ 2 Line and Box Arrays in PineScript\nDESCRIPTION: Creates arrays to store line and box elements for the MZ 2 timeframe. These arrays will hold visual elements for price levels, support, and resistance zones.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_14\n\nLANGUAGE: pine\nCODE:\n```\nvar mz_2_ph_ln_arr = array.new_line(), var mz_2_pl_ln_arr = array.new_line()\nvar mz_2_p_ln_arr = array.new_line()\nvar mz_2_r_1_ln_arr = array.new_line(), var mz_2_s_1_ln_arr = array.new_line()\nvar mz_2_r_2_ln_arr = array.new_line(), var mz_2_s_2_ln_arr = array.new_line()\n\nvar mz_2_r_1_s_1_bx_arr = array.new_box()\nvar mz_2_r_1_bx_arr = array.new_box(), var mz_2_s_1_bx_arr = array.new_box()\nvar mz_2_r_2_bx_arr = array.new_box(), var mz_2_s_2_bx_arr = array.new_box()\n```\n\n----------------------------------------\n\nTITLE: Implementing Screener Logic and Calculations in PineScript\nDESCRIPTION: Defines the screener condition and implements functions for indicator calculation, time formatting, and symbol extraction. It also sets up a matrix to store screener results.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] Market Profile with Screener (Based on [RS]Market Profile by RicardoSantos).txt#2025-04-16_snippet_13\n\nLANGUAGE: pinescript\nCODE:\n```\nscreener_condition = va_percent > i_va_above and va_percent <= i_va_below and poc_percent <= i_ltp_below and poc_percent >= i_ltp_above\n\ntruncate(number, decimals) =>\n    factor = math.pow(10, decimals)\n    int(number * factor) / factor\n\nindicator_calculation() =>\n    // Initialize variables\n    percent = float(na)\n    _time = int(na)\n    pchg = float(na)\n\n    if screener_condition\n        percent := truncate(va_percent, 2)\n        _time := time\n        pchg := truncate(poc_percent, 2)\n\n    [_time, percent, pchg]\n\n// Function to format time\nformat_time(x) =>\n    timezone = syminfo.timezone\n    timeframe.isintraday ? str.format_time(x, \"HH:mm  dd-MM-yyyy\", timezone) : str.format_time(x, \"dd-MM-yyyy\", timezone)\n\n// Function to extract symbol name\nsymbol(s) => \n    array.get(str.split(s, \":\"), 1)\n\n// Matrix setup\nvar matrix = matrix.new<string>(0, 4, na)\n\n// Function to add rows to the matrix\nmtxFun(symbol, _time, percent, pchg) =>\n    matrix.add_row(matrix, 0, array.from(symbol, _time, percent, pchg))\n\n// Screener function to collect data\nscreener(s) =>\n    sym = ticker.modify(s, syminfo.session)\n    [_time, percent, pchg] = request.security(sym, timeframe.period, indicator_calculation())\n\n    // Check if the signal is not na and the time matches\n    if _time == time\n        mtxFun(symbol(s), format_time(_time), str.tostring(percent), str.tostring(pchg))\n```\n\n----------------------------------------\n\nTITLE: Defining Liquidity Void Filtering Options in Pine Script\nDESCRIPTION: This section sets up input parameters for filtering liquidity voids based on ATR or percentage. It allows users to customize the filtering method and its parameters.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void/ICT Liquidity Void Multi-timeframe.txt#2025-04-16_snippet_1\n\nLANGUAGE: Pine Script\nCODE:\n```\ng_lv_f = \"Void Height Filter\"\ntt_lv_f = \"• Filters remove narrow liquidity voids.\" +\n \"\\n• ATR filtering adjusts automatically when the timeframe changes.\" +\n \"\\n• Percentage filter will be constant across all timeframes.\" +\n \"\\n• If you don't want any filtering, choose 'Percentage' and then change Percentage to 0.\"\nstring i_lv_additional = input.string(defval='ATR', title='Filter Using', options=['ATR', 'Percentage'], tooltip=tt_lv_f, group=g_lv_f)\ntt_lv_atr = \"Applicable only if 'Filter Using' is 'ATR'\"\nint i_lv_atr_length = input.int(defval=14, minval=1, title='ATR Period', tooltip=tt_lv_atr, group=g_lv_f)\ntt_lv_atr_m = \"Higher the number, filters higher void height.\"\nfloat i_lv_atr_multi = input.float(defval=4, minval=1, title='ATR Multiplier', tooltip=tt_lv_atr_m, group=g_lv_f)\ntt_lv_p = \"Filters liquidity void above the given percentage.\"\nfloat i_lv_percentage = input.float(defval=2.5, minval=0, step=0.1, title='Percentage Above', tooltip=tt_lv_p, group=g_lv_f)\n```\n\n----------------------------------------\n\nTITLE: Defining Scanner Conditions in PineScript\nDESCRIPTION: Sets up boolean conditions for short and long positions based on displacement or retracement patterns.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Scanner] ICT Displacement Candles.txt#2025-04-16_snippet_11\n\nLANGUAGE: pinescript\nCODE:\n```\nbool short_cond =  \n i_scn_choose == 'Displacement' ? bearMaxCnt : bearRet\n\nbool long_cond = \n i_scn_choose == 'Displacement' ? bullMaxCnt : bullRet\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Screener Table in PineScript\nDESCRIPTION: Initializes a table for displaying screener data with specified properties including position, columns, rows, and styling options.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_27\n\nLANGUAGE: PineScript\nCODE:\n```\n// Plot Table\n// Create table with specified properties\nvar table scr_tbl = table.new(position = i_scr_tbl_position, columns = 5, rows = 102, border_width = 1, force_overlay = true)\n```\n\n----------------------------------------\n\nTITLE: Defining Bullish Retracement Trigger in PineScript\nDESCRIPTION: Sets a boolean flag for bullish retracement triggers when the bull_current_state equals 2. This condition is used to identify potential bullish retracement opportunities in the ZigZag pattern.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Market Structure Shift (MSS)/ICT Market Structure Shift (MSS).txt#2025-04-16_snippet_1\n\nLANGUAGE: pinescript\nCODE:\n```\nbool bullish_retracement_trigger = bull_current_state == 2 ? true : false\n```\n\n----------------------------------------\n\nTITLE: Creating Performance Table for ICT Displacement Candles Scanner in PineScript\nDESCRIPTION: Implements a performance table to display cumulative percentage change and volume statistics for the scanned symbols.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Scanner] ICT Displacement Candles.txt#2025-04-16_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\nstring g_cum = '█████████████ Performance Table █████████████'\n\nbool i_cum_tbl_disp = input.bool(defval = true, title = 'Display', group = g_cum)\nstring i_cum_tbl_pos = input.string(defval = position.bottom_right, title = 'Position', options = [position.top_left, position.top_center, position.top_right, position.middle_left, position.middle_center, position.middle_right, position.bottom_left, position.bottom_center, position.bottom_right], group = g_cum)\nstring i_cum_tbl_size = input.string(defval = size.normal, title = 'Size', options = [size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group = g_cum)\n\n//___________________________ Performance Start\n\nis_new_day = ta.change(time('D')) != 0\n\n// Cumulative Percentage Change\nvar float cum_pchg = na\nday_pchg = na(close[1]) ? 0 : (close - close[1]) / close[1] * 100\ncum_pchg := is_new_day ? day_pchg : na(cum_pchg) ? day_pchg : cum_pchg + day_pchg\n\n// Cumulative Volume and Volume Percentage Change\nvar float curr_cum_vol = na\nvar float prev_cum_vol = na\nif is_new_day\n    prev_cum_vol := curr_cum_vol\n    curr_cum_vol := volume\n    curr_cum_vol\nelse\n    curr_cum_vol := na(curr_cum_vol) ? volume : curr_cum_vol + volume\n    curr_cum_vol\nprev_vol_safe = nz(prev_cum_vol, curr_cum_vol)\ncum_vol_pchg = (curr_cum_vol - prev_vol_safe) / prev_vol_safe * 100\n\nvar table tbl_cum = table.new(position=i_cum_tbl_pos, columns=2, rows=4, border_width=1, force_overlay=true)\n\ncell_perform(col, row, txt, txt_color, aligh) =>\n    table.cell(tbl_cum, col, row, txt, text_color=txt_color, text_halign=aligh, bgcolor=i_neu_dark_color, text_size=i_cum_tbl_size)\n\nif barstate.islast and i_cum_tbl_disp\n    pchg_col = cum_pchg > 0 ? i_pos_color : i_neg_color\n    vol_pchg_col = cum_vol_pchg > 0 ? i_pos_color : i_neg_color\n    prev_vol_pchg_col = prev_vol_safe < curr_cum_vol ? i_neg_color : i_pos_color\n    \n    cell_perform(0, 0, '%Chg', chart.fg_color, text.align_left)\n    cell_perform(1, 0, str.tostring(cum_pchg, '#.##') + ' %', pchg_col, text.align_right)\n    cell_perform(0, 1, 'Vol %Chg', chart.fg_color, text.align_left)\n    cell_perform(1, 1, str.tostring(cum_vol_pchg, '#.##') + ' %', vol_pchg_col, text.align_right)\n    cell_perform(0, 2, 'Vol', chart.fg_color, text.align_left)\n    cell_perform(1, 2, str.tostring(curr_cum_vol / 100000, '#.##') + ' L', vol_pchg_col, text.align_right)\n    cell_perform(0, 3, 'PD Vol', chart.fg_color, text.align_left)\n    cell_perform(1, 3, str.tostring(prev_vol_safe / 100000, '#.##') + ' L', prev_vol_pchg_col, text.align_right)\n```\n\n----------------------------------------\n\nTITLE: Initializing Displacement Candles Tracking in PineScript\nDESCRIPTION: Sets up variables to track bullish and bearish displacement candles, including count, high/low prices, and Fibonacci levels.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Scanner] ICT Displacement Candles.txt#2025-04-16_snippet_5\n\nLANGUAGE: pine\nCODE:\n```\n//___________________________ Displacement Candles Start\n\n// Combined tracking variables\nvar int bullCnt = 0\nvar int bearCnt = 0\nvar float bullHi = na\nvar float bullLo = na\nvar float bearHi = na\nvar float bearLo = na\nvar float bullFib = na\nvar float bearFib = na\nvar bullHighs = array.new_float()\nvar bullLows = array.new_float()\nvar bearHighs = array.new_float()\nvar bearLows = array.new_float()\n```\n\n----------------------------------------\n\nTITLE: Drawing Magnetic Zone 1 Visualization Elements in PineScript\nDESCRIPTION: Renders the first magnetic zone levels on chart when the specified timeframe changes. Conditionally creates lines and boxes for different support/resistance levels based on user settings, with custom styling, text labels, and transparency.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_10\n\nLANGUAGE: pine\nCODE:\n```\nif(timeframe.change(i_mz_1_tf))\n    if i_mz_1_pdhl_show\n        mz_1_ph_ln = draw_line(mz_1_time, mz_1_time_close, mz_1_ph, i_mz_1_sub_color, i_mz_1_ln_style, i_mz_1_ln_width)\n        array.push(mz_1_ph_ln_arr, mz_1_ph_ln)\n        mz_1_pl_ln = draw_line(mz_1_time, mz_1_time_close, mz_1_pl, i_mz_1_sub_color, i_mz_1_ln_style, i_mz_1_ln_width)\n        array.push(mz_1_pl_ln_arr, mz_1_pl_ln)\n\n    if i_mz_1_p_show\n        mz_1_p_ln = draw_line(mz_1_time, mz_1_time_close, mz_1_p, i_mz_1_sub_color, i_mz_1_ln_style, i_mz_1_ln_width)\n        array.push(mz_1_p_ln_arr, mz_1_p_ln)\n\n    if i_mz_1_sr_1_show\n        mz_1_r_1_ln = draw_line(mz_1_time, mz_1_time_close, mz_1_r_1, i_mz_1_sub_color, i_mz_1_ln_style, i_mz_1_ln_width)\n        array.push(mz_1_r_1_ln_arr, mz_1_r_1_ln)\n        mz_1_s_1_ln = draw_line(mz_1_time, mz_1_time_close, mz_1_s_1, i_mz_1_sub_color, i_mz_1_ln_style, i_mz_1_ln_width)\n        array.push(mz_1_s_1_ln_arr, mz_1_s_1_ln)\n\n        mz_1_r_bx = draw_box(mz_1_time, mz_1_time_close, mz_1_r_1_top, mz_1_r_1_bot, color.new(i_mz_1_sub_color, i_mz_bx_transp + 10), 1, i_mz_bx_style, str.tostring(math.round_to_mintick(mz_1_r_1)) + ' : ' + str.tostring(i_mz_1_tf) + '\\n' + '\\n', i_mz_bx_txt_size, i_mz_1_sub_color, i_mz_bx_txt_align)\n        array.push(mz_1_r_1_bx_arr, mz_1_r_bx)\n        mz_1_s_bx = draw_box(mz_1_time, mz_1_time_close, mz_1_s_1_top, mz_1_s_1_bot, color.new(i_mz_1_sub_color, i_mz_bx_transp + 10), 1, i_mz_bx_style, '\\n' + str.tostring(math.round_to_mintick(mz_1_s_1)) + ' : ' + str.tostring(i_mz_1_tf), i_mz_bx_txt_size, i_mz_1_sub_color, i_mz_bx_txt_align)\n        array.push(mz_1_s_1_bx_arr, mz_1_s_bx)\n\n        mz_1_r_1_s_1_bx = draw_box(mz_1_time, mz_1_time_close, mz_1_r_1_top, mz_1_s_1_bot, color.new(i_mz_1_sub_color, i_mz_bx_transp), 1, i_mz_bx_style, '', i_mz_bx_txt_size, i_mz_1_sub_color, i_mz_bx_txt_align)\n        array.push(mz_1_r_1_s_1_bx_arr, mz_1_r_1_s_1_bx)\n\n    if i_mz_1_sr_2_show\n        mz_1_r_2_ln = draw_line(mz_1_time, mz_1_time_close, mz_1_r_2, i_mz_1_s_ln_color, i_mz_1_ln_style, i_mz_1_ln_width)\n        array.push(mz_1_r_2_ln_arr, mz_1_r_2_ln)\n        mz_1_s_2_ln = draw_line(mz_1_time, mz_1_time_close, mz_1_s_2, i_mz_1_r_ln_color, i_mz_1_ln_style, i_mz_1_ln_width)\n        array.push(mz_1_s_2_ln_arr, mz_1_s_2_ln)\n\n        mz_1_r_2_bx = draw_box(mz_1_time, mz_1_time_close, mz_1_r_2_top, mz_1_r_2_bot, color.new(i_mz_1_s_ln_color, i_mz_bx_transp), 1, i_mz_bx_style, str.tostring(math.round_to_mintick(mz_1_r_2)) + '\\n' + '\\n', i_mz_bx_txt_size, i_mz_1_s_ln_color, i_mz_bx_txt_align)\n        array.push(mz_1_r_2_bx_arr, mz_1_r_2_bx)\n        mz_1_s_2_bx = draw_box(mz_1_time, mz_1_time_close, mz_1_s_2_top, mz_1_s_2_bot, color.new(i_mz_1_r_ln_color, i_mz_bx_transp), 1, i_mz_bx_style, '\\n' + str.tostring(math.round_to_mintick(mz_1_s_2)), i_mz_bx_txt_size, i_mz_1_r_ln_color, i_mz_bx_txt_align)\n        array.push(mz_1_s_2_bx_arr, mz_1_s_2_bx)\n\n    if i_mz_1_sr_3_show\n        mz_1_r_3_ln = draw_line(mz_1_time, mz_1_time_close, mz_1_r_3, i_mz_1_r_t_ln_color, i_mz_1_ln_style, i_mz_1_ln_width)\n        array.push(mz_1_r_3_ln_arr, mz_1_r_3_ln)\n        mz_1_s_3_ln = draw_line(mz_1_time, mz_1_time_close, mz_1_s_3, i_mz_1_s_t_ln_color, i_mz_1_ln_style, i_mz_1_ln_width)\n        array.push(mz_1_s_3_ln_arr, mz_1_s_3_ln)\n//    if i_mz_1_sr_3_show \n//        mz_1_r_3_bx = draw_box(mz_1_time, mz_1_time_close, mz_1_r_3_top, mz_1_r_3_bot, color.new(i_mz_1_r_ln_color, i_mz_bx_transp), 1, i_mz_bx_style, str.tostring(math.round_to_mintick(mz_1_r_3)) + '\\n' + '\\n', i_mz_bx_txt_size, i_mz_1_r_ln_color, i_mz_bx_txt_align)\n//        array.push(mz_1_r_3_bx_arr, mz_1_r_3_bx)\n//       mz_1_s_3_bx = draw_box(mz_1_time, mz_1_time_close, mz_1_s_3_top, mz_1_s_3_bot, color.new(i_mz_1_s_ln_color, i_mz_bx_transp), 1, i_mz_bx_style, '\\n' + str.tostring(math.round_to_mintick(mz_1_s_3)), i_mz_bx_txt_size, i_mz_1_s_ln_color, i_mz_bx_txt_align)\n//        array.push(mz_1_s_3_bx_arr, mz_1_s_3_bx)\n\n    if i_mz_1_sr_4_show\n        mz_1_r_4_ln = draw_line(mz_1_time, mz_1_time_close, mz_1_r_4, i_mz_1_r_t_ln_color, i_mz_1_ln_style, i_mz_1_ln_width)\n        array.push(mz_1_r_4_ln_arr, mz_1_r_4_ln)\n        mz_1_s_4_ln = draw_line(mz_1_time, mz_1_time_close, mz_1_s_4, i_mz_1_s_t_ln_color, i_mz_1_ln_style, i_mz_1_ln_width)\n        array.push(mz_1_s_4_ln_arr, mz_1_s_4_ln)\n\n        mz_1_r_4_bx = draw_box(mz_1_time, mz_1_time_close, mz_1_r_4_top, mz_1_r_4_bot, color.new(i_mz_1_r_t_ln_color, i_mz_bx_transp), 1, i_mz_bx_style, str.tostring(math.round_to_mintick(mz_1_r_4)) + '\\n' + '\\n', i_mz_bx_txt_size, i_mz_1_r_t_ln_color, i_mz_bx_txt_align)\n        array.push(mz_1_r_4_bx_arr, mz_1_r_4_bx)\n```\n\n----------------------------------------\n\nTITLE: Table Creation and Cell Formatting in PineScript\nDESCRIPTION: Creates a table for displaying screener results with customizable properties. Defines functions for formatting title cells and regular cells with appropriate colors and alignment settings.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_24\n\nLANGUAGE: pinescript\nCODE:\n```\n// Plot Table\n// Create table with specified properties\nvar table scr_tbl = table.new(position=i_scr_tbl_position, columns=5, rows=102, border_width=1, force_overlay=true)\n\n// Function to populate cells in the table\nscr_cell_title(col, row, txt) => \n    table.cell(scr_tbl, col, row, text = txt, text_color = i_neu_color, text_halign=text.align_center, bgcolor=i_neu_dark_color, text_size=i_scr_tbl_text_size)\n\nscr_cell(col, row, txt, _text_color, _bgcolor) => \n    table.cell(scr_tbl, col, row, text = txt, text_color = _text_color, text_halign=text.align_left, bgcolor=_bgcolor, text_size=i_scr_tbl_text_size)\n```\n\n----------------------------------------\n\nTITLE: First Pivot High Low Data Processing in PineScript\nDESCRIPTION: Implements the first pivot high/low detector with multi-timeframe support. It initializes arrays for storing lines and labels, calculates pivot points on the specified timeframe, and draws them on the chart when conditions are met.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_20\n\nLANGUAGE: pine\nCODE:\n```\n// Arrays\nvar phl_1_ln_arr = array.new_line(i_phl_1_showlast)\nvar phl_1_lbl_arr = array.new_label(i_phl_1_showlast)\n\n// Get Data\nphl_1_bars_htf = int(f_tfResInMinutes(i_phl_1_tf) / res_in_minutes)\nphl_1_bars_offset = int(i_phl_1_left * phl_1_bars_htf)\n\nphl_1_ph = ta.pivothigh(_high, i_phl_1_left, i_phl_1_right)\nphl_1_pl = ta.pivotlow(_low, i_phl_1_left, i_phl_1_right)\n\nphl_1_ph_htf = request.security(syminfo.tickerid, i_phl_1_tf, phl_1_ph)\nphl_1_pl_htf = request.security(syminfo.tickerid, i_phl_1_tf, phl_1_pl)\nphl_1_ph_new = na(phl_1_ph_htf[1]) and not na(phl_1_ph_htf)\nphl_1_pl_new = na(phl_1_pl_htf[1]) and not na(phl_1_pl_htf)\n\nphl_1_ph_offset = f_offsetToP(_high, phl_1_ph_htf, math.min(i_max_bars_back, math.max(30, phl_1_bars_offset + phl_1_bars_htf + 1)))\nphl_1_pl_offset = f_offsetToP(_low, phl_1_pl_htf, math.min(i_max_bars_back, math.max(30, phl_1_bars_offset + phl_1_bars_htf + 1)))\n\n// Draw\nif i_phl_1_show and phl_1_bars_offset <= i_max_bars_back\n    f_addLines(i_phl_1_lbl_show, phl_1_ph_htf, phl_1_pl_htf, phl_1_ph_offset, phl_1_pl_offset, phl_1_ph_new, phl_1_pl_new, i_phl_1_h_ln_color, i_phl_1_l_ln_color, i_phl_1_showlast, i_phl_1_ln_width, i_phl_1_ln_stye, phl_1_ln_arr, phl_1_lbl_arr)   \n\nif i_phl_1_show\n    f_extendArray(phl_1_ln_arr, phl_1_lbl_arr, i_phl_1_ln_extend)\n```\n\n----------------------------------------\n\nTITLE: Results Table Creation and Configuration in PineScript\nDESCRIPTION: Creates a table for displaying screener results with specific formatting options. It defines cell formatting functions that control the appearance of data cells based on signal values.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Scanner - ICT Liquidity Sweep Pattern Scanner.txt#2025-04-16_snippet_17\n\nLANGUAGE: pine\nCODE:\n```\n// Plot Table\n// Create table with specified properties\nvar table scr_tbl = table.new(position=i_scr_tbl_position, columns=5, rows=102, border_width=1)\n\n// Function to populate cells in the table\nscr_cell_title(col, row, txt) => \n    table.cell(scr_tbl, col, row, text = txt, text_color = i_neu_color, text_halign=text.align_center, bgcolor=i_neu_dark_color, text_size=i_scr_tbl_text_size)\n\nscr_cell(col, row, txt, _text_color, _bgcolor) => \n    table.cell(scr_tbl, col, row, text = txt, text_color = _text_color, text_halign=text.align_left, bgcolor=_bgcolor, text_size=i_scr_tbl_text_size)\n```\n\n----------------------------------------\n\nTITLE: Initializing ICT External Range Liquidity Indicator in PineScript\nDESCRIPTION: Sets up the indicator with basic parameters including title, overlay, and maximum bars back. It also defines input variables for controlling visibility of different pivot high/low timeframes.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External Range Liquidity/ICT External Range Liquidity Static Multi-timeframe (Swing High and Low).txt#2025-04-16_snippet_0\n\nLANGUAGE: pinescript\nCODE:\n```\n//@version=5\ni_max_bars_back = 4999\nindicator(title='ICT External Range Liquidity Static Multi-timeframe (Swing High and Low)', shorttitle='ICT ERL', overlay=true, max_bars_back=i_max_bars_back, max_lines_count=500, max_labels_count=500)\n\n//____________________________ Menu Pivot High Low Start\n\ng_phl_qd = '███████████████ Quick On/Off ███████████████'\nbool i_phl_1_show = input.bool(defval=true, title='Pivot High Low 1', group=g_phl_qd)\nbool i_phl_2_show = input.bool(defval=true, title='Pivot High Low 2', group=g_phl_qd)\nbool i_phl_3_show = input.bool(defval=true, title='Pivot High Low 3', group=g_phl_qd)\nbool i_phl_eq_show = input.bool(defval=true, title='Equal Pivot High Low', group=g_phl_qd)\n```\n\n----------------------------------------\n\nTITLE: Drawing Visual Indicators with Historical Data in PineScript\nDESCRIPTION: This code segment creates visual representations of historical technical indicators data over a specified display length. It draws lines and boxes to display Stochastic, MACD, and Volume data for multiple bars, with various customization options for visual appearance.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_18\n\nLANGUAGE: pine\nCODE:\n```\n    for barIndex = 0 to i_display_len - 1\n        if array.size(a_lines) < 500\n\n            if i_stoc_display\n                array.push(a_lines, line.new(bar_index[barIndex], priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 + stoc_k[barIndex]     / oscHighest * priceChangeRate * i_stoc_height), \n                                         bar_index[barIndex + 1], priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 + stoc_k[barIndex + 1] / oscHighest * priceChangeRate * i_stoc_height), xloc.bar_index, extend.none, i_indicator_color   , line.style_solid, 1))\n                array.push(a_lines, line.new(bar_index[barIndex], priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 + stoc_d[barIndex]     / oscHighest * priceChangeRate * i_stoc_height), \n                                         bar_index[barIndex + 1], priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 + stoc_d[barIndex + 1] / oscHighest * priceChangeRate * i_stoc_height), xloc.bar_index, extend.none, i_signal_color   , line.style_solid, 1))\n\n            if i_macd_display\n                array.push(a_lines, line.new(bar_index[barIndex], priceLowest * (1 - priceChangeRate * i_macd_voffset) * (1 + macdLine[barIndex]       / macdHighest * priceChangeRate * i_macd_height ), \n                                         bar_index[barIndex + 1], priceLowest * (1 - priceChangeRate * i_macd_voffset) * (1 + macdLine[barIndex + 1]   / macdHighest * priceChangeRate * i_macd_height ), xloc.bar_index, extend.none, i_indicator_color   , line.style_solid, 1))\n                array.push(a_lines, line.new(bar_index[barIndex], priceLowest * (1 - priceChangeRate * i_macd_voffset) * (1 + signalLine[barIndex]     / macdHighest * priceChangeRate * i_macd_height ), \n                                         bar_index[barIndex + 1], priceLowest * (1 - priceChangeRate * i_macd_voffset) * (1 + signalLine[barIndex + 1] / macdHighest * priceChangeRate * i_macd_height ), xloc.bar_index, extend.none, i_signal_color   , line.style_solid, 1))\n\n                array.push(a_hist , box.new (bar_index[barIndex], priceLowest * (1 - priceChangeRate * i_macd_voffset), \n                                             bar_index[barIndex], priceLowest * (1 - priceChangeRate * i_macd_voffset) * (1 + histLine[barIndex] / macdHighest * priceChangeRate * i_macd_height), histColor[barIndex], 2))\n\n            if nzVolume\n                if i_vol_type != 'None' \n                    array.push(a_hist , box.new (bar_index[barIndex] + i_vol_hoffset,  priceHighest * (1 + priceChangeRate * i_vol_voffset), \n                                                 bar_index[barIndex] + i_vol_hoffset,  priceHighest * (1 + priceChangeRate * i_vol_voffset) * (1 + nzVolume[barIndex] / volumeHighest * priceChangeRate * i_vol_height), i_vol_type == 'Buying/Selling Volume' ? color.new(i_pos_color, 0) : bullCandle[barIndex] ? color.new(i_pos_color, 0) : color.new(i_neg_color, 0), 2, bgcolor = i_vol_type == 'Buying/Selling Volume' ? color.new(i_pos_color, 0) : bullCandle[barIndex] ? color.new(i_pos_color, 0) : color.new(i_neg_color, 0)))\n                    if i_vol_type == 'Buying/Selling Volume'\n                        array.push(a_hist , box.new (bar_index[barIndex] + i_vol_hoffset,   priceHighest * (1 + priceChangeRate * i_vol_voffset), \n                                                     bar_index[barIndex] + i_vol_hoffset,   priceHighest * (1 + priceChangeRate * i_vol_voffset) * (1 + S[barIndex]            / volumeHighest * priceChangeRate * i_vol_height), color.new(i_neg_color, 0), 2, bgcolor = color.new(i_neg_color, 0)))\n                    // Voumme MA\n                    if i_vol_display\n                        array.push(a_lines, line.new(bar_index[barIndex] + i_vol_hoffset,     priceHighest * (1 + priceChangeRate * i_vol_voffset) * (1 + nzVolume[barIndex]     / volumeHighest * priceChangeRate * i_vol_height / volumeMARate[barIndex]), \n                                                   bar_index[barIndex + 1] + i_vol_hoffset, priceHighest * (1 + priceChangeRate * i_vol_voffset) * (1 + nzVolume[barIndex + 1] / volumeHighest * priceChangeRate * i_vol_height / volumeMARate[barIndex + 1]), xloc.bar_index, extend.none, i_neu_color, line.style_solid, 1))\n```\n\n----------------------------------------\n\nTITLE: Calculating and Fetching Magnetic Zone 3 Data in PineScript\nDESCRIPTION: Retrieves data for the third magnetic zone timeframe, including previous high/low values, pivot points, and support/resistance levels 1 and 2. Creates buffer zones around these levels for visualization.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_7\n\nLANGUAGE: pine\nCODE:\n```\n/// MZ 3\n// PDHL\nmz_3_ph = data(i_mz_3_tf, high[1])\nmz_3_pl = data(i_mz_3_tf, low[1])\n\n// Pivot\nmz_3_p = data(i_mz_3_tf, hl2[1])\n\n// MZ 3 SR\nmz_3_r_1 = data(i_mz_3_tf, r_1)\nmz_3_r_2 = data(i_mz_3_tf, r_2)\n\nmz_3_s_1 = data(i_mz_3_tf, s_1)\nmz_3_s_2 = data(i_mz_3_tf, s_2)\n\n// Buffer\n[mz_3_r_1_top, mz_3_r_1_bot] = buffer_zone(mz_3_r_1, mz_3_r_1, mz_3_s_1)\n[mz_3_s_1_top, mz_3_s_1_bot] = buffer_zone(mz_3_s_1, mz_3_r_1, mz_3_s_1)\n[mz_3_r_2_top, mz_3_r_2_bot] = buffer_zone(mz_3_r_2, mz_3_r_2, mz_3_r_1)\n[mz_3_s_2_top, mz_3_s_2_bot] = buffer_zone(mz_3_s_2, mz_3_s_1, mz_3_s_2)\n```\n\n----------------------------------------\n\nTITLE: Matrix Data Structure and Row Addition Functions in PineScript\nDESCRIPTION: Sets up a matrix data structure to store screener results and provides functions to add new rows. The matrix stores symbol name, timestamp, indicator type, price, and signal direction for each detected pattern.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Equal Highs and Lows/ICT Equal Highs and Lows with Screener.txt#2025-04-16_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\n// Matrix setup\nvar matrix = matrix.new<string>(0, 5, na)\n\n// Function to add rows to the matrix\nmtxFun(symbol, _time, indicator, price, signal) =>\n    matrix.add_row(matrix, 0, array.from(symbol, _time, indicator, price, signal))\n```\n\n----------------------------------------\n\nTITLE: Populating Screener Table with Momentum Investing Signals in PineScript\nDESCRIPTION: This code snippet populates a screener table with momentum investing signals. It checks if it's the last bar, clears existing data, sets up table headers, and fills the table with matrix data. The cell colors are determined based on the signal value.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup with Scanner.txt#2025-04-16_snippet_15\n\nLANGUAGE: pine\nCODE:\n```\n// Check if it's the last bar\nif barstate.islast\n    // Clear existing data in the table\n    table.clear(scr_tbl, 0, 0, 2, 101)\n\n    scr_cell_title(0, 0, 'Momentum Investing')\n    table.merge_cells(table_id=scr_tbl, start_column=0, start_row=0, end_column=2, end_row=0)\n    scr_cell_title(0, 1, \"Symbol\")\n    scr_cell_title(1, 1, \"Time\")\n    scr_cell_title(2, 1, \"Price\")\n\n    j = 2\n    // Populate table with matrix data\n    if matrix.rows(matrix) > 0\n        for i = 0 to matrix.rows(matrix) - 1\n            // Determine color based on the signal\n            col = matrix.get(matrix, i, 3) ==  \"1\" ? i_pos_col :\n                  matrix.get(matrix, i, 3) == \"-1\" ? i_neg_col : i_neu_col\n\n            // Populate cells in the table\n            scr_cell(0, j, matrix.get(matrix, i, 0), col)\n            scr_cell(1, j, matrix.get(matrix, i, 1), col)\n            scr_cell(2, j, matrix.get(matrix, i, 2), col)\n\n            j += 1\n```\n\n----------------------------------------\n\nTITLE: Plotting Trading Signals and Candle Colors in PineScript\nDESCRIPTION: This code plots trading signals as shapes on the chart and colors candles based on the detected conditions. It uses conditional logic to determine when to display signals.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Scanner] ICT Liquidity Void Fill Scanner.txt#2025-04-16_snippet_8\n\nLANGUAGE: pine\nCODE:\n```\n// Plot\nplotshape(series = i_scr_show_short and short_ret_signal ? 3 : na, title = 'Short Signal', style = shape.triangledown, location = location.abovebar, color = i_neg_light_color, size = size.tiny, force_overlay = true)\nplotshape(series = i_scr_show_long and long_ret_signal ? 3 : na, title = 'Long Signal', style = shape.triangleup, location = location.belowbar, color = i_pos_light_color, size = size.tiny, force_overlay = true)\nbarcolor(color = i_scr_show_short and short_cont_1 ? i_neg_light_color : i_scr_show_long and long_cont_1 ? i_pos_light_color : na, title = '80% Candle')\n```\n\n----------------------------------------\n\nTITLE: Implementing Additional Filters for FVG Analysis in PineScript\nDESCRIPTION: Defines various filters including percentage change, volume, ATR, body size, and time-based filters. These are used to refine FVG detection and analysis.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_12\n\nLANGUAGE: pine\nCODE:\n```\nbool pchg_above_filter = true\nbool pchg_below_filter = true\nif i_pchg_filter\n    pchg_above_filter := cum_pchg > i_pchg_above_below\n    pchg_below_filter := cum_pchg < -i_pchg_above_below\n    pchg_below_filter\n\nbool vol_filter = true\nif i_vol_filter\n    vol_filter := current_cum_vol >= i_vol_above\n    vol_filter\n\nbool vol_pchg_filter = true\nif i_vol_pchg_filter\n    vol_pchg_filter := cum_vol_pchg >= i_vol_pchg_above\n    vol_pchg_filter\n\nbool atr_filter = true\nif i_atr_filter\n    atr_filter := high - low > ta.atr(i_atr_length) * i_atr_multi\n    atr_filter\n\nbool body_filter = true\nif i_body_filter\n    body_filter := math.abs(close - open) / (high - low) >= i_body_percent\n    body_filter\n\nbool body_size_filter = true\nif i_body_size_filter\n    body_size_filter := math.abs(close - open) / (high - low) >= i_body_percent and high - low >= (high[1] - low[1]) * i_body_size_multiplier\n    body_size_filter\n\nbool volume_filter = true\nif i_volume_filter\n    volume_filter := volume > ta.sma(volume, i_vol_sma_length)\n    volume_filter\n\naverage_volume = ta.sma(volume, i_rel_vol_avg_vol_len)\nrelative_volume = volume / average_volume[1]\nrel_vol_sma_multiplier = ta.sma(relative_volume, i_rel_vol_avg_vol_len) * i_rel_vol_avg_vol_multi\n\nbool rel_vol_filter = true\nif i_rel_vol_filter\n    rel_vol_filter := relative_volume > rel_vol_sma_multiplier\n    rel_vol_filter\n\nbool time_filter = true\nif i_time_filter\n    time_filter := (hour > i_hour_1 or hour == i_hour_1 and minute >= i_minute_1) and (hour < i_hour_2 or hour == i_hour_2 and minute < i_minute_2)\n    time_filter\n\nbool date_filter = true\nif i_date_filter\n    date_filter := year == i_year and month == i_month and dayofmonth == i_day\n    date_filter\n```\n\n----------------------------------------\n\nTITLE: Computing Percentage Changes Between Consecutive Pivot Points in PineScript\nDESCRIPTION: Calculates and stores the percentage differences between the two most recent pivot highs and pivot lows. This uses the pchg function and requires at least two pivot points in each array.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_26\n\nLANGUAGE: pinescript\nCODE:\n```\n// Calculate percentage change between the last two pivot highs and lows\nvar float ph_pchg = na\nvar float pl_pchg = na\n\nif array.size(ph_arr) >= 2\n    ph_pchg := pchg(array.get(ph_arr, 0), array.get(ph_arr, 1))\n\nif array.size(pl_arr) >= 2\n    pl_pchg := pchg(array.get(pl_arr, 0), array.get(pl_arr, 1))\n```\n\n----------------------------------------\n\nTITLE: Implementing Cumulative Volume Tracking in Pine Script\nDESCRIPTION: Code for tracking daily cumulative volume and calculating volume percentage changes. It detects new days, maintains running volume totals, and compares current day's volume to previous day's volume to determine percentage change.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Scanner] ICT Liquidity Void Fill Scanner.txt#2025-04-16_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\ncum_vol() =>\n    var float _cum_vol = na\n    _is_new_day = ta.change(time('D')) != 0 ? 1 : 0\n    _cum_vol := bool(_is_new_day) ? volume : na(_cum_vol) ? volume : _cum_vol + volume\n    _cum_vol\n\n// Calculate current and previous day cumulative volumes\nvar float curr_cum_vol = na\nvar float prev_cum_vol = na\n\nif ta.change(time('D')) != 0\n    prev_cum_vol := curr_cum_vol\n    curr_cum_vol := volume\n    curr_cum_vol\nelse\n    curr_cum_vol := curr_cum_vol + volume\n    curr_cum_vol\n\n// Calculate Cumulative Volume Percentage Change\ncum_vol_pchg = (curr_cum_vol - nz(prev_cum_vol, curr_cum_vol)) / nz(prev_cum_vol, curr_cum_vol) * 100\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Table for Trading Information in PineScript\nDESCRIPTION: This snippet creates a data table to display trading information such as price change, volume change, and current volume. It formats the data and applies conditional coloring.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Scanner] ICT Liquidity Void Fill Scanner.txt#2025-04-16_snippet_9\n\nLANGUAGE: pine\nCODE:\n```\n// Plot Table\nvar table tbl_data = table.new(position = i_tbl_data_pos, columns = 2, rows = 4, border_width = 1, force_overlay = true)\n\nif barstate.islast and i_tbl_data_show\n    table.cell(table_id = tbl_data, column = 0, row = 0, text = '%Chg', text_color = i_neu_color, text_halign = text.align_left, bgcolor = bgcolor_1, text_size = i_tbl_data_txt_size)\n    table.cell(table_id = tbl_data, column = 1, row = 0, text = day_pchg_str, text_color = pchg_col, text_halign = text.align_right, bgcolor = bgcolor_1, text_size = i_tbl_data_txt_size)\n\n    table.cell(table_id = tbl_data, column = 0, row = 1, text = 'Vol %Chg', text_color = i_neu_color, text_halign = text.align_left, bgcolor = bgcolor_2, text_size = i_tbl_data_txt_size)\n    table.cell(table_id = tbl_data, column = 1, row = 1, text = volume_pchg_str, text_color = vol_pchg_col, text_halign = text.align_right, bgcolor = bgcolor_2, text_size = i_tbl_data_txt_size)\n\n    table.cell(table_id = tbl_data, column = 0, row = 2, text = 'Vol', text_color = i_neu_color, text_halign = text.align_left, bgcolor = bgcolor_1, text_size = i_tbl_data_txt_size)\n    table.cell(table_id = tbl_data, column = 1, row = 2, text = day_volume_str, text_color = vol_pchg_col, text_halign = text.align_right, bgcolor = bgcolor_1, text_size = i_tbl_data_txt_size)\n\n    table.cell(table_id = tbl_data, column = 0, row = 3, text = 'PD Vol', text_color = i_neu_color, text_halign = text.align_left, bgcolor = bgcolor_2, text_size = i_tbl_data_txt_size)\n    table.cell(table_id = tbl_data, column = 1, row = 3, text = prev_day_volume_str, text_color = prev_vol_pchg_col, text_halign = text.align_right, bgcolor = bgcolor_2, text_size = i_tbl_data_txt_size)\n```\n\n----------------------------------------\n\nTITLE: Configuring Screening Method for Pattern Detection in PineScript\nDESCRIPTION: Logic to select a screening method based on user input. The script offers three swing sweep detection methods (Previous 1, 2, or 3 Swing Sweep), each with corresponding long and short conditions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Scanner - ICT Liquidity Sweep Pattern Scanner.txt#2025-04-16_snippet_11\n\nLANGUAGE: pine\nCODE:\n```\n// Choose Screening Method\nshort_cond = \n i_scr_choose == 'Prev 1 Swing Sweep' ? short_condition_1 :\n i_scr_choose == 'Prev 2 Swing Sweep' ? short_condition_2 : short_condition_3\n\nlong_cond =\n i_scr_choose == 'Prev 1 Swing Sweep' ? long_condition_1 :\n i_scr_choose == 'Prev 2 Swing Sweep' ? long_condition_2 : long_condition_3\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cumulative Volume Calculation in Pine Script\nDESCRIPTION: This function calculates daily cumulative volume by tracking volume changes across days. It maintains variables for the current and previous day's cumulative volumes, and calculates percentage change between them to provide volume analysis metrics.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Scanner - ICT Liquidity Sweep Pattern Scanner.txt#2025-04-16_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\ncumulative_volume() =>\n    var float _cum_vol = na\n    _is_new_day = ta.change(time('D')) != 0 ? 1 : 0\n    _cum_vol := _is_new_day ? volume : (na(_cum_vol) ? volume : (_cum_vol + volume))\n    _cum_vol\n\n// Calculate current and previous day cumulative volumes\nvar float current_cum_vol = na\nvar float prev_cum_vol = na\n\nif ta.change(time('D')) != 0\n    prev_cum_vol := current_cum_vol\n    current_cum_vol := volume\nelse\n    current_cum_vol += volume\n\n// Calculate Cumulative Volume Percentage Change\ncum_vol_pchg = (current_cum_vol - nz(prev_cum_vol, current_cum_vol)) / nz(prev_cum_vol, current_cum_vol) * 100\n```\n\n----------------------------------------\n\nTITLE: Computing and Visualizing Pivot High Low 2 in PineScript\nDESCRIPTION: This snippet identifies pivot high and low points using a higher timeframe, calculates their positions, and displays them on the chart. It utilizes a pivothigh/pivotlow calculation, security requests to access higher timeframes, and custom drawing functions for visualization.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External Range Liquidity/ICT External Range Liquidity Static Multi-timeframe (Swing High and Low).txt#2025-04-16_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\nfloat phl_2_pl = ta.pivotlow(_low, i_phl_2_left, i_phl_2_right)\n\nphl_2_ph_htf = request.security(syminfo.tickerid, i_phl_2_tf, phl_2_ph)\nphl_2_pl_htf = request.security(syminfo.tickerid, i_phl_2_tf, phl_2_pl)\nphl_2_ph_new = na(phl_2_ph_htf[1]) and not na(phl_2_ph_htf)\nphl_2_pl_new = na(phl_2_pl_htf[1]) and not na(phl_2_pl_htf)\n\nphl_2_ph_offset = f_offsetToP(_high, phl_2_ph_htf, math.min(i_max_bars_back, math.max(30, phl_2_bars_offset + phl_2_bars_htf + 1)))\nphl_2_pl_offset = f_offsetToP(_low, phl_2_pl_htf, math.min(i_max_bars_back, math.max(30, phl_2_bars_offset + phl_2_bars_htf + 1)))\n\n// Draw\nif i_phl_2_show and phl_2_bars_offset <= i_max_bars_back\n    f_addLines(i_phl_2_lbl_show, phl_2_ph_htf, phl_2_pl_htf, phl_2_ph_offset, phl_2_pl_offset, phl_2_ph_new, phl_2_pl_new, i_phl_2_h_ln_color, i_phl_2_l_ln_color, i_phl_2_showlast, i_phl_2_ln_width, i_phl_2_ln_stye, phl_2_ln_arr, phl_2_lbl_arr)   \n\nif i_phl_2_show\n    f_extendArray(phl_2_ln_arr, phl_2_lbl_arr, i_phl_2_ln_extend)\n```\n\n----------------------------------------\n\nTITLE: Creating Visual Boxes for Equal Pivot Levels in PineScript\nDESCRIPTION: Draws boxes to highlight areas where pivot highs or lows are considered equal based on percentage threshold settings. Boxes are positioned between consecutive pivot points that meet the equality criteria.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_27\n\nLANGUAGE: pinescript\nCODE:\n```\n// Draw Equals Box\nvar levelBoxes_equal=array.new_box()\n\nif i_phl_eq_show and ph and ph_pchg < i_phl_eq_percent\n    ph_box = box.new(left=ph_bi_1 - i_phl_eq_right, top=ph_price_1, right=ph_bi_0 - i_phl_eq_right, bottom=ph_price_0, border_color=color.new(i_phl_eq_h_ln_color, i_phl_eq_transp), bgcolor=color.new(i_phl_eq_h_ln_color, i_phl_eq_transp))\n    array.push(levelBoxes_equal, ph_box)\nif i_phl_eq_show and pl and pl_pchg < i_phl_eq_percent\n    pl_box = box.new(left=pl_bi_1 - i_phl_eq_right, top=pl_price_1, right=pl_bi_0 - i_phl_eq_right, bottom=pl_price_0, border_color=color.new(i_phl_eq_l_ln_color, i_phl_eq_transp), bgcolor=color.new(i_phl_eq_l_ln_color, i_phl_eq_transp))\n    array.push(levelBoxes_equal, pl_box)\n```\n\n----------------------------------------\n\nTITLE: Implementing Screener Function for Data Collection in PineScript\nDESCRIPTION: A function that collects trading data for a given symbol using request.security, formats the values, and adds them to the matrix when a valid signal is detected at the current time.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_24\n\nLANGUAGE: PineScript\nCODE:\n```\n// Screener function to collect data\nscreener(s) =>\n    sym = ticker.modify(s, syminfo.session)\n    [_time, gap_percent, _cum_pchg, _cum_vol_pchg, signal] = request.security(sym, timeframe.period, indicator_calculation())\n\n    // Check if the signal is not na and the time matches\n    if not na(signal) and _time == time\n        symbolName = symbol(s)\n        formattedTime = format_time(_time)\n        str_gap_percent = str.tostring(gap_percent, '#.##')\n        str_cum_pchg = str.tostring(_cum_pchg, '#.##')\n        str_cum_vol_pchg = str.tostring(_cum_vol_pchg, '#.##')\n        strSignal = str.tostring(signal)\n\n        // Add data to the matrix\n        mtxFun(symbolName, formattedTime, str_gap_percent, str_cum_pchg, str_cum_vol_pchg, strSignal)\n```\n\n----------------------------------------\n\nTITLE: Drawing Historical Indicator Lines for MFI, RSI, and CCI\nDESCRIPTION: Loop-based code for drawing indicator lines over a display period. Creates lines connecting values of technical indicators (MFI, RSI, CCI) across multiple bars to form continuous indicator charts overlaid on the price chart.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup with Scanner.txt#2025-04-16_snippet_10\n\nLANGUAGE: pine\nCODE:\n```\n    for barIndex = 0 to i_display_len - 1\n        if array.size(a_lines) < 500\n\n            if i_mfi_display\n                array.push(a_lines, line.new(bar_index[barIndex], priceLowest * (1 - priceChangeRate * i_mfi_voffset) * (1 + mfi[barIndex]     / oscHighest * priceChangeRate * i_mfi_height), \n                                         bar_index[barIndex + 1], priceLowest * (1 - priceChangeRate * i_mfi_voffset) * (1 + mfi[barIndex + 1] / oscHighest * priceChangeRate * i_mfi_height), xloc.bar_index, extend.none, i_indicator_col   , line.style_solid, 1))\n\n            if i_rsi_display\n                array.push(a_lines, line.new(bar_index[barIndex], priceLowest * (1 - priceChangeRate * i_rsi_voffset) * (1 + rsi[barIndex]     / oscHighest * priceChangeRate * i_rsi_height), \n                                         bar_index[barIndex + 1], priceLowest * (1 - priceChangeRate * i_rsi_voffset) * (1 + rsi[barIndex + 1] / oscHighest * priceChangeRate * i_rsi_height), xloc.bar_index, extend.none, i_indicator_col   , line.style_solid, 1))\n                array.push(a_lines, line.new(bar_index[barIndex], priceLowest * (1 - priceChangeRate * i_rsi_voffset) * (1 + rsi_sma[barIndex] / oscHighest * priceChangeRate * i_rsi_height), \n                                         bar_index[barIndex + 1], priceLowest * (1 - priceChangeRate * i_rsi_voffset) * (1 + rsi_sma[barIndex + 1] / oscHighest * priceChangeRate * i_rsi_height), xloc.bar_index, extend.none, i_signal_col   , line.style_solid, 1))\n\n            if i_cci_display\n                array.push(a_lines, line.new(bar_index[barIndex], priceLowest * (1 - priceChangeRate * i_cci_voffset) * (1 + cci[barIndex]     / oscHighest * priceChangeRate * i_cci_height), \n                                         bar_index[barIndex + 1], priceLowest * (1 - priceChangeRate * i_cci_voffset) * (1 + cci[barIndex + 1] / oscHighest * priceChangeRate * i_cci_height), xloc.bar_index, extend.none, i_indicator_col   , line.style_solid, 1))\n                array.push(a_lines, line.new(bar_index[barIndex], priceLowest * (1 - priceChangeRate * i_cci_voffset) * (1 + cci_sma[barIndex] / oscHighest * priceChangeRate * i_cci_height), \n                                         bar_index[barIndex + 1], priceLowest * (1 - priceChangeRate * i_cci_voffset) * (1 + cci_sma[barIndex + 1] / oscHighest * priceChangeRate * i_cci_height), xloc.bar_index, extend.none, i_signal_col   , line.style_solid, 1))\n\n            if nzVolume\n                if i_vol_type != 'None' \n                    array.push(a_hist, box.new (bar_index[barIndex] + i_vol_hoffset,\n```\n\n----------------------------------------\n\nTITLE: Utility Functions for Time Formatting and Symbol Extraction in PineScript\nDESCRIPTION: Provides helper functions for formatting time based on timeframe and extracting symbol names from ticker strings. The format_time function handles both intraday and daily timeframes with appropriate formatting.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Equal Highs and Lows/ICT Equal Highs and Lows with Screener.txt#2025-04-16_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\n// Function to format time\nformat_time(x) =>\n    timezone = syminfo.timezone\n    timeframe.isintraday ? str.format_time(x, \"HH:mm  dd-MM-yyyy\", timezone) : str.format_time(x, \"dd-MM-yyyy\", timezone)\n\n// Function to extract symbol name\nsymbol(s) => \n    array.get(str.split(s, \":\"), 1)\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a Results Table in PineScript\nDESCRIPTION: Builds and populates a table to display the screener results. The implementation creates a configurable table, defines a function for formatting cells, and populates the table with collected data from the matrix on the last bar.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Equal Highs and Lows/ICT Equal Highs and Lows with Screener.txt#2025-04-16_snippet_7\n\nLANGUAGE: pine\nCODE:\n```\n// Plot Table\n// Create table with specified properties\nvar table tbl = table.new(position=i_tbl_position, columns=4, rows=102, border_width=1)\n\n// Function to populate cells in the table\ncell(col, row, txt, color) => \n    table.cell(tbl, col, row, text = txt, text_color = color, text_halign=text.align_left, bgcolor = color.new(color, 90), text_size=i_tbl_text_size)\n\n// Check if it's the last bar\nif barstate.islast\n    // Clear existing data in the table\n    table.clear(tbl, 0, 0, 3, 101)\n\n    // Set headers for the table\n    cell(0, 0, \"Symbol\", i_phl_txt_color)\n    cell(1, 0, \"Time\",   i_phl_txt_color)\n    cell(2, 0, \"Dir\" ,  i_phl_txt_color)\n    cell(3, 0, \"Price\",  i_phl_txt_color)\n\n    j = 1\n    // Populate table with matrix data\n    if matrix.rows(matrix) > 0\n        for i = 0 to matrix.rows(matrix) - 1\n            // Determine color based on the signal\n            col = matrix.get(matrix, i, 4) ==  \"1\" ? i_phl_1_h_ln_color :\n                  matrix.get(matrix, i, 4) == \"-1\" ? i_phl_1_l_ln_color : i_phl_txt_color\n\n            // Populate cells in the table\n            cell(0, j, matrix.get(matrix, i, 0), col)\n            cell(1, j, matrix.get(matrix, i, 1), col)\n            cell(2, j, matrix.get(matrix, i, 2), col)\n            cell(3, j, matrix.get(matrix, i, 3), col)\n\n            j += 1\n```\n\n----------------------------------------\n\nTITLE: Defining Bearish Retracement Conditions in PineScript\nDESCRIPTION: This snippet calculates bearish retracement levels and defines conditions for bearish retracement triggers. It uses zigzag levels and implements a state machine for sequential order.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Market Structure Shift (MSS)/ICT Market Structure Shift (MSS) Screener.txt#2025-04-16_snippet_4\n\nLANGUAGE: pinescript\nCODE:\n```\nfloat bearish_retracement_level = zz_1 - ((zz_1-zz_2)/3)\nfloat bullish_retracement_level = zz_1 + ((zz_2-zz_1)/3)\n\nvar bearish_retracement_price = float(na)\nvar bearish_retracement_bi = float(na)\nif bearish_condition\n    bearish_retracement_price := bearish_retracement_level\n    bearish_retracement_bi := bi_1\n\nbool bearish_retracement_condition = \n ta.crossover(high, bearish_retracement_price) and\n barstate.isconfirmed\n\nvar bear_current_state = 0\nbear_previous_state = nz(bear_current_state[1])\nbear_current_state := bear_previous_state == 2 ? 0 : bear_previous_state\nif bearish_condition and bear_current_state == 0\n    bear_current_state := 1\nif bearish_retracement_condition and bear_current_state == 1\n    bear_current_state := 2\n\nbool bearish_retracement_trigger = bear_current_state == 2 ? true : false\n```\n\n----------------------------------------\n\nTITLE: Implementing Cumulative Percentage Change Calculation in Pine Script\nDESCRIPTION: Defines a function to calculate the daily cumulative percentage change of the closing price. It tracks day changes and accumulates percentage changes to provide a running total for the current day.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_6\n\nLANGUAGE: Pine Script\nCODE:\n```\n// Function to calculate Daily Cumulative Percentage Change of Close Price\ncumulative_percentage_change() =>\n    var float _cum_pct_change = na\n    _is_new_day = ta.change(time('D')) != 0 ? 1 : 0\n    _daily_pct_change = na(close[1]) ? 0 : (close - close[1]) / close[1] * 100\n    _cum_pct_change := _is_new_day ? _daily_pct_change : (na(_cum_pct_change) ? _daily_pct_change : (_cum_pct_change + _daily_pct_change))\n    _cum_pct_change\n\n// Calculate current cumulative percentage change\ncum_pchg = cumulative_percentage_change()\n```\n\n----------------------------------------\n\nTITLE: Plotting Fibonacci Retracement Lines for Bull and Bear Patterns\nDESCRIPTION: Plots Fibonacci retracement levels for both bullish and bearish price movements as step lines on the chart. The display is set to 'none' which suggests these may be used for calculations but not shown directly to the user.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Indicator] ICT Displacement Candles.txt#2025-04-16_snippet_7\n\nLANGUAGE: pine\nCODE:\n```\nplot(series = bearFib, title = 'Bearish Fib Line', color = i_neg_color, style = plot.style_stepline, display = display.none)\nplot(series = bullFib, title = 'Bullish Fib Line', color = i_pos_color, style = plot.style_stepline, display = display.none)\n```\n\n----------------------------------------\n\nTITLE: Finding Point of Control (POC) in Market Profile\nDESCRIPTION: Calculates the Point of Control by identifying the price level with the highest frequency of visits. The POC represents the price level with the most trading activity in the session.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] Market Profile with Screener (Based on [RS]Market Profile by RicardoSantos).txt#2025-04-16_snippet_7\n\nLANGUAGE: pine script\nCODE:\n```\ntpo_sum = 0.0\ncurrent_poc_position = 0.0\ncurrent_poc_value = 0.0\n\nfor _i = 0 to 20 by 1\n    _get_tpo_value = f_get_tpo_count(_i)\n    tpo_sum += _get_tpo_value\n    if _get_tpo_value >= current_poc_value\n        current_poc_position := _i\n        current_poc_value := _get_tpo_value\n        current_poc_value\n\npoc_upper = session_high - tpo_section_range * current_poc_position\npoc_lower = session_high - tpo_section_range * (current_poc_position + 1)\n```\n\n----------------------------------------\n\nTITLE: Table Population with Screener Data in PineScript\nDESCRIPTION: Populates the table with screener data from the matrix on the last bar. It sets up table headers, determines colors based on signal values, and displays symbol information with appropriate formatting.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_25\n\nLANGUAGE: pinescript\nCODE:\n```\n// Check if it's the last bar\nif barstate.islast and i_scr_show_table\n    // Clear existing data in the table\n    table.clear(scr_tbl, 0, 0, 2, 101)\n\n    scr_cell_title(0, 0, i_scr_choose)\n    table.merge_cells(table_id=scr_tbl, start_column=0, start_row=0, end_column=4, end_row=0)\n    scr_cell_title(0, 1, \"Symbol\")\n    scr_cell_title(1, 1, \"Time\")\n    scr_cell_title(2, 1, \"Price\")\n    scr_cell_title(3, 1, \"%Chg\")\n    scr_cell_title(4, 1, \"V %Chg\")\n\n    j = 4\n    // Populate table with matrix data\n    if matrix.rows(matrix) > 0\n        for i = 0 to matrix.rows(matrix) - 1\n            // Determine color based on the signal\n\n            _textcolor = \n             matrix.get(matrix, i, 5) ==  \"1\" ? i_pos_color : \n             matrix.get(matrix, i, 5) == \"-1\" ? i_neg_color : i_neu_color\n\n            _bg_color = \n             matrix.get(matrix, i, 5) ==  \"1\" ? i_pos_dark_color :\n             matrix.get(matrix, i, 5) == \"-1\" ? i_neg_dark_color : i_neu_color\n\n            // Populate cells in the table\n            scr_cell(0, j, matrix.get(matrix, i, 0), _textcolor, _bg_color)\n            scr_cell(1, j, matrix.get(matrix, i, 1), _textcolor, _bg_color)\n            scr_cell(2, j, matrix.get(matrix, i, 2), _textcolor, _bg_color)\n            scr_cell(3, j, matrix.get(matrix, i, 3), _textcolor, _bg_color)\n            scr_cell(4, j, matrix.get(matrix, i, 4), _textcolor, _bg_color)\n\n            j += 1\n```\n\n----------------------------------------\n\nTITLE: Creating Cumulative Percentage Change Function in Pine Script\nDESCRIPTION: Function that calculates daily cumulative percentage change of close price. It detects new days, calculates the daily price change percentage, and maintains a running total that resets each day.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Scanner] ICT Liquidity Void Fill Scanner.txt#2025-04-16_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\ncum_pchg() =>\n    var float _cum_pct_change = na\n    _is_new_day = ta.change(time('D')) != 0 ? 1 : 0\n    _daily_pct_change = na(close[1]) ? 0 : (close - close[1]) / close[1] * 100\n    _cum_pct_change := bool(_is_new_day) ? _daily_pct_change : na(_cum_pct_change) ? _daily_pct_change : _cum_pct_change + _daily_pct_change\n    _cum_pct_change\n\n// Calculate current cumulative percentage change\ncum_pchg = cum_pchg()\n```\n\n----------------------------------------\n\nTITLE: Creating Chart Overlays in PineScript\nDESCRIPTION: Implements additional chart overlays including volume analysis and custom drawing functions. This section enhances the visual representation of the trading signals and market conditions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup.txt#2025-04-16_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\n//_____________________________ Overlay Charts Start \n\n// Acknowledgement & Reference\n// Trader: 'dgtrd'\n// Indicator Title: 'Technical Analyst by DGT'\n// Indicator Link: 'https://www.tradingview.com/script/r2kuEi0l-Technical-Analyst-by-DGT/'\n\n// Functions  ----------------------------------------------------------------------------------- //\n\nf_drawLabelX(_x, _y, _text, _xloc, _yloc, _color, _style, _textcolor, _size, _textalign, _tooltip) =>\n    var id = label.new(_x, _y, _text, _xloc, _yloc, _color, _style, _textcolor, _size, _textalign, _tooltip)\n    label.set_text(id, _text)\n    label.set_tooltip(id, _tooltip)\n    label.set_xy(id, _x, _y)\n    label.set_textcolor(id, _textcolor)\n\n// -Calculations ================================================================================ //\n\nsource   = close\nnzVolume = nz(volume)\n\n//------------------------------------------------------------------------------\n// Volume\n\nB = nzVolume * (close - low) / (high - low)\nS = nzVolume * (high - close) / (high - low)\n\n// Draw Charts\nvar a_lines       = array.new_line()\nvar a_hist        = array.new_box()\n\npriceHighest      = ta.highest(high, i_display_len)\npriceLowest       = ta.lowest (low , i_display_len)\npriceChangeRate   = (priceHighest - priceLowest) / priceHighest\n\noscHighest        = 100\n\nvolumeMARate      = nzVolume / vol_sma\nvolumeHighest     = ta.highest(nzVolume, i_display_len)\nbullCandle        = close > open\n\nif barstate.islast \n    if array.size(a_lines) > 0\n        for i = 1 to array.size(a_lines)\n            // Additional implementation details\n```\n\n----------------------------------------\n\nTITLE: Drawing MZ 2 Support and Resistance Elements in PineScript\nDESCRIPTION: Conditional code that draws lines and boxes for MZ 2 timeframe when the timeframe changes. It creates visual elements for price levels and support/resistance zones with user-defined settings.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_15\n\nLANGUAGE: pine\nCODE:\n```\nif(timeframe.change(i_mz_2_tf))\n    if i_mz_2_pdhl_show\n        mz_2_ph_ln = draw_line(mz_2_time, mz_2_time_close, mz_2_ph, i_mz_2_sub_color, i_mz_2_ln_style, i_mz_2_ln_width)\n        array.push(mz_2_ph_ln_arr, mz_2_ph_ln)\n        mz_2_pl_ln = draw_line(mz_2_time, mz_2_time_close, mz_2_pl, i_mz_2_sub_color, i_mz_2_ln_style, i_mz_2_ln_width)\n        array.push(mz_2_pl_ln_arr, mz_2_pl_ln)\n\n    if i_mz_2_p_show\n        mz_2_p_ln = draw_line(mz_2_time, mz_2_time_close, mz_2_p, i_mz_2_sub_color, i_mz_2_ln_style, i_mz_2_ln_width)\n        array.push(mz_2_p_ln_arr, mz_2_p_ln)\n\n    if i_mz_2_sr_1_show\n        mz_2_r_1_ln = draw_line(mz_2_time, mz_2_time_close, mz_2_r_1, i_mz_2_sub_color, i_mz_2_ln_style, i_mz_2_ln_width)\n        array.push(mz_2_r_1_ln_arr, mz_2_r_1_ln)\n        mz_2_s_1_ln = draw_line(mz_2_time, mz_2_time_close, mz_2_s_1, i_mz_2_sub_color, i_mz_2_ln_style, i_mz_2_ln_width)\n        array.push(mz_2_s_1_ln_arr, mz_2_s_1_ln)\n\n        mz_2_r_bx = draw_box(mz_2_time, mz_2_time_close, mz_2_r_1_top, mz_2_r_1_bot, color.new(i_mz_2_sub_color, i_mz_bx_transp + 10), 1, i_mz_bx_style, str.tostring(math.round_to_mintick(mz_2_r_1)) + ' : ' + str.tostring(i_mz_2_tf) + '\\n' + '\\n', i_mz_bx_txt_size, i_mz_2_sub_color, i_mz_bx_txt_align)\n        array.push(mz_2_r_1_bx_arr, mz_2_r_bx)\n        mz_2_s_bx = draw_box(mz_2_time, mz_2_time_close, mz_2_s_1_top, mz_2_s_1_bot, color.new(i_mz_2_sub_color, i_mz_bx_transp + 10), 1, i_mz_bx_style, '\\n' + str.tostring(math.round_to_mintick(mz_2_s_1)) + ' : ' + str.tostring(i_mz_2_tf), i_mz_bx_txt_size, i_mz_2_sub_color, i_mz_bx_txt_align)\n        array.push(mz_2_s_1_bx_arr, mz_2_s_bx)\n\n        mz_2_r_1_s_1_bx = draw_box(mz_2_time, mz_2_time_close, mz_2_r_1_top, mz_2_s_1_bot, color.new(i_mz_2_sub_color, i_mz_bx_transp), 1, i_mz_bx_style, '', i_mz_bx_txt_size, i_mz_2_sub_color, i_mz_bx_txt_align)\n        array.push(mz_2_r_1_s_1_bx_arr, mz_2_r_1_s_1_bx)\n\n    if i_mz_2_sr_2_show\n        mz_2_r_2_ln = draw_line(mz_2_time, mz_2_time_close, mz_2_r_2, i_mz_2_s_ln_color, i_mz_2_ln_style, i_mz_2_ln_width)\n        array.push(mz_2_r_2_ln_arr, mz_2_r_2_ln)\n        mz_2_s_2_ln = draw_line(mz_2_time, mz_2_time_close, mz_2_s_2, i_mz_2_r_ln_color, i_mz_2_ln_style, i_mz_2_ln_width)\n        array.push(mz_2_s_2_ln_arr, mz_2_s_2_ln)\n\n        mz_2_r_2_bx = draw_box(mz_2_time, mz_2_time_close, mz_2_r_2_top, mz_2_r_2_bot, color.new(i_mz_2_s_ln_color, i_mz_bx_transp), 1, i_mz_bx_style, str.tostring(math.round_to_mintick(mz_2_r_2)) + '\\n' + '\\n', i_mz_bx_txt_size, i_mz_2_s_ln_color, i_mz_bx_txt_align)\n        array.push(mz_2_r_2_bx_arr, mz_2_r_2_bx)\n        mz_2_s_2_bx = draw_box(mz_2_time, mz_2_time_close, mz_2_s_2_top, mz_2_s_2_bot, color.new(i_mz_2_r_ln_color, i_mz_bx_transp), 1, i_mz_bx_style, '\\n' + str.tostring(math.round_to_mintick(mz_2_s_2)), i_mz_bx_txt_size, i_mz_2_r_ln_color, i_mz_bx_txt_align)\n        array.push(mz_2_s_2_bx_arr, mz_2_s_2_bx)\n```\n\n----------------------------------------\n\nTITLE: Adding Imbalance to FVG Structure in PineScript\nDESCRIPTION: Method to add a newly discovered imbalance (Fair Value Gap) to the ImbalanceStructure. It creates a new Imbalance object, sets its properties, and adds it to the structure while maintaining a maximum of 100 imbalances by removing old ones.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_5\n\nLANGUAGE: pine\nCODE:\n```\nmethod AddImbalance(ImbalanceStructure IS, float o, float c, int o_time) =>\n    Imbalance imb = Imbalance.new()\n    imb.open_time           := o_time\n    imb.open                := o\n    imb.middle              := (o+c)/2\n    imb.close               := c\n\n    IS.imbalance.unshift(imb)\n    //IS.AddZone(imb)\n\n    if IS.imbalance.size() > 100 //IS.settings.max_count\n        temp = IS.imbalance.pop()\n        if not na(temp.box)\n            box.delete(temp.box)\n            line.delete(temp.line_middle)\n            label.delete(temp.lbl)\n    IS\n```\n\n----------------------------------------\n\nTITLE: Calculating Stochastic Oscillator in PineScript\nDESCRIPTION: This snippet computes the Stochastic Oscillator using the ta.stoch() function and smooths the results with Simple Moving Averages (SMA).\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_9\n\nLANGUAGE: pinescript\nCODE:\n```\nfloat stoc_k = ta.sma(ta.stoch(close, high, low, i_stoc_k_len), i_stoc_k_smooth)\nfloat stoc_d = ta.sma(stoc_k, i_stoc_d_smooth)\n```\n\n----------------------------------------\n\nTITLE: Matrix and Table Management Functions\nDESCRIPTION: Functions for managing the matrix data structure and creating/updating the scanner table display.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Scanner] ICT Displacement Candles.txt#2025-04-16_snippet_13\n\nLANGUAGE: pinescript\nCODE:\n```\nrows_to_matix(symbol, _time, bars, _range, pchg, signal) =>\n    matrix.add_row(matrix, 0, array.from(symbol, _time, bars, _range, pchg, signal))\n\nscan(new_sym_arr) =>\n    for i = 0 to array.size(new_sym_arr) - 1 by 1\n        sym = ticker.modify(array.get(new_sym_arr, i), syminfo.session)\n        [_time, bars, _range, pchg, signal] = request.security(sym, timeframe.period, indicator_calculation())\n        if not na(signal) and _time == time\n            rows_to_matix(\n                 ticker_extract(array.get(new_sym_arr, i)), \n                 format_time(_time), \n                 str.tostring(bars), \n                 str.tostring(_range, '#.##'), \n                 str.tostring(pchg, '#.##'), \n                 str.tostring(signal))\n```\n\n----------------------------------------\n\nTITLE: Calculating Performance Metrics in Pine Script\nDESCRIPTION: This snippet calculates and displays performance metrics such as price change, volume change, and current volume in a table format.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Indicator] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_3\n\nLANGUAGE: Pine Script\nCODE:\n```\ncell_perform(1, 0, str.tostring(cum_pchg, '#.##') + ' %', pchg_col, text.align_right)\ncell_perform(0, 1, 'Vol %Chg', chart.fg_color, text.align_left)\ncell_perform(1, 1, str.tostring(cum_vol_pchg, '#.##') + ' %', vol_pchg_col, text.align_right)\ncell_perform(0, 2, 'Vol', chart.fg_color, text.align_left)\ncell_perform(1, 2, str.tostring(curr_cum_vol / 100000, '#.##') + ' L', vol_pchg_col, text.align_right)\ncell_perform(0, 3, 'PD Vol', chart.fg_color, text.align_left)\ncell_perform(1, 3, str.tostring(prev_vol_safe / 100000, '#.##') + ' L', prev_vol_pchg_col, text.align_right)\n```\n\n----------------------------------------\n\nTITLE: Parsing Symbol Lists for TradingView Screener in PineScript\nDESCRIPTION: This section implements a CSV parser for symbol lists used in a screener. It splits a comma-separated string of symbols, trims whitespace, and assigns them to variables that can be used for multi-symbol analysis in TradingView, with support for up to 40 symbols.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Scanner] ICT Displacement Candles.txt#2025-04-16_snippet_10\n\nLANGUAGE: pine\nCODE:\n```\n//___________________________ Get Symbols List for Screener Start\n\n// Acknowledgement & Reference\n// Trader: 'allanster'\n// Indicator Title: 'How To Input CSV List Of Symbol Data Used For Screener'\n// Indicator Link: 'https://www.tradingview.com/script/KfqHqHUH-How-To-Input-CSV-List-Of-Symbol-Data-Used-For-Screener/'\n\n// Feed Function\nfeed(input_string) =>\n    if na(input_string) or str.length(input_string) == 0\n        [string(na), string(na)]\n    else\n        result = str.split(input_string, ',')\n        first_item = ''\n        for i = 0 to array.size(result) - 1 by 1\n            trimmed = str.trim(array.get(result, i))\n            if trimmed != ''\n                first_item := trimmed\n                break\n        remaining = str.replace(input_string, first_item + ',', '', 1)\n        [first_item, remaining]\n\n// Flexible Symbol Extraction\nsym_split_arr = str.split(i_symbols, ',')\nnew_sym_arr = array.new_string(array.size(sym_split_arr), na)\nfor i = 0 to array.size(sym_split_arr) - 1 by 1\n    trimmed = str.trim(array.get(sym_split_arr, i))\n    if trimmed != ''\n        array.set(new_sym_arr, i, trimmed)\n\n// Assign symbols dynamically\nt_01 = array.size(new_sym_arr) > 0 ? array.get(new_sym_arr, 0) : na\nt_02 = array.size(new_sym_arr) > 1 ? array.get(new_sym_arr, 1) : na\nt_03 = array.size(new_sym_arr) > 2 ? array.get(new_sym_arr, 2) : na\nt_04 = array.size(new_sym_arr) > 3 ? array.get(new_sym_arr, 3) : na\nt_05 = array.size(new_sym_arr) > 4 ? array.get(new_sym_arr, 4) : na\nt_06 = array.size(new_sym_arr) > 5 ? array.get(new_sym_arr, 5) : na\nt_07 = array.size(new_sym_arr) > 6 ? array.get(new_sym_arr, 6) : na\nt_08 = array.size(new_sym_arr) > 7 ? array.get(new_sym_arr, 7) : na\nt_09 = array.size(new_sym_arr) > 8 ? array.get(new_sym_arr, 8) : na\nt_10 = array.size(new_sym_arr) > 9 ? array.get(new_sym_arr, 9) : na\nt_11 = array.size(new_sym_arr) > 10 ? array.get(new_sym_arr, 10) : na\nt_12 = array.size(new_sym_arr) > 11 ? array.get(new_sym_arr, 11) : na\nt_13 = array.size(new_sym_arr) > 12 ? array.get(new_sym_arr, 12) : na\nt_14 = array.size(new_sym_arr) > 13 ? array.get(new_sym_arr, 13) : na\nt_15 = array.size(new_sym_arr) > 14 ? array.get(new_sym_arr, 14) : na\nt_16 = array.size(new_sym_arr) > 15 ? array.get(new_sym_arr, 15) : na\nt_17 = array.size(new_sym_arr) > 16 ? array.get(new_sym_arr, 16) : na\nt_18 = array.size(new_sym_arr) > 17 ? array.get(new_sym_arr, 17) : na\nt_19 = array.size(new_sym_arr) > 18 ? array.get(new_sym_arr, 18) : na\nt_20 = array.size(new_sym_arr) > 19 ? array.get(new_sym_arr, 19) : na\nt_21 = array.size(new_sym_arr) > 20 ? array.get(new_sym_arr, 20) : na\nt_22 = array.size(new_sym_arr) > 21 ? array.get(new_sym_arr, 21) : na\nt_23 = array.size(new_sym_arr) > 22 ? array.get(new_sym_arr, 22) : na\nt_24 = array.size(new_sym_arr) > 23 ? array.get(new_sym_arr, 23) : na\nt_25 = array.size(new_sym_arr) > 24 ? array.get(new_sym_arr, 24) : na\nt_26 = array.size(new_sym_arr) > 25 ? array.get(new_sym_arr, 25) : na\nt_27 = array.size(new_sym_arr) > 26 ? array.get(new_sym_arr, 26) : na\nt_28 = array.size(new_sym_arr) > 27 ? array.get(new_sym_arr, 27) : na\nt_29 = array.size(new_sym_arr) > 28 ? array.get(new_sym_arr, 28) : na\nt_30 = array.size(new_sym_arr) > 29 ? array.get(new_sym_arr, 29) : na\nt_31 = array.size(new_sym_arr) > 30 ? array.get(new_sym_arr, 30) : na\nt_32 = array.size(new_sym_arr) > 31 ? array.get(new_sym_arr, 31) : na\nt_33 = array.size(new_sym_arr) > 32 ? array.get(new_sym_arr, 32) : na\nt_34 = array.size(new_sym_arr) > 33 ? array.get(new_sym_arr, 33) : na\nt_35 = array.size(new_sym_arr) > 34 ? array.get(new_sym_arr, 34) : na\nt_36 = array.size(new_sym_arr) > 35 ? array.get(new_sym_arr, 35) : na\nt_37 = array.size(new_sym_arr) > 36 ? array.get(new_sym_arr, 36) : na\nt_38 = array.size(new_sym_arr) > 37 ? array.get(new_sym_arr, 37) : na\nt_39 = array.size(new_sym_arr) > 38 ? array.get(new_sym_arr, 38) : na\nt_40 = array.size(new_sym_arr) > 39 ? array.get(new_sym_arr, 39) : na\n```\n\n----------------------------------------\n\nTITLE: ICT Liquidity Void Fill Scanner Documentation\nDESCRIPTION: Comments explaining the logic and usage of the ICT Liquidity Void Fill Scanner. It identifies momentum candles and generates signals when price retraces to specific levels based on Fibonacci values.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Scanner] ICT Liquidity Void Fill Scanner.txt#2025-04-16_snippet_17\n\nLANGUAGE: pine\nCODE:\n```\n// Readme First:\n\n// ICT Liquidity Void Fill Scanner\n\n// Logic\n//   - This identifies a momentum candle, an 80% body candle with high volatility, or a displacement.\n//   - A signal is generated when the price retraces to the candle body, void, or FVG, based on the Fibonacci value.\n\n// Notes\n//   - Use a higher timeframe, like 4 hour or 1 hour, for stock selection.\n//   - The Scanner will generate wrong signals also.\n```\n\n----------------------------------------\n\nTITLE: Implementing Additional Filters in Pine Script\nDESCRIPTION: This snippet defines various filters including price change, volume, ATR, candle body, and time-based filters to refine trading signals.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Indicator] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_4\n\nLANGUAGE: Pine Script\nCODE:\n```\ncandle_range = high - low\nbody_size = math.abs(close - open)\n\npchg_above_filter = not i_pchg_filter or cum_pchg > i_pchg_above_below\npchg_below_filter = not i_pchg_filter or cum_pchg < -i_pchg_above_below\nvol_filter = not i_vol_filter or curr_cum_vol >= i_vol_above\nvol_pchg_filter = not i_vol_pchg_filter or cum_vol_pchg >= i_vol_pchg_above\n\natr_filter = not i_atr_filter or candle_range > ta.atr(i_atr_length) * i_atr_multi\n\nbody_filter = not i_body_filter or candle_range > 0 and body_size / candle_range >= i_body_percent\nbody_size_filter = not i_body_size_filter or candle_range > 0 and body_size / candle_range >= i_body_percent and candle_range >= (high[1] - low[1]) * i_body_size_multi\n\nvolume_filter = not i_volume_filter or volume > ta.sma(volume, i_vol_sma_length)\n\nvar bool rel_vol_filter = true\nif i_rel_vol_filter\n    average_volume = ta.sma(volume, i_rel_vol_avg_vol_len)\n    relative_volume = volume / nz(average_volume[1], volume)\n    rel_vol_sma_multiplier = ta.sma(relative_volume, i_rel_vol_avg_vol_len) * i_rel_vol_avg_vol_multi\n    rel_vol_filter := relative_volume > rel_vol_sma_multiplier\n\ntime_filter = \n not i_time_filter or \n (hour > i_hour_1 or hour == i_hour_1 and minute >= i_minute_1) and \n (hour < i_hour_2 or hour == i_hour_2 and minute < i_minute_2)\n\ndate_filter = not i_date_filter or year == i_year and month == i_month and dayofmonth == i_day\n```\n\n----------------------------------------\n\nTITLE: Calculating Cumulative Percentage Change in PineScript\nDESCRIPTION: Computes the daily cumulative percentage change of close price. It resets the calculation at the start of each new day and accumulates the percentage change throughout the day.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Scanner - Trend Following Setup - Sideways Market Skipper Scanner.txt#2025-04-16_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\ncumulative_percentage_change() =>\n    var float _cum_pct_change = na\n    _is_new_day = ta.change(time('D')) != 0 ? 1 : 0\n    _daily_pct_change = na(close[1]) ? 0 : (close - close[1]) / close[1] * 100\n    _cum_pct_change := _is_new_day ? _daily_pct_change : (na(_cum_pct_change) ? _daily_pct_change : (_cum_pct_change + _daily_pct_change))\n    _cum_pct_change\n\n// Calculate current cumulative percentage change\ncum_pchg = cumulative_percentage_change()\n```\n\n----------------------------------------\n\nTITLE: Initializing Market Profile Indicator in PineScript\nDESCRIPTION: Sets up the indicator with basic parameters including title, overlay settings, and maximum line/box counts for the Market Profile visualization. This is the entry point of the script that defines the indicator properties.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] Market Profile with Screener (Based on [RS]Market Profile by RicardoSantos).txt#2025-04-16_snippet_0\n\nLANGUAGE: pine script\nCODE:\n```\n//@version=5\nindicator(title='Market Profile with Screener (Based on [RS]Market Profile by RicardoSantos)', shorttitle='Market Profile Screener', overlay=true, max_lines_count=300, max_boxes_count=300)\n```\n\n----------------------------------------\n\nTITLE: Market Data Screener Function\nDESCRIPTION: Function that processes individual symbols, retrieves security data, and adds it to the matrix when conditions are met.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Market Structure Shift (MSS)/ICT Market Structure Shift (MSS) Screener.txt#2025-04-16_snippet_11\n\nLANGUAGE: pinescript\nCODE:\n```\nscreener(s) =>\n    sym = ticker.modify(s, syminfo.session)\n    [_time, price, signal] = request.security(sym, timeframe.period, indicator_calculation())\n\n    // Check if the signal is not na and the time matches\n    if not na(signal) and _time == time\n        symbolName = symbol(s)\n        formattedTime = format_time(_time)\n        strPrice = str.tostring(price)\n        strSignal = str.tostring(signal)\n        \n        // Add data to the matrix\n        mtxFun(symbolName, formattedTime, strPrice, strSignal)\n```\n\n----------------------------------------\n\nTITLE: Implementing Additional Filters for ICT Displacement Candles Scanner in PineScript\nDESCRIPTION: Sets up additional filters including ATR, body percentage, time, and date filters for more precise scanning results.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Scanner] ICT Displacement Candles.txt#2025-04-16_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\nstring g_af = '██████████████ Additional Fiters ██████████████'\n\nstring tt_atr = \"• Filters out longer or more volatile displacement candles.\"\nstring tt_atr_mul = \"• Higher values filter longer or more volatile candles.\"\nstring tt_bf = \"• 80 means the body covers 80%+ of the displacement candle.\"\nstring tt_tf = \"• Filter signals within a given time.\"\nstring tt_df = \"• Filter signals on specified dates (for Retracement Candles only).\"\n\nbool i_atr_filter = input.bool(defval = false, title = 'Apply ATR Filter', tooltip = tt_atr, group = g_af)\nint i_atr_length = input.int(defval = 14, minval = 1, title = 'ATR Length', group = g_af)\nfloat i_atr_multi = input.float(defval = 1, title = 'ATR Multiplier', minval = 1, group = g_af)\n\nbool i_body_filter = input.bool(defval = false, title = 'Apply Body % Filter', tooltip = tt_bf, group = g_af)\nfloat i_body_percent = input.float(defval = 70, title = 'Body % Above', minval = 0, maxval = 100, group = g_af) / 100\n\nbool i_time_filter = input.bool(defval = false, title = 'Apply Time Filter', tooltip = tt_tf, group = g_af)\nint i_hour_1 = input.int(defval = 9, minval = 0, title = 'Time From', inline = 't_1', group = g_af)\nint i_minute_1 = input.int(defval = 15, minval = 0, title = ':', inline = 't_1', group = g_af)\nint i_hour_2 = input.int(defval = 10, minval = 0, title = 'Time To ', inline = 't_2', group = g_af)\nint i_minute_2 = input.int(defval = 15, minval = 0, title = ':', inline = 't_2', group = g_af)\n\nbool i_date_filter = input.bool(defval = false, title = 'Apply Date Filter', tooltip = tt_df, group = g_af)\nint i_day = input.int(defval = 30, minval = 1, maxval = 31, title = 'Day', group = g_af)\nint i_month = input.int(defval = 3, minval = 1, maxval = 12, title = 'Month', group = g_af)\nint i_year = input.int(defval = 2025, minval = 0, title = 'Year', group = g_af)\n```\n\n----------------------------------------\n\nTITLE: Activating Bull and Bear Sequences Based on Count Thresholds\nDESCRIPTION: Activates bull and bear sequences when their respective counts reach the minimum bar threshold. When activated, the function resets other sequence states and records the starting bar index for the pattern.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Indicator] ICT Displacement Candles.txt#2025-04-16_snippet_10\n\nLANGUAGE: pine\nCODE:\n```\n// Activate sequences\nif bullCnt >= i_dc_min_bars and bullCnt[1] < i_dc_min_bars\n    bullActive := true\n    bearActive := false\n    bullDone := false\n    bearDone := false\n    bullStart := bar_index - bullCnt + 1\nif bearCnt >= i_dc_min_bars and bearCnt[1] < i_dc_min_bars\n    bearActive := true\n    bullActive := false\n    bearDone := false\n    bullDone := false\n    bearStart := bar_index - bearCnt + 1\n```\n\n----------------------------------------\n\nTITLE: Plotting Markers for Equal Pivot Points in PineScript\nDESCRIPTION: Places X-shaped markers on the chart at locations where equal pivot highs or lows are detected. The markers are only shown when the percentage change between consecutive pivots is below the specified threshold.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_28\n\nLANGUAGE: pinescript\nCODE:\n```\n// Plot Equal Labels\nplotshape(i_phl_eq_show and pl and pl_pchg < i_phl_eq_percent ? low[i_phl_eq_right] : na, style=shape.xcross, location=location.absolute, offset=-i_phl_eq_right, color=color.new(i_phl_eq_l_ln_color, i_phl_eq_transp), size=size.small)\nplotshape(i_phl_eq_show and ph and ph_pchg < i_phl_eq_percent ? high[i_phl_eq_right] : na, style=shape.xcross, location=location.absolute, offset=-i_phl_eq_right, color=color.new(i_phl_eq_h_ln_color, i_phl_eq_transp), size=size.small)\n```\n\n----------------------------------------\n\nTITLE: Creating Stochastic Oscillator Visualization Overlay in PineScript\nDESCRIPTION: Implements visual elements for a Stochastic Oscillator indicator overlay including reference lines, indicator values, and labels. The visualization uses boxes and lines to represent the oscillator values at appropriate vertical positions relative to price.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_16\n\nLANGUAGE: pine\nCODE:\n```\nif i_stoc_display\n    mid_line = math.avg(100, 0)\n    array.push(a_hist , box.new (bar_index[i_display_len], priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 + i_stoc_over_bought / oscHighest * priceChangeRate * i_stoc_height), \n                                 bar_index                   , priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 + i_stoc_over_bought / oscHighest * priceChangeRate * i_stoc_height), color.new(i_neg_color  , 75), 1))\n    array.push(a_hist , box.new (bar_index[i_display_len], priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 +        mid_line / oscHighest * priceChangeRate * i_stoc_height), \n                                 bar_index                   , priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 +        mid_line / oscHighest * priceChangeRate * i_stoc_height), color.new(i_neu_color  , 75), 1))\n    array.push(a_hist , box.new (bar_index[i_display_len], priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 +   i_stoc_over_sold / oscHighest * priceChangeRate * i_stoc_height), \n                                 bar_index                   , priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 +   i_stoc_over_sold / oscHighest * priceChangeRate * i_stoc_height), color.new(i_pos_color, 75), 1))\n    f_drawLabelX(bar_index + 3,                                priceLowest * (1 - priceChangeRate * i_stoc_voffset) * (1 +        mid_line / oscHighest * priceChangeRate * i_stoc_height), 'STOC', xloc.bar_index, yloc.price, #00000000, label.style_label_left, chart.fg_color, size.tiny, text.align_center, '%stoc_k : ' + str.tostring(stoc_k, '#.##') + '\\n%stoc_d : ' + str.tostring(stoc_d, '#.##'))\n```\n\n----------------------------------------\n\nTITLE: Plotting Trade Signals in PineScript\nDESCRIPTION: This snippet plots trade signals based on the defined conditions. It uses plotshape to display triangles above or below bars and barcolor to change the color of bars based on the conditions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Scanner - ICT Liquidity Sweep Pattern Scanner.txt#2025-04-16_snippet_7\n\nLANGUAGE: pine\nCODE:\n```\nplotshape(series=i_scr_show_short and i_scr_choose == 'Prev 1 Swing Sweep' ? short_condition_1 : na, title='Prev 1 Bearish Sweep', style=shape.triangledown, location=location.abovebar, color=i_neg_light_color, size=size.tiny)\nplotshape(series=i_scr_show_long and i_scr_choose == 'Prev 1 Swing Sweep' ? long_condition_1 : na, title='Prev 1 Bullish Sweep', style=shape.triangleup, location=location.belowbar, color=i_pos_light_color, size=size.tiny)\nbarcolor(color=i_scr_show_short and i_scr_choose == 'Prev 1 Swing Sweep' and short_condition_1 ? i_neg_light_color : i_scr_show_long and i_scr_choose == 'Prev 1 Swing Sweep' and long_condition_1 ? i_pos_light_color : na, title='Prev 1 Candle')\n```\n\n----------------------------------------\n\nTITLE: Initializing Retracement Tracking Variables\nDESCRIPTION: Sets up variables to track the state of bullish and bearish retracement patterns. These variables store information about active sequences, completion status, bar positions, price levels, and visual elements for displaying the patterns.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Indicator] ICT Displacement Candles.txt#2025-04-16_snippet_9\n\nLANGUAGE: pine\nCODE:\n```\n// Retracement tracking combined\nvar bool bullActive = false\nvar bool bearActive = false\nvar bool bullDone = false\nvar bool bearDone = false\nvar int bullBar = na\nvar int bearBar = na\nvar int bullStart = na\nvar int bearStart = na\nvar float bullLow = na\nvar float bearHigh = na\nvar line bullLine = na\nvar line bearLine = na\n```\n\n----------------------------------------\n\nTITLE: Calculating and Plotting VWAP in PineScript\nDESCRIPTION: This snippet calculates the Volume Weighted Average Price (VWAP) for different timeframes and plots it on the chart. It includes error handling for cases where volume data is not available.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_21\n\nLANGUAGE: pinescript\nCODE:\n```\nif barstate.islast and ta.cum(volume) == 0\n    runtime.error(\"No volume is provided by the data vendor.\")\n\nisNewPeriod = switch i_vwap_timeframe\n\t\"Day\"   => timeframe.change(\"D\")\n\t\"Week\"      => timeframe.change(\"W\")\n\t\"Month\"     => timeframe.change(\"M\")\n\t=> false\n\nfloat vwap_value = na\n\n[_vwap, _stdevUpper, _] = ta.vwap(i_vwap_source, isNewPeriod, 1)\nvwap_value := _vwap\n\nplot(i_vwap_show ? vwap_value : na, title=\"VWAP\", color=i_vwap_color, linewidth=1)\n```\n\n----------------------------------------\n\nTITLE: Helper Functions for Time Formatting and Symbol Extraction in PineScript\nDESCRIPTION: Utility functions that format time based on timeframe and extract symbol names from ticker strings. These support the screener's display functionality by ensuring properly formatted data for the results table.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Scanner - ICT Liquidity Sweep Pattern Scanner.txt#2025-04-16_snippet_13\n\nLANGUAGE: pine\nCODE:\n```\n// Function to format time\nformat_time(x) =>\n    timezone = syminfo.timezone\n    timeframe.isintraday ? str.format_time(x, \"HH:mm  dd-MM-yyyy\", timezone) : str.format_time(x, \"dd-MM-yyyy\", timezone)\n\n// Function to extract symbol name\nsymbol(s) => \n    array.get(str.split(s, \":\"), 1)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Flip Signals in Pine Script\nDESCRIPTION: Creates visual indicators for flip signals including shapes above/below bars, background colors, and bar colors based on the flip signal type selection.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_13\n\nLANGUAGE: pine\nCODE:\n```\nplotshape(series=i_scr_choose == 'Flip Signals' ? short_entry : na, title='Short Flip', style=shape.triangledown, location=location.abovebar, color=i_neg_light_color, size=size.tiny)\nplotshape(series=i_scr_choose == 'Flip Signals' ? long_entry  : na, title='Long Flip', style=shape.triangleup, location=location.belowbar, color=i_pos_light_color, size=size.tiny)\n\nbgcolor(color=i_scr_choose == 'Flip Signals' and short_entry ? color.new(i_neg_light_color, 90) : i_scr_choose == 'Flip Signals' and long_entry ? color.new(i_pos_light_color, 90) : na, title='Flip Bgcolor', show_last=i_display_len)\nbarcolor(color=i_scr_choose == 'Flip Signals' and short_entry ? i_neg_light_color : i_scr_choose == 'Flip Signals' and long_entry ? i_pos_light_color : na, title='Flip Candle')\n```\n\n----------------------------------------\n\nTITLE: Creating MACD Visualization Overlay in PineScript\nDESCRIPTION: Implements visual elements for a MACD indicator overlay with appropriate positioning and labeling. The code sets up a label display for the MACD indicator at a calculated vertical position.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_17\n\nLANGUAGE: pine\nCODE:\n```\nif i_macd_display\n    f_drawLabelX(bar_index + 3,  priceLowest * (1 - priceChangeRate * i_macd_voffset) * (1 +        50 / oscHighest * priceChangeRate * i_macd_height), 'MACD', xloc.bar_index, yloc.price, #00000000, label.style_label_left, chart.fg_color, size.tiny, text.align_center, '')\n```\n\n----------------------------------------\n\nTITLE: Plotting Market Structure and Retracement Signals in PineScript\nDESCRIPTION: This snippet handles the visualization of market structure shifts and retracements. It plots shapes, lines, and boxes to represent bullish and bearish conditions and retracements on the chart.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Market Structure Shift (MSS)/ICT Market Structure Shift (MSS) Screener.txt#2025-04-16_snippet_6\n\nLANGUAGE: pinescript\nCODE:\n```\nplotshape(series=i_zz_bear_show and i_zz_bear_shift_show ? bearish_condition : na, title='Bearish Shift', style=shape.triangledown, location=location.abovebar, color=i_zz_bear_signal_color, textcolor=i_zz_bear_signal_color, size=size.tiny)\nplotshape(series=i_zz_bull_show and i_zz_bull_shift_show ? bullish_condition : na, title='Bullish Shift', style=shape.triangleup, location=location.belowbar, color=i_zz_bull_signal_color, textcolor=i_zz_bull_signal_color, size=size.tiny)\nbarcolor(color=i_zz_bear_show and i_zz_bear_shift_show and bearish_condition ? i_zz_bear_signal_color : i_zz_bull_show and i_zz_bull_shift_show and bullish_condition ? i_zz_bull_signal_color : na, title='Shift Candle')\n\nvar line_array = array.new_line()\n\nif i_zz_bear_show and bearish_condition\n    ph_box = box.new(left=int(bi_3), top=zz_3, right=int(bi_1), bottom=zz_1, border_color=#00000000, bgcolor=color.new(i_neg_color, i_zz_bx_transp))\n    if i_zz_bear_shift_show\n        ph_line = line.new(x1=int(bi_2), y1=zz_2, x2=bar_index, y2=zz_2, color=i_neg_color, style=line.style_dashed)\n        array.push(line_array, ph_line)\n\nif i_zz_bull_show and bullish_condition\n    pl_box = box.new(left=int(bi_3), top=zz_3, right=int(bi_1), bottom=zz_1, border_color=#00000000, bgcolor=color.new(i_pos_color, i_zz_bx_transp))\n    if i_zz_bull_shift_show\n        pl_line = line.new(x1=int(bi_2), y1=zz_2, x2=bar_index, y2=zz_2, color=i_pos_color, style=line.style_dashed)\n        array.push(line_array, pl_line)\n\nplotchar(series=i_zz_bear_show and i_zz_bear_ret_show and bearish_retracement_trigger ? 3 : na, title='Bear Retracement', char=\"↷\", location=location.abovebar, color=i_zz_bear_signal_color, size=size.tiny)\nplotchar(series=i_zz_bull_show and i_zz_bull_ret_show and bullish_retracement_trigger ? 3 : na, title='Bull Retracement', char=\"⤻\", location=location.belowbar, color=i_zz_bull_signal_color, size=size.tiny)\nbarcolor(color=i_zz_bear_show and i_zz_bear_ret_show and bearish_retracement_trigger ? i_zz_bear_signal_color : i_zz_bull_show and i_zz_bull_ret_show and bullish_retracement_trigger ? i_zz_bull_signal_color : na, title='Retracement Candle')\n```\n\n----------------------------------------\n\nTITLE: Extracting Ticker IDs from CSV List in PineScript\nDESCRIPTION: A function that takes a comma-separated list of ticker symbols, extracts the first symbol, and returns both the extracted symbol and the remaining list. This enables iterative processing of multiple symbols from a single input string.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Scanner - ICT Liquidity Sweep Pattern Scanner.txt#2025-04-16_snippet_9\n\nLANGUAGE: pine\nCODE:\n```\nfeed(back) =>                                             // extract tickerid and decrement list of ticker IDs\n    loop  = back                                          // declare string variable to hold content list\n    getT  = string(na)                                    // declare string variable to hold tickerid\n    if str.length(loop) == 0                              // if list is empty\n        getT := string(na)                                // assign na to tickerid variable\n        loop := string(na)                                // assign na to list of ticker Ids variable\n    else                                                  // else extract first tickerid\n        getP  = nz(str.pos(loop, ','), str.length(loop))  // get position of first comma or last character\n        getT := str.substring(loop, 0, getP)              // get tickerid in first position of list\n        loop := str.replace(loop, getT + ',', '')         // clear tickerid + delimiter character from list\n    [getT, loop]                                          // return tickerid in first position & truncated list\n```\n\n----------------------------------------\n\nTITLE: Defining Input Parameters for Displacement Candles in PineScript\nDESCRIPTION: Configures user input options for the displacement candles feature, including minimum bars, deviation percentage, and various filters. These inputs allow users to customize the indicator's sensitivity and behavior.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Indicator] ICT Displacement Candles.txt#2025-04-16_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\nint i_dc_min_bars = input.int(defval = 3, title = 'Minimum Bars', minval = 1, tooltip = tt_mb, group = g_dc)\nfloat i_dc_dev_percent = nz(input.float(60.0, \"Minimal Deviation (%)\", minval=1, step = 10, tooltip = tt_dev, group = g_dc) / 100 * ta.sma(high-low, 14))\nbool i_dc_close_filter = input.bool(defval = true, title = 'Apply Close Above/Below Prev Close', group = g_dc)\nbool i_dc_hl_filter = input.bool(defval = false, title = 'Apply Close Above/Below Prev High/Low', group = g_dc)\nfloat i_dc_fib_val = input.float(defval = 0.5, title = 'Fibonacci Value', step = 0.1, tooltip = tt_ret_fib, group = g_dc)\n```\n\n----------------------------------------\n\nTITLE: Matrix Setup and Data Management in PineScript\nDESCRIPTION: Creates a matrix data structure to store screener results and implements a function to add rows to the matrix. This approach efficiently organizes and manages the collection of signals across multiple symbols.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_20\n\nLANGUAGE: pinescript\nCODE:\n```\n// Matrix setup\nvar matrix = matrix.new<string>(0, 6, na)\n\n// Function to add rows to the matrix\nmtxFun(symbol, _time, price, _cum_pchg, _cum_vol_pchg, signal) =>\n    matrix.add_row(matrix, 0, array.from(symbol, _time, price, _cum_pchg, _cum_vol_pchg, signal))\n```\n\n----------------------------------------\n\nTITLE: Configuring Scanner Settings with Input Parameters in Pine Script\nDESCRIPTION: Defines the user interface inputs for the scanner functionality, including symbol selection, table display options, and signal filtering preferences. The input text area allows users to paste multiple symbols for scanning.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_1\n\nLANGUAGE: Pine Script\nCODE:\n```\ng_scrtb = '█████████████████ Scanner █████████████████'\n\nstring i_scr_choose = input.string(defval='Mitigation Block', title='Screening Method', options=['Mitigation Block', 'Retracement'], group=g_scrtb)\n\ntt_is = \"• Reads only up to first 40 symbols.\" +\n     \"\\n• Total characters cannot exceed 4096.\" +\n     \"\\n• Eg: EXCHANGE:SYMBOL_A,EXCHANGE:SYMBOL_B\"\n\nstring i_symbols = input.text_area(\n defval=\"NSE:ASHOKA,NSE:BEPL,NSE:BIOCON,NSE:BLS,NSE:CAMPUS,NSE:CASTROLIND,NSE:CESC,NSE:EDELWEISS,NSE:EMBDL,NSE:ENGINERSIN,NSE:EPL,NSE:FSL,NSE:GAEL,NSE:GREAVESCOT,NSE:GSPL,NSE:HFCL,NSE:HONASA,NSE:HUDCO,NSE:INDUSTOWER,NSE:INOXWIND,NSE:IOLCP,NSE:JAMNAAUTO,NSE:JMFINANCIL,NSE:JTLIND,NSE:KALAMANDIR,NSE:LTFOODS,NSE:LXCHEM,NSE:MARKSANS,NSE:NFL,NSE:NLCINDIA,NSE:ORIENTCEM,NSE:PPLPHARMA,NSE:RAIN,NSE:RELIGARE,NSE:SAMMAANCAP,NSE:SEQUENT,NSE:TI,NSE:TRIVENI,NSE:TVSSCS,NSE:ZOMATO\", \n title=\"Paste Symbols\", tooltip=tt_is, group=g_scrtb)\n\nbool i_scr_show_table  = input.bool(defval=true, title='Display Table', group=g_scrtb)\nbool i_scr_show_long  = input.bool(defval=true, title='Long Signals', inline='tb_2', group=g_scrtb)\nbool i_scr_show_short  = input.bool(defval=true, title='Short Signals', inline='tb_2', group=g_scrtb)\n\nint i_scr_tbl_disp_rows = input.int(defval=12, title='Display Rows', minval=0, maxval=100, group=g_scrtb)\nstring i_scr_tbl_position = input.string(defval=position.bottom_left, title='Table Position', options=[position.top_left, position.top_center, position.top_right, position.middle_left, position.middle_center, position.middle_right, position.bottom_left, position.bottom_center, position.bottom_right], group=g_scrtb)\nstring i_scr_tbl_text_size = input.string(defval=size.small, title='Table Size', options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group=g_scrtb)\n```\n\n----------------------------------------\n\nTITLE: Initializing RSI and Divergence Indicator in PineScript\nDESCRIPTION: Sets up initial variables and calculates RSI and its moving average. It also defines overbought and oversold levels for RSI bands.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Scanner] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\ncolor i_neu_dark_color = #0F0F0F //input.color(defval = #0F0F0F, title = 'Neutral', group = g_ch)\n\n//___________________________ Menu End\n\n//___________________________ Performance Start\n\nis_new_day = ta.change(time('D')) != 0\n\n// Cumulative Percentage Change\nvar float cum_pchg = na\nday_pchg = na(close[1]) ? 0 : (close - close[1]) / close[1] * 100\ncum_pchg := is_new_day ? day_pchg : na(cum_pchg) ? day_pchg : cum_pchg + day_pchg\n\n// Cumulative Volume and Volume Percentage Change\nvar float curr_cum_vol = na\nvar float prev_cum_vol = na\nif is_new_day\n    prev_cum_vol := curr_cum_vol\n    curr_cum_vol := volume\n    curr_cum_vol\nelse\n    curr_cum_vol := na(curr_cum_vol) ? volume : curr_cum_vol + volume\n    curr_cum_vol\nprev_vol_safe = nz(prev_cum_vol, curr_cum_vol)\ncum_vol_pchg = (curr_cum_vol - prev_vol_safe) / prev_vol_safe * 100\n\nvar table tbl_cum = table.new(position=i_cum_tbl_pos, columns=2, rows=4, border_width=1, force_overlay=true)\n\ncell_perform(col, row, txt, txt_color, aligh) =>\n    table.cell(tbl_cum, col, row, txt, text_color=txt_color, text_halign=aligh, bgcolor=i_neu_dark_color, text_size=i_cum_tbl_size)\n\nif barstate.islast and i_cum_tbl_disp\n    pchg_col = cum_pchg > 0 ? i_pos_color : i_neg_color\n    vol_pchg_col = cum_vol_pchg > 0 ? i_pos_color : i_neg_color\n    prev_vol_pchg_col = prev_vol_safe < curr_cum_vol ? i_neg_color : i_pos_color\n    \n    cell_perform(0, 0, '%Chg', chart.fg_color, text.align_left)\n    cell_perform(1, 0, str.tostring(cum_pchg, '#.##') + ' %', pchg_col, text.align_right)\n    cell_perform(0, 1, 'Vol %Chg', chart.fg_color, text.align_left)\n    cell_perform(1, 1, str.tostring(cum_vol_pchg, '#.##') + ' %', vol_pchg_col, text.align_right)\n    cell_perform(0, 2, 'Vol', chart.fg_color, text.align_left)\n    cell_perform(1, 2, str.tostring(curr_cum_vol / 100000, '#.##') + ' L', vol_pchg_col, text.align_right)\n    cell_perform(0, 3, 'PD Vol', chart.fg_color, text.align_left)\n    cell_perform(1, 3, str.tostring(prev_vol_safe / 100000, '#.##') + ' L', prev_vol_pchg_col, text.align_right)\n\n//___________________________ Performance End\n\n//___________________________ Additional Filters Start\n\n// Pre-calculate common values\ncandle_range = high - low\nbody_size = math.abs(close - open)\n\n// Combined filter conditions\npchg_above_filter = not i_pchg_filter or cum_pchg > i_pchg_above_below\npchg_below_filter = not i_pchg_filter or cum_pchg < -i_pchg_above_below\nvol_filter = not i_vol_filter or curr_cum_vol >= i_vol_above\nvol_pchg_filter = not i_vol_pchg_filter or cum_vol_pchg >= i_vol_pchg_above\n\n// ATR Filter\natr_filter = not i_atr_filter or candle_range > ta.atr(i_atr_length) * i_atr_multi\n\n// Body Filters\nbody_filter = not i_body_filter or candle_range > 0 and body_size / candle_range >= i_body_percent\nbody_size_filter = not i_body_size_filter or candle_range > 0 and body_size / candle_range >= i_body_percent and candle_range >= (high[1] - low[1]) * i_body_size_multi\n\n// Volume Filters\nvolume_filter = not i_volume_filter or volume > ta.sma(volume, i_vol_sma_length)\n\n// Relative Volume Filter\nvar bool rel_vol_filter = true\nif i_rel_vol_filter\n    average_volume = ta.sma(volume, i_rel_vol_avg_vol_len)\n    relative_volume = volume / nz(average_volume[1], volume)\n    rel_vol_sma_multiplier = ta.sma(relative_volume, i_rel_vol_avg_vol_len) * i_rel_vol_avg_vol_multi\n    rel_vol_filter := relative_volume > rel_vol_sma_multiplier\n\n// Time Filter\ntime_filter = \n not i_time_filter or \n (hour > i_hour_1 or hour == i_hour_1 and minute >= i_minute_1) and \n (hour < i_hour_2 or hour == i_hour_2 and minute < i_minute_2)\n\n// Date Filter\ndate_filter = not i_date_filter or year == i_year and month == i_month and dayofmonth == i_day\n\n//___________________________ Additional Filters End\n\n//___________________________ RSI Start\n\n// Acknowledgement & Reference\n// Trader: 'TradingView'\n// Indicator Title: Built-in Relative Strength Index, RSI Divergence Indicator\n\ncolor no_color = #00000000\n\n// RSI Calculation\nfloat rsi = ta.rsi(i_rsi_src, i_rsi_len)\nfloat rsi_ma = ta.sma(rsi, i_rsi_ma_len)\n\n// RSI Plot\nplot(series = rsi, title = 'RSI', color = i_indicator_color, linewidth = 2)\nplot(series = rsi_ma, title = 'RSI Moving Average', color = i_signal_color)\n\n// RSI Bands\nfloat overbought = 70\nfloat breakout = 60\nfloat middle = 50\nfloat breakdown = 40\nfloat oversold = 30\nhline(price = overbought, title = 'Band Overbought', color = color.new(i_neg_color, 50), linestyle = hline.style_dotted)\nband_ub = hline(price = breakout, title = 'Band Bullish', color = color.new(i_neu_color, 50), linestyle = hline.style_dotted)\nhline(price = middle, title = 'Band Middle', color = color.new(i_neu_color, 50), linestyle = hline.style_dotted)\nband_lb = hline(price = breakdown, title = 'Band Bearish', color = color.new(i_neu_color, 50), linestyle = hline.style_dotted)\nhline(price = oversold, title = 'Band Oversold', color = color.new(i_pos_color, 50), linestyle = hline.style_dotted)\nfill(hline1 = band_ub, hline2 = band_lb, color = color.new(i_neu_color, 95), title = 'Fill Middle')\n```\n\n----------------------------------------\n\nTITLE: Parsing Symbol List for Multi-Symbol Screening in PineScript\nDESCRIPTION: This code implements a function to parse a comma-separated list of trading symbols. It's used to set up a multi-symbol screener, allowing the indicator to analyze multiple assets simultaneously.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_16\n\nLANGUAGE: pine\nCODE:\n```\nfeed(back) =>                                             // extract tickerid and decrement list of ticker IDs\n    loop  = back                                          // declare string variable to hold content list\n    getT  = string(na)                                    // declare string variable to hold tickerid\n    if str.length(loop) == 0                              // if list is empty\n        getT := string(na)                                // assign na to tickerid variable\n        loop := string(na)                                // assign na to list of ticker Ids variable\n    else                                                  // else extract first tickerid\n        getP  = nz(str.pos(loop, ','), str.length(loop))  // get position of first comma or last character\n        getT := str.substring(loop, 0, getP)              // get tickerid in first position of list\n        loop := str.replace(loop, getT + ',', '')         // clear tickerid + delimiter character from list\n    [getT, loop]                                          // return tickerid in first position & truncated list\n\n[tid_01, out_01] = feed(i_symbols), [tid_02, out_02] = feed(out_01), [tid_03, out_03] = feed(out_02), [tid_04, out_04] = feed(out_03),\n[tid_05, out_05] = feed(out_04), [tid_06, out_06] = feed(out_05), [tid_07, out_07] = feed(out_06), [tid_08, out_08] = feed(out_07),\n[tid_09, out_09] = feed(out_08), [tid_10, out_10] = feed(out_09), [tid_11, out_11] = feed(out_10), [tid_12, out_12] = feed(out_11),\n[tid_13, out_13] = feed(out_12), [tid_14, out_14] = feed(out_13), [tid_15, out_15] = feed(out_14), [tid_16, out_16] = feed(out_15),\n[tid_17, out_17] = feed(out_16), [tid_18, out_18] = feed(out_17), [tid_19, out_19] = feed(out_18), [tid_20, out_20] = feed(out_19),\n[tid_21, out_21] = feed(out_20), [tid_22, out_22] = feed(out_21), [tid_23, out_23] = feed(out_22), [tid_24, out_24] = feed(out_23),\n[tid_25, out_25] = feed(out_24), [tid_26, out_26] = feed(out_25), [tid_27, out_27] = feed(out_26), [tid_28, out_28] = feed(out_27),\n[tid_29, out_29] = feed(out_28), [tid_30, out_30] = feed(out_29), [tid_31, out_31] = feed(out_30), [tid_32, out_32] = feed(out_31),\n[tid_33, out_33] = feed(out_32), [tid_34, out_34] = feed(out_33), [tid_35, out_35] = feed(out_34), [tid_36, out_36] = feed(out_35),\n[tid_37, out_37] = feed(out_36), [tid_38, out_38] = feed(out_37), [tid_39, out_39] = feed(out_38), [tid_40, out_40] = feed(out_39)\n```\n\n----------------------------------------\n\nTITLE: Creating Technical Indicator Summary Table in Pine Script\nDESCRIPTION: This code creates a table displaying key technical indicators including price change, RSI, MFI, CCI, and volume. The values are color-coded based on their values relative to predefined thresholds, providing visual cues for overbought/oversold conditions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup with Scanner.txt#2025-04-16_snippet_12\n\nLANGUAGE: pine\nCODE:\n```\nvar table tbl = table.new(position=i_tbl_position, columns=2, rows=5, border_width=2)\n\n// Color\ncol_pchg = pchg > i_pchg_250 ? i_pos_col : pchg < (-i_pchg_250) ? i_neg_col : i_neu_col\ncol_rsi = rsi > i_rsi_ob ? i_pos_col : rsi < i_rsi_os ? i_neg_col : i_neu_col\ncol_mfi = mfi > i_mfi_ob ? i_pos_col : mfi < i_mfi_os ? i_neg_col : i_neu_col\ncol_cci = cci > i_cci_ob ? i_pos_col : cci < i_cci_os ? i_neg_col : i_neu_col\ncol_vol = volume > vol_sma ? i_pos_col : i_neu_col\n\n// Function to populate cells in the table\ncell(int column, int row, string txt, color color) => \n    table.cell(tbl, column, row, text = txt, text_color = color, text_halign=text.align_left, bgcolor = color.new(color, 90), text_size=i_tbl_text_size)\n\n// Check if it's the last bar\nif barstate.islast\n    cell(0, 0, \"%Chg\", col_pchg)\n    cell(0, 1, \"RSI\", col_rsi)\n    cell(0, 2, \"MFI\", col_mfi)\n    cell(0, 3, \"CCI\", col_cci)\n    cell(0, 4, \"Vol\", col_vol)\n\n    cell(1, 0, str.tostring(pchg, '#.##'), col_pchg)\n    cell(1, 1, str.tostring(rsi, '#.##'), col_rsi)\n    cell(1, 2, str.tostring(mfi, '#.##'), col_mfi)\n    cell(1, 3, str.tostring(cci, '#.##'), col_cci)\n    cell(1, 4, str.tostring((volume / 100000), '#.##') + ' L', col_vol)\n```\n\n----------------------------------------\n\nTITLE: Calculating Cumulative Percentage Change in PineScript\nDESCRIPTION: Implements a function to calculate the daily cumulative percentage change of close price. This is used for additional filtering and analysis of FVGs.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_10\n\nLANGUAGE: pine\nCODE:\n```\ncumulative_percentage_change() =>\n    var float _cum_pct_change = na\n    _is_new_day = ta.change(time('D')) != 0 ? 1 : 0\n    _daily_pct_change = na(close[1]) ? 0 : (close - close[1]) / close[1] * 100\n    _cum_pct_change := bool(_is_new_day) ? _daily_pct_change : na(_cum_pct_change) ? _daily_pct_change : _cum_pct_change + _daily_pct_change\n    _cum_pct_change\n\ncum_pchg = cumulative_percentage_change()\n```\n\n----------------------------------------\n\nTITLE: Custom Label Drawing Function in PineScript\nDESCRIPTION: A function to create and update chart labels with specified parameters. It handles setting the text, tooltip, position, and appearance of the label.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup with Scanner.txt#2025-04-16_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\nf_drawLabelX(_x, _y, _text, _xloc, _yloc, _color, _style, _textcolor, _size, _textalign, _tooltip) =>\n    var id = label.new(_x, _y, _text, _xloc, _yloc, _color, _style, _textcolor, _size, _textalign, _tooltip)\n    label.set_text(id, _text)\n    label.set_tooltip(id, _tooltip)\n    label.set_xy(id, _x, _y)\n    label.set_textcolor(id, _textcolor)\n```\n\n----------------------------------------\n\nTITLE: Calculating Value Area High and Low in Market Profile\nDESCRIPTION: Determines the Value Area High (VAH) and Value Area Low (VAL) based on the TPO percentage parameter. These levels define the price range where a specified percentage of trading activity occurred during the session.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] Market Profile with Screener (Based on [RS]Market Profile by RicardoSantos).txt#2025-04-16_snippet_8\n\nLANGUAGE: pine script\nCODE:\n```\n//  ||--    get value area high/low\nvah_position = current_poc_position\nval_position = current_poc_position\ncurrent_sum = current_poc_value\n\nfor _i = 0 to 20 by 1\n    if current_sum < tpo_sum * i_percent_of_tpo\n        vah_position := math.max(0, vah_position - 1)\n        current_sum += f_get_tpo_count(math.round(vah_position))\n        current_sum\n    if current_sum < tpo_sum * i_percent_of_tpo\n        val_position := math.min(20, val_position + 1)\n        current_sum += f_get_tpo_count(math.round(val_position))\n        current_sum\n\nvah_value = session_high - tpo_section_range * vah_position\nval_value = session_high - tpo_section_range * (val_position + 1)\n```\n\n----------------------------------------\n\nTITLE: Second Pivot High Low Data Processing in PineScript\nDESCRIPTION: Implements the second pivot high/low detector, which can run on a different timeframe than the first one. It follows the same pattern of initializing arrays, calculating pivot points, and drawing them conditionally based on user settings.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_21\n\nLANGUAGE: pine\nCODE:\n```\n// Arrays\nvar phl_2_ln_arr = array.new_line(i_phl_2_showlast)\nvar phl_2_lbl_arr = array.new_label(i_phl_2_showlast)\n\n// Get Data\nphl_2_bars_htf = int(f_tfResInMinutes(i_phl_2_tf) / res_in_minutes)\nphl_2_bars_offset = int(i_phl_2_left * phl_2_bars_htf)\n\nfloat phl_2_ph = ta.pivothigh(_high, i_phl_2_left, i_phl_2_right)\nfloat phl_2_pl = ta.pivotlow(_low, i_phl_2_left, i_phl_2_right)\n\nphl_2_ph_htf = request.security(syminfo.tickerid, i_phl_2_tf, phl_2_ph)\nphl_2_pl_htf = request.security(syminfo.tickerid, i_phl_2_tf, phl_2_pl)\nphl_2_ph_new = na(phl_2_ph_htf[1]) and not na(phl_2_ph_htf)\nphl_2_pl_new = na(phl_2_pl_htf[1]) and not na(phl_2_pl_htf)\n\nphl_2_ph_offset = f_offsetToP(_high, phl_2_ph_htf, math.min(i_max_bars_back, math.max(30, phl_2_bars_offset + phl_2_bars_htf + 1)))\nphl_2_pl_offset = f_offsetToP(_low, phl_2_pl_htf, math.min(i_max_bars_back, math.max(30, phl_2_bars_offset + phl_2_bars_htf + 1)))\n\n// Draw\nif i_phl_2_show and phl_2_bars_offset <= i_max_bars_back\n    f_addLines(i_phl_2_lbl_show, phl_2_ph_htf, phl_2_pl_htf, phl_2_ph_offset, phl_2_pl_offset, phl_2_ph_new, phl_2_pl_new, i_phl_2_h_ln_color, i_phl_2_l_ln_color, i_phl_2_showlast, i_phl_2_ln_width, i_phl_2_ln_stye, phl_2_ln_arr, phl_2_lbl_arr)   \n\nif i_phl_2_show\n    f_extendArray(phl_2_ln_arr, phl_2_lbl_arr, i_phl_2_ln_extend)\n```\n\n----------------------------------------\n\nTITLE: Setting FVG Indicator Parameters in PineScript\nDESCRIPTION: Configures specific parameters for the Fair Value Gap indicator, including gap closure, box limits, and deviation settings. These inputs fine-tune the FVG detection algorithm.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_2\n\nLANGUAGE: pinescript\nCODE:\n```\nbool closeGapsPartially = input.bool(defval = true, title = 'Close FVG Partially', group = g_gap)\nint boxLimitInput = input.int(defval = 15, title = 'Max Number of FVG', minval = 1, maxval = 500, group = g_gap)\nfloat minimalDeviationInput = nz(input.float(defval = 70.0, title = 'Minimal Deviation (%)', tooltip = minimalDeviationTooltip, minval = 1, maxval = 100, group = g_gap) / 100 * ta.sma(high - low, 14))\nbool limitBoxLengthBoolInput = input.bool(defval = false, title = 'Max Bars', tooltip = 'Limit Max Gap Trail Length (bars)', inline = 'Length Limit', group = g_gap)\nint limitBoxLengthIntInput = input.int(defval = 300, title = '', inline = 'Length Limit', minval = 1, group = g_gap)\n```\n\n----------------------------------------\n\nTITLE: Timeframe Resolution Calculation Functions in PineScript\nDESCRIPTION: Implements functions to calculate and convert timeframe resolutions to minutes. These functions help with multi-timeframe analysis by normalizing different timeframes to a common unit of measurement.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_14\n\nLANGUAGE: pine\nCODE:\n```\nf_resInMinutes() =>\n    _resInMinutes = timeframe.multiplier * (timeframe.isseconds ? 1. / 60. : timeframe.isminutes ? 1. : timeframe.isdaily ? 1440. : timeframe.isweekly ? 10080. : timeframe.ismonthly ? 43800. : na)\n    _resInMinutes\n\nf_tfResInMinutes(_resolution) =>\n    request.security(syminfo.tickerid, _resolution, f_resInMinutes())\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Table Display in PineScript\nDESCRIPTION: Sets up parameters for displaying a data table with FVG analysis results. This includes options for table visibility, position, and text size, enhancing the presentation of scanner results.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_4\n\nLANGUAGE: pinescript\nCODE:\n```\nbool i_tbl_data_show = input.bool(defval = true, title = 'Display Table', group = g_dtb)\nstring i_tbl_data_pos = input.string(defval = position.bottom_right, title = 'Position', options = [position.top_left, position.top_center, position.top_right, position.middle_left, position.middle_center, position.middle_right, position.bottom_left, position.bottom_center, position.bottom_right], group = g_dtb)\nstring i_tbl_data_txt_size = input.string(defval = size.normal, title = 'Size', options = [size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group = g_dtb)\n```\n\n----------------------------------------\n\nTITLE: Implementing Screener Functionality in PineScript\nDESCRIPTION: This code section implements a screener functionality allowing users to input multiple symbols for analysis. It includes options for continuous or flip signals, direction filtering, and table display settings.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\ng_scrtb = '█████████████████ Screener █████████████████'\n\nstring i_scr_choose = input.string(defval='Continuous Signals', title='Screening Method', options=['Continuous Signals', 'Flip Signals'], group=g_scrtb)\n\ntt_is = \"• Reads only up to first 40 symbols.\" +\n     \"\\n• Total characters cannot exceed 4096.\" +\n     \"\\n• Use comma as delimiter without any space.\" +\n     \"\\n• Eg: EXCHANGE:SYMBOL_A,EXCHANGE:SYMBOL_B\"\n\nstring i_symbols = input.text_area(\n defval=\"NSE:NIFTY,NSE:NIFTYJR,NSE:BANKNIFTY,NSE:CNXFINANCE,NSE:NIFTY_MID_SELECT,BSE:SENSEX,BSE:SNSX50,BSE:BANK,NSE:ASHOKLEY,NSE:BANKBARODA,NSE:BANKINDIA,NSE:BEL,NSE:BHEL,NSE:CANBK,NSE:COALINDIA,NSE:ENGINERSIN,NSE:GAIL,NSE:HINDCOPPER,NSE:HUDCO,NSE:IEX,NSE:IRCON,NSE:IRFC,NSE:JSWINFRA,NSE:MOTHERSON,NSE:NATIONALUM,NSE:NBCC,NSE:NCC,NSE:NHPC,NSE:NMDC,NSE:NTPC,NSE:ONGC,NSE:PFC,NSE:PNB,NSE:POWERGRID,NSE:RAILTEL,NSE:RVNL,NSE:SAIL,NSE:SJVN,NSE:UNIONBANK,NSE:VEDL,NSE:ZEEL,NSE:ZOMATO\", \n title=\"Paste Symbols\", tooltip=tt_is, group=g_scrtb)\n\nstring i_scr_direction = input.string(defval='Both', title='Direction', options=['Both', 'Long', 'Short'], inline='tb_1', group=g_scrtb)\nbool i_scr_show_bull  = input.bool(defval=true, title='Only Long', inline='tb_2', group=g_scrtb)\nbool i_scr_show_bear  = input.bool(defval=true, title='Only Short', inline='tb_2', group=g_scrtb)\n\nint i_scr_tbl_disp_rows = input.int(defval=12, title='Display Rows', minval=0, maxval=100, group=g_scrtb)\nstring i_scr_tbl_position = input.string(defval=position.bottom_left, title='Table Position', options=[position.top_left, position.top_center, position.top_right, position.middle_left, position.middle_center, position.middle_right, position.bottom_left, position.bottom_center, position.bottom_right], group=g_scrtb)\nstring i_scr_tbl_text_size = input.string(defval=size.small, title='Table Size', options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group=g_scrtb)\n```\n\n----------------------------------------\n\nTITLE: Calling Screener for Multiple Symbols in PineScript\nDESCRIPTION: Executes the screener function for multiple predefined symbol identifiers (tid_01 to tid_40) to collect data from different trading instruments.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_25\n\nLANGUAGE: PineScript\nCODE:\n```\n// Call Screener function for multiple symbols\nscreener(tid_01), screener(tid_02), screener(tid_03), screener(tid_04), screener(tid_05), screener(tid_06), screener(tid_07),\nscreener(tid_08), screener(tid_09), screener(tid_10), screener(tid_11), screener(tid_12), screener(tid_13), screener(tid_14),\nscreener(tid_15), screener(tid_16), screener(tid_17), screener(tid_18), screener(tid_19), screener(tid_20), screener(tid_21),\nscreener(tid_22), screener(tid_23), screener(tid_24), screener(tid_25), screener(tid_26), screener(tid_27), screener(tid_28),\nscreener(tid_29), screener(tid_30), screener(tid_31), screener(tid_32), screener(tid_33), screener(tid_34), screener(tid_35),\nscreener(tid_36), screener(tid_37), screener(tid_38), screener(tid_39), screener(tid_40)\n```\n\n----------------------------------------\n\nTITLE: Creating TPO Value Retrieval Function\nDESCRIPTION: Implements a helper function to retrieve TPO values by index, allowing easy access to the frequency counts of different price sections. This simplifies later calculations for Point of Control and Value Areas.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] Market Profile with Screener (Based on [RS]Market Profile by RicardoSantos).txt#2025-04-16_snippet_6\n\nLANGUAGE: pine script\nCODE:\n```\n//  ||--    function to retrieve a specific tpo value\nf_get_tpo_count(_value) =>\n    _return = switch (_value)\n        0 => tpo_00\n        1 => tpo_01\n        2 => tpo_02\n        3 => tpo_03\n        4 => tpo_04\n        5 => tpo_05\n        6 => tpo_06\n        7 => tpo_07\n        8 => tpo_08\n        9 => tpo_09\n        10 => tpo_10\n        11 => tpo_11\n        12 => tpo_12\n        13 => tpo_13\n        14 => tpo_14\n        15 => tpo_15\n        16 => tpo_16\n        17 => tpo_17\n        18 => tpo_18\n        19 => tpo_19\n        20 => tpo_20\n        => 0.0\n```\n\n----------------------------------------\n\nTITLE: Matrix Row Trimming Function in PineScript\nDESCRIPTION: Ensures the matrix does not exceed the maximum number of display rows (i_scr_tbl_disp_rows) by removing excess rows from the bottom of the matrix.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_26\n\nLANGUAGE: PineScript\nCODE:\n```\n// Trim excess rows in the matrix\nif matrix.rows(matrix) > i_scr_tbl_disp_rows\n    while matrix.rows(matrix) > i_scr_tbl_disp_rows\n        matrix.remove_row(matrix, matrix.rows(matrix) - 1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Equal High Low Pivot Parameters in PineScript\nDESCRIPTION: Sets up input parameters for the Equal High Low pivot detector, including the percentage threshold for determining equal highs/lows, color settings for bearish and bullish signals, and transparency settings.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_12\n\nLANGUAGE: pine\nCODE:\n```\ntt_eq = \"Lower values mean highs and lows are closer.\"\nfloat i_phl_eq_percent = input.float(defval=0.05, minval=0, step=0.01, title='Equal HL %', tooltip=tt_eq, group=g_phl_eq) \ncolor i_phl_eq_h_ln_color = input.color(defval=#F7525F, title='Bearish Color', group=g_phl_eq)\ncolor i_phl_eq_l_ln_color = input.color(defval=#22AB94, title='Bullish Color', group=g_phl_eq)\nint i_phl_eq_transp = input.int(defval=25, minval=0, title='Transparency', group=g_phl_eq)\n```\n\n----------------------------------------\n\nTITLE: Processing CSV Symbol Lists for Multi-Symbol Screener in PineScript\nDESCRIPTION: Functions to parse CSV input strings containing trading symbols. Includes a feed function to process the input and dynamic array handling to extract and store up to 40 individual symbols for scanning.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Scanner] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_9\n\nLANGUAGE: PineScript\nCODE:\n```\n// Feed Function\nfeed(input_string) =>\n    if na(input_string) or str.length(input_string) == 0\n        [string(na), string(na)]\n    else\n        result = str.split(input_string, ',')\n        first_item = ''\n        for i = 0 to array.size(result) - 1 by 1\n            trimmed = str.trim(array.get(result, i))\n            if trimmed != ''\n                first_item := trimmed\n                break\n        remaining = str.replace(input_string, first_item + ',', '', 1)\n        [first_item, remaining]\n\n// Flexible Symbol Extraction\nsym_split_arr = str.split(i_symbols, ',')\nnew_sym_arr = array.new_string(array.size(sym_split_arr), na)\nfor i = 0 to array.size(sym_split_arr) - 1 by 1\n    trimmed = str.trim(array.get(sym_split_arr, i))\n    if trimmed != ''\n        array.set(new_sym_arr, i, trimmed)\n\n// Assign symbols dynamically\nt_01 = array.size(new_sym_arr) > 0 ? array.get(new_sym_arr, 0) : na\nt_02 = array.size(new_sym_arr) > 1 ? array.get(new_sym_arr, 1) : na\nt_03 = array.size(new_sym_arr) > 2 ? array.get(new_sym_arr, 2) : na\nt_04 = array.size(new_sym_arr) > 3 ? array.get(new_sym_arr, 3) : na\nt_05 = array.size(new_sym_arr) > 4 ? array.get(new_sym_arr, 4) : na\nt_06 = array.size(new_sym_arr) > 5 ? array.get(new_sym_arr, 5) : na\nt_07 = array.size(new_sym_arr) > 6 ? array.get(new_sym_arr, 6) : na\nt_08 = array.size(new_sym_arr) > 7 ? array.get(new_sym_arr, 7) : na\nt_09 = array.size(new_sym_arr) > 8 ? array.get(new_sym_arr, 8) : na\nt_10 = array.size(new_sym_arr) > 9 ? array.get(new_sym_arr, 9) : na\nt_11 = array.size(new_sym_arr) > 10 ? array.get(new_sym_arr, 10) : na\nt_12 = array.size(new_sym_arr) > 11 ? array.get(new_sym_arr, 11) : na\nt_13 = array.size(new_sym_arr) > 12 ? array.get(new_sym_arr, 12) : na\nt_14 = array.size(new_sym_arr) > 13 ? array.get(new_sym_arr, 13) : na\nt_15 = array.size(new_sym_arr) > 14 ? array.get(new_sym_arr, 14) : na\nt_16 = array.size(new_sym_arr) > 15 ? array.get(new_sym_arr, 15) : na\nt_17 = array.size(new_sym_arr) > 16 ? array.get(new_sym_arr, 16) : na\nt_18 = array.size(new_sym_arr) > 17 ? array.get(new_sym_arr, 17) : na\nt_19 = array.size(new_sym_arr) > 18 ? array.get(new_sym_arr, 18) : na\nt_20 = array.size(new_sym_arr) > 19 ? array.get(new_sym_arr, 19) : na\nt_21 = array.size(new_sym_arr) > 20 ? array.get(new_sym_arr, 20) : na\nt_22 = array.size(new_sym_arr) > 21 ? array.get(new_sym_arr, 21) : na\nt_23 = array.size(new_sym_arr) > 22 ? array.get(new_sym_arr, 22) : na\nt_24 = array.size(new_sym_arr) > 23 ? array.get(new_sym_arr, 23) : na\nt_25 = array.size(new_sym_arr) > 24 ? array.get(new_sym_arr, 24) : na\nt_26 = array.size(new_sym_arr) > 25 ? array.get(new_sym_arr, 25) : na\nt_27 = array.size(new_sym_arr) > 26 ? array.get(new_sym_arr, 26) : na\nt_28 = array.size(new_sym_arr) > 27 ? array.get(new_sym_arr, 27) : na\nt_29 = array.size(new_sym_arr) > 28 ? array.get(new_sym_arr, 28) : na\nt_30 = array.size(new_sym_arr) > 29 ? array.get(new_sym_arr, 29) : na\nt_31 = array.size(new_sym_arr) > 30 ? array.get(new_sym_arr, 30) : na\nt_32 = array.size(new_sym_arr) > 31 ? array.get(new_sym_arr, 31) : na\nt_33 = array.size(new_sym_arr) > 32 ? array.get(new_sym_arr, 32) : na\nt_34 = array.size(new_sym_arr) > 33 ? array.get(new_sym_arr, 33) : na\nt_35 = array.size(new_sym_arr) > 34 ? array.get(new_sym_arr, 34) : na\nt_36 = array.size(new_sym_arr) > 35 ? array.get(new_sym_arr, 35) : na\nt_37 = array.size(new_sym_arr) > 36 ? array.get(new_sym_arr, 36) : na\nt_38 = array.size(new_sym_arr) > 37 ? array.get(new_sym_arr, 37) : na\nt_39 = array.size(new_sym_arr) > 38 ? array.get(new_sym_arr, 38) : na\nt_40 = array.size(new_sym_arr) > 39 ? array.get(new_sym_arr, 39) : na\n```\n\n----------------------------------------\n\nTITLE: Implementing Cumulative Volume Calculation in PineScript\nDESCRIPTION: A function that calculates the cumulative volume through the trading day, resetting on each new day. It also calculates the percentage change in volume between the current and previous day.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Indicator - Trend Following Setup - Sideways Market Skipper.txt#2025-04-16_snippet_4\n\nLANGUAGE: pinescript\nCODE:\n```\n// Function to calculate Daily Cumulative Volume\ncumulative_volume() =>\n    var float _cum_vol = na\n    _is_new_day = ta.change(time('D')) != 0 ? 1 : 0\n    _cum_vol := _is_new_day ? volume : (na(_cum_vol) ? volume : (_cum_vol + volume))\n    _cum_vol\n\n// Calculate current and previous day cumulative volumes\nvar float current_cum_vol = na\nvar float prev_cum_vol = na\n\nif ta.change(time('D')) != 0\n    prev_cum_vol := current_cum_vol\n    current_cum_vol := volume\nelse\n    current_cum_vol += volume\n\n// Calculate Cumulative Volume Percentage Change\ncum_vol_pchg = (current_cum_vol - nz(prev_cum_vol, current_cum_vol)) / nz(prev_cum_vol, current_cum_vol) * 100\n```\n\n----------------------------------------\n\nTITLE: Implementing Zig Zag Calculation for Market Structure Analysis in PineScript\nDESCRIPTION: Calculates Zig Zag patterns based on user-defined parameters. Includes logic for determining pivot points, direction changes, and updating the Zig Zag array. This forms the basis for identifying market structure shifts.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Market Structure Shift (MSS)/ICT Market Structure Shift (MSS) Screener.txt#2025-04-16_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\n//_____________________________ Get Source\n\nfloat _high = i_zz_source == 'Open/Close' ? math.max(open, close) : high\nfloat _low = i_zz_source == 'Open/Close' ? math.min(open, close) : low\n\n//============================== 1.  Variables\n\n//_____________________________ 1.1 Highest / Lowest\nfloat ph = ta.highestbars(_high, i_zz_period) == 0 ? _high : na\nfloat pl = ta.lowestbars(_low, i_zz_period) == 0 ? _low  : na\n\n//_____________________________ 1.2 Dir\nvar int dir = 0, dir := pl and na(ph) ? -1 : ph and na(pl) ? 1 : dir\n\n//_____________________________ 1.4 Array\nvar max_array_size = 10, var zigzag = array.new_float(0), oldzigzag = array.copy(zigzag)\n\n//_____________________________ 1.5 Others\nvar line line_zz = na\n\n//============================== 3.  Custom Functions\n\nadd_to_zigzag(float[] pointer, float value, int bindex) =>\n    array.unshift(pointer, bindex)\n    array.unshift(pointer, value)\n    if array.size(pointer) > max_array_size\n        array.pop(pointer)\n        array.pop(pointer)\n    \nupdate_zigzag(float[] pointer, float value, int bindex, int dir) =>\n    if array.size(pointer) == 0\n        add_to_zigzag(pointer, value, bindex)\n    else\n        if dir == 1 and value > array.get(pointer, 0) or dir == -1 and value < array.get(pointer, 0)\n            array.set(pointer, 0, value)\n            array.set(pointer, 1, bindex)\n        0.\n\n//============================== 4.  Calculations\n\ndirchanged = ta.change(dir)\n\nif ph or pl\n    if dirchanged\n        add_to_zigzag(zigzag, dir == 1 ? ph : pl, bar_index)\n    else\n        update_zigzag(zigzag, dir == 1 ? ph : pl, bar_index, dir)\n\n//============================== 5.  Constructs\n\nif array.size(zigzag) >= 6\n    if array.get(zigzag, 0) != array.get(oldzigzag, 0) or array.get(zigzag, 1) != array.get(oldzigzag, 1)\n        if array.get(zigzag, 2) == array.get(oldzigzag, 2) and array.get(zigzag, 3) == array.get(oldzigzag, 3)\n            line.delete(line_zz)\n        if i_zz_show\n            line_zz := line.new(x1 = math.round(array.get(zigzag, 1)), y1 = array.get(zigzag, 0), x2 = math.round(array.get(zigzag, 3)), y2 = array.get(zigzag, 2), color = dir == 1 ? i_zz_bull_color : i_zz_bear_color, width=2)\n```\n\n----------------------------------------\n\nTITLE: Calculating ATR and Range in PineScript\nDESCRIPTION: Computes the Average True Range (ATR) using a user-defined moving average function. It also calculates a range based on either ATR or a fixed point value, which is used in the trading strategy.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Scanner - Trend Following Setup - Sideways Market Skipper Scanner.txt#2025-04-16_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\nma_function_atr(source, length) =>\n\tswitch i_atr_range_smoothing\n\t\t'RMA' => ta.rma(source, length)\n\t\t'SMA' => ta.sma(source, length)\n\t\t'EMA' => ta.ema(source, length)\n\t\t'WMA' => ta.wma(source, length)\n\natr = ma_function_atr(ta.tr(true), i_atr_range_length)\natr_sma = ta.sma(atr, i_atr_range_sma_length)\nplot(series=atr, title=\"ATR\", color=i_indicator_color)\nplot(series=atr_sma, title=\"ATR SMA\", color=i_signal_color)\n\n// Range Source\nrange_input = i_atr_range_choice == 'Auto ATR' ? (atr * i_atr_range_multiplier) : i_atr_range_points\nrange_source = i_atr_range_choice == 'Type Points' ? i_atr_range_points :range_input\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Table in PineScript\nDESCRIPTION: This snippet creates a data table displaying information such as percentage change, volume change, and current and previous day volumes. It uses the table.new and table.cell functions to construct and populate the table.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Scanner - ICT Liquidity Sweep Pattern Scanner.txt#2025-04-16_snippet_8\n\nLANGUAGE: pine\nCODE:\n```\nvar table tbl_data = table.new(position=i_tbl_data_pos, columns=2, rows=4, border_width=1, force_overlay=true)\n\nif barstate.islast and i_tbl_data_show\n    table.cell(table_id=tbl_data, column=0, row=0, text=\"%Chg\", text_color=i_neu_color, text_halign=text.align_left, bgcolor=bgcolor_1, text_size=i_tbl_data_txt_size)\n    table.cell(table_id=tbl_data, column=1, row=0, text=day_pchg_str, text_color=pchg_col, text_halign=text.align_right, bgcolor=bgcolor_1, text_size=i_tbl_data_txt_size)\n\n    table.cell(table_id=tbl_data, column=0, row=1, text=\"Vol %Chg\", text_color=i_neu_color, text_halign=text.align_left, bgcolor=bgcolor_2, text_size=i_tbl_data_txt_size)\n    table.cell(table_id=tbl_data, column=1, row=1, text=volume_pchg_str, text_color=vol_pchg_col, text_halign=text.align_right, bgcolor=bgcolor_2, text_size=i_tbl_data_txt_size)\n\n    table.cell(table_id=tbl_data, column=0, row=2, text=\"Vol\", text_color=i_neu_color, text_halign=text.align_left, bgcolor=bgcolor_1, text_size=i_tbl_data_txt_size)\n    table.cell(table_id=tbl_data, column=1, row=2, text=day_volume_str, text_color=vol_pchg_col, text_halign=text.align_right, bgcolor=bgcolor_1, text_size=i_tbl_data_txt_size)\n\n    table.cell(table_id=tbl_data, column=0, row=3, text=\"PD Vol\", text_color=i_neu_color, text_halign=text.align_left, bgcolor=bgcolor_2, text_size=i_tbl_data_txt_size)\n    table.cell(table_id=tbl_data, column=1, row=3, text=prev_day_volume_str, text_color=prev_vol_pchg_col, text_halign=text.align_right, bgcolor=bgcolor_2, text_size=i_tbl_data_txt_size)\n```\n\n----------------------------------------\n\nTITLE: Initializing Trend Following Indicator in PineScript\nDESCRIPTION: Sets up the main indicator with title, overlay, and max bars back settings. Defines input parameters for Supertrend and volatility range calculations.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Indicator - Trend Following Setup - Sideways Market Skipper.txt#2025-04-16_snippet_0\n\nLANGUAGE: pinescript\nCODE:\n```\n//@version=5\nindicator(title='Trend Following Setup - Sideways Market Skipper', shorttitle='Sideways Skip', overlay=false, max_bars_back=500)\n\n//_____________________________ Menu Supertrend Start\n\ng_st = '█████████████████ Supertrend █████████████████'\n//bool i_st_display = input.bool(defval=true, title='Display', group=g_st)\nint i_st_atr_period = input.int(defval=10, title=\"ATR Length\", minval=1, group=g_st)\nfloat i_st_factor = input.float(defval=3.0, title=\"Factor\", minval=0.01, step=0.01, group=g_st)\n\n//_____________________________ Menu Supertrend End\n\n//_____________________________ Menu Range Start\n\ng_r = '███████████████ Volatility Range ███████████████'\n\ntt_r = \n \"• 'Auto ATR': Automatically sets the range based on the ATR value.\" +\n \"\\n• The range adjusts automatically when switching between symbols.\" +\n \"\\n• The default ATR timeframe is 1 hour.\" +\n \"\\n• For a Supertrend Long Crossover, the range is defined by adding the ATR value.\" +\n \"\\n• For a Supertrend Short Crossunder, the range is defined by subtracting the ATR value.\" +\n \"\\n\\n• Type Points: Manually enter the points for different symbols to define the volatility range.\" +\n \"\\n• For example, the points are 60 for NIFTY and 120 for BANKNIFTY.\"\n\ntt_tp = \"Applicable only when 'Range Type' is selected as 'Type Points'.\"\n\ntt_atr_tf =\n \"• This uses the ATR value of the given timeframe.\" +\n \"\\n• The default ATR timeframe is 1 hour.\"\n\nbool i_atr_range_display = input.bool(defval=true, title='Display', group=g_r)\nstring i_atr_range_choice = input.string(defval='Auto ATR', title='Range Type', options=['Auto ATR', 'Type Points'], tooltip=tt_r, group=g_r)\nfloat i_atr_range_points = input.float(defval=120, title=\"Type Points\", minval=0.01, tooltip=tt_tp, group=g_r)\n\n//string i_atr_range_timeframe = input.timeframe(defval='60', title='ATR Timeframe', tooltip=tt_atr_tf, group=g_r)\nint i_atr_range_length = input.int(defval=14, title='ATR Length', minval=1, group=g_r)\nstring i_atr_range_smoothing = input.string(title=\"ATR Smoothing\", defval=\"RMA\", options=[\"RMA\", \"SMA\", \"EMA\", \"WMA\"], group=g_r)\nfloat i_atr_range_multiplier = input.float(defval=1.5, title=\"ATR Multiplier\", minval=1, step=0.5, group=g_r)\nint i_atr_range_sma_length = input.int(defval=14, title='ATR SMA Length', minval=1, group=g_r)\n```\n\n----------------------------------------\n\nTITLE: Creating Data Table for Trading Statistics in PineScript\nDESCRIPTION: Generates a data table displaying key trading statistics such as percentage change, volume percentage change, and current and previous day volumes. The table is updated on each bar and uses color coding for positive and negative values.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Scanner - Trend Following Setup - Sideways Market Skipper Scanner.txt#2025-04-16_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\n// To String\nday_pchg_str = str.tostring(cum_pchg,\"#.##\") + ' %'\nvolume_pchg_str = str.tostring(cum_vol_pchg,\"#.##\") + ' %'\nday_volume_str = str.tostring(current_cum_vol/100000,\"#.##\") + ' L'\nprev_day_volume_str = str.tostring(prev_cum_vol/100000,\"#.##\") + ' L'\n\n// Color\nbgcolor_1 = i_neu_dark_color\nbgcolor_2 = i_neu_mid_color\n\npchg_col = cum_pchg > 0 ? i_pos_color : i_neg_color\nvol_pchg_col = cum_vol_pchg > 0 ? i_pos_color : i_neg_color\nprev_vol_pchg_col = prev_cum_vol < current_cum_vol ? i_neg_color : i_pos_color\n\n// Plot Table\nvar table tbl_data = table.new(position=i_tbl_data_pos, columns=2, rows=4, border_width=1, force_overlay=true)\n\nif barstate.islast and i_tbl_data_show\n    table.cell(table_id=tbl_data, column=0, row=0, text=\"%Chg\", text_color=i_neu_color, text_halign=text.align_left, bgcolor=bgcolor_1, text_size=i_tbl_data_txt_size)\n    table.cell(table_id=tbl_data, column=1, row=0, text=day_pchg_str, text_color=pchg_col, text_halign=text.align_right, bgcolor=bgcolor_1, text_size=i_tbl_data_txt_size)\n\n    table.cell(table_id=tbl_data, column=0, row=1, text=\"Vol %Chg\", text_color=i_neu_color, text_halign=text.align_left, bgcolor=bgcolor_2, text_size=i_tbl_data_txt_size)\n    table.cell(table_id=tbl_data, column=1, row=1, text=volume_pchg_str, text_color=vol_pchg_col, text_halign=text.align_right, bgcolor=bgcolor_2, text_size=i_tbl_data_txt_size)\n\n    table.cell(table_id=tbl_data, column=0, row=2, text=\"Vol\", text_color=i_neu_color, text_halign=text.align_left, bgcolor=bgcolor_1, text_size=i_tbl_data_txt_size)\n    table.cell(table_id=tbl_data, column=1, row=2, text=day_volume_str, text_color=vol_pchg_col, text_halign=text.align_right, bgcolor=bgcolor_1, text_size=i_tbl_data_txt_size)\n\n    table.cell(table_id=tbl_data, column=0, row=3, text=\"PD Vol\", text_color=i_neu_color, text_halign=text.align_left, bgcolor=bgcolor_2, text_size=i_tbl_data_txt_size)\n```\n\n----------------------------------------\n\nTITLE: Indicator Table Configuration in PineScript\nDESCRIPTION: Sets up a table display for technical indicators with color-coded values based on threshold conditions for percentage change, RSI, and MFI indicators.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup.txt#2025-04-16_snippet_6\n\nLANGUAGE: pinescript\nCODE:\n```\nvar table tbl = table.new(position=i_tbl_position, columns=2, rows=5, border_width=2)\n\n// Color\ncol_pchg = pchg > i_pchg_250 ? i_pos_col : pchg < (-i_pchg_250) ? i_neg_col : i_neu_col\ncol_rsi = rsi > i_rsi_ob ? i_pos_col : rsi < i_rsi_os ? i_neg_col : i_neu_col\ncol_mfi = mfi > i_mfi_ob ? i_pos_col : mfi < i_mfi_os ? i_neg_col : i_neu_col\n```\n\n----------------------------------------\n\nTITLE: Implementing Additional Filters for Signal Refinement in Pine Script\nDESCRIPTION: Defines user interface inputs for various filtering options including percentage change, volume, ATR, body size, time, and date filters. Each filter comes with detailed tooltips explaining their purpose and usage.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_3\n\nLANGUAGE: Pine Script\nCODE:\n```\ng_af = '███████████████ Additional Fiters ███████████████'\ntt_pchg = \n \"• If '% Change Above/Below +/-' is 4, it means relative volume is considered when the price change is above 4%.\" +\n \"\\n• A value of 4% is positive for bullish scenarios and negative for bearish scenarios.\" +\n \"\\n• The percentage change is calculated using cumulative percentage change, so there might be a minor difference between the actual and displayed percentage change.\"\ntt_vpchg = \n \"• If 'Volume % Change Above' is 0, it means Relative Volume is considered when today's volume is greater than the previous day's volume.\" +\n \"\\n• For 'Screening Method' choice 'Retracement to EMA,' the 'Apply Volume % Change Filter' can be unchecked.\" +\n \"\\n• A 'Volume % Change Above' 300% or more often indicates a major breakout, which may happen today or the next day.\" +\n \"\\n• The volume percentage change is calculated using cumulative percentage change, so there might be a minor difference between the actual and displayed percentage change.\"\ntt_atr = \n \"• ATR helps filter out longer or more volatile signal candles.\"\ntt_atr_mul =\n \"• Higher multiplier value filters a longer or more volatile signal candle.\"\ntt_bf =\n \"• If the input is '80', it means the body covers over 80% of the candle.\"\ntt_bs =\n \"• 2 means the candle is 2 times larger than the previous candle.\"\ntt_vol =\n \"• Filter out a candle when its volume is greater than the SMA of the volume.\"\ntt_rv =\n \"• Filter out a candle when its volume is greater than the Relative Volume.\"\ntt_tf =\n \"• Filter out a signals between the given Time.\"\ntt_df =\n \"• Filter out a signals on the given Date.\" +\n  \"\\n• This Time Filter is applicable only for 'Displacement Candles'.\"\n\nbool i_pchg_filter = input.bool(defval=false, title='Apply % Change Filter', tooltip=tt_pchg, group=g_af)\nfloat i_pchg_above_below = input.float(defval=2, title='% Change Above/Below +/-', minval=0, group=g_af)\n\nbool i_vol_filter = input.bool(defval=false, title='Apply Volume Filter', tooltip=tt_vpchg, group=g_af)\nint i_vol_above = input.int(defval=500000, title='Volume Above', minval=0, group=g_af)\n\nbool i_vol_pchg_filter = input.bool(defval=false, title='Apply Volume % Change Filter', tooltip=tt_vpchg, group=g_af)\nfloat i_vol_pchg_above = input.float(defval=0, title='Volume % Change Above', minval=0, group=g_af)\n\nbool i_atr_filter = input.bool(defval=false, title='Apply ATR Filter', tooltip=tt_atr, group=g_af)\nint i_atr_length = input.int(defval=14, minval=1, title='ATR Length', group=g_af)\nfloat i_atr_multi = input.float(defval=1, title='ATR Multiplier', minval=1, group=g_af)\n\nbool i_body_filter = input.bool(defval=false, title='Apply Body % Filter', tooltip=tt_bf, group=g_af)\nfloat i_body_percent = input.float(defval=60, title='Body % Above', minval=0, maxval=100, group=g_af) / 100\n\nbool i_body_size_filter = input.bool(defval=false, title='Apply Body Size Filter', tooltip=tt_bs, group=g_af)\nint i_body_size_multiplier = input.int(defval=2, title='Body Size Multiplier (x)', minval=0,  group=g_af)\n\nbool i_volume_filter = input.bool(defval=false, title='Apply Volume Filter', tooltip=tt_vol, group=g_af)\nint i_vol_sma_length = input.int(defval=20, minval=1, title='Volume SMA Length', group=g_af)\n\nbool i_rel_vol_filter = input.bool(defval=false, title='Apply FVG Retracement Filter', tooltip=tt_rv, group=g_af)\nint i_rel_vol_avg_vol_len = input.int(defval=90, title='FVG Retracement Length', minval=2, group=g_af)\nfloat i_rel_vol_avg_vol_multi = input.float(defval=5, title='Rel Vol SMA Multiplier', minval=0, group=g_af)\n\nbool i_time_filter = input.bool(defval=false, title='Apply Time Filter', tooltip=tt_tf, group=g_af)\nint i_hour_1 = input.int(defval=9, minval=0, title='Time From', inline='t_1', group=g_af)\nint i_minute_1 = input.int(defval=15, minval=0, title=':', inline='t_1', group=g_af)\nint i_hour_2 = input.int(defval=10, minval=0, title='Time To ', inline='t_2', group=g_af)\nint i_minute_2 = input.int(defval=15, minval=0, title=':', inline='t_2', group=g_af)\n\nbool i_date_filter = input.bool(defval=false, title='Apply Date Filter', tooltip=tt_df, group=g_af)\nint i_day = input.int(defval=25, minval=1, maxval=31, title='Day', group=g_af)\nint i_month = input.int(defval=10, minval=1, maxval=12, title='Month', group=g_af)\nint i_year = input.int(defval=2024, minval=0, title='Year', group=g_af)\n```\n\n----------------------------------------\n\nTITLE: Table Cell Population Function in PineScript\nDESCRIPTION: Defines a helper function to populate cells in a TradingView table with text and styling. The function handles text alignment, background color, and text size.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup.txt#2025-04-16_snippet_8\n\nLANGUAGE: pine\nCODE:\n```\n// Function to populate cells in the table\ncell(int column, int row, string txt, color color) => \n    table.cell(tbl, column, row, text = txt, text_color = color, text_halign=text.align_left, bgcolor = color.new(color, 90), text_size=i_tbl_text_size)\n```\n\n----------------------------------------\n\nTITLE: Sequential Symbol Extraction from CSV List in PineScript\nDESCRIPTION: Sequential extraction of up to 40 ticker symbols from a CSV input list using the feed function. Each extraction returns the current symbol and the remaining list, which is passed to the next extraction call.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Scanner - ICT Liquidity Sweep Pattern Scanner.txt#2025-04-16_snippet_10\n\nLANGUAGE: pine\nCODE:\n```\n[tid_01, out_01] = feed(i_symbols), [tid_02, out_02] = feed(out_01), [tid_03, out_03] = feed(out_02), [tid_04, out_04] = feed(out_03),\n[tid_05, out_05] = feed(out_04), [tid_06, out_06] = feed(out_05), [tid_07, out_07] = feed(out_06), [tid_08, out_08] = feed(out_07),\n[tid_09, out_09] = feed(out_08), [tid_10, out_10] = feed(out_09), [tid_11, out_11] = feed(out_10), [tid_12, out_12] = feed(out_11),\n[tid_13, out_13] = feed(out_12), [tid_14, out_14] = feed(out_13), [tid_15, out_15] = feed(out_14), [tid_16, out_16] = feed(out_15),\n[tid_17, out_17] = feed(out_16), [tid_18, out_18] = feed(out_17), [tid_19, out_19] = feed(out_18), [tid_20, out_20] = feed(out_19),\n[tid_21, out_21] = feed(out_20), [tid_22, out_22] = feed(out_21), [tid_23, out_23] = feed(out_22), [tid_24, out_24] = feed(out_23),\n[tid_25, out_25] = feed(out_24), [tid_26, out_26] = feed(out_25), [tid_27, out_27] = feed(out_26), [tid_28, out_28] = feed(out_27),\n[tid_29, out_29] = feed(out_28), [tid_30, out_30] = feed(out_29), [tid_31, out_31] = feed(out_30), [tid_32, out_32] = feed(out_31),\n[tid_33, out_33] = feed(out_32), [tid_34, out_34] = feed(out_33), [tid_35, out_35] = feed(out_34), [tid_36, out_36] = feed(out_35),\n[tid_37, out_37] = feed(out_36), [tid_38, out_38] = feed(out_37), [tid_39, out_39] = feed(out_38), [tid_40, out_40] = feed(out_39)\n```\n\n----------------------------------------\n\nTITLE: Strategy Documentation in PineScript Comments\nDESCRIPTION: Documentation section explaining the trading strategy logic and intended usage. It describes how the long and short signals are generated based on Supertrend crosses and volatility range breakouts.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Indicator - Trend Following Setup - Sideways Market Skipper.txt#2025-04-16_snippet_9\n\nLANGUAGE: pinescript\nCODE:\n```\n// Readme First:\n// \n// Trend Following Setup - Sideways Market Skipper Scanner\n// \n// Long Signal Logic:\n//  - Close crosses above the Supertrend.\n//  - Add ATR value (with multiplier) to the close to identify the potential sideways or volatility range.\n//  - When the price crosses this range, it's considered a breakout.\n//  - The ATR should be rising or the volatility is increasing.\n// \n// Short Signal Logic:\n//  - Close crosses below the Supertrend.\n//  - Substract ATR value (with multiplier) to the close to identify the potential sideways or volatility range.\n//  - When the price crosses this range, it's considered a breakdown.\n//  - The ATR should be rising or the volatility is increasing.\n//\n// Entry: Enter after the retracement once the signal is generated.\n```\n\n----------------------------------------\n\nTITLE: Multi-Symbol Order Block Screener Implementation in PineScript\nDESCRIPTION: Creates a screener that scans multiple symbols for order block signals. The code processes data from multiple symbols, identifies bullish and bearish conditions, and displays the results in a matrix format that can be rendered as a table.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] ICT Retracement to Order Block with Screener.txt#2025-04-16_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\n// Screener Conditions\nbullish_cond = teritiary_long_signal\nbearish_cond = teritiary_short_signal\n\n// Define Bull and Bear Conditions\nbull = not(i_scr_direction == \"Bearish\")\nbear = not(i_scr_direction == \"Bullish\")\n\n// Function for Screener Indicator Calculation\nindicator_calculation() =>\n    // Initialize variables\n    price = float(na)\n    _time = int(na)\n    indicator = \"\"\n    signal = int(na) \n\n    if barstate.isconfirmed\n        // Check for Bearish Momentum Candle and conditions (Modify here to customize indicators)\n        if i_scr_show_bear_mc and bearish_cond and bear \n            indicator := \"▼\"\n            signal := -1\n\n        // Check for Bullish Momentum Candle and conditions (Modify here to customize indicators)\n        else if i_scr_show_bull_mc and bullish_cond and bull\n            indicator := \"▲\"\n            signal := 1\n\n        // Update price and time if signal is not null\n        if not na(signal)\n            price := math.round_to_mintick(close)\n            _time := time\n\n    [_time, indicator, price, signal]\n\n// Function to format time\nformat_time(x) =>\n    timezone = syminfo.timezone\n    timeframe.isintraday ? str.format_time(x, \"HH:mm  dd-MM-yyyy\", timezone) : str.format_time(x, \"dd-MM-yyyy\", timezone)\n\n// Function to extract symbol name\nsymbol(s) => \n    array.get(str.split(s, \":\"), 1)\n\n// Matrix setup\nvar matrix = matrix.new<string>(0, 5, na)\n\n// Function to add rows to the matrix\nmtxFun(symbol, _time, indicator, price, signal) =>\n    matrix.add_row(matrix, 0, array.from(symbol, _time, indicator, price, signal))\n\n// Screener function to collect data\nscreener(s) =>\n    sym = ticker.modify(s, syminfo.session)\n    [_time, indicator, price, signal] = request.security(sym, timeframe.period, indicator_calculation())\n\n    // Check if the signal is not na and the time matches\n    if not na(signal) and _time == time\n        symbolName = symbol(s)\n        formattedTime = format_time(_time)\n        strPrice = str.tostring(price)\n        strSignal = str.tostring(signal)\n        \n        // Add data to the matrix\n        mtxFun(symbolName, formattedTime, indicator, strPrice, strSignal)\n\n// Call Screener function for multiple symbols\nscreener(tid_001), screener(tid_002), screener(tid_003), screener(tid_004), screener(tid_005), screener(tid_006), screener(tid_007),\nscreener(tid_008), screener(tid_009), screener(tid_010), screener(tid_011), screener(tid_012), screener(tid_013), screener(tid_014),\nscreener(tid_015), screener(tid_016), screener(tid_017), screener(tid_018), screener(tid_019), screener(tid_020), screener(tid_021),\nscreener(tid_022), screener(tid_023), screener(tid_024), screener(tid_025), screener(tid_026), screener(tid_027), screener(tid_028),\nscreener(tid_029), screener(tid_030), screener(tid_031), screener(tid_032), screener(tid_033), screener(tid_034), screener(tid_035),\nscreener(tid_036), screener(tid_037), screener(tid_038), screener(tid_039), screener(tid_040)\n\n// Trim excess rows in the matrix\nif matrix.rows(matrix) > i_tbl_disp_rows\n    while matrix.rows(matrix) > i_tbl_disp_rows\n        matrix.remove_row(matrix, matrix.rows(matrix)-1)\n```\n\n----------------------------------------\n\nTITLE: Setting Background and Bar Colors for Trading Signals in PineScript\nDESCRIPTION: Code to set background and bar colors based on trading signals. Colors are set transparently for background and fully visible for bars when either short or long conditions are met.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup with Scanner.txt#2025-04-16_snippet_5\n\nLANGUAGE: pine\nCODE:\n```\nbgcolor(color=short_cont ? color.new(i_neg_light_col, 90) : long_cont ? color.new(i_pos_light_col, 90) : na, title='Signal Bgcolor', show_last=i_display_len)\nbarcolor(color=short_cont ? i_neg_light_col : long_cont ? i_pos_light_col : na, title='Signal Candle')\n```\n\n----------------------------------------\n\nTITLE: Initializing Supertrend Indicator in PineScript\nDESCRIPTION: Calculates the Supertrend indicator using ta.supertrend function and plots the results on the chart. The uptrend and downtrend are visualized with different colors.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Scanner - Trend Following Setup - Sideways Market Skipper Scanner.txt#2025-04-16_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\n[supertrend, direction] = ta.supertrend(i_st_factor, i_st_atr_period)\nsupertrend := barstate.isfirst ? na : supertrend\n\n// Plot Supertrend\nupTrend = plot(series=direction < 0 ? supertrend : na, title=\"Supertrend Up\", color=i_pos_color, style=plot.style_linebr, force_overlay=true)\ndownTrend = plot(series=direction < 0 ? na : supertrend, title=\"Supertrend Down\", color=i_neg_color, style=plot.style_linebr, force_overlay=true)\nbodyMiddle = plot(series=barstate.isfirst ? na : (open + close) / 2, title=\"Body Middle\", display=display.none, force_overlay=true)\nfill(plot1=bodyMiddle, plot2=upTrend, color=color.new(i_pos_color, 90), fillgaps=false)\nfill(plot1=bodyMiddle, plot2=downTrend, color=color.new(i_neg_color, 90), fillgaps=false)\n```\n\n----------------------------------------\n\nTITLE: Initializing ICT Market Structure Shift Screener in PineScript\nDESCRIPTION: Sets up the initial parameters and inputs for the ICT Market Structure Shift Screener indicator. Includes options for screening method, symbol input, direction filtering, and display settings.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Market Structure Shift (MSS)/ICT Market Structure Shift (MSS) Screener.txt#2025-04-16_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\n//@version=5\ni_max_bars_back = 300\nindicator(title=\"ICT Market Structure Shift (MSS) Screener\", shorttitle=\"ICT MSS Scr\", overlay=true, max_bars_back=i_max_bars_back, max_lines_count=500, max_boxes_count=500)\n\n//_____________________________ Menu Screener Start\n\ng_tb = '█████████████████ Screener █████████████████'\n\nstring i_scr_choose = input.string(defval='Market Structure Shift', title='Screening Method', options=['Market Structure Shift', 'Retracement to OTE / OB'], group=g_tb)\n\ntt_is = \"• Input exactly 40 symbols, nothing more or less.\" +\n     \"\\n• Total characters cannot exceed 4096.\" +\n     \"\\n• Use comma as delimiter without any space.\" +\n     \"\\n• Eg: EXCHANGE:SYMBOL_A,EXCHANGE:SYMBOL_B\"\n\nstring i_symbols = input.text_area(\n defval=\"NSE:ABCAPITAL,NSE:ABFRL,NSE:ASHOKLEY,NSE:BANDHANBNK,NSE:BANKBARODA,NSE:BEL,NSE:BHEL,NSE:BIOCON,NSE:CHAMBLFERT,NSE:COALINDIA,NSE:CUB,NSE:DELTACORP,NSE:EXIDEIND,NSE:GAIL,NSE:HINDCOPPER,NSE:IEX,NSE:IGL,NSE:INDIACEM,NSE:INDUSTOWER,NSE:IOC,NSE:JUBLFOOD,NSE:L_TFH,NSE:M_MFIN,NSE:MANAPPURAM,NSE:MOTHERSON,NSE:NATIONALUM,NSE:NMDC,NSE:NTPC,NSE:ONGC,NSE:PETRONET,NSE:PFC,NSE:PNB,NSE:POWERGRID,NSE:RBLBANK,NSE:RECLTD,NSE:SAIL,NSE:TATAPOWER,NSE:UPL,NSE:VEDL,NSE:ZEEL\", \n title=\"Paste Symbols\", tooltip=tt_is, group=g_tb)\n\nstring i_scr_direction = input.string(defval='Both', title='Direction', options=['Both', 'Bullish', 'Bearish'], inline='tb_1', group=g_tb)\nbool i_scr_show_bull  = input.bool(defval=true, title='Only Bullish', inline='tb_2', group=g_tb)\nbool i_scr_show_bear  = input.bool(defval=true, title='Only Bearish', inline='tb_2', group=g_tb)\n\nint i_tbl_disp_rows = input.int(defval=16, title='Display Rows', minval=0, maxval=100, group=g_tb)\ncolor i_neu_color = input.color(defval=#B2B5BE, title='Text Color', group=g_tb)\nstring i_tbl_position = input.string(defval=position.bottom_left, title='Table Position', options=[position.top_left, position.top_center, position.top_right, position.middle_left, position.middle_center, position.middle_right, position.bottom_left, position.bottom_center, position.bottom_right], group=g_tb)\nstring i_tbl_text_size = input.string(defval=size.small, title='Table Size', options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group=g_tb)\n```\n\n----------------------------------------\n\nTITLE: Pivot Line and Label Management Function in PineScript\nDESCRIPTION: Creates a function that manages the creation and deletion of pivot lines and labels. It maintains a fixed number of visual elements by removing older ones when new ones are added, ensuring efficient memory usage.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_17\n\nLANGUAGE: pine\nCODE:\n```\nf_drawPivotLineAndLabel(label_show, _x1, _x2, _yValue, _colorLine, _lineCount, _lineThickness, _lineStyle, _pivotArray, _labelArray) =>\n    line l = f_drawLine(_x1, _x2, _yValue, _colorLine, _lineThickness, _lineStyle)\n    label lab = f_drawLabel(label_show, _x1, _yValue, _colorLine)\n\n    if array.size(_pivotArray) == _lineCount\n        line.delete(array.shift(_pivotArray))\n        label.delete(array.shift(_labelArray))\n    array.push(_pivotArray, l)\n    array.push(_labelArray, lab)\n```\n\n----------------------------------------\n\nTITLE: Utility Functions for Scanner Data Processing in PineScript\nDESCRIPTION: Helper functions for the scanner implementation, including time formatting and symbol name extraction. These functions prepare data for display in the scanner's results table.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Scanner - Trend Following Setup - Sideways Market Skipper Scanner.txt#2025-04-16_snippet_10\n\nLANGUAGE: pine\nCODE:\n```\n// Function to format time\nformat_time(x) =>\n    timezone = syminfo.timezone\n    timeframe.isintraday ? str.format_time(x, \"HH:mm  dd-MM-yyyy\", timezone) : str.format_time(x, \"dd-MM-yyyy\", timezone)\n\n// Function to extract symbol name\nsymbol(s) => \n    array.get(str.split(s, \":\"), 1)\n```\n\n----------------------------------------\n\nTITLE: Calculating Cumulative Volume and Percentage Change in PineScript\nDESCRIPTION: Implements functions to calculate daily cumulative volume and its percentage change. These calculations are used for volume-based filtering of FVGs.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_11\n\nLANGUAGE: pine\nCODE:\n```\ncumulative_volume() =>\n    var float _cum_vol = na\n    _is_new_day = ta.change(time('D')) != 0 ? 1 : 0\n    _cum_vol := bool(_is_new_day) ? volume : na(_cum_vol) ? volume : _cum_vol + volume\n    _cum_vol\n\nvar float current_cum_vol = na\nvar float prev_cum_vol = na\n\nif ta.change(time('D')) != 0\n    prev_cum_vol := current_cum_vol\n    current_cum_vol := volume\n    current_cum_vol\nelse\n    current_cum_vol := current_cum_vol + volume\n    current_cum_vol\n\ncum_vol_pchg = (current_cum_vol - nz(prev_cum_vol, current_cum_vol)) / nz(prev_cum_vol, current_cum_vol) * 100\n```\n\n----------------------------------------\n\nTITLE: Extracting Ticker IDs from CSV Format in PineScript\nDESCRIPTION: A function that parses comma-separated ticker symbols for use in a scanner. It extracts the first ticker from a list and returns both the extracted ticker and the remaining list, allowing for sequential processing of multiple symbols.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Scanner - Trend Following Setup - Sideways Market Skipper Scanner.txt#2025-04-16_snippet_7\n\nLANGUAGE: pine\nCODE:\n```\nfeed(back) =>                                             // extract tickerid and decrement list of ticker IDs\n    loop  = back                                          // declare string variable to hold content list\n    getT  = string(na)                                    // declare string variable to hold tickerid\n    if str.length(loop) == 0                              // if list is empty\n        getT := string(na)                                // assign na to tickerid variable\n        loop := string(na)                                // assign na to list of ticker Ids variable\n    else                                                  // else extract first tickerid\n        getP  = nz(str.pos(loop, ','), str.length(loop))  // get position of first comma or last character\n        getT := str.substring(loop, 0, getP)              // get tickerid in first position of list\n        loop := str.replace(loop, getT + ',', '')         // clear tickerid + delimiter character from list\n    [getT, loop]                                          // return tickerid in first position & truncated list\n```\n\n----------------------------------------\n\nTITLE: Initializing ICT Liquidity Void Multi-timeframe Indicator in Pine Script\nDESCRIPTION: This snippet sets up the indicator with its title, version, and overlay settings. It also defines input parameters for customizing the liquidity void analysis.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void/ICT Liquidity Void Multi-timeframe.txt#2025-04-16_snippet_0\n\nLANGUAGE: Pine Script\nCODE:\n```\n//@version=5\nindicator(title=\"ICT Liquidity Void Multi-timeframe\", shorttitle=\"ICT LV\", overlay=true)\n\n//_____________________________ Menu Liquidity Void Start\n\ng_lv = '███████████████ Liquidity Void ███████████████'\nstring i_lv_htf = input.timeframe(defval='', title='Timeframe', group=g_lv)\nint i_lv_show_last = input.int(defval=2, title='Show Last', minval=0, group=g_lv)\nstring i_lv_line = input.string(defval='High/Low', title='Source', options=['High/Low', 'OTE 0.79%', '50%'], group=g_lv)\nbool i_lv_bear_show = input.bool(defval=true, title='Bearish', group=g_lv)\nbool i_lv_bull_show = input.bool(defval=true, title='Bullish', group=g_lv)\nbool i_lv_hide_crossed = input.bool(defval=false, title='Hide Crossed', group=g_lv)\n```\n\n----------------------------------------\n\nTITLE: Setting CCI and Volume Colors in PineScript\nDESCRIPTION: Defines color variables for CCI and volume indicators based on overbought/oversold conditions and volume comparison with its SMA.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup.txt#2025-04-16_snippet_7\n\nLANGUAGE: pine\nCODE:\n```\ncol_cci = cci > i_cci_ob ? i_pos_col : cci < i_cci_os ? i_neg_col : i_neu_col\ncol_vol = volume > vol_sma ? i_pos_col : i_neu_col\n```\n\n----------------------------------------\n\nTITLE: Extracting Symbols for Screener in PineScript\nDESCRIPTION: This function extracts individual symbols from a comma-separated list of ticker IDs. It's used to prepare symbols for the screener functionality.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void/ICT Liquidity Void Screener.txt#2025-04-16_snippet_5\n\nLANGUAGE: pine\nCODE:\n```\nfeed(back) =>                                             // extract tickerid and decrement list of ticker IDs\n    loop  = back                                          // declare string variable to hold content list\n    getT  = string(na)                                    // declare string variable to hold tickerid\n    if str.length(loop) == 0                              // if list is empty\n        getT := string(na)                                // assign na to tickerid variable\n        loop := string(na)                                // assign na to list of ticker Ids variable\n    else                                                  // else extract first tickerid\n        getP  = nz(str.pos(loop, ','), str.length(loop))  // get position of first comma or last character\n        getT := str.substring(loop, 0, getP)              // get tickerid in first position of list\n        loop := str.replace(loop, getT + ',', '')         // clear tickerid + delimiter character from list\n    [getT, loop]                                          // return tickerid in first position & truncated list\n\n[tid_01, out_01] = feed(i_symbols), [tid_02, out_02] = feed(out_01), [tid_03, out_03] = feed(out_02), [tid_04, out_04] = feed(out_03),\n[tid_05, out_05] = feed(out_04), [tid_06, out_06] = feed(out_05), [tid_07, out_07] = feed(out_06), [tid_08, out_08] = feed(out_07),\n[tid_09, out_09] = feed(out_08), [tid_10, out_10] = feed(out_09), [tid_11, out_11] = feed(out_10), [tid_12, out_12] = feed(out_11),\n[tid_13, out_13] = feed(out_12), [tid_14, out_14] = feed(out_13), [tid_15, out_15] = feed(out_14), [tid_16, out_16] = feed(out_15),\n[tid_17, out_17] = feed(out_16), [tid_18, out_18] = feed(out_17), [tid_19, out_19] = feed(out_18), [tid_20, out_20] = feed(out_19),\n[tid_21, out_21] = feed(out_20), [tid_22, out_22] = feed(out_21), [tid_23, out_23] = feed(out_22), [tid_24, out_24] = feed(out_23),\n[tid_25, out_25] = feed(out_24), [tid_26, out_26] = feed(out_25), [tid_27, out_27] = feed(out_26), [tid_28, out_28] = feed(out_27),\n[tid_29, out_29] = feed(out_28), [tid_30, out_30] = feed(out_29), [tid_31, out_31] = feed(out_30), [tid_32, out_32] = feed(out_31),\n[tid_33, out_33] = feed(out_32), [tid_34, out_34] = feed(out_33), [tid_35, out_35] = feed(out_34), [tid_36, out_36] = feed(out_35),\n[tid_37, out_37] = feed(out_36), [tid_38, out_38] = feed(out_37), [tid_39, out_39] = feed(out_38), [tid_40, out_40] = feed(out_39)\n```\n\n----------------------------------------\n\nTITLE: Iterating Matrix Rows and Rendering Cells in PineScript\nDESCRIPTION: This code iterates through a matrix of data and renders each row in a scanner UI. It assigns colors to text based on signal direction (positive or negative) and calls the cell_scan function to render individual cells. Each row represents a different signal or asset being scanned.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Scanner] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_11\n\nLANGUAGE: pine\nCODE:\n```\nfor i = 0 to matrix.rows(matrix) - 1 by 1\n    color txt_color = matrix.get(matrix, i, 5) == '1' ? i_pos_color : matrix.get(matrix, i, 5) == '-1' ? i_neg_color : na\n\n    cell_scan(0, j, matrix.get(matrix, i, 0), txt_color)\n    cell_scan(1, j, matrix.get(matrix, i, 1), txt_color)\n    cell_scan(2, j, matrix.get(matrix, i, 2), txt_color)\n    cell_scan(3, j, matrix.get(matrix, i, 3), txt_color)\n    cell_scan(4, j, matrix.get(matrix, i, 4), txt_color)\n    j := j + 1\n```\n\n----------------------------------------\n\nTITLE: Processing Multiple Symbols from CSV Input in PineScript\nDESCRIPTION: This code demonstrates how to process a comma-separated list of symbols by repeatedly calling the feed function to extract up to 40 individual ticker symbols for analysis in the scanner.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Scanner - Trend Following Setup - Sideways Market Skipper Scanner.txt#2025-04-16_snippet_8\n\nLANGUAGE: pine\nCODE:\n```\n[tid_01, out_01] = feed(i_symbols), [tid_02, out_02] = feed(out_01), [tid_03, out_03] = feed(out_02), [tid_04, out_04] = feed(out_03),\n[tid_05, out_05] = feed(out_04), [tid_06, out_06] = feed(out_05), [tid_07, out_07] = feed(out_06), [tid_08, out_08] = feed(out_07),\n[tid_09, out_09] = feed(out_08), [tid_10, out_10] = feed(out_09), [tid_11, out_11] = feed(out_10), [tid_12, out_12] = feed(out_11),\n[tid_13, out_13] = feed(out_12), [tid_14, out_14] = feed(out_13), [tid_15, out_15] = feed(out_14), [tid_16, out_16] = feed(out_15),\n[tid_17, out_17] = feed(out_16), [tid_18, out_18] = feed(out_17), [tid_19, out_19] = feed(out_18), [tid_20, out_20] = feed(out_19),\n[tid_21, out_21] = feed(out_20), [tid_22, out_22] = feed(out_21), [tid_23, out_23] = feed(out_22), [tid_24, out_24] = feed(out_23),\n[tid_25, out_25] = feed(out_24), [tid_26, out_26] = feed(out_25), [tid_27, out_27] = feed(out_26), [tid_28, out_28] = feed(out_27),\n[tid_29, out_29] = feed(out_28), [tid_30, out_30] = feed(out_29), [tid_31, out_31] = feed(out_30), [tid_32, out_32] = feed(out_31),\n[tid_33, out_33] = feed(out_32), [tid_34, out_34] = feed(out_33), [tid_35, out_35] = feed(out_34), [tid_36, out_36] = feed(out_35),\n[tid_37, out_37] = feed(out_36), [tid_38, out_38] = feed(out_37), [tid_39, out_39] = feed(out_38), [tid_40, out_40] = feed(out_39)\n```\n\n----------------------------------------\n\nTITLE: Calculating Volume Simple Moving Average in Pine Script\nDESCRIPTION: Computes a simple moving average of volume over a specified period for volume analysis.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\nvol_sma = ta.sma(volume, i_vol_sma_length)\n```\n\n----------------------------------------\n\nTITLE: Applying Element Management Functions for MZ 1 in PineScript\nDESCRIPTION: Calls the management functions for all line and box arrays from MZ 1 timeframe. This maintains clean chart visualization by removing older elements according to user-defined settings.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_13\n\nLANGUAGE: pine\nCODE:\n```\nshow_last_lines(mz_1_ph_ln_arr, i_mz_1_showlast)\nshow_last_lines(mz_1_pl_ln_arr, i_mz_1_showlast)\nshow_last_lines(mz_1_p_ln_arr, i_mz_1_showlast)\nshow_last_lines(mz_1_r_1_ln_arr, i_mz_1_showlast)\nshow_last_lines(mz_1_s_1_ln_arr, i_mz_1_showlast)\nshow_last_lines(mz_1_r_2_ln_arr, i_mz_1_showlast)\nshow_last_lines(mz_1_s_2_ln_arr, i_mz_1_showlast)\nshow_last_lines(mz_1_r_3_ln_arr, i_mz_1_showlast)\nshow_last_lines(mz_1_s_3_ln_arr, i_mz_1_showlast)\nshow_last_lines(mz_1_r_4_ln_arr, i_mz_1_showlast)\nshow_last_lines(mz_1_s_4_ln_arr, i_mz_1_showlast)\nshow_last_lines(mz_1_r_5_ln_arr, i_mz_1_showlast)\nshow_last_lines(mz_1_s_5_ln_arr, i_mz_1_showlast)\nshow_last_lines(mz_1_r_6_ln_arr, i_mz_1_showlast)\nshow_last_lines(mz_1_s_6_ln_arr, i_mz_1_showlast)\n\nshow_last_boxes(mz_1_r_1_s_1_bx_arr, i_mz_1_showlast)\nshow_last_boxes(mz_1_r_1_bx_arr, i_mz_1_showlast)\nshow_last_boxes(mz_1_s_1_bx_arr, i_mz_1_showlast)\nshow_last_boxes(mz_1_r_2_bx_arr, i_mz_1_showlast)\nshow_last_boxes(mz_1_s_2_bx_arr, i_mz_1_showlast)\n//show_last_boxes(mz_1_r_3_bx_arr, i_mz_1_showlast)\n//show_last_boxes(mz_1_s_3_bx_arr, i_mz_1_showlast)\nshow_last_boxes(mz_1_r_4_bx_arr, i_mz_1_showlast)\nshow_last_boxes(mz_1_s_4_bx_arr, i_mz_1_showlast)\n//show_last_boxes(mz_1_r_5_bx_arr, i_mz_1_showlast)\n//show_last_boxes(mz_1_s_5_bx_arr, i_mz_1_showlast)\nshow_last_boxes(mz_1_r_6_bx_arr, i_mz_1_showlast)\nshow_last_boxes(mz_1_s_6_bx_arr, i_mz_1_showlast)\n```\n\n----------------------------------------\n\nTITLE: Matrix Data Structure Setup for Screener Results in PineScript\nDESCRIPTION: Sets up a matrix data structure to store screening results and provides a function to add rows to the matrix. The matrix stores symbol, time, price, percentage changes, and signal information.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Scanner - ICT Liquidity Sweep Pattern Scanner.txt#2025-04-16_snippet_14\n\nLANGUAGE: pine\nCODE:\n```\n// Matrix setup\nvar matrix = matrix.new<string>(0, 6, na)\n\n// Function to add rows to the matrix\nmtxFun(symbol, _time, price, _cum_pchg, _cum_vol_pchg, signal) =>\n    matrix.add_row(matrix, 0, array.from(symbol, _time, price, _cum_pchg, _cum_vol_pchg, signal))\n```\n\n----------------------------------------\n\nTITLE: Configuring Market Profile Input Parameters\nDESCRIPTION: Defines user inputs for the Market Profile component, including timeframe selection, TPO percentage, session count, and color options. These parameters allow users to customize the appearance and behavior of the Market Profile display.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] Market Profile with Screener (Based on [RS]Market Profile by RicardoSantos).txt#2025-04-16_snippet_1\n\nLANGUAGE: pine script\nCODE:\n```\n//  ||--    Inputs:\ng_mp='Market Profile'\nstring i_session_timeframe = input.string(defval='5D', title='Timeframe', group=g_mp)\nfloat i_percent_of_tpo = input.float(defval=0.7, title='TPO %', group=g_mp)\nint i_sessions = input.int(defval=1, title='Show Last', minval=0, maxval=40, group=g_mp)\ncolor i_poc_col = input.color(defval=#EA738D, title='Point of Control', group=g_mp)\ncolor i_va_col = input.color(defval=#89ABE3, title='Value Area', group=g_mp)\ncolor i_open_col = input.color(defval=color.silver, title='Open', group=g_mp)\nint i_mp_transp = input.int(defval=100, title='Transparency', minval=0, maxval=100, group=g_mp)\n```\n\n----------------------------------------\n\nTITLE: Generating Flip Signals in PineScript\nDESCRIPTION: This code generates flip signals for both long and short positions using the exrem() function.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_15\n\nLANGUAGE: pinescript\nCODE:\n```\nexrem(condition_1, condition_2) =>\n    var entry_signal = 0\n    entry_signal := condition_1 ? 1 : condition_2 ? -1 : entry_signal[1]\n    entry = entry_signal != entry_signal[1]\n    long = entry and entry_signal == 1\n    short = entry and entry_signal == -1\n    [long, short]\n\n[long_entry, short_entry] = exrem(long_ret_cont_2, short_ret_cont_2)\n```\n\n----------------------------------------\n\nTITLE: Time Formatting and Symbol Extraction Functions in PineScript\nDESCRIPTION: Defines utility functions for formatting time values based on the timeframe and extracting symbol names from ticker strings. The format_time function adjusts display based on whether the timeframe is intraday or not.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_19\n\nLANGUAGE: pinescript\nCODE:\n```\n// Function to format time\nformat_time(x) =>\n    timezone = syminfo.timezone\n    timeframe.isintraday ? str.format_time(x, \"HH:mm  dd-MM-yyyy\", timezone) : str.format_time(x, \"dd-MM-yyyy\", timezone)\n\n// Function to extract symbol name\nsymbol(s) => \n    array.get(str.split(s, \":\"), 1)\n```\n\n----------------------------------------\n\nTITLE: Array Management and Cleanup Functions\nDESCRIPTION: Functions for managing arrays of lines and boxes, including cleanup operations and updates to maintain visual elements on the chart.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void/ICT Liquidity Void Screener.txt#2025-04-16_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\nclean_arrays(_all_lines, _keep_lines, _all_boxes, _keep_boxes, _lv_line, _lv_box) =>\n    array.push(_all_lines, _lv_line)\n    array.push(_all_boxes, _lv_box)\n\n    if array.size(_all_lines) > i_lv_show_last\n        removed_line = array.shift(_all_lines)\n        if array.includes(_keep_lines, removed_line)\n            index_of_removed_line = array.indexof(_keep_lines, removed_line)\n            array.remove(_keep_lines, index_of_removed_line)\n        line.delete(removed_line)\n```\n\n----------------------------------------\n\nTITLE: Calculating and Fetching Magnetic Zone 1 Data in PineScript\nDESCRIPTION: Retrieves data for the first magnetic zone timeframe, including previous high/low values, pivot points, and all support/resistance levels. Creates buffer zones around these levels for visualization purposes.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_5\n\nLANGUAGE: pine\nCODE:\n```\n/// MZ 1\n// PDHL\nmz_1_ph = data(i_mz_1_tf, high[1])\nmz_1_pl = data(i_mz_1_tf, low[1])\n\n// Pivot\nmz_1_p = data(i_mz_1_tf, hl2[1])\n\n// MZ 1 SR\nmz_1_r_1 = data(i_mz_1_tf, r_1)\nmz_1_r_2 = data(i_mz_1_tf, r_2)\nmz_1_r_3 = data(i_mz_1_tf, r_3)\nmz_1_r_4 = data(i_mz_1_tf, r_4)\nmz_1_r_5 = data(i_mz_1_tf, r_5)\nmz_1_r_6 = data(i_mz_1_tf, r_6)\n\nmz_1_s_1 = data(i_mz_1_tf, s_1)\nmz_1_s_2 = data(i_mz_1_tf, s_2)\nmz_1_s_3 = data(i_mz_1_tf, s_3)\nmz_1_s_4 = data(i_mz_1_tf, s_4)\nmz_1_s_5 = data(i_mz_1_tf, s_5)\nmz_1_s_6 = data(i_mz_1_tf, s_6)\n\n// Buffer\n[mz_1_r_1_top, mz_1_r_1_bot] = buffer_zone(mz_1_r_1, mz_1_r_1, mz_1_s_1)\n[mz_1_s_1_top, mz_1_s_1_bot] = buffer_zone(mz_1_s_1, mz_1_r_1, mz_1_s_1)\n[mz_1_r_2_top, mz_1_r_2_bot] = buffer_zone(mz_1_r_2, mz_1_r_2, mz_1_r_1)\n[mz_1_s_2_top, mz_1_s_2_bot] = buffer_zone(mz_1_s_2, mz_1_s_1, mz_1_s_2)\n//[mz_1_r_3_top, mz_1_r_3_bot] = buffer_zone(mz_1_r_3, mz_1_r_3, mz_1_r_2)\n//[mz_1_s_3_top, mz_1_s_3_bot] = buffer_zone(mz_1_s_3, mz_1_s_2, mz_1_s_3)\n[mz_1_r_4_top, mz_1_r_4_bot] = buffer_zone(mz_1_r_4, mz_1_r_4, mz_1_r_3)\n[mz_1_s_4_top, mz_1_s_4_bot] = buffer_zone(mz_1_s_4, mz_1_s_3, mz_1_s_4)\n//[mz_1_r_5_top, mz_1_r_5_bot] = buffer_zone(mz_1_r_5, mz_1_r_5, mz_1_r_4)\n//[mz_1_s_5_top, mz_1_s_5_bot] = buffer_zone(mz_1_s_5, mz_1_s_4, mz_1_s_5)\n[mz_1_r_6_top, mz_1_r_6_bot] = buffer_zone(mz_1_r_6, mz_1_r_6, mz_1_r_5)\n[mz_1_s_6_top, mz_1_s_6_bot] = buffer_zone(mz_1_s_6, mz_1_s_5, mz_1_s_6)\n```\n\n----------------------------------------\n\nTITLE: Order Block Identification Documentation in PineScript\nDESCRIPTION: Documentation section explaining the concept of order blocks as implemented in the indicator. This explains that the script identifies the lowest/highest candle breaking previous extremes and confirms order blocks when price closes beyond them.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] ICT Retracement to Order Block with Screener.txt#2025-04-16_snippet_8\n\nLANGUAGE: pine\nCODE:\n```\n// Read Me\n//\n// Title: Retracement to Order Block with Screener\n// Date: Created on 14 January 2024\n//\n// One-liner:\n// # The indicator aims to identify the candle returning to the order block through a screener.\n//\n// Important Notes:\n// # This inicator does not strictly adhere to the 100% rules of ICT order block.\n// # Due to coding limitations, only the core ideas of ICT concepts are implemented.\n// # The screener won't identify the trend, so it is essential to confirm the direction independently.\n// # The screener and the indicator may display inaccurate results.\n// # Avoid blindly following the signals.\n//\n// Order Block identification (For those who are unfamiliar):\n// # Identifying the lowest or highest candle that breaks the old lowest low or highest high, respectively.\n// # If a candle closes above or below it, the lowest or highest candle can be considered as an order block.\n// # Afterward, the price should move 2 or 3 times away from the order block candle.\n```\n\n----------------------------------------\n\nTITLE: Array Extension Function for Pivot Lines in PineScript\nDESCRIPTION: Creates a function that extends the display of pivot lines to the current bar. It iterates through an array of line objects and updates their end positions based on the specified extension rules.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_15\n\nLANGUAGE: pine\nCODE:\n```\nf_extendArray(_lineArray, _labelArray, _extendLines) =>\n    if array.size(_lineArray) > 0\n        for _i = array.size(_lineArray) - 1 to 0 by 1\n\n            x2 = line.get_x2(array.get(_lineArray, _i))\n            yValue = line.get_y1(array.get(_lineArray, _i))\n\n            if _extendLines or bar_index - 1 == x2 and not(high > yValue and low < yValue)\n                line.set_x2(array.get(_lineArray, _i), bar_index)\n                label.set_x(array.get(_labelArray, _i), bar_index)\n            float(na)\n```\n\n----------------------------------------\n\nTITLE: ICT Liquidity Sweep Pattern Scanner Comments in PineScript\nDESCRIPTION: This snippet contains the comments explaining the purpose and logic of the ICT Liquidity Sweep Pattern Scanner. It identifies bullish or bearish liquidity sweeps of previous 1st, 2nd, or 3rd swings, with a note to use higher timeframes for stock selection.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Readme First.txt#2025-04-16_snippet_0\n\nLANGUAGE: pinescript\nCODE:\n```\n// Readme First:\n\n// ICT Liquidity Sweep Pattern Scanner\n\n// Logic\n//   - This generally identifies bullish or bearish liquidity sweeps of previous 1st, 2nd, or 3rd swings.\n\n// Notes\n//   - Use higher timeframes for stock selection and trade in lower timeframes.\n//   - The scanner may also generate incorrect signals.\n```\n\n----------------------------------------\n\nTITLE: Table Cell Formatting Functions\nDESCRIPTION: Two helper functions for formatting table cells. The first formats title cells with centered text, while the second formats data cells with left-aligned text and custom colors based on signal values.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Scanner] ICT Liquidity Void Fill Scanner.txt#2025-04-16_snippet_15\n\nLANGUAGE: pine\nCODE:\n```\nscr_cell_title(col, row, txt) =>\n    table.cell(scr_tbl, col, row, text = txt, text_color = i_neu_color, text_halign = text.align_center, bgcolor = i_neu_dark_color, text_size = i_scr_tbl_text_size)\n\nscr_cell(col, row, txt, _text_color, _bgcolor) =>\n    table.cell(scr_tbl, col, row, text = txt, text_color = _text_color, text_halign = text.align_left, bgcolor = _bgcolor, text_size = i_scr_tbl_text_size)\n```\n\n----------------------------------------\n\nTITLE: Initializing ICT Mitigation Block Scanner Indicator in Pine Script\nDESCRIPTION: Sets up the main indicator with title, overlay settings, and maximum object counts for the scanner. The indicator is designed to identify ICT mitigation blocks and retracements across multiple symbols.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_0\n\nLANGUAGE: Pine Script\nCODE:\n```\n//@version=5\nindicator(title='ICT Mitigation Block Scanner', shorttitle='ICT MB Scan', overlay=true, max_bars_back=500, max_lines_count=500, max_boxes_count=500)\n```\n\n----------------------------------------\n\nTITLE: Pivot Offset Finding Function in PineScript\nDESCRIPTION: Implements a function to find the offset index from the current bar to a pivot point price. It iterates through historical bars to find the closest price match up to a maximum lookback period.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_13\n\nLANGUAGE: pine\nCODE:\n```\nf_offsetToP(_src, _pivotPrice, _maxBack) =>\n    int _offset = na\n    float _delta = 10e10\n    if not na(_pivotPrice)\n        for _i = 1 to _maxBack by 1\n            _thisDelta = math.abs(_src[_i] - _pivotPrice)\n            if _thisDelta < _delta\n                _delta := _thisDelta\n                _offset := _i\n                _offset\n    _offset\n```\n\n----------------------------------------\n\nTITLE: Initializing Input Parameters for Symbol Screener in PineScript\nDESCRIPTION: Sets up input parameters for the screener, including a text area for symbol input, percentage thresholds for volume and price analysis, and table display options.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] Market Profile with Screener (Based on [RS]Market Profile by RicardoSantos).txt#2025-04-16_snippet_11\n\nLANGUAGE: pinescript\nCODE:\n```\ng_tb = 'Screener : Table'\ntt_is = \"• Total characters cannot exceed 4096.\" +\n     \"\\n• Use comma as delimiter without any space.\" +\n     \"\\n• Eg: 'EXCHANGE:SYMBOL_A,EXCHANGE:SYMBOL_B'\"\n\nstring i_symbols = input.text_area(\n defval='NSE:ADANIPOWER,NSE:ARVIND,NSE:ASHOKA,NSE:BANKINDIA,NSE:BLS,NSE:BOMDYEING,NSE:CUB,NSE:DBL,NSE:DELTACORP,NSE:ENGINERSIN,NSE:GIPCL,NSE:GMDCLTD,NSE:GPPL,NSE:HINDCOPPER,NSE:INDIACEM,NSE:INOXWIND,NSE:IPL,NSE:IRCON,NSE:ITI,NSE:JAMNAAUTO,NSE:JKTYRE,NSE:KESORAMIND,NSE:LEMONTREE,NSE:MOIL,NSE:MRPL,NSE:NLCINDIA,NSE:ONMOBILE,NSE:PFC,NSE:PPLPHARMA,NSE:PTC,NSE:RAILTEL,NSE:RCF,NSE:RVNL,NSE:SHRIRAMPPS,NSE:TI,NSE:WELCORP,NSE:L_TFH,NSE:WOCKPHARMA,NSE:ZOMATO',\n title=\"Paste Symbols\", tooltip=tt_is, group=g_tb)\n\nfloat i_va_above = input.float(defval=0, title='VA % Between', minval=0, maxval=100, inline='1', group=g_tb)\nfloat i_va_below = input.float(defval=3, title='', minval=0, maxval=100, inline='1', group=g_tb)\n\nfloat i_ltp_above = input.float(defval=-10, title='LTP % Between', inline='2', group=g_tb)\nfloat i_ltp_below = input.float(defval=10, title='', inline='2', group=g_tb)\n\n\nint i_tbl_disp_rows = input.int(defval=15, title='Display Rows', minval=0, maxval=100, group=g_tb)\nstring i_tbl_position = input.string(defval=position.bottom_left, title='Position', options=[position.top_left, position.top_center, position.top_right, position.middle_left, position.middle_center, position.middle_right, position.bottom_left, position.bottom_center, position.bottom_right], group=g_tb)\nstring i_tbl_text_size = input.string(defval=size.small, title='Size', options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group=g_tb)\n\ncolor i_tbl_neu_col = input.color(defval=#B2B5BE, title='Color', group=g_tb)\n```\n\n----------------------------------------\n\nTITLE: Calculating MACD Indicator in Pine Script\nDESCRIPTION: Computes the Moving Average Convergence Divergence (MACD) indicator using configurable fast, slow, and signal length parameters.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\n[macdLine, signalLine, histLine] = ta.macd(close, i_macd_fast_len, i_macd_slow_len, i_macd_signal_len)\n```\n\n----------------------------------------\n\nTITLE: Executing Screener and Displaying Results in PineScript\nDESCRIPTION: Calls the screener function for multiple symbols, trims excess rows from the matrix, and sets up a table to display the screener results. The table is updated on the last bar of the chart.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] Market Profile with Screener (Based on [RS]Market Profile by RicardoSantos).txt#2025-04-16_snippet_14\n\nLANGUAGE: pinescript\nCODE:\n```\n// Call Screener function for multiple symbols\nscreener(tid_001), screener(tid_002), screener(tid_003), screener(tid_004), screener(tid_005), screener(tid_006), screener(tid_007),\nscreener(tid_008), screener(tid_009), screener(tid_010), screener(tid_011), screener(tid_012), screener(tid_013), screener(tid_014),\nscreener(tid_015), screener(tid_016), screener(tid_017), screener(tid_018), screener(tid_019), screener(tid_020), screener(tid_021),\nscreener(tid_022), screener(tid_023), screener(tid_024), screener(tid_025), screener(tid_026), screener(tid_027), screener(tid_028),\nscreener(tid_029), screener(tid_030), screener(tid_031), screener(tid_032), screener(tid_033), screener(tid_034), screener(tid_035),\nscreener(tid_036), screener(tid_037), screener(tid_038), screener(tid_039), screener(tid_040)\n\n// Trim excess rows in the matrix\nif matrix.rows(matrix) > i_tbl_disp_rows\n    while matrix.rows(matrix) > i_tbl_disp_rows\n        matrix.remove_row(matrix, matrix.rows(matrix)-1)\n\n// Plot Table\n// Create table with specified properties\nvar table tbl = table.new(position=i_tbl_position, columns=4, rows=102, border_width=1)\n\ntt_tbl = \"Time: Signal generation time.\\n\" +\n     \"% VAHL: Percentage between VAH & VAL.\\n\" +\n     \"% LTP: Percentage change from POC mid to LTP.\"\n\n// Function to populate cells in the table\ncell(col, row, txt, color) => \n    table.cell(tbl, col, row, text = txt, text_color = color, text_halign=text.align_left, bgcolor = color.new(color, 80), text_size=i_tbl_text_size, tooltip=tt_tbl)\n\n// Check if it's the last bar\nif barstate.islast\n    // Clear existing data in the table\n    table.clear(tbl, 0, 0, 3, 101)\n\n    // Set headers for the table\n    cell(0, 0, \"Symbol\", i_tbl_neu_col)\n    cell(1, 0, \"Time\",   i_tbl_neu_col)\n    cell(2, 0, \"% VAHL\" ,  i_tbl_neu_col)\n    cell(3, 0, \"% LTP\" ,  i_tbl_neu_col)\n\n    j = 1\n    // Populate table with matrix data\n    if matrix.rows(matrix) > 0\n        for i = 0 to matrix.rows(matrix) - 1\n            // Populate cells in the table\n            cell(0, j, matrix.get(matrix, i, 0), i_tbl_neu_col)\n            cell(1, j, matrix.get(matrix, i, 1), i_tbl_neu_col)\n            cell(2, j, matrix.get(matrix, i, 2), i_tbl_neu_col)\n            cell(3, j, matrix.get(matrix, i, 3), i_tbl_neu_col)\n\n            j += 1\n```\n\n----------------------------------------\n\nTITLE: Dynamic Results Table Creation for Order Block Screener in PineScript\nDESCRIPTION: Creates and populates a table to display order block signals from multiple symbols. The table shows symbol names, signal times, direction indicators, and prices with color-coding based on signal direction.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] ICT Retracement to Order Block with Screener.txt#2025-04-16_snippet_7\n\nLANGUAGE: pine\nCODE:\n```\n// Plot Table\n// Create table with specified properties\nvar table tbl = table.new(position=i_tbl_position, columns=4, rows=102, border_width=1)\n\n// Function to populate cells in the table\ncell(col, row, txt, color) => \n    table.cell(tbl, col, row, text = txt, text_color = color, text_halign=text.align_left, bgcolor = color.new(color, 90), text_size=i_tbl_text_size)\n\n// Check if it's the last bar\nif barstate.islast\n    // Clear existing data in the table\n    table.clear(tbl, 0, 0, 3, 101)\n\n    // Set headers for the table\n    cell(0, 0, \"Symbol\", i_neu_col)\n    cell(1, 0, \"Time\",   i_neu_col)\n    cell(2, 0, \"Dir\" ,  i_neu_col)\n    cell(3, 0, \"Price\",  i_neu_col)\n\n    j = 1\n    // Populate table with matrix data\n    if matrix.rows(matrix) > 0\n        for i = 0 to matrix.rows(matrix) - 1\n            // Determine color based on the signal\n            col = matrix.get(matrix, i, 4) ==  \"1\" ? i_pos_col :\n                  matrix.get(matrix, i, 4) == \"-1\" ? i_neg_col : i_neu_col\n\n            // Populate cells in the table\n            cell(0, j, matrix.get(matrix, i, 0), col)\n            cell(1, j, matrix.get(matrix, i, 1), col)\n            cell(2, j, matrix.get(matrix, i, 2), col)\n            cell(3, j, matrix.get(matrix, i, 3), col)\n\n            j += 1\n```\n\n----------------------------------------\n\nTITLE: Volume Analysis Display in PineScript\nDESCRIPTION: Implements volume analysis visualization with customizable display types including buying/selling volume differentiation and volume moving averages. Features color coding for bullish/bearish volume bars.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup.txt#2025-04-16_snippet_5\n\nLANGUAGE: pinescript\nCODE:\n```\nif i_vol_type != 'None' \n    f_drawLabelX(bar_index + 3, priceHighest * (1 + priceChangeRate * i_vol_voffset), 'VOL', xloc.bar_index, yloc.price, #00000000, label.style_label_left, chart.fg_color, size.small, text.align_center, 'Buy Vol : ' + str.tostring(B / (B + S) * 100, '#.##') + '%\\nSell Vol : ' + str.tostring(S / (B + S) * 100, '#.##') + '%\\nLast Vol : ' + str.tostring(nzVolume, format.volume) + '\\nAvg Vol : ' + str.tostring(vol_sma, format.volume))\n```\n\n----------------------------------------\n\nTITLE: Initializing ICT Fair Value Gap Scanner in PineScript\nDESCRIPTION: Sets up the main indicator parameters including title, overlay, and maximum box count. This initializes the FVG scanner with basic configuration.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_0\n\nLANGUAGE: pinescript\nCODE:\n```\n//@version=6\nindicator(title = 'ICT Fair Value Gap (FVG) Scanner v2', shorttitle = 'FVG Scan v2', overlay = true, max_boxes_count = 500)\n```\n\n----------------------------------------\n\nTITLE: Parsing Input Symbols for Screener in PineScript\nDESCRIPTION: Implements a function to parse the input symbol string and extract individual symbols. This function is then used to create variables for up to 40 symbols.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] Market Profile with Screener (Based on [RS]Market Profile by RicardoSantos).txt#2025-04-16_snippet_12\n\nLANGUAGE: pinescript\nCODE:\n```\nfeed(back) =>                                             // extract tickerid and decrement list of ticker IDs\n    loop  = back                                          // declare string variable to hold content list\n    getT  = string(na)                                    // declare string variable to hold tickerid\n    if str.length(loop) == 0                              // if list is empty\n        getT := string(na)                                // assign na to tickerid variable\n        loop := string(na)                                // assign na to list of ticker Ids variable\n    else                                                  // else extract first tickerid\n        getP  = nz(str.pos(loop, ','), str.length(loop))  // get position of first comma or last character\n        getT := str.substring(loop, 0, getP)              // get tickerid in first position of list\n        loop := str.replace(loop, getT + ',', '')         // clear tickerid + delimiter character from list\n    [getT, loop]                                          // return tickerid in first position & truncated list\n\n[tid_001, out_001] = feed(i_symbols), [tid_002, out_002] = feed(out_001), [tid_003, out_003] = feed(out_002), [tid_004, out_004] = feed(out_003),\n[tid_005, out_005] = feed(out_004), [tid_006, out_006] = feed(out_005), [tid_007, out_007] = feed(out_006), [tid_008, out_008] = feed(out_007),\n[tid_009, out_009] = feed(out_008), [tid_010, out_010] = feed(out_009), [tid_011, out_011] = feed(out_010), [tid_012, out_012] = feed(out_011),\n[tid_013, out_013] = feed(out_012), [tid_014, out_014] = feed(out_013), [tid_015, out_015] = feed(out_014), [tid_016, out_016] = feed(out_015),\n[tid_017, out_017] = feed(out_016), [tid_018, out_018] = feed(out_017), [tid_019, out_019] = feed(out_018), [tid_020, out_020] = feed(out_019),\n[tid_021, out_021] = feed(out_020), [tid_022, out_022] = feed(out_021), [tid_023, out_023] = feed(out_022), [tid_024, out_024] = feed(out_023),\n[tid_025, out_025] = feed(out_024), [tid_026, out_026] = feed(out_025), [tid_027, out_027] = feed(out_026), [tid_028, out_028] = feed(out_027),\n[tid_029, out_029] = feed(out_028), [tid_030, out_030] = feed(out_029), [tid_031, out_031] = feed(out_030), [tid_032, out_032] = feed(out_031),\n[tid_033, out_033] = feed(out_032), [tid_034, out_034] = feed(out_033), [tid_035, out_035] = feed(out_034), [tid_036, out_036] = feed(out_035),\n[tid_037, out_037] = feed(out_036), [tid_038, out_038] = feed(out_037), [tid_039, out_039] = feed(out_038), [tid_040, out_040] = feed(out_039)\n```\n\n----------------------------------------\n\nTITLE: Implementing Flip Signal Logic in Pine Script\nDESCRIPTION: Creates entry signals based on flipping conditions using the exrem function to track state changes. Generates long and short entry signals when conditions flip from one state to another.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_12\n\nLANGUAGE: pine\nCODE:\n```\n// Signal Generation Function\nexrem(condition_1, condition_2) =>\n    var entry_signal = 0\n    entry_signal := condition_1 ? 1 : condition_2 ? -1 : entry_signal[1]\n    entry = entry_signal != entry_signal[1]\n    long = entry and entry_signal == 1\n    short = entry and entry_signal == -1\n    [long, short]\n\n[long_entry, short_entry] = exrem(long_ret_cont_2, short_ret_cont_2)\n```\n\n----------------------------------------\n\nTITLE: Drawing Support/Resistance Levels in PineScript\nDESCRIPTION: This snippet draws support and resistance levels using boxes and lines. It includes logic for showing/hiding elements and handling multiple timeframes.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_19\n\nLANGUAGE: pinescript\nCODE:\n```\nmz_3_r_bx = draw_box(mz_3_time, mz_3_time_close, mz_3_r_1_top, mz_3_r_1_bot, color.new(i_mz_3_sub_color, i_mz_bx_transp + 10), 1, i_mz_bx_style, str.tostring(math.round_to_mintick(mz_3_r_1)) + ' : ' + str.tostring(i_mz_3_tf) + '\\n' + '\\n', i_mz_bx_txt_size, i_mz_3_sub_color, i_mz_bx_txt_align)\narray.push(mz_3_r_1_bx_arr, mz_3_r_bx)\nmz_3_s_bx = draw_box(mz_3_time, mz_3_time_close, mz_3_s_1_top, mz_3_s_1_bot, color.new(i_mz_3_sub_color, i_mz_bx_transp + 10), 1, i_mz_bx_style, '\\n' + str.tostring(math.round_to_mintick(mz_3_s_1)) + ' : ' + str.tostring(i_mz_3_tf), i_mz_bx_txt_size, i_mz_3_sub_color, i_mz_bx_txt_align)\narray.push(mz_3_s_1_bx_arr, mz_3_s_bx)\n\nmz_3_r_1_s_1_bx = draw_box(mz_3_time, mz_3_time_close, mz_3_r_1_top, mz_3_s_1_bot, color.new(i_mz_3_sub_color, i_mz_bx_transp), 1, i_mz_bx_style, '', i_mz_bx_txt_size, i_mz_3_sub_color, i_mz_bx_txt_align)\narray.push(mz_3_r_1_s_1_bx_arr, mz_3_r_1_s_1_bx)\n\nif i_mz_3_sr_2_show\n    mz_3_r_2_ln = draw_line(mz_3_time, mz_3_time_close, mz_3_r_2, i_mz_3_s_ln_color, i_mz_3_ln_style, i_mz_3_ln_width)\n    array.push(mz_3_r_2_ln_arr, mz_3_r_2_ln)\n    mz_3_s_2_ln = draw_line(mz_3_time, mz_3_time_close, mz_3_s_2, i_mz_3_r_ln_color, i_mz_3_ln_style, i_mz_3_ln_width)\n    array.push(mz_3_s_2_ln_arr, mz_3_s_2_ln)\n\n    mz_3_r_2_bx = draw_box(mz_3_time, mz_3_time_close, mz_3_r_2_top, mz_3_r_2_bot, color.new(i_mz_3_s_ln_color, i_mz_bx_transp), 1, i_mz_bx_style, str.tostring(math.round_to_mintick(mz_3_r_2)) + '\\n' + '\\n', i_mz_bx_txt_size, i_mz_3_s_ln_color, i_mz_bx_txt_align)\n    array.push(mz_3_r_2_bx_arr, mz_3_r_2_bx)\n    mz_3_s_2_bx = draw_box(mz_3_time, mz_3_time_close, mz_3_s_2_top, mz_3_s_2_bot, color.new(i_mz_3_r_ln_color, i_mz_bx_transp), 1, i_mz_bx_style, '\\n' + str.tostring(math.round_to_mintick(mz_3_s_2)), i_mz_bx_txt_size, i_mz_3_r_ln_color, i_mz_bx_txt_align)\n    array.push(mz_3_s_2_bx_arr, mz_3_s_2_bx)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Timeframe Moving Averages in PineScript\nDESCRIPTION: This snippet calculates and plots moving averages across multiple timeframes. It includes functions for resolution conversion, offset calculation, and label creation.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_20\n\nLANGUAGE: pinescript\nCODE:\n```\nres_to_str(_res) =>\n    if _res == ''\n        ''\n    else if _res == '1'\n        '1m'\n    else if _res == '3'\n        '3m'\n    else if _res == '5'\n        '5m'\n    else if _res == '15'\n        '15m'\n    else if _res == '30'\n        '30m'\n    else if _res == '45'\n        '45m'\n    else if _res == '60'\n        '1h'\n    else if _res == '120'\n        '2h'\n    else if _res == '180'\n        '3h'\n    else if _res == '240'\n        '4h'\n    else if _res == '1D'\n        'D'\n    else if _res == '1W'\n        'W'\n    else if _res == '1M'\n        'M'\n    else if _res == '3M'\n        '3M'\n    else if _res == '6M'\n        '6M'\n    else if _res == '12M'\n        '12M'\n    else\n        _res\n\nma_offset() =>\n    offset_spaces = ''\n    if i_ma_offset > 0\n        for i = 1 to i_ma_offset by 1\n            offset_spaces += '    '\n    offset_spaces\n\nmoving_average(_type, _source, _length) =>\n    float result = na\n    if _type == \"EMA\"\n        result := ta.ema(_source, _length)\n    if _type == \"SMA\" \n        result := ta.sma(_source, _length)\n    result\n\nadd_label(show_label, _value, _res, _type, _length, _color) =>\n    label lbl = na\n    if show_label\n        label_text = ''\n        if i_ma_lb_length_show\n            label_text := str.tostring(_length)\n        if i_ma_lb_type_show\n            label_text += (label_text != '' ? ' ' : '') + _type\n        if i_ma_lb_htf_show and _res != ''\n            label_text += (label_text != '' ? ' (' : '') + res_to_str(_res) + ')'\n        if label_text != ''\n            lbl := label.new(bar_index, na(_value) ? close : _value, text=ma_offset() + label_text, color=#00000000, textcolor=_color, style=label.style_label_left, textalign=text.align_left)\n            label.delete(lbl[1])\n\nmoving_average_htf(_res, _type, _source, _length) =>\n    _value  = moving_average(_type, _source, _length)\n    [ma_sec, ma_bindex] = request.security(syminfo.tickerid, _res, [_value , bar_index])\n    var int last_barindex = na\n    last_barindex := na(last_barindex[1]) or ma_bindex > last_barindex[1] ? ma_bindex : last_barindex[1]\n    last_barindex != last_barindex[1] or barstate.islast ? ma_sec : na\n\nma_1 = moving_average_htf(i_ma_1_timeframe, i_ma_1_type, i_ma_1_source, i_ma_1_length)\nma_2 = moving_average_htf(i_ma_2_timeframe, i_ma_2_type, i_ma_2_source, i_ma_2_length)\n\nplot(series=i_ma_1_show ? ma_1 : na, title='MA 1', color=i_ma_1_color, linewidth=1, offset=i_ma_offset, join=true)\nadd_label(i_ma_1_show, ma_1, i_ma_1_timeframe, i_ma_1_type, i_ma_1_length, i_ma_1_color)\nplot(series=i_ma_2_show ? ma_2 : na, title='MA 2', color=i_ma_2_color, linewidth=1, offset=i_ma_offset, join=true)\nadd_label(i_ma_2_show, ma_2, i_ma_2_timeframe, i_ma_2_type, i_ma_2_length, i_ma_2_color)\n```\n\n----------------------------------------\n\nTITLE: Adjusting Margins for Imbalance Zones in PineScript\nDESCRIPTION: Method to adjust the margins of imbalance zones based on user settings and proximity range. It filters imbalances to only display those within a specified range and up to a maximum count, while deleting visual elements for imbalances outside the range.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_7\n\nLANGUAGE: pine\nCODE:\n```\nmethod AdjustMargins(ImbalanceStructure IS, int step) =>\n    int count = 0\n    if IS.imbalance.size() > 0\n        int buffer = time+((time-time[1])*(settings.padding+1+(settings.buffer*(step-1))))\n        \n        [rl, rh] = helper.ProximityRange(IS.settings.htf)\n\n        for i = 0 to IS.imbalance.size() - 1\n            imb = IS.imbalance.get(i)\n            if ((math.max(imb.open, imb.close) > rl) and (math.min(imb.open, imb.close) < rh)) and count < IS.settings.max_count\n                if IS.AddZone(imb, step)\n                    count := count+1\n            else\n                if not na(imb.box)\n                    box.delete(imb.box)\n                    label.delete(imb.lbl)\n                    line.delete((imb.line_middle))\n    IS\n```\n\n----------------------------------------\n\nTITLE: Plotting Flip Signals in PineScript\nDESCRIPTION: This code plots the flip signals as shapes and background colors on the chart.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_16\n\nLANGUAGE: pinescript\nCODE:\n```\nplotshape(series=i_scr_choose == 'Flip Signals' ? short_entry : na, title='Short Flip', style=shape.triangledown, location=location.abovebar, color=i_neg_light_color, size=size.tiny)\nplotshape(series=i_scr_choose == 'Flip Signals' ? long_entry  : na, title='Long Flip', style=shape.triangleup, location=location.belowbar, color=i_pos_light_color, size=size.tiny)\n\nbgcolor(color=i_scr_choose == 'Flip Signals' and short_entry ? color.new(i_neg_light_color, 90) : i_scr_choose == 'Flip Signals' and long_entry ? color.new(i_pos_light_color, 90) : na, title='Flip Bgcolor', show_last=i_display_len)\nbarcolor(color=i_scr_choose == 'Flip Signals' and short_entry ? i_neg_light_color : i_scr_choose == 'Flip Signals' and long_entry ? i_pos_light_color : na, title='Flip Candle')\n```\n\n----------------------------------------\n\nTITLE: Implementing Gap Type for FVG Management in PineScript\nDESCRIPTION: Defines a 'Gap' type to represent chart gaps and associated box drawings. Includes methods for managing the gap's lifecycle, including partial and full closure.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_8\n\nLANGUAGE: pine\nCODE:\n```\ntype Gap\n    bool isActive\n    bool isBull\n    array<box> boxes\n\nmethod delete(Gap this) =>\n    for _box in this.boxes\n        _box.delete()\n\nmethod partialClose(Gap this) =>\n    activeBox = this.boxes.last()\n    activeBox.set_extend(extend.none)\n\n    top = this.isBull ? activeBox.get_top() : low\n    bottom = this.isBull ? high : activeBox.get_bottom()\n\n    this.boxes.push(box.new(\n      bar_index,\n      top,\n      bar_index,\n      bottom, \n      this.isBull ? color.new(i_neg_color, i_transp + add_transp) : color.new(i_pos_color, i_transp + add_transp), \n      bgcolor = this.isBull ? color.new(i_neg_color, i_transp) : color.new(i_pos_color, i_transp)))\n    \n\nmethod fullClose(Gap this) =>\n    alertInfo.countClosedGap += 1\n    activeBox = this.boxes.last()\n    activeBox.set_extend(extend.none)\n    this.isActive := false\n    if closeGapsPartially\n        activeBox.delete()    \n\nmethod checkForClose(Gap this) =>\n    if this.isActive\n        activeBox = this.boxes.last()\n        top = activeBox.get_top() \n        bot = activeBox.get_bottom()\n        isBull = this.isBull\n        activeBox.set_right(bar_index)\n\n        if (high > bot and isBull) or (low < top and not isBull)\n            if closeGapsPartially\n                this.partialClose()                \n            else\n                this.fullClose()\n\n        bool forceCloseBoxExceededLengthLimit = (limitBoxLengthBoolInput and bar_index - activeBox.get_left() >= limitBoxLengthIntInput)\n        if ((high > top and isBull) or (low < bot and not isBull)) or forceCloseBoxExceededLengthLimit\n            this.fullClose()\n```\n\n----------------------------------------\n\nTITLE: EMA Calculation and Plotting\nDESCRIPTION: Implements Exponential Moving Average (EMA) calculations for different periods (20, 50, 100, 200) and plots them on the chart with customizable colors.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_1\n\nLANGUAGE: pinescript\nCODE:\n```\nfloat ema_1 = ta.ema(close, i_ma_len_1)\nfloat ema_2 = ta.ema(close, i_ma_len_2)\nfloat ema_3 = ta.ema(close, i_ma_len_3)\nfloat ema_4 = ta.ema(close, i_ma_len_4)\n\nplot(series=i_ma_display ? ema_1 : na, title='EMA 1', color=i_pos_color)\nplot(series=i_ma_display ? ema_2 : na, title='EMA 2', color=i_indicator_color)\nplot(series=i_ma_display ? ema_3 : na, title='EMA 3', color=i_signal_color)\nplot(series=i_ma_display ? ema_4 : na, title='EMA 4', color=i_neg_color)\n```\n\n----------------------------------------\n\nTITLE: Initializing PineScript Indicator for Momentum Scalping Setup\nDESCRIPTION: This snippet initializes the PineScript indicator with its title, overlay settings, and maximum allowed elements. It sets up the basic structure for the momentum scalping setup indicator.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\n//@version=5\nindicator(title='Momentum Setup: Vijay Thakare Option Buying Scalping Setup', shorttitle='VT Scalp', overlay=true, max_bars_back=500, max_lines_count=500, max_boxes_count=500)\n```\n\n----------------------------------------\n\nTITLE: Implementing Performance Table for RSI Momentum Indicator in Pine Script\nDESCRIPTION: Sets up a performance table to display cumulative percentage change and volume metrics. The table includes customizable position and size options.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Indicator] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\nstring g_cum = '█████████████ Performance Table █████████████'\nbool i_cum_tbl_disp = input.bool(defval = true, title = 'Display', group = g_cum)\nstring i_cum_tbl_pos = input.string(defval = position.bottom_right, title = 'Position', options = [position.top_left, position.top_center, position.top_right, position.middle_left, position.middle_center, position.middle_right, position.bottom_left, position.bottom_center, position.bottom_right], group = g_cum)\nstring i_cum_tbl_size = input.string(defval = size.normal, title = 'Size', options = [size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group = g_cum)\n\ncolor i_pos_color = #089981\ncolor i_pos_light_color = #70CCBD\ncolor i_neg_light_color = #FAA1A4\ncolor i_neg_color = #F23645\ncolor i_indicator_color = #2962FF\ncolor i_signal_color = #FF6D00\ncolor i_neu_color = #D1D4DC\ncolor i_neu_dark_color = #0F0F0F\n\n//___________________________ Menu End\n\n//___________________________ Performance Start\n\nis_new_day = ta.change(time('D')) != 0\n\n// Cumulative Percentage Change\nvar float cum_pchg = na\nday_pchg = na(close[1]) ? 0 : (close - close[1]) / close[1] * 100\ncum_pchg := is_new_day ? day_pchg : na(cum_pchg) ? day_pchg : cum_pchg + day_pchg\n\n// Cumulative Volume and Volume Percentage Change\nvar float curr_cum_vol = na\nvar float prev_cum_vol = na\nif is_new_day\n    prev_cum_vol := curr_cum_vol\n    curr_cum_vol := volume\n    curr_cum_vol\nelse\n    curr_cum_vol := na(curr_cum_vol) ? volume : curr_cum_vol + volume\n    curr_cum_vol\nprev_vol_safe = nz(prev_cum_vol, curr_cum_vol)\ncum_vol_pchg = (curr_cum_vol - prev_vol_safe) / prev_vol_safe * 100\n\nvar table tbl_cum = table.new(position=i_cum_tbl_pos, columns=2, rows=4, border_width=1, force_overlay=true)\n\ncell_perform(col, row, txt, txt_color, aligh) =>\n    table.cell(tbl_cum, col, row, txt, text_color=txt_color, text_halign=aligh, bgcolor=i_neu_dark_color, text_size=i_cum_tbl_size)\n\nif barstate.islast and i_cum_tbl_disp\n    pchg_col = cum_pchg > 0 ? i_pos_color : i_neg_color\n    vol_pchg_col = cum_vol_pchg > 0 ? i_pos_color : i_neg_color\n    prev_vol_pchg_col = prev_vol_safe < curr_cum_vol ? i_neg_color : i_pos_color\n    \n    cell_perform(0, 0, '%Chg', chart.fg_color, text.align_left)\n```\n\n----------------------------------------\n\nTITLE: Source Selection and Resolution Calculation in PineScript\nDESCRIPTION: Initializes common variables and selects the price source for pivot high and low calculations based on user preferences. It also stores the current chart's resolution in minutes for timeframe comparisons.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_19\n\nLANGUAGE: pine\nCODE:\n```\n// Common Calculations\nvar res_in_minutes = f_resInMinutes()\n\n// Get Source\nfloat _high = i_phl_1_source == 'Open/Close' ? math.max(open, close) : high\nfloat _low = i_phl_1_source == 'Open/Close' ? math.min(open, close) : low\n```\n\n----------------------------------------\n\nTITLE: CSV Symbol List Parser for Multi-Symbol Scanning in PineScript\nDESCRIPTION: Parses a comma-separated list of symbols into individual ticker IDs. The function extracts one symbol at a time from the list and returns both the extracted symbol and the remaining list for further processing.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] ICT Retracement to Order Block with Screener.txt#2025-04-16_snippet_5\n\nLANGUAGE: pine\nCODE:\n```\nfeed(back) =>                                             // extract tickerid and decrement list of ticker IDs\n    loop  = back                                          // declare string variable to hold content list\n    getT  = string(na)                                    // declare string variable to hold tickerid\n    if str.length(loop) == 0                              // if list is empty\n        getT := string(na)                                // assign na to tickerid variable\n        loop := string(na)                                // assign na to list of ticker Ids variable\n    else                                                  // else extract first tickerid\n        getP  = nz(str.pos(loop, ','), str.length(loop))  // get position of first comma or last character\n        getT := str.substring(loop, 0, getP)              // get tickerid in first position of list\n        loop := str.replace(loop, getT + ',', '')         // clear tickerid + delimiter character from list\n    [getT, loop]                                          // return tickerid in first position & truncated list\n\n[tid_001, out_001] = feed(i_symbols), [tid_002, out_002] = feed(out_001), [tid_003, out_003] = feed(out_002), [tid_004, out_004] = feed(out_003),\n[tid_005, out_005] = feed(out_004), [tid_006, out_006] = feed(out_005), [tid_007, out_007] = feed(out_006), [tid_008, out_008] = feed(out_007),\n[tid_009, out_009] = feed(out_008), [tid_010, out_010] = feed(out_009), [tid_011, out_011] = feed(out_010), [tid_012, out_012] = feed(out_011),\n[tid_013, out_013] = feed(out_012), [tid_014, out_014] = feed(out_013), [tid_015, out_015] = feed(out_014), [tid_016, out_016] = feed(out_015),\n[tid_017, out_017] = feed(out_016), [tid_018, out_018] = feed(out_017), [tid_019, out_019] = feed(out_018), [tid_020, out_020] = feed(out_019),\n[tid_021, out_021] = feed(out_020), [tid_022, out_022] = feed(out_021), [tid_023, out_023] = feed(out_022), [tid_024, out_024] = feed(out_023),\n[tid_025, out_025] = feed(out_024), [tid_026, out_026] = feed(out_025), [tid_027, out_027] = feed(out_026), [tid_028, out_028] = feed(out_027),\n[tid_029, out_029] = feed(out_028), [tid_030, out_030] = feed(out_029), [tid_031, out_031] = feed(out_030), [tid_032, out_032] = feed(out_031),\n[tid_033, out_033] = feed(out_032), [tid_034, out_034] = feed(out_033), [tid_035, out_035] = feed(out_034), [tid_036, out_036] = feed(out_035),\n[tid_037, out_037] = feed(out_036), [tid_038, out_038] = feed(out_037), [tid_039, out_039] = feed(out_038), [tid_040, out_040] = feed(out_039)\n```\n\n----------------------------------------\n\nTITLE: Creating Security Data Request Function in PineScript\nDESCRIPTION: Defines a data retrieval function that uses request.security to fetch price data from different timeframes. This enables the script to access data across multiple timeframes while maintaining proper lookahead settings.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\n//_____________________________ Get Data Function\n\ndata(timeframe, price) =>\n  request.security(symbol=syminfo.tickerid, timeframe=timeframe, expression=price, lookahead=barmerge.lookahead_on)\n```\n\n----------------------------------------\n\nTITLE: Implementing ICT Liquidity Void Fill Scanner Logic in PineScript\nDESCRIPTION: This snippet outlines the core logic of the ICT Liquidity Void Fill Scanner. It identifies momentum candles, high volatility candles with 80% body, and displacements. Signals are generated when price retraces to the candle body, void, or FVG based on Fibonacci values. It's recommended to use higher timeframes like 4-hour or 1-hour for stock selection.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/Readme First.txt#2025-04-16_snippet_0\n\nLANGUAGE: PineScript\nCODE:\n```\n// Readme First:\n\n// ICT Liquidity Void Fill Scanner\n\n// Logic\n//   - This identifies a momentum candle, an 80% body candle with high volatility, or a displacement.\n//   - A signal is generated when the price retraces to the candle body, void, or FVG, based on the Fibonacci value.\n\n// Notes\n//   - Use a higher timeframe, like 4 hour or 1 hour, for stock selection.\n//   - The Scanner will generate wrong signals also.\n```\n\n----------------------------------------\n\nTITLE: Implementing ICT Retracement Strategy in PineScript\nDESCRIPTION: Defines the core logic for the ICT retracement strategy, including momentum candle identification, ATR support, Donchian channel calculation, and signal generation for primary, secondary, and tertiary conditions in both long and short directions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] ICT Retracement to Order Block with Screener.txt#2025-04-16_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\n//_______________________ Momentum Candle Start\nbody = math.abs(close - open)\nwick = high - low\nmomentum_candle = body / wick > 0.66\n//_______________________ Momentum Candle End\n\n//_______________________ ATR Start\natr_support = wick >= ta.atr(14)\n//_______________________ ATR End\n\n//_______________________ Donchain Start\nhighest_high = ta.highest(high, i_period)[1]\nlowest_low = ta.lowest(low, i_period)[1]\n\nplot(series=highest_high, title=\"Highest High\", color=i_neg_col, display=display.none)\nplot(series=lowest_low, title=\"Lowest Low\", color=i_pos_col, display=display.none)\n//_______________________ Donchain End\n\n//___________________________ Primary Signal Start\n// Primary Signal Rules\nprimary_long_condition = barstate.isconfirmed and\n open > close and\n low < lowest_low and\n momentum_candle and \n atr_support \n\nprimary_short_condition = barstate.isconfirmed and\n open < close and\n high > highest_high and\n momentum_candle and \n atr_support\n\n// Primary Signal Function\nexrem(condition_1, condition_2) =>\n    var entry_signal = 0\n    entry_signal := condition_1 ? 1 : condition_2 ? -1 : entry_signal[1]\n    entry = entry_signal != entry_signal[1]\n    buy = entry and entry_signal == 1\n    sell = entry and entry_signal == -1\n    [buy, sell]\n\n// Primary Signals\n[primary_long_signal, primary_short_signal] = exrem(primary_long_condition, primary_short_condition)\n//___________________________ Primary Signal End\n\n//___________________________ Secondary Signal Start\n// Secondary Signal Function\ntrigger(primary_condition, secondary_condition) =>\n    var current_state = 0\n    previous_state = nz(current_state[1])\n    current_state := previous_state == 2 ? 0 : previous_state\n    if primary_condition and current_state == 0\n        current_state := 1\n    if secondary_condition and current_state == 1\n        current_state := 2\n    trigger_condition = current_state == 2 ? true : false\n    [current_state, trigger_condition]\n\nvar prev_high_when_crossover = float(na)\nif primary_long_signal\n    prev_high_when_crossover := high\n\nvar prev_low_when_crossunder = float(na)\nif primary_short_signal\n    prev_low_when_crossunder := low\n\n// Secondary Signal Rules\nsecondary_long_condition = barstate.isconfirmed and\n open < close and\n close > prev_high_when_crossover and\n atr_support\n\nsecondary_short_condition = barstate.isconfirmed and\n open > close and\n close < prev_low_when_crossunder and\n atr_support\n\n// Secondary Signal\n[secondary_long, secondary_long_signal] = trigger(primary_long_signal, secondary_long_condition)\n[secondary_short, secondary_short_signal] = trigger(primary_short_signal, secondary_short_condition)\n//___________________________ Secondary Signal End\n\n//___________________________ Teritiary Signal Start\nvar primary_long_candle_high = float(na)\nif primary_long_signal\n    primary_long_candle_high := top_price\n\nvar primary_short_candle_low = float(na)\nif primary_short_signal\n    primary_short_candle_low := bottom_price\n\n// Teritiary Signal Rules\nteritiary_long_condition = barstate.isconfirmed and\n ta.crossunder(low, primary_long_candle_high)\n\nteritiary_short_condition = barstate.isconfirmed and\n ta.crossover(high, primary_short_candle_low)\n\n// Teritiary Signal\n[teritiary_long, teritiary_long_signal] = trigger(secondary_long_signal, teritiary_long_condition)\n[teritiary_short, teritiary_short_signal] = trigger(secondary_short_signal, teritiary_short_condition)\n//___________________________ Secondary Signal End\n```\n\n----------------------------------------\n\nTITLE: Bearish Liquidity Void Detection\nDESCRIPTION: Implementation of bearish liquidity void detection logic with array management and visual element updates.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void/ICT Liquidity Void Screener.txt#2025-04-16_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\nif i_lv_bear_show and barstate.isconfirmed and (close > open)\n    bear_filter = filter(bear_prev_low, high, ta.atr(i_lv_atr_length), i_lv_atr_multi, i_lv_percentage, i_lv_additional)\n    bear_price_source = price_source(bear_prev_low, high, i_lv_line)\n\n    if (na(bear_prev_low) or high <= bear_prev_low) and bear_filter\n        lv_bear_line = draw_line(bear_prev_low_time, bear_price_source, i_lv_bear_color)\n        lv_bear_box = draw_box(bear_prev_low_time, high, bear_prev_low, i_lv_bear_color)\n```\n\n----------------------------------------\n\nTITLE: Implementing Helper Methods for Timeframe Management in Pine Script\nDESCRIPTION: Defines utility methods for the Helper type to manage timeframe-related operations. These methods format timeframe text for display, validate timeframe relationships, and calculate proximity ranges based on the current timeframe context.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\n//____________________________ Methods\n\nmethod Gethtftext(Helper helper, string htf) =>\n    helper.name := htf\n\n    formatted = htf\n    seconds = timeframe.in_seconds(htf)\n\n    if seconds < 60\n        formatted := str.tostring(seconds) + \"s\\n\\n\"\n    else if (seconds / 60) < 60\n        formatted := str.tostring((seconds/60)) + \"m\\n\\n\"\n    else if (seconds/60/60) < 24\n        formatted := str.tostring((seconds/60/60)) + \"H\\n\\n\"\n    \n    formatted\n\nmethod Validtimeframe(Helper helper, tf) =>\n    helper.name := tf\n    n1 = timeframe.in_seconds()\n    n2 = timeframe.in_seconds(tf)\n\n    n1 < n2\n\nmethod ProximityRange(Helper helper, tf) =>\n    helper.name := tf\n    float range_high    = 0\n    float range_low   = 0\n    if timeframe.isseconds or timeframe.isminutes\n        range_high := close + daily\n        range_low  := close - daily\n    if timeframe.isdaily\n        range_high := close + monthly*3\n        range_low  := close - monthly*3\n    if timeframe.isweekly\n        range_high := close + monthly*12\n        range_low  := close - monthly*12\n\n    [range_low, range_high]\n```\n\n----------------------------------------\n\nTITLE: Calculating TPO Frequencies for Price Sections\nDESCRIPTION: Calculates TPO frequencies for 21 different price sections within the session range. This divides the session's price range into segments and tracks how often price visits each segment during the session.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] Market Profile with Screener (Based on [RS]Market Profile by RicardoSantos).txt#2025-04-16_snippet_5\n\nLANGUAGE: pine script\nCODE:\n```\n//  ||--    frequency the tpo range is visited:\ntpo_00 = f_frequency_of_range(tf_close, session_high, session_high - tpo_section_range * 1, session_bar_counter)\ntpo_01 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 1, session_high - tpo_section_range * 2, session_bar_counter)\ntpo_02 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 2, session_high - tpo_section_range * 3, session_bar_counter)\ntpo_03 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 3, session_high - tpo_section_range * 4, session_bar_counter)\ntpo_04 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 4, session_high - tpo_section_range * 5, session_bar_counter)\ntpo_05 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 5, session_high - tpo_section_range * 6, session_bar_counter)\ntpo_06 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 6, session_high - tpo_section_range * 7, session_bar_counter)\ntpo_07 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 7, session_high - tpo_section_range * 8, session_bar_counter)\ntpo_08 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 8, session_high - tpo_section_range * 9, session_bar_counter)\ntpo_09 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 9, session_high - tpo_section_range * 10, session_bar_counter)\ntpo_10 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 10, session_high - tpo_section_range * 11, session_bar_counter)\ntpo_11 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 11, session_high - tpo_section_range * 12, session_bar_counter)\ntpo_12 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 12, session_high - tpo_section_range * 13, session_bar_counter)\ntpo_13 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 13, session_high - tpo_section_range * 14, session_bar_counter)\ntpo_14 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 14, session_high - tpo_section_range * 15, session_bar_counter)\ntpo_15 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 15, session_high - tpo_section_range * 16, session_bar_counter)\ntpo_16 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 16, session_high - tpo_section_range * 17, session_bar_counter)\ntpo_17 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 17, session_high - tpo_section_range * 18, session_bar_counter)\ntpo_18 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 18, session_high - tpo_section_range * 19, session_bar_counter)\ntpo_19 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 19, session_high - tpo_section_range * 20, session_bar_counter)\ntpo_20 = f_frequency_of_range(tf_close, session_high - tpo_section_range * 20, session_high - tpo_section_range * 21, session_bar_counter)\n```\n\n----------------------------------------\n\nTITLE: Symbol Extraction for Screener in PineScript\nDESCRIPTION: Extracts multiple ticker symbols from a CSV-formatted input string for use in a screener. This code sequentially extracts up to 40 individual symbols from the input string by repeatedly calling the feed function.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_21\n\nLANGUAGE: pine\nCODE:\n```\n[tid_01, out_01] = feed(i_symbols), [tid_02, out_02] = feed(out_01), [tid_03, out_03] = feed(out_02), [tid_04, out_04] = feed(out_03),\n[tid_05, out_05] = feed(out_04), [tid_06, out_06] = feed(out_05), [tid_07, out_07] = feed(out_06), [tid_08, out_08] = feed(out_07),\n[tid_09, out_09] = feed(out_08), [tid_10, out_10] = feed(out_09), [tid_11, out_11] = feed(out_10), [tid_12, out_12] = feed(out_11),\n[tid_13, out_13] = feed(out_12), [tid_14, out_14] = feed(out_13), [tid_15, out_15] = feed(out_14), [tid_16, out_16] = feed(out_15),\n[tid_17, out_17] = feed(out_16), [tid_18, out_18] = feed(out_17), [tid_19, out_19] = feed(out_18), [tid_20, out_20] = feed(out_19),\n[tid_21, out_21] = feed(out_20), [tid_22, out_22] = feed(out_21), [tid_23, out_23] = feed(out_22), [tid_24, out_24] = feed(out_23),\n[tid_25, out_25] = feed(out_24), [tid_26, out_26] = feed(out_25), [tid_27, out_27] = feed(out_26), [tid_28, out_28] = feed(out_27),\n[tid_29, out_29] = feed(out_28), [tid_30, out_30] = feed(out_29), [tid_31, out_31] = feed(out_30), [tid_32, out_32] = feed(out_31),\n[tid_33, out_33] = feed(out_32), [tid_34, out_34] = feed(out_33), [tid_35, out_35] = feed(out_34), [tid_36, out_36] = feed(out_35),\n[tid_37, out_37] = feed(out_36), [tid_38, out_38] = feed(out_37), [tid_39, out_39] = feed(out_38), [tid_40, out_40] = feed(out_39)\n```\n\n----------------------------------------\n\nTITLE: Formatting Time and Extracting Symbol Functions in PineScript\nDESCRIPTION: Two utility functions for formatting time based on the timezone and timeframe, and for extracting the symbol name from a full ticker string by splitting at the colon character.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_22\n\nLANGUAGE: PineScript\nCODE:\n```\n// Function to format time\nformat_time(x) =>\n    timezone = syminfo.timezone\n    timeframe.isintraday ? str.format_time(x, 'HH:mm  dd-MM-yyyy', timezone) : str.format_time(x, 'dd-MM-yyyy', timezone)\n\n// Function to extract symbol name\nsymbol(s) =>\n    array.get(str.split(s, ':'), 1)\n```\n\n----------------------------------------\n\nTITLE: Matrix Data Management Functions\nDESCRIPTION: Functions for managing data in a matrix structure, including initialization and row addition functionality.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Market Structure Shift (MSS)/ICT Market Structure Shift (MSS) Screener.txt#2025-04-16_snippet_10\n\nLANGUAGE: pinescript\nCODE:\n```\nvar matrix = matrix.new<string>(0, 4, na)\n\nmtxFun(symbol, _time, price, signal) =>\n    matrix.add_row(matrix, 0, array.from(symbol, _time, price, signal))\n```\n\n----------------------------------------\n\nTITLE: Initializing Arrays for Visualization Elements in PineScript\nDESCRIPTION: Creates arrays to store line and box objects for each magnetic zone level. These arrays allow for managing the visual elements and updating them when new data comes in.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_9\n\nLANGUAGE: pine\nCODE:\n```\nvar mz_1_ph_ln_arr = array.new_line(), var mz_1_pl_ln_arr = array.new_line()\nvar mz_1_p_ln_arr = array.new_line()\nvar mz_1_r_1_ln_arr = array.new_line(), var mz_1_s_1_ln_arr = array.new_line()\nvar mz_1_r_2_ln_arr = array.new_line(), var mz_1_s_2_ln_arr = array.new_line()\nvar mz_1_r_3_ln_arr = array.new_line(), var mz_1_s_3_ln_arr = array.new_line()\nvar mz_1_r_4_ln_arr = array.new_line(), var mz_1_s_4_ln_arr = array.new_line()\nvar mz_1_r_5_ln_arr = array.new_line(), var mz_1_s_5_ln_arr = array.new_line()\nvar mz_1_r_6_ln_arr = array.new_line(), var mz_1_s_6_ln_arr = array.new_line()\n\nvar mz_1_r_1_s_1_bx_arr = array.new_box()\nvar mz_1_r_1_bx_arr = array.new_box(), var mz_1_s_1_bx_arr = array.new_box()\nvar mz_1_r_2_bx_arr = array.new_box(), var mz_1_s_2_bx_arr = array.new_box()\n//var mz_1_r_3_bx_arr = array.new_box(), var mz_1_s_3_bx_arr = array.new_box()\nvar mz_1_r_4_bx_arr = array.new_box(), var mz_1_s_4_bx_arr = array.new_box()\n//var mz_1_r_5_bx_arr = array.new_box(), var mz_1_s_5_bx_arr = array.new_box()\nvar mz_1_r_6_bx_arr = array.new_box(), var mz_1_s_6_bx_arr = array.new_box()\n```\n\n----------------------------------------\n\nTITLE: Calculating and Plotting EMAs in PineScript\nDESCRIPTION: This code calculates Exponential Moving Averages (EMAs) for different periods and plots them on the chart. It uses the user-defined display settings to control visibility.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_5\n\nLANGUAGE: pine\nCODE:\n```\nfloat ema_1 = ta.ema(close, i_ma_len_1)\nfloat ema_2 = ta.ema(close, i_ma_len_2)\nfloat ema_3 = ta.ema(close, i_ma_len_3)\nfloat ema_4 = ta.ema(close, i_ma_len_4)\n\nplot(series=i_ma_display ? ema_1 : na, title='EMA 1', color=i_pos_color)\nplot(series=i_ma_display ? ema_2 : na, title='EMA 2', color=i_indicator_color)\nplot(series=i_ma_display ? ema_3 : na, title='EMA 3', color=i_signal_color)\nplot(series=i_ma_display ? ema_4 : na, title='EMA 4', color=i_neg_color)\n```\n\n----------------------------------------\n\nTITLE: Configuring Table and Chart Display Settings in Pine Script\nDESCRIPTION: This code defines the display settings for the indicator table and chart appearance. Users can customize the table position, text size, chart display length, and colors for different market conditions and indicators.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup with Scanner.txt#2025-04-16_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\ng_tb = '███████████████████ Table ███████████████████'\nstring i_tbl_position = input.string(defval=position.top_right, title='Position', options=[position.top_left, position.top_center, position.top_right, position.middle_left, position.middle_center, position.middle_right, position.bottom_left, position.bottom_center, position.bottom_right], group=g_tb)\nstring i_tbl_text_size = input.string(defval=size.normal, title='Size', options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group=g_tb)\n\n//_____________________________ Menu Table End\n\n//_____________________________ Chart Settings Start\n\ng_ch = '████████████████ Chart Settings ████████████████'\nint i_display_len = input.int(defval=50, title='Display Length', minval=1, group=g_ch)\ncolor i_pos_col = input.color(defval=#26A69A, title='Positive', group=g_ch)\ncolor i_pos_light_col = input.color(defval=#B2DFDB, title='Positive Light', group=g_ch)\ncolor i_neg_light_col = input.color(defval=#FFCDD2, title='Negative Light', group=g_ch)\ncolor i_neg_col = input.color(defval=#FF5250, title='Negative', group=g_ch)\ncolor i_indicator_col = input.color(defval=#2962FF, title='Indicator', group=g_ch)\ncolor i_signal_col = input.color(defval=#FF6D00, title='Signal', group=g_ch)\ncolor i_neu_col = input.color(defval=#787B86, title='Neutral', group=g_ch)\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZigZag Swing Points in PineScript\nDESCRIPTION: Extracts the ZigZag swing points and their corresponding bar indices from the ZigZag array. This enables the script to reference specific swing points for pattern detection and trading signals.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_10\n\nLANGUAGE: pine\nCODE:\n```\n//_____________________________ Get Swing Price & Bar Index\n\nzz_0 = array.size(zigzag) > 17 ? array.get(zigzag, array.size(zigzag) - 18) : na\nbi_0 = array.size(zigzag) > 16 ? array.get(zigzag, array.size(zigzag) - 17) : na\nzz_1 = array.size(zigzag) > 15 ? array.get(zigzag, array.size(zigzag) - 16) : na\nbi_1 = array.size(zigzag) > 14 ? array.get(zigzag, array.size(zigzag) - 15) : na\nzz_2 = array.size(zigzag) > 13 ? array.get(zigzag, array.size(zigzag) - 14) : na\nbi_2 = array.size(zigzag) > 12 ? array.get(zigzag, array.size(zigzag) - 13) : na\nzz_3 = array.size(zigzag) > 11 ? array.get(zigzag, array.size(zigzag) - 12) : na\n//bi_3 = array.size(zigzag) > 10 ? array.get(zigzag, array.size(zigzag) - 11) : na\nzz_4 = array.size(zigzag) > 9 ? array.get(zigzag, array.size(zigzag) - 10) : na\n//bi_4 = array.size(zigzag) > 8 ? array.get(zigzag, array.size(zigzag) - 9) : na\nzz_5 = array.size(zigzag) > 7 ? array.get(zigzag, array.size(zigzag) - 8) : na\n//bi_5 = array.size(zigzag) > 6 ? array.get(zigzag, array.size(zigzag) - 7) : na\nzz_6 = array.size(zigzag) > 5 ? array.get(zigzag, array.size(zigzag) - 6) : na\n//bi_6 = array.size(zigzag) > 4 ? array.get(zigzag, array.size(zigzag) - 5) : na\nzz_7 = array.size(zigzag) > 3 ? array.get(zigzag, array.size(zigzag) - 4) : na\n//bi_7 = array.size(zigzag) > 2 ? array.get(zigzag, array.size(zigzag) - 3) : na\nzz_8 = array.size(zigzag) > 1 ? array.get(zigzag, array.size(zigzag) - 2) : na\nbi_8 = array.size(zigzag) > 0 ? array.get(zigzag, array.size(zigzag) - 1) : na\n\n// Create a single label for the last five zigzag values and their corresponding bar index\n//label_text = str.tostring(zz_0) + \"\\n\" + str.tostring(bi_0) + \"\\n\" + str.tostring(zz_1) + \"\\n\" + str.tostring(bi_1) + \"\\n\" + str.tostring(zz_2) + \n// \"\\n\" + str.tostring(bi_2) + \"\\n\" + str.tostring(zz_3) + \"\\n\" + str.tostring(bi_3) + \"\\n\" + str.tostring(zz_4) + \"\\n\" + str.tostring(bi_4)\n//if barstate.islast\n//    label.new(x = bar_index, y = high, text = label_text, color=color.white)\n```\n\n----------------------------------------\n\nTITLE: Calculating Percentage Change Between Price Points in PineScript\nDESCRIPTION: Function that calculates the absolute percentage change between two price points. This is used to determine if pivot points are close enough to be considered 'equal' for analysis purposes.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_25\n\nLANGUAGE: pinescript\nCODE:\n```\n// Function to calculate percentage change\npchg(price_1, price_2) =>\n    change = price_1 - price_2\n    percent_change = math.abs((change / price_2) * 100)\n    percent_change\n```\n\n----------------------------------------\n\nTITLE: Visual Elements and Plotting\nDESCRIPTION: Handles the visualization aspects of the indicator including shape plotting, bar coloring, and drawing lines for identified liquidity voids and signals.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Indicator] ICT Liquidity Void Fill.txt#2025-04-16_snippet_3\n\nLANGUAGE: pinescript\nCODE:\n```\n//_____________________________ Plot Start\n\n// Plot\nplotshape(series = i_scr_show_short and short_ret_signal ? 3 : na, title = 'Short Signal', style = shape.triangledown, location = location.abovebar, color = i_neg_light_color, size = size.tiny, force_overlay = true)\nplotshape(series = i_scr_show_long and long_ret_signal ? 3 : na, title = 'Long Signal', style = shape.triangleup, location = location.belowbar, color = i_pos_light_color, size = size.tiny, force_overlay = true)\nbarcolor(color = i_scr_show_short and short_cont_1 ? i_neg_light_color : i_scr_show_long and long_cont_1 ? i_pos_light_color : na, title = '80% Candle')\n```\n\n----------------------------------------\n\nTITLE: Drawing MZ 3 Support and Resistance Elements in PineScript\nDESCRIPTION: Conditional code that draws lines and boxes for MZ 3 timeframe when the timeframe changes. It creates visual elements for high/low price levels, pivot points, and support/resistance zones.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_18\n\nLANGUAGE: pine\nCODE:\n```\nif(timeframe.change(i_mz_3_tf))\n    if i_mz_3_pdhl_show\n        mz_3_ph_ln = draw_line(mz_3_time, mz_3_time_close, mz_3_ph, i_mz_3_sub_color, i_mz_3_ln_style, i_mz_3_ln_width)\n        array.push(mz_3_ph_ln_arr, mz_3_ph_ln)\n        mz_3_pl_ln = draw_line(mz_3_time, mz_3_time_close, mz_3_pl, i_mz_3_sub_color, i_mz_3_ln_style, i_mz_3_ln_width)\n        array.push(mz_3_pl_ln_arr, mz_3_pl_ln)\n\n    if i_mz_3_p_show\n        mz_3_p_ln = draw_line(mz_3_time, mz_3_time_close, mz_3_p, i_mz_3_sub_color, i_mz_3_ln_style, i_mz_3_ln_width)\n        array.push(mz_3_p_ln_arr, mz_3_p_ln)\n\n    if i_mz_3_sr_1_show\n        mz_3_r_1_ln = draw_line(mz_3_time, mz_3_time_close, mz_3_r_1, i_mz_3_sub_color, i_mz_3_ln_style, i_mz_3_ln_width)\n        array.push(mz_3_r_1_ln_arr, mz_3_r_1_ln)\n        mz_3_s_1_ln = draw_line(mz_3_time, mz_3_time_close, mz_3_s_1, i_mz_3_sub_color, i_mz_3_ln_style, i_mz_3_ln_width)\n        array.push(mz_3_s_1_ln_arr, mz_3_s_1_ln)\n```\n\n----------------------------------------\n\nTITLE: Calculating Cumulative Percentage Change in PineScript\nDESCRIPTION: This function calculates the daily cumulative percentage change by resetting on each new day or adding to the previous cumulative value. It tracks how the price has changed cumulatively since the start of the day.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Indicator - Trend Following Setup - Sideways Market Skipper.txt#2025-04-16_snippet_3\n\nLANGUAGE: pinescript\nCODE:\n```\n_cum_pct_change := _is_new_day ? _daily_pct_change : (na(_cum_pct_change) ? _daily_pct_change : (_cum_pct_change + _daily_pct_change))\n    _cum_pct_change\n\n// Calculate current cumulative percentage change\ncum_pchg = cumulative_percentage_change()\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Trade Filters in Pine Script\nDESCRIPTION: Creates various technical filters including ATR, body percentage, body size, volume, relative volume, and time filters to qualify trade signals based on configurable parameters.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_8\n\nLANGUAGE: pine\nCODE:\n```\n// ATR Filter\nbool atr_filter = true\nif i_atr_filter\n    atr_filter := (high - low) > ta.atr(i_atr_length) * i_atr_multi\n\n// Body Percent Filter\nbool body_filter = true\nif i_body_filter\n    body_filter := (math.abs(close - open)) / (high - low) >= i_body_percent\n\n// Body Size Filter\nbool body_size_filter = true\nif i_body_size_filter\n    body_size_filter := (math.abs(close - open)) / (high - low) >= i_body_percent and (high - low) >= (high[1] - low[1]) * i_body_size_multiplier\n\n// Volume SMA Filter\nbool volume_filter = true\nif i_volume_filter\n    volume_filter := volume > ta.sma(volume, i_vol_sma_length)\n\n// Relative Volume Filter\naverage_volume = ta.sma(volume, i_rel_vol_avg_vol_len)\nrelative_volume = volume / average_volume[1]\nrel_vol_sma_multiplier = ta.sma(relative_volume, i_rel_vol_avg_vol_len) * i_rel_vol_avg_vol_multi\n\nbool rel_vol_filter = true\nif i_rel_vol_filter\n    rel_vol_filter := relative_volume > rel_vol_sma_multiplier\n\n// Time Filter\nbool time_filter = true\nif i_time_filter\n    time_filter := (hour > i_hour_1 or (hour == i_hour_1 and minute >= i_minute_1)) and (hour < i_hour_2 or (hour == i_hour_2 and minute < i_minute_2))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pivot Point Values from Arrays in PineScript\nDESCRIPTION: Gets pivot price and bar index values from arrays for processing. These values represent the most recent pivot points detected in the price data.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External and Internal Range Liquidity/ICT External and Internal Range Liquidity Multi-timeframe.txt#2025-04-16_snippet_24\n\nLANGUAGE: pinescript\nCODE:\n```\npl_price_0 = array.get(pl_arr, 0), pl_price_1 = array.get(pl_arr, 1)\npl_bi_0 = array.get(pl_bi_arr, 0), pl_bi_1 = array.get(pl_bi_arr, 1)\n```\n\n----------------------------------------\n\nTITLE: Matrix Row Management in PineScript\nDESCRIPTION: Manages the number of rows in the results matrix based on user configuration. This ensures the table only displays the number of rows specified in the settings by trimming excess rows.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_23\n\nLANGUAGE: pinescript\nCODE:\n```\n// Trim excess rows in the matrix\nif matrix.rows(matrix) > i_scr_tbl_disp_rows\n    while matrix.rows(matrix) > i_scr_tbl_disp_rows\n        matrix.remove_row(matrix, matrix.rows(matrix)-1)\n```\n\n----------------------------------------\n\nTITLE: Table Cell Rendering Functions\nDESCRIPTION: Helper functions for creating and formatting table cells with appropriate styling and tooltips.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Scanner] ICT Displacement Candles.txt#2025-04-16_snippet_14\n\nLANGUAGE: pinescript\nCODE:\n```\ncell_scan_title(int _column, int _row, string _title, string tool_tip) =>\n    table.cell(table_id = tbl_scan, column = _column, row = _row, text = _title, text_color = i_neu_color, text_halign = text.align_center, bgcolor = i_neu_dark_color, text_size = i_scn_tbl_txt_size, tooltip = tool_tip)\n\ncell_scan(col, row, txt, _text_color) =>\n    table.cell(tbl_scan, col, row, text = txt, text_color = _text_color, text_halign = text.align_left, bgcolor = i_neu_dark_color, text_size = i_scn_tbl_txt_size)\n```\n\n----------------------------------------\n\nTITLE: Implementing Supertrend Indicator in PineScript\nDESCRIPTION: This snippet calculates and plots the Supertrend indicator. It uses ATR for volatility measurement and includes color coding for trend direction.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_22\n\nLANGUAGE: pinescript\nCODE:\n```\ndir_up = hl2 - i_st_factor * ta.atr(i_st_atr_period)\ndir_dn = hl2 + i_st_factor * ta.atr(i_st_atr_period)\n\ntrend_up = 0.0\ntrend_up := close[1] > trend_up[1] ? math.max(dir_up, trend_up[1]) : dir_up\ntrend_down = 0.0\ntrend_down := close[1] < trend_down[1] ? math.min(dir_dn, trend_down[1]) : dir_dn\ntrend = 0.0\ntrend := close > trend_down[1] ? 1 : close < trend_up[1] ? -1 : nz(trend[1], 1)\nsupertrend = trend == 1 ? trend_up : trend_down\n\nst_ln_col = trend == 1 ? i_st_up_color : i_st_dn_color\n\nplot(i_st_show ? supertrend : na, color=st_ln_col, style=plot.style_line, linewidth=1, title=\"Supertrend\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Pivot High/Low Calculation Functions in PineScript\nDESCRIPTION: Defines helper functions for calculating pivot high/low points, drawing lines and labels, and managing arrays of pivot points across different timeframes.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT External Range Liquidity/ICT External Range Liquidity Static Multi-timeframe (Swing High and Low).txt#2025-04-16_snippet_2\n\nLANGUAGE: pinescript\nCODE:\n```\nf_offsetToP(_src, _pivotPrice, _maxBack) =>\n    int _offset = na\n    float _delta = 10e10\n    if not na(_pivotPrice)\n        for _i = 1 to _maxBack by 1\n            _thisDelta = math.abs(_src[_i] - _pivotPrice)\n            if _thisDelta < _delta\n                _delta := _thisDelta\n                _offset := _i\n                _offset\n    _offset\n\nf_resInMinutes() =>\n    _resInMinutes = timeframe.multiplier * (timeframe.isseconds ? 1. / 60. : timeframe.isminutes ? 1. : timeframe.isdaily ? 1440. : timeframe.isweekly ? 10080. : timeframe.ismonthly ? 43800. : na)\n    _resInMinutes\n\nf_tfResInMinutes(_resolution) =>\n    request.security(syminfo.tickerid, _resolution, f_resInMinutes())\n\nf_extendArray(_lineArray, _labelArray, _extendLines) =>\n    if array.size(_lineArray) > 0\n        for _i = array.size(_lineArray) - 1 to 0 by 1\n\n            x2 = line.get_x2(array.get(_lineArray, _i))\n            yValue = line.get_y1(array.get(_lineArray, _i))\n\n            if _extendLines or bar_index - 1 == x2 and not(high > yValue and low < yValue)\n                line.set_x2(array.get(_lineArray, _i), bar_index)\n                label.set_x(array.get(_labelArray, _i), bar_index)\n            float(na)\n```\n\n----------------------------------------\n\nTITLE: Table Initialization for Data Display\nDESCRIPTION: Creates a new table with specified properties for displaying screener results. The table is configured with 5 columns and 102 rows, with customizable position and border settings.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Scanner] ICT Liquidity Void Fill Scanner.txt#2025-04-16_snippet_14\n\nLANGUAGE: pine\nCODE:\n```\nvar table scr_tbl = table.new(position = i_scr_tbl_position, columns = 5, rows = 102, border_width = 1, force_overlay = true)\n```\n\n----------------------------------------\n\nTITLE: Implementing Symbol Extraction for Screener in PineScript\nDESCRIPTION: This code defines a function to extract individual symbols from a comma-separated list for use in a screener. It demonstrates how to parse and process a list of ticker symbols.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Market Structure Shift (MSS)/ICT Market Structure Shift (MSS) Screener.txt#2025-04-16_snippet_7\n\nLANGUAGE: pinescript\nCODE:\n```\nfeed(back) =>\n    loop  = back\n    getT  = string(na)\n    if str.length(loop) == 0\n        getT := string(na)\n        loop := string(na)\n    else\n        getP  = nz(str.pos(loop, ','), str.length(loop))\n        getT := str.substring(loop, 0, getP)\n        loop := str.replace(loop, getT + ',', '')\n    [getT, loop]\n\n[tid_001, out_001] = feed(i_symbols), [tid_002, out_002] = feed(out_001), [tid_003, out_003] = feed(out_002), [tid_004, out_004] = feed(out_003),\n[tid_005, out_005] = feed(out_004), [tid_006, out_006] = feed(out_005), [tid_007, out_007] = feed(out_006), [tid_008, out_008] = feed(out_007),\n[tid_009, out_009] = feed(out_008), [tid_010, out_010] = feed(out_009), [tid_011, out_011] = feed(out_010), [tid_012, out_012] = feed(out_011),\n[tid_013, out_013] = feed(out_012), [tid_014, out_014] = feed(out_013), [tid_015, out_015] = feed(out_014), [tid_016, out_016] = feed(out_015),\n[tid_017, out_017] = feed(out_016), [tid_018, out_018] = feed(out_017), [tid_019, out_019] = feed(out_018), [tid_020, out_020] = feed(out_019),\n[tid_021, out_021] = feed(out_020), [tid_022, out_022] = feed(out_021), [tid_023, out_023] = feed(out_022), [tid_024, out_024] = feed(out_023),\n[tid_025, out_025] = feed(out_024), [tid_026, out_026] = feed(out_025), [tid_027, out_027] = feed(out_026), [tid_028, out_028] = feed(out_027),\n[tid_029, out_029] = feed(out_028), [tid_030, out_030] = feed(out_029), [tid_031, out_031] = feed(out_030), [tid_032, out_032] = feed(out_031),\n[tid_033, out_033] = feed(out_032), [tid_034, out_034] = feed(out_033), [tid_035, out_035] = feed(out_034), [tid_036, out_036] = feed(out_035),\n[tid_037, out_037] = feed(out_036), [tid_038, out_038] = feed(out_037), [tid_039, out_039] = feed(out_038), [tid_040, out_040] = feed(out_039)\n```\n\n----------------------------------------\n\nTITLE: Defining a Cumulative Percentage Change Function in Pine Script\nDESCRIPTION: This function calculates the daily cumulative percentage change of close price. It tracks when a new day begins, calculates the percentage change from previous close, and either resets the cumulative value on a new day or adds to the existing cumulative value.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Scanner - ICT Liquidity Sweep Pattern Scanner.txt#2025-04-16_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\ncumulative_percentage_change() =>\n    var float _cum_pct_change = na\n    _is_new_day = ta.change(time('D')) != 0 ? 1 : 0\n    _daily_pct_change = na(close[1]) ? 0 : (close - close[1]) / close[1] * 100\n    _cum_pct_change := _is_new_day ? _daily_pct_change : (na(_cum_pct_change) ? _daily_pct_change : (_cum_pct_change + _daily_pct_change))\n    _cum_pct_change\n\n// Calculate current cumulative percentage change\ncum_pchg = cumulative_percentage_change()\n```\n\n----------------------------------------\n\nTITLE: Defining Trend Following Setup with Sideways Market Skipping in PineScript\nDESCRIPTION: This PineScript code outlines the logic for a trend following strategy that aims to avoid sideways markets. It uses Supertrend for trend direction, ATR for volatility measurement, and price action for breakout confirmation. The strategy generates long signals on upward breakouts and short signals on downward breakouts, with entries occurring after retracements.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Readme First.txt#2025-04-16_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\n// Readme First:\n// \n// Trend Following Setup - Sideways Market Skipper Scanner\n// \n// Long Signal Logic:\n//  - Close crosses above the Supertrend.\n//  - Add ATR value (with multiplier) to the close to identify the potential sideways or volatility range.\n//  - When the price crosses this range, it's considered a breakout.\n//  - The ATR should be rising or the volatility is increasing.\n// \n// Short Signal Logic:\n//  - Close crosses below the Supertrend.\n//  - Substract ATR value (with multiplier) to the close to identify the potential sideways or volatility range.\n//  - When the price crosses this range, it's considered a breakdown.\n//  - The ATR should be rising or the volatility is increasing.\n//\n// Entry: Enter after the retracement once the signal is generated.\n```\n\n----------------------------------------\n\nTITLE: Detecting Maximum Count Conditions for Bull and Bear Patterns\nDESCRIPTION: Defines conditions to detect when bull or bear count sequences have reached their maximum values. These conditions are used to identify completed displacement patterns when the count meets minimum bar requirements and then resets.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Indicator] ICT Displacement Candles.txt#2025-04-16_snippet_5\n\nLANGUAGE: pine\nCODE:\n```\nbearMaxCnt = bearCnt[1] >= i_dc_min_bars and bearCnt == 0\nbullMaxCnt = bullCnt[1] >= i_dc_min_bars and bullCnt == 0\n```\n\n----------------------------------------\n\nTITLE: Calculating Volume SMA in PineScript\nDESCRIPTION: This code calculates the Simple Moving Average (SMA) of volume over a specified period.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup.txt#2025-04-16_snippet_10\n\nLANGUAGE: pinescript\nCODE:\n```\nvol_sma = ta.sma(volume, i_vol_sma_length)\n```\n\n----------------------------------------\n\nTITLE: Managing Matrix Size for Scanner Results in PineScript\nDESCRIPTION: Ensures the matrix size stays within the configured display limit by removing excess rows. This prevents the storage of unnecessary data and keeps the scanner's memory footprint manageable.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Scanner - Trend Following Setup - Sideways Market Skipper Scanner.txt#2025-04-16_snippet_14\n\nLANGUAGE: pine\nCODE:\n```\n// Trim excess rows in the matrix\nif matrix.rows(matrix) > i_scr_tbl_disp_rows\n    while matrix.rows(matrix) > i_scr_tbl_disp_rows\n        matrix.remove_row(matrix, matrix.rows(matrix)-1)\n```\n\n----------------------------------------\n\nTITLE: Initializing Input Parameters for FVG Indicator in PineScript\nDESCRIPTION: Defines an input parameter for transparency of the FVG visualization. This allows users to adjust the visibility of the FVG boxes on the chart.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_6\n\nLANGUAGE: pine\nCODE:\n```\nfloat i_transp = input.float(defval=70, title=\"Transp\", minval = 0, maxval = 100, group=g_ch)\n```\n\n----------------------------------------\n\nTITLE: Tracking Trading Session Timing and Ranges\nDESCRIPTION: Identifies new sessions and tracks session-related variables including start/end times, bar count, and price ranges. This code maintains the context of when sessions begin and end for proper Market Profile calculations.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] Market Profile with Screener (Based on [RS]Market Profile by RicardoSantos).txt#2025-04-16_snippet_3\n\nLANGUAGE: pine script\nCODE:\n```\n//  ||--    Bars since session started:\nisnewsession = ta.change(time(i_session_timeframe)) != 0\n\nvar int session_bar_counter = 0\nvar int previous_session_start = na\nvar int previous_session_end = na\nvar int session_time_range = na\n\nif isnewsession\n    session_bar_counter := 0\n    previous_session_start := previous_session_end\n    previous_session_end := time\n    session_time_range := previous_session_end - previous_session_start\n    session_time_range\nelse\n    session_bar_counter += 1\n    session_bar_counter\n\n//  ||--    session high, low, range:\nvar float session_high = tf_high\nvar float session_low = tf_low\nvar float session_range = tf_high - tf_low\n\n//      ||--    recalculate session high, low and range:\nif session_bar_counter == 0\n    session_high := tf_high\n    session_low := tf_low\n    session_range := tf_high - tf_low\n    session_range\nif tf_high > session_high[1]\n    session_high := tf_high\n    session_range := session_high - session_low\n    session_range\nif tf_low < session_low[1]\n    session_low := tf_low\n    session_range := session_high - session_low\n    session_range\n\n//  ||--    define tpo section range:\ntpo_section_range = session_range / 20\n```\n\n----------------------------------------\n\nTITLE: Symbol Name Extraction Function\nDESCRIPTION: Function to extract the symbol name from a string by splitting on ':' and getting the second element.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Market Structure Shift (MSS)/ICT Market Structure Shift (MSS) Screener.txt#2025-04-16_snippet_9\n\nLANGUAGE: pinescript\nCODE:\n```\nsymbol(s) => \n    array.get(str.split(s, \":\"), 1)\n```\n\n----------------------------------------\n\nTITLE: Matrix Row Limitation for Display in PineScript\nDESCRIPTION: A snippet that limits the number of rows in the matrix to match the user-specified maximum display rows. This ensures the table doesn't grow beyond the visible area and improves performance.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Sweep Pattern Scanner/Scanner - ICT Liquidity Sweep Pattern Scanner.txt#2025-04-16_snippet_16\n\nLANGUAGE: pine\nCODE:\n```\n// Trim excess rows in the matrix\nif matrix.rows(matrix) > i_scr_tbl_disp_rows\n    while matrix.rows(matrix) > i_scr_tbl_disp_rows\n        matrix.remove_row(matrix, matrix.rows(matrix)-1)\n```\n\n----------------------------------------\n\nTITLE: Tracking Final Count Values Before Reset\nDESCRIPTION: Maintains variables to store the last bull and bear count values before they reset. This preserves the information about sequence lengths even after new sequences begin, providing historical context for analysis.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Indicator] ICT Displacement Candles.txt#2025-04-16_snippet_8\n\nLANGUAGE: pine\nCODE:\n```\n// Track the final count before reset\nvar int lastBullCnt = 0\nvar int lastBearCnt = 0\n\n// Update when sequence ends\nif bullMaxCnt\n    lastBullCnt := bullCnt[1]\nif bearMaxCnt\n    lastBearCnt := bearCnt[1]\n```\n\n----------------------------------------\n\nTITLE: Drawing Alert Price Lines for Order Block Signals in PineScript\nDESCRIPTION: Creates and manages horizontal lines at signal points to visually identify order block entries. The code deletes previous lines and draws new ones when primary signals occur, extending them to the right for visibility.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] ICT Retracement to Order Block with Screener.txt#2025-04-16_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\nvar line alert_break_line = na\n\nif primary_long_signal\n    line.delete(alert_break_line)\n    alert_break_line := line.new(x1=bar_index, y1=high, x2=bar_index+1, y2=high, extend=extend.right, color=i_pos_col, style=i_ln_style, width=i_ln_width)\n\nelse if primary_short_signal\n    line.delete(alert_break_line)\n    alert_break_line := line.new(x1=bar_index, y1=low, x2=bar_index+1, y2=low, extend=extend.right, color=i_neg_col, style=i_ln_style, width=i_ln_width)\n```\n\n----------------------------------------\n\nTITLE: Matrix Function Call for Symbol Data\nDESCRIPTION: Function call to add symbol data to a matrix. It takes parameters for symbol name, formatted time, price, cumulative percentage change, volume percentage change, and signal value.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Scanner] ICT Liquidity Void Fill Scanner.txt#2025-04-16_snippet_11\n\nLANGUAGE: pine\nCODE:\n```\nmtxFun(symbolName, formattedTime, strPrice, str_cum_pchg, str_cum_vol_pchg, strSignal)\n```\n\n----------------------------------------\n\nTITLE: Multiple Symbol Screening in PineScript\nDESCRIPTION: Calls the screener function for all extracted ticker symbols (up to 40) to analyze multiple instruments simultaneously. This allows the scanner to monitor multiple markets for trading signals.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Scanner - Trend Following Setup - Sideways Market Skipper Scanner.txt#2025-04-16_snippet_13\n\nLANGUAGE: pine\nCODE:\n```\n// Call Scanner function for multiple symbols\nscreener(tid_01), screener(tid_02), screener(tid_03), screener(tid_04), screener(tid_05), screener(tid_06), screener(tid_07),\nscreener(tid_08), screener(tid_09), screener(tid_10), screener(tid_11), screener(tid_12), screener(tid_13), screener(tid_14),\nscreener(tid_15), screener(tid_16), screener(tid_17), screener(tid_18), screener(tid_19), screener(tid_20), screener(tid_21),\nscreener(tid_22), screener(tid_23), screener(tid_24), screener(tid_25), screener(tid_26), screener(tid_27), screener(tid_28),\nscreener(tid_29), screener(tid_30), screener(tid_31), screener(tid_32), screener(tid_33), screener(tid_34), screener(tid_35),\nscreener(tid_36), screener(tid_37), screener(tid_38), screener(tid_39), screener(tid_40)\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Colors for Visualization in Pine Script\nDESCRIPTION: Defines color settings for various chart elements, providing positive, negative, and neutral color schemes with different intensities for better visualization of market conditions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_5\n\nLANGUAGE: Pine Script\nCODE:\n```\ng_ch = '███████████████ Chart Settings ███████████████'\ncolor i_pos_dark_color = input.color(defval=#03110F, title='Positive Dark', group=g_ch)\ncolor i_pos_color = input.color(defval=#26A69A, title='Positive Mid', group=g_ch)\ncolor i_pos_light_color = input.color(defval=#ACE5DC, title='Positive Light', group=g_ch)\ncolor i_neg_light_color = input.color(defval=#FCCBCD, title='Negative Light', group=g_ch)\ncolor i_neg_color = input.color(defval=#FF5252, title='Negative Mid', group=g_ch)\ncolor i_neg_dark_color = input.color(defval=#180809, title='Negative Dark', group=g_ch)\n//color i_indicator_color = input.color(defval=#2962FF, title='Indicator', group=g_ch)\n//color i_signal_color = input.color(defval=#FF6D00, title='Signal', group=g_ch)\ncolor i_neu_color = input.color(defval=#D1D4DC, title='Neutral Light', group=g_ch)\ncolor i_neu_mid_color = input.color(defval=#2A2E39, title='Neutral Mid', group=g_ch)\ncolor i_neu_dark_color = input.color(defval=#141516, title='Neutral Dark', group=g_ch)\n```\n\n----------------------------------------\n\nTITLE: Multi-Symbol Screening in PineScript\nDESCRIPTION: Applies the screener function to multiple ticker symbols (tid_01 through tid_40). This allows simultaneous scanning of up to 40 different symbols for trading signals based on the configured screening conditions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_22\n\nLANGUAGE: pinescript\nCODE:\n```\n// Call Screener function for multiple symbols\nscreener(tid_01), screener(tid_02), screener(tid_03), screener(tid_04), screener(tid_05), screener(tid_06), screener(tid_07),\nscreener(tid_08), screener(tid_09), screener(tid_10), screener(tid_11), screener(tid_12), screener(tid_13), screener(tid_14),\nscreener(tid_15), screener(tid_16), screener(tid_17), screener(tid_18), screener(tid_19), screener(tid_20), screener(tid_21),\nscreener(tid_22), screener(tid_23), screener(tid_24), screener(tid_25), screener(tid_26), screener(tid_27), screener(tid_28),\nscreener(tid_29), screener(tid_30), screener(tid_31), screener(tid_32), screener(tid_33), screener(tid_34), screener(tid_35),\nscreener(tid_36), screener(tid_37), screener(tid_38), screener(tid_39), screener(tid_40)\n```\n\n----------------------------------------\n\nTITLE: Symbol Parsing Function for Screener in PineScript\nDESCRIPTION: Implements a function to parse CSV-formatted symbol lists for use in a screener. The feed function extracts individual ticker symbols from a comma-separated list, returning both the extracted symbol and the remaining list.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_20\n\nLANGUAGE: pine\nCODE:\n```\nfeed(back) =>                                             // extract tickerid and decrement list of ticker IDs\n    loop  = back                                          // declare string variable to hold content list\n    getT  = string(na)                                    // declare string variable to hold tickerid\n    if str.length(loop) == 0                              // if list is empty\n        getT := string(na)                                // assign na to tickerid variable\n        loop := string(na)                                // assign na to list of ticker Ids variable\n    else                                                  // else extract first tickerid\n        getP  = nz(str.pos(loop, ','), str.length(loop))  // get position of first comma or last character\n        getT := str.substring(loop, 0, getP)              // get tickerid in first position of list\n        loop := str.replace(loop, getT + ',', '')         // clear tickerid + delimiter character from list\n    [getT, loop]                                          // return tickerid in first position & truncated list\n```\n\n----------------------------------------\n\nTITLE: Implementing Line and Box Stack Management Functions\nDESCRIPTION: Defines utility functions for managing arrays of line and box objects, ensuring old objects are properly deleted when new ones are added. These functions help control memory usage by limiting the number of displayed elements.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] Market Profile with Screener (Based on [RS]Market Profile by RicardoSantos).txt#2025-04-16_snippet_2\n\nLANGUAGE: pine script\nCODE:\n```\n//  ||--    Extra Functions:\nf_line_stack(_array, _max_elements, _new_element) =>\n    int _size = array.size(_array)\n    if _size >= _max_elements\n        line.delete(array.pop(_array))\n    array.unshift(_array, _new_element)\nf_open_session_line(_x1, _y1, _x2, _y2) =>\n    line.new(_x1, _y1, _x2, _y2, xloc=xloc.bar_time, color=i_open_col, style=line.style_dashed)\n\nf_box_stack(_array, _max_elements, _new_element) =>\n    int _size = array.size(_array)\n    if _size >= _max_elements\n        box.delete(array.pop(_array))\n    array.unshift(_array, _new_element)\n\nf_poc_box(_x1, _y1, _x2, _y2) =>\n    box.new(_x1, _y1, _x2, _y2, border_color=i_poc_col, xloc=xloc.bar_time, bgcolor=color.new(i_poc_col, i_mp_transp))\nf_vah_box(_x1, _y1, _x2, _y2) =>\n    box.new(_x1, _y1, _x2, _y2, border_color=i_va_col, xloc=xloc.bar_time, bgcolor=color.new(i_va_col, i_mp_transp))\n\nvar line[] open_session_lines = array.new_line(0)\nvar box[] poc_boxes = array.new_box(0)\nvar box[] vah_boxes = array.new_box(0)\n\nfloat tf_high = high\nfloat tf_low = low\nfloat tf_close = close\n```\n\n----------------------------------------\n\nTITLE: Section End Comments in PineScript\nDESCRIPTION: Marks the end of the screener and overall code sections with comments. These markers help with code organization and readability in a potentially complex script.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_26\n\nLANGUAGE: pinescript\nCODE:\n```\n//_____________________________ Screener End\n\n//_____________________________ Code End\n```\n\n----------------------------------------\n\nTITLE: Generating Trading Signals in PineScript\nDESCRIPTION: Defines conditions for long and short trading signals based on the calculated technical indicators. Plots shapes and colors on the chart to visually represent these signals.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup.txt#2025-04-16_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\n//_____________________________ Signals Start\n\n// Condition\nshort_cont = \n pchg < (-i_pchg_250) and \n rsi < i_rsi_os and \n mfi < i_mfi_os and \n cci < i_cci_os and\n volume > vol_sma and\n barstate.isconfirmed\n\nlong_cont = \n pchg > i_pchg_250 and \n rsi > i_rsi_ob and \n mfi > i_mfi_ob and \n cci > i_cci_ob and\n volume > vol_sma and\n barstate.isconfirmed\n\n// Plot \nplotshape(series=short_cont, title='Short Signal', style=shape.triangledown, location=location.abovebar, color=i_neg_light_col, size=size.tiny)\nplotshape(series=long_cont, title='Long Signal', style=shape.triangleup, location=location.belowbar, color=i_pos_light_col, size=size.tiny)\n\nbgcolor(color=short_cont ? color.new(i_neg_light_col, 90) : long_cont ? color.new(i_pos_light_col, 90) : na, title='Signal Bgcolor', show_last=i_display_len)\nbarcolor(color=short_cont ? i_neg_light_col : long_cont ? i_pos_light_col : na, title='Signal Candle')\n\n//_____________________________ Signals End\n```\n\n----------------------------------------\n\nTITLE: Creating Indicator Table for Last Bar in PineScript\nDESCRIPTION: Populates a table with technical indicators (percent change, RSI, MFI, CCI, and volume) when the current bar is the last bar on the chart. The code formats the values and applies conditional coloring based on indicator values.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup.txt#2025-04-16_snippet_9\n\nLANGUAGE: pine\nCODE:\n```\n// Check if it's the last bar\nif barstate.islast\n    cell(0, 0, \"%Chg\", col_pchg)\n    cell(0, 1, \"RSI\", col_rsi)\n    cell(0, 2, \"MFI\", col_mfi)\n    cell(0, 3, \"CCI\", col_cci)\n    cell(0, 4, \"Vol\", col_vol)\n\n    cell(1, 0, str.tostring(pchg, '#.##'), col_pchg)\n    cell(1, 1, str.tostring(rsi, '#.##'), col_rsi)\n    cell(1, 2, str.tostring(mfi, '#.##'), col_mfi)\n    cell(1, 3, str.tostring(cci, '#.##'), col_cci)\n    cell(1, 4, str.tostring((volume / 100000), '#.##') + ' L', col_vol)\n```\n\n----------------------------------------\n\nTITLE: Functions for Managing Chart Elements in PineScript\nDESCRIPTION: Defines functions that manage chart elements by removing old lines and boxes. This ensures the chart remains clean by keeping only the specified number of most recent elements.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_12\n\nLANGUAGE: pine\nCODE:\n```\n// Function to delete past lines & boxes\nshow_last_boxes(arr, int showlast) =>\n    if array.size(arr) >= showlast\n        box = array.get(arr, 0)\n        box.delete(box)\n        array.remove(arr, 0)\n\nshow_last_lines(arr, int showlast) =>\n    if array.size(arr) >= showlast\n        line = array.get(arr, 0)\n        line.delete(line)\n        array.remove(arr, 0)\n```\n\n----------------------------------------\n\nTITLE: Symbol Screening Function in PineScript\nDESCRIPTION: Function that analyzes a single symbol for trading signals by calling request.security with the indicator_calculation function. If a signal is detected, it formats the data and adds it to the results matrix.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Scanner - Trend Following Setup - Sideways Market Skipper Scanner.txt#2025-04-16_snippet_12\n\nLANGUAGE: pine\nCODE:\n```\n// Scanner function to collect data\nscreener(s) =>\n    sym = ticker.modify(s, syminfo.session)\n    [_time, price, _cum_pchg, _cum_vol_pchg, signal] = request.security(sym, timeframe.period, indicator_calculation())\n\n    // Check if the signal is not na and the time matches\n    if not na(signal) and _time == time\n        symbolName = symbol(s)\n        formattedTime = format_time(_time)\n        strPrice = str.tostring(price)\n        str_cum_pchg = str.tostring(_cum_pchg, '#.##')\n        str_cum_vol_pchg = str.tostring(_cum_vol_pchg, '#.##')\n        strSignal = str.tostring(signal)\n        \n        // Add data to the matrix\n        mtxFun(symbolName, formattedTime, strPrice, str_cum_pchg, str_cum_vol_pchg, strSignal)\n```\n\n----------------------------------------\n\nTITLE: Initializing ICT Retracement to Order Block Indicator in PineScript\nDESCRIPTION: Sets up the main indicator parameters including title, overlay, and input options for period and vertical offset. It also includes detailed tooltips explaining the purpose of each input.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] ICT Retracement to Order Block with Screener.txt#2025-04-16_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\n//@version=5\nindicator(title=\"ICT Retracement to Order Block with Screener\", shorttitle=\"Retracement to OB\", overlay=true)\n\ntt_p = \"• Period is the count of candles used to determine the highest high & lowest low.\" +\n \"\\n• Default period 30 works for all timeframes but is optimized for 15m & 1h.\" +\n \"\\n• Experiment with other values as needed.\"\nint i_period = input.int(defval=30, title=\"Period\", minval=1, tooltip=tt_p)\n\ntt_vo = \"• Vertical offset is like a buffer in case price doesn't hit the order block exactly.\" +\n \"\\n• Default is 0, meaning no buffer. The 3rd signal appears only on precise touch to the order block.\" +\n \"\\n• Example: If 'Vertical Offset (%)' is 50\" +\n \"\\n• For Long: Calculate a price 50% higher than the 1st candle's high.\" +\n \"\\n• For Short: Calculate a price 50% lower than the 1st candle's low.\"\nfloat i_vertical_offset = input.float(defval=0, title='Vertical Offset (%)', tooltip=tt_vo) / 100\n```\n\n----------------------------------------\n\nTITLE: Trading Strategy Documentation in PineScript Comments\nDESCRIPTION: Documentation explaining the trading strategy logic used by the scanner. It details the conditions for long and short signals based on Supertrend indicator crossovers and ATR-based breakout detection.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Scanner - Trend Following Setup - Sideways Market Skipper Scanner.txt#2025-04-16_snippet_17\n\nLANGUAGE: pine\nCODE:\n```\n// Readme First:\n// \n// Trend Following Setup - Sideways Market Skipper Scanner\n// \n// Long Signal Logic:\n//  - Close crosses above the Supertrend.\n//  - Add ATR value (with multiplier) to the close to identify the potential sideways or volatility range.\n//  - When the price crosses this range, it's considered a breakout.\n//  - The ATR should be rising or the volatility is increasing.\n// \n// Short Signal Logic:\n//  - Close crosses below the Supertrend.\n//  - Substract ATR value (with multiplier) to the close to identify the potential sideways or volatility range.\n//  - When the price crosses this range, it's considered a breakdown.\n//  - The ATR should be rising or the volatility is increasing.\n//\n// Entry: Enter after the retracement once the signal is generated.\n```\n\n----------------------------------------\n\nTITLE: Initializing Momentum Setup Indicator in PineScript\nDESCRIPTION: Sets up the main indicator parameters and input options for the momentum trading setup. Includes settings for percentage change, RSI, MFI, CCI, Volume, and Supertrend components.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup.txt#2025-04-16_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\n//@version=5\nindicator(title='Momentum Setup - Ankush Bajaj Momentum Investing Setup', shorttitle='AB Mom', overlay=true, max_bars_back=500, max_lines_count=500, max_boxes_count=500)\n\n//_____________________________ Menu Indicators Start\n\ng_pchg = '██████████████ 250 Candle % Change ██████████████'\ntt_pchg = \n \"• Calculate the % change between the past 250th candle and the current candle.\" +\n \"\\n• For a bullish trend, the input value is considered positive; for a bearish trend, it's negative.\" +\n \"\\n• The default value is 8 for daily timeframe. For intraday timeframes like 5 minutes, change it to 2 or 4 or adjust as needed for other timeframes.\"\n\nfloat i_pchg_250 = input.float(defval=8, title='Above/Below %', minval=0, tooltip=tt_pchg, group=g_pchg)\n\n// ... [additional input definitions for RSI, MFI, CCI, Volume, and Supertrend]\n```\n\n----------------------------------------\n\nTITLE: Drawing Overlay Technical Indicators in PineScript\nDESCRIPTION: Creates visual overlays for technical indicators (MFI, RSI, CCI) with customizable positioning and styling. Includes line drawing for indicator values and signal lines, along with box elements for representing levels and volume data.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Ankush Bajaj Momentum Investing Setup/Momentum Setup - Ankush Bajaj Momentum Investing Setup.txt#2025-04-16_snippet_4\n\nLANGUAGE: pinescript\nCODE:\n```\nline.delete(array.shift(a_lines))\n\nif array.size(a_hist) > 0\n    for i = 1 to array.size(a_hist)\n        box.delete(array.shift(a_hist))\n\nif i_mfi_display\n    mid_line = math.avg(100, 0)\n    array.push(a_hist, box.new (bar_index[i_display_len], priceLowest * (1 - priceChangeRate * i_mfi_voffset) * (1 + i_mfi_ob / oscHighest * priceChangeRate * i_mfi_height), \n                                 bar_index              , priceLowest * (1 - priceChangeRate * i_mfi_voffset) * (1 + i_mfi_ob / oscHighest * priceChangeRate * i_mfi_height), color.new(i_pos_col, 75), 1))\n```\n\n----------------------------------------\n\nTITLE: Defining AlertInfo Type for FVG Tracking in PineScript\nDESCRIPTION: Creates a custom type 'AlertInfo' to track the count of open and closed gaps. Includes methods to check if gaps have opened or closed.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_7\n\nLANGUAGE: pine\nCODE:\n```\ntype AlertInfo\n    int countOpenGap\n    int countClosedGap\n\nmethod hasOpenedGap(AlertInfo this) =>\n    this.countOpenGap > 0\n\nmethod hasClosedGap(AlertInfo this) =>\n    this.countClosedGap > 0\n\nAlertInfo alertInfo = AlertInfo.new(0, 0)\n```\n\n----------------------------------------\n\nTITLE: Initializing RSI Directional Momentum Indicator in Pine Script\nDESCRIPTION: Sets up the indicator with customizable title, short title, and chart placement. Defines input options for scanning method, signal display, and RSI parameters.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Indicator] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\n//@version=6\nindicator(title = 'Momentum Setup - RSI Directional Momentum Indicator', shorttitle = 'RSIDM', behind_chart = false)\n\n//___________________________ Menu Start\n\nstring g_scn_tb = '█████████████████ Scanner █████████████████'\n\nstring tt_ch = \n \"Continuous Break:\" + \n \"\\n• Buy: RSI crosses above 60, dips below, then breaks the previous high while staying above 60.\" + \n \"\\n• Sell: RSI crosses below 40, rises above, then breaks the previous low while staying below 40.\" +\n\n \"\\n\\n Continuous Retracement:\" + \n \"\\n• After a Continuous Break, a Fibonacci level is set.\" +\n \"\\n• Buy: Price retraces to this level and bounces.\" +\n \"\\n• Sell: Price retraces to this level and drops.\" +\n\n \"\\n\\n Flip Break:\" + \n \"\\n• If a Continuous Break fails, the trade flips (Long → Short, Short → Long).\" + \n\n \"\\n\\n Flip Retracement:\" + \n \"\\n• If a Continuous Retracement fails, the trade flips (Long → Short, Short → Long).\" + \n\n \"\\n\\n Divergence:\" + \n \"\\n• Buy: Price makes a lower low, RSI makes a higher low.\" + \n \"\\n• Sell: Price makes a higher high, RSI makes a lower high.\" + \n\n \"\\n\\n Hidden Divergence (Trend continuation):\" + \n \"\\n• Buy: Price makes a higher low, RSI makes a lower low.\" + \n \"\\n• Sell: Price makes a lower high, RSI makes a higher high.\"\n\nstring i_scn_choose = input.string(\n defval = 'Continuous Break', \n title = 'Scanning Method', \n options = ['Continuous Break', 'Continuous Retracement', 'Flip Break', 'Flip Retracement', 'Divergence', 'Hidden Divergence'], tooltip = tt_ch, group = g_scn_tb)\n\nbool i_scn_show_long = input.bool(defval = true, title = 'Long Signals', inline = 'tb_2', group = g_scn_tb)\nbool i_scn_show_short = input.bool(defval = true, title = 'Short Signals', inline = 'tb_2', group = g_scn_tb)\n\nstring g_rsi = '██████████ Relative Strength Index (RSI) ██████████'\nstring tt_ret_fib = \n \"• 0: Bottom of bullish & top of bearish breaking candle.\" + \n \"\\n• 1: Top of bullish & bottom of bearish breaking candle.\" + \n \"\\n• 0.5: 50% of the breaking candle.\"\nint i_rsi_len = input.int(defval = 14, title = 'RSI Length', minval = 1, group = g_rsi)\nfloat i_rsi_src = input.source(defval = close, title = 'RSI Source', group = g_rsi)\nint i_rsi_ma_len = input.int(defval = 14, title = 'SMA Length', minval = 1, group = g_rsi)\nfloat i_rsi_fib_val = input.float(defval = 0.5, title = 'Fib Value', step = 0.1, tooltip = tt_ret_fib, group = g_rsi)\nbool i_rsi_show_bull = input.bool(defval = true, title = 'Display Bullish Divergence', group = g_rsi)\nbool i_rsi_show_bear = input.bool(defval = true, title = 'Display Bearish Divergence', group = g_rsi)\nbool i_rsi_show_hbull = input.bool(defval = true, title = 'Display Hidden Bullish Divergence', group = g_rsi)\nbool i_rsi_show_hbear = input.bool(defval = true, title = 'Display Hidden Bearish Divergence', group = g_rsi)\nint i_rsi_p_right = input.int(defval = 5, title = 'Pivot Lookback Right', group = g_rsi)\nint i_rsi_p_left = input.int(defval = 5, title = 'Pivot Lookback Left', group = g_rsi)\nint i_rsi_range_max = input.int(defval = 60, title = 'Max of Lookback Range', group = g_rsi)\nint i_rsi_range_min = input.int(defval = 5, title = 'Min of Lookback Range', group = g_rsi)\n```\n\n----------------------------------------\n\nTITLE: Calculating Cumulative Volume Percentage Change in PineScript\nDESCRIPTION: Computes the daily cumulative volume and calculates the percentage change in volume compared to the previous day. It tracks both current and previous day cumulative volumes.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Scanner - Trend Following Setup - Sideways Market Skipper Scanner.txt#2025-04-16_snippet_4\n\nLANGUAGE: pine\nCODE:\n```\ncumulative_volume() =>\n    var float _cum_vol = na\n    _is_new_day = ta.change(time('D')) != 0 ? 1 : 0\n    _cum_vol := _is_new_day ? volume : (na(_cum_vol) ? volume : (_cum_vol + volume))\n    _cum_vol\n\n// Calculate current and previous day cumulative volumes\nvar float current_cum_vol = na\nvar float prev_cum_vol = na\n\nif ta.change(time('D')) != 0\n    prev_cum_vol := current_cum_vol\n    current_cum_vol := volume\nelse\n    current_cum_vol += volume\n\n// Calculate Cumulative Volume Percentage Change\ncum_vol_pchg = (current_cum_vol - nz(prev_cum_vol, current_cum_vol)) / nz(prev_cum_vol, current_cum_vol) * 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Table Display Options in Pine Script\nDESCRIPTION: Defines user interface inputs for the data table that displays scan results, including toggle for display, position on the chart, and text size options.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Mitigation Block Scanner/[Scanner] ICT Mitigation Block Scanner.txt#2025-04-16_snippet_4\n\nLANGUAGE: Pine Script\nCODE:\n```\ng_dtb = '█████████████████ Data Table █████████████████'\nbool i_tbl_data_show  = input.bool(defval=true, title='Display Table', group=g_dtb)\nstring i_tbl_data_pos = input.string(defval=position.bottom_right, title='Position', options=[position.top_left, position.top_center, position.top_right, position.middle_left, position.middle_center, position.middle_right, position.bottom_left, position.bottom_center, position.bottom_right], group=g_dtb)\nstring i_tbl_data_txt_size = input.string(defval=size.normal, title='Size', options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group=g_dtb)\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color for Flip Signals in RSI Momentum Scanner\nDESCRIPTION: Sets conditional background colors based on long and short flip retracement signals. The colors are customized using user-defined variables with transparency settings (90). This visualization helps identify trend changes in the RSI Directional Momentum Scanner.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Indicator] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_10\n\nLANGUAGE: pine\nCODE:\n```\nbgcolor(i_scn_show_short and choice_flip_ret and short_flip_ret ? color.new(i_neg_light_color, 90) : i_scn_show_long and choice_flip_ret and long_flip_ret ? color.new(i_pos_light_color, 90) : na, title = 'Flip 3rd Bgcolor')\n```\n\n----------------------------------------\n\nTITLE: State Management and Signal Generation in PineScript\nDESCRIPTION: Implements state transitions and signal generation logic for trading conditions. Manages state transitions between different trading conditions and tracks various price levels and RSI values.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Indicator] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_7\n\nLANGUAGE: pinescript\nCODE:\n```\nvar float long_1_high = na\nvar float long_1_rsi = na\nvar int long_1_bar = na\nif long_1\n    long_1_high := high\n    long_1_rsi := rsi\n    long_1_bar := bar_index\n\nlong_2 = rsi < breakout\n\nlong_3 = \n not na(long_1_high) and \n rsi > breakout and \n rsi > rsi_ma and \n close > long_1_high and \n pchg_above_filter and \n pchg_below_filter and \n vol_filter and \n vol_pchg_filter and \n atr_filter and \n body_filter and \n body_size_filter and \n volume_filter and \n rel_vol_filter and \n time_filter and \n date_filter and \n barstate.isconfirmed\n```\n\n----------------------------------------\n\nTITLE: Table Cell Population Functions in PineScript\nDESCRIPTION: Two functions for populating cells in the screener table: one for title cells with centered text and one for data cells with left-aligned text, both with configurable text colors and background colors.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_28\n\nLANGUAGE: PineScript\nCODE:\n```\n// Function to populate cells in the table\nscr_cell_title(col, row, txt) =>\n    table.cell(scr_tbl, col, row, text = txt, text_color = i_neu_color, text_halign = text.align_center, bgcolor = i_neu_dark_color, text_size = i_scr_tbl_text_size)\n\nscr_cell(col, row, txt, _text_color, _bgcolor) =>\n    table.cell(scr_tbl, col, row, text = txt, text_color = _text_color, text_halign = text.align_left, bgcolor = _bgcolor, text_size = i_scr_tbl_text_size)\n```\n\n----------------------------------------\n\nTITLE: Initializing Input Parameters and Menu Setup\nDESCRIPTION: Defines the initial setup including input parameters for symbol screening, direction preferences, and display settings. Includes comprehensive tooltips and grouping for organized parameter management.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void/ICT Liquidity Void Screener.txt#2025-04-16_snippet_0\n\nLANGUAGE: pine\nCODE:\n```\nindicator(title=\"ICT Liquidity Void Screener\", shorttitle=\"ICT LV Scr\", overlay=true)\n\ng_tb = '█████████████████ Screener █████████████████'\n\ntt_is = \"• Input exactly 40 symbols, nothing more or less.\" +\n     \"\\n• Total characters cannot exceed 4096.\" +\n     \"\\n• Use comma as delimiter without any space.\" +\n     \"\\n• Eg: EXCHANGE:SYMBOL_A,EXCHANGE:SYMBOL_B\"\n```\n\n----------------------------------------\n\nTITLE: Matrix Setup for Data Collection in PineScript Scanner\nDESCRIPTION: Initializes a matrix data structure to store scanner results. The matrix stores symbol name, time, price, percentage change, volume percentage change, and signal values for all detected signals.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Trend Following Setup - Sideways Market Skipper Scanner/Scanner - Trend Following Setup - Sideways Market Skipper Scanner.txt#2025-04-16_snippet_11\n\nLANGUAGE: pine\nCODE:\n```\n// Matrix setup\nvar matrix = matrix.new<string>(0, 6, na)\n\n// Function to add rows to the matrix\nmtxFun(symbol, _time, price, _cum_pchg, _cum_vol_pchg, signal) =>\n    matrix.add_row(matrix, 0, array.from(symbol, _time, price, _cum_pchg, _cum_vol_pchg, signal))\n```\n\n----------------------------------------\n\nTITLE: Rendering Market Profile Visual Elements\nDESCRIPTION: Creates visual elements for the Market Profile, including Value Area boxes, POC boxes, and session open lines when a new session begins. This provides a clear visualization of the Market Profile on the chart.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] Market Profile with Screener (Based on [RS]Market Profile by RicardoSantos).txt#2025-04-16_snippet_9\n\nLANGUAGE: pine script\nCODE:\n```\nif isnewsession\n    f_box_stack(vah_boxes, i_sessions, f_vah_box(previous_session_end, vah_value[1], time_close(i_session_timeframe), val_value[1]))\n    f_box_stack(poc_boxes, i_sessions, f_poc_box(previous_session_end, poc_upper[1], time_close(i_session_timeframe), poc_lower[1]))\n    f_line_stack(open_session_lines, i_sessions, f_open_session_line(previous_session_end, open, time_close(i_session_timeframe), open))\n```\n\n----------------------------------------\n\nTITLE: Indicator Configuration and Input Parameters\nDESCRIPTION: Defines the main indicator settings including title, overlay settings, and maximum bars/lines/boxes counts. Also includes input parameters for symbol screening and table display options.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_0\n\nLANGUAGE: pinescript\nCODE:\n```\n//@version=5\nindicator(title='Momentum Setup: Vijay Thakare Option Buying Scalping Setup Scanner', shorttitle='VT Scalp Scan', overlay=true, max_bars_back=500, max_lines_count=500, max_boxes_count=500)\n```\n\n----------------------------------------\n\nTITLE: Drawing Line and Box Elements for MZ 1 Support and Resistance Zones in PineScript\nDESCRIPTION: This code draws lines and boxes to represent support and resistance levels for MZ 1 timeframe. It creates visual elements with configurable properties like colors, styles, and adds them to arrays for later management.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_11\n\nLANGUAGE: pine\nCODE:\n```\nmz_1_s_4_bx = draw_box(mz_1_time, mz_1_time_close, mz_1_s_4_top, mz_1_s_4_bot, color.new(i_mz_1_s_t_ln_color, i_mz_bx_transp), 1, i_mz_bx_style, '\\n' + str.tostring(math.round_to_mintick(mz_1_s_4)), i_mz_bx_txt_size, i_mz_1_s_t_ln_color, i_mz_bx_txt_align)\narray.push(mz_1_s_4_bx_arr, mz_1_s_4_bx)\n\nif i_mz_1_sr_5_show\n    mz_1_r_5_ln = draw_line(mz_1_time, mz_1_time_close, mz_1_r_5, i_mz_1_r_t_ln_color, i_mz_1_ln_style, i_mz_1_ln_width)\n    array.push(mz_1_r_5_ln_arr, mz_1_r_5_ln)\n    mz_1_s_5_ln = draw_line(mz_1_time, mz_1_time_close, mz_1_s_5, i_mz_1_s_t_ln_color, i_mz_1_ln_style, i_mz_1_ln_width)\n    array.push(mz_1_s_5_ln_arr, mz_1_s_5_ln)\n//    if i_mz_1_sr_5_show\n//        mz_1_r_5_bx = draw_box(mz_1_time, mz_1_time_close, mz_1_r_5_top, mz_1_r_5_bot, color.new(i_mz_1_r_t_ln_color, i_mz_bx_transp), 1, i_mz_bx_style, str.tostring(math.round_to_mintick(mz_1_r_5)) + '\\n' + '\\n', i_mz_bx_txt_size, i_mz_1_r_t_ln_color, i_mz_bx_txt_align)\n//        array.push(mz_1_r_5_bx_arr, mz_1_r_5_bx)\n//        mz_1_s_5_bx = draw_box(mz_1_time, mz_1_time_close, mz_1_s_5_top, mz_1_s_5_bot, color.new(i_mz_1_s_t_ln_color, i_mz_bx_transp), 1, i_mz_bx_style, '\\n' + str.tostring(math.round_to_mintick(mz_1_s_5)), i_mz_bx_txt_size, i_mz_1_s_t_ln_color, i_mz_bx_txt_align)\n//        array.push(mz_1_s_5_bx_arr, mz_1_s_5_bx)\n\nif i_mz_1_sr_6_show\n    mz_1_r_6_ln = draw_line(mz_1_time, mz_1_time_close, mz_1_r_6, i_mz_1_r_t_ln_color, i_mz_1_ln_style, i_mz_1_ln_width)\n    array.push(mz_1_r_6_ln_arr, mz_1_r_6_ln)\n    mz_1_s_6_ln = draw_line(mz_1_time, mz_1_time_close, mz_1_s_6, i_mz_1_s_t_ln_color, i_mz_1_ln_style, i_mz_1_ln_width)\n    array.push(mz_1_s_6_ln_arr, mz_1_s_6_ln)\n\n    mz_1_r_6_bx = draw_box(mz_1_time, mz_1_time_close, mz_1_r_6_top, mz_1_r_6_bot, color.new(i_mz_1_r_t_ln_color, i_mz_bx_transp), 1, i_mz_bx_style, str.tostring(math.round_to_mintick(mz_1_r_6)) + '\\n' + '\\n', i_mz_bx_txt_size, i_mz_1_r_t_ln_color, i_mz_bx_txt_align)\n    array.push(mz_1_r_6_bx_arr, mz_1_r_6_bx)\n    mz_1_s_6_bx = draw_box(mz_1_time, mz_1_time_close, mz_1_s_6_top, mz_1_s_6_bot, color.new(i_mz_1_s_t_ln_color, i_mz_bx_transp), 1, i_mz_bx_style, '\\n' + str.tostring(math.round_to_mintick(mz_1_s_6)), i_mz_bx_txt_size, i_mz_1_s_t_ln_color, i_mz_bx_txt_align)\n    array.push(mz_1_s_6_bx_arr, mz_1_s_6_bx)\n```\n\n----------------------------------------\n\nTITLE: Implementing VWAP/TWAP Plot in Pine Script\nDESCRIPTION: Configures the display of either VWAP or TWAP based on user input selection. The visualization is conditional on the 'i_vtwap_display' parameter.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_3\n\nLANGUAGE: pine\nCODE:\n```\nvwap_twap_choice = i_vtwap_choice == \"VWAP\" ? vwap : twapValue\nplot(series = i_vtwap_display ? vwap_twap_choice : na, title = \"VWAP/TWAP\", color=i_neu_color)\n```\n\n----------------------------------------\n\nTITLE: Implementing Performance Table in PineScript\nDESCRIPTION: Creates and populates a performance table showing cumulative percentage change and volume metrics. This feature provides users with at-a-glance performance data for the analyzed instrument.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Displacement Candles/[Indicator] ICT Displacement Candles.txt#2025-04-16_snippet_2\n\nLANGUAGE: pine\nCODE:\n```\nvar table tbl_cum = table.new(position=i_cum_tbl_pos, columns=2, rows=4, border_width=1, force_overlay=true)\n\ncell_perform(col, row, txt, txt_color, aligh) =>\n    table.cell(tbl_cum, col, row, txt, text_color=txt_color, text_halign=aligh, bgcolor=i_neu_dark_color, text_size=i_cum_tbl_size)\n\nif barstate.islast and i_cum_tbl_disp\n    pchg_col = cum_pchg > 0 ? i_pos_color : i_neg_color\n    vol_pchg_col = cum_vol_pchg > 0 ? i_pos_color : i_neg_color\n    prev_vol_pchg_col = prev_vol_safe < curr_cum_vol ? i_neg_color : i_pos_color\n    \n    cell_perform(0, 0, '%Chg', chart.fg_color, text.align_left)\n    cell_perform(1, 0, str.tostring(cum_pchg, '#.##') + ' %', pchg_col, text.align_right)\n    cell_perform(0, 1, 'Vol %Chg', chart.fg_color, text.align_left)\n    cell_perform(1, 1, str.tostring(cum_vol_pchg, '#.##') + ' %', vol_pchg_col, text.align_right)\n    cell_perform(0, 2, 'Vol', chart.fg_color, text.align_left)\n    cell_perform(1, 2, str.tostring(curr_cum_vol / 100000, '#.##') + ' L', vol_pchg_col, text.align_right)\n    cell_perform(0, 3, 'PD Vol', chart.fg_color, text.align_left)\n    cell_perform(1, 3, str.tostring(prev_vol_safe / 100000, '#.##') + ' L', prev_vol_pchg_col, text.align_right)\n```\n\n----------------------------------------\n\nTITLE: Implementing Stochastic Oscillator in Pine Script\nDESCRIPTION: Calculates Stochastic oscillator with configurable K and D smoothing parameters. Uses simple moving averages for smoothing.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_5\n\nLANGUAGE: pine\nCODE:\n```\nfloat stoc_k = ta.sma(ta.stoch(close, high, low, i_stoc_k_len), i_stoc_k_smooth)\nfloat stoc_d = ta.sma(stoc_k, i_stoc_d_smooth)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zig Zag Parameters for Market Structure Analysis in PineScript\nDESCRIPTION: Defines input parameters for Zig Zag pattern analysis, including visibility options, period, source, filtering methods, and color settings. These parameters are used to identify market structure shifts.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Market Structure Shift (MSS)/ICT Market Structure Shift (MSS) Screener.txt#2025-04-16_snippet_1\n\nLANGUAGE: pine\nCODE:\n```\n//_____________________________ Menu Zig Zag Start \n\ng_zz = '██████████████████ Zig Zag ██████████████████'\n\nbool i_zz_bear_show = input.bool(defval=true, title='Bearish', inline='be', group=g_zz)\nbool i_zz_bear_shift_show = input.bool(defval=true, title='Shift', inline='be', group=g_zz)\nbool i_zz_bear_ret_show = input.bool(defval=true, title='Retracement', inline='be', group=g_zz)\n\nbool i_zz_bull_show = input.bool(defval=true, title='Bullish ', inline='bu', group=g_zz)\nbool i_zz_bull_shift_show = input.bool(defval=true, title='Shift', inline='bu', group=g_zz)\nbool i_zz_bull_ret_show = input.bool(defval=true, title='Retracement', inline='bu', group=g_zz)\n\nint i_zz_period = input.int(defval=4, title='Zig Zag Length', minval=2, group=g_zz)\nstring i_zz_source = input.string(defval='High/Low', title='Source', options=['High/Low', 'Open/Close'], group=g_zz)\ntt_zz = \"• Distance between swings.\" +\n     \"\\n• Lower values mean highs and lows are closer.\"\nfloat i_zz_percent = input.float(defval=0, minval=0, step=0.1, title='% Difference >', tooltip=tt_zz, group=g_zz)\nbool i_zz_show = input.bool(defval=false, title='', inline='zz', group=g_zz)\ncolor i_zz_bull_color = input.color(defval=#1E53E5, title='Zig Zag Colors: +', inline='zz', group=g_zz)\ncolor i_zz_bear_color = input.color(defval=#1E53E5, title='-', inline='zz', group=g_zz)\ncolor i_pos_color = input.color(defval=#22AB94, title='Colors:             +', inline='c_1', group=g_zz)\ncolor i_neg_color = input.color(defval=#F7525F, title='-', inline='c_1', group=g_zz)\ncolor i_zz_bull_signal_color = input.color(defval=#70CCBD, title='Signal Colors:       +', inline='c_2', group=g_zz)\ncolor i_zz_bear_signal_color = input.color(defval=#FAA1A4, title='-', inline='c_2', group=g_zz)\nint i_zz_bx_transp = input.int(defval=75, title='Box Transparency   ', minval=0, maxval=100, group=g_zz)\n\ng_zz_f = \"Additional Filters\"\ntt_zz_f = \"• Filters remove narrow swing displacements.\" +\n \"\\n• Swing displacement means the distance between old swing high/low and new swing high/low.\" +\n \"\\n• Multiplier filtering adjusts automatically when the chart timeframe changes.\" +\n \"\\n• Percentage filter will be constant across all timeframes.\" +\n \"\\n• If you don't want any filtering, choose 'Percentage' and then change Percentage to 0.\"\nstring i_zz_filter_choice = input.string(defval='Percentage', title='Filter Using', options=['Multiplier', 'Percentage'], tooltip=tt_zz_f, group=g_zz_f)\ntt_zz_m = \"• Higher the number, filters higher swing displacement.\" +\n \"\\n• Eg: If 'Multiplier' is 2, swing displacement is 2 times than the previous swing.\"\nfloat i_zz_multiplier = input.float(defval=2, minval=1, step=0.1, title='Multiplier', tooltip=tt_zz_m, group=g_zz_f)\ntt_zz_p = \"Filters liquidity displacement above the given percentage.\"\nfloat i_zz_percentage = input.float(defval=0.7, minval=0, step=0.1, title='Percentage Above', tooltip=tt_zz_p, group=g_zz_f)\n```\n\n----------------------------------------\n\nTITLE: Implementing Label Drawing Function in Pine Script\nDESCRIPTION: Creates a custom function to draw labels with specific parameters. Allows for label text, position, color, style, and tooltip configuration.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_14\n\nLANGUAGE: pine\nCODE:\n```\nf_drawLabelX(_x, _y, _text, _xloc, _yloc, _color, _style, _textcolor, _size, _textalign, _tooltip) =>\n    var id = label.new(_x, _y, _text, _xloc, _yloc, _color, _style, _textcolor, _size, _textalign, _tooltip)\n    label.set_text(id, _text)\n    label.set_tooltip(id, _tooltip)\n    label.set_xy(id, _x, _y)\n    label.set_textcolor(id, _textcolor)\n```\n\n----------------------------------------\n\nTITLE: Multi-Symbol Scanning Function Calls\nDESCRIPTION: Multiple calls to a scanning function for different symbols (t_01 through t_40). This allows for batch processing of multiple trading instruments simultaneously.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Scanner] ICT Liquidity Void Fill Scanner.txt#2025-04-16_snippet_12\n\nLANGUAGE: pine\nCODE:\n```\nscan(t_01), scan(t_02), scan(t_03), scan(t_04), scan(t_05), scan(t_06), scan(t_07), scan(t_08), scan(t_09), scan(t_10), scan(t_11), scan(t_12), \nscan(t_13), scan(t_14), scan(t_15), scan(t_16), scan(t_17), scan(t_18), scan(t_19), scan(t_20), scan(t_21), scan(t_22), scan(t_23), scan(t_24), \nscan(t_25), scan(t_26), scan(t_27), scan(t_28), scan(t_29), scan(t_30), scan(t_31), scan(t_32), scan(t_33), scan(t_34), scan(t_35), scan(t_36), \nscan(t_37), scan(t_38), scan(t_39), scan(t_40)\n```\n\n----------------------------------------\n\nTITLE: Initializing Multi-Timeframe Magnetic Zones Indicator\nDESCRIPTION: Core indicator setup with version declaration and title configuration. Sets up the base parameters for the indicator overlay.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_0\n\nLANGUAGE: pinescript\nCODE:\n```\n//@version=5\nindicator(title='Magnetic Zones - Multi Timeframe', shorttitle='Magnetic Zones', overlay=true)\n```\n\n----------------------------------------\n\nTITLE: Fetching Multi-timeframe Data in Pine Script\nDESCRIPTION: This snippet uses the request.security function to obtain data from a higher timeframe, including price, time, ATR, and bar confirmation status.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void/ICT Liquidity Void Multi-timeframe.txt#2025-04-16_snippet_3\n\nLANGUAGE: Pine Script\nCODE:\n```\n[open_htf, high_htf, low_htf, close_htf, time_htf, atr_htf, bc_htf] =\n request.security(symbol=syminfo.tickerid, timeframe=i_lv_htf, expression=[open, high, low, close, time, ta.atr(i_lv_atr_length), barstate.isconfirmed], lookahead=barmerge.lookahead_on)\n```\n\n----------------------------------------\n\nTITLE: Initializing MZ 3 Line and Box Arrays in PineScript\nDESCRIPTION: Creates arrays to store line and box elements for the MZ 3 timeframe. These arrays will hold visual elements for various price levels, support, and resistance zones.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_17\n\nLANGUAGE: pine\nCODE:\n```\nvar mz_3_ph_ln_arr = array.new_line(), var mz_3_pl_ln_arr = array.new_line()\nvar mz_3_p_ln_arr = array.new_line()\nvar mz_3_r_1_ln_arr = array.new_line(), var mz_3_s_1_ln_arr = array.new_line()\nvar mz_3_r_2_ln_arr = array.new_line(), var mz_3_s_2_ln_arr = array.new_line()\n\nvar mz_3_r_1_s_1_bx_arr = array.new_box()\nvar mz_3_r_1_bx_arr = array.new_box(), var mz_3_s_1_bx_arr = array.new_box()\nvar mz_3_r_2_bx_arr = array.new_box(), var mz_3_s_2_bx_arr = array.new_box()\n```\n\n----------------------------------------\n\nTITLE: Configuring Display Settings for Liquidity Voids in Pine Script\nDESCRIPTION: This code block defines input parameters for customizing the visual appearance of liquidity voids, including colors, line styles, and transparency settings.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void/ICT Liquidity Void Multi-timeframe.txt#2025-04-16_snippet_2\n\nLANGUAGE: Pine Script\nCODE:\n```\ng_lv_ds = \"Display Settings\"\ncolor i_lv_bear_color = input.color(defval=#F7525F, title='Bearish Color', group=g_lv_ds)\ncolor i_lv_bull_color = input.color(defval=#22AB94, title='Bullish Color', group=g_lv_ds)\nstring i_lv_ln_style = input.string(defval=line.style_solid, title=\"Line Style\", options=[line.style_solid, line.style_dashed, line.style_dotted], group=g_lv_ds)\nint i_lv_ln_width = input.int(defval=2, title='Width', group=g_lv_ds)\nint i_lv_box_trans = input.int(defval=75, title='Box Transparency', group=g_lv_ds)\n```\n\n----------------------------------------\n\nTITLE: Fibonacci Level Calculation for Trading Signals\nDESCRIPTION: Calculates Fibonacci levels for continuous trading signals. Tracks signal highs, lows, and corresponding bar indices for both short and long positions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - RSI Directional Momentum/[Indicator] Momentum Setup - RSI Directional Momentum.txt#2025-04-16_snippet_8\n\nLANGUAGE: pinescript\nCODE:\n```\nvar float short_signal_high = na\nvar float short_signal_low = na\nvar int short_signal_bar = na\nvar float long_signal_high = na\nvar float long_signal_low = na\nvar int long_signal_bar = na\n\nif short_cont_break\n    short_signal_high := high\n    short_signal_low := low\n    short_signal_bar := bar_index\n\nif long_cont_break\n    long_signal_high := high\n    long_signal_low := low\n    long_signal_bar := bar_index\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Color Settings in PineScript\nDESCRIPTION: Establishes a color scheme for the indicator's visual elements on the chart. This includes colors for positive, negative, and neutral signals, enhancing the readability of the FVG scanner output.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Fair Value Gap (FVG) Scanner/Scanner - ICT Fair Value Gap (FVG) Scanner.txt#2025-04-16_snippet_5\n\nLANGUAGE: pinescript\nCODE:\n```\ncolor i_pos_dark_color = input.color(defval = #03110F, title = 'Positive Dark', group = g_ch)\ncolor i_pos_color = input.color(defval = #089981, title = 'Positive Mid', group = g_ch)\ncolor i_pos_light_color = input.color(defval = #ACE5DC, title = 'Positive Light', group = g_ch)\ncolor i_neg_light_color = input.color(defval = #FCCBCD, title = 'Negative Light', group = g_ch)\ncolor i_neg_color = input.color(defval = #F23645, title = 'Negative Mid', group = g_ch)\ncolor i_neg_dark_color = input.color(defval = #180809, title = 'Negative Dark', group = g_ch)\ncolor i_indicator_color = input.color(defval = #2962FF, title = 'Indicator', group = g_ch)\ncolor i_signal_color = input.color(defval = #FB8C00, title = 'Signal', group = g_ch)\ncolor i_neu_color = input.color(defval = #9598A1, title = 'Neutral Light', group = g_ch)\ncolor i_neu_mid_color = input.color(defval = #2A2E39, title = 'Neutral Mid', group = g_ch)\ncolor i_neu_dark_color = input.color(defval = #141516, title = 'Neutral Dark', group = g_ch)\n```\n\n----------------------------------------\n\nTITLE: Matrix Row Management\nDESCRIPTION: Logic to trim excess rows from the matrix data structure. If the number of rows exceeds the display limit (i_scr_tbl_disp_rows), it removes rows from the bottom until the limit is reached.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Scanner] ICT Liquidity Void Fill Scanner.txt#2025-04-16_snippet_13\n\nLANGUAGE: pine\nCODE:\n```\nif matrix.rows(matrix) > i_scr_tbl_disp_rows\n    while matrix.rows(matrix) > i_scr_tbl_disp_rows\n        matrix.remove_row(matrix, matrix.rows(matrix) - 1)\n```\n\n----------------------------------------\n\nTITLE: Additional Trade Filters Implementation\nDESCRIPTION: Implements various filters for trade signal validation including ATR, body percentage, body size, time, and date filters. Each filter can be individually enabled/disabled through input parameters.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void Fill/[Indicator] ICT Liquidity Void Fill.txt#2025-04-16_snippet_1\n\nLANGUAGE: pinescript\nCODE:\n```\n//_____________________________ Additional Filters Start\n\n// ATR Filter\nbool atr_filter = true\nif i_atr_filter\n    atr_filter := high - low > ta.atr(i_atr_length) * i_atr_multi\n\n// Body Percent Filter\nbool body_filter = true\nif i_body_filter\n    body_filter := math.abs(close - open) / (high - low) >= i_body_percent\n\n// Body Size Filter\nbool body_size_filter = true\nif i_body_size_filter\n    body_size_filter := math.abs(close - open) / (high - low) >= i_body_percent and high - low >= (high[1] - low[1]) * i_body_size_multiplier\n```\n\n----------------------------------------\n\nTITLE: Configuring Overlay Chart Data in Pine Script\nDESCRIPTION: Sets up data for overlay charts including MACD color, volume analysis, and price range calculations. Creates arrays for chart elements that will be drawn on the last bar.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/Momentum Setup - Vijay Thakare Option Buying Scalping Setup/Momentum Setup - Vijay Thakare Option Buying Scalping Setup with Scanner.txt#2025-04-16_snippet_15\n\nLANGUAGE: pine\nCODE:\n```\nsource   = close\nnzVolume = nz(volume)\n\n//------------------------------------------------------------------------------\n// Momentum : MACD Oscillator\n\nhistColor = histLine >= 0 ? histLine[1] < histLine ? i_pos_color : i_pos_light_color : histLine[1] < histLine ? i_neg_light_color : i_neg_color\n\n//------------------------------------------------------------------------------\n// Volume\n\nvolMa = ta.sma(nzVolume, i_vol_sma_length)\n\nB = nzVolume * (close - low) / (high - low)\nS = nzVolume * (high - close) / (high - low)\n\n// Draw Charts\nvar a_lines       = array.new_line()\nvar a_hist        = array.new_box()\n\n//i_display_len = 50\npriceHighest      = ta.highest(high, i_display_len)\npriceLowest       = ta.lowest (low , i_display_len)\npriceChangeRate   = (priceHighest - priceLowest) / priceHighest\n\noscHighest        = 100//ta.highest(osc, i_display_len)\nmacdHighest       = ta.highest(macdLine, i_display_len) - ta.lowest(macdLine, i_display_len)\n\nvolumeMARate      = nzVolume / volMa\nvolumeHighest     = ta.highest(nzVolume, i_display_len)\nbullCandle        = close > open\n\nif barstate.islast \n    if array.size(a_lines) > 0\n        for i = 1 to array.size(a_lines)\n            line.delete(array.shift(a_lines))\n    \n    if array.size(a_hist) > 0\n        for i = 1 to array.size(a_hist)\n```\n\n----------------------------------------\n\nTITLE: Calculating Market Profile Pivot Values\nDESCRIPTION: Defines a function to retrieve pivot values and calculates VAH, VAL, and POC pivots from previous sessions. These pivot values help track significant price levels across trading sessions.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Screener] Market Profile with Screener (Based on [RS]Market Profile by RicardoSantos).txt#2025-04-16_snippet_10\n\nLANGUAGE: pine script\nCODE:\n```\n// Function to get the pivot value\nvahl_pivot_value(src) =>\n    ta.valuewhen(session_bar_counter == 0, src[1], 0)\n\n// Get VAH and VAL pivots\nvah_pivot = vahl_pivot_value(vah_value)\nval_pivot = vahl_pivot_value(val_value)\npoc_pivot = vahl_pivot_value(math.avg(poc_upper, poc_lower))\n\n// Calculate percentage between VAH and VAL\nva_percent = ((vah_pivot - val_pivot) / val_pivot) * 100\npoc_percent = ((close - poc_pivot) / poc_pivot) * 100\n```\n\n----------------------------------------\n\nTITLE: Managing MZ 2 Chart Elements in PineScript\nDESCRIPTION: Applies the element management functions to MZ 2 timeframe arrays. This maintains a clean chart by removing older elements based on user configuration.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/[Indicator] Magnetic Zones - Multi Timeframe.txt#2025-04-16_snippet_16\n\nLANGUAGE: pine\nCODE:\n```\nshow_last_lines(mz_2_ph_ln_arr, i_mz_2_showlast)\nshow_last_lines(mz_2_pl_ln_arr, i_mz_2_showlast)\nshow_last_lines(mz_2_p_ln_arr, i_mz_2_showlast)\nshow_last_lines(mz_2_r_1_ln_arr, i_mz_2_showlast)\nshow_last_lines(mz_2_s_1_ln_arr, i_mz_2_showlast)\nshow_last_lines(mz_2_r_2_ln_arr, i_mz_2_showlast)\nshow_last_lines(mz_2_s_2_ln_arr, i_mz_2_showlast)\n\nshow_last_boxes(mz_2_r_1_s_1_bx_arr, i_mz_2_showlast)\nshow_last_boxes(mz_2_r_1_bx_arr, i_mz_2_showlast)\nshow_last_boxes(mz_2_s_1_bx_arr, i_mz_2_showlast)\nshow_last_boxes(mz_2_r_2_bx_arr, i_mz_2_showlast)\nshow_last_boxes(mz_2_s_2_bx_arr, i_mz_2_showlast)\n```\n\n----------------------------------------\n\nTITLE: Implementing Liquidity Void Analysis Functions in Pine Script\nDESCRIPTION: This section defines various functions used for liquidity void analysis, including filtering, price source determination, drawing lines and boxes, and managing arrays of visual objects.\nSOURCE: https://github.com/ArunKBhaskar/PineScript/blob/main/ICT Liquidity Void/ICT Liquidity Void Multi-timeframe.txt#2025-04-16_snippet_4\n\nLANGUAGE: Pine Script\nCODE:\n```\nfilter(prev_value, other_value, _atr_htf, _atr_multi, _percentage, _additional) =>\n    filter_atr = math.abs(prev_value - other_value) > _atr_htf * _atr_multi\n    filter_percent = math.abs((prev_value - other_value) / prev_value * 100) > _percentage\n    _additional == 'ATR' ? filter_atr : filter_percent\n\nprice_source(float prev_value, float other_value, string price_source) =>\n    price_source == 'High/Low' ? prev_value : \n     price_source == 'OTE 0.79%' ? other_value + ((prev_value - other_value) * 0.79) : \n     price_source == 'OTE 0.79%' ? other_value - ((prev_value - other_value) * 0.79) : \n     math.avg(prev_value, other_value)\n\ndraw_line(int x1_time, float y1_price, color _color)=>\n    line.new(x1=x1_time, y1=y1_price, x2=time_htf, y2=y1_price, xloc=xloc.bar_time, color=_color, style=i_lv_ln_style, width=i_lv_ln_width)\n\ndraw_box(int left_time, float top_price, float bottom_price, color _color)=>\n    box.new(left=left_time, top=top_price, right=time_htf, bottom=bottom_price, xloc=xloc.bar_time, border_color=color.new(_color, i_lv_box_trans), bgcolor=color.new(_color, i_lv_box_trans))\n```"
  }
]