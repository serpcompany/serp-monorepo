[
  {
    "owner": "datafolklabs",
    "repo": "cement",
    "content": "TITLE: Installing Cement via pip\nDESCRIPTION: This snippet shows how to install the Cement framework using pip, the Python package installer. It installs the base Cement package.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install cement\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies and Cement\nDESCRIPTION: These commands install the project's dependencies from the requirements.txt file and then installs the Cement framework itself using setup.py. It is a standard installation procedure for Python packages.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/project/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ pip install -r requirements.txt\n\n$ python setup.py install\n```\n\n----------------------------------------\n\nTITLE: Cement Core Dependency\nDESCRIPTION: Declares the core dependency for the Cement framework. It specifies that the installed Cement package should match the version defined by the cement.version variable.  This ensures compatibility between the codebase and the installed package version.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/todo-tutorial/requirements.txt#_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\ncement=={{ cement.version }}\n```\n\n----------------------------------------\n\nTITLE: Cement Core Dependency\nDESCRIPTION: Specifies the core dependency of the Cement package and its version. This line indicates that the 'cement' package is required and its version should match the value stored in the 'cement.version' variable. This is crucial for ensuring compatibility and stability of the Cement framework.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/project/requirements.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\ncement=={{ cement.version }}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Installs the required Python packages from the `requirements.txt` file using `pip` and then installs the application itself using `setup.py`.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/todo-tutorial/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install -r requirements.txt\n\n$ python setup.py install\n```\n\n----------------------------------------\n\nTITLE: Create and Activate Virtual Environment\nDESCRIPTION: These commands create a virtual environment named 'env' and then activates it.  A virtual environment isolates the project's dependencies from the system-wide Python installation, preventing conflicts. The 'make virtualenv' command is presumed to be defined in the Makefile.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/project/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ make virtualenv\n\n$ source env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment\nDESCRIPTION: Creates a virtual environment using `make virtualenv`, activates it using `source env/bin/activate`, runs the todo application using `$ todo --help`, and executes pytest with coverage using `make test`.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/todo-tutorial/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n### create a virtualenv for development\n\n$ make virtualenv\n\n$ source env/bin/activate\n\n\n### run todo cli application\n\n$ todo --help\n\n\n### run pytest / coverage\n\n$ make test\n```\n\n----------------------------------------\n\nTITLE: Run Tests and Coverage\nDESCRIPTION: This command executes the project's tests using pytest and calculates code coverage.  The 'make test' command is presumed to be defined in the Makefile and orchestrates the testing process.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/project/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ make test\n```\n\n----------------------------------------\n\nTITLE: Run CLI Application Help\nDESCRIPTION: This command executes the CLI application, represented by the variable {{ label }}, with the '--help' flag. This displays the available commands and options for the CLI application. The exact application is determined by the 'label' variable which represents the CLI application's name.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/project/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ {{ label }} --help\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies\nDESCRIPTION: This snippet showcases the structure of a `requirements.txt` file for specifying project dependencies in Python. Each line represents a package that needs to be installed, with optional version constraints. The packages listed are pytest, pytest-cov, coverage, twine, setuptools, and wheel.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/todo-tutorial/requirements-dev.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npytest\npytest-cov\ncoverage\ntwine>=1.11.0\nsetuptools>=38.6.0\nwheel>=0.31.0\n```\n\n----------------------------------------\n\nTITLE: Installing Cement CLI with pip\nDESCRIPTION: This command installs the Cement command-line interface (CLI) along with its dependencies using pip. The `[cli]` extra specifies that dependencies like PyYAML and Jinja2, which were previously included directly, are now installed as extras.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install cement[cli]\n```\n\n----------------------------------------\n\nTITLE: Installing Cement with CLI Extras\nDESCRIPTION: This snippet shows how to install Cement with optional command-line interface extras using pip.  This is intended for development purposes.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install cement[cli]\n```\n\n----------------------------------------\n\nTITLE: Cement YAML Extra Dependency\nDESCRIPTION: Specifies an extra dependency for Cement, enabling YAML configuration support. Installing Cement with the `[yaml]` extra ensures that the necessary YAML parsing library is installed. This allows developers to use YAML files for configuring their Cement applications.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/todo-tutorial/requirements.txt#_snippet_2\n\nLANGUAGE: pip\nCODE:\n```\ncement[yaml]\n```\n\n----------------------------------------\n\nTITLE: Cement Jinja2 Extra Dependency\nDESCRIPTION: Specifies an extra dependency for Cement, enabling Jinja2 templating support.  Installing Cement with the `[jinja2]` extra will also install the Jinja2 templating engine. This allows developers to use Jinja2 for rendering templates within their Cement applications.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/todo-tutorial/requirements.txt#_snippet_1\n\nLANGUAGE: pip\nCODE:\n```\ncement[jinja2]\n```\n\n----------------------------------------\n\nTITLE: Create and Upload Distribution Packages\nDESCRIPTION: These commands create distribution packages (source and wheel) and upload them to PyPi. 'make dist' generates the distribution packages, and 'make dist-upload' uploads them using the credentials configured in ~/.pypirc. These 'make' commands encapsulate the necessary steps for packaging and uploading.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/project/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ make dist\n\n$ make dist-upload\n```\n\n----------------------------------------\n\nTITLE: Releasing to PyPi\nDESCRIPTION: Creates a distribution package using `make dist` and uploads it to PyPi using `make dist-upload`.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/todo-tutorial/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ make dist\n\n$ make dist-upload\n```\n\n----------------------------------------\n\nTITLE: Build Docker Image\nDESCRIPTION: This command builds a Docker image for the Cement application using the provided Dockerfile. The 'make docker' command encapsulates the docker build process. This assumes that a Dockerfile is present in the project root directory.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/project/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ make docker\n```\n\n----------------------------------------\n\nTITLE: Running Core Tests with PDM\nDESCRIPTION: This snippet shows how to run the core tests using PDM and pytest, including coverage reporting for the `cement.core` and `tests/core` directories. It's used for testing the core functionality of the Cement framework.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npdm run pytest --cov=cement.core tests/core\n```\n\n----------------------------------------\n\nTITLE: Running All Compliance and Unit Tests via Make\nDESCRIPTION: This command executes all compliance checks and unit tests for the Cement framework. It is used to ensure code quality and adherence to coding standards.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ make test\n```\n\n----------------------------------------\n\nTITLE: Cement Colorlog Extra Dependency\nDESCRIPTION: Specifies an extra dependency for Cement, enabling colored logging support.  Installing Cement with the `[colorlog]` extra will install the colorlog package. This enables developers to use colored output in their Cement application's logs, improving readability.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/todo-tutorial/requirements.txt#_snippet_3\n\nLANGUAGE: pip\nCODE:\n```\ncement[colorlog]\n```\n\n----------------------------------------\n\nTITLE: Tinydb Dependency\nDESCRIPTION: Specifies a direct dependency on the Tinydb package.  This means Tinydb will be installed alongside Cement. Tinydb is a lightweight, document-oriented database often used for small-scale data storage within applications.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/todo-tutorial/requirements.txt#_snippet_4\n\nLANGUAGE: pip\nCODE:\n```\ntinydb\n```\n\n----------------------------------------\n\nTITLE: Run Docker Container and Execute CLI\nDESCRIPTION: This command runs the Docker container and executes the Cement CLI with the '--help' option. This allows testing the Cement application within a containerized environment and viewing the available commands.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/project/README.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker run -it {{ label }} --help\n```\n\n----------------------------------------\n\nTITLE: PyPi Credentials Configuration\nDESCRIPTION: This shows the configuration file (~/.pypirc) for storing PyPi credentials. Replace YOUR_USERNAME and YOUR_PASSWORD with the actual username and password for PyPi. This allows automated uploads to PyPi without prompting for credentials.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/project/README.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n[pypi]\nusername = YOUR_USERNAME\npassword = YOUR_PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Displaying Cement CLI Help\nDESCRIPTION: This snippet shows how to run the Cement CLI with the `--help` option to display help information.  This requires PDM to execute cement.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npdm run cement --help\n```\n\n----------------------------------------\n\nTITLE: Running Core Tests via Make\nDESCRIPTION: This snippet runs the core tests using the `make test-core` command, which is equivalent to running `pdm run pytest --cov=cement.core tests/core`.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmake test-core\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PDM (Excluding memcached)\nDESCRIPTION: This snippet shows how to install dependencies using PDM, excluding the 'memcached' dependency. The exclusion is useful in certain environments where memcached is not required or available.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npdm install --without memcached\n```\n\n----------------------------------------\n\nTITLE: Creating a PDM Virtual Environment\nDESCRIPTION: This snippet shows how to create a virtual environment using PDM.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npdm venv create\n```\n\n----------------------------------------\n\nTITLE: Installing PDM with pipx\nDESCRIPTION: This snippet shows how to install PDM using pipx. PDM is a Python package manager.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npipx install pdm\n```\n\n----------------------------------------\n\nTITLE: Launching Cement Dev Shell via Docker Compose\nDESCRIPTION: This shows the equivalent Docker Compose commands to set up and execute the Cement development environment within a Docker container. It first brings the containers up in detached mode and then executes a bash shell in the 'cement' container.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\n\n$ docker compose exec cement /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Cement Optional Dependencies\nDESCRIPTION: Defines the optional dependencies for the Cement package, including Jinja2 templating, YAML configuration, and colorized logging. These dependencies can be installed alongside the core Cement package to extend its functionality and provide additional features. They enhance Cement's capabilities for specific use cases.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/project/requirements.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\ncement[jinja2]\ncement[yaml]\ncement[colorlog]\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Compose Containers\nDESCRIPTION: This shows the docker compose ps command to list the running containers in the project and provides example output.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose ps\n        Name                      Command               State     Ports\n-------------------------------------------------------------------------\ncement_cement-py38_1    /bin/bash                        Up      \ncement_cement-py39_1    /bin/bash                        Up      \ncement_cement-py310_1   /bin/bash                        Up      \ncement_cement-py311_1   /bin/bash                        Up      \ncement_cement-py312_1   /bin/bash                        Up      \ncement_cement_1         /bin/bash                        Up      \ncement_memcached_1      docker-entrypoint.sh memcached   Up       11211/tcp\ncement_redis_1          docker-entrypoint.sh redis ...   Up       6379/tcp\n```\n\n----------------------------------------\n\nTITLE: Accessing a Specific Python Version Container\nDESCRIPTION: This shows how to access a specific Python version's container within the Docker Compose setup.  For example, the cement-py39 container.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose exec cement-py39 /bin/bash\n\n|> cement-py39 <| src #\n```\n\n----------------------------------------\n\nTITLE: Installing pipx\nDESCRIPTION: This snippet shows how to install pipx, which is used to install PDM.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install pipx\n```\n\n----------------------------------------\n\nTITLE: Defining Python project requirements\nDESCRIPTION: This snippet defines the Python packages required for the /datafolklabs/cement project. It specifies testing, coverage, and distribution tools like pytest, coverage, twine, setuptools, and wheel.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/project/requirements-dev.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\npytest\npytest-cov\ncoverage\ntwine>=1.11.0\nsetuptools>=38.6.0\nwheel>=0.31.0\n```\n\n----------------------------------------\n\nTITLE: Opening the Coverage Report via Make\nDESCRIPTION: This command opens the HTML coverage report in a web browser after running tests.  It requires the tests to be run first.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ open coverage-report/index.html\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Image\nDESCRIPTION: Builds a Docker image using `make docker` and then runs the image, executing the `todo --help` command within the container.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/todo-tutorial/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ make docker\n\n$ docker run -it todo --help\n```\n\n----------------------------------------\n\nTITLE: PyPi Credentials Configuration\nDESCRIPTION: This shows how to configure PyPi credentials in the `~/.pypirc` file with the username and password for uploading packages.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/cement/cli/templates/generate/todo-tutorial/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n[pypi]\nusername = YOUR_USERNAME\npassword = YOUR_PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Launching a Cement Dev Shell via Make\nDESCRIPTION: This make command creates all required docker containers, and launches a BASH shell within the `cement` dev container for development.\nSOURCE: https://github.com/datafolklabs/cement/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ make dev\n\n|> cement <| src #\n```"
  }
]