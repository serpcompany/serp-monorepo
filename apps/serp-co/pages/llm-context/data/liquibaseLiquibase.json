[
  {
    "owner": "liquibase",
    "repo": "liquibase",
    "content": "TITLE: Creating a Database Table with Liquibase XML ChangeSets\nDESCRIPTION: This XML changeset creates a 'person' table with five columns including a primary key ID and various varchar fields. It demonstrates how to set primary key and nullable constraints within Liquibase's schema definition format.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/liquibase-standard/src/main/resources/liquibase/examples/xml/example-changeset-xml.txt#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <changeSet id=\"1\" author=\"your.name\">\n        <createTable tableName=\"person\">\n            <column name=\"id\" type=\"int\">\n                <constraints primaryKey=\"true\"/>\n            </column>\n            <column name=\"name\" type=\"varchar(50)\">\n                <constraints nullable=\"false\"/>\n            </column>\n            <column name=\"address1\" type=\"varchar(50)\"/>\n            <column name=\"address2\" type=\"varchar(50)\"/>\n            <column name=\"city\" type=\"varchar(30)\"/>\n        </createTable>\n    </changeSet>\n```\n\n----------------------------------------\n\nTITLE: Creating a Person Table with Liquibase in JSON Format\nDESCRIPTION: This JSON defines a Liquibase changeSet that creates a 'person' table with an auto-incrementing primary key 'id' column and a 'name' column. The changeSet includes metadata like author and ID, which Liquibase uses to track change execution.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/liquibase-standard/src/main/resources/liquibase/examples/json/example-changeset-json.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"changeSet\": {\n    \"id\": \"1\",\n    \"author\": \"dev\",\n    \"changes\": [\n      {\n        \"createTable\": {\n          \"tableName\": \"person\",\n          \"columns\": [\n             {\n                \"column\": {\n                   \"name\": \"id\",\n                   \"type\": \"int\",\n                   \"autoIncrement\": true,\n                   \"constraints\": {\n                      \"primaryKey\": true,\n                      \"nullable\": false\n                   }\n                }\n             },\n             {\n                \"column\": {\n                   \"name\": \"name\",\n                   \"type\": \"varchar(255)\"\n                }\n             }\n          ]\n       }\n    }\n ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Person Table with Liquibase ChangeSets in YAML\nDESCRIPTION: This changeset creates a 'person' table with an auto-incremented integer primary key and a varchar name column. The changeset is authored by 'dev' and has the ID '1'.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/liquibase-standard/src/main/resources/liquibase/examples/yaml/example-changeset-yaml.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n -  changeSet:\n      id:  1 \n      author:  dev\n      changes:\n       - createTable:\n            tableName:  person\n            columns:\n              - column:\n                  name:  id\n                  type:  int\n                  autoIncrement:  true\n                  constraints:\n                    primaryKey:  true\n                    nullable:  false\n              - column:\n                  name:  name\n                  type:  varchar(255)\n```\n\n----------------------------------------\n\nTITLE: Creating a SQL Table with Liquibase Changeset\nDESCRIPTION: This SQL changeset creates a simple table named 'test1' with an integer primary key and a varchar field. The changeset is identified with the author 'dev' and sequence number '1', which Liquibase uses to track which changes have been applied to the database.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/liquibase-standard/src/main/resources/liquibase/examples/sql/example-changeset-sql.txt#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n--changeset dev:1\ncreate table test1(\n    id int primary key,\n    name varchar(255)\n);\n```\n\n----------------------------------------\n\nTITLE: Running Liquibase with H2 In-Memory Database Example\nDESCRIPTION: Step-by-step instructions for installing and running Liquibase with the included H2 in-memory database. The commands initialize the H2 database, run database updates, and view the change history.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nliquibase init start-h2\n```\n\nLANGUAGE: bash\nCODE:\n```\nliquibase update\n```\n\nLANGUAGE: bash\nCODE:\n```\nliquibase history\n```\n\n----------------------------------------\n\nTITLE: Creating Database Connection in Liquibase Integration Tests with Java\nDESCRIPTION: Code for obtaining a database test system connection in Liquibase integration tests using the TestSystemFactory. This snippet demonstrates how to retrieve a shared DatabaseTestSystem instance that will be available throughout the test lifecycle.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/DEVELOPING.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Shared\nprivate DatabaseTestSystem mysql = \n    (DatabaseTestSystem) Scope.getCurrentScope().getSingleton(TestSystemFactory.class).getTestSystem(\"mysql\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Database Test System for Firebird in Liquibase\nDESCRIPTION: Example implementation of a FirebirdTestSystem class that extends DatabaseTestSystem. This shows how to create Docker container support for a new database type by overriding the createContainerWrapper() method.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/DEVELOPING.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FirebirdTestSystem  extends DatabaseTestSystem {\n\n    public FirebirdTestSystem(Definition definition) {\n        super(definition);\n    }\n\n    @Override\n    protected DatabaseWrapper createContainerWrapper() throws Exception {      \n        return new DockerDatabaseWrapper(new FirebirdContainer(\n                DockerImageName.parse(getImageName()).withTag(getVersion()))\n                .withDatabaseName(getCatalog())\n                .withUsername(getUsername())\n                .withPassword(getPassword()),\n                this\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Liquibase Test Systems in YAML\nDESCRIPTION: Example YAML configuration for Liquibase test systems in liquibase.sdk.local.yml. This configuration sets default database credentials, catalogs, and specifies which databases to include in testing.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/DEVELOPING.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nliquibase:\n  sdk:\n    testSystem:\n      default:\n          username: lbuser\n          password: LiquibasePass1\n          catalog: lbcat\n          altCatalog: lbcat2\n          altSchema: lbschem2\n          altTablespace: liquibase2\n          keepRunning: true         \n      test: mysql,h2,mssql     \n      acceptLicenses: mssql\n```\n\n----------------------------------------\n\nTITLE: Defining Database Profiles in Liquibase Test Configuration\nDESCRIPTION: YAML configuration demonstrating how to define different H2 database version profiles in Liquibase test system configuration, allowing tests to target specific database versions.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/DEVELOPING.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  h2:\n    url: jdbc:h2:mem:${catalog};DB_CLOSE_DELAY=-1\n    profiles:\n      \"1.x\":\n        version: 1.4.200\n      \"2.x\":\n        version: 2.0.206\n```\n\n----------------------------------------\n\nTITLE: Liquibase Database Connection Validation Code Change\nDESCRIPTION: Code modification from PR #5745 that adds database connection verification functionality.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// Method for verifying database connection (DAT-16600)\n```\n\n----------------------------------------\n\nTITLE: Implementing liquibase.update() Method in Java\nDESCRIPTION: Adds the liquibase.update() method, likely for programmatically running Liquibase updates. This addresses an enhancement request from issue #1614.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nAddition of liquibase.update() Enhancement Request #1614 by @Betlista in https://github.com/liquibase/liquibase/pull/1638\n```\n\n----------------------------------------\n\nTITLE: Implementing uniqueConstraintExists Precondition by Columns in Liquibase XML\nDESCRIPTION: XML code showing how to use the uniqueConstraintExists precondition to check for the existence of a unique constraint by specifying the column names.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<preConditions>\n    <uniqueConstraintExists tableName=\"test_table\" columnNames=\"first_name, last_name\"/>\n</preConditions>\n```\n\n----------------------------------------\n\nTITLE: Implementing uniqueConstraintExists Precondition by Constraint Name in Liquibase XML\nDESCRIPTION: XML code demonstrating how to use the new uniqueConstraintExists precondition to check for the existence of a unique constraint by its name before running an update.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<preConditions>\n    <uniqueConstraintExists constraintName=\"uq_constraint_name\" tableName=\"test_table\"/>\n</preConditions>\n```\n\n----------------------------------------\n\nTITLE: Validating Formatted SQL Changelog in Java\nDESCRIPTION: Added validation for formatted SQL changelogs to detect invalid patterns, improving the reliability of database schema changes.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\n// Example of validating a SQL changelog\nSqlFormatter formatter = new SqlFormatter();\nString formattedSql = formatter.format(sqlChangelog);\nChangelogValidator validator = new ChangelogValidator();\nvalidator.validate(formattedSql);\n```\n\n----------------------------------------\n\nTITLE: Generating Version-Specific Autoincrement SQL for CockroachDB (SQL)\nDESCRIPTION: Liquibase now generates version-specific autoincrement SQL statements for CockroachDB identity columns. For versions earlier than 21.2, it uses SMALLSERIAL, SERIAL, and BIGSERIAL. For version 21.2 or later, it uses GENERATED BY DEFAULT AS IDENTITY.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nSMALLSERIAL, SERIAL, and BIGSERIAL\n```\n\nLANGUAGE: SQL\nCODE:\n```\nGENERATED BY DEFAULT AS IDENTITY\n```\n\n----------------------------------------\n\nTITLE: Generating Changelogs for PostgreSQL SET DEFAULT Columns (SQL)\nDESCRIPTION: Fixed the issue with generating changelogs for PostgreSQL columns that use SET DEFAULT.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE table_name ALTER COLUMN column_name SET DEFAULT default_value;\n```\n\n----------------------------------------\n\nTITLE: Supporting Double Precision Type in MySQL (SQL)\nDESCRIPTION: Added support for the double precision type in MySQL.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE example (id INT, value DOUBLE PRECISION);\n```\n\n----------------------------------------\n\nTITLE: Precise Time Data Type for PostgreSQL (SQL)\nDESCRIPTION: Fixed the time data type to be precise for PostgreSQL.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE example (id INT, timestamp TIME(6));\n```\n\n----------------------------------------\n\nTITLE: Handling Date and Time in loadData Change Type (SQL)\nDESCRIPTION: Fixed the handling of date and time in the loadData Change Type.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\n<loadData tableName=\"example_table\" file=\"data.csv\">\n    <column name=\"date_column\" type=\"DATE\"/>\n    <column name=\"time_column\" type=\"TIME\"/>\n</loadData>\n```\n\n----------------------------------------\n\nTITLE: Updating MySQL Driver in Liquibase Configuration\nDESCRIPTION: Changes the default MySQL JDBC driver class used by Liquibase to the newer com.mysql.cj.jdbc.Driver.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\ncom.mysql.cj.jdbc.Driver\n```\n\n----------------------------------------\n\nTITLE: Oracle TIMESTAMP WITH LOCAL TIME ZONE Fix\nDESCRIPTION: Fixed diffChangeLog handling for Oracle TIMESTAMP WITH LOCAL TIME ZONE data type.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: PostgreSQL BYTEA Type Mapping\nDESCRIPTION: Updated PostgreSQL blob mapping to use bytea instead of oid data type.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Oracle Script Execution Fix\nDESCRIPTION: Fixed execution of Oracle scripts with ending forward slash when using sqlFile with splitStatements=\"false\".\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Configuring LiquibaseJakartaServletListener in web.xml for Jakarta Servlet Support\nDESCRIPTION: XML configuration to enable the Liquibase Servlet listener in application servers built on the Jakarta Servlet specification instead of the traditional Java Servlet specification.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<listener>\n    <listener-class>liquibase.integration.servlet.LiquibaseJakartaServletListener</listener-class>\n</listener>\n```\n\n----------------------------------------\n\nTITLE: Handling End Delimiter in SQL Statements (SQL)\nDESCRIPTION: Fixed the issue with the endDelimiter attribute not being respected during Liquibase update. The fix ensures proper handling of trailing comments in SQL statements.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\n-- SQL statement\nSELECT * FROM table;\n-- End delimiter\n```\n\n----------------------------------------\n\nTITLE: Removing Oracle-specific SQL from Generated Scripts\nDESCRIPTION: Removes the Oracle-specific 'SET DEFINE OFF' statement from SQL scripts generated by Liquibase for Oracle databases to improve JDBC compatibility.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nSET DEFINE OFF\n```\n\n----------------------------------------\n\nTITLE: Adding DESC Keyword to ID Column in SQL Generation\nDESCRIPTION: Fixes an issue where Liquibase was not adding the 'DESC' keyword to 'id' columns in generated SQL statements.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nid DESC\n```\n\n----------------------------------------\n\nTITLE: Updating MSSQL Datetime Column Generation\nDESCRIPTION: Fixes an issue where Liquibase incorrectly generated 'datetime' data type columns when using diff & diffChangeLog commands for MSSQL databases.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\ndatetime\n```\n\n----------------------------------------\n\nTITLE: Adding Database Test Dependency in Maven POM\nDESCRIPTION: Maven dependency configuration needed to add support for a new database test system (Firebird in this example) in the liquibase-extension-testing module's pom.xml file.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/DEVELOPING.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.firebirdsql</groupId>\n    <artifactId>firebird-testcontainers-java</artifactId>\n    <version>1.2.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Introducing Liquibase Contexts Class in Java\nDESCRIPTION: A new Contexts class has been introduced to replace various string and collection types previously used for context handling. Existing interfaces are kept for backwards compatibility but marked as deprecated.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/liquibase-standard/DEV_NOTES.txt#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nliquibase.Context\n```\n\n----------------------------------------\n\nTITLE: Enhancing FormattedSqlChangeLogParser in Liquibase Java\nDESCRIPTION: Added support for multiple DBMS values in formatted SQL changelogs. Users can now specify comma-separated values without spaces for the dbms attribute.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/liquibase-standard/DEV_NOTES.txt#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nliquibase.parser.core.formattedsql.FormattedSqlChangeLogParser\n```\n\n----------------------------------------\n\nTITLE: Implementing DBMSVersionCondition in Java for Liquibase\nDESCRIPTION: Implementation of a version condition class that checks if the database version meets specified version constraints. This class enables conditional execution of change sets based on the database version, supporting operators like '=', '>=', etc.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/liquibase-standard/src/test/resources/liquibase/resource/empty.txt#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage liquibase.precondition.core;\n\nimport liquibase.database.Database;\nimport liquibase.exception.PreconditionErrorException;\nimport liquibase.exception.PreconditionFailedException;\n\nimport java.util.regex.Pattern;\n\npublic class DBMSVersionCondition extends RuntimePrecondition {\n\n    private String version;\n    private String dbms;\n\n    public DBMSVersionCondition(String value) {\n        if (value == null) {\n            return;\n        }\n        String[] splitValue = value.split(Pattern.quote(\"@\"));\n        if (splitValue.length == 2) {\n            dbms = splitValue[0];\n            version = splitValue[1];\n        } else {\n            version = value;\n        }\n    }\n\n    @Override\n    public void checkConditions(Database database) throws PreconditionFailedException, PreconditionErrorException {\n        if (dbms != null && !dbms.equalsIgnoreCase(database.getShortName())) {\n            return;\n        }\n        if (!checkVersion(database)) {\n            throw new PreconditionFailedException(\"Database version does not match requirement\", new DBMSVersionConditionFailure(version, database.getDatabaseMajorVersion() + \".\" + database.getDatabaseMinorVersion(), dbms));\n        }\n    }\n\n    private boolean checkVersion(Database database) {\n        String operator;\n        String versionString;\n        //equal by default\n        if (!version.startsWith(\"=\") && !version.startsWith(\">\") && !version.startsWith(\"<\")) {\n            operator = \"=\";\n            versionString = version;\n        } else {\n            int operatorLength;\n            if (version.substring(0, 2).equals(\"==\") || version.substring(0, 2).equals(\">=\") || version.substring(0, 2).equals(\"<=\")) {\n                operator = version.substring(0, 2);\n                operatorLength = 2;\n            } else {\n                operator = version.substring(0, 1);\n                operatorLength = 1;\n            }\n            versionString = version.substring(operatorLength);\n        }\n\n        String databaseVersion = database.getDatabaseMajorVersion() + \".\" + database.getDatabaseMinorVersion();\n\n        int comparison = compareVersions(databaseVersion, versionString);\n\n        if (operator.equals(\"=\")) {\n            return comparison == 0;\n        } else if (operator.equals(\"==\")) {\n            return comparison == 0;\n        } else if (operator.equals(\">\")) {\n            return comparison > 0;\n        } else if (operator.equals(\">=\")) {\n            return comparison >= 0;\n        } else if (operator.equals(\"<\")) {\n            return comparison < 0;\n        } else if (operator.equals(\"<=\")) {\n            return comparison <= 0;\n        } else {\n            return false;\n        }\n    }\n\n    public int compareVersions(String dbVersion, String targetVersion) {\n        String[] dbVersionParts = dbVersion.split(\"\\\\.\", 2);\n        String[] targetVersionParts = targetVersion.split(\"\\\\.\", 2);\n\n        int dbMajor = Integer.parseInt(dbVersionParts[0]);\n        int targetMajor = Integer.parseInt(targetVersionParts[0]);\n\n        if (dbMajor != targetMajor) {\n            return dbMajor - targetMajor;\n        }\n\n        int dbMinor = Integer.parseInt(dbVersionParts[1]);\n        int targetMinor = Integer.parseInt(targetVersionParts[1]);\n\n        return dbMinor - targetMinor;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing DBMSVersionConditionFailure in Java for Liquibase\nDESCRIPTION: Failure class that provides error details when a database version condition fails. This class captures the expected version, actual version, and optional database type for reporting meaningful error messages.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/liquibase-standard/src/test/resources/liquibase/resource/empty.txt#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage liquibase.precondition.core;\n\nimport liquibase.exception.FailedPrecondition;\n\npublic class DBMSVersionConditionFailure extends FailedPrecondition {\n    private String expectedVersion;\n    private String currentVersion;\n    private String dbms;\n\n    public DBMSVersionConditionFailure(String expectedVersion, String currentVersion, String dbms) {\n        this.expectedVersion = expectedVersion;\n        this.currentVersion = currentVersion;\n        this.dbms = dbms;\n    }\n\n    @Override\n    public String getFailureMessage() {\n        return \"Version condition failed\";\n    }\n\n    @Override\n    public String getDetails() {\n        String dbmsMessage = \"any database\";\n        if (dbms != null) {\n            dbmsMessage = \"database \" + dbms;\n        }\n        return \"Expected \" + dbmsMessage + \" to have version \" + expectedVersion + \", but got \" + currentVersion;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing ThreadLocalScopeManager in Java\nDESCRIPTION: Creates a new ThreadLocalScopeManager class. This likely manages scopes using thread-local storage for improved concurrency handling in Liquibase.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nCreated ThreadLocalScopeManager by @nvoxland in https://github.com/liquibase/liquibase/pull/3240\n```\n\n----------------------------------------\n\nTITLE: Creating liquibase_autocomplete.zsh Script\nDESCRIPTION: Adds a Zsh autocomplete script for Liquibase commands, improving the command-line experience for Zsh users.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nCreate liquibase_autocomplete.zsh by @szandany in https://github.com/liquibase/liquibase/pull/3130\n```\n\n----------------------------------------\n\nTITLE: Upgrading MSSQL Driver in Java\nDESCRIPTION: The MSSQL driver was upgraded from 8.x to 10.2.0, changing the default encryption setting. To handle self-signed certificates, users must add 'encrypt=false', 'trustServerCertificate=true', or add the server certificate to Java's trusted certificate list.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n// Example connection string changes:\n// Old: jdbc:sqlserver://localhost;databaseName=mydb\n// New: jdbc:sqlserver://localhost;databaseName=mydb;encrypt=false\n// Or:  jdbc:sqlserver://localhost;databaseName=mydb;trustServerCertificate=true\n```\n\n----------------------------------------\n\nTITLE: Handling Null Class Package Names in Java Logging\nDESCRIPTION: Improved logging system to correctly handle null class package names, enhancing error reporting and debugging capabilities.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n// Example of logging with potentially null package name\nLogger logger = LoggerFactory.getLogger(getClass());\nlogger.info(\"Logging from class: {}\", getClass().getName());\n```\n\n----------------------------------------\n\nTITLE: TODO: Implementing DbmsSet in Liquibase Java\nDESCRIPTION: A planned implementation for DbmsSet, similar to the Contexts class, to handle database management system usage more consistently.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/liquibase-standard/DEV_NOTES.txt#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nliquibase.DbmsSet\n```\n\n----------------------------------------\n\nTITLE: Updating Homebrew Formula for Liquibase\nDESCRIPTION: Instructions for updating the Homebrew formula (liquibase.rb) with new version URLs and SHA256 checksums. This process ensures Homebrew users can install the latest version of Liquibase.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/RELEASING.txt#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nurl \"https://download.liquibase.org/download/?frm=n\"\nsha256 \"<checksum>\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Liquibase ASCII Art Banner in Text\nDESCRIPTION: This ASCII art banner represents the Liquibase logo and name. It also includes information about where to find Liquibase documentation and certified courses. The banner is designed to be visually appealing when displayed in a monospace font.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/liquibase-standard/src/main/resources/liquibase/banner.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n####################################################\n##   _     _             _ _                      ##\n##  | |   (_)           (_) |                     ##\n##  | |    _  __ _ _   _ _| |__   __ _ ___  ___   ##\n##  | |   | |/ _` | | | | | '_ \\ / _` / __|/ _ \\  ##\n##  | |___| | (_| | |_| | | |_) | (_| \\__ \\  __/  ##\n##  \\_____/_|\\__, |\\__,_|_|_.__/ \\__,_|___/\\___|  ##\n##              | |                               ##\n##              |_|                               ##\n##                                                ## \n##  Get documentation at docs.liquibase.com       ##\n##  Get certified courses at learn.liquibase.com  ## \n##                                                ##\n####################################################\n```\n\n----------------------------------------\n\nTITLE: Sonar Test Directory Configuration Comment\nDESCRIPTION: Comment explaining the existence of this placeholder file to meet Sonar's test directory structure requirements. Sonar requires consistency in test directory presence - either both Java and Groovy test directories must exist, or neither should exist.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/liquibase-maven-plugin/src/test/groovy/README.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# The reason this file exists is that SONAR expects either BOTH src/test/java AND src/test/groovy to exist, or NONE\\n# of these two.\n```\n\n----------------------------------------\n\nTITLE: Sonar Test Directory Configuration Comment\nDESCRIPTION: Comment explaining Sonar's requirement that both src/test/java and src/test/groovy directories must either both exist or both be absent.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/liquibase-cdi/src/test/groovy/README.txt#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# The reason this file exists is that SONAR expects either BOTH src/test/java AND src/test/groovy to exist, or NONE\\n# of these two.\n```\n\n----------------------------------------\n\nTITLE: No code snippets found\nDESCRIPTION: This text contains version control changelogs and bug reports but no actual code snippets.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Liquibase Workflow Configuration Update\nDESCRIPTION: GitHub Actions workflow modification for weekly integration tests.\nSOURCE: https://github.com/liquibase/liquibase/blob/master/changelog.txt#2025-04-23_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# cleanup weekly-integration-tests.yml (DAT-17400)\n```"
  }
]